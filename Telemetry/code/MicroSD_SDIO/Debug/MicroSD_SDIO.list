
MicroSD_SDIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014828  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002068  08014a28  08014a28  00024a28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016a90  08016a90  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  08016a90  08016a90  00026a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016a98  08016a98  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016a98  08016a98  00026a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016a9c  08016a9c  00026a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08016aa0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002c74  200001e8  08016c84  000301e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002e5c  08016c84  00032e5c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000291f5  00000000  00000000  00030212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005908  00000000  00000000  00059407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f20  00000000  00000000  0005ed10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c88  00000000  00000000  00060c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000304e1  00000000  00000000  000628b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c84d  00000000  00000000  00092d99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001149d4  00000000  00000000  000bf5e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001d3fba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009820  00000000  00000000  001d400c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e8 	.word	0x200001e8
 800021c:	00000000 	.word	0x00000000
 8000220:	08014a10 	.word	0x08014a10

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001ec 	.word	0x200001ec
 800023c:	08014a10 	.word	0x08014a10

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9ac 	b.w	80009d8 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468e      	mov	lr, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	d14d      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000716:	428a      	cmp	r2, r1
 8000718:	4694      	mov	ip, r2
 800071a:	d969      	bls.n	80007f0 <__udivmoddi4+0xe8>
 800071c:	fab2 f282 	clz	r2, r2
 8000720:	b152      	cbz	r2, 8000738 <__udivmoddi4+0x30>
 8000722:	fa01 f302 	lsl.w	r3, r1, r2
 8000726:	f1c2 0120 	rsb	r1, r2, #32
 800072a:	fa20 f101 	lsr.w	r1, r0, r1
 800072e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000732:	ea41 0e03 	orr.w	lr, r1, r3
 8000736:	4094      	lsls	r4, r2
 8000738:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800073c:	0c21      	lsrs	r1, r4, #16
 800073e:	fbbe f6f8 	udiv	r6, lr, r8
 8000742:	fa1f f78c 	uxth.w	r7, ip
 8000746:	fb08 e316 	mls	r3, r8, r6, lr
 800074a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800074e:	fb06 f107 	mul.w	r1, r6, r7
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f106 30ff 	add.w	r0, r6, #4294967295
 800075e:	f080 811f 	bcs.w	80009a0 <__udivmoddi4+0x298>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 811c 	bls.w	80009a0 <__udivmoddi4+0x298>
 8000768:	3e02      	subs	r6, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a5b      	subs	r3, r3, r1
 800076e:	b2a4      	uxth	r4, r4
 8000770:	fbb3 f0f8 	udiv	r0, r3, r8
 8000774:	fb08 3310 	mls	r3, r8, r0, r3
 8000778:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800077c:	fb00 f707 	mul.w	r7, r0, r7
 8000780:	42a7      	cmp	r7, r4
 8000782:	d90a      	bls.n	800079a <__udivmoddi4+0x92>
 8000784:	eb1c 0404 	adds.w	r4, ip, r4
 8000788:	f100 33ff 	add.w	r3, r0, #4294967295
 800078c:	f080 810a 	bcs.w	80009a4 <__udivmoddi4+0x29c>
 8000790:	42a7      	cmp	r7, r4
 8000792:	f240 8107 	bls.w	80009a4 <__udivmoddi4+0x29c>
 8000796:	4464      	add	r4, ip
 8000798:	3802      	subs	r0, #2
 800079a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800079e:	1be4      	subs	r4, r4, r7
 80007a0:	2600      	movs	r6, #0
 80007a2:	b11d      	cbz	r5, 80007ac <__udivmoddi4+0xa4>
 80007a4:	40d4      	lsrs	r4, r2
 80007a6:	2300      	movs	r3, #0
 80007a8:	e9c5 4300 	strd	r4, r3, [r5]
 80007ac:	4631      	mov	r1, r6
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d909      	bls.n	80007ca <__udivmoddi4+0xc2>
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	f000 80ef 	beq.w	800099a <__udivmoddi4+0x292>
 80007bc:	2600      	movs	r6, #0
 80007be:	e9c5 0100 	strd	r0, r1, [r5]
 80007c2:	4630      	mov	r0, r6
 80007c4:	4631      	mov	r1, r6
 80007c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ca:	fab3 f683 	clz	r6, r3
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d14a      	bne.n	8000868 <__udivmoddi4+0x160>
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d302      	bcc.n	80007dc <__udivmoddi4+0xd4>
 80007d6:	4282      	cmp	r2, r0
 80007d8:	f200 80f9 	bhi.w	80009ce <__udivmoddi4+0x2c6>
 80007dc:	1a84      	subs	r4, r0, r2
 80007de:	eb61 0303 	sbc.w	r3, r1, r3
 80007e2:	2001      	movs	r0, #1
 80007e4:	469e      	mov	lr, r3
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	d0e0      	beq.n	80007ac <__udivmoddi4+0xa4>
 80007ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ee:	e7dd      	b.n	80007ac <__udivmoddi4+0xa4>
 80007f0:	b902      	cbnz	r2, 80007f4 <__udivmoddi4+0xec>
 80007f2:	deff      	udf	#255	; 0xff
 80007f4:	fab2 f282 	clz	r2, r2
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	f040 8092 	bne.w	8000922 <__udivmoddi4+0x21a>
 80007fe:	eba1 010c 	sub.w	r1, r1, ip
 8000802:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000806:	fa1f fe8c 	uxth.w	lr, ip
 800080a:	2601      	movs	r6, #1
 800080c:	0c20      	lsrs	r0, r4, #16
 800080e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000812:	fb07 1113 	mls	r1, r7, r3, r1
 8000816:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800081a:	fb0e f003 	mul.w	r0, lr, r3
 800081e:	4288      	cmp	r0, r1
 8000820:	d908      	bls.n	8000834 <__udivmoddi4+0x12c>
 8000822:	eb1c 0101 	adds.w	r1, ip, r1
 8000826:	f103 38ff 	add.w	r8, r3, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x12a>
 800082c:	4288      	cmp	r0, r1
 800082e:	f200 80cb 	bhi.w	80009c8 <__udivmoddi4+0x2c0>
 8000832:	4643      	mov	r3, r8
 8000834:	1a09      	subs	r1, r1, r0
 8000836:	b2a4      	uxth	r4, r4
 8000838:	fbb1 f0f7 	udiv	r0, r1, r7
 800083c:	fb07 1110 	mls	r1, r7, r0, r1
 8000840:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000844:	fb0e fe00 	mul.w	lr, lr, r0
 8000848:	45a6      	cmp	lr, r4
 800084a:	d908      	bls.n	800085e <__udivmoddi4+0x156>
 800084c:	eb1c 0404 	adds.w	r4, ip, r4
 8000850:	f100 31ff 	add.w	r1, r0, #4294967295
 8000854:	d202      	bcs.n	800085c <__udivmoddi4+0x154>
 8000856:	45a6      	cmp	lr, r4
 8000858:	f200 80bb 	bhi.w	80009d2 <__udivmoddi4+0x2ca>
 800085c:	4608      	mov	r0, r1
 800085e:	eba4 040e 	sub.w	r4, r4, lr
 8000862:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000866:	e79c      	b.n	80007a2 <__udivmoddi4+0x9a>
 8000868:	f1c6 0720 	rsb	r7, r6, #32
 800086c:	40b3      	lsls	r3, r6
 800086e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000872:	ea4c 0c03 	orr.w	ip, ip, r3
 8000876:	fa20 f407 	lsr.w	r4, r0, r7
 800087a:	fa01 f306 	lsl.w	r3, r1, r6
 800087e:	431c      	orrs	r4, r3
 8000880:	40f9      	lsrs	r1, r7
 8000882:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000886:	fa00 f306 	lsl.w	r3, r0, r6
 800088a:	fbb1 f8f9 	udiv	r8, r1, r9
 800088e:	0c20      	lsrs	r0, r4, #16
 8000890:	fa1f fe8c 	uxth.w	lr, ip
 8000894:	fb09 1118 	mls	r1, r9, r8, r1
 8000898:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800089c:	fb08 f00e 	mul.w	r0, r8, lr
 80008a0:	4288      	cmp	r0, r1
 80008a2:	fa02 f206 	lsl.w	r2, r2, r6
 80008a6:	d90b      	bls.n	80008c0 <__udivmoddi4+0x1b8>
 80008a8:	eb1c 0101 	adds.w	r1, ip, r1
 80008ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80008b0:	f080 8088 	bcs.w	80009c4 <__udivmoddi4+0x2bc>
 80008b4:	4288      	cmp	r0, r1
 80008b6:	f240 8085 	bls.w	80009c4 <__udivmoddi4+0x2bc>
 80008ba:	f1a8 0802 	sub.w	r8, r8, #2
 80008be:	4461      	add	r1, ip
 80008c0:	1a09      	subs	r1, r1, r0
 80008c2:	b2a4      	uxth	r4, r4
 80008c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008c8:	fb09 1110 	mls	r1, r9, r0, r1
 80008cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d4:	458e      	cmp	lr, r1
 80008d6:	d908      	bls.n	80008ea <__udivmoddi4+0x1e2>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e0:	d26c      	bcs.n	80009bc <__udivmoddi4+0x2b4>
 80008e2:	458e      	cmp	lr, r1
 80008e4:	d96a      	bls.n	80009bc <__udivmoddi4+0x2b4>
 80008e6:	3802      	subs	r0, #2
 80008e8:	4461      	add	r1, ip
 80008ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ee:	fba0 9402 	umull	r9, r4, r0, r2
 80008f2:	eba1 010e 	sub.w	r1, r1, lr
 80008f6:	42a1      	cmp	r1, r4
 80008f8:	46c8      	mov	r8, r9
 80008fa:	46a6      	mov	lr, r4
 80008fc:	d356      	bcc.n	80009ac <__udivmoddi4+0x2a4>
 80008fe:	d053      	beq.n	80009a8 <__udivmoddi4+0x2a0>
 8000900:	b15d      	cbz	r5, 800091a <__udivmoddi4+0x212>
 8000902:	ebb3 0208 	subs.w	r2, r3, r8
 8000906:	eb61 010e 	sbc.w	r1, r1, lr
 800090a:	fa01 f707 	lsl.w	r7, r1, r7
 800090e:	fa22 f306 	lsr.w	r3, r2, r6
 8000912:	40f1      	lsrs	r1, r6
 8000914:	431f      	orrs	r7, r3
 8000916:	e9c5 7100 	strd	r7, r1, [r5]
 800091a:	2600      	movs	r6, #0
 800091c:	4631      	mov	r1, r6
 800091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000922:	f1c2 0320 	rsb	r3, r2, #32
 8000926:	40d8      	lsrs	r0, r3
 8000928:	fa0c fc02 	lsl.w	ip, ip, r2
 800092c:	fa21 f303 	lsr.w	r3, r1, r3
 8000930:	4091      	lsls	r1, r2
 8000932:	4301      	orrs	r1, r0
 8000934:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000938:	fa1f fe8c 	uxth.w	lr, ip
 800093c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000940:	fb07 3610 	mls	r6, r7, r0, r3
 8000944:	0c0b      	lsrs	r3, r1, #16
 8000946:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800094a:	fb00 f60e 	mul.w	r6, r0, lr
 800094e:	429e      	cmp	r6, r3
 8000950:	fa04 f402 	lsl.w	r4, r4, r2
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0x260>
 8000956:	eb1c 0303 	adds.w	r3, ip, r3
 800095a:	f100 38ff 	add.w	r8, r0, #4294967295
 800095e:	d22f      	bcs.n	80009c0 <__udivmoddi4+0x2b8>
 8000960:	429e      	cmp	r6, r3
 8000962:	d92d      	bls.n	80009c0 <__udivmoddi4+0x2b8>
 8000964:	3802      	subs	r0, #2
 8000966:	4463      	add	r3, ip
 8000968:	1b9b      	subs	r3, r3, r6
 800096a:	b289      	uxth	r1, r1
 800096c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000970:	fb07 3316 	mls	r3, r7, r6, r3
 8000974:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000978:	fb06 f30e 	mul.w	r3, r6, lr
 800097c:	428b      	cmp	r3, r1
 800097e:	d908      	bls.n	8000992 <__udivmoddi4+0x28a>
 8000980:	eb1c 0101 	adds.w	r1, ip, r1
 8000984:	f106 38ff 	add.w	r8, r6, #4294967295
 8000988:	d216      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 800098a:	428b      	cmp	r3, r1
 800098c:	d914      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800098e:	3e02      	subs	r6, #2
 8000990:	4461      	add	r1, ip
 8000992:	1ac9      	subs	r1, r1, r3
 8000994:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000998:	e738      	b.n	800080c <__udivmoddi4+0x104>
 800099a:	462e      	mov	r6, r5
 800099c:	4628      	mov	r0, r5
 800099e:	e705      	b.n	80007ac <__udivmoddi4+0xa4>
 80009a0:	4606      	mov	r6, r0
 80009a2:	e6e3      	b.n	800076c <__udivmoddi4+0x64>
 80009a4:	4618      	mov	r0, r3
 80009a6:	e6f8      	b.n	800079a <__udivmoddi4+0x92>
 80009a8:	454b      	cmp	r3, r9
 80009aa:	d2a9      	bcs.n	8000900 <__udivmoddi4+0x1f8>
 80009ac:	ebb9 0802 	subs.w	r8, r9, r2
 80009b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009b4:	3801      	subs	r0, #1
 80009b6:	e7a3      	b.n	8000900 <__udivmoddi4+0x1f8>
 80009b8:	4646      	mov	r6, r8
 80009ba:	e7ea      	b.n	8000992 <__udivmoddi4+0x28a>
 80009bc:	4620      	mov	r0, r4
 80009be:	e794      	b.n	80008ea <__udivmoddi4+0x1e2>
 80009c0:	4640      	mov	r0, r8
 80009c2:	e7d1      	b.n	8000968 <__udivmoddi4+0x260>
 80009c4:	46d0      	mov	r8, sl
 80009c6:	e77b      	b.n	80008c0 <__udivmoddi4+0x1b8>
 80009c8:	3b02      	subs	r3, #2
 80009ca:	4461      	add	r1, ip
 80009cc:	e732      	b.n	8000834 <__udivmoddi4+0x12c>
 80009ce:	4630      	mov	r0, r6
 80009d0:	e709      	b.n	80007e6 <__udivmoddi4+0xde>
 80009d2:	4464      	add	r4, ip
 80009d4:	3802      	subs	r0, #2
 80009d6:	e742      	b.n	800085e <__udivmoddi4+0x156>

080009d8 <__aeabi_idiv0>:
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <MLX90640_DumpEE>:
int CheckAdjacentPixels(uint16_t pix1, uint16_t pix2);  
float GetMedian(float *values, int n);
int IsPixelBad(uint16_t pixel,paramsMLX90640 *params);
  
int MLX90640_DumpEE(uint8_t slaveAddr, uint16_t *eeData)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	6039      	str	r1, [r7, #0]
 80009e6:	71fb      	strb	r3, [r7, #7]
     return MLX90640_I2CRead(slaveAddr, 0x2400, 832, eeData);
 80009e8:	79f8      	ldrb	r0, [r7, #7]
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	f44f 7250 	mov.w	r2, #832	; 0x340
 80009f0:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 80009f4:	f001 ffa0 	bl	8002938 <MLX90640_I2CRead>
 80009f8:	4603      	mov	r3, r0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <MLX90640_ExtractParameters>:
    printf("%d \n", frameData[833]);
    return frameData[833];    
}

int MLX90640_ExtractParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b084      	sub	sp, #16
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
 8000a0a:	6039      	str	r1, [r7, #0]
    int error = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60fb      	str	r3, [r7, #12]
    
    ExtractVDDParameters(eeData, mlx90640);
 8000a10:	6839      	ldr	r1, [r7, #0]
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f000 f88d 	bl	8000b32 <ExtractVDDParameters>
    ExtractPTATParameters(eeData, mlx90640);
 8000a18:	6839      	ldr	r1, [r7, #0]
 8000a1a:	6878      	ldr	r0, [r7, #4]
 8000a1c:	f000 f8c4 	bl	8000ba8 <ExtractPTATParameters>
    ExtractGainParameters(eeData, mlx90640);
 8000a20:	6839      	ldr	r1, [r7, #0]
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f000 f944 	bl	8000cb0 <ExtractGainParameters>
    ExtractTgcParameters(eeData, mlx90640);
 8000a28:	6839      	ldr	r1, [r7, #0]
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	f000 f952 	bl	8000cd4 <ExtractTgcParameters>
    ExtractResolutionParameters(eeData, mlx90640);
 8000a30:	6839      	ldr	r1, [r7, #0]
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f000 f986 	bl	8000d44 <ExtractResolutionParameters>
    ExtractKsTaParameters(eeData, mlx90640);
 8000a38:	6839      	ldr	r1, [r7, #0]
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f000 f99a 	bl	8000d74 <ExtractKsTaParameters>
    ExtractKsToParameters(eeData, mlx90640);
 8000a40:	6839      	ldr	r1, [r7, #0]
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f000 f9ce 	bl	8000de4 <ExtractKsToParameters>
    ExtractCPParameters(eeData, mlx90640);
 8000a48:	6839      	ldr	r1, [r7, #0]
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f001 fc64 	bl	8002318 <ExtractCPParameters>
    ExtractAlphaParameters(eeData, mlx90640);
 8000a50:	6839      	ldr	r1, [r7, #0]
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f000 faac 	bl	8000fb0 <ExtractAlphaParameters>
    ExtractOffsetParameters(eeData, mlx90640);
 8000a58:	6839      	ldr	r1, [r7, #0]
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f000 fe06 	bl	800166c <ExtractOffsetParameters>
    ExtractKtaPixelParameters(eeData, mlx90640);
 8000a60:	6839      	ldr	r1, [r7, #0]
 8000a62:	6878      	ldr	r0, [r7, #4]
 8000a64:	f001 f83c 	bl	8001ae0 <ExtractKtaPixelParameters>
    ExtractKvPixelParameters(eeData, mlx90640);
 8000a68:	6839      	ldr	r1, [r7, #0]
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f001 fa6c 	bl	8001f48 <ExtractKvPixelParameters>
    ExtractCILCParameters(eeData, mlx90640);
 8000a70:	6839      	ldr	r1, [r7, #0]
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	f001 fd94 	bl	80025a0 <ExtractCILCParameters>
    error = ExtractDeviatingPixels(eeData, mlx90640);  
 8000a78:	6839      	ldr	r1, [r7, #0]
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f001 fe30 	bl	80026e0 <ExtractDeviatingPixels>
 8000a80:	60f8      	str	r0, [r7, #12]
    
    return error;
 8000a82:	68fb      	ldr	r3, [r7, #12]

}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3710      	adds	r7, #16
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <MLX90640_SetRefreshRate>:
}

//------------------------------------------------------------------------------

int MLX90640_SetRefreshRate(uint8_t slaveAddr, uint8_t refreshRate)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	460a      	mov	r2, r1
 8000a96:	71fb      	strb	r3, [r7, #7]
 8000a98:	4613      	mov	r3, r2
 8000a9a:	71bb      	strb	r3, [r7, #6]
    uint16_t controlRegister1;
    int value;
    int error;
    
    value = (refreshRate & 0x07)<<7;
 8000a9c:	79bb      	ldrb	r3, [r7, #6]
 8000a9e:	01db      	lsls	r3, r3, #7
 8000aa0:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000aa4:	613b      	str	r3, [r7, #16]
    
    error = MLX90640_I2CRead(slaveAddr, 0x800D, 1, &controlRegister1);
 8000aa6:	f107 030e 	add.w	r3, r7, #14
 8000aaa:	79f8      	ldrb	r0, [r7, #7]
 8000aac:	2201      	movs	r2, #1
 8000aae:	f248 010d 	movw	r1, #32781	; 0x800d
 8000ab2:	f001 ff41 	bl	8002938 <MLX90640_I2CRead>
 8000ab6:	6178      	str	r0, [r7, #20]
    if(error == 0)
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d110      	bne.n	8000ae0 <MLX90640_SetRefreshRate+0x54>
    {
        value = (controlRegister1 & 0xFC7F) | value;
 8000abe:	89fb      	ldrh	r3, [r7, #14]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	f64f 437f 	movw	r3, #64639	; 0xfc7f
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	693a      	ldr	r2, [r7, #16]
 8000aca:	4313      	orrs	r3, r2
 8000acc:	613b      	str	r3, [r7, #16]
        error = MLX90640_I2CWrite(slaveAddr, 0x800D, value);
 8000ace:	693b      	ldr	r3, [r7, #16]
 8000ad0:	b29a      	uxth	r2, r3
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	f248 010d 	movw	r1, #32781	; 0x800d
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f001 ff7d 	bl	80029d8 <MLX90640_I2CWrite>
 8000ade:	6178      	str	r0, [r7, #20]
    }    
    
    return error;
 8000ae0:	697b      	ldr	r3, [r7, #20]
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3718      	adds	r7, #24
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <MLX90640_SetChessMode>:
}

//------------------------------------------------------------------------------

int MLX90640_SetChessMode(uint8_t slaveAddr)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b086      	sub	sp, #24
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	4603      	mov	r3, r0
 8000af2:	71fb      	strb	r3, [r7, #7]
    uint16_t controlRegister1;
    int value;
    int error;
        
    error = MLX90640_I2CRead(slaveAddr, 0x800D, 1, &controlRegister1);
 8000af4:	f107 030e 	add.w	r3, r7, #14
 8000af8:	79f8      	ldrb	r0, [r7, #7]
 8000afa:	2201      	movs	r2, #1
 8000afc:	f248 010d 	movw	r1, #32781	; 0x800d
 8000b00:	f001 ff1a 	bl	8002938 <MLX90640_I2CRead>
 8000b04:	6178      	str	r0, [r7, #20]
    
    if(error == 0)
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d10d      	bne.n	8000b28 <MLX90640_SetChessMode+0x3e>
    {
        value = (controlRegister1 | 0x1000);
 8000b0c:	89fb      	ldrh	r3, [r7, #14]
 8000b0e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b12:	b29b      	uxth	r3, r3
 8000b14:	613b      	str	r3, [r7, #16]
        error = MLX90640_I2CWrite(slaveAddr, 0x800D, value);        
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	b29a      	uxth	r2, r3
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	f248 010d 	movw	r1, #32781	; 0x800d
 8000b20:	4618      	mov	r0, r3
 8000b22:	f001 ff59 	bl	80029d8 <MLX90640_I2CWrite>
 8000b26:	6178      	str	r0, [r7, #20]
    }    
    
    return error;
 8000b28:	697b      	ldr	r3, [r7, #20]
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <ExtractVDDParameters>:
}

//------------------------------------------------------------------------------

void ExtractVDDParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8000b32:	b480      	push	{r7}
 8000b34:	b085      	sub	sp, #20
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
 8000b3a:	6039      	str	r1, [r7, #0]
    int16_t kVdd;
    int16_t vdd25;
    
    kVdd = eeData[51];
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3366      	adds	r3, #102	; 0x66
 8000b40:	881b      	ldrh	r3, [r3, #0]
 8000b42:	81fb      	strh	r3, [r7, #14]
    
    kVdd = (eeData[51] & 0xFF00) >> 8;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3366      	adds	r3, #102	; 0x66
 8000b48:	881b      	ldrh	r3, [r3, #0]
 8000b4a:	0a1b      	lsrs	r3, r3, #8
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	81fb      	strh	r3, [r7, #14]
    if(kVdd > 127)
 8000b50:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b54:	2b7f      	cmp	r3, #127	; 0x7f
 8000b56:	dd04      	ble.n	8000b62 <ExtractVDDParameters+0x30>
    {
        kVdd = kVdd - 256;
 8000b58:	89fb      	ldrh	r3, [r7, #14]
 8000b5a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	81fb      	strh	r3, [r7, #14]
    }
    kVdd = 32 * kVdd;
 8000b62:	89fb      	ldrh	r3, [r7, #14]
 8000b64:	015b      	lsls	r3, r3, #5
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	81fb      	strh	r3, [r7, #14]
    vdd25 = eeData[51] & 0x00FF;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	3366      	adds	r3, #102	; 0x66
 8000b6e:	881b      	ldrh	r3, [r3, #0]
 8000b70:	b21b      	sxth	r3, r3
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	81bb      	strh	r3, [r7, #12]
    vdd25 = ((vdd25 - 256) << 5) - 8192;
 8000b76:	89bb      	ldrh	r3, [r7, #12]
 8000b78:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	015b      	lsls	r3, r3, #5
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	81bb      	strh	r3, [r7, #12]
    
    mlx90640->kVdd = kVdd;
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	89fa      	ldrh	r2, [r7, #14]
 8000b8e:	801a      	strh	r2, [r3, #0]
    mlx90640->vdd25 = vdd25; 
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	89ba      	ldrh	r2, [r7, #12]
 8000b94:	805a      	strh	r2, [r3, #2]
}
 8000b96:	bf00      	nop
 8000b98:	3714      	adds	r7, #20
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	0000      	movs	r0, r0
 8000ba4:	0000      	movs	r0, r0
	...

08000ba8 <ExtractPTATParameters>:

//------------------------------------------------------------------------------

void ExtractPTATParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b087      	sub	sp, #28
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
    float KvPTAT;
    float KtPTAT;
    int16_t vPTAT25;
    float alphaPTAT;
    
    KvPTAT = (eeData[50] & 0xFC00) >> 10;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	3364      	adds	r3, #100	; 0x64
 8000bb6:	881b      	ldrh	r3, [r3, #0]
 8000bb8:	0a9b      	lsrs	r3, r3, #10
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	ee07 3a90 	vmov	s15, r3
 8000bc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bc4:	edc7 7a05 	vstr	s15, [r7, #20]
    if(KvPTAT > 31)
 8000bc8:	edd7 7a05 	vldr	s15, [r7, #20]
 8000bcc:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8000bd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bd8:	dd07      	ble.n	8000bea <ExtractPTATParameters+0x42>
    {
        KvPTAT = KvPTAT - 64;
 8000bda:	edd7 7a05 	vldr	s15, [r7, #20]
 8000bde:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8000ca0 <ExtractPTATParameters+0xf8>
 8000be2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000be6:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    KvPTAT = KvPTAT/4096;
 8000bea:	ed97 7a05 	vldr	s14, [r7, #20]
 8000bee:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8000ca4 <ExtractPTATParameters+0xfc>
 8000bf2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bf6:	edc7 7a05 	vstr	s15, [r7, #20]
    
    KtPTAT = eeData[50] & 0x03FF;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	3364      	adds	r3, #100	; 0x64
 8000bfe:	881b      	ldrh	r3, [r3, #0]
 8000c00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000c04:	ee07 3a90 	vmov	s15, r3
 8000c08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c0c:	edc7 7a04 	vstr	s15, [r7, #16]
    if(KtPTAT > 511)
 8000c10:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c14:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8000ca8 <ExtractPTATParameters+0x100>
 8000c18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c20:	dd07      	ble.n	8000c32 <ExtractPTATParameters+0x8a>
    {
        KtPTAT = KtPTAT - 1024;
 8000c22:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c26:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8000cac <ExtractPTATParameters+0x104>
 8000c2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000c2e:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    KtPTAT = KtPTAT/8;
 8000c32:	ed97 7a04 	vldr	s14, [r7, #16]
 8000c36:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8000c3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c3e:	edc7 7a04 	vstr	s15, [r7, #16]
    
    vPTAT25 = eeData[49];
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	3362      	adds	r3, #98	; 0x62
 8000c46:	881b      	ldrh	r3, [r3, #0]
 8000c48:	81fb      	strh	r3, [r7, #14]
    
    alphaPTAT = (eeData[16] & 0xF000) / pow(2, (double)14) + 8.0f;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	3320      	adds	r3, #32
 8000c4e:	881b      	ldrh	r3, [r3, #0]
 8000c50:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8000c54:	ee07 3a90 	vmov	s15, r3
 8000c58:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000c5c:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 8000c98 <ExtractPTATParameters+0xf0>
 8000c60:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c64:	eeb2 6b00 	vmov.f64	d6, #32	; 0x41000000  8.0
 8000c68:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000c6c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c70:	edc7 7a02 	vstr	s15, [r7, #8]
    
    mlx90640->KvPTAT = KvPTAT;
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	697a      	ldr	r2, [r7, #20]
 8000c78:	605a      	str	r2, [r3, #4]
    mlx90640->KtPTAT = KtPTAT;    
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	609a      	str	r2, [r3, #8]
    mlx90640->vPTAT25 = vPTAT25;
 8000c80:	89fa      	ldrh	r2, [r7, #14]
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	819a      	strh	r2, [r3, #12]
    mlx90640->alphaPTAT = alphaPTAT;   
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	68ba      	ldr	r2, [r7, #8]
 8000c8a:	611a      	str	r2, [r3, #16]
}
 8000c8c:	bf00      	nop
 8000c8e:	371c      	adds	r7, #28
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	00000000 	.word	0x00000000
 8000c9c:	40d00000 	.word	0x40d00000
 8000ca0:	42800000 	.word	0x42800000
 8000ca4:	45800000 	.word	0x45800000
 8000ca8:	43ff8000 	.word	0x43ff8000
 8000cac:	44800000 	.word	0x44800000

08000cb0 <ExtractGainParameters>:

//------------------------------------------------------------------------------

void ExtractGainParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
    int16_t gainEE;
    
    gainEE = eeData[48];
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	3360      	adds	r3, #96	; 0x60
 8000cbe:	881b      	ldrh	r3, [r3, #0]
 8000cc0:	81fb      	strh	r3, [r7, #14]
    if(gainEE > 32767)
    {
        gainEE = gainEE -65536;
    }
    
    mlx90640->gainEE = gainEE;    
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	89fa      	ldrh	r2, [r7, #14]
 8000cc6:	829a      	strh	r2, [r3, #20]
}
 8000cc8:	bf00      	nop
 8000cca:	3714      	adds	r7, #20
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <ExtractTgcParameters>:

//------------------------------------------------------------------------------

void ExtractTgcParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6039      	str	r1, [r7, #0]
    float tgc;
    tgc = eeData[60] & 0x00FF;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	3378      	adds	r3, #120	; 0x78
 8000ce2:	881b      	ldrh	r3, [r3, #0]
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	ee07 3a90 	vmov	s15, r3
 8000cea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cee:	edc7 7a03 	vstr	s15, [r7, #12]
    if(tgc > 127)
 8000cf2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000cf6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000d38 <ExtractTgcParameters+0x64>
 8000cfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d02:	dd07      	ble.n	8000d14 <ExtractTgcParameters+0x40>
    {
        tgc = tgc - 256;
 8000d04:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d08:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000d3c <ExtractTgcParameters+0x68>
 8000d0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000d10:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    tgc = tgc / 32.0f;
 8000d14:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d18:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000d40 <ExtractTgcParameters+0x6c>
 8000d1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d20:	edc7 7a03 	vstr	s15, [r7, #12]
    
    mlx90640->tgc = tgc;        
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	619a      	str	r2, [r3, #24]
}
 8000d2a:	bf00      	nop
 8000d2c:	3714      	adds	r7, #20
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	42fe0000 	.word	0x42fe0000
 8000d3c:	43800000 	.word	0x43800000
 8000d40:	42000000 	.word	0x42000000

08000d44 <ExtractResolutionParameters>:

//------------------------------------------------------------------------------

void ExtractResolutionParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
    uint8_t resolutionEE;
    resolutionEE = (eeData[56] & 0x3000) >> 12;    
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	3370      	adds	r3, #112	; 0x70
 8000d52:	881b      	ldrh	r3, [r3, #0]
 8000d54:	131b      	asrs	r3, r3, #12
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	f003 0303 	and.w	r3, r3, #3
 8000d5c:	73fb      	strb	r3, [r7, #15]
    
    mlx90640->resolutionEE = resolutionEE;
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	7bfa      	ldrb	r2, [r7, #15]
 8000d62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8000d66:	bf00      	nop
 8000d68:	3714      	adds	r7, #20
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
	...

08000d74 <ExtractKsTaParameters>:

//------------------------------------------------------------------------------

void ExtractKsTaParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
    float KsTa;
    KsTa = (eeData[60] & 0xFF00) >> 8;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	3378      	adds	r3, #120	; 0x78
 8000d82:	881b      	ldrh	r3, [r3, #0]
 8000d84:	0a1b      	lsrs	r3, r3, #8
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	ee07 3a90 	vmov	s15, r3
 8000d8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d90:	edc7 7a03 	vstr	s15, [r7, #12]
    if(KsTa > 127)
 8000d94:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d98:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000dd8 <ExtractKsTaParameters+0x64>
 8000d9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000da4:	dd07      	ble.n	8000db6 <ExtractKsTaParameters+0x42>
    {
        KsTa = KsTa -256;
 8000da6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000daa:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000ddc <ExtractKsTaParameters+0x68>
 8000dae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000db2:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    KsTa = KsTa / 8192.0f;
 8000db6:	ed97 7a03 	vldr	s14, [r7, #12]
 8000dba:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000de0 <ExtractKsTaParameters+0x6c>
 8000dbe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dc2:	edc7 7a03 	vstr	s15, [r7, #12]
    
    mlx90640->KsTa = KsTa;
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	68fa      	ldr	r2, [r7, #12]
 8000dca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dcc:	bf00      	nop
 8000dce:	3714      	adds	r7, #20
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	42fe0000 	.word	0x42fe0000
 8000ddc:	43800000 	.word	0x43800000
 8000de0:	46000000 	.word	0x46000000

08000de4 <ExtractKsToParameters>:

//------------------------------------------------------------------------------

void ExtractKsToParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b087      	sub	sp, #28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
    int KsToScale;
    int8_t step;
    
    step = ((eeData[63] & 0x3000) >> 12) * 10;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	337e      	adds	r3, #126	; 0x7e
 8000df2:	881b      	ldrh	r3, [r3, #0]
 8000df4:	131b      	asrs	r3, r3, #12
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	f003 0303 	and.w	r3, r3, #3
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	461a      	mov	r2, r3
 8000e00:	0092      	lsls	r2, r2, #2
 8000e02:	4413      	add	r3, r2
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	74fb      	strb	r3, [r7, #19]
    
    mlx90640->ct[0] = -40;
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	f64f 72d8 	movw	r2, #65496	; 0xffd8
 8000e10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    mlx90640->ct[1] = 0;
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	2200      	movs	r2, #0
 8000e18:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    mlx90640->ct[2] = (eeData[63] & 0x00F0) >> 4;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	337e      	adds	r3, #126	; 0x7e
 8000e20:	881b      	ldrh	r3, [r3, #0]
 8000e22:	111b      	asrs	r3, r3, #4
 8000e24:	b21b      	sxth	r3, r3
 8000e26:	f003 030f 	and.w	r3, r3, #15
 8000e2a:	b21a      	sxth	r2, r3
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    mlx90640->ct[3] = (eeData[63] & 0x0F00) >> 8;    
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	337e      	adds	r3, #126	; 0x7e
 8000e36:	881b      	ldrh	r3, [r3, #0]
 8000e38:	121b      	asrs	r3, r3, #8
 8000e3a:	b21b      	sxth	r3, r3
 8000e3c:	f003 030f 	and.w	r3, r3, #15
 8000e40:	b21a      	sxth	r2, r3
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    
    mlx90640->ct[2] = mlx90640->ct[2]*step;
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8000e4e:	b29a      	uxth	r2, r3
 8000e50:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	fb12 f303 	smulbb	r3, r2, r3
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	b21a      	sxth	r2, r3
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    mlx90640->ct[3] = mlx90640->ct[2] + mlx90640->ct[3]*step;
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8000e72:	b299      	uxth	r1, r3
 8000e74:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	fb11 f303 	smulbb	r3, r1, r3
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	4413      	add	r3, r2
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	b21a      	sxth	r2, r3
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    mlx90640->ct[4] = 400;
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000e92:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    
    KsToScale = (eeData[63] & 0x000F) + 8;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	337e      	adds	r3, #126	; 0x7e
 8000e9a:	881b      	ldrh	r3, [r3, #0]
 8000e9c:	f003 030f 	and.w	r3, r3, #15
 8000ea0:	3308      	adds	r3, #8
 8000ea2:	60fb      	str	r3, [r7, #12]
    KsToScale = 1 << KsToScale;
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	60fb      	str	r3, [r7, #12]
    
    mlx90640->ksTo[0] = eeData[61] & 0x00FF;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	337a      	adds	r3, #122	; 0x7a
 8000eb2:	881b      	ldrh	r3, [r3, #0]
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	ee07 3a90 	vmov	s15, r3
 8000eba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    mlx90640->ksTo[1] = (eeData[61] & 0xFF00) >> 8;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	337a      	adds	r3, #122	; 0x7a
 8000ec8:	881b      	ldrh	r3, [r3, #0]
 8000eca:	0a1b      	lsrs	r3, r3, #8
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	ee07 3a90 	vmov	s15, r3
 8000ed2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    mlx90640->ksTo[2] = eeData[62] & 0x00FF;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	337c      	adds	r3, #124	; 0x7c
 8000ee0:	881b      	ldrh	r3, [r3, #0]
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	ee07 3a90 	vmov	s15, r3
 8000ee8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    mlx90640->ksTo[3] = (eeData[62] & 0xFF00) >> 8;      
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	337c      	adds	r3, #124	; 0x7c
 8000ef6:	881b      	ldrh	r3, [r3, #0]
 8000ef8:	0a1b      	lsrs	r3, r3, #8
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	ee07 3a90 	vmov	s15, r3
 8000f00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
    
    for(int i = 0; i < 4; i++)
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
 8000f0e:	e03c      	b.n	8000f8a <ExtractKsToParameters+0x1a6>
    {
        if(mlx90640->ksTo[i] > 127)
 8000f10:	683a      	ldr	r2, [r7, #0]
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	330a      	adds	r3, #10
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	4413      	add	r3, r2
 8000f1a:	3304      	adds	r3, #4
 8000f1c:	edd3 7a00 	vldr	s15, [r3]
 8000f20:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8000fa4 <ExtractKsToParameters+0x1c0>
 8000f24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f2c:	dd13      	ble.n	8000f56 <ExtractKsToParameters+0x172>
        {
            mlx90640->ksTo[i] = mlx90640->ksTo[i] - 256;
 8000f2e:	683a      	ldr	r2, [r7, #0]
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	330a      	adds	r3, #10
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	4413      	add	r3, r2
 8000f38:	3304      	adds	r3, #4
 8000f3a:	edd3 7a00 	vldr	s15, [r3]
 8000f3e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000fa8 <ExtractKsToParameters+0x1c4>
 8000f42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f46:	683a      	ldr	r2, [r7, #0]
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	330a      	adds	r3, #10
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	4413      	add	r3, r2
 8000f50:	3304      	adds	r3, #4
 8000f52:	edc3 7a00 	vstr	s15, [r3]
        }
        mlx90640->ksTo[i] = mlx90640->ksTo[i] / KsToScale;
 8000f56:	683a      	ldr	r2, [r7, #0]
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	330a      	adds	r3, #10
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	4413      	add	r3, r2
 8000f60:	3304      	adds	r3, #4
 8000f62:	edd3 6a00 	vldr	s13, [r3]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	ee07 3a90 	vmov	s15, r3
 8000f6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f74:	683a      	ldr	r2, [r7, #0]
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	330a      	adds	r3, #10
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	3304      	adds	r3, #4
 8000f80:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 0; i < 4; i++)
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	3301      	adds	r3, #1
 8000f88:	617b      	str	r3, [r7, #20]
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	2b03      	cmp	r3, #3
 8000f8e:	ddbf      	ble.n	8000f10 <ExtractKsToParameters+0x12c>
    } 
    
    mlx90640->ksTo[4] = -0.0002;
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	4a06      	ldr	r2, [pc, #24]	; (8000fac <ExtractKsToParameters+0x1c8>)
 8000f94:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000f96:	bf00      	nop
 8000f98:	371c      	adds	r7, #28
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	42fe0000 	.word	0x42fe0000
 8000fa8:	43800000 	.word	0x43800000
 8000fac:	b951b717 	.word	0xb951b717

08000fb0 <ExtractAlphaParameters>:

//------------------------------------------------------------------------------

void ExtractAlphaParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	ed2d 8b02 	vpush	{d8}
 8000fb6:	f5ad 6d52 	sub.w	sp, sp, #3360	; 0xd20
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8000fc0:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8000fc4:	6018      	str	r0, [r3, #0]
 8000fc6:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8000fca:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 8000fce:	6019      	str	r1, [r3, #0]
    int accRow[24];
    int accColumn[32];
    int p = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
    uint8_t accRemScale;
    float alphaTemp[768];
    float temp;
    

    accRemScale = eeData[32] & 0x000F;
 8000fd6:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8000fda:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	3340      	adds	r3, #64	; 0x40
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	f003 030f 	and.w	r3, r3, #15
 8000fea:	f887 3cf3 	strb.w	r3, [r7, #3315]	; 0xcf3
    accColumnScale = (eeData[32] & 0x00F0) >> 4;
 8000fee:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8000ff2:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	3340      	adds	r3, #64	; 0x40
 8000ffa:	881b      	ldrh	r3, [r3, #0]
 8000ffc:	111b      	asrs	r3, r3, #4
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	f003 030f 	and.w	r3, r3, #15
 8001004:	f887 3cf2 	strb.w	r3, [r7, #3314]	; 0xcf2
    accRowScale = (eeData[32] & 0x0F00) >> 8;
 8001008:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800100c:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	3340      	adds	r3, #64	; 0x40
 8001014:	881b      	ldrh	r3, [r3, #0]
 8001016:	121b      	asrs	r3, r3, #8
 8001018:	b2db      	uxtb	r3, r3
 800101a:	f003 030f 	and.w	r3, r3, #15
 800101e:	f887 3cf1 	strb.w	r3, [r7, #3313]	; 0xcf1
    alphaScale = ((eeData[32] & 0xF000) >> 12) + 30;
 8001022:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001026:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	3340      	adds	r3, #64	; 0x40
 800102e:	881b      	ldrh	r3, [r3, #0]
 8001030:	0b1b      	lsrs	r3, r3, #12
 8001032:	b29b      	uxth	r3, r3
 8001034:	b2db      	uxtb	r3, r3
 8001036:	331e      	adds	r3, #30
 8001038:	f887 3d1f 	strb.w	r3, [r7, #3359]	; 0xd1f
    alphaRef = eeData[33];
 800103c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001040:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	3342      	adds	r3, #66	; 0x42
 8001048:	881b      	ldrh	r3, [r3, #0]
 800104a:	f8c7 3cec 	str.w	r3, [r7, #3308]	; 0xcec
    
    for(int i = 0; i < 6; i++)
 800104e:	2300      	movs	r3, #0
 8001050:	f8c7 3d14 	str.w	r3, [r7, #3348]	; 0xd14
 8001054:	e062      	b.n	800111c <ExtractAlphaParameters+0x16c>
    {
        p = i * 4;
 8001056:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
        accRow[p + 0] = (eeData[34 + i] & 0x000F);
 8001060:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8001064:	3322      	adds	r3, #34	; 0x22
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 800106c:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8001070:	6812      	ldr	r2, [r2, #0]
 8001072:	4413      	add	r3, r2
 8001074:	881b      	ldrh	r3, [r3, #0]
 8001076:	f003 020f 	and.w	r2, r3, #15
 800107a:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8001084:	443b      	add	r3, r7
 8001086:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 1] = (eeData[34 + i] & 0x00F0) >> 4;
 800108a:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 800108e:	3322      	adds	r3, #34	; 0x22
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8001096:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 800109a:	6812      	ldr	r2, [r2, #0]
 800109c:	4413      	add	r3, r2
 800109e:	881b      	ldrh	r3, [r3, #0]
 80010a0:	111a      	asrs	r2, r3, #4
 80010a2:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80010a6:	3301      	adds	r3, #1
 80010a8:	f002 020f 	and.w	r2, r2, #15
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 80010b2:	443b      	add	r3, r7
 80010b4:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 2] = (eeData[34 + i] & 0x0F00) >> 8;
 80010b8:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 80010bc:	3322      	adds	r3, #34	; 0x22
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 80010c4:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 80010c8:	6812      	ldr	r2, [r2, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	881b      	ldrh	r3, [r3, #0]
 80010ce:	121a      	asrs	r2, r3, #8
 80010d0:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80010d4:	3302      	adds	r3, #2
 80010d6:	f002 020f 	and.w	r2, r2, #15
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 80010e0:	443b      	add	r3, r7
 80010e2:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 3] = (eeData[34 + i] & 0xF000) >> 12;
 80010e6:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 80010ea:	3322      	adds	r3, #34	; 0x22
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 80010f2:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 80010f6:	6812      	ldr	r2, [r2, #0]
 80010f8:	4413      	add	r3, r2
 80010fa:	881b      	ldrh	r3, [r3, #0]
 80010fc:	0b1b      	lsrs	r3, r3, #12
 80010fe:	b29a      	uxth	r2, r3
 8001100:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001104:	3303      	adds	r3, #3
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 800110c:	443b      	add	r3, r7
 800110e:	f843 2c94 	str.w	r2, [r3, #-148]
    for(int i = 0; i < 6; i++)
 8001112:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8001116:	3301      	adds	r3, #1
 8001118:	f8c7 3d14 	str.w	r3, [r7, #3348]	; 0xd14
 800111c:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8001120:	2b05      	cmp	r3, #5
 8001122:	dd98      	ble.n	8001056 <ExtractAlphaParameters+0xa6>
    }
    
    for(int i = 0; i < 24; i++)
 8001124:	2300      	movs	r3, #0
 8001126:	f8c7 3d10 	str.w	r3, [r7, #3344]	; 0xd10
 800112a:	e020      	b.n	800116e <ExtractAlphaParameters+0x1be>
    {
        if (accRow[i] > 7)
 800112c:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8001136:	443b      	add	r3, r7
 8001138:	f853 3c94 	ldr.w	r3, [r3, #-148]
 800113c:	2b07      	cmp	r3, #7
 800113e:	dd11      	ble.n	8001164 <ExtractAlphaParameters+0x1b4>
        {
            accRow[i] = accRow[i] - 16;
 8001140:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 800114a:	443b      	add	r3, r7
 800114c:	f853 3c94 	ldr.w	r3, [r3, #-148]
 8001150:	f1a3 0210 	sub.w	r2, r3, #16
 8001154:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 800115e:	443b      	add	r3, r7
 8001160:	f843 2c94 	str.w	r2, [r3, #-148]
    for(int i = 0; i < 24; i++)
 8001164:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8001168:	3301      	adds	r3, #1
 800116a:	f8c7 3d10 	str.w	r3, [r7, #3344]	; 0xd10
 800116e:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8001172:	2b17      	cmp	r3, #23
 8001174:	ddda      	ble.n	800112c <ExtractAlphaParameters+0x17c>
        }
    }
    
    for(int i = 0; i < 8; i++)
 8001176:	2300      	movs	r3, #0
 8001178:	f8c7 3d0c 	str.w	r3, [r7, #3340]	; 0xd0c
 800117c:	e062      	b.n	8001244 <ExtractAlphaParameters+0x294>
    {
        p = i * 4;
 800117e:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
        accColumn[p + 0] = (eeData[40 + i] & 0x000F);
 8001188:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 800118c:	3328      	adds	r3, #40	; 0x28
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8001194:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8001198:	6812      	ldr	r2, [r2, #0]
 800119a:	4413      	add	r3, r2
 800119c:	881b      	ldrh	r3, [r3, #0]
 800119e:	f003 010f 	and.w	r1, r3, #15
 80011a2:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80011a6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80011aa:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	; 0xcf4
 80011ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 1] = (eeData[40 + i] & 0x00F0) >> 4;
 80011b2:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 80011b6:	3328      	adds	r3, #40	; 0x28
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 80011be:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 80011c2:	6812      	ldr	r2, [r2, #0]
 80011c4:	4413      	add	r3, r2
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	111b      	asrs	r3, r3, #4
 80011ca:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	; 0xcf4
 80011ce:	3201      	adds	r2, #1
 80011d0:	f003 010f 	and.w	r1, r3, #15
 80011d4:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80011d8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80011dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 2] = (eeData[40 + i] & 0x0F00) >> 8;
 80011e0:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 80011e4:	3328      	adds	r3, #40	; 0x28
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 80011ec:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 80011f0:	6812      	ldr	r2, [r2, #0]
 80011f2:	4413      	add	r3, r2
 80011f4:	881b      	ldrh	r3, [r3, #0]
 80011f6:	121b      	asrs	r3, r3, #8
 80011f8:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	; 0xcf4
 80011fc:	3202      	adds	r2, #2
 80011fe:	f003 010f 	and.w	r1, r3, #15
 8001202:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001206:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800120a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 3] = (eeData[40 + i] & 0xF000) >> 12;
 800120e:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8001212:	3328      	adds	r3, #40	; 0x28
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 800121a:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 800121e:	6812      	ldr	r2, [r2, #0]
 8001220:	4413      	add	r3, r2
 8001222:	881b      	ldrh	r3, [r3, #0]
 8001224:	0b1b      	lsrs	r3, r3, #12
 8001226:	b299      	uxth	r1, r3
 8001228:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 800122c:	1cda      	adds	r2, r3, #3
 800122e:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001232:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001236:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 8; i++)
 800123a:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 800123e:	3301      	adds	r3, #1
 8001240:	f8c7 3d0c 	str.w	r3, [r7, #3340]	; 0xd0c
 8001244:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8001248:	2b07      	cmp	r3, #7
 800124a:	dd98      	ble.n	800117e <ExtractAlphaParameters+0x1ce>
    }
    
    for(int i = 0; i < 32; i ++)
 800124c:	2300      	movs	r3, #0
 800124e:	f8c7 3d08 	str.w	r3, [r7, #3336]	; 0xd08
 8001252:	e020      	b.n	8001296 <ExtractAlphaParameters+0x2e6>
    {
        if (accColumn[i] > 7)
 8001254:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001258:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800125c:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	; 0xd08
 8001260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001264:	2b07      	cmp	r3, #7
 8001266:	dd11      	ble.n	800128c <ExtractAlphaParameters+0x2dc>
        {
            accColumn[i] = accColumn[i] - 16;
 8001268:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800126c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001270:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	; 0xd08
 8001274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001278:	f1a3 0110 	sub.w	r1, r3, #16
 800127c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001280:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001284:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	; 0xd08
 8001288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 32; i ++)
 800128c:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 8001290:	3301      	adds	r3, #1
 8001292:	f8c7 3d08 	str.w	r3, [r7, #3336]	; 0xd08
 8001296:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 800129a:	2b1f      	cmp	r3, #31
 800129c:	ddda      	ble.n	8001254 <ExtractAlphaParameters+0x2a4>
        }
    }

    for(int i = 0; i < 24; i++)
 800129e:	2300      	movs	r3, #0
 80012a0:	f8c7 3d04 	str.w	r3, [r7, #3332]	; 0xd04
 80012a4:	e12a      	b.n	80014fc <ExtractAlphaParameters+0x54c>
    {
        for(int j = 0; j < 32; j ++)
 80012a6:	2300      	movs	r3, #0
 80012a8:	f8c7 3d00 	str.w	r3, [r7, #3328]	; 0xd00
 80012ac:	e11c      	b.n	80014e8 <ExtractAlphaParameters+0x538>
        {
            p = 32 * i +j;
 80012ae:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 80012b2:	015b      	lsls	r3, r3, #5
 80012b4:	f8d7 2d00 	ldr.w	r2, [r7, #3328]	; 0xd00
 80012b8:	4413      	add	r3, r2
 80012ba:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
            alphaTemp[p] = (eeData[64 + p] & 0x03F0) >> 4;
 80012be:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80012c2:	3340      	adds	r3, #64	; 0x40
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 80012ca:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 80012ce:	6812      	ldr	r2, [r2, #0]
 80012d0:	4413      	add	r3, r2
 80012d2:	881b      	ldrh	r3, [r3, #0]
 80012d4:	111b      	asrs	r3, r3, #4
 80012d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012da:	ee07 3a90 	vmov	s15, r3
 80012de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012e2:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80012e6:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80012ea:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	4413      	add	r3, r2
 80012f2:	edc3 7a00 	vstr	s15, [r3]
            if (alphaTemp[p] > 31)
 80012f6:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80012fa:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80012fe:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	4413      	add	r3, r2
 8001306:	edd3 7a00 	vldr	s15, [r3]
 800130a:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 800130e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001316:	dd17      	ble.n	8001348 <ExtractAlphaParameters+0x398>
            {
                alphaTemp[p] = alphaTemp[p] - 64;
 8001318:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800131c:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001320:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	edd3 7a00 	vldr	s15, [r3]
 800132c:	ed9f 7acc 	vldr	s14, [pc, #816]	; 8001660 <ExtractAlphaParameters+0x6b0>
 8001330:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001334:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001338:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 800133c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	edc3 7a00 	vstr	s15, [r3]
            }
            alphaTemp[p] = alphaTemp[p]*(1 << accRemScale);
 8001348:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800134c:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001350:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4413      	add	r3, r2
 8001358:	ed93 7a00 	vldr	s14, [r3]
 800135c:	f897 3cf3 	ldrb.w	r3, [r7, #3315]	; 0xcf3
 8001360:	2201      	movs	r2, #1
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	ee07 3a90 	vmov	s15, r3
 800136a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800136e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001372:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001376:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 800137a:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = (alphaRef + (accRow[i] << accRowScale) + (accColumn[j] << accColumnScale) + alphaTemp[p]);
 8001386:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8001390:	443b      	add	r3, r7
 8001392:	f853 2c94 	ldr.w	r2, [r3, #-148]
 8001396:	f897 3cf1 	ldrb.w	r3, [r7, #3313]	; 0xcf1
 800139a:	409a      	lsls	r2, r3
 800139c:	f8d7 3cec 	ldr.w	r3, [r7, #3308]	; 0xcec
 80013a0:	441a      	add	r2, r3
 80013a2:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80013a6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013aa:	f8d7 1d00 	ldr.w	r1, [r7, #3328]	; 0xd00
 80013ae:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80013b2:	f897 3cf2 	ldrb.w	r3, [r7, #3314]	; 0xcf2
 80013b6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ba:	4413      	add	r3, r2
 80013bc:	ee07 3a90 	vmov	s15, r3
 80013c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013c4:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80013c8:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80013cc:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	edd3 7a00 	vldr	s15, [r3]
 80013d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013dc:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80013e0:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80013e4:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4413      	add	r3, r2
 80013ec:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = alphaTemp[p] / pow(2,(double)alphaScale);
 80013f0:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80013f4:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80013f8:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4413      	add	r3, r2
 8001400:	edd3 7a00 	vldr	s15, [r3]
 8001404:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001408:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	; 0xd1f
 800140c:	ee07 3a90 	vmov	s15, r3
 8001410:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001414:	eeb0 1b47 	vmov.f64	d1, d7
 8001418:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 800141c:	f013 f834 	bl	8014488 <pow>
 8001420:	eeb0 6b40 	vmov.f64	d6, d0
 8001424:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8001428:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800142c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001430:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001434:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	4413      	add	r3, r2
 800143c:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = alphaTemp[p] - mlx90640->tgc * (mlx90640->cpAlpha[0] + mlx90640->cpAlpha[1])/2;
 8001440:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001444:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001448:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	4413      	add	r3, r2
 8001450:	ed93 7a00 	vldr	s14, [r3]
 8001454:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001458:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	edd3 6a06 	vldr	s13, [r3, #24]
 8001462:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001466:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001470:	ed93 6a94 	vldr	s12, [r3, #592]	; 0x250
 8001474:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001478:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001482:	edd3 7a95 	vldr	s15, [r3, #596]	; 0x254
 8001486:	ee76 7a27 	vadd.f32	s15, s12, s15
 800148a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800148e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001492:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001496:	ee77 7a67 	vsub.f32	s15, s14, s15
 800149a:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800149e:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80014a2:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	4413      	add	r3, r2
 80014aa:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = SCALEALPHA/alphaTemp[p];
 80014ae:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80014b2:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80014b6:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4413      	add	r3, r2
 80014be:	ed93 7a00 	vldr	s14, [r3]
 80014c2:	eddf 6a68 	vldr	s13, [pc, #416]	; 8001664 <ExtractAlphaParameters+0x6b4>
 80014c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014ca:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80014ce:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80014d2:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < 32; j ++)
 80014de:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 80014e2:	3301      	adds	r3, #1
 80014e4:	f8c7 3d00 	str.w	r3, [r7, #3328]	; 0xd00
 80014e8:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 80014ec:	2b1f      	cmp	r3, #31
 80014ee:	f77f aede 	ble.w	80012ae <ExtractAlphaParameters+0x2fe>
    for(int i = 0; i < 24; i++)
 80014f2:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 80014f6:	3301      	adds	r3, #1
 80014f8:	f8c7 3d04 	str.w	r3, [r7, #3332]	; 0xd04
 80014fc:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8001500:	2b17      	cmp	r3, #23
 8001502:	f77f aed0 	ble.w	80012a6 <ExtractAlphaParameters+0x2f6>
        }
    }
    
    temp = alphaTemp[0];
 8001506:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800150a:	f6a3 5314 	subw	r3, r3, #3348	; 0xd14
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 8001514:	6013      	str	r3, [r2, #0]
    for(int i = 1; i < 768; i++)
 8001516:	2301      	movs	r3, #1
 8001518:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 800151c:	e023      	b.n	8001566 <ExtractAlphaParameters+0x5b6>
    {
        if (alphaTemp[i] > temp)
 800151e:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001522:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001526:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	edd3 7a00 	vldr	s15, [r3]
 8001532:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 8001536:	ed93 7a00 	vldr	s14, [r3]
 800153a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800153e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001542:	d50b      	bpl.n	800155c <ExtractAlphaParameters+0x5ac>
        {
            temp = alphaTemp[i];
 8001544:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001548:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 800154c:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4413      	add	r3, r2
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 800155a:	6013      	str	r3, [r2, #0]
    for(int i = 1; i < 768; i++)
 800155c:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8001560:	3301      	adds	r3, #1
 8001562:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 8001566:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 800156a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800156e:	dbd6      	blt.n	800151e <ExtractAlphaParameters+0x56e>
        }
    }
    
    alphaScale = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	f887 3d1f 	strb.w	r3, [r7, #3359]	; 0xd1f
    while(temp < 32768)
 8001576:	e00e      	b.n	8001596 <ExtractAlphaParameters+0x5e6>
    {
        temp = temp*2;
 8001578:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 800157c:	edd3 7a00 	vldr	s15, [r3]
 8001580:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001584:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 8001588:	edc3 7a00 	vstr	s15, [r3]
        alphaScale = alphaScale + 1;
 800158c:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	; 0xd1f
 8001590:	3301      	adds	r3, #1
 8001592:	f887 3d1f 	strb.w	r3, [r7, #3359]	; 0xd1f
    while(temp < 32768)
 8001596:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 800159a:	edd3 7a00 	vldr	s15, [r3]
 800159e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001668 <ExtractAlphaParameters+0x6b8>
 80015a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015aa:	d4e5      	bmi.n	8001578 <ExtractAlphaParameters+0x5c8>
    } 
    
    for(int i = 0; i < 768; i++)
 80015ac:	2300      	movs	r3, #0
 80015ae:	f8c7 3cf8 	str.w	r3, [r7, #3320]	; 0xcf8
 80015b2:	e03f      	b.n	8001634 <ExtractAlphaParameters+0x684>
    {
        temp = alphaTemp[i] * pow(2,(double)alphaScale);        
 80015b4:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80015b8:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80015bc:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4413      	add	r3, r2
 80015c4:	edd3 7a00 	vldr	s15, [r3]
 80015c8:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80015cc:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	; 0xd1f
 80015d0:	ee07 3a90 	vmov	s15, r3
 80015d4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80015d8:	eeb0 1b47 	vmov.f64	d1, d7
 80015dc:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80015e0:	f012 ff52 	bl	8014488 <pow>
 80015e4:	eeb0 7b40 	vmov.f64	d7, d0
 80015e8:	ee28 7b07 	vmul.f64	d7, d8, d7
 80015ec:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015f0:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 80015f4:	edc3 7a00 	vstr	s15, [r3]
        mlx90640->alpha[i] = (temp + 0.5f);        
 80015f8:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 80015fc:	edd3 7a00 	vldr	s15, [r3]
 8001600:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001604:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001608:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800160c:	ee17 3a90 	vmov	r3, s15
 8001610:	b299      	uxth	r1, r3
 8001612:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001616:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 8001620:	3324      	adds	r3, #36	; 0x24
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	4413      	add	r3, r2
 8001626:	460a      	mov	r2, r1
 8001628:	805a      	strh	r2, [r3, #2]
    for(int i = 0; i < 768; i++)
 800162a:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 800162e:	3301      	adds	r3, #1
 8001630:	f8c7 3cf8 	str.w	r3, [r7, #3320]	; 0xcf8
 8001634:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 8001638:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800163c:	dbba      	blt.n	80015b4 <ExtractAlphaParameters+0x604>
        
    } 
    
    mlx90640->alphaScale = alphaScale;      
 800163e:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001642:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f897 2d1f 	ldrb.w	r2, [r7, #3359]	; 0xd1f
 800164c:	f883 264a 	strb.w	r2, [r3, #1610]	; 0x64a
   
}
 8001650:	bf00      	nop
 8001652:	f507 6752 	add.w	r7, r7, #3360	; 0xd20
 8001656:	46bd      	mov	sp, r7
 8001658:	ecbd 8b02 	vpop	{d8}
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	42800000 	.word	0x42800000
 8001664:	358637bd 	.word	0x358637bd
 8001668:	47000000 	.word	0x47000000

0800166c <ExtractOffsetParameters>:

//------------------------------------------------------------------------------

void ExtractOffsetParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 800166c:	b480      	push	{r7}
 800166e:	b0c5      	sub	sp, #276	; 0x114
 8001670:	af00      	add	r7, sp, #0
 8001672:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001676:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800167a:	6018      	str	r0, [r3, #0]
 800167c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001680:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001684:	6019      	str	r1, [r3, #0]
    int occRow[24];
    int occColumn[32];
    int p = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    uint8_t occRowScale;
    uint8_t occColumnScale;
    uint8_t occRemScale;
    

    occRemScale = (eeData[16] & 0x000F);
 800168c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001690:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	3320      	adds	r3, #32
 8001698:	881b      	ldrh	r3, [r3, #0]
 800169a:	b2db      	uxtb	r3, r3
 800169c:	f003 030f 	and.w	r3, r3, #15
 80016a0:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
    occColumnScale = (eeData[16] & 0x00F0) >> 4;
 80016a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80016a8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	3320      	adds	r3, #32
 80016b0:	881b      	ldrh	r3, [r3, #0]
 80016b2:	111b      	asrs	r3, r3, #4
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	f003 030f 	and.w	r3, r3, #15
 80016ba:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
    occRowScale = (eeData[16] & 0x0F00) >> 8;
 80016be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80016c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	3320      	adds	r3, #32
 80016ca:	881b      	ldrh	r3, [r3, #0]
 80016cc:	121b      	asrs	r3, r3, #8
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	f003 030f 	and.w	r3, r3, #15
 80016d4:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
    offsetRef = eeData[17];
 80016d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80016dc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	3322      	adds	r3, #34	; 0x22
 80016e4:	881b      	ldrh	r3, [r3, #0]
 80016e6:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
    if (offsetRef > 32767)
    {
        offsetRef = offsetRef - 65536;
    }
    
    for(int i = 0; i < 6; i++)
 80016ea:	2300      	movs	r3, #0
 80016ec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80016f0:	e062      	b.n	80017b8 <ExtractOffsetParameters+0x14c>
    {
        p = i * 4;
 80016f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        occRow[p + 0] = (eeData[18 + i] & 0x000F);
 80016fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001700:	3312      	adds	r3, #18
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001708:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800170c:	6812      	ldr	r2, [r2, #0]
 800170e:	4413      	add	r3, r2
 8001710:	881b      	ldrh	r3, [r3, #0]
 8001712:	f003 020f 	and.w	r2, r3, #15
 8001716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001720:	443b      	add	r3, r7
 8001722:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 1] = (eeData[18 + i] & 0x00F0) >> 4;
 8001726:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800172a:	3312      	adds	r3, #18
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001732:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001736:	6812      	ldr	r2, [r2, #0]
 8001738:	4413      	add	r3, r2
 800173a:	881b      	ldrh	r3, [r3, #0]
 800173c:	111a      	asrs	r2, r3, #4
 800173e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001742:	3301      	adds	r3, #1
 8001744:	f002 020f 	and.w	r2, r2, #15
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800174e:	443b      	add	r3, r7
 8001750:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 2] = (eeData[18 + i] & 0x0F00) >> 8;
 8001754:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001758:	3312      	adds	r3, #18
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001760:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001764:	6812      	ldr	r2, [r2, #0]
 8001766:	4413      	add	r3, r2
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	121a      	asrs	r2, r3, #8
 800176c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001770:	3302      	adds	r3, #2
 8001772:	f002 020f 	and.w	r2, r2, #15
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800177c:	443b      	add	r3, r7
 800177e:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 3] = (eeData[18 + i] & 0xF000) >> 12;
 8001782:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001786:	3312      	adds	r3, #18
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800178e:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001792:	6812      	ldr	r2, [r2, #0]
 8001794:	4413      	add	r3, r2
 8001796:	881b      	ldrh	r3, [r3, #0]
 8001798:	0b1b      	lsrs	r3, r3, #12
 800179a:	b29a      	uxth	r2, r3
 800179c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80017a0:	3303      	adds	r3, #3
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80017a8:	443b      	add	r3, r7
 80017aa:	f843 2c84 	str.w	r2, [r3, #-132]
    for(int i = 0; i < 6; i++)
 80017ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80017b2:	3301      	adds	r3, #1
 80017b4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80017b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80017bc:	2b05      	cmp	r3, #5
 80017be:	dd98      	ble.n	80016f2 <ExtractOffsetParameters+0x86>
    }
    
    for(int i = 0; i < 24; i++)
 80017c0:	2300      	movs	r3, #0
 80017c2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80017c6:	e020      	b.n	800180a <ExtractOffsetParameters+0x19e>
    {
        if (occRow[i] > 7)
 80017c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80017d2:	443b      	add	r3, r7
 80017d4:	f853 3c84 	ldr.w	r3, [r3, #-132]
 80017d8:	2b07      	cmp	r3, #7
 80017da:	dd11      	ble.n	8001800 <ExtractOffsetParameters+0x194>
        {
            occRow[i] = occRow[i] - 16;
 80017dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80017e6:	443b      	add	r3, r7
 80017e8:	f853 3c84 	ldr.w	r3, [r3, #-132]
 80017ec:	f1a3 0210 	sub.w	r2, r3, #16
 80017f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80017fa:	443b      	add	r3, r7
 80017fc:	f843 2c84 	str.w	r2, [r3, #-132]
    for(int i = 0; i < 24; i++)
 8001800:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001804:	3301      	adds	r3, #1
 8001806:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800180a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800180e:	2b17      	cmp	r3, #23
 8001810:	ddda      	ble.n	80017c8 <ExtractOffsetParameters+0x15c>
        }
    }
    
    for(int i = 0; i < 8; i++)
 8001812:	2300      	movs	r3, #0
 8001814:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001818:	e062      	b.n	80018e0 <ExtractOffsetParameters+0x274>
    {
        p = i * 4;
 800181a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        occColumn[p + 0] = (eeData[24 + i] & 0x000F);
 8001824:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001828:	3318      	adds	r3, #24
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001830:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001834:	6812      	ldr	r2, [r2, #0]
 8001836:	4413      	add	r3, r2
 8001838:	881b      	ldrh	r3, [r3, #0]
 800183a:	f003 010f 	and.w	r1, r3, #15
 800183e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001842:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001846:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800184a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 1] = (eeData[24 + i] & 0x00F0) >> 4;
 800184e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001852:	3318      	adds	r3, #24
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800185a:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800185e:	6812      	ldr	r2, [r2, #0]
 8001860:	4413      	add	r3, r2
 8001862:	881b      	ldrh	r3, [r3, #0]
 8001864:	111b      	asrs	r3, r3, #4
 8001866:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800186a:	3201      	adds	r2, #1
 800186c:	f003 010f 	and.w	r1, r3, #15
 8001870:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001874:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001878:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 2] = (eeData[24 + i] & 0x0F00) >> 8;
 800187c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001880:	3318      	adds	r3, #24
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001888:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800188c:	6812      	ldr	r2, [r2, #0]
 800188e:	4413      	add	r3, r2
 8001890:	881b      	ldrh	r3, [r3, #0]
 8001892:	121b      	asrs	r3, r3, #8
 8001894:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001898:	3202      	adds	r2, #2
 800189a:	f003 010f 	and.w	r1, r3, #15
 800189e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80018a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80018a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 3] = (eeData[24 + i] & 0xF000) >> 12;
 80018aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80018ae:	3318      	adds	r3, #24
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80018b6:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80018ba:	6812      	ldr	r2, [r2, #0]
 80018bc:	4413      	add	r3, r2
 80018be:	881b      	ldrh	r3, [r3, #0]
 80018c0:	0b1b      	lsrs	r3, r3, #12
 80018c2:	b299      	uxth	r1, r3
 80018c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80018c8:	1cda      	adds	r2, r3, #3
 80018ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80018ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80018d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 8; i++)
 80018d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80018da:	3301      	adds	r3, #1
 80018dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80018e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80018e4:	2b07      	cmp	r3, #7
 80018e6:	dd98      	ble.n	800181a <ExtractOffsetParameters+0x1ae>
    }
    
    for(int i = 0; i < 32; i ++)
 80018e8:	2300      	movs	r3, #0
 80018ea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80018ee:	e020      	b.n	8001932 <ExtractOffsetParameters+0x2c6>
    {
        if (occColumn[i] > 7)
 80018f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80018f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80018f8:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80018fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001900:	2b07      	cmp	r3, #7
 8001902:	dd11      	ble.n	8001928 <ExtractOffsetParameters+0x2bc>
        {
            occColumn[i] = occColumn[i] - 16;
 8001904:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001908:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800190c:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001914:	f1a3 0110 	sub.w	r1, r3, #16
 8001918:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800191c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001920:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001924:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 32; i ++)
 8001928:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800192c:	3301      	adds	r3, #1
 800192e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001932:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001936:	2b1f      	cmp	r3, #31
 8001938:	ddda      	ble.n	80018f0 <ExtractOffsetParameters+0x284>
        }
    }

    for(int i = 0; i < 24; i++)
 800193a:	2300      	movs	r3, #0
 800193c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001940:	e0c0      	b.n	8001ac4 <ExtractOffsetParameters+0x458>
    {
        for(int j = 0; j < 32; j ++)
 8001942:	2300      	movs	r3, #0
 8001944:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001948:	e0b2      	b.n	8001ab0 <ExtractOffsetParameters+0x444>
        {
            p = 32 * i +j;
 800194a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800194e:	015b      	lsls	r3, r3, #5
 8001950:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8001954:	4413      	add	r3, r2
 8001956:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
            mlx90640->offset[p] = (eeData[64 + p] & 0xFC00) >> 10;
 800195a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800195e:	3340      	adds	r3, #64	; 0x40
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001966:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800196a:	6812      	ldr	r2, [r2, #0]
 800196c:	4413      	add	r3, r2
 800196e:	881b      	ldrh	r3, [r3, #0]
 8001970:	0a9b      	lsrs	r3, r3, #10
 8001972:	b29b      	uxth	r3, r3
 8001974:	b219      	sxth	r1, r3
 8001976:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800197a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001984:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	4413      	add	r3, r2
 800198c:	460a      	mov	r2, r1
 800198e:	809a      	strh	r2, [r3, #4]
            if (mlx90640->offset[p] > 31)
 8001990:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001994:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800199e:	f503 7349 	add.w	r3, r3, #804	; 0x324
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	4413      	add	r3, r2
 80019a6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019aa:	2b1f      	cmp	r3, #31
 80019ac:	dd1d      	ble.n	80019ea <ExtractOffsetParameters+0x37e>
            {
                mlx90640->offset[p] = mlx90640->offset[p] - 64;
 80019ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019b2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80019bc:	f503 7349 	add.w	r3, r3, #804	; 0x324
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	4413      	add	r3, r2
 80019c4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	3b40      	subs	r3, #64	; 0x40
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	b219      	sxth	r1, r3
 80019d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019d4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80019de:	f503 7349 	add.w	r3, r3, #804	; 0x324
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	4413      	add	r3, r2
 80019e6:	460a      	mov	r2, r1
 80019e8:	809a      	strh	r2, [r3, #4]
            }
            mlx90640->offset[p] = mlx90640->offset[p]*(1 << occRemScale);
 80019ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019ee:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80019f8:	f503 7349 	add.w	r3, r3, #804	; 0x324
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	4413      	add	r3, r2
 8001a00:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a04:	461a      	mov	r2, r3
 8001a06:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	b219      	sxth	r1, r3
 8001a10:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001a14:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a1e:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	4413      	add	r3, r2
 8001a26:	460a      	mov	r2, r1
 8001a28:	809a      	strh	r2, [r3, #4]
            mlx90640->offset[p] = (offsetRef + (occRow[i] << occRowScale) + (occColumn[j] << occColumnScale) + mlx90640->offset[p]);
 8001a2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001a34:	443b      	add	r3, r7
 8001a36:	f853 2c84 	ldr.w	r2, [r3, #-132]
 8001a3a:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8001a48:	4413      	add	r3, r2
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001a50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001a54:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8001a58:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001a5c:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 8001a60:	fa01 f303 	lsl.w	r3, r1, r3
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	4413      	add	r3, r2
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001a6e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001a72:	6819      	ldr	r1, [r3, #0]
 8001a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a78:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	440b      	add	r3, r1
 8001a80:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	4413      	add	r3, r2
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	b219      	sxth	r1, r3
 8001a8c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001a90:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a9a:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	4413      	add	r3, r2
 8001aa2:	460a      	mov	r2, r1
 8001aa4:	809a      	strh	r2, [r3, #4]
        for(int j = 0; j < 32; j ++)
 8001aa6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001aaa:	3301      	adds	r3, #1
 8001aac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001ab0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001ab4:	2b1f      	cmp	r3, #31
 8001ab6:	f77f af48 	ble.w	800194a <ExtractOffsetParameters+0x2de>
    for(int i = 0; i < 24; i++)
 8001aba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001abe:	3301      	adds	r3, #1
 8001ac0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001ac4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ac8:	2b17      	cmp	r3, #23
 8001aca:	f77f af3a 	ble.w	8001942 <ExtractOffsetParameters+0x2d6>
        }
    }
}
 8001ace:	bf00      	nop
 8001ad0:	bf00      	nop
 8001ad2:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
	...

08001ae0 <ExtractKtaPixelParameters>:

//------------------------------------------------------------------------------

void ExtractKtaPixelParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	ed2d 8b02 	vpush	{d8}
 8001ae6:	f6ad 4d38 	subw	sp, sp, #3128	; 0xc38
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001af0:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8001af4:	6018      	str	r0, [r3, #0]
 8001af6:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001afa:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8001afe:	6019      	str	r1, [r3, #0]
    int p = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
    uint8_t ktaScale2;
    uint8_t split;
    float ktaTemp[768];
    float temp;
    
    KtaRoCo = (eeData[54] & 0xFF00) >> 8;
 8001b06:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001b0a:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	336c      	adds	r3, #108	; 0x6c
 8001b12:	881b      	ldrh	r3, [r3, #0]
 8001b14:	0a1b      	lsrs	r3, r3, #8
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	f887 3c1b 	strb.w	r3, [r7, #3099]	; 0xc1b
    if (KtaRoCo > 127)
    {
        KtaRoCo = KtaRoCo - 256;
    }
    KtaRC[0] = KtaRoCo;
 8001b1c:	f897 3c1b 	ldrb.w	r3, [r7, #3099]	; 0xc1b
 8001b20:	f887 3c10 	strb.w	r3, [r7, #3088]	; 0xc10
    
    KtaReCo = (eeData[54] & 0x00FF);
 8001b24:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001b28:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	336c      	adds	r3, #108	; 0x6c
 8001b30:	881b      	ldrh	r3, [r3, #0]
 8001b32:	f887 3c1a 	strb.w	r3, [r7, #3098]	; 0xc1a
    if (KtaReCo > 127)
    {
        KtaReCo = KtaReCo - 256;
    }
    KtaRC[2] = KtaReCo;
 8001b36:	f897 3c1a 	ldrb.w	r3, [r7, #3098]	; 0xc1a
 8001b3a:	f887 3c12 	strb.w	r3, [r7, #3090]	; 0xc12
      
    KtaRoCe = (eeData[55] & 0xFF00) >> 8;
 8001b3e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001b42:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	336e      	adds	r3, #110	; 0x6e
 8001b4a:	881b      	ldrh	r3, [r3, #0]
 8001b4c:	0a1b      	lsrs	r3, r3, #8
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	f887 3c19 	strb.w	r3, [r7, #3097]	; 0xc19
    if (KtaRoCe > 127)
    {
        KtaRoCe = KtaRoCe - 256;
    }
    KtaRC[1] = KtaRoCe;
 8001b54:	f897 3c19 	ldrb.w	r3, [r7, #3097]	; 0xc19
 8001b58:	f887 3c11 	strb.w	r3, [r7, #3089]	; 0xc11
      
    KtaReCe = (eeData[55] & 0x00FF);
 8001b5c:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001b60:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	336e      	adds	r3, #110	; 0x6e
 8001b68:	881b      	ldrh	r3, [r3, #0]
 8001b6a:	f887 3c18 	strb.w	r3, [r7, #3096]	; 0xc18
    if (KtaReCe > 127)
    {
        KtaReCe = KtaReCe - 256;
    }
    KtaRC[3] = KtaReCe;
 8001b6e:	f897 3c18 	ldrb.w	r3, [r7, #3096]	; 0xc18
 8001b72:	f887 3c13 	strb.w	r3, [r7, #3091]	; 0xc13
  
    ktaScale1 = ((eeData[56] & 0x00F0) >> 4) + 8;
 8001b76:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001b7a:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	3370      	adds	r3, #112	; 0x70
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	111b      	asrs	r3, r3, #4
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	f003 030f 	and.w	r3, r3, #15
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	3308      	adds	r3, #8
 8001b90:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
    ktaScale2 = (eeData[56] & 0x000F);
 8001b94:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001b98:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	3370      	adds	r3, #112	; 0x70
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	f003 030f 	and.w	r3, r3, #15
 8001ba8:	f887 3c17 	strb.w	r3, [r7, #3095]	; 0xc17

    for(int i = 0; i < 24; i++)
 8001bac:	2300      	movs	r3, #0
 8001bae:	f8c7 3c2c 	str.w	r3, [r7, #3116]	; 0xc2c
 8001bb2:	e0e6      	b.n	8001d82 <ExtractKtaPixelParameters+0x2a2>
    {
        for(int j = 0; j < 32; j ++)
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
 8001bba:	e0d8      	b.n	8001d6e <ExtractKtaPixelParameters+0x28e>
        {
            p = 32 * i +j;
 8001bbc:	f8d7 3c2c 	ldr.w	r3, [r7, #3116]	; 0xc2c
 8001bc0:	015b      	lsls	r3, r3, #5
 8001bc2:	f8d7 2c28 	ldr.w	r2, [r7, #3112]	; 0xc28
 8001bc6:	4413      	add	r3, r2
 8001bc8:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
            split = 2*(p/32 - (p/64)*2) + p%2;
 8001bcc:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	da00      	bge.n	8001bd6 <ExtractKtaPixelParameters+0xf6>
 8001bd4:	331f      	adds	r3, #31
 8001bd6:	115b      	asrs	r3, r3, #5
 8001bd8:	461a      	mov	r2, r3
 8001bda:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	da00      	bge.n	8001be4 <ExtractKtaPixelParameters+0x104>
 8001be2:	333f      	adds	r3, #63	; 0x3f
 8001be4:	119b      	asrs	r3, r3, #6
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	b2da      	uxtb	r2, r3
 8001bf0:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	bfb8      	it	lt
 8001bfc:	425b      	neglt	r3, r3
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	4413      	add	r3, r2
 8001c02:	f887 3c16 	strb.w	r3, [r7, #3094]	; 0xc16
            ktaTemp[p] = (eeData[64 + p] & 0x000E) >> 1;
 8001c06:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8001c0a:	3340      	adds	r3, #64	; 0x40
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	f607 4238 	addw	r2, r7, #3128	; 0xc38
 8001c12:	f6a2 422c 	subw	r2, r2, #3116	; 0xc2c
 8001c16:	6812      	ldr	r2, [r2, #0]
 8001c18:	4413      	add	r3, r2
 8001c1a:	881b      	ldrh	r3, [r3, #0]
 8001c1c:	105b      	asrs	r3, r3, #1
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	ee07 3a90 	vmov	s15, r3
 8001c26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c2a:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001c2e:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8001c32:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	edc3 7a00 	vstr	s15, [r3]
            if (ktaTemp[p] > 3)
 8001c3e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001c42:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8001c46:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	edd3 7a00 	vldr	s15, [r3]
 8001c52:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001c56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5e:	dd17      	ble.n	8001c90 <ExtractKtaPixelParameters+0x1b0>
            {
                ktaTemp[p] = ktaTemp[p] - 8;
 8001c60:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001c64:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8001c68:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	edd3 7a00 	vldr	s15, [r3]
 8001c74:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001c78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c7c:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001c80:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8001c84:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	edc3 7a00 	vstr	s15, [r3]
            }
            ktaTemp[p] = ktaTemp[p] * (1 << ktaScale2);
 8001c90:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001c94:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8001c98:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	ed93 7a00 	vldr	s14, [r3]
 8001ca4:	f897 3c17 	ldrb.w	r3, [r7, #3095]	; 0xc17
 8001ca8:	2201      	movs	r2, #1
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	ee07 3a90 	vmov	s15, r3
 8001cb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cba:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001cbe:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8001cc2:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	edc3 7a00 	vstr	s15, [r3]
            ktaTemp[p] = KtaRC[split] + ktaTemp[p];
 8001cce:	f897 3c16 	ldrb.w	r3, [r7, #3094]	; 0xc16
 8001cd2:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 8001cd6:	f107 0208 	add.w	r2, r7, #8
 8001cda:	4413      	add	r3, r2
 8001cdc:	f913 3c28 	ldrsb.w	r3, [r3, #-40]
 8001ce0:	ee07 3a90 	vmov	s15, r3
 8001ce4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ce8:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001cec:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8001cf0:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	edd3 7a00 	vldr	s15, [r3]
 8001cfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d00:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001d04:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8001d08:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4413      	add	r3, r2
 8001d10:	edc3 7a00 	vstr	s15, [r3]
            ktaTemp[p] = ktaTemp[p] / pow(2,(double)ktaScale1);
 8001d14:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001d18:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8001d1c:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	edd3 7a00 	vldr	s15, [r3]
 8001d28:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001d2c:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 8001d30:	ee07 3a90 	vmov	s15, r3
 8001d34:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001d38:	eeb0 1b47 	vmov.f64	d1, d7
 8001d3c:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8001d40:	f012 fba2 	bl	8014488 <pow>
 8001d44:	eeb0 6b40 	vmov.f64	d6, d0
 8001d48:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8001d4c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d50:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001d54:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8001d58:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < 32; j ++)
 8001d64:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 8001d68:	3301      	adds	r3, #1
 8001d6a:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
 8001d6e:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 8001d72:	2b1f      	cmp	r3, #31
 8001d74:	f77f af22 	ble.w	8001bbc <ExtractKtaPixelParameters+0xdc>
    for(int i = 0; i < 24; i++)
 8001d78:	f8d7 3c2c 	ldr.w	r3, [r7, #3116]	; 0xc2c
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	f8c7 3c2c 	str.w	r3, [r7, #3116]	; 0xc2c
 8001d82:	f8d7 3c2c 	ldr.w	r3, [r7, #3116]	; 0xc2c
 8001d86:	2b17      	cmp	r3, #23
 8001d88:	f77f af14 	ble.w	8001bb4 <ExtractKtaPixelParameters+0xd4>
            //ktaTemp[p] = ktaTemp[p] * mlx90640->offset[p];
        }
    }
    
    temp = fabs(ktaTemp[0]);
 8001d8c:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001d90:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8001d94:	edd3 7a00 	vldr	s15, [r3]
 8001d98:	eef0 7ae7 	vabs.f32	s15, s15
 8001d9c:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8001da0:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < 768; i++)
 8001da4:	2301      	movs	r3, #1
 8001da6:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 8001daa:	e029      	b.n	8001e00 <ExtractKtaPixelParameters+0x320>
    {
        if (fabs(ktaTemp[i]) > temp)
 8001dac:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001db0:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8001db4:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	4413      	add	r3, r2
 8001dbc:	edd3 7a00 	vldr	s15, [r3]
 8001dc0:	eef0 7ae7 	vabs.f32	s15, s15
 8001dc4:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8001dc8:	ed93 7a00 	vldr	s14, [r3]
 8001dcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd4:	d50f      	bpl.n	8001df6 <ExtractKtaPixelParameters+0x316>
        {
            temp = fabs(ktaTemp[i]);
 8001dd6:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001dda:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8001dde:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	edd3 7a00 	vldr	s15, [r3]
 8001dea:	eef0 7ae7 	vabs.f32	s15, s15
 8001dee:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8001df2:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < 768; i++)
 8001df6:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 8001e00:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 8001e04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001e08:	dbd0      	blt.n	8001dac <ExtractKtaPixelParameters+0x2cc>
        }
    }
    
    ktaScale1 = 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
    while(temp < 64)
 8001e10:	e00e      	b.n	8001e30 <ExtractKtaPixelParameters+0x350>
    {
        temp = temp*2;
 8001e12:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8001e16:	edd3 7a00 	vldr	s15, [r3]
 8001e1a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e1e:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8001e22:	edc3 7a00 	vstr	s15, [r3]
        ktaScale1 = ktaScale1 + 1;
 8001e26:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
    while(temp < 64)
 8001e30:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8001e34:	edd3 7a00 	vldr	s15, [r3]
 8001e38:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8001f44 <ExtractKtaPixelParameters+0x464>
 8001e3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e44:	d4e5      	bmi.n	8001e12 <ExtractKtaPixelParameters+0x332>
    }    
     
    for(int i = 0; i < 768; i++)
 8001e46:	2300      	movs	r3, #0
 8001e48:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 8001e4c:	e064      	b.n	8001f18 <ExtractKtaPixelParameters+0x438>
    {
        temp = ktaTemp[i] * pow(2,(double)ktaScale1);
 8001e4e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001e52:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8001e56:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	edd3 7a00 	vldr	s15, [r3]
 8001e62:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001e66:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 8001e6a:	ee07 3a90 	vmov	s15, r3
 8001e6e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001e72:	eeb0 1b47 	vmov.f64	d1, d7
 8001e76:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8001e7a:	f012 fb05 	bl	8014488 <pow>
 8001e7e:	eeb0 7b40 	vmov.f64	d7, d0
 8001e82:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001e86:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001e8a:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8001e8e:	edc3 7a00 	vstr	s15, [r3]
        if (temp < 0)
 8001e92:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8001e96:	edd3 7a00 	vldr	s15, [r3]
 8001e9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea2:	d51a      	bpl.n	8001eda <ExtractKtaPixelParameters+0x3fa>
        {
            mlx90640->kta[i] = (temp - 0.5f);
 8001ea4:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8001ea8:	edd3 7a00 	vldr	s15, [r3]
 8001eac:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001eb0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001eb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eb8:	edc7 7a01 	vstr	s15, [r7, #4]
 8001ebc:	793b      	ldrb	r3, [r7, #4]
 8001ebe:	b259      	sxtb	r1, r3
 8001ec0:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001ec4:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8001ece:	4413      	add	r3, r2
 8001ed0:	f603 434c 	addw	r3, r3, #3148	; 0xc4c
 8001ed4:	460a      	mov	r2, r1
 8001ed6:	701a      	strb	r2, [r3, #0]
 8001ed8:	e019      	b.n	8001f0e <ExtractKtaPixelParameters+0x42e>
        }
        else
        {
            mlx90640->kta[i] = (temp + 0.5f);
 8001eda:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8001ede:	edd3 7a00 	vldr	s15, [r3]
 8001ee2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001ee6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001eea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eee:	edc7 7a01 	vstr	s15, [r7, #4]
 8001ef2:	793b      	ldrb	r3, [r7, #4]
 8001ef4:	b259      	sxtb	r1, r3
 8001ef6:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001efa:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8001f04:	4413      	add	r3, r2
 8001f06:	f603 434c 	addw	r3, r3, #3148	; 0xc4c
 8001f0a:	460a      	mov	r2, r1
 8001f0c:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 768; i++)
 8001f0e:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8001f12:	3301      	adds	r3, #1
 8001f14:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 8001f18:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8001f1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001f20:	db95      	blt.n	8001e4e <ExtractKtaPixelParameters+0x36e>
        }        
        
    } 
    
    mlx90640->ktaScale = ktaScale1;           
 8001f22:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001f26:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f897 2c37 	ldrb.w	r2, [r7, #3127]	; 0xc37
 8001f30:	f883 2f4c 	strb.w	r2, [r3, #3916]	; 0xf4c
}
 8001f34:	bf00      	nop
 8001f36:	f607 4738 	addw	r7, r7, #3128	; 0xc38
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	ecbd 8b02 	vpop	{d8}
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	42800000 	.word	0x42800000

08001f48 <ExtractKvPixelParameters>:


//------------------------------------------------------------------------------

void ExtractKvPixelParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	ed2d 8b02 	vpush	{d8}
 8001f4e:	f6ad 4d38 	subw	sp, sp, #3128	; 0xc38
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001f58:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8001f5c:	6018      	str	r0, [r3, #0]
 8001f5e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001f62:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8001f66:	6019      	str	r1, [r3, #0]
    int p = 0;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	f8c7 3c18 	str.w	r3, [r7, #3096]	; 0xc18
    uint8_t kvScale;
    uint8_t split;
    float kvTemp[768];
    float temp;

    KvRoCo = (eeData[52] & 0xF000) >> 12;
 8001f6e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001f72:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	3368      	adds	r3, #104	; 0x68
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	0b1b      	lsrs	r3, r3, #12
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
    if (KvRoCo > 7)
 8001f84:	f997 3c37 	ldrsb.w	r3, [r7, #3127]	; 0xc37
 8001f88:	2b07      	cmp	r3, #7
 8001f8a:	dd05      	ble.n	8001f98 <ExtractKvPixelParameters+0x50>
    {
        KvRoCo = KvRoCo - 16;
 8001f8c:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 8001f90:	3b10      	subs	r3, #16
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
    }
    KvT[0] = KvRoCo;
 8001f98:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 8001f9c:	f887 3c10 	strb.w	r3, [r7, #3088]	; 0xc10
    
    KvReCo = (eeData[52] & 0x0F00) >> 8;
 8001fa0:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001fa4:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	3368      	adds	r3, #104	; 0x68
 8001fac:	881b      	ldrh	r3, [r3, #0]
 8001fae:	121b      	asrs	r3, r3, #8
 8001fb0:	b25b      	sxtb	r3, r3
 8001fb2:	f003 030f 	and.w	r3, r3, #15
 8001fb6:	f887 3c35 	strb.w	r3, [r7, #3125]	; 0xc35
    if (KvReCo > 7)
 8001fba:	f997 3c35 	ldrsb.w	r3, [r7, #3125]	; 0xc35
 8001fbe:	2b07      	cmp	r3, #7
 8001fc0:	dd05      	ble.n	8001fce <ExtractKvPixelParameters+0x86>
    {
        KvReCo = KvReCo - 16;
 8001fc2:	f897 3c35 	ldrb.w	r3, [r7, #3125]	; 0xc35
 8001fc6:	3b10      	subs	r3, #16
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	f887 3c35 	strb.w	r3, [r7, #3125]	; 0xc35
    }
    KvT[2] = KvReCo;
 8001fce:	f897 3c35 	ldrb.w	r3, [r7, #3125]	; 0xc35
 8001fd2:	f887 3c12 	strb.w	r3, [r7, #3090]	; 0xc12
      
    KvRoCe = (eeData[52] & 0x00F0) >> 4;
 8001fd6:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001fda:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	3368      	adds	r3, #104	; 0x68
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	111b      	asrs	r3, r3, #4
 8001fe6:	b25b      	sxtb	r3, r3
 8001fe8:	f003 030f 	and.w	r3, r3, #15
 8001fec:	f887 3c36 	strb.w	r3, [r7, #3126]	; 0xc36
    if (KvRoCe > 7)
 8001ff0:	f997 3c36 	ldrsb.w	r3, [r7, #3126]	; 0xc36
 8001ff4:	2b07      	cmp	r3, #7
 8001ff6:	dd05      	ble.n	8002004 <ExtractKvPixelParameters+0xbc>
    {
        KvRoCe = KvRoCe - 16;
 8001ff8:	f897 3c36 	ldrb.w	r3, [r7, #3126]	; 0xc36
 8001ffc:	3b10      	subs	r3, #16
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	f887 3c36 	strb.w	r3, [r7, #3126]	; 0xc36
    }
    KvT[1] = KvRoCe;
 8002004:	f897 3c36 	ldrb.w	r3, [r7, #3126]	; 0xc36
 8002008:	f887 3c11 	strb.w	r3, [r7, #3089]	; 0xc11
      
    KvReCe = (eeData[52] & 0x000F);
 800200c:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002010:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	3368      	adds	r3, #104	; 0x68
 8002018:	881b      	ldrh	r3, [r3, #0]
 800201a:	b25b      	sxtb	r3, r3
 800201c:	f003 030f 	and.w	r3, r3, #15
 8002020:	f887 3c34 	strb.w	r3, [r7, #3124]	; 0xc34
    if (KvReCe > 7)
 8002024:	f997 3c34 	ldrsb.w	r3, [r7, #3124]	; 0xc34
 8002028:	2b07      	cmp	r3, #7
 800202a:	dd05      	ble.n	8002038 <ExtractKvPixelParameters+0xf0>
    {
        KvReCe = KvReCe - 16;
 800202c:	f897 3c34 	ldrb.w	r3, [r7, #3124]	; 0xc34
 8002030:	3b10      	subs	r3, #16
 8002032:	b2db      	uxtb	r3, r3
 8002034:	f887 3c34 	strb.w	r3, [r7, #3124]	; 0xc34
    }
    KvT[3] = KvReCe;
 8002038:	f897 3c34 	ldrb.w	r3, [r7, #3124]	; 0xc34
 800203c:	f887 3c13 	strb.w	r3, [r7, #3091]	; 0xc13
  
    kvScale = (eeData[56] & 0x0F00) >> 8;
 8002040:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002044:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	3370      	adds	r3, #112	; 0x70
 800204c:	881b      	ldrh	r3, [r3, #0]
 800204e:	121b      	asrs	r3, r3, #8
 8002050:	b2db      	uxtb	r3, r3
 8002052:	f003 030f 	and.w	r3, r3, #15
 8002056:	f887 3c33 	strb.w	r3, [r7, #3123]	; 0xc33


    for(int i = 0; i < 24; i++)
 800205a:	2300      	movs	r3, #0
 800205c:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
 8002060:	e075      	b.n	800214e <ExtractKvPixelParameters+0x206>
    {
        for(int j = 0; j < 32; j ++)
 8002062:	2300      	movs	r3, #0
 8002064:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 8002068:	e068      	b.n	800213c <ExtractKvPixelParameters+0x1f4>
        {
            p = 32 * i +j;
 800206a:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 800206e:	015b      	lsls	r3, r3, #5
 8002070:	f8d7 2c24 	ldr.w	r2, [r7, #3108]	; 0xc24
 8002074:	4413      	add	r3, r2
 8002076:	f8c7 3c18 	str.w	r3, [r7, #3096]	; 0xc18
            split = 2*(p/32 - (p/64)*2) + p%2;
 800207a:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 800207e:	2b00      	cmp	r3, #0
 8002080:	da00      	bge.n	8002084 <ExtractKvPixelParameters+0x13c>
 8002082:	331f      	adds	r3, #31
 8002084:	115b      	asrs	r3, r3, #5
 8002086:	461a      	mov	r2, r3
 8002088:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 800208c:	2b00      	cmp	r3, #0
 800208e:	da00      	bge.n	8002092 <ExtractKvPixelParameters+0x14a>
 8002090:	333f      	adds	r3, #63	; 0x3f
 8002092:	119b      	asrs	r3, r3, #6
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	b2db      	uxtb	r3, r3
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	b2da      	uxtb	r2, r3
 800209e:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	bfb8      	it	lt
 80020aa:	425b      	neglt	r3, r3
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	4413      	add	r3, r2
 80020b0:	f887 3c17 	strb.w	r3, [r7, #3095]	; 0xc17
            kvTemp[p] = KvT[split];
 80020b4:	f897 3c17 	ldrb.w	r3, [r7, #3095]	; 0xc17
 80020b8:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 80020bc:	f107 0208 	add.w	r2, r7, #8
 80020c0:	4413      	add	r3, r2
 80020c2:	f913 3c28 	ldrsb.w	r3, [r3, #-40]
 80020c6:	ee07 3a90 	vmov	s15, r3
 80020ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020ce:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80020d2:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80020d6:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	edc3 7a00 	vstr	s15, [r3]
            kvTemp[p] = kvTemp[p] / pow(2,(double)kvScale);
 80020e2:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80020e6:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80020ea:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	edd3 7a00 	vldr	s15, [r3]
 80020f6:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80020fa:	f897 3c33 	ldrb.w	r3, [r7, #3123]	; 0xc33
 80020fe:	ee07 3a90 	vmov	s15, r3
 8002102:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002106:	eeb0 1b47 	vmov.f64	d1, d7
 800210a:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 800210e:	f012 f9bb 	bl	8014488 <pow>
 8002112:	eeb0 6b40 	vmov.f64	d6, d0
 8002116:	ee88 7b06 	vdiv.f64	d7, d8, d6
 800211a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800211e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002122:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002126:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < 32; j ++)
 8002132:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 8002136:	3301      	adds	r3, #1
 8002138:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 800213c:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 8002140:	2b1f      	cmp	r3, #31
 8002142:	dd92      	ble.n	800206a <ExtractKvPixelParameters+0x122>
    for(int i = 0; i < 24; i++)
 8002144:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 8002148:	3301      	adds	r3, #1
 800214a:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
 800214e:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 8002152:	2b17      	cmp	r3, #23
 8002154:	dd85      	ble.n	8002062 <ExtractKvPixelParameters+0x11a>
            //kvTemp[p] = kvTemp[p] * mlx90640->offset[p];
        }
    }
    
    temp = fabs(kvTemp[0]);
 8002156:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800215a:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 800215e:	edd3 7a00 	vldr	s15, [r3]
 8002162:	eef0 7ae7 	vabs.f32	s15, s15
 8002166:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 800216a:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < 768; i++)
 800216e:	2301      	movs	r3, #1
 8002170:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 8002174:	e029      	b.n	80021ca <ExtractKvPixelParameters+0x282>
    {
        if (fabs(kvTemp[i]) > temp)
 8002176:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800217a:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 800217e:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	edd3 7a00 	vldr	s15, [r3]
 800218a:	eef0 7ae7 	vabs.f32	s15, s15
 800218e:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8002192:	ed93 7a00 	vldr	s14, [r3]
 8002196:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800219a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800219e:	d50f      	bpl.n	80021c0 <ExtractKvPixelParameters+0x278>
        {
            temp = fabs(kvTemp[i]);
 80021a0:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80021a4:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80021a8:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	edd3 7a00 	vldr	s15, [r3]
 80021b4:	eef0 7ae7 	vabs.f32	s15, s15
 80021b8:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 80021bc:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < 768; i++)
 80021c0:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 80021c4:	3301      	adds	r3, #1
 80021c6:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 80021ca:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 80021ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80021d2:	dbd0      	blt.n	8002176 <ExtractKvPixelParameters+0x22e>
        }
    }
    
    kvScale = 0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	f887 3c33 	strb.w	r3, [r7, #3123]	; 0xc33
    while(temp < 64)
 80021da:	e00e      	b.n	80021fa <ExtractKvPixelParameters+0x2b2>
    {
        temp = temp*2;
 80021dc:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 80021e0:	edd3 7a00 	vldr	s15, [r3]
 80021e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80021e8:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 80021ec:	edc3 7a00 	vstr	s15, [r3]
        kvScale = kvScale + 1;
 80021f0:	f897 3c33 	ldrb.w	r3, [r7, #3123]	; 0xc33
 80021f4:	3301      	adds	r3, #1
 80021f6:	f887 3c33 	strb.w	r3, [r7, #3123]	; 0xc33
    while(temp < 64)
 80021fa:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 80021fe:	edd3 7a00 	vldr	s15, [r3]
 8002202:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8002314 <ExtractKvPixelParameters+0x3cc>
 8002206:	eef4 7ac7 	vcmpe.f32	s15, s14
 800220a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800220e:	d4e5      	bmi.n	80021dc <ExtractKvPixelParameters+0x294>
    }    
     
    for(int i = 0; i < 768; i++)
 8002210:	2300      	movs	r3, #0
 8002212:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
 8002216:	e064      	b.n	80022e2 <ExtractKvPixelParameters+0x39a>
    {
        temp = kvTemp[i] * pow(2,(double)kvScale);
 8002218:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800221c:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002220:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	edd3 7a00 	vldr	s15, [r3]
 800222c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002230:	f897 3c33 	ldrb.w	r3, [r7, #3123]	; 0xc33
 8002234:	ee07 3a90 	vmov	s15, r3
 8002238:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800223c:	eeb0 1b47 	vmov.f64	d1, d7
 8002240:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8002244:	f012 f920 	bl	8014488 <pow>
 8002248:	eeb0 7b40 	vmov.f64	d7, d0
 800224c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002250:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002254:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8002258:	edc3 7a00 	vstr	s15, [r3]
        if (temp < 0)
 800225c:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8002260:	edd3 7a00 	vldr	s15, [r3]
 8002264:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800226c:	d51a      	bpl.n	80022a4 <ExtractKvPixelParameters+0x35c>
        {
            mlx90640->kv[i] = (temp - 0.5f);
 800226e:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8002272:	edd3 7a00 	vldr	s15, [r3]
 8002276:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800227a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800227e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002282:	edc7 7a01 	vstr	s15, [r7, #4]
 8002286:	793b      	ldrb	r3, [r7, #4]
 8002288:	b259      	sxtb	r1, r3
 800228a:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800228e:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002298:	4413      	add	r3, r2
 800229a:	f603 734d 	addw	r3, r3, #3917	; 0xf4d
 800229e:	460a      	mov	r2, r1
 80022a0:	701a      	strb	r2, [r3, #0]
 80022a2:	e019      	b.n	80022d8 <ExtractKvPixelParameters+0x390>
        }
        else
        {
            mlx90640->kv[i] = (temp + 0.5f);
 80022a4:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 80022a8:	edd3 7a00 	vldr	s15, [r3]
 80022ac:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80022b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022b8:	edc7 7a01 	vstr	s15, [r7, #4]
 80022bc:	793b      	ldrb	r3, [r7, #4]
 80022be:	b259      	sxtb	r1, r3
 80022c0:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80022c4:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80022ce:	4413      	add	r3, r2
 80022d0:	f603 734d 	addw	r3, r3, #3917	; 0xf4d
 80022d4:	460a      	mov	r2, r1
 80022d6:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 768; i++)
 80022d8:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80022dc:	3301      	adds	r3, #1
 80022de:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
 80022e2:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80022e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022ea:	db95      	blt.n	8002218 <ExtractKvPixelParameters+0x2d0>
        }        
        
    } 
    
    mlx90640->kvScale = kvScale;        
 80022ec:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80022f0:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022fa:	461a      	mov	r2, r3
 80022fc:	f897 3c33 	ldrb.w	r3, [r7, #3123]	; 0xc33
 8002300:	f882 324d 	strb.w	r3, [r2, #589]	; 0x24d
}
 8002304:	bf00      	nop
 8002306:	f607 4738 	addw	r7, r7, #3128	; 0xc38
 800230a:	46bd      	mov	sp, r7
 800230c:	ecbd 8b02 	vpop	{d8}
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	42800000 	.word	0x42800000

08002318 <ExtractCPParameters>:

//------------------------------------------------------------------------------

void ExtractCPParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	ed2d 8b02 	vpush	{d8}
 800231e:	b088      	sub	sp, #32
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
    float cpKta;
    uint8_t alphaScale;
    uint8_t ktaScale1;
    uint8_t kvScale;

    alphaScale = ((eeData[32] & 0xF000) >> 12) + 27;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	3340      	adds	r3, #64	; 0x40
 800232a:	881b      	ldrh	r3, [r3, #0]
 800232c:	0b1b      	lsrs	r3, r3, #12
 800232e:	b29b      	uxth	r3, r3
 8002330:	b2db      	uxtb	r3, r3
 8002332:	331b      	adds	r3, #27
 8002334:	75fb      	strb	r3, [r7, #23]
    
    offsetSP[0] = (eeData[58] & 0x03FF);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3374      	adds	r3, #116	; 0x74
 800233a:	881b      	ldrh	r3, [r3, #0]
 800233c:	b21b      	sxth	r3, r3
 800233e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002342:	b21b      	sxth	r3, r3
 8002344:	813b      	strh	r3, [r7, #8]
    if (offsetSP[0] > 511)
 8002346:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800234a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800234e:	db07      	blt.n	8002360 <ExtractCPParameters+0x48>
    {
        offsetSP[0] = offsetSP[0] - 1024;
 8002350:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002354:	b29b      	uxth	r3, r3
 8002356:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800235a:	b29b      	uxth	r3, r3
 800235c:	b21b      	sxth	r3, r3
 800235e:	813b      	strh	r3, [r7, #8]
    }
    
    offsetSP[1] = (eeData[58] & 0xFC00) >> 10;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3374      	adds	r3, #116	; 0x74
 8002364:	881b      	ldrh	r3, [r3, #0]
 8002366:	0a9b      	lsrs	r3, r3, #10
 8002368:	b29b      	uxth	r3, r3
 800236a:	b21b      	sxth	r3, r3
 800236c:	817b      	strh	r3, [r7, #10]
    if (offsetSP[1] > 31)
 800236e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002372:	2b1f      	cmp	r3, #31
 8002374:	dd06      	ble.n	8002384 <ExtractCPParameters+0x6c>
    {
        offsetSP[1] = offsetSP[1] - 64;
 8002376:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800237a:	b29b      	uxth	r3, r3
 800237c:	3b40      	subs	r3, #64	; 0x40
 800237e:	b29b      	uxth	r3, r3
 8002380:	b21b      	sxth	r3, r3
 8002382:	817b      	strh	r3, [r7, #10]
    }
    offsetSP[1] = offsetSP[1] + offsetSP[0]; 
 8002384:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002388:	b29a      	uxth	r2, r3
 800238a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800238e:	b29b      	uxth	r3, r3
 8002390:	4413      	add	r3, r2
 8002392:	b29b      	uxth	r3, r3
 8002394:	b21b      	sxth	r3, r3
 8002396:	817b      	strh	r3, [r7, #10]
    
    alphaSP[0] = (eeData[57] & 0x03FF);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3372      	adds	r3, #114	; 0x72
 800239c:	881b      	ldrh	r3, [r3, #0]
 800239e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023a2:	ee07 3a90 	vmov	s15, r3
 80023a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023aa:	edc7 7a03 	vstr	s15, [r7, #12]
    if (alphaSP[0] > 511)
 80023ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80023b2:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8002588 <ExtractCPParameters+0x270>
 80023b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023be:	dd07      	ble.n	80023d0 <ExtractCPParameters+0xb8>
    {
        alphaSP[0] = alphaSP[0] - 1024;
 80023c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80023c4:	ed9f 7a71 	vldr	s14, [pc, #452]	; 800258c <ExtractCPParameters+0x274>
 80023c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80023cc:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    alphaSP[0] = alphaSP[0] /  pow(2,(double)alphaScale);
 80023d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80023d4:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80023d8:	7dfb      	ldrb	r3, [r7, #23]
 80023da:	ee07 3a90 	vmov	s15, r3
 80023de:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80023e2:	eeb0 1b47 	vmov.f64	d1, d7
 80023e6:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80023ea:	f012 f84d 	bl	8014488 <pow>
 80023ee:	eeb0 6b40 	vmov.f64	d6, d0
 80023f2:	ee88 7b06 	vdiv.f64	d7, d8, d6
 80023f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80023fa:	edc7 7a03 	vstr	s15, [r7, #12]
    
    alphaSP[1] = (eeData[57] & 0xFC00) >> 10;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	3372      	adds	r3, #114	; 0x72
 8002402:	881b      	ldrh	r3, [r3, #0]
 8002404:	0a9b      	lsrs	r3, r3, #10
 8002406:	b29b      	uxth	r3, r3
 8002408:	ee07 3a90 	vmov	s15, r3
 800240c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002410:	edc7 7a04 	vstr	s15, [r7, #16]
    if (alphaSP[1] > 31)
 8002414:	edd7 7a04 	vldr	s15, [r7, #16]
 8002418:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 800241c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002424:	dd07      	ble.n	8002436 <ExtractCPParameters+0x11e>
    {
        alphaSP[1] = alphaSP[1] - 64;
 8002426:	edd7 7a04 	vldr	s15, [r7, #16]
 800242a:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8002590 <ExtractCPParameters+0x278>
 800242e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002432:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    alphaSP[1] = (1 + alphaSP[1]/128) * alphaSP[0];
 8002436:	ed97 7a04 	vldr	s14, [r7, #16]
 800243a:	eddf 6a56 	vldr	s13, [pc, #344]	; 8002594 <ExtractCPParameters+0x27c>
 800243e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002442:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002446:	ee37 7a87 	vadd.f32	s14, s15, s14
 800244a:	edd7 7a03 	vldr	s15, [r7, #12]
 800244e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002452:	edc7 7a04 	vstr	s15, [r7, #16]
    
    cpKta = (eeData[59] & 0x00FF);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	3376      	adds	r3, #118	; 0x76
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	b2db      	uxtb	r3, r3
 800245e:	ee07 3a90 	vmov	s15, r3
 8002462:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002466:	edc7 7a06 	vstr	s15, [r7, #24]
    if (cpKta > 127)
 800246a:	edd7 7a06 	vldr	s15, [r7, #24]
 800246e:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8002598 <ExtractCPParameters+0x280>
 8002472:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800247a:	dd07      	ble.n	800248c <ExtractCPParameters+0x174>
    {
        cpKta = cpKta - 256;
 800247c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002480:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800259c <ExtractCPParameters+0x284>
 8002484:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002488:	edc7 7a06 	vstr	s15, [r7, #24]
    }
    ktaScale1 = ((eeData[56] & 0x00F0) >> 4) + 8;    
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3370      	adds	r3, #112	; 0x70
 8002490:	881b      	ldrh	r3, [r3, #0]
 8002492:	111b      	asrs	r3, r3, #4
 8002494:	b2db      	uxtb	r3, r3
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	b2db      	uxtb	r3, r3
 800249c:	3308      	adds	r3, #8
 800249e:	75bb      	strb	r3, [r7, #22]
    mlx90640->cpKta = cpKta / pow(2,(double)ktaScale1);
 80024a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80024a4:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80024a8:	7dbb      	ldrb	r3, [r7, #22]
 80024aa:	ee07 3a90 	vmov	s15, r3
 80024ae:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80024b2:	eeb0 1b47 	vmov.f64	d1, d7
 80024b6:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80024ba:	f011 ffe5 	bl	8014488 <pow>
 80024be:	eeb0 6b40 	vmov.f64	d6, d0
 80024c2:	ee88 7b06 	vdiv.f64	d7, d8, d6
 80024c6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	edc3 7a08 	vstr	s15, [r3, #32]
    
    cpKv = (eeData[59] & 0xFF00) >> 8;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3376      	adds	r3, #118	; 0x76
 80024d4:	881b      	ldrh	r3, [r3, #0]
 80024d6:	0a1b      	lsrs	r3, r3, #8
 80024d8:	b29b      	uxth	r3, r3
 80024da:	ee07 3a90 	vmov	s15, r3
 80024de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024e2:	edc7 7a07 	vstr	s15, [r7, #28]
    if (cpKv > 127)
 80024e6:	edd7 7a07 	vldr	s15, [r7, #28]
 80024ea:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002598 <ExtractCPParameters+0x280>
 80024ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f6:	dd07      	ble.n	8002508 <ExtractCPParameters+0x1f0>
    {
        cpKv = cpKv - 256;
 80024f8:	edd7 7a07 	vldr	s15, [r7, #28]
 80024fc:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800259c <ExtractCPParameters+0x284>
 8002500:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002504:	edc7 7a07 	vstr	s15, [r7, #28]
    }
    kvScale = (eeData[56] & 0x0F00) >> 8;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	3370      	adds	r3, #112	; 0x70
 800250c:	881b      	ldrh	r3, [r3, #0]
 800250e:	121b      	asrs	r3, r3, #8
 8002510:	b2db      	uxtb	r3, r3
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	757b      	strb	r3, [r7, #21]
    mlx90640->cpKv = cpKv / pow(2,(double)kvScale);
 8002518:	edd7 7a07 	vldr	s15, [r7, #28]
 800251c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002520:	7d7b      	ldrb	r3, [r7, #21]
 8002522:	ee07 3a90 	vmov	s15, r3
 8002526:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800252a:	eeb0 1b47 	vmov.f64	d1, d7
 800252e:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8002532:	f011 ffa9 	bl	8014488 <pow>
 8002536:	eeb0 6b40 	vmov.f64	d6, d0
 800253a:	ee88 7b06 	vdiv.f64	d7, d8, d6
 800253e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	edc3 7a07 	vstr	s15, [r3, #28]
       
    mlx90640->cpAlpha[0] = alphaSP[0];
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002550:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    mlx90640->cpAlpha[1] = alphaSP[1];
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800255c:	f8c2 3254 	str.w	r3, [r2, #596]	; 0x254
    mlx90640->cpOffset[0] = offsetSP[0];
 8002560:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800256a:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
    mlx90640->cpOffset[1] = offsetSP[1];  
 800256e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002578:	f8a3 225a 	strh.w	r2, [r3, #602]	; 0x25a
}
 800257c:	bf00      	nop
 800257e:	3720      	adds	r7, #32
 8002580:	46bd      	mov	sp, r7
 8002582:	ecbd 8b02 	vpop	{d8}
 8002586:	bd80      	pop	{r7, pc}
 8002588:	43ff8000 	.word	0x43ff8000
 800258c:	44800000 	.word	0x44800000
 8002590:	42800000 	.word	0x42800000
 8002594:	43000000 	.word	0x43000000
 8002598:	42fe0000 	.word	0x42fe0000
 800259c:	43800000 	.word	0x43800000

080025a0 <ExtractCILCParameters>:

//------------------------------------------------------------------------------

void ExtractCILCParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b087      	sub	sp, #28
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
    float ilChessC[3];
    uint8_t calibrationModeEE;
    
    calibrationModeEE = (eeData[10] & 0x0800) >> 4;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	3314      	adds	r3, #20
 80025ae:	881b      	ldrh	r3, [r3, #0]
 80025b0:	111b      	asrs	r3, r3, #4
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80025b8:	75fb      	strb	r3, [r7, #23]
    calibrationModeEE = calibrationModeEE ^ 0x80;
 80025ba:	7dfb      	ldrb	r3, [r7, #23]
 80025bc:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 80025c0:	43db      	mvns	r3, r3
 80025c2:	75fb      	strb	r3, [r7, #23]

    ilChessC[0] = (eeData[53] & 0x003F);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	336a      	adds	r3, #106	; 0x6a
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025ce:	ee07 3a90 	vmov	s15, r3
 80025d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025d6:	edc7 7a02 	vstr	s15, [r7, #8]
    if (ilChessC[0] > 31)
 80025da:	edd7 7a02 	vldr	s15, [r7, #8]
 80025de:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 80025e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ea:	dd07      	ble.n	80025fc <ExtractCILCParameters+0x5c>
    {
        ilChessC[0] = ilChessC[0] - 64;
 80025ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80025f0:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80026d8 <ExtractCILCParameters+0x138>
 80025f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80025f8:	edc7 7a02 	vstr	s15, [r7, #8]
    }
    ilChessC[0] = ilChessC[0] / 16.0f;
 80025fc:	ed97 7a02 	vldr	s14, [r7, #8]
 8002600:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8002604:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002608:	edc7 7a02 	vstr	s15, [r7, #8]
    
    ilChessC[1] = (eeData[53] & 0x07C0) >> 6;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	336a      	adds	r3, #106	; 0x6a
 8002610:	881b      	ldrh	r3, [r3, #0]
 8002612:	119b      	asrs	r3, r3, #6
 8002614:	f003 031f 	and.w	r3, r3, #31
 8002618:	ee07 3a90 	vmov	s15, r3
 800261c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002620:	edc7 7a03 	vstr	s15, [r7, #12]
    if (ilChessC[1] > 15)
 8002624:	edd7 7a03 	vldr	s15, [r7, #12]
 8002628:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800262c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002634:	dd07      	ble.n	8002646 <ExtractCILCParameters+0xa6>
    {
        ilChessC[1] = ilChessC[1] - 32;
 8002636:	edd7 7a03 	vldr	s15, [r7, #12]
 800263a:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80026dc <ExtractCILCParameters+0x13c>
 800263e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002642:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    ilChessC[1] = ilChessC[1] / 2.0f;
 8002646:	ed97 7a03 	vldr	s14, [r7, #12]
 800264a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800264e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002652:	edc7 7a03 	vstr	s15, [r7, #12]
    
    ilChessC[2] = (eeData[53] & 0xF800) >> 11;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	336a      	adds	r3, #106	; 0x6a
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	0adb      	lsrs	r3, r3, #11
 800265e:	b29b      	uxth	r3, r3
 8002660:	ee07 3a90 	vmov	s15, r3
 8002664:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002668:	edc7 7a04 	vstr	s15, [r7, #16]
    if (ilChessC[2] > 15)
 800266c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002670:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8002674:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800267c:	dd07      	ble.n	800268e <ExtractCILCParameters+0xee>
    {
        ilChessC[2] = ilChessC[2] - 32;
 800267e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002682:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80026dc <ExtractCILCParameters+0x13c>
 8002686:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800268a:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    ilChessC[2] = ilChessC[2] / 8.0f;
 800268e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002692:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8002696:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800269a:	edc7 7a04 	vstr	s15, [r7, #16]
    
    mlx90640->calibrationModeEE = calibrationModeEE;
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	7dfa      	ldrb	r2, [r7, #23]
 80026a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    mlx90640->ilChessC[0] = ilChessC[0];
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026ae:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
    mlx90640->ilChessC[1] = ilChessC[1];
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026ba:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
    mlx90640->ilChessC[2] = ilChessC[2];
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026c6:	f8c2 3264 	str.w	r3, [r2, #612]	; 0x264
}
 80026ca:	bf00      	nop
 80026cc:	371c      	adds	r7, #28
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	42800000 	.word	0x42800000
 80026dc:	42000000 	.word	0x42000000

080026e0 <ExtractDeviatingPixels>:

//------------------------------------------------------------------------------

int ExtractDeviatingPixels(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
    uint16_t pixCnt = 0;
 80026ea:	2300      	movs	r3, #0
 80026ec:	82fb      	strh	r3, [r7, #22]
    uint16_t brokenPixCnt = 0;
 80026ee:	2300      	movs	r3, #0
 80026f0:	82bb      	strh	r3, [r7, #20]
    uint16_t outlierPixCnt = 0;
 80026f2:	2300      	movs	r3, #0
 80026f4:	827b      	strh	r3, [r7, #18]
    int warn = 0;
 80026f6:	2300      	movs	r3, #0
 80026f8:	60fb      	str	r3, [r7, #12]
    int i;
    
    for(pixCnt = 0; pixCnt<5; pixCnt++)
 80026fa:	2300      	movs	r3, #0
 80026fc:	82fb      	strh	r3, [r7, #22]
 80026fe:	e013      	b.n	8002728 <ExtractDeviatingPixels+0x48>
    {
        mlx90640->brokenPixels[pixCnt] = 0xFFFF;
 8002700:	8afa      	ldrh	r2, [r7, #22]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	f602 1234 	addw	r2, r2, #2356	; 0x934
 8002708:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800270c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        mlx90640->outlierPixels[pixCnt] = 0xFFFF;
 8002710:	8afb      	ldrh	r3, [r7, #22]
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	4413      	add	r3, r2
 800271c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002720:	805a      	strh	r2, [r3, #2]
    for(pixCnt = 0; pixCnt<5; pixCnt++)
 8002722:	8afb      	ldrh	r3, [r7, #22]
 8002724:	3301      	adds	r3, #1
 8002726:	82fb      	strh	r3, [r7, #22]
 8002728:	8afb      	ldrh	r3, [r7, #22]
 800272a:	2b04      	cmp	r3, #4
 800272c:	d9e8      	bls.n	8002700 <ExtractDeviatingPixels+0x20>
    }
        
    pixCnt = 0;    
 800272e:	2300      	movs	r3, #0
 8002730:	82fb      	strh	r3, [r7, #22]
    while (pixCnt < 768 && brokenPixCnt < 5 && outlierPixCnt < 5)
 8002732:	e02a      	b.n	800278a <ExtractDeviatingPixels+0xaa>
    {
        if(eeData[pixCnt+64] == 0)
 8002734:	8afb      	ldrh	r3, [r7, #22]
 8002736:	3340      	adds	r3, #64	; 0x40
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	4413      	add	r3, r2
 800273e:	881b      	ldrh	r3, [r3, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10a      	bne.n	800275a <ExtractDeviatingPixels+0x7a>
        {
            mlx90640->brokenPixels[brokenPixCnt] = pixCnt;
 8002744:	8aba      	ldrh	r2, [r7, #20]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	f602 1234 	addw	r2, r2, #2356	; 0x934
 800274c:	8af9      	ldrh	r1, [r7, #22]
 800274e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            brokenPixCnt = brokenPixCnt + 1;
 8002752:	8abb      	ldrh	r3, [r7, #20]
 8002754:	3301      	adds	r3, #1
 8002756:	82bb      	strh	r3, [r7, #20]
 8002758:	e014      	b.n	8002784 <ExtractDeviatingPixels+0xa4>
        }    
        else if((eeData[pixCnt+64] & 0x0001) != 0)
 800275a:	8afb      	ldrh	r3, [r7, #22]
 800275c:	3340      	adds	r3, #64	; 0x40
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	4413      	add	r3, r2
 8002764:	881b      	ldrh	r3, [r3, #0]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00a      	beq.n	8002784 <ExtractDeviatingPixels+0xa4>
        {
            mlx90640->outlierPixels[outlierPixCnt] = pixCnt;
 800276e:	8a7b      	ldrh	r3, [r7, #18]
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	4413      	add	r3, r2
 800277a:	8afa      	ldrh	r2, [r7, #22]
 800277c:	805a      	strh	r2, [r3, #2]
            outlierPixCnt = outlierPixCnt + 1;
 800277e:	8a7b      	ldrh	r3, [r7, #18]
 8002780:	3301      	adds	r3, #1
 8002782:	827b      	strh	r3, [r7, #18]
        }    
        
        pixCnt = pixCnt + 1;
 8002784:	8afb      	ldrh	r3, [r7, #22]
 8002786:	3301      	adds	r3, #1
 8002788:	82fb      	strh	r3, [r7, #22]
    while (pixCnt < 768 && brokenPixCnt < 5 && outlierPixCnt < 5)
 800278a:	8afb      	ldrh	r3, [r7, #22]
 800278c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002790:	d205      	bcs.n	800279e <ExtractDeviatingPixels+0xbe>
 8002792:	8abb      	ldrh	r3, [r7, #20]
 8002794:	2b04      	cmp	r3, #4
 8002796:	d802      	bhi.n	800279e <ExtractDeviatingPixels+0xbe>
 8002798:	8a7b      	ldrh	r3, [r7, #18]
 800279a:	2b04      	cmp	r3, #4
 800279c:	d9ca      	bls.n	8002734 <ExtractDeviatingPixels+0x54>
        
    } 
    
    if(brokenPixCnt > 4)  
 800279e:	8abb      	ldrh	r3, [r7, #20]
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	d903      	bls.n	80027ac <ExtractDeviatingPixels+0xcc>
    {
        warn = -3;
 80027a4:	f06f 0302 	mvn.w	r3, #2
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	e08f      	b.n	80028cc <ExtractDeviatingPixels+0x1ec>
    }         
    else if(outlierPixCnt > 4)  
 80027ac:	8a7b      	ldrh	r3, [r7, #18]
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	d903      	bls.n	80027ba <ExtractDeviatingPixels+0xda>
    {
        warn = -4;
 80027b2:	f06f 0303 	mvn.w	r3, #3
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	e088      	b.n	80028cc <ExtractDeviatingPixels+0x1ec>
    }
    else if((brokenPixCnt + outlierPixCnt) > 4)  
 80027ba:	8aba      	ldrh	r2, [r7, #20]
 80027bc:	8a7b      	ldrh	r3, [r7, #18]
 80027be:	4413      	add	r3, r2
 80027c0:	2b04      	cmp	r3, #4
 80027c2:	dd03      	ble.n	80027cc <ExtractDeviatingPixels+0xec>
    {
        warn = -5;
 80027c4:	f06f 0304 	mvn.w	r3, #4
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	e07f      	b.n	80028cc <ExtractDeviatingPixels+0x1ec>
    } 
    else
    {
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 80027cc:	2300      	movs	r3, #0
 80027ce:	82fb      	strh	r3, [r7, #22]
 80027d0:	e022      	b.n	8002818 <ExtractDeviatingPixels+0x138>
        {
            for(i=pixCnt+1; i<brokenPixCnt; i++)
 80027d2:	8afb      	ldrh	r3, [r7, #22]
 80027d4:	3301      	adds	r3, #1
 80027d6:	60bb      	str	r3, [r7, #8]
 80027d8:	e017      	b.n	800280a <ExtractDeviatingPixels+0x12a>
            {
                warn = CheckAdjacentPixels(mlx90640->brokenPixels[pixCnt],mlx90640->brokenPixels[i]);
 80027da:	8afa      	ldrh	r2, [r7, #22]
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	f602 1234 	addw	r2, r2, #2356	; 0x934
 80027e2:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	68ba      	ldr	r2, [r7, #8]
 80027ea:	f602 1234 	addw	r2, r2, #2356	; 0x934
 80027ee:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80027f2:	4619      	mov	r1, r3
 80027f4:	f000 f86f 	bl	80028d6 <CheckAdjacentPixels>
 80027f8:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <ExtractDeviatingPixels+0x124>
                {
                    return warn;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	e064      	b.n	80028ce <ExtractDeviatingPixels+0x1ee>
            for(i=pixCnt+1; i<brokenPixCnt; i++)
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	3301      	adds	r3, #1
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	8abb      	ldrh	r3, [r7, #20]
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	429a      	cmp	r2, r3
 8002810:	dbe3      	blt.n	80027da <ExtractDeviatingPixels+0xfa>
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 8002812:	8afb      	ldrh	r3, [r7, #22]
 8002814:	3301      	adds	r3, #1
 8002816:	82fb      	strh	r3, [r7, #22]
 8002818:	8afa      	ldrh	r2, [r7, #22]
 800281a:	8abb      	ldrh	r3, [r7, #20]
 800281c:	429a      	cmp	r2, r3
 800281e:	d3d8      	bcc.n	80027d2 <ExtractDeviatingPixels+0xf2>
                }    
            }    
        }
        
        for(pixCnt=0; pixCnt<outlierPixCnt; pixCnt++)
 8002820:	2300      	movs	r3, #0
 8002822:	82fb      	strh	r3, [r7, #22]
 8002824:	e024      	b.n	8002870 <ExtractDeviatingPixels+0x190>
        {
            for(i=pixCnt+1; i<outlierPixCnt; i++)
 8002826:	8afb      	ldrh	r3, [r7, #22]
 8002828:	3301      	adds	r3, #1
 800282a:	60bb      	str	r3, [r7, #8]
 800282c:	e019      	b.n	8002862 <ExtractDeviatingPixels+0x182>
            {
                warn = CheckAdjacentPixels(mlx90640->outlierPixels[pixCnt],mlx90640->outlierPixels[i]);
 800282e:	8afb      	ldrh	r3, [r7, #22]
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	4413      	add	r3, r2
 800283a:	8858      	ldrh	r0, [r3, #2]
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	4413      	add	r3, r2
 8002848:	885b      	ldrh	r3, [r3, #2]
 800284a:	4619      	mov	r1, r3
 800284c:	f000 f843 	bl	80028d6 <CheckAdjacentPixels>
 8002850:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <ExtractDeviatingPixels+0x17c>
                {
                    return warn;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	e038      	b.n	80028ce <ExtractDeviatingPixels+0x1ee>
            for(i=pixCnt+1; i<outlierPixCnt; i++)
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	3301      	adds	r3, #1
 8002860:	60bb      	str	r3, [r7, #8]
 8002862:	8a7b      	ldrh	r3, [r7, #18]
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	429a      	cmp	r2, r3
 8002868:	dbe1      	blt.n	800282e <ExtractDeviatingPixels+0x14e>
        for(pixCnt=0; pixCnt<outlierPixCnt; pixCnt++)
 800286a:	8afb      	ldrh	r3, [r7, #22]
 800286c:	3301      	adds	r3, #1
 800286e:	82fb      	strh	r3, [r7, #22]
 8002870:	8afa      	ldrh	r2, [r7, #22]
 8002872:	8a7b      	ldrh	r3, [r7, #18]
 8002874:	429a      	cmp	r2, r3
 8002876:	d3d6      	bcc.n	8002826 <ExtractDeviatingPixels+0x146>
                }    
            }    
        } 
        
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 8002878:	2300      	movs	r3, #0
 800287a:	82fb      	strh	r3, [r7, #22]
 800287c:	e022      	b.n	80028c4 <ExtractDeviatingPixels+0x1e4>
        {
            for(i=0; i<outlierPixCnt; i++)
 800287e:	2300      	movs	r3, #0
 8002880:	60bb      	str	r3, [r7, #8]
 8002882:	e018      	b.n	80028b6 <ExtractDeviatingPixels+0x1d6>
            {
                warn = CheckAdjacentPixels(mlx90640->brokenPixels[pixCnt],mlx90640->outlierPixels[i]);
 8002884:	8afa      	ldrh	r2, [r7, #22]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	f602 1234 	addw	r2, r2, #2356	; 0x934
 800288c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	4413      	add	r3, r2
 800289c:	885b      	ldrh	r3, [r3, #2]
 800289e:	4619      	mov	r1, r3
 80028a0:	f000 f819 	bl	80028d6 <CheckAdjacentPixels>
 80028a4:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <ExtractDeviatingPixels+0x1d0>
                {
                    return warn;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	e00e      	b.n	80028ce <ExtractDeviatingPixels+0x1ee>
            for(i=0; i<outlierPixCnt; i++)
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	3301      	adds	r3, #1
 80028b4:	60bb      	str	r3, [r7, #8]
 80028b6:	8a7b      	ldrh	r3, [r7, #18]
 80028b8:	68ba      	ldr	r2, [r7, #8]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	dbe2      	blt.n	8002884 <ExtractDeviatingPixels+0x1a4>
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 80028be:	8afb      	ldrh	r3, [r7, #22]
 80028c0:	3301      	adds	r3, #1
 80028c2:	82fb      	strh	r3, [r7, #22]
 80028c4:	8afa      	ldrh	r2, [r7, #22]
 80028c6:	8abb      	ldrh	r3, [r7, #20]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d3d8      	bcc.n	800287e <ExtractDeviatingPixels+0x19e>
        }    
        
    }    
    
    
    return warn;
 80028cc:	68fb      	ldr	r3, [r7, #12]
       
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3718      	adds	r7, #24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <CheckAdjacentPixels>:

//------------------------------------------------------------------------------

 int CheckAdjacentPixels(uint16_t pix1, uint16_t pix2)
 {
 80028d6:	b480      	push	{r7}
 80028d8:	b085      	sub	sp, #20
 80028da:	af00      	add	r7, sp, #0
 80028dc:	4603      	mov	r3, r0
 80028de:	460a      	mov	r2, r1
 80028e0:	80fb      	strh	r3, [r7, #6]
 80028e2:	4613      	mov	r3, r2
 80028e4:	80bb      	strh	r3, [r7, #4]
     int pixPosDif;
     
     pixPosDif = pix1 - pix2;
 80028e6:	88fa      	ldrh	r2, [r7, #6]
 80028e8:	88bb      	ldrh	r3, [r7, #4]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	60fb      	str	r3, [r7, #12]
     if(pixPosDif > -34 && pixPosDif < -30)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f113 0f21 	cmn.w	r3, #33	; 0x21
 80028f4:	db06      	blt.n	8002904 <CheckAdjacentPixels+0x2e>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f113 0f1e 	cmn.w	r3, #30
 80028fc:	da02      	bge.n	8002904 <CheckAdjacentPixels+0x2e>
     {
         return -6;
 80028fe:	f06f 0305 	mvn.w	r3, #5
 8002902:	e013      	b.n	800292c <CheckAdjacentPixels+0x56>
     } 
     if(pixPosDif > -2 && pixPosDif < 2)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800290a:	db05      	blt.n	8002918 <CheckAdjacentPixels+0x42>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2b01      	cmp	r3, #1
 8002910:	dc02      	bgt.n	8002918 <CheckAdjacentPixels+0x42>
     {
         return -6;
 8002912:	f06f 0305 	mvn.w	r3, #5
 8002916:	e009      	b.n	800292c <CheckAdjacentPixels+0x56>
     } 
     if(pixPosDif > 30 && pixPosDif < 34)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2b1e      	cmp	r3, #30
 800291c:	dd05      	ble.n	800292a <CheckAdjacentPixels+0x54>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2b21      	cmp	r3, #33	; 0x21
 8002922:	dc02      	bgt.n	800292a <CheckAdjacentPixels+0x54>
     {
         return -6;
 8002924:	f06f 0305 	mvn.w	r3, #5
 8002928:	e000      	b.n	800292c <CheckAdjacentPixels+0x56>
     }
     
     return 0;    
 800292a:	2300      	movs	r3, #0
 }
 800292c:	4618      	mov	r0, r3
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <MLX90640_I2CRead>:
	MX_I2C1_Init();
}


int MLX90640_I2CRead(uint8_t slaveAddr, uint16_t startAddress, uint16_t nMemAddressRead, uint16_t *data)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b08c      	sub	sp, #48	; 0x30
 800293c:	af04      	add	r7, sp, #16
 800293e:	607b      	str	r3, [r7, #4]
 8002940:	4603      	mov	r3, r0
 8002942:	73fb      	strb	r3, [r7, #15]
 8002944:	460b      	mov	r3, r1
 8002946:	81bb      	strh	r3, [r7, #12]
 8002948:	4613      	mov	r3, r2
 800294a:	817b      	strh	r3, [r7, #10]

	uint8_t* p = (uint8_t*) data;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	61bb      	str	r3, [r7, #24]

	int ack = 0;                               
 8002950:	2300      	movs	r3, #0
 8002952:	617b      	str	r3, [r7, #20]
	int cnt = 0;
 8002954:	2300      	movs	r3, #0
 8002956:	61fb      	str	r3, [r7, #28]
	
	ack = HAL_I2C_Mem_Read(&hi2c1, (slaveAddr<<1), startAddress, I2C_MEMADD_SIZE_16BIT, p, nMemAddressRead*2, 500);
 8002958:	7bfb      	ldrb	r3, [r7, #15]
 800295a:	b29b      	uxth	r3, r3
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	b299      	uxth	r1, r3
 8002960:	897b      	ldrh	r3, [r7, #10]
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	b29b      	uxth	r3, r3
 8002966:	89ba      	ldrh	r2, [r7, #12]
 8002968:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800296c:	9002      	str	r0, [sp, #8]
 800296e:	9301      	str	r3, [sp, #4]
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	2302      	movs	r3, #2
 8002976:	4817      	ldr	r0, [pc, #92]	; (80029d4 <MLX90640_I2CRead+0x9c>)
 8002978:	f004 fa38 	bl	8006dec <HAL_I2C_Mem_Read>
 800297c:	4603      	mov	r3, r0
 800297e:	617b      	str	r3, [r7, #20]

	if (ack != HAL_OK)
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d002      	beq.n	800298c <MLX90640_I2CRead+0x54>
	{
			return -1;
 8002986:	f04f 33ff 	mov.w	r3, #4294967295
 800298a:	e01f      	b.n	80029cc <MLX90640_I2CRead+0x94>
	}
	

	for(cnt=0; cnt < nMemAddressRead*2; cnt+=2) {
 800298c:	2300      	movs	r3, #0
 800298e:	61fb      	str	r3, [r7, #28]
 8002990:	e016      	b.n	80029c0 <MLX90640_I2CRead+0x88>
		uint8_t tempBuffer = p[cnt+1];
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	3301      	adds	r3, #1
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	4413      	add	r3, r2
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	74fb      	strb	r3, [r7, #19]
		p[cnt+1] = p[cnt];
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	441a      	add	r2, r3
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	3301      	adds	r3, #1
 80029a8:	69b9      	ldr	r1, [r7, #24]
 80029aa:	440b      	add	r3, r1
 80029ac:	7812      	ldrb	r2, [r2, #0]
 80029ae:	701a      	strb	r2, [r3, #0]
		p[cnt] = tempBuffer;
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4413      	add	r3, r2
 80029b6:	7cfa      	ldrb	r2, [r7, #19]
 80029b8:	701a      	strb	r2, [r3, #0]
	for(cnt=0; cnt < nMemAddressRead*2; cnt+=2) {
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	3302      	adds	r3, #2
 80029be:	61fb      	str	r3, [r7, #28]
 80029c0:	897b      	ldrh	r3, [r7, #10]
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	69fa      	ldr	r2, [r7, #28]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	dbe3      	blt.n	8002992 <MLX90640_I2CRead+0x5a>
	}

	return 0;   
 80029ca:	2300      	movs	r3, #0
} 
 80029cc:	4618      	mov	r0, r3
 80029ce:	3720      	adds	r7, #32
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	20000350 	.word	0x20000350

080029d8 <MLX90640_I2CWrite>:


int MLX90640_I2CWrite(uint8_t slaveAddr, uint16_t writeAddress, uint16_t data)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b088      	sub	sp, #32
 80029dc:	af04      	add	r7, sp, #16
 80029de:	4603      	mov	r3, r0
 80029e0:	71fb      	strb	r3, [r7, #7]
 80029e2:	460b      	mov	r3, r1
 80029e4:	80bb      	strh	r3, [r7, #4]
 80029e6:	4613      	mov	r3, r2
 80029e8:	807b      	strh	r3, [r7, #2]

	uint8_t sa;
	int ack = 0;
 80029ea:	2300      	movs	r3, #0
 80029ec:	60fb      	str	r3, [r7, #12]
	uint8_t cmd[2];
	static uint16_t dataCheck;

	sa = (slaveAddr << 1);
 80029ee:	79fb      	ldrb	r3, [r7, #7]
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	72fb      	strb	r3, [r7, #11]

	cmd[0] = data >> 8;
 80029f4:	887b      	ldrh	r3, [r7, #2]
 80029f6:	0a1b      	lsrs	r3, r3, #8
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	723b      	strb	r3, [r7, #8]
	cmd[1] = data & 0x00FF;
 80029fe:	887b      	ldrh	r3, [r7, #2]
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	727b      	strb	r3, [r7, #9]


	ack = HAL_I2C_Mem_Write(&hi2c1, sa, writeAddress, I2C_MEMADD_SIZE_16BIT, cmd, sizeof(cmd), 500);
 8002a04:	7afb      	ldrb	r3, [r7, #11]
 8002a06:	b299      	uxth	r1, r3
 8002a08:	88ba      	ldrh	r2, [r7, #4]
 8002a0a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002a0e:	9302      	str	r3, [sp, #8]
 8002a10:	2302      	movs	r3, #2
 8002a12:	9301      	str	r3, [sp, #4]
 8002a14:	f107 0308 	add.w	r3, r7, #8
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	480e      	ldr	r0, [pc, #56]	; (8002a58 <MLX90640_I2CWrite+0x80>)
 8002a1e:	f004 f8d1 	bl	8006bc4 <HAL_I2C_Mem_Write>
 8002a22:	4603      	mov	r3, r0
 8002a24:	60fb      	str	r3, [r7, #12]

	if (ack != HAL_OK)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d002      	beq.n	8002a32 <MLX90640_I2CWrite+0x5a>
	{
			return -1;
 8002a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a30:	e00e      	b.n	8002a50 <MLX90640_I2CWrite+0x78>
	}         
	
	MLX90640_I2CRead(slaveAddr,writeAddress,1, &dataCheck);
 8002a32:	88b9      	ldrh	r1, [r7, #4]
 8002a34:	79f8      	ldrb	r0, [r7, #7]
 8002a36:	4b09      	ldr	r3, [pc, #36]	; (8002a5c <MLX90640_I2CWrite+0x84>)
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f7ff ff7d 	bl	8002938 <MLX90640_I2CRead>
	
	if ( dataCheck != data)
 8002a3e:	4b07      	ldr	r3, [pc, #28]	; (8002a5c <MLX90640_I2CWrite+0x84>)
 8002a40:	881b      	ldrh	r3, [r3, #0]
 8002a42:	887a      	ldrh	r2, [r7, #2]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d002      	beq.n	8002a4e <MLX90640_I2CWrite+0x76>
	{
			return -2;
 8002a48:	f06f 0301 	mvn.w	r3, #1
 8002a4c:	e000      	b.n	8002a50 <MLX90640_I2CWrite+0x78>
	}    
	
	return 0;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	20000350 	.word	0x20000350
 8002a5c:	20000204 	.word	0x20000204

08002a60 <MPU9250_IsConnected>:
__weak void MPU9250_OnActivate()
{
}
#ifndef USE_SPI
bool MPU9250_IsConnected()
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&_MPU9250_I2C,_dev_add,1,HAL_MAX_DELAY)==HAL_OK)
 8002a64:	21d0      	movs	r1, #208	; 0xd0
 8002a66:	f04f 33ff 	mov.w	r3, #4294967295
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	4805      	ldr	r0, [pc, #20]	; (8002a84 <MPU9250_IsConnected+0x24>)
 8002a6e:	f004 fad7 	bl	8007020 <HAL_I2C_IsDeviceReady>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <MPU9250_IsConnected+0x1c>
		return true;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e000      	b.n	8002a7e <MPU9250_IsConnected+0x1e>
	else
		return false;	
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	2000039c 	.word	0x2000039c

08002a88 <MPU_I2C_Write>:

void MPU_I2C_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af04      	add	r7, sp, #16
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	460b      	mov	r3, r1
 8002a92:	70fb      	strb	r3, [r7, #3]
 8002a94:	4613      	mov	r3, r2
 8002a96:	803b      	strh	r3, [r7, #0]
	HAL_I2C_Mem_Write(&_MPU9250_I2C,_dev_add,WriteAddr,I2C_MEMADD_SIZE_8BIT,pBuffer,NumByteToWrite,HAL_MAX_DELAY);
 8002a98:	21d0      	movs	r1, #208	; 0xd0
 8002a9a:	78fb      	ldrb	r3, [r7, #3]
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002aa2:	9302      	str	r3, [sp, #8]
 8002aa4:	883b      	ldrh	r3, [r7, #0]
 8002aa6:	9301      	str	r3, [sp, #4]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	9300      	str	r3, [sp, #0]
 8002aac:	2301      	movs	r3, #1
 8002aae:	4803      	ldr	r0, [pc, #12]	; (8002abc <MPU_I2C_Write+0x34>)
 8002ab0:	f004 f888 	bl	8006bc4 <HAL_I2C_Mem_Write>
}
 8002ab4:	bf00      	nop
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	2000039c 	.word	0x2000039c

08002ac0 <MPU_I2C_Read>:

void MPU_I2C_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af02      	add	r7, sp, #8
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	70fb      	strb	r3, [r7, #3]
 8002acc:	4613      	mov	r3, r2
 8002ace:	803b      	strh	r3, [r7, #0]
	uint8_t data = ReadAddr | READWRITE_CMD;
 8002ad0:	2280      	movs	r2, #128	; 0x80
 8002ad2:	78fb      	ldrb	r3, [r7, #3]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&_MPU9250_I2C,_dev_add,&data,1,HAL_MAX_DELAY);
 8002ada:	21d0      	movs	r1, #208	; 0xd0
 8002adc:	f107 020f 	add.w	r2, r7, #15
 8002ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	4807      	ldr	r0, [pc, #28]	; (8002b08 <MPU_I2C_Read+0x48>)
 8002aea:	f003 fe81 	bl	80067f0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&_MPU9250_I2C,_dev_add,pBuffer,NumByteToRead,HAL_MAX_DELAY);
 8002aee:	21d0      	movs	r1, #208	; 0xd0
 8002af0:	883b      	ldrh	r3, [r7, #0]
 8002af2:	f04f 32ff 	mov.w	r2, #4294967295
 8002af6:	9200      	str	r2, [sp, #0]
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	4803      	ldr	r0, [pc, #12]	; (8002b08 <MPU_I2C_Read+0x48>)
 8002afc:	f003 ff6c 	bl	80069d8 <HAL_I2C_Master_Receive>
}
 8002b00:	bf00      	nop
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	2000039c 	.word	0x2000039c

08002b0c <writeRegister>:
	MPU9250_Deactivate();
}
#endif
/* writes a byte to MPU9250 register given a register address and data */
void writeRegister(uint8_t subAddress, uint8_t data)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	460a      	mov	r2, r1
 8002b16:	71fb      	strb	r3, [r7, #7]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	71bb      	strb	r3, [r7, #6]
	#ifdef USE_SPI
	MPU_SPI_Write(&data, subAddress, 1);
	#else
	MPU_I2C_Write(&data, subAddress, 1);
 8002b1c:	79f9      	ldrb	r1, [r7, #7]
 8002b1e:	1dbb      	adds	r3, r7, #6
 8002b20:	2201      	movs	r2, #1
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff ffb0 	bl	8002a88 <MPU_I2C_Write>
	#endif
	HAL_Delay(10);
 8002b28:	200a      	movs	r0, #10
 8002b2a:	f002 fbb9 	bl	80052a0 <HAL_Delay>
}
 8002b2e:	bf00      	nop
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <readRegisters>:

/* reads registers from MPU9250 given a starting register address, number of bytes, and a pointer to store data */
void readRegisters(uint8_t subAddress, uint8_t count, uint8_t* dest){
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b082      	sub	sp, #8
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	603a      	str	r2, [r7, #0]
 8002b40:	71fb      	strb	r3, [r7, #7]
 8002b42:	460b      	mov	r3, r1
 8002b44:	71bb      	strb	r3, [r7, #6]
	#ifdef USE_SPI
	MPU_SPI_Read(dest, subAddress, count);
	#else
	MPU_I2C_Read(dest, subAddress, count);
 8002b46:	79bb      	ldrb	r3, [r7, #6]
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	79fb      	ldrb	r3, [r7, #7]
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	6838      	ldr	r0, [r7, #0]
 8002b50:	f7ff ffb6 	bl	8002ac0 <MPU_I2C_Read>
	#endif
}
 8002b54:	bf00      	nop
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <writeAK8963Register>:

/* writes a register to the AK8963 given a register address and data */
void writeAK8963Register(uint8_t subAddress, uint8_t data)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	4603      	mov	r3, r0
 8002b64:	460a      	mov	r2, r1
 8002b66:	71fb      	strb	r3, [r7, #7]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for write
	writeRegister(I2C_SLV0_ADDR,AK8963_I2C_ADDR);
 8002b6c:	2325      	movs	r3, #37	; 0x25
 8002b6e:	220c      	movs	r2, #12
 8002b70:	4611      	mov	r1, r2
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff ffca 	bl	8002b0c <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 8002b78:	2226      	movs	r2, #38	; 0x26
 8002b7a:	79fb      	ldrb	r3, [r7, #7]
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4610      	mov	r0, r2
 8002b80:	f7ff ffc4 	bl	8002b0c <writeRegister>

	// store the data for write
	writeRegister(I2C_SLV0_DO,data);
 8002b84:	2263      	movs	r2, #99	; 0x63
 8002b86:	79bb      	ldrb	r3, [r7, #6]
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4610      	mov	r0, r2
 8002b8c:	f7ff ffbe 	bl	8002b0c <writeRegister>

	// enable I2C and send 1 byte
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | (uint8_t)1);
 8002b90:	2227      	movs	r2, #39	; 0x27
 8002b92:	2380      	movs	r3, #128	; 0x80
 8002b94:	f043 0301 	orr.w	r3, r3, #1
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	4610      	mov	r0, r2
 8002b9e:	f7ff ffb5 	bl	8002b0c <writeRegister>
}
 8002ba2:	bf00      	nop
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <readAK8963Registers>:

/* reads registers from the AK8963 */
void readAK8963Registers(uint8_t subAddress, uint8_t count, uint8_t* dest)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b082      	sub	sp, #8
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	603a      	str	r2, [r7, #0]
 8002bb4:	71fb      	strb	r3, [r7, #7]
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for read
	writeRegister(I2C_SLV0_ADDR, AK8963_I2C_ADDR | I2C_READ_FLAG);
 8002bba:	2025      	movs	r0, #37	; 0x25
 8002bbc:	220c      	movs	r2, #12
 8002bbe:	2380      	movs	r3, #128	; 0x80
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	f7ff ffa1 	bl	8002b0c <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 8002bca:	2226      	movs	r2, #38	; 0x26
 8002bcc:	79fb      	ldrb	r3, [r7, #7]
 8002bce:	4619      	mov	r1, r3
 8002bd0:	4610      	mov	r0, r2
 8002bd2:	f7ff ff9b 	bl	8002b0c <writeRegister>

	// enable I2C and request the bytes
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | count);
 8002bd6:	2027      	movs	r0, #39	; 0x27
 8002bd8:	2280      	movs	r2, #128	; 0x80
 8002bda:	79bb      	ldrb	r3, [r7, #6]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	4619      	mov	r1, r3
 8002be2:	f7ff ff93 	bl	8002b0c <writeRegister>

	// takes some time for these registers to fill
	HAL_Delay(1);
 8002be6:	2001      	movs	r0, #1
 8002be8:	f002 fb5a 	bl	80052a0 <HAL_Delay>

	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	readRegisters(EXT_SENS_DATA_00,count,dest);
 8002bec:	2049      	movs	r0, #73	; 0x49
 8002bee:	79bb      	ldrb	r3, [r7, #6]
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	f7ff ff9f 	bl	8002b36 <readRegisters>
}
 8002bf8:	bf00      	nop
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <whoAmI>:

/* gets the MPU9250 WHO_AM_I register value, expected to be 0x71 */
static uint8_t whoAmI(){
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readRegisters(WHO_AM_I,1,_buffer);
 8002c04:	2375      	movs	r3, #117	; 0x75
 8002c06:	4a04      	ldr	r2, [pc, #16]	; (8002c18 <whoAmI+0x18>)
 8002c08:	2101      	movs	r1, #1
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff ff93 	bl	8002b36 <readRegisters>

	// return the register value
	return _buffer[0];
 8002c10:	4b01      	ldr	r3, [pc, #4]	; (8002c18 <whoAmI+0x18>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	20000208 	.word	0x20000208

08002c1c <whoAmIAK8963>:

/* gets the AK8963 WHO_AM_I register value, expected to be 0x48 */
static int whoAmIAK8963(){
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readAK8963Registers(AK8963_WHO_AM_I,1,_buffer);
 8002c20:	2300      	movs	r3, #0
 8002c22:	4a04      	ldr	r2, [pc, #16]	; (8002c34 <whoAmIAK8963+0x18>)
 8002c24:	2101      	movs	r1, #1
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff ffbf 	bl	8002baa <readAK8963Registers>
	// return the register value
	return _buffer[0];
 8002c2c:	4b01      	ldr	r3, [pc, #4]	; (8002c34 <whoAmIAK8963+0x18>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	20000208 	.word	0x20000208

08002c38 <MPU9250_Init>:

/* starts communication with the MPU-9250 */
uint8_t MPU9250_Init()
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
	#ifndef USE_SPI
	int tries = 0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	607b      	str	r3, [r7, #4]
	while(MPU9250_IsConnected() == false && tries < 5)
 8002c42:	e005      	b.n	8002c50 <MPU9250_Init+0x18>
	{
		tries++;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3301      	adds	r3, #1
 8002c48:	607b      	str	r3, [r7, #4]
		HAL_Delay(100);
 8002c4a:	2064      	movs	r0, #100	; 0x64
 8002c4c:	f002 fb28 	bl	80052a0 <HAL_Delay>
	while(MPU9250_IsConnected() == false && tries < 5)
 8002c50:	f7ff ff06 	bl	8002a60 <MPU9250_IsConnected>
 8002c54:	4603      	mov	r3, r0
 8002c56:	f083 0301 	eor.w	r3, r3, #1
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d002      	beq.n	8002c66 <MPU9250_Init+0x2e>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	ddee      	ble.n	8002c44 <MPU9250_Init+0xc>
	}
	if(tries == 5)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b05      	cmp	r3, #5
 8002c6a:	d101      	bne.n	8002c70 <MPU9250_Init+0x38>
	{
		return 1;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e0a5      	b.n	8002dbc <MPU9250_Init+0x184>
	}
	#endif
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL);
 8002c70:	236b      	movs	r3, #107	; 0x6b
 8002c72:	2201      	movs	r2, #1
 8002c74:	4611      	mov	r1, r2
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff ff48 	bl	8002b0c <writeRegister>
	// enable I2C master mode
	writeRegister(USER_CTRL, I2C_MST_EN);
 8002c7c:	236a      	movs	r3, #106	; 0x6a
 8002c7e:	2220      	movs	r2, #32
 8002c80:	4611      	mov	r1, r2
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff ff42 	bl	8002b0c <writeRegister>
	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL, I2C_MST_CLK);
 8002c88:	2324      	movs	r3, #36	; 0x24
 8002c8a:	220d      	movs	r2, #13
 8002c8c:	4611      	mov	r1, r2
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff ff3c 	bl	8002b0c <writeRegister>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 8002c94:	230a      	movs	r3, #10
 8002c96:	2200      	movs	r2, #0
 8002c98:	4611      	mov	r1, r2
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7ff ff5e 	bl	8002b5c <writeAK8963Register>
	// reset the MPU9250
	writeRegister(PWR_MGMNT_1,PWR_RESET);
 8002ca0:	236b      	movs	r3, #107	; 0x6b
 8002ca2:	2280      	movs	r2, #128	; 0x80
 8002ca4:	4611      	mov	r1, r2
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff ff30 	bl	8002b0c <writeRegister>
	// wait for MPU-9250 to come back up
	HAL_Delay(10);
 8002cac:	200a      	movs	r0, #10
 8002cae:	f002 faf7 	bl	80052a0 <HAL_Delay>
	// reset the AK8963
	writeAK8963Register(AK8963_CNTL2,AK8963_RESET);
 8002cb2:	230b      	movs	r3, #11
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff ff4f 	bl	8002b5c <writeAK8963Register>
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL);
 8002cbe:	236b      	movs	r3, #107	; 0x6b
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff ff21 	bl	8002b0c <writeRegister>

	// check the WHO AM I byte, expected value is 0x71 (decimal 113) or 0x73 (decimal 115)
	uint8_t who = whoAmI();
 8002cca:	f7ff ff99 	bl	8002c00 <whoAmI>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	70fb      	strb	r3, [r7, #3]
	if((who != 0x71) && ( who != 0x73))
 8002cd2:	78fb      	ldrb	r3, [r7, #3]
 8002cd4:	2b71      	cmp	r3, #113	; 0x71
 8002cd6:	d004      	beq.n	8002ce2 <MPU9250_Init+0xaa>
 8002cd8:	78fb      	ldrb	r3, [r7, #3]
 8002cda:	2b73      	cmp	r3, #115	; 0x73
 8002cdc:	d001      	beq.n	8002ce2 <MPU9250_Init+0xaa>
	{
		return 1;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e06c      	b.n	8002dbc <MPU9250_Init+0x184>
	}

	// enable accelerometer and gyro
	writeRegister(PWR_MGMNT_2,SEN_ENABLE);
 8002ce2:	236c      	movs	r3, #108	; 0x6c
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff ff0f 	bl	8002b0c <writeRegister>

	// setting accel range to 16G as default
	writeRegister(ACCEL_CONFIG,ACCEL_FS_SEL_2G);
 8002cee:	231c      	movs	r3, #28
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff ff09 	bl	8002b0c <writeRegister>

	// setting the gyro range to 2000DPS as default
	writeRegister(GYRO_CONFIG,GYRO_FS_SEL_250DPS);
 8002cfa:	231b      	movs	r3, #27
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	4611      	mov	r1, r2
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff ff03 	bl	8002b0c <writeRegister>

	// setting bandwidth to 184Hz as default
	writeRegister(ACCEL_CONFIG2,DLPF_184);
 8002d06:	231d      	movs	r3, #29
 8002d08:	2201      	movs	r2, #1
 8002d0a:	4611      	mov	r1, r2
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff fefd 	bl	8002b0c <writeRegister>

	// setting gyro bandwidth to 184Hz
	writeRegister(CONFIG,DLPF_184);
 8002d12:	231a      	movs	r3, #26
 8002d14:	2201      	movs	r2, #1
 8002d16:	4611      	mov	r1, r2
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff fef7 	bl	8002b0c <writeRegister>

	// setting the sample rate divider to 0 as default
	writeRegister(SMPDIV,0x00);
 8002d1e:	2319      	movs	r3, #25
 8002d20:	2100      	movs	r1, #0
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7ff fef2 	bl	8002b0c <writeRegister>

	// enable I2C master mode
	writeRegister(USER_CTRL,I2C_MST_EN);
 8002d28:	236a      	movs	r3, #106	; 0x6a
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	4611      	mov	r1, r2
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff feec 	bl	8002b0c <writeRegister>

	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL,I2C_MST_CLK);
 8002d34:	2324      	movs	r3, #36	; 0x24
 8002d36:	220d      	movs	r2, #13
 8002d38:	4611      	mov	r1, r2
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff fee6 	bl	8002b0c <writeRegister>

	// check AK8963 WHO AM I register, expected value is 0x48 (decimal 72)
	if( whoAmIAK8963() != 0x48 )
 8002d40:	f7ff ff6c 	bl	8002c1c <whoAmIAK8963>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b48      	cmp	r3, #72	; 0x48
 8002d48:	d001      	beq.n	8002d4e <MPU9250_Init+0x116>
	{
		return 1;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e036      	b.n	8002dbc <MPU9250_Init+0x184>
	}

	/* get the magnetometer calibration */
	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 8002d4e:	230a      	movs	r3, #10
 8002d50:	2200      	movs	r2, #0
 8002d52:	4611      	mov	r1, r2
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff ff01 	bl	8002b5c <writeAK8963Register>

	HAL_Delay(100); // long wait between AK8963 mode changes
 8002d5a:	2064      	movs	r0, #100	; 0x64
 8002d5c:	f002 faa0 	bl	80052a0 <HAL_Delay>

	// set AK8963 to FUSE ROM access
	writeAK8963Register(AK8963_CNTL1,AK8963_FUSE_ROM);
 8002d60:	230a      	movs	r3, #10
 8002d62:	220f      	movs	r2, #15
 8002d64:	4611      	mov	r1, r2
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff fef8 	bl	8002b5c <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8002d6c:	2064      	movs	r0, #100	; 0x64
 8002d6e:	f002 fa97 	bl	80052a0 <HAL_Delay>

	// read the AK8963 ASA registers and compute magnetometer scale factors
	readAK8963Registers(AK8963_ASA, 3, _mag_adjust);
 8002d72:	2310      	movs	r3, #16
 8002d74:	4a13      	ldr	r2, [pc, #76]	; (8002dc4 <MPU9250_Init+0x18c>)
 8002d76:	2103      	movs	r1, #3
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff ff16 	bl	8002baa <readAK8963Registers>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 8002d7e:	230a      	movs	r3, #10
 8002d80:	2200      	movs	r2, #0
 8002d82:	4611      	mov	r1, r2
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff fee9 	bl	8002b5c <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8002d8a:	2064      	movs	r0, #100	; 0x64
 8002d8c:	f002 fa88 	bl	80052a0 <HAL_Delay>

	// set AK8963 to 16 bit resolution, 100 Hz update rate
	writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS2);
 8002d90:	230a      	movs	r3, #10
 8002d92:	2216      	movs	r2, #22
 8002d94:	4611      	mov	r1, r2
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff fee0 	bl	8002b5c <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8002d9c:	2064      	movs	r0, #100	; 0x64
 8002d9e:	f002 fa7f 	bl	80052a0 <HAL_Delay>

	// select clock source to gyro
	writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL);
 8002da2:	236b      	movs	r3, #107	; 0x6b
 8002da4:	2201      	movs	r2, #1
 8002da6:	4611      	mov	r1, r2
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff feaf 	bl	8002b0c <writeRegister>

	// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
	readAK8963Registers(AK8963_HXL,7,_buffer);
 8002dae:	2303      	movs	r3, #3
 8002db0:	4a05      	ldr	r2, [pc, #20]	; (8002dc8 <MPU9250_Init+0x190>)
 8002db2:	2107      	movs	r1, #7
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff fef8 	bl	8002baa <readAK8963Registers>

	// successful init, return 0
	return 0;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	20000220 	.word	0x20000220
 8002dc8:	20000208 	.word	0x20000208

08002dcc <MPU9250_GetData>:
	writeRegister(SMPDIV, srd);
}

/* read the data, each argiment should point to a array for x, y, and x */
void MPU9250_GetData(int16_t* AccData, int16_t* MagData, int16_t* GyroData)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
	// grab the data from the MPU9250
	readRegisters(ACCEL_OUT, 21, _buffer);
 8002dd8:	233b      	movs	r3, #59	; 0x3b
 8002dda:	4a63      	ldr	r2, [pc, #396]	; (8002f68 <MPU9250_GetData+0x19c>)
 8002ddc:	2115      	movs	r1, #21
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff fea9 	bl	8002b36 <readRegisters>

	// combine into 16 bit values
	AccData[0] = (((int16_t)_buffer[0]) << 8) | _buffer[1];
 8002de4:	4b60      	ldr	r3, [pc, #384]	; (8002f68 <MPU9250_GetData+0x19c>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	021b      	lsls	r3, r3, #8
 8002dea:	b21a      	sxth	r2, r3
 8002dec:	4b5e      	ldr	r3, [pc, #376]	; (8002f68 <MPU9250_GetData+0x19c>)
 8002dee:	785b      	ldrb	r3, [r3, #1]
 8002df0:	b21b      	sxth	r3, r3
 8002df2:	4313      	orrs	r3, r2
 8002df4:	b21a      	sxth	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	801a      	strh	r2, [r3, #0]
	AccData[1] = (((int16_t)_buffer[2]) << 8) | _buffer[3];
 8002dfa:	4b5b      	ldr	r3, [pc, #364]	; (8002f68 <MPU9250_GetData+0x19c>)
 8002dfc:	789b      	ldrb	r3, [r3, #2]
 8002dfe:	021b      	lsls	r3, r3, #8
 8002e00:	b219      	sxth	r1, r3
 8002e02:	4b59      	ldr	r3, [pc, #356]	; (8002f68 <MPU9250_GetData+0x19c>)
 8002e04:	78db      	ldrb	r3, [r3, #3]
 8002e06:	b21a      	sxth	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	3302      	adds	r3, #2
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	b212      	sxth	r2, r2
 8002e10:	801a      	strh	r2, [r3, #0]
	AccData[2] = (((int16_t)_buffer[4]) << 8) | _buffer[5];
 8002e12:	4b55      	ldr	r3, [pc, #340]	; (8002f68 <MPU9250_GetData+0x19c>)
 8002e14:	791b      	ldrb	r3, [r3, #4]
 8002e16:	021b      	lsls	r3, r3, #8
 8002e18:	b219      	sxth	r1, r3
 8002e1a:	4b53      	ldr	r3, [pc, #332]	; (8002f68 <MPU9250_GetData+0x19c>)
 8002e1c:	795b      	ldrb	r3, [r3, #5]
 8002e1e:	b21a      	sxth	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	3304      	adds	r3, #4
 8002e24:	430a      	orrs	r2, r1
 8002e26:	b212      	sxth	r2, r2
 8002e28:	801a      	strh	r2, [r3, #0]
	GyroData[0] = (((int16_t)_buffer[8]) << 8) | _buffer[9];
 8002e2a:	4b4f      	ldr	r3, [pc, #316]	; (8002f68 <MPU9250_GetData+0x19c>)
 8002e2c:	7a1b      	ldrb	r3, [r3, #8]
 8002e2e:	021b      	lsls	r3, r3, #8
 8002e30:	b21a      	sxth	r2, r3
 8002e32:	4b4d      	ldr	r3, [pc, #308]	; (8002f68 <MPU9250_GetData+0x19c>)
 8002e34:	7a5b      	ldrb	r3, [r3, #9]
 8002e36:	b21b      	sxth	r3, r3
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	b21a      	sxth	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	801a      	strh	r2, [r3, #0]
	GyroData[1] = (((int16_t)_buffer[10]) << 8) | _buffer[11];
 8002e40:	4b49      	ldr	r3, [pc, #292]	; (8002f68 <MPU9250_GetData+0x19c>)
 8002e42:	7a9b      	ldrb	r3, [r3, #10]
 8002e44:	021b      	lsls	r3, r3, #8
 8002e46:	b219      	sxth	r1, r3
 8002e48:	4b47      	ldr	r3, [pc, #284]	; (8002f68 <MPU9250_GetData+0x19c>)
 8002e4a:	7adb      	ldrb	r3, [r3, #11]
 8002e4c:	b21a      	sxth	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	3302      	adds	r3, #2
 8002e52:	430a      	orrs	r2, r1
 8002e54:	b212      	sxth	r2, r2
 8002e56:	801a      	strh	r2, [r3, #0]
	GyroData[2] = (((int16_t)_buffer[12]) << 8) | _buffer[13];
 8002e58:	4b43      	ldr	r3, [pc, #268]	; (8002f68 <MPU9250_GetData+0x19c>)
 8002e5a:	7b1b      	ldrb	r3, [r3, #12]
 8002e5c:	021b      	lsls	r3, r3, #8
 8002e5e:	b219      	sxth	r1, r3
 8002e60:	4b41      	ldr	r3, [pc, #260]	; (8002f68 <MPU9250_GetData+0x19c>)
 8002e62:	7b5b      	ldrb	r3, [r3, #13]
 8002e64:	b21a      	sxth	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	3304      	adds	r3, #4
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	b212      	sxth	r2, r2
 8002e6e:	801a      	strh	r2, [r3, #0]

	int16_t magx = (((int16_t)_buffer[15]) << 8) | _buffer[14];
 8002e70:	4b3d      	ldr	r3, [pc, #244]	; (8002f68 <MPU9250_GetData+0x19c>)
 8002e72:	7bdb      	ldrb	r3, [r3, #15]
 8002e74:	021b      	lsls	r3, r3, #8
 8002e76:	b21a      	sxth	r2, r3
 8002e78:	4b3b      	ldr	r3, [pc, #236]	; (8002f68 <MPU9250_GetData+0x19c>)
 8002e7a:	7b9b      	ldrb	r3, [r3, #14]
 8002e7c:	b21b      	sxth	r3, r3
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	82fb      	strh	r3, [r7, #22]
	int16_t magy = (((int16_t)_buffer[17]) << 8) | _buffer[16];
 8002e82:	4b39      	ldr	r3, [pc, #228]	; (8002f68 <MPU9250_GetData+0x19c>)
 8002e84:	7c5b      	ldrb	r3, [r3, #17]
 8002e86:	021b      	lsls	r3, r3, #8
 8002e88:	b21a      	sxth	r2, r3
 8002e8a:	4b37      	ldr	r3, [pc, #220]	; (8002f68 <MPU9250_GetData+0x19c>)
 8002e8c:	7c1b      	ldrb	r3, [r3, #16]
 8002e8e:	b21b      	sxth	r3, r3
 8002e90:	4313      	orrs	r3, r2
 8002e92:	82bb      	strh	r3, [r7, #20]
	int16_t magz = (((int16_t)_buffer[19]) << 8) | _buffer[18];
 8002e94:	4b34      	ldr	r3, [pc, #208]	; (8002f68 <MPU9250_GetData+0x19c>)
 8002e96:	7cdb      	ldrb	r3, [r3, #19]
 8002e98:	021b      	lsls	r3, r3, #8
 8002e9a:	b21a      	sxth	r2, r3
 8002e9c:	4b32      	ldr	r3, [pc, #200]	; (8002f68 <MPU9250_GetData+0x19c>)
 8002e9e:	7c9b      	ldrb	r3, [r3, #18]
 8002ea0:	b21b      	sxth	r3, r3
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	827b      	strh	r3, [r7, #18]

	MagData[0] = (int16_t)((float)magx * ((float)(_mag_adjust[0] - 128) / 256.0f + 1.0f));
 8002ea6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002eaa:	ee07 3a90 	vmov	s15, r3
 8002eae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002eb2:	4b2e      	ldr	r3, [pc, #184]	; (8002f6c <MPU9250_GetData+0x1a0>)
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	3b80      	subs	r3, #128	; 0x80
 8002eb8:	ee07 3a90 	vmov	s15, r3
 8002ebc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002ec0:	ed9f 6a2b 	vldr	s12, [pc, #172]	; 8002f70 <MPU9250_GetData+0x1a4>
 8002ec4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002ec8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ecc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ed4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ed8:	ee17 3a90 	vmov	r3, s15
 8002edc:	b21a      	sxth	r2, r3
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	801a      	strh	r2, [r3, #0]
	MagData[1] = (int16_t)((float)magy * ((float)(_mag_adjust[1] - 128) / 256.0f + 1.0f));
 8002ee2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002ee6:	ee07 3a90 	vmov	s15, r3
 8002eea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002eee:	4b1f      	ldr	r3, [pc, #124]	; (8002f6c <MPU9250_GetData+0x1a0>)
 8002ef0:	785b      	ldrb	r3, [r3, #1]
 8002ef2:	3b80      	subs	r3, #128	; 0x80
 8002ef4:	ee07 3a90 	vmov	s15, r3
 8002ef8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002efc:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8002f70 <MPU9250_GetData+0x1a4>
 8002f00:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002f04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	3302      	adds	r3, #2
 8002f14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f18:	ee17 2a90 	vmov	r2, s15
 8002f1c:	b212      	sxth	r2, r2
 8002f1e:	801a      	strh	r2, [r3, #0]
	MagData[2] = (int16_t)((float)magz * ((float)(_mag_adjust[2] - 128) / 256.0f + 1.0f));
 8002f20:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002f24:	ee07 3a90 	vmov	s15, r3
 8002f28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f2c:	4b0f      	ldr	r3, [pc, #60]	; (8002f6c <MPU9250_GetData+0x1a0>)
 8002f2e:	789b      	ldrb	r3, [r3, #2]
 8002f30:	3b80      	subs	r3, #128	; 0x80
 8002f32:	ee07 3a90 	vmov	s15, r3
 8002f36:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002f3a:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 8002f70 <MPU9250_GetData+0x1a4>
 8002f3e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002f42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	3304      	adds	r3, #4
 8002f52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f56:	ee17 2a90 	vmov	r2, s15
 8002f5a:	b212      	sxth	r2, r2
 8002f5c:	801a      	strh	r2, [r3, #0]
}
 8002f5e:	bf00      	nop
 8002f60:	3718      	adds	r7, #24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	20000208 	.word	0x20000208
 8002f6c:	20000220 	.word	0x20000220
 8002f70:	43800000 	.word	0x43800000

08002f74 <initSDCard>:
extern MLXSensor MLXRF;
extern GyroSensor gyro;
extern SensorStatus statusRegister;

void initSDCard(FATFS* fs)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
	  if (f_mount(fs, "", 1) == FR_OK)
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	490e      	ldr	r1, [pc, #56]	; (8002fb8 <initSDCard+0x44>)
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f00c f8f7 	bl	800f174 <f_mount>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d109      	bne.n	8002fa0 <initSDCard+0x2c>
	  {
		  statusRegister.SDCARD = SENSOR_OK;
 8002f8c:	4a0b      	ldr	r2, [pc, #44]	; (8002fbc <initSDCard+0x48>)
 8002f8e:	7813      	ldrb	r3, [r2, #0]
 8002f90:	2101      	movs	r1, #1
 8002f92:	f361 0302 	bfi	r3, r1, #0, #3
 8002f96:	7013      	strb	r3, [r2, #0]
		  if (DEBUG)
			  printf("SDCard mounting success!\n");
 8002f98:	4809      	ldr	r0, [pc, #36]	; (8002fc0 <initSDCard+0x4c>)
 8002f9a:	f00d fdb1 	bl	8010b00 <puts>
	  }else
	  {
		  statusRegister.SDCARD = SENSOR_INIT_FAIL;
		  mountFailHandler();
	  }
}
 8002f9e:	e006      	b.n	8002fae <initSDCard+0x3a>
		  statusRegister.SDCARD = SENSOR_INIT_FAIL;
 8002fa0:	4a06      	ldr	r2, [pc, #24]	; (8002fbc <initSDCard+0x48>)
 8002fa2:	7813      	ldrb	r3, [r2, #0]
 8002fa4:	f043 0307 	orr.w	r3, r3, #7
 8002fa8:	7013      	strb	r3, [r2, #0]
		  mountFailHandler();
 8002faa:	f000 f9e7 	bl	800337c <mountFailHandler>
}
 8002fae:	bf00      	nop
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	08014a28 	.word	0x08014a28
 8002fbc:	20000480 	.word	0x20000480
 8002fc0:	08014a2c 	.word	0x08014a2c

08002fc4 <openAllFiles>:
void openAllFiles()
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
	if(statusRegister.SDCARD == SENSOR_OK)
 8002fc8:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <openAllFiles+0x34>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	f003 0307 	and.w	r3, r3, #7
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d10d      	bne.n	8002ff2 <openAllFiles+0x2e>
	{
		if(statusRegister.GYRO == SENSOR_OK){
 8002fd6:	4b08      	ldr	r3, [pc, #32]	; (8002ff8 <openAllFiles+0x34>)
 8002fd8:	881b      	ldrh	r3, [r3, #0]
 8002fda:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	2b40      	cmp	r3, #64	; 0x40
 8002fe2:	d106      	bne.n	8002ff2 <openAllFiles+0x2e>
			openFile(gyro.File, gyro.path, FILE_DEFAULT_MODE);
 8002fe4:	4b05      	ldr	r3, [pc, #20]	; (8002ffc <openAllFiles+0x38>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2232      	movs	r2, #50	; 0x32
 8002fea:	4905      	ldr	r1, [pc, #20]	; (8003000 <openAllFiles+0x3c>)
 8002fec:	4618      	mov	r0, r3
 8002fee:	f000 f8b9 	bl	8003164 <openFile>
		}

	}
}
 8002ff2:	bf00      	nop
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	20000480 	.word	0x20000480
 8002ffc:	200005f0 	.word	0x200005f0
 8003000:	200005f4 	.word	0x200005f4

08003004 <createHeaders>:
int createHeaders(FIL * file,char * path)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b08c      	sub	sp, #48	; 0x30
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
	FRESULT fres;
	UINT bytesWritten = 0;
 800300e:	2300      	movs	r3, #0
 8003010:	627b      	str	r3, [r7, #36]	; 0x24

	fres = f_write(file,"timestamp,",strlen("timestamp,"),&bytesWritten);
 8003012:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003016:	220a      	movs	r2, #10
 8003018:	4948      	ldr	r1, [pc, #288]	; (800313c <createHeaders+0x138>)
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f00c fabc 	bl	800f598 <f_write>
 8003020:	4603      	mov	r3, r0
 8003022:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if(fres != FR_OK){
 8003026:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800302a:	2b00      	cmp	r3, #0
 800302c:	d006      	beq.n	800303c <createHeaders+0x38>
		printf("Error while creating %s header",path);
 800302e:	6839      	ldr	r1, [r7, #0]
 8003030:	4843      	ldr	r0, [pc, #268]	; (8003140 <createHeaders+0x13c>)
 8003032:	f00d fcc9 	bl	80109c8 <iprintf>
		return -1;
 8003036:	f04f 33ff 	mov.w	r3, #4294967295
 800303a:	e07b      	b.n	8003134 <createHeaders+0x130>
	}
	if(strstr(path,"GYRO.csv") == 0){
 800303c:	4941      	ldr	r1, [pc, #260]	; (8003144 <createHeaders+0x140>)
 800303e:	6838      	ldr	r0, [r7, #0]
 8003040:	f00d fd9c 	bl	8010b7c <strstr>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10a      	bne.n	8003060 <createHeaders+0x5c>
		fres = f_write(file, "gyro_x,gyro_y,gyro_z,acc_x,acc_y,acc_z\r\n", strlen("gyro_x,gyro_y,gyro_z,acc_x,acc_y,acc_z\r\n"), &bytesWritten);
 800304a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800304e:	2228      	movs	r2, #40	; 0x28
 8003050:	493d      	ldr	r1, [pc, #244]	; (8003148 <createHeaders+0x144>)
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f00c faa0 	bl	800f598 <f_write>
 8003058:	4603      	mov	r3, r0
 800305a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800305e:	e053      	b.n	8003108 <createHeaders+0x104>

	}else if(strstr(path,"MLX.csv") == 0){
 8003060:	493a      	ldr	r1, [pc, #232]	; (800314c <createHeaders+0x148>)
 8003062:	6838      	ldr	r0, [r7, #0]
 8003064:	f00d fd8a 	bl	8010b7c <strstr>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d149      	bne.n	8003102 <createHeaders+0xfe>
		char headerData[25];
		fres =  f_write(file, "ID", strlen("ID"), &bytesWritten);
 800306e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003072:	2202      	movs	r2, #2
 8003074:	4936      	ldr	r1, [pc, #216]	; (8003150 <createHeaders+0x14c>)
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f00c fa8e 	bl	800f598 <f_write>
 800307c:	4603      	mov	r3, r0
 800307e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for(int i=0;i<784;i++){
 8003082:	2300      	movs	r3, #0
 8003084:	62bb      	str	r3, [r7, #40]	; 0x28
 8003086:	e037      	b.n	80030f8 <createHeaders+0xf4>
			sprintf(headerData,"float_%d,", i);
 8003088:	f107 0308 	add.w	r3, r7, #8
 800308c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800308e:	4931      	ldr	r1, [pc, #196]	; (8003154 <createHeaders+0x150>)
 8003090:	4618      	mov	r0, r3
 8003092:	f00d fd53 	bl	8010b3c <siprintf>
			fres = fres | f_write(file, headerData, strlen(headerData), &bytesWritten);
 8003096:	f107 0308 	add.w	r3, r7, #8
 800309a:	4618      	mov	r0, r3
 800309c:	f7fd f8d0 	bl	8000240 <strlen>
 80030a0:	4602      	mov	r2, r0
 80030a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030a6:	f107 0108 	add.w	r1, r7, #8
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f00c fa74 	bl	800f598 <f_write>
 80030b0:	4603      	mov	r3, r0
 80030b2:	461a      	mov	r2, r3
 80030b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80030b8:	4313      	orrs	r3, r2
 80030ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			sprintf(headerData,"id,");
 80030be:	f107 0308 	add.w	r3, r7, #8
 80030c2:	4925      	ldr	r1, [pc, #148]	; (8003158 <createHeaders+0x154>)
 80030c4:	4618      	mov	r0, r3
 80030c6:	f00d fd39 	bl	8010b3c <siprintf>
			fres =  fres | f_write(file, headerData, strlen(headerData), &bytesWritten);
 80030ca:	f107 0308 	add.w	r3, r7, #8
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fd f8b6 	bl	8000240 <strlen>
 80030d4:	4602      	mov	r2, r0
 80030d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030da:	f107 0108 	add.w	r1, r7, #8
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f00c fa5a 	bl	800f598 <f_write>
 80030e4:	4603      	mov	r3, r0
 80030e6:	461a      	mov	r2, r3
 80030e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80030ec:	4313      	orrs	r3, r2
 80030ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for(int i=0;i<784;i++){
 80030f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f4:	3301      	adds	r3, #1
 80030f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80030f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fa:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 80030fe:	dbc3      	blt.n	8003088 <createHeaders+0x84>
 8003100:	e002      	b.n	8003108 <createHeaders+0x104>
		}

	}else
	{
		return -2;
 8003102:	f06f 0301 	mvn.w	r3, #1
 8003106:	e015      	b.n	8003134 <createHeaders+0x130>
	}
	if(fres != FR_OK){
 8003108:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800310c:	2b00      	cmp	r3, #0
 800310e:	d006      	beq.n	800311e <createHeaders+0x11a>
		printf("Error while creating %s header\n",path);
 8003110:	6839      	ldr	r1, [r7, #0]
 8003112:	4812      	ldr	r0, [pc, #72]	; (800315c <createHeaders+0x158>)
 8003114:	f00d fc58 	bl	80109c8 <iprintf>
		return -1;
 8003118:	f04f 33ff 	mov.w	r3, #4294967295
 800311c:	e00a      	b.n	8003134 <createHeaders+0x130>
	}
	fres =  f_write(file, "\n", strlen("\n"), &bytesWritten);
 800311e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003122:	2201      	movs	r2, #1
 8003124:	490e      	ldr	r1, [pc, #56]	; (8003160 <createHeaders+0x15c>)
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f00c fa36 	bl	800f598 <f_write>
 800312c:	4603      	mov	r3, r0
 800312e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	return 1;
 8003132:	2301      	movs	r3, #1

}
 8003134:	4618      	mov	r0, r3
 8003136:	3730      	adds	r7, #48	; 0x30
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	08014a48 	.word	0x08014a48
 8003140:	08014a54 	.word	0x08014a54
 8003144:	08014a74 	.word	0x08014a74
 8003148:	08014a80 	.word	0x08014a80
 800314c:	08014aac 	.word	0x08014aac
 8003150:	08014ab4 	.word	0x08014ab4
 8003154:	08014ab8 	.word	0x08014ab8
 8003158:	08014ac4 	.word	0x08014ac4
 800315c:	08014ac8 	.word	0x08014ac8
 8003160:	08014ae8 	.word	0x08014ae8

08003164 <openFile>:

int openFile(FIL * file, char * path, BYTE mode)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b08c      	sub	sp, #48	; 0x30
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	4613      	mov	r3, r2
 8003170:	71fb      	strb	r3, [r7, #7]
	FILINFO fInfo;
	FRESULT fres = f_stat(path, &fInfo);
 8003172:	f107 0310 	add.w	r3, r7, #16
 8003176:	4619      	mov	r1, r3
 8003178:	68b8      	ldr	r0, [r7, #8]
 800317a:	f00c fc1f 	bl	800f9bc <f_stat>
 800317e:	4603      	mov	r3, r0
 8003180:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if(fres == FR_OK)
 8003184:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003188:	2b00      	cmp	r3, #0
 800318a:	d114      	bne.n	80031b6 <openFile+0x52>
	{

		fres = f_open(file, _TEXT(path), mode);
 800318c:	79fb      	ldrb	r3, [r7, #7]
 800318e:	461a      	mov	r2, r3
 8003190:	68b9      	ldr	r1, [r7, #8]
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f00c f834 	bl	800f200 <f_open>
 8003198:	4603      	mov	r3, r0
 800319a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if(fres == FR_OK)
 800319e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d104      	bne.n	80031b0 <openFile+0x4c>
		{
			printf("Opening file: %s succeeded\n", path);
 80031a6:	68b9      	ldr	r1, [r7, #8]
 80031a8:	4818      	ldr	r0, [pc, #96]	; (800320c <openFile+0xa8>)
 80031aa:	f00d fc0d 	bl	80109c8 <iprintf>
 80031ae:	e025      	b.n	80031fc <openFile+0x98>
		}else
		{
			return -1;
 80031b0:	f04f 33ff 	mov.w	r3, #4294967295
 80031b4:	e026      	b.n	8003204 <openFile+0xa0>
		}
	}else if(fres == FR_NO_FILE)
 80031b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d11e      	bne.n	80031fc <openFile+0x98>
	{
		fres = f_open(file, _TEXT(path), mode);
 80031be:	79fb      	ldrb	r3, [r7, #7]
 80031c0:	461a      	mov	r2, r3
 80031c2:	68b9      	ldr	r1, [r7, #8]
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f00c f81b 	bl	800f200 <f_open>
 80031ca:	4603      	mov	r3, r0
 80031cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if(fres == FR_OK)
 80031d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10e      	bne.n	80031f6 <openFile+0x92>
		{
			int res = createHeaders(file,path);
 80031d8:	68b9      	ldr	r1, [r7, #8]
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f7ff ff12 	bl	8003004 <createHeaders>
 80031e0:	62b8      	str	r0, [r7, #40]	; 0x28
			if(res != 1)
 80031e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d001      	beq.n	80031ec <openFile+0x88>
			{
				return res;
 80031e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ea:	e00b      	b.n	8003204 <openFile+0xa0>
			}

			printf("No file: %s, created new\n", path);
 80031ec:	68b9      	ldr	r1, [r7, #8]
 80031ee:	4808      	ldr	r0, [pc, #32]	; (8003210 <openFile+0xac>)
 80031f0:	f00d fbea 	bl	80109c8 <iprintf>
 80031f4:	e002      	b.n	80031fc <openFile+0x98>

		}else
		{
			return -1;
 80031f6:	f04f 33ff 	mov.w	r3, #4294967295
 80031fa:	e003      	b.n	8003204 <openFile+0xa0>
		}
	}
	f_sync(file);
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f00c fb5f 	bl	800f8c0 <f_sync>
	return 1;
 8003202:	2301      	movs	r3, #1


}
 8003204:	4618      	mov	r0, r3
 8003206:	3730      	adds	r7, #48	; 0x30
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	08014aec 	.word	0x08014aec
 8003210:	08014b08 	.word	0x08014b08

08003214 <saveGyroData>:

void saveGyroData(GyroSensor* sens)
{
 8003214:	b590      	push	{r4, r7, lr}
 8003216:	b0c7      	sub	sp, #284	; 0x11c
 8003218:	af00      	add	r7, sp, #0
 800321a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800321e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003222:	6018      	str	r0, [r3, #0]
	char dataBuffer[255];
	int writedBytes;
	//Save time stamp
	sprintf(dataBuffer, "%d,", HAL_GetTick());
 8003224:	f002 f830 	bl	8005288 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	f107 0310 	add.w	r3, r7, #16
 800322e:	4950      	ldr	r1, [pc, #320]	; (8003370 <saveGyroData+0x15c>)
 8003230:	4618      	mov	r0, r3
 8003232:	f00d fc83 	bl	8010b3c <siprintf>
	f_write(sens->File, dataBuffer, strlen(dataBuffer), &writedBytes);
 8003236:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800323a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681c      	ldr	r4, [r3, #0]
 8003242:	f107 0310 	add.w	r3, r7, #16
 8003246:	4618      	mov	r0, r3
 8003248:	f7fc fffa 	bl	8000240 <strlen>
 800324c:	4602      	mov	r2, r0
 800324e:	f107 030c 	add.w	r3, r7, #12
 8003252:	f107 0110 	add.w	r1, r7, #16
 8003256:	4620      	mov	r0, r4
 8003258:	f00c f99e 	bl	800f598 <f_write>
	for (int i = 0; i < 3; i++)
 800325c:	2300      	movs	r3, #0
 800325e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003262:	e028      	b.n	80032b6 <saveGyroData+0xa2>
	{
		sprintf(dataBuffer, "%f,", sens->data.gyro_data_calc[i]);
 8003264:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003268:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003272:	3308      	adds	r3, #8
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	4413      	add	r3, r2
 8003278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327c:	f107 0010 	add.w	r0, r7, #16
 8003280:	493c      	ldr	r1, [pc, #240]	; (8003374 <saveGyroData+0x160>)
 8003282:	f00d fc5b 	bl	8010b3c <siprintf>
		f_write(sens->File, dataBuffer, strlen(dataBuffer), &writedBytes);
 8003286:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800328a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681c      	ldr	r4, [r3, #0]
 8003292:	f107 0310 	add.w	r3, r7, #16
 8003296:	4618      	mov	r0, r3
 8003298:	f7fc ffd2 	bl	8000240 <strlen>
 800329c:	4602      	mov	r2, r0
 800329e:	f107 030c 	add.w	r3, r7, #12
 80032a2:	f107 0110 	add.w	r1, r7, #16
 80032a6:	4620      	mov	r0, r4
 80032a8:	f00c f976 	bl	800f598 <f_write>
	for (int i = 0; i < 3; i++)
 80032ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032b0:	3301      	adds	r3, #1
 80032b2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80032b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	ddd2      	ble.n	8003264 <saveGyroData+0x50>

	}
	for (int i = 0; i < 3; i++)
 80032be:	2300      	movs	r3, #0
 80032c0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80032c4:	e028      	b.n	8003318 <saveGyroData+0x104>
	{
		sprintf(dataBuffer, "%f,", sens->data.acc_data_calc[i]);
 80032c6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80032ca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80032d4:	3305      	adds	r3, #5
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	4413      	add	r3, r2
 80032da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032de:	f107 0010 	add.w	r0, r7, #16
 80032e2:	4924      	ldr	r1, [pc, #144]	; (8003374 <saveGyroData+0x160>)
 80032e4:	f00d fc2a 	bl	8010b3c <siprintf>
		f_write(sens->File, dataBuffer, strlen(dataBuffer), &writedBytes);
 80032e8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80032ec:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681c      	ldr	r4, [r3, #0]
 80032f4:	f107 0310 	add.w	r3, r7, #16
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7fc ffa1 	bl	8000240 <strlen>
 80032fe:	4602      	mov	r2, r0
 8003300:	f107 030c 	add.w	r3, r7, #12
 8003304:	f107 0110 	add.w	r1, r7, #16
 8003308:	4620      	mov	r0, r4
 800330a:	f00c f945 	bl	800f598 <f_write>
	for (int i = 0; i < 3; i++)
 800330e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003312:	3301      	adds	r3, #1
 8003314:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003318:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800331c:	2b02      	cmp	r3, #2
 800331e:	ddd2      	ble.n	80032c6 <saveGyroData+0xb2>
	}

	sprintf(dataBuffer, "\r\n ");
 8003320:	f107 0310 	add.w	r3, r7, #16
 8003324:	4914      	ldr	r1, [pc, #80]	; (8003378 <saveGyroData+0x164>)
 8003326:	4618      	mov	r0, r3
 8003328:	f00d fc08 	bl	8010b3c <siprintf>

	f_write(sens->File, dataBuffer, strlen(dataBuffer), &writedBytes);
 800332c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003330:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681c      	ldr	r4, [r3, #0]
 8003338:	f107 0310 	add.w	r3, r7, #16
 800333c:	4618      	mov	r0, r3
 800333e:	f7fc ff7f 	bl	8000240 <strlen>
 8003342:	4602      	mov	r2, r0
 8003344:	f107 030c 	add.w	r3, r7, #12
 8003348:	f107 0110 	add.w	r1, r7, #16
 800334c:	4620      	mov	r0, r4
 800334e:	f00c f923 	bl	800f598 <f_write>
	f_sync(sens->File);
 8003352:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003356:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f00c faae 	bl	800f8c0 <f_sync>

}
 8003364:	bf00      	nop
 8003366:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800336a:	46bd      	mov	sp, r7
 800336c:	bd90      	pop	{r4, r7, pc}
 800336e:	bf00      	nop
 8003370:	08014b24 	.word	0x08014b24
 8003374:	08014b28 	.word	0x08014b28
 8003378:	08014b2c 	.word	0x08014b2c

0800337c <mountFailHandler>:
	f_write(mlx->File, dataBuffer, strlen(dataBuffer), &writedBytes);
	f_sync(mlx->File);
}

void mountFailHandler()
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
	printf("SDCard mount failed\n");
 8003380:	4801      	ldr	r0, [pc, #4]	; (8003388 <mountFailHandler+0xc>)
 8003382:	f00d fbbd 	bl	8010b00 <puts>
	while(1)
 8003386:	e7fe      	b.n	8003386 <mountFailHandler+0xa>
 8003388:	08014b40 	.word	0x08014b40

0800338c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003392:	463b      	mov	r3, r7
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]
 8003398:	605a      	str	r2, [r3, #4]
 800339a:	609a      	str	r2, [r3, #8]
 800339c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800339e:	4b21      	ldr	r3, [pc, #132]	; (8003424 <MX_ADC1_Init+0x98>)
 80033a0:	4a21      	ldr	r2, [pc, #132]	; (8003428 <MX_ADC1_Init+0x9c>)
 80033a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80033a4:	4b1f      	ldr	r3, [pc, #124]	; (8003424 <MX_ADC1_Init+0x98>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80033aa:	4b1e      	ldr	r3, [pc, #120]	; (8003424 <MX_ADC1_Init+0x98>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80033b0:	4b1c      	ldr	r3, [pc, #112]	; (8003424 <MX_ADC1_Init+0x98>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80033b6:	4b1b      	ldr	r3, [pc, #108]	; (8003424 <MX_ADC1_Init+0x98>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80033bc:	4b19      	ldr	r3, [pc, #100]	; (8003424 <MX_ADC1_Init+0x98>)
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80033c4:	4b17      	ldr	r3, [pc, #92]	; (8003424 <MX_ADC1_Init+0x98>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80033ca:	4b16      	ldr	r3, [pc, #88]	; (8003424 <MX_ADC1_Init+0x98>)
 80033cc:	4a17      	ldr	r2, [pc, #92]	; (800342c <MX_ADC1_Init+0xa0>)
 80033ce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80033d0:	4b14      	ldr	r3, [pc, #80]	; (8003424 <MX_ADC1_Init+0x98>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80033d6:	4b13      	ldr	r3, [pc, #76]	; (8003424 <MX_ADC1_Init+0x98>)
 80033d8:	2201      	movs	r2, #1
 80033da:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80033dc:	4b11      	ldr	r3, [pc, #68]	; (8003424 <MX_ADC1_Init+0x98>)
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80033e4:	4b0f      	ldr	r3, [pc, #60]	; (8003424 <MX_ADC1_Init+0x98>)
 80033e6:	2201      	movs	r2, #1
 80033e8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80033ea:	480e      	ldr	r0, [pc, #56]	; (8003424 <MX_ADC1_Init+0x98>)
 80033ec:	f001 ff7c 	bl	80052e8 <HAL_ADC_Init>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80033f6:	f000 ffa9 	bl	800434c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80033fa:	2300      	movs	r3, #0
 80033fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80033fe:	2301      	movs	r3, #1
 8003400:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003402:	2300      	movs	r3, #0
 8003404:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003406:	463b      	mov	r3, r7
 8003408:	4619      	mov	r1, r3
 800340a:	4806      	ldr	r0, [pc, #24]	; (8003424 <MX_ADC1_Init+0x98>)
 800340c:	f001 ffb0 	bl	8005370 <HAL_ADC_ConfigChannel>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8003416:	f000 ff99 	bl	800434c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800341a:	bf00      	nop
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	20000224 	.word	0x20000224
 8003428:	40012000 	.word	0x40012000
 800342c:	0f000001 	.word	0x0f000001

08003430 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003436:	463b      	mov	r3, r7
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	605a      	str	r2, [r3, #4]
 800343e:	609a      	str	r2, [r3, #8]
 8003440:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8003442:	4b21      	ldr	r3, [pc, #132]	; (80034c8 <MX_ADC2_Init+0x98>)
 8003444:	4a21      	ldr	r2, [pc, #132]	; (80034cc <MX_ADC2_Init+0x9c>)
 8003446:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003448:	4b1f      	ldr	r3, [pc, #124]	; (80034c8 <MX_ADC2_Init+0x98>)
 800344a:	2200      	movs	r2, #0
 800344c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800344e:	4b1e      	ldr	r3, [pc, #120]	; (80034c8 <MX_ADC2_Init+0x98>)
 8003450:	2200      	movs	r2, #0
 8003452:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003454:	4b1c      	ldr	r3, [pc, #112]	; (80034c8 <MX_ADC2_Init+0x98>)
 8003456:	2200      	movs	r2, #0
 8003458:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800345a:	4b1b      	ldr	r3, [pc, #108]	; (80034c8 <MX_ADC2_Init+0x98>)
 800345c:	2200      	movs	r2, #0
 800345e:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003460:	4b19      	ldr	r3, [pc, #100]	; (80034c8 <MX_ADC2_Init+0x98>)
 8003462:	2200      	movs	r2, #0
 8003464:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003468:	4b17      	ldr	r3, [pc, #92]	; (80034c8 <MX_ADC2_Init+0x98>)
 800346a:	2200      	movs	r2, #0
 800346c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800346e:	4b16      	ldr	r3, [pc, #88]	; (80034c8 <MX_ADC2_Init+0x98>)
 8003470:	4a17      	ldr	r2, [pc, #92]	; (80034d0 <MX_ADC2_Init+0xa0>)
 8003472:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003474:	4b14      	ldr	r3, [pc, #80]	; (80034c8 <MX_ADC2_Init+0x98>)
 8003476:	2200      	movs	r2, #0
 8003478:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800347a:	4b13      	ldr	r3, [pc, #76]	; (80034c8 <MX_ADC2_Init+0x98>)
 800347c:	2201      	movs	r2, #1
 800347e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8003480:	4b11      	ldr	r3, [pc, #68]	; (80034c8 <MX_ADC2_Init+0x98>)
 8003482:	2200      	movs	r2, #0
 8003484:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003488:	4b0f      	ldr	r3, [pc, #60]	; (80034c8 <MX_ADC2_Init+0x98>)
 800348a:	2201      	movs	r2, #1
 800348c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800348e:	480e      	ldr	r0, [pc, #56]	; (80034c8 <MX_ADC2_Init+0x98>)
 8003490:	f001 ff2a 	bl	80052e8 <HAL_ADC_Init>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 800349a:	f000 ff57 	bl	800434c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800349e:	2301      	movs	r3, #1
 80034a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80034a2:	2301      	movs	r3, #1
 80034a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80034a6:	2300      	movs	r3, #0
 80034a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80034aa:	463b      	mov	r3, r7
 80034ac:	4619      	mov	r1, r3
 80034ae:	4806      	ldr	r0, [pc, #24]	; (80034c8 <MX_ADC2_Init+0x98>)
 80034b0:	f001 ff5e 	bl	8005370 <HAL_ADC_ConfigChannel>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80034ba:	f000 ff47 	bl	800434c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80034be:	bf00      	nop
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	2000026c 	.word	0x2000026c
 80034cc:	40012100 	.word	0x40012100
 80034d0:	0f000001 	.word	0x0f000001

080034d4 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80034da:	463b      	mov	r3, r7
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	605a      	str	r2, [r3, #4]
 80034e2:	609a      	str	r2, [r3, #8]
 80034e4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80034e6:	4b21      	ldr	r3, [pc, #132]	; (800356c <MX_ADC3_Init+0x98>)
 80034e8:	4a21      	ldr	r2, [pc, #132]	; (8003570 <MX_ADC3_Init+0x9c>)
 80034ea:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80034ec:	4b1f      	ldr	r3, [pc, #124]	; (800356c <MX_ADC3_Init+0x98>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80034f2:	4b1e      	ldr	r3, [pc, #120]	; (800356c <MX_ADC3_Init+0x98>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80034f8:	4b1c      	ldr	r3, [pc, #112]	; (800356c <MX_ADC3_Init+0x98>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80034fe:	4b1b      	ldr	r3, [pc, #108]	; (800356c <MX_ADC3_Init+0x98>)
 8003500:	2200      	movs	r2, #0
 8003502:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003504:	4b19      	ldr	r3, [pc, #100]	; (800356c <MX_ADC3_Init+0x98>)
 8003506:	2200      	movs	r2, #0
 8003508:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800350c:	4b17      	ldr	r3, [pc, #92]	; (800356c <MX_ADC3_Init+0x98>)
 800350e:	2200      	movs	r2, #0
 8003510:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003512:	4b16      	ldr	r3, [pc, #88]	; (800356c <MX_ADC3_Init+0x98>)
 8003514:	4a17      	ldr	r2, [pc, #92]	; (8003574 <MX_ADC3_Init+0xa0>)
 8003516:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003518:	4b14      	ldr	r3, [pc, #80]	; (800356c <MX_ADC3_Init+0x98>)
 800351a:	2200      	movs	r2, #0
 800351c:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800351e:	4b13      	ldr	r3, [pc, #76]	; (800356c <MX_ADC3_Init+0x98>)
 8003520:	2201      	movs	r2, #1
 8003522:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8003524:	4b11      	ldr	r3, [pc, #68]	; (800356c <MX_ADC3_Init+0x98>)
 8003526:	2200      	movs	r2, #0
 8003528:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800352c:	4b0f      	ldr	r3, [pc, #60]	; (800356c <MX_ADC3_Init+0x98>)
 800352e:	2201      	movs	r2, #1
 8003530:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003532:	480e      	ldr	r0, [pc, #56]	; (800356c <MX_ADC3_Init+0x98>)
 8003534:	f001 fed8 	bl	80052e8 <HAL_ADC_Init>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 800353e:	f000 ff05 	bl	800434c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003542:	230d      	movs	r3, #13
 8003544:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003546:	2301      	movs	r3, #1
 8003548:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800354a:	2300      	movs	r3, #0
 800354c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800354e:	463b      	mov	r3, r7
 8003550:	4619      	mov	r1, r3
 8003552:	4806      	ldr	r0, [pc, #24]	; (800356c <MX_ADC3_Init+0x98>)
 8003554:	f001 ff0c 	bl	8005370 <HAL_ADC_ConfigChannel>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 800355e:	f000 fef5 	bl	800434c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8003562:	bf00      	nop
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	200002b4 	.word	0x200002b4
 8003570:	40012200 	.word	0x40012200
 8003574:	0f000001 	.word	0x0f000001

08003578 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b08e      	sub	sp, #56	; 0x38
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003580:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	605a      	str	r2, [r3, #4]
 800358a:	609a      	str	r2, [r3, #8]
 800358c:	60da      	str	r2, [r3, #12]
 800358e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a4b      	ldr	r2, [pc, #300]	; (80036c4 <HAL_ADC_MspInit+0x14c>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d124      	bne.n	80035e4 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800359a:	4b4b      	ldr	r3, [pc, #300]	; (80036c8 <HAL_ADC_MspInit+0x150>)
 800359c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359e:	4a4a      	ldr	r2, [pc, #296]	; (80036c8 <HAL_ADC_MspInit+0x150>)
 80035a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035a4:	6453      	str	r3, [r2, #68]	; 0x44
 80035a6:	4b48      	ldr	r3, [pc, #288]	; (80036c8 <HAL_ADC_MspInit+0x150>)
 80035a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ae:	623b      	str	r3, [r7, #32]
 80035b0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035b2:	4b45      	ldr	r3, [pc, #276]	; (80036c8 <HAL_ADC_MspInit+0x150>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b6:	4a44      	ldr	r2, [pc, #272]	; (80036c8 <HAL_ADC_MspInit+0x150>)
 80035b8:	f043 0301 	orr.w	r3, r3, #1
 80035bc:	6313      	str	r3, [r2, #48]	; 0x30
 80035be:	4b42      	ldr	r3, [pc, #264]	; (80036c8 <HAL_ADC_MspInit+0x150>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	61fb      	str	r3, [r7, #28]
 80035c8:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80035ca:	2301      	movs	r3, #1
 80035cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035ce:	2303      	movs	r3, #3
 80035d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d2:	2300      	movs	r3, #0
 80035d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035da:	4619      	mov	r1, r3
 80035dc:	483b      	ldr	r0, [pc, #236]	; (80036cc <HAL_ADC_MspInit+0x154>)
 80035de:	f002 fecb 	bl	8006378 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80035e2:	e06a      	b.n	80036ba <HAL_ADC_MspInit+0x142>
  else if(adcHandle->Instance==ADC2)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a39      	ldr	r2, [pc, #228]	; (80036d0 <HAL_ADC_MspInit+0x158>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d124      	bne.n	8003638 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80035ee:	4b36      	ldr	r3, [pc, #216]	; (80036c8 <HAL_ADC_MspInit+0x150>)
 80035f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f2:	4a35      	ldr	r2, [pc, #212]	; (80036c8 <HAL_ADC_MspInit+0x150>)
 80035f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035f8:	6453      	str	r3, [r2, #68]	; 0x44
 80035fa:	4b33      	ldr	r3, [pc, #204]	; (80036c8 <HAL_ADC_MspInit+0x150>)
 80035fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003602:	61bb      	str	r3, [r7, #24]
 8003604:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003606:	4b30      	ldr	r3, [pc, #192]	; (80036c8 <HAL_ADC_MspInit+0x150>)
 8003608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360a:	4a2f      	ldr	r2, [pc, #188]	; (80036c8 <HAL_ADC_MspInit+0x150>)
 800360c:	f043 0301 	orr.w	r3, r3, #1
 8003610:	6313      	str	r3, [r2, #48]	; 0x30
 8003612:	4b2d      	ldr	r3, [pc, #180]	; (80036c8 <HAL_ADC_MspInit+0x150>)
 8003614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800361e:	2302      	movs	r3, #2
 8003620:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003622:	2303      	movs	r3, #3
 8003624:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003626:	2300      	movs	r3, #0
 8003628:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800362a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800362e:	4619      	mov	r1, r3
 8003630:	4826      	ldr	r0, [pc, #152]	; (80036cc <HAL_ADC_MspInit+0x154>)
 8003632:	f002 fea1 	bl	8006378 <HAL_GPIO_Init>
}
 8003636:	e040      	b.n	80036ba <HAL_ADC_MspInit+0x142>
  else if(adcHandle->Instance==ADC3)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a25      	ldr	r2, [pc, #148]	; (80036d4 <HAL_ADC_MspInit+0x15c>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d13b      	bne.n	80036ba <HAL_ADC_MspInit+0x142>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003642:	4b21      	ldr	r3, [pc, #132]	; (80036c8 <HAL_ADC_MspInit+0x150>)
 8003644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003646:	4a20      	ldr	r2, [pc, #128]	; (80036c8 <HAL_ADC_MspInit+0x150>)
 8003648:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800364c:	6453      	str	r3, [r2, #68]	; 0x44
 800364e:	4b1e      	ldr	r3, [pc, #120]	; (80036c8 <HAL_ADC_MspInit+0x150>)
 8003650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003656:	613b      	str	r3, [r7, #16]
 8003658:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800365a:	4b1b      	ldr	r3, [pc, #108]	; (80036c8 <HAL_ADC_MspInit+0x150>)
 800365c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365e:	4a1a      	ldr	r2, [pc, #104]	; (80036c8 <HAL_ADC_MspInit+0x150>)
 8003660:	f043 0320 	orr.w	r3, r3, #32
 8003664:	6313      	str	r3, [r2, #48]	; 0x30
 8003666:	4b18      	ldr	r3, [pc, #96]	; (80036c8 <HAL_ADC_MspInit+0x150>)
 8003668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366a:	f003 0320 	and.w	r3, r3, #32
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003672:	4b15      	ldr	r3, [pc, #84]	; (80036c8 <HAL_ADC_MspInit+0x150>)
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	4a14      	ldr	r2, [pc, #80]	; (80036c8 <HAL_ADC_MspInit+0x150>)
 8003678:	f043 0304 	orr.w	r3, r3, #4
 800367c:	6313      	str	r3, [r2, #48]	; 0x30
 800367e:	4b12      	ldr	r3, [pc, #72]	; (80036c8 <HAL_ADC_MspInit+0x150>)
 8003680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003682:	f003 0304 	and.w	r3, r3, #4
 8003686:	60bb      	str	r3, [r7, #8]
 8003688:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800368a:	2328      	movs	r3, #40	; 0x28
 800368c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800368e:	2303      	movs	r3, #3
 8003690:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003692:	2300      	movs	r3, #0
 8003694:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800369a:	4619      	mov	r1, r3
 800369c:	480e      	ldr	r0, [pc, #56]	; (80036d8 <HAL_ADC_MspInit+0x160>)
 800369e:	f002 fe6b 	bl	8006378 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80036a2:	230c      	movs	r3, #12
 80036a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036a6:	2303      	movs	r3, #3
 80036a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036aa:	2300      	movs	r3, #0
 80036ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036b2:	4619      	mov	r1, r3
 80036b4:	4809      	ldr	r0, [pc, #36]	; (80036dc <HAL_ADC_MspInit+0x164>)
 80036b6:	f002 fe5f 	bl	8006378 <HAL_GPIO_Init>
}
 80036ba:	bf00      	nop
 80036bc:	3738      	adds	r7, #56	; 0x38
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	40012000 	.word	0x40012000
 80036c8:	40023800 	.word	0x40023800
 80036cc:	40020000 	.word	0x40020000
 80036d0:	40012100 	.word	0x40012100
 80036d4:	40012200 	.word	0x40012200
 80036d8:	40021400 	.word	0x40021400
 80036dc:	40020800 	.word	0x40020800

080036e0 <__io_putchar>:
			}
	}
		HAL_UART_Transmit(&huart7, EndMSG, sizeof(EndMSG), 10000);
};

int __io_putchar(int ch){
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
	if(ch == '\n')
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b0a      	cmp	r3, #10
 80036ec:	d106      	bne.n	80036fc <__io_putchar+0x1c>
	{
		HAL_UART_Transmit(&huart7, (uint8_t*)"\r", 1, HAL_MAX_DELAY);
 80036ee:	f04f 33ff 	mov.w	r3, #4294967295
 80036f2:	2201      	movs	r2, #1
 80036f4:	4907      	ldr	r1, [pc, #28]	; (8003714 <__io_putchar+0x34>)
 80036f6:	4808      	ldr	r0, [pc, #32]	; (8003718 <__io_putchar+0x38>)
 80036f8:	f008 fabe 	bl	800bc78 <HAL_UART_Transmit>
	}
	HAL_UART_Transmit(&huart7, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80036fc:	1d39      	adds	r1, r7, #4
 80036fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003702:	2201      	movs	r2, #1
 8003704:	4804      	ldr	r0, [pc, #16]	; (8003718 <__io_putchar+0x38>)
 8003706:	f008 fab7 	bl	800bc78 <HAL_UART_Transmit>
	return 1;
 800370a:	2301      	movs	r3, #1
}
 800370c:	4618      	mov	r0, r3
 800370e:	3708      	adds	r7, #8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	08014b84 	.word	0x08014b84
 8003718:	20002cfc 	.word	0x20002cfc

0800371c <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003720:	4b16      	ldr	r3, [pc, #88]	; (800377c <MX_CAN1_Init+0x60>)
 8003722:	4a17      	ldr	r2, [pc, #92]	; (8003780 <MX_CAN1_Init+0x64>)
 8003724:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8003726:	4b15      	ldr	r3, [pc, #84]	; (800377c <MX_CAN1_Init+0x60>)
 8003728:	2210      	movs	r2, #16
 800372a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800372c:	4b13      	ldr	r3, [pc, #76]	; (800377c <MX_CAN1_Init+0x60>)
 800372e:	2200      	movs	r2, #0
 8003730:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003732:	4b12      	ldr	r3, [pc, #72]	; (800377c <MX_CAN1_Init+0x60>)
 8003734:	2200      	movs	r2, #0
 8003736:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8003738:	4b10      	ldr	r3, [pc, #64]	; (800377c <MX_CAN1_Init+0x60>)
 800373a:	2200      	movs	r2, #0
 800373c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800373e:	4b0f      	ldr	r3, [pc, #60]	; (800377c <MX_CAN1_Init+0x60>)
 8003740:	2200      	movs	r2, #0
 8003742:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8003744:	4b0d      	ldr	r3, [pc, #52]	; (800377c <MX_CAN1_Init+0x60>)
 8003746:	2200      	movs	r2, #0
 8003748:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800374a:	4b0c      	ldr	r3, [pc, #48]	; (800377c <MX_CAN1_Init+0x60>)
 800374c:	2200      	movs	r2, #0
 800374e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8003750:	4b0a      	ldr	r3, [pc, #40]	; (800377c <MX_CAN1_Init+0x60>)
 8003752:	2200      	movs	r2, #0
 8003754:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8003756:	4b09      	ldr	r3, [pc, #36]	; (800377c <MX_CAN1_Init+0x60>)
 8003758:	2200      	movs	r2, #0
 800375a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800375c:	4b07      	ldr	r3, [pc, #28]	; (800377c <MX_CAN1_Init+0x60>)
 800375e:	2200      	movs	r2, #0
 8003760:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8003762:	4b06      	ldr	r3, [pc, #24]	; (800377c <MX_CAN1_Init+0x60>)
 8003764:	2200      	movs	r2, #0
 8003766:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003768:	4804      	ldr	r0, [pc, #16]	; (800377c <MX_CAN1_Init+0x60>)
 800376a:	f002 f851 	bl	8005810 <HAL_CAN_Init>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8003774:	f000 fdea 	bl	800434c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8003778:	bf00      	nop
 800377a:	bd80      	pop	{r7, pc}
 800377c:	200002fc 	.word	0x200002fc
 8003780:	40006400 	.word	0x40006400

08003784 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8003788:	4b16      	ldr	r3, [pc, #88]	; (80037e4 <MX_CAN2_Init+0x60>)
 800378a:	4a17      	ldr	r2, [pc, #92]	; (80037e8 <MX_CAN2_Init+0x64>)
 800378c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 800378e:	4b15      	ldr	r3, [pc, #84]	; (80037e4 <MX_CAN2_Init+0x60>)
 8003790:	2210      	movs	r2, #16
 8003792:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8003794:	4b13      	ldr	r3, [pc, #76]	; (80037e4 <MX_CAN2_Init+0x60>)
 8003796:	2200      	movs	r2, #0
 8003798:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800379a:	4b12      	ldr	r3, [pc, #72]	; (80037e4 <MX_CAN2_Init+0x60>)
 800379c:	2200      	movs	r2, #0
 800379e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 80037a0:	4b10      	ldr	r3, [pc, #64]	; (80037e4 <MX_CAN2_Init+0x60>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80037a6:	4b0f      	ldr	r3, [pc, #60]	; (80037e4 <MX_CAN2_Init+0x60>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80037ac:	4b0d      	ldr	r3, [pc, #52]	; (80037e4 <MX_CAN2_Init+0x60>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80037b2:	4b0c      	ldr	r3, [pc, #48]	; (80037e4 <MX_CAN2_Init+0x60>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80037b8:	4b0a      	ldr	r3, [pc, #40]	; (80037e4 <MX_CAN2_Init+0x60>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80037be:	4b09      	ldr	r3, [pc, #36]	; (80037e4 <MX_CAN2_Init+0x60>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80037c4:	4b07      	ldr	r3, [pc, #28]	; (80037e4 <MX_CAN2_Init+0x60>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80037ca:	4b06      	ldr	r3, [pc, #24]	; (80037e4 <MX_CAN2_Init+0x60>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80037d0:	4804      	ldr	r0, [pc, #16]	; (80037e4 <MX_CAN2_Init+0x60>)
 80037d2:	f002 f81d 	bl	8005810 <HAL_CAN_Init>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 80037dc:	f000 fdb6 	bl	800434c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80037e0:	bf00      	nop
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	20000324 	.word	0x20000324
 80037e8:	40006800 	.word	0x40006800

080037ec <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b08e      	sub	sp, #56	; 0x38
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	605a      	str	r2, [r3, #4]
 80037fe:	609a      	str	r2, [r3, #8]
 8003800:	60da      	str	r2, [r3, #12]
 8003802:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a43      	ldr	r2, [pc, #268]	; (8003918 <HAL_CAN_MspInit+0x12c>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d131      	bne.n	8003872 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800380e:	4b43      	ldr	r3, [pc, #268]	; (800391c <HAL_CAN_MspInit+0x130>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	3301      	adds	r3, #1
 8003814:	4a41      	ldr	r2, [pc, #260]	; (800391c <HAL_CAN_MspInit+0x130>)
 8003816:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003818:	4b40      	ldr	r3, [pc, #256]	; (800391c <HAL_CAN_MspInit+0x130>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d10b      	bne.n	8003838 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003820:	4b3f      	ldr	r3, [pc, #252]	; (8003920 <HAL_CAN_MspInit+0x134>)
 8003822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003824:	4a3e      	ldr	r2, [pc, #248]	; (8003920 <HAL_CAN_MspInit+0x134>)
 8003826:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800382a:	6413      	str	r3, [r2, #64]	; 0x40
 800382c:	4b3c      	ldr	r3, [pc, #240]	; (8003920 <HAL_CAN_MspInit+0x134>)
 800382e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003834:	623b      	str	r3, [r7, #32]
 8003836:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003838:	4b39      	ldr	r3, [pc, #228]	; (8003920 <HAL_CAN_MspInit+0x134>)
 800383a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383c:	4a38      	ldr	r2, [pc, #224]	; (8003920 <HAL_CAN_MspInit+0x134>)
 800383e:	f043 0308 	orr.w	r3, r3, #8
 8003842:	6313      	str	r3, [r2, #48]	; 0x30
 8003844:	4b36      	ldr	r3, [pc, #216]	; (8003920 <HAL_CAN_MspInit+0x134>)
 8003846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003848:	f003 0308 	and.w	r3, r3, #8
 800384c:	61fb      	str	r3, [r7, #28]
 800384e:	69fb      	ldr	r3, [r7, #28]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003850:	2303      	movs	r3, #3
 8003852:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003854:	2302      	movs	r3, #2
 8003856:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003858:	2300      	movs	r3, #0
 800385a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800385c:	2303      	movs	r3, #3
 800385e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003860:	2309      	movs	r3, #9
 8003862:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003868:	4619      	mov	r1, r3
 800386a:	482e      	ldr	r0, [pc, #184]	; (8003924 <HAL_CAN_MspInit+0x138>)
 800386c:	f002 fd84 	bl	8006378 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8003870:	e04e      	b.n	8003910 <HAL_CAN_MspInit+0x124>
  else if(canHandle->Instance==CAN2)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a2c      	ldr	r2, [pc, #176]	; (8003928 <HAL_CAN_MspInit+0x13c>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d149      	bne.n	8003910 <HAL_CAN_MspInit+0x124>
    __HAL_RCC_CAN3_CLK_ENABLE();
 800387c:	4b28      	ldr	r3, [pc, #160]	; (8003920 <HAL_CAN_MspInit+0x134>)
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	4a27      	ldr	r2, [pc, #156]	; (8003920 <HAL_CAN_MspInit+0x134>)
 8003882:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003886:	6413      	str	r3, [r2, #64]	; 0x40
 8003888:	4b25      	ldr	r3, [pc, #148]	; (8003920 <HAL_CAN_MspInit+0x134>)
 800388a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003890:	61bb      	str	r3, [r7, #24]
 8003892:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 8003894:	4b22      	ldr	r3, [pc, #136]	; (8003920 <HAL_CAN_MspInit+0x134>)
 8003896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003898:	4a21      	ldr	r2, [pc, #132]	; (8003920 <HAL_CAN_MspInit+0x134>)
 800389a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800389e:	6413      	str	r3, [r2, #64]	; 0x40
 80038a0:	4b1f      	ldr	r3, [pc, #124]	; (8003920 <HAL_CAN_MspInit+0x134>)
 80038a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038a8:	617b      	str	r3, [r7, #20]
 80038aa:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80038ac:	4b1b      	ldr	r3, [pc, #108]	; (800391c <HAL_CAN_MspInit+0x130>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	3301      	adds	r3, #1
 80038b2:	4a1a      	ldr	r2, [pc, #104]	; (800391c <HAL_CAN_MspInit+0x130>)
 80038b4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80038b6:	4b19      	ldr	r3, [pc, #100]	; (800391c <HAL_CAN_MspInit+0x130>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d10b      	bne.n	80038d6 <HAL_CAN_MspInit+0xea>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80038be:	4b18      	ldr	r3, [pc, #96]	; (8003920 <HAL_CAN_MspInit+0x134>)
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	4a17      	ldr	r2, [pc, #92]	; (8003920 <HAL_CAN_MspInit+0x134>)
 80038c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80038c8:	6413      	str	r3, [r2, #64]	; 0x40
 80038ca:	4b15      	ldr	r3, [pc, #84]	; (8003920 <HAL_CAN_MspInit+0x134>)
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d2:	613b      	str	r3, [r7, #16]
 80038d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038d6:	4b12      	ldr	r3, [pc, #72]	; (8003920 <HAL_CAN_MspInit+0x134>)
 80038d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038da:	4a11      	ldr	r2, [pc, #68]	; (8003920 <HAL_CAN_MspInit+0x134>)
 80038dc:	f043 0302 	orr.w	r3, r3, #2
 80038e0:	6313      	str	r3, [r2, #48]	; 0x30
 80038e2:	4b0f      	ldr	r3, [pc, #60]	; (8003920 <HAL_CAN_MspInit+0x134>)
 80038e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	60fb      	str	r3, [r7, #12]
 80038ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80038ee:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80038f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f4:	2302      	movs	r3, #2
 80038f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f8:	2300      	movs	r3, #0
 80038fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038fc:	2303      	movs	r3, #3
 80038fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8003900:	2309      	movs	r3, #9
 8003902:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003908:	4619      	mov	r1, r3
 800390a:	4808      	ldr	r0, [pc, #32]	; (800392c <HAL_CAN_MspInit+0x140>)
 800390c:	f002 fd34 	bl	8006378 <HAL_GPIO_Init>
}
 8003910:	bf00      	nop
 8003912:	3738      	adds	r7, #56	; 0x38
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40006400 	.word	0x40006400
 800391c:	2000034c 	.word	0x2000034c
 8003920:	40023800 	.word	0x40023800
 8003924:	40020c00 	.word	0x40020c00
 8003928:	40006800 	.word	0x40006800
 800392c:	40020400 	.word	0x40020400

08003930 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003936:	4b10      	ldr	r3, [pc, #64]	; (8003978 <MX_DMA_Init+0x48>)
 8003938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393a:	4a0f      	ldr	r2, [pc, #60]	; (8003978 <MX_DMA_Init+0x48>)
 800393c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003940:	6313      	str	r3, [r2, #48]	; 0x30
 8003942:	4b0d      	ldr	r3, [pc, #52]	; (8003978 <MX_DMA_Init+0x48>)
 8003944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800394a:	607b      	str	r3, [r7, #4]
 800394c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800394e:	2200      	movs	r2, #0
 8003950:	2100      	movs	r1, #0
 8003952:	2038      	movs	r0, #56	; 0x38
 8003954:	f002 f933 	bl	8005bbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003958:	2038      	movs	r0, #56	; 0x38
 800395a:	f002 f94c 	bl	8005bf6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 800395e:	2200      	movs	r2, #0
 8003960:	2100      	movs	r1, #0
 8003962:	2044      	movs	r0, #68	; 0x44
 8003964:	f002 f92b 	bl	8005bbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8003968:	2044      	movs	r0, #68	; 0x44
 800396a:	f002 f944 	bl	8005bf6 <HAL_NVIC_EnableIRQ>

}
 800396e:	bf00      	nop
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	40023800 	.word	0x40023800

0800397c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800397c:	b480      	push	{r7}
 800397e:	b089      	sub	sp, #36	; 0x24
 8003980:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003982:	4b33      	ldr	r3, [pc, #204]	; (8003a50 <MX_GPIO_Init+0xd4>)
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	4a32      	ldr	r2, [pc, #200]	; (8003a50 <MX_GPIO_Init+0xd4>)
 8003988:	f043 0304 	orr.w	r3, r3, #4
 800398c:	6313      	str	r3, [r2, #48]	; 0x30
 800398e:	4b30      	ldr	r3, [pc, #192]	; (8003a50 <MX_GPIO_Init+0xd4>)
 8003990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003992:	f003 0304 	and.w	r3, r3, #4
 8003996:	61fb      	str	r3, [r7, #28]
 8003998:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800399a:	4b2d      	ldr	r3, [pc, #180]	; (8003a50 <MX_GPIO_Init+0xd4>)
 800399c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399e:	4a2c      	ldr	r2, [pc, #176]	; (8003a50 <MX_GPIO_Init+0xd4>)
 80039a0:	f043 0320 	orr.w	r3, r3, #32
 80039a4:	6313      	str	r3, [r2, #48]	; 0x30
 80039a6:	4b2a      	ldr	r3, [pc, #168]	; (8003a50 <MX_GPIO_Init+0xd4>)
 80039a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039aa:	f003 0320 	and.w	r3, r3, #32
 80039ae:	61bb      	str	r3, [r7, #24]
 80039b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80039b2:	4b27      	ldr	r3, [pc, #156]	; (8003a50 <MX_GPIO_Init+0xd4>)
 80039b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b6:	4a26      	ldr	r2, [pc, #152]	; (8003a50 <MX_GPIO_Init+0xd4>)
 80039b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039bc:	6313      	str	r3, [r2, #48]	; 0x30
 80039be:	4b24      	ldr	r3, [pc, #144]	; (8003a50 <MX_GPIO_Init+0xd4>)
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c6:	617b      	str	r3, [r7, #20]
 80039c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ca:	4b21      	ldr	r3, [pc, #132]	; (8003a50 <MX_GPIO_Init+0xd4>)
 80039cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ce:	4a20      	ldr	r2, [pc, #128]	; (8003a50 <MX_GPIO_Init+0xd4>)
 80039d0:	f043 0301 	orr.w	r3, r3, #1
 80039d4:	6313      	str	r3, [r2, #48]	; 0x30
 80039d6:	4b1e      	ldr	r3, [pc, #120]	; (8003a50 <MX_GPIO_Init+0xd4>)
 80039d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	613b      	str	r3, [r7, #16]
 80039e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80039e2:	4b1b      	ldr	r3, [pc, #108]	; (8003a50 <MX_GPIO_Init+0xd4>)
 80039e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e6:	4a1a      	ldr	r2, [pc, #104]	; (8003a50 <MX_GPIO_Init+0xd4>)
 80039e8:	f043 0310 	orr.w	r3, r3, #16
 80039ec:	6313      	str	r3, [r2, #48]	; 0x30
 80039ee:	4b18      	ldr	r3, [pc, #96]	; (8003a50 <MX_GPIO_Init+0xd4>)
 80039f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f2:	f003 0310 	and.w	r3, r3, #16
 80039f6:	60fb      	str	r3, [r7, #12]
 80039f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039fa:	4b15      	ldr	r3, [pc, #84]	; (8003a50 <MX_GPIO_Init+0xd4>)
 80039fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fe:	4a14      	ldr	r2, [pc, #80]	; (8003a50 <MX_GPIO_Init+0xd4>)
 8003a00:	f043 0302 	orr.w	r3, r3, #2
 8003a04:	6313      	str	r3, [r2, #48]	; 0x30
 8003a06:	4b12      	ldr	r3, [pc, #72]	; (8003a50 <MX_GPIO_Init+0xd4>)
 8003a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	60bb      	str	r3, [r7, #8]
 8003a10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a12:	4b0f      	ldr	r3, [pc, #60]	; (8003a50 <MX_GPIO_Init+0xd4>)
 8003a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a16:	4a0e      	ldr	r2, [pc, #56]	; (8003a50 <MX_GPIO_Init+0xd4>)
 8003a18:	f043 0308 	orr.w	r3, r3, #8
 8003a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a1e:	4b0c      	ldr	r3, [pc, #48]	; (8003a50 <MX_GPIO_Init+0xd4>)
 8003a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a22:	f003 0308 	and.w	r3, r3, #8
 8003a26:	607b      	str	r3, [r7, #4]
 8003a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003a2a:	4b09      	ldr	r3, [pc, #36]	; (8003a50 <MX_GPIO_Init+0xd4>)
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2e:	4a08      	ldr	r2, [pc, #32]	; (8003a50 <MX_GPIO_Init+0xd4>)
 8003a30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a34:	6313      	str	r3, [r2, #48]	; 0x30
 8003a36:	4b06      	ldr	r3, [pc, #24]	; (8003a50 <MX_GPIO_Init+0xd4>)
 8003a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3e:	603b      	str	r3, [r7, #0]
 8003a40:	683b      	ldr	r3, [r7, #0]

}
 8003a42:	bf00      	nop
 8003a44:	3724      	adds	r7, #36	; 0x24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	40023800 	.word	0x40023800

08003a54 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c3;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003a58:	4b1b      	ldr	r3, [pc, #108]	; (8003ac8 <MX_I2C1_Init+0x74>)
 8003a5a:	4a1c      	ldr	r2, [pc, #112]	; (8003acc <MX_I2C1_Init+0x78>)
 8003a5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 8003a5e:	4b1a      	ldr	r3, [pc, #104]	; (8003ac8 <MX_I2C1_Init+0x74>)
 8003a60:	4a1b      	ldr	r2, [pc, #108]	; (8003ad0 <MX_I2C1_Init+0x7c>)
 8003a62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003a64:	4b18      	ldr	r3, [pc, #96]	; (8003ac8 <MX_I2C1_Init+0x74>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a6a:	4b17      	ldr	r3, [pc, #92]	; (8003ac8 <MX_I2C1_Init+0x74>)
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a70:	4b15      	ldr	r3, [pc, #84]	; (8003ac8 <MX_I2C1_Init+0x74>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003a76:	4b14      	ldr	r3, [pc, #80]	; (8003ac8 <MX_I2C1_Init+0x74>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003a7c:	4b12      	ldr	r3, [pc, #72]	; (8003ac8 <MX_I2C1_Init+0x74>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a82:	4b11      	ldr	r3, [pc, #68]	; (8003ac8 <MX_I2C1_Init+0x74>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a88:	4b0f      	ldr	r3, [pc, #60]	; (8003ac8 <MX_I2C1_Init+0x74>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003a8e:	480e      	ldr	r0, [pc, #56]	; (8003ac8 <MX_I2C1_Init+0x74>)
 8003a90:	f002 fe1e 	bl	80066d0 <HAL_I2C_Init>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003a9a:	f000 fc57 	bl	800434c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	4809      	ldr	r0, [pc, #36]	; (8003ac8 <MX_I2C1_Init+0x74>)
 8003aa2:	f003 fee5 	bl	8007870 <HAL_I2CEx_ConfigAnalogFilter>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003aac:	f000 fc4e 	bl	800434c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	4805      	ldr	r0, [pc, #20]	; (8003ac8 <MX_I2C1_Init+0x74>)
 8003ab4:	f003 ff27 	bl	8007906 <HAL_I2CEx_ConfigDigitalFilter>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003abe:	f000 fc45 	bl	800434c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003ac2:	bf00      	nop
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	20000350 	.word	0x20000350
 8003acc:	40005400 	.word	0x40005400
 8003ad0:	00300f38 	.word	0x00300f38

08003ad4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003ad8:	4b1b      	ldr	r3, [pc, #108]	; (8003b48 <MX_I2C2_Init+0x74>)
 8003ada:	4a1c      	ldr	r2, [pc, #112]	; (8003b4c <MX_I2C2_Init+0x78>)
 8003adc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00300F38;
 8003ade:	4b1a      	ldr	r3, [pc, #104]	; (8003b48 <MX_I2C2_Init+0x74>)
 8003ae0:	4a1b      	ldr	r2, [pc, #108]	; (8003b50 <MX_I2C2_Init+0x7c>)
 8003ae2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8003ae4:	4b18      	ldr	r3, [pc, #96]	; (8003b48 <MX_I2C2_Init+0x74>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003aea:	4b17      	ldr	r3, [pc, #92]	; (8003b48 <MX_I2C2_Init+0x74>)
 8003aec:	2201      	movs	r2, #1
 8003aee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003af0:	4b15      	ldr	r3, [pc, #84]	; (8003b48 <MX_I2C2_Init+0x74>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003af6:	4b14      	ldr	r3, [pc, #80]	; (8003b48 <MX_I2C2_Init+0x74>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003afc:	4b12      	ldr	r3, [pc, #72]	; (8003b48 <MX_I2C2_Init+0x74>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b02:	4b11      	ldr	r3, [pc, #68]	; (8003b48 <MX_I2C2_Init+0x74>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b08:	4b0f      	ldr	r3, [pc, #60]	; (8003b48 <MX_I2C2_Init+0x74>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003b0e:	480e      	ldr	r0, [pc, #56]	; (8003b48 <MX_I2C2_Init+0x74>)
 8003b10:	f002 fdde 	bl	80066d0 <HAL_I2C_Init>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8003b1a:	f000 fc17 	bl	800434c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003b1e:	2100      	movs	r1, #0
 8003b20:	4809      	ldr	r0, [pc, #36]	; (8003b48 <MX_I2C2_Init+0x74>)
 8003b22:	f003 fea5 	bl	8007870 <HAL_I2CEx_ConfigAnalogFilter>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8003b2c:	f000 fc0e 	bl	800434c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003b30:	2100      	movs	r1, #0
 8003b32:	4805      	ldr	r0, [pc, #20]	; (8003b48 <MX_I2C2_Init+0x74>)
 8003b34:	f003 fee7 	bl	8007906 <HAL_I2CEx_ConfigDigitalFilter>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8003b3e:	f000 fc05 	bl	800434c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003b42:	bf00      	nop
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	2000039c 	.word	0x2000039c
 8003b4c:	40005800 	.word	0x40005800
 8003b50:	00300f38 	.word	0x00300f38

08003b54 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003b58:	4b1b      	ldr	r3, [pc, #108]	; (8003bc8 <MX_I2C3_Init+0x74>)
 8003b5a:	4a1c      	ldr	r2, [pc, #112]	; (8003bcc <MX_I2C3_Init+0x78>)
 8003b5c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00300F38;
 8003b5e:	4b1a      	ldr	r3, [pc, #104]	; (8003bc8 <MX_I2C3_Init+0x74>)
 8003b60:	4a1b      	ldr	r2, [pc, #108]	; (8003bd0 <MX_I2C3_Init+0x7c>)
 8003b62:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8003b64:	4b18      	ldr	r3, [pc, #96]	; (8003bc8 <MX_I2C3_Init+0x74>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b6a:	4b17      	ldr	r3, [pc, #92]	; (8003bc8 <MX_I2C3_Init+0x74>)
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b70:	4b15      	ldr	r3, [pc, #84]	; (8003bc8 <MX_I2C3_Init+0x74>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8003b76:	4b14      	ldr	r3, [pc, #80]	; (8003bc8 <MX_I2C3_Init+0x74>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003b7c:	4b12      	ldr	r3, [pc, #72]	; (8003bc8 <MX_I2C3_Init+0x74>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b82:	4b11      	ldr	r3, [pc, #68]	; (8003bc8 <MX_I2C3_Init+0x74>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b88:	4b0f      	ldr	r3, [pc, #60]	; (8003bc8 <MX_I2C3_Init+0x74>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003b8e:	480e      	ldr	r0, [pc, #56]	; (8003bc8 <MX_I2C3_Init+0x74>)
 8003b90:	f002 fd9e 	bl	80066d0 <HAL_I2C_Init>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8003b9a:	f000 fbd7 	bl	800434c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	4809      	ldr	r0, [pc, #36]	; (8003bc8 <MX_I2C3_Init+0x74>)
 8003ba2:	f003 fe65 	bl	8007870 <HAL_I2CEx_ConfigAnalogFilter>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d001      	beq.n	8003bb0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8003bac:	f000 fbce 	bl	800434c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	4805      	ldr	r0, [pc, #20]	; (8003bc8 <MX_I2C3_Init+0x74>)
 8003bb4:	f003 fea7 	bl	8007906 <HAL_I2CEx_ConfigDigitalFilter>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8003bbe:	f000 fbc5 	bl	800434c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003bc2:	bf00      	nop
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	200003e8 	.word	0x200003e8
 8003bcc:	40005c00 	.word	0x40005c00
 8003bd0:	00300f38 	.word	0x00300f38

08003bd4 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8003bd8:	4b1b      	ldr	r3, [pc, #108]	; (8003c48 <MX_I2C4_Init+0x74>)
 8003bda:	4a1c      	ldr	r2, [pc, #112]	; (8003c4c <MX_I2C4_Init+0x78>)
 8003bdc:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00300F38;
 8003bde:	4b1a      	ldr	r3, [pc, #104]	; (8003c48 <MX_I2C4_Init+0x74>)
 8003be0:	4a1b      	ldr	r2, [pc, #108]	; (8003c50 <MX_I2C4_Init+0x7c>)
 8003be2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8003be4:	4b18      	ldr	r3, [pc, #96]	; (8003c48 <MX_I2C4_Init+0x74>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003bea:	4b17      	ldr	r3, [pc, #92]	; (8003c48 <MX_I2C4_Init+0x74>)
 8003bec:	2201      	movs	r2, #1
 8003bee:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003bf0:	4b15      	ldr	r3, [pc, #84]	; (8003c48 <MX_I2C4_Init+0x74>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8003bf6:	4b14      	ldr	r3, [pc, #80]	; (8003c48 <MX_I2C4_Init+0x74>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003bfc:	4b12      	ldr	r3, [pc, #72]	; (8003c48 <MX_I2C4_Init+0x74>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c02:	4b11      	ldr	r3, [pc, #68]	; (8003c48 <MX_I2C4_Init+0x74>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c08:	4b0f      	ldr	r3, [pc, #60]	; (8003c48 <MX_I2C4_Init+0x74>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8003c0e:	480e      	ldr	r0, [pc, #56]	; (8003c48 <MX_I2C4_Init+0x74>)
 8003c10:	f002 fd5e 	bl	80066d0 <HAL_I2C_Init>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8003c1a:	f000 fb97 	bl	800434c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003c1e:	2100      	movs	r1, #0
 8003c20:	4809      	ldr	r0, [pc, #36]	; (8003c48 <MX_I2C4_Init+0x74>)
 8003c22:	f003 fe25 	bl	8007870 <HAL_I2CEx_ConfigAnalogFilter>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d001      	beq.n	8003c30 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8003c2c:	f000 fb8e 	bl	800434c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8003c30:	2100      	movs	r1, #0
 8003c32:	4805      	ldr	r0, [pc, #20]	; (8003c48 <MX_I2C4_Init+0x74>)
 8003c34:	f003 fe67 	bl	8007906 <HAL_I2CEx_ConfigDigitalFilter>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8003c3e:	f000 fb85 	bl	800434c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8003c42:	bf00      	nop
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	20000434 	.word	0x20000434
 8003c4c:	40006000 	.word	0x40006000
 8003c50:	00300f38 	.word	0x00300f38

08003c54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b090      	sub	sp, #64	; 0x40
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c60:	2200      	movs	r2, #0
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	605a      	str	r2, [r3, #4]
 8003c66:	609a      	str	r2, [r3, #8]
 8003c68:	60da      	str	r2, [r3, #12]
 8003c6a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a6b      	ldr	r2, [pc, #428]	; (8003e20 <HAL_I2C_MspInit+0x1cc>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d128      	bne.n	8003cc8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c76:	4b6b      	ldr	r3, [pc, #428]	; (8003e24 <HAL_I2C_MspInit+0x1d0>)
 8003c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7a:	4a6a      	ldr	r2, [pc, #424]	; (8003e24 <HAL_I2C_MspInit+0x1d0>)
 8003c7c:	f043 0302 	orr.w	r3, r3, #2
 8003c80:	6313      	str	r3, [r2, #48]	; 0x30
 8003c82:	4b68      	ldr	r3, [pc, #416]	; (8003e24 <HAL_I2C_MspInit+0x1d0>)
 8003c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MLX2_SCL_Pin|MLX2_SDA_Pin;
 8003c8e:	23c0      	movs	r3, #192	; 0xc0
 8003c90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c92:	2312      	movs	r3, #18
 8003c94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c96:	2300      	movs	r3, #0
 8003c98:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003c9e:	2304      	movs	r3, #4
 8003ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ca2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	485f      	ldr	r0, [pc, #380]	; (8003e28 <HAL_I2C_MspInit+0x1d4>)
 8003caa:	f002 fb65 	bl	8006378 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003cae:	4b5d      	ldr	r3, [pc, #372]	; (8003e24 <HAL_I2C_MspInit+0x1d0>)
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	4a5c      	ldr	r2, [pc, #368]	; (8003e24 <HAL_I2C_MspInit+0x1d0>)
 8003cb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8003cba:	4b5a      	ldr	r3, [pc, #360]	; (8003e24 <HAL_I2C_MspInit+0x1d0>)
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8003cc6:	e0a7      	b.n	8003e18 <HAL_I2C_MspInit+0x1c4>
  else if(i2cHandle->Instance==I2C2)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a57      	ldr	r2, [pc, #348]	; (8003e2c <HAL_I2C_MspInit+0x1d8>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d128      	bne.n	8003d24 <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003cd2:	4b54      	ldr	r3, [pc, #336]	; (8003e24 <HAL_I2C_MspInit+0x1d0>)
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd6:	4a53      	ldr	r2, [pc, #332]	; (8003e24 <HAL_I2C_MspInit+0x1d0>)
 8003cd8:	f043 0320 	orr.w	r3, r3, #32
 8003cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8003cde:	4b51      	ldr	r3, [pc, #324]	; (8003e24 <HAL_I2C_MspInit+0x1d0>)
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce2:	f003 0320 	and.w	r3, r3, #32
 8003ce6:	623b      	str	r3, [r7, #32]
 8003ce8:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GYRO_SDA_Pin|GYRO_SCL_Pin;
 8003cea:	2303      	movs	r3, #3
 8003cec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003cee:	2312      	movs	r3, #18
 8003cf0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003cfa:	2304      	movs	r3, #4
 8003cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003cfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d02:	4619      	mov	r1, r3
 8003d04:	484a      	ldr	r0, [pc, #296]	; (8003e30 <HAL_I2C_MspInit+0x1dc>)
 8003d06:	f002 fb37 	bl	8006378 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003d0a:	4b46      	ldr	r3, [pc, #280]	; (8003e24 <HAL_I2C_MspInit+0x1d0>)
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0e:	4a45      	ldr	r2, [pc, #276]	; (8003e24 <HAL_I2C_MspInit+0x1d0>)
 8003d10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d14:	6413      	str	r3, [r2, #64]	; 0x40
 8003d16:	4b43      	ldr	r3, [pc, #268]	; (8003e24 <HAL_I2C_MspInit+0x1d0>)
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d1e:	61fb      	str	r3, [r7, #28]
 8003d20:	69fb      	ldr	r3, [r7, #28]
}
 8003d22:	e079      	b.n	8003e18 <HAL_I2C_MspInit+0x1c4>
  else if(i2cHandle->Instance==I2C3)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a42      	ldr	r2, [pc, #264]	; (8003e34 <HAL_I2C_MspInit+0x1e0>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d146      	bne.n	8003dbc <HAL_I2C_MspInit+0x168>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d2e:	4b3d      	ldr	r3, [pc, #244]	; (8003e24 <HAL_I2C_MspInit+0x1d0>)
 8003d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d32:	4a3c      	ldr	r2, [pc, #240]	; (8003e24 <HAL_I2C_MspInit+0x1d0>)
 8003d34:	f043 0304 	orr.w	r3, r3, #4
 8003d38:	6313      	str	r3, [r2, #48]	; 0x30
 8003d3a:	4b3a      	ldr	r3, [pc, #232]	; (8003e24 <HAL_I2C_MspInit+0x1d0>)
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3e:	f003 0304 	and.w	r3, r3, #4
 8003d42:	61bb      	str	r3, [r7, #24]
 8003d44:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d46:	4b37      	ldr	r3, [pc, #220]	; (8003e24 <HAL_I2C_MspInit+0x1d0>)
 8003d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4a:	4a36      	ldr	r2, [pc, #216]	; (8003e24 <HAL_I2C_MspInit+0x1d0>)
 8003d4c:	f043 0301 	orr.w	r3, r3, #1
 8003d50:	6313      	str	r3, [r2, #48]	; 0x30
 8003d52:	4b34      	ldr	r3, [pc, #208]	; (8003e24 <HAL_I2C_MspInit+0x1d0>)
 8003d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	617b      	str	r3, [r7, #20]
 8003d5c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MLX1_SDA_Pin;
 8003d5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d64:	2312      	movs	r3, #18
 8003d66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003d70:	2304      	movs	r3, #4
 8003d72:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(MLX1_SDA_GPIO_Port, &GPIO_InitStruct);
 8003d74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d78:	4619      	mov	r1, r3
 8003d7a:	482f      	ldr	r0, [pc, #188]	; (8003e38 <HAL_I2C_MspInit+0x1e4>)
 8003d7c:	f002 fafc 	bl	8006378 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MLX1_SCL_Pin;
 8003d80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d86:	2312      	movs	r3, #18
 8003d88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003d92:	2304      	movs	r3, #4
 8003d94:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(MLX1_SCL_GPIO_Port, &GPIO_InitStruct);
 8003d96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	4827      	ldr	r0, [pc, #156]	; (8003e3c <HAL_I2C_MspInit+0x1e8>)
 8003d9e:	f002 faeb 	bl	8006378 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003da2:	4b20      	ldr	r3, [pc, #128]	; (8003e24 <HAL_I2C_MspInit+0x1d0>)
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	4a1f      	ldr	r2, [pc, #124]	; (8003e24 <HAL_I2C_MspInit+0x1d0>)
 8003da8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003dac:	6413      	str	r3, [r2, #64]	; 0x40
 8003dae:	4b1d      	ldr	r3, [pc, #116]	; (8003e24 <HAL_I2C_MspInit+0x1d0>)
 8003db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003db6:	613b      	str	r3, [r7, #16]
 8003db8:	693b      	ldr	r3, [r7, #16]
}
 8003dba:	e02d      	b.n	8003e18 <HAL_I2C_MspInit+0x1c4>
  else if(i2cHandle->Instance==I2C4)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a1f      	ldr	r2, [pc, #124]	; (8003e40 <HAL_I2C_MspInit+0x1ec>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d128      	bne.n	8003e18 <HAL_I2C_MspInit+0x1c4>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003dc6:	4b17      	ldr	r3, [pc, #92]	; (8003e24 <HAL_I2C_MspInit+0x1d0>)
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dca:	4a16      	ldr	r2, [pc, #88]	; (8003e24 <HAL_I2C_MspInit+0x1d0>)
 8003dcc:	f043 0320 	orr.w	r3, r3, #32
 8003dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8003dd2:	4b14      	ldr	r3, [pc, #80]	; (8003e24 <HAL_I2C_MspInit+0x1d0>)
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd6:	f003 0320 	and.w	r3, r3, #32
 8003dda:	60fb      	str	r3, [r7, #12]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003dde:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003de2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003de4:	2312      	movs	r3, #18
 8003de6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de8:	2300      	movs	r3, #0
 8003dea:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dec:	2303      	movs	r3, #3
 8003dee:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8003df0:	2304      	movs	r3, #4
 8003df2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003df4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003df8:	4619      	mov	r1, r3
 8003dfa:	480d      	ldr	r0, [pc, #52]	; (8003e30 <HAL_I2C_MspInit+0x1dc>)
 8003dfc:	f002 fabc 	bl	8006378 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8003e00:	4b08      	ldr	r3, [pc, #32]	; (8003e24 <HAL_I2C_MspInit+0x1d0>)
 8003e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e04:	4a07      	ldr	r2, [pc, #28]	; (8003e24 <HAL_I2C_MspInit+0x1d0>)
 8003e06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e0a:	6413      	str	r3, [r2, #64]	; 0x40
 8003e0c:	4b05      	ldr	r3, [pc, #20]	; (8003e24 <HAL_I2C_MspInit+0x1d0>)
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e14:	60bb      	str	r3, [r7, #8]
 8003e16:	68bb      	ldr	r3, [r7, #8]
}
 8003e18:	bf00      	nop
 8003e1a:	3740      	adds	r7, #64	; 0x40
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	40005400 	.word	0x40005400
 8003e24:	40023800 	.word	0x40023800
 8003e28:	40020400 	.word	0x40020400
 8003e2c:	40005800 	.word	0x40005800
 8003e30:	40021400 	.word	0x40021400
 8003e34:	40005c00 	.word	0x40005c00
 8003e38:	40020800 	.word	0x40020800
 8003e3c:	40020000 	.word	0x40020000
 8003e40:	40006000 	.word	0x40006000

08003e44 <statusToInt>:
extern GyroSensor gyro;
extern MLXSensor MLXLF;
extern MLXSensor rightFWheelMlx;

int statusToInt()
{	int fullRegister = statusRegister.TeleBack;
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	4b39      	ldr	r3, [pc, #228]	; (8003f30 <statusToInt+0xec>)
 8003e4c:	78db      	ldrb	r3, [r3, #3]
 8003e4e:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	607b      	str	r3, [r7, #4]
	fullRegister = fullRegister << 2;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	607b      	str	r3, [r7, #4]
	fullRegister =  (fullRegister  |statusRegister.DamperRF) << 3;
 8003e5c:	4b34      	ldr	r3, [pc, #208]	; (8003f30 <statusToInt+0xec>)
 8003e5e:	78db      	ldrb	r3, [r3, #3]
 8003e60:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	461a      	mov	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	00db      	lsls	r3, r3, #3
 8003e6e:	607b      	str	r3, [r7, #4]
	fullRegister =  (fullRegister  |statusRegister.DamperLF) << 3;
 8003e70:	4b2f      	ldr	r3, [pc, #188]	; (8003f30 <statusToInt+0xec>)
 8003e72:	78db      	ldrb	r3, [r3, #3]
 8003e74:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	607b      	str	r3, [r7, #4]
	fullRegister =  (fullRegister  |statusRegister.Steering) << 3;
 8003e84:	4b2a      	ldr	r3, [pc, #168]	; (8003f30 <statusToInt+0xec>)
 8003e86:	789b      	ldrb	r3, [r3, #2]
 8003e88:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	461a      	mov	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	607b      	str	r3, [r7, #4]
	fullRegister =  (fullRegister  |statusRegister.VSSRF) << 3;
 8003e98:	4b25      	ldr	r3, [pc, #148]	; (8003f30 <statusToInt+0xec>)
 8003e9a:	789b      	ldrb	r3, [r3, #2]
 8003e9c:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	00db      	lsls	r3, r3, #3
 8003eaa:	607b      	str	r3, [r7, #4]
	fullRegister =  (fullRegister  |statusRegister.VSSLF) << 3;
 8003eac:	4b20      	ldr	r3, [pc, #128]	; (8003f30 <statusToInt+0xec>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f3c3 33c2 	ubfx	r3, r3, #15, #3
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	607b      	str	r3, [r7, #4]
	fullRegister =  (fullRegister  |statusRegister.MLXRF) << 3;
 8003ec0:	4b1b      	ldr	r3, [pc, #108]	; (8003f30 <statusToInt+0xec>)
 8003ec2:	785b      	ldrb	r3, [r3, #1]
 8003ec4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	461a      	mov	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	607b      	str	r3, [r7, #4]
	fullRegister =  (fullRegister  |statusRegister.MLXLF) << 3;
 8003ed4:	4b16      	ldr	r3, [pc, #88]	; (8003f30 <statusToInt+0xec>)
 8003ed6:	785b      	ldrb	r3, [r3, #1]
 8003ed8:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	461a      	mov	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	00db      	lsls	r3, r3, #3
 8003ee6:	607b      	str	r3, [r7, #4]
	fullRegister = (fullRegister  | statusRegister.GYRO) << 3;
 8003ee8:	4b11      	ldr	r3, [pc, #68]	; (8003f30 <statusToInt+0xec>)
 8003eea:	881b      	ldrh	r3, [r3, #0]
 8003eec:	f3c3 1382 	ubfx	r3, r3, #6, #3
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	00db      	lsls	r3, r3, #3
 8003efa:	607b      	str	r3, [r7, #4]
	fullRegister = (fullRegister  | statusRegister.GPS) << 3;
 8003efc:	4b0c      	ldr	r3, [pc, #48]	; (8003f30 <statusToInt+0xec>)
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	461a      	mov	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	00db      	lsls	r3, r3, #3
 8003f0e:	607b      	str	r3, [r7, #4]
	fullRegister =  (fullRegister  |statusRegister.SDCARD);
 8003f10:	4b07      	ldr	r3, [pc, #28]	; (8003f30 <statusToInt+0xec>)
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	607b      	str	r3, [r7, #4]
	return fullRegister;
 8003f22:	687b      	ldr	r3, [r7, #4]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr
 8003f30:	20000480 	.word	0x20000480

08003f34 <printStatusRegister>:
void printStatusRegister()
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0

	int a = sizeof(statusRegister);
 8003f3a:	2308      	movs	r3, #8
 8003f3c:	60bb      	str	r3, [r7, #8]
	//a = sizeof(statusRegister.checkTime);
	int fullRegister = statusToInt();
 8003f3e:	f7ff ff81 	bl	8003e44 <statusToInt>
 8003f42:	6078      	str	r0, [r7, #4]
	int b =0;
 8003f44:	2300      	movs	r3, #0
 8003f46:	603b      	str	r3, [r7, #0]
	for(int i=31;i>=0;i--)
 8003f48:	231f      	movs	r3, #31
 8003f4a:	60fb      	str	r3, [r7, #12]
 8003f4c:	e022      	b.n	8003f94 <printStatusRegister+0x60>
	{
		b = fullRegister >> i;
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	fa42 f303 	asr.w	r3, r2, r3
 8003f56:	603b      	str	r3, [r7, #0]
		if(b & 1)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d003      	beq.n	8003f6a <printStatusRegister+0x36>
		{
			printf("1");
 8003f62:	2031      	movs	r0, #49	; 0x31
 8003f64:	f00c fd48 	bl	80109f8 <putchar>
 8003f68:	e002      	b.n	8003f70 <printStatusRegister+0x3c>
		}else
		{
			printf("0");
 8003f6a:	2030      	movs	r0, #48	; 0x30
 8003f6c:	f00c fd44 	bl	80109f8 <putchar>
		}
		if(i%3 == 0)
 8003f70:	68f9      	ldr	r1, [r7, #12]
 8003f72:	4b0d      	ldr	r3, [pc, #52]	; (8003fa8 <printStatusRegister+0x74>)
 8003f74:	fb83 3201 	smull	r3, r2, r3, r1
 8003f78:	17cb      	asrs	r3, r1, #31
 8003f7a:	1ad2      	subs	r2, r2, r3
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	4413      	add	r3, r2
 8003f82:	1aca      	subs	r2, r1, r3
 8003f84:	2a00      	cmp	r2, #0
 8003f86:	d102      	bne.n	8003f8e <printStatusRegister+0x5a>
		{
			printf(" ");
 8003f88:	2020      	movs	r0, #32
 8003f8a:	f00c fd35 	bl	80109f8 <putchar>
	for(int i=31;i>=0;i--)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	3b01      	subs	r3, #1
 8003f92:	60fb      	str	r3, [r7, #12]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	dad9      	bge.n	8003f4e <printStatusRegister+0x1a>
		}

	}
	printf("\n");
 8003f9a:	200a      	movs	r0, #10
 8003f9c:	f00c fd2c 	bl	80109f8 <putchar>
}
 8003fa0:	bf00      	nop
 8003fa2:	3710      	adds	r7, #16
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	55555556 	.word	0x55555556

08003fac <initializeSensors>:

void initializeSensors()
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
	  int res = mlxInit(&MLXLF);
 8003fb2:	4805      	ldr	r0, [pc, #20]	; (8003fc8 <initializeSensors+0x1c>)
 8003fb4:	f000 fc3c 	bl	8004830 <mlxInit>
 8003fb8:	6078      	str	r0, [r7, #4]
	  gyroInit(&gyro);
 8003fba:	4804      	ldr	r0, [pc, #16]	; (8003fcc <initializeSensors+0x20>)
 8003fbc:	f000 fb5c 	bl	8004678 <gyroInit>

	  //res = res | mlxInit(&rightFWheelMLX);


}
 8003fc0:	bf00      	nop
 8003fc2:	3708      	adds	r7, #8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	20000698 	.word	0x20000698
 8003fcc:	200005f0 	.word	0x200005f0

08003fd0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]

  if (htim == &htim14 )
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a1b      	ldr	r2, [pc, #108]	; (8004048 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d12c      	bne.n	800403a <HAL_TIM_PeriodElapsedCallback+0x6a>
  {
	 statusRegister.checkTime -= 25;
 8003fe0:	4b1a      	ldr	r3, [pc, #104]	; (800404c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003fe2:	889b      	ldrh	r3, [r3, #4]
 8003fe4:	3b19      	subs	r3, #25
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	4b18      	ldr	r3, [pc, #96]	; (800404c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003fea:	809a      	strh	r2, [r3, #4]
	 if( statusRegister.checkTime <= 0)
 8003fec:	4b17      	ldr	r3, [pc, #92]	; (800404c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003fee:	889b      	ldrh	r3, [r3, #4]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d103      	bne.n	8003ffc <HAL_TIM_PeriodElapsedCallback+0x2c>
	 {
		 //Check all sensors
		 statusRegister.checkTime = SENSOR_ALL_CHECK_TIME;
 8003ff4:	4b15      	ldr	r3, [pc, #84]	; (800404c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003ff6:	f242 7210 	movw	r2, #10000	; 0x2710
 8003ffa:	809a      	strh	r2, [r3, #4]
	 }
	 MLXLF.timeToNextRead -= 25;
 8003ffc:	4b14      	ldr	r3, [pc, #80]	; (8004050 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003ffe:	6a1b      	ldr	r3, [r3, #32]
 8004000:	3b19      	subs	r3, #25
 8004002:	4a13      	ldr	r2, [pc, #76]	; (8004050 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8004004:	6213      	str	r3, [r2, #32]
	 if(MLXLF.timeToNextRead <= 0)
 8004006:	4b12      	ldr	r3, [pc, #72]	; (8004050 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	2b00      	cmp	r3, #0
 800400c:	dc06      	bgt.n	800401c <HAL_TIM_PeriodElapsedCallback+0x4c>
	 {
		 MLXLF.dataReady = 1;
 800400e:	4b10      	ldr	r3, [pc, #64]	; (8004050 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8004010:	2201      	movs	r2, #1
 8004012:	619a      	str	r2, [r3, #24]
		 MLXLF.timeToNextRead = MLXDATARATE;
 8004014:	4b0e      	ldr	r3, [pc, #56]	; (8004050 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8004016:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800401a:	621a      	str	r2, [r3, #32]
	 }
	 gyro.timeToNextRead -= 25;
 800401c:	4b0d      	ldr	r3, [pc, #52]	; (8004054 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800401e:	6a1b      	ldr	r3, [r3, #32]
 8004020:	3b19      	subs	r3, #25
 8004022:	4a0c      	ldr	r2, [pc, #48]	; (8004054 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8004024:	6213      	str	r3, [r2, #32]
	 if(gyro.timeToNextRead <= 0)
 8004026:	4b0b      	ldr	r3, [pc, #44]	; (8004054 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	2b00      	cmp	r3, #0
 800402c:	dc05      	bgt.n	800403a <HAL_TIM_PeriodElapsedCallback+0x6a>
	 {
		 gyro.dataReady = 1;
 800402e:	4b09      	ldr	r3, [pc, #36]	; (8004054 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8004030:	2201      	movs	r2, #1
 8004032:	619a      	str	r2, [r3, #24]
		 gyro.timeToNextRead = GYRODATARATE;
 8004034:	4b07      	ldr	r3, [pc, #28]	; (8004054 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8004036:	22fa      	movs	r2, #250	; 0xfa
 8004038:	621a      	str	r2, [r3, #32]
	 }
  }
}
 800403a:	bf00      	nop
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	20002cb0 	.word	0x20002cb0
 800404c:	20000480 	.word	0x20000480
 8004050:	20000698 	.word	0x20000698
 8004054:	200005f0 	.word	0x200005f0

08004058 <HAL_TIM_IC_CaptureCallback>:
}

volatile uint32_t captured_value;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  if (htim == &htim3) {
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a0c      	ldr	r2, [pc, #48]	; (8004094 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d10d      	bne.n	8004084 <HAL_TIM_IC_CaptureCallback+0x2c>
    switch (HAL_TIM_GetActiveChannel(&htim3)) {
 8004068:	480a      	ldr	r0, [pc, #40]	; (8004094 <HAL_TIM_IC_CaptureCallback+0x3c>)
 800406a:	f007 f9e1 	bl	800b430 <HAL_TIM_GetActiveChannel>
 800406e:	4603      	mov	r3, r0
 8004070:	2b01      	cmp	r3, #1
 8004072:	d109      	bne.n	8004088 <HAL_TIM_IC_CaptureCallback+0x30>
      case HAL_TIM_ACTIVE_CHANNEL_1:
        captured_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8004074:	2100      	movs	r1, #0
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f007 f978 	bl	800b36c <HAL_TIM_ReadCapturedValue>
 800407c:	4603      	mov	r3, r0
 800407e:	4a06      	ldr	r2, [pc, #24]	; (8004098 <HAL_TIM_IC_CaptureCallback+0x40>)
 8004080:	6013      	str	r3, [r2, #0]
        break;
 8004082:	e002      	b.n	800408a <HAL_TIM_IC_CaptureCallback+0x32>
      default:
        break;
    }
  }
 8004084:	bf00      	nop
 8004086:	e000      	b.n	800408a <HAL_TIM_IC_CaptureCallback+0x32>
        break;
 8004088:	bf00      	nop
}
 800408a:	bf00      	nop
 800408c:	3708      	adds	r7, #8
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	20002c18 	.word	0x20002c18
 8004098:	20000488 	.word	0x20000488

0800409c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80040a6:	f001 f895 	bl	80051d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80040aa:	f000 f8a5 	bl	80041f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80040ae:	f7ff fc65 	bl	800397c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80040b2:	f000 ffbd 	bl	8005030 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 80040b6:	f008 fffd 	bl	800d0b4 <MX_FATFS_Init>
  MX_DMA_Init();
 80040ba:	f7ff fc39 	bl	8003930 <MX_DMA_Init>
  MX_I2C1_Init();
 80040be:	f7ff fcc9 	bl	8003a54 <MX_I2C1_Init>
  MX_I2C2_Init();
 80040c2:	f7ff fd07 	bl	8003ad4 <MX_I2C2_Init>
  MX_UART7_Init();
 80040c6:	f000 ff83 	bl	8004fd0 <MX_UART7_Init>
  MX_SDMMC2_SD_Init();
 80040ca:	f000 f9bb 	bl	8004444 <MX_SDMMC2_SD_Init>
  MX_RTC_Init();
 80040ce:	f000 f943 	bl	8004358 <MX_RTC_Init>
  MX_ADC1_Init();
 80040d2:	f7ff f95b 	bl	800338c <MX_ADC1_Init>
  MX_ADC2_Init();
 80040d6:	f7ff f9ab 	bl	8003430 <MX_ADC2_Init>
  MX_ADC3_Init();
 80040da:	f7ff f9fb 	bl	80034d4 <MX_ADC3_Init>
  MX_CAN1_Init();
 80040de:	f7ff fb1d 	bl	800371c <MX_CAN1_Init>
  MX_CAN2_Init();
 80040e2:	f7ff fb4f 	bl	8003784 <MX_CAN2_Init>
  MX_I2C3_Init();
 80040e6:	f7ff fd35 	bl	8003b54 <MX_I2C3_Init>
  MX_I2C4_Init();
 80040ea:	f7ff fd73 	bl	8003bd4 <MX_I2C4_Init>
  MX_TIM3_Init();
 80040ee:	f000 fdb1 	bl	8004c54 <MX_TIM3_Init>
  MX_TIM4_Init();
 80040f2:	f000 fe3d 	bl	8004d70 <MX_TIM4_Init>
  MX_TIM14_Init();
 80040f6:	f000 fead 	bl	8004e54 <MX_TIM14_Init>

  FATFS fileSystem;

  RTC_TimeTypeDef time;
  RTC_DateTypeDef date;
  statusRegister.checkTime = SENSOR_ALL_CHECK_TIME;
 80040fa:	4b33      	ldr	r3, [pc, #204]	; (80041c8 <main+0x12c>)
 80040fc:	f242 7210 	movw	r2, #10000	; 0x2710
 8004100:	809a      	strh	r2, [r3, #4]
  HAL_TIM_Base_Start_IT(&htim14);
 8004102:	4832      	ldr	r0, [pc, #200]	; (80041cc <main+0x130>)
 8004104:	f006 fc40 	bl	800a988 <HAL_TIM_Base_Start_IT>
  HAL_Delay(3000);
 8004108:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800410c:	f001 f8c8 	bl	80052a0 <HAL_Delay>
  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8004110:	4b2f      	ldr	r3, [pc, #188]	; (80041d0 <main+0x134>)
 8004112:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004116:	f103 0310 	add.w	r3, r3, #16
 800411a:	443b      	add	r3, r7
 800411c:	2200      	movs	r2, #0
 800411e:	4619      	mov	r1, r3
 8004120:	482c      	ldr	r0, [pc, #176]	; (80041d4 <main+0x138>)
 8004122:	f004 ff5f 	bl	8008fe4 <HAL_RTC_GetDate>
  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8004126:	4b2c      	ldr	r3, [pc, #176]	; (80041d8 <main+0x13c>)
 8004128:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800412c:	f103 0310 	add.w	r3, r3, #16
 8004130:	443b      	add	r3, r7
 8004132:	2200      	movs	r2, #0
 8004134:	4619      	mov	r1, r3
 8004136:	4827      	ldr	r0, [pc, #156]	; (80041d4 <main+0x138>)
 8004138:	f004 fe4e 	bl	8008dd8 <HAL_RTC_GetTime>
  printf("Aktualny czas: %02d:%02d:%02d\n", time.Hours, time.Minutes, time.Seconds);
 800413c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004140:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 8004144:	4619      	mov	r1, r3
 8004146:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800414a:	f813 3c4b 	ldrb.w	r3, [r3, #-75]
 800414e:	461a      	mov	r2, r3
 8004150:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004154:	f813 3c4a 	ldrb.w	r3, [r3, #-74]
 8004158:	4820      	ldr	r0, [pc, #128]	; (80041dc <main+0x140>)
 800415a:	f00c fc35 	bl	80109c8 <iprintf>

  HAL_Delay(200);
 800415e:	20c8      	movs	r0, #200	; 0xc8
 8004160:	f001 f89e 	bl	80052a0 <HAL_Delay>


  HAL_Delay(1000);
 8004164:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004168:	f001 f89a 	bl	80052a0 <HAL_Delay>
  initializeSensors();
 800416c:	f7ff ff1e 	bl	8003fac <initializeSensors>
  initSDCard(&fileSystem);
 8004170:	4b1b      	ldr	r3, [pc, #108]	; (80041e0 <main+0x144>)
 8004172:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8004176:	f103 0310 	add.w	r3, r3, #16
 800417a:	443b      	add	r3, r7
 800417c:	4618      	mov	r0, r3
 800417e:	f7fe fef9 	bl	8002f74 <initSDCard>
  printStatusRegister();
 8004182:	f7ff fed7 	bl	8003f34 <printStatusRegister>

  openAllFiles();
 8004186:	f7fe ff1d 	bl	8002fc4 <openAllFiles>

  HAL_TIM_Base_Start(&htim3);
 800418a:	4816      	ldr	r0, [pc, #88]	; (80041e4 <main+0x148>)
 800418c:	f006 fb8c 	bl	800a8a8 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8004190:	2100      	movs	r1, #0
 8004192:	4814      	ldr	r0, [pc, #80]	; (80041e4 <main+0x148>)
 8004194:	f006 fcd2 	bl	800ab3c <HAL_TIM_IC_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (captured_value != 0) {
 8004198:	4b13      	ldr	r3, [pc, #76]	; (80041e8 <main+0x14c>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d008      	beq.n	80041b2 <main+0x116>
		  printf("value = %lu\n", captured_value);
 80041a0:	4b11      	ldr	r3, [pc, #68]	; (80041e8 <main+0x14c>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4619      	mov	r1, r3
 80041a6:	4811      	ldr	r0, [pc, #68]	; (80041ec <main+0x150>)
 80041a8:	f00c fc0e 	bl	80109c8 <iprintf>
		  captured_value = 0;
 80041ac:	4b0e      	ldr	r3, [pc, #56]	; (80041e8 <main+0x14c>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	601a      	str	r2, [r3, #0]
	  }


	  if(!gyro.dataReady)
 80041b2:	4b0f      	ldr	r3, [pc, #60]	; (80041f0 <main+0x154>)
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1ee      	bne.n	8004198 <main+0xfc>
	  {
		  imu_9dof_get_data(&gyro.data);
 80041ba:	480e      	ldr	r0, [pc, #56]	; (80041f4 <main+0x158>)
 80041bc:	f000 fb18 	bl	80047f0 <imu_9dof_get_data>
	  	  saveGyroData(&gyro);
 80041c0:	480b      	ldr	r0, [pc, #44]	; (80041f0 <main+0x154>)
 80041c2:	f7ff f827 	bl	8003214 <saveGyroData>
	  if (captured_value != 0) {
 80041c6:	e7e7      	b.n	8004198 <main+0xfc>
 80041c8:	20000480 	.word	0x20000480
 80041cc:	20002cb0 	.word	0x20002cb0
 80041d0:	ffffefb0 	.word	0xffffefb0
 80041d4:	2000048c 	.word	0x2000048c
 80041d8:	ffffefb4 	.word	0xffffefb4
 80041dc:	08014b88 	.word	0x08014b88
 80041e0:	ffffefcc 	.word	0xffffefcc
 80041e4:	20002c18 	.word	0x20002c18
 80041e8:	20000488 	.word	0x20000488
 80041ec:	08014ba8 	.word	0x08014ba8
 80041f0:	200005f0 	.word	0x200005f0
 80041f4:	20000618 	.word	0x20000618

080041f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b0b8      	sub	sp, #224	; 0xe0
 80041fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80041fe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004202:	2234      	movs	r2, #52	; 0x34
 8004204:	2100      	movs	r1, #0
 8004206:	4618      	mov	r0, r3
 8004208:	f00b fcae 	bl	800fb68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800420c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004210:	2200      	movs	r2, #0
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	605a      	str	r2, [r3, #4]
 8004216:	609a      	str	r2, [r3, #8]
 8004218:	60da      	str	r2, [r3, #12]
 800421a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800421c:	f107 0308 	add.w	r3, r7, #8
 8004220:	2290      	movs	r2, #144	; 0x90
 8004222:	2100      	movs	r1, #0
 8004224:	4618      	mov	r0, r3
 8004226:	f00b fc9f 	bl	800fb68 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800422a:	f003 fbb9 	bl	80079a0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800422e:	4b44      	ldr	r3, [pc, #272]	; (8004340 <SystemClock_Config+0x148>)
 8004230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004232:	4a43      	ldr	r2, [pc, #268]	; (8004340 <SystemClock_Config+0x148>)
 8004234:	f023 0318 	bic.w	r3, r3, #24
 8004238:	6713      	str	r3, [r2, #112]	; 0x70
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800423a:	4b41      	ldr	r3, [pc, #260]	; (8004340 <SystemClock_Config+0x148>)
 800423c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423e:	4a40      	ldr	r2, [pc, #256]	; (8004340 <SystemClock_Config+0x148>)
 8004240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004244:	6413      	str	r3, [r2, #64]	; 0x40
 8004246:	4b3e      	ldr	r3, [pc, #248]	; (8004340 <SystemClock_Config+0x148>)
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800424e:	607b      	str	r3, [r7, #4]
 8004250:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004252:	4b3c      	ldr	r3, [pc, #240]	; (8004344 <SystemClock_Config+0x14c>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800425a:	4a3a      	ldr	r2, [pc, #232]	; (8004344 <SystemClock_Config+0x14c>)
 800425c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	4b38      	ldr	r3, [pc, #224]	; (8004344 <SystemClock_Config+0x14c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800426a:	603b      	str	r3, [r7, #0]
 800426c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800426e:	2305      	movs	r3, #5
 8004270:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004274:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004278:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800427c:	2301      	movs	r3, #1
 800427e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004282:	2302      	movs	r3, #2
 8004284:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004288:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800428c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8004290:	2319      	movs	r3, #25
 8004292:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 192;
 8004296:	23c0      	movs	r3, #192	; 0xc0
 8004298:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800429c:	2306      	movs	r3, #6
 800429e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80042a2:	2304      	movs	r3, #4
 80042a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80042a8:	2302      	movs	r3, #2
 80042aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80042ae:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80042b2:	4618      	mov	r0, r3
 80042b4:	f003 fb84 	bl	80079c0 <HAL_RCC_OscConfig>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80042be:	f000 f845 	bl	800434c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80042c2:	230f      	movs	r3, #15
 80042c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80042c8:	2302      	movs	r3, #2
 80042ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80042ce:	2300      	movs	r3, #0
 80042d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80042d4:	2300      	movs	r3, #0
 80042d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80042da:	2300      	movs	r3, #0
 80042dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80042e0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80042e4:	2101      	movs	r1, #1
 80042e6:	4618      	mov	r0, r3
 80042e8:	f003 fe18 	bl	8007f1c <HAL_RCC_ClockConfig>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 80042f2:	f000 f82b 	bl	800434c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 80042f6:	4b14      	ldr	r3, [pc, #80]	; (8004348 <SystemClock_Config+0x150>)
 80042f8:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_I2C4|RCC_PERIPHCLK_SDMMC2
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80042fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042fe:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004300:	2300      	movs	r3, #0
 8004302:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8004304:	2300      	movs	r3, #0
 8004306:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004308:	2300      	movs	r3, #0
 800430a:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800430c:	2300      	movs	r3, #0
 800430e:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8004310:	2300      	movs	r3, #0
 8004312:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8004314:	2300      	movs	r3, #0
 8004316:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8004318:	2300      	movs	r3, #0
 800431a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc2ClockSelection = RCC_SDMMC2CLKSOURCE_CLK48;
 800431e:	2300      	movs	r3, #0
 8004320:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004324:	f107 0308 	add.w	r3, r7, #8
 8004328:	4618      	mov	r0, r3
 800432a:	f003 ffdd 	bl	80082e8 <HAL_RCCEx_PeriphCLKConfig>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <SystemClock_Config+0x140>
  {
    Error_Handler();
 8004334:	f000 f80a 	bl	800434c <Error_Handler>
  }
}
 8004338:	bf00      	nop
 800433a:	37e0      	adds	r7, #224	; 0xe0
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	40023800 	.word	0x40023800
 8004344:	40007000 	.word	0x40007000
 8004348:	0423d120 	.word	0x0423d120

0800434c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800434c:	b480      	push	{r7}
 800434e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004350:	b672      	cpsid	i
}
 8004352:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004354:	e7fe      	b.n	8004354 <Error_Handler+0x8>
	...

08004358 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b088      	sub	sp, #32
 800435c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800435e:	f107 0308 	add.w	r3, r7, #8
 8004362:	2200      	movs	r2, #0
 8004364:	601a      	str	r2, [r3, #0]
 8004366:	605a      	str	r2, [r3, #4]
 8004368:	609a      	str	r2, [r3, #8]
 800436a:	60da      	str	r2, [r3, #12]
 800436c:	611a      	str	r2, [r3, #16]
 800436e:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8004370:	2300      	movs	r3, #0
 8004372:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004374:	4b24      	ldr	r3, [pc, #144]	; (8004408 <MX_RTC_Init+0xb0>)
 8004376:	4a25      	ldr	r2, [pc, #148]	; (800440c <MX_RTC_Init+0xb4>)
 8004378:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800437a:	4b23      	ldr	r3, [pc, #140]	; (8004408 <MX_RTC_Init+0xb0>)
 800437c:	2200      	movs	r2, #0
 800437e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004380:	4b21      	ldr	r3, [pc, #132]	; (8004408 <MX_RTC_Init+0xb0>)
 8004382:	227f      	movs	r2, #127	; 0x7f
 8004384:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004386:	4b20      	ldr	r3, [pc, #128]	; (8004408 <MX_RTC_Init+0xb0>)
 8004388:	22ff      	movs	r2, #255	; 0xff
 800438a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800438c:	4b1e      	ldr	r3, [pc, #120]	; (8004408 <MX_RTC_Init+0xb0>)
 800438e:	2200      	movs	r2, #0
 8004390:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004392:	4b1d      	ldr	r3, [pc, #116]	; (8004408 <MX_RTC_Init+0xb0>)
 8004394:	2200      	movs	r2, #0
 8004396:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004398:	4b1b      	ldr	r3, [pc, #108]	; (8004408 <MX_RTC_Init+0xb0>)
 800439a:	2200      	movs	r2, #0
 800439c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800439e:	481a      	ldr	r0, [pc, #104]	; (8004408 <MX_RTC_Init+0xb0>)
 80043a0:	f004 fbca 	bl	8008b38 <HAL_RTC_Init>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <MX_RTC_Init+0x56>
  {
    Error_Handler();
 80043aa:	f7ff ffcf 	bl	800434c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80043ae:	2300      	movs	r3, #0
 80043b0:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 80043b2:	2300      	movs	r3, #0
 80043b4:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 80043b6:	2300      	movs	r3, #0
 80043b8:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80043ba:	2300      	movs	r3, #0
 80043bc:	61bb      	str	r3, [r7, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80043be:	2300      	movs	r3, #0
 80043c0:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80043c2:	f107 0308 	add.w	r3, r7, #8
 80043c6:	2201      	movs	r2, #1
 80043c8:	4619      	mov	r1, r3
 80043ca:	480f      	ldr	r0, [pc, #60]	; (8004408 <MX_RTC_Init+0xb0>)
 80043cc:	f004 fc46 	bl	8008c5c <HAL_RTC_SetTime>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80043d6:	f7ff ffb9 	bl	800434c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80043da:	2301      	movs	r3, #1
 80043dc:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 80043de:	2301      	movs	r3, #1
 80043e0:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 80043e2:	2301      	movs	r3, #1
 80043e4:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 80043e6:	2300      	movs	r3, #0
 80043e8:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80043ea:	1d3b      	adds	r3, r7, #4
 80043ec:	2201      	movs	r2, #1
 80043ee:	4619      	mov	r1, r3
 80043f0:	4805      	ldr	r0, [pc, #20]	; (8004408 <MX_RTC_Init+0xb0>)
 80043f2:	f004 fd4f 	bl	8008e94 <HAL_RTC_SetDate>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d001      	beq.n	8004400 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80043fc:	f7ff ffa6 	bl	800434c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004400:	bf00      	nop
 8004402:	3720      	adds	r7, #32
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	2000048c 	.word	0x2000048c
 800440c:	40002800 	.word	0x40002800

08004410 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a07      	ldr	r2, [pc, #28]	; (800443c <HAL_RTC_MspInit+0x2c>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d105      	bne.n	800442e <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004422:	4b07      	ldr	r3, [pc, #28]	; (8004440 <HAL_RTC_MspInit+0x30>)
 8004424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004426:	4a06      	ldr	r2, [pc, #24]	; (8004440 <HAL_RTC_MspInit+0x30>)
 8004428:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800442c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800442e:	bf00      	nop
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	40002800 	.word	0x40002800
 8004440:	40023800 	.word	0x40023800

08004444 <MX_SDMMC2_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc2_tx;

/* SDMMC2 init function */

void MX_SDMMC2_SD_Init(void)
{
 8004444:	b480      	push	{r7}
 8004446:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8004448:	4b0c      	ldr	r3, [pc, #48]	; (800447c <MX_SDMMC2_SD_Init+0x38>)
 800444a:	4a0d      	ldr	r2, [pc, #52]	; (8004480 <MX_SDMMC2_SD_Init+0x3c>)
 800444c:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800444e:	4b0b      	ldr	r3, [pc, #44]	; (800447c <MX_SDMMC2_SD_Init+0x38>)
 8004450:	2200      	movs	r2, #0
 8004452:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8004454:	4b09      	ldr	r3, [pc, #36]	; (800447c <MX_SDMMC2_SD_Init+0x38>)
 8004456:	2200      	movs	r2, #0
 8004458:	609a      	str	r2, [r3, #8]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800445a:	4b08      	ldr	r3, [pc, #32]	; (800447c <MX_SDMMC2_SD_Init+0x38>)
 800445c:	2200      	movs	r2, #0
 800445e:	60da      	str	r2, [r3, #12]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8004460:	4b06      	ldr	r3, [pc, #24]	; (800447c <MX_SDMMC2_SD_Init+0x38>)
 8004462:	2200      	movs	r2, #0
 8004464:	611a      	str	r2, [r3, #16]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004466:	4b05      	ldr	r3, [pc, #20]	; (800447c <MX_SDMMC2_SD_Init+0x38>)
 8004468:	2200      	movs	r2, #0
 800446a:	615a      	str	r2, [r3, #20]
  hsd2.Init.ClockDiv = 0;
 800446c:	4b03      	ldr	r3, [pc, #12]	; (800447c <MX_SDMMC2_SD_Init+0x38>)
 800446e:	2200      	movs	r2, #0
 8004470:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8004472:	bf00      	nop
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr
 800447c:	200004ac 	.word	0x200004ac
 8004480:	40011c00 	.word	0x40011c00

08004484 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b08a      	sub	sp, #40	; 0x28
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800448c:	f107 0314 	add.w	r3, r7, #20
 8004490:	2200      	movs	r2, #0
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	605a      	str	r2, [r3, #4]
 8004496:	609a      	str	r2, [r3, #8]
 8004498:	60da      	str	r2, [r3, #12]
 800449a:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC2)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a6d      	ldr	r2, [pc, #436]	; (8004658 <HAL_SD_MspInit+0x1d4>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	f040 80d4 	bne.w	8004650 <HAL_SD_MspInit+0x1cc>
  {
  /* USER CODE BEGIN SDMMC2_MspInit 0 */

  /* USER CODE END SDMMC2_MspInit 0 */
    /* SDMMC2 clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 80044a8:	4b6c      	ldr	r3, [pc, #432]	; (800465c <HAL_SD_MspInit+0x1d8>)
 80044aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ac:	4a6b      	ldr	r2, [pc, #428]	; (800465c <HAL_SD_MspInit+0x1d8>)
 80044ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044b2:	6453      	str	r3, [r2, #68]	; 0x44
 80044b4:	4b69      	ldr	r3, [pc, #420]	; (800465c <HAL_SD_MspInit+0x1d8>)
 80044b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044bc:	613b      	str	r3, [r7, #16]
 80044be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80044c0:	4b66      	ldr	r3, [pc, #408]	; (800465c <HAL_SD_MspInit+0x1d8>)
 80044c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c4:	4a65      	ldr	r2, [pc, #404]	; (800465c <HAL_SD_MspInit+0x1d8>)
 80044c6:	f043 0308 	orr.w	r3, r3, #8
 80044ca:	6313      	str	r3, [r2, #48]	; 0x30
 80044cc:	4b63      	ldr	r3, [pc, #396]	; (800465c <HAL_SD_MspInit+0x1d8>)
 80044ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d0:	f003 0308 	and.w	r3, r3, #8
 80044d4:	60fb      	str	r3, [r7, #12]
 80044d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80044d8:	4b60      	ldr	r3, [pc, #384]	; (800465c <HAL_SD_MspInit+0x1d8>)
 80044da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044dc:	4a5f      	ldr	r2, [pc, #380]	; (800465c <HAL_SD_MspInit+0x1d8>)
 80044de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044e2:	6313      	str	r3, [r2, #48]	; 0x30
 80044e4:	4b5d      	ldr	r3, [pc, #372]	; (800465c <HAL_SD_MspInit+0x1d8>)
 80044e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ec:	60bb      	str	r3, [r7, #8]
 80044ee:	68bb      	ldr	r3, [r7, #8]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80044f0:	23c0      	movs	r3, #192	; 0xc0
 80044f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044f4:	2302      	movs	r3, #2
 80044f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f8:	2300      	movs	r3, #0
 80044fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044fc:	2303      	movs	r3, #3
 80044fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8004500:	230b      	movs	r3, #11
 8004502:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004504:	f107 0314 	add.w	r3, r7, #20
 8004508:	4619      	mov	r1, r3
 800450a:	4855      	ldr	r0, [pc, #340]	; (8004660 <HAL_SD_MspInit+0x1dc>)
 800450c:	f001 ff34 	bl	8006378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8004510:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
 8004514:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004516:	2302      	movs	r3, #2
 8004518:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800451a:	2300      	movs	r3, #0
 800451c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800451e:	2303      	movs	r3, #3
 8004520:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8004522:	230b      	movs	r3, #11
 8004524:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004526:	f107 0314 	add.w	r3, r7, #20
 800452a:	4619      	mov	r1, r3
 800452c:	484d      	ldr	r0, [pc, #308]	; (8004664 <HAL_SD_MspInit+0x1e0>)
 800452e:	f001 ff23 	bl	8006378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004532:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004536:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004538:	2302      	movs	r3, #2
 800453a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800453c:	2300      	movs	r3, #0
 800453e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004540:	2303      	movs	r3, #3
 8004542:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8004544:	230a      	movs	r3, #10
 8004546:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004548:	f107 0314 	add.w	r3, r7, #20
 800454c:	4619      	mov	r1, r3
 800454e:	4845      	ldr	r0, [pc, #276]	; (8004664 <HAL_SD_MspInit+0x1e0>)
 8004550:	f001 ff12 	bl	8006378 <HAL_GPIO_Init>

    /* SDMMC2 DMA Init */
    /* SDMMC2_RX Init */
    hdma_sdmmc2_rx.Instance = DMA2_Stream0;
 8004554:	4b44      	ldr	r3, [pc, #272]	; (8004668 <HAL_SD_MspInit+0x1e4>)
 8004556:	4a45      	ldr	r2, [pc, #276]	; (800466c <HAL_SD_MspInit+0x1e8>)
 8004558:	601a      	str	r2, [r3, #0]
    hdma_sdmmc2_rx.Init.Channel = DMA_CHANNEL_11;
 800455a:	4b43      	ldr	r3, [pc, #268]	; (8004668 <HAL_SD_MspInit+0x1e4>)
 800455c:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 8004560:	605a      	str	r2, [r3, #4]
    hdma_sdmmc2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004562:	4b41      	ldr	r3, [pc, #260]	; (8004668 <HAL_SD_MspInit+0x1e4>)
 8004564:	2200      	movs	r2, #0
 8004566:	609a      	str	r2, [r3, #8]
    hdma_sdmmc2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004568:	4b3f      	ldr	r3, [pc, #252]	; (8004668 <HAL_SD_MspInit+0x1e4>)
 800456a:	2200      	movs	r2, #0
 800456c:	60da      	str	r2, [r3, #12]
    hdma_sdmmc2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800456e:	4b3e      	ldr	r3, [pc, #248]	; (8004668 <HAL_SD_MspInit+0x1e4>)
 8004570:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004574:	611a      	str	r2, [r3, #16]
    hdma_sdmmc2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004576:	4b3c      	ldr	r3, [pc, #240]	; (8004668 <HAL_SD_MspInit+0x1e4>)
 8004578:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800457c:	615a      	str	r2, [r3, #20]
    hdma_sdmmc2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800457e:	4b3a      	ldr	r3, [pc, #232]	; (8004668 <HAL_SD_MspInit+0x1e4>)
 8004580:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004584:	619a      	str	r2, [r3, #24]
    hdma_sdmmc2_rx.Init.Mode = DMA_PFCTRL;
 8004586:	4b38      	ldr	r3, [pc, #224]	; (8004668 <HAL_SD_MspInit+0x1e4>)
 8004588:	2220      	movs	r2, #32
 800458a:	61da      	str	r2, [r3, #28]
    hdma_sdmmc2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800458c:	4b36      	ldr	r3, [pc, #216]	; (8004668 <HAL_SD_MspInit+0x1e4>)
 800458e:	2200      	movs	r2, #0
 8004590:	621a      	str	r2, [r3, #32]
    hdma_sdmmc2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004592:	4b35      	ldr	r3, [pc, #212]	; (8004668 <HAL_SD_MspInit+0x1e4>)
 8004594:	2204      	movs	r2, #4
 8004596:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004598:	4b33      	ldr	r3, [pc, #204]	; (8004668 <HAL_SD_MspInit+0x1e4>)
 800459a:	2203      	movs	r2, #3
 800459c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc2_rx.Init.MemBurst = DMA_MBURST_INC4;
 800459e:	4b32      	ldr	r3, [pc, #200]	; (8004668 <HAL_SD_MspInit+0x1e4>)
 80045a0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80045a4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc2_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80045a6:	4b30      	ldr	r3, [pc, #192]	; (8004668 <HAL_SD_MspInit+0x1e4>)
 80045a8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80045ac:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc2_rx) != HAL_OK)
 80045ae:	482e      	ldr	r0, [pc, #184]	; (8004668 <HAL_SD_MspInit+0x1e4>)
 80045b0:	f001 fb3c 	bl	8005c2c <HAL_DMA_Init>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <HAL_SD_MspInit+0x13a>
    {
      Error_Handler();
 80045ba:	f7ff fec7 	bl	800434c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc2_rx);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a29      	ldr	r2, [pc, #164]	; (8004668 <HAL_SD_MspInit+0x1e4>)
 80045c2:	641a      	str	r2, [r3, #64]	; 0x40
 80045c4:	4a28      	ldr	r2, [pc, #160]	; (8004668 <HAL_SD_MspInit+0x1e4>)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC2_TX Init */
    hdma_sdmmc2_tx.Instance = DMA2_Stream5;
 80045ca:	4b29      	ldr	r3, [pc, #164]	; (8004670 <HAL_SD_MspInit+0x1ec>)
 80045cc:	4a29      	ldr	r2, [pc, #164]	; (8004674 <HAL_SD_MspInit+0x1f0>)
 80045ce:	601a      	str	r2, [r3, #0]
    hdma_sdmmc2_tx.Init.Channel = DMA_CHANNEL_11;
 80045d0:	4b27      	ldr	r3, [pc, #156]	; (8004670 <HAL_SD_MspInit+0x1ec>)
 80045d2:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 80045d6:	605a      	str	r2, [r3, #4]
    hdma_sdmmc2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80045d8:	4b25      	ldr	r3, [pc, #148]	; (8004670 <HAL_SD_MspInit+0x1ec>)
 80045da:	2240      	movs	r2, #64	; 0x40
 80045dc:	609a      	str	r2, [r3, #8]
    hdma_sdmmc2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80045de:	4b24      	ldr	r3, [pc, #144]	; (8004670 <HAL_SD_MspInit+0x1ec>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	60da      	str	r2, [r3, #12]
    hdma_sdmmc2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80045e4:	4b22      	ldr	r3, [pc, #136]	; (8004670 <HAL_SD_MspInit+0x1ec>)
 80045e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045ea:	611a      	str	r2, [r3, #16]
    hdma_sdmmc2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80045ec:	4b20      	ldr	r3, [pc, #128]	; (8004670 <HAL_SD_MspInit+0x1ec>)
 80045ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80045f2:	615a      	str	r2, [r3, #20]
    hdma_sdmmc2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80045f4:	4b1e      	ldr	r3, [pc, #120]	; (8004670 <HAL_SD_MspInit+0x1ec>)
 80045f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80045fa:	619a      	str	r2, [r3, #24]
    hdma_sdmmc2_tx.Init.Mode = DMA_PFCTRL;
 80045fc:	4b1c      	ldr	r3, [pc, #112]	; (8004670 <HAL_SD_MspInit+0x1ec>)
 80045fe:	2220      	movs	r2, #32
 8004600:	61da      	str	r2, [r3, #28]
    hdma_sdmmc2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004602:	4b1b      	ldr	r3, [pc, #108]	; (8004670 <HAL_SD_MspInit+0x1ec>)
 8004604:	2200      	movs	r2, #0
 8004606:	621a      	str	r2, [r3, #32]
    hdma_sdmmc2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004608:	4b19      	ldr	r3, [pc, #100]	; (8004670 <HAL_SD_MspInit+0x1ec>)
 800460a:	2204      	movs	r2, #4
 800460c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800460e:	4b18      	ldr	r3, [pc, #96]	; (8004670 <HAL_SD_MspInit+0x1ec>)
 8004610:	2203      	movs	r2, #3
 8004612:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc2_tx.Init.MemBurst = DMA_MBURST_INC4;
 8004614:	4b16      	ldr	r3, [pc, #88]	; (8004670 <HAL_SD_MspInit+0x1ec>)
 8004616:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800461a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc2_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800461c:	4b14      	ldr	r3, [pc, #80]	; (8004670 <HAL_SD_MspInit+0x1ec>)
 800461e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004622:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc2_tx) != HAL_OK)
 8004624:	4812      	ldr	r0, [pc, #72]	; (8004670 <HAL_SD_MspInit+0x1ec>)
 8004626:	f001 fb01 	bl	8005c2c <HAL_DMA_Init>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d001      	beq.n	8004634 <HAL_SD_MspInit+0x1b0>
    {
      Error_Handler();
 8004630:	f7ff fe8c 	bl	800434c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc2_tx);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a0e      	ldr	r2, [pc, #56]	; (8004670 <HAL_SD_MspInit+0x1ec>)
 8004638:	63da      	str	r2, [r3, #60]	; 0x3c
 800463a:	4a0d      	ldr	r2, [pc, #52]	; (8004670 <HAL_SD_MspInit+0x1ec>)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 8004640:	2200      	movs	r2, #0
 8004642:	2100      	movs	r1, #0
 8004644:	2067      	movs	r0, #103	; 0x67
 8004646:	f001 faba 	bl	8005bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 800464a:	2067      	movs	r0, #103	; 0x67
 800464c:	f001 fad3 	bl	8005bf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }
}
 8004650:	bf00      	nop
 8004652:	3728      	adds	r7, #40	; 0x28
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	40011c00 	.word	0x40011c00
 800465c:	40023800 	.word	0x40023800
 8004660:	40020c00 	.word	0x40020c00
 8004664:	40021800 	.word	0x40021800
 8004668:	20000530 	.word	0x20000530
 800466c:	40026410 	.word	0x40026410
 8004670:	20000590 	.word	0x20000590
 8004674:	40026488 	.word	0x40026488

08004678 <gyroInit>:

/* *******GYRO SECTION  ********/
GyroSensor gyro;
//GYRO FUNCS
void gyroInit(GyroSensor * gyro)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
	int result = MPU9250_Init();
 8004680:	f7fe fada 	bl	8002c38 <MPU9250_Init>
 8004684:	4603      	mov	r3, r0
 8004686:	60fb      	str	r3, [r7, #12]
	if(result == 0)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d106      	bne.n	800469c <gyroInit+0x24>
	{
		statusRegister.GYRO = SENSOR_OK;
 800468e:	4a18      	ldr	r2, [pc, #96]	; (80046f0 <gyroInit+0x78>)
 8004690:	8813      	ldrh	r3, [r2, #0]
 8004692:	2101      	movs	r1, #1
 8004694:	f361 1388 	bfi	r3, r1, #6, #3
 8004698:	8013      	strh	r3, [r2, #0]
 800469a:	e004      	b.n	80046a6 <gyroInit+0x2e>
	}else{
		statusRegister.GYRO = SENSOR_INIT_FAIL;
 800469c:	4a14      	ldr	r2, [pc, #80]	; (80046f0 <gyroInit+0x78>)
 800469e:	8813      	ldrh	r3, [r2, #0]
 80046a0:	f443 73e0 	orr.w	r3, r3, #448	; 0x1c0
 80046a4:	8013      	strh	r3, [r2, #0]
	}
	gyro->File = (FIL*)malloc(sizeof(FIL));
 80046a6:	f241 0030 	movw	r0, #4144	; 0x1030
 80046aa:	f00b fa47 	bl	800fb3c <malloc>
 80046ae:	4603      	mov	r3, r0
 80046b0:	461a      	mov	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	601a      	str	r2, [r3, #0]

	RTC_DateTypeDef date;
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80046b6:	f107 0308 	add.w	r3, r7, #8
 80046ba:	2200      	movs	r2, #0
 80046bc:	4619      	mov	r1, r3
 80046be:	480d      	ldr	r0, [pc, #52]	; (80046f4 <gyroInit+0x7c>)
 80046c0:	f004 fc90 	bl	8008fe4 <HAL_RTC_GetDate>
	sprintf(gyro->path,"GYRO%02d%02d.csv",date.Date,date.Month);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	1d18      	adds	r0, r3, #4
 80046c8:	7abb      	ldrb	r3, [r7, #10]
 80046ca:	461a      	mov	r2, r3
 80046cc:	7a7b      	ldrb	r3, [r7, #9]
 80046ce:	490a      	ldr	r1, [pc, #40]	; (80046f8 <gyroInit+0x80>)
 80046d0:	f00c fa34 	bl	8010b3c <siprintf>
	gyro->dataReady = 0;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	619a      	str	r2, [r3, #24]
	gyro->saveRate = GYRODATARATE;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	22fa      	movs	r2, #250	; 0xfa
 80046de:	61da      	str	r2, [r3, #28]
	gyro->timeToNextRead = GYRODATARATE;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	22fa      	movs	r2, #250	; 0xfa
 80046e4:	621a      	str	r2, [r3, #32]
}
 80046e6:	bf00      	nop
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	20000480 	.word	0x20000480
 80046f4:	2000048c 	.word	0x2000048c
 80046f8:	08014bb8 	.word	0x08014bb8
 80046fc:	00000000 	.word	0x00000000

08004700 <imu_9dof_convert>:
void imu_9dof_convert(struct imu_9dof * input, struct imu_9dof_calc * output)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
	output->acc_data_calc[0] = (double) input->acc_data[0] / 16384;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004710:	ee07 3a90 	vmov	s15, r3
 8004714:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004718:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 80047d8 <imu_9dof_convert+0xd8>
 800471c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	ed83 7b00 	vstr	d7, [r3]
	output->acc_data_calc[1] = (double) input->acc_data[1] / 16384;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800472c:	ee07 3a90 	vmov	s15, r3
 8004730:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004734:	ed9f 5b28 	vldr	d5, [pc, #160]	; 80047d8 <imu_9dof_convert+0xd8>
 8004738:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	ed83 7b02 	vstr	d7, [r3, #8]
	output->acc_data_calc[2] = (double) input->acc_data[2] / 16384;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004748:	ee07 3a90 	vmov	s15, r3
 800474c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004750:	ed9f 5b21 	vldr	d5, [pc, #132]	; 80047d8 <imu_9dof_convert+0xd8>
 8004754:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	ed83 7b04 	vstr	d7, [r3, #16]
	output->gyro_data_calc[0] = (double) input->gyro_data[0] * 250 / 32768;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004764:	ee07 3a90 	vmov	s15, r3
 8004768:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800476c:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 80047e0 <imu_9dof_convert+0xe0>
 8004770:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004774:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 80047e8 <imu_9dof_convert+0xe8>
 8004778:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	ed83 7b06 	vstr	d7, [r3, #24]
	output->gyro_data_calc[1] = (double) input->gyro_data[1] * 250 / 32768;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004788:	ee07 3a90 	vmov	s15, r3
 800478c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004790:	ed9f 6b13 	vldr	d6, [pc, #76]	; 80047e0 <imu_9dof_convert+0xe0>
 8004794:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004798:	ed9f 5b13 	vldr	d5, [pc, #76]	; 80047e8 <imu_9dof_convert+0xe8>
 800479c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	ed83 7b08 	vstr	d7, [r3, #32]
	output->gyro_data_calc[2] = (double) input->gyro_data[2] * 250 / 32768;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80047ac:	ee07 3a90 	vmov	s15, r3
 80047b0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80047b4:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 80047e0 <imu_9dof_convert+0xe0>
 80047b8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80047bc:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 80047e8 <imu_9dof_convert+0xe8>
 80047c0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28

}
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	00000000 	.word	0x00000000
 80047dc:	40d00000 	.word	0x40d00000
 80047e0:	00000000 	.word	0x00000000
 80047e4:	406f4000 	.word	0x406f4000
 80047e8:	00000000 	.word	0x00000000
 80047ec:	40e00000 	.word	0x40e00000

080047f0 <imu_9dof_get_data>:

void imu_9dof_get_data(struct imu_9dof_calc * imu_9dof_calculated)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b088      	sub	sp, #32
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
	imu_9dof imu_9dof_data;
    MPU9250_GetData(imu_9dof_data.acc_data, imu_9dof_data.mag_data, imu_9dof_data.gyro_data);
 80047f8:	f107 030c 	add.w	r3, r7, #12
 80047fc:	f103 020c 	add.w	r2, r3, #12
 8004800:	f107 030c 	add.w	r3, r7, #12
 8004804:	1d99      	adds	r1, r3, #6
 8004806:	f107 030c 	add.w	r3, r7, #12
 800480a:	4618      	mov	r0, r3
 800480c:	f7fe fade 	bl	8002dcc <MPU9250_GetData>
    imu_9dof_convert(&imu_9dof_data, imu_9dof_calculated);
 8004810:	f107 030c 	add.w	r3, r7, #12
 8004814:	6879      	ldr	r1, [r7, #4]
 8004816:	4618      	mov	r0, r3
 8004818:	f7ff ff72 	bl	8004700 <imu_9dof_convert>
    gyro.dataReady = 0;
 800481c:	4b03      	ldr	r3, [pc, #12]	; (800482c <imu_9dof_get_data+0x3c>)
 800481e:	2200      	movs	r2, #0
 8004820:	619a      	str	r2, [r3, #24]
}
 8004822:	bf00      	nop
 8004824:	3720      	adds	r7, #32
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	200005f0 	.word	0x200005f0

08004830 <mlxInit>:
MLXSensor MLXLF;
MLXSensor MLXRF;

//MLX FUNCS
int mlxInit(MLXSensor *mlx)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
		static uint16_t eeMLX90640[832];
		static int ID = 1;
		RTC_DateTypeDef date;
		HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8004838:	f107 0308 	add.w	r3, r7, #8
 800483c:	2200      	movs	r2, #0
 800483e:	4619      	mov	r1, r3
 8004840:	484f      	ldr	r0, [pc, #316]	; (8004980 <mlxInit+0x150>)
 8004842:	f004 fbcf 	bl	8008fe4 <HAL_RTC_GetDate>

		sprintf(mlx->path,"MLX%02d%02d.csv",date.Date,date.Month);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	1d18      	adds	r0, r3, #4
 800484a:	7abb      	ldrb	r3, [r7, #10]
 800484c:	461a      	mov	r2, r3
 800484e:	7a7b      	ldrb	r3, [r7, #9]
 8004850:	494c      	ldr	r1, [pc, #304]	; (8004984 <mlxInit+0x154>)
 8004852:	f00c f973 	bl	8010b3c <siprintf>
		mlx->timeToNextRead = MLXDATARATE;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800485c:	621a      	str	r2, [r3, #32]
		mlx->dataReady = 0;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	619a      	str	r2, [r3, #24]
	  	mlx->emissivity = 0.95;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800486a:	f603 63f8 	addw	r3, r3, #3832	; 0xef8
 800486e:	4a46      	ldr	r2, [pc, #280]	; (8004988 <mlxInit+0x158>)
 8004870:	601a      	str	r2, [r3, #0]
	  	if(ID == 0)
 8004872:	4b46      	ldr	r3, [pc, #280]	; (800498c <mlxInit+0x15c>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d108      	bne.n	800488c <mlxInit+0x5c>
	  	{
	  		mlx->ID = ID;
 800487a:	4b44      	ldr	r3, [pc, #272]	; (800498c <mlxInit+0x15c>)
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	625a      	str	r2, [r3, #36]	; 0x24
			ID++;
 8004882:	4b42      	ldr	r3, [pc, #264]	; (800498c <mlxInit+0x15c>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	3301      	adds	r3, #1
 8004888:	4a40      	ldr	r2, [pc, #256]	; (800498c <mlxInit+0x15c>)
 800488a:	6013      	str	r3, [r2, #0]
	  	}



		MLX90640_SetRefreshRate(MLX90640_ADDR, RefreshRate);
 800488c:	2104      	movs	r1, #4
 800488e:	2033      	movs	r0, #51	; 0x33
 8004890:	f7fc f8fc 	bl	8000a8c <MLX90640_SetRefreshRate>
	  	MLX90640_SetChessMode(MLX90640_ADDR);
 8004894:	2033      	movs	r0, #51	; 0x33
 8004896:	f7fc f928 	bl	8000aea <MLX90640_SetChessMode>
	    int status = MLX90640_DumpEE(MLX90640_ADDR, eeMLX90640);
 800489a:	493d      	ldr	r1, [pc, #244]	; (8004990 <mlxInit+0x160>)
 800489c:	2033      	movs	r0, #51	; 0x33
 800489e:	f7fc f89d 	bl	80009dc <MLX90640_DumpEE>
 80048a2:	60f8      	str	r0, [r7, #12]
	    if (status != 0){
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d014      	beq.n	80048d4 <mlxInit+0xa4>
	    	if(ID == 1)
 80048aa:	4b38      	ldr	r3, [pc, #224]	; (800498c <mlxInit+0x15c>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d105      	bne.n	80048be <mlxInit+0x8e>
	    	{
	    		statusRegister.MLXLF = SENSOR_INIT_FAIL;
 80048b2:	4a38      	ldr	r2, [pc, #224]	; (8004994 <mlxInit+0x164>)
 80048b4:	7853      	ldrb	r3, [r2, #1]
 80048b6:	f043 030e 	orr.w	r3, r3, #14
 80048ba:	7053      	strb	r3, [r2, #1]
 80048bc:	e008      	b.n	80048d0 <mlxInit+0xa0>
	    	}else if(ID == 2)
 80048be:	4b33      	ldr	r3, [pc, #204]	; (800498c <mlxInit+0x15c>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d104      	bne.n	80048d0 <mlxInit+0xa0>
	    	{
	    		statusRegister.MLXRF = SENSOR_INIT_FAIL;
 80048c6:	4a33      	ldr	r2, [pc, #204]	; (8004994 <mlxInit+0x164>)
 80048c8:	7853      	ldrb	r3, [r2, #1]
 80048ca:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80048ce:	7053      	strb	r3, [r2, #1]
	    	}
	    	return status;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	e050      	b.n	8004976 <mlxInit+0x146>
	    }
	    status = MLX90640_ExtractParameters(eeMLX90640, &mlx->mlx90640);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	3374      	adds	r3, #116	; 0x74
 80048d8:	4619      	mov	r1, r3
 80048da:	482d      	ldr	r0, [pc, #180]	; (8004990 <mlxInit+0x160>)
 80048dc:	f7fc f891 	bl	8000a02 <MLX90640_ExtractParameters>
 80048e0:	60f8      	str	r0, [r7, #12]
	    if (status != 0){
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d014      	beq.n	8004912 <mlxInit+0xe2>
	    	 if(mlx->ID == 1)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d105      	bne.n	80048fc <mlxInit+0xcc>
	    	 {
	    	    statusRegister.MLXLF = SENSOR_INIT_FAIL;
 80048f0:	4a28      	ldr	r2, [pc, #160]	; (8004994 <mlxInit+0x164>)
 80048f2:	7853      	ldrb	r3, [r2, #1]
 80048f4:	f043 030e 	orr.w	r3, r3, #14
 80048f8:	7053      	strb	r3, [r2, #1]
 80048fa:	e008      	b.n	800490e <mlxInit+0xde>
	    	 }else if(mlx->ID == 2)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004900:	2b02      	cmp	r3, #2
 8004902:	d104      	bne.n	800490e <mlxInit+0xde>
	    	 {
	    	    statusRegister.MLXRF = SENSOR_INIT_FAIL;
 8004904:	4a23      	ldr	r2, [pc, #140]	; (8004994 <mlxInit+0x164>)
 8004906:	7853      	ldrb	r3, [r2, #1]
 8004908:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800490c:	7053      	strb	r3, [r2, #1]
	    	 }
	    	 return status;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	e031      	b.n	8004976 <mlxInit+0x146>
	   }


	    if(mlx->ID == 1)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	2b01      	cmp	r3, #1
 8004918:	d116      	bne.n	8004948 <mlxInit+0x118>
	    {
	    	mlx->File = (FIL*)malloc(sizeof(FIL));
 800491a:	f241 0030 	movw	r0, #4144	; 0x1030
 800491e:	f00b f90d 	bl	800fb3c <malloc>
 8004922:	4603      	mov	r3, r0
 8004924:	461a      	mov	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	601a      	str	r2, [r3, #0]
	    	mlx->i2c = leftFrontWheelI2C;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a1a      	ldr	r2, [pc, #104]	; (8004998 <mlxInit+0x168>)
 800492e:	3328      	adds	r3, #40	; 0x28
 8004930:	4611      	mov	r1, r2
 8004932:	224c      	movs	r2, #76	; 0x4c
 8004934:	4618      	mov	r0, r3
 8004936:	f00b f909 	bl	800fb4c <memcpy>
	    	statusRegister.MLXLF = SENSOR_OK;
 800493a:	4a16      	ldr	r2, [pc, #88]	; (8004994 <mlxInit+0x164>)
 800493c:	7853      	ldrb	r3, [r2, #1]
 800493e:	2101      	movs	r1, #1
 8004940:	f361 0343 	bfi	r3, r1, #1, #3
 8004944:	7053      	strb	r3, [r2, #1]
 8004946:	e015      	b.n	8004974 <mlxInit+0x144>
	    }else if(mlx->ID == 2)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494c:	2b02      	cmp	r3, #2
 800494e:	d111      	bne.n	8004974 <mlxInit+0x144>
	    {
	    	mlx->i2c = rightFrontWheelI2C;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a12      	ldr	r2, [pc, #72]	; (800499c <mlxInit+0x16c>)
 8004954:	3328      	adds	r3, #40	; 0x28
 8004956:	4611      	mov	r1, r2
 8004958:	224c      	movs	r2, #76	; 0x4c
 800495a:	4618      	mov	r0, r3
 800495c:	f00b f8f6 	bl	800fb4c <memcpy>
	    	mlx->File = MLXLF.File;
 8004960:	4b0f      	ldr	r3, [pc, #60]	; (80049a0 <mlxInit+0x170>)
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	601a      	str	r2, [r3, #0]
	    	statusRegister.MLXRF = SENSOR_OK;
 8004968:	4a0a      	ldr	r2, [pc, #40]	; (8004994 <mlxInit+0x164>)
 800496a:	7853      	ldrb	r3, [r2, #1]
 800496c:	2101      	movs	r1, #1
 800496e:	f361 1306 	bfi	r3, r1, #4, #3
 8004972:	7053      	strb	r3, [r2, #1]
	    }

	    return 0;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	2000048c 	.word	0x2000048c
 8004984:	08014bcc 	.word	0x08014bcc
 8004988:	3f733333 	.word	0x3f733333
 800498c:	20000000 	.word	0x20000000
 8004990:	20002594 	.word	0x20002594
 8004994:	20000480 	.word	0x20000480
 8004998:	20000350 	.word	0x20000350
 800499c:	2000039c 	.word	0x2000039c
 80049a0:	20000698 	.word	0x20000698

080049a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80049aa:	4b0f      	ldr	r3, [pc, #60]	; (80049e8 <HAL_MspInit+0x44>)
 80049ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ae:	4a0e      	ldr	r2, [pc, #56]	; (80049e8 <HAL_MspInit+0x44>)
 80049b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049b4:	6413      	str	r3, [r2, #64]	; 0x40
 80049b6:	4b0c      	ldr	r3, [pc, #48]	; (80049e8 <HAL_MspInit+0x44>)
 80049b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049be:	607b      	str	r3, [r7, #4]
 80049c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049c2:	4b09      	ldr	r3, [pc, #36]	; (80049e8 <HAL_MspInit+0x44>)
 80049c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c6:	4a08      	ldr	r2, [pc, #32]	; (80049e8 <HAL_MspInit+0x44>)
 80049c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049cc:	6453      	str	r3, [r2, #68]	; 0x44
 80049ce:	4b06      	ldr	r3, [pc, #24]	; (80049e8 <HAL_MspInit+0x44>)
 80049d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049d6:	603b      	str	r3, [r7, #0]
 80049d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80049da:	bf00      	nop
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	40023800 	.word	0x40023800

080049ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80049f0:	e7fe      	b.n	80049f0 <NMI_Handler+0x4>

080049f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049f2:	b480      	push	{r7}
 80049f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049f6:	e7fe      	b.n	80049f6 <HardFault_Handler+0x4>

080049f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049f8:	b480      	push	{r7}
 80049fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049fc:	e7fe      	b.n	80049fc <MemManage_Handler+0x4>

080049fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049fe:	b480      	push	{r7}
 8004a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a02:	e7fe      	b.n	8004a02 <BusFault_Handler+0x4>

08004a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a04:	b480      	push	{r7}
 8004a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a08:	e7fe      	b.n	8004a08 <UsageFault_Handler+0x4>

08004a0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a0e:	bf00      	nop
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a1c:	bf00      	nop
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a26:	b480      	push	{r7}
 8004a28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a2a:	bf00      	nop
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a38:	f000 fc12 	bl	8005260 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a3c:	bf00      	nop
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004a44:	4802      	ldr	r0, [pc, #8]	; (8004a50 <TIM3_IRQHandler+0x10>)
 8004a46:	f006 f9c9 	bl	800addc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004a4a:	bf00      	nop
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	20002c18 	.word	0x20002c18

08004a54 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8004a58:	4802      	ldr	r0, [pc, #8]	; (8004a64 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8004a5a:	f006 f9bf 	bl	800addc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004a5e:	bf00      	nop
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	20002cb0 	.word	0x20002cb0

08004a68 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc2_rx);
 8004a6c:	4802      	ldr	r0, [pc, #8]	; (8004a78 <DMA2_Stream0_IRQHandler+0x10>)
 8004a6e:	f001 fa0d 	bl	8005e8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004a72:	bf00      	nop
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	20000530 	.word	0x20000530

08004a7c <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc2_tx);
 8004a80:	4802      	ldr	r0, [pc, #8]	; (8004a8c <DMA2_Stream5_IRQHandler+0x10>)
 8004a82:	f001 fa03 	bl	8005e8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8004a86:	bf00      	nop
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	20000590 	.word	0x20000590

08004a90 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 8004a94:	4802      	ldr	r0, [pc, #8]	; (8004aa0 <SDMMC2_IRQHandler+0x10>)
 8004a96:	f004 fe05 	bl	80096a4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 8004a9a:	bf00      	nop
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	200004ac 	.word	0x200004ac

08004aa4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	af00      	add	r7, sp, #0
	return 1;
 8004aa8:	2301      	movs	r3, #1
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <_kill>:

int _kill(int pid, int sig)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004abe:	f00b f813 	bl	800fae8 <__errno>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2216      	movs	r2, #22
 8004ac6:	601a      	str	r2, [r3, #0]
	return -1;
 8004ac8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3708      	adds	r7, #8
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <_exit>:

void _exit (int status)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004adc:	f04f 31ff 	mov.w	r1, #4294967295
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f7ff ffe7 	bl	8004ab4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004ae6:	e7fe      	b.n	8004ae6 <_exit+0x12>

08004ae8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004af4:	2300      	movs	r3, #0
 8004af6:	617b      	str	r3, [r7, #20]
 8004af8:	e00a      	b.n	8004b10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004afa:	f3af 8000 	nop.w
 8004afe:	4601      	mov	r1, r0
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	1c5a      	adds	r2, r3, #1
 8004b04:	60ba      	str	r2, [r7, #8]
 8004b06:	b2ca      	uxtb	r2, r1
 8004b08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	617b      	str	r3, [r7, #20]
 8004b10:	697a      	ldr	r2, [r7, #20]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	dbf0      	blt.n	8004afa <_read+0x12>
	}

return len;
 8004b18:	687b      	ldr	r3, [r7, #4]
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3718      	adds	r7, #24
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b086      	sub	sp, #24
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	60f8      	str	r0, [r7, #12]
 8004b2a:	60b9      	str	r1, [r7, #8]
 8004b2c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b2e:	2300      	movs	r3, #0
 8004b30:	617b      	str	r3, [r7, #20]
 8004b32:	e009      	b.n	8004b48 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	1c5a      	adds	r2, r3, #1
 8004b38:	60ba      	str	r2, [r7, #8]
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7fe fdcf 	bl	80036e0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	3301      	adds	r3, #1
 8004b46:	617b      	str	r3, [r7, #20]
 8004b48:	697a      	ldr	r2, [r7, #20]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	dbf1      	blt.n	8004b34 <_write+0x12>
	}
	return len;
 8004b50:	687b      	ldr	r3, [r7, #4]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3718      	adds	r7, #24
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <_close>:

int _close(int file)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b083      	sub	sp, #12
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
	return -1;
 8004b62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004b72:	b480      	push	{r7}
 8004b74:	b083      	sub	sp, #12
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
 8004b7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004b82:	605a      	str	r2, [r3, #4]
	return 0;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	370c      	adds	r7, #12
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr

08004b92 <_isatty>:

int _isatty(int file)
{
 8004b92:	b480      	push	{r7}
 8004b94:	b083      	sub	sp, #12
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
	return 1;
 8004b9a:	2301      	movs	r3, #1
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]
	return 0;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3714      	adds	r7, #20
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
	...

08004bc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b086      	sub	sp, #24
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004bcc:	4a14      	ldr	r2, [pc, #80]	; (8004c20 <_sbrk+0x5c>)
 8004bce:	4b15      	ldr	r3, [pc, #84]	; (8004c24 <_sbrk+0x60>)
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004bd8:	4b13      	ldr	r3, [pc, #76]	; (8004c28 <_sbrk+0x64>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d102      	bne.n	8004be6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004be0:	4b11      	ldr	r3, [pc, #68]	; (8004c28 <_sbrk+0x64>)
 8004be2:	4a12      	ldr	r2, [pc, #72]	; (8004c2c <_sbrk+0x68>)
 8004be4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004be6:	4b10      	ldr	r3, [pc, #64]	; (8004c28 <_sbrk+0x64>)
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4413      	add	r3, r2
 8004bee:	693a      	ldr	r2, [r7, #16]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d207      	bcs.n	8004c04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004bf4:	f00a ff78 	bl	800fae8 <__errno>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	220c      	movs	r2, #12
 8004bfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8004c02:	e009      	b.n	8004c18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004c04:	4b08      	ldr	r3, [pc, #32]	; (8004c28 <_sbrk+0x64>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004c0a:	4b07      	ldr	r3, [pc, #28]	; (8004c28 <_sbrk+0x64>)
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4413      	add	r3, r2
 8004c12:	4a05      	ldr	r2, [pc, #20]	; (8004c28 <_sbrk+0x64>)
 8004c14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004c16:	68fb      	ldr	r3, [r7, #12]
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3718      	adds	r7, #24
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	20080000 	.word	0x20080000
 8004c24:	00000400 	.word	0x00000400
 8004c28:	20002c14 	.word	0x20002c14
 8004c2c:	20002e60 	.word	0x20002e60

08004c30 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004c30:	b480      	push	{r7}
 8004c32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c34:	4b06      	ldr	r3, [pc, #24]	; (8004c50 <SystemInit+0x20>)
 8004c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c3a:	4a05      	ldr	r2, [pc, #20]	; (8004c50 <SystemInit+0x20>)
 8004c3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004c44:	bf00      	nop
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	e000ed00 	.word	0xe000ed00

08004c54 <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim14;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b090      	sub	sp, #64	; 0x40
 8004c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004c5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c5e:	2200      	movs	r2, #0
 8004c60:	601a      	str	r2, [r3, #0]
 8004c62:	605a      	str	r2, [r3, #4]
 8004c64:	609a      	str	r2, [r3, #8]
 8004c66:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004c68:	f107 031c 	add.w	r3, r7, #28
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	601a      	str	r2, [r3, #0]
 8004c70:	605a      	str	r2, [r3, #4]
 8004c72:	609a      	str	r2, [r3, #8]
 8004c74:	60da      	str	r2, [r3, #12]
 8004c76:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c78:	f107 0310 	add.w	r3, r7, #16
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	601a      	str	r2, [r3, #0]
 8004c80:	605a      	str	r2, [r3, #4]
 8004c82:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004c84:	463b      	mov	r3, r7
 8004c86:	2200      	movs	r2, #0
 8004c88:	601a      	str	r2, [r3, #0]
 8004c8a:	605a      	str	r2, [r3, #4]
 8004c8c:	609a      	str	r2, [r3, #8]
 8004c8e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004c90:	4b35      	ldr	r3, [pc, #212]	; (8004d68 <MX_TIM3_Init+0x114>)
 8004c92:	4a36      	ldr	r2, [pc, #216]	; (8004d6c <MX_TIM3_Init+0x118>)
 8004c94:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 31999;
 8004c96:	4b34      	ldr	r3, [pc, #208]	; (8004d68 <MX_TIM3_Init+0x114>)
 8004c98:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8004c9c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c9e:	4b32      	ldr	r3, [pc, #200]	; (8004d68 <MX_TIM3_Init+0x114>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004ca4:	4b30      	ldr	r3, [pc, #192]	; (8004d68 <MX_TIM3_Init+0x114>)
 8004ca6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004caa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004cac:	4b2e      	ldr	r3, [pc, #184]	; (8004d68 <MX_TIM3_Init+0x114>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004cb2:	4b2d      	ldr	r3, [pc, #180]	; (8004d68 <MX_TIM3_Init+0x114>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004cb8:	482b      	ldr	r0, [pc, #172]	; (8004d68 <MX_TIM3_Init+0x114>)
 8004cba:	f005 fd9e 	bl	800a7fa <HAL_TIM_Base_Init>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d001      	beq.n	8004cc8 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8004cc4:	f7ff fb42 	bl	800434c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004cc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ccc:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004cce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	4824      	ldr	r0, [pc, #144]	; (8004d68 <MX_TIM3_Init+0x114>)
 8004cd6:	f006 fa3d 	bl	800b154 <HAL_TIM_ConfigClockSource>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d001      	beq.n	8004ce4 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8004ce0:	f7ff fb34 	bl	800434c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8004ce4:	4820      	ldr	r0, [pc, #128]	; (8004d68 <MX_TIM3_Init+0x114>)
 8004ce6:	f005 fec7 	bl	800aa78 <HAL_TIM_IC_Init>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d001      	beq.n	8004cf4 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8004cf0:	f7ff fb2c 	bl	800434c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8004cf4:	2304      	movs	r3, #4
 8004cf6:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8004cf8:	2340      	movs	r3, #64	; 0x40
 8004cfa:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8004d00:	2300      	movs	r3, #0
 8004d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8004d04:	f107 031c 	add.w	r3, r7, #28
 8004d08:	4619      	mov	r1, r3
 8004d0a:	4817      	ldr	r0, [pc, #92]	; (8004d68 <MX_TIM3_Init+0x114>)
 8004d0c:	f006 faec 	bl	800b2e8 <HAL_TIM_SlaveConfigSynchro>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d001      	beq.n	8004d1a <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 8004d16:	f7ff fb19 	bl	800434c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004d22:	f107 0310 	add.w	r3, r7, #16
 8004d26:	4619      	mov	r1, r3
 8004d28:	480f      	ldr	r0, [pc, #60]	; (8004d68 <MX_TIM3_Init+0x114>)
 8004d2a:	f006 feab 	bl	800ba84 <HAL_TIMEx_MasterConfigSynchronization>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d001      	beq.n	8004d38 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8004d34:	f7ff fb0a 	bl	800434c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8004d38:	2302      	movs	r3, #2
 8004d3a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004d40:	2300      	movs	r3, #0
 8004d42:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8004d44:	230f      	movs	r3, #15
 8004d46:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004d48:	463b      	mov	r3, r7
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	4806      	ldr	r0, [pc, #24]	; (8004d68 <MX_TIM3_Init+0x114>)
 8004d50:	f006 f963 	bl	800b01a <HAL_TIM_IC_ConfigChannel>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <MX_TIM3_Init+0x10a>
  {
    Error_Handler();
 8004d5a:	f7ff faf7 	bl	800434c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004d5e:	bf00      	nop
 8004d60:	3740      	adds	r7, #64	; 0x40
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	20002c18 	.word	0x20002c18
 8004d6c:	40000400 	.word	0x40000400

08004d70 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b08c      	sub	sp, #48	; 0x30
 8004d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004d76:	f107 0320 	add.w	r3, r7, #32
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	601a      	str	r2, [r3, #0]
 8004d7e:	605a      	str	r2, [r3, #4]
 8004d80:	609a      	str	r2, [r3, #8]
 8004d82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d84:	f107 0314 	add.w	r3, r7, #20
 8004d88:	2200      	movs	r2, #0
 8004d8a:	601a      	str	r2, [r3, #0]
 8004d8c:	605a      	str	r2, [r3, #4]
 8004d8e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004d90:	1d3b      	adds	r3, r7, #4
 8004d92:	2200      	movs	r2, #0
 8004d94:	601a      	str	r2, [r3, #0]
 8004d96:	605a      	str	r2, [r3, #4]
 8004d98:	609a      	str	r2, [r3, #8]
 8004d9a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004d9c:	4b2b      	ldr	r3, [pc, #172]	; (8004e4c <MX_TIM4_Init+0xdc>)
 8004d9e:	4a2c      	ldr	r2, [pc, #176]	; (8004e50 <MX_TIM4_Init+0xe0>)
 8004da0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004da2:	4b2a      	ldr	r3, [pc, #168]	; (8004e4c <MX_TIM4_Init+0xdc>)
 8004da4:	2200      	movs	r2, #0
 8004da6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004da8:	4b28      	ldr	r3, [pc, #160]	; (8004e4c <MX_TIM4_Init+0xdc>)
 8004daa:	2200      	movs	r2, #0
 8004dac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004dae:	4b27      	ldr	r3, [pc, #156]	; (8004e4c <MX_TIM4_Init+0xdc>)
 8004db0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004db4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004db6:	4b25      	ldr	r3, [pc, #148]	; (8004e4c <MX_TIM4_Init+0xdc>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004dbc:	4b23      	ldr	r3, [pc, #140]	; (8004e4c <MX_TIM4_Init+0xdc>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004dc2:	4822      	ldr	r0, [pc, #136]	; (8004e4c <MX_TIM4_Init+0xdc>)
 8004dc4:	f005 fd19 	bl	800a7fa <HAL_TIM_Base_Init>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d001      	beq.n	8004dd2 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8004dce:	f7ff fabd 	bl	800434c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004dd6:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004dd8:	f107 0320 	add.w	r3, r7, #32
 8004ddc:	4619      	mov	r1, r3
 8004dde:	481b      	ldr	r0, [pc, #108]	; (8004e4c <MX_TIM4_Init+0xdc>)
 8004de0:	f006 f9b8 	bl	800b154 <HAL_TIM_ConfigClockSource>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8004dea:	f7ff faaf 	bl	800434c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8004dee:	4817      	ldr	r0, [pc, #92]	; (8004e4c <MX_TIM4_Init+0xdc>)
 8004df0:	f005 fe42 	bl	800aa78 <HAL_TIM_IC_Init>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8004dfa:	f7ff faa7 	bl	800434c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e02:	2300      	movs	r3, #0
 8004e04:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004e06:	f107 0314 	add.w	r3, r7, #20
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	480f      	ldr	r0, [pc, #60]	; (8004e4c <MX_TIM4_Init+0xdc>)
 8004e0e:	f006 fe39 	bl	800ba84 <HAL_TIMEx_MasterConfigSynchronization>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d001      	beq.n	8004e1c <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8004e18:	f7ff fa98 	bl	800434c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004e20:	2301      	movs	r3, #1
 8004e22:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004e24:	2300      	movs	r3, #0
 8004e26:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004e2c:	1d3b      	adds	r3, r7, #4
 8004e2e:	2200      	movs	r2, #0
 8004e30:	4619      	mov	r1, r3
 8004e32:	4806      	ldr	r0, [pc, #24]	; (8004e4c <MX_TIM4_Init+0xdc>)
 8004e34:	f006 f8f1 	bl	800b01a <HAL_TIM_IC_ConfigChannel>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8004e3e:	f7ff fa85 	bl	800434c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004e42:	bf00      	nop
 8004e44:	3730      	adds	r7, #48	; 0x30
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	20002c64 	.word	0x20002c64
 8004e50:	40000800 	.word	0x40000800

08004e54 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8004e58:	4b0e      	ldr	r3, [pc, #56]	; (8004e94 <MX_TIM14_Init+0x40>)
 8004e5a:	4a0f      	ldr	r2, [pc, #60]	; (8004e98 <MX_TIM14_Init+0x44>)
 8004e5c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 31999;
 8004e5e:	4b0d      	ldr	r3, [pc, #52]	; (8004e94 <MX_TIM14_Init+0x40>)
 8004e60:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8004e64:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e66:	4b0b      	ldr	r3, [pc, #44]	; (8004e94 <MX_TIM14_Init+0x40>)
 8004e68:	2200      	movs	r2, #0
 8004e6a:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 24;
 8004e6c:	4b09      	ldr	r3, [pc, #36]	; (8004e94 <MX_TIM14_Init+0x40>)
 8004e6e:	2218      	movs	r2, #24
 8004e70:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e72:	4b08      	ldr	r3, [pc, #32]	; (8004e94 <MX_TIM14_Init+0x40>)
 8004e74:	2200      	movs	r2, #0
 8004e76:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e78:	4b06      	ldr	r3, [pc, #24]	; (8004e94 <MX_TIM14_Init+0x40>)
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004e7e:	4805      	ldr	r0, [pc, #20]	; (8004e94 <MX_TIM14_Init+0x40>)
 8004e80:	f005 fcbb 	bl	800a7fa <HAL_TIM_Base_Init>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d001      	beq.n	8004e8e <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8004e8a:	f7ff fa5f 	bl	800434c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8004e8e:	bf00      	nop
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	20002cb0 	.word	0x20002cb0
 8004e98:	40002000 	.word	0x40002000

08004e9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b08c      	sub	sp, #48	; 0x30
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ea4:	f107 031c 	add.w	r3, r7, #28
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	601a      	str	r2, [r3, #0]
 8004eac:	605a      	str	r2, [r3, #4]
 8004eae:	609a      	str	r2, [r3, #8]
 8004eb0:	60da      	str	r2, [r3, #12]
 8004eb2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a3f      	ldr	r2, [pc, #252]	; (8004fb8 <HAL_TIM_Base_MspInit+0x11c>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d130      	bne.n	8004f20 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004ebe:	4b3f      	ldr	r3, [pc, #252]	; (8004fbc <HAL_TIM_Base_MspInit+0x120>)
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec2:	4a3e      	ldr	r2, [pc, #248]	; (8004fbc <HAL_TIM_Base_MspInit+0x120>)
 8004ec4:	f043 0302 	orr.w	r3, r3, #2
 8004ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8004eca:	4b3c      	ldr	r3, [pc, #240]	; (8004fbc <HAL_TIM_Base_MspInit+0x120>)
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	61bb      	str	r3, [r7, #24]
 8004ed4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ed6:	4b39      	ldr	r3, [pc, #228]	; (8004fbc <HAL_TIM_Base_MspInit+0x120>)
 8004ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eda:	4a38      	ldr	r2, [pc, #224]	; (8004fbc <HAL_TIM_Base_MspInit+0x120>)
 8004edc:	f043 0301 	orr.w	r3, r3, #1
 8004ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ee2:	4b36      	ldr	r3, [pc, #216]	; (8004fbc <HAL_TIM_Base_MspInit+0x120>)
 8004ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	617b      	str	r3, [r7, #20]
 8004eec:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = VSS2_Pin;
 8004eee:	2340      	movs	r3, #64	; 0x40
 8004ef0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ef2:	2302      	movs	r3, #2
 8004ef4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004efa:	2300      	movs	r3, #0
 8004efc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004efe:	2302      	movs	r3, #2
 8004f00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VSS2_GPIO_Port, &GPIO_InitStruct);
 8004f02:	f107 031c 	add.w	r3, r7, #28
 8004f06:	4619      	mov	r1, r3
 8004f08:	482d      	ldr	r0, [pc, #180]	; (8004fc0 <HAL_TIM_Base_MspInit+0x124>)
 8004f0a:	f001 fa35 	bl	8006378 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8004f0e:	2200      	movs	r2, #0
 8004f10:	2101      	movs	r1, #1
 8004f12:	201d      	movs	r0, #29
 8004f14:	f000 fe53 	bl	8005bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004f18:	201d      	movs	r0, #29
 8004f1a:	f000 fe6c 	bl	8005bf6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8004f1e:	e047      	b.n	8004fb0 <HAL_TIM_Base_MspInit+0x114>
  else if(tim_baseHandle->Instance==TIM4)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a27      	ldr	r2, [pc, #156]	; (8004fc4 <HAL_TIM_Base_MspInit+0x128>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d129      	bne.n	8004f7e <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004f2a:	4b24      	ldr	r3, [pc, #144]	; (8004fbc <HAL_TIM_Base_MspInit+0x120>)
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2e:	4a23      	ldr	r2, [pc, #140]	; (8004fbc <HAL_TIM_Base_MspInit+0x120>)
 8004f30:	f043 0304 	orr.w	r3, r3, #4
 8004f34:	6413      	str	r3, [r2, #64]	; 0x40
 8004f36:	4b21      	ldr	r3, [pc, #132]	; (8004fbc <HAL_TIM_Base_MspInit+0x120>)
 8004f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3a:	f003 0304 	and.w	r3, r3, #4
 8004f3e:	613b      	str	r3, [r7, #16]
 8004f40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f42:	4b1e      	ldr	r3, [pc, #120]	; (8004fbc <HAL_TIM_Base_MspInit+0x120>)
 8004f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f46:	4a1d      	ldr	r2, [pc, #116]	; (8004fbc <HAL_TIM_Base_MspInit+0x120>)
 8004f48:	f043 0308 	orr.w	r3, r3, #8
 8004f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8004f4e:	4b1b      	ldr	r3, [pc, #108]	; (8004fbc <HAL_TIM_Base_MspInit+0x120>)
 8004f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f52:	f003 0308 	and.w	r3, r3, #8
 8004f56:	60fb      	str	r3, [r7, #12]
 8004f58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VSS1_Pin;
 8004f5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f60:	2302      	movs	r3, #2
 8004f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f64:	2300      	movs	r3, #0
 8004f66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VSS1_GPIO_Port, &GPIO_InitStruct);
 8004f70:	f107 031c 	add.w	r3, r7, #28
 8004f74:	4619      	mov	r1, r3
 8004f76:	4814      	ldr	r0, [pc, #80]	; (8004fc8 <HAL_TIM_Base_MspInit+0x12c>)
 8004f78:	f001 f9fe 	bl	8006378 <HAL_GPIO_Init>
}
 8004f7c:	e018      	b.n	8004fb0 <HAL_TIM_Base_MspInit+0x114>
  else if(tim_baseHandle->Instance==TIM14)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a12      	ldr	r2, [pc, #72]	; (8004fcc <HAL_TIM_Base_MspInit+0x130>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d113      	bne.n	8004fb0 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004f88:	4b0c      	ldr	r3, [pc, #48]	; (8004fbc <HAL_TIM_Base_MspInit+0x120>)
 8004f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8c:	4a0b      	ldr	r2, [pc, #44]	; (8004fbc <HAL_TIM_Base_MspInit+0x120>)
 8004f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f92:	6413      	str	r3, [r2, #64]	; 0x40
 8004f94:	4b09      	ldr	r3, [pc, #36]	; (8004fbc <HAL_TIM_Base_MspInit+0x120>)
 8004f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f9c:	60bb      	str	r3, [r7, #8]
 8004f9e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	2100      	movs	r1, #0
 8004fa4:	202d      	movs	r0, #45	; 0x2d
 8004fa6:	f000 fe0a 	bl	8005bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8004faa:	202d      	movs	r0, #45	; 0x2d
 8004fac:	f000 fe23 	bl	8005bf6 <HAL_NVIC_EnableIRQ>
}
 8004fb0:	bf00      	nop
 8004fb2:	3730      	adds	r7, #48	; 0x30
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	40000400 	.word	0x40000400
 8004fbc:	40023800 	.word	0x40023800
 8004fc0:	40020000 	.word	0x40020000
 8004fc4:	40000800 	.word	0x40000800
 8004fc8:	40020c00 	.word	0x40020c00
 8004fcc:	40002000 	.word	0x40002000

08004fd0 <MX_UART7_Init>:
UART_HandleTypeDef huart7;
UART_HandleTypeDef huart3;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8004fd4:	4b14      	ldr	r3, [pc, #80]	; (8005028 <MX_UART7_Init+0x58>)
 8004fd6:	4a15      	ldr	r2, [pc, #84]	; (800502c <MX_UART7_Init+0x5c>)
 8004fd8:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8004fda:	4b13      	ldr	r3, [pc, #76]	; (8005028 <MX_UART7_Init+0x58>)
 8004fdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004fe0:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8004fe2:	4b11      	ldr	r3, [pc, #68]	; (8005028 <MX_UART7_Init+0x58>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8004fe8:	4b0f      	ldr	r3, [pc, #60]	; (8005028 <MX_UART7_Init+0x58>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8004fee:	4b0e      	ldr	r3, [pc, #56]	; (8005028 <MX_UART7_Init+0x58>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8004ff4:	4b0c      	ldr	r3, [pc, #48]	; (8005028 <MX_UART7_Init+0x58>)
 8004ff6:	220c      	movs	r2, #12
 8004ff8:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ffa:	4b0b      	ldr	r3, [pc, #44]	; (8005028 <MX_UART7_Init+0x58>)
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8005000:	4b09      	ldr	r3, [pc, #36]	; (8005028 <MX_UART7_Init+0x58>)
 8005002:	2200      	movs	r2, #0
 8005004:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005006:	4b08      	ldr	r3, [pc, #32]	; (8005028 <MX_UART7_Init+0x58>)
 8005008:	2200      	movs	r2, #0
 800500a:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800500c:	4b06      	ldr	r3, [pc, #24]	; (8005028 <MX_UART7_Init+0x58>)
 800500e:	2200      	movs	r2, #0
 8005010:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8005012:	4805      	ldr	r0, [pc, #20]	; (8005028 <MX_UART7_Init+0x58>)
 8005014:	f006 fde2 	bl	800bbdc <HAL_UART_Init>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d001      	beq.n	8005022 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 800501e:	f7ff f995 	bl	800434c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8005022:	bf00      	nop
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	20002cfc 	.word	0x20002cfc
 800502c:	40007800 	.word	0x40007800

08005030 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005034:	4b14      	ldr	r3, [pc, #80]	; (8005088 <MX_USART3_UART_Init+0x58>)
 8005036:	4a15      	ldr	r2, [pc, #84]	; (800508c <MX_USART3_UART_Init+0x5c>)
 8005038:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800503a:	4b13      	ldr	r3, [pc, #76]	; (8005088 <MX_USART3_UART_Init+0x58>)
 800503c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005040:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005042:	4b11      	ldr	r3, [pc, #68]	; (8005088 <MX_USART3_UART_Init+0x58>)
 8005044:	2200      	movs	r2, #0
 8005046:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005048:	4b0f      	ldr	r3, [pc, #60]	; (8005088 <MX_USART3_UART_Init+0x58>)
 800504a:	2200      	movs	r2, #0
 800504c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800504e:	4b0e      	ldr	r3, [pc, #56]	; (8005088 <MX_USART3_UART_Init+0x58>)
 8005050:	2200      	movs	r2, #0
 8005052:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005054:	4b0c      	ldr	r3, [pc, #48]	; (8005088 <MX_USART3_UART_Init+0x58>)
 8005056:	220c      	movs	r2, #12
 8005058:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800505a:	4b0b      	ldr	r3, [pc, #44]	; (8005088 <MX_USART3_UART_Init+0x58>)
 800505c:	2200      	movs	r2, #0
 800505e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005060:	4b09      	ldr	r3, [pc, #36]	; (8005088 <MX_USART3_UART_Init+0x58>)
 8005062:	2200      	movs	r2, #0
 8005064:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005066:	4b08      	ldr	r3, [pc, #32]	; (8005088 <MX_USART3_UART_Init+0x58>)
 8005068:	2200      	movs	r2, #0
 800506a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800506c:	4b06      	ldr	r3, [pc, #24]	; (8005088 <MX_USART3_UART_Init+0x58>)
 800506e:	2200      	movs	r2, #0
 8005070:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005072:	4805      	ldr	r0, [pc, #20]	; (8005088 <MX_USART3_UART_Init+0x58>)
 8005074:	f006 fdb2 	bl	800bbdc <HAL_UART_Init>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d001      	beq.n	8005082 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800507e:	f7ff f965 	bl	800434c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005082:	bf00      	nop
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	20002d80 	.word	0x20002d80
 800508c:	40004800 	.word	0x40004800

08005090 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b08c      	sub	sp, #48	; 0x30
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005098:	f107 031c 	add.w	r3, r7, #28
 800509c:	2200      	movs	r2, #0
 800509e:	601a      	str	r2, [r3, #0]
 80050a0:	605a      	str	r2, [r3, #4]
 80050a2:	609a      	str	r2, [r3, #8]
 80050a4:	60da      	str	r2, [r3, #12]
 80050a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a2f      	ldr	r2, [pc, #188]	; (800516c <HAL_UART_MspInit+0xdc>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d129      	bne.n	8005106 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80050b2:	4b2f      	ldr	r3, [pc, #188]	; (8005170 <HAL_UART_MspInit+0xe0>)
 80050b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b6:	4a2e      	ldr	r2, [pc, #184]	; (8005170 <HAL_UART_MspInit+0xe0>)
 80050b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050bc:	6413      	str	r3, [r2, #64]	; 0x40
 80050be:	4b2c      	ldr	r3, [pc, #176]	; (8005170 <HAL_UART_MspInit+0xe0>)
 80050c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80050c6:	61bb      	str	r3, [r7, #24]
 80050c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80050ca:	4b29      	ldr	r3, [pc, #164]	; (8005170 <HAL_UART_MspInit+0xe0>)
 80050cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ce:	4a28      	ldr	r2, [pc, #160]	; (8005170 <HAL_UART_MspInit+0xe0>)
 80050d0:	f043 0310 	orr.w	r3, r3, #16
 80050d4:	6313      	str	r3, [r2, #48]	; 0x30
 80050d6:	4b26      	ldr	r3, [pc, #152]	; (8005170 <HAL_UART_MspInit+0xe0>)
 80050d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050da:	f003 0310 	and.w	r3, r3, #16
 80050de:	617b      	str	r3, [r7, #20]
 80050e0:	697b      	ldr	r3, [r7, #20]
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
 80050e2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80050e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050e8:	2302      	movs	r3, #2
 80050ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ec:	2300      	movs	r3, #0
 80050ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050f0:	2303      	movs	r3, #3
 80050f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80050f4:	2308      	movs	r3, #8
 80050f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80050f8:	f107 031c 	add.w	r3, r7, #28
 80050fc:	4619      	mov	r1, r3
 80050fe:	481d      	ldr	r0, [pc, #116]	; (8005174 <HAL_UART_MspInit+0xe4>)
 8005100:	f001 f93a 	bl	8006378 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8005104:	e02d      	b.n	8005162 <HAL_UART_MspInit+0xd2>
  else if(uartHandle->Instance==USART3)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a1b      	ldr	r2, [pc, #108]	; (8005178 <HAL_UART_MspInit+0xe8>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d128      	bne.n	8005162 <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005110:	4b17      	ldr	r3, [pc, #92]	; (8005170 <HAL_UART_MspInit+0xe0>)
 8005112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005114:	4a16      	ldr	r2, [pc, #88]	; (8005170 <HAL_UART_MspInit+0xe0>)
 8005116:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800511a:	6413      	str	r3, [r2, #64]	; 0x40
 800511c:	4b14      	ldr	r3, [pc, #80]	; (8005170 <HAL_UART_MspInit+0xe0>)
 800511e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005120:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005124:	613b      	str	r3, [r7, #16]
 8005126:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005128:	4b11      	ldr	r3, [pc, #68]	; (8005170 <HAL_UART_MspInit+0xe0>)
 800512a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512c:	4a10      	ldr	r2, [pc, #64]	; (8005170 <HAL_UART_MspInit+0xe0>)
 800512e:	f043 0302 	orr.w	r3, r3, #2
 8005132:	6313      	str	r3, [r2, #48]	; 0x30
 8005134:	4b0e      	ldr	r3, [pc, #56]	; (8005170 <HAL_UART_MspInit+0xe0>)
 8005136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005138:	f003 0302 	and.w	r3, r3, #2
 800513c:	60fb      	str	r3, [r7, #12]
 800513e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART_DEBUG_TX_Pin|UART_DEBUG_RX_Pin;
 8005140:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005144:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005146:	2302      	movs	r3, #2
 8005148:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800514a:	2300      	movs	r3, #0
 800514c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800514e:	2303      	movs	r3, #3
 8005150:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005152:	2307      	movs	r3, #7
 8005154:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005156:	f107 031c 	add.w	r3, r7, #28
 800515a:	4619      	mov	r1, r3
 800515c:	4807      	ldr	r0, [pc, #28]	; (800517c <HAL_UART_MspInit+0xec>)
 800515e:	f001 f90b 	bl	8006378 <HAL_GPIO_Init>
}
 8005162:	bf00      	nop
 8005164:	3730      	adds	r7, #48	; 0x30
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	40007800 	.word	0x40007800
 8005170:	40023800 	.word	0x40023800
 8005174:	40021000 	.word	0x40021000
 8005178:	40004800 	.word	0x40004800
 800517c:	40020400 	.word	0x40020400

08005180 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005180:	f8df d034 	ldr.w	sp, [pc, #52]	; 80051b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005184:	480d      	ldr	r0, [pc, #52]	; (80051bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005186:	490e      	ldr	r1, [pc, #56]	; (80051c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005188:	4a0e      	ldr	r2, [pc, #56]	; (80051c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800518a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800518c:	e002      	b.n	8005194 <LoopCopyDataInit>

0800518e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800518e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005190:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005192:	3304      	adds	r3, #4

08005194 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005194:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005196:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005198:	d3f9      	bcc.n	800518e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800519a:	4a0b      	ldr	r2, [pc, #44]	; (80051c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800519c:	4c0b      	ldr	r4, [pc, #44]	; (80051cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800519e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80051a0:	e001      	b.n	80051a6 <LoopFillZerobss>

080051a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80051a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80051a4:	3204      	adds	r2, #4

080051a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80051a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80051a8:	d3fb      	bcc.n	80051a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80051aa:	f7ff fd41 	bl	8004c30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80051ae:	f00a fca1 	bl	800faf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80051b2:	f7fe ff73 	bl	800409c <main>
  bx  lr    
 80051b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80051b8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80051bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80051c0:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80051c4:	08016aa0 	.word	0x08016aa0
  ldr r2, =_sbss
 80051c8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80051cc:	20002e5c 	.word	0x20002e5c

080051d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80051d0:	e7fe      	b.n	80051d0 <ADC_IRQHandler>
	...

080051d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 80051d8:	4b08      	ldr	r3, [pc, #32]	; (80051fc <HAL_Init+0x28>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a07      	ldr	r2, [pc, #28]	; (80051fc <HAL_Init+0x28>)
 80051de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051e2:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80051e4:	2003      	movs	r0, #3
 80051e6:	f000 fcdf 	bl	8005ba8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80051ea:	200f      	movs	r0, #15
 80051ec:	f000 f808 	bl	8005200 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80051f0:	f7ff fbd8 	bl	80049a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	40023c00 	.word	0x40023c00

08005200 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005208:	4b12      	ldr	r3, [pc, #72]	; (8005254 <HAL_InitTick+0x54>)
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	4b12      	ldr	r3, [pc, #72]	; (8005258 <HAL_InitTick+0x58>)
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	4619      	mov	r1, r3
 8005212:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005216:	fbb3 f3f1 	udiv	r3, r3, r1
 800521a:	fbb2 f3f3 	udiv	r3, r2, r3
 800521e:	4618      	mov	r0, r3
 8005220:	f000 fcf7 	bl	8005c12 <HAL_SYSTICK_Config>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d001      	beq.n	800522e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e00e      	b.n	800524c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2b0f      	cmp	r3, #15
 8005232:	d80a      	bhi.n	800524a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005234:	2200      	movs	r2, #0
 8005236:	6879      	ldr	r1, [r7, #4]
 8005238:	f04f 30ff 	mov.w	r0, #4294967295
 800523c:	f000 fcbf 	bl	8005bbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005240:	4a06      	ldr	r2, [pc, #24]	; (800525c <HAL_InitTick+0x5c>)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005246:	2300      	movs	r3, #0
 8005248:	e000      	b.n	800524c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
}
 800524c:	4618      	mov	r0, r3
 800524e:	3708      	adds	r7, #8
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	20000004 	.word	0x20000004
 8005258:	2000000c 	.word	0x2000000c
 800525c:	20000008 	.word	0x20000008

08005260 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005260:	b480      	push	{r7}
 8005262:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005264:	4b06      	ldr	r3, [pc, #24]	; (8005280 <HAL_IncTick+0x20>)
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	461a      	mov	r2, r3
 800526a:	4b06      	ldr	r3, [pc, #24]	; (8005284 <HAL_IncTick+0x24>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4413      	add	r3, r2
 8005270:	4a04      	ldr	r2, [pc, #16]	; (8005284 <HAL_IncTick+0x24>)
 8005272:	6013      	str	r3, [r2, #0]
}
 8005274:	bf00      	nop
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	2000000c 	.word	0x2000000c
 8005284:	20002e04 	.word	0x20002e04

08005288 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005288:	b480      	push	{r7}
 800528a:	af00      	add	r7, sp, #0
  return uwTick;
 800528c:	4b03      	ldr	r3, [pc, #12]	; (800529c <HAL_GetTick+0x14>)
 800528e:	681b      	ldr	r3, [r3, #0]
}
 8005290:	4618      	mov	r0, r3
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	20002e04 	.word	0x20002e04

080052a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80052a8:	f7ff ffee 	bl	8005288 <HAL_GetTick>
 80052ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b8:	d005      	beq.n	80052c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80052ba:	4b0a      	ldr	r3, [pc, #40]	; (80052e4 <HAL_Delay+0x44>)
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	461a      	mov	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	4413      	add	r3, r2
 80052c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80052c6:	bf00      	nop
 80052c8:	f7ff ffde 	bl	8005288 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d8f7      	bhi.n	80052c8 <HAL_Delay+0x28>
  {
  }
}
 80052d8:	bf00      	nop
 80052da:	bf00      	nop
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	2000000c 	.word	0x2000000c

080052e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80052f0:	2300      	movs	r3, #0
 80052f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d101      	bne.n	80052fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e031      	b.n	8005362 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005302:	2b00      	cmp	r3, #0
 8005304:	d109      	bne.n	800531a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f7fe f936 	bl	8003578 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531e:	f003 0310 	and.w	r3, r3, #16
 8005322:	2b00      	cmp	r3, #0
 8005324:	d116      	bne.n	8005354 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800532a:	4b10      	ldr	r3, [pc, #64]	; (800536c <HAL_ADC_Init+0x84>)
 800532c:	4013      	ands	r3, r2
 800532e:	f043 0202 	orr.w	r2, r3, #2
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 f970 	bl	800561c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005346:	f023 0303 	bic.w	r3, r3, #3
 800534a:	f043 0201 	orr.w	r2, r3, #1
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	641a      	str	r2, [r3, #64]	; 0x40
 8005352:	e001      	b.n	8005358 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005360:	7bfb      	ldrb	r3, [r7, #15]
}
 8005362:	4618      	mov	r0, r3
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	ffffeefd 	.word	0xffffeefd

08005370 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800537a:	2300      	movs	r3, #0
 800537c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005384:	2b01      	cmp	r3, #1
 8005386:	d101      	bne.n	800538c <HAL_ADC_ConfigChannel+0x1c>
 8005388:	2302      	movs	r3, #2
 800538a:	e136      	b.n	80055fa <HAL_ADC_ConfigChannel+0x28a>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2b09      	cmp	r3, #9
 800539a:	d93a      	bls.n	8005412 <HAL_ADC_ConfigChannel+0xa2>
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053a4:	d035      	beq.n	8005412 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68d9      	ldr	r1, [r3, #12]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	461a      	mov	r2, r3
 80053b4:	4613      	mov	r3, r2
 80053b6:	005b      	lsls	r3, r3, #1
 80053b8:	4413      	add	r3, r2
 80053ba:	3b1e      	subs	r3, #30
 80053bc:	2207      	movs	r2, #7
 80053be:	fa02 f303 	lsl.w	r3, r2, r3
 80053c2:	43da      	mvns	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	400a      	ands	r2, r1
 80053ca:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a8d      	ldr	r2, [pc, #564]	; (8005608 <HAL_ADC_ConfigChannel+0x298>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d10a      	bne.n	80053ec <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68d9      	ldr	r1, [r3, #12]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	061a      	lsls	r2, r3, #24
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80053ea:	e035      	b.n	8005458 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68d9      	ldr	r1, [r3, #12]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	689a      	ldr	r2, [r3, #8]
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	4618      	mov	r0, r3
 80053fe:	4603      	mov	r3, r0
 8005400:	005b      	lsls	r3, r3, #1
 8005402:	4403      	add	r3, r0
 8005404:	3b1e      	subs	r3, #30
 8005406:	409a      	lsls	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	430a      	orrs	r2, r1
 800540e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005410:	e022      	b.n	8005458 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	6919      	ldr	r1, [r3, #16]
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	b29b      	uxth	r3, r3
 800541e:	461a      	mov	r2, r3
 8005420:	4613      	mov	r3, r2
 8005422:	005b      	lsls	r3, r3, #1
 8005424:	4413      	add	r3, r2
 8005426:	2207      	movs	r2, #7
 8005428:	fa02 f303 	lsl.w	r3, r2, r3
 800542c:	43da      	mvns	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	400a      	ands	r2, r1
 8005434:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	6919      	ldr	r1, [r3, #16]
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	689a      	ldr	r2, [r3, #8]
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	b29b      	uxth	r3, r3
 8005446:	4618      	mov	r0, r3
 8005448:	4603      	mov	r3, r0
 800544a:	005b      	lsls	r3, r3, #1
 800544c:	4403      	add	r3, r0
 800544e:	409a      	lsls	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	430a      	orrs	r2, r1
 8005456:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	2b06      	cmp	r3, #6
 800545e:	d824      	bhi.n	80054aa <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	685a      	ldr	r2, [r3, #4]
 800546a:	4613      	mov	r3, r2
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	4413      	add	r3, r2
 8005470:	3b05      	subs	r3, #5
 8005472:	221f      	movs	r2, #31
 8005474:	fa02 f303 	lsl.w	r3, r2, r3
 8005478:	43da      	mvns	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	400a      	ands	r2, r1
 8005480:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	b29b      	uxth	r3, r3
 800548e:	4618      	mov	r0, r3
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	685a      	ldr	r2, [r3, #4]
 8005494:	4613      	mov	r3, r2
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	4413      	add	r3, r2
 800549a:	3b05      	subs	r3, #5
 800549c:	fa00 f203 	lsl.w	r2, r0, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	430a      	orrs	r2, r1
 80054a6:	635a      	str	r2, [r3, #52]	; 0x34
 80054a8:	e04c      	b.n	8005544 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	2b0c      	cmp	r3, #12
 80054b0:	d824      	bhi.n	80054fc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	685a      	ldr	r2, [r3, #4]
 80054bc:	4613      	mov	r3, r2
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	4413      	add	r3, r2
 80054c2:	3b23      	subs	r3, #35	; 0x23
 80054c4:	221f      	movs	r2, #31
 80054c6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ca:	43da      	mvns	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	400a      	ands	r2, r1
 80054d2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	b29b      	uxth	r3, r3
 80054e0:	4618      	mov	r0, r3
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	685a      	ldr	r2, [r3, #4]
 80054e6:	4613      	mov	r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4413      	add	r3, r2
 80054ec:	3b23      	subs	r3, #35	; 0x23
 80054ee:	fa00 f203 	lsl.w	r2, r0, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	430a      	orrs	r2, r1
 80054f8:	631a      	str	r2, [r3, #48]	; 0x30
 80054fa:	e023      	b.n	8005544 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	685a      	ldr	r2, [r3, #4]
 8005506:	4613      	mov	r3, r2
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	4413      	add	r3, r2
 800550c:	3b41      	subs	r3, #65	; 0x41
 800550e:	221f      	movs	r2, #31
 8005510:	fa02 f303 	lsl.w	r3, r2, r3
 8005514:	43da      	mvns	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	400a      	ands	r2, r1
 800551c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	b29b      	uxth	r3, r3
 800552a:	4618      	mov	r0, r3
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	4613      	mov	r3, r2
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	4413      	add	r3, r2
 8005536:	3b41      	subs	r3, #65	; 0x41
 8005538:	fa00 f203 	lsl.w	r2, r0, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	430a      	orrs	r2, r1
 8005542:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a30      	ldr	r2, [pc, #192]	; (800560c <HAL_ADC_ConfigChannel+0x29c>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d10a      	bne.n	8005564 <HAL_ADC_ConfigChannel+0x1f4>
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005556:	d105      	bne.n	8005564 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005558:	4b2d      	ldr	r3, [pc, #180]	; (8005610 <HAL_ADC_ConfigChannel+0x2a0>)
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	4a2c      	ldr	r2, [pc, #176]	; (8005610 <HAL_ADC_ConfigChannel+0x2a0>)
 800555e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005562:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a28      	ldr	r2, [pc, #160]	; (800560c <HAL_ADC_ConfigChannel+0x29c>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d10f      	bne.n	800558e <HAL_ADC_ConfigChannel+0x21e>
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2b12      	cmp	r3, #18
 8005574:	d10b      	bne.n	800558e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8005576:	4b26      	ldr	r3, [pc, #152]	; (8005610 <HAL_ADC_ConfigChannel+0x2a0>)
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	4a25      	ldr	r2, [pc, #148]	; (8005610 <HAL_ADC_ConfigChannel+0x2a0>)
 800557c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005580:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8005582:	4b23      	ldr	r3, [pc, #140]	; (8005610 <HAL_ADC_ConfigChannel+0x2a0>)
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	4a22      	ldr	r2, [pc, #136]	; (8005610 <HAL_ADC_ConfigChannel+0x2a0>)
 8005588:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800558c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a1e      	ldr	r2, [pc, #120]	; (800560c <HAL_ADC_ConfigChannel+0x29c>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d12b      	bne.n	80055f0 <HAL_ADC_ConfigChannel+0x280>
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a1a      	ldr	r2, [pc, #104]	; (8005608 <HAL_ADC_ConfigChannel+0x298>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d003      	beq.n	80055aa <HAL_ADC_ConfigChannel+0x23a>
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2b11      	cmp	r3, #17
 80055a8:	d122      	bne.n	80055f0 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80055aa:	4b19      	ldr	r3, [pc, #100]	; (8005610 <HAL_ADC_ConfigChannel+0x2a0>)
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	4a18      	ldr	r2, [pc, #96]	; (8005610 <HAL_ADC_ConfigChannel+0x2a0>)
 80055b0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80055b4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80055b6:	4b16      	ldr	r3, [pc, #88]	; (8005610 <HAL_ADC_ConfigChannel+0x2a0>)
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	4a15      	ldr	r2, [pc, #84]	; (8005610 <HAL_ADC_ConfigChannel+0x2a0>)
 80055bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80055c0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a10      	ldr	r2, [pc, #64]	; (8005608 <HAL_ADC_ConfigChannel+0x298>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d111      	bne.n	80055f0 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80055cc:	4b11      	ldr	r3, [pc, #68]	; (8005614 <HAL_ADC_ConfigChannel+0x2a4>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a11      	ldr	r2, [pc, #68]	; (8005618 <HAL_ADC_ConfigChannel+0x2a8>)
 80055d2:	fba2 2303 	umull	r2, r3, r2, r3
 80055d6:	0c9a      	lsrs	r2, r3, #18
 80055d8:	4613      	mov	r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	4413      	add	r3, r2
 80055de:	005b      	lsls	r3, r3, #1
 80055e0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80055e2:	e002      	b.n	80055ea <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	3b01      	subs	r3, #1
 80055e8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1f9      	bne.n	80055e4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3714      	adds	r7, #20
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	10000012 	.word	0x10000012
 800560c:	40012000 	.word	0x40012000
 8005610:	40012300 	.word	0x40012300
 8005614:	20000004 	.word	0x20000004
 8005618:	431bde83 	.word	0x431bde83

0800561c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005624:	4b78      	ldr	r3, [pc, #480]	; (8005808 <ADC_Init+0x1ec>)
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	4a77      	ldr	r2, [pc, #476]	; (8005808 <ADC_Init+0x1ec>)
 800562a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800562e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005630:	4b75      	ldr	r3, [pc, #468]	; (8005808 <ADC_Init+0x1ec>)
 8005632:	685a      	ldr	r2, [r3, #4]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	4973      	ldr	r1, [pc, #460]	; (8005808 <ADC_Init+0x1ec>)
 800563a:	4313      	orrs	r3, r2
 800563c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	685a      	ldr	r2, [r3, #4]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800564c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	6859      	ldr	r1, [r3, #4]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	021a      	lsls	r2, r3, #8
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	430a      	orrs	r2, r1
 8005660:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	685a      	ldr	r2, [r3, #4]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005670:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	6859      	ldr	r1, [r3, #4]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689a      	ldr	r2, [r3, #8]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	430a      	orrs	r2, r1
 8005682:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689a      	ldr	r2, [r3, #8]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005692:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6899      	ldr	r1, [r3, #8]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	68da      	ldr	r2, [r3, #12]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	430a      	orrs	r2, r1
 80056a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056aa:	4a58      	ldr	r2, [pc, #352]	; (800580c <ADC_Init+0x1f0>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d022      	beq.n	80056f6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	689a      	ldr	r2, [r3, #8]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80056be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6899      	ldr	r1, [r3, #8]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	430a      	orrs	r2, r1
 80056d0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	689a      	ldr	r2, [r3, #8]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80056e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	6899      	ldr	r1, [r3, #8]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	430a      	orrs	r2, r1
 80056f2:	609a      	str	r2, [r3, #8]
 80056f4:	e00f      	b.n	8005716 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	689a      	ldr	r2, [r3, #8]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005704:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	689a      	ldr	r2, [r3, #8]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005714:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	689a      	ldr	r2, [r3, #8]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f022 0202 	bic.w	r2, r2, #2
 8005724:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	6899      	ldr	r1, [r3, #8]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	005a      	lsls	r2, r3, #1
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	430a      	orrs	r2, r1
 8005738:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d01b      	beq.n	800577c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	685a      	ldr	r2, [r3, #4]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005752:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	685a      	ldr	r2, [r3, #4]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005762:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6859      	ldr	r1, [r3, #4]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576e:	3b01      	subs	r3, #1
 8005770:	035a      	lsls	r2, r3, #13
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	430a      	orrs	r2, r1
 8005778:	605a      	str	r2, [r3, #4]
 800577a:	e007      	b.n	800578c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	685a      	ldr	r2, [r3, #4]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800578a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800579a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	69db      	ldr	r3, [r3, #28]
 80057a6:	3b01      	subs	r3, #1
 80057a8:	051a      	lsls	r2, r3, #20
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	689a      	ldr	r2, [r3, #8]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80057c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	6899      	ldr	r1, [r3, #8]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80057ce:	025a      	lsls	r2, r3, #9
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	430a      	orrs	r2, r1
 80057d6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689a      	ldr	r2, [r3, #8]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6899      	ldr	r1, [r3, #8]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	029a      	lsls	r2, r3, #10
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	430a      	orrs	r2, r1
 80057fa:	609a      	str	r2, [r3, #8]
}
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr
 8005808:	40012300 	.word	0x40012300
 800580c:	0f000001 	.word	0x0f000001

08005810 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e0ed      	b.n	80059fe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d102      	bne.n	8005834 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7fd ffdc 	bl	80037ec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f042 0201 	orr.w	r2, r2, #1
 8005842:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005844:	f7ff fd20 	bl	8005288 <HAL_GetTick>
 8005848:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800584a:	e012      	b.n	8005872 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800584c:	f7ff fd1c 	bl	8005288 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	2b0a      	cmp	r3, #10
 8005858:	d90b      	bls.n	8005872 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2205      	movs	r2, #5
 800586a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e0c5      	b.n	80059fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f003 0301 	and.w	r3, r3, #1
 800587c:	2b00      	cmp	r3, #0
 800587e:	d0e5      	beq.n	800584c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f022 0202 	bic.w	r2, r2, #2
 800588e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005890:	f7ff fcfa 	bl	8005288 <HAL_GetTick>
 8005894:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005896:	e012      	b.n	80058be <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005898:	f7ff fcf6 	bl	8005288 <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	2b0a      	cmp	r3, #10
 80058a4:	d90b      	bls.n	80058be <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2205      	movs	r2, #5
 80058b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e09f      	b.n	80059fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f003 0302 	and.w	r3, r3, #2
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1e5      	bne.n	8005898 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	7e1b      	ldrb	r3, [r3, #24]
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d108      	bne.n	80058e6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80058e2:	601a      	str	r2, [r3, #0]
 80058e4:	e007      	b.n	80058f6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	7e5b      	ldrb	r3, [r3, #25]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d108      	bne.n	8005910 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800590c:	601a      	str	r2, [r3, #0]
 800590e:	e007      	b.n	8005920 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800591e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	7e9b      	ldrb	r3, [r3, #26]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d108      	bne.n	800593a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f042 0220 	orr.w	r2, r2, #32
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	e007      	b.n	800594a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f022 0220 	bic.w	r2, r2, #32
 8005948:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	7edb      	ldrb	r3, [r3, #27]
 800594e:	2b01      	cmp	r3, #1
 8005950:	d108      	bne.n	8005964 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f022 0210 	bic.w	r2, r2, #16
 8005960:	601a      	str	r2, [r3, #0]
 8005962:	e007      	b.n	8005974 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f042 0210 	orr.w	r2, r2, #16
 8005972:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	7f1b      	ldrb	r3, [r3, #28]
 8005978:	2b01      	cmp	r3, #1
 800597a:	d108      	bne.n	800598e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f042 0208 	orr.w	r2, r2, #8
 800598a:	601a      	str	r2, [r3, #0]
 800598c:	e007      	b.n	800599e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f022 0208 	bic.w	r2, r2, #8
 800599c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	7f5b      	ldrb	r3, [r3, #29]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d108      	bne.n	80059b8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f042 0204 	orr.w	r2, r2, #4
 80059b4:	601a      	str	r2, [r3, #0]
 80059b6:	e007      	b.n	80059c8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f022 0204 	bic.w	r2, r2, #4
 80059c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	689a      	ldr	r2, [r3, #8]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	431a      	orrs	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	431a      	orrs	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	695b      	ldr	r3, [r3, #20]
 80059dc:	ea42 0103 	orr.w	r1, r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	1e5a      	subs	r2, r3, #1
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	430a      	orrs	r2, r1
 80059ec:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3710      	adds	r7, #16
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
	...

08005a08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f003 0307 	and.w	r3, r3, #7
 8005a16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a18:	4b0b      	ldr	r3, [pc, #44]	; (8005a48 <__NVIC_SetPriorityGrouping+0x40>)
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a24:	4013      	ands	r3, r2
 8005a26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005a30:	4b06      	ldr	r3, [pc, #24]	; (8005a4c <__NVIC_SetPriorityGrouping+0x44>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a36:	4a04      	ldr	r2, [pc, #16]	; (8005a48 <__NVIC_SetPriorityGrouping+0x40>)
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	60d3      	str	r3, [r2, #12]
}
 8005a3c:	bf00      	nop
 8005a3e:	3714      	adds	r7, #20
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr
 8005a48:	e000ed00 	.word	0xe000ed00
 8005a4c:	05fa0000 	.word	0x05fa0000

08005a50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a50:	b480      	push	{r7}
 8005a52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a54:	4b04      	ldr	r3, [pc, #16]	; (8005a68 <__NVIC_GetPriorityGrouping+0x18>)
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	0a1b      	lsrs	r3, r3, #8
 8005a5a:	f003 0307 	and.w	r3, r3, #7
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr
 8005a68:	e000ed00 	.word	0xe000ed00

08005a6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	4603      	mov	r3, r0
 8005a74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	db0b      	blt.n	8005a96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a7e:	79fb      	ldrb	r3, [r7, #7]
 8005a80:	f003 021f 	and.w	r2, r3, #31
 8005a84:	4907      	ldr	r1, [pc, #28]	; (8005aa4 <__NVIC_EnableIRQ+0x38>)
 8005a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a8a:	095b      	lsrs	r3, r3, #5
 8005a8c:	2001      	movs	r0, #1
 8005a8e:	fa00 f202 	lsl.w	r2, r0, r2
 8005a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005a96:	bf00      	nop
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	e000e100 	.word	0xe000e100

08005aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	4603      	mov	r3, r0
 8005ab0:	6039      	str	r1, [r7, #0]
 8005ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	db0a      	blt.n	8005ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	b2da      	uxtb	r2, r3
 8005ac0:	490c      	ldr	r1, [pc, #48]	; (8005af4 <__NVIC_SetPriority+0x4c>)
 8005ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ac6:	0112      	lsls	r2, r2, #4
 8005ac8:	b2d2      	uxtb	r2, r2
 8005aca:	440b      	add	r3, r1
 8005acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ad0:	e00a      	b.n	8005ae8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	b2da      	uxtb	r2, r3
 8005ad6:	4908      	ldr	r1, [pc, #32]	; (8005af8 <__NVIC_SetPriority+0x50>)
 8005ad8:	79fb      	ldrb	r3, [r7, #7]
 8005ada:	f003 030f 	and.w	r3, r3, #15
 8005ade:	3b04      	subs	r3, #4
 8005ae0:	0112      	lsls	r2, r2, #4
 8005ae2:	b2d2      	uxtb	r2, r2
 8005ae4:	440b      	add	r3, r1
 8005ae6:	761a      	strb	r2, [r3, #24]
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr
 8005af4:	e000e100 	.word	0xe000e100
 8005af8:	e000ed00 	.word	0xe000ed00

08005afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b089      	sub	sp, #36	; 0x24
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f003 0307 	and.w	r3, r3, #7
 8005b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	f1c3 0307 	rsb	r3, r3, #7
 8005b16:	2b04      	cmp	r3, #4
 8005b18:	bf28      	it	cs
 8005b1a:	2304      	movcs	r3, #4
 8005b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	3304      	adds	r3, #4
 8005b22:	2b06      	cmp	r3, #6
 8005b24:	d902      	bls.n	8005b2c <NVIC_EncodePriority+0x30>
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	3b03      	subs	r3, #3
 8005b2a:	e000      	b.n	8005b2e <NVIC_EncodePriority+0x32>
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b30:	f04f 32ff 	mov.w	r2, #4294967295
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3a:	43da      	mvns	r2, r3
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	401a      	ands	r2, r3
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b44:	f04f 31ff 	mov.w	r1, #4294967295
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b4e:	43d9      	mvns	r1, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b54:	4313      	orrs	r3, r2
         );
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3724      	adds	r7, #36	; 0x24
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
	...

08005b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b74:	d301      	bcc.n	8005b7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b76:	2301      	movs	r3, #1
 8005b78:	e00f      	b.n	8005b9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b7a:	4a0a      	ldr	r2, [pc, #40]	; (8005ba4 <SysTick_Config+0x40>)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b82:	210f      	movs	r1, #15
 8005b84:	f04f 30ff 	mov.w	r0, #4294967295
 8005b88:	f7ff ff8e 	bl	8005aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b8c:	4b05      	ldr	r3, [pc, #20]	; (8005ba4 <SysTick_Config+0x40>)
 8005b8e:	2200      	movs	r2, #0
 8005b90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b92:	4b04      	ldr	r3, [pc, #16]	; (8005ba4 <SysTick_Config+0x40>)
 8005b94:	2207      	movs	r2, #7
 8005b96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	e000e010 	.word	0xe000e010

08005ba8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f7ff ff29 	bl	8005a08 <__NVIC_SetPriorityGrouping>
}
 8005bb6:	bf00      	nop
 8005bb8:	3708      	adds	r7, #8
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b086      	sub	sp, #24
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	60b9      	str	r1, [r7, #8]
 8005bc8:	607a      	str	r2, [r7, #4]
 8005bca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005bd0:	f7ff ff3e 	bl	8005a50 <__NVIC_GetPriorityGrouping>
 8005bd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	68b9      	ldr	r1, [r7, #8]
 8005bda:	6978      	ldr	r0, [r7, #20]
 8005bdc:	f7ff ff8e 	bl	8005afc <NVIC_EncodePriority>
 8005be0:	4602      	mov	r2, r0
 8005be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005be6:	4611      	mov	r1, r2
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7ff ff5d 	bl	8005aa8 <__NVIC_SetPriority>
}
 8005bee:	bf00      	nop
 8005bf0:	3718      	adds	r7, #24
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b082      	sub	sp, #8
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c04:	4618      	mov	r0, r3
 8005c06:	f7ff ff31 	bl	8005a6c <__NVIC_EnableIRQ>
}
 8005c0a:	bf00      	nop
 8005c0c:	3708      	adds	r7, #8
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b082      	sub	sp, #8
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f7ff ffa2 	bl	8005b64 <SysTick_Config>
 8005c20:	4603      	mov	r3, r0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3708      	adds	r7, #8
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
	...

08005c2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b086      	sub	sp, #24
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005c34:	2300      	movs	r3, #0
 8005c36:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005c38:	f7ff fb26 	bl	8005288 <HAL_GetTick>
 8005c3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d101      	bne.n	8005c48 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e099      	b.n	8005d7c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f022 0201 	bic.w	r2, r2, #1
 8005c66:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c68:	e00f      	b.n	8005c8a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c6a:	f7ff fb0d 	bl	8005288 <HAL_GetTick>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	2b05      	cmp	r3, #5
 8005c76:	d908      	bls.n	8005c8a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2220      	movs	r2, #32
 8005c7c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2203      	movs	r2, #3
 8005c82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e078      	b.n	8005d7c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 0301 	and.w	r3, r3, #1
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d1e8      	bne.n	8005c6a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	4b38      	ldr	r3, [pc, #224]	; (8005d84 <HAL_DMA_Init+0x158>)
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685a      	ldr	r2, [r3, #4]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005cb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a1b      	ldr	r3, [r3, #32]
 8005cd4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce0:	2b04      	cmp	r3, #4
 8005ce2:	d107      	bne.n	8005cf4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cec:	4313      	orrs	r3, r2
 8005cee:	697a      	ldr	r2, [r7, #20]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	f023 0307 	bic.w	r3, r3, #7
 8005d0a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d10:	697a      	ldr	r2, [r7, #20]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1a:	2b04      	cmp	r3, #4
 8005d1c:	d117      	bne.n	8005d4e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d22:	697a      	ldr	r2, [r7, #20]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00e      	beq.n	8005d4e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 faa5 	bl	8006280 <DMA_CheckFifoParam>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d008      	beq.n	8005d4e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2240      	movs	r2, #64	; 0x40
 8005d40:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e016      	b.n	8005d7c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 fa5c 	bl	8006214 <DMA_CalcBaseAndBitshift>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d64:	223f      	movs	r2, #63	; 0x3f
 8005d66:	409a      	lsls	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3718      	adds	r7, #24
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	e010803f 	.word	0xe010803f

08005d88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b086      	sub	sp, #24
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]
 8005d94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d96:	2300      	movs	r3, #0
 8005d98:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d9e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d101      	bne.n	8005dae <HAL_DMA_Start_IT+0x26>
 8005daa:	2302      	movs	r3, #2
 8005dac:	e048      	b.n	8005e40 <HAL_DMA_Start_IT+0xb8>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d137      	bne.n	8005e32 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2202      	movs	r2, #2
 8005dc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	68b9      	ldr	r1, [r7, #8]
 8005dd6:	68f8      	ldr	r0, [r7, #12]
 8005dd8:	f000 f9ee 	bl	80061b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005de0:	223f      	movs	r2, #63	; 0x3f
 8005de2:	409a      	lsls	r2, r3
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f042 0216 	orr.w	r2, r2, #22
 8005df6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	695a      	ldr	r2, [r3, #20]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005e06:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d007      	beq.n	8005e20 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f042 0208 	orr.w	r2, r2, #8
 8005e1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f042 0201 	orr.w	r2, r2, #1
 8005e2e:	601a      	str	r2, [r3, #0]
 8005e30:	e005      	b.n	8005e3e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005e3a:	2302      	movs	r3, #2
 8005e3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3718      	adds	r7, #24
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d004      	beq.n	8005e66 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2280      	movs	r2, #128	; 0x80
 8005e60:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e00c      	b.n	8005e80 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2205      	movs	r2, #5
 8005e6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f022 0201 	bic.w	r2, r2, #1
 8005e7c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b086      	sub	sp, #24
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005e94:	2300      	movs	r3, #0
 8005e96:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8005e98:	4b8e      	ldr	r3, [pc, #568]	; (80060d4 <HAL_DMA_IRQHandler+0x248>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a8e      	ldr	r2, [pc, #568]	; (80060d8 <HAL_DMA_IRQHandler+0x24c>)
 8005e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea2:	0a9b      	lsrs	r3, r3, #10
 8005ea4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eaa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eb6:	2208      	movs	r2, #8
 8005eb8:	409a      	lsls	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d01a      	beq.n	8005ef8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 0304 	and.w	r3, r3, #4
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d013      	beq.n	8005ef8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f022 0204 	bic.w	r2, r2, #4
 8005ede:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ee4:	2208      	movs	r2, #8
 8005ee6:	409a      	lsls	r2, r3
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ef0:	f043 0201 	orr.w	r2, r3, #1
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005efc:	2201      	movs	r2, #1
 8005efe:	409a      	lsls	r2, r3
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	4013      	ands	r3, r2
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d012      	beq.n	8005f2e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00b      	beq.n	8005f2e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	409a      	lsls	r2, r3
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f26:	f043 0202 	orr.w	r2, r3, #2
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f32:	2204      	movs	r2, #4
 8005f34:	409a      	lsls	r2, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	4013      	ands	r3, r2
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d012      	beq.n	8005f64 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0302 	and.w	r3, r3, #2
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00b      	beq.n	8005f64 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f50:	2204      	movs	r2, #4
 8005f52:	409a      	lsls	r2, r3
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f5c:	f043 0204 	orr.w	r2, r3, #4
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f68:	2210      	movs	r2, #16
 8005f6a:	409a      	lsls	r2, r3
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	4013      	ands	r3, r2
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d043      	beq.n	8005ffc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 0308 	and.w	r3, r3, #8
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d03c      	beq.n	8005ffc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f86:	2210      	movs	r2, #16
 8005f88:	409a      	lsls	r2, r3
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d018      	beq.n	8005fce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d108      	bne.n	8005fbc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d024      	beq.n	8005ffc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	4798      	blx	r3
 8005fba:	e01f      	b.n	8005ffc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d01b      	beq.n	8005ffc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	4798      	blx	r3
 8005fcc:	e016      	b.n	8005ffc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d107      	bne.n	8005fec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f022 0208 	bic.w	r2, r2, #8
 8005fea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d003      	beq.n	8005ffc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006000:	2220      	movs	r2, #32
 8006002:	409a      	lsls	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	4013      	ands	r3, r2
 8006008:	2b00      	cmp	r3, #0
 800600a:	f000 808f 	beq.w	800612c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0310 	and.w	r3, r3, #16
 8006018:	2b00      	cmp	r3, #0
 800601a:	f000 8087 	beq.w	800612c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006022:	2220      	movs	r2, #32
 8006024:	409a      	lsls	r2, r3
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2b05      	cmp	r3, #5
 8006034:	d136      	bne.n	80060a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f022 0216 	bic.w	r2, r2, #22
 8006044:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	695a      	ldr	r2, [r3, #20]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006054:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605a:	2b00      	cmp	r3, #0
 800605c:	d103      	bne.n	8006066 <HAL_DMA_IRQHandler+0x1da>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006062:	2b00      	cmp	r3, #0
 8006064:	d007      	beq.n	8006076 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f022 0208 	bic.w	r2, r2, #8
 8006074:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800607a:	223f      	movs	r2, #63	; 0x3f
 800607c:	409a      	lsls	r2, r3
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006096:	2b00      	cmp	r3, #0
 8006098:	d07e      	beq.n	8006198 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	4798      	blx	r3
        }
        return;
 80060a2:	e079      	b.n	8006198 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d01d      	beq.n	80060ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10d      	bne.n	80060dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d031      	beq.n	800612c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	4798      	blx	r3
 80060d0:	e02c      	b.n	800612c <HAL_DMA_IRQHandler+0x2a0>
 80060d2:	bf00      	nop
 80060d4:	20000004 	.word	0x20000004
 80060d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d023      	beq.n	800612c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	4798      	blx	r3
 80060ec:	e01e      	b.n	800612c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d10f      	bne.n	800611c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f022 0210 	bic.w	r2, r2, #16
 800610a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006120:	2b00      	cmp	r3, #0
 8006122:	d003      	beq.n	800612c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006130:	2b00      	cmp	r3, #0
 8006132:	d032      	beq.n	800619a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006138:	f003 0301 	and.w	r3, r3, #1
 800613c:	2b00      	cmp	r3, #0
 800613e:	d022      	beq.n	8006186 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2205      	movs	r2, #5
 8006144:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f022 0201 	bic.w	r2, r2, #1
 8006156:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	3301      	adds	r3, #1
 800615c:	60bb      	str	r3, [r7, #8]
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	429a      	cmp	r2, r3
 8006162:	d307      	bcc.n	8006174 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 0301 	and.w	r3, r3, #1
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1f2      	bne.n	8006158 <HAL_DMA_IRQHandler+0x2cc>
 8006172:	e000      	b.n	8006176 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006174:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800618a:	2b00      	cmp	r3, #0
 800618c:	d005      	beq.n	800619a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	4798      	blx	r3
 8006196:	e000      	b.n	800619a <HAL_DMA_IRQHandler+0x30e>
        return;
 8006198:	bf00      	nop
    }
  }
}
 800619a:	3718      	adds	r7, #24
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
 80061c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80061d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	683a      	ldr	r2, [r7, #0]
 80061dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	2b40      	cmp	r3, #64	; 0x40
 80061e4:	d108      	bne.n	80061f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68ba      	ldr	r2, [r7, #8]
 80061f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80061f6:	e007      	b.n	8006208 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68ba      	ldr	r2, [r7, #8]
 80061fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	60da      	str	r2, [r3, #12]
}
 8006208:	bf00      	nop
 800620a:	3714      	adds	r7, #20
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	b2db      	uxtb	r3, r3
 8006222:	3b10      	subs	r3, #16
 8006224:	4a13      	ldr	r2, [pc, #76]	; (8006274 <DMA_CalcBaseAndBitshift+0x60>)
 8006226:	fba2 2303 	umull	r2, r3, r2, r3
 800622a:	091b      	lsrs	r3, r3, #4
 800622c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800622e:	4a12      	ldr	r2, [pc, #72]	; (8006278 <DMA_CalcBaseAndBitshift+0x64>)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	4413      	add	r3, r2
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	461a      	mov	r2, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2b03      	cmp	r3, #3
 8006240:	d908      	bls.n	8006254 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	461a      	mov	r2, r3
 8006248:	4b0c      	ldr	r3, [pc, #48]	; (800627c <DMA_CalcBaseAndBitshift+0x68>)
 800624a:	4013      	ands	r3, r2
 800624c:	1d1a      	adds	r2, r3, #4
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	659a      	str	r2, [r3, #88]	; 0x58
 8006252:	e006      	b.n	8006262 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	461a      	mov	r2, r3
 800625a:	4b08      	ldr	r3, [pc, #32]	; (800627c <DMA_CalcBaseAndBitshift+0x68>)
 800625c:	4013      	ands	r3, r2
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006266:	4618      	mov	r0, r3
 8006268:	3714      	adds	r7, #20
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	aaaaaaab 	.word	0xaaaaaaab
 8006278:	08014c8c 	.word	0x08014c8c
 800627c:	fffffc00 	.word	0xfffffc00

08006280 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006280:	b480      	push	{r7}
 8006282:	b085      	sub	sp, #20
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006288:	2300      	movs	r3, #0
 800628a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006290:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	699b      	ldr	r3, [r3, #24]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d11f      	bne.n	80062da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	2b03      	cmp	r3, #3
 800629e:	d856      	bhi.n	800634e <DMA_CheckFifoParam+0xce>
 80062a0:	a201      	add	r2, pc, #4	; (adr r2, 80062a8 <DMA_CheckFifoParam+0x28>)
 80062a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a6:	bf00      	nop
 80062a8:	080062b9 	.word	0x080062b9
 80062ac:	080062cb 	.word	0x080062cb
 80062b0:	080062b9 	.word	0x080062b9
 80062b4:	0800634f 	.word	0x0800634f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d046      	beq.n	8006352 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062c8:	e043      	b.n	8006352 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80062d2:	d140      	bne.n	8006356 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062d8:	e03d      	b.n	8006356 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062e2:	d121      	bne.n	8006328 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	2b03      	cmp	r3, #3
 80062e8:	d837      	bhi.n	800635a <DMA_CheckFifoParam+0xda>
 80062ea:	a201      	add	r2, pc, #4	; (adr r2, 80062f0 <DMA_CheckFifoParam+0x70>)
 80062ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f0:	08006301 	.word	0x08006301
 80062f4:	08006307 	.word	0x08006307
 80062f8:	08006301 	.word	0x08006301
 80062fc:	08006319 	.word	0x08006319
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	73fb      	strb	r3, [r7, #15]
      break;
 8006304:	e030      	b.n	8006368 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800630a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d025      	beq.n	800635e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006316:	e022      	b.n	800635e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800631c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006320:	d11f      	bne.n	8006362 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006326:	e01c      	b.n	8006362 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	2b02      	cmp	r3, #2
 800632c:	d903      	bls.n	8006336 <DMA_CheckFifoParam+0xb6>
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	2b03      	cmp	r3, #3
 8006332:	d003      	beq.n	800633c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006334:	e018      	b.n	8006368 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	73fb      	strb	r3, [r7, #15]
      break;
 800633a:	e015      	b.n	8006368 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006340:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00e      	beq.n	8006366 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	73fb      	strb	r3, [r7, #15]
      break;
 800634c:	e00b      	b.n	8006366 <DMA_CheckFifoParam+0xe6>
      break;
 800634e:	bf00      	nop
 8006350:	e00a      	b.n	8006368 <DMA_CheckFifoParam+0xe8>
      break;
 8006352:	bf00      	nop
 8006354:	e008      	b.n	8006368 <DMA_CheckFifoParam+0xe8>
      break;
 8006356:	bf00      	nop
 8006358:	e006      	b.n	8006368 <DMA_CheckFifoParam+0xe8>
      break;
 800635a:	bf00      	nop
 800635c:	e004      	b.n	8006368 <DMA_CheckFifoParam+0xe8>
      break;
 800635e:	bf00      	nop
 8006360:	e002      	b.n	8006368 <DMA_CheckFifoParam+0xe8>
      break;   
 8006362:	bf00      	nop
 8006364:	e000      	b.n	8006368 <DMA_CheckFifoParam+0xe8>
      break;
 8006366:	bf00      	nop
    }
  } 
  
  return status; 
 8006368:	7bfb      	ldrb	r3, [r7, #15]
}
 800636a:	4618      	mov	r0, r3
 800636c:	3714      	adds	r7, #20
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop

08006378 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006378:	b480      	push	{r7}
 800637a:	b089      	sub	sp, #36	; 0x24
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006382:	2300      	movs	r3, #0
 8006384:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006386:	2300      	movs	r3, #0
 8006388:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800638a:	2300      	movs	r3, #0
 800638c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800638e:	2300      	movs	r3, #0
 8006390:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006392:	2300      	movs	r3, #0
 8006394:	61fb      	str	r3, [r7, #28]
 8006396:	e175      	b.n	8006684 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006398:	2201      	movs	r2, #1
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	fa02 f303 	lsl.w	r3, r2, r3
 80063a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	697a      	ldr	r2, [r7, #20]
 80063a8:	4013      	ands	r3, r2
 80063aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	f040 8164 	bne.w	800667e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	f003 0303 	and.w	r3, r3, #3
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d005      	beq.n	80063ce <HAL_GPIO_Init+0x56>
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	f003 0303 	and.w	r3, r3, #3
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d130      	bne.n	8006430 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	005b      	lsls	r3, r3, #1
 80063d8:	2203      	movs	r2, #3
 80063da:	fa02 f303 	lsl.w	r3, r2, r3
 80063de:	43db      	mvns	r3, r3
 80063e0:	69ba      	ldr	r2, [r7, #24]
 80063e2:	4013      	ands	r3, r2
 80063e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	68da      	ldr	r2, [r3, #12]
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	005b      	lsls	r3, r3, #1
 80063ee:	fa02 f303 	lsl.w	r3, r2, r3
 80063f2:	69ba      	ldr	r2, [r7, #24]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	69ba      	ldr	r2, [r7, #24]
 80063fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006404:	2201      	movs	r2, #1
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	fa02 f303 	lsl.w	r3, r2, r3
 800640c:	43db      	mvns	r3, r3
 800640e:	69ba      	ldr	r2, [r7, #24]
 8006410:	4013      	ands	r3, r2
 8006412:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	091b      	lsrs	r3, r3, #4
 800641a:	f003 0201 	and.w	r2, r3, #1
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	fa02 f303 	lsl.w	r3, r2, r3
 8006424:	69ba      	ldr	r2, [r7, #24]
 8006426:	4313      	orrs	r3, r2
 8006428:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	69ba      	ldr	r2, [r7, #24]
 800642e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	f003 0303 	and.w	r3, r3, #3
 8006438:	2b03      	cmp	r3, #3
 800643a:	d017      	beq.n	800646c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	005b      	lsls	r3, r3, #1
 8006446:	2203      	movs	r2, #3
 8006448:	fa02 f303 	lsl.w	r3, r2, r3
 800644c:	43db      	mvns	r3, r3
 800644e:	69ba      	ldr	r2, [r7, #24]
 8006450:	4013      	ands	r3, r2
 8006452:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	689a      	ldr	r2, [r3, #8]
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	005b      	lsls	r3, r3, #1
 800645c:	fa02 f303 	lsl.w	r3, r2, r3
 8006460:	69ba      	ldr	r2, [r7, #24]
 8006462:	4313      	orrs	r3, r2
 8006464:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	69ba      	ldr	r2, [r7, #24]
 800646a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	f003 0303 	and.w	r3, r3, #3
 8006474:	2b02      	cmp	r3, #2
 8006476:	d123      	bne.n	80064c0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	08da      	lsrs	r2, r3, #3
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	3208      	adds	r2, #8
 8006480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	f003 0307 	and.w	r3, r3, #7
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	220f      	movs	r2, #15
 8006490:	fa02 f303 	lsl.w	r3, r2, r3
 8006494:	43db      	mvns	r3, r3
 8006496:	69ba      	ldr	r2, [r7, #24]
 8006498:	4013      	ands	r3, r2
 800649a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	691a      	ldr	r2, [r3, #16]
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	f003 0307 	and.w	r3, r3, #7
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	fa02 f303 	lsl.w	r3, r2, r3
 80064ac:	69ba      	ldr	r2, [r7, #24]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	08da      	lsrs	r2, r3, #3
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	3208      	adds	r2, #8
 80064ba:	69b9      	ldr	r1, [r7, #24]
 80064bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	005b      	lsls	r3, r3, #1
 80064ca:	2203      	movs	r2, #3
 80064cc:	fa02 f303 	lsl.w	r3, r2, r3
 80064d0:	43db      	mvns	r3, r3
 80064d2:	69ba      	ldr	r2, [r7, #24]
 80064d4:	4013      	ands	r3, r2
 80064d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	f003 0203 	and.w	r2, r3, #3
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	005b      	lsls	r3, r3, #1
 80064e4:	fa02 f303 	lsl.w	r3, r2, r3
 80064e8:	69ba      	ldr	r2, [r7, #24]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	69ba      	ldr	r2, [r7, #24]
 80064f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f000 80be 	beq.w	800667e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006502:	4b66      	ldr	r3, [pc, #408]	; (800669c <HAL_GPIO_Init+0x324>)
 8006504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006506:	4a65      	ldr	r2, [pc, #404]	; (800669c <HAL_GPIO_Init+0x324>)
 8006508:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800650c:	6453      	str	r3, [r2, #68]	; 0x44
 800650e:	4b63      	ldr	r3, [pc, #396]	; (800669c <HAL_GPIO_Init+0x324>)
 8006510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006516:	60fb      	str	r3, [r7, #12]
 8006518:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800651a:	4a61      	ldr	r2, [pc, #388]	; (80066a0 <HAL_GPIO_Init+0x328>)
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	089b      	lsrs	r3, r3, #2
 8006520:	3302      	adds	r3, #2
 8006522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006526:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	f003 0303 	and.w	r3, r3, #3
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	220f      	movs	r2, #15
 8006532:	fa02 f303 	lsl.w	r3, r2, r3
 8006536:	43db      	mvns	r3, r3
 8006538:	69ba      	ldr	r2, [r7, #24]
 800653a:	4013      	ands	r3, r2
 800653c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a58      	ldr	r2, [pc, #352]	; (80066a4 <HAL_GPIO_Init+0x32c>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d037      	beq.n	80065b6 <HAL_GPIO_Init+0x23e>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a57      	ldr	r2, [pc, #348]	; (80066a8 <HAL_GPIO_Init+0x330>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d031      	beq.n	80065b2 <HAL_GPIO_Init+0x23a>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a56      	ldr	r2, [pc, #344]	; (80066ac <HAL_GPIO_Init+0x334>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d02b      	beq.n	80065ae <HAL_GPIO_Init+0x236>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a55      	ldr	r2, [pc, #340]	; (80066b0 <HAL_GPIO_Init+0x338>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d025      	beq.n	80065aa <HAL_GPIO_Init+0x232>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a54      	ldr	r2, [pc, #336]	; (80066b4 <HAL_GPIO_Init+0x33c>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d01f      	beq.n	80065a6 <HAL_GPIO_Init+0x22e>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a53      	ldr	r2, [pc, #332]	; (80066b8 <HAL_GPIO_Init+0x340>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d019      	beq.n	80065a2 <HAL_GPIO_Init+0x22a>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a52      	ldr	r2, [pc, #328]	; (80066bc <HAL_GPIO_Init+0x344>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d013      	beq.n	800659e <HAL_GPIO_Init+0x226>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a51      	ldr	r2, [pc, #324]	; (80066c0 <HAL_GPIO_Init+0x348>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d00d      	beq.n	800659a <HAL_GPIO_Init+0x222>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a50      	ldr	r2, [pc, #320]	; (80066c4 <HAL_GPIO_Init+0x34c>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d007      	beq.n	8006596 <HAL_GPIO_Init+0x21e>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a4f      	ldr	r2, [pc, #316]	; (80066c8 <HAL_GPIO_Init+0x350>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d101      	bne.n	8006592 <HAL_GPIO_Init+0x21a>
 800658e:	2309      	movs	r3, #9
 8006590:	e012      	b.n	80065b8 <HAL_GPIO_Init+0x240>
 8006592:	230a      	movs	r3, #10
 8006594:	e010      	b.n	80065b8 <HAL_GPIO_Init+0x240>
 8006596:	2308      	movs	r3, #8
 8006598:	e00e      	b.n	80065b8 <HAL_GPIO_Init+0x240>
 800659a:	2307      	movs	r3, #7
 800659c:	e00c      	b.n	80065b8 <HAL_GPIO_Init+0x240>
 800659e:	2306      	movs	r3, #6
 80065a0:	e00a      	b.n	80065b8 <HAL_GPIO_Init+0x240>
 80065a2:	2305      	movs	r3, #5
 80065a4:	e008      	b.n	80065b8 <HAL_GPIO_Init+0x240>
 80065a6:	2304      	movs	r3, #4
 80065a8:	e006      	b.n	80065b8 <HAL_GPIO_Init+0x240>
 80065aa:	2303      	movs	r3, #3
 80065ac:	e004      	b.n	80065b8 <HAL_GPIO_Init+0x240>
 80065ae:	2302      	movs	r3, #2
 80065b0:	e002      	b.n	80065b8 <HAL_GPIO_Init+0x240>
 80065b2:	2301      	movs	r3, #1
 80065b4:	e000      	b.n	80065b8 <HAL_GPIO_Init+0x240>
 80065b6:	2300      	movs	r3, #0
 80065b8:	69fa      	ldr	r2, [r7, #28]
 80065ba:	f002 0203 	and.w	r2, r2, #3
 80065be:	0092      	lsls	r2, r2, #2
 80065c0:	4093      	lsls	r3, r2
 80065c2:	69ba      	ldr	r2, [r7, #24]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80065c8:	4935      	ldr	r1, [pc, #212]	; (80066a0 <HAL_GPIO_Init+0x328>)
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	089b      	lsrs	r3, r3, #2
 80065ce:	3302      	adds	r3, #2
 80065d0:	69ba      	ldr	r2, [r7, #24]
 80065d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80065d6:	4b3d      	ldr	r3, [pc, #244]	; (80066cc <HAL_GPIO_Init+0x354>)
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	43db      	mvns	r3, r3
 80065e0:	69ba      	ldr	r2, [r7, #24]
 80065e2:	4013      	ands	r3, r2
 80065e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d003      	beq.n	80065fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80065f2:	69ba      	ldr	r2, [r7, #24]
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80065fa:	4a34      	ldr	r2, [pc, #208]	; (80066cc <HAL_GPIO_Init+0x354>)
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006600:	4b32      	ldr	r3, [pc, #200]	; (80066cc <HAL_GPIO_Init+0x354>)
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	43db      	mvns	r3, r3
 800660a:	69ba      	ldr	r2, [r7, #24]
 800660c:	4013      	ands	r3, r2
 800660e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006618:	2b00      	cmp	r3, #0
 800661a:	d003      	beq.n	8006624 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800661c:	69ba      	ldr	r2, [r7, #24]
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	4313      	orrs	r3, r2
 8006622:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006624:	4a29      	ldr	r2, [pc, #164]	; (80066cc <HAL_GPIO_Init+0x354>)
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800662a:	4b28      	ldr	r3, [pc, #160]	; (80066cc <HAL_GPIO_Init+0x354>)
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	43db      	mvns	r3, r3
 8006634:	69ba      	ldr	r2, [r7, #24]
 8006636:	4013      	ands	r3, r2
 8006638:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d003      	beq.n	800664e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006646:	69ba      	ldr	r2, [r7, #24]
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	4313      	orrs	r3, r2
 800664c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800664e:	4a1f      	ldr	r2, [pc, #124]	; (80066cc <HAL_GPIO_Init+0x354>)
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006654:	4b1d      	ldr	r3, [pc, #116]	; (80066cc <HAL_GPIO_Init+0x354>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	43db      	mvns	r3, r3
 800665e:	69ba      	ldr	r2, [r7, #24]
 8006660:	4013      	ands	r3, r2
 8006662:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800666c:	2b00      	cmp	r3, #0
 800666e:	d003      	beq.n	8006678 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006670:	69ba      	ldr	r2, [r7, #24]
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	4313      	orrs	r3, r2
 8006676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006678:	4a14      	ldr	r2, [pc, #80]	; (80066cc <HAL_GPIO_Init+0x354>)
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	3301      	adds	r3, #1
 8006682:	61fb      	str	r3, [r7, #28]
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	2b0f      	cmp	r3, #15
 8006688:	f67f ae86 	bls.w	8006398 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800668c:	bf00      	nop
 800668e:	bf00      	nop
 8006690:	3724      	adds	r7, #36	; 0x24
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	40023800 	.word	0x40023800
 80066a0:	40013800 	.word	0x40013800
 80066a4:	40020000 	.word	0x40020000
 80066a8:	40020400 	.word	0x40020400
 80066ac:	40020800 	.word	0x40020800
 80066b0:	40020c00 	.word	0x40020c00
 80066b4:	40021000 	.word	0x40021000
 80066b8:	40021400 	.word	0x40021400
 80066bc:	40021800 	.word	0x40021800
 80066c0:	40021c00 	.word	0x40021c00
 80066c4:	40022000 	.word	0x40022000
 80066c8:	40022400 	.word	0x40022400
 80066cc:	40013c00 	.word	0x40013c00

080066d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d101      	bne.n	80066e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e07f      	b.n	80067e2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d106      	bne.n	80066fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f7fd faac 	bl	8003c54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2224      	movs	r2, #36	; 0x24
 8006700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f022 0201 	bic.w	r2, r2, #1
 8006712:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	685a      	ldr	r2, [r3, #4]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006720:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	689a      	ldr	r2, [r3, #8]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006730:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	2b01      	cmp	r3, #1
 8006738:	d107      	bne.n	800674a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	689a      	ldr	r2, [r3, #8]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006746:	609a      	str	r2, [r3, #8]
 8006748:	e006      	b.n	8006758 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	689a      	ldr	r2, [r3, #8]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006756:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	2b02      	cmp	r3, #2
 800675e:	d104      	bne.n	800676a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006768:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	6859      	ldr	r1, [r3, #4]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	4b1d      	ldr	r3, [pc, #116]	; (80067ec <HAL_I2C_Init+0x11c>)
 8006776:	430b      	orrs	r3, r1
 8006778:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68da      	ldr	r2, [r3, #12]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006788:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	691a      	ldr	r2, [r3, #16]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	699b      	ldr	r3, [r3, #24]
 800679a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	430a      	orrs	r2, r1
 80067a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	69d9      	ldr	r1, [r3, #28]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a1a      	ldr	r2, [r3, #32]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	430a      	orrs	r2, r1
 80067b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f042 0201 	orr.w	r2, r2, #1
 80067c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2220      	movs	r2, #32
 80067ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3708      	adds	r7, #8
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	02008000 	.word	0x02008000

080067f0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b088      	sub	sp, #32
 80067f4:	af02      	add	r7, sp, #8
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	607a      	str	r2, [r7, #4]
 80067fa:	461a      	mov	r2, r3
 80067fc:	460b      	mov	r3, r1
 80067fe:	817b      	strh	r3, [r7, #10]
 8006800:	4613      	mov	r3, r2
 8006802:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800680a:	b2db      	uxtb	r3, r3
 800680c:	2b20      	cmp	r3, #32
 800680e:	f040 80da 	bne.w	80069c6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006818:	2b01      	cmp	r3, #1
 800681a:	d101      	bne.n	8006820 <HAL_I2C_Master_Transmit+0x30>
 800681c:	2302      	movs	r3, #2
 800681e:	e0d3      	b.n	80069c8 <HAL_I2C_Master_Transmit+0x1d8>
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006828:	f7fe fd2e 	bl	8005288 <HAL_GetTick>
 800682c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	9300      	str	r3, [sp, #0]
 8006832:	2319      	movs	r3, #25
 8006834:	2201      	movs	r2, #1
 8006836:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	f000 fdc4 	bl	80073c8 <I2C_WaitOnFlagUntilTimeout>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d001      	beq.n	800684a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e0be      	b.n	80069c8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2221      	movs	r2, #33	; 0x21
 800684e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2210      	movs	r2, #16
 8006856:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2200      	movs	r2, #0
 800685e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	893a      	ldrh	r2, [r7, #8]
 800686a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2200      	movs	r2, #0
 8006870:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006876:	b29b      	uxth	r3, r3
 8006878:	2bff      	cmp	r3, #255	; 0xff
 800687a:	d90e      	bls.n	800689a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	22ff      	movs	r2, #255	; 0xff
 8006880:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006886:	b2da      	uxtb	r2, r3
 8006888:	8979      	ldrh	r1, [r7, #10]
 800688a:	4b51      	ldr	r3, [pc, #324]	; (80069d0 <HAL_I2C_Master_Transmit+0x1e0>)
 800688c:	9300      	str	r3, [sp, #0]
 800688e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006892:	68f8      	ldr	r0, [r7, #12]
 8006894:	f000 ffba 	bl	800780c <I2C_TransferConfig>
 8006898:	e06c      	b.n	8006974 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800689e:	b29a      	uxth	r2, r3
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068a8:	b2da      	uxtb	r2, r3
 80068aa:	8979      	ldrh	r1, [r7, #10]
 80068ac:	4b48      	ldr	r3, [pc, #288]	; (80069d0 <HAL_I2C_Master_Transmit+0x1e0>)
 80068ae:	9300      	str	r3, [sp, #0]
 80068b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	f000 ffa9 	bl	800780c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80068ba:	e05b      	b.n	8006974 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068bc:	697a      	ldr	r2, [r7, #20]
 80068be:	6a39      	ldr	r1, [r7, #32]
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f000 fdc1 	bl	8007448 <I2C_WaitOnTXISFlagUntilTimeout>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d001      	beq.n	80068d0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e07b      	b.n	80069c8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d4:	781a      	ldrb	r2, [r3, #0]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e0:	1c5a      	adds	r2, r3, #1
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	3b01      	subs	r3, #1
 80068ee:	b29a      	uxth	r2, r3
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068f8:	3b01      	subs	r3, #1
 80068fa:	b29a      	uxth	r2, r3
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006904:	b29b      	uxth	r3, r3
 8006906:	2b00      	cmp	r3, #0
 8006908:	d034      	beq.n	8006974 <HAL_I2C_Master_Transmit+0x184>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800690e:	2b00      	cmp	r3, #0
 8006910:	d130      	bne.n	8006974 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	9300      	str	r3, [sp, #0]
 8006916:	6a3b      	ldr	r3, [r7, #32]
 8006918:	2200      	movs	r2, #0
 800691a:	2180      	movs	r1, #128	; 0x80
 800691c:	68f8      	ldr	r0, [r7, #12]
 800691e:	f000 fd53 	bl	80073c8 <I2C_WaitOnFlagUntilTimeout>
 8006922:	4603      	mov	r3, r0
 8006924:	2b00      	cmp	r3, #0
 8006926:	d001      	beq.n	800692c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e04d      	b.n	80069c8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006930:	b29b      	uxth	r3, r3
 8006932:	2bff      	cmp	r3, #255	; 0xff
 8006934:	d90e      	bls.n	8006954 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	22ff      	movs	r2, #255	; 0xff
 800693a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006940:	b2da      	uxtb	r2, r3
 8006942:	8979      	ldrh	r1, [r7, #10]
 8006944:	2300      	movs	r3, #0
 8006946:	9300      	str	r3, [sp, #0]
 8006948:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800694c:	68f8      	ldr	r0, [r7, #12]
 800694e:	f000 ff5d 	bl	800780c <I2C_TransferConfig>
 8006952:	e00f      	b.n	8006974 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006958:	b29a      	uxth	r2, r3
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006962:	b2da      	uxtb	r2, r3
 8006964:	8979      	ldrh	r1, [r7, #10]
 8006966:	2300      	movs	r3, #0
 8006968:	9300      	str	r3, [sp, #0]
 800696a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f000 ff4c 	bl	800780c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006978:	b29b      	uxth	r3, r3
 800697a:	2b00      	cmp	r3, #0
 800697c:	d19e      	bne.n	80068bc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800697e:	697a      	ldr	r2, [r7, #20]
 8006980:	6a39      	ldr	r1, [r7, #32]
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	f000 fda0 	bl	80074c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006988:	4603      	mov	r3, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d001      	beq.n	8006992 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e01a      	b.n	80069c8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2220      	movs	r2, #32
 8006998:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	6859      	ldr	r1, [r3, #4]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	4b0b      	ldr	r3, [pc, #44]	; (80069d4 <HAL_I2C_Master_Transmit+0x1e4>)
 80069a6:	400b      	ands	r3, r1
 80069a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2220      	movs	r2, #32
 80069ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80069c2:	2300      	movs	r3, #0
 80069c4:	e000      	b.n	80069c8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80069c6:	2302      	movs	r3, #2
  }
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3718      	adds	r7, #24
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}
 80069d0:	80002000 	.word	0x80002000
 80069d4:	fe00e800 	.word	0xfe00e800

080069d8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b088      	sub	sp, #32
 80069dc:	af02      	add	r7, sp, #8
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	607a      	str	r2, [r7, #4]
 80069e2:	461a      	mov	r2, r3
 80069e4:	460b      	mov	r3, r1
 80069e6:	817b      	strh	r3, [r7, #10]
 80069e8:	4613      	mov	r3, r2
 80069ea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	2b20      	cmp	r3, #32
 80069f6:	f040 80db 	bne.w	8006bb0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d101      	bne.n	8006a08 <HAL_I2C_Master_Receive+0x30>
 8006a04:	2302      	movs	r3, #2
 8006a06:	e0d4      	b.n	8006bb2 <HAL_I2C_Master_Receive+0x1da>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006a10:	f7fe fc3a 	bl	8005288 <HAL_GetTick>
 8006a14:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	9300      	str	r3, [sp, #0]
 8006a1a:	2319      	movs	r3, #25
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a22:	68f8      	ldr	r0, [r7, #12]
 8006a24:	f000 fcd0 	bl	80073c8 <I2C_WaitOnFlagUntilTimeout>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d001      	beq.n	8006a32 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e0bf      	b.n	8006bb2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2222      	movs	r2, #34	; 0x22
 8006a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2210      	movs	r2, #16
 8006a3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	893a      	ldrh	r2, [r7, #8]
 8006a52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2200      	movs	r2, #0
 8006a58:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	2bff      	cmp	r3, #255	; 0xff
 8006a62:	d90e      	bls.n	8006a82 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	22ff      	movs	r2, #255	; 0xff
 8006a68:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a6e:	b2da      	uxtb	r2, r3
 8006a70:	8979      	ldrh	r1, [r7, #10]
 8006a72:	4b52      	ldr	r3, [pc, #328]	; (8006bbc <HAL_I2C_Master_Receive+0x1e4>)
 8006a74:	9300      	str	r3, [sp, #0]
 8006a76:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f000 fec6 	bl	800780c <I2C_TransferConfig>
 8006a80:	e06d      	b.n	8006b5e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a86:	b29a      	uxth	r2, r3
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a90:	b2da      	uxtb	r2, r3
 8006a92:	8979      	ldrh	r1, [r7, #10]
 8006a94:	4b49      	ldr	r3, [pc, #292]	; (8006bbc <HAL_I2C_Master_Receive+0x1e4>)
 8006a96:	9300      	str	r3, [sp, #0]
 8006a98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a9c:	68f8      	ldr	r0, [r7, #12]
 8006a9e:	f000 feb5 	bl	800780c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006aa2:	e05c      	b.n	8006b5e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006aa4:	697a      	ldr	r2, [r7, #20]
 8006aa6:	6a39      	ldr	r1, [r7, #32]
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f000 fd49 	bl	8007540 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d001      	beq.n	8006ab8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e07c      	b.n	8006bb2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac2:	b2d2      	uxtb	r2, r2
 8006ac4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aca:	1c5a      	adds	r2, r3, #1
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ad4:	3b01      	subs	r3, #1
 8006ad6:	b29a      	uxth	r2, r3
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d034      	beq.n	8006b5e <HAL_I2C_Master_Receive+0x186>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d130      	bne.n	8006b5e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	9300      	str	r3, [sp, #0]
 8006b00:	6a3b      	ldr	r3, [r7, #32]
 8006b02:	2200      	movs	r2, #0
 8006b04:	2180      	movs	r1, #128	; 0x80
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	f000 fc5e 	bl	80073c8 <I2C_WaitOnFlagUntilTimeout>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d001      	beq.n	8006b16 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e04d      	b.n	8006bb2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	2bff      	cmp	r3, #255	; 0xff
 8006b1e:	d90e      	bls.n	8006b3e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	22ff      	movs	r2, #255	; 0xff
 8006b24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b2a:	b2da      	uxtb	r2, r3
 8006b2c:	8979      	ldrh	r1, [r7, #10]
 8006b2e:	2300      	movs	r3, #0
 8006b30:	9300      	str	r3, [sp, #0]
 8006b32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b36:	68f8      	ldr	r0, [r7, #12]
 8006b38:	f000 fe68 	bl	800780c <I2C_TransferConfig>
 8006b3c:	e00f      	b.n	8006b5e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b4c:	b2da      	uxtb	r2, r3
 8006b4e:	8979      	ldrh	r1, [r7, #10]
 8006b50:	2300      	movs	r3, #0
 8006b52:	9300      	str	r3, [sp, #0]
 8006b54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f000 fe57 	bl	800780c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d19d      	bne.n	8006aa4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b68:	697a      	ldr	r2, [r7, #20]
 8006b6a:	6a39      	ldr	r1, [r7, #32]
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f000 fcab 	bl	80074c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d001      	beq.n	8006b7c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e01a      	b.n	8006bb2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2220      	movs	r2, #32
 8006b82:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	6859      	ldr	r1, [r3, #4]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	4b0c      	ldr	r3, [pc, #48]	; (8006bc0 <HAL_I2C_Master_Receive+0x1e8>)
 8006b90:	400b      	ands	r3, r1
 8006b92:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2220      	movs	r2, #32
 8006b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006bac:	2300      	movs	r3, #0
 8006bae:	e000      	b.n	8006bb2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006bb0:	2302      	movs	r3, #2
  }
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3718      	adds	r7, #24
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	80002400 	.word	0x80002400
 8006bc0:	fe00e800 	.word	0xfe00e800

08006bc4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b088      	sub	sp, #32
 8006bc8:	af02      	add	r7, sp, #8
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	4608      	mov	r0, r1
 8006bce:	4611      	mov	r1, r2
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	817b      	strh	r3, [r7, #10]
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	813b      	strh	r3, [r7, #8]
 8006bda:	4613      	mov	r3, r2
 8006bdc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	2b20      	cmp	r3, #32
 8006be8:	f040 80f9 	bne.w	8006dde <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bec:	6a3b      	ldr	r3, [r7, #32]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d002      	beq.n	8006bf8 <HAL_I2C_Mem_Write+0x34>
 8006bf2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d105      	bne.n	8006c04 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bfe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e0ed      	b.n	8006de0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d101      	bne.n	8006c12 <HAL_I2C_Mem_Write+0x4e>
 8006c0e:	2302      	movs	r3, #2
 8006c10:	e0e6      	b.n	8006de0 <HAL_I2C_Mem_Write+0x21c>
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006c1a:	f7fe fb35 	bl	8005288 <HAL_GetTick>
 8006c1e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	9300      	str	r3, [sp, #0]
 8006c24:	2319      	movs	r3, #25
 8006c26:	2201      	movs	r2, #1
 8006c28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c2c:	68f8      	ldr	r0, [r7, #12]
 8006c2e:	f000 fbcb 	bl	80073c8 <I2C_WaitOnFlagUntilTimeout>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d001      	beq.n	8006c3c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e0d1      	b.n	8006de0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2221      	movs	r2, #33	; 0x21
 8006c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2240      	movs	r2, #64	; 0x40
 8006c48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6a3a      	ldr	r2, [r7, #32]
 8006c56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006c5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2200      	movs	r2, #0
 8006c62:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c64:	88f8      	ldrh	r0, [r7, #6]
 8006c66:	893a      	ldrh	r2, [r7, #8]
 8006c68:	8979      	ldrh	r1, [r7, #10]
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	9301      	str	r3, [sp, #4]
 8006c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c70:	9300      	str	r3, [sp, #0]
 8006c72:	4603      	mov	r3, r0
 8006c74:	68f8      	ldr	r0, [r7, #12]
 8006c76:	f000 fadb 	bl	8007230 <I2C_RequestMemoryWrite>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d005      	beq.n	8006c8c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e0a9      	b.n	8006de0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	2bff      	cmp	r3, #255	; 0xff
 8006c94:	d90e      	bls.n	8006cb4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	22ff      	movs	r2, #255	; 0xff
 8006c9a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ca0:	b2da      	uxtb	r2, r3
 8006ca2:	8979      	ldrh	r1, [r7, #10]
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	9300      	str	r3, [sp, #0]
 8006ca8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f000 fdad 	bl	800780c <I2C_TransferConfig>
 8006cb2:	e00f      	b.n	8006cd4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cc2:	b2da      	uxtb	r2, r3
 8006cc4:	8979      	ldrh	r1, [r7, #10]
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	9300      	str	r3, [sp, #0]
 8006cca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f000 fd9c 	bl	800780c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cd4:	697a      	ldr	r2, [r7, #20]
 8006cd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cd8:	68f8      	ldr	r0, [r7, #12]
 8006cda:	f000 fbb5 	bl	8007448 <I2C_WaitOnTXISFlagUntilTimeout>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d001      	beq.n	8006ce8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e07b      	b.n	8006de0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cec:	781a      	ldrb	r2, [r3, #0]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf8:	1c5a      	adds	r2, r3, #1
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	3b01      	subs	r3, #1
 8006d06:	b29a      	uxth	r2, r3
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d10:	3b01      	subs	r3, #1
 8006d12:	b29a      	uxth	r2, r3
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d034      	beq.n	8006d8c <HAL_I2C_Mem_Write+0x1c8>
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d130      	bne.n	8006d8c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	9300      	str	r3, [sp, #0]
 8006d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d30:	2200      	movs	r2, #0
 8006d32:	2180      	movs	r1, #128	; 0x80
 8006d34:	68f8      	ldr	r0, [r7, #12]
 8006d36:	f000 fb47 	bl	80073c8 <I2C_WaitOnFlagUntilTimeout>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d001      	beq.n	8006d44 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e04d      	b.n	8006de0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	2bff      	cmp	r3, #255	; 0xff
 8006d4c:	d90e      	bls.n	8006d6c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	22ff      	movs	r2, #255	; 0xff
 8006d52:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d58:	b2da      	uxtb	r2, r3
 8006d5a:	8979      	ldrh	r1, [r7, #10]
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	9300      	str	r3, [sp, #0]
 8006d60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f000 fd51 	bl	800780c <I2C_TransferConfig>
 8006d6a:	e00f      	b.n	8006d8c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d70:	b29a      	uxth	r2, r3
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d7a:	b2da      	uxtb	r2, r3
 8006d7c:	8979      	ldrh	r1, [r7, #10]
 8006d7e:	2300      	movs	r3, #0
 8006d80:	9300      	str	r3, [sp, #0]
 8006d82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f000 fd40 	bl	800780c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d19e      	bne.n	8006cd4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d96:	697a      	ldr	r2, [r7, #20]
 8006d98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d9a:	68f8      	ldr	r0, [r7, #12]
 8006d9c:	f000 fb94 	bl	80074c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d001      	beq.n	8006daa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e01a      	b.n	8006de0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2220      	movs	r2, #32
 8006db0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	6859      	ldr	r1, [r3, #4]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	4b0a      	ldr	r3, [pc, #40]	; (8006de8 <HAL_I2C_Mem_Write+0x224>)
 8006dbe:	400b      	ands	r3, r1
 8006dc0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2220      	movs	r2, #32
 8006dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	e000      	b.n	8006de0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006dde:	2302      	movs	r3, #2
  }
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3718      	adds	r7, #24
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	fe00e800 	.word	0xfe00e800

08006dec <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b088      	sub	sp, #32
 8006df0:	af02      	add	r7, sp, #8
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	4608      	mov	r0, r1
 8006df6:	4611      	mov	r1, r2
 8006df8:	461a      	mov	r2, r3
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	817b      	strh	r3, [r7, #10]
 8006dfe:	460b      	mov	r3, r1
 8006e00:	813b      	strh	r3, [r7, #8]
 8006e02:	4613      	mov	r3, r2
 8006e04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	2b20      	cmp	r3, #32
 8006e10:	f040 80fd 	bne.w	800700e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e14:	6a3b      	ldr	r3, [r7, #32]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d002      	beq.n	8006e20 <HAL_I2C_Mem_Read+0x34>
 8006e1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d105      	bne.n	8006e2c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e26:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e0f1      	b.n	8007010 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d101      	bne.n	8006e3a <HAL_I2C_Mem_Read+0x4e>
 8006e36:	2302      	movs	r3, #2
 8006e38:	e0ea      	b.n	8007010 <HAL_I2C_Mem_Read+0x224>
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006e42:	f7fe fa21 	bl	8005288 <HAL_GetTick>
 8006e46:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	9300      	str	r3, [sp, #0]
 8006e4c:	2319      	movs	r3, #25
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006e54:	68f8      	ldr	r0, [r7, #12]
 8006e56:	f000 fab7 	bl	80073c8 <I2C_WaitOnFlagUntilTimeout>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d001      	beq.n	8006e64 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	e0d5      	b.n	8007010 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2222      	movs	r2, #34	; 0x22
 8006e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2240      	movs	r2, #64	; 0x40
 8006e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2200      	movs	r2, #0
 8006e78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6a3a      	ldr	r2, [r7, #32]
 8006e7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006e84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006e8c:	88f8      	ldrh	r0, [r7, #6]
 8006e8e:	893a      	ldrh	r2, [r7, #8]
 8006e90:	8979      	ldrh	r1, [r7, #10]
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	9301      	str	r3, [sp, #4]
 8006e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e98:	9300      	str	r3, [sp, #0]
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f000 fa1b 	bl	80072d8 <I2C_RequestMemoryRead>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d005      	beq.n	8006eb4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e0ad      	b.n	8007010 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	2bff      	cmp	r3, #255	; 0xff
 8006ebc:	d90e      	bls.n	8006edc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	22ff      	movs	r2, #255	; 0xff
 8006ec2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ec8:	b2da      	uxtb	r2, r3
 8006eca:	8979      	ldrh	r1, [r7, #10]
 8006ecc:	4b52      	ldr	r3, [pc, #328]	; (8007018 <HAL_I2C_Mem_Read+0x22c>)
 8006ece:	9300      	str	r3, [sp, #0]
 8006ed0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f000 fc99 	bl	800780c <I2C_TransferConfig>
 8006eda:	e00f      	b.n	8006efc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ee0:	b29a      	uxth	r2, r3
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eea:	b2da      	uxtb	r2, r3
 8006eec:	8979      	ldrh	r1, [r7, #10]
 8006eee:	4b4a      	ldr	r3, [pc, #296]	; (8007018 <HAL_I2C_Mem_Read+0x22c>)
 8006ef0:	9300      	str	r3, [sp, #0]
 8006ef2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	f000 fc88 	bl	800780c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	9300      	str	r3, [sp, #0]
 8006f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f02:	2200      	movs	r2, #0
 8006f04:	2104      	movs	r1, #4
 8006f06:	68f8      	ldr	r0, [r7, #12]
 8006f08:	f000 fa5e 	bl	80073c8 <I2C_WaitOnFlagUntilTimeout>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d001      	beq.n	8006f16 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e07c      	b.n	8007010 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f20:	b2d2      	uxtb	r2, r2
 8006f22:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f28:	1c5a      	adds	r2, r3, #1
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f32:	3b01      	subs	r3, #1
 8006f34:	b29a      	uxth	r2, r3
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	3b01      	subs	r3, #1
 8006f42:	b29a      	uxth	r2, r3
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d034      	beq.n	8006fbc <HAL_I2C_Mem_Read+0x1d0>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d130      	bne.n	8006fbc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	9300      	str	r3, [sp, #0]
 8006f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f60:	2200      	movs	r2, #0
 8006f62:	2180      	movs	r1, #128	; 0x80
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	f000 fa2f 	bl	80073c8 <I2C_WaitOnFlagUntilTimeout>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d001      	beq.n	8006f74 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	e04d      	b.n	8007010 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	2bff      	cmp	r3, #255	; 0xff
 8006f7c:	d90e      	bls.n	8006f9c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	22ff      	movs	r2, #255	; 0xff
 8006f82:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f88:	b2da      	uxtb	r2, r3
 8006f8a:	8979      	ldrh	r1, [r7, #10]
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	9300      	str	r3, [sp, #0]
 8006f90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f94:	68f8      	ldr	r0, [r7, #12]
 8006f96:	f000 fc39 	bl	800780c <I2C_TransferConfig>
 8006f9a:	e00f      	b.n	8006fbc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006faa:	b2da      	uxtb	r2, r3
 8006fac:	8979      	ldrh	r1, [r7, #10]
 8006fae:	2300      	movs	r3, #0
 8006fb0:	9300      	str	r3, [sp, #0]
 8006fb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006fb6:	68f8      	ldr	r0, [r7, #12]
 8006fb8:	f000 fc28 	bl	800780c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d19a      	bne.n	8006efc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fca:	68f8      	ldr	r0, [r7, #12]
 8006fcc:	f000 fa7c 	bl	80074c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d001      	beq.n	8006fda <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e01a      	b.n	8007010 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2220      	movs	r2, #32
 8006fe0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	6859      	ldr	r1, [r3, #4]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	4b0b      	ldr	r3, [pc, #44]	; (800701c <HAL_I2C_Mem_Read+0x230>)
 8006fee:	400b      	ands	r3, r1
 8006ff0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2220      	movs	r2, #32
 8006ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2200      	movs	r2, #0
 8007006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800700a:	2300      	movs	r3, #0
 800700c:	e000      	b.n	8007010 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800700e:	2302      	movs	r3, #2
  }
}
 8007010:	4618      	mov	r0, r3
 8007012:	3718      	adds	r7, #24
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}
 8007018:	80002400 	.word	0x80002400
 800701c:	fe00e800 	.word	0xfe00e800

08007020 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b08a      	sub	sp, #40	; 0x28
 8007024:	af02      	add	r7, sp, #8
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	607a      	str	r2, [r7, #4]
 800702a:	603b      	str	r3, [r7, #0]
 800702c:	460b      	mov	r3, r1
 800702e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8007030:	2300      	movs	r3, #0
 8007032:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800703a:	b2db      	uxtb	r3, r3
 800703c:	2b20      	cmp	r3, #32
 800703e:	f040 80ef 	bne.w	8007220 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	699b      	ldr	r3, [r3, #24]
 8007048:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800704c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007050:	d101      	bne.n	8007056 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8007052:	2302      	movs	r3, #2
 8007054:	e0e5      	b.n	8007222 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800705c:	2b01      	cmp	r3, #1
 800705e:	d101      	bne.n	8007064 <HAL_I2C_IsDeviceReady+0x44>
 8007060:	2302      	movs	r3, #2
 8007062:	e0de      	b.n	8007222 <HAL_I2C_IsDeviceReady+0x202>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2224      	movs	r2, #36	; 0x24
 8007070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2200      	movs	r2, #0
 8007078:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	2b01      	cmp	r3, #1
 8007080:	d105      	bne.n	800708e <HAL_I2C_IsDeviceReady+0x6e>
 8007082:	897b      	ldrh	r3, [r7, #10]
 8007084:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007088:	4b68      	ldr	r3, [pc, #416]	; (800722c <HAL_I2C_IsDeviceReady+0x20c>)
 800708a:	4313      	orrs	r3, r2
 800708c:	e004      	b.n	8007098 <HAL_I2C_IsDeviceReady+0x78>
 800708e:	897b      	ldrh	r3, [r7, #10]
 8007090:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007094:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	6812      	ldr	r2, [r2, #0]
 800709c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800709e:	f7fe f8f3 	bl	8005288 <HAL_GetTick>
 80070a2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	699b      	ldr	r3, [r3, #24]
 80070aa:	f003 0320 	and.w	r3, r3, #32
 80070ae:	2b20      	cmp	r3, #32
 80070b0:	bf0c      	ite	eq
 80070b2:	2301      	moveq	r3, #1
 80070b4:	2300      	movne	r3, #0
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	699b      	ldr	r3, [r3, #24]
 80070c0:	f003 0310 	and.w	r3, r3, #16
 80070c4:	2b10      	cmp	r3, #16
 80070c6:	bf0c      	ite	eq
 80070c8:	2301      	moveq	r3, #1
 80070ca:	2300      	movne	r3, #0
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80070d0:	e034      	b.n	800713c <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d8:	d01a      	beq.n	8007110 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80070da:	f7fe f8d5 	bl	8005288 <HAL_GetTick>
 80070de:	4602      	mov	r2, r0
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	1ad3      	subs	r3, r2, r3
 80070e4:	683a      	ldr	r2, [r7, #0]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d302      	bcc.n	80070f0 <HAL_I2C_IsDeviceReady+0xd0>
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d10f      	bne.n	8007110 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2220      	movs	r2, #32
 80070f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070fc:	f043 0220 	orr.w	r2, r3, #32
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2200      	movs	r2, #0
 8007108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	e088      	b.n	8007222 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	699b      	ldr	r3, [r3, #24]
 8007116:	f003 0320 	and.w	r3, r3, #32
 800711a:	2b20      	cmp	r3, #32
 800711c:	bf0c      	ite	eq
 800711e:	2301      	moveq	r3, #1
 8007120:	2300      	movne	r3, #0
 8007122:	b2db      	uxtb	r3, r3
 8007124:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	699b      	ldr	r3, [r3, #24]
 800712c:	f003 0310 	and.w	r3, r3, #16
 8007130:	2b10      	cmp	r3, #16
 8007132:	bf0c      	ite	eq
 8007134:	2301      	moveq	r3, #1
 8007136:	2300      	movne	r3, #0
 8007138:	b2db      	uxtb	r3, r3
 800713a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800713c:	7ffb      	ldrb	r3, [r7, #31]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d102      	bne.n	8007148 <HAL_I2C_IsDeviceReady+0x128>
 8007142:	7fbb      	ldrb	r3, [r7, #30]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d0c4      	beq.n	80070d2 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	699b      	ldr	r3, [r3, #24]
 800714e:	f003 0310 	and.w	r3, r3, #16
 8007152:	2b10      	cmp	r3, #16
 8007154:	d01a      	beq.n	800718c <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	9300      	str	r3, [sp, #0]
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	2200      	movs	r2, #0
 800715e:	2120      	movs	r1, #32
 8007160:	68f8      	ldr	r0, [r7, #12]
 8007162:	f000 f931 	bl	80073c8 <I2C_WaitOnFlagUntilTimeout>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d001      	beq.n	8007170 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	e058      	b.n	8007222 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2220      	movs	r2, #32
 8007176:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2220      	movs	r2, #32
 800717c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8007188:	2300      	movs	r3, #0
 800718a:	e04a      	b.n	8007222 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	9300      	str	r3, [sp, #0]
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	2200      	movs	r2, #0
 8007194:	2120      	movs	r1, #32
 8007196:	68f8      	ldr	r0, [r7, #12]
 8007198:	f000 f916 	bl	80073c8 <I2C_WaitOnFlagUntilTimeout>
 800719c:	4603      	mov	r3, r0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d001      	beq.n	80071a6 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e03d      	b.n	8007222 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2210      	movs	r2, #16
 80071ac:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	2220      	movs	r2, #32
 80071b4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d118      	bne.n	80071f0 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	685a      	ldr	r2, [r3, #4]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071cc:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	9300      	str	r3, [sp, #0]
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	2200      	movs	r2, #0
 80071d6:	2120      	movs	r1, #32
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	f000 f8f5 	bl	80073c8 <I2C_WaitOnFlagUntilTimeout>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d001      	beq.n	80071e8 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	e01c      	b.n	8007222 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2220      	movs	r2, #32
 80071ee:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	3301      	adds	r3, #1
 80071f4:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	f63f af3d 	bhi.w	800707a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2220      	movs	r2, #32
 8007204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800720c:	f043 0220 	orr.w	r2, r3, #32
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2200      	movs	r2, #0
 8007218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	e000      	b.n	8007222 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8007220:	2302      	movs	r3, #2
  }
}
 8007222:	4618      	mov	r0, r3
 8007224:	3720      	adds	r7, #32
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	02002000 	.word	0x02002000

08007230 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b086      	sub	sp, #24
 8007234:	af02      	add	r7, sp, #8
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	4608      	mov	r0, r1
 800723a:	4611      	mov	r1, r2
 800723c:	461a      	mov	r2, r3
 800723e:	4603      	mov	r3, r0
 8007240:	817b      	strh	r3, [r7, #10]
 8007242:	460b      	mov	r3, r1
 8007244:	813b      	strh	r3, [r7, #8]
 8007246:	4613      	mov	r3, r2
 8007248:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800724a:	88fb      	ldrh	r3, [r7, #6]
 800724c:	b2da      	uxtb	r2, r3
 800724e:	8979      	ldrh	r1, [r7, #10]
 8007250:	4b20      	ldr	r3, [pc, #128]	; (80072d4 <I2C_RequestMemoryWrite+0xa4>)
 8007252:	9300      	str	r3, [sp, #0]
 8007254:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007258:	68f8      	ldr	r0, [r7, #12]
 800725a:	f000 fad7 	bl	800780c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800725e:	69fa      	ldr	r2, [r7, #28]
 8007260:	69b9      	ldr	r1, [r7, #24]
 8007262:	68f8      	ldr	r0, [r7, #12]
 8007264:	f000 f8f0 	bl	8007448 <I2C_WaitOnTXISFlagUntilTimeout>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d001      	beq.n	8007272 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	e02c      	b.n	80072cc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007272:	88fb      	ldrh	r3, [r7, #6]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d105      	bne.n	8007284 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007278:	893b      	ldrh	r3, [r7, #8]
 800727a:	b2da      	uxtb	r2, r3
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	629a      	str	r2, [r3, #40]	; 0x28
 8007282:	e015      	b.n	80072b0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007284:	893b      	ldrh	r3, [r7, #8]
 8007286:	0a1b      	lsrs	r3, r3, #8
 8007288:	b29b      	uxth	r3, r3
 800728a:	b2da      	uxtb	r2, r3
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007292:	69fa      	ldr	r2, [r7, #28]
 8007294:	69b9      	ldr	r1, [r7, #24]
 8007296:	68f8      	ldr	r0, [r7, #12]
 8007298:	f000 f8d6 	bl	8007448 <I2C_WaitOnTXISFlagUntilTimeout>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d001      	beq.n	80072a6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	e012      	b.n	80072cc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80072a6:	893b      	ldrh	r3, [r7, #8]
 80072a8:	b2da      	uxtb	r2, r3
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	9300      	str	r3, [sp, #0]
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	2200      	movs	r2, #0
 80072b8:	2180      	movs	r1, #128	; 0x80
 80072ba:	68f8      	ldr	r0, [r7, #12]
 80072bc:	f000 f884 	bl	80073c8 <I2C_WaitOnFlagUntilTimeout>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d001      	beq.n	80072ca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e000      	b.n	80072cc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3710      	adds	r7, #16
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	80002000 	.word	0x80002000

080072d8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b086      	sub	sp, #24
 80072dc:	af02      	add	r7, sp, #8
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	4608      	mov	r0, r1
 80072e2:	4611      	mov	r1, r2
 80072e4:	461a      	mov	r2, r3
 80072e6:	4603      	mov	r3, r0
 80072e8:	817b      	strh	r3, [r7, #10]
 80072ea:	460b      	mov	r3, r1
 80072ec:	813b      	strh	r3, [r7, #8]
 80072ee:	4613      	mov	r3, r2
 80072f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80072f2:	88fb      	ldrh	r3, [r7, #6]
 80072f4:	b2da      	uxtb	r2, r3
 80072f6:	8979      	ldrh	r1, [r7, #10]
 80072f8:	4b20      	ldr	r3, [pc, #128]	; (800737c <I2C_RequestMemoryRead+0xa4>)
 80072fa:	9300      	str	r3, [sp, #0]
 80072fc:	2300      	movs	r3, #0
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	f000 fa84 	bl	800780c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007304:	69fa      	ldr	r2, [r7, #28]
 8007306:	69b9      	ldr	r1, [r7, #24]
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f000 f89d 	bl	8007448 <I2C_WaitOnTXISFlagUntilTimeout>
 800730e:	4603      	mov	r3, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	d001      	beq.n	8007318 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	e02c      	b.n	8007372 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007318:	88fb      	ldrh	r3, [r7, #6]
 800731a:	2b01      	cmp	r3, #1
 800731c:	d105      	bne.n	800732a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800731e:	893b      	ldrh	r3, [r7, #8]
 8007320:	b2da      	uxtb	r2, r3
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	629a      	str	r2, [r3, #40]	; 0x28
 8007328:	e015      	b.n	8007356 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800732a:	893b      	ldrh	r3, [r7, #8]
 800732c:	0a1b      	lsrs	r3, r3, #8
 800732e:	b29b      	uxth	r3, r3
 8007330:	b2da      	uxtb	r2, r3
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007338:	69fa      	ldr	r2, [r7, #28]
 800733a:	69b9      	ldr	r1, [r7, #24]
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	f000 f883 	bl	8007448 <I2C_WaitOnTXISFlagUntilTimeout>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d001      	beq.n	800734c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007348:	2301      	movs	r3, #1
 800734a:	e012      	b.n	8007372 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800734c:	893b      	ldrh	r3, [r7, #8]
 800734e:	b2da      	uxtb	r2, r3
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	9300      	str	r3, [sp, #0]
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	2200      	movs	r2, #0
 800735e:	2140      	movs	r1, #64	; 0x40
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	f000 f831 	bl	80073c8 <I2C_WaitOnFlagUntilTimeout>
 8007366:	4603      	mov	r3, r0
 8007368:	2b00      	cmp	r3, #0
 800736a:	d001      	beq.n	8007370 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	e000      	b.n	8007372 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	80002000 	.word	0x80002000

08007380 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007380:	b480      	push	{r7}
 8007382:	b083      	sub	sp, #12
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	699b      	ldr	r3, [r3, #24]
 800738e:	f003 0302 	and.w	r3, r3, #2
 8007392:	2b02      	cmp	r3, #2
 8007394:	d103      	bne.n	800739e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	2200      	movs	r2, #0
 800739c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	699b      	ldr	r3, [r3, #24]
 80073a4:	f003 0301 	and.w	r3, r3, #1
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d007      	beq.n	80073bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	699a      	ldr	r2, [r3, #24]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f042 0201 	orr.w	r2, r2, #1
 80073ba:	619a      	str	r2, [r3, #24]
  }
}
 80073bc:	bf00      	nop
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	603b      	str	r3, [r7, #0]
 80073d4:	4613      	mov	r3, r2
 80073d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073d8:	e022      	b.n	8007420 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073e0:	d01e      	beq.n	8007420 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073e2:	f7fd ff51 	bl	8005288 <HAL_GetTick>
 80073e6:	4602      	mov	r2, r0
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	1ad3      	subs	r3, r2, r3
 80073ec:	683a      	ldr	r2, [r7, #0]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d302      	bcc.n	80073f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d113      	bne.n	8007420 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073fc:	f043 0220 	orr.w	r2, r3, #32
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2220      	movs	r2, #32
 8007408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2200      	movs	r2, #0
 8007418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	e00f      	b.n	8007440 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	699a      	ldr	r2, [r3, #24]
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	4013      	ands	r3, r2
 800742a:	68ba      	ldr	r2, [r7, #8]
 800742c:	429a      	cmp	r2, r3
 800742e:	bf0c      	ite	eq
 8007430:	2301      	moveq	r3, #1
 8007432:	2300      	movne	r3, #0
 8007434:	b2db      	uxtb	r3, r3
 8007436:	461a      	mov	r2, r3
 8007438:	79fb      	ldrb	r3, [r7, #7]
 800743a:	429a      	cmp	r2, r3
 800743c:	d0cd      	beq.n	80073da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800743e:	2300      	movs	r3, #0
}
 8007440:	4618      	mov	r0, r3
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007454:	e02c      	b.n	80074b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	68b9      	ldr	r1, [r7, #8]
 800745a:	68f8      	ldr	r0, [r7, #12]
 800745c:	f000 f8ea 	bl	8007634 <I2C_IsErrorOccurred>
 8007460:	4603      	mov	r3, r0
 8007462:	2b00      	cmp	r3, #0
 8007464:	d001      	beq.n	800746a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e02a      	b.n	80074c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007470:	d01e      	beq.n	80074b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007472:	f7fd ff09 	bl	8005288 <HAL_GetTick>
 8007476:	4602      	mov	r2, r0
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	1ad3      	subs	r3, r2, r3
 800747c:	68ba      	ldr	r2, [r7, #8]
 800747e:	429a      	cmp	r2, r3
 8007480:	d302      	bcc.n	8007488 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d113      	bne.n	80074b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800748c:	f043 0220 	orr.w	r2, r3, #32
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2220      	movs	r2, #32
 8007498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2200      	movs	r2, #0
 80074a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2200      	movs	r2, #0
 80074a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	e007      	b.n	80074c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	699b      	ldr	r3, [r3, #24]
 80074b6:	f003 0302 	and.w	r3, r3, #2
 80074ba:	2b02      	cmp	r3, #2
 80074bc:	d1cb      	bne.n	8007456 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3710      	adds	r7, #16
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80074d4:	e028      	b.n	8007528 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	68b9      	ldr	r1, [r7, #8]
 80074da:	68f8      	ldr	r0, [r7, #12]
 80074dc:	f000 f8aa 	bl	8007634 <I2C_IsErrorOccurred>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d001      	beq.n	80074ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	e026      	b.n	8007538 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074ea:	f7fd fecd 	bl	8005288 <HAL_GetTick>
 80074ee:	4602      	mov	r2, r0
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	1ad3      	subs	r3, r2, r3
 80074f4:	68ba      	ldr	r2, [r7, #8]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d302      	bcc.n	8007500 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d113      	bne.n	8007528 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007504:	f043 0220 	orr.w	r2, r3, #32
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2220      	movs	r2, #32
 8007510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2200      	movs	r2, #0
 8007518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2200      	movs	r2, #0
 8007520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	e007      	b.n	8007538 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	699b      	ldr	r3, [r3, #24]
 800752e:	f003 0320 	and.w	r3, r3, #32
 8007532:	2b20      	cmp	r3, #32
 8007534:	d1cf      	bne.n	80074d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	3710      	adds	r7, #16
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800754c:	e064      	b.n	8007618 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	68b9      	ldr	r1, [r7, #8]
 8007552:	68f8      	ldr	r0, [r7, #12]
 8007554:	f000 f86e 	bl	8007634 <I2C_IsErrorOccurred>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d001      	beq.n	8007562 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	e062      	b.n	8007628 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	699b      	ldr	r3, [r3, #24]
 8007568:	f003 0320 	and.w	r3, r3, #32
 800756c:	2b20      	cmp	r3, #32
 800756e:	d138      	bne.n	80075e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	699b      	ldr	r3, [r3, #24]
 8007576:	f003 0304 	and.w	r3, r3, #4
 800757a:	2b04      	cmp	r3, #4
 800757c:	d105      	bne.n	800758a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007582:	2b00      	cmp	r3, #0
 8007584:	d001      	beq.n	800758a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8007586:	2300      	movs	r3, #0
 8007588:	e04e      	b.n	8007628 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	699b      	ldr	r3, [r3, #24]
 8007590:	f003 0310 	and.w	r3, r3, #16
 8007594:	2b10      	cmp	r3, #16
 8007596:	d107      	bne.n	80075a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2210      	movs	r2, #16
 800759e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2204      	movs	r2, #4
 80075a4:	645a      	str	r2, [r3, #68]	; 0x44
 80075a6:	e002      	b.n	80075ae <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2200      	movs	r2, #0
 80075ac:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	2220      	movs	r2, #32
 80075b4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	6859      	ldr	r1, [r3, #4]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	4b1b      	ldr	r3, [pc, #108]	; (8007630 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80075c2:	400b      	ands	r3, r1
 80075c4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2220      	movs	r2, #32
 80075ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2200      	movs	r2, #0
 80075da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e022      	b.n	8007628 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075e2:	f7fd fe51 	bl	8005288 <HAL_GetTick>
 80075e6:	4602      	mov	r2, r0
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	1ad3      	subs	r3, r2, r3
 80075ec:	68ba      	ldr	r2, [r7, #8]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d302      	bcc.n	80075f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d10f      	bne.n	8007618 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075fc:	f043 0220 	orr.w	r2, r3, #32
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2220      	movs	r2, #32
 8007608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2200      	movs	r2, #0
 8007610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	e007      	b.n	8007628 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	699b      	ldr	r3, [r3, #24]
 800761e:	f003 0304 	and.w	r3, r3, #4
 8007622:	2b04      	cmp	r3, #4
 8007624:	d193      	bne.n	800754e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007626:	2300      	movs	r3, #0
}
 8007628:	4618      	mov	r0, r3
 800762a:	3710      	adds	r7, #16
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}
 8007630:	fe00e800 	.word	0xfe00e800

08007634 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b08a      	sub	sp, #40	; 0x28
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007640:	2300      	movs	r3, #0
 8007642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	699b      	ldr	r3, [r3, #24]
 800764c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800764e:	2300      	movs	r3, #0
 8007650:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	f003 0310 	and.w	r3, r3, #16
 800765c:	2b00      	cmp	r3, #0
 800765e:	d075      	beq.n	800774c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2210      	movs	r2, #16
 8007666:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007668:	e056      	b.n	8007718 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007670:	d052      	beq.n	8007718 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007672:	f7fd fe09 	bl	8005288 <HAL_GetTick>
 8007676:	4602      	mov	r2, r0
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	1ad3      	subs	r3, r2, r3
 800767c:	68ba      	ldr	r2, [r7, #8]
 800767e:	429a      	cmp	r2, r3
 8007680:	d302      	bcc.n	8007688 <I2C_IsErrorOccurred+0x54>
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d147      	bne.n	8007718 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007692:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800769a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	699b      	ldr	r3, [r3, #24]
 80076a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076aa:	d12e      	bne.n	800770a <I2C_IsErrorOccurred+0xd6>
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076b2:	d02a      	beq.n	800770a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80076b4:	7cfb      	ldrb	r3, [r7, #19]
 80076b6:	2b20      	cmp	r3, #32
 80076b8:	d027      	beq.n	800770a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	685a      	ldr	r2, [r3, #4]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076c8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80076ca:	f7fd fddd 	bl	8005288 <HAL_GetTick>
 80076ce:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80076d0:	e01b      	b.n	800770a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80076d2:	f7fd fdd9 	bl	8005288 <HAL_GetTick>
 80076d6:	4602      	mov	r2, r0
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	1ad3      	subs	r3, r2, r3
 80076dc:	2b19      	cmp	r3, #25
 80076de:	d914      	bls.n	800770a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076e4:	f043 0220 	orr.w	r2, r3, #32
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2220      	movs	r2, #32
 80076f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2200      	movs	r2, #0
 8007700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	699b      	ldr	r3, [r3, #24]
 8007710:	f003 0320 	and.w	r3, r3, #32
 8007714:	2b20      	cmp	r3, #32
 8007716:	d1dc      	bne.n	80076d2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	699b      	ldr	r3, [r3, #24]
 800771e:	f003 0320 	and.w	r3, r3, #32
 8007722:	2b20      	cmp	r3, #32
 8007724:	d003      	beq.n	800772e <I2C_IsErrorOccurred+0xfa>
 8007726:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800772a:	2b00      	cmp	r3, #0
 800772c:	d09d      	beq.n	800766a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800772e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007732:	2b00      	cmp	r3, #0
 8007734:	d103      	bne.n	800773e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2220      	movs	r2, #32
 800773c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800773e:	6a3b      	ldr	r3, [r7, #32]
 8007740:	f043 0304 	orr.w	r3, r3, #4
 8007744:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	699b      	ldr	r3, [r3, #24]
 8007752:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00b      	beq.n	8007776 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800775e:	6a3b      	ldr	r3, [r7, #32]
 8007760:	f043 0301 	orr.w	r3, r3, #1
 8007764:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800776e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007776:	69bb      	ldr	r3, [r7, #24]
 8007778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800777c:	2b00      	cmp	r3, #0
 800777e:	d00b      	beq.n	8007798 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007780:	6a3b      	ldr	r3, [r7, #32]
 8007782:	f043 0308 	orr.w	r3, r3, #8
 8007786:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007790:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d00b      	beq.n	80077ba <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80077a2:	6a3b      	ldr	r3, [r7, #32]
 80077a4:	f043 0302 	orr.w	r3, r3, #2
 80077a8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80077ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d01c      	beq.n	80077fc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	f7ff fddc 	bl	8007380 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	6859      	ldr	r1, [r3, #4]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	4b0d      	ldr	r3, [pc, #52]	; (8007808 <I2C_IsErrorOccurred+0x1d4>)
 80077d4:	400b      	ands	r3, r1
 80077d6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077dc:	6a3b      	ldr	r3, [r7, #32]
 80077de:	431a      	orrs	r2, r3
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2220      	movs	r2, #32
 80077e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80077fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007800:	4618      	mov	r0, r3
 8007802:	3728      	adds	r7, #40	; 0x28
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	fe00e800 	.word	0xfe00e800

0800780c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800780c:	b480      	push	{r7}
 800780e:	b087      	sub	sp, #28
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	607b      	str	r3, [r7, #4]
 8007816:	460b      	mov	r3, r1
 8007818:	817b      	strh	r3, [r7, #10]
 800781a:	4613      	mov	r3, r2
 800781c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800781e:	897b      	ldrh	r3, [r7, #10]
 8007820:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007824:	7a7b      	ldrb	r3, [r7, #9]
 8007826:	041b      	lsls	r3, r3, #16
 8007828:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800782c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007832:	6a3b      	ldr	r3, [r7, #32]
 8007834:	4313      	orrs	r3, r2
 8007836:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800783a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	685a      	ldr	r2, [r3, #4]
 8007842:	6a3b      	ldr	r3, [r7, #32]
 8007844:	0d5b      	lsrs	r3, r3, #21
 8007846:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800784a:	4b08      	ldr	r3, [pc, #32]	; (800786c <I2C_TransferConfig+0x60>)
 800784c:	430b      	orrs	r3, r1
 800784e:	43db      	mvns	r3, r3
 8007850:	ea02 0103 	and.w	r1, r2, r3
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	697a      	ldr	r2, [r7, #20]
 800785a:	430a      	orrs	r2, r1
 800785c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800785e:	bf00      	nop
 8007860:	371c      	adds	r7, #28
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr
 800786a:	bf00      	nop
 800786c:	03ff63ff 	.word	0x03ff63ff

08007870 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007880:	b2db      	uxtb	r3, r3
 8007882:	2b20      	cmp	r3, #32
 8007884:	d138      	bne.n	80078f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800788c:	2b01      	cmp	r3, #1
 800788e:	d101      	bne.n	8007894 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007890:	2302      	movs	r3, #2
 8007892:	e032      	b.n	80078fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2224      	movs	r2, #36	; 0x24
 80078a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f022 0201 	bic.w	r2, r2, #1
 80078b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80078c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	6819      	ldr	r1, [r3, #0]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	683a      	ldr	r2, [r7, #0]
 80078d0:	430a      	orrs	r2, r1
 80078d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f042 0201 	orr.w	r2, r2, #1
 80078e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2220      	movs	r2, #32
 80078e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80078f4:	2300      	movs	r3, #0
 80078f6:	e000      	b.n	80078fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80078f8:	2302      	movs	r3, #2
  }
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	370c      	adds	r7, #12
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr

08007906 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007906:	b480      	push	{r7}
 8007908:	b085      	sub	sp, #20
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
 800790e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007916:	b2db      	uxtb	r3, r3
 8007918:	2b20      	cmp	r3, #32
 800791a:	d139      	bne.n	8007990 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007922:	2b01      	cmp	r3, #1
 8007924:	d101      	bne.n	800792a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007926:	2302      	movs	r3, #2
 8007928:	e033      	b.n	8007992 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2201      	movs	r2, #1
 800792e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2224      	movs	r2, #36	; 0x24
 8007936:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f022 0201 	bic.w	r2, r2, #1
 8007948:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007958:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	021b      	lsls	r3, r3, #8
 800795e:	68fa      	ldr	r2, [r7, #12]
 8007960:	4313      	orrs	r3, r2
 8007962:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	68fa      	ldr	r2, [r7, #12]
 800796a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f042 0201 	orr.w	r2, r2, #1
 800797a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2220      	movs	r2, #32
 8007980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800798c:	2300      	movs	r3, #0
 800798e:	e000      	b.n	8007992 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007990:	2302      	movs	r3, #2
  }
}
 8007992:	4618      	mov	r0, r3
 8007994:	3714      	adds	r7, #20
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr
	...

080079a0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80079a0:	b480      	push	{r7}
 80079a2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80079a4:	4b05      	ldr	r3, [pc, #20]	; (80079bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a04      	ldr	r2, [pc, #16]	; (80079bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80079aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079ae:	6013      	str	r3, [r2, #0]
}
 80079b0:	bf00      	nop
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr
 80079ba:	bf00      	nop
 80079bc:	40007000 	.word	0x40007000

080079c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b086      	sub	sp, #24
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80079c8:	2300      	movs	r3, #0
 80079ca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d101      	bne.n	80079d6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	e29b      	b.n	8007f0e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f003 0301 	and.w	r3, r3, #1
 80079de:	2b00      	cmp	r3, #0
 80079e0:	f000 8087 	beq.w	8007af2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80079e4:	4b96      	ldr	r3, [pc, #600]	; (8007c40 <HAL_RCC_OscConfig+0x280>)
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	f003 030c 	and.w	r3, r3, #12
 80079ec:	2b04      	cmp	r3, #4
 80079ee:	d00c      	beq.n	8007a0a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80079f0:	4b93      	ldr	r3, [pc, #588]	; (8007c40 <HAL_RCC_OscConfig+0x280>)
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	f003 030c 	and.w	r3, r3, #12
 80079f8:	2b08      	cmp	r3, #8
 80079fa:	d112      	bne.n	8007a22 <HAL_RCC_OscConfig+0x62>
 80079fc:	4b90      	ldr	r3, [pc, #576]	; (8007c40 <HAL_RCC_OscConfig+0x280>)
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a08:	d10b      	bne.n	8007a22 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a0a:	4b8d      	ldr	r3, [pc, #564]	; (8007c40 <HAL_RCC_OscConfig+0x280>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d06c      	beq.n	8007af0 <HAL_RCC_OscConfig+0x130>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d168      	bne.n	8007af0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e275      	b.n	8007f0e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a2a:	d106      	bne.n	8007a3a <HAL_RCC_OscConfig+0x7a>
 8007a2c:	4b84      	ldr	r3, [pc, #528]	; (8007c40 <HAL_RCC_OscConfig+0x280>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a83      	ldr	r2, [pc, #524]	; (8007c40 <HAL_RCC_OscConfig+0x280>)
 8007a32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a36:	6013      	str	r3, [r2, #0]
 8007a38:	e02e      	b.n	8007a98 <HAL_RCC_OscConfig+0xd8>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d10c      	bne.n	8007a5c <HAL_RCC_OscConfig+0x9c>
 8007a42:	4b7f      	ldr	r3, [pc, #508]	; (8007c40 <HAL_RCC_OscConfig+0x280>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a7e      	ldr	r2, [pc, #504]	; (8007c40 <HAL_RCC_OscConfig+0x280>)
 8007a48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a4c:	6013      	str	r3, [r2, #0]
 8007a4e:	4b7c      	ldr	r3, [pc, #496]	; (8007c40 <HAL_RCC_OscConfig+0x280>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a7b      	ldr	r2, [pc, #492]	; (8007c40 <HAL_RCC_OscConfig+0x280>)
 8007a54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a58:	6013      	str	r3, [r2, #0]
 8007a5a:	e01d      	b.n	8007a98 <HAL_RCC_OscConfig+0xd8>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a64:	d10c      	bne.n	8007a80 <HAL_RCC_OscConfig+0xc0>
 8007a66:	4b76      	ldr	r3, [pc, #472]	; (8007c40 <HAL_RCC_OscConfig+0x280>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a75      	ldr	r2, [pc, #468]	; (8007c40 <HAL_RCC_OscConfig+0x280>)
 8007a6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007a70:	6013      	str	r3, [r2, #0]
 8007a72:	4b73      	ldr	r3, [pc, #460]	; (8007c40 <HAL_RCC_OscConfig+0x280>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a72      	ldr	r2, [pc, #456]	; (8007c40 <HAL_RCC_OscConfig+0x280>)
 8007a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a7c:	6013      	str	r3, [r2, #0]
 8007a7e:	e00b      	b.n	8007a98 <HAL_RCC_OscConfig+0xd8>
 8007a80:	4b6f      	ldr	r3, [pc, #444]	; (8007c40 <HAL_RCC_OscConfig+0x280>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a6e      	ldr	r2, [pc, #440]	; (8007c40 <HAL_RCC_OscConfig+0x280>)
 8007a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a8a:	6013      	str	r3, [r2, #0]
 8007a8c:	4b6c      	ldr	r3, [pc, #432]	; (8007c40 <HAL_RCC_OscConfig+0x280>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a6b      	ldr	r2, [pc, #428]	; (8007c40 <HAL_RCC_OscConfig+0x280>)
 8007a92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d013      	beq.n	8007ac8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007aa0:	f7fd fbf2 	bl	8005288 <HAL_GetTick>
 8007aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007aa6:	e008      	b.n	8007aba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007aa8:	f7fd fbee 	bl	8005288 <HAL_GetTick>
 8007aac:	4602      	mov	r2, r0
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	1ad3      	subs	r3, r2, r3
 8007ab2:	2b64      	cmp	r3, #100	; 0x64
 8007ab4:	d901      	bls.n	8007aba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	e229      	b.n	8007f0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007aba:	4b61      	ldr	r3, [pc, #388]	; (8007c40 <HAL_RCC_OscConfig+0x280>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d0f0      	beq.n	8007aa8 <HAL_RCC_OscConfig+0xe8>
 8007ac6:	e014      	b.n	8007af2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ac8:	f7fd fbde 	bl	8005288 <HAL_GetTick>
 8007acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ace:	e008      	b.n	8007ae2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ad0:	f7fd fbda 	bl	8005288 <HAL_GetTick>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	1ad3      	subs	r3, r2, r3
 8007ada:	2b64      	cmp	r3, #100	; 0x64
 8007adc:	d901      	bls.n	8007ae2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007ade:	2303      	movs	r3, #3
 8007ae0:	e215      	b.n	8007f0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ae2:	4b57      	ldr	r3, [pc, #348]	; (8007c40 <HAL_RCC_OscConfig+0x280>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d1f0      	bne.n	8007ad0 <HAL_RCC_OscConfig+0x110>
 8007aee:	e000      	b.n	8007af2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f003 0302 	and.w	r3, r3, #2
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d069      	beq.n	8007bd2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007afe:	4b50      	ldr	r3, [pc, #320]	; (8007c40 <HAL_RCC_OscConfig+0x280>)
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	f003 030c 	and.w	r3, r3, #12
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d00b      	beq.n	8007b22 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b0a:	4b4d      	ldr	r3, [pc, #308]	; (8007c40 <HAL_RCC_OscConfig+0x280>)
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	f003 030c 	and.w	r3, r3, #12
 8007b12:	2b08      	cmp	r3, #8
 8007b14:	d11c      	bne.n	8007b50 <HAL_RCC_OscConfig+0x190>
 8007b16:	4b4a      	ldr	r3, [pc, #296]	; (8007c40 <HAL_RCC_OscConfig+0x280>)
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d116      	bne.n	8007b50 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b22:	4b47      	ldr	r3, [pc, #284]	; (8007c40 <HAL_RCC_OscConfig+0x280>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f003 0302 	and.w	r3, r3, #2
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d005      	beq.n	8007b3a <HAL_RCC_OscConfig+0x17a>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d001      	beq.n	8007b3a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	e1e9      	b.n	8007f0e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b3a:	4b41      	ldr	r3, [pc, #260]	; (8007c40 <HAL_RCC_OscConfig+0x280>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	691b      	ldr	r3, [r3, #16]
 8007b46:	00db      	lsls	r3, r3, #3
 8007b48:	493d      	ldr	r1, [pc, #244]	; (8007c40 <HAL_RCC_OscConfig+0x280>)
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b4e:	e040      	b.n	8007bd2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d023      	beq.n	8007ba0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b58:	4b39      	ldr	r3, [pc, #228]	; (8007c40 <HAL_RCC_OscConfig+0x280>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a38      	ldr	r2, [pc, #224]	; (8007c40 <HAL_RCC_OscConfig+0x280>)
 8007b5e:	f043 0301 	orr.w	r3, r3, #1
 8007b62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b64:	f7fd fb90 	bl	8005288 <HAL_GetTick>
 8007b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b6a:	e008      	b.n	8007b7e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b6c:	f7fd fb8c 	bl	8005288 <HAL_GetTick>
 8007b70:	4602      	mov	r2, r0
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	1ad3      	subs	r3, r2, r3
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	d901      	bls.n	8007b7e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	e1c7      	b.n	8007f0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b7e:	4b30      	ldr	r3, [pc, #192]	; (8007c40 <HAL_RCC_OscConfig+0x280>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f003 0302 	and.w	r3, r3, #2
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d0f0      	beq.n	8007b6c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b8a:	4b2d      	ldr	r3, [pc, #180]	; (8007c40 <HAL_RCC_OscConfig+0x280>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	00db      	lsls	r3, r3, #3
 8007b98:	4929      	ldr	r1, [pc, #164]	; (8007c40 <HAL_RCC_OscConfig+0x280>)
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	600b      	str	r3, [r1, #0]
 8007b9e:	e018      	b.n	8007bd2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ba0:	4b27      	ldr	r3, [pc, #156]	; (8007c40 <HAL_RCC_OscConfig+0x280>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a26      	ldr	r2, [pc, #152]	; (8007c40 <HAL_RCC_OscConfig+0x280>)
 8007ba6:	f023 0301 	bic.w	r3, r3, #1
 8007baa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bac:	f7fd fb6c 	bl	8005288 <HAL_GetTick>
 8007bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007bb2:	e008      	b.n	8007bc6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007bb4:	f7fd fb68 	bl	8005288 <HAL_GetTick>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	1ad3      	subs	r3, r2, r3
 8007bbe:	2b02      	cmp	r3, #2
 8007bc0:	d901      	bls.n	8007bc6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007bc2:	2303      	movs	r3, #3
 8007bc4:	e1a3      	b.n	8007f0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007bc6:	4b1e      	ldr	r3, [pc, #120]	; (8007c40 <HAL_RCC_OscConfig+0x280>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f003 0302 	and.w	r3, r3, #2
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d1f0      	bne.n	8007bb4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f003 0308 	and.w	r3, r3, #8
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d038      	beq.n	8007c50 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	695b      	ldr	r3, [r3, #20]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d019      	beq.n	8007c1a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007be6:	4b16      	ldr	r3, [pc, #88]	; (8007c40 <HAL_RCC_OscConfig+0x280>)
 8007be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bea:	4a15      	ldr	r2, [pc, #84]	; (8007c40 <HAL_RCC_OscConfig+0x280>)
 8007bec:	f043 0301 	orr.w	r3, r3, #1
 8007bf0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bf2:	f7fd fb49 	bl	8005288 <HAL_GetTick>
 8007bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007bf8:	e008      	b.n	8007c0c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007bfa:	f7fd fb45 	bl	8005288 <HAL_GetTick>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	1ad3      	subs	r3, r2, r3
 8007c04:	2b02      	cmp	r3, #2
 8007c06:	d901      	bls.n	8007c0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007c08:	2303      	movs	r3, #3
 8007c0a:	e180      	b.n	8007f0e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c0c:	4b0c      	ldr	r3, [pc, #48]	; (8007c40 <HAL_RCC_OscConfig+0x280>)
 8007c0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c10:	f003 0302 	and.w	r3, r3, #2
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d0f0      	beq.n	8007bfa <HAL_RCC_OscConfig+0x23a>
 8007c18:	e01a      	b.n	8007c50 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c1a:	4b09      	ldr	r3, [pc, #36]	; (8007c40 <HAL_RCC_OscConfig+0x280>)
 8007c1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c1e:	4a08      	ldr	r2, [pc, #32]	; (8007c40 <HAL_RCC_OscConfig+0x280>)
 8007c20:	f023 0301 	bic.w	r3, r3, #1
 8007c24:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c26:	f7fd fb2f 	bl	8005288 <HAL_GetTick>
 8007c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c2c:	e00a      	b.n	8007c44 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c2e:	f7fd fb2b 	bl	8005288 <HAL_GetTick>
 8007c32:	4602      	mov	r2, r0
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	1ad3      	subs	r3, r2, r3
 8007c38:	2b02      	cmp	r3, #2
 8007c3a:	d903      	bls.n	8007c44 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007c3c:	2303      	movs	r3, #3
 8007c3e:	e166      	b.n	8007f0e <HAL_RCC_OscConfig+0x54e>
 8007c40:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c44:	4b92      	ldr	r3, [pc, #584]	; (8007e90 <HAL_RCC_OscConfig+0x4d0>)
 8007c46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c48:	f003 0302 	and.w	r3, r3, #2
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d1ee      	bne.n	8007c2e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f003 0304 	and.w	r3, r3, #4
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	f000 80a4 	beq.w	8007da6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c5e:	4b8c      	ldr	r3, [pc, #560]	; (8007e90 <HAL_RCC_OscConfig+0x4d0>)
 8007c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d10d      	bne.n	8007c86 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c6a:	4b89      	ldr	r3, [pc, #548]	; (8007e90 <HAL_RCC_OscConfig+0x4d0>)
 8007c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c6e:	4a88      	ldr	r2, [pc, #544]	; (8007e90 <HAL_RCC_OscConfig+0x4d0>)
 8007c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c74:	6413      	str	r3, [r2, #64]	; 0x40
 8007c76:	4b86      	ldr	r3, [pc, #536]	; (8007e90 <HAL_RCC_OscConfig+0x4d0>)
 8007c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c7e:	60bb      	str	r3, [r7, #8]
 8007c80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c82:	2301      	movs	r3, #1
 8007c84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c86:	4b83      	ldr	r3, [pc, #524]	; (8007e94 <HAL_RCC_OscConfig+0x4d4>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d118      	bne.n	8007cc4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007c92:	4b80      	ldr	r3, [pc, #512]	; (8007e94 <HAL_RCC_OscConfig+0x4d4>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a7f      	ldr	r2, [pc, #508]	; (8007e94 <HAL_RCC_OscConfig+0x4d4>)
 8007c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c9e:	f7fd faf3 	bl	8005288 <HAL_GetTick>
 8007ca2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ca4:	e008      	b.n	8007cb8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ca6:	f7fd faef 	bl	8005288 <HAL_GetTick>
 8007caa:	4602      	mov	r2, r0
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	1ad3      	subs	r3, r2, r3
 8007cb0:	2b64      	cmp	r3, #100	; 0x64
 8007cb2:	d901      	bls.n	8007cb8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	e12a      	b.n	8007f0e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007cb8:	4b76      	ldr	r3, [pc, #472]	; (8007e94 <HAL_RCC_OscConfig+0x4d4>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d0f0      	beq.n	8007ca6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d106      	bne.n	8007cda <HAL_RCC_OscConfig+0x31a>
 8007ccc:	4b70      	ldr	r3, [pc, #448]	; (8007e90 <HAL_RCC_OscConfig+0x4d0>)
 8007cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cd0:	4a6f      	ldr	r2, [pc, #444]	; (8007e90 <HAL_RCC_OscConfig+0x4d0>)
 8007cd2:	f043 0301 	orr.w	r3, r3, #1
 8007cd6:	6713      	str	r3, [r2, #112]	; 0x70
 8007cd8:	e02d      	b.n	8007d36 <HAL_RCC_OscConfig+0x376>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10c      	bne.n	8007cfc <HAL_RCC_OscConfig+0x33c>
 8007ce2:	4b6b      	ldr	r3, [pc, #428]	; (8007e90 <HAL_RCC_OscConfig+0x4d0>)
 8007ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ce6:	4a6a      	ldr	r2, [pc, #424]	; (8007e90 <HAL_RCC_OscConfig+0x4d0>)
 8007ce8:	f023 0301 	bic.w	r3, r3, #1
 8007cec:	6713      	str	r3, [r2, #112]	; 0x70
 8007cee:	4b68      	ldr	r3, [pc, #416]	; (8007e90 <HAL_RCC_OscConfig+0x4d0>)
 8007cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cf2:	4a67      	ldr	r2, [pc, #412]	; (8007e90 <HAL_RCC_OscConfig+0x4d0>)
 8007cf4:	f023 0304 	bic.w	r3, r3, #4
 8007cf8:	6713      	str	r3, [r2, #112]	; 0x70
 8007cfa:	e01c      	b.n	8007d36 <HAL_RCC_OscConfig+0x376>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	2b05      	cmp	r3, #5
 8007d02:	d10c      	bne.n	8007d1e <HAL_RCC_OscConfig+0x35e>
 8007d04:	4b62      	ldr	r3, [pc, #392]	; (8007e90 <HAL_RCC_OscConfig+0x4d0>)
 8007d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d08:	4a61      	ldr	r2, [pc, #388]	; (8007e90 <HAL_RCC_OscConfig+0x4d0>)
 8007d0a:	f043 0304 	orr.w	r3, r3, #4
 8007d0e:	6713      	str	r3, [r2, #112]	; 0x70
 8007d10:	4b5f      	ldr	r3, [pc, #380]	; (8007e90 <HAL_RCC_OscConfig+0x4d0>)
 8007d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d14:	4a5e      	ldr	r2, [pc, #376]	; (8007e90 <HAL_RCC_OscConfig+0x4d0>)
 8007d16:	f043 0301 	orr.w	r3, r3, #1
 8007d1a:	6713      	str	r3, [r2, #112]	; 0x70
 8007d1c:	e00b      	b.n	8007d36 <HAL_RCC_OscConfig+0x376>
 8007d1e:	4b5c      	ldr	r3, [pc, #368]	; (8007e90 <HAL_RCC_OscConfig+0x4d0>)
 8007d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d22:	4a5b      	ldr	r2, [pc, #364]	; (8007e90 <HAL_RCC_OscConfig+0x4d0>)
 8007d24:	f023 0301 	bic.w	r3, r3, #1
 8007d28:	6713      	str	r3, [r2, #112]	; 0x70
 8007d2a:	4b59      	ldr	r3, [pc, #356]	; (8007e90 <HAL_RCC_OscConfig+0x4d0>)
 8007d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d2e:	4a58      	ldr	r2, [pc, #352]	; (8007e90 <HAL_RCC_OscConfig+0x4d0>)
 8007d30:	f023 0304 	bic.w	r3, r3, #4
 8007d34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d015      	beq.n	8007d6a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d3e:	f7fd faa3 	bl	8005288 <HAL_GetTick>
 8007d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d44:	e00a      	b.n	8007d5c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d46:	f7fd fa9f 	bl	8005288 <HAL_GetTick>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	1ad3      	subs	r3, r2, r3
 8007d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d901      	bls.n	8007d5c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007d58:	2303      	movs	r3, #3
 8007d5a:	e0d8      	b.n	8007f0e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d5c:	4b4c      	ldr	r3, [pc, #304]	; (8007e90 <HAL_RCC_OscConfig+0x4d0>)
 8007d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d60:	f003 0302 	and.w	r3, r3, #2
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d0ee      	beq.n	8007d46 <HAL_RCC_OscConfig+0x386>
 8007d68:	e014      	b.n	8007d94 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d6a:	f7fd fa8d 	bl	8005288 <HAL_GetTick>
 8007d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d70:	e00a      	b.n	8007d88 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d72:	f7fd fa89 	bl	8005288 <HAL_GetTick>
 8007d76:	4602      	mov	r2, r0
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	1ad3      	subs	r3, r2, r3
 8007d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d901      	bls.n	8007d88 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007d84:	2303      	movs	r3, #3
 8007d86:	e0c2      	b.n	8007f0e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d88:	4b41      	ldr	r3, [pc, #260]	; (8007e90 <HAL_RCC_OscConfig+0x4d0>)
 8007d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d8c:	f003 0302 	and.w	r3, r3, #2
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d1ee      	bne.n	8007d72 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007d94:	7dfb      	ldrb	r3, [r7, #23]
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d105      	bne.n	8007da6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d9a:	4b3d      	ldr	r3, [pc, #244]	; (8007e90 <HAL_RCC_OscConfig+0x4d0>)
 8007d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d9e:	4a3c      	ldr	r2, [pc, #240]	; (8007e90 <HAL_RCC_OscConfig+0x4d0>)
 8007da0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007da4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	699b      	ldr	r3, [r3, #24]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	f000 80ae 	beq.w	8007f0c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007db0:	4b37      	ldr	r3, [pc, #220]	; (8007e90 <HAL_RCC_OscConfig+0x4d0>)
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	f003 030c 	and.w	r3, r3, #12
 8007db8:	2b08      	cmp	r3, #8
 8007dba:	d06d      	beq.n	8007e98 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	699b      	ldr	r3, [r3, #24]
 8007dc0:	2b02      	cmp	r3, #2
 8007dc2:	d14b      	bne.n	8007e5c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007dc4:	4b32      	ldr	r3, [pc, #200]	; (8007e90 <HAL_RCC_OscConfig+0x4d0>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a31      	ldr	r2, [pc, #196]	; (8007e90 <HAL_RCC_OscConfig+0x4d0>)
 8007dca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007dce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dd0:	f7fd fa5a 	bl	8005288 <HAL_GetTick>
 8007dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dd6:	e008      	b.n	8007dea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007dd8:	f7fd fa56 	bl	8005288 <HAL_GetTick>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	1ad3      	subs	r3, r2, r3
 8007de2:	2b02      	cmp	r3, #2
 8007de4:	d901      	bls.n	8007dea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007de6:	2303      	movs	r3, #3
 8007de8:	e091      	b.n	8007f0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dea:	4b29      	ldr	r3, [pc, #164]	; (8007e90 <HAL_RCC_OscConfig+0x4d0>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1f0      	bne.n	8007dd8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	69da      	ldr	r2, [r3, #28]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a1b      	ldr	r3, [r3, #32]
 8007dfe:	431a      	orrs	r2, r3
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e04:	019b      	lsls	r3, r3, #6
 8007e06:	431a      	orrs	r2, r3
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e0c:	085b      	lsrs	r3, r3, #1
 8007e0e:	3b01      	subs	r3, #1
 8007e10:	041b      	lsls	r3, r3, #16
 8007e12:	431a      	orrs	r2, r3
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e18:	061b      	lsls	r3, r3, #24
 8007e1a:	431a      	orrs	r2, r3
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e20:	071b      	lsls	r3, r3, #28
 8007e22:	491b      	ldr	r1, [pc, #108]	; (8007e90 <HAL_RCC_OscConfig+0x4d0>)
 8007e24:	4313      	orrs	r3, r2
 8007e26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e28:	4b19      	ldr	r3, [pc, #100]	; (8007e90 <HAL_RCC_OscConfig+0x4d0>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a18      	ldr	r2, [pc, #96]	; (8007e90 <HAL_RCC_OscConfig+0x4d0>)
 8007e2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e34:	f7fd fa28 	bl	8005288 <HAL_GetTick>
 8007e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e3a:	e008      	b.n	8007e4e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e3c:	f7fd fa24 	bl	8005288 <HAL_GetTick>
 8007e40:	4602      	mov	r2, r0
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	1ad3      	subs	r3, r2, r3
 8007e46:	2b02      	cmp	r3, #2
 8007e48:	d901      	bls.n	8007e4e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8007e4a:	2303      	movs	r3, #3
 8007e4c:	e05f      	b.n	8007f0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e4e:	4b10      	ldr	r3, [pc, #64]	; (8007e90 <HAL_RCC_OscConfig+0x4d0>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d0f0      	beq.n	8007e3c <HAL_RCC_OscConfig+0x47c>
 8007e5a:	e057      	b.n	8007f0c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e5c:	4b0c      	ldr	r3, [pc, #48]	; (8007e90 <HAL_RCC_OscConfig+0x4d0>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a0b      	ldr	r2, [pc, #44]	; (8007e90 <HAL_RCC_OscConfig+0x4d0>)
 8007e62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e68:	f7fd fa0e 	bl	8005288 <HAL_GetTick>
 8007e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e6e:	e008      	b.n	8007e82 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e70:	f7fd fa0a 	bl	8005288 <HAL_GetTick>
 8007e74:	4602      	mov	r2, r0
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	1ad3      	subs	r3, r2, r3
 8007e7a:	2b02      	cmp	r3, #2
 8007e7c:	d901      	bls.n	8007e82 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8007e7e:	2303      	movs	r3, #3
 8007e80:	e045      	b.n	8007f0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e82:	4b03      	ldr	r3, [pc, #12]	; (8007e90 <HAL_RCC_OscConfig+0x4d0>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d1f0      	bne.n	8007e70 <HAL_RCC_OscConfig+0x4b0>
 8007e8e:	e03d      	b.n	8007f0c <HAL_RCC_OscConfig+0x54c>
 8007e90:	40023800 	.word	0x40023800
 8007e94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007e98:	4b1f      	ldr	r3, [pc, #124]	; (8007f18 <HAL_RCC_OscConfig+0x558>)
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	699b      	ldr	r3, [r3, #24]
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d030      	beq.n	8007f08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d129      	bne.n	8007f08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d122      	bne.n	8007f08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007ec8:	4013      	ands	r3, r2
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007ece:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d119      	bne.n	8007f08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ede:	085b      	lsrs	r3, r3, #1
 8007ee0:	3b01      	subs	r3, #1
 8007ee2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d10f      	bne.n	8007f08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d107      	bne.n	8007f08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f02:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d001      	beq.n	8007f0c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	e000      	b.n	8007f0e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8007f0c:	2300      	movs	r3, #0
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3718      	adds	r7, #24
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
 8007f16:	bf00      	nop
 8007f18:	40023800 	.word	0x40023800

08007f1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b084      	sub	sp, #16
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007f26:	2300      	movs	r3, #0
 8007f28:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d101      	bne.n	8007f34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007f30:	2301      	movs	r3, #1
 8007f32:	e0d0      	b.n	80080d6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007f34:	4b6a      	ldr	r3, [pc, #424]	; (80080e0 <HAL_RCC_ClockConfig+0x1c4>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f003 030f 	and.w	r3, r3, #15
 8007f3c:	683a      	ldr	r2, [r7, #0]
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d910      	bls.n	8007f64 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f42:	4b67      	ldr	r3, [pc, #412]	; (80080e0 <HAL_RCC_ClockConfig+0x1c4>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f023 020f 	bic.w	r2, r3, #15
 8007f4a:	4965      	ldr	r1, [pc, #404]	; (80080e0 <HAL_RCC_ClockConfig+0x1c4>)
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f52:	4b63      	ldr	r3, [pc, #396]	; (80080e0 <HAL_RCC_ClockConfig+0x1c4>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f003 030f 	and.w	r3, r3, #15
 8007f5a:	683a      	ldr	r2, [r7, #0]
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d001      	beq.n	8007f64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	e0b8      	b.n	80080d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f003 0302 	and.w	r3, r3, #2
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d020      	beq.n	8007fb2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f003 0304 	and.w	r3, r3, #4
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d005      	beq.n	8007f88 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007f7c:	4b59      	ldr	r3, [pc, #356]	; (80080e4 <HAL_RCC_ClockConfig+0x1c8>)
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	4a58      	ldr	r2, [pc, #352]	; (80080e4 <HAL_RCC_ClockConfig+0x1c8>)
 8007f82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007f86:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f003 0308 	and.w	r3, r3, #8
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d005      	beq.n	8007fa0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007f94:	4b53      	ldr	r3, [pc, #332]	; (80080e4 <HAL_RCC_ClockConfig+0x1c8>)
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	4a52      	ldr	r2, [pc, #328]	; (80080e4 <HAL_RCC_ClockConfig+0x1c8>)
 8007f9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007f9e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007fa0:	4b50      	ldr	r3, [pc, #320]	; (80080e4 <HAL_RCC_ClockConfig+0x1c8>)
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	494d      	ldr	r1, [pc, #308]	; (80080e4 <HAL_RCC_ClockConfig+0x1c8>)
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f003 0301 	and.w	r3, r3, #1
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d040      	beq.n	8008040 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d107      	bne.n	8007fd6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007fc6:	4b47      	ldr	r3, [pc, #284]	; (80080e4 <HAL_RCC_ClockConfig+0x1c8>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d115      	bne.n	8007ffe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e07f      	b.n	80080d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	2b02      	cmp	r3, #2
 8007fdc:	d107      	bne.n	8007fee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007fde:	4b41      	ldr	r3, [pc, #260]	; (80080e4 <HAL_RCC_ClockConfig+0x1c8>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d109      	bne.n	8007ffe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e073      	b.n	80080d6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fee:	4b3d      	ldr	r3, [pc, #244]	; (80080e4 <HAL_RCC_ClockConfig+0x1c8>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f003 0302 	and.w	r3, r3, #2
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d101      	bne.n	8007ffe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e06b      	b.n	80080d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007ffe:	4b39      	ldr	r3, [pc, #228]	; (80080e4 <HAL_RCC_ClockConfig+0x1c8>)
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	f023 0203 	bic.w	r2, r3, #3
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	4936      	ldr	r1, [pc, #216]	; (80080e4 <HAL_RCC_ClockConfig+0x1c8>)
 800800c:	4313      	orrs	r3, r2
 800800e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008010:	f7fd f93a 	bl	8005288 <HAL_GetTick>
 8008014:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008016:	e00a      	b.n	800802e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008018:	f7fd f936 	bl	8005288 <HAL_GetTick>
 800801c:	4602      	mov	r2, r0
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	1ad3      	subs	r3, r2, r3
 8008022:	f241 3288 	movw	r2, #5000	; 0x1388
 8008026:	4293      	cmp	r3, r2
 8008028:	d901      	bls.n	800802e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800802a:	2303      	movs	r3, #3
 800802c:	e053      	b.n	80080d6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800802e:	4b2d      	ldr	r3, [pc, #180]	; (80080e4 <HAL_RCC_ClockConfig+0x1c8>)
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	f003 020c 	and.w	r2, r3, #12
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	429a      	cmp	r2, r3
 800803e:	d1eb      	bne.n	8008018 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008040:	4b27      	ldr	r3, [pc, #156]	; (80080e0 <HAL_RCC_ClockConfig+0x1c4>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f003 030f 	and.w	r3, r3, #15
 8008048:	683a      	ldr	r2, [r7, #0]
 800804a:	429a      	cmp	r2, r3
 800804c:	d210      	bcs.n	8008070 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800804e:	4b24      	ldr	r3, [pc, #144]	; (80080e0 <HAL_RCC_ClockConfig+0x1c4>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f023 020f 	bic.w	r2, r3, #15
 8008056:	4922      	ldr	r1, [pc, #136]	; (80080e0 <HAL_RCC_ClockConfig+0x1c4>)
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	4313      	orrs	r3, r2
 800805c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800805e:	4b20      	ldr	r3, [pc, #128]	; (80080e0 <HAL_RCC_ClockConfig+0x1c4>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f003 030f 	and.w	r3, r3, #15
 8008066:	683a      	ldr	r2, [r7, #0]
 8008068:	429a      	cmp	r2, r3
 800806a:	d001      	beq.n	8008070 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	e032      	b.n	80080d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f003 0304 	and.w	r3, r3, #4
 8008078:	2b00      	cmp	r3, #0
 800807a:	d008      	beq.n	800808e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800807c:	4b19      	ldr	r3, [pc, #100]	; (80080e4 <HAL_RCC_ClockConfig+0x1c8>)
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	4916      	ldr	r1, [pc, #88]	; (80080e4 <HAL_RCC_ClockConfig+0x1c8>)
 800808a:	4313      	orrs	r3, r2
 800808c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f003 0308 	and.w	r3, r3, #8
 8008096:	2b00      	cmp	r3, #0
 8008098:	d009      	beq.n	80080ae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800809a:	4b12      	ldr	r3, [pc, #72]	; (80080e4 <HAL_RCC_ClockConfig+0x1c8>)
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	691b      	ldr	r3, [r3, #16]
 80080a6:	00db      	lsls	r3, r3, #3
 80080a8:	490e      	ldr	r1, [pc, #56]	; (80080e4 <HAL_RCC_ClockConfig+0x1c8>)
 80080aa:	4313      	orrs	r3, r2
 80080ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80080ae:	f000 f821 	bl	80080f4 <HAL_RCC_GetSysClockFreq>
 80080b2:	4602      	mov	r2, r0
 80080b4:	4b0b      	ldr	r3, [pc, #44]	; (80080e4 <HAL_RCC_ClockConfig+0x1c8>)
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	091b      	lsrs	r3, r3, #4
 80080ba:	f003 030f 	and.w	r3, r3, #15
 80080be:	490a      	ldr	r1, [pc, #40]	; (80080e8 <HAL_RCC_ClockConfig+0x1cc>)
 80080c0:	5ccb      	ldrb	r3, [r1, r3]
 80080c2:	fa22 f303 	lsr.w	r3, r2, r3
 80080c6:	4a09      	ldr	r2, [pc, #36]	; (80080ec <HAL_RCC_ClockConfig+0x1d0>)
 80080c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80080ca:	4b09      	ldr	r3, [pc, #36]	; (80080f0 <HAL_RCC_ClockConfig+0x1d4>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4618      	mov	r0, r3
 80080d0:	f7fd f896 	bl	8005200 <HAL_InitTick>

  return HAL_OK;
 80080d4:	2300      	movs	r3, #0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3710      	adds	r7, #16
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	40023c00 	.word	0x40023c00
 80080e4:	40023800 	.word	0x40023800
 80080e8:	08014c74 	.word	0x08014c74
 80080ec:	20000004 	.word	0x20000004
 80080f0:	20000008 	.word	0x20000008

080080f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80080f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080f8:	b090      	sub	sp, #64	; 0x40
 80080fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80080fc:	2300      	movs	r3, #0
 80080fe:	637b      	str	r3, [r7, #52]	; 0x34
 8008100:	2300      	movs	r3, #0
 8008102:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008104:	2300      	movs	r3, #0
 8008106:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8008108:	2300      	movs	r3, #0
 800810a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800810c:	4b59      	ldr	r3, [pc, #356]	; (8008274 <HAL_RCC_GetSysClockFreq+0x180>)
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	f003 030c 	and.w	r3, r3, #12
 8008114:	2b08      	cmp	r3, #8
 8008116:	d00d      	beq.n	8008134 <HAL_RCC_GetSysClockFreq+0x40>
 8008118:	2b08      	cmp	r3, #8
 800811a:	f200 80a1 	bhi.w	8008260 <HAL_RCC_GetSysClockFreq+0x16c>
 800811e:	2b00      	cmp	r3, #0
 8008120:	d002      	beq.n	8008128 <HAL_RCC_GetSysClockFreq+0x34>
 8008122:	2b04      	cmp	r3, #4
 8008124:	d003      	beq.n	800812e <HAL_RCC_GetSysClockFreq+0x3a>
 8008126:	e09b      	b.n	8008260 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008128:	4b53      	ldr	r3, [pc, #332]	; (8008278 <HAL_RCC_GetSysClockFreq+0x184>)
 800812a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800812c:	e09b      	b.n	8008266 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800812e:	4b53      	ldr	r3, [pc, #332]	; (800827c <HAL_RCC_GetSysClockFreq+0x188>)
 8008130:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008132:	e098      	b.n	8008266 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008134:	4b4f      	ldr	r3, [pc, #316]	; (8008274 <HAL_RCC_GetSysClockFreq+0x180>)
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800813c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800813e:	4b4d      	ldr	r3, [pc, #308]	; (8008274 <HAL_RCC_GetSysClockFreq+0x180>)
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008146:	2b00      	cmp	r3, #0
 8008148:	d028      	beq.n	800819c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800814a:	4b4a      	ldr	r3, [pc, #296]	; (8008274 <HAL_RCC_GetSysClockFreq+0x180>)
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	099b      	lsrs	r3, r3, #6
 8008150:	2200      	movs	r2, #0
 8008152:	623b      	str	r3, [r7, #32]
 8008154:	627a      	str	r2, [r7, #36]	; 0x24
 8008156:	6a3b      	ldr	r3, [r7, #32]
 8008158:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800815c:	2100      	movs	r1, #0
 800815e:	4b47      	ldr	r3, [pc, #284]	; (800827c <HAL_RCC_GetSysClockFreq+0x188>)
 8008160:	fb03 f201 	mul.w	r2, r3, r1
 8008164:	2300      	movs	r3, #0
 8008166:	fb00 f303 	mul.w	r3, r0, r3
 800816a:	4413      	add	r3, r2
 800816c:	4a43      	ldr	r2, [pc, #268]	; (800827c <HAL_RCC_GetSysClockFreq+0x188>)
 800816e:	fba0 1202 	umull	r1, r2, r0, r2
 8008172:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008174:	460a      	mov	r2, r1
 8008176:	62ba      	str	r2, [r7, #40]	; 0x28
 8008178:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800817a:	4413      	add	r3, r2
 800817c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800817e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008180:	2200      	movs	r2, #0
 8008182:	61bb      	str	r3, [r7, #24]
 8008184:	61fa      	str	r2, [r7, #28]
 8008186:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800818a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800818e:	f7f8 fa6b 	bl	8000668 <__aeabi_uldivmod>
 8008192:	4602      	mov	r2, r0
 8008194:	460b      	mov	r3, r1
 8008196:	4613      	mov	r3, r2
 8008198:	63fb      	str	r3, [r7, #60]	; 0x3c
 800819a:	e053      	b.n	8008244 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800819c:	4b35      	ldr	r3, [pc, #212]	; (8008274 <HAL_RCC_GetSysClockFreq+0x180>)
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	099b      	lsrs	r3, r3, #6
 80081a2:	2200      	movs	r2, #0
 80081a4:	613b      	str	r3, [r7, #16]
 80081a6:	617a      	str	r2, [r7, #20]
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80081ae:	f04f 0b00 	mov.w	fp, #0
 80081b2:	4652      	mov	r2, sl
 80081b4:	465b      	mov	r3, fp
 80081b6:	f04f 0000 	mov.w	r0, #0
 80081ba:	f04f 0100 	mov.w	r1, #0
 80081be:	0159      	lsls	r1, r3, #5
 80081c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80081c4:	0150      	lsls	r0, r2, #5
 80081c6:	4602      	mov	r2, r0
 80081c8:	460b      	mov	r3, r1
 80081ca:	ebb2 080a 	subs.w	r8, r2, sl
 80081ce:	eb63 090b 	sbc.w	r9, r3, fp
 80081d2:	f04f 0200 	mov.w	r2, #0
 80081d6:	f04f 0300 	mov.w	r3, #0
 80081da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80081de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80081e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80081e6:	ebb2 0408 	subs.w	r4, r2, r8
 80081ea:	eb63 0509 	sbc.w	r5, r3, r9
 80081ee:	f04f 0200 	mov.w	r2, #0
 80081f2:	f04f 0300 	mov.w	r3, #0
 80081f6:	00eb      	lsls	r3, r5, #3
 80081f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80081fc:	00e2      	lsls	r2, r4, #3
 80081fe:	4614      	mov	r4, r2
 8008200:	461d      	mov	r5, r3
 8008202:	eb14 030a 	adds.w	r3, r4, sl
 8008206:	603b      	str	r3, [r7, #0]
 8008208:	eb45 030b 	adc.w	r3, r5, fp
 800820c:	607b      	str	r3, [r7, #4]
 800820e:	f04f 0200 	mov.w	r2, #0
 8008212:	f04f 0300 	mov.w	r3, #0
 8008216:	e9d7 4500 	ldrd	r4, r5, [r7]
 800821a:	4629      	mov	r1, r5
 800821c:	028b      	lsls	r3, r1, #10
 800821e:	4621      	mov	r1, r4
 8008220:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008224:	4621      	mov	r1, r4
 8008226:	028a      	lsls	r2, r1, #10
 8008228:	4610      	mov	r0, r2
 800822a:	4619      	mov	r1, r3
 800822c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800822e:	2200      	movs	r2, #0
 8008230:	60bb      	str	r3, [r7, #8]
 8008232:	60fa      	str	r2, [r7, #12]
 8008234:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008238:	f7f8 fa16 	bl	8000668 <__aeabi_uldivmod>
 800823c:	4602      	mov	r2, r0
 800823e:	460b      	mov	r3, r1
 8008240:	4613      	mov	r3, r2
 8008242:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008244:	4b0b      	ldr	r3, [pc, #44]	; (8008274 <HAL_RCC_GetSysClockFreq+0x180>)
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	0c1b      	lsrs	r3, r3, #16
 800824a:	f003 0303 	and.w	r3, r3, #3
 800824e:	3301      	adds	r3, #1
 8008250:	005b      	lsls	r3, r3, #1
 8008252:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8008254:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008258:	fbb2 f3f3 	udiv	r3, r2, r3
 800825c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800825e:	e002      	b.n	8008266 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008260:	4b05      	ldr	r3, [pc, #20]	; (8008278 <HAL_RCC_GetSysClockFreq+0x184>)
 8008262:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008264:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008268:	4618      	mov	r0, r3
 800826a:	3740      	adds	r7, #64	; 0x40
 800826c:	46bd      	mov	sp, r7
 800826e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008272:	bf00      	nop
 8008274:	40023800 	.word	0x40023800
 8008278:	00f42400 	.word	0x00f42400
 800827c:	017d7840 	.word	0x017d7840

08008280 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008280:	b480      	push	{r7}
 8008282:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008284:	4b03      	ldr	r3, [pc, #12]	; (8008294 <HAL_RCC_GetHCLKFreq+0x14>)
 8008286:	681b      	ldr	r3, [r3, #0]
}
 8008288:	4618      	mov	r0, r3
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr
 8008292:	bf00      	nop
 8008294:	20000004 	.word	0x20000004

08008298 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800829c:	f7ff fff0 	bl	8008280 <HAL_RCC_GetHCLKFreq>
 80082a0:	4602      	mov	r2, r0
 80082a2:	4b05      	ldr	r3, [pc, #20]	; (80082b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	0a9b      	lsrs	r3, r3, #10
 80082a8:	f003 0307 	and.w	r3, r3, #7
 80082ac:	4903      	ldr	r1, [pc, #12]	; (80082bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80082ae:	5ccb      	ldrb	r3, [r1, r3]
 80082b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	40023800 	.word	0x40023800
 80082bc:	08014c84 	.word	0x08014c84

080082c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80082c4:	f7ff ffdc 	bl	8008280 <HAL_RCC_GetHCLKFreq>
 80082c8:	4602      	mov	r2, r0
 80082ca:	4b05      	ldr	r3, [pc, #20]	; (80082e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	0b5b      	lsrs	r3, r3, #13
 80082d0:	f003 0307 	and.w	r3, r3, #7
 80082d4:	4903      	ldr	r1, [pc, #12]	; (80082e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80082d6:	5ccb      	ldrb	r3, [r1, r3]
 80082d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082dc:	4618      	mov	r0, r3
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	40023800 	.word	0x40023800
 80082e4:	08014c84 	.word	0x08014c84

080082e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b088      	sub	sp, #32
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80082f0:	2300      	movs	r3, #0
 80082f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80082f4:	2300      	movs	r3, #0
 80082f6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80082f8:	2300      	movs	r3, #0
 80082fa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80082fc:	2300      	movs	r3, #0
 80082fe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008300:	2300      	movs	r3, #0
 8008302:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f003 0301 	and.w	r3, r3, #1
 800830c:	2b00      	cmp	r3, #0
 800830e:	d012      	beq.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008310:	4b69      	ldr	r3, [pc, #420]	; (80084b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	4a68      	ldr	r2, [pc, #416]	; (80084b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008316:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800831a:	6093      	str	r3, [r2, #8]
 800831c:	4b66      	ldr	r3, [pc, #408]	; (80084b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800831e:	689a      	ldr	r2, [r3, #8]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008324:	4964      	ldr	r1, [pc, #400]	; (80084b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008326:	4313      	orrs	r3, r2
 8008328:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800832e:	2b00      	cmp	r3, #0
 8008330:	d101      	bne.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008332:	2301      	movs	r3, #1
 8008334:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800833e:	2b00      	cmp	r3, #0
 8008340:	d017      	beq.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008342:	4b5d      	ldr	r3, [pc, #372]	; (80084b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008348:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008350:	4959      	ldr	r1, [pc, #356]	; (80084b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008352:	4313      	orrs	r3, r2
 8008354:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800835c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008360:	d101      	bne.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008362:	2301      	movs	r3, #1
 8008364:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800836a:	2b00      	cmp	r3, #0
 800836c:	d101      	bne.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800836e:	2301      	movs	r3, #1
 8008370:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800837a:	2b00      	cmp	r3, #0
 800837c:	d017      	beq.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800837e:	4b4e      	ldr	r3, [pc, #312]	; (80084b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008380:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008384:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838c:	494a      	ldr	r1, [pc, #296]	; (80084b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800838e:	4313      	orrs	r3, r2
 8008390:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008398:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800839c:	d101      	bne.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800839e:	2301      	movs	r3, #1
 80083a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d101      	bne.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80083aa:	2301      	movs	r3, #1
 80083ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d001      	beq.n	80083be <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80083ba:	2301      	movs	r3, #1
 80083bc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f003 0320 	and.w	r3, r3, #32
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	f000 808b 	beq.w	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80083cc:	4b3a      	ldr	r3, [pc, #232]	; (80084b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d0:	4a39      	ldr	r2, [pc, #228]	; (80084b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083d6:	6413      	str	r3, [r2, #64]	; 0x40
 80083d8:	4b37      	ldr	r3, [pc, #220]	; (80084b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083e0:	60bb      	str	r3, [r7, #8]
 80083e2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80083e4:	4b35      	ldr	r3, [pc, #212]	; (80084bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a34      	ldr	r2, [pc, #208]	; (80084bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80083ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083f0:	f7fc ff4a 	bl	8005288 <HAL_GetTick>
 80083f4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80083f6:	e008      	b.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083f8:	f7fc ff46 	bl	8005288 <HAL_GetTick>
 80083fc:	4602      	mov	r2, r0
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	1ad3      	subs	r3, r2, r3
 8008402:	2b64      	cmp	r3, #100	; 0x64
 8008404:	d901      	bls.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008406:	2303      	movs	r3, #3
 8008408:	e38f      	b.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800840a:	4b2c      	ldr	r3, [pc, #176]	; (80084bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008412:	2b00      	cmp	r3, #0
 8008414:	d0f0      	beq.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008416:	4b28      	ldr	r3, [pc, #160]	; (80084b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800841a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800841e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d035      	beq.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800842a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800842e:	693a      	ldr	r2, [r7, #16]
 8008430:	429a      	cmp	r2, r3
 8008432:	d02e      	beq.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008434:	4b20      	ldr	r3, [pc, #128]	; (80084b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800843c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800843e:	4b1e      	ldr	r3, [pc, #120]	; (80084b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008442:	4a1d      	ldr	r2, [pc, #116]	; (80084b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008448:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800844a:	4b1b      	ldr	r3, [pc, #108]	; (80084b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800844c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800844e:	4a1a      	ldr	r2, [pc, #104]	; (80084b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008450:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008454:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008456:	4a18      	ldr	r2, [pc, #96]	; (80084b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800845c:	4b16      	ldr	r3, [pc, #88]	; (80084b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800845e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008460:	f003 0301 	and.w	r3, r3, #1
 8008464:	2b01      	cmp	r3, #1
 8008466:	d114      	bne.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008468:	f7fc ff0e 	bl	8005288 <HAL_GetTick>
 800846c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800846e:	e00a      	b.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008470:	f7fc ff0a 	bl	8005288 <HAL_GetTick>
 8008474:	4602      	mov	r2, r0
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	1ad3      	subs	r3, r2, r3
 800847a:	f241 3288 	movw	r2, #5000	; 0x1388
 800847e:	4293      	cmp	r3, r2
 8008480:	d901      	bls.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008482:	2303      	movs	r3, #3
 8008484:	e351      	b.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008486:	4b0c      	ldr	r3, [pc, #48]	; (80084b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800848a:	f003 0302 	and.w	r3, r3, #2
 800848e:	2b00      	cmp	r3, #0
 8008490:	d0ee      	beq.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800849a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800849e:	d111      	bne.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80084a0:	4b05      	ldr	r3, [pc, #20]	; (80084b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80084ac:	4b04      	ldr	r3, [pc, #16]	; (80084c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80084ae:	400b      	ands	r3, r1
 80084b0:	4901      	ldr	r1, [pc, #4]	; (80084b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084b2:	4313      	orrs	r3, r2
 80084b4:	608b      	str	r3, [r1, #8]
 80084b6:	e00b      	b.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80084b8:	40023800 	.word	0x40023800
 80084bc:	40007000 	.word	0x40007000
 80084c0:	0ffffcff 	.word	0x0ffffcff
 80084c4:	4bac      	ldr	r3, [pc, #688]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	4aab      	ldr	r2, [pc, #684]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80084ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80084ce:	6093      	str	r3, [r2, #8]
 80084d0:	4ba9      	ldr	r3, [pc, #676]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80084d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084dc:	49a6      	ldr	r1, [pc, #664]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80084de:	4313      	orrs	r3, r2
 80084e0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f003 0310 	and.w	r3, r3, #16
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d010      	beq.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80084ee:	4ba2      	ldr	r3, [pc, #648]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80084f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084f4:	4aa0      	ldr	r2, [pc, #640]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80084f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80084fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80084fe:	4b9e      	ldr	r3, [pc, #632]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008500:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008508:	499b      	ldr	r1, [pc, #620]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800850a:	4313      	orrs	r3, r2
 800850c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008518:	2b00      	cmp	r3, #0
 800851a:	d00a      	beq.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800851c:	4b96      	ldr	r3, [pc, #600]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800851e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008522:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800852a:	4993      	ldr	r1, [pc, #588]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800852c:	4313      	orrs	r3, r2
 800852e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00a      	beq.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800853e:	4b8e      	ldr	r3, [pc, #568]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008544:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800854c:	498a      	ldr	r1, [pc, #552]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800854e:	4313      	orrs	r3, r2
 8008550:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800855c:	2b00      	cmp	r3, #0
 800855e:	d00a      	beq.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008560:	4b85      	ldr	r3, [pc, #532]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008566:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800856e:	4982      	ldr	r1, [pc, #520]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008570:	4313      	orrs	r3, r2
 8008572:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800857e:	2b00      	cmp	r3, #0
 8008580:	d00a      	beq.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008582:	4b7d      	ldr	r3, [pc, #500]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008588:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008590:	4979      	ldr	r1, [pc, #484]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008592:	4313      	orrs	r3, r2
 8008594:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00a      	beq.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80085a4:	4b74      	ldr	r3, [pc, #464]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80085a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085aa:	f023 0203 	bic.w	r2, r3, #3
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085b2:	4971      	ldr	r1, [pc, #452]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80085b4:	4313      	orrs	r3, r2
 80085b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d00a      	beq.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80085c6:	4b6c      	ldr	r3, [pc, #432]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80085c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085cc:	f023 020c 	bic.w	r2, r3, #12
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085d4:	4968      	ldr	r1, [pc, #416]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80085d6:	4313      	orrs	r3, r2
 80085d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d00a      	beq.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80085e8:	4b63      	ldr	r3, [pc, #396]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80085ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085ee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085f6:	4960      	ldr	r1, [pc, #384]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80085f8:	4313      	orrs	r3, r2
 80085fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008606:	2b00      	cmp	r3, #0
 8008608:	d00a      	beq.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800860a:	4b5b      	ldr	r3, [pc, #364]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800860c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008610:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008618:	4957      	ldr	r1, [pc, #348]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800861a:	4313      	orrs	r3, r2
 800861c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008628:	2b00      	cmp	r3, #0
 800862a:	d00a      	beq.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800862c:	4b52      	ldr	r3, [pc, #328]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800862e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008632:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800863a:	494f      	ldr	r1, [pc, #316]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800863c:	4313      	orrs	r3, r2
 800863e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800864a:	2b00      	cmp	r3, #0
 800864c:	d00a      	beq.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800864e:	4b4a      	ldr	r3, [pc, #296]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008654:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800865c:	4946      	ldr	r1, [pc, #280]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800865e:	4313      	orrs	r3, r2
 8008660:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800866c:	2b00      	cmp	r3, #0
 800866e:	d00a      	beq.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008670:	4b41      	ldr	r3, [pc, #260]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008676:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800867e:	493e      	ldr	r1, [pc, #248]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008680:	4313      	orrs	r3, r2
 8008682:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800868e:	2b00      	cmp	r3, #0
 8008690:	d00a      	beq.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008692:	4b39      	ldr	r3, [pc, #228]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008698:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086a0:	4935      	ldr	r1, [pc, #212]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80086a2:	4313      	orrs	r3, r2
 80086a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d00a      	beq.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80086b4:	4b30      	ldr	r3, [pc, #192]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80086b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086ba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086c2:	492d      	ldr	r1, [pc, #180]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80086c4:	4313      	orrs	r3, r2
 80086c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d011      	beq.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80086d6:	4b28      	ldr	r3, [pc, #160]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80086d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086dc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086e4:	4924      	ldr	r1, [pc, #144]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80086e6:	4313      	orrs	r3, r2
 80086e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80086f4:	d101      	bne.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80086f6:	2301      	movs	r3, #1
 80086f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f003 0308 	and.w	r3, r3, #8
 8008702:	2b00      	cmp	r3, #0
 8008704:	d001      	beq.n	800870a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008706:	2301      	movs	r3, #1
 8008708:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008712:	2b00      	cmp	r3, #0
 8008714:	d00a      	beq.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008716:	4b18      	ldr	r3, [pc, #96]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800871c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008724:	4914      	ldr	r1, [pc, #80]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008726:	4313      	orrs	r3, r2
 8008728:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008734:	2b00      	cmp	r3, #0
 8008736:	d00b      	beq.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008738:	4b0f      	ldr	r3, [pc, #60]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800873a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800873e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008748:	490b      	ldr	r1, [pc, #44]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800874a:	4313      	orrs	r3, r2
 800874c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008758:	2b00      	cmp	r3, #0
 800875a:	d00f      	beq.n	800877c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800875c:	4b06      	ldr	r3, [pc, #24]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800875e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008762:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800876c:	4902      	ldr	r1, [pc, #8]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800876e:	4313      	orrs	r3, r2
 8008770:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008774:	e002      	b.n	800877c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8008776:	bf00      	nop
 8008778:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008784:	2b00      	cmp	r3, #0
 8008786:	d00b      	beq.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008788:	4b8a      	ldr	r3, [pc, #552]	; (80089b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800878a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800878e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008798:	4986      	ldr	r1, [pc, #536]	; (80089b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800879a:	4313      	orrs	r3, r2
 800879c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d00b      	beq.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80087ac:	4b81      	ldr	r3, [pc, #516]	; (80089b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80087ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087b2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087bc:	497d      	ldr	r1, [pc, #500]	; (80089b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80087be:	4313      	orrs	r3, r2
 80087c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80087c4:	69fb      	ldr	r3, [r7, #28]
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d006      	beq.n	80087d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	f000 80d6 	beq.w	8008984 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80087d8:	4b76      	ldr	r3, [pc, #472]	; (80089b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a75      	ldr	r2, [pc, #468]	; (80089b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80087de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80087e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087e4:	f7fc fd50 	bl	8005288 <HAL_GetTick>
 80087e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80087ea:	e008      	b.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80087ec:	f7fc fd4c 	bl	8005288 <HAL_GetTick>
 80087f0:	4602      	mov	r2, r0
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	1ad3      	subs	r3, r2, r3
 80087f6:	2b64      	cmp	r3, #100	; 0x64
 80087f8:	d901      	bls.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80087fa:	2303      	movs	r3, #3
 80087fc:	e195      	b.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80087fe:	4b6d      	ldr	r3, [pc, #436]	; (80089b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008806:	2b00      	cmp	r3, #0
 8008808:	d1f0      	bne.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f003 0301 	and.w	r3, r3, #1
 8008812:	2b00      	cmp	r3, #0
 8008814:	d021      	beq.n	800885a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800881a:	2b00      	cmp	r3, #0
 800881c:	d11d      	bne.n	800885a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800881e:	4b65      	ldr	r3, [pc, #404]	; (80089b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008820:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008824:	0c1b      	lsrs	r3, r3, #16
 8008826:	f003 0303 	and.w	r3, r3, #3
 800882a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800882c:	4b61      	ldr	r3, [pc, #388]	; (80089b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800882e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008832:	0e1b      	lsrs	r3, r3, #24
 8008834:	f003 030f 	and.w	r3, r3, #15
 8008838:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	019a      	lsls	r2, r3, #6
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	041b      	lsls	r3, r3, #16
 8008844:	431a      	orrs	r2, r3
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	061b      	lsls	r3, r3, #24
 800884a:	431a      	orrs	r2, r3
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	071b      	lsls	r3, r3, #28
 8008852:	4958      	ldr	r1, [pc, #352]	; (80089b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008854:	4313      	orrs	r3, r2
 8008856:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008862:	2b00      	cmp	r3, #0
 8008864:	d004      	beq.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800886a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800886e:	d00a      	beq.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008878:	2b00      	cmp	r3, #0
 800887a:	d02e      	beq.n	80088da <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008880:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008884:	d129      	bne.n	80088da <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008886:	4b4b      	ldr	r3, [pc, #300]	; (80089b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008888:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800888c:	0c1b      	lsrs	r3, r3, #16
 800888e:	f003 0303 	and.w	r3, r3, #3
 8008892:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008894:	4b47      	ldr	r3, [pc, #284]	; (80089b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008896:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800889a:	0f1b      	lsrs	r3, r3, #28
 800889c:	f003 0307 	and.w	r3, r3, #7
 80088a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	019a      	lsls	r2, r3, #6
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	041b      	lsls	r3, r3, #16
 80088ac:	431a      	orrs	r2, r3
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	68db      	ldr	r3, [r3, #12]
 80088b2:	061b      	lsls	r3, r3, #24
 80088b4:	431a      	orrs	r2, r3
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	071b      	lsls	r3, r3, #28
 80088ba:	493e      	ldr	r1, [pc, #248]	; (80089b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80088bc:	4313      	orrs	r3, r2
 80088be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80088c2:	4b3c      	ldr	r3, [pc, #240]	; (80089b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80088c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088c8:	f023 021f 	bic.w	r2, r3, #31
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d0:	3b01      	subs	r3, #1
 80088d2:	4938      	ldr	r1, [pc, #224]	; (80089b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80088d4:	4313      	orrs	r3, r2
 80088d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d01d      	beq.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80088e6:	4b33      	ldr	r3, [pc, #204]	; (80089b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80088e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088ec:	0e1b      	lsrs	r3, r3, #24
 80088ee:	f003 030f 	and.w	r3, r3, #15
 80088f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80088f4:	4b2f      	ldr	r3, [pc, #188]	; (80089b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80088f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088fa:	0f1b      	lsrs	r3, r3, #28
 80088fc:	f003 0307 	and.w	r3, r3, #7
 8008900:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	019a      	lsls	r2, r3, #6
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	691b      	ldr	r3, [r3, #16]
 800890c:	041b      	lsls	r3, r3, #16
 800890e:	431a      	orrs	r2, r3
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	061b      	lsls	r3, r3, #24
 8008914:	431a      	orrs	r2, r3
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	071b      	lsls	r3, r3, #28
 800891a:	4926      	ldr	r1, [pc, #152]	; (80089b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800891c:	4313      	orrs	r3, r2
 800891e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800892a:	2b00      	cmp	r3, #0
 800892c:	d011      	beq.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	019a      	lsls	r2, r3, #6
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	691b      	ldr	r3, [r3, #16]
 8008938:	041b      	lsls	r3, r3, #16
 800893a:	431a      	orrs	r2, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	061b      	lsls	r3, r3, #24
 8008942:	431a      	orrs	r2, r3
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	071b      	lsls	r3, r3, #28
 800894a:	491a      	ldr	r1, [pc, #104]	; (80089b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800894c:	4313      	orrs	r3, r2
 800894e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008952:	4b18      	ldr	r3, [pc, #96]	; (80089b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a17      	ldr	r2, [pc, #92]	; (80089b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008958:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800895c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800895e:	f7fc fc93 	bl	8005288 <HAL_GetTick>
 8008962:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008964:	e008      	b.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008966:	f7fc fc8f 	bl	8005288 <HAL_GetTick>
 800896a:	4602      	mov	r2, r0
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	1ad3      	subs	r3, r2, r3
 8008970:	2b64      	cmp	r3, #100	; 0x64
 8008972:	d901      	bls.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008974:	2303      	movs	r3, #3
 8008976:	e0d8      	b.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008978:	4b0e      	ldr	r3, [pc, #56]	; (80089b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008980:	2b00      	cmp	r3, #0
 8008982:	d0f0      	beq.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008984:	69bb      	ldr	r3, [r7, #24]
 8008986:	2b01      	cmp	r3, #1
 8008988:	f040 80ce 	bne.w	8008b28 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800898c:	4b09      	ldr	r3, [pc, #36]	; (80089b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a08      	ldr	r2, [pc, #32]	; (80089b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008992:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008996:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008998:	f7fc fc76 	bl	8005288 <HAL_GetTick>
 800899c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800899e:	e00b      	b.n	80089b8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80089a0:	f7fc fc72 	bl	8005288 <HAL_GetTick>
 80089a4:	4602      	mov	r2, r0
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	1ad3      	subs	r3, r2, r3
 80089aa:	2b64      	cmp	r3, #100	; 0x64
 80089ac:	d904      	bls.n	80089b8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80089ae:	2303      	movs	r3, #3
 80089b0:	e0bb      	b.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80089b2:	bf00      	nop
 80089b4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80089b8:	4b5e      	ldr	r3, [pc, #376]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089c4:	d0ec      	beq.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d003      	beq.n	80089da <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d009      	beq.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d02e      	beq.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d12a      	bne.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80089ee:	4b51      	ldr	r3, [pc, #324]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80089f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089f4:	0c1b      	lsrs	r3, r3, #16
 80089f6:	f003 0303 	and.w	r3, r3, #3
 80089fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80089fc:	4b4d      	ldr	r3, [pc, #308]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80089fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a02:	0f1b      	lsrs	r3, r3, #28
 8008a04:	f003 0307 	and.w	r3, r3, #7
 8008a08:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	695b      	ldr	r3, [r3, #20]
 8008a0e:	019a      	lsls	r2, r3, #6
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	041b      	lsls	r3, r3, #16
 8008a14:	431a      	orrs	r2, r3
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	699b      	ldr	r3, [r3, #24]
 8008a1a:	061b      	lsls	r3, r3, #24
 8008a1c:	431a      	orrs	r2, r3
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	071b      	lsls	r3, r3, #28
 8008a22:	4944      	ldr	r1, [pc, #272]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008a24:	4313      	orrs	r3, r2
 8008a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008a2a:	4b42      	ldr	r3, [pc, #264]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a30:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a38:	3b01      	subs	r3, #1
 8008a3a:	021b      	lsls	r3, r3, #8
 8008a3c:	493d      	ldr	r1, [pc, #244]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d022      	beq.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a58:	d11d      	bne.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008a5a:	4b36      	ldr	r3, [pc, #216]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a60:	0e1b      	lsrs	r3, r3, #24
 8008a62:	f003 030f 	and.w	r3, r3, #15
 8008a66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008a68:	4b32      	ldr	r3, [pc, #200]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a6e:	0f1b      	lsrs	r3, r3, #28
 8008a70:	f003 0307 	and.w	r3, r3, #7
 8008a74:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	695b      	ldr	r3, [r3, #20]
 8008a7a:	019a      	lsls	r2, r3, #6
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6a1b      	ldr	r3, [r3, #32]
 8008a80:	041b      	lsls	r3, r3, #16
 8008a82:	431a      	orrs	r2, r3
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	061b      	lsls	r3, r3, #24
 8008a88:	431a      	orrs	r2, r3
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	071b      	lsls	r3, r3, #28
 8008a8e:	4929      	ldr	r1, [pc, #164]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008a90:	4313      	orrs	r3, r2
 8008a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f003 0308 	and.w	r3, r3, #8
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d028      	beq.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008aa2:	4b24      	ldr	r3, [pc, #144]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008aa8:	0e1b      	lsrs	r3, r3, #24
 8008aaa:	f003 030f 	and.w	r3, r3, #15
 8008aae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008ab0:	4b20      	ldr	r3, [pc, #128]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ab6:	0c1b      	lsrs	r3, r3, #16
 8008ab8:	f003 0303 	and.w	r3, r3, #3
 8008abc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	695b      	ldr	r3, [r3, #20]
 8008ac2:	019a      	lsls	r2, r3, #6
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	041b      	lsls	r3, r3, #16
 8008ac8:	431a      	orrs	r2, r3
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	061b      	lsls	r3, r3, #24
 8008ace:	431a      	orrs	r2, r3
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	69db      	ldr	r3, [r3, #28]
 8008ad4:	071b      	lsls	r3, r3, #28
 8008ad6:	4917      	ldr	r1, [pc, #92]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008ade:	4b15      	ldr	r3, [pc, #84]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008ae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ae4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aec:	4911      	ldr	r1, [pc, #68]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008aee:	4313      	orrs	r3, r2
 8008af0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008af4:	4b0f      	ldr	r3, [pc, #60]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a0e      	ldr	r2, [pc, #56]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008afa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008afe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b00:	f7fc fbc2 	bl	8005288 <HAL_GetTick>
 8008b04:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008b06:	e008      	b.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008b08:	f7fc fbbe 	bl	8005288 <HAL_GetTick>
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	1ad3      	subs	r3, r2, r3
 8008b12:	2b64      	cmp	r3, #100	; 0x64
 8008b14:	d901      	bls.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008b16:	2303      	movs	r3, #3
 8008b18:	e007      	b.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008b1a:	4b06      	ldr	r3, [pc, #24]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b26:	d1ef      	bne.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8008b28:	2300      	movs	r3, #0
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3720      	adds	r7, #32
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	40023800 	.word	0x40023800

08008b38 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b082      	sub	sp, #8
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d101      	bne.n	8008b4a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	e081      	b.n	8008c4e <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	7f5b      	ldrb	r3, [r3, #29]
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d105      	bne.n	8008b60 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f7fb fc58 	bl	8004410 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2202      	movs	r2, #2
 8008b64:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	22ca      	movs	r2, #202	; 0xca
 8008b6c:	625a      	str	r2, [r3, #36]	; 0x24
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	2253      	movs	r2, #83	; 0x53
 8008b74:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 faac 	bl	80090d4 <RTC_EnterInitMode>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d008      	beq.n	8008b94 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	22ff      	movs	r2, #255	; 0xff
 8008b88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2204      	movs	r2, #4
 8008b8e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008b90:	2301      	movs	r3, #1
 8008b92:	e05c      	b.n	8008c4e <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	6899      	ldr	r1, [r3, #8]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681a      	ldr	r2, [r3, #0]
 8008b9e:	4b2e      	ldr	r3, [pc, #184]	; (8008c58 <HAL_RTC_Init+0x120>)
 8008ba0:	400b      	ands	r3, r1
 8008ba2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	6899      	ldr	r1, [r3, #8]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	685a      	ldr	r2, [r3, #4]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	691b      	ldr	r3, [r3, #16]
 8008bb2:	431a      	orrs	r2, r3
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	695b      	ldr	r3, [r3, #20]
 8008bb8:	431a      	orrs	r2, r3
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	430a      	orrs	r2, r1
 8008bc0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	68d2      	ldr	r2, [r2, #12]
 8008bca:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	6919      	ldr	r1, [r3, #16]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	041a      	lsls	r2, r3, #16
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	430a      	orrs	r2, r1
 8008bde:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	68da      	ldr	r2, [r3, #12]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008bee:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	689b      	ldr	r3, [r3, #8]
 8008bf6:	f003 0320 	and.w	r3, r3, #32
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d10e      	bne.n	8008c1c <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 fa40 	bl	8009084 <HAL_RTC_WaitForSynchro>
 8008c04:	4603      	mov	r3, r0
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d008      	beq.n	8008c1c <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	22ff      	movs	r2, #255	; 0xff
 8008c10:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2204      	movs	r2, #4
 8008c16:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	e018      	b.n	8008c4e <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f022 0208 	bic.w	r2, r2, #8
 8008c2a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	699a      	ldr	r2, [r3, #24]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	430a      	orrs	r2, r1
 8008c3c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	22ff      	movs	r2, #255	; 0xff
 8008c44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2201      	movs	r2, #1
 8008c4a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008c4c:	2300      	movs	r3, #0
  }
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3708      	adds	r7, #8
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop
 8008c58:	ff8fffbf 	.word	0xff8fffbf

08008c5c <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008c5c:	b590      	push	{r4, r7, lr}
 8008c5e:	b087      	sub	sp, #28
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	60f8      	str	r0, [r7, #12]
 8008c64:	60b9      	str	r1, [r7, #8]
 8008c66:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	7f1b      	ldrb	r3, [r3, #28]
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d101      	bne.n	8008c78 <HAL_RTC_SetTime+0x1c>
 8008c74:	2302      	movs	r3, #2
 8008c76:	e0a8      	b.n	8008dca <HAL_RTC_SetTime+0x16e>
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2202      	movs	r2, #2
 8008c82:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d126      	bne.n	8008cd8 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d102      	bne.n	8008c9e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f000 fa42 	bl	800912c <RTC_ByteToBcd2>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	785b      	ldrb	r3, [r3, #1]
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f000 fa3b 	bl	800912c <RTC_ByteToBcd2>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008cba:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	789b      	ldrb	r3, [r3, #2]
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f000 fa33 	bl	800912c <RTC_ByteToBcd2>
 8008cc6:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008cc8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	7b1b      	ldrb	r3, [r3, #12]
 8008cd0:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	617b      	str	r3, [r7, #20]
 8008cd6:	e018      	b.n	8008d0a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d102      	bne.n	8008cec <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	785b      	ldrb	r3, [r3, #1]
 8008cf6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008cf8:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008cfa:	68ba      	ldr	r2, [r7, #8]
 8008cfc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008cfe:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	7b1b      	ldrb	r3, [r3, #12]
 8008d04:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008d06:	4313      	orrs	r3, r2
 8008d08:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	22ca      	movs	r2, #202	; 0xca
 8008d10:	625a      	str	r2, [r3, #36]	; 0x24
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	2253      	movs	r2, #83	; 0x53
 8008d18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008d1a:	68f8      	ldr	r0, [r7, #12]
 8008d1c:	f000 f9da 	bl	80090d4 <RTC_EnterInitMode>
 8008d20:	4603      	mov	r3, r0
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d00b      	beq.n	8008d3e <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	22ff      	movs	r2, #255	; 0xff
 8008d2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2204      	movs	r2, #4
 8008d32:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2200      	movs	r2, #0
 8008d38:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e045      	b.n	8008dca <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681a      	ldr	r2, [r3, #0]
 8008d42:	6979      	ldr	r1, [r7, #20]
 8008d44:	4b23      	ldr	r3, [pc, #140]	; (8008dd4 <HAL_RTC_SetTime+0x178>)
 8008d46:	400b      	ands	r3, r1
 8008d48:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	689a      	ldr	r2, [r3, #8]
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008d58:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	6899      	ldr	r1, [r3, #8]
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	691a      	ldr	r2, [r3, #16]
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	695b      	ldr	r3, [r3, #20]
 8008d68:	431a      	orrs	r2, r3
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	430a      	orrs	r2, r1
 8008d70:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	68da      	ldr	r2, [r3, #12]
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d80:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	f003 0320 	and.w	r3, r3, #32
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d111      	bne.n	8008db4 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008d90:	68f8      	ldr	r0, [r7, #12]
 8008d92:	f000 f977 	bl	8009084 <HAL_RTC_WaitForSynchro>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d00b      	beq.n	8008db4 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	22ff      	movs	r2, #255	; 0xff
 8008da2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2204      	movs	r2, #4
 8008da8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2200      	movs	r2, #0
 8008dae:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008db0:	2301      	movs	r3, #1
 8008db2:	e00a      	b.n	8008dca <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	22ff      	movs	r2, #255	; 0xff
 8008dba:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008dc8:	2300      	movs	r3, #0
  }
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	371c      	adds	r7, #28
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd90      	pop	{r4, r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	007f7f7f 	.word	0x007f7f7f

08008dd8 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b086      	sub	sp, #24
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	60f8      	str	r0, [r7, #12]
 8008de0:	60b9      	str	r1, [r7, #8]
 8008de2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008de4:	2300      	movs	r3, #0
 8008de6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	691b      	ldr	r3, [r3, #16]
 8008df8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	4b22      	ldr	r3, [pc, #136]	; (8008e90 <HAL_RTC_GetTime+0xb8>)
 8008e08:	4013      	ands	r3, r2
 8008e0a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	0c1b      	lsrs	r3, r3, #16
 8008e10:	b2db      	uxtb	r3, r3
 8008e12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e16:	b2da      	uxtb	r2, r3
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	0a1b      	lsrs	r3, r3, #8
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e26:	b2da      	uxtb	r2, r3
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	b2db      	uxtb	r3, r3
 8008e30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e34:	b2da      	uxtb	r2, r3
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	0c1b      	lsrs	r3, r3, #16
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e44:	b2da      	uxtb	r2, r3
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	731a      	strb	r2, [r3, #12]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d11a      	bne.n	8008e86 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	781b      	ldrb	r3, [r3, #0]
 8008e54:	4618      	mov	r0, r3
 8008e56:	f000 f987 	bl	8009168 <RTC_Bcd2ToByte>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	785b      	ldrb	r3, [r3, #1]
 8008e66:	4618      	mov	r0, r3
 8008e68:	f000 f97e 	bl	8009168 <RTC_Bcd2ToByte>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	461a      	mov	r2, r3
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	789b      	ldrb	r3, [r3, #2]
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f000 f975 	bl	8009168 <RTC_Bcd2ToByte>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	461a      	mov	r2, r3
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008e86:	2300      	movs	r3, #0
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3718      	adds	r7, #24
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}
 8008e90:	007f7f7f 	.word	0x007f7f7f

08008e94 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008e94:	b590      	push	{r4, r7, lr}
 8008e96:	b087      	sub	sp, #28
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	60f8      	str	r0, [r7, #12]
 8008e9c:	60b9      	str	r1, [r7, #8]
 8008e9e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	7f1b      	ldrb	r3, [r3, #28]
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d101      	bne.n	8008eb0 <HAL_RTC_SetDate+0x1c>
 8008eac:	2302      	movs	r3, #2
 8008eae:	e092      	b.n	8008fd6 <HAL_RTC_SetDate+0x142>
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2202      	movs	r2, #2
 8008eba:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d10e      	bne.n	8008ee0 <HAL_RTC_SetDate+0x4c>
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	785b      	ldrb	r3, [r3, #1]
 8008ec6:	f003 0310 	and.w	r3, r3, #16
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d008      	beq.n	8008ee0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	785b      	ldrb	r3, [r3, #1]
 8008ed2:	f023 0310 	bic.w	r3, r3, #16
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	330a      	adds	r3, #10
 8008eda:	b2da      	uxtb	r2, r3
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d11c      	bne.n	8008f20 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	78db      	ldrb	r3, [r3, #3]
 8008eea:	4618      	mov	r0, r3
 8008eec:	f000 f91e 	bl	800912c <RTC_ByteToBcd2>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	785b      	ldrb	r3, [r3, #1]
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f000 f917 	bl	800912c <RTC_ByteToBcd2>
 8008efe:	4603      	mov	r3, r0
 8008f00:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008f02:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	789b      	ldrb	r3, [r3, #2]
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f000 f90f 	bl	800912c <RTC_ByteToBcd2>
 8008f0e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008f10:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	617b      	str	r3, [r7, #20]
 8008f1e:	e00e      	b.n	8008f3e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	78db      	ldrb	r3, [r3, #3]
 8008f24:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	785b      	ldrb	r3, [r3, #1]
 8008f2a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008f2c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008f2e:	68ba      	ldr	r2, [r7, #8]
 8008f30:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8008f32:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	22ca      	movs	r2, #202	; 0xca
 8008f44:	625a      	str	r2, [r3, #36]	; 0x24
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	2253      	movs	r2, #83	; 0x53
 8008f4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008f4e:	68f8      	ldr	r0, [r7, #12]
 8008f50:	f000 f8c0 	bl	80090d4 <RTC_EnterInitMode>
 8008f54:	4603      	mov	r3, r0
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d00b      	beq.n	8008f72 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	22ff      	movs	r2, #255	; 0xff
 8008f60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2204      	movs	r2, #4
 8008f66:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	e031      	b.n	8008fd6 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681a      	ldr	r2, [r3, #0]
 8008f76:	6979      	ldr	r1, [r7, #20]
 8008f78:	4b19      	ldr	r3, [pc, #100]	; (8008fe0 <HAL_RTC_SetDate+0x14c>)
 8008f7a:	400b      	ands	r3, r1
 8008f7c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	68da      	ldr	r2, [r3, #12]
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f8c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	689b      	ldr	r3, [r3, #8]
 8008f94:	f003 0320 	and.w	r3, r3, #32
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d111      	bne.n	8008fc0 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008f9c:	68f8      	ldr	r0, [r7, #12]
 8008f9e:	f000 f871 	bl	8009084 <HAL_RTC_WaitForSynchro>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d00b      	beq.n	8008fc0 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	22ff      	movs	r2, #255	; 0xff
 8008fae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2204      	movs	r2, #4
 8008fb4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	e00a      	b.n	8008fd6 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	22ff      	movs	r2, #255	; 0xff
 8008fc6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008fd4:	2300      	movs	r3, #0
  }
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	371c      	adds	r7, #28
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd90      	pop	{r4, r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	00ffff3f 	.word	0x00ffff3f

08008fe4 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b086      	sub	sp, #24
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	60b9      	str	r1, [r7, #8]
 8008fee:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	685a      	ldr	r2, [r3, #4]
 8008ffa:	4b21      	ldr	r3, [pc, #132]	; (8009080 <HAL_RTC_GetDate+0x9c>)
 8008ffc:	4013      	ands	r3, r2
 8008ffe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	0c1b      	lsrs	r3, r3, #16
 8009004:	b2da      	uxtb	r2, r3
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	0a1b      	lsrs	r3, r3, #8
 800900e:	b2db      	uxtb	r3, r3
 8009010:	f003 031f 	and.w	r3, r3, #31
 8009014:	b2da      	uxtb	r2, r3
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	b2db      	uxtb	r3, r3
 800901e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009022:	b2da      	uxtb	r2, r3
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	0b5b      	lsrs	r3, r3, #13
 800902c:	b2db      	uxtb	r3, r3
 800902e:	f003 0307 	and.w	r3, r3, #7
 8009032:	b2da      	uxtb	r2, r3
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d11a      	bne.n	8009074 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	78db      	ldrb	r3, [r3, #3]
 8009042:	4618      	mov	r0, r3
 8009044:	f000 f890 	bl	8009168 <RTC_Bcd2ToByte>
 8009048:	4603      	mov	r3, r0
 800904a:	461a      	mov	r2, r3
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	785b      	ldrb	r3, [r3, #1]
 8009054:	4618      	mov	r0, r3
 8009056:	f000 f887 	bl	8009168 <RTC_Bcd2ToByte>
 800905a:	4603      	mov	r3, r0
 800905c:	461a      	mov	r2, r3
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	789b      	ldrb	r3, [r3, #2]
 8009066:	4618      	mov	r0, r3
 8009068:	f000 f87e 	bl	8009168 <RTC_Bcd2ToByte>
 800906c:	4603      	mov	r3, r0
 800906e:	461a      	mov	r2, r3
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009074:	2300      	movs	r3, #0
}
 8009076:	4618      	mov	r0, r3
 8009078:	3718      	adds	r7, #24
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
 800907e:	bf00      	nop
 8009080:	00ffff3f 	.word	0x00ffff3f

08009084 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b084      	sub	sp, #16
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800908c:	2300      	movs	r3, #0
 800908e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	68da      	ldr	r2, [r3, #12]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800909e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80090a0:	f7fc f8f2 	bl	8005288 <HAL_GetTick>
 80090a4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80090a6:	e009      	b.n	80090bc <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80090a8:	f7fc f8ee 	bl	8005288 <HAL_GetTick>
 80090ac:	4602      	mov	r2, r0
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	1ad3      	subs	r3, r2, r3
 80090b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80090b6:	d901      	bls.n	80090bc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80090b8:	2303      	movs	r3, #3
 80090ba:	e007      	b.n	80090cc <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	f003 0320 	and.w	r3, r3, #32
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d0ee      	beq.n	80090a8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80090ca:	2300      	movs	r3, #0
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3710      	adds	r7, #16
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80090dc:	2300      	movs	r3, #0
 80090de:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d119      	bne.n	8009122 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f04f 32ff 	mov.w	r2, #4294967295
 80090f6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80090f8:	f7fc f8c6 	bl	8005288 <HAL_GetTick>
 80090fc:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80090fe:	e009      	b.n	8009114 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009100:	f7fc f8c2 	bl	8005288 <HAL_GetTick>
 8009104:	4602      	mov	r2, r0
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	1ad3      	subs	r3, r2, r3
 800910a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800910e:	d901      	bls.n	8009114 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8009110:	2303      	movs	r3, #3
 8009112:	e007      	b.n	8009124 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	68db      	ldr	r3, [r3, #12]
 800911a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800911e:	2b00      	cmp	r3, #0
 8009120:	d0ee      	beq.n	8009100 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8009122:	2300      	movs	r3, #0
}
 8009124:	4618      	mov	r0, r3
 8009126:	3710      	adds	r7, #16
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}

0800912c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800912c:	b480      	push	{r7}
 800912e:	b085      	sub	sp, #20
 8009130:	af00      	add	r7, sp, #0
 8009132:	4603      	mov	r3, r0
 8009134:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8009136:	2300      	movs	r3, #0
 8009138:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800913a:	e005      	b.n	8009148 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	3301      	adds	r3, #1
 8009140:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8009142:	79fb      	ldrb	r3, [r7, #7]
 8009144:	3b0a      	subs	r3, #10
 8009146:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8009148:	79fb      	ldrb	r3, [r7, #7]
 800914a:	2b09      	cmp	r3, #9
 800914c:	d8f6      	bhi.n	800913c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	b2db      	uxtb	r3, r3
 8009152:	011b      	lsls	r3, r3, #4
 8009154:	b2da      	uxtb	r2, r3
 8009156:	79fb      	ldrb	r3, [r7, #7]
 8009158:	4313      	orrs	r3, r2
 800915a:	b2db      	uxtb	r3, r3
}
 800915c:	4618      	mov	r0, r3
 800915e:	3714      	adds	r7, #20
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr

08009168 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009168:	b480      	push	{r7}
 800916a:	b085      	sub	sp, #20
 800916c:	af00      	add	r7, sp, #0
 800916e:	4603      	mov	r3, r0
 8009170:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8009172:	2300      	movs	r3, #0
 8009174:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8009176:	79fb      	ldrb	r3, [r7, #7]
 8009178:	091b      	lsrs	r3, r3, #4
 800917a:	b2db      	uxtb	r3, r3
 800917c:	461a      	mov	r2, r3
 800917e:	4613      	mov	r3, r2
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	4413      	add	r3, r2
 8009184:	005b      	lsls	r3, r3, #1
 8009186:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8009188:	79fb      	ldrb	r3, [r7, #7]
 800918a:	f003 030f 	and.w	r3, r3, #15
 800918e:	b2da      	uxtb	r2, r3
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	b2db      	uxtb	r3, r3
 8009194:	4413      	add	r3, r2
 8009196:	b2db      	uxtb	r3, r3
}
 8009198:	4618      	mov	r0, r3
 800919a:	3714      	adds	r7, #20
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b082      	sub	sp, #8
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d101      	bne.n	80091b6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80091b2:	2301      	movs	r3, #1
 80091b4:	e022      	b.n	80091fc <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80091bc:	b2db      	uxtb	r3, r3
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d105      	bne.n	80091ce <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2200      	movs	r2, #0
 80091c6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f7fb f95b 	bl	8004484 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2203      	movs	r2, #3
 80091d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 f814 	bl	8009204 <HAL_SD_InitCard>
 80091dc:	4603      	mov	r3, r0
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d001      	beq.n	80091e6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80091e2:	2301      	movs	r3, #1
 80091e4:	e00a      	b.n	80091fc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2200      	movs	r2, #0
 80091f0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2201      	movs	r2, #1
 80091f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80091fa:	2300      	movs	r3, #0
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3708      	adds	r7, #8
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009204:	b5b0      	push	{r4, r5, r7, lr}
 8009206:	b08e      	sub	sp, #56	; 0x38
 8009208:	af04      	add	r7, sp, #16
 800920a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800920c:	2300      	movs	r3, #0
 800920e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8009210:	2300      	movs	r3, #0
 8009212:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009214:	2300      	movs	r3, #0
 8009216:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009218:	2300      	movs	r3, #0
 800921a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800921c:	2300      	movs	r3, #0
 800921e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8009220:	2376      	movs	r3, #118	; 0x76
 8009222:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681d      	ldr	r5, [r3, #0]
 8009228:	466c      	mov	r4, sp
 800922a:	f107 0314 	add.w	r3, r7, #20
 800922e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009232:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009236:	f107 0308 	add.w	r3, r7, #8
 800923a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800923c:	4628      	mov	r0, r5
 800923e:	f003 f9c3 	bl	800c5c8 <SDMMC_Init>
 8009242:	4603      	mov	r3, r0
 8009244:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8009248:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800924c:	2b00      	cmp	r3, #0
 800924e:	d001      	beq.n	8009254 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8009250:	2301      	movs	r3, #1
 8009252:	e059      	b.n	8009308 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	685a      	ldr	r2, [r3, #4]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009262:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4618      	mov	r0, r3
 800926a:	f003 f9f7 	bl	800c65c <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	685a      	ldr	r2, [r3, #4]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800927c:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800927e:	2002      	movs	r0, #2
 8009280:	f7fc f80e 	bl	80052a0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f000 fff3 	bl	800a270 <SD_PowerON>
 800928a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800928c:	6a3b      	ldr	r3, [r7, #32]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d00b      	beq.n	80092aa <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2201      	movs	r2, #1
 8009296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800929e:	6a3b      	ldr	r3, [r7, #32]
 80092a0:	431a      	orrs	r2, r3
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80092a6:	2301      	movs	r3, #1
 80092a8:	e02e      	b.n	8009308 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 ff12 	bl	800a0d4 <SD_InitCard>
 80092b0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80092b2:	6a3b      	ldr	r3, [r7, #32]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d00b      	beq.n	80092d0 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2201      	movs	r2, #1
 80092bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092c4:	6a3b      	ldr	r3, [r7, #32]
 80092c6:	431a      	orrs	r2, r3
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80092cc:	2301      	movs	r3, #1
 80092ce:	e01b      	b.n	8009308 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80092d8:	4618      	mov	r0, r3
 80092da:	f003 fa51 	bl	800c780 <SDMMC_CmdBlockLength>
 80092de:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80092e0:	6a3b      	ldr	r3, [r7, #32]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d00f      	beq.n	8009306 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4a09      	ldr	r2, [pc, #36]	; (8009310 <HAL_SD_InitCard+0x10c>)
 80092ec:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092f2:	6a3b      	ldr	r3, [r7, #32]
 80092f4:	431a      	orrs	r2, r3
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2201      	movs	r2, #1
 80092fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	e000      	b.n	8009308 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8009306:	2300      	movs	r3, #0
}
 8009308:	4618      	mov	r0, r3
 800930a:	3728      	adds	r7, #40	; 0x28
 800930c:	46bd      	mov	sp, r7
 800930e:	bdb0      	pop	{r4, r5, r7, pc}
 8009310:	004005ff 	.word	0x004005ff

08009314 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b08c      	sub	sp, #48	; 0x30
 8009318:	af00      	add	r7, sp, #0
 800931a:	60f8      	str	r0, [r7, #12]
 800931c:	60b9      	str	r1, [r7, #8]
 800931e:	607a      	str	r2, [r7, #4]
 8009320:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d107      	bne.n	800933c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009330:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009338:	2301      	movs	r3, #1
 800933a:	e0c3      	b.n	80094c4 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009342:	b2db      	uxtb	r3, r3
 8009344:	2b01      	cmp	r3, #1
 8009346:	f040 80bc 	bne.w	80094c2 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2200      	movs	r2, #0
 800934e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009350:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	441a      	add	r2, r3
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800935a:	429a      	cmp	r2, r3
 800935c:	d907      	bls.n	800936e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009362:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800936a:	2301      	movs	r3, #1
 800936c:	e0aa      	b.n	80094c4 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	2203      	movs	r2, #3
 8009372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2200      	movs	r2, #0
 800937c:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800938c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009392:	4a4e      	ldr	r2, [pc, #312]	; (80094cc <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8009394:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800939a:	4a4d      	ldr	r2, [pc, #308]	; (80094d0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800939c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093a2:	2200      	movs	r2, #0
 80093a4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093aa:	2200      	movs	r2, #0
 80093ac:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093be:	689a      	ldr	r2, [r3, #8]
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	430a      	orrs	r2, r1
 80093c8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	3380      	adds	r3, #128	; 0x80
 80093d4:	4619      	mov	r1, r3
 80093d6:	68ba      	ldr	r2, [r7, #8]
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	025b      	lsls	r3, r3, #9
 80093dc:	089b      	lsrs	r3, r3, #2
 80093de:	f7fc fcd3 	bl	8005d88 <HAL_DMA_Start_IT>
 80093e2:	4603      	mov	r3, r0
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d017      	beq.n	8009418 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80093f6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a35      	ldr	r2, [pc, #212]	; (80094d4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80093fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009404:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2201      	movs	r2, #1
 8009410:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009414:	2301      	movs	r3, #1
 8009416:	e055      	b.n	80094c4 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f042 0208 	orr.w	r2, r2, #8
 8009426:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800942c:	2b01      	cmp	r3, #1
 800942e:	d002      	beq.n	8009436 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8009430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009432:	025b      	lsls	r3, r3, #9
 8009434:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009436:	f04f 33ff 	mov.w	r3, #4294967295
 800943a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	025b      	lsls	r3, r3, #9
 8009440:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009442:	2390      	movs	r3, #144	; 0x90
 8009444:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009446:	2302      	movs	r3, #2
 8009448:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800944a:	2300      	movs	r3, #0
 800944c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800944e:	2301      	movs	r3, #1
 8009450:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f107 0210 	add.w	r2, r7, #16
 800945a:	4611      	mov	r1, r2
 800945c:	4618      	mov	r0, r3
 800945e:	f003 f963 	bl	800c728 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	2b01      	cmp	r3, #1
 8009466:	d90a      	bls.n	800947e <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2282      	movs	r2, #130	; 0x82
 800946c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009474:	4618      	mov	r0, r3
 8009476:	f003 f9c7 	bl	800c808 <SDMMC_CmdReadMultiBlock>
 800947a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800947c:	e009      	b.n	8009492 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2281      	movs	r2, #129	; 0x81
 8009482:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800948a:	4618      	mov	r0, r3
 800948c:	f003 f99a 	bl	800c7c4 <SDMMC_CmdReadSingleBlock>
 8009490:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8009492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009494:	2b00      	cmp	r3, #0
 8009496:	d012      	beq.n	80094be <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4a0d      	ldr	r2, [pc, #52]	; (80094d4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800949e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094a6:	431a      	orrs	r2, r3
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2201      	movs	r2, #1
 80094b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2200      	movs	r2, #0
 80094b8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80094ba:	2301      	movs	r3, #1
 80094bc:	e002      	b.n	80094c4 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 80094be:	2300      	movs	r3, #0
 80094c0:	e000      	b.n	80094c4 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 80094c2:	2302      	movs	r3, #2
  }
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3730      	adds	r7, #48	; 0x30
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}
 80094cc:	08009ee3 	.word	0x08009ee3
 80094d0:	08009f55 	.word	0x08009f55
 80094d4:	004005ff 	.word	0x004005ff

080094d8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b08c      	sub	sp, #48	; 0x30
 80094dc:	af00      	add	r7, sp, #0
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	607a      	str	r2, [r7, #4]
 80094e4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d107      	bne.n	8009500 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80094fc:	2301      	movs	r3, #1
 80094fe:	e0c6      	b.n	800968e <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009506:	b2db      	uxtb	r3, r3
 8009508:	2b01      	cmp	r3, #1
 800950a:	f040 80bf 	bne.w	800968c <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2200      	movs	r2, #0
 8009512:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009514:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	441a      	add	r2, r3
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800951e:	429a      	cmp	r2, r3
 8009520:	d907      	bls.n	8009532 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009526:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	e0ad      	b.n	800968e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2203      	movs	r2, #3
 8009536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	2200      	movs	r2, #0
 8009540:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f042 021a 	orr.w	r2, r2, #26
 8009550:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009556:	4a50      	ldr	r2, [pc, #320]	; (8009698 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8009558:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800955e:	4a4f      	ldr	r2, [pc, #316]	; (800969c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8009560:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009566:	2200      	movs	r2, #0
 8009568:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800956e:	2b01      	cmp	r3, #1
 8009570:	d002      	beq.n	8009578 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8009572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009574:	025b      	lsls	r3, r3, #9
 8009576:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	2b01      	cmp	r3, #1
 800957c:	d90a      	bls.n	8009594 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	22a0      	movs	r2, #160	; 0xa0
 8009582:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800958a:	4618      	mov	r0, r3
 800958c:	f003 f980 	bl	800c890 <SDMMC_CmdWriteMultiBlock>
 8009590:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009592:	e009      	b.n	80095a8 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2290      	movs	r2, #144	; 0x90
 8009598:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80095a0:	4618      	mov	r0, r3
 80095a2:	f003 f953 	bl	800c84c <SDMMC_CmdWriteSingleBlock>
 80095a6:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80095a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d012      	beq.n	80095d4 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a3b      	ldr	r2, [pc, #236]	; (80096a0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80095b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095bc:	431a      	orrs	r2, r3
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2201      	movs	r2, #1
 80095c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2200      	movs	r2, #0
 80095ce:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80095d0:	2301      	movs	r3, #1
 80095d2:	e05c      	b.n	800968e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f042 0208 	orr.w	r2, r2, #8
 80095e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095e8:	2240      	movs	r2, #64	; 0x40
 80095ea:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095fc:	689a      	ldr	r2, [r3, #8]
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	430a      	orrs	r2, r1
 8009606:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800960c:	68b9      	ldr	r1, [r7, #8]
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	3380      	adds	r3, #128	; 0x80
 8009614:	461a      	mov	r2, r3
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	025b      	lsls	r3, r3, #9
 800961a:	089b      	lsrs	r3, r3, #2
 800961c:	f7fc fbb4 	bl	8005d88 <HAL_DMA_Start_IT>
 8009620:	4603      	mov	r3, r0
 8009622:	2b00      	cmp	r3, #0
 8009624:	d01a      	beq.n	800965c <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f022 021a 	bic.w	r2, r2, #26
 8009634:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4a19      	ldr	r2, [pc, #100]	; (80096a0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800963c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009642:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2201      	movs	r2, #1
 800964e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2200      	movs	r2, #0
 8009656:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009658:	2301      	movs	r3, #1
 800965a:	e018      	b.n	800968e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800965c:	f04f 33ff 	mov.w	r3, #4294967295
 8009660:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	025b      	lsls	r3, r3, #9
 8009666:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009668:	2390      	movs	r3, #144	; 0x90
 800966a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800966c:	2300      	movs	r3, #0
 800966e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009670:	2300      	movs	r3, #0
 8009672:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8009674:	2301      	movs	r3, #1
 8009676:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f107 0210 	add.w	r2, r7, #16
 8009680:	4611      	mov	r1, r2
 8009682:	4618      	mov	r0, r3
 8009684:	f003 f850 	bl	800c728 <SDMMC_ConfigData>

      return HAL_OK;
 8009688:	2300      	movs	r3, #0
 800968a:	e000      	b.n	800968e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800968c:	2302      	movs	r3, #2
  }
}
 800968e:	4618      	mov	r0, r3
 8009690:	3730      	adds	r7, #48	; 0x30
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	08009eb9 	.word	0x08009eb9
 800969c:	08009f55 	.word	0x08009f55
 80096a0:	004005ff 	.word	0x004005ff

080096a4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096b0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d008      	beq.n	80096d2 <HAL_SD_IRQHandler+0x2e>
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f003 0308 	and.w	r3, r3, #8
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d003      	beq.n	80096d2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 ffef 	bl	800a6ae <SD_Read_IT>
 80096d0:	e15a      	b.n	8009988 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096dc:	2b00      	cmp	r3, #0
 80096de:	f000 808d 	beq.w	80097fc <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80096ea:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681a      	ldr	r2, [r3, #0]
 80096f6:	4b9a      	ldr	r3, [pc, #616]	; (8009960 <HAL_SD_IRQHandler+0x2bc>)
 80096f8:	400b      	ands	r3, r1
 80096fa:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f022 0201 	bic.w	r2, r2, #1
 800970a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f003 0308 	and.w	r3, r3, #8
 8009712:	2b00      	cmp	r3, #0
 8009714:	d039      	beq.n	800978a <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	f003 0302 	and.w	r3, r3, #2
 800971c:	2b00      	cmp	r3, #0
 800971e:	d104      	bne.n	800972a <HAL_SD_IRQHandler+0x86>
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f003 0320 	and.w	r3, r3, #32
 8009726:	2b00      	cmp	r3, #0
 8009728:	d011      	beq.n	800974e <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4618      	mov	r0, r3
 8009730:	f003 f8d0 	bl	800c8d4 <SDMMC_CmdStopTransfer>
 8009734:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d008      	beq.n	800974e <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	431a      	orrs	r2, r3
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f000 f921 	bl	8009990 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f240 523a 	movw	r2, #1338	; 0x53a
 8009756:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2201      	movs	r2, #1
 800975c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2200      	movs	r2, #0
 8009764:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	f003 0301 	and.w	r3, r3, #1
 800976c:	2b00      	cmp	r3, #0
 800976e:	d104      	bne.n	800977a <HAL_SD_IRQHandler+0xd6>
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f003 0302 	and.w	r3, r3, #2
 8009776:	2b00      	cmp	r3, #0
 8009778:	d003      	beq.n	8009782 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f003 fd40 	bl	800d200 <HAL_SD_RxCpltCallback>
 8009780:	e102      	b.n	8009988 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f003 fd32 	bl	800d1ec <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009788:	e0fe      	b.n	8009988 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009790:	2b00      	cmp	r3, #0
 8009792:	f000 80f9 	beq.w	8009988 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	f003 0320 	and.w	r3, r3, #32
 800979c:	2b00      	cmp	r3, #0
 800979e:	d011      	beq.n	80097c4 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4618      	mov	r0, r3
 80097a6:	f003 f895 	bl	800c8d4 <SDMMC_CmdStopTransfer>
 80097aa:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d008      	beq.n	80097c4 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	431a      	orrs	r2, r3
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 f8e6 	bl	8009990 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f003 0301 	and.w	r3, r3, #1
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	f040 80dc 	bne.w	8009988 <HAL_SD_IRQHandler+0x2e4>
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f003 0302 	and.w	r3, r3, #2
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	f040 80d6 	bne.w	8009988 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f022 0208 	bic.w	r2, r2, #8
 80097ea:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2201      	movs	r2, #1
 80097f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f003 fcf9 	bl	800d1ec <HAL_SD_TxCpltCallback>
}
 80097fa:	e0c5      	b.n	8009988 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009806:	2b00      	cmp	r3, #0
 8009808:	d008      	beq.n	800981c <HAL_SD_IRQHandler+0x178>
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	f003 0308 	and.w	r3, r3, #8
 8009810:	2b00      	cmp	r3, #0
 8009812:	d003      	beq.n	800981c <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f000 ff9b 	bl	800a750 <SD_Write_IT>
 800981a:	e0b5      	b.n	8009988 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009822:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8009826:	2b00      	cmp	r3, #0
 8009828:	f000 80ae 	beq.w	8009988 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009832:	f003 0302 	and.w	r3, r3, #2
 8009836:	2b00      	cmp	r3, #0
 8009838:	d005      	beq.n	8009846 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800983e:	f043 0202 	orr.w	r2, r3, #2
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800984c:	f003 0308 	and.w	r3, r3, #8
 8009850:	2b00      	cmp	r3, #0
 8009852:	d005      	beq.n	8009860 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009858:	f043 0208 	orr.w	r2, r3, #8
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009866:	f003 0320 	and.w	r3, r3, #32
 800986a:	2b00      	cmp	r3, #0
 800986c:	d005      	beq.n	800987a <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009872:	f043 0220 	orr.w	r2, r3, #32
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009880:	f003 0310 	and.w	r3, r3, #16
 8009884:	2b00      	cmp	r3, #0
 8009886:	d005      	beq.n	8009894 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800988c:	f043 0210 	orr.w	r2, r3, #16
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f240 523a 	movw	r2, #1338	; 0x53a
 800989c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80098ac:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	4618      	mov	r0, r3
 80098b4:	f003 f80e 	bl	800c8d4 <SDMMC_CmdStopTransfer>
 80098b8:	4602      	mov	r2, r0
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098be:	431a      	orrs	r2, r3
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f003 0308 	and.w	r3, r3, #8
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d00a      	beq.n	80098e4 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2201      	movs	r2, #1
 80098d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2200      	movs	r2, #0
 80098da:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f000 f857 	bl	8009990 <HAL_SD_ErrorCallback>
}
 80098e2:	e051      	b.n	8009988 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d04c      	beq.n	8009988 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	f003 0310 	and.w	r3, r3, #16
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d104      	bne.n	8009902 <HAL_SD_IRQHandler+0x25e>
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f003 0320 	and.w	r3, r3, #32
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d011      	beq.n	8009926 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009906:	4a17      	ldr	r2, [pc, #92]	; (8009964 <HAL_SD_IRQHandler+0x2c0>)
 8009908:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800990e:	4618      	mov	r0, r3
 8009910:	f7fc fa9a 	bl	8005e48 <HAL_DMA_Abort_IT>
 8009914:	4603      	mov	r3, r0
 8009916:	2b00      	cmp	r3, #0
 8009918:	d036      	beq.n	8009988 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800991e:	4618      	mov	r0, r3
 8009920:	f000 fb6a 	bl	8009ff8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8009924:	e030      	b.n	8009988 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	f003 0301 	and.w	r3, r3, #1
 800992c:	2b00      	cmp	r3, #0
 800992e:	d104      	bne.n	800993a <HAL_SD_IRQHandler+0x296>
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f003 0302 	and.w	r3, r3, #2
 8009936:	2b00      	cmp	r3, #0
 8009938:	d018      	beq.n	800996c <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800993e:	4a0a      	ldr	r2, [pc, #40]	; (8009968 <HAL_SD_IRQHandler+0x2c4>)
 8009940:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009946:	4618      	mov	r0, r3
 8009948:	f7fc fa7e 	bl	8005e48 <HAL_DMA_Abort_IT>
 800994c:	4603      	mov	r3, r0
 800994e:	2b00      	cmp	r3, #0
 8009950:	d01a      	beq.n	8009988 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009956:	4618      	mov	r0, r3
 8009958:	f000 fb85 	bl	800a066 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800995c:	e014      	b.n	8009988 <HAL_SD_IRQHandler+0x2e4>
 800995e:	bf00      	nop
 8009960:	ffff3ec5 	.word	0xffff3ec5
 8009964:	08009ff9 	.word	0x08009ff9
 8009968:	0800a067 	.word	0x0800a067
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2200      	movs	r2, #0
 8009970:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2201      	movs	r2, #1
 8009976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2200      	movs	r2, #0
 800997e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f003 fc29 	bl	800d1d8 <HAL_SD_AbortCallback>
}
 8009986:	e7ff      	b.n	8009988 <HAL_SD_IRQHandler+0x2e4>
 8009988:	bf00      	nop
 800998a:	3710      	adds	r7, #16
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009990:	b480      	push	{r7}
 8009992:	b083      	sub	sp, #12
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009998:	bf00      	nop
 800999a:	370c      	adds	r7, #12
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr

080099a4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b083      	sub	sp, #12
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099b2:	0f9b      	lsrs	r3, r3, #30
 80099b4:	b2da      	uxtb	r2, r3
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099be:	0e9b      	lsrs	r3, r3, #26
 80099c0:	b2db      	uxtb	r3, r3
 80099c2:	f003 030f 	and.w	r3, r3, #15
 80099c6:	b2da      	uxtb	r2, r3
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099d0:	0e1b      	lsrs	r3, r3, #24
 80099d2:	b2db      	uxtb	r3, r3
 80099d4:	f003 0303 	and.w	r3, r3, #3
 80099d8:	b2da      	uxtb	r2, r3
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099e2:	0c1b      	lsrs	r3, r3, #16
 80099e4:	b2da      	uxtb	r2, r3
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099ee:	0a1b      	lsrs	r3, r3, #8
 80099f0:	b2da      	uxtb	r2, r3
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099fa:	b2da      	uxtb	r2, r3
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a04:	0d1b      	lsrs	r3, r3, #20
 8009a06:	b29a      	uxth	r2, r3
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a10:	0c1b      	lsrs	r3, r3, #16
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	f003 030f 	and.w	r3, r3, #15
 8009a18:	b2da      	uxtb	r2, r3
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a22:	0bdb      	lsrs	r3, r3, #15
 8009a24:	b2db      	uxtb	r3, r3
 8009a26:	f003 0301 	and.w	r3, r3, #1
 8009a2a:	b2da      	uxtb	r2, r3
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a34:	0b9b      	lsrs	r3, r3, #14
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	f003 0301 	and.w	r3, r3, #1
 8009a3c:	b2da      	uxtb	r2, r3
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a46:	0b5b      	lsrs	r3, r3, #13
 8009a48:	b2db      	uxtb	r3, r3
 8009a4a:	f003 0301 	and.w	r3, r3, #1
 8009a4e:	b2da      	uxtb	r2, r3
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a58:	0b1b      	lsrs	r3, r3, #12
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	f003 0301 	and.w	r3, r3, #1
 8009a60:	b2da      	uxtb	r2, r3
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d163      	bne.n	8009b3c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a78:	009a      	lsls	r2, r3, #2
 8009a7a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009a7e:	4013      	ands	r3, r2
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009a84:	0f92      	lsrs	r2, r2, #30
 8009a86:	431a      	orrs	r2, r3
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a90:	0edb      	lsrs	r3, r3, #27
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	f003 0307 	and.w	r3, r3, #7
 8009a98:	b2da      	uxtb	r2, r3
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009aa2:	0e1b      	lsrs	r3, r3, #24
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	f003 0307 	and.w	r3, r3, #7
 8009aaa:	b2da      	uxtb	r2, r3
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ab4:	0d5b      	lsrs	r3, r3, #21
 8009ab6:	b2db      	uxtb	r3, r3
 8009ab8:	f003 0307 	and.w	r3, r3, #7
 8009abc:	b2da      	uxtb	r2, r3
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ac6:	0c9b      	lsrs	r3, r3, #18
 8009ac8:	b2db      	uxtb	r3, r3
 8009aca:	f003 0307 	and.w	r3, r3, #7
 8009ace:	b2da      	uxtb	r2, r3
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ad8:	0bdb      	lsrs	r3, r3, #15
 8009ada:	b2db      	uxtb	r3, r3
 8009adc:	f003 0307 	and.w	r3, r3, #7
 8009ae0:	b2da      	uxtb	r2, r3
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	691b      	ldr	r3, [r3, #16]
 8009aea:	1c5a      	adds	r2, r3, #1
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	7e1b      	ldrb	r3, [r3, #24]
 8009af4:	b2db      	uxtb	r3, r3
 8009af6:	f003 0307 	and.w	r3, r3, #7
 8009afa:	3302      	adds	r3, #2
 8009afc:	2201      	movs	r2, #1
 8009afe:	fa02 f303 	lsl.w	r3, r2, r3
 8009b02:	687a      	ldr	r2, [r7, #4]
 8009b04:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8009b06:	fb03 f202 	mul.w	r2, r3, r2
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	7a1b      	ldrb	r3, [r3, #8]
 8009b12:	b2db      	uxtb	r3, r3
 8009b14:	f003 030f 	and.w	r3, r3, #15
 8009b18:	2201      	movs	r2, #1
 8009b1a:	409a      	lsls	r2, r3
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b24:	687a      	ldr	r2, [r7, #4]
 8009b26:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009b28:	0a52      	lsrs	r2, r2, #9
 8009b2a:	fb03 f202 	mul.w	r2, r3, r2
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b38:	661a      	str	r2, [r3, #96]	; 0x60
 8009b3a:	e031      	b.n	8009ba0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	d11d      	bne.n	8009b80 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b48:	041b      	lsls	r3, r3, #16
 8009b4a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b52:	0c1b      	lsrs	r3, r3, #16
 8009b54:	431a      	orrs	r2, r3
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	691b      	ldr	r3, [r3, #16]
 8009b5e:	3301      	adds	r3, #1
 8009b60:	029a      	lsls	r2, r3, #10
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b74:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	661a      	str	r2, [r3, #96]	; 0x60
 8009b7e:	e00f      	b.n	8009ba0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4a58      	ldr	r2, [pc, #352]	; (8009ce8 <HAL_SD_GetCardCSD+0x344>)
 8009b86:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b8c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2201      	movs	r2, #1
 8009b98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	e09d      	b.n	8009cdc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ba4:	0b9b      	lsrs	r3, r3, #14
 8009ba6:	b2db      	uxtb	r3, r3
 8009ba8:	f003 0301 	and.w	r3, r3, #1
 8009bac:	b2da      	uxtb	r2, r3
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bb6:	09db      	lsrs	r3, r3, #7
 8009bb8:	b2db      	uxtb	r3, r3
 8009bba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bbe:	b2da      	uxtb	r2, r3
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bc8:	b2db      	uxtb	r3, r3
 8009bca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bce:	b2da      	uxtb	r2, r3
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bd8:	0fdb      	lsrs	r3, r3, #31
 8009bda:	b2da      	uxtb	r2, r3
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009be4:	0f5b      	lsrs	r3, r3, #29
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	f003 0303 	and.w	r3, r3, #3
 8009bec:	b2da      	uxtb	r2, r3
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bf6:	0e9b      	lsrs	r3, r3, #26
 8009bf8:	b2db      	uxtb	r3, r3
 8009bfa:	f003 0307 	and.w	r3, r3, #7
 8009bfe:	b2da      	uxtb	r2, r3
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c08:	0d9b      	lsrs	r3, r3, #22
 8009c0a:	b2db      	uxtb	r3, r3
 8009c0c:	f003 030f 	and.w	r3, r3, #15
 8009c10:	b2da      	uxtb	r2, r3
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c1a:	0d5b      	lsrs	r3, r3, #21
 8009c1c:	b2db      	uxtb	r3, r3
 8009c1e:	f003 0301 	and.w	r3, r3, #1
 8009c22:	b2da      	uxtb	r2, r3
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c36:	0c1b      	lsrs	r3, r3, #16
 8009c38:	b2db      	uxtb	r3, r3
 8009c3a:	f003 0301 	and.w	r3, r3, #1
 8009c3e:	b2da      	uxtb	r2, r3
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c4a:	0bdb      	lsrs	r3, r3, #15
 8009c4c:	b2db      	uxtb	r3, r3
 8009c4e:	f003 0301 	and.w	r3, r3, #1
 8009c52:	b2da      	uxtb	r2, r3
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c5e:	0b9b      	lsrs	r3, r3, #14
 8009c60:	b2db      	uxtb	r3, r3
 8009c62:	f003 0301 	and.w	r3, r3, #1
 8009c66:	b2da      	uxtb	r2, r3
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c72:	0b5b      	lsrs	r3, r3, #13
 8009c74:	b2db      	uxtb	r3, r3
 8009c76:	f003 0301 	and.w	r3, r3, #1
 8009c7a:	b2da      	uxtb	r2, r3
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c86:	0b1b      	lsrs	r3, r3, #12
 8009c88:	b2db      	uxtb	r3, r3
 8009c8a:	f003 0301 	and.w	r3, r3, #1
 8009c8e:	b2da      	uxtb	r2, r3
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c9a:	0a9b      	lsrs	r3, r3, #10
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	f003 0303 	and.w	r3, r3, #3
 8009ca2:	b2da      	uxtb	r2, r3
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cae:	0a1b      	lsrs	r3, r3, #8
 8009cb0:	b2db      	uxtb	r3, r3
 8009cb2:	f003 0303 	and.w	r3, r3, #3
 8009cb6:	b2da      	uxtb	r2, r3
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cc2:	085b      	lsrs	r3, r3, #1
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cca:	b2da      	uxtb	r2, r3
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009cda:	2300      	movs	r3, #0
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	370c      	adds	r7, #12
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr
 8009ce8:	004005ff 	.word	0x004005ff

08009cec <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b083      	sub	sp, #12
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009d36:	2300      	movs	r3, #0
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	370c      	adds	r7, #12
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr

08009d44 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009d44:	b5b0      	push	{r4, r5, r7, lr}
 8009d46:	b08e      	sub	sp, #56	; 0x38
 8009d48:	af04      	add	r7, sp, #16
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2203      	movs	r2, #3
 8009d58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d60:	2b03      	cmp	r3, #3
 8009d62:	d02e      	beq.n	8009dc2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d6a:	d106      	bne.n	8009d7a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d70:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	639a      	str	r2, [r3, #56]	; 0x38
 8009d78:	e029      	b.n	8009dce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d80:	d10a      	bne.n	8009d98 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f000 fb2a 	bl	800a3dc <SD_WideBus_Enable>
 8009d88:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d8e:	6a3b      	ldr	r3, [r7, #32]
 8009d90:	431a      	orrs	r2, r3
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	639a      	str	r2, [r3, #56]	; 0x38
 8009d96:	e01a      	b.n	8009dce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d10a      	bne.n	8009db4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f000 fb67 	bl	800a472 <SD_WideBus_Disable>
 8009da4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009daa:	6a3b      	ldr	r3, [r7, #32]
 8009dac:	431a      	orrs	r2, r3
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	639a      	str	r2, [r3, #56]	; 0x38
 8009db2:	e00c      	b.n	8009dce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009db8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	639a      	str	r2, [r3, #56]	; 0x38
 8009dc0:	e005      	b.n	8009dce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dc6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d00b      	beq.n	8009dee <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	4a26      	ldr	r2, [pc, #152]	; (8009e74 <HAL_SD_ConfigWideBusOperation+0x130>)
 8009ddc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2201      	movs	r2, #1
 8009de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8009de6:	2301      	movs	r3, #1
 8009de8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009dec:	e01f      	b.n	8009e2e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	685b      	ldr	r3, [r3, #4]
 8009df2:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	689b      	ldr	r3, [r3, #8]
 8009df8:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	695b      	ldr	r3, [r3, #20]
 8009e08:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	699b      	ldr	r3, [r3, #24]
 8009e0e:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681d      	ldr	r5, [r3, #0]
 8009e14:	466c      	mov	r4, sp
 8009e16:	f107 0314 	add.w	r3, r7, #20
 8009e1a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009e1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009e22:	f107 0308 	add.w	r3, r7, #8
 8009e26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009e28:	4628      	mov	r0, r5
 8009e2a:	f002 fbcd 	bl	800c5c8 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009e36:	4618      	mov	r0, r3
 8009e38:	f002 fca2 	bl	800c780 <SDMMC_CmdBlockLength>
 8009e3c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e3e:	6a3b      	ldr	r3, [r7, #32]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d00c      	beq.n	8009e5e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	4a0a      	ldr	r2, [pc, #40]	; (8009e74 <HAL_SD_ConfigWideBusOperation+0x130>)
 8009e4a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e50:	6a3b      	ldr	r3, [r7, #32]
 8009e52:	431a      	orrs	r2, r3
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009e58:	2301      	movs	r3, #1
 8009e5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2201      	movs	r2, #1
 8009e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8009e66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3728      	adds	r7, #40	; 0x28
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bdb0      	pop	{r4, r5, r7, pc}
 8009e72:	bf00      	nop
 8009e74:	004005ff 	.word	0x004005ff

08009e78 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b086      	sub	sp, #24
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009e80:	2300      	movs	r3, #0
 8009e82:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009e84:	f107 030c 	add.w	r3, r7, #12
 8009e88:	4619      	mov	r1, r3
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f000 fa7e 	bl	800a38c <SD_SendStatus>
 8009e90:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d005      	beq.n	8009ea4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	431a      	orrs	r2, r3
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	0a5b      	lsrs	r3, r3, #9
 8009ea8:	f003 030f 	and.w	r3, r3, #15
 8009eac:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009eae:	693b      	ldr	r3, [r7, #16]
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3718      	adds	r7, #24
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b085      	sub	sp, #20
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ec4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ed4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8009ed6:	bf00      	nop
 8009ed8:	3714      	adds	r7, #20
 8009eda:	46bd      	mov	sp, r7
 8009edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee0:	4770      	bx	lr

08009ee2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009ee2:	b580      	push	{r7, lr}
 8009ee4:	b084      	sub	sp, #16
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eee:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ef4:	2b82      	cmp	r3, #130	; 0x82
 8009ef6:	d111      	bne.n	8009f1c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4618      	mov	r0, r3
 8009efe:	f002 fce9 	bl	800c8d4 <SDMMC_CmdStopTransfer>
 8009f02:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d008      	beq.n	8009f1c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	431a      	orrs	r2, r3
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8009f16:	68f8      	ldr	r0, [r7, #12]
 8009f18:	f7ff fd3a 	bl	8009990 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f022 0208 	bic.w	r2, r2, #8
 8009f2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f240 523a 	movw	r2, #1338	; 0x53a
 8009f34:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	2201      	movs	r2, #1
 8009f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	2200      	movs	r2, #0
 8009f42:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009f44:	68f8      	ldr	r0, [r7, #12]
 8009f46:	f003 f95b 	bl	800d200 <HAL_SD_RxCpltCallback>
#endif
}
 8009f4a:	bf00      	nop
 8009f4c:	3710      	adds	r7, #16
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}
	...

08009f54 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b086      	sub	sp, #24
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f60:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f7fc f91c 	bl	80061a0 <HAL_DMA_GetError>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	2b02      	cmp	r3, #2
 8009f6c:	d03e      	beq.n	8009fec <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f74:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f7c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	2b01      	cmp	r3, #1
 8009f82:	d002      	beq.n	8009f8a <SD_DMAError+0x36>
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	2b01      	cmp	r3, #1
 8009f88:	d12d      	bne.n	8009fe6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4a19      	ldr	r2, [pc, #100]	; (8009ff4 <SD_DMAError+0xa0>)
 8009f90:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009fa0:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fa6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8009fae:	6978      	ldr	r0, [r7, #20]
 8009fb0:	f7ff ff62 	bl	8009e78 <HAL_SD_GetCardState>
 8009fb4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	2b06      	cmp	r3, #6
 8009fba:	d002      	beq.n	8009fc2 <SD_DMAError+0x6e>
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	2b05      	cmp	r3, #5
 8009fc0:	d10a      	bne.n	8009fd8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f002 fc84 	bl	800c8d4 <SDMMC_CmdStopTransfer>
 8009fcc:	4602      	mov	r2, r0
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fd2:	431a      	orrs	r2, r3
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	2201      	movs	r2, #1
 8009fdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8009fe6:	6978      	ldr	r0, [r7, #20]
 8009fe8:	f7ff fcd2 	bl	8009990 <HAL_SD_ErrorCallback>
#endif
  }
}
 8009fec:	bf00      	nop
 8009fee:	3718      	adds	r7, #24
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}
 8009ff4:	004005ff 	.word	0x004005ff

08009ff8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b084      	sub	sp, #16
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a004:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f240 523a 	movw	r2, #1338	; 0x53a
 800a00e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800a010:	68f8      	ldr	r0, [r7, #12]
 800a012:	f7ff ff31 	bl	8009e78 <HAL_SD_GetCardState>
 800a016:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2201      	movs	r2, #1
 800a01c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2200      	movs	r2, #0
 800a024:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	2b06      	cmp	r3, #6
 800a02a:	d002      	beq.n	800a032 <SD_DMATxAbort+0x3a>
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	2b05      	cmp	r3, #5
 800a030:	d10a      	bne.n	800a048 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4618      	mov	r0, r3
 800a038:	f002 fc4c 	bl	800c8d4 <SDMMC_CmdStopTransfer>
 800a03c:	4602      	mov	r2, r0
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a042:	431a      	orrs	r2, r3
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d103      	bne.n	800a058 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800a050:	68f8      	ldr	r0, [r7, #12]
 800a052:	f003 f8c1 	bl	800d1d8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800a056:	e002      	b.n	800a05e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800a058:	68f8      	ldr	r0, [r7, #12]
 800a05a:	f7ff fc99 	bl	8009990 <HAL_SD_ErrorCallback>
}
 800a05e:	bf00      	nop
 800a060:	3710      	adds	r7, #16
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}

0800a066 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800a066:	b580      	push	{r7, lr}
 800a068:	b084      	sub	sp, #16
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a072:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f240 523a 	movw	r2, #1338	; 0x53a
 800a07c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800a07e:	68f8      	ldr	r0, [r7, #12]
 800a080:	f7ff fefa 	bl	8009e78 <HAL_SD_GetCardState>
 800a084:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2201      	movs	r2, #1
 800a08a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2200      	movs	r2, #0
 800a092:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	2b06      	cmp	r3, #6
 800a098:	d002      	beq.n	800a0a0 <SD_DMARxAbort+0x3a>
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	2b05      	cmp	r3, #5
 800a09e:	d10a      	bne.n	800a0b6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f002 fc15 	bl	800c8d4 <SDMMC_CmdStopTransfer>
 800a0aa:	4602      	mov	r2, r0
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0b0:	431a      	orrs	r2, r3
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d103      	bne.n	800a0c6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800a0be:	68f8      	ldr	r0, [r7, #12]
 800a0c0:	f003 f88a 	bl	800d1d8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800a0c4:	e002      	b.n	800a0cc <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800a0c6:	68f8      	ldr	r0, [r7, #12]
 800a0c8:	f7ff fc62 	bl	8009990 <HAL_SD_ErrorCallback>
}
 800a0cc:	bf00      	nop
 800a0ce:	3710      	adds	r7, #16
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a0d4:	b5b0      	push	{r4, r5, r7, lr}
 800a0d6:	b094      	sub	sp, #80	; 0x50
 800a0d8:	af04      	add	r7, sp, #16
 800a0da:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800a0dc:	2301      	movs	r3, #1
 800a0de:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f002 fac7 	bl	800c678 <SDMMC_GetPowerState>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d102      	bne.n	800a0f6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a0f0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a0f4:	e0b8      	b.n	800a268 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0fa:	2b03      	cmp	r3, #3
 800a0fc:	d02f      	beq.n	800a15e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4618      	mov	r0, r3
 800a104:	f002 fcf1 	bl	800caea <SDMMC_CmdSendCID>
 800a108:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a10a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d001      	beq.n	800a114 <SD_InitCard+0x40>
    {
      return errorstate;
 800a110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a112:	e0a9      	b.n	800a268 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	2100      	movs	r1, #0
 800a11a:	4618      	mov	r0, r3
 800a11c:	f002 faf1 	bl	800c702 <SDMMC_GetResponse>
 800a120:	4602      	mov	r2, r0
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	2104      	movs	r1, #4
 800a12c:	4618      	mov	r0, r3
 800a12e:	f002 fae8 	bl	800c702 <SDMMC_GetResponse>
 800a132:	4602      	mov	r2, r0
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	2108      	movs	r1, #8
 800a13e:	4618      	mov	r0, r3
 800a140:	f002 fadf 	bl	800c702 <SDMMC_GetResponse>
 800a144:	4602      	mov	r2, r0
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	210c      	movs	r1, #12
 800a150:	4618      	mov	r0, r3
 800a152:	f002 fad6 	bl	800c702 <SDMMC_GetResponse>
 800a156:	4602      	mov	r2, r0
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a162:	2b03      	cmp	r3, #3
 800a164:	d00d      	beq.n	800a182 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f107 020e 	add.w	r2, r7, #14
 800a16e:	4611      	mov	r1, r2
 800a170:	4618      	mov	r0, r3
 800a172:	f002 fcf7 	bl	800cb64 <SDMMC_CmdSetRelAdd>
 800a176:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d001      	beq.n	800a182 <SD_InitCard+0xae>
    {
      return errorstate;
 800a17e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a180:	e072      	b.n	800a268 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a186:	2b03      	cmp	r3, #3
 800a188:	d036      	beq.n	800a1f8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a18a:	89fb      	ldrh	r3, [r7, #14]
 800a18c:	461a      	mov	r2, r3
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681a      	ldr	r2, [r3, #0]
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a19a:	041b      	lsls	r3, r3, #16
 800a19c:	4619      	mov	r1, r3
 800a19e:	4610      	mov	r0, r2
 800a1a0:	f002 fcc1 	bl	800cb26 <SDMMC_CmdSendCSD>
 800a1a4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a1a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d001      	beq.n	800a1b0 <SD_InitCard+0xdc>
    {
      return errorstate;
 800a1ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1ae:	e05b      	b.n	800a268 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	2100      	movs	r1, #0
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f002 faa3 	bl	800c702 <SDMMC_GetResponse>
 800a1bc:	4602      	mov	r2, r0
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	2104      	movs	r1, #4
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f002 fa9a 	bl	800c702 <SDMMC_GetResponse>
 800a1ce:	4602      	mov	r2, r0
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	2108      	movs	r1, #8
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f002 fa91 	bl	800c702 <SDMMC_GetResponse>
 800a1e0:	4602      	mov	r2, r0
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	210c      	movs	r1, #12
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f002 fa88 	bl	800c702 <SDMMC_GetResponse>
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	2104      	movs	r1, #4
 800a1fe:	4618      	mov	r0, r3
 800a200:	f002 fa7f 	bl	800c702 <SDMMC_GetResponse>
 800a204:	4603      	mov	r3, r0
 800a206:	0d1a      	lsrs	r2, r3, #20
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a20c:	f107 0310 	add.w	r3, r7, #16
 800a210:	4619      	mov	r1, r3
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f7ff fbc6 	bl	80099a4 <HAL_SD_GetCardCSD>
 800a218:	4603      	mov	r3, r0
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d002      	beq.n	800a224 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a21e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a222:	e021      	b.n	800a268 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6819      	ldr	r1, [r3, #0]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a22c:	041b      	lsls	r3, r3, #16
 800a22e:	2200      	movs	r2, #0
 800a230:	461c      	mov	r4, r3
 800a232:	4615      	mov	r5, r2
 800a234:	4622      	mov	r2, r4
 800a236:	462b      	mov	r3, r5
 800a238:	4608      	mov	r0, r1
 800a23a:	f002 fb6d 	bl	800c918 <SDMMC_CmdSelDesel>
 800a23e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a242:	2b00      	cmp	r3, #0
 800a244:	d001      	beq.n	800a24a <SD_InitCard+0x176>
  {
    return errorstate;
 800a246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a248:	e00e      	b.n	800a268 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681d      	ldr	r5, [r3, #0]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	466c      	mov	r4, sp
 800a252:	f103 0210 	add.w	r2, r3, #16
 800a256:	ca07      	ldmia	r2, {r0, r1, r2}
 800a258:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a25c:	3304      	adds	r3, #4
 800a25e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a260:	4628      	mov	r0, r5
 800a262:	f002 f9b1 	bl	800c5c8 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a266:	2300      	movs	r3, #0
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3740      	adds	r7, #64	; 0x40
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bdb0      	pop	{r4, r5, r7, pc}

0800a270 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b086      	sub	sp, #24
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a278:	2300      	movs	r3, #0
 800a27a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800a27c:	2300      	movs	r3, #0
 800a27e:	617b      	str	r3, [r7, #20]
 800a280:	2300      	movs	r3, #0
 800a282:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4618      	mov	r0, r3
 800a28a:	f002 fb68 	bl	800c95e <SDMMC_CmdGoIdleState>
 800a28e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d001      	beq.n	800a29a <SD_PowerON+0x2a>
  {
    return errorstate;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	e072      	b.n	800a380 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f002 fb7b 	bl	800c99a <SDMMC_CmdOperCond>
 800a2a4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d00d      	beq.n	800a2c8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f002 fb51 	bl	800c95e <SDMMC_CmdGoIdleState>
 800a2bc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d004      	beq.n	800a2ce <SD_PowerON+0x5e>
    {
      return errorstate;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	e05b      	b.n	800a380 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2d2:	2b01      	cmp	r3, #1
 800a2d4:	d137      	bne.n	800a346 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	2100      	movs	r1, #0
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f002 fb7b 	bl	800c9d8 <SDMMC_CmdAppCommand>
 800a2e2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d02d      	beq.n	800a346 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a2ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a2ee:	e047      	b.n	800a380 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	2100      	movs	r1, #0
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f002 fb6e 	bl	800c9d8 <SDMMC_CmdAppCommand>
 800a2fc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d001      	beq.n	800a308 <SD_PowerON+0x98>
    {
      return errorstate;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	e03b      	b.n	800a380 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	491e      	ldr	r1, [pc, #120]	; (800a388 <SD_PowerON+0x118>)
 800a30e:	4618      	mov	r0, r3
 800a310:	f002 fb84 	bl	800ca1c <SDMMC_CmdAppOperCommand>
 800a314:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d002      	beq.n	800a322 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a31c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a320:	e02e      	b.n	800a380 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	2100      	movs	r1, #0
 800a328:	4618      	mov	r0, r3
 800a32a:	f002 f9ea 	bl	800c702 <SDMMC_GetResponse>
 800a32e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	0fdb      	lsrs	r3, r3, #31
 800a334:	2b01      	cmp	r3, #1
 800a336:	d101      	bne.n	800a33c <SD_PowerON+0xcc>
 800a338:	2301      	movs	r3, #1
 800a33a:	e000      	b.n	800a33e <SD_PowerON+0xce>
 800a33c:	2300      	movs	r3, #0
 800a33e:	613b      	str	r3, [r7, #16]

    count++;
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	3301      	adds	r3, #1
 800a344:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d802      	bhi.n	800a356 <SD_PowerON+0xe6>
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d0cc      	beq.n	800a2f0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d902      	bls.n	800a366 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a360:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a364:	e00c      	b.n	800a380 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d003      	beq.n	800a378 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2201      	movs	r2, #1
 800a374:	645a      	str	r2, [r3, #68]	; 0x44
 800a376:	e002      	b.n	800a37e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2200      	movs	r2, #0
 800a37c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a37e:	2300      	movs	r3, #0
}
 800a380:	4618      	mov	r0, r3
 800a382:	3718      	adds	r7, #24
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}
 800a388:	c1100000 	.word	0xc1100000

0800a38c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b084      	sub	sp, #16
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d102      	bne.n	800a3a2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a39c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a3a0:	e018      	b.n	800a3d4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681a      	ldr	r2, [r3, #0]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3aa:	041b      	lsls	r3, r3, #16
 800a3ac:	4619      	mov	r1, r3
 800a3ae:	4610      	mov	r0, r2
 800a3b0:	f002 fbf9 	bl	800cba6 <SDMMC_CmdSendStatus>
 800a3b4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d001      	beq.n	800a3c0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	e009      	b.n	800a3d4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	2100      	movs	r1, #0
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f002 f99b 	bl	800c702 <SDMMC_GetResponse>
 800a3cc:	4602      	mov	r2, r0
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a3d2:	2300      	movs	r3, #0
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3710      	adds	r7, #16
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}

0800a3dc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b086      	sub	sp, #24
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	60fb      	str	r3, [r7, #12]
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	2100      	movs	r1, #0
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f002 f985 	bl	800c702 <SDMMC_GetResponse>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a402:	d102      	bne.n	800a40a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a404:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a408:	e02f      	b.n	800a46a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a40a:	f107 030c 	add.w	r3, r7, #12
 800a40e:	4619      	mov	r1, r3
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f000 f879 	bl	800a508 <SD_FindSCR>
 800a416:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d001      	beq.n	800a422 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	e023      	b.n	800a46a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d01c      	beq.n	800a466 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681a      	ldr	r2, [r3, #0]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a434:	041b      	lsls	r3, r3, #16
 800a436:	4619      	mov	r1, r3
 800a438:	4610      	mov	r0, r2
 800a43a:	f002 facd 	bl	800c9d8 <SDMMC_CmdAppCommand>
 800a43e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d001      	beq.n	800a44a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	e00f      	b.n	800a46a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	2102      	movs	r1, #2
 800a450:	4618      	mov	r0, r3
 800a452:	f002 fb07 	bl	800ca64 <SDMMC_CmdBusWidth>
 800a456:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d001      	beq.n	800a462 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	e003      	b.n	800a46a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a462:	2300      	movs	r3, #0
 800a464:	e001      	b.n	800a46a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a466:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3718      	adds	r7, #24
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}

0800a472 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a472:	b580      	push	{r7, lr}
 800a474:	b086      	sub	sp, #24
 800a476:	af00      	add	r7, sp, #0
 800a478:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a47a:	2300      	movs	r3, #0
 800a47c:	60fb      	str	r3, [r7, #12]
 800a47e:	2300      	movs	r3, #0
 800a480:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	2100      	movs	r1, #0
 800a488:	4618      	mov	r0, r3
 800a48a:	f002 f93a 	bl	800c702 <SDMMC_GetResponse>
 800a48e:	4603      	mov	r3, r0
 800a490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a494:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a498:	d102      	bne.n	800a4a0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a49a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a49e:	e02f      	b.n	800a500 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a4a0:	f107 030c 	add.w	r3, r7, #12
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f000 f82e 	bl	800a508 <SD_FindSCR>
 800a4ac:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d001      	beq.n	800a4b8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	e023      	b.n	800a500 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d01c      	beq.n	800a4fc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681a      	ldr	r2, [r3, #0]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4ca:	041b      	lsls	r3, r3, #16
 800a4cc:	4619      	mov	r1, r3
 800a4ce:	4610      	mov	r0, r2
 800a4d0:	f002 fa82 	bl	800c9d8 <SDMMC_CmdAppCommand>
 800a4d4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d001      	beq.n	800a4e0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a4dc:	697b      	ldr	r3, [r7, #20]
 800a4de:	e00f      	b.n	800a500 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	2100      	movs	r1, #0
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f002 fabc 	bl	800ca64 <SDMMC_CmdBusWidth>
 800a4ec:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d001      	beq.n	800a4f8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	e003      	b.n	800a500 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	e001      	b.n	800a500 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a4fc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a500:	4618      	mov	r0, r3
 800a502:	3718      	adds	r7, #24
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}

0800a508 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a508:	b590      	push	{r4, r7, lr}
 800a50a:	b08f      	sub	sp, #60	; 0x3c
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a512:	f7fa feb9 	bl	8005288 <HAL_GetTick>
 800a516:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800a518:	2300      	movs	r3, #0
 800a51a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800a51c:	2300      	movs	r3, #0
 800a51e:	60bb      	str	r3, [r7, #8]
 800a520:	2300      	movs	r3, #0
 800a522:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	2108      	movs	r1, #8
 800a52e:	4618      	mov	r0, r3
 800a530:	f002 f926 	bl	800c780 <SDMMC_CmdBlockLength>
 800a534:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d001      	beq.n	800a540 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a53e:	e0b2      	b.n	800a6a6 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a548:	041b      	lsls	r3, r3, #16
 800a54a:	4619      	mov	r1, r3
 800a54c:	4610      	mov	r0, r2
 800a54e:	f002 fa43 	bl	800c9d8 <SDMMC_CmdAppCommand>
 800a552:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a556:	2b00      	cmp	r3, #0
 800a558:	d001      	beq.n	800a55e <SD_FindSCR+0x56>
  {
    return errorstate;
 800a55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a55c:	e0a3      	b.n	800a6a6 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a55e:	f04f 33ff 	mov.w	r3, #4294967295
 800a562:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a564:	2308      	movs	r3, #8
 800a566:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a568:	2330      	movs	r3, #48	; 0x30
 800a56a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a56c:	2302      	movs	r3, #2
 800a56e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a570:	2300      	movs	r3, #0
 800a572:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a574:	2301      	movs	r3, #1
 800a576:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f107 0210 	add.w	r2, r7, #16
 800a580:	4611      	mov	r1, r2
 800a582:	4618      	mov	r0, r3
 800a584:	f002 f8d0 	bl	800c728 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4618      	mov	r0, r3
 800a58e:	f002 fa8b 	bl	800caa8 <SDMMC_CmdSendSCR>
 800a592:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a596:	2b00      	cmp	r3, #0
 800a598:	d02a      	beq.n	800a5f0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800a59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a59c:	e083      	b.n	800a6a6 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d00f      	beq.n	800a5cc <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6819      	ldr	r1, [r3, #0]
 800a5b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5b2:	009b      	lsls	r3, r3, #2
 800a5b4:	f107 0208 	add.w	r2, r7, #8
 800a5b8:	18d4      	adds	r4, r2, r3
 800a5ba:	4608      	mov	r0, r1
 800a5bc:	f002 f830 	bl	800c620 <SDMMC_ReadFIFO>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	6023      	str	r3, [r4, #0]
      index++;
 800a5c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5c6:	3301      	adds	r3, #1
 800a5c8:	637b      	str	r3, [r7, #52]	; 0x34
 800a5ca:	e006      	b.n	800a5da <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d012      	beq.n	800a600 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a5da:	f7fa fe55 	bl	8005288 <HAL_GetTick>
 800a5de:	4602      	mov	r2, r0
 800a5e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e2:	1ad3      	subs	r3, r2, r3
 800a5e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5e8:	d102      	bne.n	800a5f0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a5ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a5ee:	e05a      	b.n	800a6a6 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5f6:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d0cf      	beq.n	800a59e <SD_FindSCR+0x96>
 800a5fe:	e000      	b.n	800a602 <SD_FindSCR+0xfa>
      break;
 800a600:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a608:	f003 0308 	and.w	r3, r3, #8
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d005      	beq.n	800a61c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	2208      	movs	r2, #8
 800a616:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a618:	2308      	movs	r3, #8
 800a61a:	e044      	b.n	800a6a6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a622:	f003 0302 	and.w	r3, r3, #2
 800a626:	2b00      	cmp	r3, #0
 800a628:	d005      	beq.n	800a636 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	2202      	movs	r2, #2
 800a630:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a632:	2302      	movs	r3, #2
 800a634:	e037      	b.n	800a6a6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a63c:	f003 0320 	and.w	r3, r3, #32
 800a640:	2b00      	cmp	r3, #0
 800a642:	d005      	beq.n	800a650 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	2220      	movs	r2, #32
 800a64a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a64c:	2320      	movs	r3, #32
 800a64e:	e02a      	b.n	800a6a6 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f240 523a 	movw	r2, #1338	; 0x53a
 800a658:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	061a      	lsls	r2, r3, #24
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	021b      	lsls	r3, r3, #8
 800a662:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a666:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	0a1b      	lsrs	r3, r3, #8
 800a66c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a670:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	0e1b      	lsrs	r3, r3, #24
 800a676:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a67a:	601a      	str	r2, [r3, #0]
    scr++;
 800a67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a67e:	3304      	adds	r3, #4
 800a680:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	061a      	lsls	r2, r3, #24
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	021b      	lsls	r3, r3, #8
 800a68a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a68e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	0a1b      	lsrs	r3, r3, #8
 800a694:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a698:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	0e1b      	lsrs	r3, r3, #24
 800a69e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a2:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a6a4:	2300      	movs	r3, #0
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	373c      	adds	r7, #60	; 0x3c
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd90      	pop	{r4, r7, pc}

0800a6ae <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a6ae:	b580      	push	{r7, lr}
 800a6b0:	b086      	sub	sp, #24
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ba:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6c0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d03f      	beq.n	800a748 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	617b      	str	r3, [r7, #20]
 800a6cc:	e033      	b.n	800a736 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f001 ffa4 	bl	800c620 <SDMMC_ReadFIFO>
 800a6d8:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	b2da      	uxtb	r2, r3
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	3301      	adds	r3, #1
 800a6e6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	3b01      	subs	r3, #1
 800a6ec:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	0a1b      	lsrs	r3, r3, #8
 800a6f2:	b2da      	uxtb	r2, r3
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	3301      	adds	r3, #1
 800a6fc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	3b01      	subs	r3, #1
 800a702:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	0c1b      	lsrs	r3, r3, #16
 800a708:	b2da      	uxtb	r2, r3
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	3301      	adds	r3, #1
 800a712:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	3b01      	subs	r3, #1
 800a718:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	0e1b      	lsrs	r3, r3, #24
 800a71e:	b2da      	uxtb	r2, r3
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	3301      	adds	r3, #1
 800a728:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	3b01      	subs	r3, #1
 800a72e:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	3301      	adds	r3, #1
 800a734:	617b      	str	r3, [r7, #20]
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	2b07      	cmp	r3, #7
 800a73a:	d9c8      	bls.n	800a6ce <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	68fa      	ldr	r2, [r7, #12]
 800a740:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	693a      	ldr	r2, [r7, #16]
 800a746:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800a748:	bf00      	nop
 800a74a:	3718      	adds	r7, #24
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b086      	sub	sp, #24
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6a1b      	ldr	r3, [r3, #32]
 800a75c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a762:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d043      	beq.n	800a7f2 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800a76a:	2300      	movs	r3, #0
 800a76c:	617b      	str	r3, [r7, #20]
 800a76e:	e037      	b.n	800a7e0 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	781b      	ldrb	r3, [r3, #0]
 800a774:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	3301      	adds	r3, #1
 800a77a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	3b01      	subs	r3, #1
 800a780:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	781b      	ldrb	r3, [r3, #0]
 800a786:	021a      	lsls	r2, r3, #8
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	4313      	orrs	r3, r2
 800a78c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	3301      	adds	r3, #1
 800a792:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	3b01      	subs	r3, #1
 800a798:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	781b      	ldrb	r3, [r3, #0]
 800a79e:	041a      	lsls	r2, r3, #16
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	3301      	adds	r3, #1
 800a7aa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	3b01      	subs	r3, #1
 800a7b0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	781b      	ldrb	r3, [r3, #0]
 800a7b6:	061a      	lsls	r2, r3, #24
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	3301      	adds	r3, #1
 800a7c2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	3b01      	subs	r3, #1
 800a7c8:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f107 0208 	add.w	r2, r7, #8
 800a7d2:	4611      	mov	r1, r2
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f001 ff30 	bl	800c63a <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	3301      	adds	r3, #1
 800a7de:	617b      	str	r3, [r7, #20]
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	2b07      	cmp	r3, #7
 800a7e4:	d9c4      	bls.n	800a770 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	68fa      	ldr	r2, [r7, #12]
 800a7ea:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	693a      	ldr	r2, [r7, #16]
 800a7f0:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800a7f2:	bf00      	nop
 800a7f4:	3718      	adds	r7, #24
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}

0800a7fa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a7fa:	b580      	push	{r7, lr}
 800a7fc:	b082      	sub	sp, #8
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d101      	bne.n	800a80c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a808:	2301      	movs	r3, #1
 800a80a:	e049      	b.n	800a8a0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a812:	b2db      	uxtb	r3, r3
 800a814:	2b00      	cmp	r3, #0
 800a816:	d106      	bne.n	800a826 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2200      	movs	r2, #0
 800a81c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f7fa fb3b 	bl	8004e9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2202      	movs	r2, #2
 800a82a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681a      	ldr	r2, [r3, #0]
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	3304      	adds	r3, #4
 800a836:	4619      	mov	r1, r3
 800a838:	4610      	mov	r0, r2
 800a83a:	f000 fe05 	bl	800b448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2201      	movs	r2, #1
 800a842:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2201      	movs	r2, #1
 800a84a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2201      	movs	r2, #1
 800a852:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2201      	movs	r2, #1
 800a85a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2201      	movs	r2, #1
 800a862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2201      	movs	r2, #1
 800a86a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2201      	movs	r2, #1
 800a872:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2201      	movs	r2, #1
 800a87a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2201      	movs	r2, #1
 800a882:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2201      	movs	r2, #1
 800a88a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2201      	movs	r2, #1
 800a892:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2201      	movs	r2, #1
 800a89a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a89e:	2300      	movs	r3, #0
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3708      	adds	r7, #8
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b085      	sub	sp, #20
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8b6:	b2db      	uxtb	r3, r3
 800a8b8:	2b01      	cmp	r3, #1
 800a8ba:	d001      	beq.n	800a8c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a8bc:	2301      	movs	r3, #1
 800a8be:	e04c      	b.n	800a95a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2202      	movs	r2, #2
 800a8c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	4a26      	ldr	r2, [pc, #152]	; (800a968 <HAL_TIM_Base_Start+0xc0>)
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d022      	beq.n	800a918 <HAL_TIM_Base_Start+0x70>
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8da:	d01d      	beq.n	800a918 <HAL_TIM_Base_Start+0x70>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	4a22      	ldr	r2, [pc, #136]	; (800a96c <HAL_TIM_Base_Start+0xc4>)
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	d018      	beq.n	800a918 <HAL_TIM_Base_Start+0x70>
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	4a21      	ldr	r2, [pc, #132]	; (800a970 <HAL_TIM_Base_Start+0xc8>)
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	d013      	beq.n	800a918 <HAL_TIM_Base_Start+0x70>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	4a1f      	ldr	r2, [pc, #124]	; (800a974 <HAL_TIM_Base_Start+0xcc>)
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d00e      	beq.n	800a918 <HAL_TIM_Base_Start+0x70>
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	4a1e      	ldr	r2, [pc, #120]	; (800a978 <HAL_TIM_Base_Start+0xd0>)
 800a900:	4293      	cmp	r3, r2
 800a902:	d009      	beq.n	800a918 <HAL_TIM_Base_Start+0x70>
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	4a1c      	ldr	r2, [pc, #112]	; (800a97c <HAL_TIM_Base_Start+0xd4>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d004      	beq.n	800a918 <HAL_TIM_Base_Start+0x70>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	4a1b      	ldr	r2, [pc, #108]	; (800a980 <HAL_TIM_Base_Start+0xd8>)
 800a914:	4293      	cmp	r3, r2
 800a916:	d115      	bne.n	800a944 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	689a      	ldr	r2, [r3, #8]
 800a91e:	4b19      	ldr	r3, [pc, #100]	; (800a984 <HAL_TIM_Base_Start+0xdc>)
 800a920:	4013      	ands	r3, r2
 800a922:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	2b06      	cmp	r3, #6
 800a928:	d015      	beq.n	800a956 <HAL_TIM_Base_Start+0xae>
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a930:	d011      	beq.n	800a956 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	681a      	ldr	r2, [r3, #0]
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f042 0201 	orr.w	r2, r2, #1
 800a940:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a942:	e008      	b.n	800a956 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	681a      	ldr	r2, [r3, #0]
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f042 0201 	orr.w	r2, r2, #1
 800a952:	601a      	str	r2, [r3, #0]
 800a954:	e000      	b.n	800a958 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a956:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a958:	2300      	movs	r3, #0
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3714      	adds	r7, #20
 800a95e:	46bd      	mov	sp, r7
 800a960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a964:	4770      	bx	lr
 800a966:	bf00      	nop
 800a968:	40010000 	.word	0x40010000
 800a96c:	40000400 	.word	0x40000400
 800a970:	40000800 	.word	0x40000800
 800a974:	40000c00 	.word	0x40000c00
 800a978:	40010400 	.word	0x40010400
 800a97c:	40014000 	.word	0x40014000
 800a980:	40001800 	.word	0x40001800
 800a984:	00010007 	.word	0x00010007

0800a988 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a988:	b480      	push	{r7}
 800a98a:	b085      	sub	sp, #20
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a996:	b2db      	uxtb	r3, r3
 800a998:	2b01      	cmp	r3, #1
 800a99a:	d001      	beq.n	800a9a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a99c:	2301      	movs	r3, #1
 800a99e:	e054      	b.n	800aa4a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2202      	movs	r2, #2
 800a9a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	68da      	ldr	r2, [r3, #12]
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f042 0201 	orr.w	r2, r2, #1
 800a9b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	4a26      	ldr	r2, [pc, #152]	; (800aa58 <HAL_TIM_Base_Start_IT+0xd0>)
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	d022      	beq.n	800aa08 <HAL_TIM_Base_Start_IT+0x80>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9ca:	d01d      	beq.n	800aa08 <HAL_TIM_Base_Start_IT+0x80>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	4a22      	ldr	r2, [pc, #136]	; (800aa5c <HAL_TIM_Base_Start_IT+0xd4>)
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d018      	beq.n	800aa08 <HAL_TIM_Base_Start_IT+0x80>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	4a21      	ldr	r2, [pc, #132]	; (800aa60 <HAL_TIM_Base_Start_IT+0xd8>)
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	d013      	beq.n	800aa08 <HAL_TIM_Base_Start_IT+0x80>
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	4a1f      	ldr	r2, [pc, #124]	; (800aa64 <HAL_TIM_Base_Start_IT+0xdc>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d00e      	beq.n	800aa08 <HAL_TIM_Base_Start_IT+0x80>
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	4a1e      	ldr	r2, [pc, #120]	; (800aa68 <HAL_TIM_Base_Start_IT+0xe0>)
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	d009      	beq.n	800aa08 <HAL_TIM_Base_Start_IT+0x80>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4a1c      	ldr	r2, [pc, #112]	; (800aa6c <HAL_TIM_Base_Start_IT+0xe4>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d004      	beq.n	800aa08 <HAL_TIM_Base_Start_IT+0x80>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	4a1b      	ldr	r2, [pc, #108]	; (800aa70 <HAL_TIM_Base_Start_IT+0xe8>)
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d115      	bne.n	800aa34 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	689a      	ldr	r2, [r3, #8]
 800aa0e:	4b19      	ldr	r3, [pc, #100]	; (800aa74 <HAL_TIM_Base_Start_IT+0xec>)
 800aa10:	4013      	ands	r3, r2
 800aa12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2b06      	cmp	r3, #6
 800aa18:	d015      	beq.n	800aa46 <HAL_TIM_Base_Start_IT+0xbe>
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa20:	d011      	beq.n	800aa46 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	681a      	ldr	r2, [r3, #0]
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f042 0201 	orr.w	r2, r2, #1
 800aa30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa32:	e008      	b.n	800aa46 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	681a      	ldr	r2, [r3, #0]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f042 0201 	orr.w	r2, r2, #1
 800aa42:	601a      	str	r2, [r3, #0]
 800aa44:	e000      	b.n	800aa48 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa46:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aa48:	2300      	movs	r3, #0
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3714      	adds	r7, #20
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa54:	4770      	bx	lr
 800aa56:	bf00      	nop
 800aa58:	40010000 	.word	0x40010000
 800aa5c:	40000400 	.word	0x40000400
 800aa60:	40000800 	.word	0x40000800
 800aa64:	40000c00 	.word	0x40000c00
 800aa68:	40010400 	.word	0x40010400
 800aa6c:	40014000 	.word	0x40014000
 800aa70:	40001800 	.word	0x40001800
 800aa74:	00010007 	.word	0x00010007

0800aa78 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b082      	sub	sp, #8
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d101      	bne.n	800aa8a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800aa86:	2301      	movs	r3, #1
 800aa88:	e049      	b.n	800ab1e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa90:	b2db      	uxtb	r3, r3
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d106      	bne.n	800aaa4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f000 f841 	bl	800ab26 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2202      	movs	r2, #2
 800aaa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681a      	ldr	r2, [r3, #0]
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	3304      	adds	r3, #4
 800aab4:	4619      	mov	r1, r3
 800aab6:	4610      	mov	r0, r2
 800aab8:	f000 fcc6 	bl	800b448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2201      	movs	r2, #1
 800aac0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2201      	movs	r2, #1
 800aac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2201      	movs	r2, #1
 800aad0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2201      	movs	r2, #1
 800aad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2201      	movs	r2, #1
 800aae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2201      	movs	r2, #1
 800aae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2201      	movs	r2, #1
 800aaf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2201      	movs	r2, #1
 800ab00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2201      	movs	r2, #1
 800ab08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2201      	movs	r2, #1
 800ab10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2201      	movs	r2, #1
 800ab18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ab1c:	2300      	movs	r3, #0
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3708      	adds	r7, #8
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}

0800ab26 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800ab26:	b480      	push	{r7}
 800ab28:	b083      	sub	sp, #12
 800ab2a:	af00      	add	r7, sp, #0
 800ab2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800ab2e:	bf00      	nop
 800ab30:	370c      	adds	r7, #12
 800ab32:	46bd      	mov	sp, r7
 800ab34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab38:	4770      	bx	lr
	...

0800ab3c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b084      	sub	sp, #16
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ab46:	2300      	movs	r3, #0
 800ab48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d104      	bne.n	800ab5a <HAL_TIM_IC_Start_IT+0x1e>
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ab56:	b2db      	uxtb	r3, r3
 800ab58:	e023      	b.n	800aba2 <HAL_TIM_IC_Start_IT+0x66>
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	2b04      	cmp	r3, #4
 800ab5e:	d104      	bne.n	800ab6a <HAL_TIM_IC_Start_IT+0x2e>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ab66:	b2db      	uxtb	r3, r3
 800ab68:	e01b      	b.n	800aba2 <HAL_TIM_IC_Start_IT+0x66>
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	2b08      	cmp	r3, #8
 800ab6e:	d104      	bne.n	800ab7a <HAL_TIM_IC_Start_IT+0x3e>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab76:	b2db      	uxtb	r3, r3
 800ab78:	e013      	b.n	800aba2 <HAL_TIM_IC_Start_IT+0x66>
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	2b0c      	cmp	r3, #12
 800ab7e:	d104      	bne.n	800ab8a <HAL_TIM_IC_Start_IT+0x4e>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab86:	b2db      	uxtb	r3, r3
 800ab88:	e00b      	b.n	800aba2 <HAL_TIM_IC_Start_IT+0x66>
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	2b10      	cmp	r3, #16
 800ab8e:	d104      	bne.n	800ab9a <HAL_TIM_IC_Start_IT+0x5e>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ab96:	b2db      	uxtb	r3, r3
 800ab98:	e003      	b.n	800aba2 <HAL_TIM_IC_Start_IT+0x66>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800aba0:	b2db      	uxtb	r3, r3
 800aba2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d104      	bne.n	800abb4 <HAL_TIM_IC_Start_IT+0x78>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	e013      	b.n	800abdc <HAL_TIM_IC_Start_IT+0xa0>
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	2b04      	cmp	r3, #4
 800abb8:	d104      	bne.n	800abc4 <HAL_TIM_IC_Start_IT+0x88>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800abc0:	b2db      	uxtb	r3, r3
 800abc2:	e00b      	b.n	800abdc <HAL_TIM_IC_Start_IT+0xa0>
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	2b08      	cmp	r3, #8
 800abc8:	d104      	bne.n	800abd4 <HAL_TIM_IC_Start_IT+0x98>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800abd0:	b2db      	uxtb	r3, r3
 800abd2:	e003      	b.n	800abdc <HAL_TIM_IC_Start_IT+0xa0>
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800abda:	b2db      	uxtb	r3, r3
 800abdc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800abde:	7bbb      	ldrb	r3, [r7, #14]
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d102      	bne.n	800abea <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800abe4:	7b7b      	ldrb	r3, [r7, #13]
 800abe6:	2b01      	cmp	r3, #1
 800abe8:	d001      	beq.n	800abee <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800abea:	2301      	movs	r3, #1
 800abec:	e0e2      	b.n	800adb4 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d104      	bne.n	800abfe <HAL_TIM_IC_Start_IT+0xc2>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2202      	movs	r2, #2
 800abf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800abfc:	e023      	b.n	800ac46 <HAL_TIM_IC_Start_IT+0x10a>
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	2b04      	cmp	r3, #4
 800ac02:	d104      	bne.n	800ac0e <HAL_TIM_IC_Start_IT+0xd2>
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2202      	movs	r2, #2
 800ac08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ac0c:	e01b      	b.n	800ac46 <HAL_TIM_IC_Start_IT+0x10a>
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	2b08      	cmp	r3, #8
 800ac12:	d104      	bne.n	800ac1e <HAL_TIM_IC_Start_IT+0xe2>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2202      	movs	r2, #2
 800ac18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ac1c:	e013      	b.n	800ac46 <HAL_TIM_IC_Start_IT+0x10a>
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	2b0c      	cmp	r3, #12
 800ac22:	d104      	bne.n	800ac2e <HAL_TIM_IC_Start_IT+0xf2>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2202      	movs	r2, #2
 800ac28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ac2c:	e00b      	b.n	800ac46 <HAL_TIM_IC_Start_IT+0x10a>
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	2b10      	cmp	r3, #16
 800ac32:	d104      	bne.n	800ac3e <HAL_TIM_IC_Start_IT+0x102>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2202      	movs	r2, #2
 800ac38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ac3c:	e003      	b.n	800ac46 <HAL_TIM_IC_Start_IT+0x10a>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2202      	movs	r2, #2
 800ac42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d104      	bne.n	800ac56 <HAL_TIM_IC_Start_IT+0x11a>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2202      	movs	r2, #2
 800ac50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac54:	e013      	b.n	800ac7e <HAL_TIM_IC_Start_IT+0x142>
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	2b04      	cmp	r3, #4
 800ac5a:	d104      	bne.n	800ac66 <HAL_TIM_IC_Start_IT+0x12a>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2202      	movs	r2, #2
 800ac60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac64:	e00b      	b.n	800ac7e <HAL_TIM_IC_Start_IT+0x142>
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	2b08      	cmp	r3, #8
 800ac6a:	d104      	bne.n	800ac76 <HAL_TIM_IC_Start_IT+0x13a>
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2202      	movs	r2, #2
 800ac70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ac74:	e003      	b.n	800ac7e <HAL_TIM_IC_Start_IT+0x142>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2202      	movs	r2, #2
 800ac7a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	2b0c      	cmp	r3, #12
 800ac82:	d841      	bhi.n	800ad08 <HAL_TIM_IC_Start_IT+0x1cc>
 800ac84:	a201      	add	r2, pc, #4	; (adr r2, 800ac8c <HAL_TIM_IC_Start_IT+0x150>)
 800ac86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac8a:	bf00      	nop
 800ac8c:	0800acc1 	.word	0x0800acc1
 800ac90:	0800ad09 	.word	0x0800ad09
 800ac94:	0800ad09 	.word	0x0800ad09
 800ac98:	0800ad09 	.word	0x0800ad09
 800ac9c:	0800acd3 	.word	0x0800acd3
 800aca0:	0800ad09 	.word	0x0800ad09
 800aca4:	0800ad09 	.word	0x0800ad09
 800aca8:	0800ad09 	.word	0x0800ad09
 800acac:	0800ace5 	.word	0x0800ace5
 800acb0:	0800ad09 	.word	0x0800ad09
 800acb4:	0800ad09 	.word	0x0800ad09
 800acb8:	0800ad09 	.word	0x0800ad09
 800acbc:	0800acf7 	.word	0x0800acf7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	68da      	ldr	r2, [r3, #12]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f042 0202 	orr.w	r2, r2, #2
 800acce:	60da      	str	r2, [r3, #12]
      break;
 800acd0:	e01d      	b.n	800ad0e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	68da      	ldr	r2, [r3, #12]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f042 0204 	orr.w	r2, r2, #4
 800ace0:	60da      	str	r2, [r3, #12]
      break;
 800ace2:	e014      	b.n	800ad0e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	68da      	ldr	r2, [r3, #12]
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f042 0208 	orr.w	r2, r2, #8
 800acf2:	60da      	str	r2, [r3, #12]
      break;
 800acf4:	e00b      	b.n	800ad0e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	68da      	ldr	r2, [r3, #12]
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f042 0210 	orr.w	r2, r2, #16
 800ad04:	60da      	str	r2, [r3, #12]
      break;
 800ad06:	e002      	b.n	800ad0e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800ad08:	2301      	movs	r3, #1
 800ad0a:	73fb      	strb	r3, [r7, #15]
      break;
 800ad0c:	bf00      	nop
  }

  if (status == HAL_OK)
 800ad0e:	7bfb      	ldrb	r3, [r7, #15]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d14e      	bne.n	800adb2 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	2201      	movs	r2, #1
 800ad1a:	6839      	ldr	r1, [r7, #0]
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f000 fe8b 	bl	800ba38 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	4a25      	ldr	r2, [pc, #148]	; (800adbc <HAL_TIM_IC_Start_IT+0x280>)
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d022      	beq.n	800ad72 <HAL_TIM_IC_Start_IT+0x236>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad34:	d01d      	beq.n	800ad72 <HAL_TIM_IC_Start_IT+0x236>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	4a21      	ldr	r2, [pc, #132]	; (800adc0 <HAL_TIM_IC_Start_IT+0x284>)
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	d018      	beq.n	800ad72 <HAL_TIM_IC_Start_IT+0x236>
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4a1f      	ldr	r2, [pc, #124]	; (800adc4 <HAL_TIM_IC_Start_IT+0x288>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d013      	beq.n	800ad72 <HAL_TIM_IC_Start_IT+0x236>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	4a1e      	ldr	r2, [pc, #120]	; (800adc8 <HAL_TIM_IC_Start_IT+0x28c>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d00e      	beq.n	800ad72 <HAL_TIM_IC_Start_IT+0x236>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	4a1c      	ldr	r2, [pc, #112]	; (800adcc <HAL_TIM_IC_Start_IT+0x290>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d009      	beq.n	800ad72 <HAL_TIM_IC_Start_IT+0x236>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	4a1b      	ldr	r2, [pc, #108]	; (800add0 <HAL_TIM_IC_Start_IT+0x294>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d004      	beq.n	800ad72 <HAL_TIM_IC_Start_IT+0x236>
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	4a19      	ldr	r2, [pc, #100]	; (800add4 <HAL_TIM_IC_Start_IT+0x298>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d115      	bne.n	800ad9e <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	689a      	ldr	r2, [r3, #8]
 800ad78:	4b17      	ldr	r3, [pc, #92]	; (800add8 <HAL_TIM_IC_Start_IT+0x29c>)
 800ad7a:	4013      	ands	r3, r2
 800ad7c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	2b06      	cmp	r3, #6
 800ad82:	d015      	beq.n	800adb0 <HAL_TIM_IC_Start_IT+0x274>
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad8a:	d011      	beq.n	800adb0 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	681a      	ldr	r2, [r3, #0]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f042 0201 	orr.w	r2, r2, #1
 800ad9a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad9c:	e008      	b.n	800adb0 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	681a      	ldr	r2, [r3, #0]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f042 0201 	orr.w	r2, r2, #1
 800adac:	601a      	str	r2, [r3, #0]
 800adae:	e000      	b.n	800adb2 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800adb0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800adb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3710      	adds	r7, #16
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}
 800adbc:	40010000 	.word	0x40010000
 800adc0:	40000400 	.word	0x40000400
 800adc4:	40000800 	.word	0x40000800
 800adc8:	40000c00 	.word	0x40000c00
 800adcc:	40010400 	.word	0x40010400
 800add0:	40014000 	.word	0x40014000
 800add4:	40001800 	.word	0x40001800
 800add8:	00010007 	.word	0x00010007

0800addc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b082      	sub	sp, #8
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	691b      	ldr	r3, [r3, #16]
 800adea:	f003 0302 	and.w	r3, r3, #2
 800adee:	2b02      	cmp	r3, #2
 800adf0:	d122      	bne.n	800ae38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	68db      	ldr	r3, [r3, #12]
 800adf8:	f003 0302 	and.w	r3, r3, #2
 800adfc:	2b02      	cmp	r3, #2
 800adfe:	d11b      	bne.n	800ae38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f06f 0202 	mvn.w	r2, #2
 800ae08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2201      	movs	r2, #1
 800ae0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	699b      	ldr	r3, [r3, #24]
 800ae16:	f003 0303 	and.w	r3, r3, #3
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d003      	beq.n	800ae26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f7f9 f91a 	bl	8004058 <HAL_TIM_IC_CaptureCallback>
 800ae24:	e005      	b.n	800ae32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f000 fae4 	bl	800b3f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f000 faeb 	bl	800b408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2200      	movs	r2, #0
 800ae36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	691b      	ldr	r3, [r3, #16]
 800ae3e:	f003 0304 	and.w	r3, r3, #4
 800ae42:	2b04      	cmp	r3, #4
 800ae44:	d122      	bne.n	800ae8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	68db      	ldr	r3, [r3, #12]
 800ae4c:	f003 0304 	and.w	r3, r3, #4
 800ae50:	2b04      	cmp	r3, #4
 800ae52:	d11b      	bne.n	800ae8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f06f 0204 	mvn.w	r2, #4
 800ae5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2202      	movs	r2, #2
 800ae62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	699b      	ldr	r3, [r3, #24]
 800ae6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d003      	beq.n	800ae7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f7f9 f8f0 	bl	8004058 <HAL_TIM_IC_CaptureCallback>
 800ae78:	e005      	b.n	800ae86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f000 faba 	bl	800b3f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f000 fac1 	bl	800b408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2200      	movs	r2, #0
 800ae8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	691b      	ldr	r3, [r3, #16]
 800ae92:	f003 0308 	and.w	r3, r3, #8
 800ae96:	2b08      	cmp	r3, #8
 800ae98:	d122      	bne.n	800aee0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	68db      	ldr	r3, [r3, #12]
 800aea0:	f003 0308 	and.w	r3, r3, #8
 800aea4:	2b08      	cmp	r3, #8
 800aea6:	d11b      	bne.n	800aee0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f06f 0208 	mvn.w	r2, #8
 800aeb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2204      	movs	r2, #4
 800aeb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	69db      	ldr	r3, [r3, #28]
 800aebe:	f003 0303 	and.w	r3, r3, #3
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d003      	beq.n	800aece <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f7f9 f8c6 	bl	8004058 <HAL_TIM_IC_CaptureCallback>
 800aecc:	e005      	b.n	800aeda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f000 fa90 	bl	800b3f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f000 fa97 	bl	800b408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2200      	movs	r2, #0
 800aede:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	691b      	ldr	r3, [r3, #16]
 800aee6:	f003 0310 	and.w	r3, r3, #16
 800aeea:	2b10      	cmp	r3, #16
 800aeec:	d122      	bne.n	800af34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	68db      	ldr	r3, [r3, #12]
 800aef4:	f003 0310 	and.w	r3, r3, #16
 800aef8:	2b10      	cmp	r3, #16
 800aefa:	d11b      	bne.n	800af34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f06f 0210 	mvn.w	r2, #16
 800af04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2208      	movs	r2, #8
 800af0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	69db      	ldr	r3, [r3, #28]
 800af12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af16:	2b00      	cmp	r3, #0
 800af18:	d003      	beq.n	800af22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f7f9 f89c 	bl	8004058 <HAL_TIM_IC_CaptureCallback>
 800af20:	e005      	b.n	800af2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f000 fa66 	bl	800b3f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f000 fa6d 	bl	800b408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2200      	movs	r2, #0
 800af32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	691b      	ldr	r3, [r3, #16]
 800af3a:	f003 0301 	and.w	r3, r3, #1
 800af3e:	2b01      	cmp	r3, #1
 800af40:	d10e      	bne.n	800af60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	68db      	ldr	r3, [r3, #12]
 800af48:	f003 0301 	and.w	r3, r3, #1
 800af4c:	2b01      	cmp	r3, #1
 800af4e:	d107      	bne.n	800af60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f06f 0201 	mvn.w	r2, #1
 800af58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f7f9 f838 	bl	8003fd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	691b      	ldr	r3, [r3, #16]
 800af66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af6a:	2b80      	cmp	r3, #128	; 0x80
 800af6c:	d10e      	bne.n	800af8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	68db      	ldr	r3, [r3, #12]
 800af74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af78:	2b80      	cmp	r3, #128	; 0x80
 800af7a:	d107      	bne.n	800af8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800af84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f000 fe14 	bl	800bbb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	691b      	ldr	r3, [r3, #16]
 800af92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af9a:	d10e      	bne.n	800afba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	68db      	ldr	r3, [r3, #12]
 800afa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afa6:	2b80      	cmp	r3, #128	; 0x80
 800afa8:	d107      	bne.n	800afba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800afb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f000 fe07 	bl	800bbc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	691b      	ldr	r3, [r3, #16]
 800afc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afc4:	2b40      	cmp	r3, #64	; 0x40
 800afc6:	d10e      	bne.n	800afe6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	68db      	ldr	r3, [r3, #12]
 800afce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afd2:	2b40      	cmp	r3, #64	; 0x40
 800afd4:	d107      	bne.n	800afe6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800afde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f000 fa1b 	bl	800b41c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	691b      	ldr	r3, [r3, #16]
 800afec:	f003 0320 	and.w	r3, r3, #32
 800aff0:	2b20      	cmp	r3, #32
 800aff2:	d10e      	bne.n	800b012 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	68db      	ldr	r3, [r3, #12]
 800affa:	f003 0320 	and.w	r3, r3, #32
 800affe:	2b20      	cmp	r3, #32
 800b000:	d107      	bne.n	800b012 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f06f 0220 	mvn.w	r2, #32
 800b00a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f000 fdc7 	bl	800bba0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b012:	bf00      	nop
 800b014:	3708      	adds	r7, #8
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}

0800b01a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800b01a:	b580      	push	{r7, lr}
 800b01c:	b086      	sub	sp, #24
 800b01e:	af00      	add	r7, sp, #0
 800b020:	60f8      	str	r0, [r7, #12]
 800b022:	60b9      	str	r1, [r7, #8]
 800b024:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b026:	2300      	movs	r3, #0
 800b028:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b030:	2b01      	cmp	r3, #1
 800b032:	d101      	bne.n	800b038 <HAL_TIM_IC_ConfigChannel+0x1e>
 800b034:	2302      	movs	r3, #2
 800b036:	e088      	b.n	800b14a <HAL_TIM_IC_ConfigChannel+0x130>
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	2201      	movs	r2, #1
 800b03c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d11b      	bne.n	800b07e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	6818      	ldr	r0, [r3, #0]
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	6819      	ldr	r1, [r3, #0]
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	685a      	ldr	r2, [r3, #4]
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	68db      	ldr	r3, [r3, #12]
 800b056:	f000 fb2b 	bl	800b6b0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	699a      	ldr	r2, [r3, #24]
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	f022 020c 	bic.w	r2, r2, #12
 800b068:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	6999      	ldr	r1, [r3, #24]
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	689a      	ldr	r2, [r3, #8]
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	430a      	orrs	r2, r1
 800b07a:	619a      	str	r2, [r3, #24]
 800b07c:	e060      	b.n	800b140 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2b04      	cmp	r3, #4
 800b082:	d11c      	bne.n	800b0be <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	6818      	ldr	r0, [r3, #0]
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	6819      	ldr	r1, [r3, #0]
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	685a      	ldr	r2, [r3, #4]
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	68db      	ldr	r3, [r3, #12]
 800b094:	f000 fbaf 	bl	800b7f6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	699a      	ldr	r2, [r3, #24]
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b0a6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	6999      	ldr	r1, [r3, #24]
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	689b      	ldr	r3, [r3, #8]
 800b0b2:	021a      	lsls	r2, r3, #8
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	430a      	orrs	r2, r1
 800b0ba:	619a      	str	r2, [r3, #24]
 800b0bc:	e040      	b.n	800b140 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2b08      	cmp	r3, #8
 800b0c2:	d11b      	bne.n	800b0fc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	6818      	ldr	r0, [r3, #0]
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	6819      	ldr	r1, [r3, #0]
 800b0cc:	68bb      	ldr	r3, [r7, #8]
 800b0ce:	685a      	ldr	r2, [r3, #4]
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	68db      	ldr	r3, [r3, #12]
 800b0d4:	f000 fbfc 	bl	800b8d0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	69da      	ldr	r2, [r3, #28]
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f022 020c 	bic.w	r2, r2, #12
 800b0e6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	69d9      	ldr	r1, [r3, #28]
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	689a      	ldr	r2, [r3, #8]
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	430a      	orrs	r2, r1
 800b0f8:	61da      	str	r2, [r3, #28]
 800b0fa:	e021      	b.n	800b140 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2b0c      	cmp	r3, #12
 800b100:	d11c      	bne.n	800b13c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	6818      	ldr	r0, [r3, #0]
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	6819      	ldr	r1, [r3, #0]
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	685a      	ldr	r2, [r3, #4]
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	68db      	ldr	r3, [r3, #12]
 800b112:	f000 fc19 	bl	800b948 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	69da      	ldr	r2, [r3, #28]
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b124:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	69d9      	ldr	r1, [r3, #28]
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	689b      	ldr	r3, [r3, #8]
 800b130:	021a      	lsls	r2, r3, #8
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	430a      	orrs	r2, r1
 800b138:	61da      	str	r2, [r3, #28]
 800b13a:	e001      	b.n	800b140 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800b13c:	2301      	movs	r3, #1
 800b13e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	2200      	movs	r2, #0
 800b144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b148:	7dfb      	ldrb	r3, [r7, #23]
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	3718      	adds	r7, #24
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}
	...

0800b154 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b084      	sub	sp, #16
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
 800b15c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b15e:	2300      	movs	r3, #0
 800b160:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b168:	2b01      	cmp	r3, #1
 800b16a:	d101      	bne.n	800b170 <HAL_TIM_ConfigClockSource+0x1c>
 800b16c:	2302      	movs	r3, #2
 800b16e:	e0b4      	b.n	800b2da <HAL_TIM_ConfigClockSource+0x186>
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2201      	movs	r2, #1
 800b174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2202      	movs	r2, #2
 800b17c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	689b      	ldr	r3, [r3, #8]
 800b186:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b188:	68ba      	ldr	r2, [r7, #8]
 800b18a:	4b56      	ldr	r3, [pc, #344]	; (800b2e4 <HAL_TIM_ConfigClockSource+0x190>)
 800b18c:	4013      	ands	r3, r2
 800b18e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b196:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	68ba      	ldr	r2, [r7, #8]
 800b19e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b1a8:	d03e      	beq.n	800b228 <HAL_TIM_ConfigClockSource+0xd4>
 800b1aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b1ae:	f200 8087 	bhi.w	800b2c0 <HAL_TIM_ConfigClockSource+0x16c>
 800b1b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1b6:	f000 8086 	beq.w	800b2c6 <HAL_TIM_ConfigClockSource+0x172>
 800b1ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1be:	d87f      	bhi.n	800b2c0 <HAL_TIM_ConfigClockSource+0x16c>
 800b1c0:	2b70      	cmp	r3, #112	; 0x70
 800b1c2:	d01a      	beq.n	800b1fa <HAL_TIM_ConfigClockSource+0xa6>
 800b1c4:	2b70      	cmp	r3, #112	; 0x70
 800b1c6:	d87b      	bhi.n	800b2c0 <HAL_TIM_ConfigClockSource+0x16c>
 800b1c8:	2b60      	cmp	r3, #96	; 0x60
 800b1ca:	d050      	beq.n	800b26e <HAL_TIM_ConfigClockSource+0x11a>
 800b1cc:	2b60      	cmp	r3, #96	; 0x60
 800b1ce:	d877      	bhi.n	800b2c0 <HAL_TIM_ConfigClockSource+0x16c>
 800b1d0:	2b50      	cmp	r3, #80	; 0x50
 800b1d2:	d03c      	beq.n	800b24e <HAL_TIM_ConfigClockSource+0xfa>
 800b1d4:	2b50      	cmp	r3, #80	; 0x50
 800b1d6:	d873      	bhi.n	800b2c0 <HAL_TIM_ConfigClockSource+0x16c>
 800b1d8:	2b40      	cmp	r3, #64	; 0x40
 800b1da:	d058      	beq.n	800b28e <HAL_TIM_ConfigClockSource+0x13a>
 800b1dc:	2b40      	cmp	r3, #64	; 0x40
 800b1de:	d86f      	bhi.n	800b2c0 <HAL_TIM_ConfigClockSource+0x16c>
 800b1e0:	2b30      	cmp	r3, #48	; 0x30
 800b1e2:	d064      	beq.n	800b2ae <HAL_TIM_ConfigClockSource+0x15a>
 800b1e4:	2b30      	cmp	r3, #48	; 0x30
 800b1e6:	d86b      	bhi.n	800b2c0 <HAL_TIM_ConfigClockSource+0x16c>
 800b1e8:	2b20      	cmp	r3, #32
 800b1ea:	d060      	beq.n	800b2ae <HAL_TIM_ConfigClockSource+0x15a>
 800b1ec:	2b20      	cmp	r3, #32
 800b1ee:	d867      	bhi.n	800b2c0 <HAL_TIM_ConfigClockSource+0x16c>
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d05c      	beq.n	800b2ae <HAL_TIM_ConfigClockSource+0x15a>
 800b1f4:	2b10      	cmp	r3, #16
 800b1f6:	d05a      	beq.n	800b2ae <HAL_TIM_ConfigClockSource+0x15a>
 800b1f8:	e062      	b.n	800b2c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6818      	ldr	r0, [r3, #0]
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	6899      	ldr	r1, [r3, #8]
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	685a      	ldr	r2, [r3, #4]
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	68db      	ldr	r3, [r3, #12]
 800b20a:	f000 fbf5 	bl	800b9f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	689b      	ldr	r3, [r3, #8]
 800b214:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b21c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	68ba      	ldr	r2, [r7, #8]
 800b224:	609a      	str	r2, [r3, #8]
      break;
 800b226:	e04f      	b.n	800b2c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6818      	ldr	r0, [r3, #0]
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	6899      	ldr	r1, [r3, #8]
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	685a      	ldr	r2, [r3, #4]
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	68db      	ldr	r3, [r3, #12]
 800b238:	f000 fbde 	bl	800b9f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	689a      	ldr	r2, [r3, #8]
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b24a:	609a      	str	r2, [r3, #8]
      break;
 800b24c:	e03c      	b.n	800b2c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6818      	ldr	r0, [r3, #0]
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	6859      	ldr	r1, [r3, #4]
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	68db      	ldr	r3, [r3, #12]
 800b25a:	461a      	mov	r2, r3
 800b25c:	f000 fa9c 	bl	800b798 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	2150      	movs	r1, #80	; 0x50
 800b266:	4618      	mov	r0, r3
 800b268:	f000 fbab 	bl	800b9c2 <TIM_ITRx_SetConfig>
      break;
 800b26c:	e02c      	b.n	800b2c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6818      	ldr	r0, [r3, #0]
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	6859      	ldr	r1, [r3, #4]
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	68db      	ldr	r3, [r3, #12]
 800b27a:	461a      	mov	r2, r3
 800b27c:	f000 faf8 	bl	800b870 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	2160      	movs	r1, #96	; 0x60
 800b286:	4618      	mov	r0, r3
 800b288:	f000 fb9b 	bl	800b9c2 <TIM_ITRx_SetConfig>
      break;
 800b28c:	e01c      	b.n	800b2c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6818      	ldr	r0, [r3, #0]
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	6859      	ldr	r1, [r3, #4]
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	68db      	ldr	r3, [r3, #12]
 800b29a:	461a      	mov	r2, r3
 800b29c:	f000 fa7c 	bl	800b798 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	2140      	movs	r1, #64	; 0x40
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f000 fb8b 	bl	800b9c2 <TIM_ITRx_SetConfig>
      break;
 800b2ac:	e00c      	b.n	800b2c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681a      	ldr	r2, [r3, #0]
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	4619      	mov	r1, r3
 800b2b8:	4610      	mov	r0, r2
 800b2ba:	f000 fb82 	bl	800b9c2 <TIM_ITRx_SetConfig>
      break;
 800b2be:	e003      	b.n	800b2c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	73fb      	strb	r3, [r7, #15]
      break;
 800b2c4:	e000      	b.n	800b2c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b2c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2201      	movs	r2, #1
 800b2cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b2d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	3710      	adds	r7, #16
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}
 800b2e2:	bf00      	nop
 800b2e4:	fffeff88 	.word	0xfffeff88

0800b2e8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b082      	sub	sp, #8
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
 800b2f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2f8:	2b01      	cmp	r3, #1
 800b2fa:	d101      	bne.n	800b300 <HAL_TIM_SlaveConfigSynchro+0x18>
 800b2fc:	2302      	movs	r3, #2
 800b2fe:	e031      	b.n	800b364 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2201      	movs	r2, #1
 800b304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2202      	movs	r2, #2
 800b30c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800b310:	6839      	ldr	r1, [r7, #0]
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f000 f938 	bl	800b588 <TIM_SlaveTimer_SetConfig>
 800b318:	4603      	mov	r3, r0
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d009      	beq.n	800b332 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2201      	movs	r2, #1
 800b322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2200      	movs	r2, #0
 800b32a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800b32e:	2301      	movs	r3, #1
 800b330:	e018      	b.n	800b364 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	68da      	ldr	r2, [r3, #12]
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b340:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	68da      	ldr	r2, [r3, #12]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b350:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2201      	movs	r2, #1
 800b356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2200      	movs	r2, #0
 800b35e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b362:	2300      	movs	r3, #0
}
 800b364:	4618      	mov	r0, r3
 800b366:	3708      	adds	r7, #8
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}

0800b36c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b085      	sub	sp, #20
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800b376:	2300      	movs	r3, #0
 800b378:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	2b0c      	cmp	r3, #12
 800b37e:	d831      	bhi.n	800b3e4 <HAL_TIM_ReadCapturedValue+0x78>
 800b380:	a201      	add	r2, pc, #4	; (adr r2, 800b388 <HAL_TIM_ReadCapturedValue+0x1c>)
 800b382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b386:	bf00      	nop
 800b388:	0800b3bd 	.word	0x0800b3bd
 800b38c:	0800b3e5 	.word	0x0800b3e5
 800b390:	0800b3e5 	.word	0x0800b3e5
 800b394:	0800b3e5 	.word	0x0800b3e5
 800b398:	0800b3c7 	.word	0x0800b3c7
 800b39c:	0800b3e5 	.word	0x0800b3e5
 800b3a0:	0800b3e5 	.word	0x0800b3e5
 800b3a4:	0800b3e5 	.word	0x0800b3e5
 800b3a8:	0800b3d1 	.word	0x0800b3d1
 800b3ac:	0800b3e5 	.word	0x0800b3e5
 800b3b0:	0800b3e5 	.word	0x0800b3e5
 800b3b4:	0800b3e5 	.word	0x0800b3e5
 800b3b8:	0800b3db 	.word	0x0800b3db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3c2:	60fb      	str	r3, [r7, #12]

      break;
 800b3c4:	e00f      	b.n	800b3e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3cc:	60fb      	str	r3, [r7, #12]

      break;
 800b3ce:	e00a      	b.n	800b3e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3d6:	60fb      	str	r3, [r7, #12]

      break;
 800b3d8:	e005      	b.n	800b3e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3e0:	60fb      	str	r3, [r7, #12]

      break;
 800b3e2:	e000      	b.n	800b3e6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800b3e4:	bf00      	nop
  }

  return tmpreg;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3714      	adds	r7, #20
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f2:	4770      	bx	lr

0800b3f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b083      	sub	sp, #12
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b3fc:	bf00      	nop
 800b3fe:	370c      	adds	r7, #12
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr

0800b408 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b408:	b480      	push	{r7}
 800b40a:	b083      	sub	sp, #12
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b410:	bf00      	nop
 800b412:	370c      	adds	r7, #12
 800b414:	46bd      	mov	sp, r7
 800b416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41a:	4770      	bx	lr

0800b41c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b41c:	b480      	push	{r7}
 800b41e:	b083      	sub	sp, #12
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b424:	bf00      	nop
 800b426:	370c      	adds	r7, #12
 800b428:	46bd      	mov	sp, r7
 800b42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42e:	4770      	bx	lr

0800b430 <HAL_TIM_GetActiveChannel>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM handle
  * @retval Active channel
  */
HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(TIM_HandleTypeDef *htim)
{
 800b430:	b480      	push	{r7}
 800b432:	b083      	sub	sp, #12
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
  return htim->Channel;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	7f1b      	ldrb	r3, [r3, #28]
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	370c      	adds	r7, #12
 800b440:	46bd      	mov	sp, r7
 800b442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b446:	4770      	bx	lr

0800b448 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b448:	b480      	push	{r7}
 800b44a:	b085      	sub	sp, #20
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	4a40      	ldr	r2, [pc, #256]	; (800b55c <TIM_Base_SetConfig+0x114>)
 800b45c:	4293      	cmp	r3, r2
 800b45e:	d013      	beq.n	800b488 <TIM_Base_SetConfig+0x40>
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b466:	d00f      	beq.n	800b488 <TIM_Base_SetConfig+0x40>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	4a3d      	ldr	r2, [pc, #244]	; (800b560 <TIM_Base_SetConfig+0x118>)
 800b46c:	4293      	cmp	r3, r2
 800b46e:	d00b      	beq.n	800b488 <TIM_Base_SetConfig+0x40>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	4a3c      	ldr	r2, [pc, #240]	; (800b564 <TIM_Base_SetConfig+0x11c>)
 800b474:	4293      	cmp	r3, r2
 800b476:	d007      	beq.n	800b488 <TIM_Base_SetConfig+0x40>
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	4a3b      	ldr	r2, [pc, #236]	; (800b568 <TIM_Base_SetConfig+0x120>)
 800b47c:	4293      	cmp	r3, r2
 800b47e:	d003      	beq.n	800b488 <TIM_Base_SetConfig+0x40>
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	4a3a      	ldr	r2, [pc, #232]	; (800b56c <TIM_Base_SetConfig+0x124>)
 800b484:	4293      	cmp	r3, r2
 800b486:	d108      	bne.n	800b49a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b48e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	685b      	ldr	r3, [r3, #4]
 800b494:	68fa      	ldr	r2, [r7, #12]
 800b496:	4313      	orrs	r3, r2
 800b498:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	4a2f      	ldr	r2, [pc, #188]	; (800b55c <TIM_Base_SetConfig+0x114>)
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d02b      	beq.n	800b4fa <TIM_Base_SetConfig+0xb2>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4a8:	d027      	beq.n	800b4fa <TIM_Base_SetConfig+0xb2>
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	4a2c      	ldr	r2, [pc, #176]	; (800b560 <TIM_Base_SetConfig+0x118>)
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	d023      	beq.n	800b4fa <TIM_Base_SetConfig+0xb2>
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	4a2b      	ldr	r2, [pc, #172]	; (800b564 <TIM_Base_SetConfig+0x11c>)
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	d01f      	beq.n	800b4fa <TIM_Base_SetConfig+0xb2>
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	4a2a      	ldr	r2, [pc, #168]	; (800b568 <TIM_Base_SetConfig+0x120>)
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	d01b      	beq.n	800b4fa <TIM_Base_SetConfig+0xb2>
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	4a29      	ldr	r2, [pc, #164]	; (800b56c <TIM_Base_SetConfig+0x124>)
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	d017      	beq.n	800b4fa <TIM_Base_SetConfig+0xb2>
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	4a28      	ldr	r2, [pc, #160]	; (800b570 <TIM_Base_SetConfig+0x128>)
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d013      	beq.n	800b4fa <TIM_Base_SetConfig+0xb2>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	4a27      	ldr	r2, [pc, #156]	; (800b574 <TIM_Base_SetConfig+0x12c>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d00f      	beq.n	800b4fa <TIM_Base_SetConfig+0xb2>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	4a26      	ldr	r2, [pc, #152]	; (800b578 <TIM_Base_SetConfig+0x130>)
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	d00b      	beq.n	800b4fa <TIM_Base_SetConfig+0xb2>
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	4a25      	ldr	r2, [pc, #148]	; (800b57c <TIM_Base_SetConfig+0x134>)
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d007      	beq.n	800b4fa <TIM_Base_SetConfig+0xb2>
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	4a24      	ldr	r2, [pc, #144]	; (800b580 <TIM_Base_SetConfig+0x138>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d003      	beq.n	800b4fa <TIM_Base_SetConfig+0xb2>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	4a23      	ldr	r2, [pc, #140]	; (800b584 <TIM_Base_SetConfig+0x13c>)
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d108      	bne.n	800b50c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b500:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	68db      	ldr	r3, [r3, #12]
 800b506:	68fa      	ldr	r2, [r7, #12]
 800b508:	4313      	orrs	r3, r2
 800b50a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	695b      	ldr	r3, [r3, #20]
 800b516:	4313      	orrs	r3, r2
 800b518:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	68fa      	ldr	r2, [r7, #12]
 800b51e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	689a      	ldr	r2, [r3, #8]
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	681a      	ldr	r2, [r3, #0]
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	4a0a      	ldr	r2, [pc, #40]	; (800b55c <TIM_Base_SetConfig+0x114>)
 800b534:	4293      	cmp	r3, r2
 800b536:	d003      	beq.n	800b540 <TIM_Base_SetConfig+0xf8>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	4a0c      	ldr	r2, [pc, #48]	; (800b56c <TIM_Base_SetConfig+0x124>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d103      	bne.n	800b548 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	691a      	ldr	r2, [r3, #16]
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2201      	movs	r2, #1
 800b54c:	615a      	str	r2, [r3, #20]
}
 800b54e:	bf00      	nop
 800b550:	3714      	adds	r7, #20
 800b552:	46bd      	mov	sp, r7
 800b554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b558:	4770      	bx	lr
 800b55a:	bf00      	nop
 800b55c:	40010000 	.word	0x40010000
 800b560:	40000400 	.word	0x40000400
 800b564:	40000800 	.word	0x40000800
 800b568:	40000c00 	.word	0x40000c00
 800b56c:	40010400 	.word	0x40010400
 800b570:	40014000 	.word	0x40014000
 800b574:	40014400 	.word	0x40014400
 800b578:	40014800 	.word	0x40014800
 800b57c:	40001800 	.word	0x40001800
 800b580:	40001c00 	.word	0x40001c00
 800b584:	40002000 	.word	0x40002000

0800b588 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b086      	sub	sp, #24
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
 800b590:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b592:	2300      	movs	r3, #0
 800b594:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	689b      	ldr	r3, [r3, #8]
 800b59c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b59e:	693b      	ldr	r3, [r7, #16]
 800b5a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5a4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	685b      	ldr	r3, [r3, #4]
 800b5aa:	693a      	ldr	r2, [r7, #16]
 800b5ac:	4313      	orrs	r3, r2
 800b5ae:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800b5b0:	693a      	ldr	r2, [r7, #16]
 800b5b2:	4b3e      	ldr	r3, [pc, #248]	; (800b6ac <TIM_SlaveTimer_SetConfig+0x124>)
 800b5b4:	4013      	ands	r3, r2
 800b5b6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	693a      	ldr	r2, [r7, #16]
 800b5be:	4313      	orrs	r3, r2
 800b5c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	693a      	ldr	r2, [r7, #16]
 800b5c8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	685b      	ldr	r3, [r3, #4]
 800b5ce:	2b70      	cmp	r3, #112	; 0x70
 800b5d0:	d01a      	beq.n	800b608 <TIM_SlaveTimer_SetConfig+0x80>
 800b5d2:	2b70      	cmp	r3, #112	; 0x70
 800b5d4:	d860      	bhi.n	800b698 <TIM_SlaveTimer_SetConfig+0x110>
 800b5d6:	2b60      	cmp	r3, #96	; 0x60
 800b5d8:	d054      	beq.n	800b684 <TIM_SlaveTimer_SetConfig+0xfc>
 800b5da:	2b60      	cmp	r3, #96	; 0x60
 800b5dc:	d85c      	bhi.n	800b698 <TIM_SlaveTimer_SetConfig+0x110>
 800b5de:	2b50      	cmp	r3, #80	; 0x50
 800b5e0:	d046      	beq.n	800b670 <TIM_SlaveTimer_SetConfig+0xe8>
 800b5e2:	2b50      	cmp	r3, #80	; 0x50
 800b5e4:	d858      	bhi.n	800b698 <TIM_SlaveTimer_SetConfig+0x110>
 800b5e6:	2b40      	cmp	r3, #64	; 0x40
 800b5e8:	d019      	beq.n	800b61e <TIM_SlaveTimer_SetConfig+0x96>
 800b5ea:	2b40      	cmp	r3, #64	; 0x40
 800b5ec:	d854      	bhi.n	800b698 <TIM_SlaveTimer_SetConfig+0x110>
 800b5ee:	2b30      	cmp	r3, #48	; 0x30
 800b5f0:	d055      	beq.n	800b69e <TIM_SlaveTimer_SetConfig+0x116>
 800b5f2:	2b30      	cmp	r3, #48	; 0x30
 800b5f4:	d850      	bhi.n	800b698 <TIM_SlaveTimer_SetConfig+0x110>
 800b5f6:	2b20      	cmp	r3, #32
 800b5f8:	d051      	beq.n	800b69e <TIM_SlaveTimer_SetConfig+0x116>
 800b5fa:	2b20      	cmp	r3, #32
 800b5fc:	d84c      	bhi.n	800b698 <TIM_SlaveTimer_SetConfig+0x110>
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d04d      	beq.n	800b69e <TIM_SlaveTimer_SetConfig+0x116>
 800b602:	2b10      	cmp	r3, #16
 800b604:	d04b      	beq.n	800b69e <TIM_SlaveTimer_SetConfig+0x116>
 800b606:	e047      	b.n	800b698 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6818      	ldr	r0, [r3, #0]
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	68d9      	ldr	r1, [r3, #12]
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	689a      	ldr	r2, [r3, #8]
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	691b      	ldr	r3, [r3, #16]
 800b618:	f000 f9ee 	bl	800b9f8 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800b61c:	e040      	b.n	800b6a0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	2b05      	cmp	r3, #5
 800b624:	d101      	bne.n	800b62a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800b626:	2301      	movs	r3, #1
 800b628:	e03b      	b.n	800b6a2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	6a1b      	ldr	r3, [r3, #32]
 800b630:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	6a1a      	ldr	r2, [r3, #32]
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f022 0201 	bic.w	r2, r2, #1
 800b640:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	699b      	ldr	r3, [r3, #24]
 800b648:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b650:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	691b      	ldr	r3, [r3, #16]
 800b656:	011b      	lsls	r3, r3, #4
 800b658:	68ba      	ldr	r2, [r7, #8]
 800b65a:	4313      	orrs	r3, r2
 800b65c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	68ba      	ldr	r2, [r7, #8]
 800b664:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	68fa      	ldr	r2, [r7, #12]
 800b66c:	621a      	str	r2, [r3, #32]
      break;
 800b66e:	e017      	b.n	800b6a0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6818      	ldr	r0, [r3, #0]
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	6899      	ldr	r1, [r3, #8]
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	691b      	ldr	r3, [r3, #16]
 800b67c:	461a      	mov	r2, r3
 800b67e:	f000 f88b 	bl	800b798 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800b682:	e00d      	b.n	800b6a0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6818      	ldr	r0, [r3, #0]
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	6899      	ldr	r1, [r3, #8]
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	691b      	ldr	r3, [r3, #16]
 800b690:	461a      	mov	r2, r3
 800b692:	f000 f8ed 	bl	800b870 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800b696:	e003      	b.n	800b6a0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800b698:	2301      	movs	r3, #1
 800b69a:	75fb      	strb	r3, [r7, #23]
      break;
 800b69c:	e000      	b.n	800b6a0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800b69e:	bf00      	nop
  }

  return status;
 800b6a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	3718      	adds	r7, #24
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}
 800b6aa:	bf00      	nop
 800b6ac:	fffefff8 	.word	0xfffefff8

0800b6b0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b087      	sub	sp, #28
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	60f8      	str	r0, [r7, #12]
 800b6b8:	60b9      	str	r1, [r7, #8]
 800b6ba:	607a      	str	r2, [r7, #4]
 800b6bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	6a1b      	ldr	r3, [r3, #32]
 800b6c2:	f023 0201 	bic.w	r2, r3, #1
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	699b      	ldr	r3, [r3, #24]
 800b6ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	6a1b      	ldr	r3, [r3, #32]
 800b6d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	4a28      	ldr	r2, [pc, #160]	; (800b77c <TIM_TI1_SetConfig+0xcc>)
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	d01b      	beq.n	800b716 <TIM_TI1_SetConfig+0x66>
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6e4:	d017      	beq.n	800b716 <TIM_TI1_SetConfig+0x66>
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	4a25      	ldr	r2, [pc, #148]	; (800b780 <TIM_TI1_SetConfig+0xd0>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d013      	beq.n	800b716 <TIM_TI1_SetConfig+0x66>
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	4a24      	ldr	r2, [pc, #144]	; (800b784 <TIM_TI1_SetConfig+0xd4>)
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	d00f      	beq.n	800b716 <TIM_TI1_SetConfig+0x66>
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	4a23      	ldr	r2, [pc, #140]	; (800b788 <TIM_TI1_SetConfig+0xd8>)
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d00b      	beq.n	800b716 <TIM_TI1_SetConfig+0x66>
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	4a22      	ldr	r2, [pc, #136]	; (800b78c <TIM_TI1_SetConfig+0xdc>)
 800b702:	4293      	cmp	r3, r2
 800b704:	d007      	beq.n	800b716 <TIM_TI1_SetConfig+0x66>
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	4a21      	ldr	r2, [pc, #132]	; (800b790 <TIM_TI1_SetConfig+0xe0>)
 800b70a:	4293      	cmp	r3, r2
 800b70c:	d003      	beq.n	800b716 <TIM_TI1_SetConfig+0x66>
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	4a20      	ldr	r2, [pc, #128]	; (800b794 <TIM_TI1_SetConfig+0xe4>)
 800b712:	4293      	cmp	r3, r2
 800b714:	d101      	bne.n	800b71a <TIM_TI1_SetConfig+0x6a>
 800b716:	2301      	movs	r3, #1
 800b718:	e000      	b.n	800b71c <TIM_TI1_SetConfig+0x6c>
 800b71a:	2300      	movs	r3, #0
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d008      	beq.n	800b732 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	f023 0303 	bic.w	r3, r3, #3
 800b726:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800b728:	697a      	ldr	r2, [r7, #20]
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	4313      	orrs	r3, r2
 800b72e:	617b      	str	r3, [r7, #20]
 800b730:	e003      	b.n	800b73a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800b732:	697b      	ldr	r3, [r7, #20]
 800b734:	f043 0301 	orr.w	r3, r3, #1
 800b738:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b740:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	011b      	lsls	r3, r3, #4
 800b746:	b2db      	uxtb	r3, r3
 800b748:	697a      	ldr	r2, [r7, #20]
 800b74a:	4313      	orrs	r3, r2
 800b74c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b74e:	693b      	ldr	r3, [r7, #16]
 800b750:	f023 030a 	bic.w	r3, r3, #10
 800b754:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	f003 030a 	and.w	r3, r3, #10
 800b75c:	693a      	ldr	r2, [r7, #16]
 800b75e:	4313      	orrs	r3, r2
 800b760:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	697a      	ldr	r2, [r7, #20]
 800b766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	693a      	ldr	r2, [r7, #16]
 800b76c:	621a      	str	r2, [r3, #32]
}
 800b76e:	bf00      	nop
 800b770:	371c      	adds	r7, #28
 800b772:	46bd      	mov	sp, r7
 800b774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b778:	4770      	bx	lr
 800b77a:	bf00      	nop
 800b77c:	40010000 	.word	0x40010000
 800b780:	40000400 	.word	0x40000400
 800b784:	40000800 	.word	0x40000800
 800b788:	40000c00 	.word	0x40000c00
 800b78c:	40010400 	.word	0x40010400
 800b790:	40014000 	.word	0x40014000
 800b794:	40001800 	.word	0x40001800

0800b798 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b798:	b480      	push	{r7}
 800b79a:	b087      	sub	sp, #28
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	60f8      	str	r0, [r7, #12]
 800b7a0:	60b9      	str	r1, [r7, #8]
 800b7a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	6a1b      	ldr	r3, [r3, #32]
 800b7a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	6a1b      	ldr	r3, [r3, #32]
 800b7ae:	f023 0201 	bic.w	r2, r3, #1
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	699b      	ldr	r3, [r3, #24]
 800b7ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b7c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	011b      	lsls	r3, r3, #4
 800b7c8:	693a      	ldr	r2, [r7, #16]
 800b7ca:	4313      	orrs	r3, r2
 800b7cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	f023 030a 	bic.w	r3, r3, #10
 800b7d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b7d6:	697a      	ldr	r2, [r7, #20]
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	4313      	orrs	r3, r2
 800b7dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	693a      	ldr	r2, [r7, #16]
 800b7e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	697a      	ldr	r2, [r7, #20]
 800b7e8:	621a      	str	r2, [r3, #32]
}
 800b7ea:	bf00      	nop
 800b7ec:	371c      	adds	r7, #28
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f4:	4770      	bx	lr

0800b7f6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b7f6:	b480      	push	{r7}
 800b7f8:	b087      	sub	sp, #28
 800b7fa:	af00      	add	r7, sp, #0
 800b7fc:	60f8      	str	r0, [r7, #12]
 800b7fe:	60b9      	str	r1, [r7, #8]
 800b800:	607a      	str	r2, [r7, #4]
 800b802:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	6a1b      	ldr	r3, [r3, #32]
 800b808:	f023 0210 	bic.w	r2, r3, #16
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	699b      	ldr	r3, [r3, #24]
 800b814:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	6a1b      	ldr	r3, [r3, #32]
 800b81a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b822:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	021b      	lsls	r3, r3, #8
 800b828:	697a      	ldr	r2, [r7, #20]
 800b82a:	4313      	orrs	r3, r2
 800b82c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b82e:	697b      	ldr	r3, [r7, #20]
 800b830:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b834:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	031b      	lsls	r3, r3, #12
 800b83a:	b29b      	uxth	r3, r3
 800b83c:	697a      	ldr	r2, [r7, #20]
 800b83e:	4313      	orrs	r3, r2
 800b840:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b848:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	011b      	lsls	r3, r3, #4
 800b84e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800b852:	693a      	ldr	r2, [r7, #16]
 800b854:	4313      	orrs	r3, r2
 800b856:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	697a      	ldr	r2, [r7, #20]
 800b85c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	693a      	ldr	r2, [r7, #16]
 800b862:	621a      	str	r2, [r3, #32]
}
 800b864:	bf00      	nop
 800b866:	371c      	adds	r7, #28
 800b868:	46bd      	mov	sp, r7
 800b86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86e:	4770      	bx	lr

0800b870 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b870:	b480      	push	{r7}
 800b872:	b087      	sub	sp, #28
 800b874:	af00      	add	r7, sp, #0
 800b876:	60f8      	str	r0, [r7, #12]
 800b878:	60b9      	str	r1, [r7, #8]
 800b87a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	6a1b      	ldr	r3, [r3, #32]
 800b880:	f023 0210 	bic.w	r2, r3, #16
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	699b      	ldr	r3, [r3, #24]
 800b88c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	6a1b      	ldr	r3, [r3, #32]
 800b892:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b894:	697b      	ldr	r3, [r7, #20]
 800b896:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b89a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	031b      	lsls	r3, r3, #12
 800b8a0:	697a      	ldr	r2, [r7, #20]
 800b8a2:	4313      	orrs	r3, r2
 800b8a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b8ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	011b      	lsls	r3, r3, #4
 800b8b2:	693a      	ldr	r2, [r7, #16]
 800b8b4:	4313      	orrs	r3, r2
 800b8b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	697a      	ldr	r2, [r7, #20]
 800b8bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	693a      	ldr	r2, [r7, #16]
 800b8c2:	621a      	str	r2, [r3, #32]
}
 800b8c4:	bf00      	nop
 800b8c6:	371c      	adds	r7, #28
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ce:	4770      	bx	lr

0800b8d0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b087      	sub	sp, #28
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	60f8      	str	r0, [r7, #12]
 800b8d8:	60b9      	str	r1, [r7, #8]
 800b8da:	607a      	str	r2, [r7, #4]
 800b8dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	6a1b      	ldr	r3, [r3, #32]
 800b8e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	69db      	ldr	r3, [r3, #28]
 800b8ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	6a1b      	ldr	r3, [r3, #32]
 800b8f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	f023 0303 	bic.w	r3, r3, #3
 800b8fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800b8fe:	697a      	ldr	r2, [r7, #20]
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	4313      	orrs	r3, r2
 800b904:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b90c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	011b      	lsls	r3, r3, #4
 800b912:	b2db      	uxtb	r3, r3
 800b914:	697a      	ldr	r2, [r7, #20]
 800b916:	4313      	orrs	r3, r2
 800b918:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800b920:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	021b      	lsls	r3, r3, #8
 800b926:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800b92a:	693a      	ldr	r2, [r7, #16]
 800b92c:	4313      	orrs	r3, r2
 800b92e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	697a      	ldr	r2, [r7, #20]
 800b934:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	693a      	ldr	r2, [r7, #16]
 800b93a:	621a      	str	r2, [r3, #32]
}
 800b93c:	bf00      	nop
 800b93e:	371c      	adds	r7, #28
 800b940:	46bd      	mov	sp, r7
 800b942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b946:	4770      	bx	lr

0800b948 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b948:	b480      	push	{r7}
 800b94a:	b087      	sub	sp, #28
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	60f8      	str	r0, [r7, #12]
 800b950:	60b9      	str	r1, [r7, #8]
 800b952:	607a      	str	r2, [r7, #4]
 800b954:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	6a1b      	ldr	r3, [r3, #32]
 800b95a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	69db      	ldr	r3, [r3, #28]
 800b966:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	6a1b      	ldr	r3, [r3, #32]
 800b96c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b974:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	021b      	lsls	r3, r3, #8
 800b97a:	697a      	ldr	r2, [r7, #20]
 800b97c:	4313      	orrs	r3, r2
 800b97e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b986:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	031b      	lsls	r3, r3, #12
 800b98c:	b29b      	uxth	r3, r3
 800b98e:	697a      	ldr	r2, [r7, #20]
 800b990:	4313      	orrs	r3, r2
 800b992:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800b994:	693b      	ldr	r3, [r7, #16]
 800b996:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800b99a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	031b      	lsls	r3, r3, #12
 800b9a0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800b9a4:	693a      	ldr	r2, [r7, #16]
 800b9a6:	4313      	orrs	r3, r2
 800b9a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	697a      	ldr	r2, [r7, #20]
 800b9ae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	693a      	ldr	r2, [r7, #16]
 800b9b4:	621a      	str	r2, [r3, #32]
}
 800b9b6:	bf00      	nop
 800b9b8:	371c      	adds	r7, #28
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c0:	4770      	bx	lr

0800b9c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b9c2:	b480      	push	{r7}
 800b9c4:	b085      	sub	sp, #20
 800b9c6:	af00      	add	r7, sp, #0
 800b9c8:	6078      	str	r0, [r7, #4]
 800b9ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	689b      	ldr	r3, [r3, #8]
 800b9d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b9da:	683a      	ldr	r2, [r7, #0]
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	4313      	orrs	r3, r2
 800b9e0:	f043 0307 	orr.w	r3, r3, #7
 800b9e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	68fa      	ldr	r2, [r7, #12]
 800b9ea:	609a      	str	r2, [r3, #8]
}
 800b9ec:	bf00      	nop
 800b9ee:	3714      	adds	r7, #20
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f6:	4770      	bx	lr

0800b9f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	b087      	sub	sp, #28
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	60f8      	str	r0, [r7, #12]
 800ba00:	60b9      	str	r1, [r7, #8]
 800ba02:	607a      	str	r2, [r7, #4]
 800ba04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	689b      	ldr	r3, [r3, #8]
 800ba0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ba12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	021a      	lsls	r2, r3, #8
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	431a      	orrs	r2, r3
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	4313      	orrs	r3, r2
 800ba20:	697a      	ldr	r2, [r7, #20]
 800ba22:	4313      	orrs	r3, r2
 800ba24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	697a      	ldr	r2, [r7, #20]
 800ba2a:	609a      	str	r2, [r3, #8]
}
 800ba2c:	bf00      	nop
 800ba2e:	371c      	adds	r7, #28
 800ba30:	46bd      	mov	sp, r7
 800ba32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba36:	4770      	bx	lr

0800ba38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ba38:	b480      	push	{r7}
 800ba3a:	b087      	sub	sp, #28
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	60f8      	str	r0, [r7, #12]
 800ba40:	60b9      	str	r1, [r7, #8]
 800ba42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	f003 031f 	and.w	r3, r3, #31
 800ba4a:	2201      	movs	r2, #1
 800ba4c:	fa02 f303 	lsl.w	r3, r2, r3
 800ba50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	6a1a      	ldr	r2, [r3, #32]
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	43db      	mvns	r3, r3
 800ba5a:	401a      	ands	r2, r3
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	6a1a      	ldr	r2, [r3, #32]
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	f003 031f 	and.w	r3, r3, #31
 800ba6a:	6879      	ldr	r1, [r7, #4]
 800ba6c:	fa01 f303 	lsl.w	r3, r1, r3
 800ba70:	431a      	orrs	r2, r3
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	621a      	str	r2, [r3, #32]
}
 800ba76:	bf00      	nop
 800ba78:	371c      	adds	r7, #28
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba80:	4770      	bx	lr
	...

0800ba84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ba84:	b480      	push	{r7}
 800ba86:	b085      	sub	sp, #20
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba94:	2b01      	cmp	r3, #1
 800ba96:	d101      	bne.n	800ba9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ba98:	2302      	movs	r3, #2
 800ba9a:	e06d      	b.n	800bb78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2201      	movs	r2, #1
 800baa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2202      	movs	r2, #2
 800baa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	685b      	ldr	r3, [r3, #4]
 800bab2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	689b      	ldr	r3, [r3, #8]
 800baba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	4a30      	ldr	r2, [pc, #192]	; (800bb84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bac2:	4293      	cmp	r3, r2
 800bac4:	d004      	beq.n	800bad0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	4a2f      	ldr	r2, [pc, #188]	; (800bb88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bacc:	4293      	cmp	r3, r2
 800bace:	d108      	bne.n	800bae2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bad6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	68fa      	ldr	r2, [r7, #12]
 800bade:	4313      	orrs	r3, r2
 800bae0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bae8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	68fa      	ldr	r2, [r7, #12]
 800baf0:	4313      	orrs	r3, r2
 800baf2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	68fa      	ldr	r2, [r7, #12]
 800bafa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	4a20      	ldr	r2, [pc, #128]	; (800bb84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bb02:	4293      	cmp	r3, r2
 800bb04:	d022      	beq.n	800bb4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb0e:	d01d      	beq.n	800bb4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	4a1d      	ldr	r2, [pc, #116]	; (800bb8c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bb16:	4293      	cmp	r3, r2
 800bb18:	d018      	beq.n	800bb4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	4a1c      	ldr	r2, [pc, #112]	; (800bb90 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bb20:	4293      	cmp	r3, r2
 800bb22:	d013      	beq.n	800bb4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	4a1a      	ldr	r2, [pc, #104]	; (800bb94 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	d00e      	beq.n	800bb4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	4a15      	ldr	r2, [pc, #84]	; (800bb88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bb34:	4293      	cmp	r3, r2
 800bb36:	d009      	beq.n	800bb4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	4a16      	ldr	r2, [pc, #88]	; (800bb98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d004      	beq.n	800bb4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	4a15      	ldr	r2, [pc, #84]	; (800bb9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bb48:	4293      	cmp	r3, r2
 800bb4a:	d10c      	bne.n	800bb66 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	689b      	ldr	r3, [r3, #8]
 800bb58:	68ba      	ldr	r2, [r7, #8]
 800bb5a:	4313      	orrs	r3, r2
 800bb5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	68ba      	ldr	r2, [r7, #8]
 800bb64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2201      	movs	r2, #1
 800bb6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2200      	movs	r2, #0
 800bb72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bb76:	2300      	movs	r3, #0
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3714      	adds	r7, #20
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb82:	4770      	bx	lr
 800bb84:	40010000 	.word	0x40010000
 800bb88:	40010400 	.word	0x40010400
 800bb8c:	40000400 	.word	0x40000400
 800bb90:	40000800 	.word	0x40000800
 800bb94:	40000c00 	.word	0x40000c00
 800bb98:	40014000 	.word	0x40014000
 800bb9c:	40001800 	.word	0x40001800

0800bba0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bba0:	b480      	push	{r7}
 800bba2:	b083      	sub	sp, #12
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bba8:	bf00      	nop
 800bbaa:	370c      	adds	r7, #12
 800bbac:	46bd      	mov	sp, r7
 800bbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb2:	4770      	bx	lr

0800bbb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	b083      	sub	sp, #12
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bbbc:	bf00      	nop
 800bbbe:	370c      	adds	r7, #12
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc6:	4770      	bx	lr

0800bbc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b083      	sub	sp, #12
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bbd0:	bf00      	nop
 800bbd2:	370c      	adds	r7, #12
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbda:	4770      	bx	lr

0800bbdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b082      	sub	sp, #8
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d101      	bne.n	800bbee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bbea:	2301      	movs	r3, #1
 800bbec:	e040      	b.n	800bc70 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d106      	bne.n	800bc04 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f7f9 fa46 	bl	8005090 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2224      	movs	r2, #36	; 0x24
 800bc08:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	681a      	ldr	r2, [r3, #0]
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	f022 0201 	bic.w	r2, r2, #1
 800bc18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f000 f8c0 	bl	800bda0 <UART_SetConfig>
 800bc20:	4603      	mov	r3, r0
 800bc22:	2b01      	cmp	r3, #1
 800bc24:	d101      	bne.n	800bc2a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800bc26:	2301      	movs	r3, #1
 800bc28:	e022      	b.n	800bc70 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d002      	beq.n	800bc38 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	f000 fb18 	bl	800c268 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	685a      	ldr	r2, [r3, #4]
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bc46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	689a      	ldr	r2, [r3, #8]
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bc56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	681a      	ldr	r2, [r3, #0]
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	f042 0201 	orr.w	r2, r2, #1
 800bc66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f000 fb9f 	bl	800c3ac <UART_CheckIdleState>
 800bc6e:	4603      	mov	r3, r0
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	3708      	adds	r7, #8
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}

0800bc78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b08a      	sub	sp, #40	; 0x28
 800bc7c:	af02      	add	r7, sp, #8
 800bc7e:	60f8      	str	r0, [r7, #12]
 800bc80:	60b9      	str	r1, [r7, #8]
 800bc82:	603b      	str	r3, [r7, #0]
 800bc84:	4613      	mov	r3, r2
 800bc86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc8c:	2b20      	cmp	r3, #32
 800bc8e:	f040 8081 	bne.w	800bd94 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d002      	beq.n	800bc9e <HAL_UART_Transmit+0x26>
 800bc98:	88fb      	ldrh	r3, [r7, #6]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d101      	bne.n	800bca2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800bc9e:	2301      	movs	r3, #1
 800bca0:	e079      	b.n	800bd96 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800bca8:	2b01      	cmp	r3, #1
 800bcaa:	d101      	bne.n	800bcb0 <HAL_UART_Transmit+0x38>
 800bcac:	2302      	movs	r3, #2
 800bcae:	e072      	b.n	800bd96 <HAL_UART_Transmit+0x11e>
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	2201      	movs	r2, #1
 800bcb4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	2221      	movs	r2, #33	; 0x21
 800bcc4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bcc6:	f7f9 fadf 	bl	8005288 <HAL_GetTick>
 800bcca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	88fa      	ldrh	r2, [r7, #6]
 800bcd0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	88fa      	ldrh	r2, [r7, #6]
 800bcd8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	689b      	ldr	r3, [r3, #8]
 800bce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bce4:	d108      	bne.n	800bcf8 <HAL_UART_Transmit+0x80>
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	691b      	ldr	r3, [r3, #16]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d104      	bne.n	800bcf8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800bcee:	2300      	movs	r3, #0
 800bcf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	61bb      	str	r3, [r7, #24]
 800bcf6:	e003      	b.n	800bd00 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	2200      	movs	r2, #0
 800bd04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800bd08:	e02c      	b.n	800bd64 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	9300      	str	r3, [sp, #0]
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	2200      	movs	r2, #0
 800bd12:	2180      	movs	r1, #128	; 0x80
 800bd14:	68f8      	ldr	r0, [r7, #12]
 800bd16:	f000 fb92 	bl	800c43e <UART_WaitOnFlagUntilTimeout>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d001      	beq.n	800bd24 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800bd20:	2303      	movs	r3, #3
 800bd22:	e038      	b.n	800bd96 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800bd24:	69fb      	ldr	r3, [r7, #28]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d10b      	bne.n	800bd42 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bd2a:	69bb      	ldr	r3, [r7, #24]
 800bd2c:	881b      	ldrh	r3, [r3, #0]
 800bd2e:	461a      	mov	r2, r3
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bd38:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800bd3a:	69bb      	ldr	r3, [r7, #24]
 800bd3c:	3302      	adds	r3, #2
 800bd3e:	61bb      	str	r3, [r7, #24]
 800bd40:	e007      	b.n	800bd52 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bd42:	69fb      	ldr	r3, [r7, #28]
 800bd44:	781a      	ldrb	r2, [r3, #0]
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800bd4c:	69fb      	ldr	r3, [r7, #28]
 800bd4e:	3301      	adds	r3, #1
 800bd50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800bd58:	b29b      	uxth	r3, r3
 800bd5a:	3b01      	subs	r3, #1
 800bd5c:	b29a      	uxth	r2, r3
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800bd6a:	b29b      	uxth	r3, r3
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d1cc      	bne.n	800bd0a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	9300      	str	r3, [sp, #0]
 800bd74:	697b      	ldr	r3, [r7, #20]
 800bd76:	2200      	movs	r2, #0
 800bd78:	2140      	movs	r1, #64	; 0x40
 800bd7a:	68f8      	ldr	r0, [r7, #12]
 800bd7c:	f000 fb5f 	bl	800c43e <UART_WaitOnFlagUntilTimeout>
 800bd80:	4603      	mov	r3, r0
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d001      	beq.n	800bd8a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800bd86:	2303      	movs	r3, #3
 800bd88:	e005      	b.n	800bd96 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	2220      	movs	r2, #32
 800bd8e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800bd90:	2300      	movs	r3, #0
 800bd92:	e000      	b.n	800bd96 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800bd94:	2302      	movs	r3, #2
  }
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	3720      	adds	r7, #32
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}
	...

0800bda0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b088      	sub	sp, #32
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	689a      	ldr	r2, [r3, #8]
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	691b      	ldr	r3, [r3, #16]
 800bdb4:	431a      	orrs	r2, r3
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	695b      	ldr	r3, [r3, #20]
 800bdba:	431a      	orrs	r2, r3
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	69db      	ldr	r3, [r3, #28]
 800bdc0:	4313      	orrs	r3, r2
 800bdc2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	681a      	ldr	r2, [r3, #0]
 800bdca:	4ba6      	ldr	r3, [pc, #664]	; (800c064 <UART_SetConfig+0x2c4>)
 800bdcc:	4013      	ands	r3, r2
 800bdce:	687a      	ldr	r2, [r7, #4]
 800bdd0:	6812      	ldr	r2, [r2, #0]
 800bdd2:	6979      	ldr	r1, [r7, #20]
 800bdd4:	430b      	orrs	r3, r1
 800bdd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	68da      	ldr	r2, [r3, #12]
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	430a      	orrs	r2, r1
 800bdec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	699b      	ldr	r3, [r3, #24]
 800bdf2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	6a1b      	ldr	r3, [r3, #32]
 800bdf8:	697a      	ldr	r2, [r7, #20]
 800bdfa:	4313      	orrs	r3, r2
 800bdfc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	689b      	ldr	r3, [r3, #8]
 800be04:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	697a      	ldr	r2, [r7, #20]
 800be0e:	430a      	orrs	r2, r1
 800be10:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	4a94      	ldr	r2, [pc, #592]	; (800c068 <UART_SetConfig+0x2c8>)
 800be18:	4293      	cmp	r3, r2
 800be1a:	d120      	bne.n	800be5e <UART_SetConfig+0xbe>
 800be1c:	4b93      	ldr	r3, [pc, #588]	; (800c06c <UART_SetConfig+0x2cc>)
 800be1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be22:	f003 0303 	and.w	r3, r3, #3
 800be26:	2b03      	cmp	r3, #3
 800be28:	d816      	bhi.n	800be58 <UART_SetConfig+0xb8>
 800be2a:	a201      	add	r2, pc, #4	; (adr r2, 800be30 <UART_SetConfig+0x90>)
 800be2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be30:	0800be41 	.word	0x0800be41
 800be34:	0800be4d 	.word	0x0800be4d
 800be38:	0800be47 	.word	0x0800be47
 800be3c:	0800be53 	.word	0x0800be53
 800be40:	2301      	movs	r3, #1
 800be42:	77fb      	strb	r3, [r7, #31]
 800be44:	e150      	b.n	800c0e8 <UART_SetConfig+0x348>
 800be46:	2302      	movs	r3, #2
 800be48:	77fb      	strb	r3, [r7, #31]
 800be4a:	e14d      	b.n	800c0e8 <UART_SetConfig+0x348>
 800be4c:	2304      	movs	r3, #4
 800be4e:	77fb      	strb	r3, [r7, #31]
 800be50:	e14a      	b.n	800c0e8 <UART_SetConfig+0x348>
 800be52:	2308      	movs	r3, #8
 800be54:	77fb      	strb	r3, [r7, #31]
 800be56:	e147      	b.n	800c0e8 <UART_SetConfig+0x348>
 800be58:	2310      	movs	r3, #16
 800be5a:	77fb      	strb	r3, [r7, #31]
 800be5c:	e144      	b.n	800c0e8 <UART_SetConfig+0x348>
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	4a83      	ldr	r2, [pc, #524]	; (800c070 <UART_SetConfig+0x2d0>)
 800be64:	4293      	cmp	r3, r2
 800be66:	d132      	bne.n	800bece <UART_SetConfig+0x12e>
 800be68:	4b80      	ldr	r3, [pc, #512]	; (800c06c <UART_SetConfig+0x2cc>)
 800be6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be6e:	f003 030c 	and.w	r3, r3, #12
 800be72:	2b0c      	cmp	r3, #12
 800be74:	d828      	bhi.n	800bec8 <UART_SetConfig+0x128>
 800be76:	a201      	add	r2, pc, #4	; (adr r2, 800be7c <UART_SetConfig+0xdc>)
 800be78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be7c:	0800beb1 	.word	0x0800beb1
 800be80:	0800bec9 	.word	0x0800bec9
 800be84:	0800bec9 	.word	0x0800bec9
 800be88:	0800bec9 	.word	0x0800bec9
 800be8c:	0800bebd 	.word	0x0800bebd
 800be90:	0800bec9 	.word	0x0800bec9
 800be94:	0800bec9 	.word	0x0800bec9
 800be98:	0800bec9 	.word	0x0800bec9
 800be9c:	0800beb7 	.word	0x0800beb7
 800bea0:	0800bec9 	.word	0x0800bec9
 800bea4:	0800bec9 	.word	0x0800bec9
 800bea8:	0800bec9 	.word	0x0800bec9
 800beac:	0800bec3 	.word	0x0800bec3
 800beb0:	2300      	movs	r3, #0
 800beb2:	77fb      	strb	r3, [r7, #31]
 800beb4:	e118      	b.n	800c0e8 <UART_SetConfig+0x348>
 800beb6:	2302      	movs	r3, #2
 800beb8:	77fb      	strb	r3, [r7, #31]
 800beba:	e115      	b.n	800c0e8 <UART_SetConfig+0x348>
 800bebc:	2304      	movs	r3, #4
 800bebe:	77fb      	strb	r3, [r7, #31]
 800bec0:	e112      	b.n	800c0e8 <UART_SetConfig+0x348>
 800bec2:	2308      	movs	r3, #8
 800bec4:	77fb      	strb	r3, [r7, #31]
 800bec6:	e10f      	b.n	800c0e8 <UART_SetConfig+0x348>
 800bec8:	2310      	movs	r3, #16
 800beca:	77fb      	strb	r3, [r7, #31]
 800becc:	e10c      	b.n	800c0e8 <UART_SetConfig+0x348>
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	4a68      	ldr	r2, [pc, #416]	; (800c074 <UART_SetConfig+0x2d4>)
 800bed4:	4293      	cmp	r3, r2
 800bed6:	d120      	bne.n	800bf1a <UART_SetConfig+0x17a>
 800bed8:	4b64      	ldr	r3, [pc, #400]	; (800c06c <UART_SetConfig+0x2cc>)
 800beda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bede:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bee2:	2b30      	cmp	r3, #48	; 0x30
 800bee4:	d013      	beq.n	800bf0e <UART_SetConfig+0x16e>
 800bee6:	2b30      	cmp	r3, #48	; 0x30
 800bee8:	d814      	bhi.n	800bf14 <UART_SetConfig+0x174>
 800beea:	2b20      	cmp	r3, #32
 800beec:	d009      	beq.n	800bf02 <UART_SetConfig+0x162>
 800beee:	2b20      	cmp	r3, #32
 800bef0:	d810      	bhi.n	800bf14 <UART_SetConfig+0x174>
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d002      	beq.n	800befc <UART_SetConfig+0x15c>
 800bef6:	2b10      	cmp	r3, #16
 800bef8:	d006      	beq.n	800bf08 <UART_SetConfig+0x168>
 800befa:	e00b      	b.n	800bf14 <UART_SetConfig+0x174>
 800befc:	2300      	movs	r3, #0
 800befe:	77fb      	strb	r3, [r7, #31]
 800bf00:	e0f2      	b.n	800c0e8 <UART_SetConfig+0x348>
 800bf02:	2302      	movs	r3, #2
 800bf04:	77fb      	strb	r3, [r7, #31]
 800bf06:	e0ef      	b.n	800c0e8 <UART_SetConfig+0x348>
 800bf08:	2304      	movs	r3, #4
 800bf0a:	77fb      	strb	r3, [r7, #31]
 800bf0c:	e0ec      	b.n	800c0e8 <UART_SetConfig+0x348>
 800bf0e:	2308      	movs	r3, #8
 800bf10:	77fb      	strb	r3, [r7, #31]
 800bf12:	e0e9      	b.n	800c0e8 <UART_SetConfig+0x348>
 800bf14:	2310      	movs	r3, #16
 800bf16:	77fb      	strb	r3, [r7, #31]
 800bf18:	e0e6      	b.n	800c0e8 <UART_SetConfig+0x348>
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	4a56      	ldr	r2, [pc, #344]	; (800c078 <UART_SetConfig+0x2d8>)
 800bf20:	4293      	cmp	r3, r2
 800bf22:	d120      	bne.n	800bf66 <UART_SetConfig+0x1c6>
 800bf24:	4b51      	ldr	r3, [pc, #324]	; (800c06c <UART_SetConfig+0x2cc>)
 800bf26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf2a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bf2e:	2bc0      	cmp	r3, #192	; 0xc0
 800bf30:	d013      	beq.n	800bf5a <UART_SetConfig+0x1ba>
 800bf32:	2bc0      	cmp	r3, #192	; 0xc0
 800bf34:	d814      	bhi.n	800bf60 <UART_SetConfig+0x1c0>
 800bf36:	2b80      	cmp	r3, #128	; 0x80
 800bf38:	d009      	beq.n	800bf4e <UART_SetConfig+0x1ae>
 800bf3a:	2b80      	cmp	r3, #128	; 0x80
 800bf3c:	d810      	bhi.n	800bf60 <UART_SetConfig+0x1c0>
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d002      	beq.n	800bf48 <UART_SetConfig+0x1a8>
 800bf42:	2b40      	cmp	r3, #64	; 0x40
 800bf44:	d006      	beq.n	800bf54 <UART_SetConfig+0x1b4>
 800bf46:	e00b      	b.n	800bf60 <UART_SetConfig+0x1c0>
 800bf48:	2300      	movs	r3, #0
 800bf4a:	77fb      	strb	r3, [r7, #31]
 800bf4c:	e0cc      	b.n	800c0e8 <UART_SetConfig+0x348>
 800bf4e:	2302      	movs	r3, #2
 800bf50:	77fb      	strb	r3, [r7, #31]
 800bf52:	e0c9      	b.n	800c0e8 <UART_SetConfig+0x348>
 800bf54:	2304      	movs	r3, #4
 800bf56:	77fb      	strb	r3, [r7, #31]
 800bf58:	e0c6      	b.n	800c0e8 <UART_SetConfig+0x348>
 800bf5a:	2308      	movs	r3, #8
 800bf5c:	77fb      	strb	r3, [r7, #31]
 800bf5e:	e0c3      	b.n	800c0e8 <UART_SetConfig+0x348>
 800bf60:	2310      	movs	r3, #16
 800bf62:	77fb      	strb	r3, [r7, #31]
 800bf64:	e0c0      	b.n	800c0e8 <UART_SetConfig+0x348>
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	4a44      	ldr	r2, [pc, #272]	; (800c07c <UART_SetConfig+0x2dc>)
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	d125      	bne.n	800bfbc <UART_SetConfig+0x21c>
 800bf70:	4b3e      	ldr	r3, [pc, #248]	; (800c06c <UART_SetConfig+0x2cc>)
 800bf72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bf7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bf7e:	d017      	beq.n	800bfb0 <UART_SetConfig+0x210>
 800bf80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bf84:	d817      	bhi.n	800bfb6 <UART_SetConfig+0x216>
 800bf86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf8a:	d00b      	beq.n	800bfa4 <UART_SetConfig+0x204>
 800bf8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf90:	d811      	bhi.n	800bfb6 <UART_SetConfig+0x216>
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d003      	beq.n	800bf9e <UART_SetConfig+0x1fe>
 800bf96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf9a:	d006      	beq.n	800bfaa <UART_SetConfig+0x20a>
 800bf9c:	e00b      	b.n	800bfb6 <UART_SetConfig+0x216>
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	77fb      	strb	r3, [r7, #31]
 800bfa2:	e0a1      	b.n	800c0e8 <UART_SetConfig+0x348>
 800bfa4:	2302      	movs	r3, #2
 800bfa6:	77fb      	strb	r3, [r7, #31]
 800bfa8:	e09e      	b.n	800c0e8 <UART_SetConfig+0x348>
 800bfaa:	2304      	movs	r3, #4
 800bfac:	77fb      	strb	r3, [r7, #31]
 800bfae:	e09b      	b.n	800c0e8 <UART_SetConfig+0x348>
 800bfb0:	2308      	movs	r3, #8
 800bfb2:	77fb      	strb	r3, [r7, #31]
 800bfb4:	e098      	b.n	800c0e8 <UART_SetConfig+0x348>
 800bfb6:	2310      	movs	r3, #16
 800bfb8:	77fb      	strb	r3, [r7, #31]
 800bfba:	e095      	b.n	800c0e8 <UART_SetConfig+0x348>
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	4a2f      	ldr	r2, [pc, #188]	; (800c080 <UART_SetConfig+0x2e0>)
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d125      	bne.n	800c012 <UART_SetConfig+0x272>
 800bfc6:	4b29      	ldr	r3, [pc, #164]	; (800c06c <UART_SetConfig+0x2cc>)
 800bfc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bfcc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bfd0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bfd4:	d017      	beq.n	800c006 <UART_SetConfig+0x266>
 800bfd6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bfda:	d817      	bhi.n	800c00c <UART_SetConfig+0x26c>
 800bfdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bfe0:	d00b      	beq.n	800bffa <UART_SetConfig+0x25a>
 800bfe2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bfe6:	d811      	bhi.n	800c00c <UART_SetConfig+0x26c>
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d003      	beq.n	800bff4 <UART_SetConfig+0x254>
 800bfec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bff0:	d006      	beq.n	800c000 <UART_SetConfig+0x260>
 800bff2:	e00b      	b.n	800c00c <UART_SetConfig+0x26c>
 800bff4:	2301      	movs	r3, #1
 800bff6:	77fb      	strb	r3, [r7, #31]
 800bff8:	e076      	b.n	800c0e8 <UART_SetConfig+0x348>
 800bffa:	2302      	movs	r3, #2
 800bffc:	77fb      	strb	r3, [r7, #31]
 800bffe:	e073      	b.n	800c0e8 <UART_SetConfig+0x348>
 800c000:	2304      	movs	r3, #4
 800c002:	77fb      	strb	r3, [r7, #31]
 800c004:	e070      	b.n	800c0e8 <UART_SetConfig+0x348>
 800c006:	2308      	movs	r3, #8
 800c008:	77fb      	strb	r3, [r7, #31]
 800c00a:	e06d      	b.n	800c0e8 <UART_SetConfig+0x348>
 800c00c:	2310      	movs	r3, #16
 800c00e:	77fb      	strb	r3, [r7, #31]
 800c010:	e06a      	b.n	800c0e8 <UART_SetConfig+0x348>
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	4a1b      	ldr	r2, [pc, #108]	; (800c084 <UART_SetConfig+0x2e4>)
 800c018:	4293      	cmp	r3, r2
 800c01a:	d138      	bne.n	800c08e <UART_SetConfig+0x2ee>
 800c01c:	4b13      	ldr	r3, [pc, #76]	; (800c06c <UART_SetConfig+0x2cc>)
 800c01e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c022:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800c026:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c02a:	d017      	beq.n	800c05c <UART_SetConfig+0x2bc>
 800c02c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c030:	d82a      	bhi.n	800c088 <UART_SetConfig+0x2e8>
 800c032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c036:	d00b      	beq.n	800c050 <UART_SetConfig+0x2b0>
 800c038:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c03c:	d824      	bhi.n	800c088 <UART_SetConfig+0x2e8>
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d003      	beq.n	800c04a <UART_SetConfig+0x2aa>
 800c042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c046:	d006      	beq.n	800c056 <UART_SetConfig+0x2b6>
 800c048:	e01e      	b.n	800c088 <UART_SetConfig+0x2e8>
 800c04a:	2300      	movs	r3, #0
 800c04c:	77fb      	strb	r3, [r7, #31]
 800c04e:	e04b      	b.n	800c0e8 <UART_SetConfig+0x348>
 800c050:	2302      	movs	r3, #2
 800c052:	77fb      	strb	r3, [r7, #31]
 800c054:	e048      	b.n	800c0e8 <UART_SetConfig+0x348>
 800c056:	2304      	movs	r3, #4
 800c058:	77fb      	strb	r3, [r7, #31]
 800c05a:	e045      	b.n	800c0e8 <UART_SetConfig+0x348>
 800c05c:	2308      	movs	r3, #8
 800c05e:	77fb      	strb	r3, [r7, #31]
 800c060:	e042      	b.n	800c0e8 <UART_SetConfig+0x348>
 800c062:	bf00      	nop
 800c064:	efff69f3 	.word	0xefff69f3
 800c068:	40011000 	.word	0x40011000
 800c06c:	40023800 	.word	0x40023800
 800c070:	40004400 	.word	0x40004400
 800c074:	40004800 	.word	0x40004800
 800c078:	40004c00 	.word	0x40004c00
 800c07c:	40005000 	.word	0x40005000
 800c080:	40011400 	.word	0x40011400
 800c084:	40007800 	.word	0x40007800
 800c088:	2310      	movs	r3, #16
 800c08a:	77fb      	strb	r3, [r7, #31]
 800c08c:	e02c      	b.n	800c0e8 <UART_SetConfig+0x348>
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	4a72      	ldr	r2, [pc, #456]	; (800c25c <UART_SetConfig+0x4bc>)
 800c094:	4293      	cmp	r3, r2
 800c096:	d125      	bne.n	800c0e4 <UART_SetConfig+0x344>
 800c098:	4b71      	ldr	r3, [pc, #452]	; (800c260 <UART_SetConfig+0x4c0>)
 800c09a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c09e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c0a2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c0a6:	d017      	beq.n	800c0d8 <UART_SetConfig+0x338>
 800c0a8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c0ac:	d817      	bhi.n	800c0de <UART_SetConfig+0x33e>
 800c0ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c0b2:	d00b      	beq.n	800c0cc <UART_SetConfig+0x32c>
 800c0b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c0b8:	d811      	bhi.n	800c0de <UART_SetConfig+0x33e>
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d003      	beq.n	800c0c6 <UART_SetConfig+0x326>
 800c0be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c0c2:	d006      	beq.n	800c0d2 <UART_SetConfig+0x332>
 800c0c4:	e00b      	b.n	800c0de <UART_SetConfig+0x33e>
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	77fb      	strb	r3, [r7, #31]
 800c0ca:	e00d      	b.n	800c0e8 <UART_SetConfig+0x348>
 800c0cc:	2302      	movs	r3, #2
 800c0ce:	77fb      	strb	r3, [r7, #31]
 800c0d0:	e00a      	b.n	800c0e8 <UART_SetConfig+0x348>
 800c0d2:	2304      	movs	r3, #4
 800c0d4:	77fb      	strb	r3, [r7, #31]
 800c0d6:	e007      	b.n	800c0e8 <UART_SetConfig+0x348>
 800c0d8:	2308      	movs	r3, #8
 800c0da:	77fb      	strb	r3, [r7, #31]
 800c0dc:	e004      	b.n	800c0e8 <UART_SetConfig+0x348>
 800c0de:	2310      	movs	r3, #16
 800c0e0:	77fb      	strb	r3, [r7, #31]
 800c0e2:	e001      	b.n	800c0e8 <UART_SetConfig+0x348>
 800c0e4:	2310      	movs	r3, #16
 800c0e6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	69db      	ldr	r3, [r3, #28]
 800c0ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c0f0:	d15b      	bne.n	800c1aa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800c0f2:	7ffb      	ldrb	r3, [r7, #31]
 800c0f4:	2b08      	cmp	r3, #8
 800c0f6:	d828      	bhi.n	800c14a <UART_SetConfig+0x3aa>
 800c0f8:	a201      	add	r2, pc, #4	; (adr r2, 800c100 <UART_SetConfig+0x360>)
 800c0fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0fe:	bf00      	nop
 800c100:	0800c125 	.word	0x0800c125
 800c104:	0800c12d 	.word	0x0800c12d
 800c108:	0800c135 	.word	0x0800c135
 800c10c:	0800c14b 	.word	0x0800c14b
 800c110:	0800c13b 	.word	0x0800c13b
 800c114:	0800c14b 	.word	0x0800c14b
 800c118:	0800c14b 	.word	0x0800c14b
 800c11c:	0800c14b 	.word	0x0800c14b
 800c120:	0800c143 	.word	0x0800c143
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c124:	f7fc f8b8 	bl	8008298 <HAL_RCC_GetPCLK1Freq>
 800c128:	61b8      	str	r0, [r7, #24]
        break;
 800c12a:	e013      	b.n	800c154 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c12c:	f7fc f8c8 	bl	80082c0 <HAL_RCC_GetPCLK2Freq>
 800c130:	61b8      	str	r0, [r7, #24]
        break;
 800c132:	e00f      	b.n	800c154 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c134:	4b4b      	ldr	r3, [pc, #300]	; (800c264 <UART_SetConfig+0x4c4>)
 800c136:	61bb      	str	r3, [r7, #24]
        break;
 800c138:	e00c      	b.n	800c154 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c13a:	f7fb ffdb 	bl	80080f4 <HAL_RCC_GetSysClockFreq>
 800c13e:	61b8      	str	r0, [r7, #24]
        break;
 800c140:	e008      	b.n	800c154 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c146:	61bb      	str	r3, [r7, #24]
        break;
 800c148:	e004      	b.n	800c154 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800c14a:	2300      	movs	r3, #0
 800c14c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c14e:	2301      	movs	r3, #1
 800c150:	77bb      	strb	r3, [r7, #30]
        break;
 800c152:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c154:	69bb      	ldr	r3, [r7, #24]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d074      	beq.n	800c244 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c15a:	69bb      	ldr	r3, [r7, #24]
 800c15c:	005a      	lsls	r2, r3, #1
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	685b      	ldr	r3, [r3, #4]
 800c162:	085b      	lsrs	r3, r3, #1
 800c164:	441a      	add	r2, r3
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	685b      	ldr	r3, [r3, #4]
 800c16a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c16e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	2b0f      	cmp	r3, #15
 800c174:	d916      	bls.n	800c1a4 <UART_SetConfig+0x404>
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c17c:	d212      	bcs.n	800c1a4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c17e:	693b      	ldr	r3, [r7, #16]
 800c180:	b29b      	uxth	r3, r3
 800c182:	f023 030f 	bic.w	r3, r3, #15
 800c186:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	085b      	lsrs	r3, r3, #1
 800c18c:	b29b      	uxth	r3, r3
 800c18e:	f003 0307 	and.w	r3, r3, #7
 800c192:	b29a      	uxth	r2, r3
 800c194:	89fb      	ldrh	r3, [r7, #14]
 800c196:	4313      	orrs	r3, r2
 800c198:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	89fa      	ldrh	r2, [r7, #14]
 800c1a0:	60da      	str	r2, [r3, #12]
 800c1a2:	e04f      	b.n	800c244 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	77bb      	strb	r3, [r7, #30]
 800c1a8:	e04c      	b.n	800c244 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c1aa:	7ffb      	ldrb	r3, [r7, #31]
 800c1ac:	2b08      	cmp	r3, #8
 800c1ae:	d828      	bhi.n	800c202 <UART_SetConfig+0x462>
 800c1b0:	a201      	add	r2, pc, #4	; (adr r2, 800c1b8 <UART_SetConfig+0x418>)
 800c1b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1b6:	bf00      	nop
 800c1b8:	0800c1dd 	.word	0x0800c1dd
 800c1bc:	0800c1e5 	.word	0x0800c1e5
 800c1c0:	0800c1ed 	.word	0x0800c1ed
 800c1c4:	0800c203 	.word	0x0800c203
 800c1c8:	0800c1f3 	.word	0x0800c1f3
 800c1cc:	0800c203 	.word	0x0800c203
 800c1d0:	0800c203 	.word	0x0800c203
 800c1d4:	0800c203 	.word	0x0800c203
 800c1d8:	0800c1fb 	.word	0x0800c1fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c1dc:	f7fc f85c 	bl	8008298 <HAL_RCC_GetPCLK1Freq>
 800c1e0:	61b8      	str	r0, [r7, #24]
        break;
 800c1e2:	e013      	b.n	800c20c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c1e4:	f7fc f86c 	bl	80082c0 <HAL_RCC_GetPCLK2Freq>
 800c1e8:	61b8      	str	r0, [r7, #24]
        break;
 800c1ea:	e00f      	b.n	800c20c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c1ec:	4b1d      	ldr	r3, [pc, #116]	; (800c264 <UART_SetConfig+0x4c4>)
 800c1ee:	61bb      	str	r3, [r7, #24]
        break;
 800c1f0:	e00c      	b.n	800c20c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c1f2:	f7fb ff7f 	bl	80080f4 <HAL_RCC_GetSysClockFreq>
 800c1f6:	61b8      	str	r0, [r7, #24]
        break;
 800c1f8:	e008      	b.n	800c20c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c1fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c1fe:	61bb      	str	r3, [r7, #24]
        break;
 800c200:	e004      	b.n	800c20c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800c202:	2300      	movs	r3, #0
 800c204:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c206:	2301      	movs	r3, #1
 800c208:	77bb      	strb	r3, [r7, #30]
        break;
 800c20a:	bf00      	nop
    }

    if (pclk != 0U)
 800c20c:	69bb      	ldr	r3, [r7, #24]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d018      	beq.n	800c244 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	685b      	ldr	r3, [r3, #4]
 800c216:	085a      	lsrs	r2, r3, #1
 800c218:	69bb      	ldr	r3, [r7, #24]
 800c21a:	441a      	add	r2, r3
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	685b      	ldr	r3, [r3, #4]
 800c220:	fbb2 f3f3 	udiv	r3, r2, r3
 800c224:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c226:	693b      	ldr	r3, [r7, #16]
 800c228:	2b0f      	cmp	r3, #15
 800c22a:	d909      	bls.n	800c240 <UART_SetConfig+0x4a0>
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c232:	d205      	bcs.n	800c240 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	b29a      	uxth	r2, r3
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	60da      	str	r2, [r3, #12]
 800c23e:	e001      	b.n	800c244 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800c240:	2301      	movs	r3, #1
 800c242:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2200      	movs	r2, #0
 800c248:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2200      	movs	r2, #0
 800c24e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800c250:	7fbb      	ldrb	r3, [r7, #30]
}
 800c252:	4618      	mov	r0, r3
 800c254:	3720      	adds	r7, #32
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}
 800c25a:	bf00      	nop
 800c25c:	40007c00 	.word	0x40007c00
 800c260:	40023800 	.word	0x40023800
 800c264:	00f42400 	.word	0x00f42400

0800c268 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c268:	b480      	push	{r7}
 800c26a:	b083      	sub	sp, #12
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c274:	f003 0301 	and.w	r3, r3, #1
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d00a      	beq.n	800c292 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	685b      	ldr	r3, [r3, #4]
 800c282:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	430a      	orrs	r2, r1
 800c290:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c296:	f003 0302 	and.w	r3, r3, #2
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d00a      	beq.n	800c2b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	685b      	ldr	r3, [r3, #4]
 800c2a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	430a      	orrs	r2, r1
 800c2b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2b8:	f003 0304 	and.w	r3, r3, #4
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d00a      	beq.n	800c2d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	685b      	ldr	r3, [r3, #4]
 800c2c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	430a      	orrs	r2, r1
 800c2d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2da:	f003 0308 	and.w	r3, r3, #8
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d00a      	beq.n	800c2f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	685b      	ldr	r3, [r3, #4]
 800c2e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	430a      	orrs	r2, r1
 800c2f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2fc:	f003 0310 	and.w	r3, r3, #16
 800c300:	2b00      	cmp	r3, #0
 800c302:	d00a      	beq.n	800c31a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	689b      	ldr	r3, [r3, #8]
 800c30a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	430a      	orrs	r2, r1
 800c318:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c31e:	f003 0320 	and.w	r3, r3, #32
 800c322:	2b00      	cmp	r3, #0
 800c324:	d00a      	beq.n	800c33c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	689b      	ldr	r3, [r3, #8]
 800c32c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	430a      	orrs	r2, r1
 800c33a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c344:	2b00      	cmp	r3, #0
 800c346:	d01a      	beq.n	800c37e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	685b      	ldr	r3, [r3, #4]
 800c34e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	430a      	orrs	r2, r1
 800c35c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c362:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c366:	d10a      	bne.n	800c37e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	685b      	ldr	r3, [r3, #4]
 800c36e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	430a      	orrs	r2, r1
 800c37c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c386:	2b00      	cmp	r3, #0
 800c388:	d00a      	beq.n	800c3a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	685b      	ldr	r3, [r3, #4]
 800c390:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	430a      	orrs	r2, r1
 800c39e:	605a      	str	r2, [r3, #4]
  }
}
 800c3a0:	bf00      	nop
 800c3a2:	370c      	adds	r7, #12
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3aa:	4770      	bx	lr

0800c3ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b086      	sub	sp, #24
 800c3b0:	af02      	add	r7, sp, #8
 800c3b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c3bc:	f7f8 ff64 	bl	8005288 <HAL_GetTick>
 800c3c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	f003 0308 	and.w	r3, r3, #8
 800c3cc:	2b08      	cmp	r3, #8
 800c3ce:	d10e      	bne.n	800c3ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c3d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c3d4:	9300      	str	r3, [sp, #0]
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	2200      	movs	r2, #0
 800c3da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f000 f82d 	bl	800c43e <UART_WaitOnFlagUntilTimeout>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d001      	beq.n	800c3ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c3ea:	2303      	movs	r3, #3
 800c3ec:	e023      	b.n	800c436 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	f003 0304 	and.w	r3, r3, #4
 800c3f8:	2b04      	cmp	r3, #4
 800c3fa:	d10e      	bne.n	800c41a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c3fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c400:	9300      	str	r3, [sp, #0]
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	2200      	movs	r2, #0
 800c406:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f000 f817 	bl	800c43e <UART_WaitOnFlagUntilTimeout>
 800c410:	4603      	mov	r3, r0
 800c412:	2b00      	cmp	r3, #0
 800c414:	d001      	beq.n	800c41a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c416:	2303      	movs	r3, #3
 800c418:	e00d      	b.n	800c436 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2220      	movs	r2, #32
 800c41e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2220      	movs	r2, #32
 800c424:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2200      	movs	r2, #0
 800c42a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2200      	movs	r2, #0
 800c430:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800c434:	2300      	movs	r3, #0
}
 800c436:	4618      	mov	r0, r3
 800c438:	3710      	adds	r7, #16
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}

0800c43e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c43e:	b580      	push	{r7, lr}
 800c440:	b09c      	sub	sp, #112	; 0x70
 800c442:	af00      	add	r7, sp, #0
 800c444:	60f8      	str	r0, [r7, #12]
 800c446:	60b9      	str	r1, [r7, #8]
 800c448:	603b      	str	r3, [r7, #0]
 800c44a:	4613      	mov	r3, r2
 800c44c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c44e:	e0a5      	b.n	800c59c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c450:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c452:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c456:	f000 80a1 	beq.w	800c59c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c45a:	f7f8 ff15 	bl	8005288 <HAL_GetTick>
 800c45e:	4602      	mov	r2, r0
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	1ad3      	subs	r3, r2, r3
 800c464:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c466:	429a      	cmp	r2, r3
 800c468:	d302      	bcc.n	800c470 <UART_WaitOnFlagUntilTimeout+0x32>
 800c46a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d13e      	bne.n	800c4ee <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c476:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c478:	e853 3f00 	ldrex	r3, [r3]
 800c47c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c47e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c480:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c484:	667b      	str	r3, [r7, #100]	; 0x64
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	461a      	mov	r2, r3
 800c48c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c48e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c490:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c492:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c494:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c496:	e841 2300 	strex	r3, r2, [r1]
 800c49a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c49c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d1e6      	bne.n	800c470 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	3308      	adds	r3, #8
 800c4a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4ac:	e853 3f00 	ldrex	r3, [r3]
 800c4b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c4b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4b4:	f023 0301 	bic.w	r3, r3, #1
 800c4b8:	663b      	str	r3, [r7, #96]	; 0x60
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	3308      	adds	r3, #8
 800c4c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c4c2:	64ba      	str	r2, [r7, #72]	; 0x48
 800c4c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c4c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c4ca:	e841 2300 	strex	r3, r2, [r1]
 800c4ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c4d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d1e5      	bne.n	800c4a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	2220      	movs	r2, #32
 800c4da:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	2220      	movs	r2, #32
 800c4e0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800c4ea:	2303      	movs	r3, #3
 800c4ec:	e067      	b.n	800c5be <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	f003 0304 	and.w	r3, r3, #4
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d04f      	beq.n	800c59c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	69db      	ldr	r3, [r3, #28]
 800c502:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c506:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c50a:	d147      	bne.n	800c59c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c514:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c51e:	e853 3f00 	ldrex	r3, [r3]
 800c522:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c526:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c52a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	461a      	mov	r2, r3
 800c532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c534:	637b      	str	r3, [r7, #52]	; 0x34
 800c536:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c538:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c53a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c53c:	e841 2300 	strex	r3, r2, [r1]
 800c540:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c544:	2b00      	cmp	r3, #0
 800c546:	d1e6      	bne.n	800c516 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	3308      	adds	r3, #8
 800c54e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c550:	697b      	ldr	r3, [r7, #20]
 800c552:	e853 3f00 	ldrex	r3, [r3]
 800c556:	613b      	str	r3, [r7, #16]
   return(result);
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	f023 0301 	bic.w	r3, r3, #1
 800c55e:	66bb      	str	r3, [r7, #104]	; 0x68
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	3308      	adds	r3, #8
 800c566:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c568:	623a      	str	r2, [r7, #32]
 800c56a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c56c:	69f9      	ldr	r1, [r7, #28]
 800c56e:	6a3a      	ldr	r2, [r7, #32]
 800c570:	e841 2300 	strex	r3, r2, [r1]
 800c574:	61bb      	str	r3, [r7, #24]
   return(result);
 800c576:	69bb      	ldr	r3, [r7, #24]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d1e5      	bne.n	800c548 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	2220      	movs	r2, #32
 800c580:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	2220      	movs	r2, #32
 800c586:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	2220      	movs	r2, #32
 800c58c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	2200      	movs	r2, #0
 800c594:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800c598:	2303      	movs	r3, #3
 800c59a:	e010      	b.n	800c5be <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	69da      	ldr	r2, [r3, #28]
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	4013      	ands	r3, r2
 800c5a6:	68ba      	ldr	r2, [r7, #8]
 800c5a8:	429a      	cmp	r2, r3
 800c5aa:	bf0c      	ite	eq
 800c5ac:	2301      	moveq	r3, #1
 800c5ae:	2300      	movne	r3, #0
 800c5b0:	b2db      	uxtb	r3, r3
 800c5b2:	461a      	mov	r2, r3
 800c5b4:	79fb      	ldrb	r3, [r7, #7]
 800c5b6:	429a      	cmp	r2, r3
 800c5b8:	f43f af4a 	beq.w	800c450 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c5bc:	2300      	movs	r3, #0
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3770      	adds	r7, #112	; 0x70
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}
	...

0800c5c8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c5c8:	b084      	sub	sp, #16
 800c5ca:	b480      	push	{r7}
 800c5cc:	b085      	sub	sp, #20
 800c5ce:	af00      	add	r7, sp, #0
 800c5d0:	6078      	str	r0, [r7, #4]
 800c5d2:	f107 001c 	add.w	r0, r7, #28
 800c5d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c5de:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c5e0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c5e2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800c5e6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800c5ea:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c5ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800c5ee:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800c5f2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c5f4:	68fa      	ldr	r2, [r7, #12]
 800c5f6:	4313      	orrs	r3, r2
 800c5f8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	685a      	ldr	r2, [r3, #4]
 800c5fe:	4b07      	ldr	r3, [pc, #28]	; (800c61c <SDMMC_Init+0x54>)
 800c600:	4013      	ands	r3, r2
 800c602:	68fa      	ldr	r2, [r7, #12]
 800c604:	431a      	orrs	r2, r3
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c60a:	2300      	movs	r3, #0
}
 800c60c:	4618      	mov	r0, r3
 800c60e:	3714      	adds	r7, #20
 800c610:	46bd      	mov	sp, r7
 800c612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c616:	b004      	add	sp, #16
 800c618:	4770      	bx	lr
 800c61a:	bf00      	nop
 800c61c:	ffff8100 	.word	0xffff8100

0800c620 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800c620:	b480      	push	{r7}
 800c622:	b083      	sub	sp, #12
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c62e:	4618      	mov	r0, r3
 800c630:	370c      	adds	r7, #12
 800c632:	46bd      	mov	sp, r7
 800c634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c638:	4770      	bx	lr

0800c63a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800c63a:	b480      	push	{r7}
 800c63c:	b083      	sub	sp, #12
 800c63e:	af00      	add	r7, sp, #0
 800c640:	6078      	str	r0, [r7, #4]
 800c642:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	681a      	ldr	r2, [r3, #0]
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c64e:	2300      	movs	r3, #0
}
 800c650:	4618      	mov	r0, r3
 800c652:	370c      	adds	r7, #12
 800c654:	46bd      	mov	sp, r7
 800c656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65a:	4770      	bx	lr

0800c65c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800c65c:	b480      	push	{r7}
 800c65e:	b083      	sub	sp, #12
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2203      	movs	r2, #3
 800c668:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c66a:	2300      	movs	r3, #0
}
 800c66c:	4618      	mov	r0, r3
 800c66e:	370c      	adds	r7, #12
 800c670:	46bd      	mov	sp, r7
 800c672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c676:	4770      	bx	lr

0800c678 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800c678:	b480      	push	{r7}
 800c67a:	b083      	sub	sp, #12
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	f003 0303 	and.w	r3, r3, #3
}
 800c688:	4618      	mov	r0, r3
 800c68a:	370c      	adds	r7, #12
 800c68c:	46bd      	mov	sp, r7
 800c68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c692:	4770      	bx	lr

0800c694 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800c694:	b480      	push	{r7}
 800c696:	b085      	sub	sp, #20
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
 800c69c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	681a      	ldr	r2, [r3, #0]
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c6b2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c6b8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c6be:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c6c0:	68fa      	ldr	r2, [r7, #12]
 800c6c2:	4313      	orrs	r3, r2
 800c6c4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	68da      	ldr	r2, [r3, #12]
 800c6ca:	4b06      	ldr	r3, [pc, #24]	; (800c6e4 <SDMMC_SendCommand+0x50>)
 800c6cc:	4013      	ands	r3, r2
 800c6ce:	68fa      	ldr	r2, [r7, #12]
 800c6d0:	431a      	orrs	r2, r3
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c6d6:	2300      	movs	r3, #0
}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	3714      	adds	r7, #20
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e2:	4770      	bx	lr
 800c6e4:	fffff000 	.word	0xfffff000

0800c6e8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c6e8:	b480      	push	{r7}
 800c6ea:	b083      	sub	sp, #12
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	691b      	ldr	r3, [r3, #16]
 800c6f4:	b2db      	uxtb	r3, r3
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	370c      	adds	r7, #12
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c700:	4770      	bx	lr

0800c702 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c702:	b480      	push	{r7}
 800c704:	b085      	sub	sp, #20
 800c706:	af00      	add	r7, sp, #0
 800c708:	6078      	str	r0, [r7, #4]
 800c70a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	3314      	adds	r3, #20
 800c710:	461a      	mov	r2, r3
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	4413      	add	r3, r2
 800c716:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	681b      	ldr	r3, [r3, #0]
}  
 800c71c:	4618      	mov	r0, r3
 800c71e:	3714      	adds	r7, #20
 800c720:	46bd      	mov	sp, r7
 800c722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c726:	4770      	bx	lr

0800c728 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800c728:	b480      	push	{r7}
 800c72a:	b085      	sub	sp, #20
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
 800c730:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c732:	2300      	movs	r3, #0
 800c734:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	681a      	ldr	r2, [r3, #0]
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	685a      	ldr	r2, [r3, #4]
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c74e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c754:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c75a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c75c:	68fa      	ldr	r2, [r7, #12]
 800c75e:	4313      	orrs	r3, r2
 800c760:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c766:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	431a      	orrs	r2, r3
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c772:	2300      	movs	r3, #0

}
 800c774:	4618      	mov	r0, r3
 800c776:	3714      	adds	r7, #20
 800c778:	46bd      	mov	sp, r7
 800c77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77e:	4770      	bx	lr

0800c780 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b088      	sub	sp, #32
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
 800c788:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c78e:	2310      	movs	r3, #16
 800c790:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c792:	2340      	movs	r3, #64	; 0x40
 800c794:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c796:	2300      	movs	r3, #0
 800c798:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c79a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c79e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c7a0:	f107 0308 	add.w	r3, r7, #8
 800c7a4:	4619      	mov	r1, r3
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f7ff ff74 	bl	800c694 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c7ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7b0:	2110      	movs	r1, #16
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f000 fa1a 	bl	800cbec <SDMMC_GetCmdResp1>
 800c7b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c7ba:	69fb      	ldr	r3, [r7, #28]
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3720      	adds	r7, #32
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}

0800c7c4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b088      	sub	sp, #32
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
 800c7cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c7d2:	2311      	movs	r3, #17
 800c7d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c7d6:	2340      	movs	r3, #64	; 0x40
 800c7d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c7de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c7e4:	f107 0308 	add.w	r3, r7, #8
 800c7e8:	4619      	mov	r1, r3
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f7ff ff52 	bl	800c694 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c7f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7f4:	2111      	movs	r1, #17
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f000 f9f8 	bl	800cbec <SDMMC_GetCmdResp1>
 800c7fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c7fe:	69fb      	ldr	r3, [r7, #28]
}
 800c800:	4618      	mov	r0, r3
 800c802:	3720      	adds	r7, #32
 800c804:	46bd      	mov	sp, r7
 800c806:	bd80      	pop	{r7, pc}

0800c808 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b088      	sub	sp, #32
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
 800c810:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c816:	2312      	movs	r3, #18
 800c818:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c81a:	2340      	movs	r3, #64	; 0x40
 800c81c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c81e:	2300      	movs	r3, #0
 800c820:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c822:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c826:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c828:	f107 0308 	add.w	r3, r7, #8
 800c82c:	4619      	mov	r1, r3
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f7ff ff30 	bl	800c694 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c834:	f241 3288 	movw	r2, #5000	; 0x1388
 800c838:	2112      	movs	r1, #18
 800c83a:	6878      	ldr	r0, [r7, #4]
 800c83c:	f000 f9d6 	bl	800cbec <SDMMC_GetCmdResp1>
 800c840:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c842:	69fb      	ldr	r3, [r7, #28]
}
 800c844:	4618      	mov	r0, r3
 800c846:	3720      	adds	r7, #32
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}

0800c84c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b088      	sub	sp, #32
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
 800c854:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c85a:	2318      	movs	r3, #24
 800c85c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c85e:	2340      	movs	r3, #64	; 0x40
 800c860:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c862:	2300      	movs	r3, #0
 800c864:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c866:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c86a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c86c:	f107 0308 	add.w	r3, r7, #8
 800c870:	4619      	mov	r1, r3
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f7ff ff0e 	bl	800c694 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c878:	f241 3288 	movw	r2, #5000	; 0x1388
 800c87c:	2118      	movs	r1, #24
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f000 f9b4 	bl	800cbec <SDMMC_GetCmdResp1>
 800c884:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c886:	69fb      	ldr	r3, [r7, #28]
}
 800c888:	4618      	mov	r0, r3
 800c88a:	3720      	adds	r7, #32
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}

0800c890 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b088      	sub	sp, #32
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
 800c898:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c89e:	2319      	movs	r3, #25
 800c8a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c8a2:	2340      	movs	r3, #64	; 0x40
 800c8a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c8aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c8ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c8b0:	f107 0308 	add.w	r3, r7, #8
 800c8b4:	4619      	mov	r1, r3
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f7ff feec 	bl	800c694 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c8bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8c0:	2119      	movs	r1, #25
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	f000 f992 	bl	800cbec <SDMMC_GetCmdResp1>
 800c8c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c8ca:	69fb      	ldr	r3, [r7, #28]
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	3720      	adds	r7, #32
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}

0800c8d4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b088      	sub	sp, #32
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c8dc:	2300      	movs	r3, #0
 800c8de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c8e0:	230c      	movs	r3, #12
 800c8e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c8e4:	2340      	movs	r3, #64	; 0x40
 800c8e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c8ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c8f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c8f2:	f107 0308 	add.w	r3, r7, #8
 800c8f6:	4619      	mov	r1, r3
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f7ff fecb 	bl	800c694 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800c8fe:	4a05      	ldr	r2, [pc, #20]	; (800c914 <SDMMC_CmdStopTransfer+0x40>)
 800c900:	210c      	movs	r1, #12
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f000 f972 	bl	800cbec <SDMMC_GetCmdResp1>
 800c908:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c90a:	69fb      	ldr	r3, [r7, #28]
}
 800c90c:	4618      	mov	r0, r3
 800c90e:	3720      	adds	r7, #32
 800c910:	46bd      	mov	sp, r7
 800c912:	bd80      	pop	{r7, pc}
 800c914:	05f5e100 	.word	0x05f5e100

0800c918 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b08a      	sub	sp, #40	; 0x28
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	60f8      	str	r0, [r7, #12]
 800c920:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c928:	2307      	movs	r3, #7
 800c92a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c92c:	2340      	movs	r3, #64	; 0x40
 800c92e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c930:	2300      	movs	r3, #0
 800c932:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c934:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c938:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c93a:	f107 0310 	add.w	r3, r7, #16
 800c93e:	4619      	mov	r1, r3
 800c940:	68f8      	ldr	r0, [r7, #12]
 800c942:	f7ff fea7 	bl	800c694 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c946:	f241 3288 	movw	r2, #5000	; 0x1388
 800c94a:	2107      	movs	r1, #7
 800c94c:	68f8      	ldr	r0, [r7, #12]
 800c94e:	f000 f94d 	bl	800cbec <SDMMC_GetCmdResp1>
 800c952:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c956:	4618      	mov	r0, r3
 800c958:	3728      	adds	r7, #40	; 0x28
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}

0800c95e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c95e:	b580      	push	{r7, lr}
 800c960:	b088      	sub	sp, #32
 800c962:	af00      	add	r7, sp, #0
 800c964:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c966:	2300      	movs	r3, #0
 800c968:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c96a:	2300      	movs	r3, #0
 800c96c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c96e:	2300      	movs	r3, #0
 800c970:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c972:	2300      	movs	r3, #0
 800c974:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c976:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c97a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c97c:	f107 0308 	add.w	r3, r7, #8
 800c980:	4619      	mov	r1, r3
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f7ff fe86 	bl	800c694 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c988:	6878      	ldr	r0, [r7, #4]
 800c98a:	f000 fb67 	bl	800d05c <SDMMC_GetCmdError>
 800c98e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c990:	69fb      	ldr	r3, [r7, #28]
}
 800c992:	4618      	mov	r0, r3
 800c994:	3720      	adds	r7, #32
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}

0800c99a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800c99a:	b580      	push	{r7, lr}
 800c99c:	b088      	sub	sp, #32
 800c99e:	af00      	add	r7, sp, #0
 800c9a0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c9a2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c9a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c9a8:	2308      	movs	r3, #8
 800c9aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c9ac:	2340      	movs	r3, #64	; 0x40
 800c9ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c9b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c9ba:	f107 0308 	add.w	r3, r7, #8
 800c9be:	4619      	mov	r1, r3
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f7ff fe67 	bl	800c694 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f000 fafa 	bl	800cfc0 <SDMMC_GetCmdResp7>
 800c9cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c9ce:	69fb      	ldr	r3, [r7, #28]
}
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	3720      	adds	r7, #32
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}

0800c9d8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b088      	sub	sp, #32
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
 800c9e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c9e6:	2337      	movs	r3, #55	; 0x37
 800c9e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c9ea:	2340      	movs	r3, #64	; 0x40
 800c9ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c9f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c9f8:	f107 0308 	add.w	r3, r7, #8
 800c9fc:	4619      	mov	r1, r3
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	f7ff fe48 	bl	800c694 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800ca04:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca08:	2137      	movs	r1, #55	; 0x37
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f000 f8ee 	bl	800cbec <SDMMC_GetCmdResp1>
 800ca10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca12:	69fb      	ldr	r3, [r7, #28]
}
 800ca14:	4618      	mov	r0, r3
 800ca16:	3720      	adds	r7, #32
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}

0800ca1c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b088      	sub	sp, #32
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
 800ca24:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800ca26:	683a      	ldr	r2, [r7, #0]
 800ca28:	4b0d      	ldr	r3, [pc, #52]	; (800ca60 <SDMMC_CmdAppOperCommand+0x44>)
 800ca2a:	4313      	orrs	r3, r2
 800ca2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ca2e:	2329      	movs	r3, #41	; 0x29
 800ca30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ca32:	2340      	movs	r3, #64	; 0x40
 800ca34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca36:	2300      	movs	r3, #0
 800ca38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca40:	f107 0308 	add.w	r3, r7, #8
 800ca44:	4619      	mov	r1, r3
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	f7ff fe24 	bl	800c694 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	f000 fa03 	bl	800ce58 <SDMMC_GetCmdResp3>
 800ca52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca54:	69fb      	ldr	r3, [r7, #28]
}
 800ca56:	4618      	mov	r0, r3
 800ca58:	3720      	adds	r7, #32
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}
 800ca5e:	bf00      	nop
 800ca60:	80100000 	.word	0x80100000

0800ca64 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b088      	sub	sp, #32
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
 800ca6c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ca72:	2306      	movs	r3, #6
 800ca74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ca76:	2340      	movs	r3, #64	; 0x40
 800ca78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca84:	f107 0308 	add.w	r3, r7, #8
 800ca88:	4619      	mov	r1, r3
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f7ff fe02 	bl	800c694 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800ca90:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca94:	2106      	movs	r1, #6
 800ca96:	6878      	ldr	r0, [r7, #4]
 800ca98:	f000 f8a8 	bl	800cbec <SDMMC_GetCmdResp1>
 800ca9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca9e:	69fb      	ldr	r3, [r7, #28]
}
 800caa0:	4618      	mov	r0, r3
 800caa2:	3720      	adds	r7, #32
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd80      	pop	{r7, pc}

0800caa8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b088      	sub	sp, #32
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800cab0:	2300      	movs	r3, #0
 800cab2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800cab4:	2333      	movs	r3, #51	; 0x33
 800cab6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cab8:	2340      	movs	r3, #64	; 0x40
 800caba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cabc:	2300      	movs	r3, #0
 800cabe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cac0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cac4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cac6:	f107 0308 	add.w	r3, r7, #8
 800caca:	4619      	mov	r1, r3
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	f7ff fde1 	bl	800c694 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800cad2:	f241 3288 	movw	r2, #5000	; 0x1388
 800cad6:	2133      	movs	r1, #51	; 0x33
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f000 f887 	bl	800cbec <SDMMC_GetCmdResp1>
 800cade:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cae0:	69fb      	ldr	r3, [r7, #28]
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	3720      	adds	r7, #32
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd80      	pop	{r7, pc}

0800caea <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800caea:	b580      	push	{r7, lr}
 800caec:	b088      	sub	sp, #32
 800caee:	af00      	add	r7, sp, #0
 800caf0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800caf2:	2300      	movs	r3, #0
 800caf4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800caf6:	2302      	movs	r3, #2
 800caf8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cafa:	23c0      	movs	r3, #192	; 0xc0
 800cafc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cafe:	2300      	movs	r3, #0
 800cb00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb06:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb08:	f107 0308 	add.w	r3, r7, #8
 800cb0c:	4619      	mov	r1, r3
 800cb0e:	6878      	ldr	r0, [r7, #4]
 800cb10:	f7ff fdc0 	bl	800c694 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	f000 f957 	bl	800cdc8 <SDMMC_GetCmdResp2>
 800cb1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb1c:	69fb      	ldr	r3, [r7, #28]
}
 800cb1e:	4618      	mov	r0, r3
 800cb20:	3720      	adds	r7, #32
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}

0800cb26 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cb26:	b580      	push	{r7, lr}
 800cb28:	b088      	sub	sp, #32
 800cb2a:	af00      	add	r7, sp, #0
 800cb2c:	6078      	str	r0, [r7, #4]
 800cb2e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800cb34:	2309      	movs	r3, #9
 800cb36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cb38:	23c0      	movs	r3, #192	; 0xc0
 800cb3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb44:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb46:	f107 0308 	add.w	r3, r7, #8
 800cb4a:	4619      	mov	r1, r3
 800cb4c:	6878      	ldr	r0, [r7, #4]
 800cb4e:	f7ff fda1 	bl	800c694 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f000 f938 	bl	800cdc8 <SDMMC_GetCmdResp2>
 800cb58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb5a:	69fb      	ldr	r3, [r7, #28]
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3720      	adds	r7, #32
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}

0800cb64 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b088      	sub	sp, #32
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
 800cb6c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800cb72:	2303      	movs	r3, #3
 800cb74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb76:	2340      	movs	r3, #64	; 0x40
 800cb78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb84:	f107 0308 	add.w	r3, r7, #8
 800cb88:	4619      	mov	r1, r3
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f7ff fd82 	bl	800c694 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800cb90:	683a      	ldr	r2, [r7, #0]
 800cb92:	2103      	movs	r1, #3
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f000 f99d 	bl	800ced4 <SDMMC_GetCmdResp6>
 800cb9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb9c:	69fb      	ldr	r3, [r7, #28]
}
 800cb9e:	4618      	mov	r0, r3
 800cba0:	3720      	adds	r7, #32
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}

0800cba6 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cba6:	b580      	push	{r7, lr}
 800cba8:	b088      	sub	sp, #32
 800cbaa:	af00      	add	r7, sp, #0
 800cbac:	6078      	str	r0, [r7, #4]
 800cbae:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800cbb4:	230d      	movs	r3, #13
 800cbb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cbb8:	2340      	movs	r3, #64	; 0x40
 800cbba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cbc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cbc4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cbc6:	f107 0308 	add.w	r3, r7, #8
 800cbca:	4619      	mov	r1, r3
 800cbcc:	6878      	ldr	r0, [r7, #4]
 800cbce:	f7ff fd61 	bl	800c694 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800cbd2:	f241 3288 	movw	r2, #5000	; 0x1388
 800cbd6:	210d      	movs	r1, #13
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f000 f807 	bl	800cbec <SDMMC_GetCmdResp1>
 800cbde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cbe0:	69fb      	ldr	r3, [r7, #28]
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	3720      	adds	r7, #32
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}
	...

0800cbec <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b088      	sub	sp, #32
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	60f8      	str	r0, [r7, #12]
 800cbf4:	460b      	mov	r3, r1
 800cbf6:	607a      	str	r2, [r7, #4]
 800cbf8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800cbfa:	4b70      	ldr	r3, [pc, #448]	; (800cdbc <SDMMC_GetCmdResp1+0x1d0>)
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	4a70      	ldr	r2, [pc, #448]	; (800cdc0 <SDMMC_GetCmdResp1+0x1d4>)
 800cc00:	fba2 2303 	umull	r2, r3, r2, r3
 800cc04:	0a5a      	lsrs	r2, r3, #9
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	fb02 f303 	mul.w	r3, r2, r3
 800cc0c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800cc0e:	69fb      	ldr	r3, [r7, #28]
 800cc10:	1e5a      	subs	r2, r3, #1
 800cc12:	61fa      	str	r2, [r7, #28]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d102      	bne.n	800cc1e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cc18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cc1c:	e0c9      	b.n	800cdb2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc22:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cc24:	69bb      	ldr	r3, [r7, #24]
 800cc26:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d0ef      	beq.n	800cc0e <SDMMC_GetCmdResp1+0x22>
 800cc2e:	69bb      	ldr	r3, [r7, #24]
 800cc30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d1ea      	bne.n	800cc0e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc3c:	f003 0304 	and.w	r3, r3, #4
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d004      	beq.n	800cc4e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	2204      	movs	r2, #4
 800cc48:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cc4a:	2304      	movs	r3, #4
 800cc4c:	e0b1      	b.n	800cdb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc52:	f003 0301 	and.w	r3, r3, #1
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d004      	beq.n	800cc64 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	2201      	movs	r2, #1
 800cc5e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cc60:	2301      	movs	r3, #1
 800cc62:	e0a6      	b.n	800cdb2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	22c5      	movs	r2, #197	; 0xc5
 800cc68:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cc6a:	68f8      	ldr	r0, [r7, #12]
 800cc6c:	f7ff fd3c 	bl	800c6e8 <SDMMC_GetCommandResponse>
 800cc70:	4603      	mov	r3, r0
 800cc72:	461a      	mov	r2, r3
 800cc74:	7afb      	ldrb	r3, [r7, #11]
 800cc76:	4293      	cmp	r3, r2
 800cc78:	d001      	beq.n	800cc7e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	e099      	b.n	800cdb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cc7e:	2100      	movs	r1, #0
 800cc80:	68f8      	ldr	r0, [r7, #12]
 800cc82:	f7ff fd3e 	bl	800c702 <SDMMC_GetResponse>
 800cc86:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800cc88:	697a      	ldr	r2, [r7, #20]
 800cc8a:	4b4e      	ldr	r3, [pc, #312]	; (800cdc4 <SDMMC_GetCmdResp1+0x1d8>)
 800cc8c:	4013      	ands	r3, r2
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d101      	bne.n	800cc96 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800cc92:	2300      	movs	r3, #0
 800cc94:	e08d      	b.n	800cdb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800cc96:	697b      	ldr	r3, [r7, #20]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	da02      	bge.n	800cca2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800cc9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cca0:	e087      	b.n	800cdb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d001      	beq.n	800ccb0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ccac:	2340      	movs	r3, #64	; 0x40
 800ccae:	e080      	b.n	800cdb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d001      	beq.n	800ccbe <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ccba:	2380      	movs	r3, #128	; 0x80
 800ccbc:	e079      	b.n	800cdb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ccbe:	697b      	ldr	r3, [r7, #20]
 800ccc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d002      	beq.n	800ccce <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ccc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cccc:	e071      	b.n	800cdb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ccce:	697b      	ldr	r3, [r7, #20]
 800ccd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d002      	beq.n	800ccde <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ccd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ccdc:	e069      	b.n	800cdb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ccde:	697b      	ldr	r3, [r7, #20]
 800cce0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d002      	beq.n	800ccee <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800cce8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccec:	e061      	b.n	800cdb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ccee:	697b      	ldr	r3, [r7, #20]
 800ccf0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d002      	beq.n	800ccfe <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ccf8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ccfc:	e059      	b.n	800cdb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d002      	beq.n	800cd0e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cd08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cd0c:	e051      	b.n	800cdb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800cd0e:	697b      	ldr	r3, [r7, #20]
 800cd10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d002      	beq.n	800cd1e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cd18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cd1c:	e049      	b.n	800cdb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cd1e:	697b      	ldr	r3, [r7, #20]
 800cd20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d002      	beq.n	800cd2e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cd28:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cd2c:	e041      	b.n	800cdb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cd2e:	697b      	ldr	r3, [r7, #20]
 800cd30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d002      	beq.n	800cd3e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800cd38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd3c:	e039      	b.n	800cdb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800cd3e:	697b      	ldr	r3, [r7, #20]
 800cd40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d002      	beq.n	800cd4e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800cd48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cd4c:	e031      	b.n	800cdb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800cd4e:	697b      	ldr	r3, [r7, #20]
 800cd50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d002      	beq.n	800cd5e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800cd58:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cd5c:	e029      	b.n	800cdb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800cd5e:	697b      	ldr	r3, [r7, #20]
 800cd60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d002      	beq.n	800cd6e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cd68:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cd6c:	e021      	b.n	800cdb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d002      	beq.n	800cd7e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cd78:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800cd7c:	e019      	b.n	800cdb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800cd7e:	697b      	ldr	r3, [r7, #20]
 800cd80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d002      	beq.n	800cd8e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cd88:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cd8c:	e011      	b.n	800cdb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cd8e:	697b      	ldr	r3, [r7, #20]
 800cd90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d002      	beq.n	800cd9e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800cd98:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800cd9c:	e009      	b.n	800cdb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800cd9e:	697b      	ldr	r3, [r7, #20]
 800cda0:	f003 0308 	and.w	r3, r3, #8
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d002      	beq.n	800cdae <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800cda8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800cdac:	e001      	b.n	800cdb2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cdae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	3720      	adds	r7, #32
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}
 800cdba:	bf00      	nop
 800cdbc:	20000004 	.word	0x20000004
 800cdc0:	10624dd3 	.word	0x10624dd3
 800cdc4:	fdffe008 	.word	0xfdffe008

0800cdc8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800cdc8:	b480      	push	{r7}
 800cdca:	b085      	sub	sp, #20
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cdd0:	4b1f      	ldr	r3, [pc, #124]	; (800ce50 <SDMMC_GetCmdResp2+0x88>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	4a1f      	ldr	r2, [pc, #124]	; (800ce54 <SDMMC_GetCmdResp2+0x8c>)
 800cdd6:	fba2 2303 	umull	r2, r3, r2, r3
 800cdda:	0a5b      	lsrs	r3, r3, #9
 800cddc:	f241 3288 	movw	r2, #5000	; 0x1388
 800cde0:	fb02 f303 	mul.w	r3, r2, r3
 800cde4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	1e5a      	subs	r2, r3, #1
 800cdea:	60fa      	str	r2, [r7, #12]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d102      	bne.n	800cdf6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cdf0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cdf4:	e026      	b.n	800ce44 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdfa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d0ef      	beq.n	800cde6 <SDMMC_GetCmdResp2+0x1e>
 800ce06:	68bb      	ldr	r3, [r7, #8]
 800ce08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d1ea      	bne.n	800cde6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce14:	f003 0304 	and.w	r3, r3, #4
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d004      	beq.n	800ce26 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2204      	movs	r2, #4
 800ce20:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ce22:	2304      	movs	r3, #4
 800ce24:	e00e      	b.n	800ce44 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce2a:	f003 0301 	and.w	r3, r3, #1
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d004      	beq.n	800ce3c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	2201      	movs	r2, #1
 800ce36:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ce38:	2301      	movs	r3, #1
 800ce3a:	e003      	b.n	800ce44 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	22c5      	movs	r2, #197	; 0xc5
 800ce40:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ce42:	2300      	movs	r3, #0
}
 800ce44:	4618      	mov	r0, r3
 800ce46:	3714      	adds	r7, #20
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4e:	4770      	bx	lr
 800ce50:	20000004 	.word	0x20000004
 800ce54:	10624dd3 	.word	0x10624dd3

0800ce58 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800ce58:	b480      	push	{r7}
 800ce5a:	b085      	sub	sp, #20
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ce60:	4b1a      	ldr	r3, [pc, #104]	; (800cecc <SDMMC_GetCmdResp3+0x74>)
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	4a1a      	ldr	r2, [pc, #104]	; (800ced0 <SDMMC_GetCmdResp3+0x78>)
 800ce66:	fba2 2303 	umull	r2, r3, r2, r3
 800ce6a:	0a5b      	lsrs	r3, r3, #9
 800ce6c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce70:	fb02 f303 	mul.w	r3, r2, r3
 800ce74:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	1e5a      	subs	r2, r3, #1
 800ce7a:	60fa      	str	r2, [r7, #12]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d102      	bne.n	800ce86 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ce80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ce84:	e01b      	b.n	800cebe <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce8a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ce8c:	68bb      	ldr	r3, [r7, #8]
 800ce8e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d0ef      	beq.n	800ce76 <SDMMC_GetCmdResp3+0x1e>
 800ce96:	68bb      	ldr	r3, [r7, #8]
 800ce98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d1ea      	bne.n	800ce76 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cea4:	f003 0304 	and.w	r3, r3, #4
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d004      	beq.n	800ceb6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2204      	movs	r2, #4
 800ceb0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ceb2:	2304      	movs	r3, #4
 800ceb4:	e003      	b.n	800cebe <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	22c5      	movs	r2, #197	; 0xc5
 800ceba:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800cebc:	2300      	movs	r3, #0
}
 800cebe:	4618      	mov	r0, r3
 800cec0:	3714      	adds	r7, #20
 800cec2:	46bd      	mov	sp, r7
 800cec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec8:	4770      	bx	lr
 800ceca:	bf00      	nop
 800cecc:	20000004 	.word	0x20000004
 800ced0:	10624dd3 	.word	0x10624dd3

0800ced4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b088      	sub	sp, #32
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	60f8      	str	r0, [r7, #12]
 800cedc:	460b      	mov	r3, r1
 800cede:	607a      	str	r2, [r7, #4]
 800cee0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cee2:	4b35      	ldr	r3, [pc, #212]	; (800cfb8 <SDMMC_GetCmdResp6+0xe4>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	4a35      	ldr	r2, [pc, #212]	; (800cfbc <SDMMC_GetCmdResp6+0xe8>)
 800cee8:	fba2 2303 	umull	r2, r3, r2, r3
 800ceec:	0a5b      	lsrs	r3, r3, #9
 800ceee:	f241 3288 	movw	r2, #5000	; 0x1388
 800cef2:	fb02 f303 	mul.w	r3, r2, r3
 800cef6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800cef8:	69fb      	ldr	r3, [r7, #28]
 800cefa:	1e5a      	subs	r2, r3, #1
 800cefc:	61fa      	str	r2, [r7, #28]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d102      	bne.n	800cf08 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cf02:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cf06:	e052      	b.n	800cfae <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf0c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cf0e:	69bb      	ldr	r3, [r7, #24]
 800cf10:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d0ef      	beq.n	800cef8 <SDMMC_GetCmdResp6+0x24>
 800cf18:	69bb      	ldr	r3, [r7, #24]
 800cf1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d1ea      	bne.n	800cef8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf26:	f003 0304 	and.w	r3, r3, #4
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d004      	beq.n	800cf38 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	2204      	movs	r2, #4
 800cf32:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cf34:	2304      	movs	r3, #4
 800cf36:	e03a      	b.n	800cfae <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf3c:	f003 0301 	and.w	r3, r3, #1
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d004      	beq.n	800cf4e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	2201      	movs	r2, #1
 800cf48:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cf4a:	2301      	movs	r3, #1
 800cf4c:	e02f      	b.n	800cfae <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cf4e:	68f8      	ldr	r0, [r7, #12]
 800cf50:	f7ff fbca 	bl	800c6e8 <SDMMC_GetCommandResponse>
 800cf54:	4603      	mov	r3, r0
 800cf56:	461a      	mov	r2, r3
 800cf58:	7afb      	ldrb	r3, [r7, #11]
 800cf5a:	4293      	cmp	r3, r2
 800cf5c:	d001      	beq.n	800cf62 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cf5e:	2301      	movs	r3, #1
 800cf60:	e025      	b.n	800cfae <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	22c5      	movs	r2, #197	; 0xc5
 800cf66:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cf68:	2100      	movs	r1, #0
 800cf6a:	68f8      	ldr	r0, [r7, #12]
 800cf6c:	f7ff fbc9 	bl	800c702 <SDMMC_GetResponse>
 800cf70:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d106      	bne.n	800cf8a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800cf7c:	697b      	ldr	r3, [r7, #20]
 800cf7e:	0c1b      	lsrs	r3, r3, #16
 800cf80:	b29a      	uxth	r2, r3
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800cf86:	2300      	movs	r3, #0
 800cf88:	e011      	b.n	800cfae <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800cf8a:	697b      	ldr	r3, [r7, #20]
 800cf8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d002      	beq.n	800cf9a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cf94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cf98:	e009      	b.n	800cfae <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800cf9a:	697b      	ldr	r3, [r7, #20]
 800cf9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d002      	beq.n	800cfaa <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cfa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cfa8:	e001      	b.n	800cfae <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cfaa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800cfae:	4618      	mov	r0, r3
 800cfb0:	3720      	adds	r7, #32
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd80      	pop	{r7, pc}
 800cfb6:	bf00      	nop
 800cfb8:	20000004 	.word	0x20000004
 800cfbc:	10624dd3 	.word	0x10624dd3

0800cfc0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800cfc0:	b480      	push	{r7}
 800cfc2:	b085      	sub	sp, #20
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cfc8:	4b22      	ldr	r3, [pc, #136]	; (800d054 <SDMMC_GetCmdResp7+0x94>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	4a22      	ldr	r2, [pc, #136]	; (800d058 <SDMMC_GetCmdResp7+0x98>)
 800cfce:	fba2 2303 	umull	r2, r3, r2, r3
 800cfd2:	0a5b      	lsrs	r3, r3, #9
 800cfd4:	f241 3288 	movw	r2, #5000	; 0x1388
 800cfd8:	fb02 f303 	mul.w	r3, r2, r3
 800cfdc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	1e5a      	subs	r2, r3, #1
 800cfe2:	60fa      	str	r2, [r7, #12]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d102      	bne.n	800cfee <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cfe8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cfec:	e02c      	b.n	800d048 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cff2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d0ef      	beq.n	800cfde <SDMMC_GetCmdResp7+0x1e>
 800cffe:	68bb      	ldr	r3, [r7, #8]
 800d000:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d004:	2b00      	cmp	r3, #0
 800d006:	d1ea      	bne.n	800cfde <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d00c:	f003 0304 	and.w	r3, r3, #4
 800d010:	2b00      	cmp	r3, #0
 800d012:	d004      	beq.n	800d01e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2204      	movs	r2, #4
 800d018:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d01a:	2304      	movs	r3, #4
 800d01c:	e014      	b.n	800d048 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d022:	f003 0301 	and.w	r3, r3, #1
 800d026:	2b00      	cmp	r3, #0
 800d028:	d004      	beq.n	800d034 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	2201      	movs	r2, #1
 800d02e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d030:	2301      	movs	r3, #1
 800d032:	e009      	b.n	800d048 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d002      	beq.n	800d046 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2240      	movs	r2, #64	; 0x40
 800d044:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d046:	2300      	movs	r3, #0
  
}
 800d048:	4618      	mov	r0, r3
 800d04a:	3714      	adds	r7, #20
 800d04c:	46bd      	mov	sp, r7
 800d04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d052:	4770      	bx	lr
 800d054:	20000004 	.word	0x20000004
 800d058:	10624dd3 	.word	0x10624dd3

0800d05c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800d05c:	b480      	push	{r7}
 800d05e:	b085      	sub	sp, #20
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d064:	4b11      	ldr	r3, [pc, #68]	; (800d0ac <SDMMC_GetCmdError+0x50>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	4a11      	ldr	r2, [pc, #68]	; (800d0b0 <SDMMC_GetCmdError+0x54>)
 800d06a:	fba2 2303 	umull	r2, r3, r2, r3
 800d06e:	0a5b      	lsrs	r3, r3, #9
 800d070:	f241 3288 	movw	r2, #5000	; 0x1388
 800d074:	fb02 f303 	mul.w	r3, r2, r3
 800d078:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	1e5a      	subs	r2, r3, #1
 800d07e:	60fa      	str	r2, [r7, #12]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d102      	bne.n	800d08a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d084:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d088:	e009      	b.n	800d09e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d08e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d092:	2b00      	cmp	r3, #0
 800d094:	d0f1      	beq.n	800d07a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	22c5      	movs	r2, #197	; 0xc5
 800d09a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800d09c:	2300      	movs	r3, #0
}
 800d09e:	4618      	mov	r0, r3
 800d0a0:	3714      	adds	r7, #20
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a8:	4770      	bx	lr
 800d0aa:	bf00      	nop
 800d0ac:	20000004 	.word	0x20000004
 800d0b0:	10624dd3 	.word	0x10624dd3

0800d0b4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d0b8:	4904      	ldr	r1, [pc, #16]	; (800d0cc <MX_FATFS_Init+0x18>)
 800d0ba:	4805      	ldr	r0, [pc, #20]	; (800d0d0 <MX_FATFS_Init+0x1c>)
 800d0bc:	f002 fd04 	bl	800fac8 <FATFS_LinkDriver>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	461a      	mov	r2, r3
 800d0c4:	4b03      	ldr	r3, [pc, #12]	; (800d0d4 <MX_FATFS_Init+0x20>)
 800d0c6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d0c8:	bf00      	nop
 800d0ca:	bd80      	pop	{r7, pc}
 800d0cc:	20002e0c 	.word	0x20002e0c
 800d0d0:	08014c94 	.word	0x08014c94
 800d0d4:	20002e08 	.word	0x20002e08

0800d0d8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d0d8:	b480      	push	{r7}
 800d0da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d0dc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d0de:	4618      	mov	r0, r3
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e6:	4770      	bx	lr

0800d0e8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b082      	sub	sp, #8
 800d0ec:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d0f2:	f000 f896 	bl	800d222 <BSP_SD_IsDetected>
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	2b01      	cmp	r3, #1
 800d0fa:	d001      	beq.n	800d100 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800d0fc:	2302      	movs	r3, #2
 800d0fe:	e012      	b.n	800d126 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 800d100:	480b      	ldr	r0, [pc, #44]	; (800d130 <BSP_SD_Init+0x48>)
 800d102:	f7fc f84f 	bl	80091a4 <HAL_SD_Init>
 800d106:	4603      	mov	r3, r0
 800d108:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d10a:	79fb      	ldrb	r3, [r7, #7]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d109      	bne.n	800d124 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800d110:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d114:	4806      	ldr	r0, [pc, #24]	; (800d130 <BSP_SD_Init+0x48>)
 800d116:	f7fc fe15 	bl	8009d44 <HAL_SD_ConfigWideBusOperation>
 800d11a:	4603      	mov	r3, r0
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d001      	beq.n	800d124 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d120:	2301      	movs	r3, #1
 800d122:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d124:	79fb      	ldrb	r3, [r7, #7]
}
 800d126:	4618      	mov	r0, r3
 800d128:	3708      	adds	r7, #8
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bd80      	pop	{r7, pc}
 800d12e:	bf00      	nop
 800d130:	200004ac 	.word	0x200004ac

0800d134 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b086      	sub	sp, #24
 800d138:	af00      	add	r7, sp, #0
 800d13a:	60f8      	str	r0, [r7, #12]
 800d13c:	60b9      	str	r1, [r7, #8]
 800d13e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d140:	2300      	movs	r3, #0
 800d142:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	68ba      	ldr	r2, [r7, #8]
 800d148:	68f9      	ldr	r1, [r7, #12]
 800d14a:	4806      	ldr	r0, [pc, #24]	; (800d164 <BSP_SD_ReadBlocks_DMA+0x30>)
 800d14c:	f7fc f8e2 	bl	8009314 <HAL_SD_ReadBlocks_DMA>
 800d150:	4603      	mov	r3, r0
 800d152:	2b00      	cmp	r3, #0
 800d154:	d001      	beq.n	800d15a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d156:	2301      	movs	r3, #1
 800d158:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d15a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d15c:	4618      	mov	r0, r3
 800d15e:	3718      	adds	r7, #24
 800d160:	46bd      	mov	sp, r7
 800d162:	bd80      	pop	{r7, pc}
 800d164:	200004ac 	.word	0x200004ac

0800d168 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b086      	sub	sp, #24
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	60f8      	str	r0, [r7, #12]
 800d170:	60b9      	str	r1, [r7, #8]
 800d172:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d174:	2300      	movs	r3, #0
 800d176:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	68ba      	ldr	r2, [r7, #8]
 800d17c:	68f9      	ldr	r1, [r7, #12]
 800d17e:	4806      	ldr	r0, [pc, #24]	; (800d198 <BSP_SD_WriteBlocks_DMA+0x30>)
 800d180:	f7fc f9aa 	bl	80094d8 <HAL_SD_WriteBlocks_DMA>
 800d184:	4603      	mov	r3, r0
 800d186:	2b00      	cmp	r3, #0
 800d188:	d001      	beq.n	800d18e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d18a:	2301      	movs	r3, #1
 800d18c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d18e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d190:	4618      	mov	r0, r3
 800d192:	3718      	adds	r7, #24
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}
 800d198:	200004ac 	.word	0x200004ac

0800d19c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d1a0:	4805      	ldr	r0, [pc, #20]	; (800d1b8 <BSP_SD_GetCardState+0x1c>)
 800d1a2:	f7fc fe69 	bl	8009e78 <HAL_SD_GetCardState>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	2b04      	cmp	r3, #4
 800d1aa:	bf14      	ite	ne
 800d1ac:	2301      	movne	r3, #1
 800d1ae:	2300      	moveq	r3, #0
 800d1b0:	b2db      	uxtb	r3, r3
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	bd80      	pop	{r7, pc}
 800d1b6:	bf00      	nop
 800d1b8:	200004ac 	.word	0x200004ac

0800d1bc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b082      	sub	sp, #8
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 800d1c4:	6879      	ldr	r1, [r7, #4]
 800d1c6:	4803      	ldr	r0, [pc, #12]	; (800d1d4 <BSP_SD_GetCardInfo+0x18>)
 800d1c8:	f7fc fd90 	bl	8009cec <HAL_SD_GetCardInfo>
}
 800d1cc:	bf00      	nop
 800d1ce:	3708      	adds	r7, #8
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	bd80      	pop	{r7, pc}
 800d1d4:	200004ac 	.word	0x200004ac

0800d1d8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b082      	sub	sp, #8
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800d1e0:	f000 f818 	bl	800d214 <BSP_SD_AbortCallback>
}
 800d1e4:	bf00      	nop
 800d1e6:	3708      	adds	r7, #8
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bd80      	pop	{r7, pc}

0800d1ec <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b082      	sub	sp, #8
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800d1f4:	f000 f98c 	bl	800d510 <BSP_SD_WriteCpltCallback>
}
 800d1f8:	bf00      	nop
 800d1fa:	3708      	adds	r7, #8
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	bd80      	pop	{r7, pc}

0800d200 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b082      	sub	sp, #8
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800d208:	f000 f98e 	bl	800d528 <BSP_SD_ReadCpltCallback>
}
 800d20c:	bf00      	nop
 800d20e:	3708      	adds	r7, #8
 800d210:	46bd      	mov	sp, r7
 800d212:	bd80      	pop	{r7, pc}

0800d214 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800d214:	b480      	push	{r7}
 800d216:	af00      	add	r7, sp, #0

}
 800d218:	bf00      	nop
 800d21a:	46bd      	mov	sp, r7
 800d21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d220:	4770      	bx	lr

0800d222 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d222:	b480      	push	{r7}
 800d224:	b083      	sub	sp, #12
 800d226:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d228:	2301      	movs	r3, #1
 800d22a:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800d22c:	79fb      	ldrb	r3, [r7, #7]
 800d22e:	b2db      	uxtb	r3, r3
}
 800d230:	4618      	mov	r0, r3
 800d232:	370c      	adds	r7, #12
 800d234:	46bd      	mov	sp, r7
 800d236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23a:	4770      	bx	lr

0800d23c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b084      	sub	sp, #16
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800d244:	f7f8 f820 	bl	8005288 <HAL_GetTick>
 800d248:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800d24a:	e006      	b.n	800d25a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d24c:	f7ff ffa6 	bl	800d19c <BSP_SD_GetCardState>
 800d250:	4603      	mov	r3, r0
 800d252:	2b00      	cmp	r3, #0
 800d254:	d101      	bne.n	800d25a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800d256:	2300      	movs	r3, #0
 800d258:	e009      	b.n	800d26e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800d25a:	f7f8 f815 	bl	8005288 <HAL_GetTick>
 800d25e:	4602      	mov	r2, r0
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	1ad3      	subs	r3, r2, r3
 800d264:	687a      	ldr	r2, [r7, #4]
 800d266:	429a      	cmp	r2, r3
 800d268:	d8f0      	bhi.n	800d24c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800d26a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d26e:	4618      	mov	r0, r3
 800d270:	3710      	adds	r7, #16
 800d272:	46bd      	mov	sp, r7
 800d274:	bd80      	pop	{r7, pc}
	...

0800d278 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b082      	sub	sp, #8
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	4603      	mov	r3, r0
 800d280:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d282:	4b0b      	ldr	r3, [pc, #44]	; (800d2b0 <SD_CheckStatus+0x38>)
 800d284:	2201      	movs	r2, #1
 800d286:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d288:	f7ff ff88 	bl	800d19c <BSP_SD_GetCardState>
 800d28c:	4603      	mov	r3, r0
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d107      	bne.n	800d2a2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d292:	4b07      	ldr	r3, [pc, #28]	; (800d2b0 <SD_CheckStatus+0x38>)
 800d294:	781b      	ldrb	r3, [r3, #0]
 800d296:	b2db      	uxtb	r3, r3
 800d298:	f023 0301 	bic.w	r3, r3, #1
 800d29c:	b2da      	uxtb	r2, r3
 800d29e:	4b04      	ldr	r3, [pc, #16]	; (800d2b0 <SD_CheckStatus+0x38>)
 800d2a0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d2a2:	4b03      	ldr	r3, [pc, #12]	; (800d2b0 <SD_CheckStatus+0x38>)
 800d2a4:	781b      	ldrb	r3, [r3, #0]
 800d2a6:	b2db      	uxtb	r3, r3
}
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	3708      	adds	r7, #8
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	bd80      	pop	{r7, pc}
 800d2b0:	2000000d 	.word	0x2000000d

0800d2b4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b082      	sub	sp, #8
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d2be:	f7ff ff13 	bl	800d0e8 <BSP_SD_Init>
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d107      	bne.n	800d2d8 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800d2c8:	79fb      	ldrb	r3, [r7, #7]
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	f7ff ffd4 	bl	800d278 <SD_CheckStatus>
 800d2d0:	4603      	mov	r3, r0
 800d2d2:	461a      	mov	r2, r3
 800d2d4:	4b04      	ldr	r3, [pc, #16]	; (800d2e8 <SD_initialize+0x34>)
 800d2d6:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d2d8:	4b03      	ldr	r3, [pc, #12]	; (800d2e8 <SD_initialize+0x34>)
 800d2da:	781b      	ldrb	r3, [r3, #0]
 800d2dc:	b2db      	uxtb	r3, r3
}
 800d2de:	4618      	mov	r0, r3
 800d2e0:	3708      	adds	r7, #8
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bd80      	pop	{r7, pc}
 800d2e6:	bf00      	nop
 800d2e8:	2000000d 	.word	0x2000000d

0800d2ec <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b082      	sub	sp, #8
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d2f6:	79fb      	ldrb	r3, [r7, #7]
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f7ff ffbd 	bl	800d278 <SD_CheckStatus>
 800d2fe:	4603      	mov	r3, r0
}
 800d300:	4618      	mov	r0, r3
 800d302:	3708      	adds	r7, #8
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}

0800d308 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b086      	sub	sp, #24
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	60b9      	str	r1, [r7, #8]
 800d310:	607a      	str	r2, [r7, #4]
 800d312:	603b      	str	r3, [r7, #0]
 800d314:	4603      	mov	r3, r0
 800d316:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d318:	2301      	movs	r3, #1
 800d31a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d31c:	f247 5030 	movw	r0, #30000	; 0x7530
 800d320:	f7ff ff8c 	bl	800d23c <SD_CheckStatusWithTimeout>
 800d324:	4603      	mov	r3, r0
 800d326:	2b00      	cmp	r3, #0
 800d328:	da01      	bge.n	800d32e <SD_read+0x26>
  {
    return res;
 800d32a:	7dfb      	ldrb	r3, [r7, #23]
 800d32c:	e03b      	b.n	800d3a6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800d32e:	683a      	ldr	r2, [r7, #0]
 800d330:	6879      	ldr	r1, [r7, #4]
 800d332:	68b8      	ldr	r0, [r7, #8]
 800d334:	f7ff fefe 	bl	800d134 <BSP_SD_ReadBlocks_DMA>
 800d338:	4603      	mov	r3, r0
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d132      	bne.n	800d3a4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800d33e:	4b1c      	ldr	r3, [pc, #112]	; (800d3b0 <SD_read+0xa8>)
 800d340:	2200      	movs	r2, #0
 800d342:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800d344:	f7f7 ffa0 	bl	8005288 <HAL_GetTick>
 800d348:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800d34a:	bf00      	nop
 800d34c:	4b18      	ldr	r3, [pc, #96]	; (800d3b0 <SD_read+0xa8>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d108      	bne.n	800d366 <SD_read+0x5e>
 800d354:	f7f7 ff98 	bl	8005288 <HAL_GetTick>
 800d358:	4602      	mov	r2, r0
 800d35a:	693b      	ldr	r3, [r7, #16]
 800d35c:	1ad3      	subs	r3, r2, r3
 800d35e:	f247 522f 	movw	r2, #29999	; 0x752f
 800d362:	4293      	cmp	r3, r2
 800d364:	d9f2      	bls.n	800d34c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800d366:	4b12      	ldr	r3, [pc, #72]	; (800d3b0 <SD_read+0xa8>)
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d102      	bne.n	800d374 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800d36e:	2301      	movs	r3, #1
 800d370:	75fb      	strb	r3, [r7, #23]
 800d372:	e017      	b.n	800d3a4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800d374:	4b0e      	ldr	r3, [pc, #56]	; (800d3b0 <SD_read+0xa8>)
 800d376:	2200      	movs	r2, #0
 800d378:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800d37a:	f7f7 ff85 	bl	8005288 <HAL_GetTick>
 800d37e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d380:	e007      	b.n	800d392 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d382:	f7ff ff0b 	bl	800d19c <BSP_SD_GetCardState>
 800d386:	4603      	mov	r3, r0
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d102      	bne.n	800d392 <SD_read+0x8a>
          {
            res = RES_OK;
 800d38c:	2300      	movs	r3, #0
 800d38e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800d390:	e008      	b.n	800d3a4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d392:	f7f7 ff79 	bl	8005288 <HAL_GetTick>
 800d396:	4602      	mov	r2, r0
 800d398:	693b      	ldr	r3, [r7, #16]
 800d39a:	1ad3      	subs	r3, r2, r3
 800d39c:	f247 522f 	movw	r2, #29999	; 0x752f
 800d3a0:	4293      	cmp	r3, r2
 800d3a2:	d9ee      	bls.n	800d382 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800d3a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	3718      	adds	r7, #24
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	bd80      	pop	{r7, pc}
 800d3ae:	bf00      	nop
 800d3b0:	20002e14 	.word	0x20002e14

0800d3b4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b086      	sub	sp, #24
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	60b9      	str	r1, [r7, #8]
 800d3bc:	607a      	str	r2, [r7, #4]
 800d3be:	603b      	str	r3, [r7, #0]
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d3c4:	2301      	movs	r3, #1
 800d3c6:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800d3c8:	4b24      	ldr	r3, [pc, #144]	; (800d45c <SD_write+0xa8>)
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d3ce:	f247 5030 	movw	r0, #30000	; 0x7530
 800d3d2:	f7ff ff33 	bl	800d23c <SD_CheckStatusWithTimeout>
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	da01      	bge.n	800d3e0 <SD_write+0x2c>
  {
    return res;
 800d3dc:	7dfb      	ldrb	r3, [r7, #23]
 800d3de:	e038      	b.n	800d452 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800d3e0:	683a      	ldr	r2, [r7, #0]
 800d3e2:	6879      	ldr	r1, [r7, #4]
 800d3e4:	68b8      	ldr	r0, [r7, #8]
 800d3e6:	f7ff febf 	bl	800d168 <BSP_SD_WriteBlocks_DMA>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d12f      	bne.n	800d450 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800d3f0:	f7f7 ff4a 	bl	8005288 <HAL_GetTick>
 800d3f4:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800d3f6:	bf00      	nop
 800d3f8:	4b18      	ldr	r3, [pc, #96]	; (800d45c <SD_write+0xa8>)
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d108      	bne.n	800d412 <SD_write+0x5e>
 800d400:	f7f7 ff42 	bl	8005288 <HAL_GetTick>
 800d404:	4602      	mov	r2, r0
 800d406:	693b      	ldr	r3, [r7, #16]
 800d408:	1ad3      	subs	r3, r2, r3
 800d40a:	f247 522f 	movw	r2, #29999	; 0x752f
 800d40e:	4293      	cmp	r3, r2
 800d410:	d9f2      	bls.n	800d3f8 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800d412:	4b12      	ldr	r3, [pc, #72]	; (800d45c <SD_write+0xa8>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d102      	bne.n	800d420 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800d41a:	2301      	movs	r3, #1
 800d41c:	75fb      	strb	r3, [r7, #23]
 800d41e:	e017      	b.n	800d450 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800d420:	4b0e      	ldr	r3, [pc, #56]	; (800d45c <SD_write+0xa8>)
 800d422:	2200      	movs	r2, #0
 800d424:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800d426:	f7f7 ff2f 	bl	8005288 <HAL_GetTick>
 800d42a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d42c:	e007      	b.n	800d43e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d42e:	f7ff feb5 	bl	800d19c <BSP_SD_GetCardState>
 800d432:	4603      	mov	r3, r0
 800d434:	2b00      	cmp	r3, #0
 800d436:	d102      	bne.n	800d43e <SD_write+0x8a>
          {
            res = RES_OK;
 800d438:	2300      	movs	r3, #0
 800d43a:	75fb      	strb	r3, [r7, #23]
            break;
 800d43c:	e008      	b.n	800d450 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d43e:	f7f7 ff23 	bl	8005288 <HAL_GetTick>
 800d442:	4602      	mov	r2, r0
 800d444:	693b      	ldr	r3, [r7, #16]
 800d446:	1ad3      	subs	r3, r2, r3
 800d448:	f247 522f 	movw	r2, #29999	; 0x752f
 800d44c:	4293      	cmp	r3, r2
 800d44e:	d9ee      	bls.n	800d42e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800d450:	7dfb      	ldrb	r3, [r7, #23]
}
 800d452:	4618      	mov	r0, r3
 800d454:	3718      	adds	r7, #24
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}
 800d45a:	bf00      	nop
 800d45c:	20002e10 	.word	0x20002e10

0800d460 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b08c      	sub	sp, #48	; 0x30
 800d464:	af00      	add	r7, sp, #0
 800d466:	4603      	mov	r3, r0
 800d468:	603a      	str	r2, [r7, #0]
 800d46a:	71fb      	strb	r3, [r7, #7]
 800d46c:	460b      	mov	r3, r1
 800d46e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d470:	2301      	movs	r3, #1
 800d472:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d476:	4b25      	ldr	r3, [pc, #148]	; (800d50c <SD_ioctl+0xac>)
 800d478:	781b      	ldrb	r3, [r3, #0]
 800d47a:	b2db      	uxtb	r3, r3
 800d47c:	f003 0301 	and.w	r3, r3, #1
 800d480:	2b00      	cmp	r3, #0
 800d482:	d001      	beq.n	800d488 <SD_ioctl+0x28>
 800d484:	2303      	movs	r3, #3
 800d486:	e03c      	b.n	800d502 <SD_ioctl+0xa2>

  switch (cmd)
 800d488:	79bb      	ldrb	r3, [r7, #6]
 800d48a:	2b03      	cmp	r3, #3
 800d48c:	d834      	bhi.n	800d4f8 <SD_ioctl+0x98>
 800d48e:	a201      	add	r2, pc, #4	; (adr r2, 800d494 <SD_ioctl+0x34>)
 800d490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d494:	0800d4a5 	.word	0x0800d4a5
 800d498:	0800d4ad 	.word	0x0800d4ad
 800d49c:	0800d4c5 	.word	0x0800d4c5
 800d4a0:	0800d4df 	.word	0x0800d4df
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d4aa:	e028      	b.n	800d4fe <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d4ac:	f107 030c 	add.w	r3, r7, #12
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	f7ff fe83 	bl	800d1bc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d4b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d4bc:	2300      	movs	r3, #0
 800d4be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d4c2:	e01c      	b.n	800d4fe <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d4c4:	f107 030c 	add.w	r3, r7, #12
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	f7ff fe77 	bl	800d1bc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4d0:	b29a      	uxth	r2, r3
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d4dc:	e00f      	b.n	800d4fe <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d4de:	f107 030c 	add.w	r3, r7, #12
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	f7ff fe6a 	bl	800d1bc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ea:	0a5a      	lsrs	r2, r3, #9
 800d4ec:	683b      	ldr	r3, [r7, #0]
 800d4ee:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d4f6:	e002      	b.n	800d4fe <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d4f8:	2304      	movs	r3, #4
 800d4fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d4fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d502:	4618      	mov	r0, r3
 800d504:	3730      	adds	r7, #48	; 0x30
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}
 800d50a:	bf00      	nop
 800d50c:	2000000d 	.word	0x2000000d

0800d510 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800d510:	b480      	push	{r7}
 800d512:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800d514:	4b03      	ldr	r3, [pc, #12]	; (800d524 <BSP_SD_WriteCpltCallback+0x14>)
 800d516:	2201      	movs	r2, #1
 800d518:	601a      	str	r2, [r3, #0]
}
 800d51a:	bf00      	nop
 800d51c:	46bd      	mov	sp, r7
 800d51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d522:	4770      	bx	lr
 800d524:	20002e10 	.word	0x20002e10

0800d528 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800d528:	b480      	push	{r7}
 800d52a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800d52c:	4b03      	ldr	r3, [pc, #12]	; (800d53c <BSP_SD_ReadCpltCallback+0x14>)
 800d52e:	2201      	movs	r2, #1
 800d530:	601a      	str	r2, [r3, #0]
}
 800d532:	bf00      	nop
 800d534:	46bd      	mov	sp, r7
 800d536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53a:	4770      	bx	lr
 800d53c:	20002e14 	.word	0x20002e14

0800d540 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b084      	sub	sp, #16
 800d544:	af00      	add	r7, sp, #0
 800d546:	4603      	mov	r3, r0
 800d548:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d54a:	79fb      	ldrb	r3, [r7, #7]
 800d54c:	4a08      	ldr	r2, [pc, #32]	; (800d570 <disk_status+0x30>)
 800d54e:	009b      	lsls	r3, r3, #2
 800d550:	4413      	add	r3, r2
 800d552:	685b      	ldr	r3, [r3, #4]
 800d554:	685b      	ldr	r3, [r3, #4]
 800d556:	79fa      	ldrb	r2, [r7, #7]
 800d558:	4905      	ldr	r1, [pc, #20]	; (800d570 <disk_status+0x30>)
 800d55a:	440a      	add	r2, r1
 800d55c:	7a12      	ldrb	r2, [r2, #8]
 800d55e:	4610      	mov	r0, r2
 800d560:	4798      	blx	r3
 800d562:	4603      	mov	r3, r0
 800d564:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d566:	7bfb      	ldrb	r3, [r7, #15]
}
 800d568:	4618      	mov	r0, r3
 800d56a:	3710      	adds	r7, #16
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}
 800d570:	20002e40 	.word	0x20002e40

0800d574 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b084      	sub	sp, #16
 800d578:	af00      	add	r7, sp, #0
 800d57a:	4603      	mov	r3, r0
 800d57c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d57e:	2300      	movs	r3, #0
 800d580:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d582:	79fb      	ldrb	r3, [r7, #7]
 800d584:	4a0d      	ldr	r2, [pc, #52]	; (800d5bc <disk_initialize+0x48>)
 800d586:	5cd3      	ldrb	r3, [r2, r3]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d111      	bne.n	800d5b0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d58c:	79fb      	ldrb	r3, [r7, #7]
 800d58e:	4a0b      	ldr	r2, [pc, #44]	; (800d5bc <disk_initialize+0x48>)
 800d590:	2101      	movs	r1, #1
 800d592:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d594:	79fb      	ldrb	r3, [r7, #7]
 800d596:	4a09      	ldr	r2, [pc, #36]	; (800d5bc <disk_initialize+0x48>)
 800d598:	009b      	lsls	r3, r3, #2
 800d59a:	4413      	add	r3, r2
 800d59c:	685b      	ldr	r3, [r3, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	79fa      	ldrb	r2, [r7, #7]
 800d5a2:	4906      	ldr	r1, [pc, #24]	; (800d5bc <disk_initialize+0x48>)
 800d5a4:	440a      	add	r2, r1
 800d5a6:	7a12      	ldrb	r2, [r2, #8]
 800d5a8:	4610      	mov	r0, r2
 800d5aa:	4798      	blx	r3
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d5b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	3710      	adds	r7, #16
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd80      	pop	{r7, pc}
 800d5ba:	bf00      	nop
 800d5bc:	20002e40 	.word	0x20002e40

0800d5c0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d5c0:	b590      	push	{r4, r7, lr}
 800d5c2:	b087      	sub	sp, #28
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	60b9      	str	r1, [r7, #8]
 800d5c8:	607a      	str	r2, [r7, #4]
 800d5ca:	603b      	str	r3, [r7, #0]
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d5d0:	7bfb      	ldrb	r3, [r7, #15]
 800d5d2:	4a0a      	ldr	r2, [pc, #40]	; (800d5fc <disk_read+0x3c>)
 800d5d4:	009b      	lsls	r3, r3, #2
 800d5d6:	4413      	add	r3, r2
 800d5d8:	685b      	ldr	r3, [r3, #4]
 800d5da:	689c      	ldr	r4, [r3, #8]
 800d5dc:	7bfb      	ldrb	r3, [r7, #15]
 800d5de:	4a07      	ldr	r2, [pc, #28]	; (800d5fc <disk_read+0x3c>)
 800d5e0:	4413      	add	r3, r2
 800d5e2:	7a18      	ldrb	r0, [r3, #8]
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	687a      	ldr	r2, [r7, #4]
 800d5e8:	68b9      	ldr	r1, [r7, #8]
 800d5ea:	47a0      	blx	r4
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	75fb      	strb	r3, [r7, #23]
  return res;
 800d5f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	371c      	adds	r7, #28
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	bd90      	pop	{r4, r7, pc}
 800d5fa:	bf00      	nop
 800d5fc:	20002e40 	.word	0x20002e40

0800d600 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d600:	b590      	push	{r4, r7, lr}
 800d602:	b087      	sub	sp, #28
 800d604:	af00      	add	r7, sp, #0
 800d606:	60b9      	str	r1, [r7, #8]
 800d608:	607a      	str	r2, [r7, #4]
 800d60a:	603b      	str	r3, [r7, #0]
 800d60c:	4603      	mov	r3, r0
 800d60e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d610:	7bfb      	ldrb	r3, [r7, #15]
 800d612:	4a0a      	ldr	r2, [pc, #40]	; (800d63c <disk_write+0x3c>)
 800d614:	009b      	lsls	r3, r3, #2
 800d616:	4413      	add	r3, r2
 800d618:	685b      	ldr	r3, [r3, #4]
 800d61a:	68dc      	ldr	r4, [r3, #12]
 800d61c:	7bfb      	ldrb	r3, [r7, #15]
 800d61e:	4a07      	ldr	r2, [pc, #28]	; (800d63c <disk_write+0x3c>)
 800d620:	4413      	add	r3, r2
 800d622:	7a18      	ldrb	r0, [r3, #8]
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	687a      	ldr	r2, [r7, #4]
 800d628:	68b9      	ldr	r1, [r7, #8]
 800d62a:	47a0      	blx	r4
 800d62c:	4603      	mov	r3, r0
 800d62e:	75fb      	strb	r3, [r7, #23]
  return res;
 800d630:	7dfb      	ldrb	r3, [r7, #23]
}
 800d632:	4618      	mov	r0, r3
 800d634:	371c      	adds	r7, #28
 800d636:	46bd      	mov	sp, r7
 800d638:	bd90      	pop	{r4, r7, pc}
 800d63a:	bf00      	nop
 800d63c:	20002e40 	.word	0x20002e40

0800d640 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b084      	sub	sp, #16
 800d644:	af00      	add	r7, sp, #0
 800d646:	4603      	mov	r3, r0
 800d648:	603a      	str	r2, [r7, #0]
 800d64a:	71fb      	strb	r3, [r7, #7]
 800d64c:	460b      	mov	r3, r1
 800d64e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d650:	79fb      	ldrb	r3, [r7, #7]
 800d652:	4a09      	ldr	r2, [pc, #36]	; (800d678 <disk_ioctl+0x38>)
 800d654:	009b      	lsls	r3, r3, #2
 800d656:	4413      	add	r3, r2
 800d658:	685b      	ldr	r3, [r3, #4]
 800d65a:	691b      	ldr	r3, [r3, #16]
 800d65c:	79fa      	ldrb	r2, [r7, #7]
 800d65e:	4906      	ldr	r1, [pc, #24]	; (800d678 <disk_ioctl+0x38>)
 800d660:	440a      	add	r2, r1
 800d662:	7a10      	ldrb	r0, [r2, #8]
 800d664:	79b9      	ldrb	r1, [r7, #6]
 800d666:	683a      	ldr	r2, [r7, #0]
 800d668:	4798      	blx	r3
 800d66a:	4603      	mov	r3, r0
 800d66c:	73fb      	strb	r3, [r7, #15]
  return res;
 800d66e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d670:	4618      	mov	r0, r3
 800d672:	3710      	adds	r7, #16
 800d674:	46bd      	mov	sp, r7
 800d676:	bd80      	pop	{r7, pc}
 800d678:	20002e40 	.word	0x20002e40

0800d67c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d67c:	b480      	push	{r7}
 800d67e:	b085      	sub	sp, #20
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	3301      	adds	r3, #1
 800d688:	781b      	ldrb	r3, [r3, #0]
 800d68a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d68c:	89fb      	ldrh	r3, [r7, #14]
 800d68e:	021b      	lsls	r3, r3, #8
 800d690:	b21a      	sxth	r2, r3
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	781b      	ldrb	r3, [r3, #0]
 800d696:	b21b      	sxth	r3, r3
 800d698:	4313      	orrs	r3, r2
 800d69a:	b21b      	sxth	r3, r3
 800d69c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d69e:	89fb      	ldrh	r3, [r7, #14]
}
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	3714      	adds	r7, #20
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6aa:	4770      	bx	lr

0800d6ac <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	b085      	sub	sp, #20
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	3303      	adds	r3, #3
 800d6b8:	781b      	ldrb	r3, [r3, #0]
 800d6ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	021b      	lsls	r3, r3, #8
 800d6c0:	687a      	ldr	r2, [r7, #4]
 800d6c2:	3202      	adds	r2, #2
 800d6c4:	7812      	ldrb	r2, [r2, #0]
 800d6c6:	4313      	orrs	r3, r2
 800d6c8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	021b      	lsls	r3, r3, #8
 800d6ce:	687a      	ldr	r2, [r7, #4]
 800d6d0:	3201      	adds	r2, #1
 800d6d2:	7812      	ldrb	r2, [r2, #0]
 800d6d4:	4313      	orrs	r3, r2
 800d6d6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	021b      	lsls	r3, r3, #8
 800d6dc:	687a      	ldr	r2, [r7, #4]
 800d6de:	7812      	ldrb	r2, [r2, #0]
 800d6e0:	4313      	orrs	r3, r2
 800d6e2:	60fb      	str	r3, [r7, #12]
	return rv;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
}
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	3714      	adds	r7, #20
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f0:	4770      	bx	lr

0800d6f2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d6f2:	b480      	push	{r7}
 800d6f4:	b083      	sub	sp, #12
 800d6f6:	af00      	add	r7, sp, #0
 800d6f8:	6078      	str	r0, [r7, #4]
 800d6fa:	460b      	mov	r3, r1
 800d6fc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	1c5a      	adds	r2, r3, #1
 800d702:	607a      	str	r2, [r7, #4]
 800d704:	887a      	ldrh	r2, [r7, #2]
 800d706:	b2d2      	uxtb	r2, r2
 800d708:	701a      	strb	r2, [r3, #0]
 800d70a:	887b      	ldrh	r3, [r7, #2]
 800d70c:	0a1b      	lsrs	r3, r3, #8
 800d70e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	1c5a      	adds	r2, r3, #1
 800d714:	607a      	str	r2, [r7, #4]
 800d716:	887a      	ldrh	r2, [r7, #2]
 800d718:	b2d2      	uxtb	r2, r2
 800d71a:	701a      	strb	r2, [r3, #0]
}
 800d71c:	bf00      	nop
 800d71e:	370c      	adds	r7, #12
 800d720:	46bd      	mov	sp, r7
 800d722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d726:	4770      	bx	lr

0800d728 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d728:	b480      	push	{r7}
 800d72a:	b083      	sub	sp, #12
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
 800d730:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	1c5a      	adds	r2, r3, #1
 800d736:	607a      	str	r2, [r7, #4]
 800d738:	683a      	ldr	r2, [r7, #0]
 800d73a:	b2d2      	uxtb	r2, r2
 800d73c:	701a      	strb	r2, [r3, #0]
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	0a1b      	lsrs	r3, r3, #8
 800d742:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	1c5a      	adds	r2, r3, #1
 800d748:	607a      	str	r2, [r7, #4]
 800d74a:	683a      	ldr	r2, [r7, #0]
 800d74c:	b2d2      	uxtb	r2, r2
 800d74e:	701a      	strb	r2, [r3, #0]
 800d750:	683b      	ldr	r3, [r7, #0]
 800d752:	0a1b      	lsrs	r3, r3, #8
 800d754:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	1c5a      	adds	r2, r3, #1
 800d75a:	607a      	str	r2, [r7, #4]
 800d75c:	683a      	ldr	r2, [r7, #0]
 800d75e:	b2d2      	uxtb	r2, r2
 800d760:	701a      	strb	r2, [r3, #0]
 800d762:	683b      	ldr	r3, [r7, #0]
 800d764:	0a1b      	lsrs	r3, r3, #8
 800d766:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	1c5a      	adds	r2, r3, #1
 800d76c:	607a      	str	r2, [r7, #4]
 800d76e:	683a      	ldr	r2, [r7, #0]
 800d770:	b2d2      	uxtb	r2, r2
 800d772:	701a      	strb	r2, [r3, #0]
}
 800d774:	bf00      	nop
 800d776:	370c      	adds	r7, #12
 800d778:	46bd      	mov	sp, r7
 800d77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77e:	4770      	bx	lr

0800d780 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d780:	b480      	push	{r7}
 800d782:	b087      	sub	sp, #28
 800d784:	af00      	add	r7, sp, #0
 800d786:	60f8      	str	r0, [r7, #12]
 800d788:	60b9      	str	r1, [r7, #8]
 800d78a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d790:	68bb      	ldr	r3, [r7, #8]
 800d792:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d00d      	beq.n	800d7b6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d79a:	693a      	ldr	r2, [r7, #16]
 800d79c:	1c53      	adds	r3, r2, #1
 800d79e:	613b      	str	r3, [r7, #16]
 800d7a0:	697b      	ldr	r3, [r7, #20]
 800d7a2:	1c59      	adds	r1, r3, #1
 800d7a4:	6179      	str	r1, [r7, #20]
 800d7a6:	7812      	ldrb	r2, [r2, #0]
 800d7a8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	3b01      	subs	r3, #1
 800d7ae:	607b      	str	r3, [r7, #4]
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d1f1      	bne.n	800d79a <mem_cpy+0x1a>
	}
}
 800d7b6:	bf00      	nop
 800d7b8:	371c      	adds	r7, #28
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c0:	4770      	bx	lr

0800d7c2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d7c2:	b480      	push	{r7}
 800d7c4:	b087      	sub	sp, #28
 800d7c6:	af00      	add	r7, sp, #0
 800d7c8:	60f8      	str	r0, [r7, #12]
 800d7ca:	60b9      	str	r1, [r7, #8]
 800d7cc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d7d2:	697b      	ldr	r3, [r7, #20]
 800d7d4:	1c5a      	adds	r2, r3, #1
 800d7d6:	617a      	str	r2, [r7, #20]
 800d7d8:	68ba      	ldr	r2, [r7, #8]
 800d7da:	b2d2      	uxtb	r2, r2
 800d7dc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	3b01      	subs	r3, #1
 800d7e2:	607b      	str	r3, [r7, #4]
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d1f3      	bne.n	800d7d2 <mem_set+0x10>
}
 800d7ea:	bf00      	nop
 800d7ec:	bf00      	nop
 800d7ee:	371c      	adds	r7, #28
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f6:	4770      	bx	lr

0800d7f8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d7f8:	b480      	push	{r7}
 800d7fa:	b089      	sub	sp, #36	; 0x24
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	60f8      	str	r0, [r7, #12]
 800d800:	60b9      	str	r1, [r7, #8]
 800d802:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	61fb      	str	r3, [r7, #28]
 800d808:	68bb      	ldr	r3, [r7, #8]
 800d80a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d80c:	2300      	movs	r3, #0
 800d80e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d810:	69fb      	ldr	r3, [r7, #28]
 800d812:	1c5a      	adds	r2, r3, #1
 800d814:	61fa      	str	r2, [r7, #28]
 800d816:	781b      	ldrb	r3, [r3, #0]
 800d818:	4619      	mov	r1, r3
 800d81a:	69bb      	ldr	r3, [r7, #24]
 800d81c:	1c5a      	adds	r2, r3, #1
 800d81e:	61ba      	str	r2, [r7, #24]
 800d820:	781b      	ldrb	r3, [r3, #0]
 800d822:	1acb      	subs	r3, r1, r3
 800d824:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	3b01      	subs	r3, #1
 800d82a:	607b      	str	r3, [r7, #4]
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d002      	beq.n	800d838 <mem_cmp+0x40>
 800d832:	697b      	ldr	r3, [r7, #20]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d0eb      	beq.n	800d810 <mem_cmp+0x18>

	return r;
 800d838:	697b      	ldr	r3, [r7, #20]
}
 800d83a:	4618      	mov	r0, r3
 800d83c:	3724      	adds	r7, #36	; 0x24
 800d83e:	46bd      	mov	sp, r7
 800d840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d844:	4770      	bx	lr

0800d846 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d846:	b480      	push	{r7}
 800d848:	b083      	sub	sp, #12
 800d84a:	af00      	add	r7, sp, #0
 800d84c:	6078      	str	r0, [r7, #4]
 800d84e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d850:	e002      	b.n	800d858 <chk_chr+0x12>
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	3301      	adds	r3, #1
 800d856:	607b      	str	r3, [r7, #4]
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	781b      	ldrb	r3, [r3, #0]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d005      	beq.n	800d86c <chk_chr+0x26>
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	781b      	ldrb	r3, [r3, #0]
 800d864:	461a      	mov	r2, r3
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	4293      	cmp	r3, r2
 800d86a:	d1f2      	bne.n	800d852 <chk_chr+0xc>
	return *str;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	781b      	ldrb	r3, [r3, #0]
}
 800d870:	4618      	mov	r0, r3
 800d872:	370c      	adds	r7, #12
 800d874:	46bd      	mov	sp, r7
 800d876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87a:	4770      	bx	lr

0800d87c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d87c:	b480      	push	{r7}
 800d87e:	b085      	sub	sp, #20
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
 800d884:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d886:	2300      	movs	r3, #0
 800d888:	60bb      	str	r3, [r7, #8]
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	60fb      	str	r3, [r7, #12]
 800d88e:	e029      	b.n	800d8e4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d890:	4a27      	ldr	r2, [pc, #156]	; (800d930 <chk_lock+0xb4>)
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	011b      	lsls	r3, r3, #4
 800d896:	4413      	add	r3, r2
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d01d      	beq.n	800d8da <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d89e:	4a24      	ldr	r2, [pc, #144]	; (800d930 <chk_lock+0xb4>)
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	011b      	lsls	r3, r3, #4
 800d8a4:	4413      	add	r3, r2
 800d8a6:	681a      	ldr	r2, [r3, #0]
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	429a      	cmp	r2, r3
 800d8ae:	d116      	bne.n	800d8de <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d8b0:	4a1f      	ldr	r2, [pc, #124]	; (800d930 <chk_lock+0xb4>)
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	011b      	lsls	r3, r3, #4
 800d8b6:	4413      	add	r3, r2
 800d8b8:	3304      	adds	r3, #4
 800d8ba:	681a      	ldr	r2, [r3, #0]
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d8c0:	429a      	cmp	r2, r3
 800d8c2:	d10c      	bne.n	800d8de <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d8c4:	4a1a      	ldr	r2, [pc, #104]	; (800d930 <chk_lock+0xb4>)
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	011b      	lsls	r3, r3, #4
 800d8ca:	4413      	add	r3, r2
 800d8cc:	3308      	adds	r3, #8
 800d8ce:	681a      	ldr	r2, [r3, #0]
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d8d4:	429a      	cmp	r2, r3
 800d8d6:	d102      	bne.n	800d8de <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d8d8:	e007      	b.n	800d8ea <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d8da:	2301      	movs	r3, #1
 800d8dc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	3301      	adds	r3, #1
 800d8e2:	60fb      	str	r3, [r7, #12]
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	2b01      	cmp	r3, #1
 800d8e8:	d9d2      	bls.n	800d890 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	2b02      	cmp	r3, #2
 800d8ee:	d109      	bne.n	800d904 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d102      	bne.n	800d8fc <chk_lock+0x80>
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	2b02      	cmp	r3, #2
 800d8fa:	d101      	bne.n	800d900 <chk_lock+0x84>
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	e010      	b.n	800d922 <chk_lock+0xa6>
 800d900:	2312      	movs	r3, #18
 800d902:	e00e      	b.n	800d922 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d108      	bne.n	800d91c <chk_lock+0xa0>
 800d90a:	4a09      	ldr	r2, [pc, #36]	; (800d930 <chk_lock+0xb4>)
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	011b      	lsls	r3, r3, #4
 800d910:	4413      	add	r3, r2
 800d912:	330c      	adds	r3, #12
 800d914:	881b      	ldrh	r3, [r3, #0]
 800d916:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d91a:	d101      	bne.n	800d920 <chk_lock+0xa4>
 800d91c:	2310      	movs	r3, #16
 800d91e:	e000      	b.n	800d922 <chk_lock+0xa6>
 800d920:	2300      	movs	r3, #0
}
 800d922:	4618      	mov	r0, r3
 800d924:	3714      	adds	r7, #20
 800d926:	46bd      	mov	sp, r7
 800d928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92c:	4770      	bx	lr
 800d92e:	bf00      	nop
 800d930:	20002e20 	.word	0x20002e20

0800d934 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d934:	b480      	push	{r7}
 800d936:	b083      	sub	sp, #12
 800d938:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d93a:	2300      	movs	r3, #0
 800d93c:	607b      	str	r3, [r7, #4]
 800d93e:	e002      	b.n	800d946 <enq_lock+0x12>
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	3301      	adds	r3, #1
 800d944:	607b      	str	r3, [r7, #4]
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	2b01      	cmp	r3, #1
 800d94a:	d806      	bhi.n	800d95a <enq_lock+0x26>
 800d94c:	4a09      	ldr	r2, [pc, #36]	; (800d974 <enq_lock+0x40>)
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	011b      	lsls	r3, r3, #4
 800d952:	4413      	add	r3, r2
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d1f2      	bne.n	800d940 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	2b02      	cmp	r3, #2
 800d95e:	bf14      	ite	ne
 800d960:	2301      	movne	r3, #1
 800d962:	2300      	moveq	r3, #0
 800d964:	b2db      	uxtb	r3, r3
}
 800d966:	4618      	mov	r0, r3
 800d968:	370c      	adds	r7, #12
 800d96a:	46bd      	mov	sp, r7
 800d96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d970:	4770      	bx	lr
 800d972:	bf00      	nop
 800d974:	20002e20 	.word	0x20002e20

0800d978 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d978:	b480      	push	{r7}
 800d97a:	b085      	sub	sp, #20
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
 800d980:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d982:	2300      	movs	r3, #0
 800d984:	60fb      	str	r3, [r7, #12]
 800d986:	e01f      	b.n	800d9c8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d988:	4a41      	ldr	r2, [pc, #260]	; (800da90 <inc_lock+0x118>)
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	011b      	lsls	r3, r3, #4
 800d98e:	4413      	add	r3, r2
 800d990:	681a      	ldr	r2, [r3, #0]
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	429a      	cmp	r2, r3
 800d998:	d113      	bne.n	800d9c2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d99a:	4a3d      	ldr	r2, [pc, #244]	; (800da90 <inc_lock+0x118>)
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	011b      	lsls	r3, r3, #4
 800d9a0:	4413      	add	r3, r2
 800d9a2:	3304      	adds	r3, #4
 800d9a4:	681a      	ldr	r2, [r3, #0]
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d9aa:	429a      	cmp	r2, r3
 800d9ac:	d109      	bne.n	800d9c2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d9ae:	4a38      	ldr	r2, [pc, #224]	; (800da90 <inc_lock+0x118>)
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	011b      	lsls	r3, r3, #4
 800d9b4:	4413      	add	r3, r2
 800d9b6:	3308      	adds	r3, #8
 800d9b8:	681a      	ldr	r2, [r3, #0]
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d9be:	429a      	cmp	r2, r3
 800d9c0:	d006      	beq.n	800d9d0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	3301      	adds	r3, #1
 800d9c6:	60fb      	str	r3, [r7, #12]
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	2b01      	cmp	r3, #1
 800d9cc:	d9dc      	bls.n	800d988 <inc_lock+0x10>
 800d9ce:	e000      	b.n	800d9d2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d9d0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	2b02      	cmp	r3, #2
 800d9d6:	d132      	bne.n	800da3e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d9d8:	2300      	movs	r3, #0
 800d9da:	60fb      	str	r3, [r7, #12]
 800d9dc:	e002      	b.n	800d9e4 <inc_lock+0x6c>
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	3301      	adds	r3, #1
 800d9e2:	60fb      	str	r3, [r7, #12]
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	2b01      	cmp	r3, #1
 800d9e8:	d806      	bhi.n	800d9f8 <inc_lock+0x80>
 800d9ea:	4a29      	ldr	r2, [pc, #164]	; (800da90 <inc_lock+0x118>)
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	011b      	lsls	r3, r3, #4
 800d9f0:	4413      	add	r3, r2
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d1f2      	bne.n	800d9de <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	2b02      	cmp	r3, #2
 800d9fc:	d101      	bne.n	800da02 <inc_lock+0x8a>
 800d9fe:	2300      	movs	r3, #0
 800da00:	e040      	b.n	800da84 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681a      	ldr	r2, [r3, #0]
 800da06:	4922      	ldr	r1, [pc, #136]	; (800da90 <inc_lock+0x118>)
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	011b      	lsls	r3, r3, #4
 800da0c:	440b      	add	r3, r1
 800da0e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	689a      	ldr	r2, [r3, #8]
 800da14:	491e      	ldr	r1, [pc, #120]	; (800da90 <inc_lock+0x118>)
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	011b      	lsls	r3, r3, #4
 800da1a:	440b      	add	r3, r1
 800da1c:	3304      	adds	r3, #4
 800da1e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	695a      	ldr	r2, [r3, #20]
 800da24:	491a      	ldr	r1, [pc, #104]	; (800da90 <inc_lock+0x118>)
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	011b      	lsls	r3, r3, #4
 800da2a:	440b      	add	r3, r1
 800da2c:	3308      	adds	r3, #8
 800da2e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800da30:	4a17      	ldr	r2, [pc, #92]	; (800da90 <inc_lock+0x118>)
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	011b      	lsls	r3, r3, #4
 800da36:	4413      	add	r3, r2
 800da38:	330c      	adds	r3, #12
 800da3a:	2200      	movs	r2, #0
 800da3c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800da3e:	683b      	ldr	r3, [r7, #0]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d009      	beq.n	800da58 <inc_lock+0xe0>
 800da44:	4a12      	ldr	r2, [pc, #72]	; (800da90 <inc_lock+0x118>)
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	011b      	lsls	r3, r3, #4
 800da4a:	4413      	add	r3, r2
 800da4c:	330c      	adds	r3, #12
 800da4e:	881b      	ldrh	r3, [r3, #0]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d001      	beq.n	800da58 <inc_lock+0xe0>
 800da54:	2300      	movs	r3, #0
 800da56:	e015      	b.n	800da84 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d108      	bne.n	800da70 <inc_lock+0xf8>
 800da5e:	4a0c      	ldr	r2, [pc, #48]	; (800da90 <inc_lock+0x118>)
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	011b      	lsls	r3, r3, #4
 800da64:	4413      	add	r3, r2
 800da66:	330c      	adds	r3, #12
 800da68:	881b      	ldrh	r3, [r3, #0]
 800da6a:	3301      	adds	r3, #1
 800da6c:	b29a      	uxth	r2, r3
 800da6e:	e001      	b.n	800da74 <inc_lock+0xfc>
 800da70:	f44f 7280 	mov.w	r2, #256	; 0x100
 800da74:	4906      	ldr	r1, [pc, #24]	; (800da90 <inc_lock+0x118>)
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	011b      	lsls	r3, r3, #4
 800da7a:	440b      	add	r3, r1
 800da7c:	330c      	adds	r3, #12
 800da7e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	3301      	adds	r3, #1
}
 800da84:	4618      	mov	r0, r3
 800da86:	3714      	adds	r7, #20
 800da88:	46bd      	mov	sp, r7
 800da8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8e:	4770      	bx	lr
 800da90:	20002e20 	.word	0x20002e20

0800da94 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800da94:	b480      	push	{r7}
 800da96:	b085      	sub	sp, #20
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800da9c:	2300      	movs	r3, #0
 800da9e:	60fb      	str	r3, [r7, #12]
 800daa0:	e010      	b.n	800dac4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800daa2:	4a0d      	ldr	r2, [pc, #52]	; (800dad8 <clear_lock+0x44>)
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	011b      	lsls	r3, r3, #4
 800daa8:	4413      	add	r3, r2
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	687a      	ldr	r2, [r7, #4]
 800daae:	429a      	cmp	r2, r3
 800dab0:	d105      	bne.n	800dabe <clear_lock+0x2a>
 800dab2:	4a09      	ldr	r2, [pc, #36]	; (800dad8 <clear_lock+0x44>)
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	011b      	lsls	r3, r3, #4
 800dab8:	4413      	add	r3, r2
 800daba:	2200      	movs	r2, #0
 800dabc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	3301      	adds	r3, #1
 800dac2:	60fb      	str	r3, [r7, #12]
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	2b01      	cmp	r3, #1
 800dac8:	d9eb      	bls.n	800daa2 <clear_lock+0xe>
	}
}
 800daca:	bf00      	nop
 800dacc:	bf00      	nop
 800dace:	3714      	adds	r7, #20
 800dad0:	46bd      	mov	sp, r7
 800dad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad6:	4770      	bx	lr
 800dad8:	20002e20 	.word	0x20002e20

0800dadc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b086      	sub	sp, #24
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800dae4:	2300      	movs	r3, #0
 800dae6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	78db      	ldrb	r3, [r3, #3]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d034      	beq.n	800db5a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800daf4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	7858      	ldrb	r0, [r3, #1]
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800db00:	2301      	movs	r3, #1
 800db02:	697a      	ldr	r2, [r7, #20]
 800db04:	f7ff fd7c 	bl	800d600 <disk_write>
 800db08:	4603      	mov	r3, r0
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d002      	beq.n	800db14 <sync_window+0x38>
			res = FR_DISK_ERR;
 800db0e:	2301      	movs	r3, #1
 800db10:	73fb      	strb	r3, [r7, #15]
 800db12:	e022      	b.n	800db5a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	2200      	movs	r2, #0
 800db18:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db1e:	697a      	ldr	r2, [r7, #20]
 800db20:	1ad2      	subs	r2, r2, r3
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	69db      	ldr	r3, [r3, #28]
 800db26:	429a      	cmp	r2, r3
 800db28:	d217      	bcs.n	800db5a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	789b      	ldrb	r3, [r3, #2]
 800db2e:	613b      	str	r3, [r7, #16]
 800db30:	e010      	b.n	800db54 <sync_window+0x78>
					wsect += fs->fsize;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	69db      	ldr	r3, [r3, #28]
 800db36:	697a      	ldr	r2, [r7, #20]
 800db38:	4413      	add	r3, r2
 800db3a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	7858      	ldrb	r0, [r3, #1]
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800db46:	2301      	movs	r3, #1
 800db48:	697a      	ldr	r2, [r7, #20]
 800db4a:	f7ff fd59 	bl	800d600 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800db4e:	693b      	ldr	r3, [r7, #16]
 800db50:	3b01      	subs	r3, #1
 800db52:	613b      	str	r3, [r7, #16]
 800db54:	693b      	ldr	r3, [r7, #16]
 800db56:	2b01      	cmp	r3, #1
 800db58:	d8eb      	bhi.n	800db32 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800db5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800db5c:	4618      	mov	r0, r3
 800db5e:	3718      	adds	r7, #24
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}

0800db64 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b084      	sub	sp, #16
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
 800db6c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800db6e:	2300      	movs	r3, #0
 800db70:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db76:	683a      	ldr	r2, [r7, #0]
 800db78:	429a      	cmp	r2, r3
 800db7a:	d01b      	beq.n	800dbb4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800db7c:	6878      	ldr	r0, [r7, #4]
 800db7e:	f7ff ffad 	bl	800dadc <sync_window>
 800db82:	4603      	mov	r3, r0
 800db84:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800db86:	7bfb      	ldrb	r3, [r7, #15]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d113      	bne.n	800dbb4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	7858      	ldrb	r0, [r3, #1]
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800db96:	2301      	movs	r3, #1
 800db98:	683a      	ldr	r2, [r7, #0]
 800db9a:	f7ff fd11 	bl	800d5c0 <disk_read>
 800db9e:	4603      	mov	r3, r0
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d004      	beq.n	800dbae <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800dba4:	f04f 33ff 	mov.w	r3, #4294967295
 800dba8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800dbaa:	2301      	movs	r3, #1
 800dbac:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	683a      	ldr	r2, [r7, #0]
 800dbb2:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800dbb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	3710      	adds	r7, #16
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	bd80      	pop	{r7, pc}
	...

0800dbc0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b084      	sub	sp, #16
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800dbc8:	6878      	ldr	r0, [r7, #4]
 800dbca:	f7ff ff87 	bl	800dadc <sync_window>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800dbd2:	7bfb      	ldrb	r3, [r7, #15]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d159      	bne.n	800dc8c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	781b      	ldrb	r3, [r3, #0]
 800dbdc:	2b03      	cmp	r3, #3
 800dbde:	d149      	bne.n	800dc74 <sync_fs+0xb4>
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	791b      	ldrb	r3, [r3, #4]
 800dbe4:	2b01      	cmp	r3, #1
 800dbe6:	d145      	bne.n	800dc74 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	899b      	ldrh	r3, [r3, #12]
 800dbf2:	461a      	mov	r2, r3
 800dbf4:	2100      	movs	r1, #0
 800dbf6:	f7ff fde4 	bl	800d7c2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	3334      	adds	r3, #52	; 0x34
 800dbfe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dc02:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800dc06:	4618      	mov	r0, r3
 800dc08:	f7ff fd73 	bl	800d6f2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	3334      	adds	r3, #52	; 0x34
 800dc10:	4921      	ldr	r1, [pc, #132]	; (800dc98 <sync_fs+0xd8>)
 800dc12:	4618      	mov	r0, r3
 800dc14:	f7ff fd88 	bl	800d728 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	3334      	adds	r3, #52	; 0x34
 800dc1c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800dc20:	491e      	ldr	r1, [pc, #120]	; (800dc9c <sync_fs+0xdc>)
 800dc22:	4618      	mov	r0, r3
 800dc24:	f7ff fd80 	bl	800d728 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	3334      	adds	r3, #52	; 0x34
 800dc2c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	695b      	ldr	r3, [r3, #20]
 800dc34:	4619      	mov	r1, r3
 800dc36:	4610      	mov	r0, r2
 800dc38:	f7ff fd76 	bl	800d728 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	3334      	adds	r3, #52	; 0x34
 800dc40:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	691b      	ldr	r3, [r3, #16]
 800dc48:	4619      	mov	r1, r3
 800dc4a:	4610      	mov	r0, r2
 800dc4c:	f7ff fd6c 	bl	800d728 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	6a1b      	ldr	r3, [r3, #32]
 800dc54:	1c5a      	adds	r2, r3, #1
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	7858      	ldrb	r0, [r3, #1]
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dc68:	2301      	movs	r3, #1
 800dc6a:	f7ff fcc9 	bl	800d600 <disk_write>
			fs->fsi_flag = 0;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	2200      	movs	r2, #0
 800dc72:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	785b      	ldrb	r3, [r3, #1]
 800dc78:	2200      	movs	r2, #0
 800dc7a:	2100      	movs	r1, #0
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	f7ff fcdf 	bl	800d640 <disk_ioctl>
 800dc82:	4603      	mov	r3, r0
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d001      	beq.n	800dc8c <sync_fs+0xcc>
 800dc88:	2301      	movs	r3, #1
 800dc8a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800dc8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc8e:	4618      	mov	r0, r3
 800dc90:	3710      	adds	r7, #16
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bd80      	pop	{r7, pc}
 800dc96:	bf00      	nop
 800dc98:	41615252 	.word	0x41615252
 800dc9c:	61417272 	.word	0x61417272

0800dca0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800dca0:	b480      	push	{r7}
 800dca2:	b083      	sub	sp, #12
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
 800dca8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800dcaa:	683b      	ldr	r3, [r7, #0]
 800dcac:	3b02      	subs	r3, #2
 800dcae:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	699b      	ldr	r3, [r3, #24]
 800dcb4:	3b02      	subs	r3, #2
 800dcb6:	683a      	ldr	r2, [r7, #0]
 800dcb8:	429a      	cmp	r2, r3
 800dcba:	d301      	bcc.n	800dcc0 <clust2sect+0x20>
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	e008      	b.n	800dcd2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	895b      	ldrh	r3, [r3, #10]
 800dcc4:	461a      	mov	r2, r3
 800dcc6:	683b      	ldr	r3, [r7, #0]
 800dcc8:	fb03 f202 	mul.w	r2, r3, r2
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcd0:	4413      	add	r3, r2
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	370c      	adds	r7, #12
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcdc:	4770      	bx	lr

0800dcde <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800dcde:	b580      	push	{r7, lr}
 800dce0:	b086      	sub	sp, #24
 800dce2:	af00      	add	r7, sp, #0
 800dce4:	6078      	str	r0, [r7, #4]
 800dce6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	2b01      	cmp	r3, #1
 800dcf2:	d904      	bls.n	800dcfe <get_fat+0x20>
 800dcf4:	693b      	ldr	r3, [r7, #16]
 800dcf6:	699b      	ldr	r3, [r3, #24]
 800dcf8:	683a      	ldr	r2, [r7, #0]
 800dcfa:	429a      	cmp	r2, r3
 800dcfc:	d302      	bcc.n	800dd04 <get_fat+0x26>
		val = 1;	/* Internal error */
 800dcfe:	2301      	movs	r3, #1
 800dd00:	617b      	str	r3, [r7, #20]
 800dd02:	e0bb      	b.n	800de7c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800dd04:	f04f 33ff 	mov.w	r3, #4294967295
 800dd08:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800dd0a:	693b      	ldr	r3, [r7, #16]
 800dd0c:	781b      	ldrb	r3, [r3, #0]
 800dd0e:	2b03      	cmp	r3, #3
 800dd10:	f000 8083 	beq.w	800de1a <get_fat+0x13c>
 800dd14:	2b03      	cmp	r3, #3
 800dd16:	f300 80a7 	bgt.w	800de68 <get_fat+0x18a>
 800dd1a:	2b01      	cmp	r3, #1
 800dd1c:	d002      	beq.n	800dd24 <get_fat+0x46>
 800dd1e:	2b02      	cmp	r3, #2
 800dd20:	d056      	beq.n	800ddd0 <get_fat+0xf2>
 800dd22:	e0a1      	b.n	800de68 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	60fb      	str	r3, [r7, #12]
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	085b      	lsrs	r3, r3, #1
 800dd2c:	68fa      	ldr	r2, [r7, #12]
 800dd2e:	4413      	add	r3, r2
 800dd30:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dd32:	693b      	ldr	r3, [r7, #16]
 800dd34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd36:	693b      	ldr	r3, [r7, #16]
 800dd38:	899b      	ldrh	r3, [r3, #12]
 800dd3a:	4619      	mov	r1, r3
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	fbb3 f3f1 	udiv	r3, r3, r1
 800dd42:	4413      	add	r3, r2
 800dd44:	4619      	mov	r1, r3
 800dd46:	6938      	ldr	r0, [r7, #16]
 800dd48:	f7ff ff0c 	bl	800db64 <move_window>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	f040 808d 	bne.w	800de6e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	1c5a      	adds	r2, r3, #1
 800dd58:	60fa      	str	r2, [r7, #12]
 800dd5a:	693a      	ldr	r2, [r7, #16]
 800dd5c:	8992      	ldrh	r2, [r2, #12]
 800dd5e:	fbb3 f1f2 	udiv	r1, r3, r2
 800dd62:	fb01 f202 	mul.w	r2, r1, r2
 800dd66:	1a9b      	subs	r3, r3, r2
 800dd68:	693a      	ldr	r2, [r7, #16]
 800dd6a:	4413      	add	r3, r2
 800dd6c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dd70:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dd72:	693b      	ldr	r3, [r7, #16]
 800dd74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd76:	693b      	ldr	r3, [r7, #16]
 800dd78:	899b      	ldrh	r3, [r3, #12]
 800dd7a:	4619      	mov	r1, r3
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	fbb3 f3f1 	udiv	r3, r3, r1
 800dd82:	4413      	add	r3, r2
 800dd84:	4619      	mov	r1, r3
 800dd86:	6938      	ldr	r0, [r7, #16]
 800dd88:	f7ff feec 	bl	800db64 <move_window>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d16f      	bne.n	800de72 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800dd92:	693b      	ldr	r3, [r7, #16]
 800dd94:	899b      	ldrh	r3, [r3, #12]
 800dd96:	461a      	mov	r2, r3
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	fbb3 f1f2 	udiv	r1, r3, r2
 800dd9e:	fb01 f202 	mul.w	r2, r1, r2
 800dda2:	1a9b      	subs	r3, r3, r2
 800dda4:	693a      	ldr	r2, [r7, #16]
 800dda6:	4413      	add	r3, r2
 800dda8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ddac:	021b      	lsls	r3, r3, #8
 800ddae:	461a      	mov	r2, r3
 800ddb0:	68bb      	ldr	r3, [r7, #8]
 800ddb2:	4313      	orrs	r3, r2
 800ddb4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	f003 0301 	and.w	r3, r3, #1
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d002      	beq.n	800ddc6 <get_fat+0xe8>
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	091b      	lsrs	r3, r3, #4
 800ddc4:	e002      	b.n	800ddcc <get_fat+0xee>
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ddcc:	617b      	str	r3, [r7, #20]
			break;
 800ddce:	e055      	b.n	800de7c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ddd0:	693b      	ldr	r3, [r7, #16]
 800ddd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ddd4:	693b      	ldr	r3, [r7, #16]
 800ddd6:	899b      	ldrh	r3, [r3, #12]
 800ddd8:	085b      	lsrs	r3, r3, #1
 800ddda:	b29b      	uxth	r3, r3
 800dddc:	4619      	mov	r1, r3
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	fbb3 f3f1 	udiv	r3, r3, r1
 800dde4:	4413      	add	r3, r2
 800dde6:	4619      	mov	r1, r3
 800dde8:	6938      	ldr	r0, [r7, #16]
 800ddea:	f7ff febb 	bl	800db64 <move_window>
 800ddee:	4603      	mov	r3, r0
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d140      	bne.n	800de76 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ddf4:	693b      	ldr	r3, [r7, #16]
 800ddf6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ddfa:	683b      	ldr	r3, [r7, #0]
 800ddfc:	005b      	lsls	r3, r3, #1
 800ddfe:	693a      	ldr	r2, [r7, #16]
 800de00:	8992      	ldrh	r2, [r2, #12]
 800de02:	fbb3 f0f2 	udiv	r0, r3, r2
 800de06:	fb00 f202 	mul.w	r2, r0, r2
 800de0a:	1a9b      	subs	r3, r3, r2
 800de0c:	440b      	add	r3, r1
 800de0e:	4618      	mov	r0, r3
 800de10:	f7ff fc34 	bl	800d67c <ld_word>
 800de14:	4603      	mov	r3, r0
 800de16:	617b      	str	r3, [r7, #20]
			break;
 800de18:	e030      	b.n	800de7c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800de1a:	693b      	ldr	r3, [r7, #16]
 800de1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800de1e:	693b      	ldr	r3, [r7, #16]
 800de20:	899b      	ldrh	r3, [r3, #12]
 800de22:	089b      	lsrs	r3, r3, #2
 800de24:	b29b      	uxth	r3, r3
 800de26:	4619      	mov	r1, r3
 800de28:	683b      	ldr	r3, [r7, #0]
 800de2a:	fbb3 f3f1 	udiv	r3, r3, r1
 800de2e:	4413      	add	r3, r2
 800de30:	4619      	mov	r1, r3
 800de32:	6938      	ldr	r0, [r7, #16]
 800de34:	f7ff fe96 	bl	800db64 <move_window>
 800de38:	4603      	mov	r3, r0
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d11d      	bne.n	800de7a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800de3e:	693b      	ldr	r3, [r7, #16]
 800de40:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	009b      	lsls	r3, r3, #2
 800de48:	693a      	ldr	r2, [r7, #16]
 800de4a:	8992      	ldrh	r2, [r2, #12]
 800de4c:	fbb3 f0f2 	udiv	r0, r3, r2
 800de50:	fb00 f202 	mul.w	r2, r0, r2
 800de54:	1a9b      	subs	r3, r3, r2
 800de56:	440b      	add	r3, r1
 800de58:	4618      	mov	r0, r3
 800de5a:	f7ff fc27 	bl	800d6ac <ld_dword>
 800de5e:	4603      	mov	r3, r0
 800de60:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800de64:	617b      	str	r3, [r7, #20]
			break;
 800de66:	e009      	b.n	800de7c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800de68:	2301      	movs	r3, #1
 800de6a:	617b      	str	r3, [r7, #20]
 800de6c:	e006      	b.n	800de7c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800de6e:	bf00      	nop
 800de70:	e004      	b.n	800de7c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800de72:	bf00      	nop
 800de74:	e002      	b.n	800de7c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800de76:	bf00      	nop
 800de78:	e000      	b.n	800de7c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800de7a:	bf00      	nop
		}
	}

	return val;
 800de7c:	697b      	ldr	r3, [r7, #20]
}
 800de7e:	4618      	mov	r0, r3
 800de80:	3718      	adds	r7, #24
 800de82:	46bd      	mov	sp, r7
 800de84:	bd80      	pop	{r7, pc}

0800de86 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800de86:	b590      	push	{r4, r7, lr}
 800de88:	b089      	sub	sp, #36	; 0x24
 800de8a:	af00      	add	r7, sp, #0
 800de8c:	60f8      	str	r0, [r7, #12]
 800de8e:	60b9      	str	r1, [r7, #8]
 800de90:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800de92:	2302      	movs	r3, #2
 800de94:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	2b01      	cmp	r3, #1
 800de9a:	f240 8102 	bls.w	800e0a2 <put_fat+0x21c>
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	699b      	ldr	r3, [r3, #24]
 800dea2:	68ba      	ldr	r2, [r7, #8]
 800dea4:	429a      	cmp	r2, r3
 800dea6:	f080 80fc 	bcs.w	800e0a2 <put_fat+0x21c>
		switch (fs->fs_type) {
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	781b      	ldrb	r3, [r3, #0]
 800deae:	2b03      	cmp	r3, #3
 800deb0:	f000 80b6 	beq.w	800e020 <put_fat+0x19a>
 800deb4:	2b03      	cmp	r3, #3
 800deb6:	f300 80fd 	bgt.w	800e0b4 <put_fat+0x22e>
 800deba:	2b01      	cmp	r3, #1
 800debc:	d003      	beq.n	800dec6 <put_fat+0x40>
 800debe:	2b02      	cmp	r3, #2
 800dec0:	f000 8083 	beq.w	800dfca <put_fat+0x144>
 800dec4:	e0f6      	b.n	800e0b4 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800dec6:	68bb      	ldr	r3, [r7, #8]
 800dec8:	61bb      	str	r3, [r7, #24]
 800deca:	69bb      	ldr	r3, [r7, #24]
 800decc:	085b      	lsrs	r3, r3, #1
 800dece:	69ba      	ldr	r2, [r7, #24]
 800ded0:	4413      	add	r3, r2
 800ded2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	899b      	ldrh	r3, [r3, #12]
 800dedc:	4619      	mov	r1, r3
 800dede:	69bb      	ldr	r3, [r7, #24]
 800dee0:	fbb3 f3f1 	udiv	r3, r3, r1
 800dee4:	4413      	add	r3, r2
 800dee6:	4619      	mov	r1, r3
 800dee8:	68f8      	ldr	r0, [r7, #12]
 800deea:	f7ff fe3b 	bl	800db64 <move_window>
 800deee:	4603      	mov	r3, r0
 800def0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800def2:	7ffb      	ldrb	r3, [r7, #31]
 800def4:	2b00      	cmp	r3, #0
 800def6:	f040 80d6 	bne.w	800e0a6 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800df00:	69bb      	ldr	r3, [r7, #24]
 800df02:	1c5a      	adds	r2, r3, #1
 800df04:	61ba      	str	r2, [r7, #24]
 800df06:	68fa      	ldr	r2, [r7, #12]
 800df08:	8992      	ldrh	r2, [r2, #12]
 800df0a:	fbb3 f0f2 	udiv	r0, r3, r2
 800df0e:	fb00 f202 	mul.w	r2, r0, r2
 800df12:	1a9b      	subs	r3, r3, r2
 800df14:	440b      	add	r3, r1
 800df16:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800df18:	68bb      	ldr	r3, [r7, #8]
 800df1a:	f003 0301 	and.w	r3, r3, #1
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d00d      	beq.n	800df3e <put_fat+0xb8>
 800df22:	697b      	ldr	r3, [r7, #20]
 800df24:	781b      	ldrb	r3, [r3, #0]
 800df26:	b25b      	sxtb	r3, r3
 800df28:	f003 030f 	and.w	r3, r3, #15
 800df2c:	b25a      	sxtb	r2, r3
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	b2db      	uxtb	r3, r3
 800df32:	011b      	lsls	r3, r3, #4
 800df34:	b25b      	sxtb	r3, r3
 800df36:	4313      	orrs	r3, r2
 800df38:	b25b      	sxtb	r3, r3
 800df3a:	b2db      	uxtb	r3, r3
 800df3c:	e001      	b.n	800df42 <put_fat+0xbc>
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	b2db      	uxtb	r3, r3
 800df42:	697a      	ldr	r2, [r7, #20]
 800df44:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	2201      	movs	r2, #1
 800df4a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	899b      	ldrh	r3, [r3, #12]
 800df54:	4619      	mov	r1, r3
 800df56:	69bb      	ldr	r3, [r7, #24]
 800df58:	fbb3 f3f1 	udiv	r3, r3, r1
 800df5c:	4413      	add	r3, r2
 800df5e:	4619      	mov	r1, r3
 800df60:	68f8      	ldr	r0, [r7, #12]
 800df62:	f7ff fdff 	bl	800db64 <move_window>
 800df66:	4603      	mov	r3, r0
 800df68:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800df6a:	7ffb      	ldrb	r3, [r7, #31]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	f040 809c 	bne.w	800e0aa <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	899b      	ldrh	r3, [r3, #12]
 800df7c:	461a      	mov	r2, r3
 800df7e:	69bb      	ldr	r3, [r7, #24]
 800df80:	fbb3 f0f2 	udiv	r0, r3, r2
 800df84:	fb00 f202 	mul.w	r2, r0, r2
 800df88:	1a9b      	subs	r3, r3, r2
 800df8a:	440b      	add	r3, r1
 800df8c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800df8e:	68bb      	ldr	r3, [r7, #8]
 800df90:	f003 0301 	and.w	r3, r3, #1
 800df94:	2b00      	cmp	r3, #0
 800df96:	d003      	beq.n	800dfa0 <put_fat+0x11a>
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	091b      	lsrs	r3, r3, #4
 800df9c:	b2db      	uxtb	r3, r3
 800df9e:	e00e      	b.n	800dfbe <put_fat+0x138>
 800dfa0:	697b      	ldr	r3, [r7, #20]
 800dfa2:	781b      	ldrb	r3, [r3, #0]
 800dfa4:	b25b      	sxtb	r3, r3
 800dfa6:	f023 030f 	bic.w	r3, r3, #15
 800dfaa:	b25a      	sxtb	r2, r3
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	0a1b      	lsrs	r3, r3, #8
 800dfb0:	b25b      	sxtb	r3, r3
 800dfb2:	f003 030f 	and.w	r3, r3, #15
 800dfb6:	b25b      	sxtb	r3, r3
 800dfb8:	4313      	orrs	r3, r2
 800dfba:	b25b      	sxtb	r3, r3
 800dfbc:	b2db      	uxtb	r3, r3
 800dfbe:	697a      	ldr	r2, [r7, #20]
 800dfc0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	2201      	movs	r2, #1
 800dfc6:	70da      	strb	r2, [r3, #3]
			break;
 800dfc8:	e074      	b.n	800e0b4 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	899b      	ldrh	r3, [r3, #12]
 800dfd2:	085b      	lsrs	r3, r3, #1
 800dfd4:	b29b      	uxth	r3, r3
 800dfd6:	4619      	mov	r1, r3
 800dfd8:	68bb      	ldr	r3, [r7, #8]
 800dfda:	fbb3 f3f1 	udiv	r3, r3, r1
 800dfde:	4413      	add	r3, r2
 800dfe0:	4619      	mov	r1, r3
 800dfe2:	68f8      	ldr	r0, [r7, #12]
 800dfe4:	f7ff fdbe 	bl	800db64 <move_window>
 800dfe8:	4603      	mov	r3, r0
 800dfea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dfec:	7ffb      	ldrb	r3, [r7, #31]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d15d      	bne.n	800e0ae <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800dff8:	68bb      	ldr	r3, [r7, #8]
 800dffa:	005b      	lsls	r3, r3, #1
 800dffc:	68fa      	ldr	r2, [r7, #12]
 800dffe:	8992      	ldrh	r2, [r2, #12]
 800e000:	fbb3 f0f2 	udiv	r0, r3, r2
 800e004:	fb00 f202 	mul.w	r2, r0, r2
 800e008:	1a9b      	subs	r3, r3, r2
 800e00a:	440b      	add	r3, r1
 800e00c:	687a      	ldr	r2, [r7, #4]
 800e00e:	b292      	uxth	r2, r2
 800e010:	4611      	mov	r1, r2
 800e012:	4618      	mov	r0, r3
 800e014:	f7ff fb6d 	bl	800d6f2 <st_word>
			fs->wflag = 1;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	2201      	movs	r2, #1
 800e01c:	70da      	strb	r2, [r3, #3]
			break;
 800e01e:	e049      	b.n	800e0b4 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	899b      	ldrh	r3, [r3, #12]
 800e028:	089b      	lsrs	r3, r3, #2
 800e02a:	b29b      	uxth	r3, r3
 800e02c:	4619      	mov	r1, r3
 800e02e:	68bb      	ldr	r3, [r7, #8]
 800e030:	fbb3 f3f1 	udiv	r3, r3, r1
 800e034:	4413      	add	r3, r2
 800e036:	4619      	mov	r1, r3
 800e038:	68f8      	ldr	r0, [r7, #12]
 800e03a:	f7ff fd93 	bl	800db64 <move_window>
 800e03e:	4603      	mov	r3, r0
 800e040:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e042:	7ffb      	ldrb	r3, [r7, #31]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d134      	bne.n	800e0b2 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e054:	68bb      	ldr	r3, [r7, #8]
 800e056:	009b      	lsls	r3, r3, #2
 800e058:	68fa      	ldr	r2, [r7, #12]
 800e05a:	8992      	ldrh	r2, [r2, #12]
 800e05c:	fbb3 f0f2 	udiv	r0, r3, r2
 800e060:	fb00 f202 	mul.w	r2, r0, r2
 800e064:	1a9b      	subs	r3, r3, r2
 800e066:	440b      	add	r3, r1
 800e068:	4618      	mov	r0, r3
 800e06a:	f7ff fb1f 	bl	800d6ac <ld_dword>
 800e06e:	4603      	mov	r3, r0
 800e070:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e074:	4323      	orrs	r3, r4
 800e076:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e07e:	68bb      	ldr	r3, [r7, #8]
 800e080:	009b      	lsls	r3, r3, #2
 800e082:	68fa      	ldr	r2, [r7, #12]
 800e084:	8992      	ldrh	r2, [r2, #12]
 800e086:	fbb3 f0f2 	udiv	r0, r3, r2
 800e08a:	fb00 f202 	mul.w	r2, r0, r2
 800e08e:	1a9b      	subs	r3, r3, r2
 800e090:	440b      	add	r3, r1
 800e092:	6879      	ldr	r1, [r7, #4]
 800e094:	4618      	mov	r0, r3
 800e096:	f7ff fb47 	bl	800d728 <st_dword>
			fs->wflag = 1;
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	2201      	movs	r2, #1
 800e09e:	70da      	strb	r2, [r3, #3]
			break;
 800e0a0:	e008      	b.n	800e0b4 <put_fat+0x22e>
		}
	}
 800e0a2:	bf00      	nop
 800e0a4:	e006      	b.n	800e0b4 <put_fat+0x22e>
			if (res != FR_OK) break;
 800e0a6:	bf00      	nop
 800e0a8:	e004      	b.n	800e0b4 <put_fat+0x22e>
			if (res != FR_OK) break;
 800e0aa:	bf00      	nop
 800e0ac:	e002      	b.n	800e0b4 <put_fat+0x22e>
			if (res != FR_OK) break;
 800e0ae:	bf00      	nop
 800e0b0:	e000      	b.n	800e0b4 <put_fat+0x22e>
			if (res != FR_OK) break;
 800e0b2:	bf00      	nop
	return res;
 800e0b4:	7ffb      	ldrb	r3, [r7, #31]
}
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	3724      	adds	r7, #36	; 0x24
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	bd90      	pop	{r4, r7, pc}

0800e0be <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e0be:	b580      	push	{r7, lr}
 800e0c0:	b088      	sub	sp, #32
 800e0c2:	af00      	add	r7, sp, #0
 800e0c4:	60f8      	str	r0, [r7, #12]
 800e0c6:	60b9      	str	r1, [r7, #8]
 800e0c8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e0d4:	68bb      	ldr	r3, [r7, #8]
 800e0d6:	2b01      	cmp	r3, #1
 800e0d8:	d904      	bls.n	800e0e4 <remove_chain+0x26>
 800e0da:	69bb      	ldr	r3, [r7, #24]
 800e0dc:	699b      	ldr	r3, [r3, #24]
 800e0de:	68ba      	ldr	r2, [r7, #8]
 800e0e0:	429a      	cmp	r2, r3
 800e0e2:	d301      	bcc.n	800e0e8 <remove_chain+0x2a>
 800e0e4:	2302      	movs	r3, #2
 800e0e6:	e04b      	b.n	800e180 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d00c      	beq.n	800e108 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e0ee:	f04f 32ff 	mov.w	r2, #4294967295
 800e0f2:	6879      	ldr	r1, [r7, #4]
 800e0f4:	69b8      	ldr	r0, [r7, #24]
 800e0f6:	f7ff fec6 	bl	800de86 <put_fat>
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e0fe:	7ffb      	ldrb	r3, [r7, #31]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d001      	beq.n	800e108 <remove_chain+0x4a>
 800e104:	7ffb      	ldrb	r3, [r7, #31]
 800e106:	e03b      	b.n	800e180 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e108:	68b9      	ldr	r1, [r7, #8]
 800e10a:	68f8      	ldr	r0, [r7, #12]
 800e10c:	f7ff fde7 	bl	800dcde <get_fat>
 800e110:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e112:	697b      	ldr	r3, [r7, #20]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d031      	beq.n	800e17c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e118:	697b      	ldr	r3, [r7, #20]
 800e11a:	2b01      	cmp	r3, #1
 800e11c:	d101      	bne.n	800e122 <remove_chain+0x64>
 800e11e:	2302      	movs	r3, #2
 800e120:	e02e      	b.n	800e180 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e122:	697b      	ldr	r3, [r7, #20]
 800e124:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e128:	d101      	bne.n	800e12e <remove_chain+0x70>
 800e12a:	2301      	movs	r3, #1
 800e12c:	e028      	b.n	800e180 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e12e:	2200      	movs	r2, #0
 800e130:	68b9      	ldr	r1, [r7, #8]
 800e132:	69b8      	ldr	r0, [r7, #24]
 800e134:	f7ff fea7 	bl	800de86 <put_fat>
 800e138:	4603      	mov	r3, r0
 800e13a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e13c:	7ffb      	ldrb	r3, [r7, #31]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d001      	beq.n	800e146 <remove_chain+0x88>
 800e142:	7ffb      	ldrb	r3, [r7, #31]
 800e144:	e01c      	b.n	800e180 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e146:	69bb      	ldr	r3, [r7, #24]
 800e148:	695a      	ldr	r2, [r3, #20]
 800e14a:	69bb      	ldr	r3, [r7, #24]
 800e14c:	699b      	ldr	r3, [r3, #24]
 800e14e:	3b02      	subs	r3, #2
 800e150:	429a      	cmp	r2, r3
 800e152:	d20b      	bcs.n	800e16c <remove_chain+0xae>
			fs->free_clst++;
 800e154:	69bb      	ldr	r3, [r7, #24]
 800e156:	695b      	ldr	r3, [r3, #20]
 800e158:	1c5a      	adds	r2, r3, #1
 800e15a:	69bb      	ldr	r3, [r7, #24]
 800e15c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800e15e:	69bb      	ldr	r3, [r7, #24]
 800e160:	791b      	ldrb	r3, [r3, #4]
 800e162:	f043 0301 	orr.w	r3, r3, #1
 800e166:	b2da      	uxtb	r2, r3
 800e168:	69bb      	ldr	r3, [r7, #24]
 800e16a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800e16c:	697b      	ldr	r3, [r7, #20]
 800e16e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e170:	69bb      	ldr	r3, [r7, #24]
 800e172:	699b      	ldr	r3, [r3, #24]
 800e174:	68ba      	ldr	r2, [r7, #8]
 800e176:	429a      	cmp	r2, r3
 800e178:	d3c6      	bcc.n	800e108 <remove_chain+0x4a>
 800e17a:	e000      	b.n	800e17e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800e17c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800e17e:	2300      	movs	r3, #0
}
 800e180:	4618      	mov	r0, r3
 800e182:	3720      	adds	r7, #32
 800e184:	46bd      	mov	sp, r7
 800e186:	bd80      	pop	{r7, pc}

0800e188 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b088      	sub	sp, #32
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
 800e190:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d10d      	bne.n	800e1ba <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e19e:	693b      	ldr	r3, [r7, #16]
 800e1a0:	691b      	ldr	r3, [r3, #16]
 800e1a2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e1a4:	69bb      	ldr	r3, [r7, #24]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d004      	beq.n	800e1b4 <create_chain+0x2c>
 800e1aa:	693b      	ldr	r3, [r7, #16]
 800e1ac:	699b      	ldr	r3, [r3, #24]
 800e1ae:	69ba      	ldr	r2, [r7, #24]
 800e1b0:	429a      	cmp	r2, r3
 800e1b2:	d31b      	bcc.n	800e1ec <create_chain+0x64>
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	61bb      	str	r3, [r7, #24]
 800e1b8:	e018      	b.n	800e1ec <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e1ba:	6839      	ldr	r1, [r7, #0]
 800e1bc:	6878      	ldr	r0, [r7, #4]
 800e1be:	f7ff fd8e 	bl	800dcde <get_fat>
 800e1c2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	2b01      	cmp	r3, #1
 800e1c8:	d801      	bhi.n	800e1ce <create_chain+0x46>
 800e1ca:	2301      	movs	r3, #1
 800e1cc:	e070      	b.n	800e2b0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1d4:	d101      	bne.n	800e1da <create_chain+0x52>
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	e06a      	b.n	800e2b0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e1da:	693b      	ldr	r3, [r7, #16]
 800e1dc:	699b      	ldr	r3, [r3, #24]
 800e1de:	68fa      	ldr	r2, [r7, #12]
 800e1e0:	429a      	cmp	r2, r3
 800e1e2:	d201      	bcs.n	800e1e8 <create_chain+0x60>
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	e063      	b.n	800e2b0 <create_chain+0x128>
		scl = clst;
 800e1e8:	683b      	ldr	r3, [r7, #0]
 800e1ea:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e1ec:	69bb      	ldr	r3, [r7, #24]
 800e1ee:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e1f0:	69fb      	ldr	r3, [r7, #28]
 800e1f2:	3301      	adds	r3, #1
 800e1f4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e1f6:	693b      	ldr	r3, [r7, #16]
 800e1f8:	699b      	ldr	r3, [r3, #24]
 800e1fa:	69fa      	ldr	r2, [r7, #28]
 800e1fc:	429a      	cmp	r2, r3
 800e1fe:	d307      	bcc.n	800e210 <create_chain+0x88>
				ncl = 2;
 800e200:	2302      	movs	r3, #2
 800e202:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e204:	69fa      	ldr	r2, [r7, #28]
 800e206:	69bb      	ldr	r3, [r7, #24]
 800e208:	429a      	cmp	r2, r3
 800e20a:	d901      	bls.n	800e210 <create_chain+0x88>
 800e20c:	2300      	movs	r3, #0
 800e20e:	e04f      	b.n	800e2b0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e210:	69f9      	ldr	r1, [r7, #28]
 800e212:	6878      	ldr	r0, [r7, #4]
 800e214:	f7ff fd63 	bl	800dcde <get_fat>
 800e218:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d00e      	beq.n	800e23e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	2b01      	cmp	r3, #1
 800e224:	d003      	beq.n	800e22e <create_chain+0xa6>
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e22c:	d101      	bne.n	800e232 <create_chain+0xaa>
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	e03e      	b.n	800e2b0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800e232:	69fa      	ldr	r2, [r7, #28]
 800e234:	69bb      	ldr	r3, [r7, #24]
 800e236:	429a      	cmp	r2, r3
 800e238:	d1da      	bne.n	800e1f0 <create_chain+0x68>
 800e23a:	2300      	movs	r3, #0
 800e23c:	e038      	b.n	800e2b0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800e23e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e240:	f04f 32ff 	mov.w	r2, #4294967295
 800e244:	69f9      	ldr	r1, [r7, #28]
 800e246:	6938      	ldr	r0, [r7, #16]
 800e248:	f7ff fe1d 	bl	800de86 <put_fat>
 800e24c:	4603      	mov	r3, r0
 800e24e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e250:	7dfb      	ldrb	r3, [r7, #23]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d109      	bne.n	800e26a <create_chain+0xe2>
 800e256:	683b      	ldr	r3, [r7, #0]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d006      	beq.n	800e26a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e25c:	69fa      	ldr	r2, [r7, #28]
 800e25e:	6839      	ldr	r1, [r7, #0]
 800e260:	6938      	ldr	r0, [r7, #16]
 800e262:	f7ff fe10 	bl	800de86 <put_fat>
 800e266:	4603      	mov	r3, r0
 800e268:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e26a:	7dfb      	ldrb	r3, [r7, #23]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d116      	bne.n	800e29e <create_chain+0x116>
		fs->last_clst = ncl;
 800e270:	693b      	ldr	r3, [r7, #16]
 800e272:	69fa      	ldr	r2, [r7, #28]
 800e274:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e276:	693b      	ldr	r3, [r7, #16]
 800e278:	695a      	ldr	r2, [r3, #20]
 800e27a:	693b      	ldr	r3, [r7, #16]
 800e27c:	699b      	ldr	r3, [r3, #24]
 800e27e:	3b02      	subs	r3, #2
 800e280:	429a      	cmp	r2, r3
 800e282:	d804      	bhi.n	800e28e <create_chain+0x106>
 800e284:	693b      	ldr	r3, [r7, #16]
 800e286:	695b      	ldr	r3, [r3, #20]
 800e288:	1e5a      	subs	r2, r3, #1
 800e28a:	693b      	ldr	r3, [r7, #16]
 800e28c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800e28e:	693b      	ldr	r3, [r7, #16]
 800e290:	791b      	ldrb	r3, [r3, #4]
 800e292:	f043 0301 	orr.w	r3, r3, #1
 800e296:	b2da      	uxtb	r2, r3
 800e298:	693b      	ldr	r3, [r7, #16]
 800e29a:	711a      	strb	r2, [r3, #4]
 800e29c:	e007      	b.n	800e2ae <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e29e:	7dfb      	ldrb	r3, [r7, #23]
 800e2a0:	2b01      	cmp	r3, #1
 800e2a2:	d102      	bne.n	800e2aa <create_chain+0x122>
 800e2a4:	f04f 33ff 	mov.w	r3, #4294967295
 800e2a8:	e000      	b.n	800e2ac <create_chain+0x124>
 800e2aa:	2301      	movs	r3, #1
 800e2ac:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e2ae:	69fb      	ldr	r3, [r7, #28]
}
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	3720      	adds	r7, #32
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	bd80      	pop	{r7, pc}

0800e2b8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e2b8:	b480      	push	{r7}
 800e2ba:	b087      	sub	sp, #28
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]
 800e2c0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2cc:	3304      	adds	r3, #4
 800e2ce:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	899b      	ldrh	r3, [r3, #12]
 800e2d4:	461a      	mov	r2, r3
 800e2d6:	683b      	ldr	r3, [r7, #0]
 800e2d8:	fbb3 f3f2 	udiv	r3, r3, r2
 800e2dc:	68fa      	ldr	r2, [r7, #12]
 800e2de:	8952      	ldrh	r2, [r2, #10]
 800e2e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800e2e4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e2e6:	693b      	ldr	r3, [r7, #16]
 800e2e8:	1d1a      	adds	r2, r3, #4
 800e2ea:	613a      	str	r2, [r7, #16]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e2f0:	68bb      	ldr	r3, [r7, #8]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d101      	bne.n	800e2fa <clmt_clust+0x42>
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	e010      	b.n	800e31c <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800e2fa:	697a      	ldr	r2, [r7, #20]
 800e2fc:	68bb      	ldr	r3, [r7, #8]
 800e2fe:	429a      	cmp	r2, r3
 800e300:	d307      	bcc.n	800e312 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800e302:	697a      	ldr	r2, [r7, #20]
 800e304:	68bb      	ldr	r3, [r7, #8]
 800e306:	1ad3      	subs	r3, r2, r3
 800e308:	617b      	str	r3, [r7, #20]
 800e30a:	693b      	ldr	r3, [r7, #16]
 800e30c:	3304      	adds	r3, #4
 800e30e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e310:	e7e9      	b.n	800e2e6 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800e312:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e314:	693b      	ldr	r3, [r7, #16]
 800e316:	681a      	ldr	r2, [r3, #0]
 800e318:	697b      	ldr	r3, [r7, #20]
 800e31a:	4413      	add	r3, r2
}
 800e31c:	4618      	mov	r0, r3
 800e31e:	371c      	adds	r7, #28
 800e320:	46bd      	mov	sp, r7
 800e322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e326:	4770      	bx	lr

0800e328 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b086      	sub	sp, #24
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
 800e330:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e33e:	d204      	bcs.n	800e34a <dir_sdi+0x22>
 800e340:	683b      	ldr	r3, [r7, #0]
 800e342:	f003 031f 	and.w	r3, r3, #31
 800e346:	2b00      	cmp	r3, #0
 800e348:	d001      	beq.n	800e34e <dir_sdi+0x26>
		return FR_INT_ERR;
 800e34a:	2302      	movs	r3, #2
 800e34c:	e071      	b.n	800e432 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	683a      	ldr	r2, [r7, #0]
 800e352:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	689b      	ldr	r3, [r3, #8]
 800e358:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e35a:	697b      	ldr	r3, [r7, #20]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d106      	bne.n	800e36e <dir_sdi+0x46>
 800e360:	693b      	ldr	r3, [r7, #16]
 800e362:	781b      	ldrb	r3, [r3, #0]
 800e364:	2b02      	cmp	r3, #2
 800e366:	d902      	bls.n	800e36e <dir_sdi+0x46>
		clst = fs->dirbase;
 800e368:	693b      	ldr	r3, [r7, #16]
 800e36a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e36c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e36e:	697b      	ldr	r3, [r7, #20]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d10c      	bne.n	800e38e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e374:	683b      	ldr	r3, [r7, #0]
 800e376:	095b      	lsrs	r3, r3, #5
 800e378:	693a      	ldr	r2, [r7, #16]
 800e37a:	8912      	ldrh	r2, [r2, #8]
 800e37c:	4293      	cmp	r3, r2
 800e37e:	d301      	bcc.n	800e384 <dir_sdi+0x5c>
 800e380:	2302      	movs	r3, #2
 800e382:	e056      	b.n	800e432 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800e384:	693b      	ldr	r3, [r7, #16]
 800e386:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	61da      	str	r2, [r3, #28]
 800e38c:	e02d      	b.n	800e3ea <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e38e:	693b      	ldr	r3, [r7, #16]
 800e390:	895b      	ldrh	r3, [r3, #10]
 800e392:	461a      	mov	r2, r3
 800e394:	693b      	ldr	r3, [r7, #16]
 800e396:	899b      	ldrh	r3, [r3, #12]
 800e398:	fb02 f303 	mul.w	r3, r2, r3
 800e39c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e39e:	e019      	b.n	800e3d4 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	6979      	ldr	r1, [r7, #20]
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	f7ff fc9a 	bl	800dcde <get_fat>
 800e3aa:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e3ac:	697b      	ldr	r3, [r7, #20]
 800e3ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3b2:	d101      	bne.n	800e3b8 <dir_sdi+0x90>
 800e3b4:	2301      	movs	r3, #1
 800e3b6:	e03c      	b.n	800e432 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e3b8:	697b      	ldr	r3, [r7, #20]
 800e3ba:	2b01      	cmp	r3, #1
 800e3bc:	d904      	bls.n	800e3c8 <dir_sdi+0xa0>
 800e3be:	693b      	ldr	r3, [r7, #16]
 800e3c0:	699b      	ldr	r3, [r3, #24]
 800e3c2:	697a      	ldr	r2, [r7, #20]
 800e3c4:	429a      	cmp	r2, r3
 800e3c6:	d301      	bcc.n	800e3cc <dir_sdi+0xa4>
 800e3c8:	2302      	movs	r3, #2
 800e3ca:	e032      	b.n	800e432 <dir_sdi+0x10a>
			ofs -= csz;
 800e3cc:	683a      	ldr	r2, [r7, #0]
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	1ad3      	subs	r3, r2, r3
 800e3d2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e3d4:	683a      	ldr	r2, [r7, #0]
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	429a      	cmp	r2, r3
 800e3da:	d2e1      	bcs.n	800e3a0 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800e3dc:	6979      	ldr	r1, [r7, #20]
 800e3de:	6938      	ldr	r0, [r7, #16]
 800e3e0:	f7ff fc5e 	bl	800dca0 <clust2sect>
 800e3e4:	4602      	mov	r2, r0
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	697a      	ldr	r2, [r7, #20]
 800e3ee:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	69db      	ldr	r3, [r3, #28]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d101      	bne.n	800e3fc <dir_sdi+0xd4>
 800e3f8:	2302      	movs	r3, #2
 800e3fa:	e01a      	b.n	800e432 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	69da      	ldr	r2, [r3, #28]
 800e400:	693b      	ldr	r3, [r7, #16]
 800e402:	899b      	ldrh	r3, [r3, #12]
 800e404:	4619      	mov	r1, r3
 800e406:	683b      	ldr	r3, [r7, #0]
 800e408:	fbb3 f3f1 	udiv	r3, r3, r1
 800e40c:	441a      	add	r2, r3
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e412:	693b      	ldr	r3, [r7, #16]
 800e414:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e418:	693b      	ldr	r3, [r7, #16]
 800e41a:	899b      	ldrh	r3, [r3, #12]
 800e41c:	461a      	mov	r2, r3
 800e41e:	683b      	ldr	r3, [r7, #0]
 800e420:	fbb3 f0f2 	udiv	r0, r3, r2
 800e424:	fb00 f202 	mul.w	r2, r0, r2
 800e428:	1a9b      	subs	r3, r3, r2
 800e42a:	18ca      	adds	r2, r1, r3
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e430:	2300      	movs	r3, #0
}
 800e432:	4618      	mov	r0, r3
 800e434:	3718      	adds	r7, #24
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}

0800e43a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e43a:	b580      	push	{r7, lr}
 800e43c:	b086      	sub	sp, #24
 800e43e:	af00      	add	r7, sp, #0
 800e440:	6078      	str	r0, [r7, #4]
 800e442:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	695b      	ldr	r3, [r3, #20]
 800e44e:	3320      	adds	r3, #32
 800e450:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	69db      	ldr	r3, [r3, #28]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d003      	beq.n	800e462 <dir_next+0x28>
 800e45a:	68bb      	ldr	r3, [r7, #8]
 800e45c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e460:	d301      	bcc.n	800e466 <dir_next+0x2c>
 800e462:	2304      	movs	r3, #4
 800e464:	e0bb      	b.n	800e5de <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	899b      	ldrh	r3, [r3, #12]
 800e46a:	461a      	mov	r2, r3
 800e46c:	68bb      	ldr	r3, [r7, #8]
 800e46e:	fbb3 f1f2 	udiv	r1, r3, r2
 800e472:	fb01 f202 	mul.w	r2, r1, r2
 800e476:	1a9b      	subs	r3, r3, r2
 800e478:	2b00      	cmp	r3, #0
 800e47a:	f040 809d 	bne.w	800e5b8 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	69db      	ldr	r3, [r3, #28]
 800e482:	1c5a      	adds	r2, r3, #1
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	699b      	ldr	r3, [r3, #24]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d10b      	bne.n	800e4a8 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	095b      	lsrs	r3, r3, #5
 800e494:	68fa      	ldr	r2, [r7, #12]
 800e496:	8912      	ldrh	r2, [r2, #8]
 800e498:	4293      	cmp	r3, r2
 800e49a:	f0c0 808d 	bcc.w	800e5b8 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	61da      	str	r2, [r3, #28]
 800e4a4:	2304      	movs	r3, #4
 800e4a6:	e09a      	b.n	800e5de <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	899b      	ldrh	r3, [r3, #12]
 800e4ac:	461a      	mov	r2, r3
 800e4ae:	68bb      	ldr	r3, [r7, #8]
 800e4b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800e4b4:	68fa      	ldr	r2, [r7, #12]
 800e4b6:	8952      	ldrh	r2, [r2, #10]
 800e4b8:	3a01      	subs	r2, #1
 800e4ba:	4013      	ands	r3, r2
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d17b      	bne.n	800e5b8 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e4c0:	687a      	ldr	r2, [r7, #4]
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	699b      	ldr	r3, [r3, #24]
 800e4c6:	4619      	mov	r1, r3
 800e4c8:	4610      	mov	r0, r2
 800e4ca:	f7ff fc08 	bl	800dcde <get_fat>
 800e4ce:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e4d0:	697b      	ldr	r3, [r7, #20]
 800e4d2:	2b01      	cmp	r3, #1
 800e4d4:	d801      	bhi.n	800e4da <dir_next+0xa0>
 800e4d6:	2302      	movs	r3, #2
 800e4d8:	e081      	b.n	800e5de <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e4da:	697b      	ldr	r3, [r7, #20]
 800e4dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4e0:	d101      	bne.n	800e4e6 <dir_next+0xac>
 800e4e2:	2301      	movs	r3, #1
 800e4e4:	e07b      	b.n	800e5de <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	699b      	ldr	r3, [r3, #24]
 800e4ea:	697a      	ldr	r2, [r7, #20]
 800e4ec:	429a      	cmp	r2, r3
 800e4ee:	d359      	bcc.n	800e5a4 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e4f0:	683b      	ldr	r3, [r7, #0]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d104      	bne.n	800e500 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	2200      	movs	r2, #0
 800e4fa:	61da      	str	r2, [r3, #28]
 800e4fc:	2304      	movs	r3, #4
 800e4fe:	e06e      	b.n	800e5de <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e500:	687a      	ldr	r2, [r7, #4]
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	699b      	ldr	r3, [r3, #24]
 800e506:	4619      	mov	r1, r3
 800e508:	4610      	mov	r0, r2
 800e50a:	f7ff fe3d 	bl	800e188 <create_chain>
 800e50e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e510:	697b      	ldr	r3, [r7, #20]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d101      	bne.n	800e51a <dir_next+0xe0>
 800e516:	2307      	movs	r3, #7
 800e518:	e061      	b.n	800e5de <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e51a:	697b      	ldr	r3, [r7, #20]
 800e51c:	2b01      	cmp	r3, #1
 800e51e:	d101      	bne.n	800e524 <dir_next+0xea>
 800e520:	2302      	movs	r3, #2
 800e522:	e05c      	b.n	800e5de <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e524:	697b      	ldr	r3, [r7, #20]
 800e526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e52a:	d101      	bne.n	800e530 <dir_next+0xf6>
 800e52c:	2301      	movs	r3, #1
 800e52e:	e056      	b.n	800e5de <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e530:	68f8      	ldr	r0, [r7, #12]
 800e532:	f7ff fad3 	bl	800dadc <sync_window>
 800e536:	4603      	mov	r3, r0
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d001      	beq.n	800e540 <dir_next+0x106>
 800e53c:	2301      	movs	r3, #1
 800e53e:	e04e      	b.n	800e5de <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	899b      	ldrh	r3, [r3, #12]
 800e54a:	461a      	mov	r2, r3
 800e54c:	2100      	movs	r1, #0
 800e54e:	f7ff f938 	bl	800d7c2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e552:	2300      	movs	r3, #0
 800e554:	613b      	str	r3, [r7, #16]
 800e556:	6979      	ldr	r1, [r7, #20]
 800e558:	68f8      	ldr	r0, [r7, #12]
 800e55a:	f7ff fba1 	bl	800dca0 <clust2sect>
 800e55e:	4602      	mov	r2, r0
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	631a      	str	r2, [r3, #48]	; 0x30
 800e564:	e012      	b.n	800e58c <dir_next+0x152>
						fs->wflag = 1;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	2201      	movs	r2, #1
 800e56a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e56c:	68f8      	ldr	r0, [r7, #12]
 800e56e:	f7ff fab5 	bl	800dadc <sync_window>
 800e572:	4603      	mov	r3, r0
 800e574:	2b00      	cmp	r3, #0
 800e576:	d001      	beq.n	800e57c <dir_next+0x142>
 800e578:	2301      	movs	r3, #1
 800e57a:	e030      	b.n	800e5de <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e57c:	693b      	ldr	r3, [r7, #16]
 800e57e:	3301      	adds	r3, #1
 800e580:	613b      	str	r3, [r7, #16]
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e586:	1c5a      	adds	r2, r3, #1
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	631a      	str	r2, [r3, #48]	; 0x30
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	895b      	ldrh	r3, [r3, #10]
 800e590:	461a      	mov	r2, r3
 800e592:	693b      	ldr	r3, [r7, #16]
 800e594:	4293      	cmp	r3, r2
 800e596:	d3e6      	bcc.n	800e566 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e59c:	693b      	ldr	r3, [r7, #16]
 800e59e:	1ad2      	subs	r2, r2, r3
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	697a      	ldr	r2, [r7, #20]
 800e5a8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e5aa:	6979      	ldr	r1, [r7, #20]
 800e5ac:	68f8      	ldr	r0, [r7, #12]
 800e5ae:	f7ff fb77 	bl	800dca0 <clust2sect>
 800e5b2:	4602      	mov	r2, r0
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	68ba      	ldr	r2, [r7, #8]
 800e5bc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	899b      	ldrh	r3, [r3, #12]
 800e5c8:	461a      	mov	r2, r3
 800e5ca:	68bb      	ldr	r3, [r7, #8]
 800e5cc:	fbb3 f0f2 	udiv	r0, r3, r2
 800e5d0:	fb00 f202 	mul.w	r2, r0, r2
 800e5d4:	1a9b      	subs	r3, r3, r2
 800e5d6:	18ca      	adds	r2, r1, r3
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e5dc:	2300      	movs	r3, #0
}
 800e5de:	4618      	mov	r0, r3
 800e5e0:	3718      	adds	r7, #24
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	bd80      	pop	{r7, pc}

0800e5e6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e5e6:	b580      	push	{r7, lr}
 800e5e8:	b086      	sub	sp, #24
 800e5ea:	af00      	add	r7, sp, #0
 800e5ec:	6078      	str	r0, [r7, #4]
 800e5ee:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e5f6:	2100      	movs	r1, #0
 800e5f8:	6878      	ldr	r0, [r7, #4]
 800e5fa:	f7ff fe95 	bl	800e328 <dir_sdi>
 800e5fe:	4603      	mov	r3, r0
 800e600:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e602:	7dfb      	ldrb	r3, [r7, #23]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d12b      	bne.n	800e660 <dir_alloc+0x7a>
		n = 0;
 800e608:	2300      	movs	r3, #0
 800e60a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	69db      	ldr	r3, [r3, #28]
 800e610:	4619      	mov	r1, r3
 800e612:	68f8      	ldr	r0, [r7, #12]
 800e614:	f7ff faa6 	bl	800db64 <move_window>
 800e618:	4603      	mov	r3, r0
 800e61a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e61c:	7dfb      	ldrb	r3, [r7, #23]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d11d      	bne.n	800e65e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	6a1b      	ldr	r3, [r3, #32]
 800e626:	781b      	ldrb	r3, [r3, #0]
 800e628:	2be5      	cmp	r3, #229	; 0xe5
 800e62a:	d004      	beq.n	800e636 <dir_alloc+0x50>
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	6a1b      	ldr	r3, [r3, #32]
 800e630:	781b      	ldrb	r3, [r3, #0]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d107      	bne.n	800e646 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e636:	693b      	ldr	r3, [r7, #16]
 800e638:	3301      	adds	r3, #1
 800e63a:	613b      	str	r3, [r7, #16]
 800e63c:	693a      	ldr	r2, [r7, #16]
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	429a      	cmp	r2, r3
 800e642:	d102      	bne.n	800e64a <dir_alloc+0x64>
 800e644:	e00c      	b.n	800e660 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e646:	2300      	movs	r3, #0
 800e648:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e64a:	2101      	movs	r1, #1
 800e64c:	6878      	ldr	r0, [r7, #4]
 800e64e:	f7ff fef4 	bl	800e43a <dir_next>
 800e652:	4603      	mov	r3, r0
 800e654:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e656:	7dfb      	ldrb	r3, [r7, #23]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d0d7      	beq.n	800e60c <dir_alloc+0x26>
 800e65c:	e000      	b.n	800e660 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e65e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e660:	7dfb      	ldrb	r3, [r7, #23]
 800e662:	2b04      	cmp	r3, #4
 800e664:	d101      	bne.n	800e66a <dir_alloc+0x84>
 800e666:	2307      	movs	r3, #7
 800e668:	75fb      	strb	r3, [r7, #23]
	return res;
 800e66a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e66c:	4618      	mov	r0, r3
 800e66e:	3718      	adds	r7, #24
 800e670:	46bd      	mov	sp, r7
 800e672:	bd80      	pop	{r7, pc}

0800e674 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b084      	sub	sp, #16
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
 800e67c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e67e:	683b      	ldr	r3, [r7, #0]
 800e680:	331a      	adds	r3, #26
 800e682:	4618      	mov	r0, r3
 800e684:	f7fe fffa 	bl	800d67c <ld_word>
 800e688:	4603      	mov	r3, r0
 800e68a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	781b      	ldrb	r3, [r3, #0]
 800e690:	2b03      	cmp	r3, #3
 800e692:	d109      	bne.n	800e6a8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e694:	683b      	ldr	r3, [r7, #0]
 800e696:	3314      	adds	r3, #20
 800e698:	4618      	mov	r0, r3
 800e69a:	f7fe ffef 	bl	800d67c <ld_word>
 800e69e:	4603      	mov	r3, r0
 800e6a0:	041b      	lsls	r3, r3, #16
 800e6a2:	68fa      	ldr	r2, [r7, #12]
 800e6a4:	4313      	orrs	r3, r2
 800e6a6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e6a8:	68fb      	ldr	r3, [r7, #12]
}
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	3710      	adds	r7, #16
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	bd80      	pop	{r7, pc}

0800e6b2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e6b2:	b580      	push	{r7, lr}
 800e6b4:	b084      	sub	sp, #16
 800e6b6:	af00      	add	r7, sp, #0
 800e6b8:	60f8      	str	r0, [r7, #12]
 800e6ba:	60b9      	str	r1, [r7, #8]
 800e6bc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e6be:	68bb      	ldr	r3, [r7, #8]
 800e6c0:	331a      	adds	r3, #26
 800e6c2:	687a      	ldr	r2, [r7, #4]
 800e6c4:	b292      	uxth	r2, r2
 800e6c6:	4611      	mov	r1, r2
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	f7ff f812 	bl	800d6f2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	781b      	ldrb	r3, [r3, #0]
 800e6d2:	2b03      	cmp	r3, #3
 800e6d4:	d109      	bne.n	800e6ea <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e6d6:	68bb      	ldr	r3, [r7, #8]
 800e6d8:	f103 0214 	add.w	r2, r3, #20
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	0c1b      	lsrs	r3, r3, #16
 800e6e0:	b29b      	uxth	r3, r3
 800e6e2:	4619      	mov	r1, r3
 800e6e4:	4610      	mov	r0, r2
 800e6e6:	f7ff f804 	bl	800d6f2 <st_word>
	}
}
 800e6ea:	bf00      	nop
 800e6ec:	3710      	adds	r7, #16
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	bd80      	pop	{r7, pc}

0800e6f2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e6f2:	b580      	push	{r7, lr}
 800e6f4:	b086      	sub	sp, #24
 800e6f6:	af00      	add	r7, sp, #0
 800e6f8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e700:	2100      	movs	r1, #0
 800e702:	6878      	ldr	r0, [r7, #4]
 800e704:	f7ff fe10 	bl	800e328 <dir_sdi>
 800e708:	4603      	mov	r3, r0
 800e70a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e70c:	7dfb      	ldrb	r3, [r7, #23]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d001      	beq.n	800e716 <dir_find+0x24>
 800e712:	7dfb      	ldrb	r3, [r7, #23]
 800e714:	e03e      	b.n	800e794 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	69db      	ldr	r3, [r3, #28]
 800e71a:	4619      	mov	r1, r3
 800e71c:	6938      	ldr	r0, [r7, #16]
 800e71e:	f7ff fa21 	bl	800db64 <move_window>
 800e722:	4603      	mov	r3, r0
 800e724:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e726:	7dfb      	ldrb	r3, [r7, #23]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d12f      	bne.n	800e78c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	6a1b      	ldr	r3, [r3, #32]
 800e730:	781b      	ldrb	r3, [r3, #0]
 800e732:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e734:	7bfb      	ldrb	r3, [r7, #15]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d102      	bne.n	800e740 <dir_find+0x4e>
 800e73a:	2304      	movs	r3, #4
 800e73c:	75fb      	strb	r3, [r7, #23]
 800e73e:	e028      	b.n	800e792 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	6a1b      	ldr	r3, [r3, #32]
 800e744:	330b      	adds	r3, #11
 800e746:	781b      	ldrb	r3, [r3, #0]
 800e748:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e74c:	b2da      	uxtb	r2, r3
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	6a1b      	ldr	r3, [r3, #32]
 800e756:	330b      	adds	r3, #11
 800e758:	781b      	ldrb	r3, [r3, #0]
 800e75a:	f003 0308 	and.w	r3, r3, #8
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d10a      	bne.n	800e778 <dir_find+0x86>
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	6a18      	ldr	r0, [r3, #32]
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	3324      	adds	r3, #36	; 0x24
 800e76a:	220b      	movs	r2, #11
 800e76c:	4619      	mov	r1, r3
 800e76e:	f7ff f843 	bl	800d7f8 <mem_cmp>
 800e772:	4603      	mov	r3, r0
 800e774:	2b00      	cmp	r3, #0
 800e776:	d00b      	beq.n	800e790 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e778:	2100      	movs	r1, #0
 800e77a:	6878      	ldr	r0, [r7, #4]
 800e77c:	f7ff fe5d 	bl	800e43a <dir_next>
 800e780:	4603      	mov	r3, r0
 800e782:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e784:	7dfb      	ldrb	r3, [r7, #23]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d0c5      	beq.n	800e716 <dir_find+0x24>
 800e78a:	e002      	b.n	800e792 <dir_find+0xa0>
		if (res != FR_OK) break;
 800e78c:	bf00      	nop
 800e78e:	e000      	b.n	800e792 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e790:	bf00      	nop

	return res;
 800e792:	7dfb      	ldrb	r3, [r7, #23]
}
 800e794:	4618      	mov	r0, r3
 800e796:	3718      	adds	r7, #24
 800e798:	46bd      	mov	sp, r7
 800e79a:	bd80      	pop	{r7, pc}

0800e79c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b084      	sub	sp, #16
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800e7aa:	2101      	movs	r1, #1
 800e7ac:	6878      	ldr	r0, [r7, #4]
 800e7ae:	f7ff ff1a 	bl	800e5e6 <dir_alloc>
 800e7b2:	4603      	mov	r3, r0
 800e7b4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e7b6:	7bfb      	ldrb	r3, [r7, #15]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d11c      	bne.n	800e7f6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	69db      	ldr	r3, [r3, #28]
 800e7c0:	4619      	mov	r1, r3
 800e7c2:	68b8      	ldr	r0, [r7, #8]
 800e7c4:	f7ff f9ce 	bl	800db64 <move_window>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e7cc:	7bfb      	ldrb	r3, [r7, #15]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d111      	bne.n	800e7f6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	6a1b      	ldr	r3, [r3, #32]
 800e7d6:	2220      	movs	r2, #32
 800e7d8:	2100      	movs	r1, #0
 800e7da:	4618      	mov	r0, r3
 800e7dc:	f7fe fff1 	bl	800d7c2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	6a18      	ldr	r0, [r3, #32]
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	3324      	adds	r3, #36	; 0x24
 800e7e8:	220b      	movs	r2, #11
 800e7ea:	4619      	mov	r1, r3
 800e7ec:	f7fe ffc8 	bl	800d780 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800e7f0:	68bb      	ldr	r3, [r7, #8]
 800e7f2:	2201      	movs	r2, #1
 800e7f4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e7f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	3710      	adds	r7, #16
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	bd80      	pop	{r7, pc}

0800e800 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800e800:	b580      	push	{r7, lr}
 800e802:	b086      	sub	sp, #24
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
 800e808:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800e80a:	683b      	ldr	r3, [r7, #0]
 800e80c:	2200      	movs	r2, #0
 800e80e:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	69db      	ldr	r3, [r3, #28]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d04e      	beq.n	800e8b6 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800e818:	2300      	movs	r3, #0
 800e81a:	613b      	str	r3, [r7, #16]
 800e81c:	693b      	ldr	r3, [r7, #16]
 800e81e:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800e820:	e021      	b.n	800e866 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	6a1a      	ldr	r2, [r3, #32]
 800e826:	697b      	ldr	r3, [r7, #20]
 800e828:	1c59      	adds	r1, r3, #1
 800e82a:	6179      	str	r1, [r7, #20]
 800e82c:	4413      	add	r3, r2
 800e82e:	781b      	ldrb	r3, [r3, #0]
 800e830:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800e832:	7bfb      	ldrb	r3, [r7, #15]
 800e834:	2b20      	cmp	r3, #32
 800e836:	d100      	bne.n	800e83a <get_fileinfo+0x3a>
 800e838:	e015      	b.n	800e866 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800e83a:	7bfb      	ldrb	r3, [r7, #15]
 800e83c:	2b05      	cmp	r3, #5
 800e83e:	d101      	bne.n	800e844 <get_fileinfo+0x44>
 800e840:	23e5      	movs	r3, #229	; 0xe5
 800e842:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800e844:	697b      	ldr	r3, [r7, #20]
 800e846:	2b09      	cmp	r3, #9
 800e848:	d106      	bne.n	800e858 <get_fileinfo+0x58>
 800e84a:	693b      	ldr	r3, [r7, #16]
 800e84c:	1c5a      	adds	r2, r3, #1
 800e84e:	613a      	str	r2, [r7, #16]
 800e850:	683a      	ldr	r2, [r7, #0]
 800e852:	4413      	add	r3, r2
 800e854:	222e      	movs	r2, #46	; 0x2e
 800e856:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800e858:	693b      	ldr	r3, [r7, #16]
 800e85a:	1c5a      	adds	r2, r3, #1
 800e85c:	613a      	str	r2, [r7, #16]
 800e85e:	683a      	ldr	r2, [r7, #0]
 800e860:	4413      	add	r3, r2
 800e862:	7bfa      	ldrb	r2, [r7, #15]
 800e864:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800e866:	697b      	ldr	r3, [r7, #20]
 800e868:	2b0a      	cmp	r3, #10
 800e86a:	d9da      	bls.n	800e822 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800e86c:	683a      	ldr	r2, [r7, #0]
 800e86e:	693b      	ldr	r3, [r7, #16]
 800e870:	4413      	add	r3, r2
 800e872:	3309      	adds	r3, #9
 800e874:	2200      	movs	r2, #0
 800e876:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	6a1b      	ldr	r3, [r3, #32]
 800e87c:	7ada      	ldrb	r2, [r3, #11]
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	6a1b      	ldr	r3, [r3, #32]
 800e886:	331c      	adds	r3, #28
 800e888:	4618      	mov	r0, r3
 800e88a:	f7fe ff0f 	bl	800d6ac <ld_dword>
 800e88e:	4602      	mov	r2, r0
 800e890:	683b      	ldr	r3, [r7, #0]
 800e892:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	6a1b      	ldr	r3, [r3, #32]
 800e898:	3316      	adds	r3, #22
 800e89a:	4618      	mov	r0, r3
 800e89c:	f7fe ff06 	bl	800d6ac <ld_dword>
 800e8a0:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800e8a2:	68bb      	ldr	r3, [r7, #8]
 800e8a4:	b29a      	uxth	r2, r3
 800e8a6:	683b      	ldr	r3, [r7, #0]
 800e8a8:	80da      	strh	r2, [r3, #6]
 800e8aa:	68bb      	ldr	r3, [r7, #8]
 800e8ac:	0c1b      	lsrs	r3, r3, #16
 800e8ae:	b29a      	uxth	r2, r3
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	809a      	strh	r2, [r3, #4]
 800e8b4:	e000      	b.n	800e8b8 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e8b6:	bf00      	nop
}
 800e8b8:	3718      	adds	r7, #24
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	bd80      	pop	{r7, pc}
	...

0800e8c0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b088      	sub	sp, #32
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
 800e8c8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800e8ca:	683b      	ldr	r3, [r7, #0]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	60fb      	str	r3, [r7, #12]
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	3324      	adds	r3, #36	; 0x24
 800e8d4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800e8d6:	220b      	movs	r2, #11
 800e8d8:	2120      	movs	r1, #32
 800e8da:	68b8      	ldr	r0, [r7, #8]
 800e8dc:	f7fe ff71 	bl	800d7c2 <mem_set>
	si = i = 0; ni = 8;
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	613b      	str	r3, [r7, #16]
 800e8e4:	693b      	ldr	r3, [r7, #16]
 800e8e6:	61fb      	str	r3, [r7, #28]
 800e8e8:	2308      	movs	r3, #8
 800e8ea:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800e8ec:	69fb      	ldr	r3, [r7, #28]
 800e8ee:	1c5a      	adds	r2, r3, #1
 800e8f0:	61fa      	str	r2, [r7, #28]
 800e8f2:	68fa      	ldr	r2, [r7, #12]
 800e8f4:	4413      	add	r3, r2
 800e8f6:	781b      	ldrb	r3, [r3, #0]
 800e8f8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e8fa:	7efb      	ldrb	r3, [r7, #27]
 800e8fc:	2b20      	cmp	r3, #32
 800e8fe:	d94e      	bls.n	800e99e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800e900:	7efb      	ldrb	r3, [r7, #27]
 800e902:	2b2f      	cmp	r3, #47	; 0x2f
 800e904:	d006      	beq.n	800e914 <create_name+0x54>
 800e906:	7efb      	ldrb	r3, [r7, #27]
 800e908:	2b5c      	cmp	r3, #92	; 0x5c
 800e90a:	d110      	bne.n	800e92e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e90c:	e002      	b.n	800e914 <create_name+0x54>
 800e90e:	69fb      	ldr	r3, [r7, #28]
 800e910:	3301      	adds	r3, #1
 800e912:	61fb      	str	r3, [r7, #28]
 800e914:	68fa      	ldr	r2, [r7, #12]
 800e916:	69fb      	ldr	r3, [r7, #28]
 800e918:	4413      	add	r3, r2
 800e91a:	781b      	ldrb	r3, [r3, #0]
 800e91c:	2b2f      	cmp	r3, #47	; 0x2f
 800e91e:	d0f6      	beq.n	800e90e <create_name+0x4e>
 800e920:	68fa      	ldr	r2, [r7, #12]
 800e922:	69fb      	ldr	r3, [r7, #28]
 800e924:	4413      	add	r3, r2
 800e926:	781b      	ldrb	r3, [r3, #0]
 800e928:	2b5c      	cmp	r3, #92	; 0x5c
 800e92a:	d0f0      	beq.n	800e90e <create_name+0x4e>
			break;
 800e92c:	e038      	b.n	800e9a0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800e92e:	7efb      	ldrb	r3, [r7, #27]
 800e930:	2b2e      	cmp	r3, #46	; 0x2e
 800e932:	d003      	beq.n	800e93c <create_name+0x7c>
 800e934:	693a      	ldr	r2, [r7, #16]
 800e936:	697b      	ldr	r3, [r7, #20]
 800e938:	429a      	cmp	r2, r3
 800e93a:	d30c      	bcc.n	800e956 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800e93c:	697b      	ldr	r3, [r7, #20]
 800e93e:	2b0b      	cmp	r3, #11
 800e940:	d002      	beq.n	800e948 <create_name+0x88>
 800e942:	7efb      	ldrb	r3, [r7, #27]
 800e944:	2b2e      	cmp	r3, #46	; 0x2e
 800e946:	d001      	beq.n	800e94c <create_name+0x8c>
 800e948:	2306      	movs	r3, #6
 800e94a:	e044      	b.n	800e9d6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800e94c:	2308      	movs	r3, #8
 800e94e:	613b      	str	r3, [r7, #16]
 800e950:	230b      	movs	r3, #11
 800e952:	617b      	str	r3, [r7, #20]
			continue;
 800e954:	e022      	b.n	800e99c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800e956:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	da04      	bge.n	800e968 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800e95e:	7efb      	ldrb	r3, [r7, #27]
 800e960:	3b80      	subs	r3, #128	; 0x80
 800e962:	4a1f      	ldr	r2, [pc, #124]	; (800e9e0 <create_name+0x120>)
 800e964:	5cd3      	ldrb	r3, [r2, r3]
 800e966:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800e968:	7efb      	ldrb	r3, [r7, #27]
 800e96a:	4619      	mov	r1, r3
 800e96c:	481d      	ldr	r0, [pc, #116]	; (800e9e4 <create_name+0x124>)
 800e96e:	f7fe ff6a 	bl	800d846 <chk_chr>
 800e972:	4603      	mov	r3, r0
 800e974:	2b00      	cmp	r3, #0
 800e976:	d001      	beq.n	800e97c <create_name+0xbc>
 800e978:	2306      	movs	r3, #6
 800e97a:	e02c      	b.n	800e9d6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800e97c:	7efb      	ldrb	r3, [r7, #27]
 800e97e:	2b60      	cmp	r3, #96	; 0x60
 800e980:	d905      	bls.n	800e98e <create_name+0xce>
 800e982:	7efb      	ldrb	r3, [r7, #27]
 800e984:	2b7a      	cmp	r3, #122	; 0x7a
 800e986:	d802      	bhi.n	800e98e <create_name+0xce>
 800e988:	7efb      	ldrb	r3, [r7, #27]
 800e98a:	3b20      	subs	r3, #32
 800e98c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800e98e:	693b      	ldr	r3, [r7, #16]
 800e990:	1c5a      	adds	r2, r3, #1
 800e992:	613a      	str	r2, [r7, #16]
 800e994:	68ba      	ldr	r2, [r7, #8]
 800e996:	4413      	add	r3, r2
 800e998:	7efa      	ldrb	r2, [r7, #27]
 800e99a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800e99c:	e7a6      	b.n	800e8ec <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e99e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800e9a0:	68fa      	ldr	r2, [r7, #12]
 800e9a2:	69fb      	ldr	r3, [r7, #28]
 800e9a4:	441a      	add	r2, r3
 800e9a6:	683b      	ldr	r3, [r7, #0]
 800e9a8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800e9aa:	693b      	ldr	r3, [r7, #16]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d101      	bne.n	800e9b4 <create_name+0xf4>
 800e9b0:	2306      	movs	r3, #6
 800e9b2:	e010      	b.n	800e9d6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e9b4:	68bb      	ldr	r3, [r7, #8]
 800e9b6:	781b      	ldrb	r3, [r3, #0]
 800e9b8:	2be5      	cmp	r3, #229	; 0xe5
 800e9ba:	d102      	bne.n	800e9c2 <create_name+0x102>
 800e9bc:	68bb      	ldr	r3, [r7, #8]
 800e9be:	2205      	movs	r2, #5
 800e9c0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e9c2:	7efb      	ldrb	r3, [r7, #27]
 800e9c4:	2b20      	cmp	r3, #32
 800e9c6:	d801      	bhi.n	800e9cc <create_name+0x10c>
 800e9c8:	2204      	movs	r2, #4
 800e9ca:	e000      	b.n	800e9ce <create_name+0x10e>
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	68bb      	ldr	r3, [r7, #8]
 800e9d0:	330b      	adds	r3, #11
 800e9d2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800e9d4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	3720      	adds	r7, #32
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	bd80      	pop	{r7, pc}
 800e9de:	bf00      	nop
 800e9e0:	08014ca8 	.word	0x08014ca8
 800e9e4:	08014c30 	.word	0x08014c30

0800e9e8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b086      	sub	sp, #24
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
 800e9f0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e9f6:	693b      	ldr	r3, [r7, #16]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e9fc:	e002      	b.n	800ea04 <follow_path+0x1c>
 800e9fe:	683b      	ldr	r3, [r7, #0]
 800ea00:	3301      	adds	r3, #1
 800ea02:	603b      	str	r3, [r7, #0]
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	781b      	ldrb	r3, [r3, #0]
 800ea08:	2b2f      	cmp	r3, #47	; 0x2f
 800ea0a:	d0f8      	beq.n	800e9fe <follow_path+0x16>
 800ea0c:	683b      	ldr	r3, [r7, #0]
 800ea0e:	781b      	ldrb	r3, [r3, #0]
 800ea10:	2b5c      	cmp	r3, #92	; 0x5c
 800ea12:	d0f4      	beq.n	800e9fe <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ea14:	693b      	ldr	r3, [r7, #16]
 800ea16:	2200      	movs	r2, #0
 800ea18:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ea1a:	683b      	ldr	r3, [r7, #0]
 800ea1c:	781b      	ldrb	r3, [r3, #0]
 800ea1e:	2b1f      	cmp	r3, #31
 800ea20:	d80a      	bhi.n	800ea38 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	2280      	movs	r2, #128	; 0x80
 800ea26:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ea2a:	2100      	movs	r1, #0
 800ea2c:	6878      	ldr	r0, [r7, #4]
 800ea2e:	f7ff fc7b 	bl	800e328 <dir_sdi>
 800ea32:	4603      	mov	r3, r0
 800ea34:	75fb      	strb	r3, [r7, #23]
 800ea36:	e048      	b.n	800eaca <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ea38:	463b      	mov	r3, r7
 800ea3a:	4619      	mov	r1, r3
 800ea3c:	6878      	ldr	r0, [r7, #4]
 800ea3e:	f7ff ff3f 	bl	800e8c0 <create_name>
 800ea42:	4603      	mov	r3, r0
 800ea44:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ea46:	7dfb      	ldrb	r3, [r7, #23]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d139      	bne.n	800eac0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ea4c:	6878      	ldr	r0, [r7, #4]
 800ea4e:	f7ff fe50 	bl	800e6f2 <dir_find>
 800ea52:	4603      	mov	r3, r0
 800ea54:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ea5c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ea5e:	7dfb      	ldrb	r3, [r7, #23]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d00a      	beq.n	800ea7a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ea64:	7dfb      	ldrb	r3, [r7, #23]
 800ea66:	2b04      	cmp	r3, #4
 800ea68:	d12c      	bne.n	800eac4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ea6a:	7afb      	ldrb	r3, [r7, #11]
 800ea6c:	f003 0304 	and.w	r3, r3, #4
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d127      	bne.n	800eac4 <follow_path+0xdc>
 800ea74:	2305      	movs	r3, #5
 800ea76:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ea78:	e024      	b.n	800eac4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ea7a:	7afb      	ldrb	r3, [r7, #11]
 800ea7c:	f003 0304 	and.w	r3, r3, #4
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d121      	bne.n	800eac8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ea84:	693b      	ldr	r3, [r7, #16]
 800ea86:	799b      	ldrb	r3, [r3, #6]
 800ea88:	f003 0310 	and.w	r3, r3, #16
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d102      	bne.n	800ea96 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ea90:	2305      	movs	r3, #5
 800ea92:	75fb      	strb	r3, [r7, #23]
 800ea94:	e019      	b.n	800eaca <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	695b      	ldr	r3, [r3, #20]
 800eaa0:	68fa      	ldr	r2, [r7, #12]
 800eaa2:	8992      	ldrh	r2, [r2, #12]
 800eaa4:	fbb3 f0f2 	udiv	r0, r3, r2
 800eaa8:	fb00 f202 	mul.w	r2, r0, r2
 800eaac:	1a9b      	subs	r3, r3, r2
 800eaae:	440b      	add	r3, r1
 800eab0:	4619      	mov	r1, r3
 800eab2:	68f8      	ldr	r0, [r7, #12]
 800eab4:	f7ff fdde 	bl	800e674 <ld_clust>
 800eab8:	4602      	mov	r2, r0
 800eaba:	693b      	ldr	r3, [r7, #16]
 800eabc:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800eabe:	e7bb      	b.n	800ea38 <follow_path+0x50>
			if (res != FR_OK) break;
 800eac0:	bf00      	nop
 800eac2:	e002      	b.n	800eaca <follow_path+0xe2>
				break;
 800eac4:	bf00      	nop
 800eac6:	e000      	b.n	800eaca <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800eac8:	bf00      	nop
			}
		}
	}

	return res;
 800eaca:	7dfb      	ldrb	r3, [r7, #23]
}
 800eacc:	4618      	mov	r0, r3
 800eace:	3718      	adds	r7, #24
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bd80      	pop	{r7, pc}

0800ead4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ead4:	b480      	push	{r7}
 800ead6:	b087      	sub	sp, #28
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800eadc:	f04f 33ff 	mov.w	r3, #4294967295
 800eae0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d031      	beq.n	800eb4e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	617b      	str	r3, [r7, #20]
 800eaf0:	e002      	b.n	800eaf8 <get_ldnumber+0x24>
 800eaf2:	697b      	ldr	r3, [r7, #20]
 800eaf4:	3301      	adds	r3, #1
 800eaf6:	617b      	str	r3, [r7, #20]
 800eaf8:	697b      	ldr	r3, [r7, #20]
 800eafa:	781b      	ldrb	r3, [r3, #0]
 800eafc:	2b20      	cmp	r3, #32
 800eafe:	d903      	bls.n	800eb08 <get_ldnumber+0x34>
 800eb00:	697b      	ldr	r3, [r7, #20]
 800eb02:	781b      	ldrb	r3, [r3, #0]
 800eb04:	2b3a      	cmp	r3, #58	; 0x3a
 800eb06:	d1f4      	bne.n	800eaf2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800eb08:	697b      	ldr	r3, [r7, #20]
 800eb0a:	781b      	ldrb	r3, [r3, #0]
 800eb0c:	2b3a      	cmp	r3, #58	; 0x3a
 800eb0e:	d11c      	bne.n	800eb4a <get_ldnumber+0x76>
			tp = *path;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	1c5a      	adds	r2, r3, #1
 800eb1a:	60fa      	str	r2, [r7, #12]
 800eb1c:	781b      	ldrb	r3, [r3, #0]
 800eb1e:	3b30      	subs	r3, #48	; 0x30
 800eb20:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800eb22:	68bb      	ldr	r3, [r7, #8]
 800eb24:	2b09      	cmp	r3, #9
 800eb26:	d80e      	bhi.n	800eb46 <get_ldnumber+0x72>
 800eb28:	68fa      	ldr	r2, [r7, #12]
 800eb2a:	697b      	ldr	r3, [r7, #20]
 800eb2c:	429a      	cmp	r2, r3
 800eb2e:	d10a      	bne.n	800eb46 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800eb30:	68bb      	ldr	r3, [r7, #8]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d107      	bne.n	800eb46 <get_ldnumber+0x72>
					vol = (int)i;
 800eb36:	68bb      	ldr	r3, [r7, #8]
 800eb38:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800eb3a:	697b      	ldr	r3, [r7, #20]
 800eb3c:	3301      	adds	r3, #1
 800eb3e:	617b      	str	r3, [r7, #20]
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	697a      	ldr	r2, [r7, #20]
 800eb44:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800eb46:	693b      	ldr	r3, [r7, #16]
 800eb48:	e002      	b.n	800eb50 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800eb4e:	693b      	ldr	r3, [r7, #16]
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	371c      	adds	r7, #28
 800eb54:	46bd      	mov	sp, r7
 800eb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5a:	4770      	bx	lr

0800eb5c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b082      	sub	sp, #8
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
 800eb64:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	2200      	movs	r2, #0
 800eb6a:	70da      	strb	r2, [r3, #3]
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	f04f 32ff 	mov.w	r2, #4294967295
 800eb72:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800eb74:	6839      	ldr	r1, [r7, #0]
 800eb76:	6878      	ldr	r0, [r7, #4]
 800eb78:	f7fe fff4 	bl	800db64 <move_window>
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d001      	beq.n	800eb86 <check_fs+0x2a>
 800eb82:	2304      	movs	r3, #4
 800eb84:	e038      	b.n	800ebf8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	3334      	adds	r3, #52	; 0x34
 800eb8a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800eb8e:	4618      	mov	r0, r3
 800eb90:	f7fe fd74 	bl	800d67c <ld_word>
 800eb94:	4603      	mov	r3, r0
 800eb96:	461a      	mov	r2, r3
 800eb98:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800eb9c:	429a      	cmp	r2, r3
 800eb9e:	d001      	beq.n	800eba4 <check_fs+0x48>
 800eba0:	2303      	movs	r3, #3
 800eba2:	e029      	b.n	800ebf8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ebaa:	2be9      	cmp	r3, #233	; 0xe9
 800ebac:	d009      	beq.n	800ebc2 <check_fs+0x66>
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ebb4:	2beb      	cmp	r3, #235	; 0xeb
 800ebb6:	d11e      	bne.n	800ebf6 <check_fs+0x9a>
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800ebbe:	2b90      	cmp	r3, #144	; 0x90
 800ebc0:	d119      	bne.n	800ebf6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	3334      	adds	r3, #52	; 0x34
 800ebc6:	3336      	adds	r3, #54	; 0x36
 800ebc8:	4618      	mov	r0, r3
 800ebca:	f7fe fd6f 	bl	800d6ac <ld_dword>
 800ebce:	4603      	mov	r3, r0
 800ebd0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ebd4:	4a0a      	ldr	r2, [pc, #40]	; (800ec00 <check_fs+0xa4>)
 800ebd6:	4293      	cmp	r3, r2
 800ebd8:	d101      	bne.n	800ebde <check_fs+0x82>
 800ebda:	2300      	movs	r3, #0
 800ebdc:	e00c      	b.n	800ebf8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	3334      	adds	r3, #52	; 0x34
 800ebe2:	3352      	adds	r3, #82	; 0x52
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	f7fe fd61 	bl	800d6ac <ld_dword>
 800ebea:	4603      	mov	r3, r0
 800ebec:	4a05      	ldr	r2, [pc, #20]	; (800ec04 <check_fs+0xa8>)
 800ebee:	4293      	cmp	r3, r2
 800ebf0:	d101      	bne.n	800ebf6 <check_fs+0x9a>
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	e000      	b.n	800ebf8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ebf6:	2302      	movs	r3, #2
}
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	3708      	adds	r7, #8
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	bd80      	pop	{r7, pc}
 800ec00:	00544146 	.word	0x00544146
 800ec04:	33544146 	.word	0x33544146

0800ec08 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b096      	sub	sp, #88	; 0x58
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	60f8      	str	r0, [r7, #12]
 800ec10:	60b9      	str	r1, [r7, #8]
 800ec12:	4613      	mov	r3, r2
 800ec14:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ec16:	68bb      	ldr	r3, [r7, #8]
 800ec18:	2200      	movs	r2, #0
 800ec1a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ec1c:	68f8      	ldr	r0, [r7, #12]
 800ec1e:	f7ff ff59 	bl	800ead4 <get_ldnumber>
 800ec22:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ec24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	da01      	bge.n	800ec2e <find_volume+0x26>
 800ec2a:	230b      	movs	r3, #11
 800ec2c:	e262      	b.n	800f0f4 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ec2e:	4a9f      	ldr	r2, [pc, #636]	; (800eeac <find_volume+0x2a4>)
 800ec30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec36:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ec38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d101      	bne.n	800ec42 <find_volume+0x3a>
 800ec3e:	230c      	movs	r3, #12
 800ec40:	e258      	b.n	800f0f4 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ec42:	68bb      	ldr	r3, [r7, #8]
 800ec44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec46:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ec48:	79fb      	ldrb	r3, [r7, #7]
 800ec4a:	f023 0301 	bic.w	r3, r3, #1
 800ec4e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ec50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec52:	781b      	ldrb	r3, [r3, #0]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d01a      	beq.n	800ec8e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ec58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec5a:	785b      	ldrb	r3, [r3, #1]
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	f7fe fc6f 	bl	800d540 <disk_status>
 800ec62:	4603      	mov	r3, r0
 800ec64:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ec68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ec6c:	f003 0301 	and.w	r3, r3, #1
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d10c      	bne.n	800ec8e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ec74:	79fb      	ldrb	r3, [r7, #7]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d007      	beq.n	800ec8a <find_volume+0x82>
 800ec7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ec7e:	f003 0304 	and.w	r3, r3, #4
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d001      	beq.n	800ec8a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ec86:	230a      	movs	r3, #10
 800ec88:	e234      	b.n	800f0f4 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	e232      	b.n	800f0f4 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ec8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec90:	2200      	movs	r2, #0
 800ec92:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ec94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec96:	b2da      	uxtb	r2, r3
 800ec98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec9a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ec9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec9e:	785b      	ldrb	r3, [r3, #1]
 800eca0:	4618      	mov	r0, r3
 800eca2:	f7fe fc67 	bl	800d574 <disk_initialize>
 800eca6:	4603      	mov	r3, r0
 800eca8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ecac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ecb0:	f003 0301 	and.w	r3, r3, #1
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d001      	beq.n	800ecbc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ecb8:	2303      	movs	r3, #3
 800ecba:	e21b      	b.n	800f0f4 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ecbc:	79fb      	ldrb	r3, [r7, #7]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d007      	beq.n	800ecd2 <find_volume+0xca>
 800ecc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ecc6:	f003 0304 	and.w	r3, r3, #4
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d001      	beq.n	800ecd2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ecce:	230a      	movs	r3, #10
 800ecd0:	e210      	b.n	800f0f4 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800ecd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecd4:	7858      	ldrb	r0, [r3, #1]
 800ecd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecd8:	330c      	adds	r3, #12
 800ecda:	461a      	mov	r2, r3
 800ecdc:	2102      	movs	r1, #2
 800ecde:	f7fe fcaf 	bl	800d640 <disk_ioctl>
 800ece2:	4603      	mov	r3, r0
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d001      	beq.n	800ecec <find_volume+0xe4>
 800ece8:	2301      	movs	r3, #1
 800ecea:	e203      	b.n	800f0f4 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800ecec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecee:	899b      	ldrh	r3, [r3, #12]
 800ecf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ecf4:	d80d      	bhi.n	800ed12 <find_volume+0x10a>
 800ecf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecf8:	899b      	ldrh	r3, [r3, #12]
 800ecfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ecfe:	d308      	bcc.n	800ed12 <find_volume+0x10a>
 800ed00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed02:	899b      	ldrh	r3, [r3, #12]
 800ed04:	461a      	mov	r2, r3
 800ed06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed08:	899b      	ldrh	r3, [r3, #12]
 800ed0a:	3b01      	subs	r3, #1
 800ed0c:	4013      	ands	r3, r2
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d001      	beq.n	800ed16 <find_volume+0x10e>
 800ed12:	2301      	movs	r3, #1
 800ed14:	e1ee      	b.n	800f0f4 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ed16:	2300      	movs	r3, #0
 800ed18:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ed1a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ed1c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ed1e:	f7ff ff1d 	bl	800eb5c <check_fs>
 800ed22:	4603      	mov	r3, r0
 800ed24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ed28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ed2c:	2b02      	cmp	r3, #2
 800ed2e:	d149      	bne.n	800edc4 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ed30:	2300      	movs	r3, #0
 800ed32:	643b      	str	r3, [r7, #64]	; 0x40
 800ed34:	e01e      	b.n	800ed74 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ed36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed38:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ed3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed3e:	011b      	lsls	r3, r3, #4
 800ed40:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ed44:	4413      	add	r3, r2
 800ed46:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ed48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed4a:	3304      	adds	r3, #4
 800ed4c:	781b      	ldrb	r3, [r3, #0]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d006      	beq.n	800ed60 <find_volume+0x158>
 800ed52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed54:	3308      	adds	r3, #8
 800ed56:	4618      	mov	r0, r3
 800ed58:	f7fe fca8 	bl	800d6ac <ld_dword>
 800ed5c:	4602      	mov	r2, r0
 800ed5e:	e000      	b.n	800ed62 <find_volume+0x15a>
 800ed60:	2200      	movs	r2, #0
 800ed62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed64:	009b      	lsls	r3, r3, #2
 800ed66:	3358      	adds	r3, #88	; 0x58
 800ed68:	443b      	add	r3, r7
 800ed6a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ed6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed70:	3301      	adds	r3, #1
 800ed72:	643b      	str	r3, [r7, #64]	; 0x40
 800ed74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed76:	2b03      	cmp	r3, #3
 800ed78:	d9dd      	bls.n	800ed36 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ed7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d002      	beq.n	800ed8a <find_volume+0x182>
 800ed84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed86:	3b01      	subs	r3, #1
 800ed88:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ed8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed8c:	009b      	lsls	r3, r3, #2
 800ed8e:	3358      	adds	r3, #88	; 0x58
 800ed90:	443b      	add	r3, r7
 800ed92:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ed96:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ed98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d005      	beq.n	800edaa <find_volume+0x1a2>
 800ed9e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800eda0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800eda2:	f7ff fedb 	bl	800eb5c <check_fs>
 800eda6:	4603      	mov	r3, r0
 800eda8:	e000      	b.n	800edac <find_volume+0x1a4>
 800edaa:	2303      	movs	r3, #3
 800edac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800edb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800edb4:	2b01      	cmp	r3, #1
 800edb6:	d905      	bls.n	800edc4 <find_volume+0x1bc>
 800edb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edba:	3301      	adds	r3, #1
 800edbc:	643b      	str	r3, [r7, #64]	; 0x40
 800edbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edc0:	2b03      	cmp	r3, #3
 800edc2:	d9e2      	bls.n	800ed8a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800edc4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800edc8:	2b04      	cmp	r3, #4
 800edca:	d101      	bne.n	800edd0 <find_volume+0x1c8>
 800edcc:	2301      	movs	r3, #1
 800edce:	e191      	b.n	800f0f4 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800edd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800edd4:	2b01      	cmp	r3, #1
 800edd6:	d901      	bls.n	800eddc <find_volume+0x1d4>
 800edd8:	230d      	movs	r3, #13
 800edda:	e18b      	b.n	800f0f4 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800eddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edde:	3334      	adds	r3, #52	; 0x34
 800ede0:	330b      	adds	r3, #11
 800ede2:	4618      	mov	r0, r3
 800ede4:	f7fe fc4a 	bl	800d67c <ld_word>
 800ede8:	4603      	mov	r3, r0
 800edea:	461a      	mov	r2, r3
 800edec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edee:	899b      	ldrh	r3, [r3, #12]
 800edf0:	429a      	cmp	r2, r3
 800edf2:	d001      	beq.n	800edf8 <find_volume+0x1f0>
 800edf4:	230d      	movs	r3, #13
 800edf6:	e17d      	b.n	800f0f4 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800edf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edfa:	3334      	adds	r3, #52	; 0x34
 800edfc:	3316      	adds	r3, #22
 800edfe:	4618      	mov	r0, r3
 800ee00:	f7fe fc3c 	bl	800d67c <ld_word>
 800ee04:	4603      	mov	r3, r0
 800ee06:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ee08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d106      	bne.n	800ee1c <find_volume+0x214>
 800ee0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee10:	3334      	adds	r3, #52	; 0x34
 800ee12:	3324      	adds	r3, #36	; 0x24
 800ee14:	4618      	mov	r0, r3
 800ee16:	f7fe fc49 	bl	800d6ac <ld_dword>
 800ee1a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800ee1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ee20:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ee22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee24:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ee28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee2a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ee2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee2e:	789b      	ldrb	r3, [r3, #2]
 800ee30:	2b01      	cmp	r3, #1
 800ee32:	d005      	beq.n	800ee40 <find_volume+0x238>
 800ee34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee36:	789b      	ldrb	r3, [r3, #2]
 800ee38:	2b02      	cmp	r3, #2
 800ee3a:	d001      	beq.n	800ee40 <find_volume+0x238>
 800ee3c:	230d      	movs	r3, #13
 800ee3e:	e159      	b.n	800f0f4 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ee40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee42:	789b      	ldrb	r3, [r3, #2]
 800ee44:	461a      	mov	r2, r3
 800ee46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee48:	fb02 f303 	mul.w	r3, r2, r3
 800ee4c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ee4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ee54:	b29a      	uxth	r2, r3
 800ee56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee58:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ee5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee5c:	895b      	ldrh	r3, [r3, #10]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d008      	beq.n	800ee74 <find_volume+0x26c>
 800ee62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee64:	895b      	ldrh	r3, [r3, #10]
 800ee66:	461a      	mov	r2, r3
 800ee68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee6a:	895b      	ldrh	r3, [r3, #10]
 800ee6c:	3b01      	subs	r3, #1
 800ee6e:	4013      	ands	r3, r2
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d001      	beq.n	800ee78 <find_volume+0x270>
 800ee74:	230d      	movs	r3, #13
 800ee76:	e13d      	b.n	800f0f4 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ee78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee7a:	3334      	adds	r3, #52	; 0x34
 800ee7c:	3311      	adds	r3, #17
 800ee7e:	4618      	mov	r0, r3
 800ee80:	f7fe fbfc 	bl	800d67c <ld_word>
 800ee84:	4603      	mov	r3, r0
 800ee86:	461a      	mov	r2, r3
 800ee88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee8a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ee8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee8e:	891b      	ldrh	r3, [r3, #8]
 800ee90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee92:	8992      	ldrh	r2, [r2, #12]
 800ee94:	0952      	lsrs	r2, r2, #5
 800ee96:	b292      	uxth	r2, r2
 800ee98:	fbb3 f1f2 	udiv	r1, r3, r2
 800ee9c:	fb01 f202 	mul.w	r2, r1, r2
 800eea0:	1a9b      	subs	r3, r3, r2
 800eea2:	b29b      	uxth	r3, r3
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d003      	beq.n	800eeb0 <find_volume+0x2a8>
 800eea8:	230d      	movs	r3, #13
 800eeaa:	e123      	b.n	800f0f4 <find_volume+0x4ec>
 800eeac:	20002e18 	.word	0x20002e18

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800eeb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeb2:	3334      	adds	r3, #52	; 0x34
 800eeb4:	3313      	adds	r3, #19
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	f7fe fbe0 	bl	800d67c <ld_word>
 800eebc:	4603      	mov	r3, r0
 800eebe:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800eec0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d106      	bne.n	800eed4 <find_volume+0x2cc>
 800eec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eec8:	3334      	adds	r3, #52	; 0x34
 800eeca:	3320      	adds	r3, #32
 800eecc:	4618      	mov	r0, r3
 800eece:	f7fe fbed 	bl	800d6ac <ld_dword>
 800eed2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800eed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eed6:	3334      	adds	r3, #52	; 0x34
 800eed8:	330e      	adds	r3, #14
 800eeda:	4618      	mov	r0, r3
 800eedc:	f7fe fbce 	bl	800d67c <ld_word>
 800eee0:	4603      	mov	r3, r0
 800eee2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800eee4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d101      	bne.n	800eeee <find_volume+0x2e6>
 800eeea:	230d      	movs	r3, #13
 800eeec:	e102      	b.n	800f0f4 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800eeee:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800eef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eef2:	4413      	add	r3, r2
 800eef4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eef6:	8911      	ldrh	r1, [r2, #8]
 800eef8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eefa:	8992      	ldrh	r2, [r2, #12]
 800eefc:	0952      	lsrs	r2, r2, #5
 800eefe:	b292      	uxth	r2, r2
 800ef00:	fbb1 f2f2 	udiv	r2, r1, r2
 800ef04:	b292      	uxth	r2, r2
 800ef06:	4413      	add	r3, r2
 800ef08:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ef0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ef0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef0e:	429a      	cmp	r2, r3
 800ef10:	d201      	bcs.n	800ef16 <find_volume+0x30e>
 800ef12:	230d      	movs	r3, #13
 800ef14:	e0ee      	b.n	800f0f4 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ef16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ef18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef1a:	1ad3      	subs	r3, r2, r3
 800ef1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef1e:	8952      	ldrh	r2, [r2, #10]
 800ef20:	fbb3 f3f2 	udiv	r3, r3, r2
 800ef24:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ef26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d101      	bne.n	800ef30 <find_volume+0x328>
 800ef2c:	230d      	movs	r3, #13
 800ef2e:	e0e1      	b.n	800f0f4 <find_volume+0x4ec>
		fmt = FS_FAT32;
 800ef30:	2303      	movs	r3, #3
 800ef32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ef36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef38:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ef3c:	4293      	cmp	r3, r2
 800ef3e:	d802      	bhi.n	800ef46 <find_volume+0x33e>
 800ef40:	2302      	movs	r3, #2
 800ef42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ef46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef48:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ef4c:	4293      	cmp	r3, r2
 800ef4e:	d802      	bhi.n	800ef56 <find_volume+0x34e>
 800ef50:	2301      	movs	r3, #1
 800ef52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ef56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef58:	1c9a      	adds	r2, r3, #2
 800ef5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef5c:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800ef5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ef62:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ef64:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ef66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef68:	441a      	add	r2, r3
 800ef6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef6c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800ef6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ef70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef72:	441a      	add	r2, r3
 800ef74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef76:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800ef78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ef7c:	2b03      	cmp	r3, #3
 800ef7e:	d11e      	bne.n	800efbe <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ef80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef82:	3334      	adds	r3, #52	; 0x34
 800ef84:	332a      	adds	r3, #42	; 0x2a
 800ef86:	4618      	mov	r0, r3
 800ef88:	f7fe fb78 	bl	800d67c <ld_word>
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d001      	beq.n	800ef96 <find_volume+0x38e>
 800ef92:	230d      	movs	r3, #13
 800ef94:	e0ae      	b.n	800f0f4 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ef96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef98:	891b      	ldrh	r3, [r3, #8]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d001      	beq.n	800efa2 <find_volume+0x39a>
 800ef9e:	230d      	movs	r3, #13
 800efa0:	e0a8      	b.n	800f0f4 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800efa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efa4:	3334      	adds	r3, #52	; 0x34
 800efa6:	332c      	adds	r3, #44	; 0x2c
 800efa8:	4618      	mov	r0, r3
 800efaa:	f7fe fb7f 	bl	800d6ac <ld_dword>
 800efae:	4602      	mov	r2, r0
 800efb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efb2:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800efb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efb6:	699b      	ldr	r3, [r3, #24]
 800efb8:	009b      	lsls	r3, r3, #2
 800efba:	647b      	str	r3, [r7, #68]	; 0x44
 800efbc:	e01f      	b.n	800effe <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800efbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efc0:	891b      	ldrh	r3, [r3, #8]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d101      	bne.n	800efca <find_volume+0x3c2>
 800efc6:	230d      	movs	r3, #13
 800efc8:	e094      	b.n	800f0f4 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800efca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800efce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800efd0:	441a      	add	r2, r3
 800efd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efd4:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800efd6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800efda:	2b02      	cmp	r3, #2
 800efdc:	d103      	bne.n	800efe6 <find_volume+0x3de>
 800efde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efe0:	699b      	ldr	r3, [r3, #24]
 800efe2:	005b      	lsls	r3, r3, #1
 800efe4:	e00a      	b.n	800effc <find_volume+0x3f4>
 800efe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efe8:	699a      	ldr	r2, [r3, #24]
 800efea:	4613      	mov	r3, r2
 800efec:	005b      	lsls	r3, r3, #1
 800efee:	4413      	add	r3, r2
 800eff0:	085a      	lsrs	r2, r3, #1
 800eff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eff4:	699b      	ldr	r3, [r3, #24]
 800eff6:	f003 0301 	and.w	r3, r3, #1
 800effa:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800effc:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800effe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f000:	69da      	ldr	r2, [r3, #28]
 800f002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f004:	899b      	ldrh	r3, [r3, #12]
 800f006:	4619      	mov	r1, r3
 800f008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f00a:	440b      	add	r3, r1
 800f00c:	3b01      	subs	r3, #1
 800f00e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f010:	8989      	ldrh	r1, [r1, #12]
 800f012:	fbb3 f3f1 	udiv	r3, r3, r1
 800f016:	429a      	cmp	r2, r3
 800f018:	d201      	bcs.n	800f01e <find_volume+0x416>
 800f01a:	230d      	movs	r3, #13
 800f01c:	e06a      	b.n	800f0f4 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f01e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f020:	f04f 32ff 	mov.w	r2, #4294967295
 800f024:	615a      	str	r2, [r3, #20]
 800f026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f028:	695a      	ldr	r2, [r3, #20]
 800f02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f02c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800f02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f030:	2280      	movs	r2, #128	; 0x80
 800f032:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f034:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f038:	2b03      	cmp	r3, #3
 800f03a:	d149      	bne.n	800f0d0 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f03e:	3334      	adds	r3, #52	; 0x34
 800f040:	3330      	adds	r3, #48	; 0x30
 800f042:	4618      	mov	r0, r3
 800f044:	f7fe fb1a 	bl	800d67c <ld_word>
 800f048:	4603      	mov	r3, r0
 800f04a:	2b01      	cmp	r3, #1
 800f04c:	d140      	bne.n	800f0d0 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f04e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f050:	3301      	adds	r3, #1
 800f052:	4619      	mov	r1, r3
 800f054:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f056:	f7fe fd85 	bl	800db64 <move_window>
 800f05a:	4603      	mov	r3, r0
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d137      	bne.n	800f0d0 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800f060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f062:	2200      	movs	r2, #0
 800f064:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f068:	3334      	adds	r3, #52	; 0x34
 800f06a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f06e:	4618      	mov	r0, r3
 800f070:	f7fe fb04 	bl	800d67c <ld_word>
 800f074:	4603      	mov	r3, r0
 800f076:	461a      	mov	r2, r3
 800f078:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f07c:	429a      	cmp	r2, r3
 800f07e:	d127      	bne.n	800f0d0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f082:	3334      	adds	r3, #52	; 0x34
 800f084:	4618      	mov	r0, r3
 800f086:	f7fe fb11 	bl	800d6ac <ld_dword>
 800f08a:	4603      	mov	r3, r0
 800f08c:	4a1b      	ldr	r2, [pc, #108]	; (800f0fc <find_volume+0x4f4>)
 800f08e:	4293      	cmp	r3, r2
 800f090:	d11e      	bne.n	800f0d0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f094:	3334      	adds	r3, #52	; 0x34
 800f096:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f09a:	4618      	mov	r0, r3
 800f09c:	f7fe fb06 	bl	800d6ac <ld_dword>
 800f0a0:	4603      	mov	r3, r0
 800f0a2:	4a17      	ldr	r2, [pc, #92]	; (800f100 <find_volume+0x4f8>)
 800f0a4:	4293      	cmp	r3, r2
 800f0a6:	d113      	bne.n	800f0d0 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0aa:	3334      	adds	r3, #52	; 0x34
 800f0ac:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	f7fe fafb 	bl	800d6ac <ld_dword>
 800f0b6:	4602      	mov	r2, r0
 800f0b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0ba:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0be:	3334      	adds	r3, #52	; 0x34
 800f0c0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	f7fe faf1 	bl	800d6ac <ld_dword>
 800f0ca:	4602      	mov	r2, r0
 800f0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0ce:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0d2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800f0d6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f0d8:	4b0a      	ldr	r3, [pc, #40]	; (800f104 <find_volume+0x4fc>)
 800f0da:	881b      	ldrh	r3, [r3, #0]
 800f0dc:	3301      	adds	r3, #1
 800f0de:	b29a      	uxth	r2, r3
 800f0e0:	4b08      	ldr	r3, [pc, #32]	; (800f104 <find_volume+0x4fc>)
 800f0e2:	801a      	strh	r2, [r3, #0]
 800f0e4:	4b07      	ldr	r3, [pc, #28]	; (800f104 <find_volume+0x4fc>)
 800f0e6:	881a      	ldrh	r2, [r3, #0]
 800f0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0ea:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f0ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f0ee:	f7fe fcd1 	bl	800da94 <clear_lock>
#endif
	return FR_OK;
 800f0f2:	2300      	movs	r3, #0
}
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	3758      	adds	r7, #88	; 0x58
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	bd80      	pop	{r7, pc}
 800f0fc:	41615252 	.word	0x41615252
 800f100:	61417272 	.word	0x61417272
 800f104:	20002e1c 	.word	0x20002e1c

0800f108 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	b084      	sub	sp, #16
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
 800f110:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f112:	2309      	movs	r3, #9
 800f114:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d01c      	beq.n	800f156 <validate+0x4e>
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d018      	beq.n	800f156 <validate+0x4e>
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	781b      	ldrb	r3, [r3, #0]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d013      	beq.n	800f156 <validate+0x4e>
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	889a      	ldrh	r2, [r3, #4]
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	88db      	ldrh	r3, [r3, #6]
 800f138:	429a      	cmp	r2, r3
 800f13a:	d10c      	bne.n	800f156 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	785b      	ldrb	r3, [r3, #1]
 800f142:	4618      	mov	r0, r3
 800f144:	f7fe f9fc 	bl	800d540 <disk_status>
 800f148:	4603      	mov	r3, r0
 800f14a:	f003 0301 	and.w	r3, r3, #1
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d101      	bne.n	800f156 <validate+0x4e>
			res = FR_OK;
 800f152:	2300      	movs	r3, #0
 800f154:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f156:	7bfb      	ldrb	r3, [r7, #15]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d102      	bne.n	800f162 <validate+0x5a>
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	e000      	b.n	800f164 <validate+0x5c>
 800f162:	2300      	movs	r3, #0
 800f164:	683a      	ldr	r2, [r7, #0]
 800f166:	6013      	str	r3, [r2, #0]
	return res;
 800f168:	7bfb      	ldrb	r3, [r7, #15]
}
 800f16a:	4618      	mov	r0, r3
 800f16c:	3710      	adds	r7, #16
 800f16e:	46bd      	mov	sp, r7
 800f170:	bd80      	pop	{r7, pc}
	...

0800f174 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f174:	b580      	push	{r7, lr}
 800f176:	b088      	sub	sp, #32
 800f178:	af00      	add	r7, sp, #0
 800f17a:	60f8      	str	r0, [r7, #12]
 800f17c:	60b9      	str	r1, [r7, #8]
 800f17e:	4613      	mov	r3, r2
 800f180:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f182:	68bb      	ldr	r3, [r7, #8]
 800f184:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f186:	f107 0310 	add.w	r3, r7, #16
 800f18a:	4618      	mov	r0, r3
 800f18c:	f7ff fca2 	bl	800ead4 <get_ldnumber>
 800f190:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f192:	69fb      	ldr	r3, [r7, #28]
 800f194:	2b00      	cmp	r3, #0
 800f196:	da01      	bge.n	800f19c <f_mount+0x28>
 800f198:	230b      	movs	r3, #11
 800f19a:	e02b      	b.n	800f1f4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f19c:	4a17      	ldr	r2, [pc, #92]	; (800f1fc <f_mount+0x88>)
 800f19e:	69fb      	ldr	r3, [r7, #28]
 800f1a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f1a4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f1a6:	69bb      	ldr	r3, [r7, #24]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d005      	beq.n	800f1b8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f1ac:	69b8      	ldr	r0, [r7, #24]
 800f1ae:	f7fe fc71 	bl	800da94 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f1b2:	69bb      	ldr	r3, [r7, #24]
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d002      	beq.n	800f1c4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f1c4:	68fa      	ldr	r2, [r7, #12]
 800f1c6:	490d      	ldr	r1, [pc, #52]	; (800f1fc <f_mount+0x88>)
 800f1c8:	69fb      	ldr	r3, [r7, #28]
 800f1ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d002      	beq.n	800f1da <f_mount+0x66>
 800f1d4:	79fb      	ldrb	r3, [r7, #7]
 800f1d6:	2b01      	cmp	r3, #1
 800f1d8:	d001      	beq.n	800f1de <f_mount+0x6a>
 800f1da:	2300      	movs	r3, #0
 800f1dc:	e00a      	b.n	800f1f4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f1de:	f107 010c 	add.w	r1, r7, #12
 800f1e2:	f107 0308 	add.w	r3, r7, #8
 800f1e6:	2200      	movs	r2, #0
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	f7ff fd0d 	bl	800ec08 <find_volume>
 800f1ee:	4603      	mov	r3, r0
 800f1f0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f1f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	3720      	adds	r7, #32
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	bd80      	pop	{r7, pc}
 800f1fc:	20002e18 	.word	0x20002e18

0800f200 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f200:	b580      	push	{r7, lr}
 800f202:	b098      	sub	sp, #96	; 0x60
 800f204:	af00      	add	r7, sp, #0
 800f206:	60f8      	str	r0, [r7, #12]
 800f208:	60b9      	str	r1, [r7, #8]
 800f20a:	4613      	mov	r3, r2
 800f20c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d101      	bne.n	800f218 <f_open+0x18>
 800f214:	2309      	movs	r3, #9
 800f216:	e1bb      	b.n	800f590 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f218:	79fb      	ldrb	r3, [r7, #7]
 800f21a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f21e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f220:	79fa      	ldrb	r2, [r7, #7]
 800f222:	f107 0110 	add.w	r1, r7, #16
 800f226:	f107 0308 	add.w	r3, r7, #8
 800f22a:	4618      	mov	r0, r3
 800f22c:	f7ff fcec 	bl	800ec08 <find_volume>
 800f230:	4603      	mov	r3, r0
 800f232:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800f236:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	f040 819f 	bne.w	800f57e <f_open+0x37e>
		dj.obj.fs = fs;
 800f240:	693b      	ldr	r3, [r7, #16]
 800f242:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f244:	68ba      	ldr	r2, [r7, #8]
 800f246:	f107 0314 	add.w	r3, r7, #20
 800f24a:	4611      	mov	r1, r2
 800f24c:	4618      	mov	r0, r3
 800f24e:	f7ff fbcb 	bl	800e9e8 <follow_path>
 800f252:	4603      	mov	r3, r0
 800f254:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f258:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d11a      	bne.n	800f296 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f260:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f264:	b25b      	sxtb	r3, r3
 800f266:	2b00      	cmp	r3, #0
 800f268:	da03      	bge.n	800f272 <f_open+0x72>
				res = FR_INVALID_NAME;
 800f26a:	2306      	movs	r3, #6
 800f26c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f270:	e011      	b.n	800f296 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f272:	79fb      	ldrb	r3, [r7, #7]
 800f274:	f023 0301 	bic.w	r3, r3, #1
 800f278:	2b00      	cmp	r3, #0
 800f27a:	bf14      	ite	ne
 800f27c:	2301      	movne	r3, #1
 800f27e:	2300      	moveq	r3, #0
 800f280:	b2db      	uxtb	r3, r3
 800f282:	461a      	mov	r2, r3
 800f284:	f107 0314 	add.w	r3, r7, #20
 800f288:	4611      	mov	r1, r2
 800f28a:	4618      	mov	r0, r3
 800f28c:	f7fe faf6 	bl	800d87c <chk_lock>
 800f290:	4603      	mov	r3, r0
 800f292:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f296:	79fb      	ldrb	r3, [r7, #7]
 800f298:	f003 031c 	and.w	r3, r3, #28
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d07f      	beq.n	800f3a0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800f2a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d017      	beq.n	800f2d8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f2a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f2ac:	2b04      	cmp	r3, #4
 800f2ae:	d10e      	bne.n	800f2ce <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f2b0:	f7fe fb40 	bl	800d934 <enq_lock>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d006      	beq.n	800f2c8 <f_open+0xc8>
 800f2ba:	f107 0314 	add.w	r3, r7, #20
 800f2be:	4618      	mov	r0, r3
 800f2c0:	f7ff fa6c 	bl	800e79c <dir_register>
 800f2c4:	4603      	mov	r3, r0
 800f2c6:	e000      	b.n	800f2ca <f_open+0xca>
 800f2c8:	2312      	movs	r3, #18
 800f2ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f2ce:	79fb      	ldrb	r3, [r7, #7]
 800f2d0:	f043 0308 	orr.w	r3, r3, #8
 800f2d4:	71fb      	strb	r3, [r7, #7]
 800f2d6:	e010      	b.n	800f2fa <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f2d8:	7ebb      	ldrb	r3, [r7, #26]
 800f2da:	f003 0311 	and.w	r3, r3, #17
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d003      	beq.n	800f2ea <f_open+0xea>
					res = FR_DENIED;
 800f2e2:	2307      	movs	r3, #7
 800f2e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f2e8:	e007      	b.n	800f2fa <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f2ea:	79fb      	ldrb	r3, [r7, #7]
 800f2ec:	f003 0304 	and.w	r3, r3, #4
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d002      	beq.n	800f2fa <f_open+0xfa>
 800f2f4:	2308      	movs	r3, #8
 800f2f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f2fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d168      	bne.n	800f3d4 <f_open+0x1d4>
 800f302:	79fb      	ldrb	r3, [r7, #7]
 800f304:	f003 0308 	and.w	r3, r3, #8
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d063      	beq.n	800f3d4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800f30c:	f7fd fee4 	bl	800d0d8 <get_fattime>
 800f310:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f314:	330e      	adds	r3, #14
 800f316:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f318:	4618      	mov	r0, r3
 800f31a:	f7fe fa05 	bl	800d728 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f31e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f320:	3316      	adds	r3, #22
 800f322:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f324:	4618      	mov	r0, r3
 800f326:	f7fe f9ff 	bl	800d728 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f32a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f32c:	330b      	adds	r3, #11
 800f32e:	2220      	movs	r2, #32
 800f330:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f332:	693b      	ldr	r3, [r7, #16]
 800f334:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f336:	4611      	mov	r1, r2
 800f338:	4618      	mov	r0, r3
 800f33a:	f7ff f99b 	bl	800e674 <ld_clust>
 800f33e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f340:	693b      	ldr	r3, [r7, #16]
 800f342:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f344:	2200      	movs	r2, #0
 800f346:	4618      	mov	r0, r3
 800f348:	f7ff f9b3 	bl	800e6b2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f34c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f34e:	331c      	adds	r3, #28
 800f350:	2100      	movs	r1, #0
 800f352:	4618      	mov	r0, r3
 800f354:	f7fe f9e8 	bl	800d728 <st_dword>
					fs->wflag = 1;
 800f358:	693b      	ldr	r3, [r7, #16]
 800f35a:	2201      	movs	r2, #1
 800f35c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f35e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f360:	2b00      	cmp	r3, #0
 800f362:	d037      	beq.n	800f3d4 <f_open+0x1d4>
						dw = fs->winsect;
 800f364:	693b      	ldr	r3, [r7, #16]
 800f366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f368:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800f36a:	f107 0314 	add.w	r3, r7, #20
 800f36e:	2200      	movs	r2, #0
 800f370:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f372:	4618      	mov	r0, r3
 800f374:	f7fe fea3 	bl	800e0be <remove_chain>
 800f378:	4603      	mov	r3, r0
 800f37a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800f37e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f382:	2b00      	cmp	r3, #0
 800f384:	d126      	bne.n	800f3d4 <f_open+0x1d4>
							res = move_window(fs, dw);
 800f386:	693b      	ldr	r3, [r7, #16]
 800f388:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f38a:	4618      	mov	r0, r3
 800f38c:	f7fe fbea 	bl	800db64 <move_window>
 800f390:	4603      	mov	r3, r0
 800f392:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f396:	693b      	ldr	r3, [r7, #16]
 800f398:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f39a:	3a01      	subs	r2, #1
 800f39c:	611a      	str	r2, [r3, #16]
 800f39e:	e019      	b.n	800f3d4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f3a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d115      	bne.n	800f3d4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f3a8:	7ebb      	ldrb	r3, [r7, #26]
 800f3aa:	f003 0310 	and.w	r3, r3, #16
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d003      	beq.n	800f3ba <f_open+0x1ba>
					res = FR_NO_FILE;
 800f3b2:	2304      	movs	r3, #4
 800f3b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f3b8:	e00c      	b.n	800f3d4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f3ba:	79fb      	ldrb	r3, [r7, #7]
 800f3bc:	f003 0302 	and.w	r3, r3, #2
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d007      	beq.n	800f3d4 <f_open+0x1d4>
 800f3c4:	7ebb      	ldrb	r3, [r7, #26]
 800f3c6:	f003 0301 	and.w	r3, r3, #1
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d002      	beq.n	800f3d4 <f_open+0x1d4>
						res = FR_DENIED;
 800f3ce:	2307      	movs	r3, #7
 800f3d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800f3d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d128      	bne.n	800f42e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f3dc:	79fb      	ldrb	r3, [r7, #7]
 800f3de:	f003 0308 	and.w	r3, r3, #8
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d003      	beq.n	800f3ee <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800f3e6:	79fb      	ldrb	r3, [r7, #7]
 800f3e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f3ec:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f3ee:	693b      	ldr	r3, [r7, #16]
 800f3f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800f3f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f3fc:	79fb      	ldrb	r3, [r7, #7]
 800f3fe:	f023 0301 	bic.w	r3, r3, #1
 800f402:	2b00      	cmp	r3, #0
 800f404:	bf14      	ite	ne
 800f406:	2301      	movne	r3, #1
 800f408:	2300      	moveq	r3, #0
 800f40a:	b2db      	uxtb	r3, r3
 800f40c:	461a      	mov	r2, r3
 800f40e:	f107 0314 	add.w	r3, r7, #20
 800f412:	4611      	mov	r1, r2
 800f414:	4618      	mov	r0, r3
 800f416:	f7fe faaf 	bl	800d978 <inc_lock>
 800f41a:	4602      	mov	r2, r0
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	691b      	ldr	r3, [r3, #16]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d102      	bne.n	800f42e <f_open+0x22e>
 800f428:	2302      	movs	r3, #2
 800f42a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f42e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f432:	2b00      	cmp	r3, #0
 800f434:	f040 80a3 	bne.w	800f57e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f438:	693b      	ldr	r3, [r7, #16]
 800f43a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f43c:	4611      	mov	r1, r2
 800f43e:	4618      	mov	r0, r3
 800f440:	f7ff f918 	bl	800e674 <ld_clust>
 800f444:	4602      	mov	r2, r0
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f44a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f44c:	331c      	adds	r3, #28
 800f44e:	4618      	mov	r0, r3
 800f450:	f7fe f92c 	bl	800d6ac <ld_dword>
 800f454:	4602      	mov	r2, r0
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	2200      	movs	r2, #0
 800f45e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f460:	693a      	ldr	r2, [r7, #16]
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f466:	693b      	ldr	r3, [r7, #16]
 800f468:	88da      	ldrh	r2, [r3, #6]
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	79fa      	ldrb	r2, [r7, #7]
 800f472:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	2200      	movs	r2, #0
 800f478:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	2200      	movs	r2, #0
 800f47e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	2200      	movs	r2, #0
 800f484:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	3330      	adds	r3, #48	; 0x30
 800f48a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f48e:	2100      	movs	r1, #0
 800f490:	4618      	mov	r0, r3
 800f492:	f7fe f996 	bl	800d7c2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f496:	79fb      	ldrb	r3, [r7, #7]
 800f498:	f003 0320 	and.w	r3, r3, #32
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d06e      	beq.n	800f57e <f_open+0x37e>
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	68db      	ldr	r3, [r3, #12]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d06a      	beq.n	800f57e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	68da      	ldr	r2, [r3, #12]
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f4b0:	693b      	ldr	r3, [r7, #16]
 800f4b2:	895b      	ldrh	r3, [r3, #10]
 800f4b4:	461a      	mov	r2, r3
 800f4b6:	693b      	ldr	r3, [r7, #16]
 800f4b8:	899b      	ldrh	r3, [r3, #12]
 800f4ba:	fb02 f303 	mul.w	r3, r2, r3
 800f4be:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	689b      	ldr	r3, [r3, #8]
 800f4c4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	68db      	ldr	r3, [r3, #12]
 800f4ca:	657b      	str	r3, [r7, #84]	; 0x54
 800f4cc:	e016      	b.n	800f4fc <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	f7fe fc03 	bl	800dcde <get_fat>
 800f4d8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800f4da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f4dc:	2b01      	cmp	r3, #1
 800f4de:	d802      	bhi.n	800f4e6 <f_open+0x2e6>
 800f4e0:	2302      	movs	r3, #2
 800f4e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f4e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f4e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4ec:	d102      	bne.n	800f4f4 <f_open+0x2f4>
 800f4ee:	2301      	movs	r3, #1
 800f4f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f4f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f4f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f4f8:	1ad3      	subs	r3, r2, r3
 800f4fa:	657b      	str	r3, [r7, #84]	; 0x54
 800f4fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f500:	2b00      	cmp	r3, #0
 800f502:	d103      	bne.n	800f50c <f_open+0x30c>
 800f504:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f506:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f508:	429a      	cmp	r2, r3
 800f50a:	d8e0      	bhi.n	800f4ce <f_open+0x2ce>
				}
				fp->clust = clst;
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f510:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f512:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f516:	2b00      	cmp	r3, #0
 800f518:	d131      	bne.n	800f57e <f_open+0x37e>
 800f51a:	693b      	ldr	r3, [r7, #16]
 800f51c:	899b      	ldrh	r3, [r3, #12]
 800f51e:	461a      	mov	r2, r3
 800f520:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f522:	fbb3 f1f2 	udiv	r1, r3, r2
 800f526:	fb01 f202 	mul.w	r2, r1, r2
 800f52a:	1a9b      	subs	r3, r3, r2
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d026      	beq.n	800f57e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f530:	693b      	ldr	r3, [r7, #16]
 800f532:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f534:	4618      	mov	r0, r3
 800f536:	f7fe fbb3 	bl	800dca0 <clust2sect>
 800f53a:	6478      	str	r0, [r7, #68]	; 0x44
 800f53c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d103      	bne.n	800f54a <f_open+0x34a>
						res = FR_INT_ERR;
 800f542:	2302      	movs	r3, #2
 800f544:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f548:	e019      	b.n	800f57e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f54a:	693b      	ldr	r3, [r7, #16]
 800f54c:	899b      	ldrh	r3, [r3, #12]
 800f54e:	461a      	mov	r2, r3
 800f550:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f552:	fbb3 f2f2 	udiv	r2, r3, r2
 800f556:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f558:	441a      	add	r2, r3
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f55e:	693b      	ldr	r3, [r7, #16]
 800f560:	7858      	ldrb	r0, [r3, #1]
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	6a1a      	ldr	r2, [r3, #32]
 800f56c:	2301      	movs	r3, #1
 800f56e:	f7fe f827 	bl	800d5c0 <disk_read>
 800f572:	4603      	mov	r3, r0
 800f574:	2b00      	cmp	r3, #0
 800f576:	d002      	beq.n	800f57e <f_open+0x37e>
 800f578:	2301      	movs	r3, #1
 800f57a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f57e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f582:	2b00      	cmp	r3, #0
 800f584:	d002      	beq.n	800f58c <f_open+0x38c>
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	2200      	movs	r2, #0
 800f58a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f58c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800f590:	4618      	mov	r0, r3
 800f592:	3760      	adds	r7, #96	; 0x60
 800f594:	46bd      	mov	sp, r7
 800f596:	bd80      	pop	{r7, pc}

0800f598 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f598:	b580      	push	{r7, lr}
 800f59a:	b08c      	sub	sp, #48	; 0x30
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	60f8      	str	r0, [r7, #12]
 800f5a0:	60b9      	str	r1, [r7, #8]
 800f5a2:	607a      	str	r2, [r7, #4]
 800f5a4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800f5a6:	68bb      	ldr	r3, [r7, #8]
 800f5a8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f5aa:	683b      	ldr	r3, [r7, #0]
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	f107 0210 	add.w	r2, r7, #16
 800f5b6:	4611      	mov	r1, r2
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	f7ff fda5 	bl	800f108 <validate>
 800f5be:	4603      	mov	r3, r0
 800f5c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f5c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d107      	bne.n	800f5dc <f_write+0x44>
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	7d5b      	ldrb	r3, [r3, #21]
 800f5d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f5d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d002      	beq.n	800f5e2 <f_write+0x4a>
 800f5dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f5e0:	e16a      	b.n	800f8b8 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	7d1b      	ldrb	r3, [r3, #20]
 800f5e6:	f003 0302 	and.w	r3, r3, #2
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d101      	bne.n	800f5f2 <f_write+0x5a>
 800f5ee:	2307      	movs	r3, #7
 800f5f0:	e162      	b.n	800f8b8 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	699a      	ldr	r2, [r3, #24]
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	441a      	add	r2, r3
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	699b      	ldr	r3, [r3, #24]
 800f5fe:	429a      	cmp	r2, r3
 800f600:	f080 814c 	bcs.w	800f89c <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	699b      	ldr	r3, [r3, #24]
 800f608:	43db      	mvns	r3, r3
 800f60a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800f60c:	e146      	b.n	800f89c <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	699b      	ldr	r3, [r3, #24]
 800f612:	693a      	ldr	r2, [r7, #16]
 800f614:	8992      	ldrh	r2, [r2, #12]
 800f616:	fbb3 f1f2 	udiv	r1, r3, r2
 800f61a:	fb01 f202 	mul.w	r2, r1, r2
 800f61e:	1a9b      	subs	r3, r3, r2
 800f620:	2b00      	cmp	r3, #0
 800f622:	f040 80f1 	bne.w	800f808 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	699b      	ldr	r3, [r3, #24]
 800f62a:	693a      	ldr	r2, [r7, #16]
 800f62c:	8992      	ldrh	r2, [r2, #12]
 800f62e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f632:	693a      	ldr	r2, [r7, #16]
 800f634:	8952      	ldrh	r2, [r2, #10]
 800f636:	3a01      	subs	r2, #1
 800f638:	4013      	ands	r3, r2
 800f63a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800f63c:	69bb      	ldr	r3, [r7, #24]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d143      	bne.n	800f6ca <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	699b      	ldr	r3, [r3, #24]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d10c      	bne.n	800f664 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	689b      	ldr	r3, [r3, #8]
 800f64e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800f650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f652:	2b00      	cmp	r3, #0
 800f654:	d11a      	bne.n	800f68c <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	2100      	movs	r1, #0
 800f65a:	4618      	mov	r0, r3
 800f65c:	f7fe fd94 	bl	800e188 <create_chain>
 800f660:	62b8      	str	r0, [r7, #40]	; 0x28
 800f662:	e013      	b.n	800f68c <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d007      	beq.n	800f67c <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	699b      	ldr	r3, [r3, #24]
 800f670:	4619      	mov	r1, r3
 800f672:	68f8      	ldr	r0, [r7, #12]
 800f674:	f7fe fe20 	bl	800e2b8 <clmt_clust>
 800f678:	62b8      	str	r0, [r7, #40]	; 0x28
 800f67a:	e007      	b.n	800f68c <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f67c:	68fa      	ldr	r2, [r7, #12]
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	69db      	ldr	r3, [r3, #28]
 800f682:	4619      	mov	r1, r3
 800f684:	4610      	mov	r0, r2
 800f686:	f7fe fd7f 	bl	800e188 <create_chain>
 800f68a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f68e:	2b00      	cmp	r3, #0
 800f690:	f000 8109 	beq.w	800f8a6 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f696:	2b01      	cmp	r3, #1
 800f698:	d104      	bne.n	800f6a4 <f_write+0x10c>
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	2202      	movs	r2, #2
 800f69e:	755a      	strb	r2, [r3, #21]
 800f6a0:	2302      	movs	r3, #2
 800f6a2:	e109      	b.n	800f8b8 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6aa:	d104      	bne.n	800f6b6 <f_write+0x11e>
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	2201      	movs	r2, #1
 800f6b0:	755a      	strb	r2, [r3, #21]
 800f6b2:	2301      	movs	r3, #1
 800f6b4:	e100      	b.n	800f8b8 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f6ba:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	689b      	ldr	r3, [r3, #8]
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d102      	bne.n	800f6ca <f_write+0x132>
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f6c8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	7d1b      	ldrb	r3, [r3, #20]
 800f6ce:	b25b      	sxtb	r3, r3
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	da18      	bge.n	800f706 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f6d4:	693b      	ldr	r3, [r7, #16]
 800f6d6:	7858      	ldrb	r0, [r3, #1]
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	6a1a      	ldr	r2, [r3, #32]
 800f6e2:	2301      	movs	r3, #1
 800f6e4:	f7fd ff8c 	bl	800d600 <disk_write>
 800f6e8:	4603      	mov	r3, r0
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d004      	beq.n	800f6f8 <f_write+0x160>
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	2201      	movs	r2, #1
 800f6f2:	755a      	strb	r2, [r3, #21]
 800f6f4:	2301      	movs	r3, #1
 800f6f6:	e0df      	b.n	800f8b8 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	7d1b      	ldrb	r3, [r3, #20]
 800f6fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f700:	b2da      	uxtb	r2, r3
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f706:	693a      	ldr	r2, [r7, #16]
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	69db      	ldr	r3, [r3, #28]
 800f70c:	4619      	mov	r1, r3
 800f70e:	4610      	mov	r0, r2
 800f710:	f7fe fac6 	bl	800dca0 <clust2sect>
 800f714:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f716:	697b      	ldr	r3, [r7, #20]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d104      	bne.n	800f726 <f_write+0x18e>
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	2202      	movs	r2, #2
 800f720:	755a      	strb	r2, [r3, #21]
 800f722:	2302      	movs	r3, #2
 800f724:	e0c8      	b.n	800f8b8 <f_write+0x320>
			sect += csect;
 800f726:	697a      	ldr	r2, [r7, #20]
 800f728:	69bb      	ldr	r3, [r7, #24]
 800f72a:	4413      	add	r3, r2
 800f72c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f72e:	693b      	ldr	r3, [r7, #16]
 800f730:	899b      	ldrh	r3, [r3, #12]
 800f732:	461a      	mov	r2, r3
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	fbb3 f3f2 	udiv	r3, r3, r2
 800f73a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f73c:	6a3b      	ldr	r3, [r7, #32]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d043      	beq.n	800f7ca <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f742:	69ba      	ldr	r2, [r7, #24]
 800f744:	6a3b      	ldr	r3, [r7, #32]
 800f746:	4413      	add	r3, r2
 800f748:	693a      	ldr	r2, [r7, #16]
 800f74a:	8952      	ldrh	r2, [r2, #10]
 800f74c:	4293      	cmp	r3, r2
 800f74e:	d905      	bls.n	800f75c <f_write+0x1c4>
					cc = fs->csize - csect;
 800f750:	693b      	ldr	r3, [r7, #16]
 800f752:	895b      	ldrh	r3, [r3, #10]
 800f754:	461a      	mov	r2, r3
 800f756:	69bb      	ldr	r3, [r7, #24]
 800f758:	1ad3      	subs	r3, r2, r3
 800f75a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f75c:	693b      	ldr	r3, [r7, #16]
 800f75e:	7858      	ldrb	r0, [r3, #1]
 800f760:	6a3b      	ldr	r3, [r7, #32]
 800f762:	697a      	ldr	r2, [r7, #20]
 800f764:	69f9      	ldr	r1, [r7, #28]
 800f766:	f7fd ff4b 	bl	800d600 <disk_write>
 800f76a:	4603      	mov	r3, r0
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d004      	beq.n	800f77a <f_write+0x1e2>
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	2201      	movs	r2, #1
 800f774:	755a      	strb	r2, [r3, #21]
 800f776:	2301      	movs	r3, #1
 800f778:	e09e      	b.n	800f8b8 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	6a1a      	ldr	r2, [r3, #32]
 800f77e:	697b      	ldr	r3, [r7, #20]
 800f780:	1ad3      	subs	r3, r2, r3
 800f782:	6a3a      	ldr	r2, [r7, #32]
 800f784:	429a      	cmp	r2, r3
 800f786:	d918      	bls.n	800f7ba <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	6a1a      	ldr	r2, [r3, #32]
 800f792:	697b      	ldr	r3, [r7, #20]
 800f794:	1ad3      	subs	r3, r2, r3
 800f796:	693a      	ldr	r2, [r7, #16]
 800f798:	8992      	ldrh	r2, [r2, #12]
 800f79a:	fb02 f303 	mul.w	r3, r2, r3
 800f79e:	69fa      	ldr	r2, [r7, #28]
 800f7a0:	18d1      	adds	r1, r2, r3
 800f7a2:	693b      	ldr	r3, [r7, #16]
 800f7a4:	899b      	ldrh	r3, [r3, #12]
 800f7a6:	461a      	mov	r2, r3
 800f7a8:	f7fd ffea 	bl	800d780 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	7d1b      	ldrb	r3, [r3, #20]
 800f7b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f7b4:	b2da      	uxtb	r2, r3
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f7ba:	693b      	ldr	r3, [r7, #16]
 800f7bc:	899b      	ldrh	r3, [r3, #12]
 800f7be:	461a      	mov	r2, r3
 800f7c0:	6a3b      	ldr	r3, [r7, #32]
 800f7c2:	fb02 f303 	mul.w	r3, r2, r3
 800f7c6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800f7c8:	e04b      	b.n	800f862 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	6a1b      	ldr	r3, [r3, #32]
 800f7ce:	697a      	ldr	r2, [r7, #20]
 800f7d0:	429a      	cmp	r2, r3
 800f7d2:	d016      	beq.n	800f802 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	699a      	ldr	r2, [r3, #24]
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f7dc:	429a      	cmp	r2, r3
 800f7de:	d210      	bcs.n	800f802 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f7e0:	693b      	ldr	r3, [r7, #16]
 800f7e2:	7858      	ldrb	r0, [r3, #1]
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f7ea:	2301      	movs	r3, #1
 800f7ec:	697a      	ldr	r2, [r7, #20]
 800f7ee:	f7fd fee7 	bl	800d5c0 <disk_read>
 800f7f2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d004      	beq.n	800f802 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	2201      	movs	r2, #1
 800f7fc:	755a      	strb	r2, [r3, #21]
 800f7fe:	2301      	movs	r3, #1
 800f800:	e05a      	b.n	800f8b8 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	697a      	ldr	r2, [r7, #20]
 800f806:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f808:	693b      	ldr	r3, [r7, #16]
 800f80a:	899b      	ldrh	r3, [r3, #12]
 800f80c:	4618      	mov	r0, r3
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	699b      	ldr	r3, [r3, #24]
 800f812:	693a      	ldr	r2, [r7, #16]
 800f814:	8992      	ldrh	r2, [r2, #12]
 800f816:	fbb3 f1f2 	udiv	r1, r3, r2
 800f81a:	fb01 f202 	mul.w	r2, r1, r2
 800f81e:	1a9b      	subs	r3, r3, r2
 800f820:	1ac3      	subs	r3, r0, r3
 800f822:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	429a      	cmp	r2, r3
 800f82a:	d901      	bls.n	800f830 <f_write+0x298>
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	699b      	ldr	r3, [r3, #24]
 800f83a:	693a      	ldr	r2, [r7, #16]
 800f83c:	8992      	ldrh	r2, [r2, #12]
 800f83e:	fbb3 f0f2 	udiv	r0, r3, r2
 800f842:	fb00 f202 	mul.w	r2, r0, r2
 800f846:	1a9b      	subs	r3, r3, r2
 800f848:	440b      	add	r3, r1
 800f84a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f84c:	69f9      	ldr	r1, [r7, #28]
 800f84e:	4618      	mov	r0, r3
 800f850:	f7fd ff96 	bl	800d780 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	7d1b      	ldrb	r3, [r3, #20]
 800f858:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f85c:	b2da      	uxtb	r2, r3
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f862:	69fa      	ldr	r2, [r7, #28]
 800f864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f866:	4413      	add	r3, r2
 800f868:	61fb      	str	r3, [r7, #28]
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	699a      	ldr	r2, [r3, #24]
 800f86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f870:	441a      	add	r2, r3
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	619a      	str	r2, [r3, #24]
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	68da      	ldr	r2, [r3, #12]
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	699b      	ldr	r3, [r3, #24]
 800f87e:	429a      	cmp	r2, r3
 800f880:	bf38      	it	cc
 800f882:	461a      	movcc	r2, r3
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	60da      	str	r2, [r3, #12]
 800f888:	683b      	ldr	r3, [r7, #0]
 800f88a:	681a      	ldr	r2, [r3, #0]
 800f88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f88e:	441a      	add	r2, r3
 800f890:	683b      	ldr	r3, [r7, #0]
 800f892:	601a      	str	r2, [r3, #0]
 800f894:	687a      	ldr	r2, [r7, #4]
 800f896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f898:	1ad3      	subs	r3, r2, r3
 800f89a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	f47f aeb5 	bne.w	800f60e <f_write+0x76>
 800f8a4:	e000      	b.n	800f8a8 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f8a6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	7d1b      	ldrb	r3, [r3, #20]
 800f8ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8b0:	b2da      	uxtb	r2, r3
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800f8b6:	2300      	movs	r3, #0
}
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	3730      	adds	r7, #48	; 0x30
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	bd80      	pop	{r7, pc}

0800f8c0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b086      	sub	sp, #24
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	f107 0208 	add.w	r2, r7, #8
 800f8ce:	4611      	mov	r1, r2
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	f7ff fc19 	bl	800f108 <validate>
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f8da:	7dfb      	ldrb	r3, [r7, #23]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d168      	bne.n	800f9b2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	7d1b      	ldrb	r3, [r3, #20]
 800f8e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d062      	beq.n	800f9b2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	7d1b      	ldrb	r3, [r3, #20]
 800f8f0:	b25b      	sxtb	r3, r3
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	da15      	bge.n	800f922 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f8f6:	68bb      	ldr	r3, [r7, #8]
 800f8f8:	7858      	ldrb	r0, [r3, #1]
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	6a1a      	ldr	r2, [r3, #32]
 800f904:	2301      	movs	r3, #1
 800f906:	f7fd fe7b 	bl	800d600 <disk_write>
 800f90a:	4603      	mov	r3, r0
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d001      	beq.n	800f914 <f_sync+0x54>
 800f910:	2301      	movs	r3, #1
 800f912:	e04f      	b.n	800f9b4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	7d1b      	ldrb	r3, [r3, #20]
 800f918:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f91c:	b2da      	uxtb	r2, r3
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f922:	f7fd fbd9 	bl	800d0d8 <get_fattime>
 800f926:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f928:	68ba      	ldr	r2, [r7, #8]
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f92e:	4619      	mov	r1, r3
 800f930:	4610      	mov	r0, r2
 800f932:	f7fe f917 	bl	800db64 <move_window>
 800f936:	4603      	mov	r3, r0
 800f938:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f93a:	7dfb      	ldrb	r3, [r7, #23]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d138      	bne.n	800f9b2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f944:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	330b      	adds	r3, #11
 800f94a:	781a      	ldrb	r2, [r3, #0]
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	330b      	adds	r3, #11
 800f950:	f042 0220 	orr.w	r2, r2, #32
 800f954:	b2d2      	uxtb	r2, r2
 800f956:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	6818      	ldr	r0, [r3, #0]
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	689b      	ldr	r3, [r3, #8]
 800f960:	461a      	mov	r2, r3
 800f962:	68f9      	ldr	r1, [r7, #12]
 800f964:	f7fe fea5 	bl	800e6b2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	f103 021c 	add.w	r2, r3, #28
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	68db      	ldr	r3, [r3, #12]
 800f972:	4619      	mov	r1, r3
 800f974:	4610      	mov	r0, r2
 800f976:	f7fd fed7 	bl	800d728 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	3316      	adds	r3, #22
 800f97e:	6939      	ldr	r1, [r7, #16]
 800f980:	4618      	mov	r0, r3
 800f982:	f7fd fed1 	bl	800d728 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	3312      	adds	r3, #18
 800f98a:	2100      	movs	r1, #0
 800f98c:	4618      	mov	r0, r3
 800f98e:	f7fd feb0 	bl	800d6f2 <st_word>
					fs->wflag = 1;
 800f992:	68bb      	ldr	r3, [r7, #8]
 800f994:	2201      	movs	r2, #1
 800f996:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f998:	68bb      	ldr	r3, [r7, #8]
 800f99a:	4618      	mov	r0, r3
 800f99c:	f7fe f910 	bl	800dbc0 <sync_fs>
 800f9a0:	4603      	mov	r3, r0
 800f9a2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	7d1b      	ldrb	r3, [r3, #20]
 800f9a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f9ac:	b2da      	uxtb	r2, r3
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f9b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	3718      	adds	r7, #24
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	bd80      	pop	{r7, pc}

0800f9bc <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b090      	sub	sp, #64	; 0x40
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
 800f9c4:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800f9c6:	f107 010c 	add.w	r1, r7, #12
 800f9ca:	1d3b      	adds	r3, r7, #4
 800f9cc:	2200      	movs	r2, #0
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	f7ff f91a 	bl	800ec08 <find_volume>
 800f9d4:	4603      	mov	r3, r0
 800f9d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800f9da:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d11f      	bne.n	800fa22 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f9e2:	687a      	ldr	r2, [r7, #4]
 800f9e4:	f107 030c 	add.w	r3, r7, #12
 800f9e8:	4611      	mov	r1, r2
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	f7fe fffc 	bl	800e9e8 <follow_path>
 800f9f0:	4603      	mov	r3, r0
 800f9f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800f9f6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d111      	bne.n	800fa22 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800f9fe:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800fa02:	b25b      	sxtb	r3, r3
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	da03      	bge.n	800fa10 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800fa08:	2306      	movs	r3, #6
 800fa0a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800fa0e:	e008      	b.n	800fa22 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800fa10:	683b      	ldr	r3, [r7, #0]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d005      	beq.n	800fa22 <f_stat+0x66>
 800fa16:	f107 030c 	add.w	r3, r7, #12
 800fa1a:	6839      	ldr	r1, [r7, #0]
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	f7fe feef 	bl	800e800 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800fa22:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800fa26:	4618      	mov	r0, r3
 800fa28:	3740      	adds	r7, #64	; 0x40
 800fa2a:	46bd      	mov	sp, r7
 800fa2c:	bd80      	pop	{r7, pc}
	...

0800fa30 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800fa30:	b480      	push	{r7}
 800fa32:	b087      	sub	sp, #28
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	60f8      	str	r0, [r7, #12]
 800fa38:	60b9      	str	r1, [r7, #8]
 800fa3a:	4613      	mov	r3, r2
 800fa3c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800fa3e:	2301      	movs	r3, #1
 800fa40:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800fa42:	2300      	movs	r3, #0
 800fa44:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800fa46:	4b1f      	ldr	r3, [pc, #124]	; (800fac4 <FATFS_LinkDriverEx+0x94>)
 800fa48:	7a5b      	ldrb	r3, [r3, #9]
 800fa4a:	b2db      	uxtb	r3, r3
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d131      	bne.n	800fab4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800fa50:	4b1c      	ldr	r3, [pc, #112]	; (800fac4 <FATFS_LinkDriverEx+0x94>)
 800fa52:	7a5b      	ldrb	r3, [r3, #9]
 800fa54:	b2db      	uxtb	r3, r3
 800fa56:	461a      	mov	r2, r3
 800fa58:	4b1a      	ldr	r3, [pc, #104]	; (800fac4 <FATFS_LinkDriverEx+0x94>)
 800fa5a:	2100      	movs	r1, #0
 800fa5c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800fa5e:	4b19      	ldr	r3, [pc, #100]	; (800fac4 <FATFS_LinkDriverEx+0x94>)
 800fa60:	7a5b      	ldrb	r3, [r3, #9]
 800fa62:	b2db      	uxtb	r3, r3
 800fa64:	4a17      	ldr	r2, [pc, #92]	; (800fac4 <FATFS_LinkDriverEx+0x94>)
 800fa66:	009b      	lsls	r3, r3, #2
 800fa68:	4413      	add	r3, r2
 800fa6a:	68fa      	ldr	r2, [r7, #12]
 800fa6c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800fa6e:	4b15      	ldr	r3, [pc, #84]	; (800fac4 <FATFS_LinkDriverEx+0x94>)
 800fa70:	7a5b      	ldrb	r3, [r3, #9]
 800fa72:	b2db      	uxtb	r3, r3
 800fa74:	461a      	mov	r2, r3
 800fa76:	4b13      	ldr	r3, [pc, #76]	; (800fac4 <FATFS_LinkDriverEx+0x94>)
 800fa78:	4413      	add	r3, r2
 800fa7a:	79fa      	ldrb	r2, [r7, #7]
 800fa7c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800fa7e:	4b11      	ldr	r3, [pc, #68]	; (800fac4 <FATFS_LinkDriverEx+0x94>)
 800fa80:	7a5b      	ldrb	r3, [r3, #9]
 800fa82:	b2db      	uxtb	r3, r3
 800fa84:	1c5a      	adds	r2, r3, #1
 800fa86:	b2d1      	uxtb	r1, r2
 800fa88:	4a0e      	ldr	r2, [pc, #56]	; (800fac4 <FATFS_LinkDriverEx+0x94>)
 800fa8a:	7251      	strb	r1, [r2, #9]
 800fa8c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800fa8e:	7dbb      	ldrb	r3, [r7, #22]
 800fa90:	3330      	adds	r3, #48	; 0x30
 800fa92:	b2da      	uxtb	r2, r3
 800fa94:	68bb      	ldr	r3, [r7, #8]
 800fa96:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800fa98:	68bb      	ldr	r3, [r7, #8]
 800fa9a:	3301      	adds	r3, #1
 800fa9c:	223a      	movs	r2, #58	; 0x3a
 800fa9e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800faa0:	68bb      	ldr	r3, [r7, #8]
 800faa2:	3302      	adds	r3, #2
 800faa4:	222f      	movs	r2, #47	; 0x2f
 800faa6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800faa8:	68bb      	ldr	r3, [r7, #8]
 800faaa:	3303      	adds	r3, #3
 800faac:	2200      	movs	r2, #0
 800faae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800fab0:	2300      	movs	r3, #0
 800fab2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800fab4:	7dfb      	ldrb	r3, [r7, #23]
}
 800fab6:	4618      	mov	r0, r3
 800fab8:	371c      	adds	r7, #28
 800faba:	46bd      	mov	sp, r7
 800fabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac0:	4770      	bx	lr
 800fac2:	bf00      	nop
 800fac4:	20002e40 	.word	0x20002e40

0800fac8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b082      	sub	sp, #8
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
 800fad0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800fad2:	2200      	movs	r2, #0
 800fad4:	6839      	ldr	r1, [r7, #0]
 800fad6:	6878      	ldr	r0, [r7, #4]
 800fad8:	f7ff ffaa 	bl	800fa30 <FATFS_LinkDriverEx>
 800fadc:	4603      	mov	r3, r0
}
 800fade:	4618      	mov	r0, r3
 800fae0:	3708      	adds	r7, #8
 800fae2:	46bd      	mov	sp, r7
 800fae4:	bd80      	pop	{r7, pc}
	...

0800fae8 <__errno>:
 800fae8:	4b01      	ldr	r3, [pc, #4]	; (800faf0 <__errno+0x8>)
 800faea:	6818      	ldr	r0, [r3, #0]
 800faec:	4770      	bx	lr
 800faee:	bf00      	nop
 800faf0:	20000010 	.word	0x20000010

0800faf4 <__libc_init_array>:
 800faf4:	b570      	push	{r4, r5, r6, lr}
 800faf6:	4d0d      	ldr	r5, [pc, #52]	; (800fb2c <__libc_init_array+0x38>)
 800faf8:	4c0d      	ldr	r4, [pc, #52]	; (800fb30 <__libc_init_array+0x3c>)
 800fafa:	1b64      	subs	r4, r4, r5
 800fafc:	10a4      	asrs	r4, r4, #2
 800fafe:	2600      	movs	r6, #0
 800fb00:	42a6      	cmp	r6, r4
 800fb02:	d109      	bne.n	800fb18 <__libc_init_array+0x24>
 800fb04:	4d0b      	ldr	r5, [pc, #44]	; (800fb34 <__libc_init_array+0x40>)
 800fb06:	4c0c      	ldr	r4, [pc, #48]	; (800fb38 <__libc_init_array+0x44>)
 800fb08:	f004 ff82 	bl	8014a10 <_init>
 800fb0c:	1b64      	subs	r4, r4, r5
 800fb0e:	10a4      	asrs	r4, r4, #2
 800fb10:	2600      	movs	r6, #0
 800fb12:	42a6      	cmp	r6, r4
 800fb14:	d105      	bne.n	800fb22 <__libc_init_array+0x2e>
 800fb16:	bd70      	pop	{r4, r5, r6, pc}
 800fb18:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb1c:	4798      	blx	r3
 800fb1e:	3601      	adds	r6, #1
 800fb20:	e7ee      	b.n	800fb00 <__libc_init_array+0xc>
 800fb22:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb26:	4798      	blx	r3
 800fb28:	3601      	adds	r6, #1
 800fb2a:	e7f2      	b.n	800fb12 <__libc_init_array+0x1e>
 800fb2c:	08016a98 	.word	0x08016a98
 800fb30:	08016a98 	.word	0x08016a98
 800fb34:	08016a98 	.word	0x08016a98
 800fb38:	08016a9c 	.word	0x08016a9c

0800fb3c <malloc>:
 800fb3c:	4b02      	ldr	r3, [pc, #8]	; (800fb48 <malloc+0xc>)
 800fb3e:	4601      	mov	r1, r0
 800fb40:	6818      	ldr	r0, [r3, #0]
 800fb42:	f000 b885 	b.w	800fc50 <_malloc_r>
 800fb46:	bf00      	nop
 800fb48:	20000010 	.word	0x20000010

0800fb4c <memcpy>:
 800fb4c:	440a      	add	r2, r1
 800fb4e:	4291      	cmp	r1, r2
 800fb50:	f100 33ff 	add.w	r3, r0, #4294967295
 800fb54:	d100      	bne.n	800fb58 <memcpy+0xc>
 800fb56:	4770      	bx	lr
 800fb58:	b510      	push	{r4, lr}
 800fb5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fb62:	4291      	cmp	r1, r2
 800fb64:	d1f9      	bne.n	800fb5a <memcpy+0xe>
 800fb66:	bd10      	pop	{r4, pc}

0800fb68 <memset>:
 800fb68:	4402      	add	r2, r0
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	4293      	cmp	r3, r2
 800fb6e:	d100      	bne.n	800fb72 <memset+0xa>
 800fb70:	4770      	bx	lr
 800fb72:	f803 1b01 	strb.w	r1, [r3], #1
 800fb76:	e7f9      	b.n	800fb6c <memset+0x4>

0800fb78 <_free_r>:
 800fb78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fb7a:	2900      	cmp	r1, #0
 800fb7c:	d044      	beq.n	800fc08 <_free_r+0x90>
 800fb7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb82:	9001      	str	r0, [sp, #4]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	f1a1 0404 	sub.w	r4, r1, #4
 800fb8a:	bfb8      	it	lt
 800fb8c:	18e4      	addlt	r4, r4, r3
 800fb8e:	f003 fac5 	bl	801311c <__malloc_lock>
 800fb92:	4a1e      	ldr	r2, [pc, #120]	; (800fc0c <_free_r+0x94>)
 800fb94:	9801      	ldr	r0, [sp, #4]
 800fb96:	6813      	ldr	r3, [r2, #0]
 800fb98:	b933      	cbnz	r3, 800fba8 <_free_r+0x30>
 800fb9a:	6063      	str	r3, [r4, #4]
 800fb9c:	6014      	str	r4, [r2, #0]
 800fb9e:	b003      	add	sp, #12
 800fba0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fba4:	f003 bac0 	b.w	8013128 <__malloc_unlock>
 800fba8:	42a3      	cmp	r3, r4
 800fbaa:	d908      	bls.n	800fbbe <_free_r+0x46>
 800fbac:	6825      	ldr	r5, [r4, #0]
 800fbae:	1961      	adds	r1, r4, r5
 800fbb0:	428b      	cmp	r3, r1
 800fbb2:	bf01      	itttt	eq
 800fbb4:	6819      	ldreq	r1, [r3, #0]
 800fbb6:	685b      	ldreq	r3, [r3, #4]
 800fbb8:	1949      	addeq	r1, r1, r5
 800fbba:	6021      	streq	r1, [r4, #0]
 800fbbc:	e7ed      	b.n	800fb9a <_free_r+0x22>
 800fbbe:	461a      	mov	r2, r3
 800fbc0:	685b      	ldr	r3, [r3, #4]
 800fbc2:	b10b      	cbz	r3, 800fbc8 <_free_r+0x50>
 800fbc4:	42a3      	cmp	r3, r4
 800fbc6:	d9fa      	bls.n	800fbbe <_free_r+0x46>
 800fbc8:	6811      	ldr	r1, [r2, #0]
 800fbca:	1855      	adds	r5, r2, r1
 800fbcc:	42a5      	cmp	r5, r4
 800fbce:	d10b      	bne.n	800fbe8 <_free_r+0x70>
 800fbd0:	6824      	ldr	r4, [r4, #0]
 800fbd2:	4421      	add	r1, r4
 800fbd4:	1854      	adds	r4, r2, r1
 800fbd6:	42a3      	cmp	r3, r4
 800fbd8:	6011      	str	r1, [r2, #0]
 800fbda:	d1e0      	bne.n	800fb9e <_free_r+0x26>
 800fbdc:	681c      	ldr	r4, [r3, #0]
 800fbde:	685b      	ldr	r3, [r3, #4]
 800fbe0:	6053      	str	r3, [r2, #4]
 800fbe2:	4421      	add	r1, r4
 800fbe4:	6011      	str	r1, [r2, #0]
 800fbe6:	e7da      	b.n	800fb9e <_free_r+0x26>
 800fbe8:	d902      	bls.n	800fbf0 <_free_r+0x78>
 800fbea:	230c      	movs	r3, #12
 800fbec:	6003      	str	r3, [r0, #0]
 800fbee:	e7d6      	b.n	800fb9e <_free_r+0x26>
 800fbf0:	6825      	ldr	r5, [r4, #0]
 800fbf2:	1961      	adds	r1, r4, r5
 800fbf4:	428b      	cmp	r3, r1
 800fbf6:	bf04      	itt	eq
 800fbf8:	6819      	ldreq	r1, [r3, #0]
 800fbfa:	685b      	ldreq	r3, [r3, #4]
 800fbfc:	6063      	str	r3, [r4, #4]
 800fbfe:	bf04      	itt	eq
 800fc00:	1949      	addeq	r1, r1, r5
 800fc02:	6021      	streq	r1, [r4, #0]
 800fc04:	6054      	str	r4, [r2, #4]
 800fc06:	e7ca      	b.n	800fb9e <_free_r+0x26>
 800fc08:	b003      	add	sp, #12
 800fc0a:	bd30      	pop	{r4, r5, pc}
 800fc0c:	20002e4c 	.word	0x20002e4c

0800fc10 <sbrk_aligned>:
 800fc10:	b570      	push	{r4, r5, r6, lr}
 800fc12:	4e0e      	ldr	r6, [pc, #56]	; (800fc4c <sbrk_aligned+0x3c>)
 800fc14:	460c      	mov	r4, r1
 800fc16:	6831      	ldr	r1, [r6, #0]
 800fc18:	4605      	mov	r5, r0
 800fc1a:	b911      	cbnz	r1, 800fc22 <sbrk_aligned+0x12>
 800fc1c:	f000 ff78 	bl	8010b10 <_sbrk_r>
 800fc20:	6030      	str	r0, [r6, #0]
 800fc22:	4621      	mov	r1, r4
 800fc24:	4628      	mov	r0, r5
 800fc26:	f000 ff73 	bl	8010b10 <_sbrk_r>
 800fc2a:	1c43      	adds	r3, r0, #1
 800fc2c:	d00a      	beq.n	800fc44 <sbrk_aligned+0x34>
 800fc2e:	1cc4      	adds	r4, r0, #3
 800fc30:	f024 0403 	bic.w	r4, r4, #3
 800fc34:	42a0      	cmp	r0, r4
 800fc36:	d007      	beq.n	800fc48 <sbrk_aligned+0x38>
 800fc38:	1a21      	subs	r1, r4, r0
 800fc3a:	4628      	mov	r0, r5
 800fc3c:	f000 ff68 	bl	8010b10 <_sbrk_r>
 800fc40:	3001      	adds	r0, #1
 800fc42:	d101      	bne.n	800fc48 <sbrk_aligned+0x38>
 800fc44:	f04f 34ff 	mov.w	r4, #4294967295
 800fc48:	4620      	mov	r0, r4
 800fc4a:	bd70      	pop	{r4, r5, r6, pc}
 800fc4c:	20002e50 	.word	0x20002e50

0800fc50 <_malloc_r>:
 800fc50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc54:	1ccd      	adds	r5, r1, #3
 800fc56:	f025 0503 	bic.w	r5, r5, #3
 800fc5a:	3508      	adds	r5, #8
 800fc5c:	2d0c      	cmp	r5, #12
 800fc5e:	bf38      	it	cc
 800fc60:	250c      	movcc	r5, #12
 800fc62:	2d00      	cmp	r5, #0
 800fc64:	4607      	mov	r7, r0
 800fc66:	db01      	blt.n	800fc6c <_malloc_r+0x1c>
 800fc68:	42a9      	cmp	r1, r5
 800fc6a:	d905      	bls.n	800fc78 <_malloc_r+0x28>
 800fc6c:	230c      	movs	r3, #12
 800fc6e:	603b      	str	r3, [r7, #0]
 800fc70:	2600      	movs	r6, #0
 800fc72:	4630      	mov	r0, r6
 800fc74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc78:	4e2e      	ldr	r6, [pc, #184]	; (800fd34 <_malloc_r+0xe4>)
 800fc7a:	f003 fa4f 	bl	801311c <__malloc_lock>
 800fc7e:	6833      	ldr	r3, [r6, #0]
 800fc80:	461c      	mov	r4, r3
 800fc82:	bb34      	cbnz	r4, 800fcd2 <_malloc_r+0x82>
 800fc84:	4629      	mov	r1, r5
 800fc86:	4638      	mov	r0, r7
 800fc88:	f7ff ffc2 	bl	800fc10 <sbrk_aligned>
 800fc8c:	1c43      	adds	r3, r0, #1
 800fc8e:	4604      	mov	r4, r0
 800fc90:	d14d      	bne.n	800fd2e <_malloc_r+0xde>
 800fc92:	6834      	ldr	r4, [r6, #0]
 800fc94:	4626      	mov	r6, r4
 800fc96:	2e00      	cmp	r6, #0
 800fc98:	d140      	bne.n	800fd1c <_malloc_r+0xcc>
 800fc9a:	6823      	ldr	r3, [r4, #0]
 800fc9c:	4631      	mov	r1, r6
 800fc9e:	4638      	mov	r0, r7
 800fca0:	eb04 0803 	add.w	r8, r4, r3
 800fca4:	f000 ff34 	bl	8010b10 <_sbrk_r>
 800fca8:	4580      	cmp	r8, r0
 800fcaa:	d13a      	bne.n	800fd22 <_malloc_r+0xd2>
 800fcac:	6821      	ldr	r1, [r4, #0]
 800fcae:	3503      	adds	r5, #3
 800fcb0:	1a6d      	subs	r5, r5, r1
 800fcb2:	f025 0503 	bic.w	r5, r5, #3
 800fcb6:	3508      	adds	r5, #8
 800fcb8:	2d0c      	cmp	r5, #12
 800fcba:	bf38      	it	cc
 800fcbc:	250c      	movcc	r5, #12
 800fcbe:	4629      	mov	r1, r5
 800fcc0:	4638      	mov	r0, r7
 800fcc2:	f7ff ffa5 	bl	800fc10 <sbrk_aligned>
 800fcc6:	3001      	adds	r0, #1
 800fcc8:	d02b      	beq.n	800fd22 <_malloc_r+0xd2>
 800fcca:	6823      	ldr	r3, [r4, #0]
 800fccc:	442b      	add	r3, r5
 800fcce:	6023      	str	r3, [r4, #0]
 800fcd0:	e00e      	b.n	800fcf0 <_malloc_r+0xa0>
 800fcd2:	6822      	ldr	r2, [r4, #0]
 800fcd4:	1b52      	subs	r2, r2, r5
 800fcd6:	d41e      	bmi.n	800fd16 <_malloc_r+0xc6>
 800fcd8:	2a0b      	cmp	r2, #11
 800fcda:	d916      	bls.n	800fd0a <_malloc_r+0xba>
 800fcdc:	1961      	adds	r1, r4, r5
 800fcde:	42a3      	cmp	r3, r4
 800fce0:	6025      	str	r5, [r4, #0]
 800fce2:	bf18      	it	ne
 800fce4:	6059      	strne	r1, [r3, #4]
 800fce6:	6863      	ldr	r3, [r4, #4]
 800fce8:	bf08      	it	eq
 800fcea:	6031      	streq	r1, [r6, #0]
 800fcec:	5162      	str	r2, [r4, r5]
 800fcee:	604b      	str	r3, [r1, #4]
 800fcf0:	4638      	mov	r0, r7
 800fcf2:	f104 060b 	add.w	r6, r4, #11
 800fcf6:	f003 fa17 	bl	8013128 <__malloc_unlock>
 800fcfa:	f026 0607 	bic.w	r6, r6, #7
 800fcfe:	1d23      	adds	r3, r4, #4
 800fd00:	1af2      	subs	r2, r6, r3
 800fd02:	d0b6      	beq.n	800fc72 <_malloc_r+0x22>
 800fd04:	1b9b      	subs	r3, r3, r6
 800fd06:	50a3      	str	r3, [r4, r2]
 800fd08:	e7b3      	b.n	800fc72 <_malloc_r+0x22>
 800fd0a:	6862      	ldr	r2, [r4, #4]
 800fd0c:	42a3      	cmp	r3, r4
 800fd0e:	bf0c      	ite	eq
 800fd10:	6032      	streq	r2, [r6, #0]
 800fd12:	605a      	strne	r2, [r3, #4]
 800fd14:	e7ec      	b.n	800fcf0 <_malloc_r+0xa0>
 800fd16:	4623      	mov	r3, r4
 800fd18:	6864      	ldr	r4, [r4, #4]
 800fd1a:	e7b2      	b.n	800fc82 <_malloc_r+0x32>
 800fd1c:	4634      	mov	r4, r6
 800fd1e:	6876      	ldr	r6, [r6, #4]
 800fd20:	e7b9      	b.n	800fc96 <_malloc_r+0x46>
 800fd22:	230c      	movs	r3, #12
 800fd24:	603b      	str	r3, [r7, #0]
 800fd26:	4638      	mov	r0, r7
 800fd28:	f003 f9fe 	bl	8013128 <__malloc_unlock>
 800fd2c:	e7a1      	b.n	800fc72 <_malloc_r+0x22>
 800fd2e:	6025      	str	r5, [r4, #0]
 800fd30:	e7de      	b.n	800fcf0 <_malloc_r+0xa0>
 800fd32:	bf00      	nop
 800fd34:	20002e4c 	.word	0x20002e4c

0800fd38 <__cvt>:
 800fd38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd3a:	ed2d 8b02 	vpush	{d8}
 800fd3e:	eeb0 8b40 	vmov.f64	d8, d0
 800fd42:	b085      	sub	sp, #20
 800fd44:	4617      	mov	r7, r2
 800fd46:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800fd48:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800fd4a:	ee18 2a90 	vmov	r2, s17
 800fd4e:	f025 0520 	bic.w	r5, r5, #32
 800fd52:	2a00      	cmp	r2, #0
 800fd54:	bfb6      	itet	lt
 800fd56:	222d      	movlt	r2, #45	; 0x2d
 800fd58:	2200      	movge	r2, #0
 800fd5a:	eeb1 8b40 	vneglt.f64	d8, d0
 800fd5e:	2d46      	cmp	r5, #70	; 0x46
 800fd60:	460c      	mov	r4, r1
 800fd62:	701a      	strb	r2, [r3, #0]
 800fd64:	d004      	beq.n	800fd70 <__cvt+0x38>
 800fd66:	2d45      	cmp	r5, #69	; 0x45
 800fd68:	d100      	bne.n	800fd6c <__cvt+0x34>
 800fd6a:	3401      	adds	r4, #1
 800fd6c:	2102      	movs	r1, #2
 800fd6e:	e000      	b.n	800fd72 <__cvt+0x3a>
 800fd70:	2103      	movs	r1, #3
 800fd72:	ab03      	add	r3, sp, #12
 800fd74:	9301      	str	r3, [sp, #4]
 800fd76:	ab02      	add	r3, sp, #8
 800fd78:	9300      	str	r3, [sp, #0]
 800fd7a:	4622      	mov	r2, r4
 800fd7c:	4633      	mov	r3, r6
 800fd7e:	eeb0 0b48 	vmov.f64	d0, d8
 800fd82:	f001 feb9 	bl	8011af8 <_dtoa_r>
 800fd86:	2d47      	cmp	r5, #71	; 0x47
 800fd88:	d101      	bne.n	800fd8e <__cvt+0x56>
 800fd8a:	07fb      	lsls	r3, r7, #31
 800fd8c:	d51a      	bpl.n	800fdc4 <__cvt+0x8c>
 800fd8e:	2d46      	cmp	r5, #70	; 0x46
 800fd90:	eb00 0204 	add.w	r2, r0, r4
 800fd94:	d10c      	bne.n	800fdb0 <__cvt+0x78>
 800fd96:	7803      	ldrb	r3, [r0, #0]
 800fd98:	2b30      	cmp	r3, #48	; 0x30
 800fd9a:	d107      	bne.n	800fdac <__cvt+0x74>
 800fd9c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fda0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fda4:	bf1c      	itt	ne
 800fda6:	f1c4 0401 	rsbne	r4, r4, #1
 800fdaa:	6034      	strne	r4, [r6, #0]
 800fdac:	6833      	ldr	r3, [r6, #0]
 800fdae:	441a      	add	r2, r3
 800fdb0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fdb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdb8:	bf08      	it	eq
 800fdba:	9203      	streq	r2, [sp, #12]
 800fdbc:	2130      	movs	r1, #48	; 0x30
 800fdbe:	9b03      	ldr	r3, [sp, #12]
 800fdc0:	4293      	cmp	r3, r2
 800fdc2:	d307      	bcc.n	800fdd4 <__cvt+0x9c>
 800fdc4:	9b03      	ldr	r3, [sp, #12]
 800fdc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fdc8:	1a1b      	subs	r3, r3, r0
 800fdca:	6013      	str	r3, [r2, #0]
 800fdcc:	b005      	add	sp, #20
 800fdce:	ecbd 8b02 	vpop	{d8}
 800fdd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdd4:	1c5c      	adds	r4, r3, #1
 800fdd6:	9403      	str	r4, [sp, #12]
 800fdd8:	7019      	strb	r1, [r3, #0]
 800fdda:	e7f0      	b.n	800fdbe <__cvt+0x86>

0800fddc <__exponent>:
 800fddc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fdde:	4603      	mov	r3, r0
 800fde0:	2900      	cmp	r1, #0
 800fde2:	bfb8      	it	lt
 800fde4:	4249      	neglt	r1, r1
 800fde6:	f803 2b02 	strb.w	r2, [r3], #2
 800fdea:	bfb4      	ite	lt
 800fdec:	222d      	movlt	r2, #45	; 0x2d
 800fdee:	222b      	movge	r2, #43	; 0x2b
 800fdf0:	2909      	cmp	r1, #9
 800fdf2:	7042      	strb	r2, [r0, #1]
 800fdf4:	dd2a      	ble.n	800fe4c <__exponent+0x70>
 800fdf6:	f10d 0407 	add.w	r4, sp, #7
 800fdfa:	46a4      	mov	ip, r4
 800fdfc:	270a      	movs	r7, #10
 800fdfe:	46a6      	mov	lr, r4
 800fe00:	460a      	mov	r2, r1
 800fe02:	fb91 f6f7 	sdiv	r6, r1, r7
 800fe06:	fb07 1516 	mls	r5, r7, r6, r1
 800fe0a:	3530      	adds	r5, #48	; 0x30
 800fe0c:	2a63      	cmp	r2, #99	; 0x63
 800fe0e:	f104 34ff 	add.w	r4, r4, #4294967295
 800fe12:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800fe16:	4631      	mov	r1, r6
 800fe18:	dcf1      	bgt.n	800fdfe <__exponent+0x22>
 800fe1a:	3130      	adds	r1, #48	; 0x30
 800fe1c:	f1ae 0502 	sub.w	r5, lr, #2
 800fe20:	f804 1c01 	strb.w	r1, [r4, #-1]
 800fe24:	1c44      	adds	r4, r0, #1
 800fe26:	4629      	mov	r1, r5
 800fe28:	4561      	cmp	r1, ip
 800fe2a:	d30a      	bcc.n	800fe42 <__exponent+0x66>
 800fe2c:	f10d 0209 	add.w	r2, sp, #9
 800fe30:	eba2 020e 	sub.w	r2, r2, lr
 800fe34:	4565      	cmp	r5, ip
 800fe36:	bf88      	it	hi
 800fe38:	2200      	movhi	r2, #0
 800fe3a:	4413      	add	r3, r2
 800fe3c:	1a18      	subs	r0, r3, r0
 800fe3e:	b003      	add	sp, #12
 800fe40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe42:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fe46:	f804 2f01 	strb.w	r2, [r4, #1]!
 800fe4a:	e7ed      	b.n	800fe28 <__exponent+0x4c>
 800fe4c:	2330      	movs	r3, #48	; 0x30
 800fe4e:	3130      	adds	r1, #48	; 0x30
 800fe50:	7083      	strb	r3, [r0, #2]
 800fe52:	70c1      	strb	r1, [r0, #3]
 800fe54:	1d03      	adds	r3, r0, #4
 800fe56:	e7f1      	b.n	800fe3c <__exponent+0x60>

0800fe58 <_printf_float>:
 800fe58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe5c:	b08b      	sub	sp, #44	; 0x2c
 800fe5e:	460c      	mov	r4, r1
 800fe60:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800fe64:	4616      	mov	r6, r2
 800fe66:	461f      	mov	r7, r3
 800fe68:	4605      	mov	r5, r0
 800fe6a:	f003 f8d9 	bl	8013020 <_localeconv_r>
 800fe6e:	f8d0 b000 	ldr.w	fp, [r0]
 800fe72:	4658      	mov	r0, fp
 800fe74:	f7f0 f9e4 	bl	8000240 <strlen>
 800fe78:	2300      	movs	r3, #0
 800fe7a:	9308      	str	r3, [sp, #32]
 800fe7c:	f8d8 3000 	ldr.w	r3, [r8]
 800fe80:	f894 9018 	ldrb.w	r9, [r4, #24]
 800fe84:	6822      	ldr	r2, [r4, #0]
 800fe86:	3307      	adds	r3, #7
 800fe88:	f023 0307 	bic.w	r3, r3, #7
 800fe8c:	f103 0108 	add.w	r1, r3, #8
 800fe90:	f8c8 1000 	str.w	r1, [r8]
 800fe94:	4682      	mov	sl, r0
 800fe96:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fe9a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800fe9e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8010100 <_printf_float+0x2a8>
 800fea2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800fea6:	eeb0 6bc0 	vabs.f64	d6, d0
 800feaa:	eeb4 6b47 	vcmp.f64	d6, d7
 800feae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feb2:	dd24      	ble.n	800fefe <_printf_float+0xa6>
 800feb4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800feb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800febc:	d502      	bpl.n	800fec4 <_printf_float+0x6c>
 800febe:	232d      	movs	r3, #45	; 0x2d
 800fec0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fec4:	4b90      	ldr	r3, [pc, #576]	; (8010108 <_printf_float+0x2b0>)
 800fec6:	4891      	ldr	r0, [pc, #580]	; (801010c <_printf_float+0x2b4>)
 800fec8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800fecc:	bf94      	ite	ls
 800fece:	4698      	movls	r8, r3
 800fed0:	4680      	movhi	r8, r0
 800fed2:	2303      	movs	r3, #3
 800fed4:	6123      	str	r3, [r4, #16]
 800fed6:	f022 0204 	bic.w	r2, r2, #4
 800feda:	2300      	movs	r3, #0
 800fedc:	6022      	str	r2, [r4, #0]
 800fede:	9304      	str	r3, [sp, #16]
 800fee0:	9700      	str	r7, [sp, #0]
 800fee2:	4633      	mov	r3, r6
 800fee4:	aa09      	add	r2, sp, #36	; 0x24
 800fee6:	4621      	mov	r1, r4
 800fee8:	4628      	mov	r0, r5
 800feea:	f000 f9d3 	bl	8010294 <_printf_common>
 800feee:	3001      	adds	r0, #1
 800fef0:	f040 808a 	bne.w	8010008 <_printf_float+0x1b0>
 800fef4:	f04f 30ff 	mov.w	r0, #4294967295
 800fef8:	b00b      	add	sp, #44	; 0x2c
 800fefa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fefe:	eeb4 0b40 	vcmp.f64	d0, d0
 800ff02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff06:	d709      	bvc.n	800ff1c <_printf_float+0xc4>
 800ff08:	ee10 3a90 	vmov	r3, s1
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	bfbc      	itt	lt
 800ff10:	232d      	movlt	r3, #45	; 0x2d
 800ff12:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ff16:	487e      	ldr	r0, [pc, #504]	; (8010110 <_printf_float+0x2b8>)
 800ff18:	4b7e      	ldr	r3, [pc, #504]	; (8010114 <_printf_float+0x2bc>)
 800ff1a:	e7d5      	b.n	800fec8 <_printf_float+0x70>
 800ff1c:	6863      	ldr	r3, [r4, #4]
 800ff1e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800ff22:	9104      	str	r1, [sp, #16]
 800ff24:	1c59      	adds	r1, r3, #1
 800ff26:	d13c      	bne.n	800ffa2 <_printf_float+0x14a>
 800ff28:	2306      	movs	r3, #6
 800ff2a:	6063      	str	r3, [r4, #4]
 800ff2c:	2300      	movs	r3, #0
 800ff2e:	9303      	str	r3, [sp, #12]
 800ff30:	ab08      	add	r3, sp, #32
 800ff32:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800ff36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ff3a:	ab07      	add	r3, sp, #28
 800ff3c:	6861      	ldr	r1, [r4, #4]
 800ff3e:	9300      	str	r3, [sp, #0]
 800ff40:	6022      	str	r2, [r4, #0]
 800ff42:	f10d 031b 	add.w	r3, sp, #27
 800ff46:	4628      	mov	r0, r5
 800ff48:	f7ff fef6 	bl	800fd38 <__cvt>
 800ff4c:	9b04      	ldr	r3, [sp, #16]
 800ff4e:	9907      	ldr	r1, [sp, #28]
 800ff50:	2b47      	cmp	r3, #71	; 0x47
 800ff52:	4680      	mov	r8, r0
 800ff54:	d108      	bne.n	800ff68 <_printf_float+0x110>
 800ff56:	1cc8      	adds	r0, r1, #3
 800ff58:	db02      	blt.n	800ff60 <_printf_float+0x108>
 800ff5a:	6863      	ldr	r3, [r4, #4]
 800ff5c:	4299      	cmp	r1, r3
 800ff5e:	dd41      	ble.n	800ffe4 <_printf_float+0x18c>
 800ff60:	f1a9 0902 	sub.w	r9, r9, #2
 800ff64:	fa5f f989 	uxtb.w	r9, r9
 800ff68:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ff6c:	d820      	bhi.n	800ffb0 <_printf_float+0x158>
 800ff6e:	3901      	subs	r1, #1
 800ff70:	464a      	mov	r2, r9
 800ff72:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ff76:	9107      	str	r1, [sp, #28]
 800ff78:	f7ff ff30 	bl	800fddc <__exponent>
 800ff7c:	9a08      	ldr	r2, [sp, #32]
 800ff7e:	9004      	str	r0, [sp, #16]
 800ff80:	1813      	adds	r3, r2, r0
 800ff82:	2a01      	cmp	r2, #1
 800ff84:	6123      	str	r3, [r4, #16]
 800ff86:	dc02      	bgt.n	800ff8e <_printf_float+0x136>
 800ff88:	6822      	ldr	r2, [r4, #0]
 800ff8a:	07d2      	lsls	r2, r2, #31
 800ff8c:	d501      	bpl.n	800ff92 <_printf_float+0x13a>
 800ff8e:	3301      	adds	r3, #1
 800ff90:	6123      	str	r3, [r4, #16]
 800ff92:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d0a2      	beq.n	800fee0 <_printf_float+0x88>
 800ff9a:	232d      	movs	r3, #45	; 0x2d
 800ff9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ffa0:	e79e      	b.n	800fee0 <_printf_float+0x88>
 800ffa2:	9904      	ldr	r1, [sp, #16]
 800ffa4:	2947      	cmp	r1, #71	; 0x47
 800ffa6:	d1c1      	bne.n	800ff2c <_printf_float+0xd4>
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d1bf      	bne.n	800ff2c <_printf_float+0xd4>
 800ffac:	2301      	movs	r3, #1
 800ffae:	e7bc      	b.n	800ff2a <_printf_float+0xd2>
 800ffb0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800ffb4:	d118      	bne.n	800ffe8 <_printf_float+0x190>
 800ffb6:	2900      	cmp	r1, #0
 800ffb8:	6863      	ldr	r3, [r4, #4]
 800ffba:	dd0b      	ble.n	800ffd4 <_printf_float+0x17c>
 800ffbc:	6121      	str	r1, [r4, #16]
 800ffbe:	b913      	cbnz	r3, 800ffc6 <_printf_float+0x16e>
 800ffc0:	6822      	ldr	r2, [r4, #0]
 800ffc2:	07d0      	lsls	r0, r2, #31
 800ffc4:	d502      	bpl.n	800ffcc <_printf_float+0x174>
 800ffc6:	3301      	adds	r3, #1
 800ffc8:	440b      	add	r3, r1
 800ffca:	6123      	str	r3, [r4, #16]
 800ffcc:	2300      	movs	r3, #0
 800ffce:	65a1      	str	r1, [r4, #88]	; 0x58
 800ffd0:	9304      	str	r3, [sp, #16]
 800ffd2:	e7de      	b.n	800ff92 <_printf_float+0x13a>
 800ffd4:	b913      	cbnz	r3, 800ffdc <_printf_float+0x184>
 800ffd6:	6822      	ldr	r2, [r4, #0]
 800ffd8:	07d2      	lsls	r2, r2, #31
 800ffda:	d501      	bpl.n	800ffe0 <_printf_float+0x188>
 800ffdc:	3302      	adds	r3, #2
 800ffde:	e7f4      	b.n	800ffca <_printf_float+0x172>
 800ffe0:	2301      	movs	r3, #1
 800ffe2:	e7f2      	b.n	800ffca <_printf_float+0x172>
 800ffe4:	f04f 0967 	mov.w	r9, #103	; 0x67
 800ffe8:	9b08      	ldr	r3, [sp, #32]
 800ffea:	4299      	cmp	r1, r3
 800ffec:	db05      	blt.n	800fffa <_printf_float+0x1a2>
 800ffee:	6823      	ldr	r3, [r4, #0]
 800fff0:	6121      	str	r1, [r4, #16]
 800fff2:	07d8      	lsls	r0, r3, #31
 800fff4:	d5ea      	bpl.n	800ffcc <_printf_float+0x174>
 800fff6:	1c4b      	adds	r3, r1, #1
 800fff8:	e7e7      	b.n	800ffca <_printf_float+0x172>
 800fffa:	2900      	cmp	r1, #0
 800fffc:	bfd4      	ite	le
 800fffe:	f1c1 0202 	rsble	r2, r1, #2
 8010002:	2201      	movgt	r2, #1
 8010004:	4413      	add	r3, r2
 8010006:	e7e0      	b.n	800ffca <_printf_float+0x172>
 8010008:	6823      	ldr	r3, [r4, #0]
 801000a:	055a      	lsls	r2, r3, #21
 801000c:	d407      	bmi.n	801001e <_printf_float+0x1c6>
 801000e:	6923      	ldr	r3, [r4, #16]
 8010010:	4642      	mov	r2, r8
 8010012:	4631      	mov	r1, r6
 8010014:	4628      	mov	r0, r5
 8010016:	47b8      	blx	r7
 8010018:	3001      	adds	r0, #1
 801001a:	d12a      	bne.n	8010072 <_printf_float+0x21a>
 801001c:	e76a      	b.n	800fef4 <_printf_float+0x9c>
 801001e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010022:	f240 80e2 	bls.w	80101ea <_printf_float+0x392>
 8010026:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801002a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801002e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010032:	d133      	bne.n	801009c <_printf_float+0x244>
 8010034:	4a38      	ldr	r2, [pc, #224]	; (8010118 <_printf_float+0x2c0>)
 8010036:	2301      	movs	r3, #1
 8010038:	4631      	mov	r1, r6
 801003a:	4628      	mov	r0, r5
 801003c:	47b8      	blx	r7
 801003e:	3001      	adds	r0, #1
 8010040:	f43f af58 	beq.w	800fef4 <_printf_float+0x9c>
 8010044:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010048:	429a      	cmp	r2, r3
 801004a:	db02      	blt.n	8010052 <_printf_float+0x1fa>
 801004c:	6823      	ldr	r3, [r4, #0]
 801004e:	07d8      	lsls	r0, r3, #31
 8010050:	d50f      	bpl.n	8010072 <_printf_float+0x21a>
 8010052:	4653      	mov	r3, sl
 8010054:	465a      	mov	r2, fp
 8010056:	4631      	mov	r1, r6
 8010058:	4628      	mov	r0, r5
 801005a:	47b8      	blx	r7
 801005c:	3001      	adds	r0, #1
 801005e:	f43f af49 	beq.w	800fef4 <_printf_float+0x9c>
 8010062:	f04f 0800 	mov.w	r8, #0
 8010066:	f104 091a 	add.w	r9, r4, #26
 801006a:	9b08      	ldr	r3, [sp, #32]
 801006c:	3b01      	subs	r3, #1
 801006e:	4543      	cmp	r3, r8
 8010070:	dc09      	bgt.n	8010086 <_printf_float+0x22e>
 8010072:	6823      	ldr	r3, [r4, #0]
 8010074:	079b      	lsls	r3, r3, #30
 8010076:	f100 8108 	bmi.w	801028a <_printf_float+0x432>
 801007a:	68e0      	ldr	r0, [r4, #12]
 801007c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801007e:	4298      	cmp	r0, r3
 8010080:	bfb8      	it	lt
 8010082:	4618      	movlt	r0, r3
 8010084:	e738      	b.n	800fef8 <_printf_float+0xa0>
 8010086:	2301      	movs	r3, #1
 8010088:	464a      	mov	r2, r9
 801008a:	4631      	mov	r1, r6
 801008c:	4628      	mov	r0, r5
 801008e:	47b8      	blx	r7
 8010090:	3001      	adds	r0, #1
 8010092:	f43f af2f 	beq.w	800fef4 <_printf_float+0x9c>
 8010096:	f108 0801 	add.w	r8, r8, #1
 801009a:	e7e6      	b.n	801006a <_printf_float+0x212>
 801009c:	9b07      	ldr	r3, [sp, #28]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	dc3c      	bgt.n	801011c <_printf_float+0x2c4>
 80100a2:	4a1d      	ldr	r2, [pc, #116]	; (8010118 <_printf_float+0x2c0>)
 80100a4:	2301      	movs	r3, #1
 80100a6:	4631      	mov	r1, r6
 80100a8:	4628      	mov	r0, r5
 80100aa:	47b8      	blx	r7
 80100ac:	3001      	adds	r0, #1
 80100ae:	f43f af21 	beq.w	800fef4 <_printf_float+0x9c>
 80100b2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80100b6:	4313      	orrs	r3, r2
 80100b8:	d102      	bne.n	80100c0 <_printf_float+0x268>
 80100ba:	6823      	ldr	r3, [r4, #0]
 80100bc:	07d9      	lsls	r1, r3, #31
 80100be:	d5d8      	bpl.n	8010072 <_printf_float+0x21a>
 80100c0:	4653      	mov	r3, sl
 80100c2:	465a      	mov	r2, fp
 80100c4:	4631      	mov	r1, r6
 80100c6:	4628      	mov	r0, r5
 80100c8:	47b8      	blx	r7
 80100ca:	3001      	adds	r0, #1
 80100cc:	f43f af12 	beq.w	800fef4 <_printf_float+0x9c>
 80100d0:	f04f 0900 	mov.w	r9, #0
 80100d4:	f104 0a1a 	add.w	sl, r4, #26
 80100d8:	9b07      	ldr	r3, [sp, #28]
 80100da:	425b      	negs	r3, r3
 80100dc:	454b      	cmp	r3, r9
 80100de:	dc01      	bgt.n	80100e4 <_printf_float+0x28c>
 80100e0:	9b08      	ldr	r3, [sp, #32]
 80100e2:	e795      	b.n	8010010 <_printf_float+0x1b8>
 80100e4:	2301      	movs	r3, #1
 80100e6:	4652      	mov	r2, sl
 80100e8:	4631      	mov	r1, r6
 80100ea:	4628      	mov	r0, r5
 80100ec:	47b8      	blx	r7
 80100ee:	3001      	adds	r0, #1
 80100f0:	f43f af00 	beq.w	800fef4 <_printf_float+0x9c>
 80100f4:	f109 0901 	add.w	r9, r9, #1
 80100f8:	e7ee      	b.n	80100d8 <_printf_float+0x280>
 80100fa:	bf00      	nop
 80100fc:	f3af 8000 	nop.w
 8010100:	ffffffff 	.word	0xffffffff
 8010104:	7fefffff 	.word	0x7fefffff
 8010108:	08014d2c 	.word	0x08014d2c
 801010c:	08014d30 	.word	0x08014d30
 8010110:	08014d38 	.word	0x08014d38
 8010114:	08014d34 	.word	0x08014d34
 8010118:	08014d3c 	.word	0x08014d3c
 801011c:	9a08      	ldr	r2, [sp, #32]
 801011e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010120:	429a      	cmp	r2, r3
 8010122:	bfa8      	it	ge
 8010124:	461a      	movge	r2, r3
 8010126:	2a00      	cmp	r2, #0
 8010128:	4691      	mov	r9, r2
 801012a:	dc38      	bgt.n	801019e <_printf_float+0x346>
 801012c:	2300      	movs	r3, #0
 801012e:	9305      	str	r3, [sp, #20]
 8010130:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010134:	f104 021a 	add.w	r2, r4, #26
 8010138:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801013a:	9905      	ldr	r1, [sp, #20]
 801013c:	9304      	str	r3, [sp, #16]
 801013e:	eba3 0309 	sub.w	r3, r3, r9
 8010142:	428b      	cmp	r3, r1
 8010144:	dc33      	bgt.n	80101ae <_printf_float+0x356>
 8010146:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801014a:	429a      	cmp	r2, r3
 801014c:	db3c      	blt.n	80101c8 <_printf_float+0x370>
 801014e:	6823      	ldr	r3, [r4, #0]
 8010150:	07da      	lsls	r2, r3, #31
 8010152:	d439      	bmi.n	80101c8 <_printf_float+0x370>
 8010154:	9b08      	ldr	r3, [sp, #32]
 8010156:	9a04      	ldr	r2, [sp, #16]
 8010158:	9907      	ldr	r1, [sp, #28]
 801015a:	1a9a      	subs	r2, r3, r2
 801015c:	eba3 0901 	sub.w	r9, r3, r1
 8010160:	4591      	cmp	r9, r2
 8010162:	bfa8      	it	ge
 8010164:	4691      	movge	r9, r2
 8010166:	f1b9 0f00 	cmp.w	r9, #0
 801016a:	dc35      	bgt.n	80101d8 <_printf_float+0x380>
 801016c:	f04f 0800 	mov.w	r8, #0
 8010170:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010174:	f104 0a1a 	add.w	sl, r4, #26
 8010178:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801017c:	1a9b      	subs	r3, r3, r2
 801017e:	eba3 0309 	sub.w	r3, r3, r9
 8010182:	4543      	cmp	r3, r8
 8010184:	f77f af75 	ble.w	8010072 <_printf_float+0x21a>
 8010188:	2301      	movs	r3, #1
 801018a:	4652      	mov	r2, sl
 801018c:	4631      	mov	r1, r6
 801018e:	4628      	mov	r0, r5
 8010190:	47b8      	blx	r7
 8010192:	3001      	adds	r0, #1
 8010194:	f43f aeae 	beq.w	800fef4 <_printf_float+0x9c>
 8010198:	f108 0801 	add.w	r8, r8, #1
 801019c:	e7ec      	b.n	8010178 <_printf_float+0x320>
 801019e:	4613      	mov	r3, r2
 80101a0:	4631      	mov	r1, r6
 80101a2:	4642      	mov	r2, r8
 80101a4:	4628      	mov	r0, r5
 80101a6:	47b8      	blx	r7
 80101a8:	3001      	adds	r0, #1
 80101aa:	d1bf      	bne.n	801012c <_printf_float+0x2d4>
 80101ac:	e6a2      	b.n	800fef4 <_printf_float+0x9c>
 80101ae:	2301      	movs	r3, #1
 80101b0:	4631      	mov	r1, r6
 80101b2:	4628      	mov	r0, r5
 80101b4:	9204      	str	r2, [sp, #16]
 80101b6:	47b8      	blx	r7
 80101b8:	3001      	adds	r0, #1
 80101ba:	f43f ae9b 	beq.w	800fef4 <_printf_float+0x9c>
 80101be:	9b05      	ldr	r3, [sp, #20]
 80101c0:	9a04      	ldr	r2, [sp, #16]
 80101c2:	3301      	adds	r3, #1
 80101c4:	9305      	str	r3, [sp, #20]
 80101c6:	e7b7      	b.n	8010138 <_printf_float+0x2e0>
 80101c8:	4653      	mov	r3, sl
 80101ca:	465a      	mov	r2, fp
 80101cc:	4631      	mov	r1, r6
 80101ce:	4628      	mov	r0, r5
 80101d0:	47b8      	blx	r7
 80101d2:	3001      	adds	r0, #1
 80101d4:	d1be      	bne.n	8010154 <_printf_float+0x2fc>
 80101d6:	e68d      	b.n	800fef4 <_printf_float+0x9c>
 80101d8:	9a04      	ldr	r2, [sp, #16]
 80101da:	464b      	mov	r3, r9
 80101dc:	4442      	add	r2, r8
 80101de:	4631      	mov	r1, r6
 80101e0:	4628      	mov	r0, r5
 80101e2:	47b8      	blx	r7
 80101e4:	3001      	adds	r0, #1
 80101e6:	d1c1      	bne.n	801016c <_printf_float+0x314>
 80101e8:	e684      	b.n	800fef4 <_printf_float+0x9c>
 80101ea:	9a08      	ldr	r2, [sp, #32]
 80101ec:	2a01      	cmp	r2, #1
 80101ee:	dc01      	bgt.n	80101f4 <_printf_float+0x39c>
 80101f0:	07db      	lsls	r3, r3, #31
 80101f2:	d537      	bpl.n	8010264 <_printf_float+0x40c>
 80101f4:	2301      	movs	r3, #1
 80101f6:	4642      	mov	r2, r8
 80101f8:	4631      	mov	r1, r6
 80101fa:	4628      	mov	r0, r5
 80101fc:	47b8      	blx	r7
 80101fe:	3001      	adds	r0, #1
 8010200:	f43f ae78 	beq.w	800fef4 <_printf_float+0x9c>
 8010204:	4653      	mov	r3, sl
 8010206:	465a      	mov	r2, fp
 8010208:	4631      	mov	r1, r6
 801020a:	4628      	mov	r0, r5
 801020c:	47b8      	blx	r7
 801020e:	3001      	adds	r0, #1
 8010210:	f43f ae70 	beq.w	800fef4 <_printf_float+0x9c>
 8010214:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010218:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801021c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010220:	d01b      	beq.n	801025a <_printf_float+0x402>
 8010222:	9b08      	ldr	r3, [sp, #32]
 8010224:	f108 0201 	add.w	r2, r8, #1
 8010228:	3b01      	subs	r3, #1
 801022a:	4631      	mov	r1, r6
 801022c:	4628      	mov	r0, r5
 801022e:	47b8      	blx	r7
 8010230:	3001      	adds	r0, #1
 8010232:	d10e      	bne.n	8010252 <_printf_float+0x3fa>
 8010234:	e65e      	b.n	800fef4 <_printf_float+0x9c>
 8010236:	2301      	movs	r3, #1
 8010238:	464a      	mov	r2, r9
 801023a:	4631      	mov	r1, r6
 801023c:	4628      	mov	r0, r5
 801023e:	47b8      	blx	r7
 8010240:	3001      	adds	r0, #1
 8010242:	f43f ae57 	beq.w	800fef4 <_printf_float+0x9c>
 8010246:	f108 0801 	add.w	r8, r8, #1
 801024a:	9b08      	ldr	r3, [sp, #32]
 801024c:	3b01      	subs	r3, #1
 801024e:	4543      	cmp	r3, r8
 8010250:	dcf1      	bgt.n	8010236 <_printf_float+0x3de>
 8010252:	9b04      	ldr	r3, [sp, #16]
 8010254:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010258:	e6db      	b.n	8010012 <_printf_float+0x1ba>
 801025a:	f04f 0800 	mov.w	r8, #0
 801025e:	f104 091a 	add.w	r9, r4, #26
 8010262:	e7f2      	b.n	801024a <_printf_float+0x3f2>
 8010264:	2301      	movs	r3, #1
 8010266:	4642      	mov	r2, r8
 8010268:	e7df      	b.n	801022a <_printf_float+0x3d2>
 801026a:	2301      	movs	r3, #1
 801026c:	464a      	mov	r2, r9
 801026e:	4631      	mov	r1, r6
 8010270:	4628      	mov	r0, r5
 8010272:	47b8      	blx	r7
 8010274:	3001      	adds	r0, #1
 8010276:	f43f ae3d 	beq.w	800fef4 <_printf_float+0x9c>
 801027a:	f108 0801 	add.w	r8, r8, #1
 801027e:	68e3      	ldr	r3, [r4, #12]
 8010280:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010282:	1a5b      	subs	r3, r3, r1
 8010284:	4543      	cmp	r3, r8
 8010286:	dcf0      	bgt.n	801026a <_printf_float+0x412>
 8010288:	e6f7      	b.n	801007a <_printf_float+0x222>
 801028a:	f04f 0800 	mov.w	r8, #0
 801028e:	f104 0919 	add.w	r9, r4, #25
 8010292:	e7f4      	b.n	801027e <_printf_float+0x426>

08010294 <_printf_common>:
 8010294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010298:	4616      	mov	r6, r2
 801029a:	4699      	mov	r9, r3
 801029c:	688a      	ldr	r2, [r1, #8]
 801029e:	690b      	ldr	r3, [r1, #16]
 80102a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80102a4:	4293      	cmp	r3, r2
 80102a6:	bfb8      	it	lt
 80102a8:	4613      	movlt	r3, r2
 80102aa:	6033      	str	r3, [r6, #0]
 80102ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80102b0:	4607      	mov	r7, r0
 80102b2:	460c      	mov	r4, r1
 80102b4:	b10a      	cbz	r2, 80102ba <_printf_common+0x26>
 80102b6:	3301      	adds	r3, #1
 80102b8:	6033      	str	r3, [r6, #0]
 80102ba:	6823      	ldr	r3, [r4, #0]
 80102bc:	0699      	lsls	r1, r3, #26
 80102be:	bf42      	ittt	mi
 80102c0:	6833      	ldrmi	r3, [r6, #0]
 80102c2:	3302      	addmi	r3, #2
 80102c4:	6033      	strmi	r3, [r6, #0]
 80102c6:	6825      	ldr	r5, [r4, #0]
 80102c8:	f015 0506 	ands.w	r5, r5, #6
 80102cc:	d106      	bne.n	80102dc <_printf_common+0x48>
 80102ce:	f104 0a19 	add.w	sl, r4, #25
 80102d2:	68e3      	ldr	r3, [r4, #12]
 80102d4:	6832      	ldr	r2, [r6, #0]
 80102d6:	1a9b      	subs	r3, r3, r2
 80102d8:	42ab      	cmp	r3, r5
 80102da:	dc26      	bgt.n	801032a <_printf_common+0x96>
 80102dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80102e0:	1e13      	subs	r3, r2, #0
 80102e2:	6822      	ldr	r2, [r4, #0]
 80102e4:	bf18      	it	ne
 80102e6:	2301      	movne	r3, #1
 80102e8:	0692      	lsls	r2, r2, #26
 80102ea:	d42b      	bmi.n	8010344 <_printf_common+0xb0>
 80102ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80102f0:	4649      	mov	r1, r9
 80102f2:	4638      	mov	r0, r7
 80102f4:	47c0      	blx	r8
 80102f6:	3001      	adds	r0, #1
 80102f8:	d01e      	beq.n	8010338 <_printf_common+0xa4>
 80102fa:	6823      	ldr	r3, [r4, #0]
 80102fc:	68e5      	ldr	r5, [r4, #12]
 80102fe:	6832      	ldr	r2, [r6, #0]
 8010300:	f003 0306 	and.w	r3, r3, #6
 8010304:	2b04      	cmp	r3, #4
 8010306:	bf08      	it	eq
 8010308:	1aad      	subeq	r5, r5, r2
 801030a:	68a3      	ldr	r3, [r4, #8]
 801030c:	6922      	ldr	r2, [r4, #16]
 801030e:	bf0c      	ite	eq
 8010310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010314:	2500      	movne	r5, #0
 8010316:	4293      	cmp	r3, r2
 8010318:	bfc4      	itt	gt
 801031a:	1a9b      	subgt	r3, r3, r2
 801031c:	18ed      	addgt	r5, r5, r3
 801031e:	2600      	movs	r6, #0
 8010320:	341a      	adds	r4, #26
 8010322:	42b5      	cmp	r5, r6
 8010324:	d11a      	bne.n	801035c <_printf_common+0xc8>
 8010326:	2000      	movs	r0, #0
 8010328:	e008      	b.n	801033c <_printf_common+0xa8>
 801032a:	2301      	movs	r3, #1
 801032c:	4652      	mov	r2, sl
 801032e:	4649      	mov	r1, r9
 8010330:	4638      	mov	r0, r7
 8010332:	47c0      	blx	r8
 8010334:	3001      	adds	r0, #1
 8010336:	d103      	bne.n	8010340 <_printf_common+0xac>
 8010338:	f04f 30ff 	mov.w	r0, #4294967295
 801033c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010340:	3501      	adds	r5, #1
 8010342:	e7c6      	b.n	80102d2 <_printf_common+0x3e>
 8010344:	18e1      	adds	r1, r4, r3
 8010346:	1c5a      	adds	r2, r3, #1
 8010348:	2030      	movs	r0, #48	; 0x30
 801034a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801034e:	4422      	add	r2, r4
 8010350:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010354:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010358:	3302      	adds	r3, #2
 801035a:	e7c7      	b.n	80102ec <_printf_common+0x58>
 801035c:	2301      	movs	r3, #1
 801035e:	4622      	mov	r2, r4
 8010360:	4649      	mov	r1, r9
 8010362:	4638      	mov	r0, r7
 8010364:	47c0      	blx	r8
 8010366:	3001      	adds	r0, #1
 8010368:	d0e6      	beq.n	8010338 <_printf_common+0xa4>
 801036a:	3601      	adds	r6, #1
 801036c:	e7d9      	b.n	8010322 <_printf_common+0x8e>
	...

08010370 <_printf_i>:
 8010370:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010374:	7e0f      	ldrb	r7, [r1, #24]
 8010376:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010378:	2f78      	cmp	r7, #120	; 0x78
 801037a:	4691      	mov	r9, r2
 801037c:	4680      	mov	r8, r0
 801037e:	460c      	mov	r4, r1
 8010380:	469a      	mov	sl, r3
 8010382:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010386:	d807      	bhi.n	8010398 <_printf_i+0x28>
 8010388:	2f62      	cmp	r7, #98	; 0x62
 801038a:	d80a      	bhi.n	80103a2 <_printf_i+0x32>
 801038c:	2f00      	cmp	r7, #0
 801038e:	f000 80d8 	beq.w	8010542 <_printf_i+0x1d2>
 8010392:	2f58      	cmp	r7, #88	; 0x58
 8010394:	f000 80a3 	beq.w	80104de <_printf_i+0x16e>
 8010398:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801039c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80103a0:	e03a      	b.n	8010418 <_printf_i+0xa8>
 80103a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80103a6:	2b15      	cmp	r3, #21
 80103a8:	d8f6      	bhi.n	8010398 <_printf_i+0x28>
 80103aa:	a101      	add	r1, pc, #4	; (adr r1, 80103b0 <_printf_i+0x40>)
 80103ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80103b0:	08010409 	.word	0x08010409
 80103b4:	0801041d 	.word	0x0801041d
 80103b8:	08010399 	.word	0x08010399
 80103bc:	08010399 	.word	0x08010399
 80103c0:	08010399 	.word	0x08010399
 80103c4:	08010399 	.word	0x08010399
 80103c8:	0801041d 	.word	0x0801041d
 80103cc:	08010399 	.word	0x08010399
 80103d0:	08010399 	.word	0x08010399
 80103d4:	08010399 	.word	0x08010399
 80103d8:	08010399 	.word	0x08010399
 80103dc:	08010529 	.word	0x08010529
 80103e0:	0801044d 	.word	0x0801044d
 80103e4:	0801050b 	.word	0x0801050b
 80103e8:	08010399 	.word	0x08010399
 80103ec:	08010399 	.word	0x08010399
 80103f0:	0801054b 	.word	0x0801054b
 80103f4:	08010399 	.word	0x08010399
 80103f8:	0801044d 	.word	0x0801044d
 80103fc:	08010399 	.word	0x08010399
 8010400:	08010399 	.word	0x08010399
 8010404:	08010513 	.word	0x08010513
 8010408:	682b      	ldr	r3, [r5, #0]
 801040a:	1d1a      	adds	r2, r3, #4
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	602a      	str	r2, [r5, #0]
 8010410:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010414:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010418:	2301      	movs	r3, #1
 801041a:	e0a3      	b.n	8010564 <_printf_i+0x1f4>
 801041c:	6820      	ldr	r0, [r4, #0]
 801041e:	6829      	ldr	r1, [r5, #0]
 8010420:	0606      	lsls	r6, r0, #24
 8010422:	f101 0304 	add.w	r3, r1, #4
 8010426:	d50a      	bpl.n	801043e <_printf_i+0xce>
 8010428:	680e      	ldr	r6, [r1, #0]
 801042a:	602b      	str	r3, [r5, #0]
 801042c:	2e00      	cmp	r6, #0
 801042e:	da03      	bge.n	8010438 <_printf_i+0xc8>
 8010430:	232d      	movs	r3, #45	; 0x2d
 8010432:	4276      	negs	r6, r6
 8010434:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010438:	485e      	ldr	r0, [pc, #376]	; (80105b4 <_printf_i+0x244>)
 801043a:	230a      	movs	r3, #10
 801043c:	e019      	b.n	8010472 <_printf_i+0x102>
 801043e:	680e      	ldr	r6, [r1, #0]
 8010440:	602b      	str	r3, [r5, #0]
 8010442:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010446:	bf18      	it	ne
 8010448:	b236      	sxthne	r6, r6
 801044a:	e7ef      	b.n	801042c <_printf_i+0xbc>
 801044c:	682b      	ldr	r3, [r5, #0]
 801044e:	6820      	ldr	r0, [r4, #0]
 8010450:	1d19      	adds	r1, r3, #4
 8010452:	6029      	str	r1, [r5, #0]
 8010454:	0601      	lsls	r1, r0, #24
 8010456:	d501      	bpl.n	801045c <_printf_i+0xec>
 8010458:	681e      	ldr	r6, [r3, #0]
 801045a:	e002      	b.n	8010462 <_printf_i+0xf2>
 801045c:	0646      	lsls	r6, r0, #25
 801045e:	d5fb      	bpl.n	8010458 <_printf_i+0xe8>
 8010460:	881e      	ldrh	r6, [r3, #0]
 8010462:	4854      	ldr	r0, [pc, #336]	; (80105b4 <_printf_i+0x244>)
 8010464:	2f6f      	cmp	r7, #111	; 0x6f
 8010466:	bf0c      	ite	eq
 8010468:	2308      	moveq	r3, #8
 801046a:	230a      	movne	r3, #10
 801046c:	2100      	movs	r1, #0
 801046e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010472:	6865      	ldr	r5, [r4, #4]
 8010474:	60a5      	str	r5, [r4, #8]
 8010476:	2d00      	cmp	r5, #0
 8010478:	bfa2      	ittt	ge
 801047a:	6821      	ldrge	r1, [r4, #0]
 801047c:	f021 0104 	bicge.w	r1, r1, #4
 8010480:	6021      	strge	r1, [r4, #0]
 8010482:	b90e      	cbnz	r6, 8010488 <_printf_i+0x118>
 8010484:	2d00      	cmp	r5, #0
 8010486:	d04d      	beq.n	8010524 <_printf_i+0x1b4>
 8010488:	4615      	mov	r5, r2
 801048a:	fbb6 f1f3 	udiv	r1, r6, r3
 801048e:	fb03 6711 	mls	r7, r3, r1, r6
 8010492:	5dc7      	ldrb	r7, [r0, r7]
 8010494:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010498:	4637      	mov	r7, r6
 801049a:	42bb      	cmp	r3, r7
 801049c:	460e      	mov	r6, r1
 801049e:	d9f4      	bls.n	801048a <_printf_i+0x11a>
 80104a0:	2b08      	cmp	r3, #8
 80104a2:	d10b      	bne.n	80104bc <_printf_i+0x14c>
 80104a4:	6823      	ldr	r3, [r4, #0]
 80104a6:	07de      	lsls	r6, r3, #31
 80104a8:	d508      	bpl.n	80104bc <_printf_i+0x14c>
 80104aa:	6923      	ldr	r3, [r4, #16]
 80104ac:	6861      	ldr	r1, [r4, #4]
 80104ae:	4299      	cmp	r1, r3
 80104b0:	bfde      	ittt	le
 80104b2:	2330      	movle	r3, #48	; 0x30
 80104b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80104b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80104bc:	1b52      	subs	r2, r2, r5
 80104be:	6122      	str	r2, [r4, #16]
 80104c0:	f8cd a000 	str.w	sl, [sp]
 80104c4:	464b      	mov	r3, r9
 80104c6:	aa03      	add	r2, sp, #12
 80104c8:	4621      	mov	r1, r4
 80104ca:	4640      	mov	r0, r8
 80104cc:	f7ff fee2 	bl	8010294 <_printf_common>
 80104d0:	3001      	adds	r0, #1
 80104d2:	d14c      	bne.n	801056e <_printf_i+0x1fe>
 80104d4:	f04f 30ff 	mov.w	r0, #4294967295
 80104d8:	b004      	add	sp, #16
 80104da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104de:	4835      	ldr	r0, [pc, #212]	; (80105b4 <_printf_i+0x244>)
 80104e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80104e4:	6829      	ldr	r1, [r5, #0]
 80104e6:	6823      	ldr	r3, [r4, #0]
 80104e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80104ec:	6029      	str	r1, [r5, #0]
 80104ee:	061d      	lsls	r5, r3, #24
 80104f0:	d514      	bpl.n	801051c <_printf_i+0x1ac>
 80104f2:	07df      	lsls	r7, r3, #31
 80104f4:	bf44      	itt	mi
 80104f6:	f043 0320 	orrmi.w	r3, r3, #32
 80104fa:	6023      	strmi	r3, [r4, #0]
 80104fc:	b91e      	cbnz	r6, 8010506 <_printf_i+0x196>
 80104fe:	6823      	ldr	r3, [r4, #0]
 8010500:	f023 0320 	bic.w	r3, r3, #32
 8010504:	6023      	str	r3, [r4, #0]
 8010506:	2310      	movs	r3, #16
 8010508:	e7b0      	b.n	801046c <_printf_i+0xfc>
 801050a:	6823      	ldr	r3, [r4, #0]
 801050c:	f043 0320 	orr.w	r3, r3, #32
 8010510:	6023      	str	r3, [r4, #0]
 8010512:	2378      	movs	r3, #120	; 0x78
 8010514:	4828      	ldr	r0, [pc, #160]	; (80105b8 <_printf_i+0x248>)
 8010516:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801051a:	e7e3      	b.n	80104e4 <_printf_i+0x174>
 801051c:	0659      	lsls	r1, r3, #25
 801051e:	bf48      	it	mi
 8010520:	b2b6      	uxthmi	r6, r6
 8010522:	e7e6      	b.n	80104f2 <_printf_i+0x182>
 8010524:	4615      	mov	r5, r2
 8010526:	e7bb      	b.n	80104a0 <_printf_i+0x130>
 8010528:	682b      	ldr	r3, [r5, #0]
 801052a:	6826      	ldr	r6, [r4, #0]
 801052c:	6961      	ldr	r1, [r4, #20]
 801052e:	1d18      	adds	r0, r3, #4
 8010530:	6028      	str	r0, [r5, #0]
 8010532:	0635      	lsls	r5, r6, #24
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	d501      	bpl.n	801053c <_printf_i+0x1cc>
 8010538:	6019      	str	r1, [r3, #0]
 801053a:	e002      	b.n	8010542 <_printf_i+0x1d2>
 801053c:	0670      	lsls	r0, r6, #25
 801053e:	d5fb      	bpl.n	8010538 <_printf_i+0x1c8>
 8010540:	8019      	strh	r1, [r3, #0]
 8010542:	2300      	movs	r3, #0
 8010544:	6123      	str	r3, [r4, #16]
 8010546:	4615      	mov	r5, r2
 8010548:	e7ba      	b.n	80104c0 <_printf_i+0x150>
 801054a:	682b      	ldr	r3, [r5, #0]
 801054c:	1d1a      	adds	r2, r3, #4
 801054e:	602a      	str	r2, [r5, #0]
 8010550:	681d      	ldr	r5, [r3, #0]
 8010552:	6862      	ldr	r2, [r4, #4]
 8010554:	2100      	movs	r1, #0
 8010556:	4628      	mov	r0, r5
 8010558:	f7ef fe7a 	bl	8000250 <memchr>
 801055c:	b108      	cbz	r0, 8010562 <_printf_i+0x1f2>
 801055e:	1b40      	subs	r0, r0, r5
 8010560:	6060      	str	r0, [r4, #4]
 8010562:	6863      	ldr	r3, [r4, #4]
 8010564:	6123      	str	r3, [r4, #16]
 8010566:	2300      	movs	r3, #0
 8010568:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801056c:	e7a8      	b.n	80104c0 <_printf_i+0x150>
 801056e:	6923      	ldr	r3, [r4, #16]
 8010570:	462a      	mov	r2, r5
 8010572:	4649      	mov	r1, r9
 8010574:	4640      	mov	r0, r8
 8010576:	47d0      	blx	sl
 8010578:	3001      	adds	r0, #1
 801057a:	d0ab      	beq.n	80104d4 <_printf_i+0x164>
 801057c:	6823      	ldr	r3, [r4, #0]
 801057e:	079b      	lsls	r3, r3, #30
 8010580:	d413      	bmi.n	80105aa <_printf_i+0x23a>
 8010582:	68e0      	ldr	r0, [r4, #12]
 8010584:	9b03      	ldr	r3, [sp, #12]
 8010586:	4298      	cmp	r0, r3
 8010588:	bfb8      	it	lt
 801058a:	4618      	movlt	r0, r3
 801058c:	e7a4      	b.n	80104d8 <_printf_i+0x168>
 801058e:	2301      	movs	r3, #1
 8010590:	4632      	mov	r2, r6
 8010592:	4649      	mov	r1, r9
 8010594:	4640      	mov	r0, r8
 8010596:	47d0      	blx	sl
 8010598:	3001      	adds	r0, #1
 801059a:	d09b      	beq.n	80104d4 <_printf_i+0x164>
 801059c:	3501      	adds	r5, #1
 801059e:	68e3      	ldr	r3, [r4, #12]
 80105a0:	9903      	ldr	r1, [sp, #12]
 80105a2:	1a5b      	subs	r3, r3, r1
 80105a4:	42ab      	cmp	r3, r5
 80105a6:	dcf2      	bgt.n	801058e <_printf_i+0x21e>
 80105a8:	e7eb      	b.n	8010582 <_printf_i+0x212>
 80105aa:	2500      	movs	r5, #0
 80105ac:	f104 0619 	add.w	r6, r4, #25
 80105b0:	e7f5      	b.n	801059e <_printf_i+0x22e>
 80105b2:	bf00      	nop
 80105b4:	08014d3e 	.word	0x08014d3e
 80105b8:	08014d4f 	.word	0x08014d4f

080105bc <_scanf_float>:
 80105bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105c0:	b087      	sub	sp, #28
 80105c2:	4617      	mov	r7, r2
 80105c4:	9303      	str	r3, [sp, #12]
 80105c6:	688b      	ldr	r3, [r1, #8]
 80105c8:	1e5a      	subs	r2, r3, #1
 80105ca:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80105ce:	bf83      	ittte	hi
 80105d0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80105d4:	195b      	addhi	r3, r3, r5
 80105d6:	9302      	strhi	r3, [sp, #8]
 80105d8:	2300      	movls	r3, #0
 80105da:	bf86      	itte	hi
 80105dc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80105e0:	608b      	strhi	r3, [r1, #8]
 80105e2:	9302      	strls	r3, [sp, #8]
 80105e4:	680b      	ldr	r3, [r1, #0]
 80105e6:	468b      	mov	fp, r1
 80105e8:	2500      	movs	r5, #0
 80105ea:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80105ee:	f84b 3b1c 	str.w	r3, [fp], #28
 80105f2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80105f6:	4680      	mov	r8, r0
 80105f8:	460c      	mov	r4, r1
 80105fa:	465e      	mov	r6, fp
 80105fc:	46aa      	mov	sl, r5
 80105fe:	46a9      	mov	r9, r5
 8010600:	9501      	str	r5, [sp, #4]
 8010602:	68a2      	ldr	r2, [r4, #8]
 8010604:	b152      	cbz	r2, 801061c <_scanf_float+0x60>
 8010606:	683b      	ldr	r3, [r7, #0]
 8010608:	781b      	ldrb	r3, [r3, #0]
 801060a:	2b4e      	cmp	r3, #78	; 0x4e
 801060c:	d864      	bhi.n	80106d8 <_scanf_float+0x11c>
 801060e:	2b40      	cmp	r3, #64	; 0x40
 8010610:	d83c      	bhi.n	801068c <_scanf_float+0xd0>
 8010612:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8010616:	b2c8      	uxtb	r0, r1
 8010618:	280e      	cmp	r0, #14
 801061a:	d93a      	bls.n	8010692 <_scanf_float+0xd6>
 801061c:	f1b9 0f00 	cmp.w	r9, #0
 8010620:	d003      	beq.n	801062a <_scanf_float+0x6e>
 8010622:	6823      	ldr	r3, [r4, #0]
 8010624:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010628:	6023      	str	r3, [r4, #0]
 801062a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801062e:	f1ba 0f01 	cmp.w	sl, #1
 8010632:	f200 8113 	bhi.w	801085c <_scanf_float+0x2a0>
 8010636:	455e      	cmp	r6, fp
 8010638:	f200 8105 	bhi.w	8010846 <_scanf_float+0x28a>
 801063c:	2501      	movs	r5, #1
 801063e:	4628      	mov	r0, r5
 8010640:	b007      	add	sp, #28
 8010642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010646:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801064a:	2a0d      	cmp	r2, #13
 801064c:	d8e6      	bhi.n	801061c <_scanf_float+0x60>
 801064e:	a101      	add	r1, pc, #4	; (adr r1, 8010654 <_scanf_float+0x98>)
 8010650:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010654:	08010793 	.word	0x08010793
 8010658:	0801061d 	.word	0x0801061d
 801065c:	0801061d 	.word	0x0801061d
 8010660:	0801061d 	.word	0x0801061d
 8010664:	080107f3 	.word	0x080107f3
 8010668:	080107cb 	.word	0x080107cb
 801066c:	0801061d 	.word	0x0801061d
 8010670:	0801061d 	.word	0x0801061d
 8010674:	080107a1 	.word	0x080107a1
 8010678:	0801061d 	.word	0x0801061d
 801067c:	0801061d 	.word	0x0801061d
 8010680:	0801061d 	.word	0x0801061d
 8010684:	0801061d 	.word	0x0801061d
 8010688:	08010759 	.word	0x08010759
 801068c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8010690:	e7db      	b.n	801064a <_scanf_float+0x8e>
 8010692:	290e      	cmp	r1, #14
 8010694:	d8c2      	bhi.n	801061c <_scanf_float+0x60>
 8010696:	a001      	add	r0, pc, #4	; (adr r0, 801069c <_scanf_float+0xe0>)
 8010698:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801069c:	0801074b 	.word	0x0801074b
 80106a0:	0801061d 	.word	0x0801061d
 80106a4:	0801074b 	.word	0x0801074b
 80106a8:	080107df 	.word	0x080107df
 80106ac:	0801061d 	.word	0x0801061d
 80106b0:	080106f9 	.word	0x080106f9
 80106b4:	08010735 	.word	0x08010735
 80106b8:	08010735 	.word	0x08010735
 80106bc:	08010735 	.word	0x08010735
 80106c0:	08010735 	.word	0x08010735
 80106c4:	08010735 	.word	0x08010735
 80106c8:	08010735 	.word	0x08010735
 80106cc:	08010735 	.word	0x08010735
 80106d0:	08010735 	.word	0x08010735
 80106d4:	08010735 	.word	0x08010735
 80106d8:	2b6e      	cmp	r3, #110	; 0x6e
 80106da:	d809      	bhi.n	80106f0 <_scanf_float+0x134>
 80106dc:	2b60      	cmp	r3, #96	; 0x60
 80106de:	d8b2      	bhi.n	8010646 <_scanf_float+0x8a>
 80106e0:	2b54      	cmp	r3, #84	; 0x54
 80106e2:	d077      	beq.n	80107d4 <_scanf_float+0x218>
 80106e4:	2b59      	cmp	r3, #89	; 0x59
 80106e6:	d199      	bne.n	801061c <_scanf_float+0x60>
 80106e8:	2d07      	cmp	r5, #7
 80106ea:	d197      	bne.n	801061c <_scanf_float+0x60>
 80106ec:	2508      	movs	r5, #8
 80106ee:	e029      	b.n	8010744 <_scanf_float+0x188>
 80106f0:	2b74      	cmp	r3, #116	; 0x74
 80106f2:	d06f      	beq.n	80107d4 <_scanf_float+0x218>
 80106f4:	2b79      	cmp	r3, #121	; 0x79
 80106f6:	e7f6      	b.n	80106e6 <_scanf_float+0x12a>
 80106f8:	6821      	ldr	r1, [r4, #0]
 80106fa:	05c8      	lsls	r0, r1, #23
 80106fc:	d51a      	bpl.n	8010734 <_scanf_float+0x178>
 80106fe:	9b02      	ldr	r3, [sp, #8]
 8010700:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8010704:	6021      	str	r1, [r4, #0]
 8010706:	f109 0901 	add.w	r9, r9, #1
 801070a:	b11b      	cbz	r3, 8010714 <_scanf_float+0x158>
 801070c:	3b01      	subs	r3, #1
 801070e:	3201      	adds	r2, #1
 8010710:	9302      	str	r3, [sp, #8]
 8010712:	60a2      	str	r2, [r4, #8]
 8010714:	68a3      	ldr	r3, [r4, #8]
 8010716:	3b01      	subs	r3, #1
 8010718:	60a3      	str	r3, [r4, #8]
 801071a:	6923      	ldr	r3, [r4, #16]
 801071c:	3301      	adds	r3, #1
 801071e:	6123      	str	r3, [r4, #16]
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	3b01      	subs	r3, #1
 8010724:	2b00      	cmp	r3, #0
 8010726:	607b      	str	r3, [r7, #4]
 8010728:	f340 8084 	ble.w	8010834 <_scanf_float+0x278>
 801072c:	683b      	ldr	r3, [r7, #0]
 801072e:	3301      	adds	r3, #1
 8010730:	603b      	str	r3, [r7, #0]
 8010732:	e766      	b.n	8010602 <_scanf_float+0x46>
 8010734:	eb1a 0f05 	cmn.w	sl, r5
 8010738:	f47f af70 	bne.w	801061c <_scanf_float+0x60>
 801073c:	6822      	ldr	r2, [r4, #0]
 801073e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8010742:	6022      	str	r2, [r4, #0]
 8010744:	f806 3b01 	strb.w	r3, [r6], #1
 8010748:	e7e4      	b.n	8010714 <_scanf_float+0x158>
 801074a:	6822      	ldr	r2, [r4, #0]
 801074c:	0610      	lsls	r0, r2, #24
 801074e:	f57f af65 	bpl.w	801061c <_scanf_float+0x60>
 8010752:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010756:	e7f4      	b.n	8010742 <_scanf_float+0x186>
 8010758:	f1ba 0f00 	cmp.w	sl, #0
 801075c:	d10e      	bne.n	801077c <_scanf_float+0x1c0>
 801075e:	f1b9 0f00 	cmp.w	r9, #0
 8010762:	d10e      	bne.n	8010782 <_scanf_float+0x1c6>
 8010764:	6822      	ldr	r2, [r4, #0]
 8010766:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801076a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801076e:	d108      	bne.n	8010782 <_scanf_float+0x1c6>
 8010770:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010774:	6022      	str	r2, [r4, #0]
 8010776:	f04f 0a01 	mov.w	sl, #1
 801077a:	e7e3      	b.n	8010744 <_scanf_float+0x188>
 801077c:	f1ba 0f02 	cmp.w	sl, #2
 8010780:	d055      	beq.n	801082e <_scanf_float+0x272>
 8010782:	2d01      	cmp	r5, #1
 8010784:	d002      	beq.n	801078c <_scanf_float+0x1d0>
 8010786:	2d04      	cmp	r5, #4
 8010788:	f47f af48 	bne.w	801061c <_scanf_float+0x60>
 801078c:	3501      	adds	r5, #1
 801078e:	b2ed      	uxtb	r5, r5
 8010790:	e7d8      	b.n	8010744 <_scanf_float+0x188>
 8010792:	f1ba 0f01 	cmp.w	sl, #1
 8010796:	f47f af41 	bne.w	801061c <_scanf_float+0x60>
 801079a:	f04f 0a02 	mov.w	sl, #2
 801079e:	e7d1      	b.n	8010744 <_scanf_float+0x188>
 80107a0:	b97d      	cbnz	r5, 80107c2 <_scanf_float+0x206>
 80107a2:	f1b9 0f00 	cmp.w	r9, #0
 80107a6:	f47f af3c 	bne.w	8010622 <_scanf_float+0x66>
 80107aa:	6822      	ldr	r2, [r4, #0]
 80107ac:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80107b0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80107b4:	f47f af39 	bne.w	801062a <_scanf_float+0x6e>
 80107b8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80107bc:	6022      	str	r2, [r4, #0]
 80107be:	2501      	movs	r5, #1
 80107c0:	e7c0      	b.n	8010744 <_scanf_float+0x188>
 80107c2:	2d03      	cmp	r5, #3
 80107c4:	d0e2      	beq.n	801078c <_scanf_float+0x1d0>
 80107c6:	2d05      	cmp	r5, #5
 80107c8:	e7de      	b.n	8010788 <_scanf_float+0x1cc>
 80107ca:	2d02      	cmp	r5, #2
 80107cc:	f47f af26 	bne.w	801061c <_scanf_float+0x60>
 80107d0:	2503      	movs	r5, #3
 80107d2:	e7b7      	b.n	8010744 <_scanf_float+0x188>
 80107d4:	2d06      	cmp	r5, #6
 80107d6:	f47f af21 	bne.w	801061c <_scanf_float+0x60>
 80107da:	2507      	movs	r5, #7
 80107dc:	e7b2      	b.n	8010744 <_scanf_float+0x188>
 80107de:	6822      	ldr	r2, [r4, #0]
 80107e0:	0591      	lsls	r1, r2, #22
 80107e2:	f57f af1b 	bpl.w	801061c <_scanf_float+0x60>
 80107e6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80107ea:	6022      	str	r2, [r4, #0]
 80107ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80107f0:	e7a8      	b.n	8010744 <_scanf_float+0x188>
 80107f2:	6822      	ldr	r2, [r4, #0]
 80107f4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80107f8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80107fc:	d006      	beq.n	801080c <_scanf_float+0x250>
 80107fe:	0550      	lsls	r0, r2, #21
 8010800:	f57f af0c 	bpl.w	801061c <_scanf_float+0x60>
 8010804:	f1b9 0f00 	cmp.w	r9, #0
 8010808:	f43f af0f 	beq.w	801062a <_scanf_float+0x6e>
 801080c:	0591      	lsls	r1, r2, #22
 801080e:	bf58      	it	pl
 8010810:	9901      	ldrpl	r1, [sp, #4]
 8010812:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010816:	bf58      	it	pl
 8010818:	eba9 0101 	subpl.w	r1, r9, r1
 801081c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8010820:	bf58      	it	pl
 8010822:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010826:	6022      	str	r2, [r4, #0]
 8010828:	f04f 0900 	mov.w	r9, #0
 801082c:	e78a      	b.n	8010744 <_scanf_float+0x188>
 801082e:	f04f 0a03 	mov.w	sl, #3
 8010832:	e787      	b.n	8010744 <_scanf_float+0x188>
 8010834:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010838:	4639      	mov	r1, r7
 801083a:	4640      	mov	r0, r8
 801083c:	4798      	blx	r3
 801083e:	2800      	cmp	r0, #0
 8010840:	f43f aedf 	beq.w	8010602 <_scanf_float+0x46>
 8010844:	e6ea      	b.n	801061c <_scanf_float+0x60>
 8010846:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801084a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801084e:	463a      	mov	r2, r7
 8010850:	4640      	mov	r0, r8
 8010852:	4798      	blx	r3
 8010854:	6923      	ldr	r3, [r4, #16]
 8010856:	3b01      	subs	r3, #1
 8010858:	6123      	str	r3, [r4, #16]
 801085a:	e6ec      	b.n	8010636 <_scanf_float+0x7a>
 801085c:	1e6b      	subs	r3, r5, #1
 801085e:	2b06      	cmp	r3, #6
 8010860:	d825      	bhi.n	80108ae <_scanf_float+0x2f2>
 8010862:	2d02      	cmp	r5, #2
 8010864:	d836      	bhi.n	80108d4 <_scanf_float+0x318>
 8010866:	455e      	cmp	r6, fp
 8010868:	f67f aee8 	bls.w	801063c <_scanf_float+0x80>
 801086c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010870:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010874:	463a      	mov	r2, r7
 8010876:	4640      	mov	r0, r8
 8010878:	4798      	blx	r3
 801087a:	6923      	ldr	r3, [r4, #16]
 801087c:	3b01      	subs	r3, #1
 801087e:	6123      	str	r3, [r4, #16]
 8010880:	e7f1      	b.n	8010866 <_scanf_float+0x2aa>
 8010882:	9802      	ldr	r0, [sp, #8]
 8010884:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010888:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801088c:	9002      	str	r0, [sp, #8]
 801088e:	463a      	mov	r2, r7
 8010890:	4640      	mov	r0, r8
 8010892:	4798      	blx	r3
 8010894:	6923      	ldr	r3, [r4, #16]
 8010896:	3b01      	subs	r3, #1
 8010898:	6123      	str	r3, [r4, #16]
 801089a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801089e:	fa5f fa8a 	uxtb.w	sl, sl
 80108a2:	f1ba 0f02 	cmp.w	sl, #2
 80108a6:	d1ec      	bne.n	8010882 <_scanf_float+0x2c6>
 80108a8:	3d03      	subs	r5, #3
 80108aa:	b2ed      	uxtb	r5, r5
 80108ac:	1b76      	subs	r6, r6, r5
 80108ae:	6823      	ldr	r3, [r4, #0]
 80108b0:	05da      	lsls	r2, r3, #23
 80108b2:	d52f      	bpl.n	8010914 <_scanf_float+0x358>
 80108b4:	055b      	lsls	r3, r3, #21
 80108b6:	d510      	bpl.n	80108da <_scanf_float+0x31e>
 80108b8:	455e      	cmp	r6, fp
 80108ba:	f67f aebf 	bls.w	801063c <_scanf_float+0x80>
 80108be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80108c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80108c6:	463a      	mov	r2, r7
 80108c8:	4640      	mov	r0, r8
 80108ca:	4798      	blx	r3
 80108cc:	6923      	ldr	r3, [r4, #16]
 80108ce:	3b01      	subs	r3, #1
 80108d0:	6123      	str	r3, [r4, #16]
 80108d2:	e7f1      	b.n	80108b8 <_scanf_float+0x2fc>
 80108d4:	46aa      	mov	sl, r5
 80108d6:	9602      	str	r6, [sp, #8]
 80108d8:	e7df      	b.n	801089a <_scanf_float+0x2de>
 80108da:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80108de:	6923      	ldr	r3, [r4, #16]
 80108e0:	2965      	cmp	r1, #101	; 0x65
 80108e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80108e6:	f106 35ff 	add.w	r5, r6, #4294967295
 80108ea:	6123      	str	r3, [r4, #16]
 80108ec:	d00c      	beq.n	8010908 <_scanf_float+0x34c>
 80108ee:	2945      	cmp	r1, #69	; 0x45
 80108f0:	d00a      	beq.n	8010908 <_scanf_float+0x34c>
 80108f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80108f6:	463a      	mov	r2, r7
 80108f8:	4640      	mov	r0, r8
 80108fa:	4798      	blx	r3
 80108fc:	6923      	ldr	r3, [r4, #16]
 80108fe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010902:	3b01      	subs	r3, #1
 8010904:	1eb5      	subs	r5, r6, #2
 8010906:	6123      	str	r3, [r4, #16]
 8010908:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801090c:	463a      	mov	r2, r7
 801090e:	4640      	mov	r0, r8
 8010910:	4798      	blx	r3
 8010912:	462e      	mov	r6, r5
 8010914:	6825      	ldr	r5, [r4, #0]
 8010916:	f015 0510 	ands.w	r5, r5, #16
 801091a:	d14e      	bne.n	80109ba <_scanf_float+0x3fe>
 801091c:	7035      	strb	r5, [r6, #0]
 801091e:	6823      	ldr	r3, [r4, #0]
 8010920:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010928:	d119      	bne.n	801095e <_scanf_float+0x3a2>
 801092a:	9b01      	ldr	r3, [sp, #4]
 801092c:	454b      	cmp	r3, r9
 801092e:	eba3 0209 	sub.w	r2, r3, r9
 8010932:	d121      	bne.n	8010978 <_scanf_float+0x3bc>
 8010934:	2200      	movs	r2, #0
 8010936:	4659      	mov	r1, fp
 8010938:	4640      	mov	r0, r8
 801093a:	f000 ff07 	bl	801174c <_strtod_r>
 801093e:	6822      	ldr	r2, [r4, #0]
 8010940:	9b03      	ldr	r3, [sp, #12]
 8010942:	f012 0f02 	tst.w	r2, #2
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	d021      	beq.n	801098e <_scanf_float+0x3d2>
 801094a:	9903      	ldr	r1, [sp, #12]
 801094c:	1d1a      	adds	r2, r3, #4
 801094e:	600a      	str	r2, [r1, #0]
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	ed83 0b00 	vstr	d0, [r3]
 8010956:	68e3      	ldr	r3, [r4, #12]
 8010958:	3301      	adds	r3, #1
 801095a:	60e3      	str	r3, [r4, #12]
 801095c:	e66f      	b.n	801063e <_scanf_float+0x82>
 801095e:	9b04      	ldr	r3, [sp, #16]
 8010960:	2b00      	cmp	r3, #0
 8010962:	d0e7      	beq.n	8010934 <_scanf_float+0x378>
 8010964:	9905      	ldr	r1, [sp, #20]
 8010966:	230a      	movs	r3, #10
 8010968:	462a      	mov	r2, r5
 801096a:	3101      	adds	r1, #1
 801096c:	4640      	mov	r0, r8
 801096e:	f000 ff75 	bl	801185c <_strtol_r>
 8010972:	9b04      	ldr	r3, [sp, #16]
 8010974:	9e05      	ldr	r6, [sp, #20]
 8010976:	1ac2      	subs	r2, r0, r3
 8010978:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801097c:	429e      	cmp	r6, r3
 801097e:	bf28      	it	cs
 8010980:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8010984:	490e      	ldr	r1, [pc, #56]	; (80109c0 <_scanf_float+0x404>)
 8010986:	4630      	mov	r0, r6
 8010988:	f000 f8d8 	bl	8010b3c <siprintf>
 801098c:	e7d2      	b.n	8010934 <_scanf_float+0x378>
 801098e:	9903      	ldr	r1, [sp, #12]
 8010990:	f012 0f04 	tst.w	r2, #4
 8010994:	f103 0204 	add.w	r2, r3, #4
 8010998:	600a      	str	r2, [r1, #0]
 801099a:	d1d9      	bne.n	8010950 <_scanf_float+0x394>
 801099c:	eeb4 0b40 	vcmp.f64	d0, d0
 80109a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109a4:	681e      	ldr	r6, [r3, #0]
 80109a6:	d705      	bvc.n	80109b4 <_scanf_float+0x3f8>
 80109a8:	4806      	ldr	r0, [pc, #24]	; (80109c4 <_scanf_float+0x408>)
 80109aa:	f000 f8c1 	bl	8010b30 <nanf>
 80109ae:	ed86 0a00 	vstr	s0, [r6]
 80109b2:	e7d0      	b.n	8010956 <_scanf_float+0x39a>
 80109b4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80109b8:	e7f9      	b.n	80109ae <_scanf_float+0x3f2>
 80109ba:	2500      	movs	r5, #0
 80109bc:	e63f      	b.n	801063e <_scanf_float+0x82>
 80109be:	bf00      	nop
 80109c0:	08014d60 	.word	0x08014d60
 80109c4:	080151d0 	.word	0x080151d0

080109c8 <iprintf>:
 80109c8:	b40f      	push	{r0, r1, r2, r3}
 80109ca:	4b0a      	ldr	r3, [pc, #40]	; (80109f4 <iprintf+0x2c>)
 80109cc:	b513      	push	{r0, r1, r4, lr}
 80109ce:	681c      	ldr	r4, [r3, #0]
 80109d0:	b124      	cbz	r4, 80109dc <iprintf+0x14>
 80109d2:	69a3      	ldr	r3, [r4, #24]
 80109d4:	b913      	cbnz	r3, 80109dc <iprintf+0x14>
 80109d6:	4620      	mov	r0, r4
 80109d8:	f001 ff16 	bl	8012808 <__sinit>
 80109dc:	ab05      	add	r3, sp, #20
 80109de:	9a04      	ldr	r2, [sp, #16]
 80109e0:	68a1      	ldr	r1, [r4, #8]
 80109e2:	9301      	str	r3, [sp, #4]
 80109e4:	4620      	mov	r0, r4
 80109e6:	f003 f9ff 	bl	8013de8 <_vfiprintf_r>
 80109ea:	b002      	add	sp, #8
 80109ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80109f0:	b004      	add	sp, #16
 80109f2:	4770      	bx	lr
 80109f4:	20000010 	.word	0x20000010

080109f8 <putchar>:
 80109f8:	4b09      	ldr	r3, [pc, #36]	; (8010a20 <putchar+0x28>)
 80109fa:	b513      	push	{r0, r1, r4, lr}
 80109fc:	681c      	ldr	r4, [r3, #0]
 80109fe:	4601      	mov	r1, r0
 8010a00:	b134      	cbz	r4, 8010a10 <putchar+0x18>
 8010a02:	69a3      	ldr	r3, [r4, #24]
 8010a04:	b923      	cbnz	r3, 8010a10 <putchar+0x18>
 8010a06:	9001      	str	r0, [sp, #4]
 8010a08:	4620      	mov	r0, r4
 8010a0a:	f001 fefd 	bl	8012808 <__sinit>
 8010a0e:	9901      	ldr	r1, [sp, #4]
 8010a10:	68a2      	ldr	r2, [r4, #8]
 8010a12:	4620      	mov	r0, r4
 8010a14:	b002      	add	sp, #8
 8010a16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a1a:	f003 bb15 	b.w	8014048 <_putc_r>
 8010a1e:	bf00      	nop
 8010a20:	20000010 	.word	0x20000010

08010a24 <_puts_r>:
 8010a24:	b570      	push	{r4, r5, r6, lr}
 8010a26:	460e      	mov	r6, r1
 8010a28:	4605      	mov	r5, r0
 8010a2a:	b118      	cbz	r0, 8010a34 <_puts_r+0x10>
 8010a2c:	6983      	ldr	r3, [r0, #24]
 8010a2e:	b90b      	cbnz	r3, 8010a34 <_puts_r+0x10>
 8010a30:	f001 feea 	bl	8012808 <__sinit>
 8010a34:	69ab      	ldr	r3, [r5, #24]
 8010a36:	68ac      	ldr	r4, [r5, #8]
 8010a38:	b913      	cbnz	r3, 8010a40 <_puts_r+0x1c>
 8010a3a:	4628      	mov	r0, r5
 8010a3c:	f001 fee4 	bl	8012808 <__sinit>
 8010a40:	4b2c      	ldr	r3, [pc, #176]	; (8010af4 <_puts_r+0xd0>)
 8010a42:	429c      	cmp	r4, r3
 8010a44:	d120      	bne.n	8010a88 <_puts_r+0x64>
 8010a46:	686c      	ldr	r4, [r5, #4]
 8010a48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010a4a:	07db      	lsls	r3, r3, #31
 8010a4c:	d405      	bmi.n	8010a5a <_puts_r+0x36>
 8010a4e:	89a3      	ldrh	r3, [r4, #12]
 8010a50:	0598      	lsls	r0, r3, #22
 8010a52:	d402      	bmi.n	8010a5a <_puts_r+0x36>
 8010a54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010a56:	f002 fae8 	bl	801302a <__retarget_lock_acquire_recursive>
 8010a5a:	89a3      	ldrh	r3, [r4, #12]
 8010a5c:	0719      	lsls	r1, r3, #28
 8010a5e:	d51d      	bpl.n	8010a9c <_puts_r+0x78>
 8010a60:	6923      	ldr	r3, [r4, #16]
 8010a62:	b1db      	cbz	r3, 8010a9c <_puts_r+0x78>
 8010a64:	3e01      	subs	r6, #1
 8010a66:	68a3      	ldr	r3, [r4, #8]
 8010a68:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010a6c:	3b01      	subs	r3, #1
 8010a6e:	60a3      	str	r3, [r4, #8]
 8010a70:	bb39      	cbnz	r1, 8010ac2 <_puts_r+0x9e>
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	da38      	bge.n	8010ae8 <_puts_r+0xc4>
 8010a76:	4622      	mov	r2, r4
 8010a78:	210a      	movs	r1, #10
 8010a7a:	4628      	mov	r0, r5
 8010a7c:	f000 fef0 	bl	8011860 <__swbuf_r>
 8010a80:	3001      	adds	r0, #1
 8010a82:	d011      	beq.n	8010aa8 <_puts_r+0x84>
 8010a84:	250a      	movs	r5, #10
 8010a86:	e011      	b.n	8010aac <_puts_r+0x88>
 8010a88:	4b1b      	ldr	r3, [pc, #108]	; (8010af8 <_puts_r+0xd4>)
 8010a8a:	429c      	cmp	r4, r3
 8010a8c:	d101      	bne.n	8010a92 <_puts_r+0x6e>
 8010a8e:	68ac      	ldr	r4, [r5, #8]
 8010a90:	e7da      	b.n	8010a48 <_puts_r+0x24>
 8010a92:	4b1a      	ldr	r3, [pc, #104]	; (8010afc <_puts_r+0xd8>)
 8010a94:	429c      	cmp	r4, r3
 8010a96:	bf08      	it	eq
 8010a98:	68ec      	ldreq	r4, [r5, #12]
 8010a9a:	e7d5      	b.n	8010a48 <_puts_r+0x24>
 8010a9c:	4621      	mov	r1, r4
 8010a9e:	4628      	mov	r0, r5
 8010aa0:	f000 ff30 	bl	8011904 <__swsetup_r>
 8010aa4:	2800      	cmp	r0, #0
 8010aa6:	d0dd      	beq.n	8010a64 <_puts_r+0x40>
 8010aa8:	f04f 35ff 	mov.w	r5, #4294967295
 8010aac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010aae:	07da      	lsls	r2, r3, #31
 8010ab0:	d405      	bmi.n	8010abe <_puts_r+0x9a>
 8010ab2:	89a3      	ldrh	r3, [r4, #12]
 8010ab4:	059b      	lsls	r3, r3, #22
 8010ab6:	d402      	bmi.n	8010abe <_puts_r+0x9a>
 8010ab8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010aba:	f002 fab7 	bl	801302c <__retarget_lock_release_recursive>
 8010abe:	4628      	mov	r0, r5
 8010ac0:	bd70      	pop	{r4, r5, r6, pc}
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	da04      	bge.n	8010ad0 <_puts_r+0xac>
 8010ac6:	69a2      	ldr	r2, [r4, #24]
 8010ac8:	429a      	cmp	r2, r3
 8010aca:	dc06      	bgt.n	8010ada <_puts_r+0xb6>
 8010acc:	290a      	cmp	r1, #10
 8010ace:	d004      	beq.n	8010ada <_puts_r+0xb6>
 8010ad0:	6823      	ldr	r3, [r4, #0]
 8010ad2:	1c5a      	adds	r2, r3, #1
 8010ad4:	6022      	str	r2, [r4, #0]
 8010ad6:	7019      	strb	r1, [r3, #0]
 8010ad8:	e7c5      	b.n	8010a66 <_puts_r+0x42>
 8010ada:	4622      	mov	r2, r4
 8010adc:	4628      	mov	r0, r5
 8010ade:	f000 febf 	bl	8011860 <__swbuf_r>
 8010ae2:	3001      	adds	r0, #1
 8010ae4:	d1bf      	bne.n	8010a66 <_puts_r+0x42>
 8010ae6:	e7df      	b.n	8010aa8 <_puts_r+0x84>
 8010ae8:	6823      	ldr	r3, [r4, #0]
 8010aea:	250a      	movs	r5, #10
 8010aec:	1c5a      	adds	r2, r3, #1
 8010aee:	6022      	str	r2, [r4, #0]
 8010af0:	701d      	strb	r5, [r3, #0]
 8010af2:	e7db      	b.n	8010aac <_puts_r+0x88>
 8010af4:	08014f6c 	.word	0x08014f6c
 8010af8:	08014f8c 	.word	0x08014f8c
 8010afc:	08014f4c 	.word	0x08014f4c

08010b00 <puts>:
 8010b00:	4b02      	ldr	r3, [pc, #8]	; (8010b0c <puts+0xc>)
 8010b02:	4601      	mov	r1, r0
 8010b04:	6818      	ldr	r0, [r3, #0]
 8010b06:	f7ff bf8d 	b.w	8010a24 <_puts_r>
 8010b0a:	bf00      	nop
 8010b0c:	20000010 	.word	0x20000010

08010b10 <_sbrk_r>:
 8010b10:	b538      	push	{r3, r4, r5, lr}
 8010b12:	4d06      	ldr	r5, [pc, #24]	; (8010b2c <_sbrk_r+0x1c>)
 8010b14:	2300      	movs	r3, #0
 8010b16:	4604      	mov	r4, r0
 8010b18:	4608      	mov	r0, r1
 8010b1a:	602b      	str	r3, [r5, #0]
 8010b1c:	f7f4 f852 	bl	8004bc4 <_sbrk>
 8010b20:	1c43      	adds	r3, r0, #1
 8010b22:	d102      	bne.n	8010b2a <_sbrk_r+0x1a>
 8010b24:	682b      	ldr	r3, [r5, #0]
 8010b26:	b103      	cbz	r3, 8010b2a <_sbrk_r+0x1a>
 8010b28:	6023      	str	r3, [r4, #0]
 8010b2a:	bd38      	pop	{r3, r4, r5, pc}
 8010b2c:	20002e58 	.word	0x20002e58

08010b30 <nanf>:
 8010b30:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010b38 <nanf+0x8>
 8010b34:	4770      	bx	lr
 8010b36:	bf00      	nop
 8010b38:	7fc00000 	.word	0x7fc00000

08010b3c <siprintf>:
 8010b3c:	b40e      	push	{r1, r2, r3}
 8010b3e:	b500      	push	{lr}
 8010b40:	b09c      	sub	sp, #112	; 0x70
 8010b42:	ab1d      	add	r3, sp, #116	; 0x74
 8010b44:	9002      	str	r0, [sp, #8]
 8010b46:	9006      	str	r0, [sp, #24]
 8010b48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010b4c:	4809      	ldr	r0, [pc, #36]	; (8010b74 <siprintf+0x38>)
 8010b4e:	9107      	str	r1, [sp, #28]
 8010b50:	9104      	str	r1, [sp, #16]
 8010b52:	4909      	ldr	r1, [pc, #36]	; (8010b78 <siprintf+0x3c>)
 8010b54:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b58:	9105      	str	r1, [sp, #20]
 8010b5a:	6800      	ldr	r0, [r0, #0]
 8010b5c:	9301      	str	r3, [sp, #4]
 8010b5e:	a902      	add	r1, sp, #8
 8010b60:	f003 f818 	bl	8013b94 <_svfiprintf_r>
 8010b64:	9b02      	ldr	r3, [sp, #8]
 8010b66:	2200      	movs	r2, #0
 8010b68:	701a      	strb	r2, [r3, #0]
 8010b6a:	b01c      	add	sp, #112	; 0x70
 8010b6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010b70:	b003      	add	sp, #12
 8010b72:	4770      	bx	lr
 8010b74:	20000010 	.word	0x20000010
 8010b78:	ffff0208 	.word	0xffff0208

08010b7c <strstr>:
 8010b7c:	780a      	ldrb	r2, [r1, #0]
 8010b7e:	b570      	push	{r4, r5, r6, lr}
 8010b80:	b96a      	cbnz	r2, 8010b9e <strstr+0x22>
 8010b82:	bd70      	pop	{r4, r5, r6, pc}
 8010b84:	429a      	cmp	r2, r3
 8010b86:	d109      	bne.n	8010b9c <strstr+0x20>
 8010b88:	460c      	mov	r4, r1
 8010b8a:	4605      	mov	r5, r0
 8010b8c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d0f6      	beq.n	8010b82 <strstr+0x6>
 8010b94:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8010b98:	429e      	cmp	r6, r3
 8010b9a:	d0f7      	beq.n	8010b8c <strstr+0x10>
 8010b9c:	3001      	adds	r0, #1
 8010b9e:	7803      	ldrb	r3, [r0, #0]
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d1ef      	bne.n	8010b84 <strstr+0x8>
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	e7ec      	b.n	8010b82 <strstr+0x6>

08010ba8 <sulp>:
 8010ba8:	b570      	push	{r4, r5, r6, lr}
 8010baa:	4604      	mov	r4, r0
 8010bac:	460d      	mov	r5, r1
 8010bae:	4616      	mov	r6, r2
 8010bb0:	ec45 4b10 	vmov	d0, r4, r5
 8010bb4:	f002 fe30 	bl	8013818 <__ulp>
 8010bb8:	b17e      	cbz	r6, 8010bda <sulp+0x32>
 8010bba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010bbe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	dd09      	ble.n	8010bda <sulp+0x32>
 8010bc6:	051b      	lsls	r3, r3, #20
 8010bc8:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8010bcc:	2000      	movs	r0, #0
 8010bce:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8010bd2:	ec41 0b17 	vmov	d7, r0, r1
 8010bd6:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010bda:	bd70      	pop	{r4, r5, r6, pc}
 8010bdc:	0000      	movs	r0, r0
	...

08010be0 <_strtod_l>:
 8010be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010be4:	ed2d 8b0e 	vpush	{d8-d14}
 8010be8:	b097      	sub	sp, #92	; 0x5c
 8010bea:	461f      	mov	r7, r3
 8010bec:	2300      	movs	r3, #0
 8010bee:	9312      	str	r3, [sp, #72]	; 0x48
 8010bf0:	4ba1      	ldr	r3, [pc, #644]	; (8010e78 <_strtod_l+0x298>)
 8010bf2:	920d      	str	r2, [sp, #52]	; 0x34
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	9307      	str	r3, [sp, #28]
 8010bf8:	4604      	mov	r4, r0
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	468b      	mov	fp, r1
 8010bfe:	f7ef fb1f 	bl	8000240 <strlen>
 8010c02:	f04f 0800 	mov.w	r8, #0
 8010c06:	4605      	mov	r5, r0
 8010c08:	f04f 0900 	mov.w	r9, #0
 8010c0c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8010c10:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010c12:	7813      	ldrb	r3, [r2, #0]
 8010c14:	2b2b      	cmp	r3, #43	; 0x2b
 8010c16:	d04d      	beq.n	8010cb4 <_strtod_l+0xd4>
 8010c18:	d83a      	bhi.n	8010c90 <_strtod_l+0xb0>
 8010c1a:	2b0d      	cmp	r3, #13
 8010c1c:	d833      	bhi.n	8010c86 <_strtod_l+0xa6>
 8010c1e:	2b08      	cmp	r3, #8
 8010c20:	d833      	bhi.n	8010c8a <_strtod_l+0xaa>
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d03d      	beq.n	8010ca2 <_strtod_l+0xc2>
 8010c26:	2300      	movs	r3, #0
 8010c28:	9308      	str	r3, [sp, #32]
 8010c2a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8010c2c:	7833      	ldrb	r3, [r6, #0]
 8010c2e:	2b30      	cmp	r3, #48	; 0x30
 8010c30:	f040 80b0 	bne.w	8010d94 <_strtod_l+0x1b4>
 8010c34:	7873      	ldrb	r3, [r6, #1]
 8010c36:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010c3a:	2b58      	cmp	r3, #88	; 0x58
 8010c3c:	d167      	bne.n	8010d0e <_strtod_l+0x12e>
 8010c3e:	9b08      	ldr	r3, [sp, #32]
 8010c40:	9301      	str	r3, [sp, #4]
 8010c42:	ab12      	add	r3, sp, #72	; 0x48
 8010c44:	9702      	str	r7, [sp, #8]
 8010c46:	9300      	str	r3, [sp, #0]
 8010c48:	4a8c      	ldr	r2, [pc, #560]	; (8010e7c <_strtod_l+0x29c>)
 8010c4a:	ab13      	add	r3, sp, #76	; 0x4c
 8010c4c:	a911      	add	r1, sp, #68	; 0x44
 8010c4e:	4620      	mov	r0, r4
 8010c50:	f001 fede 	bl	8012a10 <__gethex>
 8010c54:	f010 0507 	ands.w	r5, r0, #7
 8010c58:	4607      	mov	r7, r0
 8010c5a:	d005      	beq.n	8010c68 <_strtod_l+0x88>
 8010c5c:	2d06      	cmp	r5, #6
 8010c5e:	d12b      	bne.n	8010cb8 <_strtod_l+0xd8>
 8010c60:	3601      	adds	r6, #1
 8010c62:	2300      	movs	r3, #0
 8010c64:	9611      	str	r6, [sp, #68]	; 0x44
 8010c66:	9308      	str	r3, [sp, #32]
 8010c68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	f040 854e 	bne.w	801170c <_strtod_l+0xb2c>
 8010c70:	9b08      	ldr	r3, [sp, #32]
 8010c72:	b1e3      	cbz	r3, 8010cae <_strtod_l+0xce>
 8010c74:	ec49 8b17 	vmov	d7, r8, r9
 8010c78:	eeb1 0b47 	vneg.f64	d0, d7
 8010c7c:	b017      	add	sp, #92	; 0x5c
 8010c7e:	ecbd 8b0e 	vpop	{d8-d14}
 8010c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c86:	2b20      	cmp	r3, #32
 8010c88:	d1cd      	bne.n	8010c26 <_strtod_l+0x46>
 8010c8a:	3201      	adds	r2, #1
 8010c8c:	9211      	str	r2, [sp, #68]	; 0x44
 8010c8e:	e7bf      	b.n	8010c10 <_strtod_l+0x30>
 8010c90:	2b2d      	cmp	r3, #45	; 0x2d
 8010c92:	d1c8      	bne.n	8010c26 <_strtod_l+0x46>
 8010c94:	2301      	movs	r3, #1
 8010c96:	9308      	str	r3, [sp, #32]
 8010c98:	1c53      	adds	r3, r2, #1
 8010c9a:	9311      	str	r3, [sp, #68]	; 0x44
 8010c9c:	7853      	ldrb	r3, [r2, #1]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d1c3      	bne.n	8010c2a <_strtod_l+0x4a>
 8010ca2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010ca4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	f040 852d 	bne.w	8011708 <_strtod_l+0xb28>
 8010cae:	ec49 8b10 	vmov	d0, r8, r9
 8010cb2:	e7e3      	b.n	8010c7c <_strtod_l+0x9c>
 8010cb4:	2300      	movs	r3, #0
 8010cb6:	e7ee      	b.n	8010c96 <_strtod_l+0xb6>
 8010cb8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010cba:	b13a      	cbz	r2, 8010ccc <_strtod_l+0xec>
 8010cbc:	2135      	movs	r1, #53	; 0x35
 8010cbe:	a814      	add	r0, sp, #80	; 0x50
 8010cc0:	f002 feb2 	bl	8013a28 <__copybits>
 8010cc4:	9912      	ldr	r1, [sp, #72]	; 0x48
 8010cc6:	4620      	mov	r0, r4
 8010cc8:	f002 fa74 	bl	80131b4 <_Bfree>
 8010ccc:	3d01      	subs	r5, #1
 8010cce:	2d04      	cmp	r5, #4
 8010cd0:	d806      	bhi.n	8010ce0 <_strtod_l+0x100>
 8010cd2:	e8df f005 	tbb	[pc, r5]
 8010cd6:	030a      	.short	0x030a
 8010cd8:	1714      	.short	0x1714
 8010cda:	0a          	.byte	0x0a
 8010cdb:	00          	.byte	0x00
 8010cdc:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8010ce0:	073f      	lsls	r7, r7, #28
 8010ce2:	d5c1      	bpl.n	8010c68 <_strtod_l+0x88>
 8010ce4:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8010ce8:	e7be      	b.n	8010c68 <_strtod_l+0x88>
 8010cea:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8010cee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010cf0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010cf4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010cf8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8010cfc:	e7f0      	b.n	8010ce0 <_strtod_l+0x100>
 8010cfe:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8010e80 <_strtod_l+0x2a0>
 8010d02:	e7ed      	b.n	8010ce0 <_strtod_l+0x100>
 8010d04:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8010d08:	f04f 38ff 	mov.w	r8, #4294967295
 8010d0c:	e7e8      	b.n	8010ce0 <_strtod_l+0x100>
 8010d0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010d10:	1c5a      	adds	r2, r3, #1
 8010d12:	9211      	str	r2, [sp, #68]	; 0x44
 8010d14:	785b      	ldrb	r3, [r3, #1]
 8010d16:	2b30      	cmp	r3, #48	; 0x30
 8010d18:	d0f9      	beq.n	8010d0e <_strtod_l+0x12e>
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d0a4      	beq.n	8010c68 <_strtod_l+0x88>
 8010d1e:	2301      	movs	r3, #1
 8010d20:	f04f 0a00 	mov.w	sl, #0
 8010d24:	9304      	str	r3, [sp, #16]
 8010d26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010d28:	930a      	str	r3, [sp, #40]	; 0x28
 8010d2a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8010d2e:	f8cd a018 	str.w	sl, [sp, #24]
 8010d32:	220a      	movs	r2, #10
 8010d34:	9811      	ldr	r0, [sp, #68]	; 0x44
 8010d36:	7807      	ldrb	r7, [r0, #0]
 8010d38:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8010d3c:	b2d9      	uxtb	r1, r3
 8010d3e:	2909      	cmp	r1, #9
 8010d40:	d92a      	bls.n	8010d98 <_strtod_l+0x1b8>
 8010d42:	9907      	ldr	r1, [sp, #28]
 8010d44:	462a      	mov	r2, r5
 8010d46:	f003 fa12 	bl	801416e <strncmp>
 8010d4a:	2800      	cmp	r0, #0
 8010d4c:	d033      	beq.n	8010db6 <_strtod_l+0x1d6>
 8010d4e:	2000      	movs	r0, #0
 8010d50:	9b06      	ldr	r3, [sp, #24]
 8010d52:	463a      	mov	r2, r7
 8010d54:	4601      	mov	r1, r0
 8010d56:	4607      	mov	r7, r0
 8010d58:	2a65      	cmp	r2, #101	; 0x65
 8010d5a:	d001      	beq.n	8010d60 <_strtod_l+0x180>
 8010d5c:	2a45      	cmp	r2, #69	; 0x45
 8010d5e:	d117      	bne.n	8010d90 <_strtod_l+0x1b0>
 8010d60:	b91b      	cbnz	r3, 8010d6a <_strtod_l+0x18a>
 8010d62:	9b04      	ldr	r3, [sp, #16]
 8010d64:	4303      	orrs	r3, r0
 8010d66:	d09c      	beq.n	8010ca2 <_strtod_l+0xc2>
 8010d68:	2300      	movs	r3, #0
 8010d6a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8010d6e:	f10b 0201 	add.w	r2, fp, #1
 8010d72:	9211      	str	r2, [sp, #68]	; 0x44
 8010d74:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8010d78:	2a2b      	cmp	r2, #43	; 0x2b
 8010d7a:	d071      	beq.n	8010e60 <_strtod_l+0x280>
 8010d7c:	2a2d      	cmp	r2, #45	; 0x2d
 8010d7e:	d077      	beq.n	8010e70 <_strtod_l+0x290>
 8010d80:	f04f 0e00 	mov.w	lr, #0
 8010d84:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8010d88:	2d09      	cmp	r5, #9
 8010d8a:	d97f      	bls.n	8010e8c <_strtod_l+0x2ac>
 8010d8c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8010d90:	2500      	movs	r5, #0
 8010d92:	e09b      	b.n	8010ecc <_strtod_l+0x2ec>
 8010d94:	2300      	movs	r3, #0
 8010d96:	e7c3      	b.n	8010d20 <_strtod_l+0x140>
 8010d98:	9906      	ldr	r1, [sp, #24]
 8010d9a:	2908      	cmp	r1, #8
 8010d9c:	bfdd      	ittte	le
 8010d9e:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8010da0:	fb02 3301 	mlale	r3, r2, r1, r3
 8010da4:	9309      	strle	r3, [sp, #36]	; 0x24
 8010da6:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8010daa:	9b06      	ldr	r3, [sp, #24]
 8010dac:	3001      	adds	r0, #1
 8010dae:	3301      	adds	r3, #1
 8010db0:	9306      	str	r3, [sp, #24]
 8010db2:	9011      	str	r0, [sp, #68]	; 0x44
 8010db4:	e7be      	b.n	8010d34 <_strtod_l+0x154>
 8010db6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010db8:	195a      	adds	r2, r3, r5
 8010dba:	9211      	str	r2, [sp, #68]	; 0x44
 8010dbc:	5d5a      	ldrb	r2, [r3, r5]
 8010dbe:	9b06      	ldr	r3, [sp, #24]
 8010dc0:	b3a3      	cbz	r3, 8010e2c <_strtod_l+0x24c>
 8010dc2:	4607      	mov	r7, r0
 8010dc4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8010dc8:	2909      	cmp	r1, #9
 8010dca:	d912      	bls.n	8010df2 <_strtod_l+0x212>
 8010dcc:	2101      	movs	r1, #1
 8010dce:	e7c3      	b.n	8010d58 <_strtod_l+0x178>
 8010dd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010dd2:	1c5a      	adds	r2, r3, #1
 8010dd4:	9211      	str	r2, [sp, #68]	; 0x44
 8010dd6:	785a      	ldrb	r2, [r3, #1]
 8010dd8:	3001      	adds	r0, #1
 8010dda:	2a30      	cmp	r2, #48	; 0x30
 8010ddc:	d0f8      	beq.n	8010dd0 <_strtod_l+0x1f0>
 8010dde:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8010de2:	2b08      	cmp	r3, #8
 8010de4:	f200 8497 	bhi.w	8011716 <_strtod_l+0xb36>
 8010de8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010dea:	930a      	str	r3, [sp, #40]	; 0x28
 8010dec:	4607      	mov	r7, r0
 8010dee:	2000      	movs	r0, #0
 8010df0:	4603      	mov	r3, r0
 8010df2:	3a30      	subs	r2, #48	; 0x30
 8010df4:	f100 0101 	add.w	r1, r0, #1
 8010df8:	d012      	beq.n	8010e20 <_strtod_l+0x240>
 8010dfa:	440f      	add	r7, r1
 8010dfc:	eb00 0c03 	add.w	ip, r0, r3
 8010e00:	4619      	mov	r1, r3
 8010e02:	250a      	movs	r5, #10
 8010e04:	4561      	cmp	r1, ip
 8010e06:	d113      	bne.n	8010e30 <_strtod_l+0x250>
 8010e08:	1819      	adds	r1, r3, r0
 8010e0a:	2908      	cmp	r1, #8
 8010e0c:	f103 0301 	add.w	r3, r3, #1
 8010e10:	4403      	add	r3, r0
 8010e12:	dc1c      	bgt.n	8010e4e <_strtod_l+0x26e>
 8010e14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010e16:	210a      	movs	r1, #10
 8010e18:	fb01 2200 	mla	r2, r1, r0, r2
 8010e1c:	9209      	str	r2, [sp, #36]	; 0x24
 8010e1e:	2100      	movs	r1, #0
 8010e20:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010e22:	1c50      	adds	r0, r2, #1
 8010e24:	9011      	str	r0, [sp, #68]	; 0x44
 8010e26:	7852      	ldrb	r2, [r2, #1]
 8010e28:	4608      	mov	r0, r1
 8010e2a:	e7cb      	b.n	8010dc4 <_strtod_l+0x1e4>
 8010e2c:	9806      	ldr	r0, [sp, #24]
 8010e2e:	e7d4      	b.n	8010dda <_strtod_l+0x1fa>
 8010e30:	2908      	cmp	r1, #8
 8010e32:	dc04      	bgt.n	8010e3e <_strtod_l+0x25e>
 8010e34:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8010e36:	436e      	muls	r6, r5
 8010e38:	9609      	str	r6, [sp, #36]	; 0x24
 8010e3a:	3101      	adds	r1, #1
 8010e3c:	e7e2      	b.n	8010e04 <_strtod_l+0x224>
 8010e3e:	f101 0e01 	add.w	lr, r1, #1
 8010e42:	f1be 0f10 	cmp.w	lr, #16
 8010e46:	bfd8      	it	le
 8010e48:	fb05 fa0a 	mulle.w	sl, r5, sl
 8010e4c:	e7f5      	b.n	8010e3a <_strtod_l+0x25a>
 8010e4e:	2b10      	cmp	r3, #16
 8010e50:	bfdc      	itt	le
 8010e52:	210a      	movle	r1, #10
 8010e54:	fb01 2a0a 	mlale	sl, r1, sl, r2
 8010e58:	e7e1      	b.n	8010e1e <_strtod_l+0x23e>
 8010e5a:	2700      	movs	r7, #0
 8010e5c:	2101      	movs	r1, #1
 8010e5e:	e780      	b.n	8010d62 <_strtod_l+0x182>
 8010e60:	f04f 0e00 	mov.w	lr, #0
 8010e64:	f10b 0202 	add.w	r2, fp, #2
 8010e68:	9211      	str	r2, [sp, #68]	; 0x44
 8010e6a:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8010e6e:	e789      	b.n	8010d84 <_strtod_l+0x1a4>
 8010e70:	f04f 0e01 	mov.w	lr, #1
 8010e74:	e7f6      	b.n	8010e64 <_strtod_l+0x284>
 8010e76:	bf00      	nop
 8010e78:	08015014 	.word	0x08015014
 8010e7c:	08014d68 	.word	0x08014d68
 8010e80:	7ff00000 	.word	0x7ff00000
 8010e84:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010e86:	1c55      	adds	r5, r2, #1
 8010e88:	9511      	str	r5, [sp, #68]	; 0x44
 8010e8a:	7852      	ldrb	r2, [r2, #1]
 8010e8c:	2a30      	cmp	r2, #48	; 0x30
 8010e8e:	d0f9      	beq.n	8010e84 <_strtod_l+0x2a4>
 8010e90:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8010e94:	2d08      	cmp	r5, #8
 8010e96:	f63f af7b 	bhi.w	8010d90 <_strtod_l+0x1b0>
 8010e9a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8010e9e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010ea0:	9207      	str	r2, [sp, #28]
 8010ea2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010ea4:	1c55      	adds	r5, r2, #1
 8010ea6:	9511      	str	r5, [sp, #68]	; 0x44
 8010ea8:	7852      	ldrb	r2, [r2, #1]
 8010eaa:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8010eae:	2e09      	cmp	r6, #9
 8010eb0:	d937      	bls.n	8010f22 <_strtod_l+0x342>
 8010eb2:	9e07      	ldr	r6, [sp, #28]
 8010eb4:	1bad      	subs	r5, r5, r6
 8010eb6:	2d08      	cmp	r5, #8
 8010eb8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8010ebc:	dc02      	bgt.n	8010ec4 <_strtod_l+0x2e4>
 8010ebe:	4565      	cmp	r5, ip
 8010ec0:	bfa8      	it	ge
 8010ec2:	4665      	movge	r5, ip
 8010ec4:	f1be 0f00 	cmp.w	lr, #0
 8010ec8:	d000      	beq.n	8010ecc <_strtod_l+0x2ec>
 8010eca:	426d      	negs	r5, r5
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d14d      	bne.n	8010f6c <_strtod_l+0x38c>
 8010ed0:	9b04      	ldr	r3, [sp, #16]
 8010ed2:	4303      	orrs	r3, r0
 8010ed4:	f47f aec8 	bne.w	8010c68 <_strtod_l+0x88>
 8010ed8:	2900      	cmp	r1, #0
 8010eda:	f47f aee2 	bne.w	8010ca2 <_strtod_l+0xc2>
 8010ede:	2a69      	cmp	r2, #105	; 0x69
 8010ee0:	d027      	beq.n	8010f32 <_strtod_l+0x352>
 8010ee2:	dc24      	bgt.n	8010f2e <_strtod_l+0x34e>
 8010ee4:	2a49      	cmp	r2, #73	; 0x49
 8010ee6:	d024      	beq.n	8010f32 <_strtod_l+0x352>
 8010ee8:	2a4e      	cmp	r2, #78	; 0x4e
 8010eea:	f47f aeda 	bne.w	8010ca2 <_strtod_l+0xc2>
 8010eee:	4996      	ldr	r1, [pc, #600]	; (8011148 <_strtod_l+0x568>)
 8010ef0:	a811      	add	r0, sp, #68	; 0x44
 8010ef2:	f001 ffe5 	bl	8012ec0 <__match>
 8010ef6:	2800      	cmp	r0, #0
 8010ef8:	f43f aed3 	beq.w	8010ca2 <_strtod_l+0xc2>
 8010efc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010efe:	781b      	ldrb	r3, [r3, #0]
 8010f00:	2b28      	cmp	r3, #40	; 0x28
 8010f02:	d12d      	bne.n	8010f60 <_strtod_l+0x380>
 8010f04:	4991      	ldr	r1, [pc, #580]	; (801114c <_strtod_l+0x56c>)
 8010f06:	aa14      	add	r2, sp, #80	; 0x50
 8010f08:	a811      	add	r0, sp, #68	; 0x44
 8010f0a:	f001 ffed 	bl	8012ee8 <__hexnan>
 8010f0e:	2805      	cmp	r0, #5
 8010f10:	d126      	bne.n	8010f60 <_strtod_l+0x380>
 8010f12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010f14:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8010f18:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8010f1c:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8010f20:	e6a2      	b.n	8010c68 <_strtod_l+0x88>
 8010f22:	250a      	movs	r5, #10
 8010f24:	fb05 250c 	mla	r5, r5, ip, r2
 8010f28:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8010f2c:	e7b9      	b.n	8010ea2 <_strtod_l+0x2c2>
 8010f2e:	2a6e      	cmp	r2, #110	; 0x6e
 8010f30:	e7db      	b.n	8010eea <_strtod_l+0x30a>
 8010f32:	4987      	ldr	r1, [pc, #540]	; (8011150 <_strtod_l+0x570>)
 8010f34:	a811      	add	r0, sp, #68	; 0x44
 8010f36:	f001 ffc3 	bl	8012ec0 <__match>
 8010f3a:	2800      	cmp	r0, #0
 8010f3c:	f43f aeb1 	beq.w	8010ca2 <_strtod_l+0xc2>
 8010f40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010f42:	4984      	ldr	r1, [pc, #528]	; (8011154 <_strtod_l+0x574>)
 8010f44:	3b01      	subs	r3, #1
 8010f46:	a811      	add	r0, sp, #68	; 0x44
 8010f48:	9311      	str	r3, [sp, #68]	; 0x44
 8010f4a:	f001 ffb9 	bl	8012ec0 <__match>
 8010f4e:	b910      	cbnz	r0, 8010f56 <_strtod_l+0x376>
 8010f50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010f52:	3301      	adds	r3, #1
 8010f54:	9311      	str	r3, [sp, #68]	; 0x44
 8010f56:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8011168 <_strtod_l+0x588>
 8010f5a:	f04f 0800 	mov.w	r8, #0
 8010f5e:	e683      	b.n	8010c68 <_strtod_l+0x88>
 8010f60:	487d      	ldr	r0, [pc, #500]	; (8011158 <_strtod_l+0x578>)
 8010f62:	f003 f8b9 	bl	80140d8 <nan>
 8010f66:	ec59 8b10 	vmov	r8, r9, d0
 8010f6a:	e67d      	b.n	8010c68 <_strtod_l+0x88>
 8010f6c:	1bea      	subs	r2, r5, r7
 8010f6e:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8010f72:	9207      	str	r2, [sp, #28]
 8010f74:	9a06      	ldr	r2, [sp, #24]
 8010f76:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010f7a:	2a00      	cmp	r2, #0
 8010f7c:	bf08      	it	eq
 8010f7e:	461a      	moveq	r2, r3
 8010f80:	2b10      	cmp	r3, #16
 8010f82:	9206      	str	r2, [sp, #24]
 8010f84:	461a      	mov	r2, r3
 8010f86:	bfa8      	it	ge
 8010f88:	2210      	movge	r2, #16
 8010f8a:	2b09      	cmp	r3, #9
 8010f8c:	ec59 8b17 	vmov	r8, r9, d7
 8010f90:	dd0c      	ble.n	8010fac <_strtod_l+0x3cc>
 8010f92:	4972      	ldr	r1, [pc, #456]	; (801115c <_strtod_l+0x57c>)
 8010f94:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8010f98:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8010f9c:	ee06 aa90 	vmov	s13, sl
 8010fa0:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8010fa4:	eea7 6b05 	vfma.f64	d6, d7, d5
 8010fa8:	ec59 8b16 	vmov	r8, r9, d6
 8010fac:	2b0f      	cmp	r3, #15
 8010fae:	dc36      	bgt.n	801101e <_strtod_l+0x43e>
 8010fb0:	9907      	ldr	r1, [sp, #28]
 8010fb2:	2900      	cmp	r1, #0
 8010fb4:	f43f ae58 	beq.w	8010c68 <_strtod_l+0x88>
 8010fb8:	dd23      	ble.n	8011002 <_strtod_l+0x422>
 8010fba:	2916      	cmp	r1, #22
 8010fbc:	dc0b      	bgt.n	8010fd6 <_strtod_l+0x3f6>
 8010fbe:	4b67      	ldr	r3, [pc, #412]	; (801115c <_strtod_l+0x57c>)
 8010fc0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8010fc4:	ed93 7b00 	vldr	d7, [r3]
 8010fc8:	ec49 8b16 	vmov	d6, r8, r9
 8010fcc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010fd0:	ec59 8b17 	vmov	r8, r9, d7
 8010fd4:	e648      	b.n	8010c68 <_strtod_l+0x88>
 8010fd6:	9807      	ldr	r0, [sp, #28]
 8010fd8:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8010fdc:	4281      	cmp	r1, r0
 8010fde:	db1e      	blt.n	801101e <_strtod_l+0x43e>
 8010fe0:	4a5e      	ldr	r2, [pc, #376]	; (801115c <_strtod_l+0x57c>)
 8010fe2:	f1c3 030f 	rsb	r3, r3, #15
 8010fe6:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8010fea:	ed91 7b00 	vldr	d7, [r1]
 8010fee:	ec49 8b16 	vmov	d6, r8, r9
 8010ff2:	1ac3      	subs	r3, r0, r3
 8010ff4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010ff8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010ffc:	ed92 6b00 	vldr	d6, [r2]
 8011000:	e7e4      	b.n	8010fcc <_strtod_l+0x3ec>
 8011002:	9907      	ldr	r1, [sp, #28]
 8011004:	3116      	adds	r1, #22
 8011006:	db0a      	blt.n	801101e <_strtod_l+0x43e>
 8011008:	4b54      	ldr	r3, [pc, #336]	; (801115c <_strtod_l+0x57c>)
 801100a:	1b7d      	subs	r5, r7, r5
 801100c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8011010:	ed95 7b00 	vldr	d7, [r5]
 8011014:	ec49 8b16 	vmov	d6, r8, r9
 8011018:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801101c:	e7d8      	b.n	8010fd0 <_strtod_l+0x3f0>
 801101e:	9907      	ldr	r1, [sp, #28]
 8011020:	1a9a      	subs	r2, r3, r2
 8011022:	440a      	add	r2, r1
 8011024:	2a00      	cmp	r2, #0
 8011026:	dd6f      	ble.n	8011108 <_strtod_l+0x528>
 8011028:	f012 000f 	ands.w	r0, r2, #15
 801102c:	d00a      	beq.n	8011044 <_strtod_l+0x464>
 801102e:	494b      	ldr	r1, [pc, #300]	; (801115c <_strtod_l+0x57c>)
 8011030:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8011034:	ed91 7b00 	vldr	d7, [r1]
 8011038:	ec49 8b16 	vmov	d6, r8, r9
 801103c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011040:	ec59 8b17 	vmov	r8, r9, d7
 8011044:	f032 020f 	bics.w	r2, r2, #15
 8011048:	d04f      	beq.n	80110ea <_strtod_l+0x50a>
 801104a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 801104e:	dd22      	ble.n	8011096 <_strtod_l+0x4b6>
 8011050:	2500      	movs	r5, #0
 8011052:	462e      	mov	r6, r5
 8011054:	9506      	str	r5, [sp, #24]
 8011056:	462f      	mov	r7, r5
 8011058:	2322      	movs	r3, #34	; 0x22
 801105a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8011168 <_strtod_l+0x588>
 801105e:	6023      	str	r3, [r4, #0]
 8011060:	f04f 0800 	mov.w	r8, #0
 8011064:	9b06      	ldr	r3, [sp, #24]
 8011066:	2b00      	cmp	r3, #0
 8011068:	f43f adfe 	beq.w	8010c68 <_strtod_l+0x88>
 801106c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801106e:	4620      	mov	r0, r4
 8011070:	f002 f8a0 	bl	80131b4 <_Bfree>
 8011074:	4639      	mov	r1, r7
 8011076:	4620      	mov	r0, r4
 8011078:	f002 f89c 	bl	80131b4 <_Bfree>
 801107c:	4631      	mov	r1, r6
 801107e:	4620      	mov	r0, r4
 8011080:	f002 f898 	bl	80131b4 <_Bfree>
 8011084:	9906      	ldr	r1, [sp, #24]
 8011086:	4620      	mov	r0, r4
 8011088:	f002 f894 	bl	80131b4 <_Bfree>
 801108c:	4629      	mov	r1, r5
 801108e:	4620      	mov	r0, r4
 8011090:	f002 f890 	bl	80131b4 <_Bfree>
 8011094:	e5e8      	b.n	8010c68 <_strtod_l+0x88>
 8011096:	2000      	movs	r0, #0
 8011098:	ec49 8b17 	vmov	d7, r8, r9
 801109c:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8011160 <_strtod_l+0x580>
 80110a0:	1112      	asrs	r2, r2, #4
 80110a2:	4601      	mov	r1, r0
 80110a4:	2a01      	cmp	r2, #1
 80110a6:	dc23      	bgt.n	80110f0 <_strtod_l+0x510>
 80110a8:	b108      	cbz	r0, 80110ae <_strtod_l+0x4ce>
 80110aa:	ec59 8b17 	vmov	r8, r9, d7
 80110ae:	4a2c      	ldr	r2, [pc, #176]	; (8011160 <_strtod_l+0x580>)
 80110b0:	482c      	ldr	r0, [pc, #176]	; (8011164 <_strtod_l+0x584>)
 80110b2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80110b6:	ed92 7b00 	vldr	d7, [r2]
 80110ba:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80110be:	ec49 8b16 	vmov	d6, r8, r9
 80110c2:	4a29      	ldr	r2, [pc, #164]	; (8011168 <_strtod_l+0x588>)
 80110c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80110c8:	ee17 1a90 	vmov	r1, s15
 80110cc:	400a      	ands	r2, r1
 80110ce:	4282      	cmp	r2, r0
 80110d0:	ec59 8b17 	vmov	r8, r9, d7
 80110d4:	d8bc      	bhi.n	8011050 <_strtod_l+0x470>
 80110d6:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80110da:	4282      	cmp	r2, r0
 80110dc:	bf86      	itte	hi
 80110de:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 801116c <_strtod_l+0x58c>
 80110e2:	f04f 38ff 	movhi.w	r8, #4294967295
 80110e6:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 80110ea:	2200      	movs	r2, #0
 80110ec:	9204      	str	r2, [sp, #16]
 80110ee:	e078      	b.n	80111e2 <_strtod_l+0x602>
 80110f0:	07d6      	lsls	r6, r2, #31
 80110f2:	d504      	bpl.n	80110fe <_strtod_l+0x51e>
 80110f4:	ed9c 6b00 	vldr	d6, [ip]
 80110f8:	2001      	movs	r0, #1
 80110fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80110fe:	3101      	adds	r1, #1
 8011100:	1052      	asrs	r2, r2, #1
 8011102:	f10c 0c08 	add.w	ip, ip, #8
 8011106:	e7cd      	b.n	80110a4 <_strtod_l+0x4c4>
 8011108:	d0ef      	beq.n	80110ea <_strtod_l+0x50a>
 801110a:	4252      	negs	r2, r2
 801110c:	f012 000f 	ands.w	r0, r2, #15
 8011110:	d00a      	beq.n	8011128 <_strtod_l+0x548>
 8011112:	4912      	ldr	r1, [pc, #72]	; (801115c <_strtod_l+0x57c>)
 8011114:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8011118:	ed91 7b00 	vldr	d7, [r1]
 801111c:	ec49 8b16 	vmov	d6, r8, r9
 8011120:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011124:	ec59 8b17 	vmov	r8, r9, d7
 8011128:	1112      	asrs	r2, r2, #4
 801112a:	d0de      	beq.n	80110ea <_strtod_l+0x50a>
 801112c:	2a1f      	cmp	r2, #31
 801112e:	dd1f      	ble.n	8011170 <_strtod_l+0x590>
 8011130:	2500      	movs	r5, #0
 8011132:	462e      	mov	r6, r5
 8011134:	9506      	str	r5, [sp, #24]
 8011136:	462f      	mov	r7, r5
 8011138:	2322      	movs	r3, #34	; 0x22
 801113a:	f04f 0800 	mov.w	r8, #0
 801113e:	f04f 0900 	mov.w	r9, #0
 8011142:	6023      	str	r3, [r4, #0]
 8011144:	e78e      	b.n	8011064 <_strtod_l+0x484>
 8011146:	bf00      	nop
 8011148:	08014d39 	.word	0x08014d39
 801114c:	08014d7c 	.word	0x08014d7c
 8011150:	08014d31 	.word	0x08014d31
 8011154:	08014ebc 	.word	0x08014ebc
 8011158:	080151d0 	.word	0x080151d0
 801115c:	080150b0 	.word	0x080150b0
 8011160:	08015088 	.word	0x08015088
 8011164:	7ca00000 	.word	0x7ca00000
 8011168:	7ff00000 	.word	0x7ff00000
 801116c:	7fefffff 	.word	0x7fefffff
 8011170:	f012 0110 	ands.w	r1, r2, #16
 8011174:	bf18      	it	ne
 8011176:	216a      	movne	r1, #106	; 0x6a
 8011178:	9104      	str	r1, [sp, #16]
 801117a:	ec49 8b17 	vmov	d7, r8, r9
 801117e:	49be      	ldr	r1, [pc, #760]	; (8011478 <_strtod_l+0x898>)
 8011180:	2000      	movs	r0, #0
 8011182:	07d6      	lsls	r6, r2, #31
 8011184:	d504      	bpl.n	8011190 <_strtod_l+0x5b0>
 8011186:	ed91 6b00 	vldr	d6, [r1]
 801118a:	2001      	movs	r0, #1
 801118c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011190:	1052      	asrs	r2, r2, #1
 8011192:	f101 0108 	add.w	r1, r1, #8
 8011196:	d1f4      	bne.n	8011182 <_strtod_l+0x5a2>
 8011198:	b108      	cbz	r0, 801119e <_strtod_l+0x5be>
 801119a:	ec59 8b17 	vmov	r8, r9, d7
 801119e:	9a04      	ldr	r2, [sp, #16]
 80111a0:	b1c2      	cbz	r2, 80111d4 <_strtod_l+0x5f4>
 80111a2:	f3c9 510a 	ubfx	r1, r9, #20, #11
 80111a6:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 80111aa:	2a00      	cmp	r2, #0
 80111ac:	4648      	mov	r0, r9
 80111ae:	dd11      	ble.n	80111d4 <_strtod_l+0x5f4>
 80111b0:	2a1f      	cmp	r2, #31
 80111b2:	f340 812e 	ble.w	8011412 <_strtod_l+0x832>
 80111b6:	2a34      	cmp	r2, #52	; 0x34
 80111b8:	bfde      	ittt	le
 80111ba:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 80111be:	f04f 32ff 	movle.w	r2, #4294967295
 80111c2:	fa02 f101 	lslle.w	r1, r2, r1
 80111c6:	f04f 0800 	mov.w	r8, #0
 80111ca:	bfcc      	ite	gt
 80111cc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80111d0:	ea01 0900 	andle.w	r9, r1, r0
 80111d4:	ec49 8b17 	vmov	d7, r8, r9
 80111d8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80111dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111e0:	d0a6      	beq.n	8011130 <_strtod_l+0x550>
 80111e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80111e4:	9200      	str	r2, [sp, #0]
 80111e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80111e8:	9a06      	ldr	r2, [sp, #24]
 80111ea:	4620      	mov	r0, r4
 80111ec:	f002 f84a 	bl	8013284 <__s2b>
 80111f0:	9006      	str	r0, [sp, #24]
 80111f2:	2800      	cmp	r0, #0
 80111f4:	f43f af2c 	beq.w	8011050 <_strtod_l+0x470>
 80111f8:	9b07      	ldr	r3, [sp, #28]
 80111fa:	1b7d      	subs	r5, r7, r5
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	bfb4      	ite	lt
 8011200:	462b      	movlt	r3, r5
 8011202:	2300      	movge	r3, #0
 8011204:	9309      	str	r3, [sp, #36]	; 0x24
 8011206:	9b07      	ldr	r3, [sp, #28]
 8011208:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8011458 <_strtod_l+0x878>
 801120c:	ed9f ab94 	vldr	d10, [pc, #592]	; 8011460 <_strtod_l+0x880>
 8011210:	ed9f bb95 	vldr	d11, [pc, #596]	; 8011468 <_strtod_l+0x888>
 8011214:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011218:	2500      	movs	r5, #0
 801121a:	930c      	str	r3, [sp, #48]	; 0x30
 801121c:	462e      	mov	r6, r5
 801121e:	9b06      	ldr	r3, [sp, #24]
 8011220:	4620      	mov	r0, r4
 8011222:	6859      	ldr	r1, [r3, #4]
 8011224:	f001 ff86 	bl	8013134 <_Balloc>
 8011228:	4607      	mov	r7, r0
 801122a:	2800      	cmp	r0, #0
 801122c:	f43f af14 	beq.w	8011058 <_strtod_l+0x478>
 8011230:	9b06      	ldr	r3, [sp, #24]
 8011232:	691a      	ldr	r2, [r3, #16]
 8011234:	3202      	adds	r2, #2
 8011236:	f103 010c 	add.w	r1, r3, #12
 801123a:	0092      	lsls	r2, r2, #2
 801123c:	300c      	adds	r0, #12
 801123e:	f7fe fc85 	bl	800fb4c <memcpy>
 8011242:	ec49 8b10 	vmov	d0, r8, r9
 8011246:	aa14      	add	r2, sp, #80	; 0x50
 8011248:	a913      	add	r1, sp, #76	; 0x4c
 801124a:	4620      	mov	r0, r4
 801124c:	f002 fb60 	bl	8013910 <__d2b>
 8011250:	ec49 8b18 	vmov	d8, r8, r9
 8011254:	9012      	str	r0, [sp, #72]	; 0x48
 8011256:	2800      	cmp	r0, #0
 8011258:	f43f aefe 	beq.w	8011058 <_strtod_l+0x478>
 801125c:	2101      	movs	r1, #1
 801125e:	4620      	mov	r0, r4
 8011260:	f002 f8aa 	bl	80133b8 <__i2b>
 8011264:	4606      	mov	r6, r0
 8011266:	2800      	cmp	r0, #0
 8011268:	f43f aef6 	beq.w	8011058 <_strtod_l+0x478>
 801126c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801126e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8011270:	2b00      	cmp	r3, #0
 8011272:	bfab      	itete	ge
 8011274:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8011276:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8011278:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 801127c:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8011280:	bfac      	ite	ge
 8011282:	eb03 0b02 	addge.w	fp, r3, r2
 8011286:	eba2 0a03 	sublt.w	sl, r2, r3
 801128a:	9a04      	ldr	r2, [sp, #16]
 801128c:	1a9b      	subs	r3, r3, r2
 801128e:	440b      	add	r3, r1
 8011290:	4a7a      	ldr	r2, [pc, #488]	; (801147c <_strtod_l+0x89c>)
 8011292:	3b01      	subs	r3, #1
 8011294:	4293      	cmp	r3, r2
 8011296:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 801129a:	f280 80cd 	bge.w	8011438 <_strtod_l+0x858>
 801129e:	1ad2      	subs	r2, r2, r3
 80112a0:	2a1f      	cmp	r2, #31
 80112a2:	eba1 0102 	sub.w	r1, r1, r2
 80112a6:	f04f 0001 	mov.w	r0, #1
 80112aa:	f300 80b9 	bgt.w	8011420 <_strtod_l+0x840>
 80112ae:	fa00 f302 	lsl.w	r3, r0, r2
 80112b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80112b4:	2300      	movs	r3, #0
 80112b6:	930a      	str	r3, [sp, #40]	; 0x28
 80112b8:	eb0b 0301 	add.w	r3, fp, r1
 80112bc:	9a04      	ldr	r2, [sp, #16]
 80112be:	459b      	cmp	fp, r3
 80112c0:	448a      	add	sl, r1
 80112c2:	4492      	add	sl, r2
 80112c4:	465a      	mov	r2, fp
 80112c6:	bfa8      	it	ge
 80112c8:	461a      	movge	r2, r3
 80112ca:	4552      	cmp	r2, sl
 80112cc:	bfa8      	it	ge
 80112ce:	4652      	movge	r2, sl
 80112d0:	2a00      	cmp	r2, #0
 80112d2:	bfc2      	ittt	gt
 80112d4:	1a9b      	subgt	r3, r3, r2
 80112d6:	ebaa 0a02 	subgt.w	sl, sl, r2
 80112da:	ebab 0b02 	subgt.w	fp, fp, r2
 80112de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80112e0:	2a00      	cmp	r2, #0
 80112e2:	dd18      	ble.n	8011316 <_strtod_l+0x736>
 80112e4:	4631      	mov	r1, r6
 80112e6:	4620      	mov	r0, r4
 80112e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80112ea:	f002 f925 	bl	8013538 <__pow5mult>
 80112ee:	4606      	mov	r6, r0
 80112f0:	2800      	cmp	r0, #0
 80112f2:	f43f aeb1 	beq.w	8011058 <_strtod_l+0x478>
 80112f6:	4601      	mov	r1, r0
 80112f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80112fa:	4620      	mov	r0, r4
 80112fc:	f002 f872 	bl	80133e4 <__multiply>
 8011300:	900e      	str	r0, [sp, #56]	; 0x38
 8011302:	2800      	cmp	r0, #0
 8011304:	f43f aea8 	beq.w	8011058 <_strtod_l+0x478>
 8011308:	9912      	ldr	r1, [sp, #72]	; 0x48
 801130a:	4620      	mov	r0, r4
 801130c:	f001 ff52 	bl	80131b4 <_Bfree>
 8011310:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011312:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011314:	9212      	str	r2, [sp, #72]	; 0x48
 8011316:	2b00      	cmp	r3, #0
 8011318:	f300 8093 	bgt.w	8011442 <_strtod_l+0x862>
 801131c:	9b07      	ldr	r3, [sp, #28]
 801131e:	2b00      	cmp	r3, #0
 8011320:	dd08      	ble.n	8011334 <_strtod_l+0x754>
 8011322:	4639      	mov	r1, r7
 8011324:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011326:	4620      	mov	r0, r4
 8011328:	f002 f906 	bl	8013538 <__pow5mult>
 801132c:	4607      	mov	r7, r0
 801132e:	2800      	cmp	r0, #0
 8011330:	f43f ae92 	beq.w	8011058 <_strtod_l+0x478>
 8011334:	f1ba 0f00 	cmp.w	sl, #0
 8011338:	dd08      	ble.n	801134c <_strtod_l+0x76c>
 801133a:	4639      	mov	r1, r7
 801133c:	4652      	mov	r2, sl
 801133e:	4620      	mov	r0, r4
 8011340:	f002 f954 	bl	80135ec <__lshift>
 8011344:	4607      	mov	r7, r0
 8011346:	2800      	cmp	r0, #0
 8011348:	f43f ae86 	beq.w	8011058 <_strtod_l+0x478>
 801134c:	f1bb 0f00 	cmp.w	fp, #0
 8011350:	dd08      	ble.n	8011364 <_strtod_l+0x784>
 8011352:	4631      	mov	r1, r6
 8011354:	465a      	mov	r2, fp
 8011356:	4620      	mov	r0, r4
 8011358:	f002 f948 	bl	80135ec <__lshift>
 801135c:	4606      	mov	r6, r0
 801135e:	2800      	cmp	r0, #0
 8011360:	f43f ae7a 	beq.w	8011058 <_strtod_l+0x478>
 8011364:	9912      	ldr	r1, [sp, #72]	; 0x48
 8011366:	463a      	mov	r2, r7
 8011368:	4620      	mov	r0, r4
 801136a:	f002 f9cb 	bl	8013704 <__mdiff>
 801136e:	4605      	mov	r5, r0
 8011370:	2800      	cmp	r0, #0
 8011372:	f43f ae71 	beq.w	8011058 <_strtod_l+0x478>
 8011376:	2300      	movs	r3, #0
 8011378:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 801137c:	60c3      	str	r3, [r0, #12]
 801137e:	4631      	mov	r1, r6
 8011380:	f002 f9a4 	bl	80136cc <__mcmp>
 8011384:	2800      	cmp	r0, #0
 8011386:	da7d      	bge.n	8011484 <_strtod_l+0x8a4>
 8011388:	ea5a 0308 	orrs.w	r3, sl, r8
 801138c:	f040 80a3 	bne.w	80114d6 <_strtod_l+0x8f6>
 8011390:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011394:	2b00      	cmp	r3, #0
 8011396:	f040 809e 	bne.w	80114d6 <_strtod_l+0x8f6>
 801139a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801139e:	0d1b      	lsrs	r3, r3, #20
 80113a0:	051b      	lsls	r3, r3, #20
 80113a2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80113a6:	f240 8096 	bls.w	80114d6 <_strtod_l+0x8f6>
 80113aa:	696b      	ldr	r3, [r5, #20]
 80113ac:	b91b      	cbnz	r3, 80113b6 <_strtod_l+0x7d6>
 80113ae:	692b      	ldr	r3, [r5, #16]
 80113b0:	2b01      	cmp	r3, #1
 80113b2:	f340 8090 	ble.w	80114d6 <_strtod_l+0x8f6>
 80113b6:	4629      	mov	r1, r5
 80113b8:	2201      	movs	r2, #1
 80113ba:	4620      	mov	r0, r4
 80113bc:	f002 f916 	bl	80135ec <__lshift>
 80113c0:	4631      	mov	r1, r6
 80113c2:	4605      	mov	r5, r0
 80113c4:	f002 f982 	bl	80136cc <__mcmp>
 80113c8:	2800      	cmp	r0, #0
 80113ca:	f340 8084 	ble.w	80114d6 <_strtod_l+0x8f6>
 80113ce:	9904      	ldr	r1, [sp, #16]
 80113d0:	4a2b      	ldr	r2, [pc, #172]	; (8011480 <_strtod_l+0x8a0>)
 80113d2:	464b      	mov	r3, r9
 80113d4:	2900      	cmp	r1, #0
 80113d6:	f000 809d 	beq.w	8011514 <_strtod_l+0x934>
 80113da:	ea02 0109 	and.w	r1, r2, r9
 80113de:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80113e2:	f300 8097 	bgt.w	8011514 <_strtod_l+0x934>
 80113e6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80113ea:	f77f aea5 	ble.w	8011138 <_strtod_l+0x558>
 80113ee:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011470 <_strtod_l+0x890>
 80113f2:	ec49 8b16 	vmov	d6, r8, r9
 80113f6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80113fa:	ed8d 7b04 	vstr	d7, [sp, #16]
 80113fe:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8011402:	4313      	orrs	r3, r2
 8011404:	bf08      	it	eq
 8011406:	2322      	moveq	r3, #34	; 0x22
 8011408:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801140c:	bf08      	it	eq
 801140e:	6023      	streq	r3, [r4, #0]
 8011410:	e62c      	b.n	801106c <_strtod_l+0x48c>
 8011412:	f04f 31ff 	mov.w	r1, #4294967295
 8011416:	fa01 f202 	lsl.w	r2, r1, r2
 801141a:	ea02 0808 	and.w	r8, r2, r8
 801141e:	e6d9      	b.n	80111d4 <_strtod_l+0x5f4>
 8011420:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8011424:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8011428:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801142c:	33e2      	adds	r3, #226	; 0xe2
 801142e:	fa00 f303 	lsl.w	r3, r0, r3
 8011432:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8011436:	e73f      	b.n	80112b8 <_strtod_l+0x6d8>
 8011438:	2200      	movs	r2, #0
 801143a:	2301      	movs	r3, #1
 801143c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8011440:	e73a      	b.n	80112b8 <_strtod_l+0x6d8>
 8011442:	9912      	ldr	r1, [sp, #72]	; 0x48
 8011444:	461a      	mov	r2, r3
 8011446:	4620      	mov	r0, r4
 8011448:	f002 f8d0 	bl	80135ec <__lshift>
 801144c:	9012      	str	r0, [sp, #72]	; 0x48
 801144e:	2800      	cmp	r0, #0
 8011450:	f47f af64 	bne.w	801131c <_strtod_l+0x73c>
 8011454:	e600      	b.n	8011058 <_strtod_l+0x478>
 8011456:	bf00      	nop
 8011458:	94a03595 	.word	0x94a03595
 801145c:	3fcfffff 	.word	0x3fcfffff
 8011460:	94a03595 	.word	0x94a03595
 8011464:	3fdfffff 	.word	0x3fdfffff
 8011468:	35afe535 	.word	0x35afe535
 801146c:	3fe00000 	.word	0x3fe00000
 8011470:	00000000 	.word	0x00000000
 8011474:	39500000 	.word	0x39500000
 8011478:	08014d90 	.word	0x08014d90
 801147c:	fffffc02 	.word	0xfffffc02
 8011480:	7ff00000 	.word	0x7ff00000
 8011484:	46cb      	mov	fp, r9
 8011486:	d15f      	bne.n	8011548 <_strtod_l+0x968>
 8011488:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801148c:	f1ba 0f00 	cmp.w	sl, #0
 8011490:	d02a      	beq.n	80114e8 <_strtod_l+0x908>
 8011492:	4aa7      	ldr	r2, [pc, #668]	; (8011730 <_strtod_l+0xb50>)
 8011494:	4293      	cmp	r3, r2
 8011496:	d12b      	bne.n	80114f0 <_strtod_l+0x910>
 8011498:	9b04      	ldr	r3, [sp, #16]
 801149a:	4642      	mov	r2, r8
 801149c:	b1fb      	cbz	r3, 80114de <_strtod_l+0x8fe>
 801149e:	4ba5      	ldr	r3, [pc, #660]	; (8011734 <_strtod_l+0xb54>)
 80114a0:	ea09 0303 	and.w	r3, r9, r3
 80114a4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80114a8:	f04f 31ff 	mov.w	r1, #4294967295
 80114ac:	d81a      	bhi.n	80114e4 <_strtod_l+0x904>
 80114ae:	0d1b      	lsrs	r3, r3, #20
 80114b0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80114b4:	fa01 f303 	lsl.w	r3, r1, r3
 80114b8:	429a      	cmp	r2, r3
 80114ba:	d119      	bne.n	80114f0 <_strtod_l+0x910>
 80114bc:	4b9e      	ldr	r3, [pc, #632]	; (8011738 <_strtod_l+0xb58>)
 80114be:	459b      	cmp	fp, r3
 80114c0:	d102      	bne.n	80114c8 <_strtod_l+0x8e8>
 80114c2:	3201      	adds	r2, #1
 80114c4:	f43f adc8 	beq.w	8011058 <_strtod_l+0x478>
 80114c8:	4b9a      	ldr	r3, [pc, #616]	; (8011734 <_strtod_l+0xb54>)
 80114ca:	ea0b 0303 	and.w	r3, fp, r3
 80114ce:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80114d2:	f04f 0800 	mov.w	r8, #0
 80114d6:	9b04      	ldr	r3, [sp, #16]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d188      	bne.n	80113ee <_strtod_l+0x80e>
 80114dc:	e5c6      	b.n	801106c <_strtod_l+0x48c>
 80114de:	f04f 33ff 	mov.w	r3, #4294967295
 80114e2:	e7e9      	b.n	80114b8 <_strtod_l+0x8d8>
 80114e4:	460b      	mov	r3, r1
 80114e6:	e7e7      	b.n	80114b8 <_strtod_l+0x8d8>
 80114e8:	ea53 0308 	orrs.w	r3, r3, r8
 80114ec:	f43f af6f 	beq.w	80113ce <_strtod_l+0x7ee>
 80114f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80114f2:	b1cb      	cbz	r3, 8011528 <_strtod_l+0x948>
 80114f4:	ea13 0f0b 	tst.w	r3, fp
 80114f8:	d0ed      	beq.n	80114d6 <_strtod_l+0x8f6>
 80114fa:	9a04      	ldr	r2, [sp, #16]
 80114fc:	4640      	mov	r0, r8
 80114fe:	4649      	mov	r1, r9
 8011500:	f1ba 0f00 	cmp.w	sl, #0
 8011504:	d014      	beq.n	8011530 <_strtod_l+0x950>
 8011506:	f7ff fb4f 	bl	8010ba8 <sulp>
 801150a:	ee38 7b00 	vadd.f64	d7, d8, d0
 801150e:	ec59 8b17 	vmov	r8, r9, d7
 8011512:	e7e0      	b.n	80114d6 <_strtod_l+0x8f6>
 8011514:	4013      	ands	r3, r2
 8011516:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801151a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801151e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8011522:	f04f 38ff 	mov.w	r8, #4294967295
 8011526:	e7d6      	b.n	80114d6 <_strtod_l+0x8f6>
 8011528:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801152a:	ea13 0f08 	tst.w	r3, r8
 801152e:	e7e3      	b.n	80114f8 <_strtod_l+0x918>
 8011530:	f7ff fb3a 	bl	8010ba8 <sulp>
 8011534:	ee38 0b40 	vsub.f64	d0, d8, d0
 8011538:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801153c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011540:	ec59 8b10 	vmov	r8, r9, d0
 8011544:	d1c7      	bne.n	80114d6 <_strtod_l+0x8f6>
 8011546:	e5f7      	b.n	8011138 <_strtod_l+0x558>
 8011548:	4631      	mov	r1, r6
 801154a:	4628      	mov	r0, r5
 801154c:	f002 fa3c 	bl	80139c8 <__ratio>
 8011550:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8011554:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8011558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801155c:	d865      	bhi.n	801162a <_strtod_l+0xa4a>
 801155e:	f1ba 0f00 	cmp.w	sl, #0
 8011562:	d042      	beq.n	80115ea <_strtod_l+0xa0a>
 8011564:	4b75      	ldr	r3, [pc, #468]	; (801173c <_strtod_l+0xb5c>)
 8011566:	2200      	movs	r2, #0
 8011568:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801156c:	4871      	ldr	r0, [pc, #452]	; (8011734 <_strtod_l+0xb54>)
 801156e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8011748 <_strtod_l+0xb68>
 8011572:	ea0b 0100 	and.w	r1, fp, r0
 8011576:	4561      	cmp	r1, ip
 8011578:	f040 808e 	bne.w	8011698 <_strtod_l+0xab8>
 801157c:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8011580:	ec49 8b10 	vmov	d0, r8, r9
 8011584:	ec43 2b1c 	vmov	d12, r2, r3
 8011588:	910a      	str	r1, [sp, #40]	; 0x28
 801158a:	f002 f945 	bl	8013818 <__ulp>
 801158e:	ec49 8b1e 	vmov	d14, r8, r9
 8011592:	4868      	ldr	r0, [pc, #416]	; (8011734 <_strtod_l+0xb54>)
 8011594:	eeac eb00 	vfma.f64	d14, d12, d0
 8011598:	ee1e 3a90 	vmov	r3, s29
 801159c:	4a68      	ldr	r2, [pc, #416]	; (8011740 <_strtod_l+0xb60>)
 801159e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80115a0:	4018      	ands	r0, r3
 80115a2:	4290      	cmp	r0, r2
 80115a4:	ec59 8b1e 	vmov	r8, r9, d14
 80115a8:	d94e      	bls.n	8011648 <_strtod_l+0xa68>
 80115aa:	ee18 3a90 	vmov	r3, s17
 80115ae:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80115b2:	4293      	cmp	r3, r2
 80115b4:	d104      	bne.n	80115c0 <_strtod_l+0x9e0>
 80115b6:	ee18 3a10 	vmov	r3, s16
 80115ba:	3301      	adds	r3, #1
 80115bc:	f43f ad4c 	beq.w	8011058 <_strtod_l+0x478>
 80115c0:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8011738 <_strtod_l+0xb58>
 80115c4:	f04f 38ff 	mov.w	r8, #4294967295
 80115c8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80115ca:	4620      	mov	r0, r4
 80115cc:	f001 fdf2 	bl	80131b4 <_Bfree>
 80115d0:	4639      	mov	r1, r7
 80115d2:	4620      	mov	r0, r4
 80115d4:	f001 fdee 	bl	80131b4 <_Bfree>
 80115d8:	4631      	mov	r1, r6
 80115da:	4620      	mov	r0, r4
 80115dc:	f001 fdea 	bl	80131b4 <_Bfree>
 80115e0:	4629      	mov	r1, r5
 80115e2:	4620      	mov	r0, r4
 80115e4:	f001 fde6 	bl	80131b4 <_Bfree>
 80115e8:	e619      	b.n	801121e <_strtod_l+0x63e>
 80115ea:	f1b8 0f00 	cmp.w	r8, #0
 80115ee:	d112      	bne.n	8011616 <_strtod_l+0xa36>
 80115f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80115f4:	b9b3      	cbnz	r3, 8011624 <_strtod_l+0xa44>
 80115f6:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80115fa:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80115fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011602:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8011606:	bf58      	it	pl
 8011608:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 801160c:	eeb1 7b4d 	vneg.f64	d7, d13
 8011610:	ec53 2b17 	vmov	r2, r3, d7
 8011614:	e7aa      	b.n	801156c <_strtod_l+0x98c>
 8011616:	f1b8 0f01 	cmp.w	r8, #1
 801161a:	d103      	bne.n	8011624 <_strtod_l+0xa44>
 801161c:	f1b9 0f00 	cmp.w	r9, #0
 8011620:	f43f ad8a 	beq.w	8011138 <_strtod_l+0x558>
 8011624:	4b47      	ldr	r3, [pc, #284]	; (8011744 <_strtod_l+0xb64>)
 8011626:	2200      	movs	r2, #0
 8011628:	e79e      	b.n	8011568 <_strtod_l+0x988>
 801162a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801162e:	ee20 db0d 	vmul.f64	d13, d0, d13
 8011632:	f1ba 0f00 	cmp.w	sl, #0
 8011636:	d104      	bne.n	8011642 <_strtod_l+0xa62>
 8011638:	eeb1 7b4d 	vneg.f64	d7, d13
 801163c:	ec53 2b17 	vmov	r2, r3, d7
 8011640:	e794      	b.n	801156c <_strtod_l+0x98c>
 8011642:	eeb0 7b4d 	vmov.f64	d7, d13
 8011646:	e7f9      	b.n	801163c <_strtod_l+0xa5c>
 8011648:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801164c:	9b04      	ldr	r3, [sp, #16]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d1ba      	bne.n	80115c8 <_strtod_l+0x9e8>
 8011652:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011656:	0d1b      	lsrs	r3, r3, #20
 8011658:	051b      	lsls	r3, r3, #20
 801165a:	4299      	cmp	r1, r3
 801165c:	d1b4      	bne.n	80115c8 <_strtod_l+0x9e8>
 801165e:	ec51 0b1d 	vmov	r0, r1, d13
 8011662:	f7ef f819 	bl	8000698 <__aeabi_d2lz>
 8011666:	f7ee ffd1 	bl	800060c <__aeabi_l2d>
 801166a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801166e:	ec41 0b17 	vmov	d7, r0, r1
 8011672:	ea43 0308 	orr.w	r3, r3, r8
 8011676:	ea53 030a 	orrs.w	r3, r3, sl
 801167a:	ee3d db47 	vsub.f64	d13, d13, d7
 801167e:	d03c      	beq.n	80116fa <_strtod_l+0xb1a>
 8011680:	eeb4 dbca 	vcmpe.f64	d13, d10
 8011684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011688:	f53f acf0 	bmi.w	801106c <_strtod_l+0x48c>
 801168c:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8011690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011694:	dd98      	ble.n	80115c8 <_strtod_l+0x9e8>
 8011696:	e4e9      	b.n	801106c <_strtod_l+0x48c>
 8011698:	9804      	ldr	r0, [sp, #16]
 801169a:	b1f0      	cbz	r0, 80116da <_strtod_l+0xafa>
 801169c:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 80116a0:	d81b      	bhi.n	80116da <_strtod_l+0xafa>
 80116a2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8011728 <_strtod_l+0xb48>
 80116a6:	eeb4 dbc7 	vcmpe.f64	d13, d7
 80116aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116ae:	d811      	bhi.n	80116d4 <_strtod_l+0xaf4>
 80116b0:	eebc dbcd 	vcvt.u32.f64	s26, d13
 80116b4:	ee1d 3a10 	vmov	r3, s26
 80116b8:	2b01      	cmp	r3, #1
 80116ba:	bf38      	it	cc
 80116bc:	2301      	movcc	r3, #1
 80116be:	ee0d 3a10 	vmov	s26, r3
 80116c2:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 80116c6:	f1ba 0f00 	cmp.w	sl, #0
 80116ca:	d113      	bne.n	80116f4 <_strtod_l+0xb14>
 80116cc:	eeb1 7b4d 	vneg.f64	d7, d13
 80116d0:	ec53 2b17 	vmov	r2, r3, d7
 80116d4:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 80116d8:	1a43      	subs	r3, r0, r1
 80116da:	eeb0 0b48 	vmov.f64	d0, d8
 80116de:	ec43 2b1c 	vmov	d12, r2, r3
 80116e2:	910a      	str	r1, [sp, #40]	; 0x28
 80116e4:	f002 f898 	bl	8013818 <__ulp>
 80116e8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80116ea:	eeac 8b00 	vfma.f64	d8, d12, d0
 80116ee:	ec59 8b18 	vmov	r8, r9, d8
 80116f2:	e7ab      	b.n	801164c <_strtod_l+0xa6c>
 80116f4:	eeb0 7b4d 	vmov.f64	d7, d13
 80116f8:	e7ea      	b.n	80116d0 <_strtod_l+0xaf0>
 80116fa:	eeb4 dbc9 	vcmpe.f64	d13, d9
 80116fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011702:	f57f af61 	bpl.w	80115c8 <_strtod_l+0x9e8>
 8011706:	e4b1      	b.n	801106c <_strtod_l+0x48c>
 8011708:	2300      	movs	r3, #0
 801170a:	9308      	str	r3, [sp, #32]
 801170c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801170e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011710:	6013      	str	r3, [r2, #0]
 8011712:	f7ff baad 	b.w	8010c70 <_strtod_l+0x90>
 8011716:	2a65      	cmp	r2, #101	; 0x65
 8011718:	f43f ab9f 	beq.w	8010e5a <_strtod_l+0x27a>
 801171c:	2a45      	cmp	r2, #69	; 0x45
 801171e:	f43f ab9c 	beq.w	8010e5a <_strtod_l+0x27a>
 8011722:	2101      	movs	r1, #1
 8011724:	f7ff bbd4 	b.w	8010ed0 <_strtod_l+0x2f0>
 8011728:	ffc00000 	.word	0xffc00000
 801172c:	41dfffff 	.word	0x41dfffff
 8011730:	000fffff 	.word	0x000fffff
 8011734:	7ff00000 	.word	0x7ff00000
 8011738:	7fefffff 	.word	0x7fefffff
 801173c:	3ff00000 	.word	0x3ff00000
 8011740:	7c9fffff 	.word	0x7c9fffff
 8011744:	bff00000 	.word	0xbff00000
 8011748:	7fe00000 	.word	0x7fe00000

0801174c <_strtod_r>:
 801174c:	4b01      	ldr	r3, [pc, #4]	; (8011754 <_strtod_r+0x8>)
 801174e:	f7ff ba47 	b.w	8010be0 <_strtod_l>
 8011752:	bf00      	nop
 8011754:	20000078 	.word	0x20000078

08011758 <_strtol_l.constprop.0>:
 8011758:	2b01      	cmp	r3, #1
 801175a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801175e:	d001      	beq.n	8011764 <_strtol_l.constprop.0+0xc>
 8011760:	2b24      	cmp	r3, #36	; 0x24
 8011762:	d906      	bls.n	8011772 <_strtol_l.constprop.0+0x1a>
 8011764:	f7fe f9c0 	bl	800fae8 <__errno>
 8011768:	2316      	movs	r3, #22
 801176a:	6003      	str	r3, [r0, #0]
 801176c:	2000      	movs	r0, #0
 801176e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011772:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8011858 <_strtol_l.constprop.0+0x100>
 8011776:	460d      	mov	r5, r1
 8011778:	462e      	mov	r6, r5
 801177a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801177e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8011782:	f017 0708 	ands.w	r7, r7, #8
 8011786:	d1f7      	bne.n	8011778 <_strtol_l.constprop.0+0x20>
 8011788:	2c2d      	cmp	r4, #45	; 0x2d
 801178a:	d132      	bne.n	80117f2 <_strtol_l.constprop.0+0x9a>
 801178c:	782c      	ldrb	r4, [r5, #0]
 801178e:	2701      	movs	r7, #1
 8011790:	1cb5      	adds	r5, r6, #2
 8011792:	2b00      	cmp	r3, #0
 8011794:	d05b      	beq.n	801184e <_strtol_l.constprop.0+0xf6>
 8011796:	2b10      	cmp	r3, #16
 8011798:	d109      	bne.n	80117ae <_strtol_l.constprop.0+0x56>
 801179a:	2c30      	cmp	r4, #48	; 0x30
 801179c:	d107      	bne.n	80117ae <_strtol_l.constprop.0+0x56>
 801179e:	782c      	ldrb	r4, [r5, #0]
 80117a0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80117a4:	2c58      	cmp	r4, #88	; 0x58
 80117a6:	d14d      	bne.n	8011844 <_strtol_l.constprop.0+0xec>
 80117a8:	786c      	ldrb	r4, [r5, #1]
 80117aa:	2310      	movs	r3, #16
 80117ac:	3502      	adds	r5, #2
 80117ae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80117b2:	f108 38ff 	add.w	r8, r8, #4294967295
 80117b6:	f04f 0c00 	mov.w	ip, #0
 80117ba:	fbb8 f9f3 	udiv	r9, r8, r3
 80117be:	4666      	mov	r6, ip
 80117c0:	fb03 8a19 	mls	sl, r3, r9, r8
 80117c4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80117c8:	f1be 0f09 	cmp.w	lr, #9
 80117cc:	d816      	bhi.n	80117fc <_strtol_l.constprop.0+0xa4>
 80117ce:	4674      	mov	r4, lr
 80117d0:	42a3      	cmp	r3, r4
 80117d2:	dd24      	ble.n	801181e <_strtol_l.constprop.0+0xc6>
 80117d4:	f1bc 0f00 	cmp.w	ip, #0
 80117d8:	db1e      	blt.n	8011818 <_strtol_l.constprop.0+0xc0>
 80117da:	45b1      	cmp	r9, r6
 80117dc:	d31c      	bcc.n	8011818 <_strtol_l.constprop.0+0xc0>
 80117de:	d101      	bne.n	80117e4 <_strtol_l.constprop.0+0x8c>
 80117e0:	45a2      	cmp	sl, r4
 80117e2:	db19      	blt.n	8011818 <_strtol_l.constprop.0+0xc0>
 80117e4:	fb06 4603 	mla	r6, r6, r3, r4
 80117e8:	f04f 0c01 	mov.w	ip, #1
 80117ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80117f0:	e7e8      	b.n	80117c4 <_strtol_l.constprop.0+0x6c>
 80117f2:	2c2b      	cmp	r4, #43	; 0x2b
 80117f4:	bf04      	itt	eq
 80117f6:	782c      	ldrbeq	r4, [r5, #0]
 80117f8:	1cb5      	addeq	r5, r6, #2
 80117fa:	e7ca      	b.n	8011792 <_strtol_l.constprop.0+0x3a>
 80117fc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8011800:	f1be 0f19 	cmp.w	lr, #25
 8011804:	d801      	bhi.n	801180a <_strtol_l.constprop.0+0xb2>
 8011806:	3c37      	subs	r4, #55	; 0x37
 8011808:	e7e2      	b.n	80117d0 <_strtol_l.constprop.0+0x78>
 801180a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801180e:	f1be 0f19 	cmp.w	lr, #25
 8011812:	d804      	bhi.n	801181e <_strtol_l.constprop.0+0xc6>
 8011814:	3c57      	subs	r4, #87	; 0x57
 8011816:	e7db      	b.n	80117d0 <_strtol_l.constprop.0+0x78>
 8011818:	f04f 3cff 	mov.w	ip, #4294967295
 801181c:	e7e6      	b.n	80117ec <_strtol_l.constprop.0+0x94>
 801181e:	f1bc 0f00 	cmp.w	ip, #0
 8011822:	da05      	bge.n	8011830 <_strtol_l.constprop.0+0xd8>
 8011824:	2322      	movs	r3, #34	; 0x22
 8011826:	6003      	str	r3, [r0, #0]
 8011828:	4646      	mov	r6, r8
 801182a:	b942      	cbnz	r2, 801183e <_strtol_l.constprop.0+0xe6>
 801182c:	4630      	mov	r0, r6
 801182e:	e79e      	b.n	801176e <_strtol_l.constprop.0+0x16>
 8011830:	b107      	cbz	r7, 8011834 <_strtol_l.constprop.0+0xdc>
 8011832:	4276      	negs	r6, r6
 8011834:	2a00      	cmp	r2, #0
 8011836:	d0f9      	beq.n	801182c <_strtol_l.constprop.0+0xd4>
 8011838:	f1bc 0f00 	cmp.w	ip, #0
 801183c:	d000      	beq.n	8011840 <_strtol_l.constprop.0+0xe8>
 801183e:	1e69      	subs	r1, r5, #1
 8011840:	6011      	str	r1, [r2, #0]
 8011842:	e7f3      	b.n	801182c <_strtol_l.constprop.0+0xd4>
 8011844:	2430      	movs	r4, #48	; 0x30
 8011846:	2b00      	cmp	r3, #0
 8011848:	d1b1      	bne.n	80117ae <_strtol_l.constprop.0+0x56>
 801184a:	2308      	movs	r3, #8
 801184c:	e7af      	b.n	80117ae <_strtol_l.constprop.0+0x56>
 801184e:	2c30      	cmp	r4, #48	; 0x30
 8011850:	d0a5      	beq.n	801179e <_strtol_l.constprop.0+0x46>
 8011852:	230a      	movs	r3, #10
 8011854:	e7ab      	b.n	80117ae <_strtol_l.constprop.0+0x56>
 8011856:	bf00      	nop
 8011858:	08014db9 	.word	0x08014db9

0801185c <_strtol_r>:
 801185c:	f7ff bf7c 	b.w	8011758 <_strtol_l.constprop.0>

08011860 <__swbuf_r>:
 8011860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011862:	460e      	mov	r6, r1
 8011864:	4614      	mov	r4, r2
 8011866:	4605      	mov	r5, r0
 8011868:	b118      	cbz	r0, 8011872 <__swbuf_r+0x12>
 801186a:	6983      	ldr	r3, [r0, #24]
 801186c:	b90b      	cbnz	r3, 8011872 <__swbuf_r+0x12>
 801186e:	f000 ffcb 	bl	8012808 <__sinit>
 8011872:	4b21      	ldr	r3, [pc, #132]	; (80118f8 <__swbuf_r+0x98>)
 8011874:	429c      	cmp	r4, r3
 8011876:	d12b      	bne.n	80118d0 <__swbuf_r+0x70>
 8011878:	686c      	ldr	r4, [r5, #4]
 801187a:	69a3      	ldr	r3, [r4, #24]
 801187c:	60a3      	str	r3, [r4, #8]
 801187e:	89a3      	ldrh	r3, [r4, #12]
 8011880:	071a      	lsls	r2, r3, #28
 8011882:	d52f      	bpl.n	80118e4 <__swbuf_r+0x84>
 8011884:	6923      	ldr	r3, [r4, #16]
 8011886:	b36b      	cbz	r3, 80118e4 <__swbuf_r+0x84>
 8011888:	6923      	ldr	r3, [r4, #16]
 801188a:	6820      	ldr	r0, [r4, #0]
 801188c:	1ac0      	subs	r0, r0, r3
 801188e:	6963      	ldr	r3, [r4, #20]
 8011890:	b2f6      	uxtb	r6, r6
 8011892:	4283      	cmp	r3, r0
 8011894:	4637      	mov	r7, r6
 8011896:	dc04      	bgt.n	80118a2 <__swbuf_r+0x42>
 8011898:	4621      	mov	r1, r4
 801189a:	4628      	mov	r0, r5
 801189c:	f000 ff20 	bl	80126e0 <_fflush_r>
 80118a0:	bb30      	cbnz	r0, 80118f0 <__swbuf_r+0x90>
 80118a2:	68a3      	ldr	r3, [r4, #8]
 80118a4:	3b01      	subs	r3, #1
 80118a6:	60a3      	str	r3, [r4, #8]
 80118a8:	6823      	ldr	r3, [r4, #0]
 80118aa:	1c5a      	adds	r2, r3, #1
 80118ac:	6022      	str	r2, [r4, #0]
 80118ae:	701e      	strb	r6, [r3, #0]
 80118b0:	6963      	ldr	r3, [r4, #20]
 80118b2:	3001      	adds	r0, #1
 80118b4:	4283      	cmp	r3, r0
 80118b6:	d004      	beq.n	80118c2 <__swbuf_r+0x62>
 80118b8:	89a3      	ldrh	r3, [r4, #12]
 80118ba:	07db      	lsls	r3, r3, #31
 80118bc:	d506      	bpl.n	80118cc <__swbuf_r+0x6c>
 80118be:	2e0a      	cmp	r6, #10
 80118c0:	d104      	bne.n	80118cc <__swbuf_r+0x6c>
 80118c2:	4621      	mov	r1, r4
 80118c4:	4628      	mov	r0, r5
 80118c6:	f000 ff0b 	bl	80126e0 <_fflush_r>
 80118ca:	b988      	cbnz	r0, 80118f0 <__swbuf_r+0x90>
 80118cc:	4638      	mov	r0, r7
 80118ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118d0:	4b0a      	ldr	r3, [pc, #40]	; (80118fc <__swbuf_r+0x9c>)
 80118d2:	429c      	cmp	r4, r3
 80118d4:	d101      	bne.n	80118da <__swbuf_r+0x7a>
 80118d6:	68ac      	ldr	r4, [r5, #8]
 80118d8:	e7cf      	b.n	801187a <__swbuf_r+0x1a>
 80118da:	4b09      	ldr	r3, [pc, #36]	; (8011900 <__swbuf_r+0xa0>)
 80118dc:	429c      	cmp	r4, r3
 80118de:	bf08      	it	eq
 80118e0:	68ec      	ldreq	r4, [r5, #12]
 80118e2:	e7ca      	b.n	801187a <__swbuf_r+0x1a>
 80118e4:	4621      	mov	r1, r4
 80118e6:	4628      	mov	r0, r5
 80118e8:	f000 f80c 	bl	8011904 <__swsetup_r>
 80118ec:	2800      	cmp	r0, #0
 80118ee:	d0cb      	beq.n	8011888 <__swbuf_r+0x28>
 80118f0:	f04f 37ff 	mov.w	r7, #4294967295
 80118f4:	e7ea      	b.n	80118cc <__swbuf_r+0x6c>
 80118f6:	bf00      	nop
 80118f8:	08014f6c 	.word	0x08014f6c
 80118fc:	08014f8c 	.word	0x08014f8c
 8011900:	08014f4c 	.word	0x08014f4c

08011904 <__swsetup_r>:
 8011904:	4b32      	ldr	r3, [pc, #200]	; (80119d0 <__swsetup_r+0xcc>)
 8011906:	b570      	push	{r4, r5, r6, lr}
 8011908:	681d      	ldr	r5, [r3, #0]
 801190a:	4606      	mov	r6, r0
 801190c:	460c      	mov	r4, r1
 801190e:	b125      	cbz	r5, 801191a <__swsetup_r+0x16>
 8011910:	69ab      	ldr	r3, [r5, #24]
 8011912:	b913      	cbnz	r3, 801191a <__swsetup_r+0x16>
 8011914:	4628      	mov	r0, r5
 8011916:	f000 ff77 	bl	8012808 <__sinit>
 801191a:	4b2e      	ldr	r3, [pc, #184]	; (80119d4 <__swsetup_r+0xd0>)
 801191c:	429c      	cmp	r4, r3
 801191e:	d10f      	bne.n	8011940 <__swsetup_r+0x3c>
 8011920:	686c      	ldr	r4, [r5, #4]
 8011922:	89a3      	ldrh	r3, [r4, #12]
 8011924:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011928:	0719      	lsls	r1, r3, #28
 801192a:	d42c      	bmi.n	8011986 <__swsetup_r+0x82>
 801192c:	06dd      	lsls	r5, r3, #27
 801192e:	d411      	bmi.n	8011954 <__swsetup_r+0x50>
 8011930:	2309      	movs	r3, #9
 8011932:	6033      	str	r3, [r6, #0]
 8011934:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011938:	81a3      	strh	r3, [r4, #12]
 801193a:	f04f 30ff 	mov.w	r0, #4294967295
 801193e:	e03e      	b.n	80119be <__swsetup_r+0xba>
 8011940:	4b25      	ldr	r3, [pc, #148]	; (80119d8 <__swsetup_r+0xd4>)
 8011942:	429c      	cmp	r4, r3
 8011944:	d101      	bne.n	801194a <__swsetup_r+0x46>
 8011946:	68ac      	ldr	r4, [r5, #8]
 8011948:	e7eb      	b.n	8011922 <__swsetup_r+0x1e>
 801194a:	4b24      	ldr	r3, [pc, #144]	; (80119dc <__swsetup_r+0xd8>)
 801194c:	429c      	cmp	r4, r3
 801194e:	bf08      	it	eq
 8011950:	68ec      	ldreq	r4, [r5, #12]
 8011952:	e7e6      	b.n	8011922 <__swsetup_r+0x1e>
 8011954:	0758      	lsls	r0, r3, #29
 8011956:	d512      	bpl.n	801197e <__swsetup_r+0x7a>
 8011958:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801195a:	b141      	cbz	r1, 801196e <__swsetup_r+0x6a>
 801195c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011960:	4299      	cmp	r1, r3
 8011962:	d002      	beq.n	801196a <__swsetup_r+0x66>
 8011964:	4630      	mov	r0, r6
 8011966:	f7fe f907 	bl	800fb78 <_free_r>
 801196a:	2300      	movs	r3, #0
 801196c:	6363      	str	r3, [r4, #52]	; 0x34
 801196e:	89a3      	ldrh	r3, [r4, #12]
 8011970:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011974:	81a3      	strh	r3, [r4, #12]
 8011976:	2300      	movs	r3, #0
 8011978:	6063      	str	r3, [r4, #4]
 801197a:	6923      	ldr	r3, [r4, #16]
 801197c:	6023      	str	r3, [r4, #0]
 801197e:	89a3      	ldrh	r3, [r4, #12]
 8011980:	f043 0308 	orr.w	r3, r3, #8
 8011984:	81a3      	strh	r3, [r4, #12]
 8011986:	6923      	ldr	r3, [r4, #16]
 8011988:	b94b      	cbnz	r3, 801199e <__swsetup_r+0x9a>
 801198a:	89a3      	ldrh	r3, [r4, #12]
 801198c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011994:	d003      	beq.n	801199e <__swsetup_r+0x9a>
 8011996:	4621      	mov	r1, r4
 8011998:	4630      	mov	r0, r6
 801199a:	f001 fb6d 	bl	8013078 <__smakebuf_r>
 801199e:	89a0      	ldrh	r0, [r4, #12]
 80119a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80119a4:	f010 0301 	ands.w	r3, r0, #1
 80119a8:	d00a      	beq.n	80119c0 <__swsetup_r+0xbc>
 80119aa:	2300      	movs	r3, #0
 80119ac:	60a3      	str	r3, [r4, #8]
 80119ae:	6963      	ldr	r3, [r4, #20]
 80119b0:	425b      	negs	r3, r3
 80119b2:	61a3      	str	r3, [r4, #24]
 80119b4:	6923      	ldr	r3, [r4, #16]
 80119b6:	b943      	cbnz	r3, 80119ca <__swsetup_r+0xc6>
 80119b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80119bc:	d1ba      	bne.n	8011934 <__swsetup_r+0x30>
 80119be:	bd70      	pop	{r4, r5, r6, pc}
 80119c0:	0781      	lsls	r1, r0, #30
 80119c2:	bf58      	it	pl
 80119c4:	6963      	ldrpl	r3, [r4, #20]
 80119c6:	60a3      	str	r3, [r4, #8]
 80119c8:	e7f4      	b.n	80119b4 <__swsetup_r+0xb0>
 80119ca:	2000      	movs	r0, #0
 80119cc:	e7f7      	b.n	80119be <__swsetup_r+0xba>
 80119ce:	bf00      	nop
 80119d0:	20000010 	.word	0x20000010
 80119d4:	08014f6c 	.word	0x08014f6c
 80119d8:	08014f8c 	.word	0x08014f8c
 80119dc:	08014f4c 	.word	0x08014f4c

080119e0 <quorem>:
 80119e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119e4:	6903      	ldr	r3, [r0, #16]
 80119e6:	690c      	ldr	r4, [r1, #16]
 80119e8:	42a3      	cmp	r3, r4
 80119ea:	4607      	mov	r7, r0
 80119ec:	f2c0 8081 	blt.w	8011af2 <quorem+0x112>
 80119f0:	3c01      	subs	r4, #1
 80119f2:	f101 0814 	add.w	r8, r1, #20
 80119f6:	f100 0514 	add.w	r5, r0, #20
 80119fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80119fe:	9301      	str	r3, [sp, #4]
 8011a00:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011a04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011a08:	3301      	adds	r3, #1
 8011a0a:	429a      	cmp	r2, r3
 8011a0c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011a10:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011a14:	fbb2 f6f3 	udiv	r6, r2, r3
 8011a18:	d331      	bcc.n	8011a7e <quorem+0x9e>
 8011a1a:	f04f 0e00 	mov.w	lr, #0
 8011a1e:	4640      	mov	r0, r8
 8011a20:	46ac      	mov	ip, r5
 8011a22:	46f2      	mov	sl, lr
 8011a24:	f850 2b04 	ldr.w	r2, [r0], #4
 8011a28:	b293      	uxth	r3, r2
 8011a2a:	fb06 e303 	mla	r3, r6, r3, lr
 8011a2e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011a32:	b29b      	uxth	r3, r3
 8011a34:	ebaa 0303 	sub.w	r3, sl, r3
 8011a38:	f8dc a000 	ldr.w	sl, [ip]
 8011a3c:	0c12      	lsrs	r2, r2, #16
 8011a3e:	fa13 f38a 	uxtah	r3, r3, sl
 8011a42:	fb06 e202 	mla	r2, r6, r2, lr
 8011a46:	9300      	str	r3, [sp, #0]
 8011a48:	9b00      	ldr	r3, [sp, #0]
 8011a4a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011a4e:	b292      	uxth	r2, r2
 8011a50:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011a54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011a58:	f8bd 3000 	ldrh.w	r3, [sp]
 8011a5c:	4581      	cmp	r9, r0
 8011a5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011a62:	f84c 3b04 	str.w	r3, [ip], #4
 8011a66:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011a6a:	d2db      	bcs.n	8011a24 <quorem+0x44>
 8011a6c:	f855 300b 	ldr.w	r3, [r5, fp]
 8011a70:	b92b      	cbnz	r3, 8011a7e <quorem+0x9e>
 8011a72:	9b01      	ldr	r3, [sp, #4]
 8011a74:	3b04      	subs	r3, #4
 8011a76:	429d      	cmp	r5, r3
 8011a78:	461a      	mov	r2, r3
 8011a7a:	d32e      	bcc.n	8011ada <quorem+0xfa>
 8011a7c:	613c      	str	r4, [r7, #16]
 8011a7e:	4638      	mov	r0, r7
 8011a80:	f001 fe24 	bl	80136cc <__mcmp>
 8011a84:	2800      	cmp	r0, #0
 8011a86:	db24      	blt.n	8011ad2 <quorem+0xf2>
 8011a88:	3601      	adds	r6, #1
 8011a8a:	4628      	mov	r0, r5
 8011a8c:	f04f 0c00 	mov.w	ip, #0
 8011a90:	f858 2b04 	ldr.w	r2, [r8], #4
 8011a94:	f8d0 e000 	ldr.w	lr, [r0]
 8011a98:	b293      	uxth	r3, r2
 8011a9a:	ebac 0303 	sub.w	r3, ip, r3
 8011a9e:	0c12      	lsrs	r2, r2, #16
 8011aa0:	fa13 f38e 	uxtah	r3, r3, lr
 8011aa4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011aa8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011aac:	b29b      	uxth	r3, r3
 8011aae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011ab2:	45c1      	cmp	r9, r8
 8011ab4:	f840 3b04 	str.w	r3, [r0], #4
 8011ab8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011abc:	d2e8      	bcs.n	8011a90 <quorem+0xb0>
 8011abe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011ac2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011ac6:	b922      	cbnz	r2, 8011ad2 <quorem+0xf2>
 8011ac8:	3b04      	subs	r3, #4
 8011aca:	429d      	cmp	r5, r3
 8011acc:	461a      	mov	r2, r3
 8011ace:	d30a      	bcc.n	8011ae6 <quorem+0x106>
 8011ad0:	613c      	str	r4, [r7, #16]
 8011ad2:	4630      	mov	r0, r6
 8011ad4:	b003      	add	sp, #12
 8011ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ada:	6812      	ldr	r2, [r2, #0]
 8011adc:	3b04      	subs	r3, #4
 8011ade:	2a00      	cmp	r2, #0
 8011ae0:	d1cc      	bne.n	8011a7c <quorem+0x9c>
 8011ae2:	3c01      	subs	r4, #1
 8011ae4:	e7c7      	b.n	8011a76 <quorem+0x96>
 8011ae6:	6812      	ldr	r2, [r2, #0]
 8011ae8:	3b04      	subs	r3, #4
 8011aea:	2a00      	cmp	r2, #0
 8011aec:	d1f0      	bne.n	8011ad0 <quorem+0xf0>
 8011aee:	3c01      	subs	r4, #1
 8011af0:	e7eb      	b.n	8011aca <quorem+0xea>
 8011af2:	2000      	movs	r0, #0
 8011af4:	e7ee      	b.n	8011ad4 <quorem+0xf4>
	...

08011af8 <_dtoa_r>:
 8011af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011afc:	ed2d 8b02 	vpush	{d8}
 8011b00:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011b02:	b091      	sub	sp, #68	; 0x44
 8011b04:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011b08:	ec59 8b10 	vmov	r8, r9, d0
 8011b0c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8011b0e:	9106      	str	r1, [sp, #24]
 8011b10:	4606      	mov	r6, r0
 8011b12:	9208      	str	r2, [sp, #32]
 8011b14:	930c      	str	r3, [sp, #48]	; 0x30
 8011b16:	b975      	cbnz	r5, 8011b36 <_dtoa_r+0x3e>
 8011b18:	2010      	movs	r0, #16
 8011b1a:	f7fe f80f 	bl	800fb3c <malloc>
 8011b1e:	4602      	mov	r2, r0
 8011b20:	6270      	str	r0, [r6, #36]	; 0x24
 8011b22:	b920      	cbnz	r0, 8011b2e <_dtoa_r+0x36>
 8011b24:	4baa      	ldr	r3, [pc, #680]	; (8011dd0 <_dtoa_r+0x2d8>)
 8011b26:	21ea      	movs	r1, #234	; 0xea
 8011b28:	48aa      	ldr	r0, [pc, #680]	; (8011dd4 <_dtoa_r+0x2dc>)
 8011b2a:	f002 fb53 	bl	80141d4 <__assert_func>
 8011b2e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011b32:	6005      	str	r5, [r0, #0]
 8011b34:	60c5      	str	r5, [r0, #12]
 8011b36:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011b38:	6819      	ldr	r1, [r3, #0]
 8011b3a:	b151      	cbz	r1, 8011b52 <_dtoa_r+0x5a>
 8011b3c:	685a      	ldr	r2, [r3, #4]
 8011b3e:	604a      	str	r2, [r1, #4]
 8011b40:	2301      	movs	r3, #1
 8011b42:	4093      	lsls	r3, r2
 8011b44:	608b      	str	r3, [r1, #8]
 8011b46:	4630      	mov	r0, r6
 8011b48:	f001 fb34 	bl	80131b4 <_Bfree>
 8011b4c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011b4e:	2200      	movs	r2, #0
 8011b50:	601a      	str	r2, [r3, #0]
 8011b52:	f1b9 0300 	subs.w	r3, r9, #0
 8011b56:	bfbb      	ittet	lt
 8011b58:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011b5c:	9303      	strlt	r3, [sp, #12]
 8011b5e:	2300      	movge	r3, #0
 8011b60:	2201      	movlt	r2, #1
 8011b62:	bfac      	ite	ge
 8011b64:	6023      	strge	r3, [r4, #0]
 8011b66:	6022      	strlt	r2, [r4, #0]
 8011b68:	4b9b      	ldr	r3, [pc, #620]	; (8011dd8 <_dtoa_r+0x2e0>)
 8011b6a:	9c03      	ldr	r4, [sp, #12]
 8011b6c:	43a3      	bics	r3, r4
 8011b6e:	d11c      	bne.n	8011baa <_dtoa_r+0xb2>
 8011b70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011b72:	f242 730f 	movw	r3, #9999	; 0x270f
 8011b76:	6013      	str	r3, [r2, #0]
 8011b78:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8011b7c:	ea53 0308 	orrs.w	r3, r3, r8
 8011b80:	f000 84fd 	beq.w	801257e <_dtoa_r+0xa86>
 8011b84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011b86:	b963      	cbnz	r3, 8011ba2 <_dtoa_r+0xaa>
 8011b88:	4b94      	ldr	r3, [pc, #592]	; (8011ddc <_dtoa_r+0x2e4>)
 8011b8a:	e01f      	b.n	8011bcc <_dtoa_r+0xd4>
 8011b8c:	4b94      	ldr	r3, [pc, #592]	; (8011de0 <_dtoa_r+0x2e8>)
 8011b8e:	9301      	str	r3, [sp, #4]
 8011b90:	3308      	adds	r3, #8
 8011b92:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011b94:	6013      	str	r3, [r2, #0]
 8011b96:	9801      	ldr	r0, [sp, #4]
 8011b98:	b011      	add	sp, #68	; 0x44
 8011b9a:	ecbd 8b02 	vpop	{d8}
 8011b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ba2:	4b8e      	ldr	r3, [pc, #568]	; (8011ddc <_dtoa_r+0x2e4>)
 8011ba4:	9301      	str	r3, [sp, #4]
 8011ba6:	3303      	adds	r3, #3
 8011ba8:	e7f3      	b.n	8011b92 <_dtoa_r+0x9a>
 8011baa:	ed9d 8b02 	vldr	d8, [sp, #8]
 8011bae:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bb6:	d10b      	bne.n	8011bd0 <_dtoa_r+0xd8>
 8011bb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011bba:	2301      	movs	r3, #1
 8011bbc:	6013      	str	r3, [r2, #0]
 8011bbe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	f000 84d9 	beq.w	8012578 <_dtoa_r+0xa80>
 8011bc6:	4887      	ldr	r0, [pc, #540]	; (8011de4 <_dtoa_r+0x2ec>)
 8011bc8:	6018      	str	r0, [r3, #0]
 8011bca:	1e43      	subs	r3, r0, #1
 8011bcc:	9301      	str	r3, [sp, #4]
 8011bce:	e7e2      	b.n	8011b96 <_dtoa_r+0x9e>
 8011bd0:	a90f      	add	r1, sp, #60	; 0x3c
 8011bd2:	aa0e      	add	r2, sp, #56	; 0x38
 8011bd4:	4630      	mov	r0, r6
 8011bd6:	eeb0 0b48 	vmov.f64	d0, d8
 8011bda:	f001 fe99 	bl	8013910 <__d2b>
 8011bde:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8011be2:	4605      	mov	r5, r0
 8011be4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8011be6:	2900      	cmp	r1, #0
 8011be8:	d046      	beq.n	8011c78 <_dtoa_r+0x180>
 8011bea:	ee18 4a90 	vmov	r4, s17
 8011bee:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011bf2:	ec53 2b18 	vmov	r2, r3, d8
 8011bf6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8011bfa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011bfe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8011c02:	2400      	movs	r4, #0
 8011c04:	ec43 2b16 	vmov	d6, r2, r3
 8011c08:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8011c0c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8011db8 <_dtoa_r+0x2c0>
 8011c10:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011c14:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8011dc0 <_dtoa_r+0x2c8>
 8011c18:	eea7 6b05 	vfma.f64	d6, d7, d5
 8011c1c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8011dc8 <_dtoa_r+0x2d0>
 8011c20:	ee07 1a90 	vmov	s15, r1
 8011c24:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8011c28:	eeb0 7b46 	vmov.f64	d7, d6
 8011c2c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8011c30:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8011c34:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8011c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c3c:	ee16 ba90 	vmov	fp, s13
 8011c40:	940a      	str	r4, [sp, #40]	; 0x28
 8011c42:	d508      	bpl.n	8011c56 <_dtoa_r+0x15e>
 8011c44:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8011c48:	eeb4 6b47 	vcmp.f64	d6, d7
 8011c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c50:	bf18      	it	ne
 8011c52:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8011c56:	f1bb 0f16 	cmp.w	fp, #22
 8011c5a:	d82f      	bhi.n	8011cbc <_dtoa_r+0x1c4>
 8011c5c:	4b62      	ldr	r3, [pc, #392]	; (8011de8 <_dtoa_r+0x2f0>)
 8011c5e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011c62:	ed93 7b00 	vldr	d7, [r3]
 8011c66:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c6e:	d501      	bpl.n	8011c74 <_dtoa_r+0x17c>
 8011c70:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011c74:	2300      	movs	r3, #0
 8011c76:	e022      	b.n	8011cbe <_dtoa_r+0x1c6>
 8011c78:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011c7a:	4401      	add	r1, r0
 8011c7c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8011c80:	2b20      	cmp	r3, #32
 8011c82:	bfc1      	itttt	gt
 8011c84:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011c88:	fa04 f303 	lslgt.w	r3, r4, r3
 8011c8c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8011c90:	fa28 f804 	lsrgt.w	r8, r8, r4
 8011c94:	bfd6      	itet	le
 8011c96:	f1c3 0320 	rsble	r3, r3, #32
 8011c9a:	ea43 0808 	orrgt.w	r8, r3, r8
 8011c9e:	fa08 f803 	lslle.w	r8, r8, r3
 8011ca2:	ee07 8a90 	vmov	s15, r8
 8011ca6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011caa:	3901      	subs	r1, #1
 8011cac:	ee17 4a90 	vmov	r4, s15
 8011cb0:	ec53 2b17 	vmov	r2, r3, d7
 8011cb4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8011cb8:	2401      	movs	r4, #1
 8011cba:	e7a3      	b.n	8011c04 <_dtoa_r+0x10c>
 8011cbc:	2301      	movs	r3, #1
 8011cbe:	930b      	str	r3, [sp, #44]	; 0x2c
 8011cc0:	1a43      	subs	r3, r0, r1
 8011cc2:	1e5a      	subs	r2, r3, #1
 8011cc4:	bf45      	ittet	mi
 8011cc6:	f1c3 0301 	rsbmi	r3, r3, #1
 8011cca:	9304      	strmi	r3, [sp, #16]
 8011ccc:	2300      	movpl	r3, #0
 8011cce:	2300      	movmi	r3, #0
 8011cd0:	9205      	str	r2, [sp, #20]
 8011cd2:	bf54      	ite	pl
 8011cd4:	9304      	strpl	r3, [sp, #16]
 8011cd6:	9305      	strmi	r3, [sp, #20]
 8011cd8:	f1bb 0f00 	cmp.w	fp, #0
 8011cdc:	db18      	blt.n	8011d10 <_dtoa_r+0x218>
 8011cde:	9b05      	ldr	r3, [sp, #20]
 8011ce0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8011ce4:	445b      	add	r3, fp
 8011ce6:	9305      	str	r3, [sp, #20]
 8011ce8:	2300      	movs	r3, #0
 8011cea:	9a06      	ldr	r2, [sp, #24]
 8011cec:	2a09      	cmp	r2, #9
 8011cee:	d849      	bhi.n	8011d84 <_dtoa_r+0x28c>
 8011cf0:	2a05      	cmp	r2, #5
 8011cf2:	bfc4      	itt	gt
 8011cf4:	3a04      	subgt	r2, #4
 8011cf6:	9206      	strgt	r2, [sp, #24]
 8011cf8:	9a06      	ldr	r2, [sp, #24]
 8011cfa:	f1a2 0202 	sub.w	r2, r2, #2
 8011cfe:	bfcc      	ite	gt
 8011d00:	2400      	movgt	r4, #0
 8011d02:	2401      	movle	r4, #1
 8011d04:	2a03      	cmp	r2, #3
 8011d06:	d848      	bhi.n	8011d9a <_dtoa_r+0x2a2>
 8011d08:	e8df f002 	tbb	[pc, r2]
 8011d0c:	3a2c2e0b 	.word	0x3a2c2e0b
 8011d10:	9b04      	ldr	r3, [sp, #16]
 8011d12:	2200      	movs	r2, #0
 8011d14:	eba3 030b 	sub.w	r3, r3, fp
 8011d18:	9304      	str	r3, [sp, #16]
 8011d1a:	9209      	str	r2, [sp, #36]	; 0x24
 8011d1c:	f1cb 0300 	rsb	r3, fp, #0
 8011d20:	e7e3      	b.n	8011cea <_dtoa_r+0x1f2>
 8011d22:	2200      	movs	r2, #0
 8011d24:	9207      	str	r2, [sp, #28]
 8011d26:	9a08      	ldr	r2, [sp, #32]
 8011d28:	2a00      	cmp	r2, #0
 8011d2a:	dc39      	bgt.n	8011da0 <_dtoa_r+0x2a8>
 8011d2c:	f04f 0a01 	mov.w	sl, #1
 8011d30:	46d1      	mov	r9, sl
 8011d32:	4652      	mov	r2, sl
 8011d34:	f8cd a020 	str.w	sl, [sp, #32]
 8011d38:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8011d3a:	2100      	movs	r1, #0
 8011d3c:	6079      	str	r1, [r7, #4]
 8011d3e:	2004      	movs	r0, #4
 8011d40:	f100 0c14 	add.w	ip, r0, #20
 8011d44:	4594      	cmp	ip, r2
 8011d46:	6879      	ldr	r1, [r7, #4]
 8011d48:	d92f      	bls.n	8011daa <_dtoa_r+0x2b2>
 8011d4a:	4630      	mov	r0, r6
 8011d4c:	930d      	str	r3, [sp, #52]	; 0x34
 8011d4e:	f001 f9f1 	bl	8013134 <_Balloc>
 8011d52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011d54:	9001      	str	r0, [sp, #4]
 8011d56:	4602      	mov	r2, r0
 8011d58:	2800      	cmp	r0, #0
 8011d5a:	d149      	bne.n	8011df0 <_dtoa_r+0x2f8>
 8011d5c:	4b23      	ldr	r3, [pc, #140]	; (8011dec <_dtoa_r+0x2f4>)
 8011d5e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011d62:	e6e1      	b.n	8011b28 <_dtoa_r+0x30>
 8011d64:	2201      	movs	r2, #1
 8011d66:	e7dd      	b.n	8011d24 <_dtoa_r+0x22c>
 8011d68:	2200      	movs	r2, #0
 8011d6a:	9207      	str	r2, [sp, #28]
 8011d6c:	9a08      	ldr	r2, [sp, #32]
 8011d6e:	eb0b 0a02 	add.w	sl, fp, r2
 8011d72:	f10a 0901 	add.w	r9, sl, #1
 8011d76:	464a      	mov	r2, r9
 8011d78:	2a01      	cmp	r2, #1
 8011d7a:	bfb8      	it	lt
 8011d7c:	2201      	movlt	r2, #1
 8011d7e:	e7db      	b.n	8011d38 <_dtoa_r+0x240>
 8011d80:	2201      	movs	r2, #1
 8011d82:	e7f2      	b.n	8011d6a <_dtoa_r+0x272>
 8011d84:	2401      	movs	r4, #1
 8011d86:	2200      	movs	r2, #0
 8011d88:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8011d8c:	f04f 3aff 	mov.w	sl, #4294967295
 8011d90:	2100      	movs	r1, #0
 8011d92:	46d1      	mov	r9, sl
 8011d94:	2212      	movs	r2, #18
 8011d96:	9108      	str	r1, [sp, #32]
 8011d98:	e7ce      	b.n	8011d38 <_dtoa_r+0x240>
 8011d9a:	2201      	movs	r2, #1
 8011d9c:	9207      	str	r2, [sp, #28]
 8011d9e:	e7f5      	b.n	8011d8c <_dtoa_r+0x294>
 8011da0:	f8dd a020 	ldr.w	sl, [sp, #32]
 8011da4:	46d1      	mov	r9, sl
 8011da6:	4652      	mov	r2, sl
 8011da8:	e7c6      	b.n	8011d38 <_dtoa_r+0x240>
 8011daa:	3101      	adds	r1, #1
 8011dac:	6079      	str	r1, [r7, #4]
 8011dae:	0040      	lsls	r0, r0, #1
 8011db0:	e7c6      	b.n	8011d40 <_dtoa_r+0x248>
 8011db2:	bf00      	nop
 8011db4:	f3af 8000 	nop.w
 8011db8:	636f4361 	.word	0x636f4361
 8011dbc:	3fd287a7 	.word	0x3fd287a7
 8011dc0:	8b60c8b3 	.word	0x8b60c8b3
 8011dc4:	3fc68a28 	.word	0x3fc68a28
 8011dc8:	509f79fb 	.word	0x509f79fb
 8011dcc:	3fd34413 	.word	0x3fd34413
 8011dd0:	08014ec6 	.word	0x08014ec6
 8011dd4:	08014edd 	.word	0x08014edd
 8011dd8:	7ff00000 	.word	0x7ff00000
 8011ddc:	08014ec2 	.word	0x08014ec2
 8011de0:	08014eb9 	.word	0x08014eb9
 8011de4:	08014d3d 	.word	0x08014d3d
 8011de8:	080150b0 	.word	0x080150b0
 8011dec:	08014f38 	.word	0x08014f38
 8011df0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8011df2:	9901      	ldr	r1, [sp, #4]
 8011df4:	6011      	str	r1, [r2, #0]
 8011df6:	f1b9 0f0e 	cmp.w	r9, #14
 8011dfa:	d86c      	bhi.n	8011ed6 <_dtoa_r+0x3de>
 8011dfc:	2c00      	cmp	r4, #0
 8011dfe:	d06a      	beq.n	8011ed6 <_dtoa_r+0x3de>
 8011e00:	f1bb 0f00 	cmp.w	fp, #0
 8011e04:	f340 80a0 	ble.w	8011f48 <_dtoa_r+0x450>
 8011e08:	49c1      	ldr	r1, [pc, #772]	; (8012110 <_dtoa_r+0x618>)
 8011e0a:	f00b 020f 	and.w	r2, fp, #15
 8011e0e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8011e12:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8011e16:	ed92 7b00 	vldr	d7, [r2]
 8011e1a:	ea4f 112b 	mov.w	r1, fp, asr #4
 8011e1e:	f000 8087 	beq.w	8011f30 <_dtoa_r+0x438>
 8011e22:	4abc      	ldr	r2, [pc, #752]	; (8012114 <_dtoa_r+0x61c>)
 8011e24:	ed92 6b08 	vldr	d6, [r2, #32]
 8011e28:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8011e2c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011e30:	f001 010f 	and.w	r1, r1, #15
 8011e34:	2203      	movs	r2, #3
 8011e36:	48b7      	ldr	r0, [pc, #732]	; (8012114 <_dtoa_r+0x61c>)
 8011e38:	2900      	cmp	r1, #0
 8011e3a:	d17b      	bne.n	8011f34 <_dtoa_r+0x43c>
 8011e3c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011e40:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011e44:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011e48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011e4a:	2900      	cmp	r1, #0
 8011e4c:	f000 80a2 	beq.w	8011f94 <_dtoa_r+0x49c>
 8011e50:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011e54:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011e58:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e60:	f140 8098 	bpl.w	8011f94 <_dtoa_r+0x49c>
 8011e64:	f1b9 0f00 	cmp.w	r9, #0
 8011e68:	f000 8094 	beq.w	8011f94 <_dtoa_r+0x49c>
 8011e6c:	f1ba 0f00 	cmp.w	sl, #0
 8011e70:	dd2f      	ble.n	8011ed2 <_dtoa_r+0x3da>
 8011e72:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8011e76:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011e7a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011e7e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8011e82:	3201      	adds	r2, #1
 8011e84:	4650      	mov	r0, sl
 8011e86:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011e8a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8011e8e:	ee07 2a90 	vmov	s15, r2
 8011e92:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011e96:	eea7 5b06 	vfma.f64	d5, d7, d6
 8011e9a:	ee15 4a90 	vmov	r4, s11
 8011e9e:	ec52 1b15 	vmov	r1, r2, d5
 8011ea2:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8011ea6:	2800      	cmp	r0, #0
 8011ea8:	d177      	bne.n	8011f9a <_dtoa_r+0x4a2>
 8011eaa:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8011eae:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011eb2:	ec42 1b17 	vmov	d7, r1, r2
 8011eb6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ebe:	f300 8263 	bgt.w	8012388 <_dtoa_r+0x890>
 8011ec2:	eeb1 7b47 	vneg.f64	d7, d7
 8011ec6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ece:	f100 8258 	bmi.w	8012382 <_dtoa_r+0x88a>
 8011ed2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8011ed6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011ed8:	2a00      	cmp	r2, #0
 8011eda:	f2c0 811d 	blt.w	8012118 <_dtoa_r+0x620>
 8011ede:	f1bb 0f0e 	cmp.w	fp, #14
 8011ee2:	f300 8119 	bgt.w	8012118 <_dtoa_r+0x620>
 8011ee6:	4b8a      	ldr	r3, [pc, #552]	; (8012110 <_dtoa_r+0x618>)
 8011ee8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011eec:	ed93 6b00 	vldr	d6, [r3]
 8011ef0:	9b08      	ldr	r3, [sp, #32]
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	f280 80b7 	bge.w	8012066 <_dtoa_r+0x56e>
 8011ef8:	f1b9 0f00 	cmp.w	r9, #0
 8011efc:	f300 80b3 	bgt.w	8012066 <_dtoa_r+0x56e>
 8011f00:	f040 823f 	bne.w	8012382 <_dtoa_r+0x88a>
 8011f04:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8011f08:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011f0c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011f10:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f18:	464c      	mov	r4, r9
 8011f1a:	464f      	mov	r7, r9
 8011f1c:	f280 8215 	bge.w	801234a <_dtoa_r+0x852>
 8011f20:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011f24:	2331      	movs	r3, #49	; 0x31
 8011f26:	f808 3b01 	strb.w	r3, [r8], #1
 8011f2a:	f10b 0b01 	add.w	fp, fp, #1
 8011f2e:	e211      	b.n	8012354 <_dtoa_r+0x85c>
 8011f30:	2202      	movs	r2, #2
 8011f32:	e780      	b.n	8011e36 <_dtoa_r+0x33e>
 8011f34:	07cc      	lsls	r4, r1, #31
 8011f36:	d504      	bpl.n	8011f42 <_dtoa_r+0x44a>
 8011f38:	ed90 6b00 	vldr	d6, [r0]
 8011f3c:	3201      	adds	r2, #1
 8011f3e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011f42:	1049      	asrs	r1, r1, #1
 8011f44:	3008      	adds	r0, #8
 8011f46:	e777      	b.n	8011e38 <_dtoa_r+0x340>
 8011f48:	d022      	beq.n	8011f90 <_dtoa_r+0x498>
 8011f4a:	f1cb 0100 	rsb	r1, fp, #0
 8011f4e:	4a70      	ldr	r2, [pc, #448]	; (8012110 <_dtoa_r+0x618>)
 8011f50:	f001 000f 	and.w	r0, r1, #15
 8011f54:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8011f58:	ed92 7b00 	vldr	d7, [r2]
 8011f5c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8011f60:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011f64:	486b      	ldr	r0, [pc, #428]	; (8012114 <_dtoa_r+0x61c>)
 8011f66:	1109      	asrs	r1, r1, #4
 8011f68:	2400      	movs	r4, #0
 8011f6a:	2202      	movs	r2, #2
 8011f6c:	b929      	cbnz	r1, 8011f7a <_dtoa_r+0x482>
 8011f6e:	2c00      	cmp	r4, #0
 8011f70:	f43f af6a 	beq.w	8011e48 <_dtoa_r+0x350>
 8011f74:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011f78:	e766      	b.n	8011e48 <_dtoa_r+0x350>
 8011f7a:	07cf      	lsls	r7, r1, #31
 8011f7c:	d505      	bpl.n	8011f8a <_dtoa_r+0x492>
 8011f7e:	ed90 6b00 	vldr	d6, [r0]
 8011f82:	3201      	adds	r2, #1
 8011f84:	2401      	movs	r4, #1
 8011f86:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011f8a:	1049      	asrs	r1, r1, #1
 8011f8c:	3008      	adds	r0, #8
 8011f8e:	e7ed      	b.n	8011f6c <_dtoa_r+0x474>
 8011f90:	2202      	movs	r2, #2
 8011f92:	e759      	b.n	8011e48 <_dtoa_r+0x350>
 8011f94:	465f      	mov	r7, fp
 8011f96:	4648      	mov	r0, r9
 8011f98:	e775      	b.n	8011e86 <_dtoa_r+0x38e>
 8011f9a:	ec42 1b17 	vmov	d7, r1, r2
 8011f9e:	4a5c      	ldr	r2, [pc, #368]	; (8012110 <_dtoa_r+0x618>)
 8011fa0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8011fa4:	ed12 4b02 	vldr	d4, [r2, #-8]
 8011fa8:	9a01      	ldr	r2, [sp, #4]
 8011faa:	1814      	adds	r4, r2, r0
 8011fac:	9a07      	ldr	r2, [sp, #28]
 8011fae:	b352      	cbz	r2, 8012006 <_dtoa_r+0x50e>
 8011fb0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8011fb4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8011fb8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011fbc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8011fc0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8011fc4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011fc8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011fcc:	ee14 2a90 	vmov	r2, s9
 8011fd0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011fd4:	3230      	adds	r2, #48	; 0x30
 8011fd6:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011fda:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fe2:	f808 2b01 	strb.w	r2, [r8], #1
 8011fe6:	d439      	bmi.n	801205c <_dtoa_r+0x564>
 8011fe8:	ee32 5b46 	vsub.f64	d5, d2, d6
 8011fec:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8011ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ff4:	d472      	bmi.n	80120dc <_dtoa_r+0x5e4>
 8011ff6:	45a0      	cmp	r8, r4
 8011ff8:	f43f af6b 	beq.w	8011ed2 <_dtoa_r+0x3da>
 8011ffc:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012000:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012004:	e7e0      	b.n	8011fc8 <_dtoa_r+0x4d0>
 8012006:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801200a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801200e:	4621      	mov	r1, r4
 8012010:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012014:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012018:	ee14 2a90 	vmov	r2, s9
 801201c:	3230      	adds	r2, #48	; 0x30
 801201e:	f808 2b01 	strb.w	r2, [r8], #1
 8012022:	45a0      	cmp	r8, r4
 8012024:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012028:	ee36 6b45 	vsub.f64	d6, d6, d5
 801202c:	d118      	bne.n	8012060 <_dtoa_r+0x568>
 801202e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8012032:	ee37 4b05 	vadd.f64	d4, d7, d5
 8012036:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801203a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801203e:	dc4d      	bgt.n	80120dc <_dtoa_r+0x5e4>
 8012040:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012044:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801204c:	f57f af41 	bpl.w	8011ed2 <_dtoa_r+0x3da>
 8012050:	4688      	mov	r8, r1
 8012052:	3901      	subs	r1, #1
 8012054:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8012058:	2b30      	cmp	r3, #48	; 0x30
 801205a:	d0f9      	beq.n	8012050 <_dtoa_r+0x558>
 801205c:	46bb      	mov	fp, r7
 801205e:	e02a      	b.n	80120b6 <_dtoa_r+0x5be>
 8012060:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012064:	e7d6      	b.n	8012014 <_dtoa_r+0x51c>
 8012066:	ed9d 7b02 	vldr	d7, [sp, #8]
 801206a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801206e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012072:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8012076:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801207a:	ee15 3a10 	vmov	r3, s10
 801207e:	3330      	adds	r3, #48	; 0x30
 8012080:	f808 3b01 	strb.w	r3, [r8], #1
 8012084:	9b01      	ldr	r3, [sp, #4]
 8012086:	eba8 0303 	sub.w	r3, r8, r3
 801208a:	4599      	cmp	r9, r3
 801208c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012090:	eea3 7b46 	vfms.f64	d7, d3, d6
 8012094:	d133      	bne.n	80120fe <_dtoa_r+0x606>
 8012096:	ee37 7b07 	vadd.f64	d7, d7, d7
 801209a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801209e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120a2:	dc1a      	bgt.n	80120da <_dtoa_r+0x5e2>
 80120a4:	eeb4 7b46 	vcmp.f64	d7, d6
 80120a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120ac:	d103      	bne.n	80120b6 <_dtoa_r+0x5be>
 80120ae:	ee15 3a10 	vmov	r3, s10
 80120b2:	07d9      	lsls	r1, r3, #31
 80120b4:	d411      	bmi.n	80120da <_dtoa_r+0x5e2>
 80120b6:	4629      	mov	r1, r5
 80120b8:	4630      	mov	r0, r6
 80120ba:	f001 f87b 	bl	80131b4 <_Bfree>
 80120be:	2300      	movs	r3, #0
 80120c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80120c2:	f888 3000 	strb.w	r3, [r8]
 80120c6:	f10b 0301 	add.w	r3, fp, #1
 80120ca:	6013      	str	r3, [r2, #0]
 80120cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	f43f ad61 	beq.w	8011b96 <_dtoa_r+0x9e>
 80120d4:	f8c3 8000 	str.w	r8, [r3]
 80120d8:	e55d      	b.n	8011b96 <_dtoa_r+0x9e>
 80120da:	465f      	mov	r7, fp
 80120dc:	4643      	mov	r3, r8
 80120de:	4698      	mov	r8, r3
 80120e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80120e4:	2a39      	cmp	r2, #57	; 0x39
 80120e6:	d106      	bne.n	80120f6 <_dtoa_r+0x5fe>
 80120e8:	9a01      	ldr	r2, [sp, #4]
 80120ea:	429a      	cmp	r2, r3
 80120ec:	d1f7      	bne.n	80120de <_dtoa_r+0x5e6>
 80120ee:	9901      	ldr	r1, [sp, #4]
 80120f0:	2230      	movs	r2, #48	; 0x30
 80120f2:	3701      	adds	r7, #1
 80120f4:	700a      	strb	r2, [r1, #0]
 80120f6:	781a      	ldrb	r2, [r3, #0]
 80120f8:	3201      	adds	r2, #1
 80120fa:	701a      	strb	r2, [r3, #0]
 80120fc:	e7ae      	b.n	801205c <_dtoa_r+0x564>
 80120fe:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012102:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801210a:	d1b2      	bne.n	8012072 <_dtoa_r+0x57a>
 801210c:	e7d3      	b.n	80120b6 <_dtoa_r+0x5be>
 801210e:	bf00      	nop
 8012110:	080150b0 	.word	0x080150b0
 8012114:	08015088 	.word	0x08015088
 8012118:	9907      	ldr	r1, [sp, #28]
 801211a:	2900      	cmp	r1, #0
 801211c:	f000 80d0 	beq.w	80122c0 <_dtoa_r+0x7c8>
 8012120:	9906      	ldr	r1, [sp, #24]
 8012122:	2901      	cmp	r1, #1
 8012124:	f300 80b4 	bgt.w	8012290 <_dtoa_r+0x798>
 8012128:	990a      	ldr	r1, [sp, #40]	; 0x28
 801212a:	2900      	cmp	r1, #0
 801212c:	f000 80ac 	beq.w	8012288 <_dtoa_r+0x790>
 8012130:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012134:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012138:	461c      	mov	r4, r3
 801213a:	930a      	str	r3, [sp, #40]	; 0x28
 801213c:	9b04      	ldr	r3, [sp, #16]
 801213e:	4413      	add	r3, r2
 8012140:	9304      	str	r3, [sp, #16]
 8012142:	9b05      	ldr	r3, [sp, #20]
 8012144:	2101      	movs	r1, #1
 8012146:	4413      	add	r3, r2
 8012148:	4630      	mov	r0, r6
 801214a:	9305      	str	r3, [sp, #20]
 801214c:	f001 f934 	bl	80133b8 <__i2b>
 8012150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012152:	4607      	mov	r7, r0
 8012154:	f1b8 0f00 	cmp.w	r8, #0
 8012158:	dd0d      	ble.n	8012176 <_dtoa_r+0x67e>
 801215a:	9a05      	ldr	r2, [sp, #20]
 801215c:	2a00      	cmp	r2, #0
 801215e:	dd0a      	ble.n	8012176 <_dtoa_r+0x67e>
 8012160:	4542      	cmp	r2, r8
 8012162:	9904      	ldr	r1, [sp, #16]
 8012164:	bfa8      	it	ge
 8012166:	4642      	movge	r2, r8
 8012168:	1a89      	subs	r1, r1, r2
 801216a:	9104      	str	r1, [sp, #16]
 801216c:	9905      	ldr	r1, [sp, #20]
 801216e:	eba8 0802 	sub.w	r8, r8, r2
 8012172:	1a8a      	subs	r2, r1, r2
 8012174:	9205      	str	r2, [sp, #20]
 8012176:	b303      	cbz	r3, 80121ba <_dtoa_r+0x6c2>
 8012178:	9a07      	ldr	r2, [sp, #28]
 801217a:	2a00      	cmp	r2, #0
 801217c:	f000 80a5 	beq.w	80122ca <_dtoa_r+0x7d2>
 8012180:	2c00      	cmp	r4, #0
 8012182:	dd13      	ble.n	80121ac <_dtoa_r+0x6b4>
 8012184:	4639      	mov	r1, r7
 8012186:	4622      	mov	r2, r4
 8012188:	4630      	mov	r0, r6
 801218a:	930d      	str	r3, [sp, #52]	; 0x34
 801218c:	f001 f9d4 	bl	8013538 <__pow5mult>
 8012190:	462a      	mov	r2, r5
 8012192:	4601      	mov	r1, r0
 8012194:	4607      	mov	r7, r0
 8012196:	4630      	mov	r0, r6
 8012198:	f001 f924 	bl	80133e4 <__multiply>
 801219c:	4629      	mov	r1, r5
 801219e:	900a      	str	r0, [sp, #40]	; 0x28
 80121a0:	4630      	mov	r0, r6
 80121a2:	f001 f807 	bl	80131b4 <_Bfree>
 80121a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80121a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80121aa:	4615      	mov	r5, r2
 80121ac:	1b1a      	subs	r2, r3, r4
 80121ae:	d004      	beq.n	80121ba <_dtoa_r+0x6c2>
 80121b0:	4629      	mov	r1, r5
 80121b2:	4630      	mov	r0, r6
 80121b4:	f001 f9c0 	bl	8013538 <__pow5mult>
 80121b8:	4605      	mov	r5, r0
 80121ba:	2101      	movs	r1, #1
 80121bc:	4630      	mov	r0, r6
 80121be:	f001 f8fb 	bl	80133b8 <__i2b>
 80121c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	4604      	mov	r4, r0
 80121c8:	f340 8081 	ble.w	80122ce <_dtoa_r+0x7d6>
 80121cc:	461a      	mov	r2, r3
 80121ce:	4601      	mov	r1, r0
 80121d0:	4630      	mov	r0, r6
 80121d2:	f001 f9b1 	bl	8013538 <__pow5mult>
 80121d6:	9b06      	ldr	r3, [sp, #24]
 80121d8:	2b01      	cmp	r3, #1
 80121da:	4604      	mov	r4, r0
 80121dc:	dd7a      	ble.n	80122d4 <_dtoa_r+0x7dc>
 80121de:	2300      	movs	r3, #0
 80121e0:	930a      	str	r3, [sp, #40]	; 0x28
 80121e2:	6922      	ldr	r2, [r4, #16]
 80121e4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80121e8:	6910      	ldr	r0, [r2, #16]
 80121ea:	f001 f895 	bl	8013318 <__hi0bits>
 80121ee:	f1c0 0020 	rsb	r0, r0, #32
 80121f2:	9b05      	ldr	r3, [sp, #20]
 80121f4:	4418      	add	r0, r3
 80121f6:	f010 001f 	ands.w	r0, r0, #31
 80121fa:	f000 808c 	beq.w	8012316 <_dtoa_r+0x81e>
 80121fe:	f1c0 0220 	rsb	r2, r0, #32
 8012202:	2a04      	cmp	r2, #4
 8012204:	f340 8085 	ble.w	8012312 <_dtoa_r+0x81a>
 8012208:	f1c0 001c 	rsb	r0, r0, #28
 801220c:	9b04      	ldr	r3, [sp, #16]
 801220e:	4403      	add	r3, r0
 8012210:	9304      	str	r3, [sp, #16]
 8012212:	9b05      	ldr	r3, [sp, #20]
 8012214:	4403      	add	r3, r0
 8012216:	4480      	add	r8, r0
 8012218:	9305      	str	r3, [sp, #20]
 801221a:	9b04      	ldr	r3, [sp, #16]
 801221c:	2b00      	cmp	r3, #0
 801221e:	dd05      	ble.n	801222c <_dtoa_r+0x734>
 8012220:	4629      	mov	r1, r5
 8012222:	461a      	mov	r2, r3
 8012224:	4630      	mov	r0, r6
 8012226:	f001 f9e1 	bl	80135ec <__lshift>
 801222a:	4605      	mov	r5, r0
 801222c:	9b05      	ldr	r3, [sp, #20]
 801222e:	2b00      	cmp	r3, #0
 8012230:	dd05      	ble.n	801223e <_dtoa_r+0x746>
 8012232:	4621      	mov	r1, r4
 8012234:	461a      	mov	r2, r3
 8012236:	4630      	mov	r0, r6
 8012238:	f001 f9d8 	bl	80135ec <__lshift>
 801223c:	4604      	mov	r4, r0
 801223e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012240:	2b00      	cmp	r3, #0
 8012242:	d06a      	beq.n	801231a <_dtoa_r+0x822>
 8012244:	4621      	mov	r1, r4
 8012246:	4628      	mov	r0, r5
 8012248:	f001 fa40 	bl	80136cc <__mcmp>
 801224c:	2800      	cmp	r0, #0
 801224e:	da64      	bge.n	801231a <_dtoa_r+0x822>
 8012250:	2300      	movs	r3, #0
 8012252:	4629      	mov	r1, r5
 8012254:	220a      	movs	r2, #10
 8012256:	4630      	mov	r0, r6
 8012258:	f000 ffce 	bl	80131f8 <__multadd>
 801225c:	9b07      	ldr	r3, [sp, #28]
 801225e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012262:	4605      	mov	r5, r0
 8012264:	2b00      	cmp	r3, #0
 8012266:	f000 8191 	beq.w	801258c <_dtoa_r+0xa94>
 801226a:	4639      	mov	r1, r7
 801226c:	2300      	movs	r3, #0
 801226e:	220a      	movs	r2, #10
 8012270:	4630      	mov	r0, r6
 8012272:	f000 ffc1 	bl	80131f8 <__multadd>
 8012276:	f1ba 0f00 	cmp.w	sl, #0
 801227a:	4607      	mov	r7, r0
 801227c:	f300 808d 	bgt.w	801239a <_dtoa_r+0x8a2>
 8012280:	9b06      	ldr	r3, [sp, #24]
 8012282:	2b02      	cmp	r3, #2
 8012284:	dc50      	bgt.n	8012328 <_dtoa_r+0x830>
 8012286:	e088      	b.n	801239a <_dtoa_r+0x8a2>
 8012288:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801228a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801228e:	e751      	b.n	8012134 <_dtoa_r+0x63c>
 8012290:	f109 34ff 	add.w	r4, r9, #4294967295
 8012294:	42a3      	cmp	r3, r4
 8012296:	bfbf      	itttt	lt
 8012298:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 801229a:	1ae3      	sublt	r3, r4, r3
 801229c:	18d2      	addlt	r2, r2, r3
 801229e:	9209      	strlt	r2, [sp, #36]	; 0x24
 80122a0:	bfb6      	itet	lt
 80122a2:	4623      	movlt	r3, r4
 80122a4:	1b1c      	subge	r4, r3, r4
 80122a6:	2400      	movlt	r4, #0
 80122a8:	f1b9 0f00 	cmp.w	r9, #0
 80122ac:	bfb5      	itete	lt
 80122ae:	9a04      	ldrlt	r2, [sp, #16]
 80122b0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80122b4:	eba2 0809 	sublt.w	r8, r2, r9
 80122b8:	464a      	movge	r2, r9
 80122ba:	bfb8      	it	lt
 80122bc:	2200      	movlt	r2, #0
 80122be:	e73c      	b.n	801213a <_dtoa_r+0x642>
 80122c0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80122c4:	9f07      	ldr	r7, [sp, #28]
 80122c6:	461c      	mov	r4, r3
 80122c8:	e744      	b.n	8012154 <_dtoa_r+0x65c>
 80122ca:	461a      	mov	r2, r3
 80122cc:	e770      	b.n	80121b0 <_dtoa_r+0x6b8>
 80122ce:	9b06      	ldr	r3, [sp, #24]
 80122d0:	2b01      	cmp	r3, #1
 80122d2:	dc18      	bgt.n	8012306 <_dtoa_r+0x80e>
 80122d4:	9b02      	ldr	r3, [sp, #8]
 80122d6:	b9b3      	cbnz	r3, 8012306 <_dtoa_r+0x80e>
 80122d8:	9b03      	ldr	r3, [sp, #12]
 80122da:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80122de:	b9a2      	cbnz	r2, 801230a <_dtoa_r+0x812>
 80122e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80122e4:	0d12      	lsrs	r2, r2, #20
 80122e6:	0512      	lsls	r2, r2, #20
 80122e8:	b18a      	cbz	r2, 801230e <_dtoa_r+0x816>
 80122ea:	9b04      	ldr	r3, [sp, #16]
 80122ec:	3301      	adds	r3, #1
 80122ee:	9304      	str	r3, [sp, #16]
 80122f0:	9b05      	ldr	r3, [sp, #20]
 80122f2:	3301      	adds	r3, #1
 80122f4:	9305      	str	r3, [sp, #20]
 80122f6:	2301      	movs	r3, #1
 80122f8:	930a      	str	r3, [sp, #40]	; 0x28
 80122fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	f47f af70 	bne.w	80121e2 <_dtoa_r+0x6ea>
 8012302:	2001      	movs	r0, #1
 8012304:	e775      	b.n	80121f2 <_dtoa_r+0x6fa>
 8012306:	2300      	movs	r3, #0
 8012308:	e7f6      	b.n	80122f8 <_dtoa_r+0x800>
 801230a:	9b02      	ldr	r3, [sp, #8]
 801230c:	e7f4      	b.n	80122f8 <_dtoa_r+0x800>
 801230e:	920a      	str	r2, [sp, #40]	; 0x28
 8012310:	e7f3      	b.n	80122fa <_dtoa_r+0x802>
 8012312:	d082      	beq.n	801221a <_dtoa_r+0x722>
 8012314:	4610      	mov	r0, r2
 8012316:	301c      	adds	r0, #28
 8012318:	e778      	b.n	801220c <_dtoa_r+0x714>
 801231a:	f1b9 0f00 	cmp.w	r9, #0
 801231e:	dc37      	bgt.n	8012390 <_dtoa_r+0x898>
 8012320:	9b06      	ldr	r3, [sp, #24]
 8012322:	2b02      	cmp	r3, #2
 8012324:	dd34      	ble.n	8012390 <_dtoa_r+0x898>
 8012326:	46ca      	mov	sl, r9
 8012328:	f1ba 0f00 	cmp.w	sl, #0
 801232c:	d10d      	bne.n	801234a <_dtoa_r+0x852>
 801232e:	4621      	mov	r1, r4
 8012330:	4653      	mov	r3, sl
 8012332:	2205      	movs	r2, #5
 8012334:	4630      	mov	r0, r6
 8012336:	f000 ff5f 	bl	80131f8 <__multadd>
 801233a:	4601      	mov	r1, r0
 801233c:	4604      	mov	r4, r0
 801233e:	4628      	mov	r0, r5
 8012340:	f001 f9c4 	bl	80136cc <__mcmp>
 8012344:	2800      	cmp	r0, #0
 8012346:	f73f adeb 	bgt.w	8011f20 <_dtoa_r+0x428>
 801234a:	9b08      	ldr	r3, [sp, #32]
 801234c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012350:	ea6f 0b03 	mvn.w	fp, r3
 8012354:	f04f 0900 	mov.w	r9, #0
 8012358:	4621      	mov	r1, r4
 801235a:	4630      	mov	r0, r6
 801235c:	f000 ff2a 	bl	80131b4 <_Bfree>
 8012360:	2f00      	cmp	r7, #0
 8012362:	f43f aea8 	beq.w	80120b6 <_dtoa_r+0x5be>
 8012366:	f1b9 0f00 	cmp.w	r9, #0
 801236a:	d005      	beq.n	8012378 <_dtoa_r+0x880>
 801236c:	45b9      	cmp	r9, r7
 801236e:	d003      	beq.n	8012378 <_dtoa_r+0x880>
 8012370:	4649      	mov	r1, r9
 8012372:	4630      	mov	r0, r6
 8012374:	f000 ff1e 	bl	80131b4 <_Bfree>
 8012378:	4639      	mov	r1, r7
 801237a:	4630      	mov	r0, r6
 801237c:	f000 ff1a 	bl	80131b4 <_Bfree>
 8012380:	e699      	b.n	80120b6 <_dtoa_r+0x5be>
 8012382:	2400      	movs	r4, #0
 8012384:	4627      	mov	r7, r4
 8012386:	e7e0      	b.n	801234a <_dtoa_r+0x852>
 8012388:	46bb      	mov	fp, r7
 801238a:	4604      	mov	r4, r0
 801238c:	4607      	mov	r7, r0
 801238e:	e5c7      	b.n	8011f20 <_dtoa_r+0x428>
 8012390:	9b07      	ldr	r3, [sp, #28]
 8012392:	46ca      	mov	sl, r9
 8012394:	2b00      	cmp	r3, #0
 8012396:	f000 8100 	beq.w	801259a <_dtoa_r+0xaa2>
 801239a:	f1b8 0f00 	cmp.w	r8, #0
 801239e:	dd05      	ble.n	80123ac <_dtoa_r+0x8b4>
 80123a0:	4639      	mov	r1, r7
 80123a2:	4642      	mov	r2, r8
 80123a4:	4630      	mov	r0, r6
 80123a6:	f001 f921 	bl	80135ec <__lshift>
 80123aa:	4607      	mov	r7, r0
 80123ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d05d      	beq.n	801246e <_dtoa_r+0x976>
 80123b2:	6879      	ldr	r1, [r7, #4]
 80123b4:	4630      	mov	r0, r6
 80123b6:	f000 febd 	bl	8013134 <_Balloc>
 80123ba:	4680      	mov	r8, r0
 80123bc:	b928      	cbnz	r0, 80123ca <_dtoa_r+0x8d2>
 80123be:	4b82      	ldr	r3, [pc, #520]	; (80125c8 <_dtoa_r+0xad0>)
 80123c0:	4602      	mov	r2, r0
 80123c2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80123c6:	f7ff bbaf 	b.w	8011b28 <_dtoa_r+0x30>
 80123ca:	693a      	ldr	r2, [r7, #16]
 80123cc:	3202      	adds	r2, #2
 80123ce:	0092      	lsls	r2, r2, #2
 80123d0:	f107 010c 	add.w	r1, r7, #12
 80123d4:	300c      	adds	r0, #12
 80123d6:	f7fd fbb9 	bl	800fb4c <memcpy>
 80123da:	2201      	movs	r2, #1
 80123dc:	4641      	mov	r1, r8
 80123de:	4630      	mov	r0, r6
 80123e0:	f001 f904 	bl	80135ec <__lshift>
 80123e4:	9b01      	ldr	r3, [sp, #4]
 80123e6:	3301      	adds	r3, #1
 80123e8:	9304      	str	r3, [sp, #16]
 80123ea:	9b01      	ldr	r3, [sp, #4]
 80123ec:	4453      	add	r3, sl
 80123ee:	9308      	str	r3, [sp, #32]
 80123f0:	9b02      	ldr	r3, [sp, #8]
 80123f2:	f003 0301 	and.w	r3, r3, #1
 80123f6:	46b9      	mov	r9, r7
 80123f8:	9307      	str	r3, [sp, #28]
 80123fa:	4607      	mov	r7, r0
 80123fc:	9b04      	ldr	r3, [sp, #16]
 80123fe:	4621      	mov	r1, r4
 8012400:	3b01      	subs	r3, #1
 8012402:	4628      	mov	r0, r5
 8012404:	9302      	str	r3, [sp, #8]
 8012406:	f7ff faeb 	bl	80119e0 <quorem>
 801240a:	4603      	mov	r3, r0
 801240c:	3330      	adds	r3, #48	; 0x30
 801240e:	9005      	str	r0, [sp, #20]
 8012410:	4649      	mov	r1, r9
 8012412:	4628      	mov	r0, r5
 8012414:	9309      	str	r3, [sp, #36]	; 0x24
 8012416:	f001 f959 	bl	80136cc <__mcmp>
 801241a:	463a      	mov	r2, r7
 801241c:	4682      	mov	sl, r0
 801241e:	4621      	mov	r1, r4
 8012420:	4630      	mov	r0, r6
 8012422:	f001 f96f 	bl	8013704 <__mdiff>
 8012426:	68c2      	ldr	r2, [r0, #12]
 8012428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801242a:	4680      	mov	r8, r0
 801242c:	bb0a      	cbnz	r2, 8012472 <_dtoa_r+0x97a>
 801242e:	4601      	mov	r1, r0
 8012430:	4628      	mov	r0, r5
 8012432:	f001 f94b 	bl	80136cc <__mcmp>
 8012436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012438:	4602      	mov	r2, r0
 801243a:	4641      	mov	r1, r8
 801243c:	4630      	mov	r0, r6
 801243e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8012442:	f000 feb7 	bl	80131b4 <_Bfree>
 8012446:	9b06      	ldr	r3, [sp, #24]
 8012448:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801244a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801244e:	ea43 0102 	orr.w	r1, r3, r2
 8012452:	9b07      	ldr	r3, [sp, #28]
 8012454:	430b      	orrs	r3, r1
 8012456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012458:	d10d      	bne.n	8012476 <_dtoa_r+0x97e>
 801245a:	2b39      	cmp	r3, #57	; 0x39
 801245c:	d029      	beq.n	80124b2 <_dtoa_r+0x9ba>
 801245e:	f1ba 0f00 	cmp.w	sl, #0
 8012462:	dd01      	ble.n	8012468 <_dtoa_r+0x970>
 8012464:	9b05      	ldr	r3, [sp, #20]
 8012466:	3331      	adds	r3, #49	; 0x31
 8012468:	9a02      	ldr	r2, [sp, #8]
 801246a:	7013      	strb	r3, [r2, #0]
 801246c:	e774      	b.n	8012358 <_dtoa_r+0x860>
 801246e:	4638      	mov	r0, r7
 8012470:	e7b8      	b.n	80123e4 <_dtoa_r+0x8ec>
 8012472:	2201      	movs	r2, #1
 8012474:	e7e1      	b.n	801243a <_dtoa_r+0x942>
 8012476:	f1ba 0f00 	cmp.w	sl, #0
 801247a:	db06      	blt.n	801248a <_dtoa_r+0x992>
 801247c:	9906      	ldr	r1, [sp, #24]
 801247e:	ea41 0a0a 	orr.w	sl, r1, sl
 8012482:	9907      	ldr	r1, [sp, #28]
 8012484:	ea5a 0101 	orrs.w	r1, sl, r1
 8012488:	d120      	bne.n	80124cc <_dtoa_r+0x9d4>
 801248a:	2a00      	cmp	r2, #0
 801248c:	ddec      	ble.n	8012468 <_dtoa_r+0x970>
 801248e:	4629      	mov	r1, r5
 8012490:	2201      	movs	r2, #1
 8012492:	4630      	mov	r0, r6
 8012494:	9304      	str	r3, [sp, #16]
 8012496:	f001 f8a9 	bl	80135ec <__lshift>
 801249a:	4621      	mov	r1, r4
 801249c:	4605      	mov	r5, r0
 801249e:	f001 f915 	bl	80136cc <__mcmp>
 80124a2:	2800      	cmp	r0, #0
 80124a4:	9b04      	ldr	r3, [sp, #16]
 80124a6:	dc02      	bgt.n	80124ae <_dtoa_r+0x9b6>
 80124a8:	d1de      	bne.n	8012468 <_dtoa_r+0x970>
 80124aa:	07da      	lsls	r2, r3, #31
 80124ac:	d5dc      	bpl.n	8012468 <_dtoa_r+0x970>
 80124ae:	2b39      	cmp	r3, #57	; 0x39
 80124b0:	d1d8      	bne.n	8012464 <_dtoa_r+0x96c>
 80124b2:	9a02      	ldr	r2, [sp, #8]
 80124b4:	2339      	movs	r3, #57	; 0x39
 80124b6:	7013      	strb	r3, [r2, #0]
 80124b8:	4643      	mov	r3, r8
 80124ba:	4698      	mov	r8, r3
 80124bc:	3b01      	subs	r3, #1
 80124be:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80124c2:	2a39      	cmp	r2, #57	; 0x39
 80124c4:	d051      	beq.n	801256a <_dtoa_r+0xa72>
 80124c6:	3201      	adds	r2, #1
 80124c8:	701a      	strb	r2, [r3, #0]
 80124ca:	e745      	b.n	8012358 <_dtoa_r+0x860>
 80124cc:	2a00      	cmp	r2, #0
 80124ce:	dd03      	ble.n	80124d8 <_dtoa_r+0x9e0>
 80124d0:	2b39      	cmp	r3, #57	; 0x39
 80124d2:	d0ee      	beq.n	80124b2 <_dtoa_r+0x9ba>
 80124d4:	3301      	adds	r3, #1
 80124d6:	e7c7      	b.n	8012468 <_dtoa_r+0x970>
 80124d8:	9a04      	ldr	r2, [sp, #16]
 80124da:	9908      	ldr	r1, [sp, #32]
 80124dc:	f802 3c01 	strb.w	r3, [r2, #-1]
 80124e0:	428a      	cmp	r2, r1
 80124e2:	d02b      	beq.n	801253c <_dtoa_r+0xa44>
 80124e4:	4629      	mov	r1, r5
 80124e6:	2300      	movs	r3, #0
 80124e8:	220a      	movs	r2, #10
 80124ea:	4630      	mov	r0, r6
 80124ec:	f000 fe84 	bl	80131f8 <__multadd>
 80124f0:	45b9      	cmp	r9, r7
 80124f2:	4605      	mov	r5, r0
 80124f4:	f04f 0300 	mov.w	r3, #0
 80124f8:	f04f 020a 	mov.w	r2, #10
 80124fc:	4649      	mov	r1, r9
 80124fe:	4630      	mov	r0, r6
 8012500:	d107      	bne.n	8012512 <_dtoa_r+0xa1a>
 8012502:	f000 fe79 	bl	80131f8 <__multadd>
 8012506:	4681      	mov	r9, r0
 8012508:	4607      	mov	r7, r0
 801250a:	9b04      	ldr	r3, [sp, #16]
 801250c:	3301      	adds	r3, #1
 801250e:	9304      	str	r3, [sp, #16]
 8012510:	e774      	b.n	80123fc <_dtoa_r+0x904>
 8012512:	f000 fe71 	bl	80131f8 <__multadd>
 8012516:	4639      	mov	r1, r7
 8012518:	4681      	mov	r9, r0
 801251a:	2300      	movs	r3, #0
 801251c:	220a      	movs	r2, #10
 801251e:	4630      	mov	r0, r6
 8012520:	f000 fe6a 	bl	80131f8 <__multadd>
 8012524:	4607      	mov	r7, r0
 8012526:	e7f0      	b.n	801250a <_dtoa_r+0xa12>
 8012528:	f1ba 0f00 	cmp.w	sl, #0
 801252c:	9a01      	ldr	r2, [sp, #4]
 801252e:	bfcc      	ite	gt
 8012530:	46d0      	movgt	r8, sl
 8012532:	f04f 0801 	movle.w	r8, #1
 8012536:	4490      	add	r8, r2
 8012538:	f04f 0900 	mov.w	r9, #0
 801253c:	4629      	mov	r1, r5
 801253e:	2201      	movs	r2, #1
 8012540:	4630      	mov	r0, r6
 8012542:	9302      	str	r3, [sp, #8]
 8012544:	f001 f852 	bl	80135ec <__lshift>
 8012548:	4621      	mov	r1, r4
 801254a:	4605      	mov	r5, r0
 801254c:	f001 f8be 	bl	80136cc <__mcmp>
 8012550:	2800      	cmp	r0, #0
 8012552:	dcb1      	bgt.n	80124b8 <_dtoa_r+0x9c0>
 8012554:	d102      	bne.n	801255c <_dtoa_r+0xa64>
 8012556:	9b02      	ldr	r3, [sp, #8]
 8012558:	07db      	lsls	r3, r3, #31
 801255a:	d4ad      	bmi.n	80124b8 <_dtoa_r+0x9c0>
 801255c:	4643      	mov	r3, r8
 801255e:	4698      	mov	r8, r3
 8012560:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012564:	2a30      	cmp	r2, #48	; 0x30
 8012566:	d0fa      	beq.n	801255e <_dtoa_r+0xa66>
 8012568:	e6f6      	b.n	8012358 <_dtoa_r+0x860>
 801256a:	9a01      	ldr	r2, [sp, #4]
 801256c:	429a      	cmp	r2, r3
 801256e:	d1a4      	bne.n	80124ba <_dtoa_r+0x9c2>
 8012570:	f10b 0b01 	add.w	fp, fp, #1
 8012574:	2331      	movs	r3, #49	; 0x31
 8012576:	e778      	b.n	801246a <_dtoa_r+0x972>
 8012578:	4b14      	ldr	r3, [pc, #80]	; (80125cc <_dtoa_r+0xad4>)
 801257a:	f7ff bb27 	b.w	8011bcc <_dtoa_r+0xd4>
 801257e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012580:	2b00      	cmp	r3, #0
 8012582:	f47f ab03 	bne.w	8011b8c <_dtoa_r+0x94>
 8012586:	4b12      	ldr	r3, [pc, #72]	; (80125d0 <_dtoa_r+0xad8>)
 8012588:	f7ff bb20 	b.w	8011bcc <_dtoa_r+0xd4>
 801258c:	f1ba 0f00 	cmp.w	sl, #0
 8012590:	dc03      	bgt.n	801259a <_dtoa_r+0xaa2>
 8012592:	9b06      	ldr	r3, [sp, #24]
 8012594:	2b02      	cmp	r3, #2
 8012596:	f73f aec7 	bgt.w	8012328 <_dtoa_r+0x830>
 801259a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801259e:	4621      	mov	r1, r4
 80125a0:	4628      	mov	r0, r5
 80125a2:	f7ff fa1d 	bl	80119e0 <quorem>
 80125a6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80125aa:	f808 3b01 	strb.w	r3, [r8], #1
 80125ae:	9a01      	ldr	r2, [sp, #4]
 80125b0:	eba8 0202 	sub.w	r2, r8, r2
 80125b4:	4592      	cmp	sl, r2
 80125b6:	ddb7      	ble.n	8012528 <_dtoa_r+0xa30>
 80125b8:	4629      	mov	r1, r5
 80125ba:	2300      	movs	r3, #0
 80125bc:	220a      	movs	r2, #10
 80125be:	4630      	mov	r0, r6
 80125c0:	f000 fe1a 	bl	80131f8 <__multadd>
 80125c4:	4605      	mov	r5, r0
 80125c6:	e7ea      	b.n	801259e <_dtoa_r+0xaa6>
 80125c8:	08014f38 	.word	0x08014f38
 80125cc:	08014d3c 	.word	0x08014d3c
 80125d0:	08014eb9 	.word	0x08014eb9

080125d4 <__sflush_r>:
 80125d4:	898a      	ldrh	r2, [r1, #12]
 80125d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125da:	4605      	mov	r5, r0
 80125dc:	0710      	lsls	r0, r2, #28
 80125de:	460c      	mov	r4, r1
 80125e0:	d458      	bmi.n	8012694 <__sflush_r+0xc0>
 80125e2:	684b      	ldr	r3, [r1, #4]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	dc05      	bgt.n	80125f4 <__sflush_r+0x20>
 80125e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	dc02      	bgt.n	80125f4 <__sflush_r+0x20>
 80125ee:	2000      	movs	r0, #0
 80125f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80125f6:	2e00      	cmp	r6, #0
 80125f8:	d0f9      	beq.n	80125ee <__sflush_r+0x1a>
 80125fa:	2300      	movs	r3, #0
 80125fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012600:	682f      	ldr	r7, [r5, #0]
 8012602:	602b      	str	r3, [r5, #0]
 8012604:	d032      	beq.n	801266c <__sflush_r+0x98>
 8012606:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012608:	89a3      	ldrh	r3, [r4, #12]
 801260a:	075a      	lsls	r2, r3, #29
 801260c:	d505      	bpl.n	801261a <__sflush_r+0x46>
 801260e:	6863      	ldr	r3, [r4, #4]
 8012610:	1ac0      	subs	r0, r0, r3
 8012612:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012614:	b10b      	cbz	r3, 801261a <__sflush_r+0x46>
 8012616:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012618:	1ac0      	subs	r0, r0, r3
 801261a:	2300      	movs	r3, #0
 801261c:	4602      	mov	r2, r0
 801261e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012620:	6a21      	ldr	r1, [r4, #32]
 8012622:	4628      	mov	r0, r5
 8012624:	47b0      	blx	r6
 8012626:	1c43      	adds	r3, r0, #1
 8012628:	89a3      	ldrh	r3, [r4, #12]
 801262a:	d106      	bne.n	801263a <__sflush_r+0x66>
 801262c:	6829      	ldr	r1, [r5, #0]
 801262e:	291d      	cmp	r1, #29
 8012630:	d82c      	bhi.n	801268c <__sflush_r+0xb8>
 8012632:	4a2a      	ldr	r2, [pc, #168]	; (80126dc <__sflush_r+0x108>)
 8012634:	40ca      	lsrs	r2, r1
 8012636:	07d6      	lsls	r6, r2, #31
 8012638:	d528      	bpl.n	801268c <__sflush_r+0xb8>
 801263a:	2200      	movs	r2, #0
 801263c:	6062      	str	r2, [r4, #4]
 801263e:	04d9      	lsls	r1, r3, #19
 8012640:	6922      	ldr	r2, [r4, #16]
 8012642:	6022      	str	r2, [r4, #0]
 8012644:	d504      	bpl.n	8012650 <__sflush_r+0x7c>
 8012646:	1c42      	adds	r2, r0, #1
 8012648:	d101      	bne.n	801264e <__sflush_r+0x7a>
 801264a:	682b      	ldr	r3, [r5, #0]
 801264c:	b903      	cbnz	r3, 8012650 <__sflush_r+0x7c>
 801264e:	6560      	str	r0, [r4, #84]	; 0x54
 8012650:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012652:	602f      	str	r7, [r5, #0]
 8012654:	2900      	cmp	r1, #0
 8012656:	d0ca      	beq.n	80125ee <__sflush_r+0x1a>
 8012658:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801265c:	4299      	cmp	r1, r3
 801265e:	d002      	beq.n	8012666 <__sflush_r+0x92>
 8012660:	4628      	mov	r0, r5
 8012662:	f7fd fa89 	bl	800fb78 <_free_r>
 8012666:	2000      	movs	r0, #0
 8012668:	6360      	str	r0, [r4, #52]	; 0x34
 801266a:	e7c1      	b.n	80125f0 <__sflush_r+0x1c>
 801266c:	6a21      	ldr	r1, [r4, #32]
 801266e:	2301      	movs	r3, #1
 8012670:	4628      	mov	r0, r5
 8012672:	47b0      	blx	r6
 8012674:	1c41      	adds	r1, r0, #1
 8012676:	d1c7      	bne.n	8012608 <__sflush_r+0x34>
 8012678:	682b      	ldr	r3, [r5, #0]
 801267a:	2b00      	cmp	r3, #0
 801267c:	d0c4      	beq.n	8012608 <__sflush_r+0x34>
 801267e:	2b1d      	cmp	r3, #29
 8012680:	d001      	beq.n	8012686 <__sflush_r+0xb2>
 8012682:	2b16      	cmp	r3, #22
 8012684:	d101      	bne.n	801268a <__sflush_r+0xb6>
 8012686:	602f      	str	r7, [r5, #0]
 8012688:	e7b1      	b.n	80125ee <__sflush_r+0x1a>
 801268a:	89a3      	ldrh	r3, [r4, #12]
 801268c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012690:	81a3      	strh	r3, [r4, #12]
 8012692:	e7ad      	b.n	80125f0 <__sflush_r+0x1c>
 8012694:	690f      	ldr	r7, [r1, #16]
 8012696:	2f00      	cmp	r7, #0
 8012698:	d0a9      	beq.n	80125ee <__sflush_r+0x1a>
 801269a:	0793      	lsls	r3, r2, #30
 801269c:	680e      	ldr	r6, [r1, #0]
 801269e:	bf08      	it	eq
 80126a0:	694b      	ldreq	r3, [r1, #20]
 80126a2:	600f      	str	r7, [r1, #0]
 80126a4:	bf18      	it	ne
 80126a6:	2300      	movne	r3, #0
 80126a8:	eba6 0807 	sub.w	r8, r6, r7
 80126ac:	608b      	str	r3, [r1, #8]
 80126ae:	f1b8 0f00 	cmp.w	r8, #0
 80126b2:	dd9c      	ble.n	80125ee <__sflush_r+0x1a>
 80126b4:	6a21      	ldr	r1, [r4, #32]
 80126b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80126b8:	4643      	mov	r3, r8
 80126ba:	463a      	mov	r2, r7
 80126bc:	4628      	mov	r0, r5
 80126be:	47b0      	blx	r6
 80126c0:	2800      	cmp	r0, #0
 80126c2:	dc06      	bgt.n	80126d2 <__sflush_r+0xfe>
 80126c4:	89a3      	ldrh	r3, [r4, #12]
 80126c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80126ca:	81a3      	strh	r3, [r4, #12]
 80126cc:	f04f 30ff 	mov.w	r0, #4294967295
 80126d0:	e78e      	b.n	80125f0 <__sflush_r+0x1c>
 80126d2:	4407      	add	r7, r0
 80126d4:	eba8 0800 	sub.w	r8, r8, r0
 80126d8:	e7e9      	b.n	80126ae <__sflush_r+0xda>
 80126da:	bf00      	nop
 80126dc:	20400001 	.word	0x20400001

080126e0 <_fflush_r>:
 80126e0:	b538      	push	{r3, r4, r5, lr}
 80126e2:	690b      	ldr	r3, [r1, #16]
 80126e4:	4605      	mov	r5, r0
 80126e6:	460c      	mov	r4, r1
 80126e8:	b913      	cbnz	r3, 80126f0 <_fflush_r+0x10>
 80126ea:	2500      	movs	r5, #0
 80126ec:	4628      	mov	r0, r5
 80126ee:	bd38      	pop	{r3, r4, r5, pc}
 80126f0:	b118      	cbz	r0, 80126fa <_fflush_r+0x1a>
 80126f2:	6983      	ldr	r3, [r0, #24]
 80126f4:	b90b      	cbnz	r3, 80126fa <_fflush_r+0x1a>
 80126f6:	f000 f887 	bl	8012808 <__sinit>
 80126fa:	4b14      	ldr	r3, [pc, #80]	; (801274c <_fflush_r+0x6c>)
 80126fc:	429c      	cmp	r4, r3
 80126fe:	d11b      	bne.n	8012738 <_fflush_r+0x58>
 8012700:	686c      	ldr	r4, [r5, #4]
 8012702:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012706:	2b00      	cmp	r3, #0
 8012708:	d0ef      	beq.n	80126ea <_fflush_r+0xa>
 801270a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801270c:	07d0      	lsls	r0, r2, #31
 801270e:	d404      	bmi.n	801271a <_fflush_r+0x3a>
 8012710:	0599      	lsls	r1, r3, #22
 8012712:	d402      	bmi.n	801271a <_fflush_r+0x3a>
 8012714:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012716:	f000 fc88 	bl	801302a <__retarget_lock_acquire_recursive>
 801271a:	4628      	mov	r0, r5
 801271c:	4621      	mov	r1, r4
 801271e:	f7ff ff59 	bl	80125d4 <__sflush_r>
 8012722:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012724:	07da      	lsls	r2, r3, #31
 8012726:	4605      	mov	r5, r0
 8012728:	d4e0      	bmi.n	80126ec <_fflush_r+0xc>
 801272a:	89a3      	ldrh	r3, [r4, #12]
 801272c:	059b      	lsls	r3, r3, #22
 801272e:	d4dd      	bmi.n	80126ec <_fflush_r+0xc>
 8012730:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012732:	f000 fc7b 	bl	801302c <__retarget_lock_release_recursive>
 8012736:	e7d9      	b.n	80126ec <_fflush_r+0xc>
 8012738:	4b05      	ldr	r3, [pc, #20]	; (8012750 <_fflush_r+0x70>)
 801273a:	429c      	cmp	r4, r3
 801273c:	d101      	bne.n	8012742 <_fflush_r+0x62>
 801273e:	68ac      	ldr	r4, [r5, #8]
 8012740:	e7df      	b.n	8012702 <_fflush_r+0x22>
 8012742:	4b04      	ldr	r3, [pc, #16]	; (8012754 <_fflush_r+0x74>)
 8012744:	429c      	cmp	r4, r3
 8012746:	bf08      	it	eq
 8012748:	68ec      	ldreq	r4, [r5, #12]
 801274a:	e7da      	b.n	8012702 <_fflush_r+0x22>
 801274c:	08014f6c 	.word	0x08014f6c
 8012750:	08014f8c 	.word	0x08014f8c
 8012754:	08014f4c 	.word	0x08014f4c

08012758 <std>:
 8012758:	2300      	movs	r3, #0
 801275a:	b510      	push	{r4, lr}
 801275c:	4604      	mov	r4, r0
 801275e:	e9c0 3300 	strd	r3, r3, [r0]
 8012762:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012766:	6083      	str	r3, [r0, #8]
 8012768:	8181      	strh	r1, [r0, #12]
 801276a:	6643      	str	r3, [r0, #100]	; 0x64
 801276c:	81c2      	strh	r2, [r0, #14]
 801276e:	6183      	str	r3, [r0, #24]
 8012770:	4619      	mov	r1, r3
 8012772:	2208      	movs	r2, #8
 8012774:	305c      	adds	r0, #92	; 0x5c
 8012776:	f7fd f9f7 	bl	800fb68 <memset>
 801277a:	4b05      	ldr	r3, [pc, #20]	; (8012790 <std+0x38>)
 801277c:	6263      	str	r3, [r4, #36]	; 0x24
 801277e:	4b05      	ldr	r3, [pc, #20]	; (8012794 <std+0x3c>)
 8012780:	62a3      	str	r3, [r4, #40]	; 0x28
 8012782:	4b05      	ldr	r3, [pc, #20]	; (8012798 <std+0x40>)
 8012784:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012786:	4b05      	ldr	r3, [pc, #20]	; (801279c <std+0x44>)
 8012788:	6224      	str	r4, [r4, #32]
 801278a:	6323      	str	r3, [r4, #48]	; 0x30
 801278c:	bd10      	pop	{r4, pc}
 801278e:	bf00      	nop
 8012790:	080140e9 	.word	0x080140e9
 8012794:	0801410b 	.word	0x0801410b
 8012798:	08014143 	.word	0x08014143
 801279c:	08014167 	.word	0x08014167

080127a0 <_cleanup_r>:
 80127a0:	4901      	ldr	r1, [pc, #4]	; (80127a8 <_cleanup_r+0x8>)
 80127a2:	f000 b8af 	b.w	8012904 <_fwalk_reent>
 80127a6:	bf00      	nop
 80127a8:	080126e1 	.word	0x080126e1

080127ac <__sfmoreglue>:
 80127ac:	b570      	push	{r4, r5, r6, lr}
 80127ae:	2268      	movs	r2, #104	; 0x68
 80127b0:	1e4d      	subs	r5, r1, #1
 80127b2:	4355      	muls	r5, r2
 80127b4:	460e      	mov	r6, r1
 80127b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80127ba:	f7fd fa49 	bl	800fc50 <_malloc_r>
 80127be:	4604      	mov	r4, r0
 80127c0:	b140      	cbz	r0, 80127d4 <__sfmoreglue+0x28>
 80127c2:	2100      	movs	r1, #0
 80127c4:	e9c0 1600 	strd	r1, r6, [r0]
 80127c8:	300c      	adds	r0, #12
 80127ca:	60a0      	str	r0, [r4, #8]
 80127cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80127d0:	f7fd f9ca 	bl	800fb68 <memset>
 80127d4:	4620      	mov	r0, r4
 80127d6:	bd70      	pop	{r4, r5, r6, pc}

080127d8 <__sfp_lock_acquire>:
 80127d8:	4801      	ldr	r0, [pc, #4]	; (80127e0 <__sfp_lock_acquire+0x8>)
 80127da:	f000 bc26 	b.w	801302a <__retarget_lock_acquire_recursive>
 80127de:	bf00      	nop
 80127e0:	20002e55 	.word	0x20002e55

080127e4 <__sfp_lock_release>:
 80127e4:	4801      	ldr	r0, [pc, #4]	; (80127ec <__sfp_lock_release+0x8>)
 80127e6:	f000 bc21 	b.w	801302c <__retarget_lock_release_recursive>
 80127ea:	bf00      	nop
 80127ec:	20002e55 	.word	0x20002e55

080127f0 <__sinit_lock_acquire>:
 80127f0:	4801      	ldr	r0, [pc, #4]	; (80127f8 <__sinit_lock_acquire+0x8>)
 80127f2:	f000 bc1a 	b.w	801302a <__retarget_lock_acquire_recursive>
 80127f6:	bf00      	nop
 80127f8:	20002e56 	.word	0x20002e56

080127fc <__sinit_lock_release>:
 80127fc:	4801      	ldr	r0, [pc, #4]	; (8012804 <__sinit_lock_release+0x8>)
 80127fe:	f000 bc15 	b.w	801302c <__retarget_lock_release_recursive>
 8012802:	bf00      	nop
 8012804:	20002e56 	.word	0x20002e56

08012808 <__sinit>:
 8012808:	b510      	push	{r4, lr}
 801280a:	4604      	mov	r4, r0
 801280c:	f7ff fff0 	bl	80127f0 <__sinit_lock_acquire>
 8012810:	69a3      	ldr	r3, [r4, #24]
 8012812:	b11b      	cbz	r3, 801281c <__sinit+0x14>
 8012814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012818:	f7ff bff0 	b.w	80127fc <__sinit_lock_release>
 801281c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012820:	6523      	str	r3, [r4, #80]	; 0x50
 8012822:	4b13      	ldr	r3, [pc, #76]	; (8012870 <__sinit+0x68>)
 8012824:	4a13      	ldr	r2, [pc, #76]	; (8012874 <__sinit+0x6c>)
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	62a2      	str	r2, [r4, #40]	; 0x28
 801282a:	42a3      	cmp	r3, r4
 801282c:	bf04      	itt	eq
 801282e:	2301      	moveq	r3, #1
 8012830:	61a3      	streq	r3, [r4, #24]
 8012832:	4620      	mov	r0, r4
 8012834:	f000 f820 	bl	8012878 <__sfp>
 8012838:	6060      	str	r0, [r4, #4]
 801283a:	4620      	mov	r0, r4
 801283c:	f000 f81c 	bl	8012878 <__sfp>
 8012840:	60a0      	str	r0, [r4, #8]
 8012842:	4620      	mov	r0, r4
 8012844:	f000 f818 	bl	8012878 <__sfp>
 8012848:	2200      	movs	r2, #0
 801284a:	60e0      	str	r0, [r4, #12]
 801284c:	2104      	movs	r1, #4
 801284e:	6860      	ldr	r0, [r4, #4]
 8012850:	f7ff ff82 	bl	8012758 <std>
 8012854:	68a0      	ldr	r0, [r4, #8]
 8012856:	2201      	movs	r2, #1
 8012858:	2109      	movs	r1, #9
 801285a:	f7ff ff7d 	bl	8012758 <std>
 801285e:	68e0      	ldr	r0, [r4, #12]
 8012860:	2202      	movs	r2, #2
 8012862:	2112      	movs	r1, #18
 8012864:	f7ff ff78 	bl	8012758 <std>
 8012868:	2301      	movs	r3, #1
 801286a:	61a3      	str	r3, [r4, #24]
 801286c:	e7d2      	b.n	8012814 <__sinit+0xc>
 801286e:	bf00      	nop
 8012870:	08014d28 	.word	0x08014d28
 8012874:	080127a1 	.word	0x080127a1

08012878 <__sfp>:
 8012878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801287a:	4607      	mov	r7, r0
 801287c:	f7ff ffac 	bl	80127d8 <__sfp_lock_acquire>
 8012880:	4b1e      	ldr	r3, [pc, #120]	; (80128fc <__sfp+0x84>)
 8012882:	681e      	ldr	r6, [r3, #0]
 8012884:	69b3      	ldr	r3, [r6, #24]
 8012886:	b913      	cbnz	r3, 801288e <__sfp+0x16>
 8012888:	4630      	mov	r0, r6
 801288a:	f7ff ffbd 	bl	8012808 <__sinit>
 801288e:	3648      	adds	r6, #72	; 0x48
 8012890:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012894:	3b01      	subs	r3, #1
 8012896:	d503      	bpl.n	80128a0 <__sfp+0x28>
 8012898:	6833      	ldr	r3, [r6, #0]
 801289a:	b30b      	cbz	r3, 80128e0 <__sfp+0x68>
 801289c:	6836      	ldr	r6, [r6, #0]
 801289e:	e7f7      	b.n	8012890 <__sfp+0x18>
 80128a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80128a4:	b9d5      	cbnz	r5, 80128dc <__sfp+0x64>
 80128a6:	4b16      	ldr	r3, [pc, #88]	; (8012900 <__sfp+0x88>)
 80128a8:	60e3      	str	r3, [r4, #12]
 80128aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80128ae:	6665      	str	r5, [r4, #100]	; 0x64
 80128b0:	f000 fbba 	bl	8013028 <__retarget_lock_init_recursive>
 80128b4:	f7ff ff96 	bl	80127e4 <__sfp_lock_release>
 80128b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80128bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80128c0:	6025      	str	r5, [r4, #0]
 80128c2:	61a5      	str	r5, [r4, #24]
 80128c4:	2208      	movs	r2, #8
 80128c6:	4629      	mov	r1, r5
 80128c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80128cc:	f7fd f94c 	bl	800fb68 <memset>
 80128d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80128d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80128d8:	4620      	mov	r0, r4
 80128da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80128dc:	3468      	adds	r4, #104	; 0x68
 80128de:	e7d9      	b.n	8012894 <__sfp+0x1c>
 80128e0:	2104      	movs	r1, #4
 80128e2:	4638      	mov	r0, r7
 80128e4:	f7ff ff62 	bl	80127ac <__sfmoreglue>
 80128e8:	4604      	mov	r4, r0
 80128ea:	6030      	str	r0, [r6, #0]
 80128ec:	2800      	cmp	r0, #0
 80128ee:	d1d5      	bne.n	801289c <__sfp+0x24>
 80128f0:	f7ff ff78 	bl	80127e4 <__sfp_lock_release>
 80128f4:	230c      	movs	r3, #12
 80128f6:	603b      	str	r3, [r7, #0]
 80128f8:	e7ee      	b.n	80128d8 <__sfp+0x60>
 80128fa:	bf00      	nop
 80128fc:	08014d28 	.word	0x08014d28
 8012900:	ffff0001 	.word	0xffff0001

08012904 <_fwalk_reent>:
 8012904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012908:	4606      	mov	r6, r0
 801290a:	4688      	mov	r8, r1
 801290c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012910:	2700      	movs	r7, #0
 8012912:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012916:	f1b9 0901 	subs.w	r9, r9, #1
 801291a:	d505      	bpl.n	8012928 <_fwalk_reent+0x24>
 801291c:	6824      	ldr	r4, [r4, #0]
 801291e:	2c00      	cmp	r4, #0
 8012920:	d1f7      	bne.n	8012912 <_fwalk_reent+0xe>
 8012922:	4638      	mov	r0, r7
 8012924:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012928:	89ab      	ldrh	r3, [r5, #12]
 801292a:	2b01      	cmp	r3, #1
 801292c:	d907      	bls.n	801293e <_fwalk_reent+0x3a>
 801292e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012932:	3301      	adds	r3, #1
 8012934:	d003      	beq.n	801293e <_fwalk_reent+0x3a>
 8012936:	4629      	mov	r1, r5
 8012938:	4630      	mov	r0, r6
 801293a:	47c0      	blx	r8
 801293c:	4307      	orrs	r7, r0
 801293e:	3568      	adds	r5, #104	; 0x68
 8012940:	e7e9      	b.n	8012916 <_fwalk_reent+0x12>

08012942 <rshift>:
 8012942:	6903      	ldr	r3, [r0, #16]
 8012944:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012948:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801294c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012950:	f100 0414 	add.w	r4, r0, #20
 8012954:	dd45      	ble.n	80129e2 <rshift+0xa0>
 8012956:	f011 011f 	ands.w	r1, r1, #31
 801295a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801295e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012962:	d10c      	bne.n	801297e <rshift+0x3c>
 8012964:	f100 0710 	add.w	r7, r0, #16
 8012968:	4629      	mov	r1, r5
 801296a:	42b1      	cmp	r1, r6
 801296c:	d334      	bcc.n	80129d8 <rshift+0x96>
 801296e:	1a9b      	subs	r3, r3, r2
 8012970:	009b      	lsls	r3, r3, #2
 8012972:	1eea      	subs	r2, r5, #3
 8012974:	4296      	cmp	r6, r2
 8012976:	bf38      	it	cc
 8012978:	2300      	movcc	r3, #0
 801297a:	4423      	add	r3, r4
 801297c:	e015      	b.n	80129aa <rshift+0x68>
 801297e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012982:	f1c1 0820 	rsb	r8, r1, #32
 8012986:	40cf      	lsrs	r7, r1
 8012988:	f105 0e04 	add.w	lr, r5, #4
 801298c:	46a1      	mov	r9, r4
 801298e:	4576      	cmp	r6, lr
 8012990:	46f4      	mov	ip, lr
 8012992:	d815      	bhi.n	80129c0 <rshift+0x7e>
 8012994:	1a9a      	subs	r2, r3, r2
 8012996:	0092      	lsls	r2, r2, #2
 8012998:	3a04      	subs	r2, #4
 801299a:	3501      	adds	r5, #1
 801299c:	42ae      	cmp	r6, r5
 801299e:	bf38      	it	cc
 80129a0:	2200      	movcc	r2, #0
 80129a2:	18a3      	adds	r3, r4, r2
 80129a4:	50a7      	str	r7, [r4, r2]
 80129a6:	b107      	cbz	r7, 80129aa <rshift+0x68>
 80129a8:	3304      	adds	r3, #4
 80129aa:	1b1a      	subs	r2, r3, r4
 80129ac:	42a3      	cmp	r3, r4
 80129ae:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80129b2:	bf08      	it	eq
 80129b4:	2300      	moveq	r3, #0
 80129b6:	6102      	str	r2, [r0, #16]
 80129b8:	bf08      	it	eq
 80129ba:	6143      	streq	r3, [r0, #20]
 80129bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80129c0:	f8dc c000 	ldr.w	ip, [ip]
 80129c4:	fa0c fc08 	lsl.w	ip, ip, r8
 80129c8:	ea4c 0707 	orr.w	r7, ip, r7
 80129cc:	f849 7b04 	str.w	r7, [r9], #4
 80129d0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80129d4:	40cf      	lsrs	r7, r1
 80129d6:	e7da      	b.n	801298e <rshift+0x4c>
 80129d8:	f851 cb04 	ldr.w	ip, [r1], #4
 80129dc:	f847 cf04 	str.w	ip, [r7, #4]!
 80129e0:	e7c3      	b.n	801296a <rshift+0x28>
 80129e2:	4623      	mov	r3, r4
 80129e4:	e7e1      	b.n	80129aa <rshift+0x68>

080129e6 <__hexdig_fun>:
 80129e6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80129ea:	2b09      	cmp	r3, #9
 80129ec:	d802      	bhi.n	80129f4 <__hexdig_fun+0xe>
 80129ee:	3820      	subs	r0, #32
 80129f0:	b2c0      	uxtb	r0, r0
 80129f2:	4770      	bx	lr
 80129f4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80129f8:	2b05      	cmp	r3, #5
 80129fa:	d801      	bhi.n	8012a00 <__hexdig_fun+0x1a>
 80129fc:	3847      	subs	r0, #71	; 0x47
 80129fe:	e7f7      	b.n	80129f0 <__hexdig_fun+0xa>
 8012a00:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8012a04:	2b05      	cmp	r3, #5
 8012a06:	d801      	bhi.n	8012a0c <__hexdig_fun+0x26>
 8012a08:	3827      	subs	r0, #39	; 0x27
 8012a0a:	e7f1      	b.n	80129f0 <__hexdig_fun+0xa>
 8012a0c:	2000      	movs	r0, #0
 8012a0e:	4770      	bx	lr

08012a10 <__gethex>:
 8012a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a14:	ed2d 8b02 	vpush	{d8}
 8012a18:	b089      	sub	sp, #36	; 0x24
 8012a1a:	ee08 0a10 	vmov	s16, r0
 8012a1e:	9304      	str	r3, [sp, #16]
 8012a20:	4bb4      	ldr	r3, [pc, #720]	; (8012cf4 <__gethex+0x2e4>)
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	9301      	str	r3, [sp, #4]
 8012a26:	4618      	mov	r0, r3
 8012a28:	468b      	mov	fp, r1
 8012a2a:	4690      	mov	r8, r2
 8012a2c:	f7ed fc08 	bl	8000240 <strlen>
 8012a30:	9b01      	ldr	r3, [sp, #4]
 8012a32:	f8db 2000 	ldr.w	r2, [fp]
 8012a36:	4403      	add	r3, r0
 8012a38:	4682      	mov	sl, r0
 8012a3a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8012a3e:	9305      	str	r3, [sp, #20]
 8012a40:	1c93      	adds	r3, r2, #2
 8012a42:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8012a46:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8012a4a:	32fe      	adds	r2, #254	; 0xfe
 8012a4c:	18d1      	adds	r1, r2, r3
 8012a4e:	461f      	mov	r7, r3
 8012a50:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012a54:	9100      	str	r1, [sp, #0]
 8012a56:	2830      	cmp	r0, #48	; 0x30
 8012a58:	d0f8      	beq.n	8012a4c <__gethex+0x3c>
 8012a5a:	f7ff ffc4 	bl	80129e6 <__hexdig_fun>
 8012a5e:	4604      	mov	r4, r0
 8012a60:	2800      	cmp	r0, #0
 8012a62:	d13a      	bne.n	8012ada <__gethex+0xca>
 8012a64:	9901      	ldr	r1, [sp, #4]
 8012a66:	4652      	mov	r2, sl
 8012a68:	4638      	mov	r0, r7
 8012a6a:	f001 fb80 	bl	801416e <strncmp>
 8012a6e:	4605      	mov	r5, r0
 8012a70:	2800      	cmp	r0, #0
 8012a72:	d168      	bne.n	8012b46 <__gethex+0x136>
 8012a74:	f817 000a 	ldrb.w	r0, [r7, sl]
 8012a78:	eb07 060a 	add.w	r6, r7, sl
 8012a7c:	f7ff ffb3 	bl	80129e6 <__hexdig_fun>
 8012a80:	2800      	cmp	r0, #0
 8012a82:	d062      	beq.n	8012b4a <__gethex+0x13a>
 8012a84:	4633      	mov	r3, r6
 8012a86:	7818      	ldrb	r0, [r3, #0]
 8012a88:	2830      	cmp	r0, #48	; 0x30
 8012a8a:	461f      	mov	r7, r3
 8012a8c:	f103 0301 	add.w	r3, r3, #1
 8012a90:	d0f9      	beq.n	8012a86 <__gethex+0x76>
 8012a92:	f7ff ffa8 	bl	80129e6 <__hexdig_fun>
 8012a96:	2301      	movs	r3, #1
 8012a98:	fab0 f480 	clz	r4, r0
 8012a9c:	0964      	lsrs	r4, r4, #5
 8012a9e:	4635      	mov	r5, r6
 8012aa0:	9300      	str	r3, [sp, #0]
 8012aa2:	463a      	mov	r2, r7
 8012aa4:	4616      	mov	r6, r2
 8012aa6:	3201      	adds	r2, #1
 8012aa8:	7830      	ldrb	r0, [r6, #0]
 8012aaa:	f7ff ff9c 	bl	80129e6 <__hexdig_fun>
 8012aae:	2800      	cmp	r0, #0
 8012ab0:	d1f8      	bne.n	8012aa4 <__gethex+0x94>
 8012ab2:	9901      	ldr	r1, [sp, #4]
 8012ab4:	4652      	mov	r2, sl
 8012ab6:	4630      	mov	r0, r6
 8012ab8:	f001 fb59 	bl	801416e <strncmp>
 8012abc:	b980      	cbnz	r0, 8012ae0 <__gethex+0xd0>
 8012abe:	b94d      	cbnz	r5, 8012ad4 <__gethex+0xc4>
 8012ac0:	eb06 050a 	add.w	r5, r6, sl
 8012ac4:	462a      	mov	r2, r5
 8012ac6:	4616      	mov	r6, r2
 8012ac8:	3201      	adds	r2, #1
 8012aca:	7830      	ldrb	r0, [r6, #0]
 8012acc:	f7ff ff8b 	bl	80129e6 <__hexdig_fun>
 8012ad0:	2800      	cmp	r0, #0
 8012ad2:	d1f8      	bne.n	8012ac6 <__gethex+0xb6>
 8012ad4:	1bad      	subs	r5, r5, r6
 8012ad6:	00ad      	lsls	r5, r5, #2
 8012ad8:	e004      	b.n	8012ae4 <__gethex+0xd4>
 8012ada:	2400      	movs	r4, #0
 8012adc:	4625      	mov	r5, r4
 8012ade:	e7e0      	b.n	8012aa2 <__gethex+0x92>
 8012ae0:	2d00      	cmp	r5, #0
 8012ae2:	d1f7      	bne.n	8012ad4 <__gethex+0xc4>
 8012ae4:	7833      	ldrb	r3, [r6, #0]
 8012ae6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012aea:	2b50      	cmp	r3, #80	; 0x50
 8012aec:	d13b      	bne.n	8012b66 <__gethex+0x156>
 8012aee:	7873      	ldrb	r3, [r6, #1]
 8012af0:	2b2b      	cmp	r3, #43	; 0x2b
 8012af2:	d02c      	beq.n	8012b4e <__gethex+0x13e>
 8012af4:	2b2d      	cmp	r3, #45	; 0x2d
 8012af6:	d02e      	beq.n	8012b56 <__gethex+0x146>
 8012af8:	1c71      	adds	r1, r6, #1
 8012afa:	f04f 0900 	mov.w	r9, #0
 8012afe:	7808      	ldrb	r0, [r1, #0]
 8012b00:	f7ff ff71 	bl	80129e6 <__hexdig_fun>
 8012b04:	1e43      	subs	r3, r0, #1
 8012b06:	b2db      	uxtb	r3, r3
 8012b08:	2b18      	cmp	r3, #24
 8012b0a:	d82c      	bhi.n	8012b66 <__gethex+0x156>
 8012b0c:	f1a0 0210 	sub.w	r2, r0, #16
 8012b10:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012b14:	f7ff ff67 	bl	80129e6 <__hexdig_fun>
 8012b18:	1e43      	subs	r3, r0, #1
 8012b1a:	b2db      	uxtb	r3, r3
 8012b1c:	2b18      	cmp	r3, #24
 8012b1e:	d91d      	bls.n	8012b5c <__gethex+0x14c>
 8012b20:	f1b9 0f00 	cmp.w	r9, #0
 8012b24:	d000      	beq.n	8012b28 <__gethex+0x118>
 8012b26:	4252      	negs	r2, r2
 8012b28:	4415      	add	r5, r2
 8012b2a:	f8cb 1000 	str.w	r1, [fp]
 8012b2e:	b1e4      	cbz	r4, 8012b6a <__gethex+0x15a>
 8012b30:	9b00      	ldr	r3, [sp, #0]
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	bf14      	ite	ne
 8012b36:	2700      	movne	r7, #0
 8012b38:	2706      	moveq	r7, #6
 8012b3a:	4638      	mov	r0, r7
 8012b3c:	b009      	add	sp, #36	; 0x24
 8012b3e:	ecbd 8b02 	vpop	{d8}
 8012b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b46:	463e      	mov	r6, r7
 8012b48:	4625      	mov	r5, r4
 8012b4a:	2401      	movs	r4, #1
 8012b4c:	e7ca      	b.n	8012ae4 <__gethex+0xd4>
 8012b4e:	f04f 0900 	mov.w	r9, #0
 8012b52:	1cb1      	adds	r1, r6, #2
 8012b54:	e7d3      	b.n	8012afe <__gethex+0xee>
 8012b56:	f04f 0901 	mov.w	r9, #1
 8012b5a:	e7fa      	b.n	8012b52 <__gethex+0x142>
 8012b5c:	230a      	movs	r3, #10
 8012b5e:	fb03 0202 	mla	r2, r3, r2, r0
 8012b62:	3a10      	subs	r2, #16
 8012b64:	e7d4      	b.n	8012b10 <__gethex+0x100>
 8012b66:	4631      	mov	r1, r6
 8012b68:	e7df      	b.n	8012b2a <__gethex+0x11a>
 8012b6a:	1bf3      	subs	r3, r6, r7
 8012b6c:	3b01      	subs	r3, #1
 8012b6e:	4621      	mov	r1, r4
 8012b70:	2b07      	cmp	r3, #7
 8012b72:	dc0b      	bgt.n	8012b8c <__gethex+0x17c>
 8012b74:	ee18 0a10 	vmov	r0, s16
 8012b78:	f000 fadc 	bl	8013134 <_Balloc>
 8012b7c:	4604      	mov	r4, r0
 8012b7e:	b940      	cbnz	r0, 8012b92 <__gethex+0x182>
 8012b80:	4b5d      	ldr	r3, [pc, #372]	; (8012cf8 <__gethex+0x2e8>)
 8012b82:	4602      	mov	r2, r0
 8012b84:	21de      	movs	r1, #222	; 0xde
 8012b86:	485d      	ldr	r0, [pc, #372]	; (8012cfc <__gethex+0x2ec>)
 8012b88:	f001 fb24 	bl	80141d4 <__assert_func>
 8012b8c:	3101      	adds	r1, #1
 8012b8e:	105b      	asrs	r3, r3, #1
 8012b90:	e7ee      	b.n	8012b70 <__gethex+0x160>
 8012b92:	f100 0914 	add.w	r9, r0, #20
 8012b96:	f04f 0b00 	mov.w	fp, #0
 8012b9a:	f1ca 0301 	rsb	r3, sl, #1
 8012b9e:	f8cd 9008 	str.w	r9, [sp, #8]
 8012ba2:	f8cd b000 	str.w	fp, [sp]
 8012ba6:	9306      	str	r3, [sp, #24]
 8012ba8:	42b7      	cmp	r7, r6
 8012baa:	d340      	bcc.n	8012c2e <__gethex+0x21e>
 8012bac:	9802      	ldr	r0, [sp, #8]
 8012bae:	9b00      	ldr	r3, [sp, #0]
 8012bb0:	f840 3b04 	str.w	r3, [r0], #4
 8012bb4:	eba0 0009 	sub.w	r0, r0, r9
 8012bb8:	1080      	asrs	r0, r0, #2
 8012bba:	0146      	lsls	r6, r0, #5
 8012bbc:	6120      	str	r0, [r4, #16]
 8012bbe:	4618      	mov	r0, r3
 8012bc0:	f000 fbaa 	bl	8013318 <__hi0bits>
 8012bc4:	1a30      	subs	r0, r6, r0
 8012bc6:	f8d8 6000 	ldr.w	r6, [r8]
 8012bca:	42b0      	cmp	r0, r6
 8012bcc:	dd63      	ble.n	8012c96 <__gethex+0x286>
 8012bce:	1b87      	subs	r7, r0, r6
 8012bd0:	4639      	mov	r1, r7
 8012bd2:	4620      	mov	r0, r4
 8012bd4:	f000 ff4b 	bl	8013a6e <__any_on>
 8012bd8:	4682      	mov	sl, r0
 8012bda:	b1a8      	cbz	r0, 8012c08 <__gethex+0x1f8>
 8012bdc:	1e7b      	subs	r3, r7, #1
 8012bde:	1159      	asrs	r1, r3, #5
 8012be0:	f003 021f 	and.w	r2, r3, #31
 8012be4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8012be8:	f04f 0a01 	mov.w	sl, #1
 8012bec:	fa0a f202 	lsl.w	r2, sl, r2
 8012bf0:	420a      	tst	r2, r1
 8012bf2:	d009      	beq.n	8012c08 <__gethex+0x1f8>
 8012bf4:	4553      	cmp	r3, sl
 8012bf6:	dd05      	ble.n	8012c04 <__gethex+0x1f4>
 8012bf8:	1eb9      	subs	r1, r7, #2
 8012bfa:	4620      	mov	r0, r4
 8012bfc:	f000 ff37 	bl	8013a6e <__any_on>
 8012c00:	2800      	cmp	r0, #0
 8012c02:	d145      	bne.n	8012c90 <__gethex+0x280>
 8012c04:	f04f 0a02 	mov.w	sl, #2
 8012c08:	4639      	mov	r1, r7
 8012c0a:	4620      	mov	r0, r4
 8012c0c:	f7ff fe99 	bl	8012942 <rshift>
 8012c10:	443d      	add	r5, r7
 8012c12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012c16:	42ab      	cmp	r3, r5
 8012c18:	da4c      	bge.n	8012cb4 <__gethex+0x2a4>
 8012c1a:	ee18 0a10 	vmov	r0, s16
 8012c1e:	4621      	mov	r1, r4
 8012c20:	f000 fac8 	bl	80131b4 <_Bfree>
 8012c24:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012c26:	2300      	movs	r3, #0
 8012c28:	6013      	str	r3, [r2, #0]
 8012c2a:	27a3      	movs	r7, #163	; 0xa3
 8012c2c:	e785      	b.n	8012b3a <__gethex+0x12a>
 8012c2e:	1e73      	subs	r3, r6, #1
 8012c30:	9a05      	ldr	r2, [sp, #20]
 8012c32:	9303      	str	r3, [sp, #12]
 8012c34:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012c38:	4293      	cmp	r3, r2
 8012c3a:	d019      	beq.n	8012c70 <__gethex+0x260>
 8012c3c:	f1bb 0f20 	cmp.w	fp, #32
 8012c40:	d107      	bne.n	8012c52 <__gethex+0x242>
 8012c42:	9b02      	ldr	r3, [sp, #8]
 8012c44:	9a00      	ldr	r2, [sp, #0]
 8012c46:	f843 2b04 	str.w	r2, [r3], #4
 8012c4a:	9302      	str	r3, [sp, #8]
 8012c4c:	2300      	movs	r3, #0
 8012c4e:	9300      	str	r3, [sp, #0]
 8012c50:	469b      	mov	fp, r3
 8012c52:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8012c56:	f7ff fec6 	bl	80129e6 <__hexdig_fun>
 8012c5a:	9b00      	ldr	r3, [sp, #0]
 8012c5c:	f000 000f 	and.w	r0, r0, #15
 8012c60:	fa00 f00b 	lsl.w	r0, r0, fp
 8012c64:	4303      	orrs	r3, r0
 8012c66:	9300      	str	r3, [sp, #0]
 8012c68:	f10b 0b04 	add.w	fp, fp, #4
 8012c6c:	9b03      	ldr	r3, [sp, #12]
 8012c6e:	e00d      	b.n	8012c8c <__gethex+0x27c>
 8012c70:	9b03      	ldr	r3, [sp, #12]
 8012c72:	9a06      	ldr	r2, [sp, #24]
 8012c74:	4413      	add	r3, r2
 8012c76:	42bb      	cmp	r3, r7
 8012c78:	d3e0      	bcc.n	8012c3c <__gethex+0x22c>
 8012c7a:	4618      	mov	r0, r3
 8012c7c:	9901      	ldr	r1, [sp, #4]
 8012c7e:	9307      	str	r3, [sp, #28]
 8012c80:	4652      	mov	r2, sl
 8012c82:	f001 fa74 	bl	801416e <strncmp>
 8012c86:	9b07      	ldr	r3, [sp, #28]
 8012c88:	2800      	cmp	r0, #0
 8012c8a:	d1d7      	bne.n	8012c3c <__gethex+0x22c>
 8012c8c:	461e      	mov	r6, r3
 8012c8e:	e78b      	b.n	8012ba8 <__gethex+0x198>
 8012c90:	f04f 0a03 	mov.w	sl, #3
 8012c94:	e7b8      	b.n	8012c08 <__gethex+0x1f8>
 8012c96:	da0a      	bge.n	8012cae <__gethex+0x29e>
 8012c98:	1a37      	subs	r7, r6, r0
 8012c9a:	4621      	mov	r1, r4
 8012c9c:	ee18 0a10 	vmov	r0, s16
 8012ca0:	463a      	mov	r2, r7
 8012ca2:	f000 fca3 	bl	80135ec <__lshift>
 8012ca6:	1bed      	subs	r5, r5, r7
 8012ca8:	4604      	mov	r4, r0
 8012caa:	f100 0914 	add.w	r9, r0, #20
 8012cae:	f04f 0a00 	mov.w	sl, #0
 8012cb2:	e7ae      	b.n	8012c12 <__gethex+0x202>
 8012cb4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8012cb8:	42a8      	cmp	r0, r5
 8012cba:	dd72      	ble.n	8012da2 <__gethex+0x392>
 8012cbc:	1b45      	subs	r5, r0, r5
 8012cbe:	42ae      	cmp	r6, r5
 8012cc0:	dc36      	bgt.n	8012d30 <__gethex+0x320>
 8012cc2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012cc6:	2b02      	cmp	r3, #2
 8012cc8:	d02a      	beq.n	8012d20 <__gethex+0x310>
 8012cca:	2b03      	cmp	r3, #3
 8012ccc:	d02c      	beq.n	8012d28 <__gethex+0x318>
 8012cce:	2b01      	cmp	r3, #1
 8012cd0:	d11c      	bne.n	8012d0c <__gethex+0x2fc>
 8012cd2:	42ae      	cmp	r6, r5
 8012cd4:	d11a      	bne.n	8012d0c <__gethex+0x2fc>
 8012cd6:	2e01      	cmp	r6, #1
 8012cd8:	d112      	bne.n	8012d00 <__gethex+0x2f0>
 8012cda:	9a04      	ldr	r2, [sp, #16]
 8012cdc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012ce0:	6013      	str	r3, [r2, #0]
 8012ce2:	2301      	movs	r3, #1
 8012ce4:	6123      	str	r3, [r4, #16]
 8012ce6:	f8c9 3000 	str.w	r3, [r9]
 8012cea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012cec:	2762      	movs	r7, #98	; 0x62
 8012cee:	601c      	str	r4, [r3, #0]
 8012cf0:	e723      	b.n	8012b3a <__gethex+0x12a>
 8012cf2:	bf00      	nop
 8012cf4:	08015014 	.word	0x08015014
 8012cf8:	08014f38 	.word	0x08014f38
 8012cfc:	08014fac 	.word	0x08014fac
 8012d00:	1e71      	subs	r1, r6, #1
 8012d02:	4620      	mov	r0, r4
 8012d04:	f000 feb3 	bl	8013a6e <__any_on>
 8012d08:	2800      	cmp	r0, #0
 8012d0a:	d1e6      	bne.n	8012cda <__gethex+0x2ca>
 8012d0c:	ee18 0a10 	vmov	r0, s16
 8012d10:	4621      	mov	r1, r4
 8012d12:	f000 fa4f 	bl	80131b4 <_Bfree>
 8012d16:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012d18:	2300      	movs	r3, #0
 8012d1a:	6013      	str	r3, [r2, #0]
 8012d1c:	2750      	movs	r7, #80	; 0x50
 8012d1e:	e70c      	b.n	8012b3a <__gethex+0x12a>
 8012d20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d1f2      	bne.n	8012d0c <__gethex+0x2fc>
 8012d26:	e7d8      	b.n	8012cda <__gethex+0x2ca>
 8012d28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d1d5      	bne.n	8012cda <__gethex+0x2ca>
 8012d2e:	e7ed      	b.n	8012d0c <__gethex+0x2fc>
 8012d30:	1e6f      	subs	r7, r5, #1
 8012d32:	f1ba 0f00 	cmp.w	sl, #0
 8012d36:	d131      	bne.n	8012d9c <__gethex+0x38c>
 8012d38:	b127      	cbz	r7, 8012d44 <__gethex+0x334>
 8012d3a:	4639      	mov	r1, r7
 8012d3c:	4620      	mov	r0, r4
 8012d3e:	f000 fe96 	bl	8013a6e <__any_on>
 8012d42:	4682      	mov	sl, r0
 8012d44:	117b      	asrs	r3, r7, #5
 8012d46:	2101      	movs	r1, #1
 8012d48:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8012d4c:	f007 071f 	and.w	r7, r7, #31
 8012d50:	fa01 f707 	lsl.w	r7, r1, r7
 8012d54:	421f      	tst	r7, r3
 8012d56:	4629      	mov	r1, r5
 8012d58:	4620      	mov	r0, r4
 8012d5a:	bf18      	it	ne
 8012d5c:	f04a 0a02 	orrne.w	sl, sl, #2
 8012d60:	1b76      	subs	r6, r6, r5
 8012d62:	f7ff fdee 	bl	8012942 <rshift>
 8012d66:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012d6a:	2702      	movs	r7, #2
 8012d6c:	f1ba 0f00 	cmp.w	sl, #0
 8012d70:	d048      	beq.n	8012e04 <__gethex+0x3f4>
 8012d72:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012d76:	2b02      	cmp	r3, #2
 8012d78:	d015      	beq.n	8012da6 <__gethex+0x396>
 8012d7a:	2b03      	cmp	r3, #3
 8012d7c:	d017      	beq.n	8012dae <__gethex+0x39e>
 8012d7e:	2b01      	cmp	r3, #1
 8012d80:	d109      	bne.n	8012d96 <__gethex+0x386>
 8012d82:	f01a 0f02 	tst.w	sl, #2
 8012d86:	d006      	beq.n	8012d96 <__gethex+0x386>
 8012d88:	f8d9 0000 	ldr.w	r0, [r9]
 8012d8c:	ea4a 0a00 	orr.w	sl, sl, r0
 8012d90:	f01a 0f01 	tst.w	sl, #1
 8012d94:	d10e      	bne.n	8012db4 <__gethex+0x3a4>
 8012d96:	f047 0710 	orr.w	r7, r7, #16
 8012d9a:	e033      	b.n	8012e04 <__gethex+0x3f4>
 8012d9c:	f04f 0a01 	mov.w	sl, #1
 8012da0:	e7d0      	b.n	8012d44 <__gethex+0x334>
 8012da2:	2701      	movs	r7, #1
 8012da4:	e7e2      	b.n	8012d6c <__gethex+0x35c>
 8012da6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012da8:	f1c3 0301 	rsb	r3, r3, #1
 8012dac:	9315      	str	r3, [sp, #84]	; 0x54
 8012dae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d0f0      	beq.n	8012d96 <__gethex+0x386>
 8012db4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012db8:	f104 0314 	add.w	r3, r4, #20
 8012dbc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012dc0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012dc4:	f04f 0c00 	mov.w	ip, #0
 8012dc8:	4618      	mov	r0, r3
 8012dca:	f853 2b04 	ldr.w	r2, [r3], #4
 8012dce:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012dd2:	d01c      	beq.n	8012e0e <__gethex+0x3fe>
 8012dd4:	3201      	adds	r2, #1
 8012dd6:	6002      	str	r2, [r0, #0]
 8012dd8:	2f02      	cmp	r7, #2
 8012dda:	f104 0314 	add.w	r3, r4, #20
 8012dde:	d13f      	bne.n	8012e60 <__gethex+0x450>
 8012de0:	f8d8 2000 	ldr.w	r2, [r8]
 8012de4:	3a01      	subs	r2, #1
 8012de6:	42b2      	cmp	r2, r6
 8012de8:	d10a      	bne.n	8012e00 <__gethex+0x3f0>
 8012dea:	1171      	asrs	r1, r6, #5
 8012dec:	2201      	movs	r2, #1
 8012dee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012df2:	f006 061f 	and.w	r6, r6, #31
 8012df6:	fa02 f606 	lsl.w	r6, r2, r6
 8012dfa:	421e      	tst	r6, r3
 8012dfc:	bf18      	it	ne
 8012dfe:	4617      	movne	r7, r2
 8012e00:	f047 0720 	orr.w	r7, r7, #32
 8012e04:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012e06:	601c      	str	r4, [r3, #0]
 8012e08:	9b04      	ldr	r3, [sp, #16]
 8012e0a:	601d      	str	r5, [r3, #0]
 8012e0c:	e695      	b.n	8012b3a <__gethex+0x12a>
 8012e0e:	4299      	cmp	r1, r3
 8012e10:	f843 cc04 	str.w	ip, [r3, #-4]
 8012e14:	d8d8      	bhi.n	8012dc8 <__gethex+0x3b8>
 8012e16:	68a3      	ldr	r3, [r4, #8]
 8012e18:	459b      	cmp	fp, r3
 8012e1a:	db19      	blt.n	8012e50 <__gethex+0x440>
 8012e1c:	6861      	ldr	r1, [r4, #4]
 8012e1e:	ee18 0a10 	vmov	r0, s16
 8012e22:	3101      	adds	r1, #1
 8012e24:	f000 f986 	bl	8013134 <_Balloc>
 8012e28:	4681      	mov	r9, r0
 8012e2a:	b918      	cbnz	r0, 8012e34 <__gethex+0x424>
 8012e2c:	4b1a      	ldr	r3, [pc, #104]	; (8012e98 <__gethex+0x488>)
 8012e2e:	4602      	mov	r2, r0
 8012e30:	2184      	movs	r1, #132	; 0x84
 8012e32:	e6a8      	b.n	8012b86 <__gethex+0x176>
 8012e34:	6922      	ldr	r2, [r4, #16]
 8012e36:	3202      	adds	r2, #2
 8012e38:	f104 010c 	add.w	r1, r4, #12
 8012e3c:	0092      	lsls	r2, r2, #2
 8012e3e:	300c      	adds	r0, #12
 8012e40:	f7fc fe84 	bl	800fb4c <memcpy>
 8012e44:	4621      	mov	r1, r4
 8012e46:	ee18 0a10 	vmov	r0, s16
 8012e4a:	f000 f9b3 	bl	80131b4 <_Bfree>
 8012e4e:	464c      	mov	r4, r9
 8012e50:	6923      	ldr	r3, [r4, #16]
 8012e52:	1c5a      	adds	r2, r3, #1
 8012e54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012e58:	6122      	str	r2, [r4, #16]
 8012e5a:	2201      	movs	r2, #1
 8012e5c:	615a      	str	r2, [r3, #20]
 8012e5e:	e7bb      	b.n	8012dd8 <__gethex+0x3c8>
 8012e60:	6922      	ldr	r2, [r4, #16]
 8012e62:	455a      	cmp	r2, fp
 8012e64:	dd0b      	ble.n	8012e7e <__gethex+0x46e>
 8012e66:	2101      	movs	r1, #1
 8012e68:	4620      	mov	r0, r4
 8012e6a:	f7ff fd6a 	bl	8012942 <rshift>
 8012e6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012e72:	3501      	adds	r5, #1
 8012e74:	42ab      	cmp	r3, r5
 8012e76:	f6ff aed0 	blt.w	8012c1a <__gethex+0x20a>
 8012e7a:	2701      	movs	r7, #1
 8012e7c:	e7c0      	b.n	8012e00 <__gethex+0x3f0>
 8012e7e:	f016 061f 	ands.w	r6, r6, #31
 8012e82:	d0fa      	beq.n	8012e7a <__gethex+0x46a>
 8012e84:	4453      	add	r3, sl
 8012e86:	f1c6 0620 	rsb	r6, r6, #32
 8012e8a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8012e8e:	f000 fa43 	bl	8013318 <__hi0bits>
 8012e92:	42b0      	cmp	r0, r6
 8012e94:	dbe7      	blt.n	8012e66 <__gethex+0x456>
 8012e96:	e7f0      	b.n	8012e7a <__gethex+0x46a>
 8012e98:	08014f38 	.word	0x08014f38

08012e9c <L_shift>:
 8012e9c:	f1c2 0208 	rsb	r2, r2, #8
 8012ea0:	0092      	lsls	r2, r2, #2
 8012ea2:	b570      	push	{r4, r5, r6, lr}
 8012ea4:	f1c2 0620 	rsb	r6, r2, #32
 8012ea8:	6843      	ldr	r3, [r0, #4]
 8012eaa:	6804      	ldr	r4, [r0, #0]
 8012eac:	fa03 f506 	lsl.w	r5, r3, r6
 8012eb0:	432c      	orrs	r4, r5
 8012eb2:	40d3      	lsrs	r3, r2
 8012eb4:	6004      	str	r4, [r0, #0]
 8012eb6:	f840 3f04 	str.w	r3, [r0, #4]!
 8012eba:	4288      	cmp	r0, r1
 8012ebc:	d3f4      	bcc.n	8012ea8 <L_shift+0xc>
 8012ebe:	bd70      	pop	{r4, r5, r6, pc}

08012ec0 <__match>:
 8012ec0:	b530      	push	{r4, r5, lr}
 8012ec2:	6803      	ldr	r3, [r0, #0]
 8012ec4:	3301      	adds	r3, #1
 8012ec6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012eca:	b914      	cbnz	r4, 8012ed2 <__match+0x12>
 8012ecc:	6003      	str	r3, [r0, #0]
 8012ece:	2001      	movs	r0, #1
 8012ed0:	bd30      	pop	{r4, r5, pc}
 8012ed2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012ed6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8012eda:	2d19      	cmp	r5, #25
 8012edc:	bf98      	it	ls
 8012ede:	3220      	addls	r2, #32
 8012ee0:	42a2      	cmp	r2, r4
 8012ee2:	d0f0      	beq.n	8012ec6 <__match+0x6>
 8012ee4:	2000      	movs	r0, #0
 8012ee6:	e7f3      	b.n	8012ed0 <__match+0x10>

08012ee8 <__hexnan>:
 8012ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012eec:	680b      	ldr	r3, [r1, #0]
 8012eee:	115e      	asrs	r6, r3, #5
 8012ef0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012ef4:	f013 031f 	ands.w	r3, r3, #31
 8012ef8:	b087      	sub	sp, #28
 8012efa:	bf18      	it	ne
 8012efc:	3604      	addne	r6, #4
 8012efe:	2500      	movs	r5, #0
 8012f00:	1f37      	subs	r7, r6, #4
 8012f02:	4690      	mov	r8, r2
 8012f04:	6802      	ldr	r2, [r0, #0]
 8012f06:	9301      	str	r3, [sp, #4]
 8012f08:	4682      	mov	sl, r0
 8012f0a:	f846 5c04 	str.w	r5, [r6, #-4]
 8012f0e:	46b9      	mov	r9, r7
 8012f10:	463c      	mov	r4, r7
 8012f12:	9502      	str	r5, [sp, #8]
 8012f14:	46ab      	mov	fp, r5
 8012f16:	7851      	ldrb	r1, [r2, #1]
 8012f18:	1c53      	adds	r3, r2, #1
 8012f1a:	9303      	str	r3, [sp, #12]
 8012f1c:	b341      	cbz	r1, 8012f70 <__hexnan+0x88>
 8012f1e:	4608      	mov	r0, r1
 8012f20:	9205      	str	r2, [sp, #20]
 8012f22:	9104      	str	r1, [sp, #16]
 8012f24:	f7ff fd5f 	bl	80129e6 <__hexdig_fun>
 8012f28:	2800      	cmp	r0, #0
 8012f2a:	d14f      	bne.n	8012fcc <__hexnan+0xe4>
 8012f2c:	9904      	ldr	r1, [sp, #16]
 8012f2e:	9a05      	ldr	r2, [sp, #20]
 8012f30:	2920      	cmp	r1, #32
 8012f32:	d818      	bhi.n	8012f66 <__hexnan+0x7e>
 8012f34:	9b02      	ldr	r3, [sp, #8]
 8012f36:	459b      	cmp	fp, r3
 8012f38:	dd13      	ble.n	8012f62 <__hexnan+0x7a>
 8012f3a:	454c      	cmp	r4, r9
 8012f3c:	d206      	bcs.n	8012f4c <__hexnan+0x64>
 8012f3e:	2d07      	cmp	r5, #7
 8012f40:	dc04      	bgt.n	8012f4c <__hexnan+0x64>
 8012f42:	462a      	mov	r2, r5
 8012f44:	4649      	mov	r1, r9
 8012f46:	4620      	mov	r0, r4
 8012f48:	f7ff ffa8 	bl	8012e9c <L_shift>
 8012f4c:	4544      	cmp	r4, r8
 8012f4e:	d950      	bls.n	8012ff2 <__hexnan+0x10a>
 8012f50:	2300      	movs	r3, #0
 8012f52:	f1a4 0904 	sub.w	r9, r4, #4
 8012f56:	f844 3c04 	str.w	r3, [r4, #-4]
 8012f5a:	f8cd b008 	str.w	fp, [sp, #8]
 8012f5e:	464c      	mov	r4, r9
 8012f60:	461d      	mov	r5, r3
 8012f62:	9a03      	ldr	r2, [sp, #12]
 8012f64:	e7d7      	b.n	8012f16 <__hexnan+0x2e>
 8012f66:	2929      	cmp	r1, #41	; 0x29
 8012f68:	d156      	bne.n	8013018 <__hexnan+0x130>
 8012f6a:	3202      	adds	r2, #2
 8012f6c:	f8ca 2000 	str.w	r2, [sl]
 8012f70:	f1bb 0f00 	cmp.w	fp, #0
 8012f74:	d050      	beq.n	8013018 <__hexnan+0x130>
 8012f76:	454c      	cmp	r4, r9
 8012f78:	d206      	bcs.n	8012f88 <__hexnan+0xa0>
 8012f7a:	2d07      	cmp	r5, #7
 8012f7c:	dc04      	bgt.n	8012f88 <__hexnan+0xa0>
 8012f7e:	462a      	mov	r2, r5
 8012f80:	4649      	mov	r1, r9
 8012f82:	4620      	mov	r0, r4
 8012f84:	f7ff ff8a 	bl	8012e9c <L_shift>
 8012f88:	4544      	cmp	r4, r8
 8012f8a:	d934      	bls.n	8012ff6 <__hexnan+0x10e>
 8012f8c:	f1a8 0204 	sub.w	r2, r8, #4
 8012f90:	4623      	mov	r3, r4
 8012f92:	f853 1b04 	ldr.w	r1, [r3], #4
 8012f96:	f842 1f04 	str.w	r1, [r2, #4]!
 8012f9a:	429f      	cmp	r7, r3
 8012f9c:	d2f9      	bcs.n	8012f92 <__hexnan+0xaa>
 8012f9e:	1b3b      	subs	r3, r7, r4
 8012fa0:	f023 0303 	bic.w	r3, r3, #3
 8012fa4:	3304      	adds	r3, #4
 8012fa6:	3401      	adds	r4, #1
 8012fa8:	3e03      	subs	r6, #3
 8012faa:	42b4      	cmp	r4, r6
 8012fac:	bf88      	it	hi
 8012fae:	2304      	movhi	r3, #4
 8012fb0:	4443      	add	r3, r8
 8012fb2:	2200      	movs	r2, #0
 8012fb4:	f843 2b04 	str.w	r2, [r3], #4
 8012fb8:	429f      	cmp	r7, r3
 8012fba:	d2fb      	bcs.n	8012fb4 <__hexnan+0xcc>
 8012fbc:	683b      	ldr	r3, [r7, #0]
 8012fbe:	b91b      	cbnz	r3, 8012fc8 <__hexnan+0xe0>
 8012fc0:	4547      	cmp	r7, r8
 8012fc2:	d127      	bne.n	8013014 <__hexnan+0x12c>
 8012fc4:	2301      	movs	r3, #1
 8012fc6:	603b      	str	r3, [r7, #0]
 8012fc8:	2005      	movs	r0, #5
 8012fca:	e026      	b.n	801301a <__hexnan+0x132>
 8012fcc:	3501      	adds	r5, #1
 8012fce:	2d08      	cmp	r5, #8
 8012fd0:	f10b 0b01 	add.w	fp, fp, #1
 8012fd4:	dd06      	ble.n	8012fe4 <__hexnan+0xfc>
 8012fd6:	4544      	cmp	r4, r8
 8012fd8:	d9c3      	bls.n	8012f62 <__hexnan+0x7a>
 8012fda:	2300      	movs	r3, #0
 8012fdc:	f844 3c04 	str.w	r3, [r4, #-4]
 8012fe0:	2501      	movs	r5, #1
 8012fe2:	3c04      	subs	r4, #4
 8012fe4:	6822      	ldr	r2, [r4, #0]
 8012fe6:	f000 000f 	and.w	r0, r0, #15
 8012fea:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8012fee:	6022      	str	r2, [r4, #0]
 8012ff0:	e7b7      	b.n	8012f62 <__hexnan+0x7a>
 8012ff2:	2508      	movs	r5, #8
 8012ff4:	e7b5      	b.n	8012f62 <__hexnan+0x7a>
 8012ff6:	9b01      	ldr	r3, [sp, #4]
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d0df      	beq.n	8012fbc <__hexnan+0xd4>
 8012ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8013000:	f1c3 0320 	rsb	r3, r3, #32
 8013004:	fa22 f303 	lsr.w	r3, r2, r3
 8013008:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801300c:	401a      	ands	r2, r3
 801300e:	f846 2c04 	str.w	r2, [r6, #-4]
 8013012:	e7d3      	b.n	8012fbc <__hexnan+0xd4>
 8013014:	3f04      	subs	r7, #4
 8013016:	e7d1      	b.n	8012fbc <__hexnan+0xd4>
 8013018:	2004      	movs	r0, #4
 801301a:	b007      	add	sp, #28
 801301c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013020 <_localeconv_r>:
 8013020:	4800      	ldr	r0, [pc, #0]	; (8013024 <_localeconv_r+0x4>)
 8013022:	4770      	bx	lr
 8013024:	20000168 	.word	0x20000168

08013028 <__retarget_lock_init_recursive>:
 8013028:	4770      	bx	lr

0801302a <__retarget_lock_acquire_recursive>:
 801302a:	4770      	bx	lr

0801302c <__retarget_lock_release_recursive>:
 801302c:	4770      	bx	lr

0801302e <__swhatbuf_r>:
 801302e:	b570      	push	{r4, r5, r6, lr}
 8013030:	460e      	mov	r6, r1
 8013032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013036:	2900      	cmp	r1, #0
 8013038:	b096      	sub	sp, #88	; 0x58
 801303a:	4614      	mov	r4, r2
 801303c:	461d      	mov	r5, r3
 801303e:	da08      	bge.n	8013052 <__swhatbuf_r+0x24>
 8013040:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013044:	2200      	movs	r2, #0
 8013046:	602a      	str	r2, [r5, #0]
 8013048:	061a      	lsls	r2, r3, #24
 801304a:	d410      	bmi.n	801306e <__swhatbuf_r+0x40>
 801304c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013050:	e00e      	b.n	8013070 <__swhatbuf_r+0x42>
 8013052:	466a      	mov	r2, sp
 8013054:	f001 f8fe 	bl	8014254 <_fstat_r>
 8013058:	2800      	cmp	r0, #0
 801305a:	dbf1      	blt.n	8013040 <__swhatbuf_r+0x12>
 801305c:	9a01      	ldr	r2, [sp, #4]
 801305e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013062:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013066:	425a      	negs	r2, r3
 8013068:	415a      	adcs	r2, r3
 801306a:	602a      	str	r2, [r5, #0]
 801306c:	e7ee      	b.n	801304c <__swhatbuf_r+0x1e>
 801306e:	2340      	movs	r3, #64	; 0x40
 8013070:	2000      	movs	r0, #0
 8013072:	6023      	str	r3, [r4, #0]
 8013074:	b016      	add	sp, #88	; 0x58
 8013076:	bd70      	pop	{r4, r5, r6, pc}

08013078 <__smakebuf_r>:
 8013078:	898b      	ldrh	r3, [r1, #12]
 801307a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801307c:	079d      	lsls	r5, r3, #30
 801307e:	4606      	mov	r6, r0
 8013080:	460c      	mov	r4, r1
 8013082:	d507      	bpl.n	8013094 <__smakebuf_r+0x1c>
 8013084:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013088:	6023      	str	r3, [r4, #0]
 801308a:	6123      	str	r3, [r4, #16]
 801308c:	2301      	movs	r3, #1
 801308e:	6163      	str	r3, [r4, #20]
 8013090:	b002      	add	sp, #8
 8013092:	bd70      	pop	{r4, r5, r6, pc}
 8013094:	ab01      	add	r3, sp, #4
 8013096:	466a      	mov	r2, sp
 8013098:	f7ff ffc9 	bl	801302e <__swhatbuf_r>
 801309c:	9900      	ldr	r1, [sp, #0]
 801309e:	4605      	mov	r5, r0
 80130a0:	4630      	mov	r0, r6
 80130a2:	f7fc fdd5 	bl	800fc50 <_malloc_r>
 80130a6:	b948      	cbnz	r0, 80130bc <__smakebuf_r+0x44>
 80130a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80130ac:	059a      	lsls	r2, r3, #22
 80130ae:	d4ef      	bmi.n	8013090 <__smakebuf_r+0x18>
 80130b0:	f023 0303 	bic.w	r3, r3, #3
 80130b4:	f043 0302 	orr.w	r3, r3, #2
 80130b8:	81a3      	strh	r3, [r4, #12]
 80130ba:	e7e3      	b.n	8013084 <__smakebuf_r+0xc>
 80130bc:	4b0d      	ldr	r3, [pc, #52]	; (80130f4 <__smakebuf_r+0x7c>)
 80130be:	62b3      	str	r3, [r6, #40]	; 0x28
 80130c0:	89a3      	ldrh	r3, [r4, #12]
 80130c2:	6020      	str	r0, [r4, #0]
 80130c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80130c8:	81a3      	strh	r3, [r4, #12]
 80130ca:	9b00      	ldr	r3, [sp, #0]
 80130cc:	6163      	str	r3, [r4, #20]
 80130ce:	9b01      	ldr	r3, [sp, #4]
 80130d0:	6120      	str	r0, [r4, #16]
 80130d2:	b15b      	cbz	r3, 80130ec <__smakebuf_r+0x74>
 80130d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80130d8:	4630      	mov	r0, r6
 80130da:	f001 f8cd 	bl	8014278 <_isatty_r>
 80130de:	b128      	cbz	r0, 80130ec <__smakebuf_r+0x74>
 80130e0:	89a3      	ldrh	r3, [r4, #12]
 80130e2:	f023 0303 	bic.w	r3, r3, #3
 80130e6:	f043 0301 	orr.w	r3, r3, #1
 80130ea:	81a3      	strh	r3, [r4, #12]
 80130ec:	89a0      	ldrh	r0, [r4, #12]
 80130ee:	4305      	orrs	r5, r0
 80130f0:	81a5      	strh	r5, [r4, #12]
 80130f2:	e7cd      	b.n	8013090 <__smakebuf_r+0x18>
 80130f4:	080127a1 	.word	0x080127a1

080130f8 <__ascii_mbtowc>:
 80130f8:	b082      	sub	sp, #8
 80130fa:	b901      	cbnz	r1, 80130fe <__ascii_mbtowc+0x6>
 80130fc:	a901      	add	r1, sp, #4
 80130fe:	b142      	cbz	r2, 8013112 <__ascii_mbtowc+0x1a>
 8013100:	b14b      	cbz	r3, 8013116 <__ascii_mbtowc+0x1e>
 8013102:	7813      	ldrb	r3, [r2, #0]
 8013104:	600b      	str	r3, [r1, #0]
 8013106:	7812      	ldrb	r2, [r2, #0]
 8013108:	1e10      	subs	r0, r2, #0
 801310a:	bf18      	it	ne
 801310c:	2001      	movne	r0, #1
 801310e:	b002      	add	sp, #8
 8013110:	4770      	bx	lr
 8013112:	4610      	mov	r0, r2
 8013114:	e7fb      	b.n	801310e <__ascii_mbtowc+0x16>
 8013116:	f06f 0001 	mvn.w	r0, #1
 801311a:	e7f8      	b.n	801310e <__ascii_mbtowc+0x16>

0801311c <__malloc_lock>:
 801311c:	4801      	ldr	r0, [pc, #4]	; (8013124 <__malloc_lock+0x8>)
 801311e:	f7ff bf84 	b.w	801302a <__retarget_lock_acquire_recursive>
 8013122:	bf00      	nop
 8013124:	20002e54 	.word	0x20002e54

08013128 <__malloc_unlock>:
 8013128:	4801      	ldr	r0, [pc, #4]	; (8013130 <__malloc_unlock+0x8>)
 801312a:	f7ff bf7f 	b.w	801302c <__retarget_lock_release_recursive>
 801312e:	bf00      	nop
 8013130:	20002e54 	.word	0x20002e54

08013134 <_Balloc>:
 8013134:	b570      	push	{r4, r5, r6, lr}
 8013136:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013138:	4604      	mov	r4, r0
 801313a:	460d      	mov	r5, r1
 801313c:	b976      	cbnz	r6, 801315c <_Balloc+0x28>
 801313e:	2010      	movs	r0, #16
 8013140:	f7fc fcfc 	bl	800fb3c <malloc>
 8013144:	4602      	mov	r2, r0
 8013146:	6260      	str	r0, [r4, #36]	; 0x24
 8013148:	b920      	cbnz	r0, 8013154 <_Balloc+0x20>
 801314a:	4b18      	ldr	r3, [pc, #96]	; (80131ac <_Balloc+0x78>)
 801314c:	4818      	ldr	r0, [pc, #96]	; (80131b0 <_Balloc+0x7c>)
 801314e:	2166      	movs	r1, #102	; 0x66
 8013150:	f001 f840 	bl	80141d4 <__assert_func>
 8013154:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013158:	6006      	str	r6, [r0, #0]
 801315a:	60c6      	str	r6, [r0, #12]
 801315c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801315e:	68f3      	ldr	r3, [r6, #12]
 8013160:	b183      	cbz	r3, 8013184 <_Balloc+0x50>
 8013162:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013164:	68db      	ldr	r3, [r3, #12]
 8013166:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801316a:	b9b8      	cbnz	r0, 801319c <_Balloc+0x68>
 801316c:	2101      	movs	r1, #1
 801316e:	fa01 f605 	lsl.w	r6, r1, r5
 8013172:	1d72      	adds	r2, r6, #5
 8013174:	0092      	lsls	r2, r2, #2
 8013176:	4620      	mov	r0, r4
 8013178:	f000 fc9a 	bl	8013ab0 <_calloc_r>
 801317c:	b160      	cbz	r0, 8013198 <_Balloc+0x64>
 801317e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013182:	e00e      	b.n	80131a2 <_Balloc+0x6e>
 8013184:	2221      	movs	r2, #33	; 0x21
 8013186:	2104      	movs	r1, #4
 8013188:	4620      	mov	r0, r4
 801318a:	f000 fc91 	bl	8013ab0 <_calloc_r>
 801318e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013190:	60f0      	str	r0, [r6, #12]
 8013192:	68db      	ldr	r3, [r3, #12]
 8013194:	2b00      	cmp	r3, #0
 8013196:	d1e4      	bne.n	8013162 <_Balloc+0x2e>
 8013198:	2000      	movs	r0, #0
 801319a:	bd70      	pop	{r4, r5, r6, pc}
 801319c:	6802      	ldr	r2, [r0, #0]
 801319e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80131a2:	2300      	movs	r3, #0
 80131a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80131a8:	e7f7      	b.n	801319a <_Balloc+0x66>
 80131aa:	bf00      	nop
 80131ac:	08014ec6 	.word	0x08014ec6
 80131b0:	08015028 	.word	0x08015028

080131b4 <_Bfree>:
 80131b4:	b570      	push	{r4, r5, r6, lr}
 80131b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80131b8:	4605      	mov	r5, r0
 80131ba:	460c      	mov	r4, r1
 80131bc:	b976      	cbnz	r6, 80131dc <_Bfree+0x28>
 80131be:	2010      	movs	r0, #16
 80131c0:	f7fc fcbc 	bl	800fb3c <malloc>
 80131c4:	4602      	mov	r2, r0
 80131c6:	6268      	str	r0, [r5, #36]	; 0x24
 80131c8:	b920      	cbnz	r0, 80131d4 <_Bfree+0x20>
 80131ca:	4b09      	ldr	r3, [pc, #36]	; (80131f0 <_Bfree+0x3c>)
 80131cc:	4809      	ldr	r0, [pc, #36]	; (80131f4 <_Bfree+0x40>)
 80131ce:	218a      	movs	r1, #138	; 0x8a
 80131d0:	f001 f800 	bl	80141d4 <__assert_func>
 80131d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80131d8:	6006      	str	r6, [r0, #0]
 80131da:	60c6      	str	r6, [r0, #12]
 80131dc:	b13c      	cbz	r4, 80131ee <_Bfree+0x3a>
 80131de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80131e0:	6862      	ldr	r2, [r4, #4]
 80131e2:	68db      	ldr	r3, [r3, #12]
 80131e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80131e8:	6021      	str	r1, [r4, #0]
 80131ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80131ee:	bd70      	pop	{r4, r5, r6, pc}
 80131f0:	08014ec6 	.word	0x08014ec6
 80131f4:	08015028 	.word	0x08015028

080131f8 <__multadd>:
 80131f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131fc:	690d      	ldr	r5, [r1, #16]
 80131fe:	4607      	mov	r7, r0
 8013200:	460c      	mov	r4, r1
 8013202:	461e      	mov	r6, r3
 8013204:	f101 0c14 	add.w	ip, r1, #20
 8013208:	2000      	movs	r0, #0
 801320a:	f8dc 3000 	ldr.w	r3, [ip]
 801320e:	b299      	uxth	r1, r3
 8013210:	fb02 6101 	mla	r1, r2, r1, r6
 8013214:	0c1e      	lsrs	r6, r3, #16
 8013216:	0c0b      	lsrs	r3, r1, #16
 8013218:	fb02 3306 	mla	r3, r2, r6, r3
 801321c:	b289      	uxth	r1, r1
 801321e:	3001      	adds	r0, #1
 8013220:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013224:	4285      	cmp	r5, r0
 8013226:	f84c 1b04 	str.w	r1, [ip], #4
 801322a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801322e:	dcec      	bgt.n	801320a <__multadd+0x12>
 8013230:	b30e      	cbz	r6, 8013276 <__multadd+0x7e>
 8013232:	68a3      	ldr	r3, [r4, #8]
 8013234:	42ab      	cmp	r3, r5
 8013236:	dc19      	bgt.n	801326c <__multadd+0x74>
 8013238:	6861      	ldr	r1, [r4, #4]
 801323a:	4638      	mov	r0, r7
 801323c:	3101      	adds	r1, #1
 801323e:	f7ff ff79 	bl	8013134 <_Balloc>
 8013242:	4680      	mov	r8, r0
 8013244:	b928      	cbnz	r0, 8013252 <__multadd+0x5a>
 8013246:	4602      	mov	r2, r0
 8013248:	4b0c      	ldr	r3, [pc, #48]	; (801327c <__multadd+0x84>)
 801324a:	480d      	ldr	r0, [pc, #52]	; (8013280 <__multadd+0x88>)
 801324c:	21b5      	movs	r1, #181	; 0xb5
 801324e:	f000 ffc1 	bl	80141d4 <__assert_func>
 8013252:	6922      	ldr	r2, [r4, #16]
 8013254:	3202      	adds	r2, #2
 8013256:	f104 010c 	add.w	r1, r4, #12
 801325a:	0092      	lsls	r2, r2, #2
 801325c:	300c      	adds	r0, #12
 801325e:	f7fc fc75 	bl	800fb4c <memcpy>
 8013262:	4621      	mov	r1, r4
 8013264:	4638      	mov	r0, r7
 8013266:	f7ff ffa5 	bl	80131b4 <_Bfree>
 801326a:	4644      	mov	r4, r8
 801326c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013270:	3501      	adds	r5, #1
 8013272:	615e      	str	r6, [r3, #20]
 8013274:	6125      	str	r5, [r4, #16]
 8013276:	4620      	mov	r0, r4
 8013278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801327c:	08014f38 	.word	0x08014f38
 8013280:	08015028 	.word	0x08015028

08013284 <__s2b>:
 8013284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013288:	460c      	mov	r4, r1
 801328a:	4615      	mov	r5, r2
 801328c:	461f      	mov	r7, r3
 801328e:	2209      	movs	r2, #9
 8013290:	3308      	adds	r3, #8
 8013292:	4606      	mov	r6, r0
 8013294:	fb93 f3f2 	sdiv	r3, r3, r2
 8013298:	2100      	movs	r1, #0
 801329a:	2201      	movs	r2, #1
 801329c:	429a      	cmp	r2, r3
 801329e:	db09      	blt.n	80132b4 <__s2b+0x30>
 80132a0:	4630      	mov	r0, r6
 80132a2:	f7ff ff47 	bl	8013134 <_Balloc>
 80132a6:	b940      	cbnz	r0, 80132ba <__s2b+0x36>
 80132a8:	4602      	mov	r2, r0
 80132aa:	4b19      	ldr	r3, [pc, #100]	; (8013310 <__s2b+0x8c>)
 80132ac:	4819      	ldr	r0, [pc, #100]	; (8013314 <__s2b+0x90>)
 80132ae:	21ce      	movs	r1, #206	; 0xce
 80132b0:	f000 ff90 	bl	80141d4 <__assert_func>
 80132b4:	0052      	lsls	r2, r2, #1
 80132b6:	3101      	adds	r1, #1
 80132b8:	e7f0      	b.n	801329c <__s2b+0x18>
 80132ba:	9b08      	ldr	r3, [sp, #32]
 80132bc:	6143      	str	r3, [r0, #20]
 80132be:	2d09      	cmp	r5, #9
 80132c0:	f04f 0301 	mov.w	r3, #1
 80132c4:	6103      	str	r3, [r0, #16]
 80132c6:	dd16      	ble.n	80132f6 <__s2b+0x72>
 80132c8:	f104 0909 	add.w	r9, r4, #9
 80132cc:	46c8      	mov	r8, r9
 80132ce:	442c      	add	r4, r5
 80132d0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80132d4:	4601      	mov	r1, r0
 80132d6:	3b30      	subs	r3, #48	; 0x30
 80132d8:	220a      	movs	r2, #10
 80132da:	4630      	mov	r0, r6
 80132dc:	f7ff ff8c 	bl	80131f8 <__multadd>
 80132e0:	45a0      	cmp	r8, r4
 80132e2:	d1f5      	bne.n	80132d0 <__s2b+0x4c>
 80132e4:	f1a5 0408 	sub.w	r4, r5, #8
 80132e8:	444c      	add	r4, r9
 80132ea:	1b2d      	subs	r5, r5, r4
 80132ec:	1963      	adds	r3, r4, r5
 80132ee:	42bb      	cmp	r3, r7
 80132f0:	db04      	blt.n	80132fc <__s2b+0x78>
 80132f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80132f6:	340a      	adds	r4, #10
 80132f8:	2509      	movs	r5, #9
 80132fa:	e7f6      	b.n	80132ea <__s2b+0x66>
 80132fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013300:	4601      	mov	r1, r0
 8013302:	3b30      	subs	r3, #48	; 0x30
 8013304:	220a      	movs	r2, #10
 8013306:	4630      	mov	r0, r6
 8013308:	f7ff ff76 	bl	80131f8 <__multadd>
 801330c:	e7ee      	b.n	80132ec <__s2b+0x68>
 801330e:	bf00      	nop
 8013310:	08014f38 	.word	0x08014f38
 8013314:	08015028 	.word	0x08015028

08013318 <__hi0bits>:
 8013318:	0c03      	lsrs	r3, r0, #16
 801331a:	041b      	lsls	r3, r3, #16
 801331c:	b9d3      	cbnz	r3, 8013354 <__hi0bits+0x3c>
 801331e:	0400      	lsls	r0, r0, #16
 8013320:	2310      	movs	r3, #16
 8013322:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013326:	bf04      	itt	eq
 8013328:	0200      	lsleq	r0, r0, #8
 801332a:	3308      	addeq	r3, #8
 801332c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013330:	bf04      	itt	eq
 8013332:	0100      	lsleq	r0, r0, #4
 8013334:	3304      	addeq	r3, #4
 8013336:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801333a:	bf04      	itt	eq
 801333c:	0080      	lsleq	r0, r0, #2
 801333e:	3302      	addeq	r3, #2
 8013340:	2800      	cmp	r0, #0
 8013342:	db05      	blt.n	8013350 <__hi0bits+0x38>
 8013344:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013348:	f103 0301 	add.w	r3, r3, #1
 801334c:	bf08      	it	eq
 801334e:	2320      	moveq	r3, #32
 8013350:	4618      	mov	r0, r3
 8013352:	4770      	bx	lr
 8013354:	2300      	movs	r3, #0
 8013356:	e7e4      	b.n	8013322 <__hi0bits+0xa>

08013358 <__lo0bits>:
 8013358:	6803      	ldr	r3, [r0, #0]
 801335a:	f013 0207 	ands.w	r2, r3, #7
 801335e:	4601      	mov	r1, r0
 8013360:	d00b      	beq.n	801337a <__lo0bits+0x22>
 8013362:	07da      	lsls	r2, r3, #31
 8013364:	d423      	bmi.n	80133ae <__lo0bits+0x56>
 8013366:	0798      	lsls	r0, r3, #30
 8013368:	bf49      	itett	mi
 801336a:	085b      	lsrmi	r3, r3, #1
 801336c:	089b      	lsrpl	r3, r3, #2
 801336e:	2001      	movmi	r0, #1
 8013370:	600b      	strmi	r3, [r1, #0]
 8013372:	bf5c      	itt	pl
 8013374:	600b      	strpl	r3, [r1, #0]
 8013376:	2002      	movpl	r0, #2
 8013378:	4770      	bx	lr
 801337a:	b298      	uxth	r0, r3
 801337c:	b9a8      	cbnz	r0, 80133aa <__lo0bits+0x52>
 801337e:	0c1b      	lsrs	r3, r3, #16
 8013380:	2010      	movs	r0, #16
 8013382:	b2da      	uxtb	r2, r3
 8013384:	b90a      	cbnz	r2, 801338a <__lo0bits+0x32>
 8013386:	3008      	adds	r0, #8
 8013388:	0a1b      	lsrs	r3, r3, #8
 801338a:	071a      	lsls	r2, r3, #28
 801338c:	bf04      	itt	eq
 801338e:	091b      	lsreq	r3, r3, #4
 8013390:	3004      	addeq	r0, #4
 8013392:	079a      	lsls	r2, r3, #30
 8013394:	bf04      	itt	eq
 8013396:	089b      	lsreq	r3, r3, #2
 8013398:	3002      	addeq	r0, #2
 801339a:	07da      	lsls	r2, r3, #31
 801339c:	d403      	bmi.n	80133a6 <__lo0bits+0x4e>
 801339e:	085b      	lsrs	r3, r3, #1
 80133a0:	f100 0001 	add.w	r0, r0, #1
 80133a4:	d005      	beq.n	80133b2 <__lo0bits+0x5a>
 80133a6:	600b      	str	r3, [r1, #0]
 80133a8:	4770      	bx	lr
 80133aa:	4610      	mov	r0, r2
 80133ac:	e7e9      	b.n	8013382 <__lo0bits+0x2a>
 80133ae:	2000      	movs	r0, #0
 80133b0:	4770      	bx	lr
 80133b2:	2020      	movs	r0, #32
 80133b4:	4770      	bx	lr
	...

080133b8 <__i2b>:
 80133b8:	b510      	push	{r4, lr}
 80133ba:	460c      	mov	r4, r1
 80133bc:	2101      	movs	r1, #1
 80133be:	f7ff feb9 	bl	8013134 <_Balloc>
 80133c2:	4602      	mov	r2, r0
 80133c4:	b928      	cbnz	r0, 80133d2 <__i2b+0x1a>
 80133c6:	4b05      	ldr	r3, [pc, #20]	; (80133dc <__i2b+0x24>)
 80133c8:	4805      	ldr	r0, [pc, #20]	; (80133e0 <__i2b+0x28>)
 80133ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80133ce:	f000 ff01 	bl	80141d4 <__assert_func>
 80133d2:	2301      	movs	r3, #1
 80133d4:	6144      	str	r4, [r0, #20]
 80133d6:	6103      	str	r3, [r0, #16]
 80133d8:	bd10      	pop	{r4, pc}
 80133da:	bf00      	nop
 80133dc:	08014f38 	.word	0x08014f38
 80133e0:	08015028 	.word	0x08015028

080133e4 <__multiply>:
 80133e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133e8:	4691      	mov	r9, r2
 80133ea:	690a      	ldr	r2, [r1, #16]
 80133ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80133f0:	429a      	cmp	r2, r3
 80133f2:	bfb8      	it	lt
 80133f4:	460b      	movlt	r3, r1
 80133f6:	460c      	mov	r4, r1
 80133f8:	bfbc      	itt	lt
 80133fa:	464c      	movlt	r4, r9
 80133fc:	4699      	movlt	r9, r3
 80133fe:	6927      	ldr	r7, [r4, #16]
 8013400:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013404:	68a3      	ldr	r3, [r4, #8]
 8013406:	6861      	ldr	r1, [r4, #4]
 8013408:	eb07 060a 	add.w	r6, r7, sl
 801340c:	42b3      	cmp	r3, r6
 801340e:	b085      	sub	sp, #20
 8013410:	bfb8      	it	lt
 8013412:	3101      	addlt	r1, #1
 8013414:	f7ff fe8e 	bl	8013134 <_Balloc>
 8013418:	b930      	cbnz	r0, 8013428 <__multiply+0x44>
 801341a:	4602      	mov	r2, r0
 801341c:	4b44      	ldr	r3, [pc, #272]	; (8013530 <__multiply+0x14c>)
 801341e:	4845      	ldr	r0, [pc, #276]	; (8013534 <__multiply+0x150>)
 8013420:	f240 115d 	movw	r1, #349	; 0x15d
 8013424:	f000 fed6 	bl	80141d4 <__assert_func>
 8013428:	f100 0514 	add.w	r5, r0, #20
 801342c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013430:	462b      	mov	r3, r5
 8013432:	2200      	movs	r2, #0
 8013434:	4543      	cmp	r3, r8
 8013436:	d321      	bcc.n	801347c <__multiply+0x98>
 8013438:	f104 0314 	add.w	r3, r4, #20
 801343c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013440:	f109 0314 	add.w	r3, r9, #20
 8013444:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013448:	9202      	str	r2, [sp, #8]
 801344a:	1b3a      	subs	r2, r7, r4
 801344c:	3a15      	subs	r2, #21
 801344e:	f022 0203 	bic.w	r2, r2, #3
 8013452:	3204      	adds	r2, #4
 8013454:	f104 0115 	add.w	r1, r4, #21
 8013458:	428f      	cmp	r7, r1
 801345a:	bf38      	it	cc
 801345c:	2204      	movcc	r2, #4
 801345e:	9201      	str	r2, [sp, #4]
 8013460:	9a02      	ldr	r2, [sp, #8]
 8013462:	9303      	str	r3, [sp, #12]
 8013464:	429a      	cmp	r2, r3
 8013466:	d80c      	bhi.n	8013482 <__multiply+0x9e>
 8013468:	2e00      	cmp	r6, #0
 801346a:	dd03      	ble.n	8013474 <__multiply+0x90>
 801346c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013470:	2b00      	cmp	r3, #0
 8013472:	d05a      	beq.n	801352a <__multiply+0x146>
 8013474:	6106      	str	r6, [r0, #16]
 8013476:	b005      	add	sp, #20
 8013478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801347c:	f843 2b04 	str.w	r2, [r3], #4
 8013480:	e7d8      	b.n	8013434 <__multiply+0x50>
 8013482:	f8b3 a000 	ldrh.w	sl, [r3]
 8013486:	f1ba 0f00 	cmp.w	sl, #0
 801348a:	d024      	beq.n	80134d6 <__multiply+0xf2>
 801348c:	f104 0e14 	add.w	lr, r4, #20
 8013490:	46a9      	mov	r9, r5
 8013492:	f04f 0c00 	mov.w	ip, #0
 8013496:	f85e 2b04 	ldr.w	r2, [lr], #4
 801349a:	f8d9 1000 	ldr.w	r1, [r9]
 801349e:	fa1f fb82 	uxth.w	fp, r2
 80134a2:	b289      	uxth	r1, r1
 80134a4:	fb0a 110b 	mla	r1, sl, fp, r1
 80134a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80134ac:	f8d9 2000 	ldr.w	r2, [r9]
 80134b0:	4461      	add	r1, ip
 80134b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80134b6:	fb0a c20b 	mla	r2, sl, fp, ip
 80134ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80134be:	b289      	uxth	r1, r1
 80134c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80134c4:	4577      	cmp	r7, lr
 80134c6:	f849 1b04 	str.w	r1, [r9], #4
 80134ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80134ce:	d8e2      	bhi.n	8013496 <__multiply+0xb2>
 80134d0:	9a01      	ldr	r2, [sp, #4]
 80134d2:	f845 c002 	str.w	ip, [r5, r2]
 80134d6:	9a03      	ldr	r2, [sp, #12]
 80134d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80134dc:	3304      	adds	r3, #4
 80134de:	f1b9 0f00 	cmp.w	r9, #0
 80134e2:	d020      	beq.n	8013526 <__multiply+0x142>
 80134e4:	6829      	ldr	r1, [r5, #0]
 80134e6:	f104 0c14 	add.w	ip, r4, #20
 80134ea:	46ae      	mov	lr, r5
 80134ec:	f04f 0a00 	mov.w	sl, #0
 80134f0:	f8bc b000 	ldrh.w	fp, [ip]
 80134f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80134f8:	fb09 220b 	mla	r2, r9, fp, r2
 80134fc:	4492      	add	sl, r2
 80134fe:	b289      	uxth	r1, r1
 8013500:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8013504:	f84e 1b04 	str.w	r1, [lr], #4
 8013508:	f85c 2b04 	ldr.w	r2, [ip], #4
 801350c:	f8be 1000 	ldrh.w	r1, [lr]
 8013510:	0c12      	lsrs	r2, r2, #16
 8013512:	fb09 1102 	mla	r1, r9, r2, r1
 8013516:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801351a:	4567      	cmp	r7, ip
 801351c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013520:	d8e6      	bhi.n	80134f0 <__multiply+0x10c>
 8013522:	9a01      	ldr	r2, [sp, #4]
 8013524:	50a9      	str	r1, [r5, r2]
 8013526:	3504      	adds	r5, #4
 8013528:	e79a      	b.n	8013460 <__multiply+0x7c>
 801352a:	3e01      	subs	r6, #1
 801352c:	e79c      	b.n	8013468 <__multiply+0x84>
 801352e:	bf00      	nop
 8013530:	08014f38 	.word	0x08014f38
 8013534:	08015028 	.word	0x08015028

08013538 <__pow5mult>:
 8013538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801353c:	4615      	mov	r5, r2
 801353e:	f012 0203 	ands.w	r2, r2, #3
 8013542:	4606      	mov	r6, r0
 8013544:	460f      	mov	r7, r1
 8013546:	d007      	beq.n	8013558 <__pow5mult+0x20>
 8013548:	4c25      	ldr	r4, [pc, #148]	; (80135e0 <__pow5mult+0xa8>)
 801354a:	3a01      	subs	r2, #1
 801354c:	2300      	movs	r3, #0
 801354e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013552:	f7ff fe51 	bl	80131f8 <__multadd>
 8013556:	4607      	mov	r7, r0
 8013558:	10ad      	asrs	r5, r5, #2
 801355a:	d03d      	beq.n	80135d8 <__pow5mult+0xa0>
 801355c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801355e:	b97c      	cbnz	r4, 8013580 <__pow5mult+0x48>
 8013560:	2010      	movs	r0, #16
 8013562:	f7fc faeb 	bl	800fb3c <malloc>
 8013566:	4602      	mov	r2, r0
 8013568:	6270      	str	r0, [r6, #36]	; 0x24
 801356a:	b928      	cbnz	r0, 8013578 <__pow5mult+0x40>
 801356c:	4b1d      	ldr	r3, [pc, #116]	; (80135e4 <__pow5mult+0xac>)
 801356e:	481e      	ldr	r0, [pc, #120]	; (80135e8 <__pow5mult+0xb0>)
 8013570:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013574:	f000 fe2e 	bl	80141d4 <__assert_func>
 8013578:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801357c:	6004      	str	r4, [r0, #0]
 801357e:	60c4      	str	r4, [r0, #12]
 8013580:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013584:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013588:	b94c      	cbnz	r4, 801359e <__pow5mult+0x66>
 801358a:	f240 2171 	movw	r1, #625	; 0x271
 801358e:	4630      	mov	r0, r6
 8013590:	f7ff ff12 	bl	80133b8 <__i2b>
 8013594:	2300      	movs	r3, #0
 8013596:	f8c8 0008 	str.w	r0, [r8, #8]
 801359a:	4604      	mov	r4, r0
 801359c:	6003      	str	r3, [r0, #0]
 801359e:	f04f 0900 	mov.w	r9, #0
 80135a2:	07eb      	lsls	r3, r5, #31
 80135a4:	d50a      	bpl.n	80135bc <__pow5mult+0x84>
 80135a6:	4639      	mov	r1, r7
 80135a8:	4622      	mov	r2, r4
 80135aa:	4630      	mov	r0, r6
 80135ac:	f7ff ff1a 	bl	80133e4 <__multiply>
 80135b0:	4639      	mov	r1, r7
 80135b2:	4680      	mov	r8, r0
 80135b4:	4630      	mov	r0, r6
 80135b6:	f7ff fdfd 	bl	80131b4 <_Bfree>
 80135ba:	4647      	mov	r7, r8
 80135bc:	106d      	asrs	r5, r5, #1
 80135be:	d00b      	beq.n	80135d8 <__pow5mult+0xa0>
 80135c0:	6820      	ldr	r0, [r4, #0]
 80135c2:	b938      	cbnz	r0, 80135d4 <__pow5mult+0x9c>
 80135c4:	4622      	mov	r2, r4
 80135c6:	4621      	mov	r1, r4
 80135c8:	4630      	mov	r0, r6
 80135ca:	f7ff ff0b 	bl	80133e4 <__multiply>
 80135ce:	6020      	str	r0, [r4, #0]
 80135d0:	f8c0 9000 	str.w	r9, [r0]
 80135d4:	4604      	mov	r4, r0
 80135d6:	e7e4      	b.n	80135a2 <__pow5mult+0x6a>
 80135d8:	4638      	mov	r0, r7
 80135da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80135de:	bf00      	nop
 80135e0:	08015178 	.word	0x08015178
 80135e4:	08014ec6 	.word	0x08014ec6
 80135e8:	08015028 	.word	0x08015028

080135ec <__lshift>:
 80135ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80135f0:	460c      	mov	r4, r1
 80135f2:	6849      	ldr	r1, [r1, #4]
 80135f4:	6923      	ldr	r3, [r4, #16]
 80135f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80135fa:	68a3      	ldr	r3, [r4, #8]
 80135fc:	4607      	mov	r7, r0
 80135fe:	4691      	mov	r9, r2
 8013600:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013604:	f108 0601 	add.w	r6, r8, #1
 8013608:	42b3      	cmp	r3, r6
 801360a:	db0b      	blt.n	8013624 <__lshift+0x38>
 801360c:	4638      	mov	r0, r7
 801360e:	f7ff fd91 	bl	8013134 <_Balloc>
 8013612:	4605      	mov	r5, r0
 8013614:	b948      	cbnz	r0, 801362a <__lshift+0x3e>
 8013616:	4602      	mov	r2, r0
 8013618:	4b2a      	ldr	r3, [pc, #168]	; (80136c4 <__lshift+0xd8>)
 801361a:	482b      	ldr	r0, [pc, #172]	; (80136c8 <__lshift+0xdc>)
 801361c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013620:	f000 fdd8 	bl	80141d4 <__assert_func>
 8013624:	3101      	adds	r1, #1
 8013626:	005b      	lsls	r3, r3, #1
 8013628:	e7ee      	b.n	8013608 <__lshift+0x1c>
 801362a:	2300      	movs	r3, #0
 801362c:	f100 0114 	add.w	r1, r0, #20
 8013630:	f100 0210 	add.w	r2, r0, #16
 8013634:	4618      	mov	r0, r3
 8013636:	4553      	cmp	r3, sl
 8013638:	db37      	blt.n	80136aa <__lshift+0xbe>
 801363a:	6920      	ldr	r0, [r4, #16]
 801363c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013640:	f104 0314 	add.w	r3, r4, #20
 8013644:	f019 091f 	ands.w	r9, r9, #31
 8013648:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801364c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013650:	d02f      	beq.n	80136b2 <__lshift+0xc6>
 8013652:	f1c9 0e20 	rsb	lr, r9, #32
 8013656:	468a      	mov	sl, r1
 8013658:	f04f 0c00 	mov.w	ip, #0
 801365c:	681a      	ldr	r2, [r3, #0]
 801365e:	fa02 f209 	lsl.w	r2, r2, r9
 8013662:	ea42 020c 	orr.w	r2, r2, ip
 8013666:	f84a 2b04 	str.w	r2, [sl], #4
 801366a:	f853 2b04 	ldr.w	r2, [r3], #4
 801366e:	4298      	cmp	r0, r3
 8013670:	fa22 fc0e 	lsr.w	ip, r2, lr
 8013674:	d8f2      	bhi.n	801365c <__lshift+0x70>
 8013676:	1b03      	subs	r3, r0, r4
 8013678:	3b15      	subs	r3, #21
 801367a:	f023 0303 	bic.w	r3, r3, #3
 801367e:	3304      	adds	r3, #4
 8013680:	f104 0215 	add.w	r2, r4, #21
 8013684:	4290      	cmp	r0, r2
 8013686:	bf38      	it	cc
 8013688:	2304      	movcc	r3, #4
 801368a:	f841 c003 	str.w	ip, [r1, r3]
 801368e:	f1bc 0f00 	cmp.w	ip, #0
 8013692:	d001      	beq.n	8013698 <__lshift+0xac>
 8013694:	f108 0602 	add.w	r6, r8, #2
 8013698:	3e01      	subs	r6, #1
 801369a:	4638      	mov	r0, r7
 801369c:	612e      	str	r6, [r5, #16]
 801369e:	4621      	mov	r1, r4
 80136a0:	f7ff fd88 	bl	80131b4 <_Bfree>
 80136a4:	4628      	mov	r0, r5
 80136a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80136ae:	3301      	adds	r3, #1
 80136b0:	e7c1      	b.n	8013636 <__lshift+0x4a>
 80136b2:	3904      	subs	r1, #4
 80136b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80136b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80136bc:	4298      	cmp	r0, r3
 80136be:	d8f9      	bhi.n	80136b4 <__lshift+0xc8>
 80136c0:	e7ea      	b.n	8013698 <__lshift+0xac>
 80136c2:	bf00      	nop
 80136c4:	08014f38 	.word	0x08014f38
 80136c8:	08015028 	.word	0x08015028

080136cc <__mcmp>:
 80136cc:	b530      	push	{r4, r5, lr}
 80136ce:	6902      	ldr	r2, [r0, #16]
 80136d0:	690c      	ldr	r4, [r1, #16]
 80136d2:	1b12      	subs	r2, r2, r4
 80136d4:	d10e      	bne.n	80136f4 <__mcmp+0x28>
 80136d6:	f100 0314 	add.w	r3, r0, #20
 80136da:	3114      	adds	r1, #20
 80136dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80136e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80136e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80136e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80136ec:	42a5      	cmp	r5, r4
 80136ee:	d003      	beq.n	80136f8 <__mcmp+0x2c>
 80136f0:	d305      	bcc.n	80136fe <__mcmp+0x32>
 80136f2:	2201      	movs	r2, #1
 80136f4:	4610      	mov	r0, r2
 80136f6:	bd30      	pop	{r4, r5, pc}
 80136f8:	4283      	cmp	r3, r0
 80136fa:	d3f3      	bcc.n	80136e4 <__mcmp+0x18>
 80136fc:	e7fa      	b.n	80136f4 <__mcmp+0x28>
 80136fe:	f04f 32ff 	mov.w	r2, #4294967295
 8013702:	e7f7      	b.n	80136f4 <__mcmp+0x28>

08013704 <__mdiff>:
 8013704:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013708:	460c      	mov	r4, r1
 801370a:	4606      	mov	r6, r0
 801370c:	4611      	mov	r1, r2
 801370e:	4620      	mov	r0, r4
 8013710:	4690      	mov	r8, r2
 8013712:	f7ff ffdb 	bl	80136cc <__mcmp>
 8013716:	1e05      	subs	r5, r0, #0
 8013718:	d110      	bne.n	801373c <__mdiff+0x38>
 801371a:	4629      	mov	r1, r5
 801371c:	4630      	mov	r0, r6
 801371e:	f7ff fd09 	bl	8013134 <_Balloc>
 8013722:	b930      	cbnz	r0, 8013732 <__mdiff+0x2e>
 8013724:	4b3a      	ldr	r3, [pc, #232]	; (8013810 <__mdiff+0x10c>)
 8013726:	4602      	mov	r2, r0
 8013728:	f240 2132 	movw	r1, #562	; 0x232
 801372c:	4839      	ldr	r0, [pc, #228]	; (8013814 <__mdiff+0x110>)
 801372e:	f000 fd51 	bl	80141d4 <__assert_func>
 8013732:	2301      	movs	r3, #1
 8013734:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013738:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801373c:	bfa4      	itt	ge
 801373e:	4643      	movge	r3, r8
 8013740:	46a0      	movge	r8, r4
 8013742:	4630      	mov	r0, r6
 8013744:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013748:	bfa6      	itte	ge
 801374a:	461c      	movge	r4, r3
 801374c:	2500      	movge	r5, #0
 801374e:	2501      	movlt	r5, #1
 8013750:	f7ff fcf0 	bl	8013134 <_Balloc>
 8013754:	b920      	cbnz	r0, 8013760 <__mdiff+0x5c>
 8013756:	4b2e      	ldr	r3, [pc, #184]	; (8013810 <__mdiff+0x10c>)
 8013758:	4602      	mov	r2, r0
 801375a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801375e:	e7e5      	b.n	801372c <__mdiff+0x28>
 8013760:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013764:	6926      	ldr	r6, [r4, #16]
 8013766:	60c5      	str	r5, [r0, #12]
 8013768:	f104 0914 	add.w	r9, r4, #20
 801376c:	f108 0514 	add.w	r5, r8, #20
 8013770:	f100 0e14 	add.w	lr, r0, #20
 8013774:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8013778:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801377c:	f108 0210 	add.w	r2, r8, #16
 8013780:	46f2      	mov	sl, lr
 8013782:	2100      	movs	r1, #0
 8013784:	f859 3b04 	ldr.w	r3, [r9], #4
 8013788:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801378c:	fa1f f883 	uxth.w	r8, r3
 8013790:	fa11 f18b 	uxtah	r1, r1, fp
 8013794:	0c1b      	lsrs	r3, r3, #16
 8013796:	eba1 0808 	sub.w	r8, r1, r8
 801379a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801379e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80137a2:	fa1f f888 	uxth.w	r8, r8
 80137a6:	1419      	asrs	r1, r3, #16
 80137a8:	454e      	cmp	r6, r9
 80137aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80137ae:	f84a 3b04 	str.w	r3, [sl], #4
 80137b2:	d8e7      	bhi.n	8013784 <__mdiff+0x80>
 80137b4:	1b33      	subs	r3, r6, r4
 80137b6:	3b15      	subs	r3, #21
 80137b8:	f023 0303 	bic.w	r3, r3, #3
 80137bc:	3304      	adds	r3, #4
 80137be:	3415      	adds	r4, #21
 80137c0:	42a6      	cmp	r6, r4
 80137c2:	bf38      	it	cc
 80137c4:	2304      	movcc	r3, #4
 80137c6:	441d      	add	r5, r3
 80137c8:	4473      	add	r3, lr
 80137ca:	469e      	mov	lr, r3
 80137cc:	462e      	mov	r6, r5
 80137ce:	4566      	cmp	r6, ip
 80137d0:	d30e      	bcc.n	80137f0 <__mdiff+0xec>
 80137d2:	f10c 0203 	add.w	r2, ip, #3
 80137d6:	1b52      	subs	r2, r2, r5
 80137d8:	f022 0203 	bic.w	r2, r2, #3
 80137dc:	3d03      	subs	r5, #3
 80137de:	45ac      	cmp	ip, r5
 80137e0:	bf38      	it	cc
 80137e2:	2200      	movcc	r2, #0
 80137e4:	441a      	add	r2, r3
 80137e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80137ea:	b17b      	cbz	r3, 801380c <__mdiff+0x108>
 80137ec:	6107      	str	r7, [r0, #16]
 80137ee:	e7a3      	b.n	8013738 <__mdiff+0x34>
 80137f0:	f856 8b04 	ldr.w	r8, [r6], #4
 80137f4:	fa11 f288 	uxtah	r2, r1, r8
 80137f8:	1414      	asrs	r4, r2, #16
 80137fa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80137fe:	b292      	uxth	r2, r2
 8013800:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013804:	f84e 2b04 	str.w	r2, [lr], #4
 8013808:	1421      	asrs	r1, r4, #16
 801380a:	e7e0      	b.n	80137ce <__mdiff+0xca>
 801380c:	3f01      	subs	r7, #1
 801380e:	e7ea      	b.n	80137e6 <__mdiff+0xe2>
 8013810:	08014f38 	.word	0x08014f38
 8013814:	08015028 	.word	0x08015028

08013818 <__ulp>:
 8013818:	b082      	sub	sp, #8
 801381a:	ed8d 0b00 	vstr	d0, [sp]
 801381e:	9b01      	ldr	r3, [sp, #4]
 8013820:	4912      	ldr	r1, [pc, #72]	; (801386c <__ulp+0x54>)
 8013822:	4019      	ands	r1, r3
 8013824:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8013828:	2900      	cmp	r1, #0
 801382a:	dd05      	ble.n	8013838 <__ulp+0x20>
 801382c:	2200      	movs	r2, #0
 801382e:	460b      	mov	r3, r1
 8013830:	ec43 2b10 	vmov	d0, r2, r3
 8013834:	b002      	add	sp, #8
 8013836:	4770      	bx	lr
 8013838:	4249      	negs	r1, r1
 801383a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801383e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8013842:	f04f 0200 	mov.w	r2, #0
 8013846:	f04f 0300 	mov.w	r3, #0
 801384a:	da04      	bge.n	8013856 <__ulp+0x3e>
 801384c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8013850:	fa41 f300 	asr.w	r3, r1, r0
 8013854:	e7ec      	b.n	8013830 <__ulp+0x18>
 8013856:	f1a0 0114 	sub.w	r1, r0, #20
 801385a:	291e      	cmp	r1, #30
 801385c:	bfda      	itte	le
 801385e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8013862:	fa20 f101 	lsrle.w	r1, r0, r1
 8013866:	2101      	movgt	r1, #1
 8013868:	460a      	mov	r2, r1
 801386a:	e7e1      	b.n	8013830 <__ulp+0x18>
 801386c:	7ff00000 	.word	0x7ff00000

08013870 <__b2d>:
 8013870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013872:	6905      	ldr	r5, [r0, #16]
 8013874:	f100 0714 	add.w	r7, r0, #20
 8013878:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801387c:	1f2e      	subs	r6, r5, #4
 801387e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8013882:	4620      	mov	r0, r4
 8013884:	f7ff fd48 	bl	8013318 <__hi0bits>
 8013888:	f1c0 0320 	rsb	r3, r0, #32
 801388c:	280a      	cmp	r0, #10
 801388e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801390c <__b2d+0x9c>
 8013892:	600b      	str	r3, [r1, #0]
 8013894:	dc14      	bgt.n	80138c0 <__b2d+0x50>
 8013896:	f1c0 0e0b 	rsb	lr, r0, #11
 801389a:	fa24 f10e 	lsr.w	r1, r4, lr
 801389e:	42b7      	cmp	r7, r6
 80138a0:	ea41 030c 	orr.w	r3, r1, ip
 80138a4:	bf34      	ite	cc
 80138a6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80138aa:	2100      	movcs	r1, #0
 80138ac:	3015      	adds	r0, #21
 80138ae:	fa04 f000 	lsl.w	r0, r4, r0
 80138b2:	fa21 f10e 	lsr.w	r1, r1, lr
 80138b6:	ea40 0201 	orr.w	r2, r0, r1
 80138ba:	ec43 2b10 	vmov	d0, r2, r3
 80138be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80138c0:	42b7      	cmp	r7, r6
 80138c2:	bf3a      	itte	cc
 80138c4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80138c8:	f1a5 0608 	subcc.w	r6, r5, #8
 80138cc:	2100      	movcs	r1, #0
 80138ce:	380b      	subs	r0, #11
 80138d0:	d017      	beq.n	8013902 <__b2d+0x92>
 80138d2:	f1c0 0c20 	rsb	ip, r0, #32
 80138d6:	fa04 f500 	lsl.w	r5, r4, r0
 80138da:	42be      	cmp	r6, r7
 80138dc:	fa21 f40c 	lsr.w	r4, r1, ip
 80138e0:	ea45 0504 	orr.w	r5, r5, r4
 80138e4:	bf8c      	ite	hi
 80138e6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80138ea:	2400      	movls	r4, #0
 80138ec:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80138f0:	fa01 f000 	lsl.w	r0, r1, r0
 80138f4:	fa24 f40c 	lsr.w	r4, r4, ip
 80138f8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80138fc:	ea40 0204 	orr.w	r2, r0, r4
 8013900:	e7db      	b.n	80138ba <__b2d+0x4a>
 8013902:	ea44 030c 	orr.w	r3, r4, ip
 8013906:	460a      	mov	r2, r1
 8013908:	e7d7      	b.n	80138ba <__b2d+0x4a>
 801390a:	bf00      	nop
 801390c:	3ff00000 	.word	0x3ff00000

08013910 <__d2b>:
 8013910:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013914:	4689      	mov	r9, r1
 8013916:	2101      	movs	r1, #1
 8013918:	ec57 6b10 	vmov	r6, r7, d0
 801391c:	4690      	mov	r8, r2
 801391e:	f7ff fc09 	bl	8013134 <_Balloc>
 8013922:	4604      	mov	r4, r0
 8013924:	b930      	cbnz	r0, 8013934 <__d2b+0x24>
 8013926:	4602      	mov	r2, r0
 8013928:	4b25      	ldr	r3, [pc, #148]	; (80139c0 <__d2b+0xb0>)
 801392a:	4826      	ldr	r0, [pc, #152]	; (80139c4 <__d2b+0xb4>)
 801392c:	f240 310a 	movw	r1, #778	; 0x30a
 8013930:	f000 fc50 	bl	80141d4 <__assert_func>
 8013934:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013938:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801393c:	bb35      	cbnz	r5, 801398c <__d2b+0x7c>
 801393e:	2e00      	cmp	r6, #0
 8013940:	9301      	str	r3, [sp, #4]
 8013942:	d028      	beq.n	8013996 <__d2b+0x86>
 8013944:	4668      	mov	r0, sp
 8013946:	9600      	str	r6, [sp, #0]
 8013948:	f7ff fd06 	bl	8013358 <__lo0bits>
 801394c:	9900      	ldr	r1, [sp, #0]
 801394e:	b300      	cbz	r0, 8013992 <__d2b+0x82>
 8013950:	9a01      	ldr	r2, [sp, #4]
 8013952:	f1c0 0320 	rsb	r3, r0, #32
 8013956:	fa02 f303 	lsl.w	r3, r2, r3
 801395a:	430b      	orrs	r3, r1
 801395c:	40c2      	lsrs	r2, r0
 801395e:	6163      	str	r3, [r4, #20]
 8013960:	9201      	str	r2, [sp, #4]
 8013962:	9b01      	ldr	r3, [sp, #4]
 8013964:	61a3      	str	r3, [r4, #24]
 8013966:	2b00      	cmp	r3, #0
 8013968:	bf14      	ite	ne
 801396a:	2202      	movne	r2, #2
 801396c:	2201      	moveq	r2, #1
 801396e:	6122      	str	r2, [r4, #16]
 8013970:	b1d5      	cbz	r5, 80139a8 <__d2b+0x98>
 8013972:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013976:	4405      	add	r5, r0
 8013978:	f8c9 5000 	str.w	r5, [r9]
 801397c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013980:	f8c8 0000 	str.w	r0, [r8]
 8013984:	4620      	mov	r0, r4
 8013986:	b003      	add	sp, #12
 8013988:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801398c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013990:	e7d5      	b.n	801393e <__d2b+0x2e>
 8013992:	6161      	str	r1, [r4, #20]
 8013994:	e7e5      	b.n	8013962 <__d2b+0x52>
 8013996:	a801      	add	r0, sp, #4
 8013998:	f7ff fcde 	bl	8013358 <__lo0bits>
 801399c:	9b01      	ldr	r3, [sp, #4]
 801399e:	6163      	str	r3, [r4, #20]
 80139a0:	2201      	movs	r2, #1
 80139a2:	6122      	str	r2, [r4, #16]
 80139a4:	3020      	adds	r0, #32
 80139a6:	e7e3      	b.n	8013970 <__d2b+0x60>
 80139a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80139ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80139b0:	f8c9 0000 	str.w	r0, [r9]
 80139b4:	6918      	ldr	r0, [r3, #16]
 80139b6:	f7ff fcaf 	bl	8013318 <__hi0bits>
 80139ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80139be:	e7df      	b.n	8013980 <__d2b+0x70>
 80139c0:	08014f38 	.word	0x08014f38
 80139c4:	08015028 	.word	0x08015028

080139c8 <__ratio>:
 80139c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139cc:	4688      	mov	r8, r1
 80139ce:	4669      	mov	r1, sp
 80139d0:	4681      	mov	r9, r0
 80139d2:	f7ff ff4d 	bl	8013870 <__b2d>
 80139d6:	a901      	add	r1, sp, #4
 80139d8:	4640      	mov	r0, r8
 80139da:	ec55 4b10 	vmov	r4, r5, d0
 80139de:	ee10 aa10 	vmov	sl, s0
 80139e2:	f7ff ff45 	bl	8013870 <__b2d>
 80139e6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80139ea:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80139ee:	1a59      	subs	r1, r3, r1
 80139f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80139f4:	1ad3      	subs	r3, r2, r3
 80139f6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80139fa:	ec57 6b10 	vmov	r6, r7, d0
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	bfd6      	itet	le
 8013a02:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013a06:	462a      	movgt	r2, r5
 8013a08:	463a      	movle	r2, r7
 8013a0a:	46ab      	mov	fp, r5
 8013a0c:	bfd6      	itet	le
 8013a0e:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8013a12:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8013a16:	ee00 3a90 	vmovle	s1, r3
 8013a1a:	ec4b ab17 	vmov	d7, sl, fp
 8013a1e:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8013a22:	b003      	add	sp, #12
 8013a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013a28 <__copybits>:
 8013a28:	3901      	subs	r1, #1
 8013a2a:	b570      	push	{r4, r5, r6, lr}
 8013a2c:	1149      	asrs	r1, r1, #5
 8013a2e:	6914      	ldr	r4, [r2, #16]
 8013a30:	3101      	adds	r1, #1
 8013a32:	f102 0314 	add.w	r3, r2, #20
 8013a36:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013a3a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013a3e:	1f05      	subs	r5, r0, #4
 8013a40:	42a3      	cmp	r3, r4
 8013a42:	d30c      	bcc.n	8013a5e <__copybits+0x36>
 8013a44:	1aa3      	subs	r3, r4, r2
 8013a46:	3b11      	subs	r3, #17
 8013a48:	f023 0303 	bic.w	r3, r3, #3
 8013a4c:	3211      	adds	r2, #17
 8013a4e:	42a2      	cmp	r2, r4
 8013a50:	bf88      	it	hi
 8013a52:	2300      	movhi	r3, #0
 8013a54:	4418      	add	r0, r3
 8013a56:	2300      	movs	r3, #0
 8013a58:	4288      	cmp	r0, r1
 8013a5a:	d305      	bcc.n	8013a68 <__copybits+0x40>
 8013a5c:	bd70      	pop	{r4, r5, r6, pc}
 8013a5e:	f853 6b04 	ldr.w	r6, [r3], #4
 8013a62:	f845 6f04 	str.w	r6, [r5, #4]!
 8013a66:	e7eb      	b.n	8013a40 <__copybits+0x18>
 8013a68:	f840 3b04 	str.w	r3, [r0], #4
 8013a6c:	e7f4      	b.n	8013a58 <__copybits+0x30>

08013a6e <__any_on>:
 8013a6e:	f100 0214 	add.w	r2, r0, #20
 8013a72:	6900      	ldr	r0, [r0, #16]
 8013a74:	114b      	asrs	r3, r1, #5
 8013a76:	4298      	cmp	r0, r3
 8013a78:	b510      	push	{r4, lr}
 8013a7a:	db11      	blt.n	8013aa0 <__any_on+0x32>
 8013a7c:	dd0a      	ble.n	8013a94 <__any_on+0x26>
 8013a7e:	f011 011f 	ands.w	r1, r1, #31
 8013a82:	d007      	beq.n	8013a94 <__any_on+0x26>
 8013a84:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013a88:	fa24 f001 	lsr.w	r0, r4, r1
 8013a8c:	fa00 f101 	lsl.w	r1, r0, r1
 8013a90:	428c      	cmp	r4, r1
 8013a92:	d10b      	bne.n	8013aac <__any_on+0x3e>
 8013a94:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013a98:	4293      	cmp	r3, r2
 8013a9a:	d803      	bhi.n	8013aa4 <__any_on+0x36>
 8013a9c:	2000      	movs	r0, #0
 8013a9e:	bd10      	pop	{r4, pc}
 8013aa0:	4603      	mov	r3, r0
 8013aa2:	e7f7      	b.n	8013a94 <__any_on+0x26>
 8013aa4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013aa8:	2900      	cmp	r1, #0
 8013aaa:	d0f5      	beq.n	8013a98 <__any_on+0x2a>
 8013aac:	2001      	movs	r0, #1
 8013aae:	e7f6      	b.n	8013a9e <__any_on+0x30>

08013ab0 <_calloc_r>:
 8013ab0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013ab2:	fba1 2402 	umull	r2, r4, r1, r2
 8013ab6:	b94c      	cbnz	r4, 8013acc <_calloc_r+0x1c>
 8013ab8:	4611      	mov	r1, r2
 8013aba:	9201      	str	r2, [sp, #4]
 8013abc:	f7fc f8c8 	bl	800fc50 <_malloc_r>
 8013ac0:	9a01      	ldr	r2, [sp, #4]
 8013ac2:	4605      	mov	r5, r0
 8013ac4:	b930      	cbnz	r0, 8013ad4 <_calloc_r+0x24>
 8013ac6:	4628      	mov	r0, r5
 8013ac8:	b003      	add	sp, #12
 8013aca:	bd30      	pop	{r4, r5, pc}
 8013acc:	220c      	movs	r2, #12
 8013ace:	6002      	str	r2, [r0, #0]
 8013ad0:	2500      	movs	r5, #0
 8013ad2:	e7f8      	b.n	8013ac6 <_calloc_r+0x16>
 8013ad4:	4621      	mov	r1, r4
 8013ad6:	f7fc f847 	bl	800fb68 <memset>
 8013ada:	e7f4      	b.n	8013ac6 <_calloc_r+0x16>

08013adc <__ssputs_r>:
 8013adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ae0:	688e      	ldr	r6, [r1, #8]
 8013ae2:	429e      	cmp	r6, r3
 8013ae4:	4682      	mov	sl, r0
 8013ae6:	460c      	mov	r4, r1
 8013ae8:	4690      	mov	r8, r2
 8013aea:	461f      	mov	r7, r3
 8013aec:	d838      	bhi.n	8013b60 <__ssputs_r+0x84>
 8013aee:	898a      	ldrh	r2, [r1, #12]
 8013af0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013af4:	d032      	beq.n	8013b5c <__ssputs_r+0x80>
 8013af6:	6825      	ldr	r5, [r4, #0]
 8013af8:	6909      	ldr	r1, [r1, #16]
 8013afa:	eba5 0901 	sub.w	r9, r5, r1
 8013afe:	6965      	ldr	r5, [r4, #20]
 8013b00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013b04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013b08:	3301      	adds	r3, #1
 8013b0a:	444b      	add	r3, r9
 8013b0c:	106d      	asrs	r5, r5, #1
 8013b0e:	429d      	cmp	r5, r3
 8013b10:	bf38      	it	cc
 8013b12:	461d      	movcc	r5, r3
 8013b14:	0553      	lsls	r3, r2, #21
 8013b16:	d531      	bpl.n	8013b7c <__ssputs_r+0xa0>
 8013b18:	4629      	mov	r1, r5
 8013b1a:	f7fc f899 	bl	800fc50 <_malloc_r>
 8013b1e:	4606      	mov	r6, r0
 8013b20:	b950      	cbnz	r0, 8013b38 <__ssputs_r+0x5c>
 8013b22:	230c      	movs	r3, #12
 8013b24:	f8ca 3000 	str.w	r3, [sl]
 8013b28:	89a3      	ldrh	r3, [r4, #12]
 8013b2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013b2e:	81a3      	strh	r3, [r4, #12]
 8013b30:	f04f 30ff 	mov.w	r0, #4294967295
 8013b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b38:	6921      	ldr	r1, [r4, #16]
 8013b3a:	464a      	mov	r2, r9
 8013b3c:	f7fc f806 	bl	800fb4c <memcpy>
 8013b40:	89a3      	ldrh	r3, [r4, #12]
 8013b42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013b4a:	81a3      	strh	r3, [r4, #12]
 8013b4c:	6126      	str	r6, [r4, #16]
 8013b4e:	6165      	str	r5, [r4, #20]
 8013b50:	444e      	add	r6, r9
 8013b52:	eba5 0509 	sub.w	r5, r5, r9
 8013b56:	6026      	str	r6, [r4, #0]
 8013b58:	60a5      	str	r5, [r4, #8]
 8013b5a:	463e      	mov	r6, r7
 8013b5c:	42be      	cmp	r6, r7
 8013b5e:	d900      	bls.n	8013b62 <__ssputs_r+0x86>
 8013b60:	463e      	mov	r6, r7
 8013b62:	6820      	ldr	r0, [r4, #0]
 8013b64:	4632      	mov	r2, r6
 8013b66:	4641      	mov	r1, r8
 8013b68:	f000 fba8 	bl	80142bc <memmove>
 8013b6c:	68a3      	ldr	r3, [r4, #8]
 8013b6e:	1b9b      	subs	r3, r3, r6
 8013b70:	60a3      	str	r3, [r4, #8]
 8013b72:	6823      	ldr	r3, [r4, #0]
 8013b74:	4433      	add	r3, r6
 8013b76:	6023      	str	r3, [r4, #0]
 8013b78:	2000      	movs	r0, #0
 8013b7a:	e7db      	b.n	8013b34 <__ssputs_r+0x58>
 8013b7c:	462a      	mov	r2, r5
 8013b7e:	f000 fbb7 	bl	80142f0 <_realloc_r>
 8013b82:	4606      	mov	r6, r0
 8013b84:	2800      	cmp	r0, #0
 8013b86:	d1e1      	bne.n	8013b4c <__ssputs_r+0x70>
 8013b88:	6921      	ldr	r1, [r4, #16]
 8013b8a:	4650      	mov	r0, sl
 8013b8c:	f7fb fff4 	bl	800fb78 <_free_r>
 8013b90:	e7c7      	b.n	8013b22 <__ssputs_r+0x46>
	...

08013b94 <_svfiprintf_r>:
 8013b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b98:	4698      	mov	r8, r3
 8013b9a:	898b      	ldrh	r3, [r1, #12]
 8013b9c:	061b      	lsls	r3, r3, #24
 8013b9e:	b09d      	sub	sp, #116	; 0x74
 8013ba0:	4607      	mov	r7, r0
 8013ba2:	460d      	mov	r5, r1
 8013ba4:	4614      	mov	r4, r2
 8013ba6:	d50e      	bpl.n	8013bc6 <_svfiprintf_r+0x32>
 8013ba8:	690b      	ldr	r3, [r1, #16]
 8013baa:	b963      	cbnz	r3, 8013bc6 <_svfiprintf_r+0x32>
 8013bac:	2140      	movs	r1, #64	; 0x40
 8013bae:	f7fc f84f 	bl	800fc50 <_malloc_r>
 8013bb2:	6028      	str	r0, [r5, #0]
 8013bb4:	6128      	str	r0, [r5, #16]
 8013bb6:	b920      	cbnz	r0, 8013bc2 <_svfiprintf_r+0x2e>
 8013bb8:	230c      	movs	r3, #12
 8013bba:	603b      	str	r3, [r7, #0]
 8013bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8013bc0:	e0d1      	b.n	8013d66 <_svfiprintf_r+0x1d2>
 8013bc2:	2340      	movs	r3, #64	; 0x40
 8013bc4:	616b      	str	r3, [r5, #20]
 8013bc6:	2300      	movs	r3, #0
 8013bc8:	9309      	str	r3, [sp, #36]	; 0x24
 8013bca:	2320      	movs	r3, #32
 8013bcc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013bd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8013bd4:	2330      	movs	r3, #48	; 0x30
 8013bd6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013d80 <_svfiprintf_r+0x1ec>
 8013bda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013bde:	f04f 0901 	mov.w	r9, #1
 8013be2:	4623      	mov	r3, r4
 8013be4:	469a      	mov	sl, r3
 8013be6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013bea:	b10a      	cbz	r2, 8013bf0 <_svfiprintf_r+0x5c>
 8013bec:	2a25      	cmp	r2, #37	; 0x25
 8013bee:	d1f9      	bne.n	8013be4 <_svfiprintf_r+0x50>
 8013bf0:	ebba 0b04 	subs.w	fp, sl, r4
 8013bf4:	d00b      	beq.n	8013c0e <_svfiprintf_r+0x7a>
 8013bf6:	465b      	mov	r3, fp
 8013bf8:	4622      	mov	r2, r4
 8013bfa:	4629      	mov	r1, r5
 8013bfc:	4638      	mov	r0, r7
 8013bfe:	f7ff ff6d 	bl	8013adc <__ssputs_r>
 8013c02:	3001      	adds	r0, #1
 8013c04:	f000 80aa 	beq.w	8013d5c <_svfiprintf_r+0x1c8>
 8013c08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013c0a:	445a      	add	r2, fp
 8013c0c:	9209      	str	r2, [sp, #36]	; 0x24
 8013c0e:	f89a 3000 	ldrb.w	r3, [sl]
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	f000 80a2 	beq.w	8013d5c <_svfiprintf_r+0x1c8>
 8013c18:	2300      	movs	r3, #0
 8013c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8013c1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013c22:	f10a 0a01 	add.w	sl, sl, #1
 8013c26:	9304      	str	r3, [sp, #16]
 8013c28:	9307      	str	r3, [sp, #28]
 8013c2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013c2e:	931a      	str	r3, [sp, #104]	; 0x68
 8013c30:	4654      	mov	r4, sl
 8013c32:	2205      	movs	r2, #5
 8013c34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c38:	4851      	ldr	r0, [pc, #324]	; (8013d80 <_svfiprintf_r+0x1ec>)
 8013c3a:	f7ec fb09 	bl	8000250 <memchr>
 8013c3e:	9a04      	ldr	r2, [sp, #16]
 8013c40:	b9d8      	cbnz	r0, 8013c7a <_svfiprintf_r+0xe6>
 8013c42:	06d0      	lsls	r0, r2, #27
 8013c44:	bf44      	itt	mi
 8013c46:	2320      	movmi	r3, #32
 8013c48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013c4c:	0711      	lsls	r1, r2, #28
 8013c4e:	bf44      	itt	mi
 8013c50:	232b      	movmi	r3, #43	; 0x2b
 8013c52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013c56:	f89a 3000 	ldrb.w	r3, [sl]
 8013c5a:	2b2a      	cmp	r3, #42	; 0x2a
 8013c5c:	d015      	beq.n	8013c8a <_svfiprintf_r+0xf6>
 8013c5e:	9a07      	ldr	r2, [sp, #28]
 8013c60:	4654      	mov	r4, sl
 8013c62:	2000      	movs	r0, #0
 8013c64:	f04f 0c0a 	mov.w	ip, #10
 8013c68:	4621      	mov	r1, r4
 8013c6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013c6e:	3b30      	subs	r3, #48	; 0x30
 8013c70:	2b09      	cmp	r3, #9
 8013c72:	d94e      	bls.n	8013d12 <_svfiprintf_r+0x17e>
 8013c74:	b1b0      	cbz	r0, 8013ca4 <_svfiprintf_r+0x110>
 8013c76:	9207      	str	r2, [sp, #28]
 8013c78:	e014      	b.n	8013ca4 <_svfiprintf_r+0x110>
 8013c7a:	eba0 0308 	sub.w	r3, r0, r8
 8013c7e:	fa09 f303 	lsl.w	r3, r9, r3
 8013c82:	4313      	orrs	r3, r2
 8013c84:	9304      	str	r3, [sp, #16]
 8013c86:	46a2      	mov	sl, r4
 8013c88:	e7d2      	b.n	8013c30 <_svfiprintf_r+0x9c>
 8013c8a:	9b03      	ldr	r3, [sp, #12]
 8013c8c:	1d19      	adds	r1, r3, #4
 8013c8e:	681b      	ldr	r3, [r3, #0]
 8013c90:	9103      	str	r1, [sp, #12]
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	bfbb      	ittet	lt
 8013c96:	425b      	neglt	r3, r3
 8013c98:	f042 0202 	orrlt.w	r2, r2, #2
 8013c9c:	9307      	strge	r3, [sp, #28]
 8013c9e:	9307      	strlt	r3, [sp, #28]
 8013ca0:	bfb8      	it	lt
 8013ca2:	9204      	strlt	r2, [sp, #16]
 8013ca4:	7823      	ldrb	r3, [r4, #0]
 8013ca6:	2b2e      	cmp	r3, #46	; 0x2e
 8013ca8:	d10c      	bne.n	8013cc4 <_svfiprintf_r+0x130>
 8013caa:	7863      	ldrb	r3, [r4, #1]
 8013cac:	2b2a      	cmp	r3, #42	; 0x2a
 8013cae:	d135      	bne.n	8013d1c <_svfiprintf_r+0x188>
 8013cb0:	9b03      	ldr	r3, [sp, #12]
 8013cb2:	1d1a      	adds	r2, r3, #4
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	9203      	str	r2, [sp, #12]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	bfb8      	it	lt
 8013cbc:	f04f 33ff 	movlt.w	r3, #4294967295
 8013cc0:	3402      	adds	r4, #2
 8013cc2:	9305      	str	r3, [sp, #20]
 8013cc4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013d90 <_svfiprintf_r+0x1fc>
 8013cc8:	7821      	ldrb	r1, [r4, #0]
 8013cca:	2203      	movs	r2, #3
 8013ccc:	4650      	mov	r0, sl
 8013cce:	f7ec fabf 	bl	8000250 <memchr>
 8013cd2:	b140      	cbz	r0, 8013ce6 <_svfiprintf_r+0x152>
 8013cd4:	2340      	movs	r3, #64	; 0x40
 8013cd6:	eba0 000a 	sub.w	r0, r0, sl
 8013cda:	fa03 f000 	lsl.w	r0, r3, r0
 8013cde:	9b04      	ldr	r3, [sp, #16]
 8013ce0:	4303      	orrs	r3, r0
 8013ce2:	3401      	adds	r4, #1
 8013ce4:	9304      	str	r3, [sp, #16]
 8013ce6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013cea:	4826      	ldr	r0, [pc, #152]	; (8013d84 <_svfiprintf_r+0x1f0>)
 8013cec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013cf0:	2206      	movs	r2, #6
 8013cf2:	f7ec faad 	bl	8000250 <memchr>
 8013cf6:	2800      	cmp	r0, #0
 8013cf8:	d038      	beq.n	8013d6c <_svfiprintf_r+0x1d8>
 8013cfa:	4b23      	ldr	r3, [pc, #140]	; (8013d88 <_svfiprintf_r+0x1f4>)
 8013cfc:	bb1b      	cbnz	r3, 8013d46 <_svfiprintf_r+0x1b2>
 8013cfe:	9b03      	ldr	r3, [sp, #12]
 8013d00:	3307      	adds	r3, #7
 8013d02:	f023 0307 	bic.w	r3, r3, #7
 8013d06:	3308      	adds	r3, #8
 8013d08:	9303      	str	r3, [sp, #12]
 8013d0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d0c:	4433      	add	r3, r6
 8013d0e:	9309      	str	r3, [sp, #36]	; 0x24
 8013d10:	e767      	b.n	8013be2 <_svfiprintf_r+0x4e>
 8013d12:	fb0c 3202 	mla	r2, ip, r2, r3
 8013d16:	460c      	mov	r4, r1
 8013d18:	2001      	movs	r0, #1
 8013d1a:	e7a5      	b.n	8013c68 <_svfiprintf_r+0xd4>
 8013d1c:	2300      	movs	r3, #0
 8013d1e:	3401      	adds	r4, #1
 8013d20:	9305      	str	r3, [sp, #20]
 8013d22:	4619      	mov	r1, r3
 8013d24:	f04f 0c0a 	mov.w	ip, #10
 8013d28:	4620      	mov	r0, r4
 8013d2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013d2e:	3a30      	subs	r2, #48	; 0x30
 8013d30:	2a09      	cmp	r2, #9
 8013d32:	d903      	bls.n	8013d3c <_svfiprintf_r+0x1a8>
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d0c5      	beq.n	8013cc4 <_svfiprintf_r+0x130>
 8013d38:	9105      	str	r1, [sp, #20]
 8013d3a:	e7c3      	b.n	8013cc4 <_svfiprintf_r+0x130>
 8013d3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8013d40:	4604      	mov	r4, r0
 8013d42:	2301      	movs	r3, #1
 8013d44:	e7f0      	b.n	8013d28 <_svfiprintf_r+0x194>
 8013d46:	ab03      	add	r3, sp, #12
 8013d48:	9300      	str	r3, [sp, #0]
 8013d4a:	462a      	mov	r2, r5
 8013d4c:	4b0f      	ldr	r3, [pc, #60]	; (8013d8c <_svfiprintf_r+0x1f8>)
 8013d4e:	a904      	add	r1, sp, #16
 8013d50:	4638      	mov	r0, r7
 8013d52:	f7fc f881 	bl	800fe58 <_printf_float>
 8013d56:	1c42      	adds	r2, r0, #1
 8013d58:	4606      	mov	r6, r0
 8013d5a:	d1d6      	bne.n	8013d0a <_svfiprintf_r+0x176>
 8013d5c:	89ab      	ldrh	r3, [r5, #12]
 8013d5e:	065b      	lsls	r3, r3, #25
 8013d60:	f53f af2c 	bmi.w	8013bbc <_svfiprintf_r+0x28>
 8013d64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013d66:	b01d      	add	sp, #116	; 0x74
 8013d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d6c:	ab03      	add	r3, sp, #12
 8013d6e:	9300      	str	r3, [sp, #0]
 8013d70:	462a      	mov	r2, r5
 8013d72:	4b06      	ldr	r3, [pc, #24]	; (8013d8c <_svfiprintf_r+0x1f8>)
 8013d74:	a904      	add	r1, sp, #16
 8013d76:	4638      	mov	r0, r7
 8013d78:	f7fc fafa 	bl	8010370 <_printf_i>
 8013d7c:	e7eb      	b.n	8013d56 <_svfiprintf_r+0x1c2>
 8013d7e:	bf00      	nop
 8013d80:	08015184 	.word	0x08015184
 8013d84:	0801518e 	.word	0x0801518e
 8013d88:	0800fe59 	.word	0x0800fe59
 8013d8c:	08013add 	.word	0x08013add
 8013d90:	0801518a 	.word	0x0801518a

08013d94 <__sfputc_r>:
 8013d94:	6893      	ldr	r3, [r2, #8]
 8013d96:	3b01      	subs	r3, #1
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	b410      	push	{r4}
 8013d9c:	6093      	str	r3, [r2, #8]
 8013d9e:	da08      	bge.n	8013db2 <__sfputc_r+0x1e>
 8013da0:	6994      	ldr	r4, [r2, #24]
 8013da2:	42a3      	cmp	r3, r4
 8013da4:	db01      	blt.n	8013daa <__sfputc_r+0x16>
 8013da6:	290a      	cmp	r1, #10
 8013da8:	d103      	bne.n	8013db2 <__sfputc_r+0x1e>
 8013daa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013dae:	f7fd bd57 	b.w	8011860 <__swbuf_r>
 8013db2:	6813      	ldr	r3, [r2, #0]
 8013db4:	1c58      	adds	r0, r3, #1
 8013db6:	6010      	str	r0, [r2, #0]
 8013db8:	7019      	strb	r1, [r3, #0]
 8013dba:	4608      	mov	r0, r1
 8013dbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013dc0:	4770      	bx	lr

08013dc2 <__sfputs_r>:
 8013dc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013dc4:	4606      	mov	r6, r0
 8013dc6:	460f      	mov	r7, r1
 8013dc8:	4614      	mov	r4, r2
 8013dca:	18d5      	adds	r5, r2, r3
 8013dcc:	42ac      	cmp	r4, r5
 8013dce:	d101      	bne.n	8013dd4 <__sfputs_r+0x12>
 8013dd0:	2000      	movs	r0, #0
 8013dd2:	e007      	b.n	8013de4 <__sfputs_r+0x22>
 8013dd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013dd8:	463a      	mov	r2, r7
 8013dda:	4630      	mov	r0, r6
 8013ddc:	f7ff ffda 	bl	8013d94 <__sfputc_r>
 8013de0:	1c43      	adds	r3, r0, #1
 8013de2:	d1f3      	bne.n	8013dcc <__sfputs_r+0xa>
 8013de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013de8 <_vfiprintf_r>:
 8013de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013dec:	460d      	mov	r5, r1
 8013dee:	b09d      	sub	sp, #116	; 0x74
 8013df0:	4614      	mov	r4, r2
 8013df2:	4698      	mov	r8, r3
 8013df4:	4606      	mov	r6, r0
 8013df6:	b118      	cbz	r0, 8013e00 <_vfiprintf_r+0x18>
 8013df8:	6983      	ldr	r3, [r0, #24]
 8013dfa:	b90b      	cbnz	r3, 8013e00 <_vfiprintf_r+0x18>
 8013dfc:	f7fe fd04 	bl	8012808 <__sinit>
 8013e00:	4b89      	ldr	r3, [pc, #548]	; (8014028 <_vfiprintf_r+0x240>)
 8013e02:	429d      	cmp	r5, r3
 8013e04:	d11b      	bne.n	8013e3e <_vfiprintf_r+0x56>
 8013e06:	6875      	ldr	r5, [r6, #4]
 8013e08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013e0a:	07d9      	lsls	r1, r3, #31
 8013e0c:	d405      	bmi.n	8013e1a <_vfiprintf_r+0x32>
 8013e0e:	89ab      	ldrh	r3, [r5, #12]
 8013e10:	059a      	lsls	r2, r3, #22
 8013e12:	d402      	bmi.n	8013e1a <_vfiprintf_r+0x32>
 8013e14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013e16:	f7ff f908 	bl	801302a <__retarget_lock_acquire_recursive>
 8013e1a:	89ab      	ldrh	r3, [r5, #12]
 8013e1c:	071b      	lsls	r3, r3, #28
 8013e1e:	d501      	bpl.n	8013e24 <_vfiprintf_r+0x3c>
 8013e20:	692b      	ldr	r3, [r5, #16]
 8013e22:	b9eb      	cbnz	r3, 8013e60 <_vfiprintf_r+0x78>
 8013e24:	4629      	mov	r1, r5
 8013e26:	4630      	mov	r0, r6
 8013e28:	f7fd fd6c 	bl	8011904 <__swsetup_r>
 8013e2c:	b1c0      	cbz	r0, 8013e60 <_vfiprintf_r+0x78>
 8013e2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013e30:	07dc      	lsls	r4, r3, #31
 8013e32:	d50e      	bpl.n	8013e52 <_vfiprintf_r+0x6a>
 8013e34:	f04f 30ff 	mov.w	r0, #4294967295
 8013e38:	b01d      	add	sp, #116	; 0x74
 8013e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e3e:	4b7b      	ldr	r3, [pc, #492]	; (801402c <_vfiprintf_r+0x244>)
 8013e40:	429d      	cmp	r5, r3
 8013e42:	d101      	bne.n	8013e48 <_vfiprintf_r+0x60>
 8013e44:	68b5      	ldr	r5, [r6, #8]
 8013e46:	e7df      	b.n	8013e08 <_vfiprintf_r+0x20>
 8013e48:	4b79      	ldr	r3, [pc, #484]	; (8014030 <_vfiprintf_r+0x248>)
 8013e4a:	429d      	cmp	r5, r3
 8013e4c:	bf08      	it	eq
 8013e4e:	68f5      	ldreq	r5, [r6, #12]
 8013e50:	e7da      	b.n	8013e08 <_vfiprintf_r+0x20>
 8013e52:	89ab      	ldrh	r3, [r5, #12]
 8013e54:	0598      	lsls	r0, r3, #22
 8013e56:	d4ed      	bmi.n	8013e34 <_vfiprintf_r+0x4c>
 8013e58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013e5a:	f7ff f8e7 	bl	801302c <__retarget_lock_release_recursive>
 8013e5e:	e7e9      	b.n	8013e34 <_vfiprintf_r+0x4c>
 8013e60:	2300      	movs	r3, #0
 8013e62:	9309      	str	r3, [sp, #36]	; 0x24
 8013e64:	2320      	movs	r3, #32
 8013e66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013e6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8013e6e:	2330      	movs	r3, #48	; 0x30
 8013e70:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014034 <_vfiprintf_r+0x24c>
 8013e74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013e78:	f04f 0901 	mov.w	r9, #1
 8013e7c:	4623      	mov	r3, r4
 8013e7e:	469a      	mov	sl, r3
 8013e80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013e84:	b10a      	cbz	r2, 8013e8a <_vfiprintf_r+0xa2>
 8013e86:	2a25      	cmp	r2, #37	; 0x25
 8013e88:	d1f9      	bne.n	8013e7e <_vfiprintf_r+0x96>
 8013e8a:	ebba 0b04 	subs.w	fp, sl, r4
 8013e8e:	d00b      	beq.n	8013ea8 <_vfiprintf_r+0xc0>
 8013e90:	465b      	mov	r3, fp
 8013e92:	4622      	mov	r2, r4
 8013e94:	4629      	mov	r1, r5
 8013e96:	4630      	mov	r0, r6
 8013e98:	f7ff ff93 	bl	8013dc2 <__sfputs_r>
 8013e9c:	3001      	adds	r0, #1
 8013e9e:	f000 80aa 	beq.w	8013ff6 <_vfiprintf_r+0x20e>
 8013ea2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013ea4:	445a      	add	r2, fp
 8013ea6:	9209      	str	r2, [sp, #36]	; 0x24
 8013ea8:	f89a 3000 	ldrb.w	r3, [sl]
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	f000 80a2 	beq.w	8013ff6 <_vfiprintf_r+0x20e>
 8013eb2:	2300      	movs	r3, #0
 8013eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8013eb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013ebc:	f10a 0a01 	add.w	sl, sl, #1
 8013ec0:	9304      	str	r3, [sp, #16]
 8013ec2:	9307      	str	r3, [sp, #28]
 8013ec4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013ec8:	931a      	str	r3, [sp, #104]	; 0x68
 8013eca:	4654      	mov	r4, sl
 8013ecc:	2205      	movs	r2, #5
 8013ece:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013ed2:	4858      	ldr	r0, [pc, #352]	; (8014034 <_vfiprintf_r+0x24c>)
 8013ed4:	f7ec f9bc 	bl	8000250 <memchr>
 8013ed8:	9a04      	ldr	r2, [sp, #16]
 8013eda:	b9d8      	cbnz	r0, 8013f14 <_vfiprintf_r+0x12c>
 8013edc:	06d1      	lsls	r1, r2, #27
 8013ede:	bf44      	itt	mi
 8013ee0:	2320      	movmi	r3, #32
 8013ee2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013ee6:	0713      	lsls	r3, r2, #28
 8013ee8:	bf44      	itt	mi
 8013eea:	232b      	movmi	r3, #43	; 0x2b
 8013eec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013ef0:	f89a 3000 	ldrb.w	r3, [sl]
 8013ef4:	2b2a      	cmp	r3, #42	; 0x2a
 8013ef6:	d015      	beq.n	8013f24 <_vfiprintf_r+0x13c>
 8013ef8:	9a07      	ldr	r2, [sp, #28]
 8013efa:	4654      	mov	r4, sl
 8013efc:	2000      	movs	r0, #0
 8013efe:	f04f 0c0a 	mov.w	ip, #10
 8013f02:	4621      	mov	r1, r4
 8013f04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013f08:	3b30      	subs	r3, #48	; 0x30
 8013f0a:	2b09      	cmp	r3, #9
 8013f0c:	d94e      	bls.n	8013fac <_vfiprintf_r+0x1c4>
 8013f0e:	b1b0      	cbz	r0, 8013f3e <_vfiprintf_r+0x156>
 8013f10:	9207      	str	r2, [sp, #28]
 8013f12:	e014      	b.n	8013f3e <_vfiprintf_r+0x156>
 8013f14:	eba0 0308 	sub.w	r3, r0, r8
 8013f18:	fa09 f303 	lsl.w	r3, r9, r3
 8013f1c:	4313      	orrs	r3, r2
 8013f1e:	9304      	str	r3, [sp, #16]
 8013f20:	46a2      	mov	sl, r4
 8013f22:	e7d2      	b.n	8013eca <_vfiprintf_r+0xe2>
 8013f24:	9b03      	ldr	r3, [sp, #12]
 8013f26:	1d19      	adds	r1, r3, #4
 8013f28:	681b      	ldr	r3, [r3, #0]
 8013f2a:	9103      	str	r1, [sp, #12]
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	bfbb      	ittet	lt
 8013f30:	425b      	neglt	r3, r3
 8013f32:	f042 0202 	orrlt.w	r2, r2, #2
 8013f36:	9307      	strge	r3, [sp, #28]
 8013f38:	9307      	strlt	r3, [sp, #28]
 8013f3a:	bfb8      	it	lt
 8013f3c:	9204      	strlt	r2, [sp, #16]
 8013f3e:	7823      	ldrb	r3, [r4, #0]
 8013f40:	2b2e      	cmp	r3, #46	; 0x2e
 8013f42:	d10c      	bne.n	8013f5e <_vfiprintf_r+0x176>
 8013f44:	7863      	ldrb	r3, [r4, #1]
 8013f46:	2b2a      	cmp	r3, #42	; 0x2a
 8013f48:	d135      	bne.n	8013fb6 <_vfiprintf_r+0x1ce>
 8013f4a:	9b03      	ldr	r3, [sp, #12]
 8013f4c:	1d1a      	adds	r2, r3, #4
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	9203      	str	r2, [sp, #12]
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	bfb8      	it	lt
 8013f56:	f04f 33ff 	movlt.w	r3, #4294967295
 8013f5a:	3402      	adds	r4, #2
 8013f5c:	9305      	str	r3, [sp, #20]
 8013f5e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014044 <_vfiprintf_r+0x25c>
 8013f62:	7821      	ldrb	r1, [r4, #0]
 8013f64:	2203      	movs	r2, #3
 8013f66:	4650      	mov	r0, sl
 8013f68:	f7ec f972 	bl	8000250 <memchr>
 8013f6c:	b140      	cbz	r0, 8013f80 <_vfiprintf_r+0x198>
 8013f6e:	2340      	movs	r3, #64	; 0x40
 8013f70:	eba0 000a 	sub.w	r0, r0, sl
 8013f74:	fa03 f000 	lsl.w	r0, r3, r0
 8013f78:	9b04      	ldr	r3, [sp, #16]
 8013f7a:	4303      	orrs	r3, r0
 8013f7c:	3401      	adds	r4, #1
 8013f7e:	9304      	str	r3, [sp, #16]
 8013f80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f84:	482c      	ldr	r0, [pc, #176]	; (8014038 <_vfiprintf_r+0x250>)
 8013f86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013f8a:	2206      	movs	r2, #6
 8013f8c:	f7ec f960 	bl	8000250 <memchr>
 8013f90:	2800      	cmp	r0, #0
 8013f92:	d03f      	beq.n	8014014 <_vfiprintf_r+0x22c>
 8013f94:	4b29      	ldr	r3, [pc, #164]	; (801403c <_vfiprintf_r+0x254>)
 8013f96:	bb1b      	cbnz	r3, 8013fe0 <_vfiprintf_r+0x1f8>
 8013f98:	9b03      	ldr	r3, [sp, #12]
 8013f9a:	3307      	adds	r3, #7
 8013f9c:	f023 0307 	bic.w	r3, r3, #7
 8013fa0:	3308      	adds	r3, #8
 8013fa2:	9303      	str	r3, [sp, #12]
 8013fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013fa6:	443b      	add	r3, r7
 8013fa8:	9309      	str	r3, [sp, #36]	; 0x24
 8013faa:	e767      	b.n	8013e7c <_vfiprintf_r+0x94>
 8013fac:	fb0c 3202 	mla	r2, ip, r2, r3
 8013fb0:	460c      	mov	r4, r1
 8013fb2:	2001      	movs	r0, #1
 8013fb4:	e7a5      	b.n	8013f02 <_vfiprintf_r+0x11a>
 8013fb6:	2300      	movs	r3, #0
 8013fb8:	3401      	adds	r4, #1
 8013fba:	9305      	str	r3, [sp, #20]
 8013fbc:	4619      	mov	r1, r3
 8013fbe:	f04f 0c0a 	mov.w	ip, #10
 8013fc2:	4620      	mov	r0, r4
 8013fc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013fc8:	3a30      	subs	r2, #48	; 0x30
 8013fca:	2a09      	cmp	r2, #9
 8013fcc:	d903      	bls.n	8013fd6 <_vfiprintf_r+0x1ee>
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d0c5      	beq.n	8013f5e <_vfiprintf_r+0x176>
 8013fd2:	9105      	str	r1, [sp, #20]
 8013fd4:	e7c3      	b.n	8013f5e <_vfiprintf_r+0x176>
 8013fd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8013fda:	4604      	mov	r4, r0
 8013fdc:	2301      	movs	r3, #1
 8013fde:	e7f0      	b.n	8013fc2 <_vfiprintf_r+0x1da>
 8013fe0:	ab03      	add	r3, sp, #12
 8013fe2:	9300      	str	r3, [sp, #0]
 8013fe4:	462a      	mov	r2, r5
 8013fe6:	4b16      	ldr	r3, [pc, #88]	; (8014040 <_vfiprintf_r+0x258>)
 8013fe8:	a904      	add	r1, sp, #16
 8013fea:	4630      	mov	r0, r6
 8013fec:	f7fb ff34 	bl	800fe58 <_printf_float>
 8013ff0:	4607      	mov	r7, r0
 8013ff2:	1c78      	adds	r0, r7, #1
 8013ff4:	d1d6      	bne.n	8013fa4 <_vfiprintf_r+0x1bc>
 8013ff6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013ff8:	07d9      	lsls	r1, r3, #31
 8013ffa:	d405      	bmi.n	8014008 <_vfiprintf_r+0x220>
 8013ffc:	89ab      	ldrh	r3, [r5, #12]
 8013ffe:	059a      	lsls	r2, r3, #22
 8014000:	d402      	bmi.n	8014008 <_vfiprintf_r+0x220>
 8014002:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014004:	f7ff f812 	bl	801302c <__retarget_lock_release_recursive>
 8014008:	89ab      	ldrh	r3, [r5, #12]
 801400a:	065b      	lsls	r3, r3, #25
 801400c:	f53f af12 	bmi.w	8013e34 <_vfiprintf_r+0x4c>
 8014010:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014012:	e711      	b.n	8013e38 <_vfiprintf_r+0x50>
 8014014:	ab03      	add	r3, sp, #12
 8014016:	9300      	str	r3, [sp, #0]
 8014018:	462a      	mov	r2, r5
 801401a:	4b09      	ldr	r3, [pc, #36]	; (8014040 <_vfiprintf_r+0x258>)
 801401c:	a904      	add	r1, sp, #16
 801401e:	4630      	mov	r0, r6
 8014020:	f7fc f9a6 	bl	8010370 <_printf_i>
 8014024:	e7e4      	b.n	8013ff0 <_vfiprintf_r+0x208>
 8014026:	bf00      	nop
 8014028:	08014f6c 	.word	0x08014f6c
 801402c:	08014f8c 	.word	0x08014f8c
 8014030:	08014f4c 	.word	0x08014f4c
 8014034:	08015184 	.word	0x08015184
 8014038:	0801518e 	.word	0x0801518e
 801403c:	0800fe59 	.word	0x0800fe59
 8014040:	08013dc3 	.word	0x08013dc3
 8014044:	0801518a 	.word	0x0801518a

08014048 <_putc_r>:
 8014048:	b570      	push	{r4, r5, r6, lr}
 801404a:	460d      	mov	r5, r1
 801404c:	4614      	mov	r4, r2
 801404e:	4606      	mov	r6, r0
 8014050:	b118      	cbz	r0, 801405a <_putc_r+0x12>
 8014052:	6983      	ldr	r3, [r0, #24]
 8014054:	b90b      	cbnz	r3, 801405a <_putc_r+0x12>
 8014056:	f7fe fbd7 	bl	8012808 <__sinit>
 801405a:	4b1c      	ldr	r3, [pc, #112]	; (80140cc <_putc_r+0x84>)
 801405c:	429c      	cmp	r4, r3
 801405e:	d124      	bne.n	80140aa <_putc_r+0x62>
 8014060:	6874      	ldr	r4, [r6, #4]
 8014062:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014064:	07d8      	lsls	r0, r3, #31
 8014066:	d405      	bmi.n	8014074 <_putc_r+0x2c>
 8014068:	89a3      	ldrh	r3, [r4, #12]
 801406a:	0599      	lsls	r1, r3, #22
 801406c:	d402      	bmi.n	8014074 <_putc_r+0x2c>
 801406e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014070:	f7fe ffdb 	bl	801302a <__retarget_lock_acquire_recursive>
 8014074:	68a3      	ldr	r3, [r4, #8]
 8014076:	3b01      	subs	r3, #1
 8014078:	2b00      	cmp	r3, #0
 801407a:	60a3      	str	r3, [r4, #8]
 801407c:	da05      	bge.n	801408a <_putc_r+0x42>
 801407e:	69a2      	ldr	r2, [r4, #24]
 8014080:	4293      	cmp	r3, r2
 8014082:	db1c      	blt.n	80140be <_putc_r+0x76>
 8014084:	b2eb      	uxtb	r3, r5
 8014086:	2b0a      	cmp	r3, #10
 8014088:	d019      	beq.n	80140be <_putc_r+0x76>
 801408a:	6823      	ldr	r3, [r4, #0]
 801408c:	1c5a      	adds	r2, r3, #1
 801408e:	6022      	str	r2, [r4, #0]
 8014090:	701d      	strb	r5, [r3, #0]
 8014092:	b2ed      	uxtb	r5, r5
 8014094:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014096:	07da      	lsls	r2, r3, #31
 8014098:	d405      	bmi.n	80140a6 <_putc_r+0x5e>
 801409a:	89a3      	ldrh	r3, [r4, #12]
 801409c:	059b      	lsls	r3, r3, #22
 801409e:	d402      	bmi.n	80140a6 <_putc_r+0x5e>
 80140a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80140a2:	f7fe ffc3 	bl	801302c <__retarget_lock_release_recursive>
 80140a6:	4628      	mov	r0, r5
 80140a8:	bd70      	pop	{r4, r5, r6, pc}
 80140aa:	4b09      	ldr	r3, [pc, #36]	; (80140d0 <_putc_r+0x88>)
 80140ac:	429c      	cmp	r4, r3
 80140ae:	d101      	bne.n	80140b4 <_putc_r+0x6c>
 80140b0:	68b4      	ldr	r4, [r6, #8]
 80140b2:	e7d6      	b.n	8014062 <_putc_r+0x1a>
 80140b4:	4b07      	ldr	r3, [pc, #28]	; (80140d4 <_putc_r+0x8c>)
 80140b6:	429c      	cmp	r4, r3
 80140b8:	bf08      	it	eq
 80140ba:	68f4      	ldreq	r4, [r6, #12]
 80140bc:	e7d1      	b.n	8014062 <_putc_r+0x1a>
 80140be:	4629      	mov	r1, r5
 80140c0:	4622      	mov	r2, r4
 80140c2:	4630      	mov	r0, r6
 80140c4:	f7fd fbcc 	bl	8011860 <__swbuf_r>
 80140c8:	4605      	mov	r5, r0
 80140ca:	e7e3      	b.n	8014094 <_putc_r+0x4c>
 80140cc:	08014f6c 	.word	0x08014f6c
 80140d0:	08014f8c 	.word	0x08014f8c
 80140d4:	08014f4c 	.word	0x08014f4c

080140d8 <nan>:
 80140d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80140e0 <nan+0x8>
 80140dc:	4770      	bx	lr
 80140de:	bf00      	nop
 80140e0:	00000000 	.word	0x00000000
 80140e4:	7ff80000 	.word	0x7ff80000

080140e8 <__sread>:
 80140e8:	b510      	push	{r4, lr}
 80140ea:	460c      	mov	r4, r1
 80140ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80140f0:	f000 f92e 	bl	8014350 <_read_r>
 80140f4:	2800      	cmp	r0, #0
 80140f6:	bfab      	itete	ge
 80140f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80140fa:	89a3      	ldrhlt	r3, [r4, #12]
 80140fc:	181b      	addge	r3, r3, r0
 80140fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014102:	bfac      	ite	ge
 8014104:	6563      	strge	r3, [r4, #84]	; 0x54
 8014106:	81a3      	strhlt	r3, [r4, #12]
 8014108:	bd10      	pop	{r4, pc}

0801410a <__swrite>:
 801410a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801410e:	461f      	mov	r7, r3
 8014110:	898b      	ldrh	r3, [r1, #12]
 8014112:	05db      	lsls	r3, r3, #23
 8014114:	4605      	mov	r5, r0
 8014116:	460c      	mov	r4, r1
 8014118:	4616      	mov	r6, r2
 801411a:	d505      	bpl.n	8014128 <__swrite+0x1e>
 801411c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014120:	2302      	movs	r3, #2
 8014122:	2200      	movs	r2, #0
 8014124:	f000 f8b8 	bl	8014298 <_lseek_r>
 8014128:	89a3      	ldrh	r3, [r4, #12]
 801412a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801412e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014132:	81a3      	strh	r3, [r4, #12]
 8014134:	4632      	mov	r2, r6
 8014136:	463b      	mov	r3, r7
 8014138:	4628      	mov	r0, r5
 801413a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801413e:	f000 b837 	b.w	80141b0 <_write_r>

08014142 <__sseek>:
 8014142:	b510      	push	{r4, lr}
 8014144:	460c      	mov	r4, r1
 8014146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801414a:	f000 f8a5 	bl	8014298 <_lseek_r>
 801414e:	1c43      	adds	r3, r0, #1
 8014150:	89a3      	ldrh	r3, [r4, #12]
 8014152:	bf15      	itete	ne
 8014154:	6560      	strne	r0, [r4, #84]	; 0x54
 8014156:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801415a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801415e:	81a3      	strheq	r3, [r4, #12]
 8014160:	bf18      	it	ne
 8014162:	81a3      	strhne	r3, [r4, #12]
 8014164:	bd10      	pop	{r4, pc}

08014166 <__sclose>:
 8014166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801416a:	f000 b851 	b.w	8014210 <_close_r>

0801416e <strncmp>:
 801416e:	b510      	push	{r4, lr}
 8014170:	b17a      	cbz	r2, 8014192 <strncmp+0x24>
 8014172:	4603      	mov	r3, r0
 8014174:	3901      	subs	r1, #1
 8014176:	1884      	adds	r4, r0, r2
 8014178:	f813 0b01 	ldrb.w	r0, [r3], #1
 801417c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014180:	4290      	cmp	r0, r2
 8014182:	d101      	bne.n	8014188 <strncmp+0x1a>
 8014184:	42a3      	cmp	r3, r4
 8014186:	d101      	bne.n	801418c <strncmp+0x1e>
 8014188:	1a80      	subs	r0, r0, r2
 801418a:	bd10      	pop	{r4, pc}
 801418c:	2800      	cmp	r0, #0
 801418e:	d1f3      	bne.n	8014178 <strncmp+0xa>
 8014190:	e7fa      	b.n	8014188 <strncmp+0x1a>
 8014192:	4610      	mov	r0, r2
 8014194:	e7f9      	b.n	801418a <strncmp+0x1c>

08014196 <__ascii_wctomb>:
 8014196:	b149      	cbz	r1, 80141ac <__ascii_wctomb+0x16>
 8014198:	2aff      	cmp	r2, #255	; 0xff
 801419a:	bf85      	ittet	hi
 801419c:	238a      	movhi	r3, #138	; 0x8a
 801419e:	6003      	strhi	r3, [r0, #0]
 80141a0:	700a      	strbls	r2, [r1, #0]
 80141a2:	f04f 30ff 	movhi.w	r0, #4294967295
 80141a6:	bf98      	it	ls
 80141a8:	2001      	movls	r0, #1
 80141aa:	4770      	bx	lr
 80141ac:	4608      	mov	r0, r1
 80141ae:	4770      	bx	lr

080141b0 <_write_r>:
 80141b0:	b538      	push	{r3, r4, r5, lr}
 80141b2:	4d07      	ldr	r5, [pc, #28]	; (80141d0 <_write_r+0x20>)
 80141b4:	4604      	mov	r4, r0
 80141b6:	4608      	mov	r0, r1
 80141b8:	4611      	mov	r1, r2
 80141ba:	2200      	movs	r2, #0
 80141bc:	602a      	str	r2, [r5, #0]
 80141be:	461a      	mov	r2, r3
 80141c0:	f7f0 fcaf 	bl	8004b22 <_write>
 80141c4:	1c43      	adds	r3, r0, #1
 80141c6:	d102      	bne.n	80141ce <_write_r+0x1e>
 80141c8:	682b      	ldr	r3, [r5, #0]
 80141ca:	b103      	cbz	r3, 80141ce <_write_r+0x1e>
 80141cc:	6023      	str	r3, [r4, #0]
 80141ce:	bd38      	pop	{r3, r4, r5, pc}
 80141d0:	20002e58 	.word	0x20002e58

080141d4 <__assert_func>:
 80141d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80141d6:	4614      	mov	r4, r2
 80141d8:	461a      	mov	r2, r3
 80141da:	4b09      	ldr	r3, [pc, #36]	; (8014200 <__assert_func+0x2c>)
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	4605      	mov	r5, r0
 80141e0:	68d8      	ldr	r0, [r3, #12]
 80141e2:	b14c      	cbz	r4, 80141f8 <__assert_func+0x24>
 80141e4:	4b07      	ldr	r3, [pc, #28]	; (8014204 <__assert_func+0x30>)
 80141e6:	9100      	str	r1, [sp, #0]
 80141e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80141ec:	4906      	ldr	r1, [pc, #24]	; (8014208 <__assert_func+0x34>)
 80141ee:	462b      	mov	r3, r5
 80141f0:	f000 f81e 	bl	8014230 <fiprintf>
 80141f4:	f000 f8be 	bl	8014374 <abort>
 80141f8:	4b04      	ldr	r3, [pc, #16]	; (801420c <__assert_func+0x38>)
 80141fa:	461c      	mov	r4, r3
 80141fc:	e7f3      	b.n	80141e6 <__assert_func+0x12>
 80141fe:	bf00      	nop
 8014200:	20000010 	.word	0x20000010
 8014204:	08015195 	.word	0x08015195
 8014208:	080151a2 	.word	0x080151a2
 801420c:	080151d0 	.word	0x080151d0

08014210 <_close_r>:
 8014210:	b538      	push	{r3, r4, r5, lr}
 8014212:	4d06      	ldr	r5, [pc, #24]	; (801422c <_close_r+0x1c>)
 8014214:	2300      	movs	r3, #0
 8014216:	4604      	mov	r4, r0
 8014218:	4608      	mov	r0, r1
 801421a:	602b      	str	r3, [r5, #0]
 801421c:	f7f0 fc9d 	bl	8004b5a <_close>
 8014220:	1c43      	adds	r3, r0, #1
 8014222:	d102      	bne.n	801422a <_close_r+0x1a>
 8014224:	682b      	ldr	r3, [r5, #0]
 8014226:	b103      	cbz	r3, 801422a <_close_r+0x1a>
 8014228:	6023      	str	r3, [r4, #0]
 801422a:	bd38      	pop	{r3, r4, r5, pc}
 801422c:	20002e58 	.word	0x20002e58

08014230 <fiprintf>:
 8014230:	b40e      	push	{r1, r2, r3}
 8014232:	b503      	push	{r0, r1, lr}
 8014234:	4601      	mov	r1, r0
 8014236:	ab03      	add	r3, sp, #12
 8014238:	4805      	ldr	r0, [pc, #20]	; (8014250 <fiprintf+0x20>)
 801423a:	f853 2b04 	ldr.w	r2, [r3], #4
 801423e:	6800      	ldr	r0, [r0, #0]
 8014240:	9301      	str	r3, [sp, #4]
 8014242:	f7ff fdd1 	bl	8013de8 <_vfiprintf_r>
 8014246:	b002      	add	sp, #8
 8014248:	f85d eb04 	ldr.w	lr, [sp], #4
 801424c:	b003      	add	sp, #12
 801424e:	4770      	bx	lr
 8014250:	20000010 	.word	0x20000010

08014254 <_fstat_r>:
 8014254:	b538      	push	{r3, r4, r5, lr}
 8014256:	4d07      	ldr	r5, [pc, #28]	; (8014274 <_fstat_r+0x20>)
 8014258:	2300      	movs	r3, #0
 801425a:	4604      	mov	r4, r0
 801425c:	4608      	mov	r0, r1
 801425e:	4611      	mov	r1, r2
 8014260:	602b      	str	r3, [r5, #0]
 8014262:	f7f0 fc86 	bl	8004b72 <_fstat>
 8014266:	1c43      	adds	r3, r0, #1
 8014268:	d102      	bne.n	8014270 <_fstat_r+0x1c>
 801426a:	682b      	ldr	r3, [r5, #0]
 801426c:	b103      	cbz	r3, 8014270 <_fstat_r+0x1c>
 801426e:	6023      	str	r3, [r4, #0]
 8014270:	bd38      	pop	{r3, r4, r5, pc}
 8014272:	bf00      	nop
 8014274:	20002e58 	.word	0x20002e58

08014278 <_isatty_r>:
 8014278:	b538      	push	{r3, r4, r5, lr}
 801427a:	4d06      	ldr	r5, [pc, #24]	; (8014294 <_isatty_r+0x1c>)
 801427c:	2300      	movs	r3, #0
 801427e:	4604      	mov	r4, r0
 8014280:	4608      	mov	r0, r1
 8014282:	602b      	str	r3, [r5, #0]
 8014284:	f7f0 fc85 	bl	8004b92 <_isatty>
 8014288:	1c43      	adds	r3, r0, #1
 801428a:	d102      	bne.n	8014292 <_isatty_r+0x1a>
 801428c:	682b      	ldr	r3, [r5, #0]
 801428e:	b103      	cbz	r3, 8014292 <_isatty_r+0x1a>
 8014290:	6023      	str	r3, [r4, #0]
 8014292:	bd38      	pop	{r3, r4, r5, pc}
 8014294:	20002e58 	.word	0x20002e58

08014298 <_lseek_r>:
 8014298:	b538      	push	{r3, r4, r5, lr}
 801429a:	4d07      	ldr	r5, [pc, #28]	; (80142b8 <_lseek_r+0x20>)
 801429c:	4604      	mov	r4, r0
 801429e:	4608      	mov	r0, r1
 80142a0:	4611      	mov	r1, r2
 80142a2:	2200      	movs	r2, #0
 80142a4:	602a      	str	r2, [r5, #0]
 80142a6:	461a      	mov	r2, r3
 80142a8:	f7f0 fc7e 	bl	8004ba8 <_lseek>
 80142ac:	1c43      	adds	r3, r0, #1
 80142ae:	d102      	bne.n	80142b6 <_lseek_r+0x1e>
 80142b0:	682b      	ldr	r3, [r5, #0]
 80142b2:	b103      	cbz	r3, 80142b6 <_lseek_r+0x1e>
 80142b4:	6023      	str	r3, [r4, #0]
 80142b6:	bd38      	pop	{r3, r4, r5, pc}
 80142b8:	20002e58 	.word	0x20002e58

080142bc <memmove>:
 80142bc:	4288      	cmp	r0, r1
 80142be:	b510      	push	{r4, lr}
 80142c0:	eb01 0402 	add.w	r4, r1, r2
 80142c4:	d902      	bls.n	80142cc <memmove+0x10>
 80142c6:	4284      	cmp	r4, r0
 80142c8:	4623      	mov	r3, r4
 80142ca:	d807      	bhi.n	80142dc <memmove+0x20>
 80142cc:	1e43      	subs	r3, r0, #1
 80142ce:	42a1      	cmp	r1, r4
 80142d0:	d008      	beq.n	80142e4 <memmove+0x28>
 80142d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80142d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80142da:	e7f8      	b.n	80142ce <memmove+0x12>
 80142dc:	4402      	add	r2, r0
 80142de:	4601      	mov	r1, r0
 80142e0:	428a      	cmp	r2, r1
 80142e2:	d100      	bne.n	80142e6 <memmove+0x2a>
 80142e4:	bd10      	pop	{r4, pc}
 80142e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80142ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80142ee:	e7f7      	b.n	80142e0 <memmove+0x24>

080142f0 <_realloc_r>:
 80142f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142f4:	4680      	mov	r8, r0
 80142f6:	4614      	mov	r4, r2
 80142f8:	460e      	mov	r6, r1
 80142fa:	b921      	cbnz	r1, 8014306 <_realloc_r+0x16>
 80142fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014300:	4611      	mov	r1, r2
 8014302:	f7fb bca5 	b.w	800fc50 <_malloc_r>
 8014306:	b92a      	cbnz	r2, 8014314 <_realloc_r+0x24>
 8014308:	f7fb fc36 	bl	800fb78 <_free_r>
 801430c:	4625      	mov	r5, r4
 801430e:	4628      	mov	r0, r5
 8014310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014314:	f000 f835 	bl	8014382 <_malloc_usable_size_r>
 8014318:	4284      	cmp	r4, r0
 801431a:	4607      	mov	r7, r0
 801431c:	d802      	bhi.n	8014324 <_realloc_r+0x34>
 801431e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014322:	d812      	bhi.n	801434a <_realloc_r+0x5a>
 8014324:	4621      	mov	r1, r4
 8014326:	4640      	mov	r0, r8
 8014328:	f7fb fc92 	bl	800fc50 <_malloc_r>
 801432c:	4605      	mov	r5, r0
 801432e:	2800      	cmp	r0, #0
 8014330:	d0ed      	beq.n	801430e <_realloc_r+0x1e>
 8014332:	42bc      	cmp	r4, r7
 8014334:	4622      	mov	r2, r4
 8014336:	4631      	mov	r1, r6
 8014338:	bf28      	it	cs
 801433a:	463a      	movcs	r2, r7
 801433c:	f7fb fc06 	bl	800fb4c <memcpy>
 8014340:	4631      	mov	r1, r6
 8014342:	4640      	mov	r0, r8
 8014344:	f7fb fc18 	bl	800fb78 <_free_r>
 8014348:	e7e1      	b.n	801430e <_realloc_r+0x1e>
 801434a:	4635      	mov	r5, r6
 801434c:	e7df      	b.n	801430e <_realloc_r+0x1e>
	...

08014350 <_read_r>:
 8014350:	b538      	push	{r3, r4, r5, lr}
 8014352:	4d07      	ldr	r5, [pc, #28]	; (8014370 <_read_r+0x20>)
 8014354:	4604      	mov	r4, r0
 8014356:	4608      	mov	r0, r1
 8014358:	4611      	mov	r1, r2
 801435a:	2200      	movs	r2, #0
 801435c:	602a      	str	r2, [r5, #0]
 801435e:	461a      	mov	r2, r3
 8014360:	f7f0 fbc2 	bl	8004ae8 <_read>
 8014364:	1c43      	adds	r3, r0, #1
 8014366:	d102      	bne.n	801436e <_read_r+0x1e>
 8014368:	682b      	ldr	r3, [r5, #0]
 801436a:	b103      	cbz	r3, 801436e <_read_r+0x1e>
 801436c:	6023      	str	r3, [r4, #0]
 801436e:	bd38      	pop	{r3, r4, r5, pc}
 8014370:	20002e58 	.word	0x20002e58

08014374 <abort>:
 8014374:	b508      	push	{r3, lr}
 8014376:	2006      	movs	r0, #6
 8014378:	f000 f834 	bl	80143e4 <raise>
 801437c:	2001      	movs	r0, #1
 801437e:	f7f0 fba9 	bl	8004ad4 <_exit>

08014382 <_malloc_usable_size_r>:
 8014382:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014386:	1f18      	subs	r0, r3, #4
 8014388:	2b00      	cmp	r3, #0
 801438a:	bfbc      	itt	lt
 801438c:	580b      	ldrlt	r3, [r1, r0]
 801438e:	18c0      	addlt	r0, r0, r3
 8014390:	4770      	bx	lr

08014392 <_raise_r>:
 8014392:	291f      	cmp	r1, #31
 8014394:	b538      	push	{r3, r4, r5, lr}
 8014396:	4604      	mov	r4, r0
 8014398:	460d      	mov	r5, r1
 801439a:	d904      	bls.n	80143a6 <_raise_r+0x14>
 801439c:	2316      	movs	r3, #22
 801439e:	6003      	str	r3, [r0, #0]
 80143a0:	f04f 30ff 	mov.w	r0, #4294967295
 80143a4:	bd38      	pop	{r3, r4, r5, pc}
 80143a6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80143a8:	b112      	cbz	r2, 80143b0 <_raise_r+0x1e>
 80143aa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80143ae:	b94b      	cbnz	r3, 80143c4 <_raise_r+0x32>
 80143b0:	4620      	mov	r0, r4
 80143b2:	f000 f831 	bl	8014418 <_getpid_r>
 80143b6:	462a      	mov	r2, r5
 80143b8:	4601      	mov	r1, r0
 80143ba:	4620      	mov	r0, r4
 80143bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80143c0:	f000 b818 	b.w	80143f4 <_kill_r>
 80143c4:	2b01      	cmp	r3, #1
 80143c6:	d00a      	beq.n	80143de <_raise_r+0x4c>
 80143c8:	1c59      	adds	r1, r3, #1
 80143ca:	d103      	bne.n	80143d4 <_raise_r+0x42>
 80143cc:	2316      	movs	r3, #22
 80143ce:	6003      	str	r3, [r0, #0]
 80143d0:	2001      	movs	r0, #1
 80143d2:	e7e7      	b.n	80143a4 <_raise_r+0x12>
 80143d4:	2400      	movs	r4, #0
 80143d6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80143da:	4628      	mov	r0, r5
 80143dc:	4798      	blx	r3
 80143de:	2000      	movs	r0, #0
 80143e0:	e7e0      	b.n	80143a4 <_raise_r+0x12>
	...

080143e4 <raise>:
 80143e4:	4b02      	ldr	r3, [pc, #8]	; (80143f0 <raise+0xc>)
 80143e6:	4601      	mov	r1, r0
 80143e8:	6818      	ldr	r0, [r3, #0]
 80143ea:	f7ff bfd2 	b.w	8014392 <_raise_r>
 80143ee:	bf00      	nop
 80143f0:	20000010 	.word	0x20000010

080143f4 <_kill_r>:
 80143f4:	b538      	push	{r3, r4, r5, lr}
 80143f6:	4d07      	ldr	r5, [pc, #28]	; (8014414 <_kill_r+0x20>)
 80143f8:	2300      	movs	r3, #0
 80143fa:	4604      	mov	r4, r0
 80143fc:	4608      	mov	r0, r1
 80143fe:	4611      	mov	r1, r2
 8014400:	602b      	str	r3, [r5, #0]
 8014402:	f7f0 fb57 	bl	8004ab4 <_kill>
 8014406:	1c43      	adds	r3, r0, #1
 8014408:	d102      	bne.n	8014410 <_kill_r+0x1c>
 801440a:	682b      	ldr	r3, [r5, #0]
 801440c:	b103      	cbz	r3, 8014410 <_kill_r+0x1c>
 801440e:	6023      	str	r3, [r4, #0]
 8014410:	bd38      	pop	{r3, r4, r5, pc}
 8014412:	bf00      	nop
 8014414:	20002e58 	.word	0x20002e58

08014418 <_getpid_r>:
 8014418:	f7f0 bb44 	b.w	8004aa4 <_getpid>

0801441c <checkint>:
 801441c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014420:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8014424:	429a      	cmp	r2, r3
 8014426:	b570      	push	{r4, r5, r6, lr}
 8014428:	dd2a      	ble.n	8014480 <checkint+0x64>
 801442a:	f240 4333 	movw	r3, #1075	; 0x433
 801442e:	429a      	cmp	r2, r3
 8014430:	dc24      	bgt.n	801447c <checkint+0x60>
 8014432:	1a9b      	subs	r3, r3, r2
 8014434:	f1a3 0620 	sub.w	r6, r3, #32
 8014438:	f04f 32ff 	mov.w	r2, #4294967295
 801443c:	fa02 f403 	lsl.w	r4, r2, r3
 8014440:	fa02 f606 	lsl.w	r6, r2, r6
 8014444:	f1c3 0520 	rsb	r5, r3, #32
 8014448:	fa22 f505 	lsr.w	r5, r2, r5
 801444c:	4334      	orrs	r4, r6
 801444e:	432c      	orrs	r4, r5
 8014450:	409a      	lsls	r2, r3
 8014452:	ea20 0202 	bic.w	r2, r0, r2
 8014456:	ea21 0404 	bic.w	r4, r1, r4
 801445a:	4322      	orrs	r2, r4
 801445c:	f1a3 0420 	sub.w	r4, r3, #32
 8014460:	f1c3 0220 	rsb	r2, r3, #32
 8014464:	d10c      	bne.n	8014480 <checkint+0x64>
 8014466:	40d8      	lsrs	r0, r3
 8014468:	fa01 f302 	lsl.w	r3, r1, r2
 801446c:	4318      	orrs	r0, r3
 801446e:	40e1      	lsrs	r1, r4
 8014470:	4308      	orrs	r0, r1
 8014472:	f000 0001 	and.w	r0, r0, #1
 8014476:	f1d0 0002 	rsbs	r0, r0, #2
 801447a:	bd70      	pop	{r4, r5, r6, pc}
 801447c:	2002      	movs	r0, #2
 801447e:	e7fc      	b.n	801447a <checkint+0x5e>
 8014480:	2000      	movs	r0, #0
 8014482:	e7fa      	b.n	801447a <checkint+0x5e>
 8014484:	0000      	movs	r0, r0
	...

08014488 <pow>:
 8014488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801448c:	ee10 4a90 	vmov	r4, s1
 8014490:	ed2d 8b0a 	vpush	{d8-d12}
 8014494:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 8014498:	ee11 7a90 	vmov	r7, s3
 801449c:	f10a 32ff 	add.w	r2, sl, #4294967295
 80144a0:	f240 73fd 	movw	r3, #2045	; 0x7fd
 80144a4:	429a      	cmp	r2, r3
 80144a6:	ee10 6a10 	vmov	r6, s0
 80144aa:	ee11 0a10 	vmov	r0, s2
 80144ae:	b086      	sub	sp, #24
 80144b0:	46d4      	mov	ip, sl
 80144b2:	ea4f 5517 	mov.w	r5, r7, lsr #20
 80144b6:	d806      	bhi.n	80144c6 <pow+0x3e>
 80144b8:	f3c5 030a 	ubfx	r3, r5, #0, #11
 80144bc:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 80144c0:	2b7f      	cmp	r3, #127	; 0x7f
 80144c2:	f240 8156 	bls.w	8014772 <pow+0x2ea>
 80144c6:	1802      	adds	r2, r0, r0
 80144c8:	eb47 0107 	adc.w	r1, r7, r7
 80144cc:	f06f 0e01 	mvn.w	lr, #1
 80144d0:	f112 39ff 	adds.w	r9, r2, #4294967295
 80144d4:	f141 38ff 	adc.w	r8, r1, #4294967295
 80144d8:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 80144dc:	45ce      	cmp	lr, r9
 80144de:	eb73 0808 	sbcs.w	r8, r3, r8
 80144e2:	d23f      	bcs.n	8014564 <pow+0xdc>
 80144e4:	ea52 0301 	orrs.w	r3, r2, r1
 80144e8:	f04f 0300 	mov.w	r3, #0
 80144ec:	d10c      	bne.n	8014508 <pow+0x80>
 80144ee:	19b6      	adds	r6, r6, r6
 80144f0:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 80144f4:	4164      	adcs	r4, r4
 80144f6:	42b3      	cmp	r3, r6
 80144f8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80144fc:	41a3      	sbcs	r3, r4
 80144fe:	f0c0 808c 	bcc.w	801461a <pow+0x192>
 8014502:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8014506:	e028      	b.n	801455a <pow+0xd2>
 8014508:	4da3      	ldr	r5, [pc, #652]	; (8014798 <pow+0x310>)
 801450a:	42ac      	cmp	r4, r5
 801450c:	bf08      	it	eq
 801450e:	429e      	cmpeq	r6, r3
 8014510:	d107      	bne.n	8014522 <pow+0x9a>
 8014512:	1800      	adds	r0, r0, r0
 8014514:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 8014518:	417f      	adcs	r7, r7
 801451a:	4283      	cmp	r3, r0
 801451c:	4b9f      	ldr	r3, [pc, #636]	; (801479c <pow+0x314>)
 801451e:	41bb      	sbcs	r3, r7
 8014520:	e7ed      	b.n	80144fe <pow+0x76>
 8014522:	19b6      	adds	r6, r6, r6
 8014524:	489e      	ldr	r0, [pc, #632]	; (80147a0 <pow+0x318>)
 8014526:	4164      	adcs	r4, r4
 8014528:	42b3      	cmp	r3, r6
 801452a:	eb70 0504 	sbcs.w	r5, r0, r4
 801452e:	d374      	bcc.n	801461a <pow+0x192>
 8014530:	4281      	cmp	r1, r0
 8014532:	bf08      	it	eq
 8014534:	429a      	cmpeq	r2, r3
 8014536:	d170      	bne.n	801461a <pow+0x192>
 8014538:	4a9a      	ldr	r2, [pc, #616]	; (80147a4 <pow+0x31c>)
 801453a:	4294      	cmp	r4, r2
 801453c:	bf08      	it	eq
 801453e:	429e      	cmpeq	r6, r3
 8014540:	d0df      	beq.n	8014502 <pow+0x7a>
 8014542:	4294      	cmp	r4, r2
 8014544:	ea6f 0707 	mvn.w	r7, r7
 8014548:	bf34      	ite	cc
 801454a:	2400      	movcc	r4, #0
 801454c:	2401      	movcs	r4, #1
 801454e:	0fff      	lsrs	r7, r7, #31
 8014550:	42bc      	cmp	r4, r7
 8014552:	f040 81d9 	bne.w	8014908 <pow+0x480>
 8014556:	ee21 0b01 	vmul.f64	d0, d1, d1
 801455a:	b006      	add	sp, #24
 801455c:	ecbd 8b0a 	vpop	{d8-d12}
 8014560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014564:	eb16 0806 	adds.w	r8, r6, r6
 8014568:	eb44 0904 	adc.w	r9, r4, r4
 801456c:	f118 31ff 	adds.w	r1, r8, #4294967295
 8014570:	f169 0200 	sbc.w	r2, r9, #0
 8014574:	458e      	cmp	lr, r1
 8014576:	4193      	sbcs	r3, r2
 8014578:	d223      	bcs.n	80145c2 <pow+0x13a>
 801457a:	ee20 0b00 	vmul.f64	d0, d0, d0
 801457e:	2c00      	cmp	r4, #0
 8014580:	da12      	bge.n	80145a8 <pow+0x120>
 8014582:	4639      	mov	r1, r7
 8014584:	f7ff ff4a 	bl	801441c <checkint>
 8014588:	2801      	cmp	r0, #1
 801458a:	d10d      	bne.n	80145a8 <pow+0x120>
 801458c:	eeb1 0b40 	vneg.f64	d0, d0
 8014590:	ea58 0309 	orrs.w	r3, r8, r9
 8014594:	d10a      	bne.n	80145ac <pow+0x124>
 8014596:	2f00      	cmp	r7, #0
 8014598:	dadf      	bge.n	801455a <pow+0xd2>
 801459a:	b006      	add	sp, #24
 801459c:	ecbd 8b0a 	vpop	{d8-d12}
 80145a0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80145a4:	f000 b9f0 	b.w	8014988 <__math_divzero>
 80145a8:	2000      	movs	r0, #0
 80145aa:	e7f1      	b.n	8014590 <pow+0x108>
 80145ac:	2f00      	cmp	r7, #0
 80145ae:	dad4      	bge.n	801455a <pow+0xd2>
 80145b0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80145b4:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80145b8:	ed8d 7b00 	vstr	d7, [sp]
 80145bc:	ed9d 0b00 	vldr	d0, [sp]
 80145c0:	e7cb      	b.n	801455a <pow+0xd2>
 80145c2:	2c00      	cmp	r4, #0
 80145c4:	da2c      	bge.n	8014620 <pow+0x198>
 80145c6:	4639      	mov	r1, r7
 80145c8:	f7ff ff28 	bl	801441c <checkint>
 80145cc:	b930      	cbnz	r0, 80145dc <pow+0x154>
 80145ce:	b006      	add	sp, #24
 80145d0:	ecbd 8b0a 	vpop	{d8-d12}
 80145d4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80145d8:	f000 b9ee 	b.w	80149b8 <__math_invalid>
 80145dc:	2801      	cmp	r0, #1
 80145de:	bf14      	ite	ne
 80145e0:	2000      	movne	r0, #0
 80145e2:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 80145e6:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80145ea:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 80145ee:	f3c5 020a 	ubfx	r2, r5, #0, #11
 80145f2:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 80145f6:	2b7f      	cmp	r3, #127	; 0x7f
 80145f8:	d92d      	bls.n	8014656 <pow+0x1ce>
 80145fa:	4b67      	ldr	r3, [pc, #412]	; (8014798 <pow+0x310>)
 80145fc:	2000      	movs	r0, #0
 80145fe:	429c      	cmp	r4, r3
 8014600:	bf08      	it	eq
 8014602:	4286      	cmpeq	r6, r0
 8014604:	f43f af7d 	beq.w	8014502 <pow+0x7a>
 8014608:	f240 31bd 	movw	r1, #957	; 0x3bd
 801460c:	428a      	cmp	r2, r1
 801460e:	d80c      	bhi.n	801462a <pow+0x1a2>
 8014610:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8014614:	42b0      	cmp	r0, r6
 8014616:	41a3      	sbcs	r3, r4
 8014618:	d204      	bcs.n	8014624 <pow+0x19c>
 801461a:	ee31 0b00 	vadd.f64	d0, d1, d0
 801461e:	e79c      	b.n	801455a <pow+0xd2>
 8014620:	2000      	movs	r0, #0
 8014622:	e7e4      	b.n	80145ee <pow+0x166>
 8014624:	ee30 0b41 	vsub.f64	d0, d0, d1
 8014628:	e797      	b.n	801455a <pow+0xd2>
 801462a:	2e01      	cmp	r6, #1
 801462c:	eb74 0303 	sbcs.w	r3, r4, r3
 8014630:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8014634:	bf34      	ite	cc
 8014636:	2301      	movcc	r3, #1
 8014638:	2300      	movcs	r3, #0
 801463a:	4295      	cmp	r5, r2
 801463c:	bf8c      	ite	hi
 801463e:	2500      	movhi	r5, #0
 8014640:	2501      	movls	r5, #1
 8014642:	42ab      	cmp	r3, r5
 8014644:	f000 809d 	beq.w	8014782 <pow+0x2fa>
 8014648:	b006      	add	sp, #24
 801464a:	ecbd 8b0a 	vpop	{d8-d12}
 801464e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014652:	f000 b991 	b.w	8014978 <__math_oflow>
 8014656:	f1bc 0f00 	cmp.w	ip, #0
 801465a:	d10b      	bne.n	8014674 <pow+0x1ec>
 801465c:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8014790 <pow+0x308>
 8014660:	ee20 7b07 	vmul.f64	d7, d0, d7
 8014664:	ec53 2b17 	vmov	r2, r3, d7
 8014668:	ee17 6a10 	vmov	r6, s14
 801466c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8014670:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 8014674:	4b4c      	ldr	r3, [pc, #304]	; (80147a8 <pow+0x320>)
 8014676:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 801467a:	4423      	add	r3, r4
 801467c:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8014680:	1519      	asrs	r1, r3, #20
 8014682:	0d1b      	lsrs	r3, r3, #20
 8014684:	051b      	lsls	r3, r3, #20
 8014686:	eba4 0903 	sub.w	r9, r4, r3
 801468a:	4b48      	ldr	r3, [pc, #288]	; (80147ac <pow+0x324>)
 801468c:	ee04 1a10 	vmov	s8, r1
 8014690:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 8014694:	f1b6 0800 	subs.w	r8, r6, #0
 8014698:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 801469c:	ec49 8b15 	vmov	d5, r8, r9
 80146a0:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 80146a4:	eea5 6b07 	vfma.f64	d6, d5, d7
 80146a8:	ed93 7b00 	vldr	d7, [r3]
 80146ac:	ed93 5b02 	vldr	d5, [r3, #8]
 80146b0:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 80146b4:	eea4 2b07 	vfma.f64	d2, d4, d7
 80146b8:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 80146bc:	ee36 ab02 	vadd.f64	d10, d6, d2
 80146c0:	ee32 2b4a 	vsub.f64	d2, d2, d10
 80146c4:	eea4 7b05 	vfma.f64	d7, d4, d5
 80146c8:	ed93 5b04 	vldr	d5, [r3, #16]
 80146cc:	ee32 2b06 	vadd.f64	d2, d2, d6
 80146d0:	ee37 7b02 	vadd.f64	d7, d7, d2
 80146d4:	ee26 5b05 	vmul.f64	d5, d6, d5
 80146d8:	ed93 4b08 	vldr	d4, [r3, #32]
 80146dc:	ee26 0b05 	vmul.f64	d0, d6, d5
 80146e0:	eeb0 9b40 	vmov.f64	d9, d0
 80146e4:	ee95 9b06 	vfnms.f64	d9, d5, d6
 80146e8:	ed93 5b06 	vldr	d5, [r3, #24]
 80146ec:	ee3a 8b00 	vadd.f64	d8, d10, d0
 80146f0:	ee26 bb00 	vmul.f64	d11, d6, d0
 80146f4:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 80146f8:	eea6 5b04 	vfma.f64	d5, d6, d4
 80146fc:	ee3a ab48 	vsub.f64	d10, d10, d8
 8014700:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8014704:	ee37 9b09 	vadd.f64	d9, d7, d9
 8014708:	ee3a ab00 	vadd.f64	d10, d10, d0
 801470c:	eea6 4b03 	vfma.f64	d4, d6, d3
 8014710:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8014714:	ee39 ab0a 	vadd.f64	d10, d9, d10
 8014718:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 801471c:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8014720:	eea0 4b03 	vfma.f64	d4, d0, d3
 8014724:	eea0 5b04 	vfma.f64	d5, d0, d4
 8014728:	eeab ab05 	vfma.f64	d10, d11, d5
 801472c:	ee38 6b0a 	vadd.f64	d6, d8, d10
 8014730:	ee21 7b06 	vmul.f64	d7, d1, d6
 8014734:	ee17 3a90 	vmov	r3, s15
 8014738:	eeb0 5b47 	vmov.f64	d5, d7
 801473c:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8014740:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8014744:	18b2      	adds	r2, r6, r2
 8014746:	2a3e      	cmp	r2, #62	; 0x3e
 8014748:	ee91 5b06 	vfnms.f64	d5, d1, d6
 801474c:	ee38 8b46 	vsub.f64	d8, d8, d6
 8014750:	ee38 ab0a 	vadd.f64	d10, d8, d10
 8014754:	eea1 5b0a 	vfma.f64	d5, d1, d10
 8014758:	d92b      	bls.n	80147b2 <pow+0x32a>
 801475a:	2a00      	cmp	r2, #0
 801475c:	da0b      	bge.n	8014776 <pow+0x2ee>
 801475e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8014762:	ee37 0b00 	vadd.f64	d0, d7, d0
 8014766:	2800      	cmp	r0, #0
 8014768:	f43f aef7 	beq.w	801455a <pow+0xd2>
 801476c:	eeb1 0b40 	vneg.f64	d0, d0
 8014770:	e6f3      	b.n	801455a <pow+0xd2>
 8014772:	2000      	movs	r0, #0
 8014774:	e77e      	b.n	8014674 <pow+0x1ec>
 8014776:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 801477a:	d919      	bls.n	80147b0 <pow+0x328>
 801477c:	2b00      	cmp	r3, #0
 801477e:	f6bf af63 	bge.w	8014648 <pow+0x1c0>
 8014782:	b006      	add	sp, #24
 8014784:	ecbd 8b0a 	vpop	{d8-d12}
 8014788:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801478c:	f000 b8ec 	b.w	8014968 <__math_uflow>
 8014790:	00000000 	.word	0x00000000
 8014794:	43300000 	.word	0x43300000
 8014798:	3ff00000 	.word	0x3ff00000
 801479c:	fff00000 	.word	0xfff00000
 80147a0:	ffe00000 	.word	0xffe00000
 80147a4:	7fe00000 	.word	0x7fe00000
 80147a8:	c0196aab 	.word	0xc0196aab
 80147ac:	080151d8 	.word	0x080151d8
 80147b0:	2600      	movs	r6, #0
 80147b2:	495d      	ldr	r1, [pc, #372]	; (8014928 <pow+0x4a0>)
 80147b4:	ed91 4b02 	vldr	d4, [r1, #8]
 80147b8:	ed91 3b00 	vldr	d3, [r1]
 80147bc:	eeb0 6b44 	vmov.f64	d6, d4
 80147c0:	eea7 6b03 	vfma.f64	d6, d7, d3
 80147c4:	ee16 5a10 	vmov	r5, s12
 80147c8:	ee36 6b44 	vsub.f64	d6, d6, d4
 80147cc:	ed91 4b04 	vldr	d4, [r1, #16]
 80147d0:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 80147d4:	eea6 7b04 	vfma.f64	d7, d6, d4
 80147d8:	eeb0 0b47 	vmov.f64	d0, d7
 80147dc:	ed91 7b06 	vldr	d7, [r1, #24]
 80147e0:	18dc      	adds	r4, r3, r3
 80147e2:	f104 030f 	add.w	r3, r4, #15
 80147e6:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 80147ea:	eea6 0b07 	vfma.f64	d0, d6, d7
 80147ee:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 80147f2:	ee35 0b00 	vadd.f64	d0, d5, d0
 80147f6:	ee20 6b00 	vmul.f64	d6, d0, d0
 80147fa:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 80147fe:	ed91 5b08 	vldr	d5, [r1, #32]
 8014802:	ee30 7b07 	vadd.f64	d7, d0, d7
 8014806:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 801480a:	eea0 5b04 	vfma.f64	d5, d0, d4
 801480e:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 8014812:	eea6 7b05 	vfma.f64	d7, d6, d5
 8014816:	ee26 6b06 	vmul.f64	d6, d6, d6
 801481a:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 801481e:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8014822:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8014826:	eea0 5b04 	vfma.f64	d5, d0, d4
 801482a:	1940      	adds	r0, r0, r5
 801482c:	2700      	movs	r7, #0
 801482e:	eb17 020c 	adds.w	r2, r7, ip
 8014832:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8014836:	eea6 7b05 	vfma.f64	d7, d6, d5
 801483a:	2e00      	cmp	r6, #0
 801483c:	d15f      	bne.n	80148fe <pow+0x476>
 801483e:	42bd      	cmp	r5, r7
 8014840:	db13      	blt.n	801486a <pow+0x3e2>
 8014842:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8014846:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 801484a:	4610      	mov	r0, r2
 801484c:	ec41 0b10 	vmov	d0, r0, r1
 8014850:	eea7 0b00 	vfma.f64	d0, d7, d0
 8014854:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8014910 <pow+0x488>
 8014858:	ee20 0b07 	vmul.f64	d0, d0, d7
 801485c:	b006      	add	sp, #24
 801485e:	ecbd 8b0a 	vpop	{d8-d12}
 8014862:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014866:	f000 b8bf 	b.w	80149e8 <__math_check_oflow>
 801486a:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801486e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8014872:	4610      	mov	r0, r2
 8014874:	ec41 0b15 	vmov	d5, r0, r1
 8014878:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801487c:	ee27 6b05 	vmul.f64	d6, d7, d5
 8014880:	ee35 7b06 	vadd.f64	d7, d5, d6
 8014884:	eeb0 3bc7 	vabs.f64	d3, d7
 8014888:	eeb4 3bc4 	vcmpe.f64	d3, d4
 801488c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014890:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8014918 <pow+0x490>
 8014894:	d52a      	bpl.n	80148ec <pow+0x464>
 8014896:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801489a:	ee35 5b47 	vsub.f64	d5, d5, d7
 801489e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148a2:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 80148a6:	ee35 6b06 	vadd.f64	d6, d5, d6
 80148aa:	bf48      	it	mi
 80148ac:	eeb0 4b43 	vmovmi.f64	d4, d3
 80148b0:	ee37 3b04 	vadd.f64	d3, d7, d4
 80148b4:	ee34 5b43 	vsub.f64	d5, d4, d3
 80148b8:	ee35 7b07 	vadd.f64	d7, d5, d7
 80148bc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80148c0:	ee37 7b03 	vadd.f64	d7, d7, d3
 80148c4:	ee37 7b44 	vsub.f64	d7, d7, d4
 80148c8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80148cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148d0:	d104      	bne.n	80148dc <pow+0x454>
 80148d2:	4632      	mov	r2, r6
 80148d4:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80148d8:	ec43 2b17 	vmov	d7, r2, r3
 80148dc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80148e0:	ed9d 6b02 	vldr	d6, [sp, #8]
 80148e4:	ee26 6b00 	vmul.f64	d6, d6, d0
 80148e8:	ed8d 6b04 	vstr	d6, [sp, #16]
 80148ec:	ee27 0b00 	vmul.f64	d0, d7, d0
 80148f0:	b006      	add	sp, #24
 80148f2:	ecbd 8b0a 	vpop	{d8-d12}
 80148f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80148fa:	f000 b86c 	b.w	80149d6 <__math_check_uflow>
 80148fe:	ec43 2b10 	vmov	d0, r2, r3
 8014902:	eea7 0b00 	vfma.f64	d0, d7, d0
 8014906:	e628      	b.n	801455a <pow+0xd2>
 8014908:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8014920 <pow+0x498>
 801490c:	e625      	b.n	801455a <pow+0xd2>
 801490e:	bf00      	nop
 8014910:	00000000 	.word	0x00000000
 8014914:	7f000000 	.word	0x7f000000
 8014918:	00000000 	.word	0x00000000
 801491c:	00100000 	.word	0x00100000
	...
 8014928:	08016220 	.word	0x08016220

0801492c <with_errno>:
 801492c:	b513      	push	{r0, r1, r4, lr}
 801492e:	4604      	mov	r4, r0
 8014930:	ed8d 0b00 	vstr	d0, [sp]
 8014934:	f7fb f8d8 	bl	800fae8 <__errno>
 8014938:	ed9d 0b00 	vldr	d0, [sp]
 801493c:	6004      	str	r4, [r0, #0]
 801493e:	b002      	add	sp, #8
 8014940:	bd10      	pop	{r4, pc}

08014942 <xflow>:
 8014942:	b082      	sub	sp, #8
 8014944:	b158      	cbz	r0, 801495e <xflow+0x1c>
 8014946:	eeb1 7b40 	vneg.f64	d7, d0
 801494a:	ed8d 7b00 	vstr	d7, [sp]
 801494e:	ed9d 7b00 	vldr	d7, [sp]
 8014952:	2022      	movs	r0, #34	; 0x22
 8014954:	ee20 0b07 	vmul.f64	d0, d0, d7
 8014958:	b002      	add	sp, #8
 801495a:	f7ff bfe7 	b.w	801492c <with_errno>
 801495e:	eeb0 7b40 	vmov.f64	d7, d0
 8014962:	e7f2      	b.n	801494a <xflow+0x8>
 8014964:	0000      	movs	r0, r0
	...

08014968 <__math_uflow>:
 8014968:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014970 <__math_uflow+0x8>
 801496c:	f7ff bfe9 	b.w	8014942 <xflow>
 8014970:	00000000 	.word	0x00000000
 8014974:	10000000 	.word	0x10000000

08014978 <__math_oflow>:
 8014978:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014980 <__math_oflow+0x8>
 801497c:	f7ff bfe1 	b.w	8014942 <xflow>
 8014980:	00000000 	.word	0x00000000
 8014984:	70000000 	.word	0x70000000

08014988 <__math_divzero>:
 8014988:	b082      	sub	sp, #8
 801498a:	2800      	cmp	r0, #0
 801498c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8014990:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8014994:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8014998:	ed8d 7b00 	vstr	d7, [sp]
 801499c:	ed9d 0b00 	vldr	d0, [sp]
 80149a0:	ed9f 7b03 	vldr	d7, [pc, #12]	; 80149b0 <__math_divzero+0x28>
 80149a4:	2022      	movs	r0, #34	; 0x22
 80149a6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 80149aa:	b002      	add	sp, #8
 80149ac:	f7ff bfbe 	b.w	801492c <with_errno>
	...

080149b8 <__math_invalid>:
 80149b8:	eeb0 7b40 	vmov.f64	d7, d0
 80149bc:	eeb4 7b47 	vcmp.f64	d7, d7
 80149c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149c4:	ee30 6b40 	vsub.f64	d6, d0, d0
 80149c8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 80149cc:	d602      	bvs.n	80149d4 <__math_invalid+0x1c>
 80149ce:	2021      	movs	r0, #33	; 0x21
 80149d0:	f7ff bfac 	b.w	801492c <with_errno>
 80149d4:	4770      	bx	lr

080149d6 <__math_check_uflow>:
 80149d6:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80149da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149de:	d102      	bne.n	80149e6 <__math_check_uflow+0x10>
 80149e0:	2022      	movs	r0, #34	; 0x22
 80149e2:	f7ff bfa3 	b.w	801492c <with_errno>
 80149e6:	4770      	bx	lr

080149e8 <__math_check_oflow>:
 80149e8:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8014a08 <__math_check_oflow+0x20>
 80149ec:	eeb0 7bc0 	vabs.f64	d7, d0
 80149f0:	eeb4 7b46 	vcmp.f64	d7, d6
 80149f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149f8:	dd02      	ble.n	8014a00 <__math_check_oflow+0x18>
 80149fa:	2022      	movs	r0, #34	; 0x22
 80149fc:	f7ff bf96 	b.w	801492c <with_errno>
 8014a00:	4770      	bx	lr
 8014a02:	bf00      	nop
 8014a04:	f3af 8000 	nop.w
 8014a08:	ffffffff 	.word	0xffffffff
 8014a0c:	7fefffff 	.word	0x7fefffff

08014a10 <_init>:
 8014a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a12:	bf00      	nop
 8014a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014a16:	bc08      	pop	{r3}
 8014a18:	469e      	mov	lr, r3
 8014a1a:	4770      	bx	lr

08014a1c <_fini>:
 8014a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a1e:	bf00      	nop
 8014a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014a22:	bc08      	pop	{r3}
 8014a24:	469e      	mov	lr, r3
 8014a26:	4770      	bx	lr
