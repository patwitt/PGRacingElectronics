
MicroSD_SDIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000171c0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002018  080173c0  080173c0  000273c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080193d8  080193d8  00030db8  2**0
                  CONTENTS
  4 .ARM          00000008  080193d8  080193d8  000293d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080193e0  080193e0  00030db8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080193e0  080193e0  000293e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080193e8  080193e8  000293e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000db8  20000000  080193ec  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000057b0  20000db8  0801a1a4  00030db8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20006568  0801a1a4  00036568  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030db8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d242  00000000  00000000  00030de6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c21  00000000  00000000  0005e028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fa0  00000000  00000000  00063c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d18  00000000  00000000  00065bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002fc80  00000000  00000000  00067908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c9d1  00000000  00000000  00097588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001133bf  00000000  00000000  000c3f59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001d7318  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009a74  00000000  00000000  001d7368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000b4  00000000  00000000  001e0ddc  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000183  00000000  00000000  001e0e90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000db8 	.word	0x20000db8
 800021c:	00000000 	.word	0x00000000
 8000220:	080173a8 	.word	0x080173a8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000dbc 	.word	0x20000dbc
 800023c:	080173a8 	.word	0x080173a8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <MLX90640_DumpEE>:
int CheckAdjacentPixels(uint16_t pix1, uint16_t pix2);  
float GetMedian(float *values, int n);
int IsPixelBad(uint16_t pixel,paramsMLX90640 *params);
  
int MLX90640_DumpEE(uint8_t slaveAddr, uint16_t *eeData,I2C_HandleTypeDef * i2c)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b086      	sub	sp, #24
 80005f8:	af02      	add	r7, sp, #8
 80005fa:	4603      	mov	r3, r0
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	607a      	str	r2, [r7, #4]
 8000600:	73fb      	strb	r3, [r7, #15]
     return MLX90640_I2CRead(slaveAddr, 0x2400, 832, eeData,i2c);
 8000602:	7bf8      	ldrb	r0, [r7, #15]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	9300      	str	r3, [sp, #0]
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	f44f 7250 	mov.w	r2, #832	; 0x340
 800060e:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8000612:	f001 ffa5 	bl	8002560 <MLX90640_I2CRead>
 8000616:	4603      	mov	r3, r0
}
 8000618:	4618      	mov	r0, r3
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <MLX90640_ExtractParameters>:
    printf("%d \n", frameData[833]);
    return frameData[833];    
}

int MLX90640_ExtractParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	6039      	str	r1, [r7, #0]
    int error = 0;
 800062a:	2300      	movs	r3, #0
 800062c:	60fb      	str	r3, [r7, #12]
    
    ExtractVDDParameters(eeData, mlx90640);
 800062e:	6839      	ldr	r1, [r7, #0]
 8000630:	6878      	ldr	r0, [r7, #4]
 8000632:	f000 f894 	bl	800075e <ExtractVDDParameters>
    ExtractPTATParameters(eeData, mlx90640);
 8000636:	6839      	ldr	r1, [r7, #0]
 8000638:	6878      	ldr	r0, [r7, #4]
 800063a:	f000 f8c9 	bl	80007d0 <ExtractPTATParameters>
    ExtractGainParameters(eeData, mlx90640);
 800063e:	6839      	ldr	r1, [r7, #0]
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	f000 f949 	bl	80008d8 <ExtractGainParameters>
    ExtractTgcParameters(eeData, mlx90640);
 8000646:	6839      	ldr	r1, [r7, #0]
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f000 f957 	bl	80008fc <ExtractTgcParameters>
    ExtractResolutionParameters(eeData, mlx90640);
 800064e:	6839      	ldr	r1, [r7, #0]
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f000 f98b 	bl	800096c <ExtractResolutionParameters>
    ExtractKsTaParameters(eeData, mlx90640);
 8000656:	6839      	ldr	r1, [r7, #0]
 8000658:	6878      	ldr	r0, [r7, #4]
 800065a:	f000 f99f 	bl	800099c <ExtractKsTaParameters>
    ExtractKsToParameters(eeData, mlx90640);
 800065e:	6839      	ldr	r1, [r7, #0]
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f000 f9d3 	bl	8000a0c <ExtractKsToParameters>
    ExtractCPParameters(eeData, mlx90640);
 8000666:	6839      	ldr	r1, [r7, #0]
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f001 fc69 	bl	8001f40 <ExtractCPParameters>
    ExtractAlphaParameters(eeData, mlx90640);
 800066e:	6839      	ldr	r1, [r7, #0]
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f000 fab1 	bl	8000bd8 <ExtractAlphaParameters>
    ExtractOffsetParameters(eeData, mlx90640);
 8000676:	6839      	ldr	r1, [r7, #0]
 8000678:	6878      	ldr	r0, [r7, #4]
 800067a:	f000 fe0b 	bl	8001294 <ExtractOffsetParameters>
    ExtractKtaPixelParameters(eeData, mlx90640);
 800067e:	6839      	ldr	r1, [r7, #0]
 8000680:	6878      	ldr	r0, [r7, #4]
 8000682:	f001 f841 	bl	8001708 <ExtractKtaPixelParameters>
    ExtractKvPixelParameters(eeData, mlx90640);
 8000686:	6839      	ldr	r1, [r7, #0]
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	f001 fa71 	bl	8001b70 <ExtractKvPixelParameters>
    ExtractCILCParameters(eeData, mlx90640);
 800068e:	6839      	ldr	r1, [r7, #0]
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f001 fd99 	bl	80021c8 <ExtractCILCParameters>
    error = ExtractDeviatingPixels(eeData, mlx90640);  
 8000696:	6839      	ldr	r1, [r7, #0]
 8000698:	6878      	ldr	r0, [r7, #4]
 800069a:	f001 fe35 	bl	8002308 <ExtractDeviatingPixels>
 800069e:	60f8      	str	r0, [r7, #12]
    
    return error;
 80006a0:	68fb      	ldr	r3, [r7, #12]

}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <MLX90640_SetRefreshRate>:
}

//------------------------------------------------------------------------------

int MLX90640_SetRefreshRate(uint8_t slaveAddr, uint8_t refreshRate,I2C_HandleTypeDef * i2c)
{
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b088      	sub	sp, #32
 80006ae:	af02      	add	r7, sp, #8
 80006b0:	4603      	mov	r3, r0
 80006b2:	603a      	str	r2, [r7, #0]
 80006b4:	71fb      	strb	r3, [r7, #7]
 80006b6:	460b      	mov	r3, r1
 80006b8:	71bb      	strb	r3, [r7, #6]
    uint16_t controlRegister1;
    int value;
    int error;
    
    value = (refreshRate & 0x07)<<7;
 80006ba:	79bb      	ldrb	r3, [r7, #6]
 80006bc:	01db      	lsls	r3, r3, #7
 80006be:	f403 7360 	and.w	r3, r3, #896	; 0x380
 80006c2:	613b      	str	r3, [r7, #16]
    
    error = MLX90640_I2CRead(slaveAddr, 0x800D, 1, &controlRegister1,i2c);
 80006c4:	f107 020e 	add.w	r2, r7, #14
 80006c8:	79f8      	ldrb	r0, [r7, #7]
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	4613      	mov	r3, r2
 80006d0:	2201      	movs	r2, #1
 80006d2:	f248 010d 	movw	r1, #32781	; 0x800d
 80006d6:	f001 ff43 	bl	8002560 <MLX90640_I2CRead>
 80006da:	6178      	str	r0, [r7, #20]
    if(error == 0)
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d110      	bne.n	8000704 <MLX90640_SetRefreshRate+0x5a>
    {
        value = (controlRegister1 & 0xFC7F) | value;
 80006e2:	89fb      	ldrh	r3, [r7, #14]
 80006e4:	461a      	mov	r2, r3
 80006e6:	f64f 437f 	movw	r3, #64639	; 0xfc7f
 80006ea:	4013      	ands	r3, r2
 80006ec:	693a      	ldr	r2, [r7, #16]
 80006ee:	4313      	orrs	r3, r2
 80006f0:	613b      	str	r3, [r7, #16]
        error = MLX90640_I2CWrite(slaveAddr, 0x800D, value,i2c);
 80006f2:	693b      	ldr	r3, [r7, #16]
 80006f4:	b29a      	uxth	r2, r3
 80006f6:	79f8      	ldrb	r0, [r7, #7]
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	f248 010d 	movw	r1, #32781	; 0x800d
 80006fe:	f001 ff7f 	bl	8002600 <MLX90640_I2CWrite>
 8000702:	6178      	str	r0, [r7, #20]
    }    
    
    return error;
 8000704:	697b      	ldr	r3, [r7, #20]
}
 8000706:	4618      	mov	r0, r3
 8000708:	3718      	adds	r7, #24
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <MLX90640_SetChessMode>:
}

//------------------------------------------------------------------------------

int MLX90640_SetChessMode(uint8_t slaveAddr,I2C_HandleTypeDef * i2c)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	b088      	sub	sp, #32
 8000712:	af02      	add	r7, sp, #8
 8000714:	4603      	mov	r3, r0
 8000716:	6039      	str	r1, [r7, #0]
 8000718:	71fb      	strb	r3, [r7, #7]
    uint16_t controlRegister1;
    int value;
    int error;
        
    error = MLX90640_I2CRead(slaveAddr, 0x800D, 1, &controlRegister1,i2c);
 800071a:	f107 020e 	add.w	r2, r7, #14
 800071e:	79f8      	ldrb	r0, [r7, #7]
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	9300      	str	r3, [sp, #0]
 8000724:	4613      	mov	r3, r2
 8000726:	2201      	movs	r2, #1
 8000728:	f248 010d 	movw	r1, #32781	; 0x800d
 800072c:	f001 ff18 	bl	8002560 <MLX90640_I2CRead>
 8000730:	6178      	str	r0, [r7, #20]
    
    if(error == 0)
 8000732:	697b      	ldr	r3, [r7, #20]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d10d      	bne.n	8000754 <MLX90640_SetChessMode+0x46>
    {
        value = (controlRegister1 | 0x1000);
 8000738:	89fb      	ldrh	r3, [r7, #14]
 800073a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800073e:	b29b      	uxth	r3, r3
 8000740:	613b      	str	r3, [r7, #16]
        error = MLX90640_I2CWrite(slaveAddr, 0x800D, value,i2c);
 8000742:	693b      	ldr	r3, [r7, #16]
 8000744:	b29a      	uxth	r2, r3
 8000746:	79f8      	ldrb	r0, [r7, #7]
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	f248 010d 	movw	r1, #32781	; 0x800d
 800074e:	f001 ff57 	bl	8002600 <MLX90640_I2CWrite>
 8000752:	6178      	str	r0, [r7, #20]
    }    
    
    return error;
 8000754:	697b      	ldr	r3, [r7, #20]
}
 8000756:	4618      	mov	r0, r3
 8000758:	3718      	adds	r7, #24
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}

0800075e <ExtractVDDParameters>:
}

//------------------------------------------------------------------------------

void ExtractVDDParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 800075e:	b480      	push	{r7}
 8000760:	b085      	sub	sp, #20
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]
 8000766:	6039      	str	r1, [r7, #0]
    int16_t kVdd;
    int16_t vdd25;
    
    kVdd = eeData[51];
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	3366      	adds	r3, #102	; 0x66
 800076c:	881b      	ldrh	r3, [r3, #0]
 800076e:	81fb      	strh	r3, [r7, #14]
    
    kVdd = (eeData[51] & 0xFF00) >> 8;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	3366      	adds	r3, #102	; 0x66
 8000774:	881b      	ldrh	r3, [r3, #0]
 8000776:	0a1b      	lsrs	r3, r3, #8
 8000778:	b29b      	uxth	r3, r3
 800077a:	81fb      	strh	r3, [r7, #14]
    if(kVdd > 127)
 800077c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000780:	2b7f      	cmp	r3, #127	; 0x7f
 8000782:	dd04      	ble.n	800078e <ExtractVDDParameters+0x30>
    {
        kVdd = kVdd - 256;
 8000784:	89fb      	ldrh	r3, [r7, #14]
 8000786:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800078a:	b29b      	uxth	r3, r3
 800078c:	81fb      	strh	r3, [r7, #14]
    }
    kVdd = 32 * kVdd;
 800078e:	89fb      	ldrh	r3, [r7, #14]
 8000790:	015b      	lsls	r3, r3, #5
 8000792:	b29b      	uxth	r3, r3
 8000794:	81fb      	strh	r3, [r7, #14]
    vdd25 = eeData[51] & 0x00FF;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	3366      	adds	r3, #102	; 0x66
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	b21b      	sxth	r3, r3
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	81bb      	strh	r3, [r7, #12]
    vdd25 = ((vdd25 - 256) << 5) - 8192;
 80007a2:	89bb      	ldrh	r3, [r7, #12]
 80007a4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	015b      	lsls	r3, r3, #5
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80007b2:	b29b      	uxth	r3, r3
 80007b4:	81bb      	strh	r3, [r7, #12]
    
    mlx90640->kVdd = kVdd;
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	89fa      	ldrh	r2, [r7, #14]
 80007ba:	801a      	strh	r2, [r3, #0]
    mlx90640->vdd25 = vdd25; 
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	89ba      	ldrh	r2, [r7, #12]
 80007c0:	805a      	strh	r2, [r3, #2]
}
 80007c2:	bf00      	nop
 80007c4:	3714      	adds	r7, #20
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
	...

080007d0 <ExtractPTATParameters>:

//------------------------------------------------------------------------------

void ExtractPTATParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b087      	sub	sp, #28
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
    float KvPTAT;
    float KtPTAT;
    int16_t vPTAT25;
    float alphaPTAT;
    
    KvPTAT = (eeData[50] & 0xFC00) >> 10;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	3364      	adds	r3, #100	; 0x64
 80007de:	881b      	ldrh	r3, [r3, #0]
 80007e0:	0a9b      	lsrs	r3, r3, #10
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	ee07 3a90 	vmov	s15, r3
 80007e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007ec:	edc7 7a05 	vstr	s15, [r7, #20]
    if(KvPTAT > 31)
 80007f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80007f4:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 80007f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000800:	dd07      	ble.n	8000812 <ExtractPTATParameters+0x42>
    {
        KvPTAT = KvPTAT - 64;
 8000802:	edd7 7a05 	vldr	s15, [r7, #20]
 8000806:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80008c8 <ExtractPTATParameters+0xf8>
 800080a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800080e:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    KvPTAT = KvPTAT/4096;
 8000812:	ed97 7a05 	vldr	s14, [r7, #20]
 8000816:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80008cc <ExtractPTATParameters+0xfc>
 800081a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800081e:	edc7 7a05 	vstr	s15, [r7, #20]
    
    KtPTAT = eeData[50] & 0x03FF;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	3364      	adds	r3, #100	; 0x64
 8000826:	881b      	ldrh	r3, [r3, #0]
 8000828:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800082c:	ee07 3a90 	vmov	s15, r3
 8000830:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000834:	edc7 7a04 	vstr	s15, [r7, #16]
    if(KtPTAT > 511)
 8000838:	edd7 7a04 	vldr	s15, [r7, #16]
 800083c:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80008d0 <ExtractPTATParameters+0x100>
 8000840:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000848:	dd07      	ble.n	800085a <ExtractPTATParameters+0x8a>
    {
        KtPTAT = KtPTAT - 1024;
 800084a:	edd7 7a04 	vldr	s15, [r7, #16]
 800084e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80008d4 <ExtractPTATParameters+0x104>
 8000852:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000856:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    KtPTAT = KtPTAT/8;
 800085a:	ed97 7a04 	vldr	s14, [r7, #16]
 800085e:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8000862:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000866:	edc7 7a04 	vstr	s15, [r7, #16]
    
    vPTAT25 = eeData[49];
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	3362      	adds	r3, #98	; 0x62
 800086e:	881b      	ldrh	r3, [r3, #0]
 8000870:	81fb      	strh	r3, [r7, #14]
    
    alphaPTAT = (eeData[16] & 0xF000) / pow(2, (double)14) + 8.0f;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	3320      	adds	r3, #32
 8000876:	881b      	ldrh	r3, [r3, #0]
 8000878:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800087c:	ee07 3a90 	vmov	s15, r3
 8000880:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000884:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 80008c0 <ExtractPTATParameters+0xf0>
 8000888:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800088c:	eeb2 6b00 	vmov.f64	d6, #32	; 0x41000000  8.0
 8000890:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000894:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000898:	edc7 7a02 	vstr	s15, [r7, #8]
    
    mlx90640->KvPTAT = KvPTAT;
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	697a      	ldr	r2, [r7, #20]
 80008a0:	605a      	str	r2, [r3, #4]
    mlx90640->KtPTAT = KtPTAT;    
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	693a      	ldr	r2, [r7, #16]
 80008a6:	609a      	str	r2, [r3, #8]
    mlx90640->vPTAT25 = vPTAT25;
 80008a8:	89fa      	ldrh	r2, [r7, #14]
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	819a      	strh	r2, [r3, #12]
    mlx90640->alphaPTAT = alphaPTAT;   
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	68ba      	ldr	r2, [r7, #8]
 80008b2:	611a      	str	r2, [r3, #16]
}
 80008b4:	bf00      	nop
 80008b6:	371c      	adds	r7, #28
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	00000000 	.word	0x00000000
 80008c4:	40d00000 	.word	0x40d00000
 80008c8:	42800000 	.word	0x42800000
 80008cc:	45800000 	.word	0x45800000
 80008d0:	43ff8000 	.word	0x43ff8000
 80008d4:	44800000 	.word	0x44800000

080008d8 <ExtractGainParameters>:

//------------------------------------------------------------------------------

void ExtractGainParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	6039      	str	r1, [r7, #0]
    int16_t gainEE;
    
    gainEE = eeData[48];
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	3360      	adds	r3, #96	; 0x60
 80008e6:	881b      	ldrh	r3, [r3, #0]
 80008e8:	81fb      	strh	r3, [r7, #14]
    if(gainEE > 32767)
    {
        gainEE = gainEE -65536;
    }
    
    mlx90640->gainEE = gainEE;    
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	89fa      	ldrh	r2, [r7, #14]
 80008ee:	829a      	strh	r2, [r3, #20]
}
 80008f0:	bf00      	nop
 80008f2:	3714      	adds	r7, #20
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <ExtractTgcParameters>:

//------------------------------------------------------------------------------

void ExtractTgcParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b085      	sub	sp, #20
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	6039      	str	r1, [r7, #0]
    float tgc;
    tgc = eeData[60] & 0x00FF;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	3378      	adds	r3, #120	; 0x78
 800090a:	881b      	ldrh	r3, [r3, #0]
 800090c:	b2db      	uxtb	r3, r3
 800090e:	ee07 3a90 	vmov	s15, r3
 8000912:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000916:	edc7 7a03 	vstr	s15, [r7, #12]
    if(tgc > 127)
 800091a:	edd7 7a03 	vldr	s15, [r7, #12]
 800091e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000960 <ExtractTgcParameters+0x64>
 8000922:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800092a:	dd07      	ble.n	800093c <ExtractTgcParameters+0x40>
    {
        tgc = tgc - 256;
 800092c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000930:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000964 <ExtractTgcParameters+0x68>
 8000934:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000938:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    tgc = tgc / 32.0f;
 800093c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000940:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000968 <ExtractTgcParameters+0x6c>
 8000944:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000948:	edc7 7a03 	vstr	s15, [r7, #12]
    
    mlx90640->tgc = tgc;        
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	68fa      	ldr	r2, [r7, #12]
 8000950:	619a      	str	r2, [r3, #24]
}
 8000952:	bf00      	nop
 8000954:	3714      	adds	r7, #20
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	42fe0000 	.word	0x42fe0000
 8000964:	43800000 	.word	0x43800000
 8000968:	42000000 	.word	0x42000000

0800096c <ExtractResolutionParameters>:

//------------------------------------------------------------------------------

void ExtractResolutionParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 800096c:	b480      	push	{r7}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	6039      	str	r1, [r7, #0]
    uint8_t resolutionEE;
    resolutionEE = (eeData[56] & 0x3000) >> 12;    
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	3370      	adds	r3, #112	; 0x70
 800097a:	881b      	ldrh	r3, [r3, #0]
 800097c:	131b      	asrs	r3, r3, #12
 800097e:	b2db      	uxtb	r3, r3
 8000980:	f003 0303 	and.w	r3, r3, #3
 8000984:	73fb      	strb	r3, [r7, #15]
    
    mlx90640->resolutionEE = resolutionEE;
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	7bfa      	ldrb	r2, [r7, #15]
 800098a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 800098e:	bf00      	nop
 8000990:	3714      	adds	r7, #20
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
	...

0800099c <ExtractKsTaParameters>:

//------------------------------------------------------------------------------

void ExtractKsTaParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
    float KsTa;
    KsTa = (eeData[60] & 0xFF00) >> 8;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	3378      	adds	r3, #120	; 0x78
 80009aa:	881b      	ldrh	r3, [r3, #0]
 80009ac:	0a1b      	lsrs	r3, r3, #8
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	ee07 3a90 	vmov	s15, r3
 80009b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009b8:	edc7 7a03 	vstr	s15, [r7, #12]
    if(KsTa > 127)
 80009bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80009c0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000a00 <ExtractKsTaParameters+0x64>
 80009c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009cc:	dd07      	ble.n	80009de <ExtractKsTaParameters+0x42>
    {
        KsTa = KsTa -256;
 80009ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80009d2:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000a04 <ExtractKsTaParameters+0x68>
 80009d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80009da:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    KsTa = KsTa / 8192.0f;
 80009de:	ed97 7a03 	vldr	s14, [r7, #12]
 80009e2:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000a08 <ExtractKsTaParameters+0x6c>
 80009e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009ea:	edc7 7a03 	vstr	s15, [r7, #12]
    
    mlx90640->KsTa = KsTa;
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	68fa      	ldr	r2, [r7, #12]
 80009f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80009f4:	bf00      	nop
 80009f6:	3714      	adds	r7, #20
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	42fe0000 	.word	0x42fe0000
 8000a04:	43800000 	.word	0x43800000
 8000a08:	46000000 	.word	0x46000000

08000a0c <ExtractKsToParameters>:

//------------------------------------------------------------------------------

void ExtractKsToParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b087      	sub	sp, #28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	6039      	str	r1, [r7, #0]
    int KsToScale;
    int8_t step;
    
    step = ((eeData[63] & 0x3000) >> 12) * 10;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	337e      	adds	r3, #126	; 0x7e
 8000a1a:	881b      	ldrh	r3, [r3, #0]
 8000a1c:	131b      	asrs	r3, r3, #12
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	f003 0303 	and.w	r3, r3, #3
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	461a      	mov	r2, r3
 8000a28:	0092      	lsls	r2, r2, #2
 8000a2a:	4413      	add	r3, r2
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	74fb      	strb	r3, [r7, #19]
    
    mlx90640->ct[0] = -40;
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	f64f 72d8 	movw	r2, #65496	; 0xffd8
 8000a38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    mlx90640->ct[1] = 0;
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	2200      	movs	r2, #0
 8000a40:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    mlx90640->ct[2] = (eeData[63] & 0x00F0) >> 4;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	337e      	adds	r3, #126	; 0x7e
 8000a48:	881b      	ldrh	r3, [r3, #0]
 8000a4a:	111b      	asrs	r3, r3, #4
 8000a4c:	b21b      	sxth	r3, r3
 8000a4e:	f003 030f 	and.w	r3, r3, #15
 8000a52:	b21a      	sxth	r2, r3
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    mlx90640->ct[3] = (eeData[63] & 0x0F00) >> 8;    
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	337e      	adds	r3, #126	; 0x7e
 8000a5e:	881b      	ldrh	r3, [r3, #0]
 8000a60:	121b      	asrs	r3, r3, #8
 8000a62:	b21b      	sxth	r3, r3
 8000a64:	f003 030f 	and.w	r3, r3, #15
 8000a68:	b21a      	sxth	r2, r3
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    
    mlx90640->ct[2] = mlx90640->ct[2]*step;
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8000a76:	b29a      	uxth	r2, r3
 8000a78:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	fb12 f303 	smulbb	r3, r2, r3
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	b21a      	sxth	r2, r3
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    mlx90640->ct[3] = mlx90640->ct[2] + mlx90640->ct[3]*step;
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8000a92:	b29a      	uxth	r2, r3
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8000a9a:	b299      	uxth	r1, r3
 8000a9c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	fb11 f303 	smulbb	r3, r1, r3
 8000aa6:	b29b      	uxth	r3, r3
 8000aa8:	4413      	add	r3, r2
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	b21a      	sxth	r2, r3
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    mlx90640->ct[4] = 400;
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000aba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    
    KsToScale = (eeData[63] & 0x000F) + 8;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	337e      	adds	r3, #126	; 0x7e
 8000ac2:	881b      	ldrh	r3, [r3, #0]
 8000ac4:	f003 030f 	and.w	r3, r3, #15
 8000ac8:	3308      	adds	r3, #8
 8000aca:	60fb      	str	r3, [r7, #12]
    KsToScale = 1 << KsToScale;
 8000acc:	2201      	movs	r2, #1
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad4:	60fb      	str	r3, [r7, #12]
    
    mlx90640->ksTo[0] = eeData[61] & 0x00FF;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	337a      	adds	r3, #122	; 0x7a
 8000ada:	881b      	ldrh	r3, [r3, #0]
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	ee07 3a90 	vmov	s15, r3
 8000ae2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    mlx90640->ksTo[1] = (eeData[61] & 0xFF00) >> 8;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	337a      	adds	r3, #122	; 0x7a
 8000af0:	881b      	ldrh	r3, [r3, #0]
 8000af2:	0a1b      	lsrs	r3, r3, #8
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	ee07 3a90 	vmov	s15, r3
 8000afa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    mlx90640->ksTo[2] = eeData[62] & 0x00FF;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	337c      	adds	r3, #124	; 0x7c
 8000b08:	881b      	ldrh	r3, [r3, #0]
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	ee07 3a90 	vmov	s15, r3
 8000b10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    mlx90640->ksTo[3] = (eeData[62] & 0xFF00) >> 8;      
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	337c      	adds	r3, #124	; 0x7c
 8000b1e:	881b      	ldrh	r3, [r3, #0]
 8000b20:	0a1b      	lsrs	r3, r3, #8
 8000b22:	b29b      	uxth	r3, r3
 8000b24:	ee07 3a90 	vmov	s15, r3
 8000b28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
    
    for(int i = 0; i < 4; i++)
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
 8000b36:	e03c      	b.n	8000bb2 <ExtractKsToParameters+0x1a6>
    {
        if(mlx90640->ksTo[i] > 127)
 8000b38:	683a      	ldr	r2, [r7, #0]
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	330a      	adds	r3, #10
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	4413      	add	r3, r2
 8000b42:	3304      	adds	r3, #4
 8000b44:	edd3 7a00 	vldr	s15, [r3]
 8000b48:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8000bcc <ExtractKsToParameters+0x1c0>
 8000b4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b54:	dd13      	ble.n	8000b7e <ExtractKsToParameters+0x172>
        {
            mlx90640->ksTo[i] = mlx90640->ksTo[i] - 256;
 8000b56:	683a      	ldr	r2, [r7, #0]
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	330a      	adds	r3, #10
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	4413      	add	r3, r2
 8000b60:	3304      	adds	r3, #4
 8000b62:	edd3 7a00 	vldr	s15, [r3]
 8000b66:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000bd0 <ExtractKsToParameters+0x1c4>
 8000b6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000b6e:	683a      	ldr	r2, [r7, #0]
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	330a      	adds	r3, #10
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	4413      	add	r3, r2
 8000b78:	3304      	adds	r3, #4
 8000b7a:	edc3 7a00 	vstr	s15, [r3]
        }
        mlx90640->ksTo[i] = mlx90640->ksTo[i] / KsToScale;
 8000b7e:	683a      	ldr	r2, [r7, #0]
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	330a      	adds	r3, #10
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	4413      	add	r3, r2
 8000b88:	3304      	adds	r3, #4
 8000b8a:	edd3 6a00 	vldr	s13, [r3]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	ee07 3a90 	vmov	s15, r3
 8000b94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b9c:	683a      	ldr	r2, [r7, #0]
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	330a      	adds	r3, #10
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	4413      	add	r3, r2
 8000ba6:	3304      	adds	r3, #4
 8000ba8:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 0; i < 4; i++)
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	617b      	str	r3, [r7, #20]
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	2b03      	cmp	r3, #3
 8000bb6:	ddbf      	ble.n	8000b38 <ExtractKsToParameters+0x12c>
    } 
    
    mlx90640->ksTo[4] = -0.0002;
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	4a06      	ldr	r2, [pc, #24]	; (8000bd4 <ExtractKsToParameters+0x1c8>)
 8000bbc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000bbe:	bf00      	nop
 8000bc0:	371c      	adds	r7, #28
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	42fe0000 	.word	0x42fe0000
 8000bd0:	43800000 	.word	0x43800000
 8000bd4:	b951b717 	.word	0xb951b717

08000bd8 <ExtractAlphaParameters>:

//------------------------------------------------------------------------------

void ExtractAlphaParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	ed2d 8b02 	vpush	{d8}
 8000bde:	f5ad 6d52 	sub.w	sp, sp, #3360	; 0xd20
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8000be8:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8000bec:	6018      	str	r0, [r3, #0]
 8000bee:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8000bf2:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 8000bf6:	6019      	str	r1, [r3, #0]
    int accRow[24];
    int accColumn[32];
    int p = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
    uint8_t accRemScale;
    float alphaTemp[768];
    float temp;
    

    accRemScale = eeData[32] & 0x000F;
 8000bfe:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8000c02:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	3340      	adds	r3, #64	; 0x40
 8000c0a:	881b      	ldrh	r3, [r3, #0]
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	f003 030f 	and.w	r3, r3, #15
 8000c12:	f887 3cf3 	strb.w	r3, [r7, #3315]	; 0xcf3
    accColumnScale = (eeData[32] & 0x00F0) >> 4;
 8000c16:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8000c1a:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	3340      	adds	r3, #64	; 0x40
 8000c22:	881b      	ldrh	r3, [r3, #0]
 8000c24:	111b      	asrs	r3, r3, #4
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	f003 030f 	and.w	r3, r3, #15
 8000c2c:	f887 3cf2 	strb.w	r3, [r7, #3314]	; 0xcf2
    accRowScale = (eeData[32] & 0x0F00) >> 8;
 8000c30:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8000c34:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	3340      	adds	r3, #64	; 0x40
 8000c3c:	881b      	ldrh	r3, [r3, #0]
 8000c3e:	121b      	asrs	r3, r3, #8
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	f003 030f 	and.w	r3, r3, #15
 8000c46:	f887 3cf1 	strb.w	r3, [r7, #3313]	; 0xcf1
    alphaScale = ((eeData[32] & 0xF000) >> 12) + 30;
 8000c4a:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8000c4e:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	3340      	adds	r3, #64	; 0x40
 8000c56:	881b      	ldrh	r3, [r3, #0]
 8000c58:	0b1b      	lsrs	r3, r3, #12
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	331e      	adds	r3, #30
 8000c60:	f887 3d1f 	strb.w	r3, [r7, #3359]	; 0xd1f
    alphaRef = eeData[33];
 8000c64:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8000c68:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	3342      	adds	r3, #66	; 0x42
 8000c70:	881b      	ldrh	r3, [r3, #0]
 8000c72:	f8c7 3cec 	str.w	r3, [r7, #3308]	; 0xcec
    
    for(int i = 0; i < 6; i++)
 8000c76:	2300      	movs	r3, #0
 8000c78:	f8c7 3d14 	str.w	r3, [r7, #3348]	; 0xd14
 8000c7c:	e062      	b.n	8000d44 <ExtractAlphaParameters+0x16c>
    {
        p = i * 4;
 8000c7e:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
        accRow[p + 0] = (eeData[34 + i] & 0x000F);
 8000c88:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8000c8c:	3322      	adds	r3, #34	; 0x22
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8000c94:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8000c98:	6812      	ldr	r2, [r2, #0]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	881b      	ldrh	r3, [r3, #0]
 8000c9e:	f003 020f 	and.w	r2, r3, #15
 8000ca2:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8000cac:	443b      	add	r3, r7
 8000cae:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 1] = (eeData[34 + i] & 0x00F0) >> 4;
 8000cb2:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8000cb6:	3322      	adds	r3, #34	; 0x22
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8000cbe:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8000cc2:	6812      	ldr	r2, [r2, #0]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	881b      	ldrh	r3, [r3, #0]
 8000cc8:	111a      	asrs	r2, r3, #4
 8000cca:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8000cce:	3301      	adds	r3, #1
 8000cd0:	f002 020f 	and.w	r2, r2, #15
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8000cda:	443b      	add	r3, r7
 8000cdc:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 2] = (eeData[34 + i] & 0x0F00) >> 8;
 8000ce0:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8000ce4:	3322      	adds	r3, #34	; 0x22
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8000cec:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8000cf0:	6812      	ldr	r2, [r2, #0]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	881b      	ldrh	r3, [r3, #0]
 8000cf6:	121a      	asrs	r2, r3, #8
 8000cf8:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8000cfc:	3302      	adds	r3, #2
 8000cfe:	f002 020f 	and.w	r2, r2, #15
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8000d08:	443b      	add	r3, r7
 8000d0a:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 3] = (eeData[34 + i] & 0xF000) >> 12;
 8000d0e:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8000d12:	3322      	adds	r3, #34	; 0x22
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8000d1a:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8000d1e:	6812      	ldr	r2, [r2, #0]
 8000d20:	4413      	add	r3, r2
 8000d22:	881b      	ldrh	r3, [r3, #0]
 8000d24:	0b1b      	lsrs	r3, r3, #12
 8000d26:	b29a      	uxth	r2, r3
 8000d28:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8000d2c:	3303      	adds	r3, #3
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8000d34:	443b      	add	r3, r7
 8000d36:	f843 2c94 	str.w	r2, [r3, #-148]
    for(int i = 0; i < 6; i++)
 8000d3a:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8000d3e:	3301      	adds	r3, #1
 8000d40:	f8c7 3d14 	str.w	r3, [r7, #3348]	; 0xd14
 8000d44:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8000d48:	2b05      	cmp	r3, #5
 8000d4a:	dd98      	ble.n	8000c7e <ExtractAlphaParameters+0xa6>
    }
    
    for(int i = 0; i < 24; i++)
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f8c7 3d10 	str.w	r3, [r7, #3344]	; 0xd10
 8000d52:	e020      	b.n	8000d96 <ExtractAlphaParameters+0x1be>
    {
        if (accRow[i] > 7)
 8000d54:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8000d5e:	443b      	add	r3, r7
 8000d60:	f853 3c94 	ldr.w	r3, [r3, #-148]
 8000d64:	2b07      	cmp	r3, #7
 8000d66:	dd11      	ble.n	8000d8c <ExtractAlphaParameters+0x1b4>
        {
            accRow[i] = accRow[i] - 16;
 8000d68:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8000d72:	443b      	add	r3, r7
 8000d74:	f853 3c94 	ldr.w	r3, [r3, #-148]
 8000d78:	f1a3 0210 	sub.w	r2, r3, #16
 8000d7c:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8000d86:	443b      	add	r3, r7
 8000d88:	f843 2c94 	str.w	r2, [r3, #-148]
    for(int i = 0; i < 24; i++)
 8000d8c:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8000d90:	3301      	adds	r3, #1
 8000d92:	f8c7 3d10 	str.w	r3, [r7, #3344]	; 0xd10
 8000d96:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8000d9a:	2b17      	cmp	r3, #23
 8000d9c:	ddda      	ble.n	8000d54 <ExtractAlphaParameters+0x17c>
        }
    }
    
    for(int i = 0; i < 8; i++)
 8000d9e:	2300      	movs	r3, #0
 8000da0:	f8c7 3d0c 	str.w	r3, [r7, #3340]	; 0xd0c
 8000da4:	e062      	b.n	8000e6c <ExtractAlphaParameters+0x294>
    {
        p = i * 4;
 8000da6:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
        accColumn[p + 0] = (eeData[40 + i] & 0x000F);
 8000db0:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8000db4:	3328      	adds	r3, #40	; 0x28
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8000dbc:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8000dc0:	6812      	ldr	r2, [r2, #0]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	881b      	ldrh	r3, [r3, #0]
 8000dc6:	f003 010f 	and.w	r1, r3, #15
 8000dca:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8000dce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000dd2:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	; 0xcf4
 8000dd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 1] = (eeData[40 + i] & 0x00F0) >> 4;
 8000dda:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8000dde:	3328      	adds	r3, #40	; 0x28
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8000de6:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8000dea:	6812      	ldr	r2, [r2, #0]
 8000dec:	4413      	add	r3, r2
 8000dee:	881b      	ldrh	r3, [r3, #0]
 8000df0:	111b      	asrs	r3, r3, #4
 8000df2:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	; 0xcf4
 8000df6:	3201      	adds	r2, #1
 8000df8:	f003 010f 	and.w	r1, r3, #15
 8000dfc:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8000e00:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000e04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 2] = (eeData[40 + i] & 0x0F00) >> 8;
 8000e08:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8000e0c:	3328      	adds	r3, #40	; 0x28
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8000e14:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8000e18:	6812      	ldr	r2, [r2, #0]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	881b      	ldrh	r3, [r3, #0]
 8000e1e:	121b      	asrs	r3, r3, #8
 8000e20:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	; 0xcf4
 8000e24:	3202      	adds	r2, #2
 8000e26:	f003 010f 	and.w	r1, r3, #15
 8000e2a:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8000e2e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000e32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 3] = (eeData[40 + i] & 0xF000) >> 12;
 8000e36:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8000e3a:	3328      	adds	r3, #40	; 0x28
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8000e42:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8000e46:	6812      	ldr	r2, [r2, #0]
 8000e48:	4413      	add	r3, r2
 8000e4a:	881b      	ldrh	r3, [r3, #0]
 8000e4c:	0b1b      	lsrs	r3, r3, #12
 8000e4e:	b299      	uxth	r1, r3
 8000e50:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8000e54:	1cda      	adds	r2, r3, #3
 8000e56:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8000e5a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000e5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 8; i++)
 8000e62:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8000e66:	3301      	adds	r3, #1
 8000e68:	f8c7 3d0c 	str.w	r3, [r7, #3340]	; 0xd0c
 8000e6c:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8000e70:	2b07      	cmp	r3, #7
 8000e72:	dd98      	ble.n	8000da6 <ExtractAlphaParameters+0x1ce>
    }
    
    for(int i = 0; i < 32; i ++)
 8000e74:	2300      	movs	r3, #0
 8000e76:	f8c7 3d08 	str.w	r3, [r7, #3336]	; 0xd08
 8000e7a:	e020      	b.n	8000ebe <ExtractAlphaParameters+0x2e6>
    {
        if (accColumn[i] > 7)
 8000e7c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8000e80:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000e84:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	; 0xd08
 8000e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e8c:	2b07      	cmp	r3, #7
 8000e8e:	dd11      	ble.n	8000eb4 <ExtractAlphaParameters+0x2dc>
        {
            accColumn[i] = accColumn[i] - 16;
 8000e90:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8000e94:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000e98:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	; 0xd08
 8000e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea0:	f1a3 0110 	sub.w	r1, r3, #16
 8000ea4:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8000ea8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000eac:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	; 0xd08
 8000eb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 32; i ++)
 8000eb4:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 8000eb8:	3301      	adds	r3, #1
 8000eba:	f8c7 3d08 	str.w	r3, [r7, #3336]	; 0xd08
 8000ebe:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 8000ec2:	2b1f      	cmp	r3, #31
 8000ec4:	ddda      	ble.n	8000e7c <ExtractAlphaParameters+0x2a4>
        }
    }

    for(int i = 0; i < 24; i++)
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	f8c7 3d04 	str.w	r3, [r7, #3332]	; 0xd04
 8000ecc:	e12a      	b.n	8001124 <ExtractAlphaParameters+0x54c>
    {
        for(int j = 0; j < 32; j ++)
 8000ece:	2300      	movs	r3, #0
 8000ed0:	f8c7 3d00 	str.w	r3, [r7, #3328]	; 0xd00
 8000ed4:	e11c      	b.n	8001110 <ExtractAlphaParameters+0x538>
        {
            p = 32 * i +j;
 8000ed6:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8000eda:	015b      	lsls	r3, r3, #5
 8000edc:	f8d7 2d00 	ldr.w	r2, [r7, #3328]	; 0xd00
 8000ee0:	4413      	add	r3, r2
 8000ee2:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
            alphaTemp[p] = (eeData[64 + p] & 0x03F0) >> 4;
 8000ee6:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8000eea:	3340      	adds	r3, #64	; 0x40
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8000ef2:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8000ef6:	6812      	ldr	r2, [r2, #0]
 8000ef8:	4413      	add	r3, r2
 8000efa:	881b      	ldrh	r3, [r3, #0]
 8000efc:	111b      	asrs	r3, r3, #4
 8000efe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000f02:	ee07 3a90 	vmov	s15, r3
 8000f06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f0a:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8000f0e:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8000f12:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	4413      	add	r3, r2
 8000f1a:	edc3 7a00 	vstr	s15, [r3]
            if (alphaTemp[p] > 31)
 8000f1e:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8000f22:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8000f26:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	4413      	add	r3, r2
 8000f2e:	edd3 7a00 	vldr	s15, [r3]
 8000f32:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8000f36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f3e:	dd17      	ble.n	8000f70 <ExtractAlphaParameters+0x398>
            {
                alphaTemp[p] = alphaTemp[p] - 64;
 8000f40:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8000f44:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8000f48:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	4413      	add	r3, r2
 8000f50:	edd3 7a00 	vldr	s15, [r3]
 8000f54:	ed9f 7acc 	vldr	s14, [pc, #816]	; 8001288 <ExtractAlphaParameters+0x6b0>
 8000f58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f5c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8000f60:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8000f64:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	4413      	add	r3, r2
 8000f6c:	edc3 7a00 	vstr	s15, [r3]
            }
            alphaTemp[p] = alphaTemp[p]*(1 << accRemScale);
 8000f70:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8000f74:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8000f78:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	4413      	add	r3, r2
 8000f80:	ed93 7a00 	vldr	s14, [r3]
 8000f84:	f897 3cf3 	ldrb.w	r3, [r7, #3315]	; 0xcf3
 8000f88:	2201      	movs	r2, #1
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	ee07 3a90 	vmov	s15, r3
 8000f92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f9a:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8000f9e:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8000fa2:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	4413      	add	r3, r2
 8000faa:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = (alphaRef + (accRow[i] << accRowScale) + (accColumn[j] << accColumnScale) + alphaTemp[p]);
 8000fae:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8000fb8:	443b      	add	r3, r7
 8000fba:	f853 2c94 	ldr.w	r2, [r3, #-148]
 8000fbe:	f897 3cf1 	ldrb.w	r3, [r7, #3313]	; 0xcf1
 8000fc2:	409a      	lsls	r2, r3
 8000fc4:	f8d7 3cec 	ldr.w	r3, [r7, #3308]	; 0xcec
 8000fc8:	441a      	add	r2, r3
 8000fca:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8000fce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000fd2:	f8d7 1d00 	ldr.w	r1, [r7, #3328]	; 0xd00
 8000fd6:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8000fda:	f897 3cf2 	ldrb.w	r3, [r7, #3314]	; 0xcf2
 8000fde:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe2:	4413      	add	r3, r2
 8000fe4:	ee07 3a90 	vmov	s15, r3
 8000fe8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fec:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8000ff0:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8000ff4:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	4413      	add	r3, r2
 8000ffc:	edd3 7a00 	vldr	s15, [r3]
 8001000:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001004:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001008:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 800100c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	4413      	add	r3, r2
 8001014:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = alphaTemp[p] / pow(2,(double)alphaScale);
 8001018:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800101c:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001020:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	4413      	add	r3, r2
 8001028:	edd3 7a00 	vldr	s15, [r3]
 800102c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001030:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	; 0xd1f
 8001034:	ee07 3a90 	vmov	s15, r3
 8001038:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800103c:	eeb0 1b47 	vmov.f64	d1, d7
 8001040:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8001044:	f015 fea4 	bl	8016d90 <pow>
 8001048:	eeb0 6b40 	vmov.f64	d6, d0
 800104c:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8001050:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001054:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001058:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 800105c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	4413      	add	r3, r2
 8001064:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = alphaTemp[p] - mlx90640->tgc * (mlx90640->cpAlpha[0] + mlx90640->cpAlpha[1])/2;
 8001068:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800106c:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001070:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4413      	add	r3, r2
 8001078:	ed93 7a00 	vldr	s14, [r3]
 800107c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001080:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	edd3 6a06 	vldr	s13, [r3, #24]
 800108a:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800108e:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001098:	ed93 6a94 	vldr	s12, [r3, #592]	; 0x250
 800109c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80010a0:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010aa:	edd3 7a95 	vldr	s15, [r3, #596]	; 0x254
 80010ae:	ee76 7a27 	vadd.f32	s15, s12, s15
 80010b2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80010b6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80010ba:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80010be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010c2:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80010c6:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80010ca:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4413      	add	r3, r2
 80010d2:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = SCALEALPHA/alphaTemp[p];
 80010d6:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80010da:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80010de:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	4413      	add	r3, r2
 80010e6:	ed93 7a00 	vldr	s14, [r3]
 80010ea:	eddf 6a68 	vldr	s13, [pc, #416]	; 800128c <ExtractAlphaParameters+0x6b4>
 80010ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010f2:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80010f6:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80010fa:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	4413      	add	r3, r2
 8001102:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < 32; j ++)
 8001106:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 800110a:	3301      	adds	r3, #1
 800110c:	f8c7 3d00 	str.w	r3, [r7, #3328]	; 0xd00
 8001110:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8001114:	2b1f      	cmp	r3, #31
 8001116:	f77f aede 	ble.w	8000ed6 <ExtractAlphaParameters+0x2fe>
    for(int i = 0; i < 24; i++)
 800111a:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 800111e:	3301      	adds	r3, #1
 8001120:	f8c7 3d04 	str.w	r3, [r7, #3332]	; 0xd04
 8001124:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8001128:	2b17      	cmp	r3, #23
 800112a:	f77f aed0 	ble.w	8000ece <ExtractAlphaParameters+0x2f6>
        }
    }
    
    temp = alphaTemp[0];
 800112e:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001132:	f6a3 5314 	subw	r3, r3, #3348	; 0xd14
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 800113c:	6013      	str	r3, [r2, #0]
    for(int i = 1; i < 768; i++)
 800113e:	2301      	movs	r3, #1
 8001140:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 8001144:	e023      	b.n	800118e <ExtractAlphaParameters+0x5b6>
    {
        if (alphaTemp[i] > temp)
 8001146:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800114a:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 800114e:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	4413      	add	r3, r2
 8001156:	edd3 7a00 	vldr	s15, [r3]
 800115a:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 800115e:	ed93 7a00 	vldr	s14, [r3]
 8001162:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800116a:	d50b      	bpl.n	8001184 <ExtractAlphaParameters+0x5ac>
        {
            temp = alphaTemp[i];
 800116c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001170:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001174:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	4413      	add	r3, r2
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 8001182:	6013      	str	r3, [r2, #0]
    for(int i = 1; i < 768; i++)
 8001184:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8001188:	3301      	adds	r3, #1
 800118a:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 800118e:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8001192:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001196:	dbd6      	blt.n	8001146 <ExtractAlphaParameters+0x56e>
        }
    }
    
    alphaScale = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	f887 3d1f 	strb.w	r3, [r7, #3359]	; 0xd1f
    while(temp < 32768)
 800119e:	e00e      	b.n	80011be <ExtractAlphaParameters+0x5e6>
    {
        temp = temp*2;
 80011a0:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 80011a4:	edd3 7a00 	vldr	s15, [r3]
 80011a8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011ac:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 80011b0:	edc3 7a00 	vstr	s15, [r3]
        alphaScale = alphaScale + 1;
 80011b4:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	; 0xd1f
 80011b8:	3301      	adds	r3, #1
 80011ba:	f887 3d1f 	strb.w	r3, [r7, #3359]	; 0xd1f
    while(temp < 32768)
 80011be:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 80011c2:	edd3 7a00 	vldr	s15, [r3]
 80011c6:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001290 <ExtractAlphaParameters+0x6b8>
 80011ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d2:	d4e5      	bmi.n	80011a0 <ExtractAlphaParameters+0x5c8>
    } 
    
    for(int i = 0; i < 768; i++)
 80011d4:	2300      	movs	r3, #0
 80011d6:	f8c7 3cf8 	str.w	r3, [r7, #3320]	; 0xcf8
 80011da:	e03f      	b.n	800125c <ExtractAlphaParameters+0x684>
    {
        temp = alphaTemp[i] * pow(2,(double)alphaScale);        
 80011dc:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80011e0:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80011e4:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	4413      	add	r3, r2
 80011ec:	edd3 7a00 	vldr	s15, [r3]
 80011f0:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80011f4:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	; 0xd1f
 80011f8:	ee07 3a90 	vmov	s15, r3
 80011fc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001200:	eeb0 1b47 	vmov.f64	d1, d7
 8001204:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8001208:	f015 fdc2 	bl	8016d90 <pow>
 800120c:	eeb0 7b40 	vmov.f64	d7, d0
 8001210:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001214:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001218:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 800121c:	edc3 7a00 	vstr	s15, [r3]
        mlx90640->alpha[i] = (temp + 0.5f);        
 8001220:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 8001224:	edd3 7a00 	vldr	s15, [r3]
 8001228:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800122c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001230:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001234:	ee17 3a90 	vmov	r3, s15
 8001238:	b299      	uxth	r1, r3
 800123a:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800123e:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 8001248:	3324      	adds	r3, #36	; 0x24
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	4413      	add	r3, r2
 800124e:	460a      	mov	r2, r1
 8001250:	805a      	strh	r2, [r3, #2]
    for(int i = 0; i < 768; i++)
 8001252:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 8001256:	3301      	adds	r3, #1
 8001258:	f8c7 3cf8 	str.w	r3, [r7, #3320]	; 0xcf8
 800125c:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 8001260:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001264:	dbba      	blt.n	80011dc <ExtractAlphaParameters+0x604>
        
    } 
    
    mlx90640->alphaScale = alphaScale;      
 8001266:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800126a:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f897 2d1f 	ldrb.w	r2, [r7, #3359]	; 0xd1f
 8001274:	f883 264a 	strb.w	r2, [r3, #1610]	; 0x64a
   
}
 8001278:	bf00      	nop
 800127a:	f507 6752 	add.w	r7, r7, #3360	; 0xd20
 800127e:	46bd      	mov	sp, r7
 8001280:	ecbd 8b02 	vpop	{d8}
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	42800000 	.word	0x42800000
 800128c:	358637bd 	.word	0x358637bd
 8001290:	47000000 	.word	0x47000000

08001294 <ExtractOffsetParameters>:

//------------------------------------------------------------------------------

void ExtractOffsetParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8001294:	b480      	push	{r7}
 8001296:	b0c5      	sub	sp, #276	; 0x114
 8001298:	af00      	add	r7, sp, #0
 800129a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800129e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80012a2:	6018      	str	r0, [r3, #0]
 80012a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80012a8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80012ac:	6019      	str	r1, [r3, #0]
    int occRow[24];
    int occColumn[32];
    int p = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    uint8_t occRowScale;
    uint8_t occColumnScale;
    uint8_t occRemScale;
    

    occRemScale = (eeData[16] & 0x000F);
 80012b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80012b8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	3320      	adds	r3, #32
 80012c0:	881b      	ldrh	r3, [r3, #0]
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	f003 030f 	and.w	r3, r3, #15
 80012c8:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
    occColumnScale = (eeData[16] & 0x00F0) >> 4;
 80012cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80012d0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	3320      	adds	r3, #32
 80012d8:	881b      	ldrh	r3, [r3, #0]
 80012da:	111b      	asrs	r3, r3, #4
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	f003 030f 	and.w	r3, r3, #15
 80012e2:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
    occRowScale = (eeData[16] & 0x0F00) >> 8;
 80012e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80012ea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	3320      	adds	r3, #32
 80012f2:	881b      	ldrh	r3, [r3, #0]
 80012f4:	121b      	asrs	r3, r3, #8
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	f003 030f 	and.w	r3, r3, #15
 80012fc:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
    offsetRef = eeData[17];
 8001300:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001304:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	3322      	adds	r3, #34	; 0x22
 800130c:	881b      	ldrh	r3, [r3, #0]
 800130e:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
    if (offsetRef > 32767)
    {
        offsetRef = offsetRef - 65536;
    }
    
    for(int i = 0; i < 6; i++)
 8001312:	2300      	movs	r3, #0
 8001314:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001318:	e062      	b.n	80013e0 <ExtractOffsetParameters+0x14c>
    {
        p = i * 4;
 800131a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        occRow[p + 0] = (eeData[18 + i] & 0x000F);
 8001324:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001328:	3312      	adds	r3, #18
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001330:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001334:	6812      	ldr	r2, [r2, #0]
 8001336:	4413      	add	r3, r2
 8001338:	881b      	ldrh	r3, [r3, #0]
 800133a:	f003 020f 	and.w	r2, r3, #15
 800133e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001348:	443b      	add	r3, r7
 800134a:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 1] = (eeData[18 + i] & 0x00F0) >> 4;
 800134e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001352:	3312      	adds	r3, #18
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800135a:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800135e:	6812      	ldr	r2, [r2, #0]
 8001360:	4413      	add	r3, r2
 8001362:	881b      	ldrh	r3, [r3, #0]
 8001364:	111a      	asrs	r2, r3, #4
 8001366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800136a:	3301      	adds	r3, #1
 800136c:	f002 020f 	and.w	r2, r2, #15
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001376:	443b      	add	r3, r7
 8001378:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 2] = (eeData[18 + i] & 0x0F00) >> 8;
 800137c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001380:	3312      	adds	r3, #18
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001388:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800138c:	6812      	ldr	r2, [r2, #0]
 800138e:	4413      	add	r3, r2
 8001390:	881b      	ldrh	r3, [r3, #0]
 8001392:	121a      	asrs	r2, r3, #8
 8001394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001398:	3302      	adds	r3, #2
 800139a:	f002 020f 	and.w	r2, r2, #15
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80013a4:	443b      	add	r3, r7
 80013a6:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 3] = (eeData[18 + i] & 0xF000) >> 12;
 80013aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80013ae:	3312      	adds	r3, #18
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80013b6:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80013ba:	6812      	ldr	r2, [r2, #0]
 80013bc:	4413      	add	r3, r2
 80013be:	881b      	ldrh	r3, [r3, #0]
 80013c0:	0b1b      	lsrs	r3, r3, #12
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80013c8:	3303      	adds	r3, #3
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80013d0:	443b      	add	r3, r7
 80013d2:	f843 2c84 	str.w	r2, [r3, #-132]
    for(int i = 0; i < 6; i++)
 80013d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80013da:	3301      	adds	r3, #1
 80013dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80013e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80013e4:	2b05      	cmp	r3, #5
 80013e6:	dd98      	ble.n	800131a <ExtractOffsetParameters+0x86>
    }
    
    for(int i = 0; i < 24; i++)
 80013e8:	2300      	movs	r3, #0
 80013ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80013ee:	e020      	b.n	8001432 <ExtractOffsetParameters+0x19e>
    {
        if (occRow[i] > 7)
 80013f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80013fa:	443b      	add	r3, r7
 80013fc:	f853 3c84 	ldr.w	r3, [r3, #-132]
 8001400:	2b07      	cmp	r3, #7
 8001402:	dd11      	ble.n	8001428 <ExtractOffsetParameters+0x194>
        {
            occRow[i] = occRow[i] - 16;
 8001404:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800140e:	443b      	add	r3, r7
 8001410:	f853 3c84 	ldr.w	r3, [r3, #-132]
 8001414:	f1a3 0210 	sub.w	r2, r3, #16
 8001418:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001422:	443b      	add	r3, r7
 8001424:	f843 2c84 	str.w	r2, [r3, #-132]
    for(int i = 0; i < 24; i++)
 8001428:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800142c:	3301      	adds	r3, #1
 800142e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001432:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001436:	2b17      	cmp	r3, #23
 8001438:	ddda      	ble.n	80013f0 <ExtractOffsetParameters+0x15c>
        }
    }
    
    for(int i = 0; i < 8; i++)
 800143a:	2300      	movs	r3, #0
 800143c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001440:	e062      	b.n	8001508 <ExtractOffsetParameters+0x274>
    {
        p = i * 4;
 8001442:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        occColumn[p + 0] = (eeData[24 + i] & 0x000F);
 800144c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001450:	3318      	adds	r3, #24
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001458:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800145c:	6812      	ldr	r2, [r2, #0]
 800145e:	4413      	add	r3, r2
 8001460:	881b      	ldrh	r3, [r3, #0]
 8001462:	f003 010f 	and.w	r1, r3, #15
 8001466:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800146a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800146e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001472:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 1] = (eeData[24 + i] & 0x00F0) >> 4;
 8001476:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800147a:	3318      	adds	r3, #24
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001482:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001486:	6812      	ldr	r2, [r2, #0]
 8001488:	4413      	add	r3, r2
 800148a:	881b      	ldrh	r3, [r3, #0]
 800148c:	111b      	asrs	r3, r3, #4
 800148e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001492:	3201      	adds	r2, #1
 8001494:	f003 010f 	and.w	r1, r3, #15
 8001498:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800149c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80014a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 2] = (eeData[24 + i] & 0x0F00) >> 8;
 80014a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80014a8:	3318      	adds	r3, #24
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80014b0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80014b4:	6812      	ldr	r2, [r2, #0]
 80014b6:	4413      	add	r3, r2
 80014b8:	881b      	ldrh	r3, [r3, #0]
 80014ba:	121b      	asrs	r3, r3, #8
 80014bc:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80014c0:	3202      	adds	r2, #2
 80014c2:	f003 010f 	and.w	r1, r3, #15
 80014c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80014ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80014ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 3] = (eeData[24 + i] & 0xF000) >> 12;
 80014d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80014d6:	3318      	adds	r3, #24
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80014de:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80014e2:	6812      	ldr	r2, [r2, #0]
 80014e4:	4413      	add	r3, r2
 80014e6:	881b      	ldrh	r3, [r3, #0]
 80014e8:	0b1b      	lsrs	r3, r3, #12
 80014ea:	b299      	uxth	r1, r3
 80014ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80014f0:	1cda      	adds	r2, r3, #3
 80014f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80014f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80014fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 8; i++)
 80014fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001502:	3301      	adds	r3, #1
 8001504:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001508:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800150c:	2b07      	cmp	r3, #7
 800150e:	dd98      	ble.n	8001442 <ExtractOffsetParameters+0x1ae>
    }
    
    for(int i = 0; i < 32; i ++)
 8001510:	2300      	movs	r3, #0
 8001512:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001516:	e020      	b.n	800155a <ExtractOffsetParameters+0x2c6>
    {
        if (occColumn[i] > 7)
 8001518:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800151c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001520:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001528:	2b07      	cmp	r3, #7
 800152a:	dd11      	ble.n	8001550 <ExtractOffsetParameters+0x2bc>
        {
            occColumn[i] = occColumn[i] - 16;
 800152c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001530:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001534:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800153c:	f1a3 0110 	sub.w	r1, r3, #16
 8001540:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001544:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001548:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800154c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 32; i ++)
 8001550:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001554:	3301      	adds	r3, #1
 8001556:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800155a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800155e:	2b1f      	cmp	r3, #31
 8001560:	ddda      	ble.n	8001518 <ExtractOffsetParameters+0x284>
        }
    }

    for(int i = 0; i < 24; i++)
 8001562:	2300      	movs	r3, #0
 8001564:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001568:	e0c0      	b.n	80016ec <ExtractOffsetParameters+0x458>
    {
        for(int j = 0; j < 32; j ++)
 800156a:	2300      	movs	r3, #0
 800156c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001570:	e0b2      	b.n	80016d8 <ExtractOffsetParameters+0x444>
        {
            p = 32 * i +j;
 8001572:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001576:	015b      	lsls	r3, r3, #5
 8001578:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800157c:	4413      	add	r3, r2
 800157e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
            mlx90640->offset[p] = (eeData[64 + p] & 0xFC00) >> 10;
 8001582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001586:	3340      	adds	r3, #64	; 0x40
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800158e:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001592:	6812      	ldr	r2, [r2, #0]
 8001594:	4413      	add	r3, r2
 8001596:	881b      	ldrh	r3, [r3, #0]
 8001598:	0a9b      	lsrs	r3, r3, #10
 800159a:	b29b      	uxth	r3, r3
 800159c:	b219      	sxth	r1, r3
 800159e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80015a2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80015ac:	f503 7349 	add.w	r3, r3, #804	; 0x324
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	4413      	add	r3, r2
 80015b4:	460a      	mov	r2, r1
 80015b6:	809a      	strh	r2, [r3, #4]
            if (mlx90640->offset[p] > 31)
 80015b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80015bc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80015c6:	f503 7349 	add.w	r3, r3, #804	; 0x324
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	4413      	add	r3, r2
 80015ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80015d2:	2b1f      	cmp	r3, #31
 80015d4:	dd1d      	ble.n	8001612 <ExtractOffsetParameters+0x37e>
            {
                mlx90640->offset[p] = mlx90640->offset[p] - 64;
 80015d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80015da:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80015e4:	f503 7349 	add.w	r3, r3, #804	; 0x324
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	4413      	add	r3, r2
 80015ec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	3b40      	subs	r3, #64	; 0x40
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	b219      	sxth	r1, r3
 80015f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80015fc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001606:	f503 7349 	add.w	r3, r3, #804	; 0x324
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	4413      	add	r3, r2
 800160e:	460a      	mov	r2, r1
 8001610:	809a      	strh	r2, [r3, #4]
            }
            mlx90640->offset[p] = mlx90640->offset[p]*(1 << occRemScale);
 8001612:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001616:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001620:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	4413      	add	r3, r2
 8001628:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800162c:	461a      	mov	r2, r3
 800162e:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	b219      	sxth	r1, r3
 8001638:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800163c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001646:	f503 7349 	add.w	r3, r3, #804	; 0x324
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	4413      	add	r3, r2
 800164e:	460a      	mov	r2, r1
 8001650:	809a      	strh	r2, [r3, #4]
            mlx90640->offset[p] = (offsetRef + (occRow[i] << occRowScale) + (occColumn[j] << occColumnScale) + mlx90640->offset[p]);
 8001652:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800165c:	443b      	add	r3, r7
 800165e:	f853 2c84 	ldr.w	r2, [r3, #-132]
 8001662:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	b29a      	uxth	r2, r3
 800166c:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8001670:	4413      	add	r3, r2
 8001672:	b29a      	uxth	r2, r3
 8001674:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001678:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800167c:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8001680:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001684:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 8001688:	fa01 f303 	lsl.w	r3, r1, r3
 800168c:	b29b      	uxth	r3, r3
 800168e:	4413      	add	r3, r2
 8001690:	b29a      	uxth	r2, r3
 8001692:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001696:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800169a:	6819      	ldr	r1, [r3, #0]
 800169c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80016a0:	f503 7349 	add.w	r3, r3, #804	; 0x324
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	440b      	add	r3, r1
 80016a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	4413      	add	r3, r2
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	b219      	sxth	r1, r3
 80016b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80016b8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80016c2:	f503 7349 	add.w	r3, r3, #804	; 0x324
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	4413      	add	r3, r2
 80016ca:	460a      	mov	r2, r1
 80016cc:	809a      	strh	r2, [r3, #4]
        for(int j = 0; j < 32; j ++)
 80016ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80016d2:	3301      	adds	r3, #1
 80016d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80016d8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80016dc:	2b1f      	cmp	r3, #31
 80016de:	f77f af48 	ble.w	8001572 <ExtractOffsetParameters+0x2de>
    for(int i = 0; i < 24; i++)
 80016e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80016e6:	3301      	adds	r3, #1
 80016e8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80016ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80016f0:	2b17      	cmp	r3, #23
 80016f2:	f77f af3a 	ble.w	800156a <ExtractOffsetParameters+0x2d6>
        }
    }
}
 80016f6:	bf00      	nop
 80016f8:	bf00      	nop
 80016fa:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
	...

08001708 <ExtractKtaPixelParameters>:

//------------------------------------------------------------------------------

void ExtractKtaPixelParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	ed2d 8b02 	vpush	{d8}
 800170e:	f6ad 4d38 	subw	sp, sp, #3128	; 0xc38
 8001712:	af00      	add	r7, sp, #0
 8001714:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001718:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 800171c:	6018      	str	r0, [r3, #0]
 800171e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001722:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8001726:	6019      	str	r1, [r3, #0]
    int p = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
    uint8_t ktaScale2;
    uint8_t split;
    float ktaTemp[768];
    float temp;
    
    KtaRoCo = (eeData[54] & 0xFF00) >> 8;
 800172e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001732:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	336c      	adds	r3, #108	; 0x6c
 800173a:	881b      	ldrh	r3, [r3, #0]
 800173c:	0a1b      	lsrs	r3, r3, #8
 800173e:	b29b      	uxth	r3, r3
 8001740:	f887 3c1b 	strb.w	r3, [r7, #3099]	; 0xc1b
    if (KtaRoCo > 127)
    {
        KtaRoCo = KtaRoCo - 256;
    }
    KtaRC[0] = KtaRoCo;
 8001744:	f897 3c1b 	ldrb.w	r3, [r7, #3099]	; 0xc1b
 8001748:	f887 3c10 	strb.w	r3, [r7, #3088]	; 0xc10
    
    KtaReCo = (eeData[54] & 0x00FF);
 800174c:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001750:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	336c      	adds	r3, #108	; 0x6c
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	f887 3c1a 	strb.w	r3, [r7, #3098]	; 0xc1a
    if (KtaReCo > 127)
    {
        KtaReCo = KtaReCo - 256;
    }
    KtaRC[2] = KtaReCo;
 800175e:	f897 3c1a 	ldrb.w	r3, [r7, #3098]	; 0xc1a
 8001762:	f887 3c12 	strb.w	r3, [r7, #3090]	; 0xc12
      
    KtaRoCe = (eeData[55] & 0xFF00) >> 8;
 8001766:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800176a:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	336e      	adds	r3, #110	; 0x6e
 8001772:	881b      	ldrh	r3, [r3, #0]
 8001774:	0a1b      	lsrs	r3, r3, #8
 8001776:	b29b      	uxth	r3, r3
 8001778:	f887 3c19 	strb.w	r3, [r7, #3097]	; 0xc19
    if (KtaRoCe > 127)
    {
        KtaRoCe = KtaRoCe - 256;
    }
    KtaRC[1] = KtaRoCe;
 800177c:	f897 3c19 	ldrb.w	r3, [r7, #3097]	; 0xc19
 8001780:	f887 3c11 	strb.w	r3, [r7, #3089]	; 0xc11
      
    KtaReCe = (eeData[55] & 0x00FF);
 8001784:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001788:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	336e      	adds	r3, #110	; 0x6e
 8001790:	881b      	ldrh	r3, [r3, #0]
 8001792:	f887 3c18 	strb.w	r3, [r7, #3096]	; 0xc18
    if (KtaReCe > 127)
    {
        KtaReCe = KtaReCe - 256;
    }
    KtaRC[3] = KtaReCe;
 8001796:	f897 3c18 	ldrb.w	r3, [r7, #3096]	; 0xc18
 800179a:	f887 3c13 	strb.w	r3, [r7, #3091]	; 0xc13
  
    ktaScale1 = ((eeData[56] & 0x00F0) >> 4) + 8;
 800179e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80017a2:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	3370      	adds	r3, #112	; 0x70
 80017aa:	881b      	ldrh	r3, [r3, #0]
 80017ac:	111b      	asrs	r3, r3, #4
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	f003 030f 	and.w	r3, r3, #15
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	3308      	adds	r3, #8
 80017b8:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
    ktaScale2 = (eeData[56] & 0x000F);
 80017bc:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80017c0:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	3370      	adds	r3, #112	; 0x70
 80017c8:	881b      	ldrh	r3, [r3, #0]
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	f003 030f 	and.w	r3, r3, #15
 80017d0:	f887 3c17 	strb.w	r3, [r7, #3095]	; 0xc17

    for(int i = 0; i < 24; i++)
 80017d4:	2300      	movs	r3, #0
 80017d6:	f8c7 3c2c 	str.w	r3, [r7, #3116]	; 0xc2c
 80017da:	e0e6      	b.n	80019aa <ExtractKtaPixelParameters+0x2a2>
    {
        for(int j = 0; j < 32; j ++)
 80017dc:	2300      	movs	r3, #0
 80017de:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
 80017e2:	e0d8      	b.n	8001996 <ExtractKtaPixelParameters+0x28e>
        {
            p = 32 * i +j;
 80017e4:	f8d7 3c2c 	ldr.w	r3, [r7, #3116]	; 0xc2c
 80017e8:	015b      	lsls	r3, r3, #5
 80017ea:	f8d7 2c28 	ldr.w	r2, [r7, #3112]	; 0xc28
 80017ee:	4413      	add	r3, r2
 80017f0:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
            split = 2*(p/32 - (p/64)*2) + p%2;
 80017f4:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	da00      	bge.n	80017fe <ExtractKtaPixelParameters+0xf6>
 80017fc:	331f      	adds	r3, #31
 80017fe:	115b      	asrs	r3, r3, #5
 8001800:	461a      	mov	r2, r3
 8001802:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8001806:	2b00      	cmp	r3, #0
 8001808:	da00      	bge.n	800180c <ExtractKtaPixelParameters+0x104>
 800180a:	333f      	adds	r3, #63	; 0x3f
 800180c:	119b      	asrs	r3, r3, #6
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	b2db      	uxtb	r3, r3
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	b2da      	uxtb	r2, r3
 8001818:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 800181c:	2b00      	cmp	r3, #0
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	bfb8      	it	lt
 8001824:	425b      	neglt	r3, r3
 8001826:	b2db      	uxtb	r3, r3
 8001828:	4413      	add	r3, r2
 800182a:	f887 3c16 	strb.w	r3, [r7, #3094]	; 0xc16
            ktaTemp[p] = (eeData[64 + p] & 0x000E) >> 1;
 800182e:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8001832:	3340      	adds	r3, #64	; 0x40
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	f607 4238 	addw	r2, r7, #3128	; 0xc38
 800183a:	f6a2 422c 	subw	r2, r2, #3116	; 0xc2c
 800183e:	6812      	ldr	r2, [r2, #0]
 8001840:	4413      	add	r3, r2
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	105b      	asrs	r3, r3, #1
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	ee07 3a90 	vmov	s15, r3
 800184e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001852:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001856:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 800185a:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	edc3 7a00 	vstr	s15, [r3]
            if (ktaTemp[p] > 3)
 8001866:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800186a:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 800186e:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4413      	add	r3, r2
 8001876:	edd3 7a00 	vldr	s15, [r3]
 800187a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800187e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001886:	dd17      	ble.n	80018b8 <ExtractKtaPixelParameters+0x1b0>
            {
                ktaTemp[p] = ktaTemp[p] - 8;
 8001888:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800188c:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8001890:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	edd3 7a00 	vldr	s15, [r3]
 800189c:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80018a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80018a4:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80018a8:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80018ac:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	edc3 7a00 	vstr	s15, [r3]
            }
            ktaTemp[p] = ktaTemp[p] * (1 << ktaScale2);
 80018b8:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80018bc:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80018c0:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	4413      	add	r3, r2
 80018c8:	ed93 7a00 	vldr	s14, [r3]
 80018cc:	f897 3c17 	ldrb.w	r3, [r7, #3095]	; 0xc17
 80018d0:	2201      	movs	r2, #1
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	ee07 3a90 	vmov	s15, r3
 80018da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018e2:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80018e6:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80018ea:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	edc3 7a00 	vstr	s15, [r3]
            ktaTemp[p] = KtaRC[split] + ktaTemp[p];
 80018f6:	f897 3c16 	ldrb.w	r3, [r7, #3094]	; 0xc16
 80018fa:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 80018fe:	f107 0208 	add.w	r2, r7, #8
 8001902:	4413      	add	r3, r2
 8001904:	f913 3c28 	ldrsb.w	r3, [r3, #-40]
 8001908:	ee07 3a90 	vmov	s15, r3
 800190c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001910:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001914:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8001918:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4413      	add	r3, r2
 8001920:	edd3 7a00 	vldr	s15, [r3]
 8001924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001928:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800192c:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8001930:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	4413      	add	r3, r2
 8001938:	edc3 7a00 	vstr	s15, [r3]
            ktaTemp[p] = ktaTemp[p] / pow(2,(double)ktaScale1);
 800193c:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001940:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8001944:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	edd3 7a00 	vldr	s15, [r3]
 8001950:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001954:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 8001958:	ee07 3a90 	vmov	s15, r3
 800195c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001960:	eeb0 1b47 	vmov.f64	d1, d7
 8001964:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8001968:	f015 fa12 	bl	8016d90 <pow>
 800196c:	eeb0 6b40 	vmov.f64	d6, d0
 8001970:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8001974:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001978:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800197c:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8001980:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4413      	add	r3, r2
 8001988:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < 32; j ++)
 800198c:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 8001990:	3301      	adds	r3, #1
 8001992:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
 8001996:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 800199a:	2b1f      	cmp	r3, #31
 800199c:	f77f af22 	ble.w	80017e4 <ExtractKtaPixelParameters+0xdc>
    for(int i = 0; i < 24; i++)
 80019a0:	f8d7 3c2c 	ldr.w	r3, [r7, #3116]	; 0xc2c
 80019a4:	3301      	adds	r3, #1
 80019a6:	f8c7 3c2c 	str.w	r3, [r7, #3116]	; 0xc2c
 80019aa:	f8d7 3c2c 	ldr.w	r3, [r7, #3116]	; 0xc2c
 80019ae:	2b17      	cmp	r3, #23
 80019b0:	f77f af14 	ble.w	80017dc <ExtractKtaPixelParameters+0xd4>
            //ktaTemp[p] = ktaTemp[p] * mlx90640->offset[p];
        }
    }
    
    temp = fabs(ktaTemp[0]);
 80019b4:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80019b8:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 80019bc:	edd3 7a00 	vldr	s15, [r3]
 80019c0:	eef0 7ae7 	vabs.f32	s15, s15
 80019c4:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80019c8:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < 768; i++)
 80019cc:	2301      	movs	r3, #1
 80019ce:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 80019d2:	e029      	b.n	8001a28 <ExtractKtaPixelParameters+0x320>
    {
        if (fabs(ktaTemp[i]) > temp)
 80019d4:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80019d8:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80019dc:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4413      	add	r3, r2
 80019e4:	edd3 7a00 	vldr	s15, [r3]
 80019e8:	eef0 7ae7 	vabs.f32	s15, s15
 80019ec:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80019f0:	ed93 7a00 	vldr	s14, [r3]
 80019f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019fc:	d50f      	bpl.n	8001a1e <ExtractKtaPixelParameters+0x316>
        {
            temp = fabs(ktaTemp[i]);
 80019fe:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001a02:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8001a06:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4413      	add	r3, r2
 8001a0e:	edd3 7a00 	vldr	s15, [r3]
 8001a12:	eef0 7ae7 	vabs.f32	s15, s15
 8001a16:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8001a1a:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < 768; i++)
 8001a1e:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 8001a22:	3301      	adds	r3, #1
 8001a24:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 8001a28:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 8001a2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001a30:	dbd0      	blt.n	80019d4 <ExtractKtaPixelParameters+0x2cc>
        }
    }
    
    ktaScale1 = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
    while(temp < 64)
 8001a38:	e00e      	b.n	8001a58 <ExtractKtaPixelParameters+0x350>
    {
        temp = temp*2;
 8001a3a:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8001a3e:	edd3 7a00 	vldr	s15, [r3]
 8001a42:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a46:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8001a4a:	edc3 7a00 	vstr	s15, [r3]
        ktaScale1 = ktaScale1 + 1;
 8001a4e:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 8001a52:	3301      	adds	r3, #1
 8001a54:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
    while(temp < 64)
 8001a58:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8001a5c:	edd3 7a00 	vldr	s15, [r3]
 8001a60:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8001b6c <ExtractKtaPixelParameters+0x464>
 8001a64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a6c:	d4e5      	bmi.n	8001a3a <ExtractKtaPixelParameters+0x332>
    }    
     
    for(int i = 0; i < 768; i++)
 8001a6e:	2300      	movs	r3, #0
 8001a70:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 8001a74:	e064      	b.n	8001b40 <ExtractKtaPixelParameters+0x438>
    {
        temp = ktaTemp[i] * pow(2,(double)ktaScale1);
 8001a76:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001a7a:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8001a7e:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	edd3 7a00 	vldr	s15, [r3]
 8001a8a:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001a8e:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 8001a92:	ee07 3a90 	vmov	s15, r3
 8001a96:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001a9a:	eeb0 1b47 	vmov.f64	d1, d7
 8001a9e:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8001aa2:	f015 f975 	bl	8016d90 <pow>
 8001aa6:	eeb0 7b40 	vmov.f64	d7, d0
 8001aaa:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001aae:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001ab2:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8001ab6:	edc3 7a00 	vstr	s15, [r3]
        if (temp < 0)
 8001aba:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8001abe:	edd3 7a00 	vldr	s15, [r3]
 8001ac2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aca:	d51a      	bpl.n	8001b02 <ExtractKtaPixelParameters+0x3fa>
        {
            mlx90640->kta[i] = (temp - 0.5f);
 8001acc:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8001ad0:	edd3 7a00 	vldr	s15, [r3]
 8001ad4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001ad8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001adc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ae0:	edc7 7a01 	vstr	s15, [r7, #4]
 8001ae4:	793b      	ldrb	r3, [r7, #4]
 8001ae6:	b259      	sxtb	r1, r3
 8001ae8:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001aec:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8001af6:	4413      	add	r3, r2
 8001af8:	f603 434c 	addw	r3, r3, #3148	; 0xc4c
 8001afc:	460a      	mov	r2, r1
 8001afe:	701a      	strb	r2, [r3, #0]
 8001b00:	e019      	b.n	8001b36 <ExtractKtaPixelParameters+0x42e>
        }
        else
        {
            mlx90640->kta[i] = (temp + 0.5f);
 8001b02:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8001b06:	edd3 7a00 	vldr	s15, [r3]
 8001b0a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001b0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b16:	edc7 7a01 	vstr	s15, [r7, #4]
 8001b1a:	793b      	ldrb	r3, [r7, #4]
 8001b1c:	b259      	sxtb	r1, r3
 8001b1e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001b22:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8001b2c:	4413      	add	r3, r2
 8001b2e:	f603 434c 	addw	r3, r3, #3148	; 0xc4c
 8001b32:	460a      	mov	r2, r1
 8001b34:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 768; i++)
 8001b36:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 8001b40:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8001b44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001b48:	db95      	blt.n	8001a76 <ExtractKtaPixelParameters+0x36e>
        }        
        
    } 
    
    mlx90640->ktaScale = ktaScale1;           
 8001b4a:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001b4e:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f897 2c37 	ldrb.w	r2, [r7, #3127]	; 0xc37
 8001b58:	f883 2f4c 	strb.w	r2, [r3, #3916]	; 0xf4c
}
 8001b5c:	bf00      	nop
 8001b5e:	f607 4738 	addw	r7, r7, #3128	; 0xc38
 8001b62:	46bd      	mov	sp, r7
 8001b64:	ecbd 8b02 	vpop	{d8}
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	42800000 	.word	0x42800000

08001b70 <ExtractKvPixelParameters>:


//------------------------------------------------------------------------------

void ExtractKvPixelParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	ed2d 8b02 	vpush	{d8}
 8001b76:	f6ad 4d38 	subw	sp, sp, #3128	; 0xc38
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001b80:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8001b84:	6018      	str	r0, [r3, #0]
 8001b86:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001b8a:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8001b8e:	6019      	str	r1, [r3, #0]
    int p = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	f8c7 3c18 	str.w	r3, [r7, #3096]	; 0xc18
    uint8_t kvScale;
    uint8_t split;
    float kvTemp[768];
    float temp;

    KvRoCo = (eeData[52] & 0xF000) >> 12;
 8001b96:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001b9a:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	3368      	adds	r3, #104	; 0x68
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	0b1b      	lsrs	r3, r3, #12
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
    if (KvRoCo > 7)
 8001bac:	f997 3c37 	ldrsb.w	r3, [r7, #3127]	; 0xc37
 8001bb0:	2b07      	cmp	r3, #7
 8001bb2:	dd05      	ble.n	8001bc0 <ExtractKvPixelParameters+0x50>
    {
        KvRoCo = KvRoCo - 16;
 8001bb4:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 8001bb8:	3b10      	subs	r3, #16
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
    }
    KvT[0] = KvRoCo;
 8001bc0:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 8001bc4:	f887 3c10 	strb.w	r3, [r7, #3088]	; 0xc10
    
    KvReCo = (eeData[52] & 0x0F00) >> 8;
 8001bc8:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001bcc:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	3368      	adds	r3, #104	; 0x68
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	121b      	asrs	r3, r3, #8
 8001bd8:	b25b      	sxtb	r3, r3
 8001bda:	f003 030f 	and.w	r3, r3, #15
 8001bde:	f887 3c35 	strb.w	r3, [r7, #3125]	; 0xc35
    if (KvReCo > 7)
 8001be2:	f997 3c35 	ldrsb.w	r3, [r7, #3125]	; 0xc35
 8001be6:	2b07      	cmp	r3, #7
 8001be8:	dd05      	ble.n	8001bf6 <ExtractKvPixelParameters+0x86>
    {
        KvReCo = KvReCo - 16;
 8001bea:	f897 3c35 	ldrb.w	r3, [r7, #3125]	; 0xc35
 8001bee:	3b10      	subs	r3, #16
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	f887 3c35 	strb.w	r3, [r7, #3125]	; 0xc35
    }
    KvT[2] = KvReCo;
 8001bf6:	f897 3c35 	ldrb.w	r3, [r7, #3125]	; 0xc35
 8001bfa:	f887 3c12 	strb.w	r3, [r7, #3090]	; 0xc12
      
    KvRoCe = (eeData[52] & 0x00F0) >> 4;
 8001bfe:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001c02:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	3368      	adds	r3, #104	; 0x68
 8001c0a:	881b      	ldrh	r3, [r3, #0]
 8001c0c:	111b      	asrs	r3, r3, #4
 8001c0e:	b25b      	sxtb	r3, r3
 8001c10:	f003 030f 	and.w	r3, r3, #15
 8001c14:	f887 3c36 	strb.w	r3, [r7, #3126]	; 0xc36
    if (KvRoCe > 7)
 8001c18:	f997 3c36 	ldrsb.w	r3, [r7, #3126]	; 0xc36
 8001c1c:	2b07      	cmp	r3, #7
 8001c1e:	dd05      	ble.n	8001c2c <ExtractKvPixelParameters+0xbc>
    {
        KvRoCe = KvRoCe - 16;
 8001c20:	f897 3c36 	ldrb.w	r3, [r7, #3126]	; 0xc36
 8001c24:	3b10      	subs	r3, #16
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	f887 3c36 	strb.w	r3, [r7, #3126]	; 0xc36
    }
    KvT[1] = KvRoCe;
 8001c2c:	f897 3c36 	ldrb.w	r3, [r7, #3126]	; 0xc36
 8001c30:	f887 3c11 	strb.w	r3, [r7, #3089]	; 0xc11
      
    KvReCe = (eeData[52] & 0x000F);
 8001c34:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001c38:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	3368      	adds	r3, #104	; 0x68
 8001c40:	881b      	ldrh	r3, [r3, #0]
 8001c42:	b25b      	sxtb	r3, r3
 8001c44:	f003 030f 	and.w	r3, r3, #15
 8001c48:	f887 3c34 	strb.w	r3, [r7, #3124]	; 0xc34
    if (KvReCe > 7)
 8001c4c:	f997 3c34 	ldrsb.w	r3, [r7, #3124]	; 0xc34
 8001c50:	2b07      	cmp	r3, #7
 8001c52:	dd05      	ble.n	8001c60 <ExtractKvPixelParameters+0xf0>
    {
        KvReCe = KvReCe - 16;
 8001c54:	f897 3c34 	ldrb.w	r3, [r7, #3124]	; 0xc34
 8001c58:	3b10      	subs	r3, #16
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	f887 3c34 	strb.w	r3, [r7, #3124]	; 0xc34
    }
    KvT[3] = KvReCe;
 8001c60:	f897 3c34 	ldrb.w	r3, [r7, #3124]	; 0xc34
 8001c64:	f887 3c13 	strb.w	r3, [r7, #3091]	; 0xc13
  
    kvScale = (eeData[56] & 0x0F00) >> 8;
 8001c68:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001c6c:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	3370      	adds	r3, #112	; 0x70
 8001c74:	881b      	ldrh	r3, [r3, #0]
 8001c76:	121b      	asrs	r3, r3, #8
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	f887 3c33 	strb.w	r3, [r7, #3123]	; 0xc33


    for(int i = 0; i < 24; i++)
 8001c82:	2300      	movs	r3, #0
 8001c84:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
 8001c88:	e075      	b.n	8001d76 <ExtractKvPixelParameters+0x206>
    {
        for(int j = 0; j < 32; j ++)
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 8001c90:	e068      	b.n	8001d64 <ExtractKvPixelParameters+0x1f4>
        {
            p = 32 * i +j;
 8001c92:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 8001c96:	015b      	lsls	r3, r3, #5
 8001c98:	f8d7 2c24 	ldr.w	r2, [r7, #3108]	; 0xc24
 8001c9c:	4413      	add	r3, r2
 8001c9e:	f8c7 3c18 	str.w	r3, [r7, #3096]	; 0xc18
            split = 2*(p/32 - (p/64)*2) + p%2;
 8001ca2:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	da00      	bge.n	8001cac <ExtractKvPixelParameters+0x13c>
 8001caa:	331f      	adds	r3, #31
 8001cac:	115b      	asrs	r3, r3, #5
 8001cae:	461a      	mov	r2, r3
 8001cb0:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	da00      	bge.n	8001cba <ExtractKvPixelParameters+0x14a>
 8001cb8:	333f      	adds	r3, #63	; 0x3f
 8001cba:	119b      	asrs	r3, r3, #6
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	bfb8      	it	lt
 8001cd2:	425b      	neglt	r3, r3
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	4413      	add	r3, r2
 8001cd8:	f887 3c17 	strb.w	r3, [r7, #3095]	; 0xc17
            kvTemp[p] = KvT[split];
 8001cdc:	f897 3c17 	ldrb.w	r3, [r7, #3095]	; 0xc17
 8001ce0:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 8001ce4:	f107 0208 	add.w	r2, r7, #8
 8001ce8:	4413      	add	r3, r2
 8001cea:	f913 3c28 	ldrsb.w	r3, [r3, #-40]
 8001cee:	ee07 3a90 	vmov	s15, r3
 8001cf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cf6:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001cfa:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8001cfe:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4413      	add	r3, r2
 8001d06:	edc3 7a00 	vstr	s15, [r3]
            kvTemp[p] = kvTemp[p] / pow(2,(double)kvScale);
 8001d0a:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001d0e:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8001d12:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	edd3 7a00 	vldr	s15, [r3]
 8001d1e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001d22:	f897 3c33 	ldrb.w	r3, [r7, #3123]	; 0xc33
 8001d26:	ee07 3a90 	vmov	s15, r3
 8001d2a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001d2e:	eeb0 1b47 	vmov.f64	d1, d7
 8001d32:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8001d36:	f015 f82b 	bl	8016d90 <pow>
 8001d3a:	eeb0 6b40 	vmov.f64	d6, d0
 8001d3e:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8001d42:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d46:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001d4a:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8001d4e:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < 32; j ++)
 8001d5a:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 8001d5e:	3301      	adds	r3, #1
 8001d60:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 8001d64:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 8001d68:	2b1f      	cmp	r3, #31
 8001d6a:	dd92      	ble.n	8001c92 <ExtractKvPixelParameters+0x122>
    for(int i = 0; i < 24; i++)
 8001d6c:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 8001d70:	3301      	adds	r3, #1
 8001d72:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
 8001d76:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 8001d7a:	2b17      	cmp	r3, #23
 8001d7c:	dd85      	ble.n	8001c8a <ExtractKvPixelParameters+0x11a>
            //kvTemp[p] = kvTemp[p] * mlx90640->offset[p];
        }
    }
    
    temp = fabs(kvTemp[0]);
 8001d7e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001d82:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8001d86:	edd3 7a00 	vldr	s15, [r3]
 8001d8a:	eef0 7ae7 	vabs.f32	s15, s15
 8001d8e:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8001d92:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < 768; i++)
 8001d96:	2301      	movs	r3, #1
 8001d98:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 8001d9c:	e029      	b.n	8001df2 <ExtractKvPixelParameters+0x282>
    {
        if (fabs(kvTemp[i]) > temp)
 8001d9e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001da2:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8001da6:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	edd3 7a00 	vldr	s15, [r3]
 8001db2:	eef0 7ae7 	vabs.f32	s15, s15
 8001db6:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8001dba:	ed93 7a00 	vldr	s14, [r3]
 8001dbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc6:	d50f      	bpl.n	8001de8 <ExtractKvPixelParameters+0x278>
        {
            temp = fabs(kvTemp[i]);
 8001dc8:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001dcc:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8001dd0:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	edd3 7a00 	vldr	s15, [r3]
 8001ddc:	eef0 7ae7 	vabs.f32	s15, s15
 8001de0:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8001de4:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < 768; i++)
 8001de8:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8001dec:	3301      	adds	r3, #1
 8001dee:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 8001df2:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8001df6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001dfa:	dbd0      	blt.n	8001d9e <ExtractKvPixelParameters+0x22e>
        }
    }
    
    kvScale = 0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f887 3c33 	strb.w	r3, [r7, #3123]	; 0xc33
    while(temp < 64)
 8001e02:	e00e      	b.n	8001e22 <ExtractKvPixelParameters+0x2b2>
    {
        temp = temp*2;
 8001e04:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8001e08:	edd3 7a00 	vldr	s15, [r3]
 8001e0c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e10:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8001e14:	edc3 7a00 	vstr	s15, [r3]
        kvScale = kvScale + 1;
 8001e18:	f897 3c33 	ldrb.w	r3, [r7, #3123]	; 0xc33
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	f887 3c33 	strb.w	r3, [r7, #3123]	; 0xc33
    while(temp < 64)
 8001e22:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8001e26:	edd3 7a00 	vldr	s15, [r3]
 8001e2a:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8001f3c <ExtractKvPixelParameters+0x3cc>
 8001e2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e36:	d4e5      	bmi.n	8001e04 <ExtractKvPixelParameters+0x294>
    }    
     
    for(int i = 0; i < 768; i++)
 8001e38:	2300      	movs	r3, #0
 8001e3a:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
 8001e3e:	e064      	b.n	8001f0a <ExtractKvPixelParameters+0x39a>
    {
        temp = kvTemp[i] * pow(2,(double)kvScale);
 8001e40:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001e44:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8001e48:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4413      	add	r3, r2
 8001e50:	edd3 7a00 	vldr	s15, [r3]
 8001e54:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001e58:	f897 3c33 	ldrb.w	r3, [r7, #3123]	; 0xc33
 8001e5c:	ee07 3a90 	vmov	s15, r3
 8001e60:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001e64:	eeb0 1b47 	vmov.f64	d1, d7
 8001e68:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8001e6c:	f014 ff90 	bl	8016d90 <pow>
 8001e70:	eeb0 7b40 	vmov.f64	d7, d0
 8001e74:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001e78:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001e7c:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8001e80:	edc3 7a00 	vstr	s15, [r3]
        if (temp < 0)
 8001e84:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8001e88:	edd3 7a00 	vldr	s15, [r3]
 8001e8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e94:	d51a      	bpl.n	8001ecc <ExtractKvPixelParameters+0x35c>
        {
            mlx90640->kv[i] = (temp - 0.5f);
 8001e96:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8001e9a:	edd3 7a00 	vldr	s15, [r3]
 8001e9e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001ea2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ea6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eaa:	edc7 7a01 	vstr	s15, [r7, #4]
 8001eae:	793b      	ldrb	r3, [r7, #4]
 8001eb0:	b259      	sxtb	r1, r3
 8001eb2:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001eb6:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8001ec0:	4413      	add	r3, r2
 8001ec2:	f603 734d 	addw	r3, r3, #3917	; 0xf4d
 8001ec6:	460a      	mov	r2, r1
 8001ec8:	701a      	strb	r2, [r3, #0]
 8001eca:	e019      	b.n	8001f00 <ExtractKvPixelParameters+0x390>
        }
        else
        {
            mlx90640->kv[i] = (temp + 0.5f);
 8001ecc:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8001ed0:	edd3 7a00 	vldr	s15, [r3]
 8001ed4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001ed8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001edc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ee0:	edc7 7a01 	vstr	s15, [r7, #4]
 8001ee4:	793b      	ldrb	r3, [r7, #4]
 8001ee6:	b259      	sxtb	r1, r3
 8001ee8:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001eec:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8001ef6:	4413      	add	r3, r2
 8001ef8:	f603 734d 	addw	r3, r3, #3917	; 0xf4d
 8001efc:	460a      	mov	r2, r1
 8001efe:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 768; i++)
 8001f00:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8001f04:	3301      	adds	r3, #1
 8001f06:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
 8001f0a:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8001f0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001f12:	db95      	blt.n	8001e40 <ExtractKvPixelParameters+0x2d0>
        }        
        
    } 
    
    mlx90640->kvScale = kvScale;        
 8001f14:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8001f18:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f22:	461a      	mov	r2, r3
 8001f24:	f897 3c33 	ldrb.w	r3, [r7, #3123]	; 0xc33
 8001f28:	f882 324d 	strb.w	r3, [r2, #589]	; 0x24d
}
 8001f2c:	bf00      	nop
 8001f2e:	f607 4738 	addw	r7, r7, #3128	; 0xc38
 8001f32:	46bd      	mov	sp, r7
 8001f34:	ecbd 8b02 	vpop	{d8}
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	42800000 	.word	0x42800000

08001f40 <ExtractCPParameters>:

//------------------------------------------------------------------------------

void ExtractCPParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	ed2d 8b02 	vpush	{d8}
 8001f46:	b088      	sub	sp, #32
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
    float cpKta;
    uint8_t alphaScale;
    uint8_t ktaScale1;
    uint8_t kvScale;

    alphaScale = ((eeData[32] & 0xF000) >> 12) + 27;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	3340      	adds	r3, #64	; 0x40
 8001f52:	881b      	ldrh	r3, [r3, #0]
 8001f54:	0b1b      	lsrs	r3, r3, #12
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	331b      	adds	r3, #27
 8001f5c:	75fb      	strb	r3, [r7, #23]
    
    offsetSP[0] = (eeData[58] & 0x03FF);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	3374      	adds	r3, #116	; 0x74
 8001f62:	881b      	ldrh	r3, [r3, #0]
 8001f64:	b21b      	sxth	r3, r3
 8001f66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f6a:	b21b      	sxth	r3, r3
 8001f6c:	813b      	strh	r3, [r7, #8]
    if (offsetSP[0] > 511)
 8001f6e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001f72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f76:	db07      	blt.n	8001f88 <ExtractCPParameters+0x48>
    {
        offsetSP[0] = offsetSP[0] - 1024;
 8001f78:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	b21b      	sxth	r3, r3
 8001f86:	813b      	strh	r3, [r7, #8]
    }
    
    offsetSP[1] = (eeData[58] & 0xFC00) >> 10;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3374      	adds	r3, #116	; 0x74
 8001f8c:	881b      	ldrh	r3, [r3, #0]
 8001f8e:	0a9b      	lsrs	r3, r3, #10
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	b21b      	sxth	r3, r3
 8001f94:	817b      	strh	r3, [r7, #10]
    if (offsetSP[1] > 31)
 8001f96:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001f9a:	2b1f      	cmp	r3, #31
 8001f9c:	dd06      	ble.n	8001fac <ExtractCPParameters+0x6c>
    {
        offsetSP[1] = offsetSP[1] - 64;
 8001f9e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	3b40      	subs	r3, #64	; 0x40
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	b21b      	sxth	r3, r3
 8001faa:	817b      	strh	r3, [r7, #10]
    }
    offsetSP[1] = offsetSP[1] + offsetSP[0]; 
 8001fac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	4413      	add	r3, r2
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	b21b      	sxth	r3, r3
 8001fbe:	817b      	strh	r3, [r7, #10]
    
    alphaSP[0] = (eeData[57] & 0x03FF);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3372      	adds	r3, #114	; 0x72
 8001fc4:	881b      	ldrh	r3, [r3, #0]
 8001fc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fca:	ee07 3a90 	vmov	s15, r3
 8001fce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fd2:	edc7 7a03 	vstr	s15, [r7, #12]
    if (alphaSP[0] > 511)
 8001fd6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fda:	ed9f 7a75 	vldr	s14, [pc, #468]	; 80021b0 <ExtractCPParameters+0x270>
 8001fde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fe6:	dd07      	ble.n	8001ff8 <ExtractCPParameters+0xb8>
    {
        alphaSP[0] = alphaSP[0] - 1024;
 8001fe8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fec:	ed9f 7a71 	vldr	s14, [pc, #452]	; 80021b4 <ExtractCPParameters+0x274>
 8001ff0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ff4:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    alphaSP[0] = alphaSP[0] /  pow(2,(double)alphaScale);
 8001ff8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ffc:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002000:	7dfb      	ldrb	r3, [r7, #23]
 8002002:	ee07 3a90 	vmov	s15, r3
 8002006:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800200a:	eeb0 1b47 	vmov.f64	d1, d7
 800200e:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8002012:	f014 febd 	bl	8016d90 <pow>
 8002016:	eeb0 6b40 	vmov.f64	d6, d0
 800201a:	ee88 7b06 	vdiv.f64	d7, d8, d6
 800201e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002022:	edc7 7a03 	vstr	s15, [r7, #12]
    
    alphaSP[1] = (eeData[57] & 0xFC00) >> 10;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3372      	adds	r3, #114	; 0x72
 800202a:	881b      	ldrh	r3, [r3, #0]
 800202c:	0a9b      	lsrs	r3, r3, #10
 800202e:	b29b      	uxth	r3, r3
 8002030:	ee07 3a90 	vmov	s15, r3
 8002034:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002038:	edc7 7a04 	vstr	s15, [r7, #16]
    if (alphaSP[1] > 31)
 800203c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002040:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8002044:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800204c:	dd07      	ble.n	800205e <ExtractCPParameters+0x11e>
    {
        alphaSP[1] = alphaSP[1] - 64;
 800204e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002052:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80021b8 <ExtractCPParameters+0x278>
 8002056:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800205a:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    alphaSP[1] = (1 + alphaSP[1]/128) * alphaSP[0];
 800205e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002062:	eddf 6a56 	vldr	s13, [pc, #344]	; 80021bc <ExtractCPParameters+0x27c>
 8002066:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800206a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800206e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002072:	edd7 7a03 	vldr	s15, [r7, #12]
 8002076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800207a:	edc7 7a04 	vstr	s15, [r7, #16]
    
    cpKta = (eeData[59] & 0x00FF);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	3376      	adds	r3, #118	; 0x76
 8002082:	881b      	ldrh	r3, [r3, #0]
 8002084:	b2db      	uxtb	r3, r3
 8002086:	ee07 3a90 	vmov	s15, r3
 800208a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800208e:	edc7 7a06 	vstr	s15, [r7, #24]
    if (cpKta > 127)
 8002092:	edd7 7a06 	vldr	s15, [r7, #24]
 8002096:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80021c0 <ExtractCPParameters+0x280>
 800209a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800209e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a2:	dd07      	ble.n	80020b4 <ExtractCPParameters+0x174>
    {
        cpKta = cpKta - 256;
 80020a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80020a8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80021c4 <ExtractCPParameters+0x284>
 80020ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80020b0:	edc7 7a06 	vstr	s15, [r7, #24]
    }
    ktaScale1 = ((eeData[56] & 0x00F0) >> 4) + 8;    
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3370      	adds	r3, #112	; 0x70
 80020b8:	881b      	ldrh	r3, [r3, #0]
 80020ba:	111b      	asrs	r3, r3, #4
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	3308      	adds	r3, #8
 80020c6:	75bb      	strb	r3, [r7, #22]
    mlx90640->cpKta = cpKta / pow(2,(double)ktaScale1);
 80020c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80020cc:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80020d0:	7dbb      	ldrb	r3, [r7, #22]
 80020d2:	ee07 3a90 	vmov	s15, r3
 80020d6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80020da:	eeb0 1b47 	vmov.f64	d1, d7
 80020de:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80020e2:	f014 fe55 	bl	8016d90 <pow>
 80020e6:	eeb0 6b40 	vmov.f64	d6, d0
 80020ea:	ee88 7b06 	vdiv.f64	d7, d8, d6
 80020ee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	edc3 7a08 	vstr	s15, [r3, #32]
    
    cpKv = (eeData[59] & 0xFF00) >> 8;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3376      	adds	r3, #118	; 0x76
 80020fc:	881b      	ldrh	r3, [r3, #0]
 80020fe:	0a1b      	lsrs	r3, r3, #8
 8002100:	b29b      	uxth	r3, r3
 8002102:	ee07 3a90 	vmov	s15, r3
 8002106:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800210a:	edc7 7a07 	vstr	s15, [r7, #28]
    if (cpKv > 127)
 800210e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002112:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80021c0 <ExtractCPParameters+0x280>
 8002116:	eef4 7ac7 	vcmpe.f32	s15, s14
 800211a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800211e:	dd07      	ble.n	8002130 <ExtractCPParameters+0x1f0>
    {
        cpKv = cpKv - 256;
 8002120:	edd7 7a07 	vldr	s15, [r7, #28]
 8002124:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80021c4 <ExtractCPParameters+0x284>
 8002128:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800212c:	edc7 7a07 	vstr	s15, [r7, #28]
    }
    kvScale = (eeData[56] & 0x0F00) >> 8;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3370      	adds	r3, #112	; 0x70
 8002134:	881b      	ldrh	r3, [r3, #0]
 8002136:	121b      	asrs	r3, r3, #8
 8002138:	b2db      	uxtb	r3, r3
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	757b      	strb	r3, [r7, #21]
    mlx90640->cpKv = cpKv / pow(2,(double)kvScale);
 8002140:	edd7 7a07 	vldr	s15, [r7, #28]
 8002144:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002148:	7d7b      	ldrb	r3, [r7, #21]
 800214a:	ee07 3a90 	vmov	s15, r3
 800214e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002152:	eeb0 1b47 	vmov.f64	d1, d7
 8002156:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 800215a:	f014 fe19 	bl	8016d90 <pow>
 800215e:	eeb0 6b40 	vmov.f64	d6, d0
 8002162:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8002166:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	edc3 7a07 	vstr	s15, [r3, #28]
       
    mlx90640->cpAlpha[0] = alphaSP[0];
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002178:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    mlx90640->cpAlpha[1] = alphaSP[1];
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002184:	f8c2 3254 	str.w	r3, [r2, #596]	; 0x254
    mlx90640->cpOffset[0] = offsetSP[0];
 8002188:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002192:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
    mlx90640->cpOffset[1] = offsetSP[1];  
 8002196:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021a0:	f8a3 225a 	strh.w	r2, [r3, #602]	; 0x25a
}
 80021a4:	bf00      	nop
 80021a6:	3720      	adds	r7, #32
 80021a8:	46bd      	mov	sp, r7
 80021aa:	ecbd 8b02 	vpop	{d8}
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	43ff8000 	.word	0x43ff8000
 80021b4:	44800000 	.word	0x44800000
 80021b8:	42800000 	.word	0x42800000
 80021bc:	43000000 	.word	0x43000000
 80021c0:	42fe0000 	.word	0x42fe0000
 80021c4:	43800000 	.word	0x43800000

080021c8 <ExtractCILCParameters>:

//------------------------------------------------------------------------------

void ExtractCILCParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b087      	sub	sp, #28
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
    float ilChessC[3];
    uint8_t calibrationModeEE;
    
    calibrationModeEE = (eeData[10] & 0x0800) >> 4;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	3314      	adds	r3, #20
 80021d6:	881b      	ldrh	r3, [r3, #0]
 80021d8:	111b      	asrs	r3, r3, #4
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80021e0:	75fb      	strb	r3, [r7, #23]
    calibrationModeEE = calibrationModeEE ^ 0x80;
 80021e2:	7dfb      	ldrb	r3, [r7, #23]
 80021e4:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 80021e8:	43db      	mvns	r3, r3
 80021ea:	75fb      	strb	r3, [r7, #23]

    ilChessC[0] = (eeData[53] & 0x003F);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	336a      	adds	r3, #106	; 0x6a
 80021f0:	881b      	ldrh	r3, [r3, #0]
 80021f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021f6:	ee07 3a90 	vmov	s15, r3
 80021fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021fe:	edc7 7a02 	vstr	s15, [r7, #8]
    if (ilChessC[0] > 31)
 8002202:	edd7 7a02 	vldr	s15, [r7, #8]
 8002206:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 800220a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800220e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002212:	dd07      	ble.n	8002224 <ExtractCILCParameters+0x5c>
    {
        ilChessC[0] = ilChessC[0] - 64;
 8002214:	edd7 7a02 	vldr	s15, [r7, #8]
 8002218:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002300 <ExtractCILCParameters+0x138>
 800221c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002220:	edc7 7a02 	vstr	s15, [r7, #8]
    }
    ilChessC[0] = ilChessC[0] / 16.0f;
 8002224:	ed97 7a02 	vldr	s14, [r7, #8]
 8002228:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800222c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002230:	edc7 7a02 	vstr	s15, [r7, #8]
    
    ilChessC[1] = (eeData[53] & 0x07C0) >> 6;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	336a      	adds	r3, #106	; 0x6a
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	119b      	asrs	r3, r3, #6
 800223c:	f003 031f 	and.w	r3, r3, #31
 8002240:	ee07 3a90 	vmov	s15, r3
 8002244:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002248:	edc7 7a03 	vstr	s15, [r7, #12]
    if (ilChessC[1] > 15)
 800224c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002250:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8002254:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800225c:	dd07      	ble.n	800226e <ExtractCILCParameters+0xa6>
    {
        ilChessC[1] = ilChessC[1] - 32;
 800225e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002262:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002304 <ExtractCILCParameters+0x13c>
 8002266:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800226a:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    ilChessC[1] = ilChessC[1] / 2.0f;
 800226e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002272:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002276:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800227a:	edc7 7a03 	vstr	s15, [r7, #12]
    
    ilChessC[2] = (eeData[53] & 0xF800) >> 11;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	336a      	adds	r3, #106	; 0x6a
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	0adb      	lsrs	r3, r3, #11
 8002286:	b29b      	uxth	r3, r3
 8002288:	ee07 3a90 	vmov	s15, r3
 800228c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002290:	edc7 7a04 	vstr	s15, [r7, #16]
    if (ilChessC[2] > 15)
 8002294:	edd7 7a04 	vldr	s15, [r7, #16]
 8002298:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800229c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a4:	dd07      	ble.n	80022b6 <ExtractCILCParameters+0xee>
    {
        ilChessC[2] = ilChessC[2] - 32;
 80022a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80022aa:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002304 <ExtractCILCParameters+0x13c>
 80022ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022b2:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    ilChessC[2] = ilChessC[2] / 8.0f;
 80022b6:	ed97 7a04 	vldr	s14, [r7, #16]
 80022ba:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80022be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022c2:	edc7 7a04 	vstr	s15, [r7, #16]
    
    mlx90640->calibrationModeEE = calibrationModeEE;
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	7dfa      	ldrb	r2, [r7, #23]
 80022ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    mlx90640->ilChessC[0] = ilChessC[0];
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80022d6:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
    mlx90640->ilChessC[1] = ilChessC[1];
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80022e2:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
    mlx90640->ilChessC[2] = ilChessC[2];
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80022ee:	f8c2 3264 	str.w	r3, [r2, #612]	; 0x264
}
 80022f2:	bf00      	nop
 80022f4:	371c      	adds	r7, #28
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	42800000 	.word	0x42800000
 8002304:	42000000 	.word	0x42000000

08002308 <ExtractDeviatingPixels>:

//------------------------------------------------------------------------------

int ExtractDeviatingPixels(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
    uint16_t pixCnt = 0;
 8002312:	2300      	movs	r3, #0
 8002314:	82fb      	strh	r3, [r7, #22]
    uint16_t brokenPixCnt = 0;
 8002316:	2300      	movs	r3, #0
 8002318:	82bb      	strh	r3, [r7, #20]
    uint16_t outlierPixCnt = 0;
 800231a:	2300      	movs	r3, #0
 800231c:	827b      	strh	r3, [r7, #18]
    int warn = 0;
 800231e:	2300      	movs	r3, #0
 8002320:	60fb      	str	r3, [r7, #12]
    int i;
    
    for(pixCnt = 0; pixCnt<5; pixCnt++)
 8002322:	2300      	movs	r3, #0
 8002324:	82fb      	strh	r3, [r7, #22]
 8002326:	e013      	b.n	8002350 <ExtractDeviatingPixels+0x48>
    {
        mlx90640->brokenPixels[pixCnt] = 0xFFFF;
 8002328:	8afa      	ldrh	r2, [r7, #22]
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	f602 1234 	addw	r2, r2, #2356	; 0x934
 8002330:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002334:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        mlx90640->outlierPixels[pixCnt] = 0xFFFF;
 8002338:	8afb      	ldrh	r3, [r7, #22]
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	4413      	add	r3, r2
 8002344:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002348:	805a      	strh	r2, [r3, #2]
    for(pixCnt = 0; pixCnt<5; pixCnt++)
 800234a:	8afb      	ldrh	r3, [r7, #22]
 800234c:	3301      	adds	r3, #1
 800234e:	82fb      	strh	r3, [r7, #22]
 8002350:	8afb      	ldrh	r3, [r7, #22]
 8002352:	2b04      	cmp	r3, #4
 8002354:	d9e8      	bls.n	8002328 <ExtractDeviatingPixels+0x20>
    }
        
    pixCnt = 0;    
 8002356:	2300      	movs	r3, #0
 8002358:	82fb      	strh	r3, [r7, #22]
    while (pixCnt < 768 && brokenPixCnt < 5 && outlierPixCnt < 5)
 800235a:	e02a      	b.n	80023b2 <ExtractDeviatingPixels+0xaa>
    {
        if(eeData[pixCnt+64] == 0)
 800235c:	8afb      	ldrh	r3, [r7, #22]
 800235e:	3340      	adds	r3, #64	; 0x40
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	4413      	add	r3, r2
 8002366:	881b      	ldrh	r3, [r3, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d10a      	bne.n	8002382 <ExtractDeviatingPixels+0x7a>
        {
            mlx90640->brokenPixels[brokenPixCnt] = pixCnt;
 800236c:	8aba      	ldrh	r2, [r7, #20]
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	f602 1234 	addw	r2, r2, #2356	; 0x934
 8002374:	8af9      	ldrh	r1, [r7, #22]
 8002376:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            brokenPixCnt = brokenPixCnt + 1;
 800237a:	8abb      	ldrh	r3, [r7, #20]
 800237c:	3301      	adds	r3, #1
 800237e:	82bb      	strh	r3, [r7, #20]
 8002380:	e014      	b.n	80023ac <ExtractDeviatingPixels+0xa4>
        }    
        else if((eeData[pixCnt+64] & 0x0001) != 0)
 8002382:	8afb      	ldrh	r3, [r7, #22]
 8002384:	3340      	adds	r3, #64	; 0x40
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	4413      	add	r3, r2
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00a      	beq.n	80023ac <ExtractDeviatingPixels+0xa4>
        {
            mlx90640->outlierPixels[outlierPixCnt] = pixCnt;
 8002396:	8a7b      	ldrh	r3, [r7, #18]
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	f603 1338 	addw	r3, r3, #2360	; 0x938
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	4413      	add	r3, r2
 80023a2:	8afa      	ldrh	r2, [r7, #22]
 80023a4:	805a      	strh	r2, [r3, #2]
            outlierPixCnt = outlierPixCnt + 1;
 80023a6:	8a7b      	ldrh	r3, [r7, #18]
 80023a8:	3301      	adds	r3, #1
 80023aa:	827b      	strh	r3, [r7, #18]
        }    
        
        pixCnt = pixCnt + 1;
 80023ac:	8afb      	ldrh	r3, [r7, #22]
 80023ae:	3301      	adds	r3, #1
 80023b0:	82fb      	strh	r3, [r7, #22]
    while (pixCnt < 768 && brokenPixCnt < 5 && outlierPixCnt < 5)
 80023b2:	8afb      	ldrh	r3, [r7, #22]
 80023b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80023b8:	d205      	bcs.n	80023c6 <ExtractDeviatingPixels+0xbe>
 80023ba:	8abb      	ldrh	r3, [r7, #20]
 80023bc:	2b04      	cmp	r3, #4
 80023be:	d802      	bhi.n	80023c6 <ExtractDeviatingPixels+0xbe>
 80023c0:	8a7b      	ldrh	r3, [r7, #18]
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	d9ca      	bls.n	800235c <ExtractDeviatingPixels+0x54>
        
    } 
    
    if(brokenPixCnt > 4)  
 80023c6:	8abb      	ldrh	r3, [r7, #20]
 80023c8:	2b04      	cmp	r3, #4
 80023ca:	d903      	bls.n	80023d4 <ExtractDeviatingPixels+0xcc>
    {
        warn = -3;
 80023cc:	f06f 0302 	mvn.w	r3, #2
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	e08f      	b.n	80024f4 <ExtractDeviatingPixels+0x1ec>
    }         
    else if(outlierPixCnt > 4)  
 80023d4:	8a7b      	ldrh	r3, [r7, #18]
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	d903      	bls.n	80023e2 <ExtractDeviatingPixels+0xda>
    {
        warn = -4;
 80023da:	f06f 0303 	mvn.w	r3, #3
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	e088      	b.n	80024f4 <ExtractDeviatingPixels+0x1ec>
    }
    else if((brokenPixCnt + outlierPixCnt) > 4)  
 80023e2:	8aba      	ldrh	r2, [r7, #20]
 80023e4:	8a7b      	ldrh	r3, [r7, #18]
 80023e6:	4413      	add	r3, r2
 80023e8:	2b04      	cmp	r3, #4
 80023ea:	dd03      	ble.n	80023f4 <ExtractDeviatingPixels+0xec>
    {
        warn = -5;
 80023ec:	f06f 0304 	mvn.w	r3, #4
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	e07f      	b.n	80024f4 <ExtractDeviatingPixels+0x1ec>
    } 
    else
    {
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 80023f4:	2300      	movs	r3, #0
 80023f6:	82fb      	strh	r3, [r7, #22]
 80023f8:	e022      	b.n	8002440 <ExtractDeviatingPixels+0x138>
        {
            for(i=pixCnt+1; i<brokenPixCnt; i++)
 80023fa:	8afb      	ldrh	r3, [r7, #22]
 80023fc:	3301      	adds	r3, #1
 80023fe:	60bb      	str	r3, [r7, #8]
 8002400:	e017      	b.n	8002432 <ExtractDeviatingPixels+0x12a>
            {
                warn = CheckAdjacentPixels(mlx90640->brokenPixels[pixCnt],mlx90640->brokenPixels[i]);
 8002402:	8afa      	ldrh	r2, [r7, #22]
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	f602 1234 	addw	r2, r2, #2356	; 0x934
 800240a:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	68ba      	ldr	r2, [r7, #8]
 8002412:	f602 1234 	addw	r2, r2, #2356	; 0x934
 8002416:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800241a:	4619      	mov	r1, r3
 800241c:	f000 f86f 	bl	80024fe <CheckAdjacentPixels>
 8002420:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <ExtractDeviatingPixels+0x124>
                {
                    return warn;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	e064      	b.n	80024f6 <ExtractDeviatingPixels+0x1ee>
            for(i=pixCnt+1; i<brokenPixCnt; i++)
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	3301      	adds	r3, #1
 8002430:	60bb      	str	r3, [r7, #8]
 8002432:	8abb      	ldrh	r3, [r7, #20]
 8002434:	68ba      	ldr	r2, [r7, #8]
 8002436:	429a      	cmp	r2, r3
 8002438:	dbe3      	blt.n	8002402 <ExtractDeviatingPixels+0xfa>
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 800243a:	8afb      	ldrh	r3, [r7, #22]
 800243c:	3301      	adds	r3, #1
 800243e:	82fb      	strh	r3, [r7, #22]
 8002440:	8afa      	ldrh	r2, [r7, #22]
 8002442:	8abb      	ldrh	r3, [r7, #20]
 8002444:	429a      	cmp	r2, r3
 8002446:	d3d8      	bcc.n	80023fa <ExtractDeviatingPixels+0xf2>
                }    
            }    
        }
        
        for(pixCnt=0; pixCnt<outlierPixCnt; pixCnt++)
 8002448:	2300      	movs	r3, #0
 800244a:	82fb      	strh	r3, [r7, #22]
 800244c:	e024      	b.n	8002498 <ExtractDeviatingPixels+0x190>
        {
            for(i=pixCnt+1; i<outlierPixCnt; i++)
 800244e:	8afb      	ldrh	r3, [r7, #22]
 8002450:	3301      	adds	r3, #1
 8002452:	60bb      	str	r3, [r7, #8]
 8002454:	e019      	b.n	800248a <ExtractDeviatingPixels+0x182>
            {
                warn = CheckAdjacentPixels(mlx90640->outlierPixels[pixCnt],mlx90640->outlierPixels[i]);
 8002456:	8afb      	ldrh	r3, [r7, #22]
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	f603 1338 	addw	r3, r3, #2360	; 0x938
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	4413      	add	r3, r2
 8002462:	8858      	ldrh	r0, [r3, #2]
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	f603 1338 	addw	r3, r3, #2360	; 0x938
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	4413      	add	r3, r2
 8002470:	885b      	ldrh	r3, [r3, #2]
 8002472:	4619      	mov	r1, r3
 8002474:	f000 f843 	bl	80024fe <CheckAdjacentPixels>
 8002478:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <ExtractDeviatingPixels+0x17c>
                {
                    return warn;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	e038      	b.n	80024f6 <ExtractDeviatingPixels+0x1ee>
            for(i=pixCnt+1; i<outlierPixCnt; i++)
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	3301      	adds	r3, #1
 8002488:	60bb      	str	r3, [r7, #8]
 800248a:	8a7b      	ldrh	r3, [r7, #18]
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	429a      	cmp	r2, r3
 8002490:	dbe1      	blt.n	8002456 <ExtractDeviatingPixels+0x14e>
        for(pixCnt=0; pixCnt<outlierPixCnt; pixCnt++)
 8002492:	8afb      	ldrh	r3, [r7, #22]
 8002494:	3301      	adds	r3, #1
 8002496:	82fb      	strh	r3, [r7, #22]
 8002498:	8afa      	ldrh	r2, [r7, #22]
 800249a:	8a7b      	ldrh	r3, [r7, #18]
 800249c:	429a      	cmp	r2, r3
 800249e:	d3d6      	bcc.n	800244e <ExtractDeviatingPixels+0x146>
                }    
            }    
        } 
        
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 80024a0:	2300      	movs	r3, #0
 80024a2:	82fb      	strh	r3, [r7, #22]
 80024a4:	e022      	b.n	80024ec <ExtractDeviatingPixels+0x1e4>
        {
            for(i=0; i<outlierPixCnt; i++)
 80024a6:	2300      	movs	r3, #0
 80024a8:	60bb      	str	r3, [r7, #8]
 80024aa:	e018      	b.n	80024de <ExtractDeviatingPixels+0x1d6>
            {
                warn = CheckAdjacentPixels(mlx90640->brokenPixels[pixCnt],mlx90640->outlierPixels[i]);
 80024ac:	8afa      	ldrh	r2, [r7, #22]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	f602 1234 	addw	r2, r2, #2356	; 0x934
 80024b4:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	f603 1338 	addw	r3, r3, #2360	; 0x938
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	4413      	add	r3, r2
 80024c4:	885b      	ldrh	r3, [r3, #2]
 80024c6:	4619      	mov	r1, r3
 80024c8:	f000 f819 	bl	80024fe <CheckAdjacentPixels>
 80024cc:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <ExtractDeviatingPixels+0x1d0>
                {
                    return warn;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	e00e      	b.n	80024f6 <ExtractDeviatingPixels+0x1ee>
            for(i=0; i<outlierPixCnt; i++)
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	3301      	adds	r3, #1
 80024dc:	60bb      	str	r3, [r7, #8]
 80024de:	8a7b      	ldrh	r3, [r7, #18]
 80024e0:	68ba      	ldr	r2, [r7, #8]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	dbe2      	blt.n	80024ac <ExtractDeviatingPixels+0x1a4>
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 80024e6:	8afb      	ldrh	r3, [r7, #22]
 80024e8:	3301      	adds	r3, #1
 80024ea:	82fb      	strh	r3, [r7, #22]
 80024ec:	8afa      	ldrh	r2, [r7, #22]
 80024ee:	8abb      	ldrh	r3, [r7, #20]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d3d8      	bcc.n	80024a6 <ExtractDeviatingPixels+0x19e>
        }    
        
    }    
    
    
    return warn;
 80024f4:	68fb      	ldr	r3, [r7, #12]
       
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <CheckAdjacentPixels>:

//------------------------------------------------------------------------------

 int CheckAdjacentPixels(uint16_t pix1, uint16_t pix2)
 {
 80024fe:	b480      	push	{r7}
 8002500:	b085      	sub	sp, #20
 8002502:	af00      	add	r7, sp, #0
 8002504:	4603      	mov	r3, r0
 8002506:	460a      	mov	r2, r1
 8002508:	80fb      	strh	r3, [r7, #6]
 800250a:	4613      	mov	r3, r2
 800250c:	80bb      	strh	r3, [r7, #4]
     int pixPosDif;
     
     pixPosDif = pix1 - pix2;
 800250e:	88fa      	ldrh	r2, [r7, #6]
 8002510:	88bb      	ldrh	r3, [r7, #4]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	60fb      	str	r3, [r7, #12]
     if(pixPosDif > -34 && pixPosDif < -30)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f113 0f21 	cmn.w	r3, #33	; 0x21
 800251c:	db06      	blt.n	800252c <CheckAdjacentPixels+0x2e>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f113 0f1e 	cmn.w	r3, #30
 8002524:	da02      	bge.n	800252c <CheckAdjacentPixels+0x2e>
     {
         return -6;
 8002526:	f06f 0305 	mvn.w	r3, #5
 800252a:	e013      	b.n	8002554 <CheckAdjacentPixels+0x56>
     } 
     if(pixPosDif > -2 && pixPosDif < 2)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002532:	db05      	blt.n	8002540 <CheckAdjacentPixels+0x42>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2b01      	cmp	r3, #1
 8002538:	dc02      	bgt.n	8002540 <CheckAdjacentPixels+0x42>
     {
         return -6;
 800253a:	f06f 0305 	mvn.w	r3, #5
 800253e:	e009      	b.n	8002554 <CheckAdjacentPixels+0x56>
     } 
     if(pixPosDif > 30 && pixPosDif < 34)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2b1e      	cmp	r3, #30
 8002544:	dd05      	ble.n	8002552 <CheckAdjacentPixels+0x54>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2b21      	cmp	r3, #33	; 0x21
 800254a:	dc02      	bgt.n	8002552 <CheckAdjacentPixels+0x54>
     {
         return -6;
 800254c:	f06f 0305 	mvn.w	r3, #5
 8002550:	e000      	b.n	8002554 <CheckAdjacentPixels+0x56>
     }
     
     return 0;    
 8002552:	2300      	movs	r3, #0
 }
 8002554:	4618      	mov	r0, r3
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <MLX90640_I2CRead>:
	MX_I2C1_Init();
}


int MLX90640_I2CRead(uint8_t slaveAddr, uint16_t startAddress, uint16_t nMemAddressRead, uint16_t *data,I2C_HandleTypeDef * i2c)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b08c      	sub	sp, #48	; 0x30
 8002564:	af04      	add	r7, sp, #16
 8002566:	607b      	str	r3, [r7, #4]
 8002568:	4603      	mov	r3, r0
 800256a:	73fb      	strb	r3, [r7, #15]
 800256c:	460b      	mov	r3, r1
 800256e:	81bb      	strh	r3, [r7, #12]
 8002570:	4613      	mov	r3, r2
 8002572:	817b      	strh	r3, [r7, #10]

	uint8_t* p = (uint8_t*) data;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	61bb      	str	r3, [r7, #24]

	int ack = 0;                               
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]
	int cnt = 0;
 800257c:	2300      	movs	r3, #0
 800257e:	61fb      	str	r3, [r7, #28]
	
	ack = HAL_I2C_Mem_Read(&hi2c1, (slaveAddr<<1), startAddress, I2C_MEMADD_SIZE_16BIT, p, nMemAddressRead*2, 500);
 8002580:	7bfb      	ldrb	r3, [r7, #15]
 8002582:	b29b      	uxth	r3, r3
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	b299      	uxth	r1, r3
 8002588:	897b      	ldrh	r3, [r7, #10]
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	b29b      	uxth	r3, r3
 800258e:	89ba      	ldrh	r2, [r7, #12]
 8002590:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002594:	9002      	str	r0, [sp, #8]
 8002596:	9301      	str	r3, [sp, #4]
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	2302      	movs	r3, #2
 800259e:	4817      	ldr	r0, [pc, #92]	; (80025fc <MLX90640_I2CRead+0x9c>)
 80025a0:	f004 ff34 	bl	800740c <HAL_I2C_Mem_Read>
 80025a4:	4603      	mov	r3, r0
 80025a6:	617b      	str	r3, [r7, #20]

	if (ack != HAL_OK)
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d002      	beq.n	80025b4 <MLX90640_I2CRead+0x54>
	{
			return -1;
 80025ae:	f04f 33ff 	mov.w	r3, #4294967295
 80025b2:	e01f      	b.n	80025f4 <MLX90640_I2CRead+0x94>
	}
	

	for(cnt=0; cnt < nMemAddressRead*2; cnt+=2) {
 80025b4:	2300      	movs	r3, #0
 80025b6:	61fb      	str	r3, [r7, #28]
 80025b8:	e016      	b.n	80025e8 <MLX90640_I2CRead+0x88>
		uint8_t tempBuffer = p[cnt+1];
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	3301      	adds	r3, #1
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4413      	add	r3, r2
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	74fb      	strb	r3, [r7, #19]
		p[cnt+1] = p[cnt];
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	441a      	add	r2, r3
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	3301      	adds	r3, #1
 80025d0:	69b9      	ldr	r1, [r7, #24]
 80025d2:	440b      	add	r3, r1
 80025d4:	7812      	ldrb	r2, [r2, #0]
 80025d6:	701a      	strb	r2, [r3, #0]
		p[cnt] = tempBuffer;
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4413      	add	r3, r2
 80025de:	7cfa      	ldrb	r2, [r7, #19]
 80025e0:	701a      	strb	r2, [r3, #0]
	for(cnt=0; cnt < nMemAddressRead*2; cnt+=2) {
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	3302      	adds	r3, #2
 80025e6:	61fb      	str	r3, [r7, #28]
 80025e8:	897b      	ldrh	r3, [r7, #10]
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	69fa      	ldr	r2, [r7, #28]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	dbe3      	blt.n	80025ba <MLX90640_I2CRead+0x5a>
	}

	return 0;   
 80025f2:	2300      	movs	r3, #0
} 
 80025f4:	4618      	mov	r0, r3
 80025f6:	3720      	adds	r7, #32
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	20000f20 	.word	0x20000f20

08002600 <MLX90640_I2CWrite>:


int MLX90640_I2CWrite(uint8_t slaveAddr, uint16_t writeAddress, uint16_t data,I2C_HandleTypeDef * i2c)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b08a      	sub	sp, #40	; 0x28
 8002604:	af04      	add	r7, sp, #16
 8002606:	607b      	str	r3, [r7, #4]
 8002608:	4603      	mov	r3, r0
 800260a:	73fb      	strb	r3, [r7, #15]
 800260c:	460b      	mov	r3, r1
 800260e:	81bb      	strh	r3, [r7, #12]
 8002610:	4613      	mov	r3, r2
 8002612:	817b      	strh	r3, [r7, #10]

	uint8_t sa;
	int ack = 0;
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]
	uint8_t cmd[2];
	static uint16_t dataCheck;

	sa = (slaveAddr << 1);
 8002618:	7bfb      	ldrb	r3, [r7, #15]
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	74fb      	strb	r3, [r7, #19]

	cmd[0] = data >> 8;
 800261e:	897b      	ldrh	r3, [r7, #10]
 8002620:	0a1b      	lsrs	r3, r3, #8
 8002622:	b29b      	uxth	r3, r3
 8002624:	b2db      	uxtb	r3, r3
 8002626:	743b      	strb	r3, [r7, #16]
	cmd[1] = data & 0x00FF;
 8002628:	897b      	ldrh	r3, [r7, #10]
 800262a:	b2db      	uxtb	r3, r3
 800262c:	747b      	strb	r3, [r7, #17]


	ack = HAL_I2C_Mem_Write(&hi2c1, sa, writeAddress, I2C_MEMADD_SIZE_16BIT, cmd, sizeof(cmd), 500);
 800262e:	7cfb      	ldrb	r3, [r7, #19]
 8002630:	b299      	uxth	r1, r3
 8002632:	89ba      	ldrh	r2, [r7, #12]
 8002634:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002638:	9302      	str	r3, [sp, #8]
 800263a:	2302      	movs	r3, #2
 800263c:	9301      	str	r3, [sp, #4]
 800263e:	f107 0310 	add.w	r3, r7, #16
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	2302      	movs	r3, #2
 8002646:	4810      	ldr	r0, [pc, #64]	; (8002688 <MLX90640_I2CWrite+0x88>)
 8002648:	f004 fdcc 	bl	80071e4 <HAL_I2C_Mem_Write>
 800264c:	4603      	mov	r3, r0
 800264e:	617b      	str	r3, [r7, #20]

	if (ack != HAL_OK)
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d002      	beq.n	800265c <MLX90640_I2CWrite+0x5c>
	{
			return -1;
 8002656:	f04f 33ff 	mov.w	r3, #4294967295
 800265a:	e010      	b.n	800267e <MLX90640_I2CWrite+0x7e>
	}         
	
	MLX90640_I2CRead(slaveAddr,writeAddress,1, &dataCheck,i2c);
 800265c:	89b9      	ldrh	r1, [r7, #12]
 800265e:	7bf8      	ldrb	r0, [r7, #15]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	4b09      	ldr	r3, [pc, #36]	; (800268c <MLX90640_I2CWrite+0x8c>)
 8002666:	2201      	movs	r2, #1
 8002668:	f7ff ff7a 	bl	8002560 <MLX90640_I2CRead>
	
	if ( dataCheck != data)
 800266c:	4b07      	ldr	r3, [pc, #28]	; (800268c <MLX90640_I2CWrite+0x8c>)
 800266e:	881b      	ldrh	r3, [r3, #0]
 8002670:	897a      	ldrh	r2, [r7, #10]
 8002672:	429a      	cmp	r2, r3
 8002674:	d002      	beq.n	800267c <MLX90640_I2CWrite+0x7c>
	{
			return -2;
 8002676:	f06f 0301 	mvn.w	r3, #1
 800267a:	e000      	b.n	800267e <MLX90640_I2CWrite+0x7e>
	}    
	
	return 0;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3718      	adds	r7, #24
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20000f20 	.word	0x20000f20
 800268c:	20000dd4 	.word	0x20000dd4

08002690 <MPU9250_IsConnected>:
__weak void MPU9250_OnActivate()
{
}
#ifndef USE_SPI
bool MPU9250_IsConnected()
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&_MPU9250_I2C,_dev_add,1,HAL_MAX_DELAY)==HAL_OK)
 8002694:	21d0      	movs	r1, #208	; 0xd0
 8002696:	f04f 33ff 	mov.w	r3, #4294967295
 800269a:	2201      	movs	r2, #1
 800269c:	4805      	ldr	r0, [pc, #20]	; (80026b4 <MPU9250_IsConnected+0x24>)
 800269e:	f004 ffcf 	bl	8007640 <HAL_I2C_IsDeviceReady>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <MPU9250_IsConnected+0x1c>
		return true;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e000      	b.n	80026ae <MPU9250_IsConnected+0x1e>
	else
		return false;	
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	20000f6c 	.word	0x20000f6c

080026b8 <MPU_I2C_Write>:

void MPU_I2C_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af04      	add	r7, sp, #16
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	460b      	mov	r3, r1
 80026c2:	70fb      	strb	r3, [r7, #3]
 80026c4:	4613      	mov	r3, r2
 80026c6:	803b      	strh	r3, [r7, #0]
	HAL_I2C_Mem_Write(&_MPU9250_I2C,_dev_add,WriteAddr,I2C_MEMADD_SIZE_8BIT,pBuffer,NumByteToWrite,HAL_MAX_DELAY);
 80026c8:	21d0      	movs	r1, #208	; 0xd0
 80026ca:	78fb      	ldrb	r3, [r7, #3]
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	f04f 33ff 	mov.w	r3, #4294967295
 80026d2:	9302      	str	r3, [sp, #8]
 80026d4:	883b      	ldrh	r3, [r7, #0]
 80026d6:	9301      	str	r3, [sp, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	2301      	movs	r3, #1
 80026de:	4803      	ldr	r0, [pc, #12]	; (80026ec <MPU_I2C_Write+0x34>)
 80026e0:	f004 fd80 	bl	80071e4 <HAL_I2C_Mem_Write>
}
 80026e4:	bf00      	nop
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	20000f6c 	.word	0x20000f6c

080026f0 <MPU_I2C_Read>:

void MPU_I2C_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af02      	add	r7, sp, #8
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	70fb      	strb	r3, [r7, #3]
 80026fc:	4613      	mov	r3, r2
 80026fe:	803b      	strh	r3, [r7, #0]
	uint8_t data = ReadAddr | READWRITE_CMD;
 8002700:	2280      	movs	r2, #128	; 0x80
 8002702:	78fb      	ldrb	r3, [r7, #3]
 8002704:	4313      	orrs	r3, r2
 8002706:	b2db      	uxtb	r3, r3
 8002708:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&_MPU9250_I2C,_dev_add,&data,1,HAL_MAX_DELAY);
 800270a:	21d0      	movs	r1, #208	; 0xd0
 800270c:	f107 020f 	add.w	r2, r7, #15
 8002710:	f04f 33ff 	mov.w	r3, #4294967295
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	2301      	movs	r3, #1
 8002718:	4807      	ldr	r0, [pc, #28]	; (8002738 <MPU_I2C_Read+0x48>)
 800271a:	f004 fb79 	bl	8006e10 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&_MPU9250_I2C,_dev_add,pBuffer,NumByteToRead,HAL_MAX_DELAY);
 800271e:	21d0      	movs	r1, #208	; 0xd0
 8002720:	883b      	ldrh	r3, [r7, #0]
 8002722:	f04f 32ff 	mov.w	r2, #4294967295
 8002726:	9200      	str	r2, [sp, #0]
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	4803      	ldr	r0, [pc, #12]	; (8002738 <MPU_I2C_Read+0x48>)
 800272c:	f004 fc64 	bl	8006ff8 <HAL_I2C_Master_Receive>
}
 8002730:	bf00      	nop
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	20000f6c 	.word	0x20000f6c

0800273c <writeRegister>:
	MPU9250_Deactivate();
}
#endif
/* writes a byte to MPU9250 register given a register address and data */
void writeRegister(uint8_t subAddress, uint8_t data)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	4603      	mov	r3, r0
 8002744:	460a      	mov	r2, r1
 8002746:	71fb      	strb	r3, [r7, #7]
 8002748:	4613      	mov	r3, r2
 800274a:	71bb      	strb	r3, [r7, #6]
	#ifdef USE_SPI
	MPU_SPI_Write(&data, subAddress, 1);
	#else
	MPU_I2C_Write(&data, subAddress, 1);
 800274c:	79f9      	ldrb	r1, [r7, #7]
 800274e:	1dbb      	adds	r3, r7, #6
 8002750:	2201      	movs	r2, #1
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff ffb0 	bl	80026b8 <MPU_I2C_Write>
	#endif
	HAL_Delay(10);
 8002758:	200a      	movs	r0, #10
 800275a:	f002 ff09 	bl	8005570 <HAL_Delay>
}
 800275e:	bf00      	nop
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <readRegisters>:

/* reads registers from MPU9250 given a starting register address, number of bytes, and a pointer to store data */
void readRegisters(uint8_t subAddress, uint8_t count, uint8_t* dest){
 8002766:	b580      	push	{r7, lr}
 8002768:	b082      	sub	sp, #8
 800276a:	af00      	add	r7, sp, #0
 800276c:	4603      	mov	r3, r0
 800276e:	603a      	str	r2, [r7, #0]
 8002770:	71fb      	strb	r3, [r7, #7]
 8002772:	460b      	mov	r3, r1
 8002774:	71bb      	strb	r3, [r7, #6]
	#ifdef USE_SPI
	MPU_SPI_Read(dest, subAddress, count);
	#else
	MPU_I2C_Read(dest, subAddress, count);
 8002776:	79bb      	ldrb	r3, [r7, #6]
 8002778:	b29a      	uxth	r2, r3
 800277a:	79fb      	ldrb	r3, [r7, #7]
 800277c:	4619      	mov	r1, r3
 800277e:	6838      	ldr	r0, [r7, #0]
 8002780:	f7ff ffb6 	bl	80026f0 <MPU_I2C_Read>
	#endif
}
 8002784:	bf00      	nop
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <writeAK8963Register>:

/* writes a register to the AK8963 given a register address and data */
void writeAK8963Register(uint8_t subAddress, uint8_t data)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	460a      	mov	r2, r1
 8002796:	71fb      	strb	r3, [r7, #7]
 8002798:	4613      	mov	r3, r2
 800279a:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for write
	writeRegister(I2C_SLV0_ADDR,AK8963_I2C_ADDR);
 800279c:	2325      	movs	r3, #37	; 0x25
 800279e:	220c      	movs	r2, #12
 80027a0:	4611      	mov	r1, r2
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff ffca 	bl	800273c <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 80027a8:	2226      	movs	r2, #38	; 0x26
 80027aa:	79fb      	ldrb	r3, [r7, #7]
 80027ac:	4619      	mov	r1, r3
 80027ae:	4610      	mov	r0, r2
 80027b0:	f7ff ffc4 	bl	800273c <writeRegister>

	// store the data for write
	writeRegister(I2C_SLV0_DO,data);
 80027b4:	2263      	movs	r2, #99	; 0x63
 80027b6:	79bb      	ldrb	r3, [r7, #6]
 80027b8:	4619      	mov	r1, r3
 80027ba:	4610      	mov	r0, r2
 80027bc:	f7ff ffbe 	bl	800273c <writeRegister>

	// enable I2C and send 1 byte
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | (uint8_t)1);
 80027c0:	2227      	movs	r2, #39	; 0x27
 80027c2:	2380      	movs	r3, #128	; 0x80
 80027c4:	f043 0301 	orr.w	r3, r3, #1
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	4619      	mov	r1, r3
 80027cc:	4610      	mov	r0, r2
 80027ce:	f7ff ffb5 	bl	800273c <writeRegister>
}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <readAK8963Registers>:

/* reads registers from the AK8963 */
void readAK8963Registers(uint8_t subAddress, uint8_t count, uint8_t* dest)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	4603      	mov	r3, r0
 80027e2:	603a      	str	r2, [r7, #0]
 80027e4:	71fb      	strb	r3, [r7, #7]
 80027e6:	460b      	mov	r3, r1
 80027e8:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for read
	writeRegister(I2C_SLV0_ADDR, AK8963_I2C_ADDR | I2C_READ_FLAG);
 80027ea:	2025      	movs	r0, #37	; 0x25
 80027ec:	220c      	movs	r2, #12
 80027ee:	2380      	movs	r3, #128	; 0x80
 80027f0:	4313      	orrs	r3, r2
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	4619      	mov	r1, r3
 80027f6:	f7ff ffa1 	bl	800273c <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 80027fa:	2226      	movs	r2, #38	; 0x26
 80027fc:	79fb      	ldrb	r3, [r7, #7]
 80027fe:	4619      	mov	r1, r3
 8002800:	4610      	mov	r0, r2
 8002802:	f7ff ff9b 	bl	800273c <writeRegister>

	// enable I2C and request the bytes
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | count);
 8002806:	2027      	movs	r0, #39	; 0x27
 8002808:	2280      	movs	r2, #128	; 0x80
 800280a:	79bb      	ldrb	r3, [r7, #6]
 800280c:	4313      	orrs	r3, r2
 800280e:	b2db      	uxtb	r3, r3
 8002810:	4619      	mov	r1, r3
 8002812:	f7ff ff93 	bl	800273c <writeRegister>

	// takes some time for these registers to fill
	HAL_Delay(1);
 8002816:	2001      	movs	r0, #1
 8002818:	f002 feaa 	bl	8005570 <HAL_Delay>

	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	readRegisters(EXT_SENS_DATA_00,count,dest);
 800281c:	2049      	movs	r0, #73	; 0x49
 800281e:	79bb      	ldrb	r3, [r7, #6]
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	4619      	mov	r1, r3
 8002824:	f7ff ff9f 	bl	8002766 <readRegisters>
}
 8002828:	bf00      	nop
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <whoAmI>:

/* gets the MPU9250 WHO_AM_I register value, expected to be 0x71 */
static uint8_t whoAmI(){
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readRegisters(WHO_AM_I,1,_buffer);
 8002834:	2375      	movs	r3, #117	; 0x75
 8002836:	4a04      	ldr	r2, [pc, #16]	; (8002848 <whoAmI+0x18>)
 8002838:	2101      	movs	r1, #1
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff ff93 	bl	8002766 <readRegisters>

	// return the register value
	return _buffer[0];
 8002840:	4b01      	ldr	r3, [pc, #4]	; (8002848 <whoAmI+0x18>)
 8002842:	781b      	ldrb	r3, [r3, #0]
}
 8002844:	4618      	mov	r0, r3
 8002846:	bd80      	pop	{r7, pc}
 8002848:	20000dd8 	.word	0x20000dd8

0800284c <whoAmIAK8963>:

/* gets the AK8963 WHO_AM_I register value, expected to be 0x48 */
static int whoAmIAK8963(){
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readAK8963Registers(AK8963_WHO_AM_I,1,_buffer);
 8002850:	2300      	movs	r3, #0
 8002852:	4a04      	ldr	r2, [pc, #16]	; (8002864 <whoAmIAK8963+0x18>)
 8002854:	2101      	movs	r1, #1
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff ffbf 	bl	80027da <readAK8963Registers>
	// return the register value
	return _buffer[0];
 800285c:	4b01      	ldr	r3, [pc, #4]	; (8002864 <whoAmIAK8963+0x18>)
 800285e:	781b      	ldrb	r3, [r3, #0]
}
 8002860:	4618      	mov	r0, r3
 8002862:	bd80      	pop	{r7, pc}
 8002864:	20000dd8 	.word	0x20000dd8

08002868 <MPU9250_Init>:

/* starts communication with the MPU-9250 */
uint8_t MPU9250_Init()
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
	#ifndef USE_SPI
	int tries = 0;
 800286e:	2300      	movs	r3, #0
 8002870:	607b      	str	r3, [r7, #4]
	while(MPU9250_IsConnected() == false && tries < 5)
 8002872:	e005      	b.n	8002880 <MPU9250_Init+0x18>
	{
		tries++;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3301      	adds	r3, #1
 8002878:	607b      	str	r3, [r7, #4]
		HAL_Delay(100);
 800287a:	2064      	movs	r0, #100	; 0x64
 800287c:	f002 fe78 	bl	8005570 <HAL_Delay>
	while(MPU9250_IsConnected() == false && tries < 5)
 8002880:	f7ff ff06 	bl	8002690 <MPU9250_IsConnected>
 8002884:	4603      	mov	r3, r0
 8002886:	f083 0301 	eor.w	r3, r3, #1
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b00      	cmp	r3, #0
 800288e:	d002      	beq.n	8002896 <MPU9250_Init+0x2e>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b04      	cmp	r3, #4
 8002894:	ddee      	ble.n	8002874 <MPU9250_Init+0xc>
	}
	if(tries == 5)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2b05      	cmp	r3, #5
 800289a:	d101      	bne.n	80028a0 <MPU9250_Init+0x38>
	{
		return 1;
 800289c:	2301      	movs	r3, #1
 800289e:	e0a5      	b.n	80029ec <MPU9250_Init+0x184>
	}
	#endif
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL);
 80028a0:	236b      	movs	r3, #107	; 0x6b
 80028a2:	2201      	movs	r2, #1
 80028a4:	4611      	mov	r1, r2
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff ff48 	bl	800273c <writeRegister>
	// enable I2C master mode
	writeRegister(USER_CTRL, I2C_MST_EN);
 80028ac:	236a      	movs	r3, #106	; 0x6a
 80028ae:	2220      	movs	r2, #32
 80028b0:	4611      	mov	r1, r2
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff ff42 	bl	800273c <writeRegister>
	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL, I2C_MST_CLK);
 80028b8:	2324      	movs	r3, #36	; 0x24
 80028ba:	220d      	movs	r2, #13
 80028bc:	4611      	mov	r1, r2
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff ff3c 	bl	800273c <writeRegister>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 80028c4:	230a      	movs	r3, #10
 80028c6:	2200      	movs	r2, #0
 80028c8:	4611      	mov	r1, r2
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff ff5e 	bl	800278c <writeAK8963Register>
	// reset the MPU9250
	writeRegister(PWR_MGMNT_1,PWR_RESET);
 80028d0:	236b      	movs	r3, #107	; 0x6b
 80028d2:	2280      	movs	r2, #128	; 0x80
 80028d4:	4611      	mov	r1, r2
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff ff30 	bl	800273c <writeRegister>
	// wait for MPU-9250 to come back up
	HAL_Delay(10);
 80028dc:	200a      	movs	r0, #10
 80028de:	f002 fe47 	bl	8005570 <HAL_Delay>
	// reset the AK8963
	writeAK8963Register(AK8963_CNTL2,AK8963_RESET);
 80028e2:	230b      	movs	r3, #11
 80028e4:	2201      	movs	r2, #1
 80028e6:	4611      	mov	r1, r2
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff ff4f 	bl	800278c <writeAK8963Register>
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL);
 80028ee:	236b      	movs	r3, #107	; 0x6b
 80028f0:	2201      	movs	r2, #1
 80028f2:	4611      	mov	r1, r2
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff ff21 	bl	800273c <writeRegister>

	// check the WHO AM I byte, expected value is 0x71 (decimal 113) or 0x73 (decimal 115)
	uint8_t who = whoAmI();
 80028fa:	f7ff ff99 	bl	8002830 <whoAmI>
 80028fe:	4603      	mov	r3, r0
 8002900:	70fb      	strb	r3, [r7, #3]
	if((who != 0x71) && ( who != 0x73))
 8002902:	78fb      	ldrb	r3, [r7, #3]
 8002904:	2b71      	cmp	r3, #113	; 0x71
 8002906:	d004      	beq.n	8002912 <MPU9250_Init+0xaa>
 8002908:	78fb      	ldrb	r3, [r7, #3]
 800290a:	2b73      	cmp	r3, #115	; 0x73
 800290c:	d001      	beq.n	8002912 <MPU9250_Init+0xaa>
	{
		return 1;
 800290e:	2301      	movs	r3, #1
 8002910:	e06c      	b.n	80029ec <MPU9250_Init+0x184>
	}

	// enable accelerometer and gyro
	writeRegister(PWR_MGMNT_2,SEN_ENABLE);
 8002912:	236c      	movs	r3, #108	; 0x6c
 8002914:	2200      	movs	r2, #0
 8002916:	4611      	mov	r1, r2
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff ff0f 	bl	800273c <writeRegister>

	// setting accel range to 16G as default
	writeRegister(ACCEL_CONFIG,ACCEL_FS_SEL_2G);
 800291e:	231c      	movs	r3, #28
 8002920:	2200      	movs	r2, #0
 8002922:	4611      	mov	r1, r2
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff ff09 	bl	800273c <writeRegister>

	// setting the gyro range to 2000DPS as default
	writeRegister(GYRO_CONFIG,GYRO_FS_SEL_250DPS);
 800292a:	231b      	movs	r3, #27
 800292c:	2200      	movs	r2, #0
 800292e:	4611      	mov	r1, r2
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff ff03 	bl	800273c <writeRegister>

	// setting bandwidth to 184Hz as default
	writeRegister(ACCEL_CONFIG2,DLPF_184);
 8002936:	231d      	movs	r3, #29
 8002938:	2201      	movs	r2, #1
 800293a:	4611      	mov	r1, r2
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff fefd 	bl	800273c <writeRegister>

	// setting gyro bandwidth to 184Hz
	writeRegister(CONFIG,DLPF_184);
 8002942:	231a      	movs	r3, #26
 8002944:	2201      	movs	r2, #1
 8002946:	4611      	mov	r1, r2
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff fef7 	bl	800273c <writeRegister>

	// setting the sample rate divider to 0 as default
	writeRegister(SMPDIV,0x00);
 800294e:	2319      	movs	r3, #25
 8002950:	2100      	movs	r1, #0
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff fef2 	bl	800273c <writeRegister>

	// enable I2C master mode
	writeRegister(USER_CTRL,I2C_MST_EN);
 8002958:	236a      	movs	r3, #106	; 0x6a
 800295a:	2220      	movs	r2, #32
 800295c:	4611      	mov	r1, r2
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff feec 	bl	800273c <writeRegister>

	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL,I2C_MST_CLK);
 8002964:	2324      	movs	r3, #36	; 0x24
 8002966:	220d      	movs	r2, #13
 8002968:	4611      	mov	r1, r2
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff fee6 	bl	800273c <writeRegister>

	// check AK8963 WHO AM I register, expected value is 0x48 (decimal 72)
	if( whoAmIAK8963() != 0x48 )
 8002970:	f7ff ff6c 	bl	800284c <whoAmIAK8963>
 8002974:	4603      	mov	r3, r0
 8002976:	2b48      	cmp	r3, #72	; 0x48
 8002978:	d001      	beq.n	800297e <MPU9250_Init+0x116>
	{
		return 1;
 800297a:	2301      	movs	r3, #1
 800297c:	e036      	b.n	80029ec <MPU9250_Init+0x184>
	}

	/* get the magnetometer calibration */
	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 800297e:	230a      	movs	r3, #10
 8002980:	2200      	movs	r2, #0
 8002982:	4611      	mov	r1, r2
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff ff01 	bl	800278c <writeAK8963Register>

	HAL_Delay(100); // long wait between AK8963 mode changes
 800298a:	2064      	movs	r0, #100	; 0x64
 800298c:	f002 fdf0 	bl	8005570 <HAL_Delay>

	// set AK8963 to FUSE ROM access
	writeAK8963Register(AK8963_CNTL1,AK8963_FUSE_ROM);
 8002990:	230a      	movs	r3, #10
 8002992:	220f      	movs	r2, #15
 8002994:	4611      	mov	r1, r2
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff fef8 	bl	800278c <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 800299c:	2064      	movs	r0, #100	; 0x64
 800299e:	f002 fde7 	bl	8005570 <HAL_Delay>

	// read the AK8963 ASA registers and compute magnetometer scale factors
	readAK8963Registers(AK8963_ASA, 3, _mag_adjust);
 80029a2:	2310      	movs	r3, #16
 80029a4:	4a13      	ldr	r2, [pc, #76]	; (80029f4 <MPU9250_Init+0x18c>)
 80029a6:	2103      	movs	r1, #3
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff ff16 	bl	80027da <readAK8963Registers>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 80029ae:	230a      	movs	r3, #10
 80029b0:	2200      	movs	r2, #0
 80029b2:	4611      	mov	r1, r2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff fee9 	bl	800278c <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 80029ba:	2064      	movs	r0, #100	; 0x64
 80029bc:	f002 fdd8 	bl	8005570 <HAL_Delay>

	// set AK8963 to 16 bit resolution, 100 Hz update rate
	writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS2);
 80029c0:	230a      	movs	r3, #10
 80029c2:	2216      	movs	r2, #22
 80029c4:	4611      	mov	r1, r2
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff fee0 	bl	800278c <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 80029cc:	2064      	movs	r0, #100	; 0x64
 80029ce:	f002 fdcf 	bl	8005570 <HAL_Delay>

	// select clock source to gyro
	writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL);
 80029d2:	236b      	movs	r3, #107	; 0x6b
 80029d4:	2201      	movs	r2, #1
 80029d6:	4611      	mov	r1, r2
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff feaf 	bl	800273c <writeRegister>

	// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
	readAK8963Registers(AK8963_HXL,7,_buffer);
 80029de:	2303      	movs	r3, #3
 80029e0:	4a05      	ldr	r2, [pc, #20]	; (80029f8 <MPU9250_Init+0x190>)
 80029e2:	2107      	movs	r1, #7
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff fef8 	bl	80027da <readAK8963Registers>

	// successful init, return 0
	return 0;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	20000df0 	.word	0x20000df0
 80029f8:	20000dd8 	.word	0x20000dd8

080029fc <MPU9250_GetData>:
	writeRegister(SMPDIV, srd);
}

/* read the data, each argiment should point to a array for x, y, and x */
void MPU9250_GetData(int16_t* AccData, int16_t* MagData, int16_t* GyroData)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
	// grab the data from the MPU9250
	readRegisters(ACCEL_OUT, 21, _buffer);
 8002a08:	233b      	movs	r3, #59	; 0x3b
 8002a0a:	4a63      	ldr	r2, [pc, #396]	; (8002b98 <MPU9250_GetData+0x19c>)
 8002a0c:	2115      	movs	r1, #21
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff fea9 	bl	8002766 <readRegisters>

	// combine into 16 bit values
	AccData[0] = (((int16_t)_buffer[0]) << 8) | _buffer[1];
 8002a14:	4b60      	ldr	r3, [pc, #384]	; (8002b98 <MPU9250_GetData+0x19c>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	021b      	lsls	r3, r3, #8
 8002a1a:	b21a      	sxth	r2, r3
 8002a1c:	4b5e      	ldr	r3, [pc, #376]	; (8002b98 <MPU9250_GetData+0x19c>)
 8002a1e:	785b      	ldrb	r3, [r3, #1]
 8002a20:	b21b      	sxth	r3, r3
 8002a22:	4313      	orrs	r3, r2
 8002a24:	b21a      	sxth	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	801a      	strh	r2, [r3, #0]
	AccData[1] = (((int16_t)_buffer[2]) << 8) | _buffer[3];
 8002a2a:	4b5b      	ldr	r3, [pc, #364]	; (8002b98 <MPU9250_GetData+0x19c>)
 8002a2c:	789b      	ldrb	r3, [r3, #2]
 8002a2e:	021b      	lsls	r3, r3, #8
 8002a30:	b219      	sxth	r1, r3
 8002a32:	4b59      	ldr	r3, [pc, #356]	; (8002b98 <MPU9250_GetData+0x19c>)
 8002a34:	78db      	ldrb	r3, [r3, #3]
 8002a36:	b21a      	sxth	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	3302      	adds	r3, #2
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	b212      	sxth	r2, r2
 8002a40:	801a      	strh	r2, [r3, #0]
	AccData[2] = (((int16_t)_buffer[4]) << 8) | _buffer[5];
 8002a42:	4b55      	ldr	r3, [pc, #340]	; (8002b98 <MPU9250_GetData+0x19c>)
 8002a44:	791b      	ldrb	r3, [r3, #4]
 8002a46:	021b      	lsls	r3, r3, #8
 8002a48:	b219      	sxth	r1, r3
 8002a4a:	4b53      	ldr	r3, [pc, #332]	; (8002b98 <MPU9250_GetData+0x19c>)
 8002a4c:	795b      	ldrb	r3, [r3, #5]
 8002a4e:	b21a      	sxth	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	3304      	adds	r3, #4
 8002a54:	430a      	orrs	r2, r1
 8002a56:	b212      	sxth	r2, r2
 8002a58:	801a      	strh	r2, [r3, #0]
	GyroData[0] = (((int16_t)_buffer[8]) << 8) | _buffer[9];
 8002a5a:	4b4f      	ldr	r3, [pc, #316]	; (8002b98 <MPU9250_GetData+0x19c>)
 8002a5c:	7a1b      	ldrb	r3, [r3, #8]
 8002a5e:	021b      	lsls	r3, r3, #8
 8002a60:	b21a      	sxth	r2, r3
 8002a62:	4b4d      	ldr	r3, [pc, #308]	; (8002b98 <MPU9250_GetData+0x19c>)
 8002a64:	7a5b      	ldrb	r3, [r3, #9]
 8002a66:	b21b      	sxth	r3, r3
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	b21a      	sxth	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	801a      	strh	r2, [r3, #0]
	GyroData[1] = (((int16_t)_buffer[10]) << 8) | _buffer[11];
 8002a70:	4b49      	ldr	r3, [pc, #292]	; (8002b98 <MPU9250_GetData+0x19c>)
 8002a72:	7a9b      	ldrb	r3, [r3, #10]
 8002a74:	021b      	lsls	r3, r3, #8
 8002a76:	b219      	sxth	r1, r3
 8002a78:	4b47      	ldr	r3, [pc, #284]	; (8002b98 <MPU9250_GetData+0x19c>)
 8002a7a:	7adb      	ldrb	r3, [r3, #11]
 8002a7c:	b21a      	sxth	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	3302      	adds	r3, #2
 8002a82:	430a      	orrs	r2, r1
 8002a84:	b212      	sxth	r2, r2
 8002a86:	801a      	strh	r2, [r3, #0]
	GyroData[2] = (((int16_t)_buffer[12]) << 8) | _buffer[13];
 8002a88:	4b43      	ldr	r3, [pc, #268]	; (8002b98 <MPU9250_GetData+0x19c>)
 8002a8a:	7b1b      	ldrb	r3, [r3, #12]
 8002a8c:	021b      	lsls	r3, r3, #8
 8002a8e:	b219      	sxth	r1, r3
 8002a90:	4b41      	ldr	r3, [pc, #260]	; (8002b98 <MPU9250_GetData+0x19c>)
 8002a92:	7b5b      	ldrb	r3, [r3, #13]
 8002a94:	b21a      	sxth	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	3304      	adds	r3, #4
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	b212      	sxth	r2, r2
 8002a9e:	801a      	strh	r2, [r3, #0]

	int16_t magx = (((int16_t)_buffer[15]) << 8) | _buffer[14];
 8002aa0:	4b3d      	ldr	r3, [pc, #244]	; (8002b98 <MPU9250_GetData+0x19c>)
 8002aa2:	7bdb      	ldrb	r3, [r3, #15]
 8002aa4:	021b      	lsls	r3, r3, #8
 8002aa6:	b21a      	sxth	r2, r3
 8002aa8:	4b3b      	ldr	r3, [pc, #236]	; (8002b98 <MPU9250_GetData+0x19c>)
 8002aaa:	7b9b      	ldrb	r3, [r3, #14]
 8002aac:	b21b      	sxth	r3, r3
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	82fb      	strh	r3, [r7, #22]
	int16_t magy = (((int16_t)_buffer[17]) << 8) | _buffer[16];
 8002ab2:	4b39      	ldr	r3, [pc, #228]	; (8002b98 <MPU9250_GetData+0x19c>)
 8002ab4:	7c5b      	ldrb	r3, [r3, #17]
 8002ab6:	021b      	lsls	r3, r3, #8
 8002ab8:	b21a      	sxth	r2, r3
 8002aba:	4b37      	ldr	r3, [pc, #220]	; (8002b98 <MPU9250_GetData+0x19c>)
 8002abc:	7c1b      	ldrb	r3, [r3, #16]
 8002abe:	b21b      	sxth	r3, r3
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	82bb      	strh	r3, [r7, #20]
	int16_t magz = (((int16_t)_buffer[19]) << 8) | _buffer[18];
 8002ac4:	4b34      	ldr	r3, [pc, #208]	; (8002b98 <MPU9250_GetData+0x19c>)
 8002ac6:	7cdb      	ldrb	r3, [r3, #19]
 8002ac8:	021b      	lsls	r3, r3, #8
 8002aca:	b21a      	sxth	r2, r3
 8002acc:	4b32      	ldr	r3, [pc, #200]	; (8002b98 <MPU9250_GetData+0x19c>)
 8002ace:	7c9b      	ldrb	r3, [r3, #18]
 8002ad0:	b21b      	sxth	r3, r3
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	827b      	strh	r3, [r7, #18]

	MagData[0] = (int16_t)((float)magx * ((float)(_mag_adjust[0] - 128) / 256.0f + 1.0f));
 8002ad6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002ada:	ee07 3a90 	vmov	s15, r3
 8002ade:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ae2:	4b2e      	ldr	r3, [pc, #184]	; (8002b9c <MPU9250_GetData+0x1a0>)
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	3b80      	subs	r3, #128	; 0x80
 8002ae8:	ee07 3a90 	vmov	s15, r3
 8002aec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002af0:	ed9f 6a2b 	vldr	s12, [pc, #172]	; 8002ba0 <MPU9250_GetData+0x1a4>
 8002af4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002af8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002afc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b08:	ee17 3a90 	vmov	r3, s15
 8002b0c:	b21a      	sxth	r2, r3
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	801a      	strh	r2, [r3, #0]
	MagData[1] = (int16_t)((float)magy * ((float)(_mag_adjust[1] - 128) / 256.0f + 1.0f));
 8002b12:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002b16:	ee07 3a90 	vmov	s15, r3
 8002b1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b1e:	4b1f      	ldr	r3, [pc, #124]	; (8002b9c <MPU9250_GetData+0x1a0>)
 8002b20:	785b      	ldrb	r3, [r3, #1]
 8002b22:	3b80      	subs	r3, #128	; 0x80
 8002b24:	ee07 3a90 	vmov	s15, r3
 8002b28:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002b2c:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8002ba0 <MPU9250_GetData+0x1a4>
 8002b30:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002b34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	3302      	adds	r3, #2
 8002b44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b48:	ee17 2a90 	vmov	r2, s15
 8002b4c:	b212      	sxth	r2, r2
 8002b4e:	801a      	strh	r2, [r3, #0]
	MagData[2] = (int16_t)((float)magz * ((float)(_mag_adjust[2] - 128) / 256.0f + 1.0f));
 8002b50:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002b54:	ee07 3a90 	vmov	s15, r3
 8002b58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b5c:	4b0f      	ldr	r3, [pc, #60]	; (8002b9c <MPU9250_GetData+0x1a0>)
 8002b5e:	789b      	ldrb	r3, [r3, #2]
 8002b60:	3b80      	subs	r3, #128	; 0x80
 8002b62:	ee07 3a90 	vmov	s15, r3
 8002b66:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002b6a:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 8002ba0 <MPU9250_GetData+0x1a4>
 8002b6e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002b72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	3304      	adds	r3, #4
 8002b82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b86:	ee17 2a90 	vmov	r2, s15
 8002b8a:	b212      	sxth	r2, r2
 8002b8c:	801a      	strh	r2, [r3, #0]
}
 8002b8e:	bf00      	nop
 8002b90:	3718      	adds	r7, #24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	20000dd8 	.word	0x20000dd8
 8002b9c:	20000df0 	.word	0x20000df0
 8002ba0:	43800000 	.word	0x43800000

08002ba4 <sdInit>:
	  {
		  statusRegister.SDCARD = SENSOR_OFF;
	  }
}
void sdInit(FATFS* fs)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
	  if (f_mount(fs, "", 0) == FR_OK)
 8002bac:	2200      	movs	r2, #0
 8002bae:	490d      	ldr	r1, [pc, #52]	; (8002be4 <sdInit+0x40>)
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f00d fc11 	bl	80103d8 <f_mount>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d109      	bne.n	8002bd0 <sdInit+0x2c>
	  {
		  statusRegister.SDCARD = SENSOR_OK;
 8002bbc:	4a0a      	ldr	r2, [pc, #40]	; (8002be8 <sdInit+0x44>)
 8002bbe:	7813      	ldrb	r3, [r2, #0]
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	f361 0302 	bfi	r3, r1, #0, #3
 8002bc6:	7013      	strb	r3, [r2, #0]
		  if (DEBUG)
			  printf("SDCard mounting success!\n");
 8002bc8:	4808      	ldr	r0, [pc, #32]	; (8002bec <sdInit+0x48>)
 8002bca:	f00e fb9b 	bl	8011304 <puts>
	  }else
	  {
		  statusRegister.SDCARD = SENSOR_INIT_FAIL;
		  //sdMountFailHandler();
	  }
}
 8002bce:	e004      	b.n	8002bda <sdInit+0x36>
		  statusRegister.SDCARD = SENSOR_INIT_FAIL;
 8002bd0:	4a05      	ldr	r2, [pc, #20]	; (8002be8 <sdInit+0x44>)
 8002bd2:	7813      	ldrb	r3, [r2, #0]
 8002bd4:	f043 0307 	orr.w	r3, r3, #7
 8002bd8:	7013      	strb	r3, [r2, #0]
}
 8002bda:	bf00      	nop
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	080173c0 	.word	0x080173c0
 8002be8:	20002084 	.word	0x20002084
 8002bec:	080173c4 	.word	0x080173c4

08002bf0 <openAllFiles>:
void openAllFiles()
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
	if(statusRegister.SDCARD == SENSOR_OK)
 8002bf4:	4b1c      	ldr	r3, [pc, #112]	; (8002c68 <openAllFiles+0x78>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d130      	bne.n	8002c64 <openAllFiles+0x74>
	{
		if(statusRegister.GYRO == SENSOR_OK){
 8002c02:	4b19      	ldr	r3, [pc, #100]	; (8002c68 <openAllFiles+0x78>)
 8002c04:	881b      	ldrh	r3, [r3, #0]
 8002c06:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	2b40      	cmp	r3, #64	; 0x40
 8002c0e:	d106      	bne.n	8002c1e <openAllFiles+0x2e>
			openFile(gyro.File, gyro.path, FILE_DEFAULT_MODE);
 8002c10:	4b16      	ldr	r3, [pc, #88]	; (8002c6c <openAllFiles+0x7c>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2232      	movs	r2, #50	; 0x32
 8002c16:	4916      	ldr	r1, [pc, #88]	; (8002c70 <openAllFiles+0x80>)
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f000 f929 	bl	8002e70 <openFile>
		}
		if(statusRegister.MLXLF == SENSOR_OK){
 8002c1e:	4b12      	ldr	r3, [pc, #72]	; (8002c68 <openAllFiles+0x78>)
 8002c20:	785b      	ldrb	r3, [r3, #1]
 8002c22:	f003 030e 	and.w	r3, r3, #14
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d106      	bne.n	8002c3a <openAllFiles+0x4a>
			openFile(mlxLFSensor.File, mlxLFSensor.path, FILE_DEFAULT_MODE);
 8002c2c:	4b11      	ldr	r3, [pc, #68]	; (8002c74 <openAllFiles+0x84>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2232      	movs	r2, #50	; 0x32
 8002c32:	4911      	ldr	r1, [pc, #68]	; (8002c78 <openAllFiles+0x88>)
 8002c34:	4618      	mov	r0, r3
 8002c36:	f000 f91b 	bl	8002e70 <openFile>
		}
		if(statusRegister.VSSLF == SENSOR_OK){
 8002c3a:	4b0b      	ldr	r3, [pc, #44]	; (8002c68 <openAllFiles+0x78>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 8002c42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c46:	d106      	bne.n	8002c56 <openAllFiles+0x66>
			openFile(absLFSensor.File, absLFSensor.path, FILE_DEFAULT_MODE);
 8002c48:	4b0c      	ldr	r3, [pc, #48]	; (8002c7c <openAllFiles+0x8c>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2232      	movs	r2, #50	; 0x32
 8002c4e:	490c      	ldr	r1, [pc, #48]	; (8002c80 <openAllFiles+0x90>)
 8002c50:	4618      	mov	r0, r3
 8002c52:	f000 f90d 	bl	8002e70 <openFile>
		}
		if(statusRegister.DamperLF == SENSOR_OK){

		}
		openFile(gpsSensor.File,gpsSensor.path,FILE_DEFAULT_MODE);
 8002c56:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <openAllFiles+0x94>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2232      	movs	r2, #50	; 0x32
 8002c5c:	490a      	ldr	r1, [pc, #40]	; (8002c88 <openAllFiles+0x98>)
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f000 f906 	bl	8002e70 <openFile>
	}
}
 8002c64:	bf00      	nop
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	20002084 	.word	0x20002084
 8002c6c:	20005f90 	.word	0x20005f90
 8002c70:	20005f94 	.word	0x20005f94
 8002c74:	20002228 	.word	0x20002228
 8002c78:	2000222c 	.word	0x2000222c
 8002c7c:	20006038 	.word	0x20006038
 8002c80:	2000603c 	.word	0x2000603c
 8002c84:	200060a0 	.word	0x200060a0
 8002c88:	200060a4 	.word	0x200060a4

08002c8c <createHeaders>:
int createHeaders(FIL * file,char * path)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08c      	sub	sp, #48	; 0x30
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
	FRESULT fres;
	UINT bytesWritten = 0;
 8002c96:	2300      	movs	r3, #0
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24

	fres = f_write(file,"timestamp,",strlen("timestamp,"),&bytesWritten);
 8002c9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c9e:	220a      	movs	r2, #10
 8002ca0:	4963      	ldr	r1, [pc, #396]	; (8002e30 <createHeaders+0x1a4>)
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f00d fdaa 	bl	80107fc <f_write>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if(fres != FR_OK){
 8002cae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d006      	beq.n	8002cc4 <createHeaders+0x38>
		printf("Error while creating %s header",path);
 8002cb6:	6839      	ldr	r1, [r7, #0]
 8002cb8:	485e      	ldr	r0, [pc, #376]	; (8002e34 <createHeaders+0x1a8>)
 8002cba:	f00e fac3 	bl	8011244 <printf>
		return -1;
 8002cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc2:	e0b1      	b.n	8002e28 <createHeaders+0x19c>
	}

	if(strstr(path,"GYRO") != NULL){
 8002cc4:	495c      	ldr	r1, [pc, #368]	; (8002e38 <createHeaders+0x1ac>)
 8002cc6:	6838      	ldr	r0, [r7, #0]
 8002cc8:	f00e fb6f 	bl	80113aa <strstr>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00a      	beq.n	8002ce8 <createHeaders+0x5c>
		fres = f_write(file, "gyro_x,gyro_y,gyro_z,acc_x,acc_y,acc_z\r\n", strlen("gyro_x,gyro_y,gyro_z,acc_x,acc_y,acc_z\r\n"), &bytesWritten);
 8002cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cd6:	2228      	movs	r2, #40	; 0x28
 8002cd8:	4958      	ldr	r1, [pc, #352]	; (8002e3c <createHeaders+0x1b0>)
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f00d fd8e 	bl	80107fc <f_write>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002ce6:	e089      	b.n	8002dfc <createHeaders+0x170>

	}else if(strstr(path,"MLX")!= NULL){
 8002ce8:	4955      	ldr	r1, [pc, #340]	; (8002e40 <createHeaders+0x1b4>)
 8002cea:	6838      	ldr	r0, [r7, #0]
 8002cec:	f00e fb5d 	bl	80113aa <strstr>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d049      	beq.n	8002d8a <createHeaders+0xfe>
		char headerData[25];
		fres =  f_write(file, "ID,", strlen("ID,"), &bytesWritten);
 8002cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cfa:	2203      	movs	r2, #3
 8002cfc:	4951      	ldr	r1, [pc, #324]	; (8002e44 <createHeaders+0x1b8>)
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f00d fd7c 	bl	80107fc <f_write>
 8002d04:	4603      	mov	r3, r0
 8002d06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for(int i=0;i<784;i++){
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d0e:	e037      	b.n	8002d80 <createHeaders+0xf4>
			sprintf(headerData,"float_%d,", i);
 8002d10:	f107 0308 	add.w	r3, r7, #8
 8002d14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d16:	494c      	ldr	r1, [pc, #304]	; (8002e48 <createHeaders+0x1bc>)
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f00e fb0b 	bl	8011334 <sprintf>
			fres = fres | f_write(file, headerData, strlen(headerData), &bytesWritten);
 8002d1e:	f107 0308 	add.w	r3, r7, #8
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fd fa8c 	bl	8000240 <strlen>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d2e:	f107 0108 	add.w	r1, r7, #8
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f00d fd62 	bl	80107fc <f_write>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d40:	4313      	orrs	r3, r2
 8002d42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			sprintf(headerData,"id,");
 8002d46:	f107 0308 	add.w	r3, r7, #8
 8002d4a:	4940      	ldr	r1, [pc, #256]	; (8002e4c <createHeaders+0x1c0>)
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f00e faf1 	bl	8011334 <sprintf>
			fres =  fres | f_write(file, headerData, strlen(headerData), &bytesWritten);
 8002d52:	f107 0308 	add.w	r3, r7, #8
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7fd fa72 	bl	8000240 <strlen>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d62:	f107 0108 	add.w	r1, r7, #8
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f00d fd48 	bl	80107fc <f_write>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	461a      	mov	r2, r3
 8002d70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d74:	4313      	orrs	r3, r2
 8002d76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for(int i=0;i<784;i++){
 8002d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d82:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8002d86:	dbc3      	blt.n	8002d10 <createHeaders+0x84>
 8002d88:	e038      	b.n	8002dfc <createHeaders+0x170>
		}

	}else if(strstr(path,"ABS")!= NULL){
 8002d8a:	4931      	ldr	r1, [pc, #196]	; (8002e50 <createHeaders+0x1c4>)
 8002d8c:	6838      	ldr	r0, [r7, #0]
 8002d8e:	f00e fb0c 	bl	80113aa <strstr>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00a      	beq.n	8002dae <createHeaders+0x122>
		fres = f_write(file, "ID,speed\r\n", strlen("ID,speed\r\n"), &bytesWritten);
 8002d98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d9c:	220a      	movs	r2, #10
 8002d9e:	492d      	ldr	r1, [pc, #180]	; (8002e54 <createHeaders+0x1c8>)
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f00d fd2b 	bl	80107fc <f_write>
 8002da6:	4603      	mov	r3, r0
 8002da8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002dac:	e026      	b.n	8002dfc <createHeaders+0x170>
	}else if(strstr(path,"DAMP")!= NULL){
 8002dae:	492a      	ldr	r1, [pc, #168]	; (8002e58 <createHeaders+0x1cc>)
 8002db0:	6838      	ldr	r0, [r7, #0]
 8002db2:	f00e fafa 	bl	80113aa <strstr>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00a      	beq.n	8002dd2 <createHeaders+0x146>
		fres = f_write(file, "ID,length\r\n", strlen("ID,length\r\n"), &bytesWritten);
 8002dbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dc0:	220b      	movs	r2, #11
 8002dc2:	4926      	ldr	r1, [pc, #152]	; (8002e5c <createHeaders+0x1d0>)
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f00d fd19 	bl	80107fc <f_write>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002dd0:	e014      	b.n	8002dfc <createHeaders+0x170>
	}else if(strstr(path,"WHEEL")!= NULL){
 8002dd2:	4923      	ldr	r1, [pc, #140]	; (8002e60 <createHeaders+0x1d4>)
 8002dd4:	6838      	ldr	r0, [r7, #0]
 8002dd6:	f00e fae8 	bl	80113aa <strstr>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00a      	beq.n	8002df6 <createHeaders+0x16a>
		fres = f_write(file, "ID,angle\r\n", strlen("ID,angle\r\n"), &bytesWritten);
 8002de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002de4:	220a      	movs	r2, #10
 8002de6:	491f      	ldr	r1, [pc, #124]	; (8002e64 <createHeaders+0x1d8>)
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f00d fd07 	bl	80107fc <f_write>
 8002dee:	4603      	mov	r3, r0
 8002df0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002df4:	e002      	b.n	8002dfc <createHeaders+0x170>
	}else
	{
		return -2;
 8002df6:	f06f 0301 	mvn.w	r3, #1
 8002dfa:	e015      	b.n	8002e28 <createHeaders+0x19c>
	}

	if(fres != FR_OK){
 8002dfc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d006      	beq.n	8002e12 <createHeaders+0x186>
		printf("Error while creating %s header\n",path);
 8002e04:	6839      	ldr	r1, [r7, #0]
 8002e06:	4818      	ldr	r0, [pc, #96]	; (8002e68 <createHeaders+0x1dc>)
 8002e08:	f00e fa1c 	bl	8011244 <printf>
		return -1;
 8002e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e10:	e00a      	b.n	8002e28 <createHeaders+0x19c>
	}
	fres =  f_write(file, "\n", strlen("\n"), &bytesWritten);
 8002e12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e16:	2201      	movs	r2, #1
 8002e18:	4914      	ldr	r1, [pc, #80]	; (8002e6c <createHeaders+0x1e0>)
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f00d fcee 	bl	80107fc <f_write>
 8002e20:	4603      	mov	r3, r0
 8002e22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	return 1;
 8002e26:	2301      	movs	r3, #1

}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3730      	adds	r7, #48	; 0x30
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	080173e0 	.word	0x080173e0
 8002e34:	080173ec 	.word	0x080173ec
 8002e38:	0801740c 	.word	0x0801740c
 8002e3c:	08017414 	.word	0x08017414
 8002e40:	08017440 	.word	0x08017440
 8002e44:	08017444 	.word	0x08017444
 8002e48:	08017448 	.word	0x08017448
 8002e4c:	08017454 	.word	0x08017454
 8002e50:	08017458 	.word	0x08017458
 8002e54:	0801745c 	.word	0x0801745c
 8002e58:	08017468 	.word	0x08017468
 8002e5c:	08017470 	.word	0x08017470
 8002e60:	0801747c 	.word	0x0801747c
 8002e64:	08017484 	.word	0x08017484
 8002e68:	08017490 	.word	0x08017490
 8002e6c:	080174b0 	.word	0x080174b0

08002e70 <openFile>:


int openFile(FIL * file, char * path, BYTE mode)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08c      	sub	sp, #48	; 0x30
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	71fb      	strb	r3, [r7, #7]
	FILINFO fInfo;
	FRESULT fres = f_stat(path, &fInfo);
 8002e7e:	f107 0310 	add.w	r3, r7, #16
 8002e82:	4619      	mov	r1, r3
 8002e84:	68b8      	ldr	r0, [r7, #8]
 8002e86:	f00d fecb 	bl	8010c20 <f_stat>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if(fres == FR_OK)
 8002e90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d114      	bne.n	8002ec2 <openFile+0x52>
	{

		fres = f_open(file, _TEXT(path), mode);
 8002e98:	79fb      	ldrb	r3, [r7, #7]
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	68b9      	ldr	r1, [r7, #8]
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f00d fae0 	bl	8010464 <f_open>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if(fres == FR_OK)
 8002eaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d104      	bne.n	8002ebc <openFile+0x4c>
		{
			printf("Opening file: %s succeeded\n", path);
 8002eb2:	68b9      	ldr	r1, [r7, #8]
 8002eb4:	4818      	ldr	r0, [pc, #96]	; (8002f18 <openFile+0xa8>)
 8002eb6:	f00e f9c5 	bl	8011244 <printf>
 8002eba:	e025      	b.n	8002f08 <openFile+0x98>
		}else
		{
			return -1;
 8002ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8002ec0:	e026      	b.n	8002f10 <openFile+0xa0>
		}
	}else if(fres == FR_NO_FILE)
 8002ec2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002ec6:	2b04      	cmp	r3, #4
 8002ec8:	d11e      	bne.n	8002f08 <openFile+0x98>
	{
		fres = f_open(file, _TEXT(path), mode);
 8002eca:	79fb      	ldrb	r3, [r7, #7]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	68b9      	ldr	r1, [r7, #8]
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f00d fac7 	bl	8010464 <f_open>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if(fres == FR_OK)
 8002edc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10e      	bne.n	8002f02 <openFile+0x92>
		{
			int res = createHeaders(file,path);
 8002ee4:	68b9      	ldr	r1, [r7, #8]
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f7ff fed0 	bl	8002c8c <createHeaders>
 8002eec:	62b8      	str	r0, [r7, #40]	; 0x28
			if(res != 1)
 8002eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d001      	beq.n	8002ef8 <openFile+0x88>
			{
				return res;
 8002ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef6:	e00b      	b.n	8002f10 <openFile+0xa0>
			}

			printf("No file: %s, created new\n", path);
 8002ef8:	68b9      	ldr	r1, [r7, #8]
 8002efa:	4808      	ldr	r0, [pc, #32]	; (8002f1c <openFile+0xac>)
 8002efc:	f00e f9a2 	bl	8011244 <printf>
 8002f00:	e002      	b.n	8002f08 <openFile+0x98>

		}else
		{
			return -1;
 8002f02:	f04f 33ff 	mov.w	r3, #4294967295
 8002f06:	e003      	b.n	8002f10 <openFile+0xa0>
		}
	}
	f_sync(file);
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f00d fe0b 	bl	8010b24 <f_sync>
	return 1;
 8002f0e:	2301      	movs	r3, #1


}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3730      	adds	r7, #48	; 0x30
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	080174b4 	.word	0x080174b4
 8002f1c:	080174d0 	.word	0x080174d0

08002f20 <gpsSaveData>:
void gpsSaveData(GPSSensor * sens)
{
 8002f20:	b5b0      	push	{r4, r5, r7, lr}
 8002f22:	b0c4      	sub	sp, #272	; 0x110
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002f2a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002f2e:	6018      	str	r0, [r3, #0]
	char dataBuffer[255];
	int writedBytes;
	FRESULT status = 0;
 8002f30:	2300      	movs	r3, #0
 8002f32:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	//Save time stamp
	sprintf(dataBuffer, "%d,", HAL_GetTick());
 8002f36:	f002 fb0f 	bl	8005558 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	f107 0310 	add.w	r3, r7, #16
 8002f40:	4939      	ldr	r1, [pc, #228]	; (8003028 <gpsSaveData+0x108>)
 8002f42:	4618      	mov	r0, r3
 8002f44:	f00e f9f6 	bl	8011334 <sprintf>
	status = f_write(sens->File, dataBuffer, strlen(dataBuffer), &writedBytes);
 8002f48:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002f4c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681c      	ldr	r4, [r3, #0]
 8002f54:	f107 0310 	add.w	r3, r7, #16
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7fd f971 	bl	8000240 <strlen>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	f107 030c 	add.w	r3, r7, #12
 8002f64:	f107 0110 	add.w	r1, r7, #16
 8002f68:	4620      	mov	r0, r4
 8002f6a:	f00d fc47 	bl	80107fc <f_write>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	status = status | f_write(sens->File,sens->data,strlen(sens->data),&writedBytes);
 8002f74:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002f78:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681c      	ldr	r4, [r3, #0]
 8002f80:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002f84:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f503 7590 	add.w	r5, r3, #288	; 0x120
 8002f8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002f92:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7fd f94f 	bl	8000240 <strlen>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	f107 030c 	add.w	r3, r7, #12
 8002fa8:	4629      	mov	r1, r5
 8002faa:	4620      	mov	r0, r4
 8002fac:	f00d fc26 	bl	80107fc <f_write>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	sprintf(dataBuffer, "\r\n ");
 8002fbe:	f107 0310 	add.w	r3, r7, #16
 8002fc2:	491a      	ldr	r1, [pc, #104]	; (800302c <gpsSaveData+0x10c>)
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f00e f9b5 	bl	8011334 <sprintf>
	status = status | f_write(sens->File, dataBuffer, strlen(dataBuffer), &writedBytes);
 8002fca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002fce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681c      	ldr	r4, [r3, #0]
 8002fd6:	f107 0310 	add.w	r3, r7, #16
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fd f930 	bl	8000240 <strlen>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	f107 030c 	add.w	r3, r7, #12
 8002fe6:	f107 0110 	add.w	r1, r7, #16
 8002fea:	4620      	mov	r0, r4
 8002fec:	f00d fc06 	bl	80107fc <f_write>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	sens->dataReady = 0;
 8002ffe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003002:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2200      	movs	r2, #0
 800300a:	619a      	str	r2, [r3, #24]
	f_sync(sens->File);
 800300c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003010:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4618      	mov	r0, r3
 800301a:	f00d fd83 	bl	8010b24 <f_sync>
}
 800301e:	bf00      	nop
 8003020:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8003024:	46bd      	mov	sp, r7
 8003026:	bdb0      	pop	{r4, r5, r7, pc}
 8003028:	080174ec 	.word	0x080174ec
 800302c:	080174f0 	.word	0x080174f0

08003030 <gyroSaveData>:
void gyroSaveData(GyroSensor* sens)
{
 8003030:	b590      	push	{r4, r7, lr}
 8003032:	b0c7      	sub	sp, #284	; 0x11c
 8003034:	af00      	add	r7, sp, #0
 8003036:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800303a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800303e:	6018      	str	r0, [r3, #0]
	char dataBuffer[255];
	int writedBytes;
	FRESULT status = 0;
 8003040:	2300      	movs	r3, #0
 8003042:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	//Save time stamp
	sprintf(dataBuffer, "%d,", HAL_GetTick());
 8003046:	f002 fa87 	bl	8005558 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	f107 030c 	add.w	r3, r7, #12
 8003050:	496c      	ldr	r1, [pc, #432]	; (8003204 <gyroSaveData+0x1d4>)
 8003052:	4618      	mov	r0, r3
 8003054:	f00e f96e 	bl	8011334 <sprintf>
	status = f_write(sens->File, dataBuffer, strlen(dataBuffer), &writedBytes);
 8003058:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800305c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681c      	ldr	r4, [r3, #0]
 8003064:	f107 030c 	add.w	r3, r7, #12
 8003068:	4618      	mov	r0, r3
 800306a:	f7fd f8e9 	bl	8000240 <strlen>
 800306e:	4602      	mov	r2, r0
 8003070:	f107 0308 	add.w	r3, r7, #8
 8003074:	f107 010c 	add.w	r1, r7, #12
 8003078:	4620      	mov	r0, r4
 800307a:	f00d fbbf 	bl	80107fc <f_write>
 800307e:	4603      	mov	r3, r0
 8003080:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	for (int i = 0; i < 3; i++)
 8003084:	2300      	movs	r3, #0
 8003086:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800308a:	e02f      	b.n	80030ec <gyroSaveData+0xbc>
	{
		sprintf(dataBuffer, "%f,", sens->data.gyro_data_calc[i]);
 800308c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003090:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800309a:	3308      	adds	r3, #8
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	4413      	add	r3, r2
 80030a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a4:	f107 000c 	add.w	r0, r7, #12
 80030a8:	4957      	ldr	r1, [pc, #348]	; (8003208 <gyroSaveData+0x1d8>)
 80030aa:	f00e f943 	bl	8011334 <sprintf>
		status = status | f_write(sens->File, dataBuffer, strlen(dataBuffer), &writedBytes);
 80030ae:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80030b2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681c      	ldr	r4, [r3, #0]
 80030ba:	f107 030c 	add.w	r3, r7, #12
 80030be:	4618      	mov	r0, r3
 80030c0:	f7fd f8be 	bl	8000240 <strlen>
 80030c4:	4602      	mov	r2, r0
 80030c6:	f107 0308 	add.w	r3, r7, #8
 80030ca:	f107 010c 	add.w	r1, r7, #12
 80030ce:	4620      	mov	r0, r4
 80030d0:	f00d fb94 	bl	80107fc <f_write>
 80030d4:	4603      	mov	r3, r0
 80030d6:	461a      	mov	r2, r3
 80030d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80030dc:	4313      	orrs	r3, r2
 80030de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	for (int i = 0; i < 3; i++)
 80030e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80030e6:	3301      	adds	r3, #1
 80030e8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80030ec:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	ddcb      	ble.n	800308c <gyroSaveData+0x5c>

	}
	for (int i = 0; i < 3; i++)
 80030f4:	2300      	movs	r3, #0
 80030f6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80030fa:	e02f      	b.n	800315c <gyroSaveData+0x12c>
	{
		sprintf(dataBuffer, "%f,", sens->data.acc_data_calc[i]);
 80030fc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003100:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800310a:	3305      	adds	r3, #5
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	4413      	add	r3, r2
 8003110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003114:	f107 000c 	add.w	r0, r7, #12
 8003118:	493b      	ldr	r1, [pc, #236]	; (8003208 <gyroSaveData+0x1d8>)
 800311a:	f00e f90b 	bl	8011334 <sprintf>
		status = status | f_write(sens->File, dataBuffer, strlen(dataBuffer), &writedBytes);
 800311e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003122:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681c      	ldr	r4, [r3, #0]
 800312a:	f107 030c 	add.w	r3, r7, #12
 800312e:	4618      	mov	r0, r3
 8003130:	f7fd f886 	bl	8000240 <strlen>
 8003134:	4602      	mov	r2, r0
 8003136:	f107 0308 	add.w	r3, r7, #8
 800313a:	f107 010c 	add.w	r1, r7, #12
 800313e:	4620      	mov	r0, r4
 8003140:	f00d fb5c 	bl	80107fc <f_write>
 8003144:	4603      	mov	r3, r0
 8003146:	461a      	mov	r2, r3
 8003148:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800314c:	4313      	orrs	r3, r2
 800314e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	for (int i = 0; i < 3; i++)
 8003152:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003156:	3301      	adds	r3, #1
 8003158:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800315c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003160:	2b02      	cmp	r3, #2
 8003162:	ddcb      	ble.n	80030fc <gyroSaveData+0xcc>
	}

	sprintf(dataBuffer, "\r\n ");
 8003164:	f107 030c 	add.w	r3, r7, #12
 8003168:	4928      	ldr	r1, [pc, #160]	; (800320c <gyroSaveData+0x1dc>)
 800316a:	4618      	mov	r0, r3
 800316c:	f00e f8e2 	bl	8011334 <sprintf>

	status = status | f_write(sens->File, dataBuffer, strlen(dataBuffer), &writedBytes);
 8003170:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003174:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681c      	ldr	r4, [r3, #0]
 800317c:	f107 030c 	add.w	r3, r7, #12
 8003180:	4618      	mov	r0, r3
 8003182:	f7fd f85d 	bl	8000240 <strlen>
 8003186:	4602      	mov	r2, r0
 8003188:	f107 0308 	add.w	r3, r7, #8
 800318c:	f107 010c 	add.w	r1, r7, #12
 8003190:	4620      	mov	r0, r4
 8003192:	f00d fb33 	bl	80107fc <f_write>
 8003196:	4603      	mov	r3, r0
 8003198:	461a      	mov	r2, r3
 800319a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800319e:	4313      	orrs	r3, r2
 80031a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	if(status != 0 && statusRegister.SDCARD < SENSOR_FAIL && statusRegister.SDCARD > SENSOR_OFF)
 80031a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d01c      	beq.n	80031e6 <gyroSaveData+0x1b6>
 80031ac:	4b18      	ldr	r3, [pc, #96]	; (8003210 <gyroSaveData+0x1e0>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b03      	cmp	r3, #3
 80031b8:	d815      	bhi.n	80031e6 <gyroSaveData+0x1b6>
 80031ba:	4b15      	ldr	r3, [pc, #84]	; (8003210 <gyroSaveData+0x1e0>)
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00e      	beq.n	80031e6 <gyroSaveData+0x1b6>
	{
		statusRegister.SDCARD += 1;
 80031c8:	4b11      	ldr	r3, [pc, #68]	; (8003210 <gyroSaveData+0x1e0>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	3301      	adds	r3, #1
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	f003 0307 	and.w	r3, r3, #7
 80031da:	b2d9      	uxtb	r1, r3
 80031dc:	4a0c      	ldr	r2, [pc, #48]	; (8003210 <gyroSaveData+0x1e0>)
 80031de:	7813      	ldrb	r3, [r2, #0]
 80031e0:	f361 0302 	bfi	r3, r1, #0, #3
 80031e4:	7013      	strb	r3, [r2, #0]
	}
	f_sync(sens->File);
 80031e6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80031ea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f00d fc96 	bl	8010b24 <f_sync>

}
 80031f8:	bf00      	nop
 80031fa:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd90      	pop	{r4, r7, pc}
 8003202:	bf00      	nop
 8003204:	080174ec 	.word	0x080174ec
 8003208:	080174f4 	.word	0x080174f4
 800320c:	080174f0 	.word	0x080174f0
 8003210:	20002084 	.word	0x20002084

08003214 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800321a:	463b      	mov	r3, r7
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	605a      	str	r2, [r3, #4]
 8003222:	609a      	str	r2, [r3, #8]
 8003224:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003226:	4b21      	ldr	r3, [pc, #132]	; (80032ac <MX_ADC1_Init+0x98>)
 8003228:	4a21      	ldr	r2, [pc, #132]	; (80032b0 <MX_ADC1_Init+0x9c>)
 800322a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800322c:	4b1f      	ldr	r3, [pc, #124]	; (80032ac <MX_ADC1_Init+0x98>)
 800322e:	2200      	movs	r2, #0
 8003230:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003232:	4b1e      	ldr	r3, [pc, #120]	; (80032ac <MX_ADC1_Init+0x98>)
 8003234:	2200      	movs	r2, #0
 8003236:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003238:	4b1c      	ldr	r3, [pc, #112]	; (80032ac <MX_ADC1_Init+0x98>)
 800323a:	2200      	movs	r2, #0
 800323c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800323e:	4b1b      	ldr	r3, [pc, #108]	; (80032ac <MX_ADC1_Init+0x98>)
 8003240:	2200      	movs	r2, #0
 8003242:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003244:	4b19      	ldr	r3, [pc, #100]	; (80032ac <MX_ADC1_Init+0x98>)
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800324c:	4b17      	ldr	r3, [pc, #92]	; (80032ac <MX_ADC1_Init+0x98>)
 800324e:	2200      	movs	r2, #0
 8003250:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003252:	4b16      	ldr	r3, [pc, #88]	; (80032ac <MX_ADC1_Init+0x98>)
 8003254:	4a17      	ldr	r2, [pc, #92]	; (80032b4 <MX_ADC1_Init+0xa0>)
 8003256:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003258:	4b14      	ldr	r3, [pc, #80]	; (80032ac <MX_ADC1_Init+0x98>)
 800325a:	2200      	movs	r2, #0
 800325c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800325e:	4b13      	ldr	r3, [pc, #76]	; (80032ac <MX_ADC1_Init+0x98>)
 8003260:	2201      	movs	r2, #1
 8003262:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003264:	4b11      	ldr	r3, [pc, #68]	; (80032ac <MX_ADC1_Init+0x98>)
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800326c:	4b0f      	ldr	r3, [pc, #60]	; (80032ac <MX_ADC1_Init+0x98>)
 800326e:	2201      	movs	r2, #1
 8003270:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003272:	480e      	ldr	r0, [pc, #56]	; (80032ac <MX_ADC1_Init+0x98>)
 8003274:	f002 f9a0 	bl	80055b8 <HAL_ADC_Init>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800327e:	f001 f86f 	bl	8004360 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003282:	2300      	movs	r3, #0
 8003284:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003286:	2301      	movs	r3, #1
 8003288:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800328a:	2300      	movs	r3, #0
 800328c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800328e:	463b      	mov	r3, r7
 8003290:	4619      	mov	r1, r3
 8003292:	4806      	ldr	r0, [pc, #24]	; (80032ac <MX_ADC1_Init+0x98>)
 8003294:	f002 fb02 	bl	800589c <HAL_ADC_ConfigChannel>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800329e:	f001 f85f 	bl	8004360 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80032a2:	bf00      	nop
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	20000df4 	.word	0x20000df4
 80032b0:	40012000 	.word	0x40012000
 80032b4:	0f000001 	.word	0x0f000001

080032b8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80032be:	463b      	mov	r3, r7
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	605a      	str	r2, [r3, #4]
 80032c6:	609a      	str	r2, [r3, #8]
 80032c8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80032ca:	4b21      	ldr	r3, [pc, #132]	; (8003350 <MX_ADC2_Init+0x98>)
 80032cc:	4a21      	ldr	r2, [pc, #132]	; (8003354 <MX_ADC2_Init+0x9c>)
 80032ce:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80032d0:	4b1f      	ldr	r3, [pc, #124]	; (8003350 <MX_ADC2_Init+0x98>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80032d6:	4b1e      	ldr	r3, [pc, #120]	; (8003350 <MX_ADC2_Init+0x98>)
 80032d8:	2200      	movs	r2, #0
 80032da:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80032dc:	4b1c      	ldr	r3, [pc, #112]	; (8003350 <MX_ADC2_Init+0x98>)
 80032de:	2200      	movs	r2, #0
 80032e0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80032e2:	4b1b      	ldr	r3, [pc, #108]	; (8003350 <MX_ADC2_Init+0x98>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80032e8:	4b19      	ldr	r3, [pc, #100]	; (8003350 <MX_ADC2_Init+0x98>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80032f0:	4b17      	ldr	r3, [pc, #92]	; (8003350 <MX_ADC2_Init+0x98>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80032f6:	4b16      	ldr	r3, [pc, #88]	; (8003350 <MX_ADC2_Init+0x98>)
 80032f8:	4a17      	ldr	r2, [pc, #92]	; (8003358 <MX_ADC2_Init+0xa0>)
 80032fa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80032fc:	4b14      	ldr	r3, [pc, #80]	; (8003350 <MX_ADC2_Init+0x98>)
 80032fe:	2200      	movs	r2, #0
 8003300:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8003302:	4b13      	ldr	r3, [pc, #76]	; (8003350 <MX_ADC2_Init+0x98>)
 8003304:	2201      	movs	r2, #1
 8003306:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8003308:	4b11      	ldr	r3, [pc, #68]	; (8003350 <MX_ADC2_Init+0x98>)
 800330a:	2200      	movs	r2, #0
 800330c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003310:	4b0f      	ldr	r3, [pc, #60]	; (8003350 <MX_ADC2_Init+0x98>)
 8003312:	2201      	movs	r2, #1
 8003314:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003316:	480e      	ldr	r0, [pc, #56]	; (8003350 <MX_ADC2_Init+0x98>)
 8003318:	f002 f94e 	bl	80055b8 <HAL_ADC_Init>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8003322:	f001 f81d 	bl	8004360 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003326:	2301      	movs	r3, #1
 8003328:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800332a:	2301      	movs	r3, #1
 800332c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800332e:	2300      	movs	r3, #0
 8003330:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003332:	463b      	mov	r3, r7
 8003334:	4619      	mov	r1, r3
 8003336:	4806      	ldr	r0, [pc, #24]	; (8003350 <MX_ADC2_Init+0x98>)
 8003338:	f002 fab0 	bl	800589c <HAL_ADC_ConfigChannel>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8003342:	f001 f80d 	bl	8004360 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003346:	bf00      	nop
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	20000e3c 	.word	0x20000e3c
 8003354:	40012100 	.word	0x40012100
 8003358:	0f000001 	.word	0x0f000001

0800335c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003362:	463b      	mov	r3, r7
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	605a      	str	r2, [r3, #4]
 800336a:	609a      	str	r2, [r3, #8]
 800336c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800336e:	4b21      	ldr	r3, [pc, #132]	; (80033f4 <MX_ADC3_Init+0x98>)
 8003370:	4a21      	ldr	r2, [pc, #132]	; (80033f8 <MX_ADC3_Init+0x9c>)
 8003372:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003374:	4b1f      	ldr	r3, [pc, #124]	; (80033f4 <MX_ADC3_Init+0x98>)
 8003376:	2200      	movs	r2, #0
 8003378:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800337a:	4b1e      	ldr	r3, [pc, #120]	; (80033f4 <MX_ADC3_Init+0x98>)
 800337c:	2200      	movs	r2, #0
 800337e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003380:	4b1c      	ldr	r3, [pc, #112]	; (80033f4 <MX_ADC3_Init+0x98>)
 8003382:	2200      	movs	r2, #0
 8003384:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8003386:	4b1b      	ldr	r3, [pc, #108]	; (80033f4 <MX_ADC3_Init+0x98>)
 8003388:	2200      	movs	r2, #0
 800338a:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800338c:	4b19      	ldr	r3, [pc, #100]	; (80033f4 <MX_ADC3_Init+0x98>)
 800338e:	2200      	movs	r2, #0
 8003390:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003394:	4b17      	ldr	r3, [pc, #92]	; (80033f4 <MX_ADC3_Init+0x98>)
 8003396:	2200      	movs	r2, #0
 8003398:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800339a:	4b16      	ldr	r3, [pc, #88]	; (80033f4 <MX_ADC3_Init+0x98>)
 800339c:	4a17      	ldr	r2, [pc, #92]	; (80033fc <MX_ADC3_Init+0xa0>)
 800339e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80033a0:	4b14      	ldr	r3, [pc, #80]	; (80033f4 <MX_ADC3_Init+0x98>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80033a6:	4b13      	ldr	r3, [pc, #76]	; (80033f4 <MX_ADC3_Init+0x98>)
 80033a8:	2201      	movs	r2, #1
 80033aa:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80033ac:	4b11      	ldr	r3, [pc, #68]	; (80033f4 <MX_ADC3_Init+0x98>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80033b4:	4b0f      	ldr	r3, [pc, #60]	; (80033f4 <MX_ADC3_Init+0x98>)
 80033b6:	2201      	movs	r2, #1
 80033b8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80033ba:	480e      	ldr	r0, [pc, #56]	; (80033f4 <MX_ADC3_Init+0x98>)
 80033bc:	f002 f8fc 	bl	80055b8 <HAL_ADC_Init>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 80033c6:	f000 ffcb 	bl	8004360 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80033ca:	2309      	movs	r3, #9
 80033cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80033ce:	2301      	movs	r3, #1
 80033d0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80033d2:	2307      	movs	r3, #7
 80033d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80033d6:	463b      	mov	r3, r7
 80033d8:	4619      	mov	r1, r3
 80033da:	4806      	ldr	r0, [pc, #24]	; (80033f4 <MX_ADC3_Init+0x98>)
 80033dc:	f002 fa5e 	bl	800589c <HAL_ADC_ConfigChannel>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 80033e6:	f000 ffbb 	bl	8004360 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80033ea:	bf00      	nop
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	20000e84 	.word	0x20000e84
 80033f8:	40012200 	.word	0x40012200
 80033fc:	0f000001 	.word	0x0f000001

08003400 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b08e      	sub	sp, #56	; 0x38
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003408:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	605a      	str	r2, [r3, #4]
 8003412:	609a      	str	r2, [r3, #8]
 8003414:	60da      	str	r2, [r3, #12]
 8003416:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a57      	ldr	r2, [pc, #348]	; (800357c <HAL_ADC_MspInit+0x17c>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d12c      	bne.n	800347c <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003422:	4b57      	ldr	r3, [pc, #348]	; (8003580 <HAL_ADC_MspInit+0x180>)
 8003424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003426:	4a56      	ldr	r2, [pc, #344]	; (8003580 <HAL_ADC_MspInit+0x180>)
 8003428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800342c:	6453      	str	r3, [r2, #68]	; 0x44
 800342e:	4b54      	ldr	r3, [pc, #336]	; (8003580 <HAL_ADC_MspInit+0x180>)
 8003430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003436:	623b      	str	r3, [r7, #32]
 8003438:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800343a:	4b51      	ldr	r3, [pc, #324]	; (8003580 <HAL_ADC_MspInit+0x180>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	4a50      	ldr	r2, [pc, #320]	; (8003580 <HAL_ADC_MspInit+0x180>)
 8003440:	f043 0301 	orr.w	r3, r3, #1
 8003444:	6313      	str	r3, [r2, #48]	; 0x30
 8003446:	4b4e      	ldr	r3, [pc, #312]	; (8003580 <HAL_ADC_MspInit+0x180>)
 8003448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	61fb      	str	r3, [r7, #28]
 8003450:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003452:	2301      	movs	r3, #1
 8003454:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003456:	2303      	movs	r3, #3
 8003458:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345a:	2300      	movs	r3, #0
 800345c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800345e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003462:	4619      	mov	r1, r3
 8003464:	4847      	ldr	r0, [pc, #284]	; (8003584 <HAL_ADC_MspInit+0x184>)
 8003466:	f003 fa97 	bl	8006998 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800346a:	2200      	movs	r2, #0
 800346c:	2100      	movs	r1, #0
 800346e:	2012      	movs	r0, #18
 8003470:	f002 fe45 	bl	80060fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003474:	2012      	movs	r0, #18
 8003476:	f002 fe5e 	bl	8006136 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800347a:	e07a      	b.n	8003572 <HAL_ADC_MspInit+0x172>
  else if(adcHandle->Instance==ADC2)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a41      	ldr	r2, [pc, #260]	; (8003588 <HAL_ADC_MspInit+0x188>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d12c      	bne.n	80034e0 <HAL_ADC_MspInit+0xe0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003486:	4b3e      	ldr	r3, [pc, #248]	; (8003580 <HAL_ADC_MspInit+0x180>)
 8003488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348a:	4a3d      	ldr	r2, [pc, #244]	; (8003580 <HAL_ADC_MspInit+0x180>)
 800348c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003490:	6453      	str	r3, [r2, #68]	; 0x44
 8003492:	4b3b      	ldr	r3, [pc, #236]	; (8003580 <HAL_ADC_MspInit+0x180>)
 8003494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003496:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800349a:	61bb      	str	r3, [r7, #24]
 800349c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800349e:	4b38      	ldr	r3, [pc, #224]	; (8003580 <HAL_ADC_MspInit+0x180>)
 80034a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a2:	4a37      	ldr	r2, [pc, #220]	; (8003580 <HAL_ADC_MspInit+0x180>)
 80034a4:	f043 0301 	orr.w	r3, r3, #1
 80034a8:	6313      	str	r3, [r2, #48]	; 0x30
 80034aa:	4b35      	ldr	r3, [pc, #212]	; (8003580 <HAL_ADC_MspInit+0x180>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	617b      	str	r3, [r7, #20]
 80034b4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80034b6:	2302      	movs	r3, #2
 80034b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034ba:	2303      	movs	r3, #3
 80034bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034be:	2300      	movs	r3, #0
 80034c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034c6:	4619      	mov	r1, r3
 80034c8:	482e      	ldr	r0, [pc, #184]	; (8003584 <HAL_ADC_MspInit+0x184>)
 80034ca:	f003 fa65 	bl	8006998 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80034ce:	2200      	movs	r2, #0
 80034d0:	2100      	movs	r1, #0
 80034d2:	2012      	movs	r0, #18
 80034d4:	f002 fe13 	bl	80060fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80034d8:	2012      	movs	r0, #18
 80034da:	f002 fe2c 	bl	8006136 <HAL_NVIC_EnableIRQ>
}
 80034de:	e048      	b.n	8003572 <HAL_ADC_MspInit+0x172>
  else if(adcHandle->Instance==ADC3)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a29      	ldr	r2, [pc, #164]	; (800358c <HAL_ADC_MspInit+0x18c>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d143      	bne.n	8003572 <HAL_ADC_MspInit+0x172>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80034ea:	4b25      	ldr	r3, [pc, #148]	; (8003580 <HAL_ADC_MspInit+0x180>)
 80034ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ee:	4a24      	ldr	r2, [pc, #144]	; (8003580 <HAL_ADC_MspInit+0x180>)
 80034f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034f4:	6453      	str	r3, [r2, #68]	; 0x44
 80034f6:	4b22      	ldr	r3, [pc, #136]	; (8003580 <HAL_ADC_MspInit+0x180>)
 80034f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034fe:	613b      	str	r3, [r7, #16]
 8003500:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003502:	4b1f      	ldr	r3, [pc, #124]	; (8003580 <HAL_ADC_MspInit+0x180>)
 8003504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003506:	4a1e      	ldr	r2, [pc, #120]	; (8003580 <HAL_ADC_MspInit+0x180>)
 8003508:	f043 0320 	orr.w	r3, r3, #32
 800350c:	6313      	str	r3, [r2, #48]	; 0x30
 800350e:	4b1c      	ldr	r3, [pc, #112]	; (8003580 <HAL_ADC_MspInit+0x180>)
 8003510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003512:	f003 0320 	and.w	r3, r3, #32
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800351a:	4b19      	ldr	r3, [pc, #100]	; (8003580 <HAL_ADC_MspInit+0x180>)
 800351c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351e:	4a18      	ldr	r2, [pc, #96]	; (8003580 <HAL_ADC_MspInit+0x180>)
 8003520:	f043 0304 	orr.w	r3, r3, #4
 8003524:	6313      	str	r3, [r2, #48]	; 0x30
 8003526:	4b16      	ldr	r3, [pc, #88]	; (8003580 <HAL_ADC_MspInit+0x180>)
 8003528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352a:	f003 0304 	and.w	r3, r3, #4
 800352e:	60bb      	str	r3, [r7, #8]
 8003530:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8003532:	2328      	movs	r3, #40	; 0x28
 8003534:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003536:	2303      	movs	r3, #3
 8003538:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353a:	2300      	movs	r3, #0
 800353c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800353e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003542:	4619      	mov	r1, r3
 8003544:	4812      	ldr	r0, [pc, #72]	; (8003590 <HAL_ADC_MspInit+0x190>)
 8003546:	f003 fa27 	bl	8006998 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800354a:	230c      	movs	r3, #12
 800354c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800354e:	2303      	movs	r3, #3
 8003550:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003552:	2300      	movs	r3, #0
 8003554:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003556:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800355a:	4619      	mov	r1, r3
 800355c:	480d      	ldr	r0, [pc, #52]	; (8003594 <HAL_ADC_MspInit+0x194>)
 800355e:	f003 fa1b 	bl	8006998 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003562:	2200      	movs	r2, #0
 8003564:	2100      	movs	r1, #0
 8003566:	2012      	movs	r0, #18
 8003568:	f002 fdc9 	bl	80060fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800356c:	2012      	movs	r0, #18
 800356e:	f002 fde2 	bl	8006136 <HAL_NVIC_EnableIRQ>
}
 8003572:	bf00      	nop
 8003574:	3738      	adds	r7, #56	; 0x38
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	40012000 	.word	0x40012000
 8003580:	40023800 	.word	0x40023800
 8003584:	40020000 	.word	0x40020000
 8003588:	40012100 	.word	0x40012100
 800358c:	40012200 	.word	0x40012200
 8003590:	40021400 	.word	0x40021400
 8003594:	40020800 	.word	0x40020800

08003598 <_write>:
			}
	}
		HAL_UART_Transmit(&uartDef, EndMSG, sizeof(EndMSG), 10000);
};
int _write(int file, char *ptr, int len)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035a4:	2300      	movs	r3, #0
 80035a6:	617b      	str	r3, [r7, #20]
 80035a8:	e009      	b.n	80035be <_write+0x26>
	{
		__io_putchar(*ptr++);
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	1c5a      	adds	r2, r3, #1
 80035ae:	60ba      	str	r2, [r7, #8]
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 f80c 	bl	80035d0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	3301      	adds	r3, #1
 80035bc:	617b      	str	r3, [r7, #20]
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	dbf1      	blt.n	80035aa <_write+0x12>
	}
	return len;
 80035c6:	687b      	ldr	r3, [r7, #4]
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3718      	adds	r7, #24
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <__io_putchar>:
int __io_putchar(int ch){
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
	if(ch == '\n')
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b0a      	cmp	r3, #10
 80035dc:	d106      	bne.n	80035ec <__io_putchar+0x1c>
	{
		HAL_UART_Transmit(&uartDef, (uint8_t*)"\r", 1, HAL_MAX_DELAY);
 80035de:	f04f 33ff 	mov.w	r3, #4294967295
 80035e2:	2201      	movs	r2, #1
 80035e4:	4907      	ldr	r1, [pc, #28]	; (8003604 <__io_putchar+0x34>)
 80035e6:	4808      	ldr	r0, [pc, #32]	; (8003608 <__io_putchar+0x38>)
 80035e8:	f008 fe56 	bl	800c298 <HAL_UART_Transmit>
	}
	HAL_UART_Transmit(&uartDef, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80035ec:	1d39      	adds	r1, r7, #4
 80035ee:	f04f 33ff 	mov.w	r3, #4294967295
 80035f2:	2201      	movs	r2, #1
 80035f4:	4804      	ldr	r0, [pc, #16]	; (8003608 <__io_putchar+0x38>)
 80035f6:	f008 fe4f 	bl	800c298 <HAL_UART_Transmit>
	return 1;
 80035fa:	2301      	movs	r3, #1
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	08017560 	.word	0x08017560
 8003608:	2000642c 	.word	0x2000642c

0800360c <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003610:	4b16      	ldr	r3, [pc, #88]	; (800366c <MX_CAN1_Init+0x60>)
 8003612:	4a17      	ldr	r2, [pc, #92]	; (8003670 <MX_CAN1_Init+0x64>)
 8003614:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8003616:	4b15      	ldr	r3, [pc, #84]	; (800366c <MX_CAN1_Init+0x60>)
 8003618:	2210      	movs	r2, #16
 800361a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800361c:	4b13      	ldr	r3, [pc, #76]	; (800366c <MX_CAN1_Init+0x60>)
 800361e:	2200      	movs	r2, #0
 8003620:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003622:	4b12      	ldr	r3, [pc, #72]	; (800366c <MX_CAN1_Init+0x60>)
 8003624:	2200      	movs	r2, #0
 8003626:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8003628:	4b10      	ldr	r3, [pc, #64]	; (800366c <MX_CAN1_Init+0x60>)
 800362a:	2200      	movs	r2, #0
 800362c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800362e:	4b0f      	ldr	r3, [pc, #60]	; (800366c <MX_CAN1_Init+0x60>)
 8003630:	2200      	movs	r2, #0
 8003632:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8003634:	4b0d      	ldr	r3, [pc, #52]	; (800366c <MX_CAN1_Init+0x60>)
 8003636:	2200      	movs	r2, #0
 8003638:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800363a:	4b0c      	ldr	r3, [pc, #48]	; (800366c <MX_CAN1_Init+0x60>)
 800363c:	2200      	movs	r2, #0
 800363e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8003640:	4b0a      	ldr	r3, [pc, #40]	; (800366c <MX_CAN1_Init+0x60>)
 8003642:	2200      	movs	r2, #0
 8003644:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8003646:	4b09      	ldr	r3, [pc, #36]	; (800366c <MX_CAN1_Init+0x60>)
 8003648:	2200      	movs	r2, #0
 800364a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800364c:	4b07      	ldr	r3, [pc, #28]	; (800366c <MX_CAN1_Init+0x60>)
 800364e:	2200      	movs	r2, #0
 8003650:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8003652:	4b06      	ldr	r3, [pc, #24]	; (800366c <MX_CAN1_Init+0x60>)
 8003654:	2200      	movs	r2, #0
 8003656:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003658:	4804      	ldr	r0, [pc, #16]	; (800366c <MX_CAN1_Init+0x60>)
 800365a:	f002 fb79 	bl	8005d50 <HAL_CAN_Init>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8003664:	f000 fe7c 	bl	8004360 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8003668:	bf00      	nop
 800366a:	bd80      	pop	{r7, pc}
 800366c:	20000ecc 	.word	0x20000ecc
 8003670:	40006400 	.word	0x40006400

08003674 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8003678:	4b16      	ldr	r3, [pc, #88]	; (80036d4 <MX_CAN2_Init+0x60>)
 800367a:	4a17      	ldr	r2, [pc, #92]	; (80036d8 <MX_CAN2_Init+0x64>)
 800367c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 800367e:	4b15      	ldr	r3, [pc, #84]	; (80036d4 <MX_CAN2_Init+0x60>)
 8003680:	2210      	movs	r2, #16
 8003682:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8003684:	4b13      	ldr	r3, [pc, #76]	; (80036d4 <MX_CAN2_Init+0x60>)
 8003686:	2200      	movs	r2, #0
 8003688:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800368a:	4b12      	ldr	r3, [pc, #72]	; (80036d4 <MX_CAN2_Init+0x60>)
 800368c:	2200      	movs	r2, #0
 800368e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8003690:	4b10      	ldr	r3, [pc, #64]	; (80036d4 <MX_CAN2_Init+0x60>)
 8003692:	2200      	movs	r2, #0
 8003694:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8003696:	4b0f      	ldr	r3, [pc, #60]	; (80036d4 <MX_CAN2_Init+0x60>)
 8003698:	2200      	movs	r2, #0
 800369a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800369c:	4b0d      	ldr	r3, [pc, #52]	; (80036d4 <MX_CAN2_Init+0x60>)
 800369e:	2200      	movs	r2, #0
 80036a0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80036a2:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <MX_CAN2_Init+0x60>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80036a8:	4b0a      	ldr	r3, [pc, #40]	; (80036d4 <MX_CAN2_Init+0x60>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80036ae:	4b09      	ldr	r3, [pc, #36]	; (80036d4 <MX_CAN2_Init+0x60>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80036b4:	4b07      	ldr	r3, [pc, #28]	; (80036d4 <MX_CAN2_Init+0x60>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80036ba:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <MX_CAN2_Init+0x60>)
 80036bc:	2200      	movs	r2, #0
 80036be:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80036c0:	4804      	ldr	r0, [pc, #16]	; (80036d4 <MX_CAN2_Init+0x60>)
 80036c2:	f002 fb45 	bl	8005d50 <HAL_CAN_Init>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 80036cc:	f000 fe48 	bl	8004360 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80036d0:	bf00      	nop
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	20000ef4 	.word	0x20000ef4
 80036d8:	40006800 	.word	0x40006800

080036dc <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b08e      	sub	sp, #56	; 0x38
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]
 80036ec:	605a      	str	r2, [r3, #4]
 80036ee:	609a      	str	r2, [r3, #8]
 80036f0:	60da      	str	r2, [r3, #12]
 80036f2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a43      	ldr	r2, [pc, #268]	; (8003808 <HAL_CAN_MspInit+0x12c>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d131      	bne.n	8003762 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80036fe:	4b43      	ldr	r3, [pc, #268]	; (800380c <HAL_CAN_MspInit+0x130>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	3301      	adds	r3, #1
 8003704:	4a41      	ldr	r2, [pc, #260]	; (800380c <HAL_CAN_MspInit+0x130>)
 8003706:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003708:	4b40      	ldr	r3, [pc, #256]	; (800380c <HAL_CAN_MspInit+0x130>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d10b      	bne.n	8003728 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003710:	4b3f      	ldr	r3, [pc, #252]	; (8003810 <HAL_CAN_MspInit+0x134>)
 8003712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003714:	4a3e      	ldr	r2, [pc, #248]	; (8003810 <HAL_CAN_MspInit+0x134>)
 8003716:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800371a:	6413      	str	r3, [r2, #64]	; 0x40
 800371c:	4b3c      	ldr	r3, [pc, #240]	; (8003810 <HAL_CAN_MspInit+0x134>)
 800371e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003724:	623b      	str	r3, [r7, #32]
 8003726:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003728:	4b39      	ldr	r3, [pc, #228]	; (8003810 <HAL_CAN_MspInit+0x134>)
 800372a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372c:	4a38      	ldr	r2, [pc, #224]	; (8003810 <HAL_CAN_MspInit+0x134>)
 800372e:	f043 0308 	orr.w	r3, r3, #8
 8003732:	6313      	str	r3, [r2, #48]	; 0x30
 8003734:	4b36      	ldr	r3, [pc, #216]	; (8003810 <HAL_CAN_MspInit+0x134>)
 8003736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003738:	f003 0308 	and.w	r3, r3, #8
 800373c:	61fb      	str	r3, [r7, #28]
 800373e:	69fb      	ldr	r3, [r7, #28]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003740:	2303      	movs	r3, #3
 8003742:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003744:	2302      	movs	r3, #2
 8003746:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003748:	2300      	movs	r3, #0
 800374a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800374c:	2303      	movs	r3, #3
 800374e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003750:	2309      	movs	r3, #9
 8003752:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003758:	4619      	mov	r1, r3
 800375a:	482e      	ldr	r0, [pc, #184]	; (8003814 <HAL_CAN_MspInit+0x138>)
 800375c:	f003 f91c 	bl	8006998 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8003760:	e04e      	b.n	8003800 <HAL_CAN_MspInit+0x124>
  else if(canHandle->Instance==CAN2)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a2c      	ldr	r2, [pc, #176]	; (8003818 <HAL_CAN_MspInit+0x13c>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d149      	bne.n	8003800 <HAL_CAN_MspInit+0x124>
    __HAL_RCC_CAN3_CLK_ENABLE();
 800376c:	4b28      	ldr	r3, [pc, #160]	; (8003810 <HAL_CAN_MspInit+0x134>)
 800376e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003770:	4a27      	ldr	r2, [pc, #156]	; (8003810 <HAL_CAN_MspInit+0x134>)
 8003772:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003776:	6413      	str	r3, [r2, #64]	; 0x40
 8003778:	4b25      	ldr	r3, [pc, #148]	; (8003810 <HAL_CAN_MspInit+0x134>)
 800377a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003780:	61bb      	str	r3, [r7, #24]
 8003782:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 8003784:	4b22      	ldr	r3, [pc, #136]	; (8003810 <HAL_CAN_MspInit+0x134>)
 8003786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003788:	4a21      	ldr	r2, [pc, #132]	; (8003810 <HAL_CAN_MspInit+0x134>)
 800378a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800378e:	6413      	str	r3, [r2, #64]	; 0x40
 8003790:	4b1f      	ldr	r3, [pc, #124]	; (8003810 <HAL_CAN_MspInit+0x134>)
 8003792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003794:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003798:	617b      	str	r3, [r7, #20]
 800379a:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800379c:	4b1b      	ldr	r3, [pc, #108]	; (800380c <HAL_CAN_MspInit+0x130>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	3301      	adds	r3, #1
 80037a2:	4a1a      	ldr	r2, [pc, #104]	; (800380c <HAL_CAN_MspInit+0x130>)
 80037a4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80037a6:	4b19      	ldr	r3, [pc, #100]	; (800380c <HAL_CAN_MspInit+0x130>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d10b      	bne.n	80037c6 <HAL_CAN_MspInit+0xea>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80037ae:	4b18      	ldr	r3, [pc, #96]	; (8003810 <HAL_CAN_MspInit+0x134>)
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	4a17      	ldr	r2, [pc, #92]	; (8003810 <HAL_CAN_MspInit+0x134>)
 80037b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037b8:	6413      	str	r3, [r2, #64]	; 0x40
 80037ba:	4b15      	ldr	r3, [pc, #84]	; (8003810 <HAL_CAN_MspInit+0x134>)
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c2:	613b      	str	r3, [r7, #16]
 80037c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037c6:	4b12      	ldr	r3, [pc, #72]	; (8003810 <HAL_CAN_MspInit+0x134>)
 80037c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ca:	4a11      	ldr	r2, [pc, #68]	; (8003810 <HAL_CAN_MspInit+0x134>)
 80037cc:	f043 0302 	orr.w	r3, r3, #2
 80037d0:	6313      	str	r3, [r2, #48]	; 0x30
 80037d2:	4b0f      	ldr	r3, [pc, #60]	; (8003810 <HAL_CAN_MspInit+0x134>)
 80037d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80037de:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80037e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e4:	2302      	movs	r3, #2
 80037e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e8:	2300      	movs	r3, #0
 80037ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037ec:	2303      	movs	r3, #3
 80037ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80037f0:	2309      	movs	r3, #9
 80037f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037f8:	4619      	mov	r1, r3
 80037fa:	4808      	ldr	r0, [pc, #32]	; (800381c <HAL_CAN_MspInit+0x140>)
 80037fc:	f003 f8cc 	bl	8006998 <HAL_GPIO_Init>
}
 8003800:	bf00      	nop
 8003802:	3738      	adds	r7, #56	; 0x38
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	40006400 	.word	0x40006400
 800380c:	20000f1c 	.word	0x20000f1c
 8003810:	40023800 	.word	0x40023800
 8003814:	40020c00 	.word	0x40020c00
 8003818:	40006800 	.word	0x40006800
 800381c:	40020400 	.word	0x40020400

08003820 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003826:	4b10      	ldr	r3, [pc, #64]	; (8003868 <MX_DMA_Init+0x48>)
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	4a0f      	ldr	r2, [pc, #60]	; (8003868 <MX_DMA_Init+0x48>)
 800382c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003830:	6313      	str	r3, [r2, #48]	; 0x30
 8003832:	4b0d      	ldr	r3, [pc, #52]	; (8003868 <MX_DMA_Init+0x48>)
 8003834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800383a:	607b      	str	r3, [r7, #4]
 800383c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800383e:	2200      	movs	r2, #0
 8003840:	2100      	movs	r1, #0
 8003842:	2038      	movs	r0, #56	; 0x38
 8003844:	f002 fc5b 	bl	80060fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003848:	2038      	movs	r0, #56	; 0x38
 800384a:	f002 fc74 	bl	8006136 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 800384e:	2200      	movs	r2, #0
 8003850:	2100      	movs	r1, #0
 8003852:	2044      	movs	r0, #68	; 0x44
 8003854:	f002 fc53 	bl	80060fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8003858:	2044      	movs	r0, #68	; 0x44
 800385a:	f002 fc6c 	bl	8006136 <HAL_NVIC_EnableIRQ>

}
 800385e:	bf00      	nop
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	40023800 	.word	0x40023800

0800386c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800386c:	b480      	push	{r7}
 800386e:	b089      	sub	sp, #36	; 0x24
 8003870:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003872:	4b2d      	ldr	r3, [pc, #180]	; (8003928 <MX_GPIO_Init+0xbc>)
 8003874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003876:	4a2c      	ldr	r2, [pc, #176]	; (8003928 <MX_GPIO_Init+0xbc>)
 8003878:	f043 0304 	orr.w	r3, r3, #4
 800387c:	6313      	str	r3, [r2, #48]	; 0x30
 800387e:	4b2a      	ldr	r3, [pc, #168]	; (8003928 <MX_GPIO_Init+0xbc>)
 8003880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003882:	f003 0304 	and.w	r3, r3, #4
 8003886:	61fb      	str	r3, [r7, #28]
 8003888:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800388a:	4b27      	ldr	r3, [pc, #156]	; (8003928 <MX_GPIO_Init+0xbc>)
 800388c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388e:	4a26      	ldr	r2, [pc, #152]	; (8003928 <MX_GPIO_Init+0xbc>)
 8003890:	f043 0320 	orr.w	r3, r3, #32
 8003894:	6313      	str	r3, [r2, #48]	; 0x30
 8003896:	4b24      	ldr	r3, [pc, #144]	; (8003928 <MX_GPIO_Init+0xbc>)
 8003898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389a:	f003 0320 	and.w	r3, r3, #32
 800389e:	61bb      	str	r3, [r7, #24]
 80038a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80038a2:	4b21      	ldr	r3, [pc, #132]	; (8003928 <MX_GPIO_Init+0xbc>)
 80038a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a6:	4a20      	ldr	r2, [pc, #128]	; (8003928 <MX_GPIO_Init+0xbc>)
 80038a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038ac:	6313      	str	r3, [r2, #48]	; 0x30
 80038ae:	4b1e      	ldr	r3, [pc, #120]	; (8003928 <MX_GPIO_Init+0xbc>)
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b6:	617b      	str	r3, [r7, #20]
 80038b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ba:	4b1b      	ldr	r3, [pc, #108]	; (8003928 <MX_GPIO_Init+0xbc>)
 80038bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038be:	4a1a      	ldr	r2, [pc, #104]	; (8003928 <MX_GPIO_Init+0xbc>)
 80038c0:	f043 0301 	orr.w	r3, r3, #1
 80038c4:	6313      	str	r3, [r2, #48]	; 0x30
 80038c6:	4b18      	ldr	r3, [pc, #96]	; (8003928 <MX_GPIO_Init+0xbc>)
 80038c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	613b      	str	r3, [r7, #16]
 80038d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038d2:	4b15      	ldr	r3, [pc, #84]	; (8003928 <MX_GPIO_Init+0xbc>)
 80038d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d6:	4a14      	ldr	r2, [pc, #80]	; (8003928 <MX_GPIO_Init+0xbc>)
 80038d8:	f043 0302 	orr.w	r3, r3, #2
 80038dc:	6313      	str	r3, [r2, #48]	; 0x30
 80038de:	4b12      	ldr	r3, [pc, #72]	; (8003928 <MX_GPIO_Init+0xbc>)
 80038e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	60fb      	str	r3, [r7, #12]
 80038e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80038ea:	4b0f      	ldr	r3, [pc, #60]	; (8003928 <MX_GPIO_Init+0xbc>)
 80038ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ee:	4a0e      	ldr	r2, [pc, #56]	; (8003928 <MX_GPIO_Init+0xbc>)
 80038f0:	f043 0308 	orr.w	r3, r3, #8
 80038f4:	6313      	str	r3, [r2, #48]	; 0x30
 80038f6:	4b0c      	ldr	r3, [pc, #48]	; (8003928 <MX_GPIO_Init+0xbc>)
 80038f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fa:	f003 0308 	and.w	r3, r3, #8
 80038fe:	60bb      	str	r3, [r7, #8]
 8003900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003902:	4b09      	ldr	r3, [pc, #36]	; (8003928 <MX_GPIO_Init+0xbc>)
 8003904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003906:	4a08      	ldr	r2, [pc, #32]	; (8003928 <MX_GPIO_Init+0xbc>)
 8003908:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800390c:	6313      	str	r3, [r2, #48]	; 0x30
 800390e:	4b06      	ldr	r3, [pc, #24]	; (8003928 <MX_GPIO_Init+0xbc>)
 8003910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003916:	607b      	str	r3, [r7, #4]
 8003918:	687b      	ldr	r3, [r7, #4]

}
 800391a:	bf00      	nop
 800391c:	3724      	adds	r7, #36	; 0x24
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	40023800 	.word	0x40023800

0800392c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c3;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003930:	4b1b      	ldr	r3, [pc, #108]	; (80039a0 <MX_I2C1_Init+0x74>)
 8003932:	4a1c      	ldr	r2, [pc, #112]	; (80039a4 <MX_I2C1_Init+0x78>)
 8003934:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 8003936:	4b1a      	ldr	r3, [pc, #104]	; (80039a0 <MX_I2C1_Init+0x74>)
 8003938:	4a1b      	ldr	r2, [pc, #108]	; (80039a8 <MX_I2C1_Init+0x7c>)
 800393a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800393c:	4b18      	ldr	r3, [pc, #96]	; (80039a0 <MX_I2C1_Init+0x74>)
 800393e:	2200      	movs	r2, #0
 8003940:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003942:	4b17      	ldr	r3, [pc, #92]	; (80039a0 <MX_I2C1_Init+0x74>)
 8003944:	2201      	movs	r2, #1
 8003946:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003948:	4b15      	ldr	r3, [pc, #84]	; (80039a0 <MX_I2C1_Init+0x74>)
 800394a:	2200      	movs	r2, #0
 800394c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800394e:	4b14      	ldr	r3, [pc, #80]	; (80039a0 <MX_I2C1_Init+0x74>)
 8003950:	2200      	movs	r2, #0
 8003952:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003954:	4b12      	ldr	r3, [pc, #72]	; (80039a0 <MX_I2C1_Init+0x74>)
 8003956:	2200      	movs	r2, #0
 8003958:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800395a:	4b11      	ldr	r3, [pc, #68]	; (80039a0 <MX_I2C1_Init+0x74>)
 800395c:	2200      	movs	r2, #0
 800395e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003960:	4b0f      	ldr	r3, [pc, #60]	; (80039a0 <MX_I2C1_Init+0x74>)
 8003962:	2200      	movs	r2, #0
 8003964:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003966:	480e      	ldr	r0, [pc, #56]	; (80039a0 <MX_I2C1_Init+0x74>)
 8003968:	f003 f9c2 	bl	8006cf0 <HAL_I2C_Init>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003972:	f000 fcf5 	bl	8004360 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003976:	2100      	movs	r1, #0
 8003978:	4809      	ldr	r0, [pc, #36]	; (80039a0 <MX_I2C1_Init+0x74>)
 800397a:	f004 fa89 	bl	8007e90 <HAL_I2CEx_ConfigAnalogFilter>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003984:	f000 fcec 	bl	8004360 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003988:	2100      	movs	r1, #0
 800398a:	4805      	ldr	r0, [pc, #20]	; (80039a0 <MX_I2C1_Init+0x74>)
 800398c:	f004 facb 	bl	8007f26 <HAL_I2CEx_ConfigDigitalFilter>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003996:	f000 fce3 	bl	8004360 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800399a:	bf00      	nop
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	20000f20 	.word	0x20000f20
 80039a4:	40005400 	.word	0x40005400
 80039a8:	00300f38 	.word	0x00300f38

080039ac <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80039b0:	4b1b      	ldr	r3, [pc, #108]	; (8003a20 <MX_I2C2_Init+0x74>)
 80039b2:	4a1c      	ldr	r2, [pc, #112]	; (8003a24 <MX_I2C2_Init+0x78>)
 80039b4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00300F38;
 80039b6:	4b1a      	ldr	r3, [pc, #104]	; (8003a20 <MX_I2C2_Init+0x74>)
 80039b8:	4a1b      	ldr	r2, [pc, #108]	; (8003a28 <MX_I2C2_Init+0x7c>)
 80039ba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80039bc:	4b18      	ldr	r3, [pc, #96]	; (8003a20 <MX_I2C2_Init+0x74>)
 80039be:	2200      	movs	r2, #0
 80039c0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80039c2:	4b17      	ldr	r3, [pc, #92]	; (8003a20 <MX_I2C2_Init+0x74>)
 80039c4:	2201      	movs	r2, #1
 80039c6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80039c8:	4b15      	ldr	r3, [pc, #84]	; (8003a20 <MX_I2C2_Init+0x74>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80039ce:	4b14      	ldr	r3, [pc, #80]	; (8003a20 <MX_I2C2_Init+0x74>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80039d4:	4b12      	ldr	r3, [pc, #72]	; (8003a20 <MX_I2C2_Init+0x74>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80039da:	4b11      	ldr	r3, [pc, #68]	; (8003a20 <MX_I2C2_Init+0x74>)
 80039dc:	2200      	movs	r2, #0
 80039de:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80039e0:	4b0f      	ldr	r3, [pc, #60]	; (8003a20 <MX_I2C2_Init+0x74>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80039e6:	480e      	ldr	r0, [pc, #56]	; (8003a20 <MX_I2C2_Init+0x74>)
 80039e8:	f003 f982 	bl	8006cf0 <HAL_I2C_Init>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80039f2:	f000 fcb5 	bl	8004360 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80039f6:	2100      	movs	r1, #0
 80039f8:	4809      	ldr	r0, [pc, #36]	; (8003a20 <MX_I2C2_Init+0x74>)
 80039fa:	f004 fa49 	bl	8007e90 <HAL_I2CEx_ConfigAnalogFilter>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d001      	beq.n	8003a08 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8003a04:	f000 fcac 	bl	8004360 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003a08:	2100      	movs	r1, #0
 8003a0a:	4805      	ldr	r0, [pc, #20]	; (8003a20 <MX_I2C2_Init+0x74>)
 8003a0c:	f004 fa8b 	bl	8007f26 <HAL_I2CEx_ConfigDigitalFilter>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8003a16:	f000 fca3 	bl	8004360 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003a1a:	bf00      	nop
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	20000f6c 	.word	0x20000f6c
 8003a24:	40005800 	.word	0x40005800
 8003a28:	00300f38 	.word	0x00300f38

08003a2c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003a30:	4b1b      	ldr	r3, [pc, #108]	; (8003aa0 <MX_I2C3_Init+0x74>)
 8003a32:	4a1c      	ldr	r2, [pc, #112]	; (8003aa4 <MX_I2C3_Init+0x78>)
 8003a34:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00300F38;
 8003a36:	4b1a      	ldr	r3, [pc, #104]	; (8003aa0 <MX_I2C3_Init+0x74>)
 8003a38:	4a1b      	ldr	r2, [pc, #108]	; (8003aa8 <MX_I2C3_Init+0x7c>)
 8003a3a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8003a3c:	4b18      	ldr	r3, [pc, #96]	; (8003aa0 <MX_I2C3_Init+0x74>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a42:	4b17      	ldr	r3, [pc, #92]	; (8003aa0 <MX_I2C3_Init+0x74>)
 8003a44:	2201      	movs	r2, #1
 8003a46:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a48:	4b15      	ldr	r3, [pc, #84]	; (8003aa0 <MX_I2C3_Init+0x74>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8003a4e:	4b14      	ldr	r3, [pc, #80]	; (8003aa0 <MX_I2C3_Init+0x74>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003a54:	4b12      	ldr	r3, [pc, #72]	; (8003aa0 <MX_I2C3_Init+0x74>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a5a:	4b11      	ldr	r3, [pc, #68]	; (8003aa0 <MX_I2C3_Init+0x74>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a60:	4b0f      	ldr	r3, [pc, #60]	; (8003aa0 <MX_I2C3_Init+0x74>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003a66:	480e      	ldr	r0, [pc, #56]	; (8003aa0 <MX_I2C3_Init+0x74>)
 8003a68:	f003 f942 	bl	8006cf0 <HAL_I2C_Init>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8003a72:	f000 fc75 	bl	8004360 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003a76:	2100      	movs	r1, #0
 8003a78:	4809      	ldr	r0, [pc, #36]	; (8003aa0 <MX_I2C3_Init+0x74>)
 8003a7a:	f004 fa09 	bl	8007e90 <HAL_I2CEx_ConfigAnalogFilter>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8003a84:	f000 fc6c 	bl	8004360 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8003a88:	2100      	movs	r1, #0
 8003a8a:	4805      	ldr	r0, [pc, #20]	; (8003aa0 <MX_I2C3_Init+0x74>)
 8003a8c:	f004 fa4b 	bl	8007f26 <HAL_I2CEx_ConfigDigitalFilter>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8003a96:	f000 fc63 	bl	8004360 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003a9a:	bf00      	nop
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	20000fb8 	.word	0x20000fb8
 8003aa4:	40005c00 	.word	0x40005c00
 8003aa8:	00300f38 	.word	0x00300f38

08003aac <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8003ab0:	4b1b      	ldr	r3, [pc, #108]	; (8003b20 <MX_I2C4_Init+0x74>)
 8003ab2:	4a1c      	ldr	r2, [pc, #112]	; (8003b24 <MX_I2C4_Init+0x78>)
 8003ab4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00300F38;
 8003ab6:	4b1a      	ldr	r3, [pc, #104]	; (8003b20 <MX_I2C4_Init+0x74>)
 8003ab8:	4a1b      	ldr	r2, [pc, #108]	; (8003b28 <MX_I2C4_Init+0x7c>)
 8003aba:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8003abc:	4b18      	ldr	r3, [pc, #96]	; (8003b20 <MX_I2C4_Init+0x74>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ac2:	4b17      	ldr	r3, [pc, #92]	; (8003b20 <MX_I2C4_Init+0x74>)
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ac8:	4b15      	ldr	r3, [pc, #84]	; (8003b20 <MX_I2C4_Init+0x74>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8003ace:	4b14      	ldr	r3, [pc, #80]	; (8003b20 <MX_I2C4_Init+0x74>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003ad4:	4b12      	ldr	r3, [pc, #72]	; (8003b20 <MX_I2C4_Init+0x74>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ada:	4b11      	ldr	r3, [pc, #68]	; (8003b20 <MX_I2C4_Init+0x74>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003ae0:	4b0f      	ldr	r3, [pc, #60]	; (8003b20 <MX_I2C4_Init+0x74>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8003ae6:	480e      	ldr	r0, [pc, #56]	; (8003b20 <MX_I2C4_Init+0x74>)
 8003ae8:	f003 f902 	bl	8006cf0 <HAL_I2C_Init>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8003af2:	f000 fc35 	bl	8004360 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003af6:	2100      	movs	r1, #0
 8003af8:	4809      	ldr	r0, [pc, #36]	; (8003b20 <MX_I2C4_Init+0x74>)
 8003afa:	f004 f9c9 	bl	8007e90 <HAL_I2CEx_ConfigAnalogFilter>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8003b04:	f000 fc2c 	bl	8004360 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8003b08:	2100      	movs	r1, #0
 8003b0a:	4805      	ldr	r0, [pc, #20]	; (8003b20 <MX_I2C4_Init+0x74>)
 8003b0c:	f004 fa0b 	bl	8007f26 <HAL_I2CEx_ConfigDigitalFilter>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8003b16:	f000 fc23 	bl	8004360 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8003b1a:	bf00      	nop
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	20001004 	.word	0x20001004
 8003b24:	40006000 	.word	0x40006000
 8003b28:	00300f38 	.word	0x00300f38

08003b2c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b090      	sub	sp, #64	; 0x40
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b38:	2200      	movs	r2, #0
 8003b3a:	601a      	str	r2, [r3, #0]
 8003b3c:	605a      	str	r2, [r3, #4]
 8003b3e:	609a      	str	r2, [r3, #8]
 8003b40:	60da      	str	r2, [r3, #12]
 8003b42:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a6b      	ldr	r2, [pc, #428]	; (8003cf8 <HAL_I2C_MspInit+0x1cc>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d128      	bne.n	8003ba0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b4e:	4b6b      	ldr	r3, [pc, #428]	; (8003cfc <HAL_I2C_MspInit+0x1d0>)
 8003b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b52:	4a6a      	ldr	r2, [pc, #424]	; (8003cfc <HAL_I2C_MspInit+0x1d0>)
 8003b54:	f043 0302 	orr.w	r3, r3, #2
 8003b58:	6313      	str	r3, [r2, #48]	; 0x30
 8003b5a:	4b68      	ldr	r3, [pc, #416]	; (8003cfc <HAL_I2C_MspInit+0x1d0>)
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MLX2_SCL_Pin|MLX2_SDA_Pin;
 8003b66:	23c0      	movs	r3, #192	; 0xc0
 8003b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b6a:	2312      	movs	r3, #18
 8003b6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b72:	2303      	movs	r3, #3
 8003b74:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b76:	2304      	movs	r3, #4
 8003b78:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b7e:	4619      	mov	r1, r3
 8003b80:	485f      	ldr	r0, [pc, #380]	; (8003d00 <HAL_I2C_MspInit+0x1d4>)
 8003b82:	f002 ff09 	bl	8006998 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b86:	4b5d      	ldr	r3, [pc, #372]	; (8003cfc <HAL_I2C_MspInit+0x1d0>)
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	4a5c      	ldr	r2, [pc, #368]	; (8003cfc <HAL_I2C_MspInit+0x1d0>)
 8003b8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b90:	6413      	str	r3, [r2, #64]	; 0x40
 8003b92:	4b5a      	ldr	r3, [pc, #360]	; (8003cfc <HAL_I2C_MspInit+0x1d0>)
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8003b9e:	e0a7      	b.n	8003cf0 <HAL_I2C_MspInit+0x1c4>
  else if(i2cHandle->Instance==I2C2)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a57      	ldr	r2, [pc, #348]	; (8003d04 <HAL_I2C_MspInit+0x1d8>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d128      	bne.n	8003bfc <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003baa:	4b54      	ldr	r3, [pc, #336]	; (8003cfc <HAL_I2C_MspInit+0x1d0>)
 8003bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bae:	4a53      	ldr	r2, [pc, #332]	; (8003cfc <HAL_I2C_MspInit+0x1d0>)
 8003bb0:	f043 0320 	orr.w	r3, r3, #32
 8003bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8003bb6:	4b51      	ldr	r3, [pc, #324]	; (8003cfc <HAL_I2C_MspInit+0x1d0>)
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bba:	f003 0320 	and.w	r3, r3, #32
 8003bbe:	623b      	str	r3, [r7, #32]
 8003bc0:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GYRO_SDA_Pin|GYRO_SCL_Pin;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003bc6:	2312      	movs	r3, #18
 8003bc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003bd2:	2304      	movs	r3, #4
 8003bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003bd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bda:	4619      	mov	r1, r3
 8003bdc:	484a      	ldr	r0, [pc, #296]	; (8003d08 <HAL_I2C_MspInit+0x1dc>)
 8003bde:	f002 fedb 	bl	8006998 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003be2:	4b46      	ldr	r3, [pc, #280]	; (8003cfc <HAL_I2C_MspInit+0x1d0>)
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	4a45      	ldr	r2, [pc, #276]	; (8003cfc <HAL_I2C_MspInit+0x1d0>)
 8003be8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003bec:	6413      	str	r3, [r2, #64]	; 0x40
 8003bee:	4b43      	ldr	r3, [pc, #268]	; (8003cfc <HAL_I2C_MspInit+0x1d0>)
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bf6:	61fb      	str	r3, [r7, #28]
 8003bf8:	69fb      	ldr	r3, [r7, #28]
}
 8003bfa:	e079      	b.n	8003cf0 <HAL_I2C_MspInit+0x1c4>
  else if(i2cHandle->Instance==I2C3)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a42      	ldr	r2, [pc, #264]	; (8003d0c <HAL_I2C_MspInit+0x1e0>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d146      	bne.n	8003c94 <HAL_I2C_MspInit+0x168>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c06:	4b3d      	ldr	r3, [pc, #244]	; (8003cfc <HAL_I2C_MspInit+0x1d0>)
 8003c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0a:	4a3c      	ldr	r2, [pc, #240]	; (8003cfc <HAL_I2C_MspInit+0x1d0>)
 8003c0c:	f043 0304 	orr.w	r3, r3, #4
 8003c10:	6313      	str	r3, [r2, #48]	; 0x30
 8003c12:	4b3a      	ldr	r3, [pc, #232]	; (8003cfc <HAL_I2C_MspInit+0x1d0>)
 8003c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c16:	f003 0304 	and.w	r3, r3, #4
 8003c1a:	61bb      	str	r3, [r7, #24]
 8003c1c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c1e:	4b37      	ldr	r3, [pc, #220]	; (8003cfc <HAL_I2C_MspInit+0x1d0>)
 8003c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c22:	4a36      	ldr	r2, [pc, #216]	; (8003cfc <HAL_I2C_MspInit+0x1d0>)
 8003c24:	f043 0301 	orr.w	r3, r3, #1
 8003c28:	6313      	str	r3, [r2, #48]	; 0x30
 8003c2a:	4b34      	ldr	r3, [pc, #208]	; (8003cfc <HAL_I2C_MspInit+0x1d0>)
 8003c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	617b      	str	r3, [r7, #20]
 8003c34:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MLX1_SDA_Pin;
 8003c36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c3c:	2312      	movs	r3, #18
 8003c3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c40:	2300      	movs	r3, #0
 8003c42:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c44:	2303      	movs	r3, #3
 8003c46:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003c48:	2304      	movs	r3, #4
 8003c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(MLX1_SDA_GPIO_Port, &GPIO_InitStruct);
 8003c4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c50:	4619      	mov	r1, r3
 8003c52:	482f      	ldr	r0, [pc, #188]	; (8003d10 <HAL_I2C_MspInit+0x1e4>)
 8003c54:	f002 fea0 	bl	8006998 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MLX1_SCL_Pin;
 8003c58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c5e:	2312      	movs	r3, #18
 8003c60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c62:	2300      	movs	r3, #0
 8003c64:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c66:	2303      	movs	r3, #3
 8003c68:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003c6a:	2304      	movs	r3, #4
 8003c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(MLX1_SCL_GPIO_Port, &GPIO_InitStruct);
 8003c6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c72:	4619      	mov	r1, r3
 8003c74:	4827      	ldr	r0, [pc, #156]	; (8003d14 <HAL_I2C_MspInit+0x1e8>)
 8003c76:	f002 fe8f 	bl	8006998 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003c7a:	4b20      	ldr	r3, [pc, #128]	; (8003cfc <HAL_I2C_MspInit+0x1d0>)
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	4a1f      	ldr	r2, [pc, #124]	; (8003cfc <HAL_I2C_MspInit+0x1d0>)
 8003c80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c84:	6413      	str	r3, [r2, #64]	; 0x40
 8003c86:	4b1d      	ldr	r3, [pc, #116]	; (8003cfc <HAL_I2C_MspInit+0x1d0>)
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c8e:	613b      	str	r3, [r7, #16]
 8003c90:	693b      	ldr	r3, [r7, #16]
}
 8003c92:	e02d      	b.n	8003cf0 <HAL_I2C_MspInit+0x1c4>
  else if(i2cHandle->Instance==I2C4)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a1f      	ldr	r2, [pc, #124]	; (8003d18 <HAL_I2C_MspInit+0x1ec>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d128      	bne.n	8003cf0 <HAL_I2C_MspInit+0x1c4>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003c9e:	4b17      	ldr	r3, [pc, #92]	; (8003cfc <HAL_I2C_MspInit+0x1d0>)
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca2:	4a16      	ldr	r2, [pc, #88]	; (8003cfc <HAL_I2C_MspInit+0x1d0>)
 8003ca4:	f043 0320 	orr.w	r3, r3, #32
 8003ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8003caa:	4b14      	ldr	r3, [pc, #80]	; (8003cfc <HAL_I2C_MspInit+0x1d0>)
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	f003 0320 	and.w	r3, r3, #32
 8003cb2:	60fb      	str	r3, [r7, #12]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003cb6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003cba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003cbc:	2312      	movs	r3, #18
 8003cbe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8003cc8:	2304      	movs	r3, #4
 8003cca:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003ccc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	480d      	ldr	r0, [pc, #52]	; (8003d08 <HAL_I2C_MspInit+0x1dc>)
 8003cd4:	f002 fe60 	bl	8006998 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8003cd8:	4b08      	ldr	r3, [pc, #32]	; (8003cfc <HAL_I2C_MspInit+0x1d0>)
 8003cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cdc:	4a07      	ldr	r2, [pc, #28]	; (8003cfc <HAL_I2C_MspInit+0x1d0>)
 8003cde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ce2:	6413      	str	r3, [r2, #64]	; 0x40
 8003ce4:	4b05      	ldr	r3, [pc, #20]	; (8003cfc <HAL_I2C_MspInit+0x1d0>)
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cec:	60bb      	str	r3, [r7, #8]
 8003cee:	68bb      	ldr	r3, [r7, #8]
}
 8003cf0:	bf00      	nop
 8003cf2:	3740      	adds	r7, #64	; 0x40
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	40005400 	.word	0x40005400
 8003cfc:	40023800 	.word	0x40023800
 8003d00:	40020400 	.word	0x40020400
 8003d04:	40005800 	.word	0x40005800
 8003d08:	40021400 	.word	0x40021400
 8003d0c:	40005c00 	.word	0x40005c00
 8003d10:	40020800 	.word	0x40020800
 8003d14:	40020000 	.word	0x40020000
 8003d18:	40006000 	.word	0x40006000

08003d1c <statusToInt>:
extern ABSSensor absLFSensor;
extern ABSSensor absRFSensor;
extern GPSSensor gpsSensor;

int statusToInt()
{	int fullRegister = statusRegister.TeleBack;
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	4b39      	ldr	r3, [pc, #228]	; (8003e08 <statusToInt+0xec>)
 8003d24:	78db      	ldrb	r3, [r3, #3]
 8003d26:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	607b      	str	r3, [r7, #4]
	fullRegister = fullRegister << 2;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	607b      	str	r3, [r7, #4]
	fullRegister =  (fullRegister  |statusRegister.DamperRF) << 3;
 8003d34:	4b34      	ldr	r3, [pc, #208]	; (8003e08 <statusToInt+0xec>)
 8003d36:	78db      	ldrb	r3, [r3, #3]
 8003d38:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	461a      	mov	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	607b      	str	r3, [r7, #4]
	fullRegister =  (fullRegister  |statusRegister.DamperLF) << 3;
 8003d48:	4b2f      	ldr	r3, [pc, #188]	; (8003e08 <statusToInt+0xec>)
 8003d4a:	78db      	ldrb	r3, [r3, #3]
 8003d4c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	461a      	mov	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	00db      	lsls	r3, r3, #3
 8003d5a:	607b      	str	r3, [r7, #4]
	fullRegister =  (fullRegister  |statusRegister.Steering) << 3;
 8003d5c:	4b2a      	ldr	r3, [pc, #168]	; (8003e08 <statusToInt+0xec>)
 8003d5e:	789b      	ldrb	r3, [r3, #2]
 8003d60:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	461a      	mov	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	607b      	str	r3, [r7, #4]
	fullRegister =  (fullRegister  |statusRegister.VSSRF) << 3;
 8003d70:	4b25      	ldr	r3, [pc, #148]	; (8003e08 <statusToInt+0xec>)
 8003d72:	789b      	ldrb	r3, [r3, #2]
 8003d74:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	00db      	lsls	r3, r3, #3
 8003d82:	607b      	str	r3, [r7, #4]
	fullRegister =  (fullRegister  |statusRegister.VSSLF) << 3;
 8003d84:	4b20      	ldr	r3, [pc, #128]	; (8003e08 <statusToInt+0xec>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f3c3 33c2 	ubfx	r3, r3, #15, #3
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	461a      	mov	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	00db      	lsls	r3, r3, #3
 8003d96:	607b      	str	r3, [r7, #4]
	fullRegister =  (fullRegister  |statusRegister.MLXRF) << 3;
 8003d98:	4b1b      	ldr	r3, [pc, #108]	; (8003e08 <statusToInt+0xec>)
 8003d9a:	785b      	ldrb	r3, [r3, #1]
 8003d9c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	461a      	mov	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	00db      	lsls	r3, r3, #3
 8003daa:	607b      	str	r3, [r7, #4]
	fullRegister =  (fullRegister  |statusRegister.MLXLF) << 3;
 8003dac:	4b16      	ldr	r3, [pc, #88]	; (8003e08 <statusToInt+0xec>)
 8003dae:	785b      	ldrb	r3, [r3, #1]
 8003db0:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	461a      	mov	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	00db      	lsls	r3, r3, #3
 8003dbe:	607b      	str	r3, [r7, #4]
	fullRegister = (fullRegister  | statusRegister.GYRO) << 3;
 8003dc0:	4b11      	ldr	r3, [pc, #68]	; (8003e08 <statusToInt+0xec>)
 8003dc2:	881b      	ldrh	r3, [r3, #0]
 8003dc4:	f3c3 1382 	ubfx	r3, r3, #6, #3
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	461a      	mov	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	00db      	lsls	r3, r3, #3
 8003dd2:	607b      	str	r3, [r7, #4]
	fullRegister = (fullRegister  | statusRegister.GPS) << 3;
 8003dd4:	4b0c      	ldr	r3, [pc, #48]	; (8003e08 <statusToInt+0xec>)
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	461a      	mov	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	00db      	lsls	r3, r3, #3
 8003de6:	607b      	str	r3, [r7, #4]
	fullRegister =  (fullRegister  |statusRegister.SDCARD);
 8003de8:	4b07      	ldr	r3, [pc, #28]	; (8003e08 <statusToInt+0xec>)
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	461a      	mov	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	607b      	str	r3, [r7, #4]
	return fullRegister;
 8003dfa:	687b      	ldr	r3, [r7, #4]
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	20002084 	.word	0x20002084

08003e0c <printStatusRegister>:
void printStatusRegister()
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
	int fullRegister = statusToInt();
 8003e12:	f7ff ff83 	bl	8003d1c <statusToInt>
 8003e16:	60b8      	str	r0, [r7, #8]
	int b =0;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	607b      	str	r3, [r7, #4]
	for(int i=31;i>=0;i--)
 8003e1c:	231f      	movs	r3, #31
 8003e1e:	60fb      	str	r3, [r7, #12]
 8003e20:	e022      	b.n	8003e68 <printStatusRegister+0x5c>
	{
		b = fullRegister >> i;
 8003e22:	68ba      	ldr	r2, [r7, #8]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	fa42 f303 	asr.w	r3, r2, r3
 8003e2a:	607b      	str	r3, [r7, #4]
		if(b & 1)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <printStatusRegister+0x32>
		{
			printf("1");
 8003e36:	2031      	movs	r0, #49	; 0x31
 8003e38:	f00d fa16 	bl	8011268 <putchar>
 8003e3c:	e002      	b.n	8003e44 <printStatusRegister+0x38>
		}else
		{
			printf("0");
 8003e3e:	2030      	movs	r0, #48	; 0x30
 8003e40:	f00d fa12 	bl	8011268 <putchar>
		}
		if(i%3 == 0)
 8003e44:	68f9      	ldr	r1, [r7, #12]
 8003e46:	4b0d      	ldr	r3, [pc, #52]	; (8003e7c <printStatusRegister+0x70>)
 8003e48:	fb83 3201 	smull	r3, r2, r3, r1
 8003e4c:	17cb      	asrs	r3, r1, #31
 8003e4e:	1ad2      	subs	r2, r2, r3
 8003e50:	4613      	mov	r3, r2
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	4413      	add	r3, r2
 8003e56:	1aca      	subs	r2, r1, r3
 8003e58:	2a00      	cmp	r2, #0
 8003e5a:	d102      	bne.n	8003e62 <printStatusRegister+0x56>
		{
			printf(" ");
 8003e5c:	2020      	movs	r0, #32
 8003e5e:	f00d fa03 	bl	8011268 <putchar>
	for(int i=31;i>=0;i--)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	3b01      	subs	r3, #1
 8003e66:	60fb      	str	r3, [r7, #12]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	dad9      	bge.n	8003e22 <printStatusRegister+0x16>
		}

	}
	printf("\n");
 8003e6e:	200a      	movs	r0, #10
 8003e70:	f00d f9fa 	bl	8011268 <putchar>
};
 8003e74:	bf00      	nop
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	55555556 	.word	0x55555556

08003e80 <initSensors>:

}

ADCSensor sensord;
void initSensors()
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af02      	add	r7, sp, #8
	  mlxInit(&mlxLFSensor,MLXLF,&hi2c1,0);
 8003e86:	2300      	movs	r3, #0
 8003e88:	4a11      	ldr	r2, [pc, #68]	; (8003ed0 <initSensors+0x50>)
 8003e8a:	2102      	movs	r1, #2
 8003e8c:	4811      	ldr	r0, [pc, #68]	; (8003ed4 <initSensors+0x54>)
 8003e8e:	f000 fe3f 	bl	8004b10 <mlxInit>
	  //mlxInit(&mlxRFSensor,MLXRF,&hi2c3,mlxRFSensor.File);
	  gyroInit(&gyro);
 8003e92:	4811      	ldr	r0, [pc, #68]	; (8003ed8 <initSensors+0x58>)
 8003e94:	f000 fd62 	bl	800495c <gyroInit>
	  absInit(&absLFSensor, ABSLF, &htim3, TIM_CHANNEL_1, 0);
 8003e98:	2300      	movs	r3, #0
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	4a0f      	ldr	r2, [pc, #60]	; (8003edc <initSensors+0x5c>)
 8003ea0:	2104      	movs	r1, #4
 8003ea2:	480f      	ldr	r0, [pc, #60]	; (8003ee0 <initSensors+0x60>)
 8003ea4:	f000 fd0e 	bl	80048c4 <absInit>
	  absInit(&absRFSensor, ABSLF, &htim4, TIM_CHANNEL_1, 0);
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	2300      	movs	r3, #0
 8003eae:	4a0d      	ldr	r2, [pc, #52]	; (8003ee4 <initSensors+0x64>)
 8003eb0:	2104      	movs	r1, #4
 8003eb2:	480d      	ldr	r0, [pc, #52]	; (8003ee8 <initSensors+0x68>)
 8003eb4:	f000 fd06 	bl	80048c4 <absInit>
	  damperInit(&sensord, DAMPERRF, 0);
 8003eb8:	2200      	movs	r2, #0
 8003eba:	2108      	movs	r1, #8
 8003ebc:	480b      	ldr	r0, [pc, #44]	; (8003eec <initSensors+0x6c>)
 8003ebe:	f000 fcb1 	bl	8004824 <damperInit>
	  GPSInit(&gpsSensor);
 8003ec2:	480b      	ldr	r0, [pc, #44]	; (8003ef0 <initSensors+0x70>)
 8003ec4:	f000 fbe2 	bl	800468c <GPSInit>
	  //res = res | mlxInit(&rightFWheelMLX);


}
 8003ec8:	bf00      	nop
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	20000f20 	.word	0x20000f20
 8003ed4:	20002228 	.word	0x20002228
 8003ed8:	20005f90 	.word	0x20005f90
 8003edc:	200062c4 	.word	0x200062c4
 8003ee0:	20006038 	.word	0x20006038
 8003ee4:	20006310 	.word	0x20006310
 8003ee8:	2000606c 	.word	0x2000606c
 8003eec:	2000208c 	.word	0x2000208c
 8003ef0:	200060a0 	.word	0x200060a0

08003ef4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]

  if (htim == &htim14 )
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a2c      	ldr	r2, [pc, #176]	; (8003fb0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d150      	bne.n	8003fa6 <HAL_TIM_PeriodElapsedCallback+0xb2>
	 {
		 sdDeInit();
		 sdInit(&fileSystem);
		 openAllFiles();
	 }*/
	 statusRegister.checkTime -= 25;
 8003f04:	4b2b      	ldr	r3, [pc, #172]	; (8003fb4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003f06:	889b      	ldrh	r3, [r3, #4]
 8003f08:	3b19      	subs	r3, #25
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	4b29      	ldr	r3, [pc, #164]	; (8003fb4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003f0e:	809a      	strh	r2, [r3, #4]
	 if( statusRegister.checkTime <= 0)
 8003f10:	4b28      	ldr	r3, [pc, #160]	; (8003fb4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003f12:	889b      	ldrh	r3, [r3, #4]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d105      	bne.n	8003f24 <HAL_TIM_PeriodElapsedCallback+0x30>
	 {
		 //Check all sensors
		 statusRegister.checkTime = SENSOR_ALL_CHECK_TIME;
 8003f18:	4b26      	ldr	r3, [pc, #152]	; (8003fb4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003f1a:	f242 7210 	movw	r2, #10000	; 0x2710
 8003f1e:	809a      	strh	r2, [r3, #4]
		 printStatusRegister();
 8003f20:	f7ff ff74 	bl	8003e0c <printStatusRegister>

	 }
	 mlxLFSensor.timeToNextRead -= 25;
 8003f24:	4b24      	ldr	r3, [pc, #144]	; (8003fb8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	3b19      	subs	r3, #25
 8003f2a:	4a23      	ldr	r2, [pc, #140]	; (8003fb8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8003f2c:	6213      	str	r3, [r2, #32]
	 if(mlxLFSensor.timeToNextRead <= 0)
 8003f2e:	4b22      	ldr	r3, [pc, #136]	; (8003fb8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	dc06      	bgt.n	8003f44 <HAL_TIM_PeriodElapsedCallback+0x50>
	 {
		 mlxLFSensor.dataReady = 1;
 8003f36:	4b20      	ldr	r3, [pc, #128]	; (8003fb8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8003f38:	2201      	movs	r2, #1
 8003f3a:	619a      	str	r2, [r3, #24]
		 mlxLFSensor.timeToNextRead = MLX_DATA_RATE;
 8003f3c:	4b1e      	ldr	r3, [pc, #120]	; (8003fb8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8003f3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f42:	621a      	str	r2, [r3, #32]
	 }
	 mlxRFSensor.timeToNextRead -= 25;
 8003f44:	4b1d      	ldr	r3, [pc, #116]	; (8003fbc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	3b19      	subs	r3, #25
 8003f4a:	4a1c      	ldr	r2, [pc, #112]	; (8003fbc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8003f4c:	6213      	str	r3, [r2, #32]
	 if(mlxRFSensor.timeToNextRead <= 0)
 8003f4e:	4b1b      	ldr	r3, [pc, #108]	; (8003fbc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	dc06      	bgt.n	8003f64 <HAL_TIM_PeriodElapsedCallback+0x70>
	 {
	 	mlxRFSensor.dataReady = 1;
 8003f56:	4b19      	ldr	r3, [pc, #100]	; (8003fbc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8003f58:	2201      	movs	r2, #1
 8003f5a:	619a      	str	r2, [r3, #24]
	    mlxRFSensor.timeToNextRead = MLX_DATA_RATE;
 8003f5c:	4b17      	ldr	r3, [pc, #92]	; (8003fbc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8003f5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f62:	621a      	str	r2, [r3, #32]
	 }
	 absLFSensor.timeToZeroSpeed -= 25;
 8003f64:	4b16      	ldr	r3, [pc, #88]	; (8003fc0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8003f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f68:	3b19      	subs	r3, #25
 8003f6a:	4a15      	ldr	r2, [pc, #84]	; (8003fc0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8003f6c:	6293      	str	r3, [r2, #40]	; 0x28
	 if(absLFSensor.timeToZeroSpeed <= 0)
 8003f6e:	4b14      	ldr	r3, [pc, #80]	; (8003fc0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8003f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	dc08      	bgt.n	8003f88 <HAL_TIM_PeriodElapsedCallback+0x94>
	 {
		 absLFSensor.data = 0;
 8003f76:	4b12      	ldr	r3, [pc, #72]	; (8003fc0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	621a      	str	r2, [r3, #32]
		 absLFSensor.dataReady = 1;
 8003f7c:	4b10      	ldr	r3, [pc, #64]	; (8003fc0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8003f7e:	2201      	movs	r2, #1
 8003f80:	619a      	str	r2, [r3, #24]
		 absLFSensor.timeToZeroSpeed = ABS_ZERO_SPEED_TIME;
 8003f82:	4b0f      	ldr	r3, [pc, #60]	; (8003fc0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8003f84:	2264      	movs	r2, #100	; 0x64
 8003f86:	629a      	str	r2, [r3, #40]	; 0x28
	 }
	 gyro.timeToNextRead -= 25;
 8003f88:	4b0e      	ldr	r3, [pc, #56]	; (8003fc4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	3b19      	subs	r3, #25
 8003f8e:	4a0d      	ldr	r2, [pc, #52]	; (8003fc4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8003f90:	6213      	str	r3, [r2, #32]
	 if(gyro.timeToNextRead <= 0)
 8003f92:	4b0c      	ldr	r3, [pc, #48]	; (8003fc4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	dc05      	bgt.n	8003fa6 <HAL_TIM_PeriodElapsedCallback+0xb2>
	 {
		 gyro.dataReady = 1;
 8003f9a:	4b0a      	ldr	r3, [pc, #40]	; (8003fc4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	619a      	str	r2, [r3, #24]
		 gyro.timeToNextRead = GYRO_DATA_RATE;
 8003fa0:	4b08      	ldr	r3, [pc, #32]	; (8003fc4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8003fa2:	22fa      	movs	r2, #250	; 0xfa
 8003fa4:	621a      	str	r2, [r3, #32]
	 }
  }
}
 8003fa6:	bf00      	nop
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	2000635c 	.word	0x2000635c
 8003fb4:	20002084 	.word	0x20002084
 8003fb8:	20002228 	.word	0x20002228
 8003fbc:	200040dc 	.word	0x200040dc
 8003fc0:	20006038 	.word	0x20006038
 8003fc4:	20005f90 	.word	0x20005f90

08003fc8 <HAL_TIM_IC_CaptureCallback>:
}


//ABS
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  if (htim == absLFSensor.timer) {
 8003fd0:	4b20      	ldr	r3, [pc, #128]	; (8004054 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8003fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d116      	bne.n	8004008 <HAL_TIM_IC_CaptureCallback+0x40>
    switch (HAL_TIM_GetActiveChannel(absLFSensor.timer)) {
 8003fda:	4b1e      	ldr	r3, [pc, #120]	; (8004054 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8003fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f007 fd36 	bl	800ba50 <HAL_TIM_GetActiveChannel>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d12a      	bne.n	8004040 <HAL_TIM_IC_CaptureCallback+0x78>
      case HAL_TIM_ACTIVE_CHANNEL_1:
    	  absLFSensor.data = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8003fea:	2100      	movs	r1, #0
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f007 fccd 	bl	800b98c <HAL_TIM_ReadCapturedValue>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	4b17      	ldr	r3, [pc, #92]	; (8004054 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8003ff8:	621a      	str	r2, [r3, #32]
    	  absLFSensor.timeToZeroSpeed = ABS_ZERO_SPEED_TIME;
 8003ffa:	4b16      	ldr	r3, [pc, #88]	; (8004054 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8003ffc:	2264      	movs	r2, #100	; 0x64
 8003ffe:	629a      	str	r2, [r3, #40]	; 0x28
    	  absLFSensor.dataReady = 1;
 8004000:	4b14      	ldr	r3, [pc, #80]	; (8004054 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8004002:	2201      	movs	r2, #1
 8004004:	619a      	str	r2, [r3, #24]
        break;
 8004006:	e020      	b.n	800404a <HAL_TIM_IC_CaptureCallback+0x82>
      default:
        break;
    }
  }else if(htim == absRFSensor.timer) {
 8004008:	4b13      	ldr	r3, [pc, #76]	; (8004058 <HAL_TIM_IC_CaptureCallback+0x90>)
 800400a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	429a      	cmp	r2, r3
 8004010:	d118      	bne.n	8004044 <HAL_TIM_IC_CaptureCallback+0x7c>
        switch (HAL_TIM_GetActiveChannel(absRFSensor.timer)) {
 8004012:	4b11      	ldr	r3, [pc, #68]	; (8004058 <HAL_TIM_IC_CaptureCallback+0x90>)
 8004014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004016:	4618      	mov	r0, r3
 8004018:	f007 fd1a 	bl	800ba50 <HAL_TIM_GetActiveChannel>
 800401c:	4603      	mov	r3, r0
 800401e:	2b01      	cmp	r3, #1
 8004020:	d112      	bne.n	8004048 <HAL_TIM_IC_CaptureCallback+0x80>
          case HAL_TIM_ACTIVE_CHANNEL_1:
        	  absRFSensor.data = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8004022:	2100      	movs	r1, #0
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f007 fcb1 	bl	800b98c <HAL_TIM_ReadCapturedValue>
 800402a:	4603      	mov	r3, r0
 800402c:	461a      	mov	r2, r3
 800402e:	4b0a      	ldr	r3, [pc, #40]	; (8004058 <HAL_TIM_IC_CaptureCallback+0x90>)
 8004030:	621a      	str	r2, [r3, #32]
        	  absRFSensor.timeToZeroSpeed = ABS_ZERO_SPEED_TIME;
 8004032:	4b09      	ldr	r3, [pc, #36]	; (8004058 <HAL_TIM_IC_CaptureCallback+0x90>)
 8004034:	2264      	movs	r2, #100	; 0x64
 8004036:	629a      	str	r2, [r3, #40]	; 0x28
        	  absRFSensor.dataReady = 1;
 8004038:	4b07      	ldr	r3, [pc, #28]	; (8004058 <HAL_TIM_IC_CaptureCallback+0x90>)
 800403a:	2201      	movs	r2, #1
 800403c:	619a      	str	r2, [r3, #24]
            break;
 800403e:	e004      	b.n	800404a <HAL_TIM_IC_CaptureCallback+0x82>
        break;
 8004040:	bf00      	nop
 8004042:	e002      	b.n	800404a <HAL_TIM_IC_CaptureCallback+0x82>
          default:
            break;
        }
  }
 8004044:	bf00      	nop
 8004046:	e000      	b.n	800404a <HAL_TIM_IC_CaptureCallback+0x82>
            break;
 8004048:	bf00      	nop
}
 800404a:	bf00      	nop
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	20006038 	.word	0x20006038
 8004058:	2000606c 	.word	0x2000606c

0800405c <HAL_UART_RxCpltCallback>:
char received_command[255];
int command_lenght = 0;
uint8_t bufor;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]

	if(huart==&huart7)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a12      	ldr	r2, [pc, #72]	; (80040b0 <HAL_UART_RxCpltCallback+0x54>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d11c      	bne.n	80040a6 <HAL_UART_RxCpltCallback+0x4a>
				sendAllFilesToUart();
				openAllFiles();
			}
			received_command[0] = 0;
		}*/
		strncat(gpsSensor.bufor, &(gpsSensor.Rx_data), 1);
 800406c:	2201      	movs	r2, #1
 800406e:	4911      	ldr	r1, [pc, #68]	; (80040b4 <HAL_UART_RxCpltCallback+0x58>)
 8004070:	4811      	ldr	r0, [pc, #68]	; (80040b8 <HAL_UART_RxCpltCallback+0x5c>)
 8004072:	f00d f987 	bl	8011384 <strncat>
		  if(gpsSensor.Rx_data == '\n')
 8004076:	4b11      	ldr	r3, [pc, #68]	; (80040bc <HAL_UART_RxCpltCallback+0x60>)
 8004078:	f893 3020 	ldrb.w	r3, [r3, #32]
 800407c:	2b0a      	cmp	r3, #10
 800407e:	d10a      	bne.n	8004096 <HAL_UART_RxCpltCallback+0x3a>
		  {
		    strcpy(gpsSensor.data,gpsSensor.bufor);
 8004080:	490d      	ldr	r1, [pc, #52]	; (80040b8 <HAL_UART_RxCpltCallback+0x5c>)
 8004082:	480f      	ldr	r0, [pc, #60]	; (80040c0 <HAL_UART_RxCpltCallback+0x64>)
 8004084:	f00d f976 	bl	8011374 <strcpy>
		    gpsSensor.bufor[0]='\0';
 8004088:	4b0c      	ldr	r3, [pc, #48]	; (80040bc <HAL_UART_RxCpltCallback+0x60>)
 800408a:	2200      	movs	r2, #0
 800408c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		    gpsSensor.dataReady=1;
 8004090:	4b0a      	ldr	r3, [pc, #40]	; (80040bc <HAL_UART_RxCpltCallback+0x60>)
 8004092:	2201      	movs	r2, #1
 8004094:	619a      	str	r2, [r3, #24]
		  }
		  HAL_UART_Receive_IT(gpsSensor.uart, &(gpsSensor.Rx_data), 1);
 8004096:	4b09      	ldr	r3, [pc, #36]	; (80040bc <HAL_UART_RxCpltCallback+0x60>)
 8004098:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800409c:	2201      	movs	r2, #1
 800409e:	4905      	ldr	r1, [pc, #20]	; (80040b4 <HAL_UART_RxCpltCallback+0x58>)
 80040a0:	4618      	mov	r0, r3
 80040a2:	f008 f98c 	bl	800c3be <HAL_UART_Receive_IT>
	}
	//HAL_UART_Receive_IT(&huart7, &bufor, 1);
}
 80040a6:	bf00      	nop
 80040a8:	3708      	adds	r7, #8
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	200063a8 	.word	0x200063a8
 80040b4:	200060c0 	.word	0x200060c0
 80040b8:	200060c1 	.word	0x200060c1
 80040bc:	200060a0 	.word	0x200060a0
 80040c0:	200061c0 	.word	0x200061c0

080040c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b088      	sub	sp, #32
 80040c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80040ca:	f001 f9eb 	bl	80054a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80040ce:	f000 f89d 	bl	800420c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80040d2:	f7ff fbcb 	bl	800386c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80040d6:	f001 f901 	bl	80052dc <MX_USART3_UART_Init>
  MX_FATFS_Init();
 80040da:	f00a f91d 	bl	800e318 <MX_FATFS_Init>
  MX_DMA_Init();
 80040de:	f7ff fb9f 	bl	8003820 <MX_DMA_Init>
  MX_I2C1_Init();
 80040e2:	f7ff fc23 	bl	800392c <MX_I2C1_Init>
  MX_I2C2_Init();
 80040e6:	f7ff fc61 	bl	80039ac <MX_I2C2_Init>
  MX_UART7_Init();
 80040ea:	f001 f8c3 	bl	8005274 <MX_UART7_Init>
  MX_SDMMC2_SD_Init();
 80040ee:	f000 f9b3 	bl	8004458 <MX_SDMMC2_SD_Init>
  MX_RTC_Init();
 80040f2:	f000 f93b 	bl	800436c <MX_RTC_Init>
  MX_ADC1_Init();
 80040f6:	f7ff f88d 	bl	8003214 <MX_ADC1_Init>
  MX_ADC2_Init();
 80040fa:	f7ff f8dd 	bl	80032b8 <MX_ADC2_Init>
  MX_ADC3_Init();
 80040fe:	f7ff f92d 	bl	800335c <MX_ADC3_Init>
  MX_CAN1_Init();
 8004102:	f7ff fa83 	bl	800360c <MX_CAN1_Init>
  MX_CAN2_Init();
 8004106:	f7ff fab5 	bl	8003674 <MX_CAN2_Init>
  MX_I2C3_Init();
 800410a:	f7ff fc8f 	bl	8003a2c <MX_I2C3_Init>
  MX_I2C4_Init();
 800410e:	f7ff fccd 	bl	8003aac <MX_I2C4_Init>
  MX_TIM3_Init();
 8004112:	f000 fecd 	bl	8004eb0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8004116:	f000 ff59 	bl	8004fcc <MX_TIM4_Init>
  MX_TIM14_Init();
 800411a:	f000 ffe5 	bl	80050e8 <MX_TIM14_Init>



  RTC_TimeTypeDef time;
  RTC_DateTypeDef date;
  statusRegister.checkTime = SENSOR_ALL_CHECK_TIME;
 800411e:	4b30      	ldr	r3, [pc, #192]	; (80041e0 <main+0x11c>)
 8004120:	f242 7210 	movw	r2, #10000	; 0x2710
 8004124:	809a      	strh	r2, [r3, #4]
  HAL_TIM_Base_Start_IT(&htim14);
 8004126:	482f      	ldr	r0, [pc, #188]	; (80041e4 <main+0x120>)
 8004128:	f006 ff3e 	bl	800afa8 <HAL_TIM_Base_Start_IT>



  HAL_Delay(200);
 800412c:	20c8      	movs	r0, #200	; 0xc8
 800412e:	f001 fa1f 	bl	8005570 <HAL_Delay>


  HAL_Delay(1000);
 8004132:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004136:	f001 fa1b 	bl	8005570 <HAL_Delay>
  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 800413a:	1d3b      	adds	r3, r7, #4
 800413c:	2200      	movs	r2, #0
 800413e:	4619      	mov	r1, r3
 8004140:	4829      	ldr	r0, [pc, #164]	; (80041e8 <main+0x124>)
 8004142:	f005 fa5f 	bl	8009604 <HAL_RTC_GetDate>
  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8004146:	f107 0308 	add.w	r3, r7, #8
 800414a:	2200      	movs	r2, #0
 800414c:	4619      	mov	r1, r3
 800414e:	4826      	ldr	r0, [pc, #152]	; (80041e8 <main+0x124>)
 8004150:	f005 f952 	bl	80093f8 <HAL_RTC_GetTime>
  printf("Aktualny czas: %02d:%02d:%02d\n", time.Hours, time.Minutes, time.Seconds);
 8004154:	7a3b      	ldrb	r3, [r7, #8]
 8004156:	4619      	mov	r1, r3
 8004158:	7a7b      	ldrb	r3, [r7, #9]
 800415a:	461a      	mov	r2, r3
 800415c:	7abb      	ldrb	r3, [r7, #10]
 800415e:	4823      	ldr	r0, [pc, #140]	; (80041ec <main+0x128>)
 8004160:	f00d f870 	bl	8011244 <printf>
  initSensors();
 8004164:	f7ff fe8c 	bl	8003e80 <initSensors>
  sdInit(&fileSystem);
 8004168:	4821      	ldr	r0, [pc, #132]	; (80041f0 <main+0x12c>)
 800416a:	f7fe fd1b 	bl	8002ba4 <sdInit>
  printStatusRegister();
 800416e:	f7ff fe4d 	bl	8003e0c <printStatusRegister>

  openAllFiles();
 8004172:	f7fe fd3d 	bl	8002bf0 <openAllFiles>


  HAL_TIM_Base_Start(&htim3);
 8004176:	481f      	ldr	r0, [pc, #124]	; (80041f4 <main+0x130>)
 8004178:	f006 fea6 	bl	800aec8 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800417c:	2100      	movs	r1, #0
 800417e:	481d      	ldr	r0, [pc, #116]	; (80041f4 <main+0x130>)
 8004180:	f006 ffec 	bl	800b15c <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start(&htim4);
 8004184:	481c      	ldr	r0, [pc, #112]	; (80041f8 <main+0x134>)
 8004186:	f006 fe9f 	bl	800aec8 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 800418a:	2100      	movs	r1, #0
 800418c:	481a      	ldr	r0, [pc, #104]	; (80041f8 <main+0x134>)
 800418e:	f006 ffe5 	bl	800b15c <HAL_TIM_IC_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if((statusRegister.SDCARD & 0b100) < SENSOR_FAIL)
 8004192:	4b13      	ldr	r3, [pc, #76]	; (80041e0 <main+0x11c>)
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800419a:	b2db      	uxtb	r3, r3
 800419c:	f003 0304 	and.w	r3, r3, #4
 80041a0:	2b03      	cmp	r3, #3
 80041a2:	dcf6      	bgt.n	8004192 <main+0xce>
	  {
		  if(gyro.dataReady)
 80041a4:	4b15      	ldr	r3, [pc, #84]	; (80041fc <main+0x138>)
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d005      	beq.n	80041b8 <main+0xf4>
		  {
			  gyroGetData(&gyro);
 80041ac:	4813      	ldr	r0, [pc, #76]	; (80041fc <main+0x138>)
 80041ae:	f000 fc8f 	bl	8004ad0 <gyroGetData>
			  gyroSaveData(&gyro);
 80041b2:	4812      	ldr	r0, [pc, #72]	; (80041fc <main+0x138>)
 80041b4:	f7fe ff3c 	bl	8003030 <gyroSaveData>
			  //absSaveData(&absLFSensor);
		  }
		  if(absRFSensor.dataReady){
			  //absSaveData(&absRFSensor);
		  }
		  if(gpsSensor.dataReady)
 80041b8:	4b11      	ldr	r3, [pc, #68]	; (8004200 <main+0x13c>)
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d0e8      	beq.n	8004192 <main+0xce>
		  {
			  HAL_UART_Transmit(&huart3, (gpsSensor.data), strlen(gpsSensor.data), HAL_MAX_DELAY);
 80041c0:	4810      	ldr	r0, [pc, #64]	; (8004204 <main+0x140>)
 80041c2:	f7fc f83d 	bl	8000240 <strlen>
 80041c6:	4603      	mov	r3, r0
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	f04f 33ff 	mov.w	r3, #4294967295
 80041ce:	490d      	ldr	r1, [pc, #52]	; (8004204 <main+0x140>)
 80041d0:	480d      	ldr	r0, [pc, #52]	; (8004208 <main+0x144>)
 80041d2:	f008 f861 	bl	800c298 <HAL_UART_Transmit>
			 gpsSaveData(&gpsSensor);
 80041d6:	480a      	ldr	r0, [pc, #40]	; (8004200 <main+0x13c>)
 80041d8:	f7fe fea2 	bl	8002f20 <gpsSaveData>
	  if((statusRegister.SDCARD & 0b100) < SENSOR_FAIL)
 80041dc:	e7d9      	b.n	8004192 <main+0xce>
 80041de:	bf00      	nop
 80041e0:	20002084 	.word	0x20002084
 80041e4:	2000635c 	.word	0x2000635c
 80041e8:	200020c4 	.word	0x200020c4
 80041ec:	08017584 	.word	0x08017584
 80041f0:	20001050 	.word	0x20001050
 80041f4:	200062c4 	.word	0x200062c4
 80041f8:	20006310 	.word	0x20006310
 80041fc:	20005f90 	.word	0x20005f90
 8004200:	200060a0 	.word	0x200060a0
 8004204:	200061c0 	.word	0x200061c0
 8004208:	2000642c 	.word	0x2000642c

0800420c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b0b8      	sub	sp, #224	; 0xe0
 8004210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004212:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004216:	2234      	movs	r2, #52	; 0x34
 8004218:	2100      	movs	r1, #0
 800421a:	4618      	mov	r0, r3
 800421c:	f00c fffe 	bl	801121c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004220:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	605a      	str	r2, [r3, #4]
 800422a:	609a      	str	r2, [r3, #8]
 800422c:	60da      	str	r2, [r3, #12]
 800422e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004230:	f107 0308 	add.w	r3, r7, #8
 8004234:	2290      	movs	r2, #144	; 0x90
 8004236:	2100      	movs	r1, #0
 8004238:	4618      	mov	r0, r3
 800423a:	f00c ffef 	bl	801121c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800423e:	f003 febf 	bl	8007fc0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8004242:	4b44      	ldr	r3, [pc, #272]	; (8004354 <SystemClock_Config+0x148>)
 8004244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004246:	4a43      	ldr	r2, [pc, #268]	; (8004354 <SystemClock_Config+0x148>)
 8004248:	f023 0318 	bic.w	r3, r3, #24
 800424c:	6713      	str	r3, [r2, #112]	; 0x70
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800424e:	4b41      	ldr	r3, [pc, #260]	; (8004354 <SystemClock_Config+0x148>)
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	4a40      	ldr	r2, [pc, #256]	; (8004354 <SystemClock_Config+0x148>)
 8004254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004258:	6413      	str	r3, [r2, #64]	; 0x40
 800425a:	4b3e      	ldr	r3, [pc, #248]	; (8004354 <SystemClock_Config+0x148>)
 800425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004262:	607b      	str	r3, [r7, #4]
 8004264:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004266:	4b3c      	ldr	r3, [pc, #240]	; (8004358 <SystemClock_Config+0x14c>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800426e:	4a3a      	ldr	r2, [pc, #232]	; (8004358 <SystemClock_Config+0x14c>)
 8004270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004274:	6013      	str	r3, [r2, #0]
 8004276:	4b38      	ldr	r3, [pc, #224]	; (8004358 <SystemClock_Config+0x14c>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800427e:	603b      	str	r3, [r7, #0]
 8004280:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8004282:	2305      	movs	r3, #5
 8004284:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004288:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800428c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004290:	2301      	movs	r3, #1
 8004292:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004296:	2302      	movs	r3, #2
 8004298:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800429c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80042a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 80042a4:	2319      	movs	r3, #25
 80042a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 192;
 80042aa:	23c0      	movs	r3, #192	; 0xc0
 80042ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80042b0:	2306      	movs	r3, #6
 80042b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80042b6:	2304      	movs	r3, #4
 80042b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80042bc:	2302      	movs	r3, #2
 80042be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80042c2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80042c6:	4618      	mov	r0, r3
 80042c8:	f003 fe8a 	bl	8007fe0 <HAL_RCC_OscConfig>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80042d2:	f000 f845 	bl	8004360 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80042d6:	230f      	movs	r3, #15
 80042d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80042dc:	2302      	movs	r3, #2
 80042de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80042e2:	2300      	movs	r3, #0
 80042e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80042e8:	2300      	movs	r3, #0
 80042ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80042ee:	2300      	movs	r3, #0
 80042f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80042f4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80042f8:	2101      	movs	r1, #1
 80042fa:	4618      	mov	r0, r3
 80042fc:	f004 f91e 	bl	800853c <HAL_RCC_ClockConfig>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <SystemClock_Config+0xfe>
  {
    Error_Handler();
 8004306:	f000 f82b 	bl	8004360 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 800430a:	4b14      	ldr	r3, [pc, #80]	; (800435c <SystemClock_Config+0x150>)
 800430c:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_I2C4|RCC_PERIPHCLK_SDMMC2
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800430e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004312:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004314:	2300      	movs	r3, #0
 8004316:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8004318:	2300      	movs	r3, #0
 800431a:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800431c:	2300      	movs	r3, #0
 800431e:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8004320:	2300      	movs	r3, #0
 8004322:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8004324:	2300      	movs	r3, #0
 8004326:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8004328:	2300      	movs	r3, #0
 800432a:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800432c:	2300      	movs	r3, #0
 800432e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc2ClockSelection = RCC_SDMMC2CLKSOURCE_CLK48;
 8004332:	2300      	movs	r3, #0
 8004334:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004338:	f107 0308 	add.w	r3, r7, #8
 800433c:	4618      	mov	r0, r3
 800433e:	f004 fae3 	bl	8008908 <HAL_RCCEx_PeriphCLKConfig>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d001      	beq.n	800434c <SystemClock_Config+0x140>
  {
    Error_Handler();
 8004348:	f000 f80a 	bl	8004360 <Error_Handler>
  }
}
 800434c:	bf00      	nop
 800434e:	37e0      	adds	r7, #224	; 0xe0
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	40023800 	.word	0x40023800
 8004358:	40007000 	.word	0x40007000
 800435c:	0423d120 	.word	0x0423d120

08004360 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004360:	b480      	push	{r7}
 8004362:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004364:	b672      	cpsid	i
}
 8004366:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004368:	e7fe      	b.n	8004368 <Error_Handler+0x8>
	...

0800436c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b088      	sub	sp, #32
 8004370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8004372:	f107 0308 	add.w	r3, r7, #8
 8004376:	2200      	movs	r2, #0
 8004378:	601a      	str	r2, [r3, #0]
 800437a:	605a      	str	r2, [r3, #4]
 800437c:	609a      	str	r2, [r3, #8]
 800437e:	60da      	str	r2, [r3, #12]
 8004380:	611a      	str	r2, [r3, #16]
 8004382:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8004384:	2300      	movs	r3, #0
 8004386:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004388:	4b24      	ldr	r3, [pc, #144]	; (800441c <MX_RTC_Init+0xb0>)
 800438a:	4a25      	ldr	r2, [pc, #148]	; (8004420 <MX_RTC_Init+0xb4>)
 800438c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800438e:	4b23      	ldr	r3, [pc, #140]	; (800441c <MX_RTC_Init+0xb0>)
 8004390:	2200      	movs	r2, #0
 8004392:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004394:	4b21      	ldr	r3, [pc, #132]	; (800441c <MX_RTC_Init+0xb0>)
 8004396:	227f      	movs	r2, #127	; 0x7f
 8004398:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800439a:	4b20      	ldr	r3, [pc, #128]	; (800441c <MX_RTC_Init+0xb0>)
 800439c:	22ff      	movs	r2, #255	; 0xff
 800439e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80043a0:	4b1e      	ldr	r3, [pc, #120]	; (800441c <MX_RTC_Init+0xb0>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80043a6:	4b1d      	ldr	r3, [pc, #116]	; (800441c <MX_RTC_Init+0xb0>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80043ac:	4b1b      	ldr	r3, [pc, #108]	; (800441c <MX_RTC_Init+0xb0>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80043b2:	481a      	ldr	r0, [pc, #104]	; (800441c <MX_RTC_Init+0xb0>)
 80043b4:	f004 fed0 	bl	8009158 <HAL_RTC_Init>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 80043be:	f7ff ffcf 	bl	8004360 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80043c2:	2300      	movs	r3, #0
 80043c4:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 80043c6:	2300      	movs	r3, #0
 80043c8:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 80043ca:	2300      	movs	r3, #0
 80043cc:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80043ce:	2300      	movs	r3, #0
 80043d0:	61bb      	str	r3, [r7, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80043d2:	2300      	movs	r3, #0
 80043d4:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80043d6:	f107 0308 	add.w	r3, r7, #8
 80043da:	2201      	movs	r2, #1
 80043dc:	4619      	mov	r1, r3
 80043de:	480f      	ldr	r0, [pc, #60]	; (800441c <MX_RTC_Init+0xb0>)
 80043e0:	f004 ff4c 	bl	800927c <HAL_RTC_SetTime>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80043ea:	f7ff ffb9 	bl	8004360 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80043ee:	2301      	movs	r3, #1
 80043f0:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 80043f2:	2301      	movs	r3, #1
 80043f4:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 80043f6:	2301      	movs	r3, #1
 80043f8:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 80043fa:	2300      	movs	r3, #0
 80043fc:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80043fe:	1d3b      	adds	r3, r7, #4
 8004400:	2201      	movs	r2, #1
 8004402:	4619      	mov	r1, r3
 8004404:	4805      	ldr	r0, [pc, #20]	; (800441c <MX_RTC_Init+0xb0>)
 8004406:	f005 f855 	bl	80094b4 <HAL_RTC_SetDate>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8004410:	f7ff ffa6 	bl	8004360 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004414:	bf00      	nop
 8004416:	3720      	adds	r7, #32
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	200020c4 	.word	0x200020c4
 8004420:	40002800 	.word	0x40002800

08004424 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a07      	ldr	r2, [pc, #28]	; (8004450 <HAL_RTC_MspInit+0x2c>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d105      	bne.n	8004442 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004436:	4b07      	ldr	r3, [pc, #28]	; (8004454 <HAL_RTC_MspInit+0x30>)
 8004438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443a:	4a06      	ldr	r2, [pc, #24]	; (8004454 <HAL_RTC_MspInit+0x30>)
 800443c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004440:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8004442:	bf00      	nop
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	40002800 	.word	0x40002800
 8004454:	40023800 	.word	0x40023800

08004458 <MX_SDMMC2_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc2_tx;

/* SDMMC2 init function */

void MX_SDMMC2_SD_Init(void)
{
 8004458:	b480      	push	{r7}
 800445a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 800445c:	4b0c      	ldr	r3, [pc, #48]	; (8004490 <MX_SDMMC2_SD_Init+0x38>)
 800445e:	4a0d      	ldr	r2, [pc, #52]	; (8004494 <MX_SDMMC2_SD_Init+0x3c>)
 8004460:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8004462:	4b0b      	ldr	r3, [pc, #44]	; (8004490 <MX_SDMMC2_SD_Init+0x38>)
 8004464:	2200      	movs	r2, #0
 8004466:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8004468:	4b09      	ldr	r3, [pc, #36]	; (8004490 <MX_SDMMC2_SD_Init+0x38>)
 800446a:	2200      	movs	r2, #0
 800446c:	609a      	str	r2, [r3, #8]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800446e:	4b08      	ldr	r3, [pc, #32]	; (8004490 <MX_SDMMC2_SD_Init+0x38>)
 8004470:	2200      	movs	r2, #0
 8004472:	60da      	str	r2, [r3, #12]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8004474:	4b06      	ldr	r3, [pc, #24]	; (8004490 <MX_SDMMC2_SD_Init+0x38>)
 8004476:	2200      	movs	r2, #0
 8004478:	611a      	str	r2, [r3, #16]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800447a:	4b05      	ldr	r3, [pc, #20]	; (8004490 <MX_SDMMC2_SD_Init+0x38>)
 800447c:	2200      	movs	r2, #0
 800447e:	615a      	str	r2, [r3, #20]
  hsd2.Init.ClockDiv = 0;
 8004480:	4b03      	ldr	r3, [pc, #12]	; (8004490 <MX_SDMMC2_SD_Init+0x38>)
 8004482:	2200      	movs	r2, #0
 8004484:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8004486:	bf00      	nop
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	200020e4 	.word	0x200020e4
 8004494:	40011c00 	.word	0x40011c00

08004498 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b08a      	sub	sp, #40	; 0x28
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044a0:	f107 0314 	add.w	r3, r7, #20
 80044a4:	2200      	movs	r2, #0
 80044a6:	601a      	str	r2, [r3, #0]
 80044a8:	605a      	str	r2, [r3, #4]
 80044aa:	609a      	str	r2, [r3, #8]
 80044ac:	60da      	str	r2, [r3, #12]
 80044ae:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC2)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a6d      	ldr	r2, [pc, #436]	; (800466c <HAL_SD_MspInit+0x1d4>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	f040 80d4 	bne.w	8004664 <HAL_SD_MspInit+0x1cc>
  {
  /* USER CODE BEGIN SDMMC2_MspInit 0 */

  /* USER CODE END SDMMC2_MspInit 0 */
    /* SDMMC2 clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 80044bc:	4b6c      	ldr	r3, [pc, #432]	; (8004670 <HAL_SD_MspInit+0x1d8>)
 80044be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c0:	4a6b      	ldr	r2, [pc, #428]	; (8004670 <HAL_SD_MspInit+0x1d8>)
 80044c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044c6:	6453      	str	r3, [r2, #68]	; 0x44
 80044c8:	4b69      	ldr	r3, [pc, #420]	; (8004670 <HAL_SD_MspInit+0x1d8>)
 80044ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d0:	613b      	str	r3, [r7, #16]
 80044d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80044d4:	4b66      	ldr	r3, [pc, #408]	; (8004670 <HAL_SD_MspInit+0x1d8>)
 80044d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d8:	4a65      	ldr	r2, [pc, #404]	; (8004670 <HAL_SD_MspInit+0x1d8>)
 80044da:	f043 0308 	orr.w	r3, r3, #8
 80044de:	6313      	str	r3, [r2, #48]	; 0x30
 80044e0:	4b63      	ldr	r3, [pc, #396]	; (8004670 <HAL_SD_MspInit+0x1d8>)
 80044e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e4:	f003 0308 	and.w	r3, r3, #8
 80044e8:	60fb      	str	r3, [r7, #12]
 80044ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80044ec:	4b60      	ldr	r3, [pc, #384]	; (8004670 <HAL_SD_MspInit+0x1d8>)
 80044ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f0:	4a5f      	ldr	r2, [pc, #380]	; (8004670 <HAL_SD_MspInit+0x1d8>)
 80044f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044f6:	6313      	str	r3, [r2, #48]	; 0x30
 80044f8:	4b5d      	ldr	r3, [pc, #372]	; (8004670 <HAL_SD_MspInit+0x1d8>)
 80044fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004500:	60bb      	str	r3, [r7, #8]
 8004502:	68bb      	ldr	r3, [r7, #8]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004504:	23c0      	movs	r3, #192	; 0xc0
 8004506:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004508:	2302      	movs	r3, #2
 800450a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800450c:	2300      	movs	r3, #0
 800450e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004510:	2303      	movs	r3, #3
 8004512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8004514:	230b      	movs	r3, #11
 8004516:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004518:	f107 0314 	add.w	r3, r7, #20
 800451c:	4619      	mov	r1, r3
 800451e:	4855      	ldr	r0, [pc, #340]	; (8004674 <HAL_SD_MspInit+0x1dc>)
 8004520:	f002 fa3a 	bl	8006998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8004524:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
 8004528:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800452a:	2302      	movs	r3, #2
 800452c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800452e:	2300      	movs	r3, #0
 8004530:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004532:	2303      	movs	r3, #3
 8004534:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8004536:	230b      	movs	r3, #11
 8004538:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800453a:	f107 0314 	add.w	r3, r7, #20
 800453e:	4619      	mov	r1, r3
 8004540:	484d      	ldr	r0, [pc, #308]	; (8004678 <HAL_SD_MspInit+0x1e0>)
 8004542:	f002 fa29 	bl	8006998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004546:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800454a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800454c:	2302      	movs	r3, #2
 800454e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004550:	2300      	movs	r3, #0
 8004552:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004554:	2303      	movs	r3, #3
 8004556:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8004558:	230a      	movs	r3, #10
 800455a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800455c:	f107 0314 	add.w	r3, r7, #20
 8004560:	4619      	mov	r1, r3
 8004562:	4845      	ldr	r0, [pc, #276]	; (8004678 <HAL_SD_MspInit+0x1e0>)
 8004564:	f002 fa18 	bl	8006998 <HAL_GPIO_Init>

    /* SDMMC2 DMA Init */
    /* SDMMC2_RX Init */
    hdma_sdmmc2_rx.Instance = DMA2_Stream0;
 8004568:	4b44      	ldr	r3, [pc, #272]	; (800467c <HAL_SD_MspInit+0x1e4>)
 800456a:	4a45      	ldr	r2, [pc, #276]	; (8004680 <HAL_SD_MspInit+0x1e8>)
 800456c:	601a      	str	r2, [r3, #0]
    hdma_sdmmc2_rx.Init.Channel = DMA_CHANNEL_11;
 800456e:	4b43      	ldr	r3, [pc, #268]	; (800467c <HAL_SD_MspInit+0x1e4>)
 8004570:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 8004574:	605a      	str	r2, [r3, #4]
    hdma_sdmmc2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004576:	4b41      	ldr	r3, [pc, #260]	; (800467c <HAL_SD_MspInit+0x1e4>)
 8004578:	2200      	movs	r2, #0
 800457a:	609a      	str	r2, [r3, #8]
    hdma_sdmmc2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800457c:	4b3f      	ldr	r3, [pc, #252]	; (800467c <HAL_SD_MspInit+0x1e4>)
 800457e:	2200      	movs	r2, #0
 8004580:	60da      	str	r2, [r3, #12]
    hdma_sdmmc2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004582:	4b3e      	ldr	r3, [pc, #248]	; (800467c <HAL_SD_MspInit+0x1e4>)
 8004584:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004588:	611a      	str	r2, [r3, #16]
    hdma_sdmmc2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800458a:	4b3c      	ldr	r3, [pc, #240]	; (800467c <HAL_SD_MspInit+0x1e4>)
 800458c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004590:	615a      	str	r2, [r3, #20]
    hdma_sdmmc2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004592:	4b3a      	ldr	r3, [pc, #232]	; (800467c <HAL_SD_MspInit+0x1e4>)
 8004594:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004598:	619a      	str	r2, [r3, #24]
    hdma_sdmmc2_rx.Init.Mode = DMA_PFCTRL;
 800459a:	4b38      	ldr	r3, [pc, #224]	; (800467c <HAL_SD_MspInit+0x1e4>)
 800459c:	2220      	movs	r2, #32
 800459e:	61da      	str	r2, [r3, #28]
    hdma_sdmmc2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80045a0:	4b36      	ldr	r3, [pc, #216]	; (800467c <HAL_SD_MspInit+0x1e4>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	621a      	str	r2, [r3, #32]
    hdma_sdmmc2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80045a6:	4b35      	ldr	r3, [pc, #212]	; (800467c <HAL_SD_MspInit+0x1e4>)
 80045a8:	2204      	movs	r2, #4
 80045aa:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80045ac:	4b33      	ldr	r3, [pc, #204]	; (800467c <HAL_SD_MspInit+0x1e4>)
 80045ae:	2203      	movs	r2, #3
 80045b0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc2_rx.Init.MemBurst = DMA_MBURST_INC4;
 80045b2:	4b32      	ldr	r3, [pc, #200]	; (800467c <HAL_SD_MspInit+0x1e4>)
 80045b4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80045b8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc2_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80045ba:	4b30      	ldr	r3, [pc, #192]	; (800467c <HAL_SD_MspInit+0x1e4>)
 80045bc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80045c0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc2_rx) != HAL_OK)
 80045c2:	482e      	ldr	r0, [pc, #184]	; (800467c <HAL_SD_MspInit+0x1e4>)
 80045c4:	f001 fdd2 	bl	800616c <HAL_DMA_Init>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <HAL_SD_MspInit+0x13a>
    {
      Error_Handler();
 80045ce:	f7ff fec7 	bl	8004360 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc2_rx);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a29      	ldr	r2, [pc, #164]	; (800467c <HAL_SD_MspInit+0x1e4>)
 80045d6:	641a      	str	r2, [r3, #64]	; 0x40
 80045d8:	4a28      	ldr	r2, [pc, #160]	; (800467c <HAL_SD_MspInit+0x1e4>)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC2_TX Init */
    hdma_sdmmc2_tx.Instance = DMA2_Stream5;
 80045de:	4b29      	ldr	r3, [pc, #164]	; (8004684 <HAL_SD_MspInit+0x1ec>)
 80045e0:	4a29      	ldr	r2, [pc, #164]	; (8004688 <HAL_SD_MspInit+0x1f0>)
 80045e2:	601a      	str	r2, [r3, #0]
    hdma_sdmmc2_tx.Init.Channel = DMA_CHANNEL_11;
 80045e4:	4b27      	ldr	r3, [pc, #156]	; (8004684 <HAL_SD_MspInit+0x1ec>)
 80045e6:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 80045ea:	605a      	str	r2, [r3, #4]
    hdma_sdmmc2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80045ec:	4b25      	ldr	r3, [pc, #148]	; (8004684 <HAL_SD_MspInit+0x1ec>)
 80045ee:	2240      	movs	r2, #64	; 0x40
 80045f0:	609a      	str	r2, [r3, #8]
    hdma_sdmmc2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80045f2:	4b24      	ldr	r3, [pc, #144]	; (8004684 <HAL_SD_MspInit+0x1ec>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	60da      	str	r2, [r3, #12]
    hdma_sdmmc2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80045f8:	4b22      	ldr	r3, [pc, #136]	; (8004684 <HAL_SD_MspInit+0x1ec>)
 80045fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045fe:	611a      	str	r2, [r3, #16]
    hdma_sdmmc2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004600:	4b20      	ldr	r3, [pc, #128]	; (8004684 <HAL_SD_MspInit+0x1ec>)
 8004602:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004606:	615a      	str	r2, [r3, #20]
    hdma_sdmmc2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004608:	4b1e      	ldr	r3, [pc, #120]	; (8004684 <HAL_SD_MspInit+0x1ec>)
 800460a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800460e:	619a      	str	r2, [r3, #24]
    hdma_sdmmc2_tx.Init.Mode = DMA_PFCTRL;
 8004610:	4b1c      	ldr	r3, [pc, #112]	; (8004684 <HAL_SD_MspInit+0x1ec>)
 8004612:	2220      	movs	r2, #32
 8004614:	61da      	str	r2, [r3, #28]
    hdma_sdmmc2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004616:	4b1b      	ldr	r3, [pc, #108]	; (8004684 <HAL_SD_MspInit+0x1ec>)
 8004618:	2200      	movs	r2, #0
 800461a:	621a      	str	r2, [r3, #32]
    hdma_sdmmc2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800461c:	4b19      	ldr	r3, [pc, #100]	; (8004684 <HAL_SD_MspInit+0x1ec>)
 800461e:	2204      	movs	r2, #4
 8004620:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004622:	4b18      	ldr	r3, [pc, #96]	; (8004684 <HAL_SD_MspInit+0x1ec>)
 8004624:	2203      	movs	r2, #3
 8004626:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc2_tx.Init.MemBurst = DMA_MBURST_INC4;
 8004628:	4b16      	ldr	r3, [pc, #88]	; (8004684 <HAL_SD_MspInit+0x1ec>)
 800462a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800462e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc2_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8004630:	4b14      	ldr	r3, [pc, #80]	; (8004684 <HAL_SD_MspInit+0x1ec>)
 8004632:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004636:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc2_tx) != HAL_OK)
 8004638:	4812      	ldr	r0, [pc, #72]	; (8004684 <HAL_SD_MspInit+0x1ec>)
 800463a:	f001 fd97 	bl	800616c <HAL_DMA_Init>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d001      	beq.n	8004648 <HAL_SD_MspInit+0x1b0>
    {
      Error_Handler();
 8004644:	f7ff fe8c 	bl	8004360 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc2_tx);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a0e      	ldr	r2, [pc, #56]	; (8004684 <HAL_SD_MspInit+0x1ec>)
 800464c:	63da      	str	r2, [r3, #60]	; 0x3c
 800464e:	4a0d      	ldr	r2, [pc, #52]	; (8004684 <HAL_SD_MspInit+0x1ec>)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 1, 0);
 8004654:	2200      	movs	r2, #0
 8004656:	2101      	movs	r1, #1
 8004658:	2067      	movs	r0, #103	; 0x67
 800465a:	f001 fd50 	bl	80060fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 800465e:	2067      	movs	r0, #103	; 0x67
 8004660:	f001 fd69 	bl	8006136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }
}
 8004664:	bf00      	nop
 8004666:	3728      	adds	r7, #40	; 0x28
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	40011c00 	.word	0x40011c00
 8004670:	40023800 	.word	0x40023800
 8004674:	40020c00 	.word	0x40020c00
 8004678:	40021800 	.word	0x40021800
 800467c:	20002168 	.word	0x20002168
 8004680:	40026410 	.word	0x40026410
 8004684:	200021c8 	.word	0x200021c8
 8004688:	40026488 	.word	0x40026488

0800468c <GPSInit>:
}


extern UART_HandleTypeDef huart3;
void GPSInit(GPSSensor * sens)
{
 800468c:	b590      	push	{r4, r7, lr}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
	sens->File = (FIL*)malloc(sizeof(FIL));
 8004694:	f241 0030 	movw	r0, #4144	; 0x1030
 8004698:	f00c fb7c 	bl	8010d94 <malloc>
 800469c:	4603      	mov	r3, r0
 800469e:	461a      	mov	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	601a      	str	r2, [r3, #0]
	sens->saveRate = GPS_ERROR_TIME;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80046aa:	61da      	str	r2, [r3, #28]
	sens->uart = &huart7;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a44      	ldr	r2, [pc, #272]	; (80047c0 <GPSInit+0x134>)
 80046b0:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	RTC_DateTypeDef date;
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80046b4:	f107 030c 	add.w	r3, r7, #12
 80046b8:	2200      	movs	r2, #0
 80046ba:	4619      	mov	r1, r3
 80046bc:	4841      	ldr	r0, [pc, #260]	; (80047c4 <GPSInit+0x138>)
 80046be:	f004 ffa1 	bl	8009604 <HAL_RTC_GetDate>
	sprintf(sens->path,"GPS%02d%02d.csv",date.Date,date.Month);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	1d18      	adds	r0, r3, #4
 80046c6:	7bbb      	ldrb	r3, [r7, #14]
 80046c8:	461a      	mov	r2, r3
 80046ca:	7b7b      	ldrb	r3, [r7, #13]
 80046cc:	493e      	ldr	r1, [pc, #248]	; (80047c8 <GPSInit+0x13c>)
 80046ce:	f00c fe31 	bl	8011334 <sprintf>
	//HAL_UART_Transmit(sens->uart, commands[1], strlen(commands[1]), HAL_MAX_DELAY); // zmiana baudrate GPSa
	//ReInit_UART1(); // zmiana BaudRate na stm
	HAL_UART_Receive_IT(sens->uart, &(sens->Rx_data), 1); // aktywacja przerwan
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	3320      	adds	r3, #32
 80046dc:	2201      	movs	r2, #1
 80046de:	4619      	mov	r1, r3
 80046e0:	f007 fe6d 	bl	800c3be <HAL_UART_Receive_IT>
	HAL_Delay(100);
 80046e4:	2064      	movs	r0, #100	; 0x64
 80046e6:	f000 ff43 	bl	8005570 <HAL_Delay>
	HAL_UART_Transmit(sens->uart, commands[0], strlen(commands[0]), HAL_MAX_DELAY);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f8d3 4220 	ldr.w	r4, [r3, #544]	; 0x220
 80046f0:	4836      	ldr	r0, [pc, #216]	; (80047cc <GPSInit+0x140>)
 80046f2:	f7fb fda5 	bl	8000240 <strlen>
 80046f6:	4603      	mov	r3, r0
 80046f8:	b29a      	uxth	r2, r3
 80046fa:	f04f 33ff 	mov.w	r3, #4294967295
 80046fe:	4933      	ldr	r1, [pc, #204]	; (80047cc <GPSInit+0x140>)
 8004700:	4620      	mov	r0, r4
 8004702:	f007 fdc9 	bl	800c298 <HAL_UART_Transmit>
	HAL_Delay(100);
 8004706:	2064      	movs	r0, #100	; 0x64
 8004708:	f000 ff32 	bl	8005570 <HAL_Delay>
	HAL_UART_Transmit(&huart3, (sens->data), strlen(sens->data), HAL_MAX_DELAY);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f503 7490 	add.w	r4, r3, #288	; 0x120
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8004718:	4618      	mov	r0, r3
 800471a:	f7fb fd91 	bl	8000240 <strlen>
 800471e:	4603      	mov	r3, r0
 8004720:	b29a      	uxth	r2, r3
 8004722:	f04f 33ff 	mov.w	r3, #4294967295
 8004726:	4621      	mov	r1, r4
 8004728:	4829      	ldr	r0, [pc, #164]	; (80047d0 <GPSInit+0x144>)
 800472a:	f007 fdb5 	bl	800c298 <HAL_UART_Transmit>

	HAL_UART_Transmit(sens->uart, commands[2], strlen(commands[2]), HAL_MAX_DELAY);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f8d3 4220 	ldr.w	r4, [r3, #544]	; 0x220
 8004734:	4827      	ldr	r0, [pc, #156]	; (80047d4 <GPSInit+0x148>)
 8004736:	f7fb fd83 	bl	8000240 <strlen>
 800473a:	4603      	mov	r3, r0
 800473c:	b29a      	uxth	r2, r3
 800473e:	f04f 33ff 	mov.w	r3, #4294967295
 8004742:	4924      	ldr	r1, [pc, #144]	; (80047d4 <GPSInit+0x148>)
 8004744:	4620      	mov	r0, r4
 8004746:	f007 fda7 	bl	800c298 <HAL_UART_Transmit>
	HAL_Delay(100);
 800474a:	2064      	movs	r0, #100	; 0x64
 800474c:	f000 ff10 	bl	8005570 <HAL_Delay>
	HAL_UART_Transmit(&huart3, (sens->data), strlen(sens->data), HAL_MAX_DELAY);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f503 7490 	add.w	r4, r3, #288	; 0x120
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800475c:	4618      	mov	r0, r3
 800475e:	f7fb fd6f 	bl	8000240 <strlen>
 8004762:	4603      	mov	r3, r0
 8004764:	b29a      	uxth	r2, r3
 8004766:	f04f 33ff 	mov.w	r3, #4294967295
 800476a:	4621      	mov	r1, r4
 800476c:	4818      	ldr	r0, [pc, #96]	; (80047d0 <GPSInit+0x144>)
 800476e:	f007 fd93 	bl	800c298 <HAL_UART_Transmit>

	HAL_UART_Transmit(sens->uart, commands[3], strlen(commands[3]), HAL_MAX_DELAY);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f8d3 4220 	ldr.w	r4, [r3, #544]	; 0x220
 8004778:	4817      	ldr	r0, [pc, #92]	; (80047d8 <GPSInit+0x14c>)
 800477a:	f7fb fd61 	bl	8000240 <strlen>
 800477e:	4603      	mov	r3, r0
 8004780:	b29a      	uxth	r2, r3
 8004782:	f04f 33ff 	mov.w	r3, #4294967295
 8004786:	4914      	ldr	r1, [pc, #80]	; (80047d8 <GPSInit+0x14c>)
 8004788:	4620      	mov	r0, r4
 800478a:	f007 fd85 	bl	800c298 <HAL_UART_Transmit>
	HAL_Delay(100);
 800478e:	2064      	movs	r0, #100	; 0x64
 8004790:	f000 feee 	bl	8005570 <HAL_Delay>
	HAL_UART_Transmit(&huart3, (sens->data), strlen(sens->data), HAL_MAX_DELAY);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f503 7490 	add.w	r4, r3, #288	; 0x120
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7fb fd4d 	bl	8000240 <strlen>
 80047a6:	4603      	mov	r3, r0
 80047a8:	b29a      	uxth	r2, r3
 80047aa:	f04f 33ff 	mov.w	r3, #4294967295
 80047ae:	4621      	mov	r1, r4
 80047b0:	4807      	ldr	r0, [pc, #28]	; (80047d0 <GPSInit+0x144>)
 80047b2:	f007 fd71 	bl	800c298 <HAL_UART_Transmit>
}
 80047b6:	bf00      	nop
 80047b8:	3714      	adds	r7, #20
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd90      	pop	{r4, r7, pc}
 80047be:	bf00      	nop
 80047c0:	200063a8 	.word	0x200063a8
 80047c4:	200020c4 	.word	0x200020c4
 80047c8:	080175b0 	.word	0x080175b0
 80047cc:	20000000 	.word	0x20000000
 80047d0:	2000642c 	.word	0x2000642c
 80047d4:	200001fe 	.word	0x200001fe
 80047d8:	200002fd 	.word	0x200002fd

080047dc <adcInit>:
/* *******ADC SECTION  ********/
extern ADC_HandleTypeDef hadc1;
extern ADC_HandleTypeDef hadc2;
extern ADC_HandleTypeDef hadc3;
void adcInit(ADCSensor* sens,ADC_HandleTypeDef * adc,int channel,FIL* f)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
 80047e8:	603b      	str	r3, [r7, #0]
	if(f == 0)
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d108      	bne.n	8004802 <adcInit+0x26>
	{
		sens->File = (FIL*)malloc(sizeof(FIL));
 80047f0:	f241 0030 	movw	r0, #4144	; 0x1030
 80047f4:	f00c face 	bl	8010d94 <malloc>
 80047f8:	4603      	mov	r3, r0
 80047fa:	461a      	mov	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	601a      	str	r2, [r3, #0]
 8004800:	e002      	b.n	8004808 <adcInit+0x2c>
	}else
	{
		sens->File = f;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	601a      	str	r2, [r3, #0]
	}
	sens->adcChannel = channel;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	635a      	str	r2, [r3, #52]	; 0x34
	sens->adc = adc;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	68ba      	ldr	r2, [r7, #8]
 8004812:	631a      	str	r2, [r3, #48]	; 0x30
	sens->timeFromLastSuccRead = 0;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	621a      	str	r2, [r3, #32]
}
 800481a:	bf00      	nop
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
	...

08004824 <damperInit>:
void damperInit(ADCSensor* sens,SENSORS id,FIL * f){
 8004824:	b580      	push	{r7, lr}
 8004826:	b086      	sub	sp, #24
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	460b      	mov	r3, r1
 800482e:	607a      	str	r2, [r7, #4]
 8004830:	72fb      	strb	r3, [r7, #11]
	switch(id){
 8004832:	7afb      	ldrb	r3, [r7, #11]
 8004834:	2b07      	cmp	r3, #7
 8004836:	d002      	beq.n	800483e <damperInit+0x1a>
 8004838:	2b08      	cmp	r3, #8
 800483a:	d00d      	beq.n	8004858 <damperInit+0x34>
	case DAMPERRF:
		adcInit(sens,&hadc3,13,f);
		statusRegister.DamperRF = SENSOR_OK;
		break;
	default:
		break;
 800483c:	e019      	b.n	8004872 <damperInit+0x4e>
		adcInit(sens,&hadc3,12,f);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	220c      	movs	r2, #12
 8004842:	491c      	ldr	r1, [pc, #112]	; (80048b4 <damperInit+0x90>)
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	f7ff ffc9 	bl	80047dc <adcInit>
		statusRegister.DamperLF = SENSOR_OK;
 800484a:	4a1b      	ldr	r2, [pc, #108]	; (80048b8 <damperInit+0x94>)
 800484c:	78d3      	ldrb	r3, [r2, #3]
 800484e:	2101      	movs	r1, #1
 8004850:	f361 0302 	bfi	r3, r1, #0, #3
 8004854:	70d3      	strb	r3, [r2, #3]
		break;
 8004856:	e00c      	b.n	8004872 <damperInit+0x4e>
		adcInit(sens,&hadc3,13,f);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	220d      	movs	r2, #13
 800485c:	4915      	ldr	r1, [pc, #84]	; (80048b4 <damperInit+0x90>)
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f7ff ffbc 	bl	80047dc <adcInit>
		statusRegister.DamperRF = SENSOR_OK;
 8004864:	4a14      	ldr	r2, [pc, #80]	; (80048b8 <damperInit+0x94>)
 8004866:	78d3      	ldrb	r3, [r2, #3]
 8004868:	2101      	movs	r1, #1
 800486a:	f361 03c5 	bfi	r3, r1, #3, #3
 800486e:	70d3      	strb	r3, [r2, #3]
		break;
 8004870:	bf00      	nop
	}
	sens->dataReady = 0;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	619a      	str	r2, [r3, #24]
	RTC_DateTypeDef date;
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8004878:	f107 0314 	add.w	r3, r7, #20
 800487c:	2200      	movs	r2, #0
 800487e:	4619      	mov	r1, r3
 8004880:	480e      	ldr	r0, [pc, #56]	; (80048bc <damperInit+0x98>)
 8004882:	f004 febf 	bl	8009604 <HAL_RTC_GetDate>
	sprintf(sens->path,"DAMP%02d%02d.csv",date.Date,date.Month);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	1d18      	adds	r0, r3, #4
 800488a:	7dbb      	ldrb	r3, [r7, #22]
 800488c:	461a      	mov	r2, r3
 800488e:	7d7b      	ldrb	r3, [r7, #21]
 8004890:	490b      	ldr	r1, [pc, #44]	; (80048c0 <damperInit+0x9c>)
 8004892:	f00c fd4f 	bl	8011334 <sprintf>
	sens->ID = id;
 8004896:	7afa      	ldrb	r2, [r7, #11]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	629a      	str	r2, [r3, #40]	; 0x28
	sens->adcType = damper;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	sens->timeToNextRead = DAMPER_DATA_RATE;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2232      	movs	r2, #50	; 0x32
 80048a8:	61da      	str	r2, [r3, #28]

}
 80048aa:	bf00      	nop
 80048ac:	3718      	adds	r7, #24
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	20000e84 	.word	0x20000e84
 80048b8:	20002084 	.word	0x20002084
 80048bc:	200020c4 	.word	0x200020c4
 80048c0:	080175c0 	.word	0x080175c0

080048c4 <absInit>:
	HAL_ADC_Start(sens->adc);
	HAL_ADC_PollForConversion(sens->adc, HAL_MAX_DELAY);
	sens->data = HAL_ADC_GetValue(sens->adc);
}
/******** ABS SECTION  ********/
void absInit(ABSSensor * sens,SENSORS id,TIM_HandleTypeDef* tim,int channel,FIL *f){
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	607a      	str	r2, [r7, #4]
 80048ce:	603b      	str	r3, [r7, #0]
 80048d0:	460b      	mov	r3, r1
 80048d2:	72fb      	strb	r3, [r7, #11]
	if(f == 0)
 80048d4:	6a3b      	ldr	r3, [r7, #32]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d107      	bne.n	80048ea <absInit+0x26>
	{
		sens->File = (FIL*)malloc(sizeof(FIL));
 80048da:	f241 0030 	movw	r0, #4144	; 0x1030
 80048de:	f00c fa59 	bl	8010d94 <malloc>
 80048e2:	4603      	mov	r3, r0
 80048e4:	461a      	mov	r2, r3
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	601a      	str	r2, [r3, #0]
	}
	switch(id){
 80048ea:	7afb      	ldrb	r3, [r7, #11]
 80048ec:	2b04      	cmp	r3, #4
 80048ee:	d002      	beq.n	80048f6 <absInit+0x32>
 80048f0:	2b05      	cmp	r3, #5
 80048f2:	d007      	beq.n	8004904 <absInit+0x40>
 80048f4:	e00d      	b.n	8004912 <absInit+0x4e>
	case ABSLF:
		statusRegister.VSSLF = SENSOR_OK;
 80048f6:	4a16      	ldr	r2, [pc, #88]	; (8004950 <absInit+0x8c>)
 80048f8:	6813      	ldr	r3, [r2, #0]
 80048fa:	2101      	movs	r1, #1
 80048fc:	f361 33d1 	bfi	r3, r1, #15, #3
 8004900:	6013      	str	r3, [r2, #0]
		break;
 8004902:	e006      	b.n	8004912 <absInit+0x4e>

	case ABSRF:
		statusRegister.VSSRF = SENSOR_OK;
 8004904:	4a12      	ldr	r2, [pc, #72]	; (8004950 <absInit+0x8c>)
 8004906:	7893      	ldrb	r3, [r2, #2]
 8004908:	2101      	movs	r1, #1
 800490a:	f361 0384 	bfi	r3, r1, #2, #3
 800490e:	7093      	strb	r3, [r2, #2]
		break;
 8004910:	bf00      	nop
	}
	sens->dataReady = 0;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	619a      	str	r2, [r3, #24]
	sens->ID =id;
 8004918:	7afa      	ldrb	r2, [r7, #11]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	625a      	str	r2, [r3, #36]	; 0x24
	RTC_DateTypeDef date;
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 800491e:	f107 0314 	add.w	r3, r7, #20
 8004922:	2200      	movs	r2, #0
 8004924:	4619      	mov	r1, r3
 8004926:	480b      	ldr	r0, [pc, #44]	; (8004954 <absInit+0x90>)
 8004928:	f004 fe6c 	bl	8009604 <HAL_RTC_GetDate>
	sprintf(sens->path,"ABS%02d%02d.csv",date.Date,date.Month);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	1d18      	adds	r0, r3, #4
 8004930:	7dbb      	ldrb	r3, [r7, #22]
 8004932:	461a      	mov	r2, r3
 8004934:	7d7b      	ldrb	r3, [r7, #21]
 8004936:	4908      	ldr	r1, [pc, #32]	; (8004958 <absInit+0x94>)
 8004938:	f00c fcfc 	bl	8011334 <sprintf>
	sens->timer = tim;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	62da      	str	r2, [r3, #44]	; 0x2c
	sens->timerChannel = channel;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	683a      	ldr	r2, [r7, #0]
 8004946:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004948:	bf00      	nop
 800494a:	3718      	adds	r7, #24
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	20002084 	.word	0x20002084
 8004954:	200020c4 	.word	0x200020c4
 8004958:	080175e8 	.word	0x080175e8

0800495c <gyroInit>:
}
/* *******GYRO SECTION  ********/

//GYRO FUNCS
void gyroInit(GyroSensor * sens)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
	int result = MPU9250_Init();
 8004964:	f7fd ff80 	bl	8002868 <MPU9250_Init>
 8004968:	4603      	mov	r3, r0
 800496a:	60fb      	str	r3, [r7, #12]
	if(result == 0)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d106      	bne.n	8004980 <gyroInit+0x24>
	{
		statusRegister.GYRO = SENSOR_OK;
 8004972:	4a18      	ldr	r2, [pc, #96]	; (80049d4 <gyroInit+0x78>)
 8004974:	8813      	ldrh	r3, [r2, #0]
 8004976:	2101      	movs	r1, #1
 8004978:	f361 1388 	bfi	r3, r1, #6, #3
 800497c:	8013      	strh	r3, [r2, #0]
 800497e:	e004      	b.n	800498a <gyroInit+0x2e>
	}else{
		statusRegister.GYRO = SENSOR_INIT_FAIL;
 8004980:	4a14      	ldr	r2, [pc, #80]	; (80049d4 <gyroInit+0x78>)
 8004982:	8813      	ldrh	r3, [r2, #0]
 8004984:	f443 73e0 	orr.w	r3, r3, #448	; 0x1c0
 8004988:	8013      	strh	r3, [r2, #0]
	}
	sens->File = (FIL*)malloc(sizeof(FIL));
 800498a:	f241 0030 	movw	r0, #4144	; 0x1030
 800498e:	f00c fa01 	bl	8010d94 <malloc>
 8004992:	4603      	mov	r3, r0
 8004994:	461a      	mov	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	601a      	str	r2, [r3, #0]

	RTC_DateTypeDef date;
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 800499a:	f107 0308 	add.w	r3, r7, #8
 800499e:	2200      	movs	r2, #0
 80049a0:	4619      	mov	r1, r3
 80049a2:	480d      	ldr	r0, [pc, #52]	; (80049d8 <gyroInit+0x7c>)
 80049a4:	f004 fe2e 	bl	8009604 <HAL_RTC_GetDate>
	sprintf(sens->path,"GYRO%02d%02d.csv",date.Date,date.Month);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	1d18      	adds	r0, r3, #4
 80049ac:	7abb      	ldrb	r3, [r7, #10]
 80049ae:	461a      	mov	r2, r3
 80049b0:	7a7b      	ldrb	r3, [r7, #9]
 80049b2:	490a      	ldr	r1, [pc, #40]	; (80049dc <gyroInit+0x80>)
 80049b4:	f00c fcbe 	bl	8011334 <sprintf>
	sens->dataReady = 0;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	619a      	str	r2, [r3, #24]
	sens->saveRate = GYRO_DATA_RATE;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	22fa      	movs	r2, #250	; 0xfa
 80049c2:	61da      	str	r2, [r3, #28]
	sens->timeToNextRead = GYRO_DATA_RATE;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	22fa      	movs	r2, #250	; 0xfa
 80049c8:	621a      	str	r2, [r3, #32]
}
 80049ca:	bf00      	nop
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	20002084 	.word	0x20002084
 80049d8:	200020c4 	.word	0x200020c4
 80049dc:	080175f8 	.word	0x080175f8

080049e0 <gyroConvertData>:
void gyroConvertData(struct gyroData * input, struct gyroDataCalc * output)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
	output->acc_data_calc[0] = (double) input->acc_data[0] / 16384;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049f0:	ee07 3a90 	vmov	s15, r3
 80049f4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80049f8:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 8004ab8 <gyroConvertData+0xd8>
 80049fc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	ed83 7b00 	vstr	d7, [r3]
	output->acc_data_calc[1] = (double) input->acc_data[1] / 16384;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004a0c:	ee07 3a90 	vmov	s15, r3
 8004a10:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004a14:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8004ab8 <gyroConvertData+0xd8>
 8004a18:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	ed83 7b02 	vstr	d7, [r3, #8]
	output->acc_data_calc[2] = (double) input->acc_data[2] / 16384;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004a28:	ee07 3a90 	vmov	s15, r3
 8004a2c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004a30:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8004ab8 <gyroConvertData+0xd8>
 8004a34:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	ed83 7b04 	vstr	d7, [r3, #16]
	output->gyro_data_calc[0] = (double) input->gyro_data[0] * 250 / 32768;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004a44:	ee07 3a90 	vmov	s15, r3
 8004a48:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004a4c:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8004ac0 <gyroConvertData+0xe0>
 8004a50:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004a54:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8004ac8 <gyroConvertData+0xe8>
 8004a58:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	ed83 7b06 	vstr	d7, [r3, #24]
	output->gyro_data_calc[1] = (double) input->gyro_data[1] * 250 / 32768;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004a68:	ee07 3a90 	vmov	s15, r3
 8004a6c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004a70:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8004ac0 <gyroConvertData+0xe0>
 8004a74:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004a78:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8004ac8 <gyroConvertData+0xe8>
 8004a7c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	ed83 7b08 	vstr	d7, [r3, #32]
	output->gyro_data_calc[2] = (double) input->gyro_data[2] * 250 / 32768;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8004a8c:	ee07 3a90 	vmov	s15, r3
 8004a90:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004a94:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8004ac0 <gyroConvertData+0xe0>
 8004a98:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004a9c:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8004ac8 <gyroConvertData+0xe8>
 8004aa0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28

}
 8004aaa:	bf00      	nop
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	00000000 	.word	0x00000000
 8004abc:	40d00000 	.word	0x40d00000
 8004ac0:	00000000 	.word	0x00000000
 8004ac4:	406f4000 	.word	0x406f4000
 8004ac8:	00000000 	.word	0x00000000
 8004acc:	40e00000 	.word	0x40e00000

08004ad0 <gyroGetData>:

void gyroGetData(GyroSensor * sens)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b088      	sub	sp, #32
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
	gyroData imu_9dof_data;
    MPU9250_GetData(imu_9dof_data.acc_data, imu_9dof_data.mag_data, imu_9dof_data.gyro_data);
 8004ad8:	f107 030c 	add.w	r3, r7, #12
 8004adc:	f103 020c 	add.w	r2, r3, #12
 8004ae0:	f107 030c 	add.w	r3, r7, #12
 8004ae4:	1d99      	adds	r1, r3, #6
 8004ae6:	f107 030c 	add.w	r3, r7, #12
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7fd ff86 	bl	80029fc <MPU9250_GetData>
    gyroConvertData(&imu_9dof_data, &sens->data);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8004af6:	f107 030c 	add.w	r3, r7, #12
 8004afa:	4611      	mov	r1, r2
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7ff ff6f 	bl	80049e0 <gyroConvertData>
    sens->dataReady = 0;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	619a      	str	r2, [r3, #24]
}
 8004b08:	bf00      	nop
 8004b0a:	3720      	adds	r7, #32
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <mlxInit>:



//MLX FUNCS
int mlxInit(MLXSensor *mlx,SENSORS id, I2C_HandleTypeDef * i2c,FIL * f)
{
 8004b10:	b590      	push	{r4, r7, lr}
 8004b12:	f2ad 6d9c 	subw	sp, sp, #1692	; 0x69c
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	f507 64d3 	add.w	r4, r7, #1688	; 0x698
 8004b1c:	f2a4 648c 	subw	r4, r4, #1676	; 0x68c
 8004b20:	6020      	str	r0, [r4, #0]
 8004b22:	4608      	mov	r0, r1
 8004b24:	f507 61d3 	add.w	r1, r7, #1688	; 0x698
 8004b28:	f2a1 6194 	subw	r1, r1, #1684	; 0x694
 8004b2c:	600a      	str	r2, [r1, #0]
 8004b2e:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 8004b32:	f5a2 62d3 	sub.w	r2, r2, #1688	; 0x698
 8004b36:	6013      	str	r3, [r2, #0]
 8004b38:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004b3c:	f2a3 638d 	subw	r3, r3, #1677	; 0x68d
 8004b40:	4602      	mov	r2, r0
 8004b42:	701a      	strb	r2, [r3, #0]
		uint16_t eeMLX90640[832];
		if(f == 0)
 8004b44:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004b48:	f5a3 63d3 	sub.w	r3, r3, #1688	; 0x698
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10c      	bne.n	8004b6c <mlxInit+0x5c>
		{
			mlx->File = (FIL*)malloc(sizeof(FIL));
 8004b52:	f241 0030 	movw	r0, #4144	; 0x1030
 8004b56:	f00c f91d 	bl	8010d94 <malloc>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004b62:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	601a      	str	r2, [r3, #0]
 8004b6a:	e00a      	b.n	8004b82 <mlxInit+0x72>
		}else
		{
			mlx->File = f;
 8004b6c:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004b70:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 8004b7a:	f5a2 62d3 	sub.w	r2, r2, #1688	; 0x698
 8004b7e:	6812      	ldr	r2, [r2, #0]
 8004b80:	601a      	str	r2, [r3, #0]
		}
		RTC_DateTypeDef date;
		HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8004b82:	f107 0310 	add.w	r3, r7, #16
 8004b86:	2200      	movs	r2, #0
 8004b88:	4619      	mov	r1, r3
 8004b8a:	4861      	ldr	r0, [pc, #388]	; (8004d10 <mlxInit+0x200>)
 8004b8c:	f004 fd3a 	bl	8009604 <HAL_RTC_GetDate>
		sprintf(mlx->path,"MLX%02d%02d.csv",date.Date,date.Month);
 8004b90:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004b94:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	1d18      	adds	r0, r3, #4
 8004b9c:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004ba0:	f5a3 63d1 	sub.w	r3, r3, #1672	; 0x688
 8004ba4:	789b      	ldrb	r3, [r3, #2]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004bac:	f5a3 63d1 	sub.w	r3, r3, #1672	; 0x688
 8004bb0:	785b      	ldrb	r3, [r3, #1]
 8004bb2:	4958      	ldr	r1, [pc, #352]	; (8004d14 <mlxInit+0x204>)
 8004bb4:	f00c fbbe 	bl	8011334 <sprintf>
		mlx->timeToNextRead = MLX_DATA_RATE;
 8004bb8:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004bbc:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004bc6:	621a      	str	r2, [r3, #32]
		mlx->dataReady = 0;
 8004bc8:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004bcc:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	619a      	str	r2, [r3, #24]
	  	mlx->emissivity = 0.95;
 8004bd6:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004bda:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004be4:	f503 636b 	add.w	r3, r3, #3760	; 0xeb0
 8004be8:	4a4b      	ldr	r2, [pc, #300]	; (8004d18 <mlxInit+0x208>)
 8004bea:	601a      	str	r2, [r3, #0]
	  	mlx->ID = id;
 8004bec:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004bf0:	f2a3 638d 	subw	r3, r3, #1677	; 0x68d
 8004bf4:	781a      	ldrb	r2, [r3, #0]
 8004bf6:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004bfa:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	625a      	str	r2, [r3, #36]	; 0x24
		MLX90640_SetRefreshRate(MLX90640_ADDR, RefreshRate,mlx->i2c);
 8004c02:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004c06:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0e:	461a      	mov	r2, r3
 8004c10:	2104      	movs	r1, #4
 8004c12:	2033      	movs	r0, #51	; 0x33
 8004c14:	f7fb fd49 	bl	80006aa <MLX90640_SetRefreshRate>
	  	MLX90640_SetChessMode(MLX90640_ADDR,mlx->i2c);
 8004c18:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004c1c:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c24:	4619      	mov	r1, r3
 8004c26:	2033      	movs	r0, #51	; 0x33
 8004c28:	f7fb fd71 	bl	800070e <MLX90640_SetChessMode>
	    int status = MLX90640_DumpEE(MLX90640_ADDR, eeMLX90640,mlx->i2c);
 8004c2c:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004c30:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c38:	f107 0314 	add.w	r3, r7, #20
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	2033      	movs	r0, #51	; 0x33
 8004c40:	f7fb fcd8 	bl	80005f4 <MLX90640_DumpEE>
 8004c44:	f8c7 0694 	str.w	r0, [r7, #1684]	; 0x694
	    status = status | MLX90640_ExtractParameters(eeMLX90640, &mlx->mlx90640);
 8004c48:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004c4c:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8004c56:	f107 0314 	add.w	r3, r7, #20
 8004c5a:	4611      	mov	r1, r2
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7fb fcdf 	bl	8000620 <MLX90640_ExtractParameters>
 8004c62:	4602      	mov	r2, r0
 8004c64:	f8d7 3694 	ldr.w	r3, [r7, #1684]	; 0x694
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	f8c7 3694 	str.w	r3, [r7, #1684]	; 0x694
	    if (status != 0){
 8004c6e:	f8d7 3694 	ldr.w	r3, [r7, #1684]	; 0x694
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d01d      	beq.n	8004cb2 <mlxInit+0x1a2>
	    	 if(mlx->ID == MLXLF)
 8004c76:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004c7a:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d105      	bne.n	8004c92 <mlxInit+0x182>
	    	 {
	    	    statusRegister.MLXLF = SENSOR_INIT_FAIL;
 8004c86:	4a25      	ldr	r2, [pc, #148]	; (8004d1c <mlxInit+0x20c>)
 8004c88:	7853      	ldrb	r3, [r2, #1]
 8004c8a:	f043 030e 	orr.w	r3, r3, #14
 8004c8e:	7053      	strb	r3, [r2, #1]
 8004c90:	e00c      	b.n	8004cac <mlxInit+0x19c>
	    	 }else if(mlx->ID == MLXRF)
 8004c92:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004c96:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9e:	2b03      	cmp	r3, #3
 8004ca0:	d104      	bne.n	8004cac <mlxInit+0x19c>
	    	 {
	    	    statusRegister.MLXRF = SENSOR_INIT_FAIL;
 8004ca2:	4a1e      	ldr	r2, [pc, #120]	; (8004d1c <mlxInit+0x20c>)
 8004ca4:	7853      	ldrb	r3, [r2, #1]
 8004ca6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8004caa:	7053      	strb	r3, [r2, #1]
	    	 }
	    	 return status;
 8004cac:	f8d7 3694 	ldr.w	r3, [r7, #1684]	; 0x694
 8004cb0:	e028      	b.n	8004d04 <mlxInit+0x1f4>
	   }
	    mlx->i2c = i2c;
 8004cb2:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004cb6:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 8004cc0:	f2a2 6294 	subw	r2, r2, #1684	; 0x694
 8004cc4:	6812      	ldr	r2, [r2, #0]
 8004cc6:	629a      	str	r2, [r3, #40]	; 0x28

	    if(mlx->ID == MLXLF)
 8004cc8:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004ccc:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d106      	bne.n	8004ce6 <mlxInit+0x1d6>
	    {
	    	statusRegister.MLXLF = SENSOR_OK;
 8004cd8:	4a10      	ldr	r2, [pc, #64]	; (8004d1c <mlxInit+0x20c>)
 8004cda:	7853      	ldrb	r3, [r2, #1]
 8004cdc:	2101      	movs	r1, #1
 8004cde:	f361 0343 	bfi	r3, r1, #1, #3
 8004ce2:	7053      	strb	r3, [r2, #1]
 8004ce4:	e00d      	b.n	8004d02 <mlxInit+0x1f2>
	    }else if(mlx->ID == MLXRF)
 8004ce6:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004cea:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf2:	2b03      	cmp	r3, #3
 8004cf4:	d105      	bne.n	8004d02 <mlxInit+0x1f2>
	    {
	    	statusRegister.MLXRF = SENSOR_OK;
 8004cf6:	4a09      	ldr	r2, [pc, #36]	; (8004d1c <mlxInit+0x20c>)
 8004cf8:	7853      	ldrb	r3, [r2, #1]
 8004cfa:	2101      	movs	r1, #1
 8004cfc:	f361 1306 	bfi	r3, r1, #4, #3
 8004d00:	7053      	strb	r3, [r2, #1]
	    }


	    return 0;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	f207 679c 	addw	r7, r7, #1692	; 0x69c
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd90      	pop	{r4, r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	200020c4 	.word	0x200020c4
 8004d14:	0801760c 	.word	0x0801760c
 8004d18:	3f733333 	.word	0x3f733333
 8004d1c:	20002084 	.word	0x20002084

08004d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004d26:	4b0f      	ldr	r3, [pc, #60]	; (8004d64 <HAL_MspInit+0x44>)
 8004d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2a:	4a0e      	ldr	r2, [pc, #56]	; (8004d64 <HAL_MspInit+0x44>)
 8004d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d30:	6413      	str	r3, [r2, #64]	; 0x40
 8004d32:	4b0c      	ldr	r3, [pc, #48]	; (8004d64 <HAL_MspInit+0x44>)
 8004d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d3a:	607b      	str	r3, [r7, #4]
 8004d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d3e:	4b09      	ldr	r3, [pc, #36]	; (8004d64 <HAL_MspInit+0x44>)
 8004d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d42:	4a08      	ldr	r2, [pc, #32]	; (8004d64 <HAL_MspInit+0x44>)
 8004d44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d48:	6453      	str	r3, [r2, #68]	; 0x44
 8004d4a:	4b06      	ldr	r3, [pc, #24]	; (8004d64 <HAL_MspInit+0x44>)
 8004d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d52:	603b      	str	r3, [r7, #0]
 8004d54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d56:	bf00      	nop
 8004d58:	370c      	adds	r7, #12
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	40023800 	.word	0x40023800

08004d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004d6c:	e7fe      	b.n	8004d6c <NMI_Handler+0x4>

08004d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d72:	e7fe      	b.n	8004d72 <HardFault_Handler+0x4>

08004d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d74:	b480      	push	{r7}
 8004d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d78:	e7fe      	b.n	8004d78 <MemManage_Handler+0x4>

08004d7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d7e:	e7fe      	b.n	8004d7e <BusFault_Handler+0x4>

08004d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d80:	b480      	push	{r7}
 8004d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d84:	e7fe      	b.n	8004d84 <UsageFault_Handler+0x4>

08004d86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004d86:	b480      	push	{r7}
 8004d88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004d8a:	bf00      	nop
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d94:	b480      	push	{r7}
 8004d96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d98:	bf00      	nop
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr

08004da2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004da2:	b480      	push	{r7}
 8004da4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004da6:	bf00      	nop
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004db4:	f000 fbbc 	bl	8005530 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004db8:	bf00      	nop
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004dc0:	4805      	ldr	r0, [pc, #20]	; (8004dd8 <ADC_IRQHandler+0x1c>)
 8004dc2:	f000 fc3d 	bl	8005640 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8004dc6:	4805      	ldr	r0, [pc, #20]	; (8004ddc <ADC_IRQHandler+0x20>)
 8004dc8:	f000 fc3a 	bl	8005640 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8004dcc:	4804      	ldr	r0, [pc, #16]	; (8004de0 <ADC_IRQHandler+0x24>)
 8004dce:	f000 fc37 	bl	8005640 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8004dd2:	bf00      	nop
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	20000df4 	.word	0x20000df4
 8004ddc:	20000e3c 	.word	0x20000e3c
 8004de0:	20000e84 	.word	0x20000e84

08004de4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004de8:	4802      	ldr	r0, [pc, #8]	; (8004df4 <TIM3_IRQHandler+0x10>)
 8004dea:	f006 fb07 	bl	800b3fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004dee:	bf00      	nop
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	200062c4 	.word	0x200062c4

08004df8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004dfc:	4802      	ldr	r0, [pc, #8]	; (8004e08 <TIM4_IRQHandler+0x10>)
 8004dfe:	f006 fafd 	bl	800b3fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004e02:	bf00      	nop
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	20006310 	.word	0x20006310

08004e0c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004e10:	4802      	ldr	r0, [pc, #8]	; (8004e1c <USART3_IRQHandler+0x10>)
 8004e12:	f007 fb23 	bl	800c45c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004e16:	bf00      	nop
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	2000642c 	.word	0x2000642c

08004e20 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8004e24:	4802      	ldr	r0, [pc, #8]	; (8004e30 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8004e26:	f006 fae9 	bl	800b3fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004e2a:	bf00      	nop
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	2000635c 	.word	0x2000635c

08004e34 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc2_rx);
 8004e38:	4802      	ldr	r0, [pc, #8]	; (8004e44 <DMA2_Stream0_IRQHandler+0x10>)
 8004e3a:	f001 fb37 	bl	80064ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004e3e:	bf00      	nop
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	20002168 	.word	0x20002168

08004e48 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc2_tx);
 8004e4c:	4802      	ldr	r0, [pc, #8]	; (8004e58 <DMA2_Stream5_IRQHandler+0x10>)
 8004e4e:	f001 fb2d 	bl	80064ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8004e52:	bf00      	nop
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	200021c8 	.word	0x200021c8

08004e5c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8004e60:	4802      	ldr	r0, [pc, #8]	; (8004e6c <UART7_IRQHandler+0x10>)
 8004e62:	f007 fafb 	bl	800c45c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8004e66:	bf00      	nop
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	200063a8 	.word	0x200063a8

08004e70 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 8004e74:	4802      	ldr	r0, [pc, #8]	; (8004e80 <SDMMC2_IRQHandler+0x10>)
 8004e76:	f004 ff25 	bl	8009cc4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 8004e7a:	bf00      	nop
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	200020e4 	.word	0x200020e4

08004e84 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004e84:	b480      	push	{r7}
 8004e86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004e88:	4b08      	ldr	r3, [pc, #32]	; (8004eac <SystemInit+0x28>)
 8004e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e8e:	4a07      	ldr	r2, [pc, #28]	; (8004eac <SystemInit+0x28>)
 8004e90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8004e98:	4b04      	ldr	r3, [pc, #16]	; (8004eac <SystemInit+0x28>)
 8004e9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004e9e:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ea0:	bf00      	nop
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	e000ed00 	.word	0xe000ed00

08004eb0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim14;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b090      	sub	sp, #64	; 0x40
 8004eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004eb6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004eba:	2200      	movs	r2, #0
 8004ebc:	601a      	str	r2, [r3, #0]
 8004ebe:	605a      	str	r2, [r3, #4]
 8004ec0:	609a      	str	r2, [r3, #8]
 8004ec2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004ec4:	f107 031c 	add.w	r3, r7, #28
 8004ec8:	2200      	movs	r2, #0
 8004eca:	601a      	str	r2, [r3, #0]
 8004ecc:	605a      	str	r2, [r3, #4]
 8004ece:	609a      	str	r2, [r3, #8]
 8004ed0:	60da      	str	r2, [r3, #12]
 8004ed2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ed4:	f107 0310 	add.w	r3, r7, #16
 8004ed8:	2200      	movs	r2, #0
 8004eda:	601a      	str	r2, [r3, #0]
 8004edc:	605a      	str	r2, [r3, #4]
 8004ede:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004ee0:	463b      	mov	r3, r7
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	601a      	str	r2, [r3, #0]
 8004ee6:	605a      	str	r2, [r3, #4]
 8004ee8:	609a      	str	r2, [r3, #8]
 8004eea:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004eec:	4b35      	ldr	r3, [pc, #212]	; (8004fc4 <MX_TIM3_Init+0x114>)
 8004eee:	4a36      	ldr	r2, [pc, #216]	; (8004fc8 <MX_TIM3_Init+0x118>)
 8004ef0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 31999;
 8004ef2:	4b34      	ldr	r3, [pc, #208]	; (8004fc4 <MX_TIM3_Init+0x114>)
 8004ef4:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8004ef8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004efa:	4b32      	ldr	r3, [pc, #200]	; (8004fc4 <MX_TIM3_Init+0x114>)
 8004efc:	2200      	movs	r2, #0
 8004efe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004f00:	4b30      	ldr	r3, [pc, #192]	; (8004fc4 <MX_TIM3_Init+0x114>)
 8004f02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f06:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f08:	4b2e      	ldr	r3, [pc, #184]	; (8004fc4 <MX_TIM3_Init+0x114>)
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f0e:	4b2d      	ldr	r3, [pc, #180]	; (8004fc4 <MX_TIM3_Init+0x114>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004f14:	482b      	ldr	r0, [pc, #172]	; (8004fc4 <MX_TIM3_Init+0x114>)
 8004f16:	f005 ff80 	bl	800ae1a <HAL_TIM_Base_Init>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d001      	beq.n	8004f24 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8004f20:	f7ff fa1e 	bl	8004360 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f28:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004f2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004f2e:	4619      	mov	r1, r3
 8004f30:	4824      	ldr	r0, [pc, #144]	; (8004fc4 <MX_TIM3_Init+0x114>)
 8004f32:	f006 fc1f 	bl	800b774 <HAL_TIM_ConfigClockSource>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d001      	beq.n	8004f40 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8004f3c:	f7ff fa10 	bl	8004360 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8004f40:	4820      	ldr	r0, [pc, #128]	; (8004fc4 <MX_TIM3_Init+0x114>)
 8004f42:	f006 f8a9 	bl	800b098 <HAL_TIM_IC_Init>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d001      	beq.n	8004f50 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8004f4c:	f7ff fa08 	bl	8004360 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8004f50:	2304      	movs	r3, #4
 8004f52:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8004f54:	2340      	movs	r3, #64	; 0x40
 8004f56:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8004f60:	f107 031c 	add.w	r3, r7, #28
 8004f64:	4619      	mov	r1, r3
 8004f66:	4817      	ldr	r0, [pc, #92]	; (8004fc4 <MX_TIM3_Init+0x114>)
 8004f68:	f006 fcce 	bl	800b908 <HAL_TIM_SlaveConfigSynchro>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d001      	beq.n	8004f76 <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 8004f72:	f7ff f9f5 	bl	8004360 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f76:	2300      	movs	r3, #0
 8004f78:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004f7e:	f107 0310 	add.w	r3, r7, #16
 8004f82:	4619      	mov	r1, r3
 8004f84:	480f      	ldr	r0, [pc, #60]	; (8004fc4 <MX_TIM3_Init+0x114>)
 8004f86:	f007 f88d 	bl	800c0a4 <HAL_TIMEx_MasterConfigSynchronization>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d001      	beq.n	8004f94 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8004f90:	f7ff f9e6 	bl	8004360 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8004f94:	2302      	movs	r3, #2
 8004f96:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8004fa0:	230f      	movs	r3, #15
 8004fa2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004fa4:	463b      	mov	r3, r7
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	4619      	mov	r1, r3
 8004faa:	4806      	ldr	r0, [pc, #24]	; (8004fc4 <MX_TIM3_Init+0x114>)
 8004fac:	f006 fb45 	bl	800b63a <HAL_TIM_IC_ConfigChannel>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d001      	beq.n	8004fba <MX_TIM3_Init+0x10a>
  {
    Error_Handler();
 8004fb6:	f7ff f9d3 	bl	8004360 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004fba:	bf00      	nop
 8004fbc:	3740      	adds	r7, #64	; 0x40
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	200062c4 	.word	0x200062c4
 8004fc8:	40000400 	.word	0x40000400

08004fcc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b090      	sub	sp, #64	; 0x40
 8004fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004fd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	601a      	str	r2, [r3, #0]
 8004fda:	605a      	str	r2, [r3, #4]
 8004fdc:	609a      	str	r2, [r3, #8]
 8004fde:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004fe0:	f107 031c 	add.w	r3, r7, #28
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	601a      	str	r2, [r3, #0]
 8004fe8:	605a      	str	r2, [r3, #4]
 8004fea:	609a      	str	r2, [r3, #8]
 8004fec:	60da      	str	r2, [r3, #12]
 8004fee:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ff0:	f107 0310 	add.w	r3, r7, #16
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	601a      	str	r2, [r3, #0]
 8004ff8:	605a      	str	r2, [r3, #4]
 8004ffa:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004ffc:	463b      	mov	r3, r7
 8004ffe:	2200      	movs	r2, #0
 8005000:	601a      	str	r2, [r3, #0]
 8005002:	605a      	str	r2, [r3, #4]
 8005004:	609a      	str	r2, [r3, #8]
 8005006:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005008:	4b35      	ldr	r3, [pc, #212]	; (80050e0 <MX_TIM4_Init+0x114>)
 800500a:	4a36      	ldr	r2, [pc, #216]	; (80050e4 <MX_TIM4_Init+0x118>)
 800500c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 31999;
 800500e:	4b34      	ldr	r3, [pc, #208]	; (80050e0 <MX_TIM4_Init+0x114>)
 8005010:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8005014:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005016:	4b32      	ldr	r3, [pc, #200]	; (80050e0 <MX_TIM4_Init+0x114>)
 8005018:	2200      	movs	r2, #0
 800501a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800501c:	4b30      	ldr	r3, [pc, #192]	; (80050e0 <MX_TIM4_Init+0x114>)
 800501e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005022:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005024:	4b2e      	ldr	r3, [pc, #184]	; (80050e0 <MX_TIM4_Init+0x114>)
 8005026:	2200      	movs	r2, #0
 8005028:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800502a:	4b2d      	ldr	r3, [pc, #180]	; (80050e0 <MX_TIM4_Init+0x114>)
 800502c:	2200      	movs	r2, #0
 800502e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005030:	482b      	ldr	r0, [pc, #172]	; (80050e0 <MX_TIM4_Init+0x114>)
 8005032:	f005 fef2 	bl	800ae1a <HAL_TIM_Base_Init>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d001      	beq.n	8005040 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 800503c:	f7ff f990 	bl	8004360 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005040:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005044:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005046:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800504a:	4619      	mov	r1, r3
 800504c:	4824      	ldr	r0, [pc, #144]	; (80050e0 <MX_TIM4_Init+0x114>)
 800504e:	f006 fb91 	bl	800b774 <HAL_TIM_ConfigClockSource>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d001      	beq.n	800505c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8005058:	f7ff f982 	bl	8004360 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800505c:	4820      	ldr	r0, [pc, #128]	; (80050e0 <MX_TIM4_Init+0x114>)
 800505e:	f006 f81b 	bl	800b098 <HAL_TIM_IC_Init>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d001      	beq.n	800506c <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8005068:	f7ff f97a 	bl	8004360 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800506c:	2304      	movs	r3, #4
 800506e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8005070:	2340      	movs	r3, #64	; 0x40
 8005072:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005074:	2300      	movs	r3, #0
 8005076:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8005078:	2300      	movs	r3, #0
 800507a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 800507c:	f107 031c 	add.w	r3, r7, #28
 8005080:	4619      	mov	r1, r3
 8005082:	4817      	ldr	r0, [pc, #92]	; (80050e0 <MX_TIM4_Init+0x114>)
 8005084:	f006 fc40 	bl	800b908 <HAL_TIM_SlaveConfigSynchro>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d001      	beq.n	8005092 <MX_TIM4_Init+0xc6>
  {
    Error_Handler();
 800508e:	f7ff f967 	bl	8004360 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005092:	2300      	movs	r3, #0
 8005094:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005096:	2300      	movs	r3, #0
 8005098:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800509a:	f107 0310 	add.w	r3, r7, #16
 800509e:	4619      	mov	r1, r3
 80050a0:	480f      	ldr	r0, [pc, #60]	; (80050e0 <MX_TIM4_Init+0x114>)
 80050a2:	f006 ffff 	bl	800c0a4 <HAL_TIMEx_MasterConfigSynchronization>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d001      	beq.n	80050b0 <MX_TIM4_Init+0xe4>
  {
    Error_Handler();
 80050ac:	f7ff f958 	bl	8004360 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80050b0:	2302      	movs	r3, #2
 80050b2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80050b4:	2301      	movs	r3, #1
 80050b6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80050b8:	2300      	movs	r3, #0
 80050ba:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 80050bc:	230f      	movs	r3, #15
 80050be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80050c0:	463b      	mov	r3, r7
 80050c2:	2200      	movs	r2, #0
 80050c4:	4619      	mov	r1, r3
 80050c6:	4806      	ldr	r0, [pc, #24]	; (80050e0 <MX_TIM4_Init+0x114>)
 80050c8:	f006 fab7 	bl	800b63a <HAL_TIM_IC_ConfigChannel>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <MX_TIM4_Init+0x10a>
  {
    Error_Handler();
 80050d2:	f7ff f945 	bl	8004360 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80050d6:	bf00      	nop
 80050d8:	3740      	adds	r7, #64	; 0x40
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	20006310 	.word	0x20006310
 80050e4:	40000800 	.word	0x40000800

080050e8 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80050ec:	4b0e      	ldr	r3, [pc, #56]	; (8005128 <MX_TIM14_Init+0x40>)
 80050ee:	4a0f      	ldr	r2, [pc, #60]	; (800512c <MX_TIM14_Init+0x44>)
 80050f0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 31999;
 80050f2:	4b0d      	ldr	r3, [pc, #52]	; (8005128 <MX_TIM14_Init+0x40>)
 80050f4:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80050f8:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80050fa:	4b0b      	ldr	r3, [pc, #44]	; (8005128 <MX_TIM14_Init+0x40>)
 80050fc:	2200      	movs	r2, #0
 80050fe:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 24;
 8005100:	4b09      	ldr	r3, [pc, #36]	; (8005128 <MX_TIM14_Init+0x40>)
 8005102:	2218      	movs	r2, #24
 8005104:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005106:	4b08      	ldr	r3, [pc, #32]	; (8005128 <MX_TIM14_Init+0x40>)
 8005108:	2200      	movs	r2, #0
 800510a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800510c:	4b06      	ldr	r3, [pc, #24]	; (8005128 <MX_TIM14_Init+0x40>)
 800510e:	2200      	movs	r2, #0
 8005110:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8005112:	4805      	ldr	r0, [pc, #20]	; (8005128 <MX_TIM14_Init+0x40>)
 8005114:	f005 fe81 	bl	800ae1a <HAL_TIM_Base_Init>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d001      	beq.n	8005122 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800511e:	f7ff f91f 	bl	8004360 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8005122:	bf00      	nop
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	2000635c 	.word	0x2000635c
 800512c:	40002000 	.word	0x40002000

08005130 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b08c      	sub	sp, #48	; 0x30
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005138:	f107 031c 	add.w	r3, r7, #28
 800513c:	2200      	movs	r2, #0
 800513e:	601a      	str	r2, [r3, #0]
 8005140:	605a      	str	r2, [r3, #4]
 8005142:	609a      	str	r2, [r3, #8]
 8005144:	60da      	str	r2, [r3, #12]
 8005146:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a43      	ldr	r2, [pc, #268]	; (800525c <HAL_TIM_Base_MspInit+0x12c>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d130      	bne.n	80051b4 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005152:	4b43      	ldr	r3, [pc, #268]	; (8005260 <HAL_TIM_Base_MspInit+0x130>)
 8005154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005156:	4a42      	ldr	r2, [pc, #264]	; (8005260 <HAL_TIM_Base_MspInit+0x130>)
 8005158:	f043 0302 	orr.w	r3, r3, #2
 800515c:	6413      	str	r3, [r2, #64]	; 0x40
 800515e:	4b40      	ldr	r3, [pc, #256]	; (8005260 <HAL_TIM_Base_MspInit+0x130>)
 8005160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	61bb      	str	r3, [r7, #24]
 8005168:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800516a:	4b3d      	ldr	r3, [pc, #244]	; (8005260 <HAL_TIM_Base_MspInit+0x130>)
 800516c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516e:	4a3c      	ldr	r2, [pc, #240]	; (8005260 <HAL_TIM_Base_MspInit+0x130>)
 8005170:	f043 0301 	orr.w	r3, r3, #1
 8005174:	6313      	str	r3, [r2, #48]	; 0x30
 8005176:	4b3a      	ldr	r3, [pc, #232]	; (8005260 <HAL_TIM_Base_MspInit+0x130>)
 8005178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	617b      	str	r3, [r7, #20]
 8005180:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = VSS2_Pin;
 8005182:	2340      	movs	r3, #64	; 0x40
 8005184:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005186:	2302      	movs	r3, #2
 8005188:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800518a:	2300      	movs	r3, #0
 800518c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800518e:	2300      	movs	r3, #0
 8005190:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005192:	2302      	movs	r3, #2
 8005194:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VSS2_GPIO_Port, &GPIO_InitStruct);
 8005196:	f107 031c 	add.w	r3, r7, #28
 800519a:	4619      	mov	r1, r3
 800519c:	4831      	ldr	r0, [pc, #196]	; (8005264 <HAL_TIM_Base_MspInit+0x134>)
 800519e:	f001 fbfb 	bl	8006998 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80051a2:	2200      	movs	r2, #0
 80051a4:	2101      	movs	r1, #1
 80051a6:	201d      	movs	r0, #29
 80051a8:	f000 ffa9 	bl	80060fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80051ac:	201d      	movs	r0, #29
 80051ae:	f000 ffc2 	bl	8006136 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 80051b2:	e04f      	b.n	8005254 <HAL_TIM_Base_MspInit+0x124>
  else if(tim_baseHandle->Instance==TIM4)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a2b      	ldr	r2, [pc, #172]	; (8005268 <HAL_TIM_Base_MspInit+0x138>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d131      	bne.n	8005222 <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80051be:	4b28      	ldr	r3, [pc, #160]	; (8005260 <HAL_TIM_Base_MspInit+0x130>)
 80051c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c2:	4a27      	ldr	r2, [pc, #156]	; (8005260 <HAL_TIM_Base_MspInit+0x130>)
 80051c4:	f043 0304 	orr.w	r3, r3, #4
 80051c8:	6413      	str	r3, [r2, #64]	; 0x40
 80051ca:	4b25      	ldr	r3, [pc, #148]	; (8005260 <HAL_TIM_Base_MspInit+0x130>)
 80051cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ce:	f003 0304 	and.w	r3, r3, #4
 80051d2:	613b      	str	r3, [r7, #16]
 80051d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80051d6:	4b22      	ldr	r3, [pc, #136]	; (8005260 <HAL_TIM_Base_MspInit+0x130>)
 80051d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051da:	4a21      	ldr	r2, [pc, #132]	; (8005260 <HAL_TIM_Base_MspInit+0x130>)
 80051dc:	f043 0308 	orr.w	r3, r3, #8
 80051e0:	6313      	str	r3, [r2, #48]	; 0x30
 80051e2:	4b1f      	ldr	r3, [pc, #124]	; (8005260 <HAL_TIM_Base_MspInit+0x130>)
 80051e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e6:	f003 0308 	and.w	r3, r3, #8
 80051ea:	60fb      	str	r3, [r7, #12]
 80051ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VSS1_Pin;
 80051ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051f4:	2302      	movs	r3, #2
 80051f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051f8:	2300      	movs	r3, #0
 80051fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051fc:	2300      	movs	r3, #0
 80051fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005200:	2302      	movs	r3, #2
 8005202:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VSS1_GPIO_Port, &GPIO_InitStruct);
 8005204:	f107 031c 	add.w	r3, r7, #28
 8005208:	4619      	mov	r1, r3
 800520a:	4818      	ldr	r0, [pc, #96]	; (800526c <HAL_TIM_Base_MspInit+0x13c>)
 800520c:	f001 fbc4 	bl	8006998 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8005210:	2200      	movs	r2, #0
 8005212:	2101      	movs	r1, #1
 8005214:	201e      	movs	r0, #30
 8005216:	f000 ff72 	bl	80060fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800521a:	201e      	movs	r0, #30
 800521c:	f000 ff8b 	bl	8006136 <HAL_NVIC_EnableIRQ>
}
 8005220:	e018      	b.n	8005254 <HAL_TIM_Base_MspInit+0x124>
  else if(tim_baseHandle->Instance==TIM14)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a12      	ldr	r2, [pc, #72]	; (8005270 <HAL_TIM_Base_MspInit+0x140>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d113      	bne.n	8005254 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800522c:	4b0c      	ldr	r3, [pc, #48]	; (8005260 <HAL_TIM_Base_MspInit+0x130>)
 800522e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005230:	4a0b      	ldr	r2, [pc, #44]	; (8005260 <HAL_TIM_Base_MspInit+0x130>)
 8005232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005236:	6413      	str	r3, [r2, #64]	; 0x40
 8005238:	4b09      	ldr	r3, [pc, #36]	; (8005260 <HAL_TIM_Base_MspInit+0x130>)
 800523a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005240:	60bb      	str	r3, [r7, #8]
 8005242:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 1, 0);
 8005244:	2200      	movs	r2, #0
 8005246:	2101      	movs	r1, #1
 8005248:	202d      	movs	r0, #45	; 0x2d
 800524a:	f000 ff58 	bl	80060fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800524e:	202d      	movs	r0, #45	; 0x2d
 8005250:	f000 ff71 	bl	8006136 <HAL_NVIC_EnableIRQ>
}
 8005254:	bf00      	nop
 8005256:	3730      	adds	r7, #48	; 0x30
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	40000400 	.word	0x40000400
 8005260:	40023800 	.word	0x40023800
 8005264:	40020000 	.word	0x40020000
 8005268:	40000800 	.word	0x40000800
 800526c:	40020c00 	.word	0x40020c00
 8005270:	40002000 	.word	0x40002000

08005274 <MX_UART7_Init>:
UART_HandleTypeDef huart7;
UART_HandleTypeDef huart3;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8005278:	4b16      	ldr	r3, [pc, #88]	; (80052d4 <MX_UART7_Init+0x60>)
 800527a:	4a17      	ldr	r2, [pc, #92]	; (80052d8 <MX_UART7_Init+0x64>)
 800527c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 800527e:	4b15      	ldr	r3, [pc, #84]	; (80052d4 <MX_UART7_Init+0x60>)
 8005280:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005284:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8005286:	4b13      	ldr	r3, [pc, #76]	; (80052d4 <MX_UART7_Init+0x60>)
 8005288:	2200      	movs	r2, #0
 800528a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800528c:	4b11      	ldr	r3, [pc, #68]	; (80052d4 <MX_UART7_Init+0x60>)
 800528e:	2200      	movs	r2, #0
 8005290:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8005292:	4b10      	ldr	r3, [pc, #64]	; (80052d4 <MX_UART7_Init+0x60>)
 8005294:	2200      	movs	r2, #0
 8005296:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8005298:	4b0e      	ldr	r3, [pc, #56]	; (80052d4 <MX_UART7_Init+0x60>)
 800529a:	220c      	movs	r2, #12
 800529c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800529e:	4b0d      	ldr	r3, [pc, #52]	; (80052d4 <MX_UART7_Init+0x60>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80052a4:	4b0b      	ldr	r3, [pc, #44]	; (80052d4 <MX_UART7_Init+0x60>)
 80052a6:	2200      	movs	r2, #0
 80052a8:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80052aa:	4b0a      	ldr	r3, [pc, #40]	; (80052d4 <MX_UART7_Init+0x60>)
 80052ac:	2200      	movs	r2, #0
 80052ae:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80052b0:	4b08      	ldr	r3, [pc, #32]	; (80052d4 <MX_UART7_Init+0x60>)
 80052b2:	2210      	movs	r2, #16
 80052b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80052b6:	4b07      	ldr	r3, [pc, #28]	; (80052d4 <MX_UART7_Init+0x60>)
 80052b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80052bc:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80052be:	4805      	ldr	r0, [pc, #20]	; (80052d4 <MX_UART7_Init+0x60>)
 80052c0:	f006 ff9c 	bl	800c1fc <HAL_UART_Init>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <MX_UART7_Init+0x5a>
  {
    Error_Handler();
 80052ca:	f7ff f849 	bl	8004360 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80052ce:	bf00      	nop
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	200063a8 	.word	0x200063a8
 80052d8:	40007800 	.word	0x40007800

080052dc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80052e0:	4b16      	ldr	r3, [pc, #88]	; (800533c <MX_USART3_UART_Init+0x60>)
 80052e2:	4a17      	ldr	r2, [pc, #92]	; (8005340 <MX_USART3_UART_Init+0x64>)
 80052e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80052e6:	4b15      	ldr	r3, [pc, #84]	; (800533c <MX_USART3_UART_Init+0x60>)
 80052e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80052ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80052ee:	4b13      	ldr	r3, [pc, #76]	; (800533c <MX_USART3_UART_Init+0x60>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80052f4:	4b11      	ldr	r3, [pc, #68]	; (800533c <MX_USART3_UART_Init+0x60>)
 80052f6:	2200      	movs	r2, #0
 80052f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80052fa:	4b10      	ldr	r3, [pc, #64]	; (800533c <MX_USART3_UART_Init+0x60>)
 80052fc:	2200      	movs	r2, #0
 80052fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005300:	4b0e      	ldr	r3, [pc, #56]	; (800533c <MX_USART3_UART_Init+0x60>)
 8005302:	220c      	movs	r2, #12
 8005304:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005306:	4b0d      	ldr	r3, [pc, #52]	; (800533c <MX_USART3_UART_Init+0x60>)
 8005308:	2200      	movs	r2, #0
 800530a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800530c:	4b0b      	ldr	r3, [pc, #44]	; (800533c <MX_USART3_UART_Init+0x60>)
 800530e:	2200      	movs	r2, #0
 8005310:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005312:	4b0a      	ldr	r3, [pc, #40]	; (800533c <MX_USART3_UART_Init+0x60>)
 8005314:	2200      	movs	r2, #0
 8005316:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8005318:	4b08      	ldr	r3, [pc, #32]	; (800533c <MX_USART3_UART_Init+0x60>)
 800531a:	2210      	movs	r2, #16
 800531c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800531e:	4b07      	ldr	r3, [pc, #28]	; (800533c <MX_USART3_UART_Init+0x60>)
 8005320:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005324:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005326:	4805      	ldr	r0, [pc, #20]	; (800533c <MX_USART3_UART_Init+0x60>)
 8005328:	f006 ff68 	bl	800c1fc <HAL_UART_Init>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d001      	beq.n	8005336 <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 8005332:	f7ff f815 	bl	8004360 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005336:	bf00      	nop
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	2000642c 	.word	0x2000642c
 8005340:	40004800 	.word	0x40004800

08005344 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b08c      	sub	sp, #48	; 0x30
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800534c:	f107 031c 	add.w	r3, r7, #28
 8005350:	2200      	movs	r2, #0
 8005352:	601a      	str	r2, [r3, #0]
 8005354:	605a      	str	r2, [r3, #4]
 8005356:	609a      	str	r2, [r3, #8]
 8005358:	60da      	str	r2, [r3, #12]
 800535a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a36      	ldr	r2, [pc, #216]	; (800543c <HAL_UART_MspInit+0xf8>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d130      	bne.n	80053c8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8005366:	4b36      	ldr	r3, [pc, #216]	; (8005440 <HAL_UART_MspInit+0xfc>)
 8005368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536a:	4a35      	ldr	r2, [pc, #212]	; (8005440 <HAL_UART_MspInit+0xfc>)
 800536c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005370:	6413      	str	r3, [r2, #64]	; 0x40
 8005372:	4b33      	ldr	r3, [pc, #204]	; (8005440 <HAL_UART_MspInit+0xfc>)
 8005374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005376:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800537a:	61bb      	str	r3, [r7, #24]
 800537c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800537e:	4b30      	ldr	r3, [pc, #192]	; (8005440 <HAL_UART_MspInit+0xfc>)
 8005380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005382:	4a2f      	ldr	r2, [pc, #188]	; (8005440 <HAL_UART_MspInit+0xfc>)
 8005384:	f043 0320 	orr.w	r3, r3, #32
 8005388:	6313      	str	r3, [r2, #48]	; 0x30
 800538a:	4b2d      	ldr	r3, [pc, #180]	; (8005440 <HAL_UART_MspInit+0xfc>)
 800538c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538e:	f003 0320 	and.w	r3, r3, #32
 8005392:	617b      	str	r3, [r7, #20]
 8005394:	697b      	ldr	r3, [r7, #20]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
 8005396:	23c0      	movs	r3, #192	; 0xc0
 8005398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800539a:	2302      	movs	r3, #2
 800539c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800539e:	2300      	movs	r3, #0
 80053a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053a2:	2303      	movs	r3, #3
 80053a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80053a6:	2308      	movs	r3, #8
 80053a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80053aa:	f107 031c 	add.w	r3, r7, #28
 80053ae:	4619      	mov	r1, r3
 80053b0:	4824      	ldr	r0, [pc, #144]	; (8005444 <HAL_UART_MspInit+0x100>)
 80053b2:	f001 faf1 	bl	8006998 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 1, 0);
 80053b6:	2200      	movs	r2, #0
 80053b8:	2101      	movs	r1, #1
 80053ba:	2052      	movs	r0, #82	; 0x52
 80053bc:	f000 fe9f 	bl	80060fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80053c0:	2052      	movs	r0, #82	; 0x52
 80053c2:	f000 feb8 	bl	8006136 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80053c6:	e035      	b.n	8005434 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART3)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a1e      	ldr	r2, [pc, #120]	; (8005448 <HAL_UART_MspInit+0x104>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d130      	bne.n	8005434 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80053d2:	4b1b      	ldr	r3, [pc, #108]	; (8005440 <HAL_UART_MspInit+0xfc>)
 80053d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d6:	4a1a      	ldr	r2, [pc, #104]	; (8005440 <HAL_UART_MspInit+0xfc>)
 80053d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053dc:	6413      	str	r3, [r2, #64]	; 0x40
 80053de:	4b18      	ldr	r3, [pc, #96]	; (8005440 <HAL_UART_MspInit+0xfc>)
 80053e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053e6:	613b      	str	r3, [r7, #16]
 80053e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053ea:	4b15      	ldr	r3, [pc, #84]	; (8005440 <HAL_UART_MspInit+0xfc>)
 80053ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ee:	4a14      	ldr	r2, [pc, #80]	; (8005440 <HAL_UART_MspInit+0xfc>)
 80053f0:	f043 0302 	orr.w	r3, r3, #2
 80053f4:	6313      	str	r3, [r2, #48]	; 0x30
 80053f6:	4b12      	ldr	r3, [pc, #72]	; (8005440 <HAL_UART_MspInit+0xfc>)
 80053f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fa:	f003 0302 	and.w	r3, r3, #2
 80053fe:	60fb      	str	r3, [r7, #12]
 8005400:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART_DEBUG_TX_Pin|UART_DEBUG_RX_Pin;
 8005402:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005406:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005408:	2302      	movs	r3, #2
 800540a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800540c:	2300      	movs	r3, #0
 800540e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005410:	2303      	movs	r3, #3
 8005412:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005414:	2307      	movs	r3, #7
 8005416:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005418:	f107 031c 	add.w	r3, r7, #28
 800541c:	4619      	mov	r1, r3
 800541e:	480b      	ldr	r0, [pc, #44]	; (800544c <HAL_UART_MspInit+0x108>)
 8005420:	f001 faba 	bl	8006998 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8005424:	2200      	movs	r2, #0
 8005426:	2101      	movs	r1, #1
 8005428:	2027      	movs	r0, #39	; 0x27
 800542a:	f000 fe68 	bl	80060fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800542e:	2027      	movs	r0, #39	; 0x27
 8005430:	f000 fe81 	bl	8006136 <HAL_NVIC_EnableIRQ>
}
 8005434:	bf00      	nop
 8005436:	3730      	adds	r7, #48	; 0x30
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}
 800543c:	40007800 	.word	0x40007800
 8005440:	40023800 	.word	0x40023800
 8005444:	40021400 	.word	0x40021400
 8005448:	40004800 	.word	0x40004800
 800544c:	40020400 	.word	0x40020400

08005450 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005450:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005488 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005454:	480d      	ldr	r0, [pc, #52]	; (800548c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005456:	490e      	ldr	r1, [pc, #56]	; (8005490 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005458:	4a0e      	ldr	r2, [pc, #56]	; (8005494 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800545a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800545c:	e002      	b.n	8005464 <LoopCopyDataInit>

0800545e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800545e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005462:	3304      	adds	r3, #4

08005464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005468:	d3f9      	bcc.n	800545e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800546a:	4a0b      	ldr	r2, [pc, #44]	; (8005498 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800546c:	4c0b      	ldr	r4, [pc, #44]	; (800549c <LoopFillZerobss+0x26>)
  movs r3, #0
 800546e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005470:	e001      	b.n	8005476 <LoopFillZerobss>

08005472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005474:	3204      	adds	r2, #4

08005476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005478:	d3fb      	bcc.n	8005472 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800547a:	f7ff fd03 	bl	8004e84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800547e:	f00b fc65 	bl	8010d4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005482:	f7fe fe1f 	bl	80040c4 <main>
  bx  lr    
 8005486:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005488:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800548c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005490:	20000db8 	.word	0x20000db8
  ldr r2, =_sidata
 8005494:	080193ec 	.word	0x080193ec
  ldr r2, =_sbss
 8005498:	20000db8 	.word	0x20000db8
  ldr r4, =_ebss
 800549c:	20006568 	.word	0x20006568

080054a0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80054a0:	e7fe      	b.n	80054a0 <CAN1_RX0_IRQHandler>
	...

080054a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 80054a8:	4b08      	ldr	r3, [pc, #32]	; (80054cc <HAL_Init+0x28>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a07      	ldr	r2, [pc, #28]	; (80054cc <HAL_Init+0x28>)
 80054ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054b2:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80054b4:	2003      	movs	r0, #3
 80054b6:	f000 fe17 	bl	80060e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80054ba:	2000      	movs	r0, #0
 80054bc:	f000 f808 	bl	80054d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80054c0:	f7ff fc2e 	bl	8004d20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	40023c00 	.word	0x40023c00

080054d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80054d8:	4b12      	ldr	r3, [pc, #72]	; (8005524 <HAL_InitTick+0x54>)
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	4b12      	ldr	r3, [pc, #72]	; (8005528 <HAL_InitTick+0x58>)
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	4619      	mov	r1, r3
 80054e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80054e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80054ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ee:	4618      	mov	r0, r3
 80054f0:	f000 fe2f 	bl	8006152 <HAL_SYSTICK_Config>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d001      	beq.n	80054fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e00e      	b.n	800551c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2b0f      	cmp	r3, #15
 8005502:	d80a      	bhi.n	800551a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005504:	2200      	movs	r2, #0
 8005506:	6879      	ldr	r1, [r7, #4]
 8005508:	f04f 30ff 	mov.w	r0, #4294967295
 800550c:	f000 fdf7 	bl	80060fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005510:	4a06      	ldr	r2, [pc, #24]	; (800552c <HAL_InitTick+0x5c>)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005516:	2300      	movs	r3, #0
 8005518:	e000      	b.n	800551c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
}
 800551c:	4618      	mov	r0, r3
 800551e:	3708      	adds	r7, #8
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	200003fc 	.word	0x200003fc
 8005528:	20000404 	.word	0x20000404
 800552c:	20000400 	.word	0x20000400

08005530 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005530:	b480      	push	{r7}
 8005532:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005534:	4b06      	ldr	r3, [pc, #24]	; (8005550 <HAL_IncTick+0x20>)
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	461a      	mov	r2, r3
 800553a:	4b06      	ldr	r3, [pc, #24]	; (8005554 <HAL_IncTick+0x24>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4413      	add	r3, r2
 8005540:	4a04      	ldr	r2, [pc, #16]	; (8005554 <HAL_IncTick+0x24>)
 8005542:	6013      	str	r3, [r2, #0]
}
 8005544:	bf00      	nop
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	20000404 	.word	0x20000404
 8005554:	200064b0 	.word	0x200064b0

08005558 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005558:	b480      	push	{r7}
 800555a:	af00      	add	r7, sp, #0
  return uwTick;
 800555c:	4b03      	ldr	r3, [pc, #12]	; (800556c <HAL_GetTick+0x14>)
 800555e:	681b      	ldr	r3, [r3, #0]
}
 8005560:	4618      	mov	r0, r3
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	200064b0 	.word	0x200064b0

08005570 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005578:	f7ff ffee 	bl	8005558 <HAL_GetTick>
 800557c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005588:	d005      	beq.n	8005596 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800558a:	4b0a      	ldr	r3, [pc, #40]	; (80055b4 <HAL_Delay+0x44>)
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	461a      	mov	r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	4413      	add	r3, r2
 8005594:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005596:	bf00      	nop
 8005598:	f7ff ffde 	bl	8005558 <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d8f7      	bhi.n	8005598 <HAL_Delay+0x28>
  {
  }
}
 80055a8:	bf00      	nop
 80055aa:	bf00      	nop
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	20000404 	.word	0x20000404

080055b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055c0:	2300      	movs	r3, #0
 80055c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e031      	b.n	8005632 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d109      	bne.n	80055ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f7fd ff12 	bl	8003400 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ee:	f003 0310 	and.w	r3, r3, #16
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d116      	bne.n	8005624 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055fa:	4b10      	ldr	r3, [pc, #64]	; (800563c <HAL_ADC_Init+0x84>)
 80055fc:	4013      	ands	r3, r2
 80055fe:	f043 0202 	orr.w	r2, r3, #2
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 fa9e 	bl	8005b48 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005616:	f023 0303 	bic.w	r3, r3, #3
 800561a:	f043 0201 	orr.w	r2, r3, #1
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	641a      	str	r2, [r3, #64]	; 0x40
 8005622:	e001      	b.n	8005628 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005630:	7bfb      	ldrb	r3, [r7, #15]
}
 8005632:	4618      	mov	r0, r3
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	ffffeefd 	.word	0xffffeefd

08005640 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8005648:	2300      	movs	r3, #0
 800564a:	617b      	str	r3, [r7, #20]
 800564c:	2300      	movs	r3, #0
 800564e:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	f003 0320 	and.w	r3, r3, #32
 800566e:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d049      	beq.n	800570a <HAL_ADC_IRQHandler+0xca>
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d046      	beq.n	800570a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005680:	f003 0310 	and.w	r3, r3, #16
 8005684:	2b00      	cmp	r3, #0
 8005686:	d105      	bne.n	8005694 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d12b      	bne.n	80056fa <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d127      	bne.n	80056fa <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d006      	beq.n	80056c6 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d119      	bne.n	80056fa <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	685a      	ldr	r2, [r3, #4]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 0220 	bic.w	r2, r2, #32
 80056d4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d105      	bne.n	80056fa <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f2:	f043 0201 	orr.w	r2, r3, #1
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f8b0 	bl	8005860 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f06f 0212 	mvn.w	r2, #18
 8005708:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f003 0304 	and.w	r3, r3, #4
 8005710:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005718:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d057      	beq.n	80057d0 <HAL_ADC_IRQHandler+0x190>
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d054      	beq.n	80057d0 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572a:	f003 0310 	and.w	r3, r3, #16
 800572e:	2b00      	cmp	r3, #0
 8005730:	d105      	bne.n	800573e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005736:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d139      	bne.n	80057c0 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005752:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005756:	2b00      	cmp	r3, #0
 8005758:	d006      	beq.n	8005768 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8005764:	2b00      	cmp	r3, #0
 8005766:	d12b      	bne.n	80057c0 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8005772:	2b00      	cmp	r3, #0
 8005774:	d124      	bne.n	80057c0 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005780:	2b00      	cmp	r3, #0
 8005782:	d11d      	bne.n	80057c0 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8005788:	2b00      	cmp	r3, #0
 800578a:	d119      	bne.n	80057c0 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	685a      	ldr	r2, [r3, #4]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800579a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d105      	bne.n	80057c0 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b8:	f043 0201 	orr.w	r2, r3, #1
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 fabb 	bl	8005d3c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f06f 020c 	mvn.w	r2, #12
 80057ce:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057de:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d017      	beq.n	8005816 <HAL_ADC_IRQHandler+0x1d6>
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d014      	beq.n	8005816 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d10d      	bne.n	8005816 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f834 	bl	8005874 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f06f 0201 	mvn.w	r2, #1
 8005814:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f003 0320 	and.w	r3, r3, #32
 800581c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005824:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d015      	beq.n	8005858 <HAL_ADC_IRQHandler+0x218>
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d012      	beq.n	8005858 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005836:	f043 0202 	orr.w	r2, r3, #2
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f06f 0220 	mvn.w	r2, #32
 8005846:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 f81d 	bl	8005888 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f06f 0220 	mvn.w	r2, #32
 8005856:	601a      	str	r2, [r3, #0]
  }
}
 8005858:	bf00      	nop
 800585a:	3718      	adds	r7, #24
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800587c:	bf00      	nop
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80058a6:	2300      	movs	r3, #0
 80058a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d101      	bne.n	80058b8 <HAL_ADC_ConfigChannel+0x1c>
 80058b4:	2302      	movs	r3, #2
 80058b6:	e136      	b.n	8005b26 <HAL_ADC_ConfigChannel+0x28a>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2b09      	cmp	r3, #9
 80058c6:	d93a      	bls.n	800593e <HAL_ADC_ConfigChannel+0xa2>
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058d0:	d035      	beq.n	800593e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68d9      	ldr	r1, [r3, #12]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	b29b      	uxth	r3, r3
 80058de:	461a      	mov	r2, r3
 80058e0:	4613      	mov	r3, r2
 80058e2:	005b      	lsls	r3, r3, #1
 80058e4:	4413      	add	r3, r2
 80058e6:	3b1e      	subs	r3, #30
 80058e8:	2207      	movs	r2, #7
 80058ea:	fa02 f303 	lsl.w	r3, r2, r3
 80058ee:	43da      	mvns	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	400a      	ands	r2, r1
 80058f6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a8d      	ldr	r2, [pc, #564]	; (8005b34 <HAL_ADC_ConfigChannel+0x298>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d10a      	bne.n	8005918 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68d9      	ldr	r1, [r3, #12]
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	061a      	lsls	r2, r3, #24
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	430a      	orrs	r2, r1
 8005914:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005916:	e035      	b.n	8005984 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68d9      	ldr	r1, [r3, #12]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	689a      	ldr	r2, [r3, #8]
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	b29b      	uxth	r3, r3
 8005928:	4618      	mov	r0, r3
 800592a:	4603      	mov	r3, r0
 800592c:	005b      	lsls	r3, r3, #1
 800592e:	4403      	add	r3, r0
 8005930:	3b1e      	subs	r3, #30
 8005932:	409a      	lsls	r2, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	430a      	orrs	r2, r1
 800593a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800593c:	e022      	b.n	8005984 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	6919      	ldr	r1, [r3, #16]
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	b29b      	uxth	r3, r3
 800594a:	461a      	mov	r2, r3
 800594c:	4613      	mov	r3, r2
 800594e:	005b      	lsls	r3, r3, #1
 8005950:	4413      	add	r3, r2
 8005952:	2207      	movs	r2, #7
 8005954:	fa02 f303 	lsl.w	r3, r2, r3
 8005958:	43da      	mvns	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	400a      	ands	r2, r1
 8005960:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	6919      	ldr	r1, [r3, #16]
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	689a      	ldr	r2, [r3, #8]
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	b29b      	uxth	r3, r3
 8005972:	4618      	mov	r0, r3
 8005974:	4603      	mov	r3, r0
 8005976:	005b      	lsls	r3, r3, #1
 8005978:	4403      	add	r3, r0
 800597a:	409a      	lsls	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	430a      	orrs	r2, r1
 8005982:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	2b06      	cmp	r3, #6
 800598a:	d824      	bhi.n	80059d6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	685a      	ldr	r2, [r3, #4]
 8005996:	4613      	mov	r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	4413      	add	r3, r2
 800599c:	3b05      	subs	r3, #5
 800599e:	221f      	movs	r2, #31
 80059a0:	fa02 f303 	lsl.w	r3, r2, r3
 80059a4:	43da      	mvns	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	400a      	ands	r2, r1
 80059ac:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	4618      	mov	r0, r3
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	685a      	ldr	r2, [r3, #4]
 80059c0:	4613      	mov	r3, r2
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	4413      	add	r3, r2
 80059c6:	3b05      	subs	r3, #5
 80059c8:	fa00 f203 	lsl.w	r2, r0, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	430a      	orrs	r2, r1
 80059d2:	635a      	str	r2, [r3, #52]	; 0x34
 80059d4:	e04c      	b.n	8005a70 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	2b0c      	cmp	r3, #12
 80059dc:	d824      	bhi.n	8005a28 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	685a      	ldr	r2, [r3, #4]
 80059e8:	4613      	mov	r3, r2
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	4413      	add	r3, r2
 80059ee:	3b23      	subs	r3, #35	; 0x23
 80059f0:	221f      	movs	r2, #31
 80059f2:	fa02 f303 	lsl.w	r3, r2, r3
 80059f6:	43da      	mvns	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	400a      	ands	r2, r1
 80059fe:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	685a      	ldr	r2, [r3, #4]
 8005a12:	4613      	mov	r3, r2
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	4413      	add	r3, r2
 8005a18:	3b23      	subs	r3, #35	; 0x23
 8005a1a:	fa00 f203 	lsl.w	r2, r0, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	430a      	orrs	r2, r1
 8005a24:	631a      	str	r2, [r3, #48]	; 0x30
 8005a26:	e023      	b.n	8005a70 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	685a      	ldr	r2, [r3, #4]
 8005a32:	4613      	mov	r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4413      	add	r3, r2
 8005a38:	3b41      	subs	r3, #65	; 0x41
 8005a3a:	221f      	movs	r2, #31
 8005a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a40:	43da      	mvns	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	400a      	ands	r2, r1
 8005a48:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	4618      	mov	r0, r3
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	685a      	ldr	r2, [r3, #4]
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	3b41      	subs	r3, #65	; 0x41
 8005a64:	fa00 f203 	lsl.w	r2, r0, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	430a      	orrs	r2, r1
 8005a6e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a30      	ldr	r2, [pc, #192]	; (8005b38 <HAL_ADC_ConfigChannel+0x29c>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d10a      	bne.n	8005a90 <HAL_ADC_ConfigChannel+0x1f4>
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a82:	d105      	bne.n	8005a90 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005a84:	4b2d      	ldr	r3, [pc, #180]	; (8005b3c <HAL_ADC_ConfigChannel+0x2a0>)
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	4a2c      	ldr	r2, [pc, #176]	; (8005b3c <HAL_ADC_ConfigChannel+0x2a0>)
 8005a8a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005a8e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a28      	ldr	r2, [pc, #160]	; (8005b38 <HAL_ADC_ConfigChannel+0x29c>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d10f      	bne.n	8005aba <HAL_ADC_ConfigChannel+0x21e>
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2b12      	cmp	r3, #18
 8005aa0:	d10b      	bne.n	8005aba <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8005aa2:	4b26      	ldr	r3, [pc, #152]	; (8005b3c <HAL_ADC_ConfigChannel+0x2a0>)
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	4a25      	ldr	r2, [pc, #148]	; (8005b3c <HAL_ADC_ConfigChannel+0x2a0>)
 8005aa8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005aac:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8005aae:	4b23      	ldr	r3, [pc, #140]	; (8005b3c <HAL_ADC_ConfigChannel+0x2a0>)
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	4a22      	ldr	r2, [pc, #136]	; (8005b3c <HAL_ADC_ConfigChannel+0x2a0>)
 8005ab4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005ab8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a1e      	ldr	r2, [pc, #120]	; (8005b38 <HAL_ADC_ConfigChannel+0x29c>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d12b      	bne.n	8005b1c <HAL_ADC_ConfigChannel+0x280>
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a1a      	ldr	r2, [pc, #104]	; (8005b34 <HAL_ADC_ConfigChannel+0x298>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d003      	beq.n	8005ad6 <HAL_ADC_ConfigChannel+0x23a>
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2b11      	cmp	r3, #17
 8005ad4:	d122      	bne.n	8005b1c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8005ad6:	4b19      	ldr	r3, [pc, #100]	; (8005b3c <HAL_ADC_ConfigChannel+0x2a0>)
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	4a18      	ldr	r2, [pc, #96]	; (8005b3c <HAL_ADC_ConfigChannel+0x2a0>)
 8005adc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005ae0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005ae2:	4b16      	ldr	r3, [pc, #88]	; (8005b3c <HAL_ADC_ConfigChannel+0x2a0>)
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	4a15      	ldr	r2, [pc, #84]	; (8005b3c <HAL_ADC_ConfigChannel+0x2a0>)
 8005ae8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005aec:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a10      	ldr	r2, [pc, #64]	; (8005b34 <HAL_ADC_ConfigChannel+0x298>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d111      	bne.n	8005b1c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005af8:	4b11      	ldr	r3, [pc, #68]	; (8005b40 <HAL_ADC_ConfigChannel+0x2a4>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a11      	ldr	r2, [pc, #68]	; (8005b44 <HAL_ADC_ConfigChannel+0x2a8>)
 8005afe:	fba2 2303 	umull	r2, r3, r2, r3
 8005b02:	0c9a      	lsrs	r2, r3, #18
 8005b04:	4613      	mov	r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	4413      	add	r3, r2
 8005b0a:	005b      	lsls	r3, r3, #1
 8005b0c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005b0e:	e002      	b.n	8005b16 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	3b01      	subs	r3, #1
 8005b14:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1f9      	bne.n	8005b10 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3714      	adds	r7, #20
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	10000012 	.word	0x10000012
 8005b38:	40012000 	.word	0x40012000
 8005b3c:	40012300 	.word	0x40012300
 8005b40:	200003fc 	.word	0x200003fc
 8005b44:	431bde83 	.word	0x431bde83

08005b48 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005b50:	4b78      	ldr	r3, [pc, #480]	; (8005d34 <ADC_Init+0x1ec>)
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	4a77      	ldr	r2, [pc, #476]	; (8005d34 <ADC_Init+0x1ec>)
 8005b56:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005b5a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005b5c:	4b75      	ldr	r3, [pc, #468]	; (8005d34 <ADC_Init+0x1ec>)
 8005b5e:	685a      	ldr	r2, [r3, #4]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	4973      	ldr	r1, [pc, #460]	; (8005d34 <ADC_Init+0x1ec>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	685a      	ldr	r2, [r3, #4]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	6859      	ldr	r1, [r3, #4]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	021a      	lsls	r2, r3, #8
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	685a      	ldr	r2, [r3, #4]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005b9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	6859      	ldr	r1, [r3, #4]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	689a      	ldr	r2, [r3, #8]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	430a      	orrs	r2, r1
 8005bae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689a      	ldr	r2, [r3, #8]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	6899      	ldr	r1, [r3, #8]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	68da      	ldr	r2, [r3, #12]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd6:	4a58      	ldr	r2, [pc, #352]	; (8005d38 <ADC_Init+0x1f0>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d022      	beq.n	8005c22 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	689a      	ldr	r2, [r3, #8]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005bea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6899      	ldr	r1, [r3, #8]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	689a      	ldr	r2, [r3, #8]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005c0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	6899      	ldr	r1, [r3, #8]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	430a      	orrs	r2, r1
 8005c1e:	609a      	str	r2, [r3, #8]
 8005c20:	e00f      	b.n	8005c42 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	689a      	ldr	r2, [r3, #8]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005c30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	689a      	ldr	r2, [r3, #8]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005c40:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	689a      	ldr	r2, [r3, #8]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f022 0202 	bic.w	r2, r2, #2
 8005c50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	6899      	ldr	r1, [r3, #8]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	005a      	lsls	r2, r3, #1
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	430a      	orrs	r2, r1
 8005c64:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d01b      	beq.n	8005ca8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	685a      	ldr	r2, [r3, #4]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c7e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	685a      	ldr	r2, [r3, #4]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005c8e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	6859      	ldr	r1, [r3, #4]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	035a      	lsls	r2, r3, #13
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	605a      	str	r2, [r3, #4]
 8005ca6:	e007      	b.n	8005cb8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	685a      	ldr	r2, [r3, #4]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cb6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005cc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	69db      	ldr	r3, [r3, #28]
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	051a      	lsls	r2, r3, #20
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	689a      	ldr	r2, [r3, #8]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005cec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	6899      	ldr	r1, [r3, #8]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005cfa:	025a      	lsls	r2, r3, #9
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	430a      	orrs	r2, r1
 8005d02:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	689a      	ldr	r2, [r3, #8]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	6899      	ldr	r1, [r3, #8]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	029a      	lsls	r2, r3, #10
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	430a      	orrs	r2, r1
 8005d26:	609a      	str	r2, [r3, #8]
}
 8005d28:	bf00      	nop
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr
 8005d34:	40012300 	.word	0x40012300
 8005d38:	0f000001 	.word	0x0f000001

08005d3c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8005d44:	bf00      	nop
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d101      	bne.n	8005d62 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e0ed      	b.n	8005f3e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d102      	bne.n	8005d74 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f7fd fcb4 	bl	80036dc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f042 0201 	orr.w	r2, r2, #1
 8005d82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d84:	f7ff fbe8 	bl	8005558 <HAL_GetTick>
 8005d88:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005d8a:	e012      	b.n	8005db2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005d8c:	f7ff fbe4 	bl	8005558 <HAL_GetTick>
 8005d90:	4602      	mov	r2, r0
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	2b0a      	cmp	r3, #10
 8005d98:	d90b      	bls.n	8005db2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2205      	movs	r2, #5
 8005daa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e0c5      	b.n	8005f3e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	f003 0301 	and.w	r3, r3, #1
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d0e5      	beq.n	8005d8c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f022 0202 	bic.w	r2, r2, #2
 8005dce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005dd0:	f7ff fbc2 	bl	8005558 <HAL_GetTick>
 8005dd4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005dd6:	e012      	b.n	8005dfe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005dd8:	f7ff fbbe 	bl	8005558 <HAL_GetTick>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	2b0a      	cmp	r3, #10
 8005de4:	d90b      	bls.n	8005dfe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2205      	movs	r2, #5
 8005df6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e09f      	b.n	8005f3e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	f003 0302 	and.w	r3, r3, #2
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1e5      	bne.n	8005dd8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	7e1b      	ldrb	r3, [r3, #24]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d108      	bne.n	8005e26 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005e22:	601a      	str	r2, [r3, #0]
 8005e24:	e007      	b.n	8005e36 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e34:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	7e5b      	ldrb	r3, [r3, #25]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d108      	bne.n	8005e50 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e4c:	601a      	str	r2, [r3, #0]
 8005e4e:	e007      	b.n	8005e60 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	7e9b      	ldrb	r3, [r3, #26]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d108      	bne.n	8005e7a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f042 0220 	orr.w	r2, r2, #32
 8005e76:	601a      	str	r2, [r3, #0]
 8005e78:	e007      	b.n	8005e8a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f022 0220 	bic.w	r2, r2, #32
 8005e88:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	7edb      	ldrb	r3, [r3, #27]
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d108      	bne.n	8005ea4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f022 0210 	bic.w	r2, r2, #16
 8005ea0:	601a      	str	r2, [r3, #0]
 8005ea2:	e007      	b.n	8005eb4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f042 0210 	orr.w	r2, r2, #16
 8005eb2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	7f1b      	ldrb	r3, [r3, #28]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d108      	bne.n	8005ece <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f042 0208 	orr.w	r2, r2, #8
 8005eca:	601a      	str	r2, [r3, #0]
 8005ecc:	e007      	b.n	8005ede <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f022 0208 	bic.w	r2, r2, #8
 8005edc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	7f5b      	ldrb	r3, [r3, #29]
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d108      	bne.n	8005ef8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f042 0204 	orr.w	r2, r2, #4
 8005ef4:	601a      	str	r2, [r3, #0]
 8005ef6:	e007      	b.n	8005f08 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f022 0204 	bic.w	r2, r2, #4
 8005f06:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	689a      	ldr	r2, [r3, #8]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	431a      	orrs	r2, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	431a      	orrs	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	695b      	ldr	r3, [r3, #20]
 8005f1c:	ea42 0103 	orr.w	r1, r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	1e5a      	subs	r2, r3, #1
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
	...

08005f48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f003 0307 	and.w	r3, r3, #7
 8005f56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f58:	4b0b      	ldr	r3, [pc, #44]	; (8005f88 <__NVIC_SetPriorityGrouping+0x40>)
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f5e:	68ba      	ldr	r2, [r7, #8]
 8005f60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005f64:	4013      	ands	r3, r2
 8005f66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005f70:	4b06      	ldr	r3, [pc, #24]	; (8005f8c <__NVIC_SetPriorityGrouping+0x44>)
 8005f72:	4313      	orrs	r3, r2
 8005f74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f76:	4a04      	ldr	r2, [pc, #16]	; (8005f88 <__NVIC_SetPriorityGrouping+0x40>)
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	60d3      	str	r3, [r2, #12]
}
 8005f7c:	bf00      	nop
 8005f7e:	3714      	adds	r7, #20
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr
 8005f88:	e000ed00 	.word	0xe000ed00
 8005f8c:	05fa0000 	.word	0x05fa0000

08005f90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f90:	b480      	push	{r7}
 8005f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f94:	4b04      	ldr	r3, [pc, #16]	; (8005fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	0a1b      	lsrs	r3, r3, #8
 8005f9a:	f003 0307 	and.w	r3, r3, #7
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr
 8005fa8:	e000ed00 	.word	0xe000ed00

08005fac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	db0b      	blt.n	8005fd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005fbe:	79fb      	ldrb	r3, [r7, #7]
 8005fc0:	f003 021f 	and.w	r2, r3, #31
 8005fc4:	4907      	ldr	r1, [pc, #28]	; (8005fe4 <__NVIC_EnableIRQ+0x38>)
 8005fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fca:	095b      	lsrs	r3, r3, #5
 8005fcc:	2001      	movs	r0, #1
 8005fce:	fa00 f202 	lsl.w	r2, r0, r2
 8005fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005fd6:	bf00      	nop
 8005fd8:	370c      	adds	r7, #12
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
 8005fe4:	e000e100 	.word	0xe000e100

08005fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	4603      	mov	r3, r0
 8005ff0:	6039      	str	r1, [r7, #0]
 8005ff2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	db0a      	blt.n	8006012 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	b2da      	uxtb	r2, r3
 8006000:	490c      	ldr	r1, [pc, #48]	; (8006034 <__NVIC_SetPriority+0x4c>)
 8006002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006006:	0112      	lsls	r2, r2, #4
 8006008:	b2d2      	uxtb	r2, r2
 800600a:	440b      	add	r3, r1
 800600c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006010:	e00a      	b.n	8006028 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	b2da      	uxtb	r2, r3
 8006016:	4908      	ldr	r1, [pc, #32]	; (8006038 <__NVIC_SetPriority+0x50>)
 8006018:	79fb      	ldrb	r3, [r7, #7]
 800601a:	f003 030f 	and.w	r3, r3, #15
 800601e:	3b04      	subs	r3, #4
 8006020:	0112      	lsls	r2, r2, #4
 8006022:	b2d2      	uxtb	r2, r2
 8006024:	440b      	add	r3, r1
 8006026:	761a      	strb	r2, [r3, #24]
}
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr
 8006034:	e000e100 	.word	0xe000e100
 8006038:	e000ed00 	.word	0xe000ed00

0800603c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800603c:	b480      	push	{r7}
 800603e:	b089      	sub	sp, #36	; 0x24
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f003 0307 	and.w	r3, r3, #7
 800604e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	f1c3 0307 	rsb	r3, r3, #7
 8006056:	2b04      	cmp	r3, #4
 8006058:	bf28      	it	cs
 800605a:	2304      	movcs	r3, #4
 800605c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	3304      	adds	r3, #4
 8006062:	2b06      	cmp	r3, #6
 8006064:	d902      	bls.n	800606c <NVIC_EncodePriority+0x30>
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	3b03      	subs	r3, #3
 800606a:	e000      	b.n	800606e <NVIC_EncodePriority+0x32>
 800606c:	2300      	movs	r3, #0
 800606e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006070:	f04f 32ff 	mov.w	r2, #4294967295
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	fa02 f303 	lsl.w	r3, r2, r3
 800607a:	43da      	mvns	r2, r3
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	401a      	ands	r2, r3
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006084:	f04f 31ff 	mov.w	r1, #4294967295
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	fa01 f303 	lsl.w	r3, r1, r3
 800608e:	43d9      	mvns	r1, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006094:	4313      	orrs	r3, r2
         );
}
 8006096:	4618      	mov	r0, r3
 8006098:	3724      	adds	r7, #36	; 0x24
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr
	...

080060a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	3b01      	subs	r3, #1
 80060b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80060b4:	d301      	bcc.n	80060ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80060b6:	2301      	movs	r3, #1
 80060b8:	e00f      	b.n	80060da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80060ba:	4a0a      	ldr	r2, [pc, #40]	; (80060e4 <SysTick_Config+0x40>)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	3b01      	subs	r3, #1
 80060c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80060c2:	210f      	movs	r1, #15
 80060c4:	f04f 30ff 	mov.w	r0, #4294967295
 80060c8:	f7ff ff8e 	bl	8005fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80060cc:	4b05      	ldr	r3, [pc, #20]	; (80060e4 <SysTick_Config+0x40>)
 80060ce:	2200      	movs	r2, #0
 80060d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80060d2:	4b04      	ldr	r3, [pc, #16]	; (80060e4 <SysTick_Config+0x40>)
 80060d4:	2207      	movs	r2, #7
 80060d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3708      	adds	r7, #8
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	e000e010 	.word	0xe000e010

080060e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f7ff ff29 	bl	8005f48 <__NVIC_SetPriorityGrouping>
}
 80060f6:	bf00      	nop
 80060f8:	3708      	adds	r7, #8
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}

080060fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80060fe:	b580      	push	{r7, lr}
 8006100:	b086      	sub	sp, #24
 8006102:	af00      	add	r7, sp, #0
 8006104:	4603      	mov	r3, r0
 8006106:	60b9      	str	r1, [r7, #8]
 8006108:	607a      	str	r2, [r7, #4]
 800610a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800610c:	2300      	movs	r3, #0
 800610e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006110:	f7ff ff3e 	bl	8005f90 <__NVIC_GetPriorityGrouping>
 8006114:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	68b9      	ldr	r1, [r7, #8]
 800611a:	6978      	ldr	r0, [r7, #20]
 800611c:	f7ff ff8e 	bl	800603c <NVIC_EncodePriority>
 8006120:	4602      	mov	r2, r0
 8006122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006126:	4611      	mov	r1, r2
 8006128:	4618      	mov	r0, r3
 800612a:	f7ff ff5d 	bl	8005fe8 <__NVIC_SetPriority>
}
 800612e:	bf00      	nop
 8006130:	3718      	adds	r7, #24
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006136:	b580      	push	{r7, lr}
 8006138:	b082      	sub	sp, #8
 800613a:	af00      	add	r7, sp, #0
 800613c:	4603      	mov	r3, r0
 800613e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006144:	4618      	mov	r0, r3
 8006146:	f7ff ff31 	bl	8005fac <__NVIC_EnableIRQ>
}
 800614a:	bf00      	nop
 800614c:	3708      	adds	r7, #8
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b082      	sub	sp, #8
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f7ff ffa2 	bl	80060a4 <SysTick_Config>
 8006160:	4603      	mov	r3, r0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3708      	adds	r7, #8
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
	...

0800616c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b086      	sub	sp, #24
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006174:	2300      	movs	r3, #0
 8006176:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006178:	f7ff f9ee 	bl	8005558 <HAL_GetTick>
 800617c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d101      	bne.n	8006188 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e099      	b.n	80062bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2202      	movs	r2, #2
 800618c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f022 0201 	bic.w	r2, r2, #1
 80061a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80061a8:	e00f      	b.n	80061ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80061aa:	f7ff f9d5 	bl	8005558 <HAL_GetTick>
 80061ae:	4602      	mov	r2, r0
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	2b05      	cmp	r3, #5
 80061b6:	d908      	bls.n	80061ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2220      	movs	r2, #32
 80061bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2203      	movs	r2, #3
 80061c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e078      	b.n	80062bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0301 	and.w	r3, r3, #1
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d1e8      	bne.n	80061aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	4b38      	ldr	r3, [pc, #224]	; (80062c4 <HAL_DMA_Init+0x158>)
 80061e4:	4013      	ands	r3, r2
 80061e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	685a      	ldr	r2, [r3, #4]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80061f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006202:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800620e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a1b      	ldr	r3, [r3, #32]
 8006214:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	4313      	orrs	r3, r2
 800621a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006220:	2b04      	cmp	r3, #4
 8006222:	d107      	bne.n	8006234 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800622c:	4313      	orrs	r3, r2
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	4313      	orrs	r3, r2
 8006232:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	697a      	ldr	r2, [r7, #20]
 800623a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	695b      	ldr	r3, [r3, #20]
 8006242:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	f023 0307 	bic.w	r3, r3, #7
 800624a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	4313      	orrs	r3, r2
 8006254:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625a:	2b04      	cmp	r3, #4
 800625c:	d117      	bne.n	800628e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006262:	697a      	ldr	r2, [r7, #20]
 8006264:	4313      	orrs	r3, r2
 8006266:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626c:	2b00      	cmp	r3, #0
 800626e:	d00e      	beq.n	800628e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 fb15 	bl	80068a0 <DMA_CheckFifoParam>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d008      	beq.n	800628e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2240      	movs	r2, #64	; 0x40
 8006280:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2201      	movs	r2, #1
 8006286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800628a:	2301      	movs	r3, #1
 800628c:	e016      	b.n	80062bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 facc 	bl	8006834 <DMA_CalcBaseAndBitshift>
 800629c:	4603      	mov	r3, r0
 800629e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062a4:	223f      	movs	r2, #63	; 0x3f
 80062a6:	409a      	lsls	r2, r3
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3718      	adds	r7, #24
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	e010803f 	.word	0xe010803f

080062c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b086      	sub	sp, #24
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
 80062d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062d6:	2300      	movs	r3, #0
 80062d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d101      	bne.n	80062ee <HAL_DMA_Start_IT+0x26>
 80062ea:	2302      	movs	r3, #2
 80062ec:	e048      	b.n	8006380 <HAL_DMA_Start_IT+0xb8>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2201      	movs	r2, #1
 80062f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d137      	bne.n	8006372 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2202      	movs	r2, #2
 8006306:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	68b9      	ldr	r1, [r7, #8]
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	f000 fa5e 	bl	80067d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006320:	223f      	movs	r2, #63	; 0x3f
 8006322:	409a      	lsls	r2, r3
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f042 0216 	orr.w	r2, r2, #22
 8006336:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	695a      	ldr	r2, [r3, #20]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006346:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634c:	2b00      	cmp	r3, #0
 800634e:	d007      	beq.n	8006360 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f042 0208 	orr.w	r2, r2, #8
 800635e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f042 0201 	orr.w	r2, r2, #1
 800636e:	601a      	str	r2, [r3, #0]
 8006370:	e005      	b.n	800637e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800637a:	2302      	movs	r3, #2
 800637c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800637e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006380:	4618      	mov	r0, r3
 8006382:	3718      	adds	r7, #24
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006394:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006396:	f7ff f8df 	bl	8005558 <HAL_GetTick>
 800639a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d008      	beq.n	80063ba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2280      	movs	r2, #128	; 0x80
 80063ac:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e052      	b.n	8006460 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f022 0216 	bic.w	r2, r2, #22
 80063c8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	695a      	ldr	r2, [r3, #20]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063d8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d103      	bne.n	80063ea <HAL_DMA_Abort+0x62>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d007      	beq.n	80063fa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f022 0208 	bic.w	r2, r2, #8
 80063f8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f022 0201 	bic.w	r2, r2, #1
 8006408:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800640a:	e013      	b.n	8006434 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800640c:	f7ff f8a4 	bl	8005558 <HAL_GetTick>
 8006410:	4602      	mov	r2, r0
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	2b05      	cmp	r3, #5
 8006418:	d90c      	bls.n	8006434 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2220      	movs	r2, #32
 800641e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2203      	movs	r2, #3
 8006424:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	e015      	b.n	8006460 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 0301 	and.w	r3, r3, #1
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1e4      	bne.n	800640c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006446:	223f      	movs	r2, #63	; 0x3f
 8006448:	409a      	lsls	r2, r3
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2201      	movs	r2, #1
 8006452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3710      	adds	r7, #16
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006476:	b2db      	uxtb	r3, r3
 8006478:	2b02      	cmp	r3, #2
 800647a:	d004      	beq.n	8006486 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2280      	movs	r2, #128	; 0x80
 8006480:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e00c      	b.n	80064a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2205      	movs	r2, #5
 800648a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f022 0201 	bic.w	r2, r2, #1
 800649c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800649e:	2300      	movs	r3, #0
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b086      	sub	sp, #24
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80064b4:	2300      	movs	r3, #0
 80064b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80064b8:	4b8e      	ldr	r3, [pc, #568]	; (80066f4 <HAL_DMA_IRQHandler+0x248>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a8e      	ldr	r2, [pc, #568]	; (80066f8 <HAL_DMA_IRQHandler+0x24c>)
 80064be:	fba2 2303 	umull	r2, r3, r2, r3
 80064c2:	0a9b      	lsrs	r3, r3, #10
 80064c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064d6:	2208      	movs	r2, #8
 80064d8:	409a      	lsls	r2, r3
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	4013      	ands	r3, r2
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d01a      	beq.n	8006518 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0304 	and.w	r3, r3, #4
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d013      	beq.n	8006518 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f022 0204 	bic.w	r2, r2, #4
 80064fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006504:	2208      	movs	r2, #8
 8006506:	409a      	lsls	r2, r3
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006510:	f043 0201 	orr.w	r2, r3, #1
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800651c:	2201      	movs	r2, #1
 800651e:	409a      	lsls	r2, r3
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	4013      	ands	r3, r2
 8006524:	2b00      	cmp	r3, #0
 8006526:	d012      	beq.n	800654e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	695b      	ldr	r3, [r3, #20]
 800652e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00b      	beq.n	800654e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800653a:	2201      	movs	r2, #1
 800653c:	409a      	lsls	r2, r3
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006546:	f043 0202 	orr.w	r2, r3, #2
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006552:	2204      	movs	r2, #4
 8006554:	409a      	lsls	r2, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	4013      	ands	r3, r2
 800655a:	2b00      	cmp	r3, #0
 800655c:	d012      	beq.n	8006584 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 0302 	and.w	r3, r3, #2
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00b      	beq.n	8006584 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006570:	2204      	movs	r2, #4
 8006572:	409a      	lsls	r2, r3
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800657c:	f043 0204 	orr.w	r2, r3, #4
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006588:	2210      	movs	r2, #16
 800658a:	409a      	lsls	r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	4013      	ands	r3, r2
 8006590:	2b00      	cmp	r3, #0
 8006592:	d043      	beq.n	800661c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0308 	and.w	r3, r3, #8
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d03c      	beq.n	800661c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065a6:	2210      	movs	r2, #16
 80065a8:	409a      	lsls	r2, r3
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d018      	beq.n	80065ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d108      	bne.n	80065dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d024      	beq.n	800661c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	4798      	blx	r3
 80065da:	e01f      	b.n	800661c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d01b      	beq.n	800661c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	4798      	blx	r3
 80065ec:	e016      	b.n	800661c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d107      	bne.n	800660c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f022 0208 	bic.w	r2, r2, #8
 800660a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006610:	2b00      	cmp	r3, #0
 8006612:	d003      	beq.n	800661c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006620:	2220      	movs	r2, #32
 8006622:	409a      	lsls	r2, r3
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	4013      	ands	r3, r2
 8006628:	2b00      	cmp	r3, #0
 800662a:	f000 808f 	beq.w	800674c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 0310 	and.w	r3, r3, #16
 8006638:	2b00      	cmp	r3, #0
 800663a:	f000 8087 	beq.w	800674c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006642:	2220      	movs	r2, #32
 8006644:	409a      	lsls	r2, r3
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006650:	b2db      	uxtb	r3, r3
 8006652:	2b05      	cmp	r3, #5
 8006654:	d136      	bne.n	80066c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f022 0216 	bic.w	r2, r2, #22
 8006664:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	695a      	ldr	r2, [r3, #20]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006674:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667a:	2b00      	cmp	r3, #0
 800667c:	d103      	bne.n	8006686 <HAL_DMA_IRQHandler+0x1da>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006682:	2b00      	cmp	r3, #0
 8006684:	d007      	beq.n	8006696 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f022 0208 	bic.w	r2, r2, #8
 8006694:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800669a:	223f      	movs	r2, #63	; 0x3f
 800669c:	409a      	lsls	r2, r3
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2201      	movs	r2, #1
 80066a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d07e      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	4798      	blx	r3
        }
        return;
 80066c2:	e079      	b.n	80067b8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d01d      	beq.n	800670e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d10d      	bne.n	80066fc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d031      	beq.n	800674c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	4798      	blx	r3
 80066f0:	e02c      	b.n	800674c <HAL_DMA_IRQHandler+0x2a0>
 80066f2:	bf00      	nop
 80066f4:	200003fc 	.word	0x200003fc
 80066f8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006700:	2b00      	cmp	r3, #0
 8006702:	d023      	beq.n	800674c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	4798      	blx	r3
 800670c:	e01e      	b.n	800674c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10f      	bne.n	800673c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f022 0210 	bic.w	r2, r2, #16
 800672a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006740:	2b00      	cmp	r3, #0
 8006742:	d003      	beq.n	800674c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006750:	2b00      	cmp	r3, #0
 8006752:	d032      	beq.n	80067ba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006758:	f003 0301 	and.w	r3, r3, #1
 800675c:	2b00      	cmp	r3, #0
 800675e:	d022      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2205      	movs	r2, #5
 8006764:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f022 0201 	bic.w	r2, r2, #1
 8006776:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	3301      	adds	r3, #1
 800677c:	60bb      	str	r3, [r7, #8]
 800677e:	697a      	ldr	r2, [r7, #20]
 8006780:	429a      	cmp	r2, r3
 8006782:	d307      	bcc.n	8006794 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 0301 	and.w	r3, r3, #1
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1f2      	bne.n	8006778 <HAL_DMA_IRQHandler+0x2cc>
 8006792:	e000      	b.n	8006796 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006794:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2201      	movs	r2, #1
 800679a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d005      	beq.n	80067ba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	4798      	blx	r3
 80067b6:	e000      	b.n	80067ba <HAL_DMA_IRQHandler+0x30e>
        return;
 80067b8:	bf00      	nop
    }
  }
}
 80067ba:	3718      	adds	r7, #24
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	607a      	str	r2, [r7, #4]
 80067e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80067f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	683a      	ldr	r2, [r7, #0]
 80067fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	2b40      	cmp	r3, #64	; 0x40
 8006804:	d108      	bne.n	8006818 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68ba      	ldr	r2, [r7, #8]
 8006814:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006816:	e007      	b.n	8006828 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	68ba      	ldr	r2, [r7, #8]
 800681e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	60da      	str	r2, [r3, #12]
}
 8006828:	bf00      	nop
 800682a:	3714      	adds	r7, #20
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006834:	b480      	push	{r7}
 8006836:	b085      	sub	sp, #20
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	b2db      	uxtb	r3, r3
 8006842:	3b10      	subs	r3, #16
 8006844:	4a13      	ldr	r2, [pc, #76]	; (8006894 <DMA_CalcBaseAndBitshift+0x60>)
 8006846:	fba2 2303 	umull	r2, r3, r2, r3
 800684a:	091b      	lsrs	r3, r3, #4
 800684c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800684e:	4a12      	ldr	r2, [pc, #72]	; (8006898 <DMA_CalcBaseAndBitshift+0x64>)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	4413      	add	r3, r2
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	461a      	mov	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2b03      	cmp	r3, #3
 8006860:	d908      	bls.n	8006874 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	461a      	mov	r2, r3
 8006868:	4b0c      	ldr	r3, [pc, #48]	; (800689c <DMA_CalcBaseAndBitshift+0x68>)
 800686a:	4013      	ands	r3, r2
 800686c:	1d1a      	adds	r2, r3, #4
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	659a      	str	r2, [r3, #88]	; 0x58
 8006872:	e006      	b.n	8006882 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	461a      	mov	r2, r3
 800687a:	4b08      	ldr	r3, [pc, #32]	; (800689c <DMA_CalcBaseAndBitshift+0x68>)
 800687c:	4013      	ands	r3, r2
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006886:	4618      	mov	r0, r3
 8006888:	3714      	adds	r7, #20
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	aaaaaaab 	.word	0xaaaaaaab
 8006898:	080176cc 	.word	0x080176cc
 800689c:	fffffc00 	.word	0xfffffc00

080068a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b085      	sub	sp, #20
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068a8:	2300      	movs	r3, #0
 80068aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d11f      	bne.n	80068fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	2b03      	cmp	r3, #3
 80068be:	d856      	bhi.n	800696e <DMA_CheckFifoParam+0xce>
 80068c0:	a201      	add	r2, pc, #4	; (adr r2, 80068c8 <DMA_CheckFifoParam+0x28>)
 80068c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c6:	bf00      	nop
 80068c8:	080068d9 	.word	0x080068d9
 80068cc:	080068eb 	.word	0x080068eb
 80068d0:	080068d9 	.word	0x080068d9
 80068d4:	0800696f 	.word	0x0800696f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d046      	beq.n	8006972 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068e8:	e043      	b.n	8006972 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80068f2:	d140      	bne.n	8006976 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068f8:	e03d      	b.n	8006976 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006902:	d121      	bne.n	8006948 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	2b03      	cmp	r3, #3
 8006908:	d837      	bhi.n	800697a <DMA_CheckFifoParam+0xda>
 800690a:	a201      	add	r2, pc, #4	; (adr r2, 8006910 <DMA_CheckFifoParam+0x70>)
 800690c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006910:	08006921 	.word	0x08006921
 8006914:	08006927 	.word	0x08006927
 8006918:	08006921 	.word	0x08006921
 800691c:	08006939 	.word	0x08006939
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	73fb      	strb	r3, [r7, #15]
      break;
 8006924:	e030      	b.n	8006988 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800692e:	2b00      	cmp	r3, #0
 8006930:	d025      	beq.n	800697e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006936:	e022      	b.n	800697e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006940:	d11f      	bne.n	8006982 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006946:	e01c      	b.n	8006982 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	2b02      	cmp	r3, #2
 800694c:	d903      	bls.n	8006956 <DMA_CheckFifoParam+0xb6>
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	2b03      	cmp	r3, #3
 8006952:	d003      	beq.n	800695c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006954:	e018      	b.n	8006988 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	73fb      	strb	r3, [r7, #15]
      break;
 800695a:	e015      	b.n	8006988 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006960:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00e      	beq.n	8006986 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	73fb      	strb	r3, [r7, #15]
      break;
 800696c:	e00b      	b.n	8006986 <DMA_CheckFifoParam+0xe6>
      break;
 800696e:	bf00      	nop
 8006970:	e00a      	b.n	8006988 <DMA_CheckFifoParam+0xe8>
      break;
 8006972:	bf00      	nop
 8006974:	e008      	b.n	8006988 <DMA_CheckFifoParam+0xe8>
      break;
 8006976:	bf00      	nop
 8006978:	e006      	b.n	8006988 <DMA_CheckFifoParam+0xe8>
      break;
 800697a:	bf00      	nop
 800697c:	e004      	b.n	8006988 <DMA_CheckFifoParam+0xe8>
      break;
 800697e:	bf00      	nop
 8006980:	e002      	b.n	8006988 <DMA_CheckFifoParam+0xe8>
      break;   
 8006982:	bf00      	nop
 8006984:	e000      	b.n	8006988 <DMA_CheckFifoParam+0xe8>
      break;
 8006986:	bf00      	nop
    }
  } 
  
  return status; 
 8006988:	7bfb      	ldrb	r3, [r7, #15]
}
 800698a:	4618      	mov	r0, r3
 800698c:	3714      	adds	r7, #20
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop

08006998 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006998:	b480      	push	{r7}
 800699a:	b089      	sub	sp, #36	; 0x24
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80069a2:	2300      	movs	r3, #0
 80069a4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80069a6:	2300      	movs	r3, #0
 80069a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80069aa:	2300      	movs	r3, #0
 80069ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80069ae:	2300      	movs	r3, #0
 80069b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80069b2:	2300      	movs	r3, #0
 80069b4:	61fb      	str	r3, [r7, #28]
 80069b6:	e175      	b.n	8006ca4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80069b8:	2201      	movs	r2, #1
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	fa02 f303 	lsl.w	r3, r2, r3
 80069c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	697a      	ldr	r2, [r7, #20]
 80069c8:	4013      	ands	r3, r2
 80069ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	f040 8164 	bne.w	8006c9e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	f003 0303 	and.w	r3, r3, #3
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d005      	beq.n	80069ee <HAL_GPIO_Init+0x56>
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	f003 0303 	and.w	r3, r3, #3
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d130      	bne.n	8006a50 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	005b      	lsls	r3, r3, #1
 80069f8:	2203      	movs	r2, #3
 80069fa:	fa02 f303 	lsl.w	r3, r2, r3
 80069fe:	43db      	mvns	r3, r3
 8006a00:	69ba      	ldr	r2, [r7, #24]
 8006a02:	4013      	ands	r3, r2
 8006a04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	68da      	ldr	r2, [r3, #12]
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	005b      	lsls	r3, r3, #1
 8006a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a12:	69ba      	ldr	r2, [r7, #24]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	69ba      	ldr	r2, [r7, #24]
 8006a1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006a24:	2201      	movs	r2, #1
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	fa02 f303 	lsl.w	r3, r2, r3
 8006a2c:	43db      	mvns	r3, r3
 8006a2e:	69ba      	ldr	r2, [r7, #24]
 8006a30:	4013      	ands	r3, r2
 8006a32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	091b      	lsrs	r3, r3, #4
 8006a3a:	f003 0201 	and.w	r2, r3, #1
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	fa02 f303 	lsl.w	r3, r2, r3
 8006a44:	69ba      	ldr	r2, [r7, #24]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	69ba      	ldr	r2, [r7, #24]
 8006a4e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	f003 0303 	and.w	r3, r3, #3
 8006a58:	2b03      	cmp	r3, #3
 8006a5a:	d017      	beq.n	8006a8c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	005b      	lsls	r3, r3, #1
 8006a66:	2203      	movs	r2, #3
 8006a68:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6c:	43db      	mvns	r3, r3
 8006a6e:	69ba      	ldr	r2, [r7, #24]
 8006a70:	4013      	ands	r3, r2
 8006a72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	689a      	ldr	r2, [r3, #8]
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	005b      	lsls	r3, r3, #1
 8006a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a80:	69ba      	ldr	r2, [r7, #24]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	69ba      	ldr	r2, [r7, #24]
 8006a8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	f003 0303 	and.w	r3, r3, #3
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d123      	bne.n	8006ae0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	08da      	lsrs	r2, r3, #3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	3208      	adds	r2, #8
 8006aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	f003 0307 	and.w	r3, r3, #7
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	220f      	movs	r2, #15
 8006ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab4:	43db      	mvns	r3, r3
 8006ab6:	69ba      	ldr	r2, [r7, #24]
 8006ab8:	4013      	ands	r3, r2
 8006aba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	691a      	ldr	r2, [r3, #16]
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	f003 0307 	and.w	r3, r3, #7
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8006acc:	69ba      	ldr	r2, [r7, #24]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	08da      	lsrs	r2, r3, #3
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	3208      	adds	r2, #8
 8006ada:	69b9      	ldr	r1, [r7, #24]
 8006adc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	005b      	lsls	r3, r3, #1
 8006aea:	2203      	movs	r2, #3
 8006aec:	fa02 f303 	lsl.w	r3, r2, r3
 8006af0:	43db      	mvns	r3, r3
 8006af2:	69ba      	ldr	r2, [r7, #24]
 8006af4:	4013      	ands	r3, r2
 8006af6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	f003 0203 	and.w	r2, r3, #3
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	005b      	lsls	r3, r3, #1
 8006b04:	fa02 f303 	lsl.w	r3, r2, r3
 8006b08:	69ba      	ldr	r2, [r7, #24]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	69ba      	ldr	r2, [r7, #24]
 8006b12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f000 80be 	beq.w	8006c9e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b22:	4b66      	ldr	r3, [pc, #408]	; (8006cbc <HAL_GPIO_Init+0x324>)
 8006b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b26:	4a65      	ldr	r2, [pc, #404]	; (8006cbc <HAL_GPIO_Init+0x324>)
 8006b28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8006b2e:	4b63      	ldr	r3, [pc, #396]	; (8006cbc <HAL_GPIO_Init+0x324>)
 8006b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b36:	60fb      	str	r3, [r7, #12]
 8006b38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006b3a:	4a61      	ldr	r2, [pc, #388]	; (8006cc0 <HAL_GPIO_Init+0x328>)
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	089b      	lsrs	r3, r3, #2
 8006b40:	3302      	adds	r3, #2
 8006b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	f003 0303 	and.w	r3, r3, #3
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	220f      	movs	r2, #15
 8006b52:	fa02 f303 	lsl.w	r3, r2, r3
 8006b56:	43db      	mvns	r3, r3
 8006b58:	69ba      	ldr	r2, [r7, #24]
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a58      	ldr	r2, [pc, #352]	; (8006cc4 <HAL_GPIO_Init+0x32c>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d037      	beq.n	8006bd6 <HAL_GPIO_Init+0x23e>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a57      	ldr	r2, [pc, #348]	; (8006cc8 <HAL_GPIO_Init+0x330>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d031      	beq.n	8006bd2 <HAL_GPIO_Init+0x23a>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a56      	ldr	r2, [pc, #344]	; (8006ccc <HAL_GPIO_Init+0x334>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d02b      	beq.n	8006bce <HAL_GPIO_Init+0x236>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a55      	ldr	r2, [pc, #340]	; (8006cd0 <HAL_GPIO_Init+0x338>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d025      	beq.n	8006bca <HAL_GPIO_Init+0x232>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a54      	ldr	r2, [pc, #336]	; (8006cd4 <HAL_GPIO_Init+0x33c>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d01f      	beq.n	8006bc6 <HAL_GPIO_Init+0x22e>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a53      	ldr	r2, [pc, #332]	; (8006cd8 <HAL_GPIO_Init+0x340>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d019      	beq.n	8006bc2 <HAL_GPIO_Init+0x22a>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a52      	ldr	r2, [pc, #328]	; (8006cdc <HAL_GPIO_Init+0x344>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d013      	beq.n	8006bbe <HAL_GPIO_Init+0x226>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a51      	ldr	r2, [pc, #324]	; (8006ce0 <HAL_GPIO_Init+0x348>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d00d      	beq.n	8006bba <HAL_GPIO_Init+0x222>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a50      	ldr	r2, [pc, #320]	; (8006ce4 <HAL_GPIO_Init+0x34c>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d007      	beq.n	8006bb6 <HAL_GPIO_Init+0x21e>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a4f      	ldr	r2, [pc, #316]	; (8006ce8 <HAL_GPIO_Init+0x350>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d101      	bne.n	8006bb2 <HAL_GPIO_Init+0x21a>
 8006bae:	2309      	movs	r3, #9
 8006bb0:	e012      	b.n	8006bd8 <HAL_GPIO_Init+0x240>
 8006bb2:	230a      	movs	r3, #10
 8006bb4:	e010      	b.n	8006bd8 <HAL_GPIO_Init+0x240>
 8006bb6:	2308      	movs	r3, #8
 8006bb8:	e00e      	b.n	8006bd8 <HAL_GPIO_Init+0x240>
 8006bba:	2307      	movs	r3, #7
 8006bbc:	e00c      	b.n	8006bd8 <HAL_GPIO_Init+0x240>
 8006bbe:	2306      	movs	r3, #6
 8006bc0:	e00a      	b.n	8006bd8 <HAL_GPIO_Init+0x240>
 8006bc2:	2305      	movs	r3, #5
 8006bc4:	e008      	b.n	8006bd8 <HAL_GPIO_Init+0x240>
 8006bc6:	2304      	movs	r3, #4
 8006bc8:	e006      	b.n	8006bd8 <HAL_GPIO_Init+0x240>
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e004      	b.n	8006bd8 <HAL_GPIO_Init+0x240>
 8006bce:	2302      	movs	r3, #2
 8006bd0:	e002      	b.n	8006bd8 <HAL_GPIO_Init+0x240>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e000      	b.n	8006bd8 <HAL_GPIO_Init+0x240>
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	69fa      	ldr	r2, [r7, #28]
 8006bda:	f002 0203 	and.w	r2, r2, #3
 8006bde:	0092      	lsls	r2, r2, #2
 8006be0:	4093      	lsls	r3, r2
 8006be2:	69ba      	ldr	r2, [r7, #24]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006be8:	4935      	ldr	r1, [pc, #212]	; (8006cc0 <HAL_GPIO_Init+0x328>)
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	089b      	lsrs	r3, r3, #2
 8006bee:	3302      	adds	r3, #2
 8006bf0:	69ba      	ldr	r2, [r7, #24]
 8006bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006bf6:	4b3d      	ldr	r3, [pc, #244]	; (8006cec <HAL_GPIO_Init+0x354>)
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	43db      	mvns	r3, r3
 8006c00:	69ba      	ldr	r2, [r7, #24]
 8006c02:	4013      	ands	r3, r2
 8006c04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d003      	beq.n	8006c1a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006c12:	69ba      	ldr	r2, [r7, #24]
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006c1a:	4a34      	ldr	r2, [pc, #208]	; (8006cec <HAL_GPIO_Init+0x354>)
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006c20:	4b32      	ldr	r3, [pc, #200]	; (8006cec <HAL_GPIO_Init+0x354>)
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	43db      	mvns	r3, r3
 8006c2a:	69ba      	ldr	r2, [r7, #24]
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d003      	beq.n	8006c44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006c3c:	69ba      	ldr	r2, [r7, #24]
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006c44:	4a29      	ldr	r2, [pc, #164]	; (8006cec <HAL_GPIO_Init+0x354>)
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006c4a:	4b28      	ldr	r3, [pc, #160]	; (8006cec <HAL_GPIO_Init+0x354>)
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	43db      	mvns	r3, r3
 8006c54:	69ba      	ldr	r2, [r7, #24]
 8006c56:	4013      	ands	r3, r2
 8006c58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d003      	beq.n	8006c6e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006c66:	69ba      	ldr	r2, [r7, #24]
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006c6e:	4a1f      	ldr	r2, [pc, #124]	; (8006cec <HAL_GPIO_Init+0x354>)
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006c74:	4b1d      	ldr	r3, [pc, #116]	; (8006cec <HAL_GPIO_Init+0x354>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	43db      	mvns	r3, r3
 8006c7e:	69ba      	ldr	r2, [r7, #24]
 8006c80:	4013      	ands	r3, r2
 8006c82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d003      	beq.n	8006c98 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006c90:	69ba      	ldr	r2, [r7, #24]
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006c98:	4a14      	ldr	r2, [pc, #80]	; (8006cec <HAL_GPIO_Init+0x354>)
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	61fb      	str	r3, [r7, #28]
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	2b0f      	cmp	r3, #15
 8006ca8:	f67f ae86 	bls.w	80069b8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006cac:	bf00      	nop
 8006cae:	bf00      	nop
 8006cb0:	3724      	adds	r7, #36	; 0x24
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop
 8006cbc:	40023800 	.word	0x40023800
 8006cc0:	40013800 	.word	0x40013800
 8006cc4:	40020000 	.word	0x40020000
 8006cc8:	40020400 	.word	0x40020400
 8006ccc:	40020800 	.word	0x40020800
 8006cd0:	40020c00 	.word	0x40020c00
 8006cd4:	40021000 	.word	0x40021000
 8006cd8:	40021400 	.word	0x40021400
 8006cdc:	40021800 	.word	0x40021800
 8006ce0:	40021c00 	.word	0x40021c00
 8006ce4:	40022000 	.word	0x40022000
 8006ce8:	40022400 	.word	0x40022400
 8006cec:	40013c00 	.word	0x40013c00

08006cf0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b082      	sub	sp, #8
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d101      	bne.n	8006d02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e07f      	b.n	8006e02 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d106      	bne.n	8006d1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f7fc ff08 	bl	8003b2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2224      	movs	r2, #36	; 0x24
 8006d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f022 0201 	bic.w	r2, r2, #1
 8006d32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	685a      	ldr	r2, [r3, #4]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006d40:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	689a      	ldr	r2, [r3, #8]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006d50:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	68db      	ldr	r3, [r3, #12]
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d107      	bne.n	8006d6a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	689a      	ldr	r2, [r3, #8]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d66:	609a      	str	r2, [r3, #8]
 8006d68:	e006      	b.n	8006d78 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	689a      	ldr	r2, [r3, #8]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006d76:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d104      	bne.n	8006d8a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d88:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	6859      	ldr	r1, [r3, #4]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	4b1d      	ldr	r3, [pc, #116]	; (8006e0c <HAL_I2C_Init+0x11c>)
 8006d96:	430b      	orrs	r3, r1
 8006d98:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	68da      	ldr	r2, [r3, #12]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006da8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	691a      	ldr	r2, [r3, #16]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	695b      	ldr	r3, [r3, #20]
 8006db2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	699b      	ldr	r3, [r3, #24]
 8006dba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	430a      	orrs	r2, r1
 8006dc2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	69d9      	ldr	r1, [r3, #28]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6a1a      	ldr	r2, [r3, #32]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	430a      	orrs	r2, r1
 8006dd2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f042 0201 	orr.w	r2, r2, #1
 8006de2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2220      	movs	r2, #32
 8006dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3708      	adds	r7, #8
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	02008000 	.word	0x02008000

08006e10 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b088      	sub	sp, #32
 8006e14:	af02      	add	r7, sp, #8
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	607a      	str	r2, [r7, #4]
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	817b      	strh	r3, [r7, #10]
 8006e20:	4613      	mov	r3, r2
 8006e22:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	2b20      	cmp	r3, #32
 8006e2e:	f040 80da 	bne.w	8006fe6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d101      	bne.n	8006e40 <HAL_I2C_Master_Transmit+0x30>
 8006e3c:	2302      	movs	r3, #2
 8006e3e:	e0d3      	b.n	8006fe8 <HAL_I2C_Master_Transmit+0x1d8>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006e48:	f7fe fb86 	bl	8005558 <HAL_GetTick>
 8006e4c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	9300      	str	r3, [sp, #0]
 8006e52:	2319      	movs	r3, #25
 8006e54:	2201      	movs	r2, #1
 8006e56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	f000 fdc4 	bl	80079e8 <I2C_WaitOnFlagUntilTimeout>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d001      	beq.n	8006e6a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	e0be      	b.n	8006fe8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2221      	movs	r2, #33	; 0x21
 8006e6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2210      	movs	r2, #16
 8006e76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	893a      	ldrh	r2, [r7, #8]
 8006e8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	2bff      	cmp	r3, #255	; 0xff
 8006e9a:	d90e      	bls.n	8006eba <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	22ff      	movs	r2, #255	; 0xff
 8006ea0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ea6:	b2da      	uxtb	r2, r3
 8006ea8:	8979      	ldrh	r1, [r7, #10]
 8006eaa:	4b51      	ldr	r3, [pc, #324]	; (8006ff0 <HAL_I2C_Master_Transmit+0x1e0>)
 8006eac:	9300      	str	r3, [sp, #0]
 8006eae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006eb2:	68f8      	ldr	r0, [r7, #12]
 8006eb4:	f000 ffba 	bl	8007e2c <I2C_TransferConfig>
 8006eb8:	e06c      	b.n	8006f94 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ec8:	b2da      	uxtb	r2, r3
 8006eca:	8979      	ldrh	r1, [r7, #10]
 8006ecc:	4b48      	ldr	r3, [pc, #288]	; (8006ff0 <HAL_I2C_Master_Transmit+0x1e0>)
 8006ece:	9300      	str	r3, [sp, #0]
 8006ed0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f000 ffa9 	bl	8007e2c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006eda:	e05b      	b.n	8006f94 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006edc:	697a      	ldr	r2, [r7, #20]
 8006ede:	6a39      	ldr	r1, [r7, #32]
 8006ee0:	68f8      	ldr	r0, [r7, #12]
 8006ee2:	f000 fdc1 	bl	8007a68 <I2C_WaitOnTXISFlagUntilTimeout>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d001      	beq.n	8006ef0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	e07b      	b.n	8006fe8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef4:	781a      	ldrb	r2, [r3, #0]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f00:	1c5a      	adds	r2, r3, #1
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	b29a      	uxth	r2, r3
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	b29a      	uxth	r2, r3
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d034      	beq.n	8006f94 <HAL_I2C_Master_Transmit+0x184>
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d130      	bne.n	8006f94 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	9300      	str	r3, [sp, #0]
 8006f36:	6a3b      	ldr	r3, [r7, #32]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	2180      	movs	r1, #128	; 0x80
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f000 fd53 	bl	80079e8 <I2C_WaitOnFlagUntilTimeout>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d001      	beq.n	8006f4c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e04d      	b.n	8006fe8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	2bff      	cmp	r3, #255	; 0xff
 8006f54:	d90e      	bls.n	8006f74 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	22ff      	movs	r2, #255	; 0xff
 8006f5a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f60:	b2da      	uxtb	r2, r3
 8006f62:	8979      	ldrh	r1, [r7, #10]
 8006f64:	2300      	movs	r3, #0
 8006f66:	9300      	str	r3, [sp, #0]
 8006f68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f000 ff5d 	bl	8007e2c <I2C_TransferConfig>
 8006f72:	e00f      	b.n	8006f94 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f78:	b29a      	uxth	r2, r3
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f82:	b2da      	uxtb	r2, r3
 8006f84:	8979      	ldrh	r1, [r7, #10]
 8006f86:	2300      	movs	r3, #0
 8006f88:	9300      	str	r3, [sp, #0]
 8006f8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f8e:	68f8      	ldr	r0, [r7, #12]
 8006f90:	f000 ff4c 	bl	8007e2c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d19e      	bne.n	8006edc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f9e:	697a      	ldr	r2, [r7, #20]
 8006fa0:	6a39      	ldr	r1, [r7, #32]
 8006fa2:	68f8      	ldr	r0, [r7, #12]
 8006fa4:	f000 fda0 	bl	8007ae8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d001      	beq.n	8006fb2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e01a      	b.n	8006fe8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2220      	movs	r2, #32
 8006fb8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	6859      	ldr	r1, [r3, #4]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	4b0b      	ldr	r3, [pc, #44]	; (8006ff4 <HAL_I2C_Master_Transmit+0x1e4>)
 8006fc6:	400b      	ands	r3, r1
 8006fc8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2220      	movs	r2, #32
 8006fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	e000      	b.n	8006fe8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8006fe6:	2302      	movs	r3, #2
  }
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3718      	adds	r7, #24
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	80002000 	.word	0x80002000
 8006ff4:	fe00e800 	.word	0xfe00e800

08006ff8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b088      	sub	sp, #32
 8006ffc:	af02      	add	r7, sp, #8
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	607a      	str	r2, [r7, #4]
 8007002:	461a      	mov	r2, r3
 8007004:	460b      	mov	r3, r1
 8007006:	817b      	strh	r3, [r7, #10]
 8007008:	4613      	mov	r3, r2
 800700a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007012:	b2db      	uxtb	r3, r3
 8007014:	2b20      	cmp	r3, #32
 8007016:	f040 80db 	bne.w	80071d0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007020:	2b01      	cmp	r3, #1
 8007022:	d101      	bne.n	8007028 <HAL_I2C_Master_Receive+0x30>
 8007024:	2302      	movs	r3, #2
 8007026:	e0d4      	b.n	80071d2 <HAL_I2C_Master_Receive+0x1da>
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007030:	f7fe fa92 	bl	8005558 <HAL_GetTick>
 8007034:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	9300      	str	r3, [sp, #0]
 800703a:	2319      	movs	r3, #25
 800703c:	2201      	movs	r2, #1
 800703e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007042:	68f8      	ldr	r0, [r7, #12]
 8007044:	f000 fcd0 	bl	80079e8 <I2C_WaitOnFlagUntilTimeout>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d001      	beq.n	8007052 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e0bf      	b.n	80071d2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2222      	movs	r2, #34	; 0x22
 8007056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2210      	movs	r2, #16
 800705e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2200      	movs	r2, #0
 8007066:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	893a      	ldrh	r2, [r7, #8]
 8007072:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2200      	movs	r2, #0
 8007078:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800707e:	b29b      	uxth	r3, r3
 8007080:	2bff      	cmp	r3, #255	; 0xff
 8007082:	d90e      	bls.n	80070a2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	22ff      	movs	r2, #255	; 0xff
 8007088:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800708e:	b2da      	uxtb	r2, r3
 8007090:	8979      	ldrh	r1, [r7, #10]
 8007092:	4b52      	ldr	r3, [pc, #328]	; (80071dc <HAL_I2C_Master_Receive+0x1e4>)
 8007094:	9300      	str	r3, [sp, #0]
 8007096:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f000 fec6 	bl	8007e2c <I2C_TransferConfig>
 80070a0:	e06d      	b.n	800717e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070a6:	b29a      	uxth	r2, r3
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070b0:	b2da      	uxtb	r2, r3
 80070b2:	8979      	ldrh	r1, [r7, #10]
 80070b4:	4b49      	ldr	r3, [pc, #292]	; (80071dc <HAL_I2C_Master_Receive+0x1e4>)
 80070b6:	9300      	str	r3, [sp, #0]
 80070b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80070bc:	68f8      	ldr	r0, [r7, #12]
 80070be:	f000 feb5 	bl	8007e2c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80070c2:	e05c      	b.n	800717e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070c4:	697a      	ldr	r2, [r7, #20]
 80070c6:	6a39      	ldr	r1, [r7, #32]
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f000 fd49 	bl	8007b60 <I2C_WaitOnRXNEFlagUntilTimeout>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d001      	beq.n	80070d8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	e07c      	b.n	80071d2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e2:	b2d2      	uxtb	r2, r2
 80070e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ea:	1c5a      	adds	r2, r3, #1
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070f4:	3b01      	subs	r3, #1
 80070f6:	b29a      	uxth	r2, r3
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007100:	b29b      	uxth	r3, r3
 8007102:	3b01      	subs	r3, #1
 8007104:	b29a      	uxth	r2, r3
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800710e:	b29b      	uxth	r3, r3
 8007110:	2b00      	cmp	r3, #0
 8007112:	d034      	beq.n	800717e <HAL_I2C_Master_Receive+0x186>
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007118:	2b00      	cmp	r3, #0
 800711a:	d130      	bne.n	800717e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	9300      	str	r3, [sp, #0]
 8007120:	6a3b      	ldr	r3, [r7, #32]
 8007122:	2200      	movs	r2, #0
 8007124:	2180      	movs	r1, #128	; 0x80
 8007126:	68f8      	ldr	r0, [r7, #12]
 8007128:	f000 fc5e 	bl	80079e8 <I2C_WaitOnFlagUntilTimeout>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d001      	beq.n	8007136 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e04d      	b.n	80071d2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800713a:	b29b      	uxth	r3, r3
 800713c:	2bff      	cmp	r3, #255	; 0xff
 800713e:	d90e      	bls.n	800715e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	22ff      	movs	r2, #255	; 0xff
 8007144:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800714a:	b2da      	uxtb	r2, r3
 800714c:	8979      	ldrh	r1, [r7, #10]
 800714e:	2300      	movs	r3, #0
 8007150:	9300      	str	r3, [sp, #0]
 8007152:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f000 fe68 	bl	8007e2c <I2C_TransferConfig>
 800715c:	e00f      	b.n	800717e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007162:	b29a      	uxth	r2, r3
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800716c:	b2da      	uxtb	r2, r3
 800716e:	8979      	ldrh	r1, [r7, #10]
 8007170:	2300      	movs	r3, #0
 8007172:	9300      	str	r3, [sp, #0]
 8007174:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007178:	68f8      	ldr	r0, [r7, #12]
 800717a:	f000 fe57 	bl	8007e2c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007182:	b29b      	uxth	r3, r3
 8007184:	2b00      	cmp	r3, #0
 8007186:	d19d      	bne.n	80070c4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007188:	697a      	ldr	r2, [r7, #20]
 800718a:	6a39      	ldr	r1, [r7, #32]
 800718c:	68f8      	ldr	r0, [r7, #12]
 800718e:	f000 fcab 	bl	8007ae8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007192:	4603      	mov	r3, r0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d001      	beq.n	800719c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	e01a      	b.n	80071d2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2220      	movs	r2, #32
 80071a2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	6859      	ldr	r1, [r3, #4]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	4b0c      	ldr	r3, [pc, #48]	; (80071e0 <HAL_I2C_Master_Receive+0x1e8>)
 80071b0:	400b      	ands	r3, r1
 80071b2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2220      	movs	r2, #32
 80071b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2200      	movs	r2, #0
 80071c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80071cc:	2300      	movs	r3, #0
 80071ce:	e000      	b.n	80071d2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80071d0:	2302      	movs	r3, #2
  }
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3718      	adds	r7, #24
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	80002400 	.word	0x80002400
 80071e0:	fe00e800 	.word	0xfe00e800

080071e4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b088      	sub	sp, #32
 80071e8:	af02      	add	r7, sp, #8
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	4608      	mov	r0, r1
 80071ee:	4611      	mov	r1, r2
 80071f0:	461a      	mov	r2, r3
 80071f2:	4603      	mov	r3, r0
 80071f4:	817b      	strh	r3, [r7, #10]
 80071f6:	460b      	mov	r3, r1
 80071f8:	813b      	strh	r3, [r7, #8]
 80071fa:	4613      	mov	r3, r2
 80071fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007204:	b2db      	uxtb	r3, r3
 8007206:	2b20      	cmp	r3, #32
 8007208:	f040 80f9 	bne.w	80073fe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800720c:	6a3b      	ldr	r3, [r7, #32]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d002      	beq.n	8007218 <HAL_I2C_Mem_Write+0x34>
 8007212:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007214:	2b00      	cmp	r3, #0
 8007216:	d105      	bne.n	8007224 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800721e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	e0ed      	b.n	8007400 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800722a:	2b01      	cmp	r3, #1
 800722c:	d101      	bne.n	8007232 <HAL_I2C_Mem_Write+0x4e>
 800722e:	2302      	movs	r3, #2
 8007230:	e0e6      	b.n	8007400 <HAL_I2C_Mem_Write+0x21c>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2201      	movs	r2, #1
 8007236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800723a:	f7fe f98d 	bl	8005558 <HAL_GetTick>
 800723e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	9300      	str	r3, [sp, #0]
 8007244:	2319      	movs	r3, #25
 8007246:	2201      	movs	r2, #1
 8007248:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f000 fbcb 	bl	80079e8 <I2C_WaitOnFlagUntilTimeout>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d001      	beq.n	800725c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	e0d1      	b.n	8007400 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2221      	movs	r2, #33	; 0x21
 8007260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2240      	movs	r2, #64	; 0x40
 8007268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6a3a      	ldr	r2, [r7, #32]
 8007276:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800727c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2200      	movs	r2, #0
 8007282:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007284:	88f8      	ldrh	r0, [r7, #6]
 8007286:	893a      	ldrh	r2, [r7, #8]
 8007288:	8979      	ldrh	r1, [r7, #10]
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	9301      	str	r3, [sp, #4]
 800728e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007290:	9300      	str	r3, [sp, #0]
 8007292:	4603      	mov	r3, r0
 8007294:	68f8      	ldr	r0, [r7, #12]
 8007296:	f000 fadb 	bl	8007850 <I2C_RequestMemoryWrite>
 800729a:	4603      	mov	r3, r0
 800729c:	2b00      	cmp	r3, #0
 800729e:	d005      	beq.n	80072ac <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	e0a9      	b.n	8007400 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	2bff      	cmp	r3, #255	; 0xff
 80072b4:	d90e      	bls.n	80072d4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	22ff      	movs	r2, #255	; 0xff
 80072ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072c0:	b2da      	uxtb	r2, r3
 80072c2:	8979      	ldrh	r1, [r7, #10]
 80072c4:	2300      	movs	r3, #0
 80072c6:	9300      	str	r3, [sp, #0]
 80072c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	f000 fdad 	bl	8007e2c <I2C_TransferConfig>
 80072d2:	e00f      	b.n	80072f4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072d8:	b29a      	uxth	r2, r3
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072e2:	b2da      	uxtb	r2, r3
 80072e4:	8979      	ldrh	r1, [r7, #10]
 80072e6:	2300      	movs	r3, #0
 80072e8:	9300      	str	r3, [sp, #0]
 80072ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80072ee:	68f8      	ldr	r0, [r7, #12]
 80072f0:	f000 fd9c 	bl	8007e2c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072f4:	697a      	ldr	r2, [r7, #20]
 80072f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f000 fbb5 	bl	8007a68 <I2C_WaitOnTXISFlagUntilTimeout>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d001      	beq.n	8007308 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	e07b      	b.n	8007400 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730c:	781a      	ldrb	r2, [r3, #0]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007318:	1c5a      	adds	r2, r3, #1
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007322:	b29b      	uxth	r3, r3
 8007324:	3b01      	subs	r3, #1
 8007326:	b29a      	uxth	r2, r3
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007330:	3b01      	subs	r3, #1
 8007332:	b29a      	uxth	r2, r3
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800733c:	b29b      	uxth	r3, r3
 800733e:	2b00      	cmp	r3, #0
 8007340:	d034      	beq.n	80073ac <HAL_I2C_Mem_Write+0x1c8>
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007346:	2b00      	cmp	r3, #0
 8007348:	d130      	bne.n	80073ac <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	9300      	str	r3, [sp, #0]
 800734e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007350:	2200      	movs	r2, #0
 8007352:	2180      	movs	r1, #128	; 0x80
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f000 fb47 	bl	80079e8 <I2C_WaitOnFlagUntilTimeout>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d001      	beq.n	8007364 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	e04d      	b.n	8007400 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007368:	b29b      	uxth	r3, r3
 800736a:	2bff      	cmp	r3, #255	; 0xff
 800736c:	d90e      	bls.n	800738c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	22ff      	movs	r2, #255	; 0xff
 8007372:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007378:	b2da      	uxtb	r2, r3
 800737a:	8979      	ldrh	r1, [r7, #10]
 800737c:	2300      	movs	r3, #0
 800737e:	9300      	str	r3, [sp, #0]
 8007380:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	f000 fd51 	bl	8007e2c <I2C_TransferConfig>
 800738a:	e00f      	b.n	80073ac <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007390:	b29a      	uxth	r2, r3
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800739a:	b2da      	uxtb	r2, r3
 800739c:	8979      	ldrh	r1, [r7, #10]
 800739e:	2300      	movs	r3, #0
 80073a0:	9300      	str	r3, [sp, #0]
 80073a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	f000 fd40 	bl	8007e2c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d19e      	bne.n	80072f4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073b6:	697a      	ldr	r2, [r7, #20]
 80073b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073ba:	68f8      	ldr	r0, [r7, #12]
 80073bc:	f000 fb94 	bl	8007ae8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d001      	beq.n	80073ca <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e01a      	b.n	8007400 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2220      	movs	r2, #32
 80073d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	6859      	ldr	r1, [r3, #4]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	4b0a      	ldr	r3, [pc, #40]	; (8007408 <HAL_I2C_Mem_Write+0x224>)
 80073de:	400b      	ands	r3, r1
 80073e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2220      	movs	r2, #32
 80073e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80073fa:	2300      	movs	r3, #0
 80073fc:	e000      	b.n	8007400 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80073fe:	2302      	movs	r3, #2
  }
}
 8007400:	4618      	mov	r0, r3
 8007402:	3718      	adds	r7, #24
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}
 8007408:	fe00e800 	.word	0xfe00e800

0800740c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b088      	sub	sp, #32
 8007410:	af02      	add	r7, sp, #8
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	4608      	mov	r0, r1
 8007416:	4611      	mov	r1, r2
 8007418:	461a      	mov	r2, r3
 800741a:	4603      	mov	r3, r0
 800741c:	817b      	strh	r3, [r7, #10]
 800741e:	460b      	mov	r3, r1
 8007420:	813b      	strh	r3, [r7, #8]
 8007422:	4613      	mov	r3, r2
 8007424:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800742c:	b2db      	uxtb	r3, r3
 800742e:	2b20      	cmp	r3, #32
 8007430:	f040 80fd 	bne.w	800762e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007434:	6a3b      	ldr	r3, [r7, #32]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d002      	beq.n	8007440 <HAL_I2C_Mem_Read+0x34>
 800743a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800743c:	2b00      	cmp	r3, #0
 800743e:	d105      	bne.n	800744c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007446:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	e0f1      	b.n	8007630 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007452:	2b01      	cmp	r3, #1
 8007454:	d101      	bne.n	800745a <HAL_I2C_Mem_Read+0x4e>
 8007456:	2302      	movs	r3, #2
 8007458:	e0ea      	b.n	8007630 <HAL_I2C_Mem_Read+0x224>
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2201      	movs	r2, #1
 800745e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007462:	f7fe f879 	bl	8005558 <HAL_GetTick>
 8007466:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	9300      	str	r3, [sp, #0]
 800746c:	2319      	movs	r3, #25
 800746e:	2201      	movs	r2, #1
 8007470:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f000 fab7 	bl	80079e8 <I2C_WaitOnFlagUntilTimeout>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d001      	beq.n	8007484 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007480:	2301      	movs	r3, #1
 8007482:	e0d5      	b.n	8007630 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2222      	movs	r2, #34	; 0x22
 8007488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2240      	movs	r2, #64	; 0x40
 8007490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2200      	movs	r2, #0
 8007498:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	6a3a      	ldr	r2, [r7, #32]
 800749e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80074a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2200      	movs	r2, #0
 80074aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80074ac:	88f8      	ldrh	r0, [r7, #6]
 80074ae:	893a      	ldrh	r2, [r7, #8]
 80074b0:	8979      	ldrh	r1, [r7, #10]
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	9301      	str	r3, [sp, #4]
 80074b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b8:	9300      	str	r3, [sp, #0]
 80074ba:	4603      	mov	r3, r0
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	f000 fa1b 	bl	80078f8 <I2C_RequestMemoryRead>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d005      	beq.n	80074d4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	e0ad      	b.n	8007630 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074d8:	b29b      	uxth	r3, r3
 80074da:	2bff      	cmp	r3, #255	; 0xff
 80074dc:	d90e      	bls.n	80074fc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	22ff      	movs	r2, #255	; 0xff
 80074e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074e8:	b2da      	uxtb	r2, r3
 80074ea:	8979      	ldrh	r1, [r7, #10]
 80074ec:	4b52      	ldr	r3, [pc, #328]	; (8007638 <HAL_I2C_Mem_Read+0x22c>)
 80074ee:	9300      	str	r3, [sp, #0]
 80074f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80074f4:	68f8      	ldr	r0, [r7, #12]
 80074f6:	f000 fc99 	bl	8007e2c <I2C_TransferConfig>
 80074fa:	e00f      	b.n	800751c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007500:	b29a      	uxth	r2, r3
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800750a:	b2da      	uxtb	r2, r3
 800750c:	8979      	ldrh	r1, [r7, #10]
 800750e:	4b4a      	ldr	r3, [pc, #296]	; (8007638 <HAL_I2C_Mem_Read+0x22c>)
 8007510:	9300      	str	r3, [sp, #0]
 8007512:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	f000 fc88 	bl	8007e2c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	9300      	str	r3, [sp, #0]
 8007520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007522:	2200      	movs	r2, #0
 8007524:	2104      	movs	r1, #4
 8007526:	68f8      	ldr	r0, [r7, #12]
 8007528:	f000 fa5e 	bl	80079e8 <I2C_WaitOnFlagUntilTimeout>
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d001      	beq.n	8007536 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	e07c      	b.n	8007630 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007540:	b2d2      	uxtb	r2, r2
 8007542:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007548:	1c5a      	adds	r2, r3, #1
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007552:	3b01      	subs	r3, #1
 8007554:	b29a      	uxth	r2, r3
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800755e:	b29b      	uxth	r3, r3
 8007560:	3b01      	subs	r3, #1
 8007562:	b29a      	uxth	r2, r3
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800756c:	b29b      	uxth	r3, r3
 800756e:	2b00      	cmp	r3, #0
 8007570:	d034      	beq.n	80075dc <HAL_I2C_Mem_Read+0x1d0>
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007576:	2b00      	cmp	r3, #0
 8007578:	d130      	bne.n	80075dc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	9300      	str	r3, [sp, #0]
 800757e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007580:	2200      	movs	r2, #0
 8007582:	2180      	movs	r1, #128	; 0x80
 8007584:	68f8      	ldr	r0, [r7, #12]
 8007586:	f000 fa2f 	bl	80079e8 <I2C_WaitOnFlagUntilTimeout>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d001      	beq.n	8007594 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	e04d      	b.n	8007630 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007598:	b29b      	uxth	r3, r3
 800759a:	2bff      	cmp	r3, #255	; 0xff
 800759c:	d90e      	bls.n	80075bc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	22ff      	movs	r2, #255	; 0xff
 80075a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075a8:	b2da      	uxtb	r2, r3
 80075aa:	8979      	ldrh	r1, [r7, #10]
 80075ac:	2300      	movs	r3, #0
 80075ae:	9300      	str	r3, [sp, #0]
 80075b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80075b4:	68f8      	ldr	r0, [r7, #12]
 80075b6:	f000 fc39 	bl	8007e2c <I2C_TransferConfig>
 80075ba:	e00f      	b.n	80075dc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075c0:	b29a      	uxth	r2, r3
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075ca:	b2da      	uxtb	r2, r3
 80075cc:	8979      	ldrh	r1, [r7, #10]
 80075ce:	2300      	movs	r3, #0
 80075d0:	9300      	str	r3, [sp, #0]
 80075d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f000 fc28 	bl	8007e2c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d19a      	bne.n	800751c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075e6:	697a      	ldr	r2, [r7, #20]
 80075e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075ea:	68f8      	ldr	r0, [r7, #12]
 80075ec:	f000 fa7c 	bl	8007ae8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d001      	beq.n	80075fa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e01a      	b.n	8007630 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2220      	movs	r2, #32
 8007600:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	6859      	ldr	r1, [r3, #4]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	4b0b      	ldr	r3, [pc, #44]	; (800763c <HAL_I2C_Mem_Read+0x230>)
 800760e:	400b      	ands	r3, r1
 8007610:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2220      	movs	r2, #32
 8007616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2200      	movs	r2, #0
 800761e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2200      	movs	r2, #0
 8007626:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800762a:	2300      	movs	r3, #0
 800762c:	e000      	b.n	8007630 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800762e:	2302      	movs	r3, #2
  }
}
 8007630:	4618      	mov	r0, r3
 8007632:	3718      	adds	r7, #24
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}
 8007638:	80002400 	.word	0x80002400
 800763c:	fe00e800 	.word	0xfe00e800

08007640 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b08a      	sub	sp, #40	; 0x28
 8007644:	af02      	add	r7, sp, #8
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	607a      	str	r2, [r7, #4]
 800764a:	603b      	str	r3, [r7, #0]
 800764c:	460b      	mov	r3, r1
 800764e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8007650:	2300      	movs	r3, #0
 8007652:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800765a:	b2db      	uxtb	r3, r3
 800765c:	2b20      	cmp	r3, #32
 800765e:	f040 80ef 	bne.w	8007840 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	699b      	ldr	r3, [r3, #24]
 8007668:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800766c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007670:	d101      	bne.n	8007676 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8007672:	2302      	movs	r3, #2
 8007674:	e0e5      	b.n	8007842 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800767c:	2b01      	cmp	r3, #1
 800767e:	d101      	bne.n	8007684 <HAL_I2C_IsDeviceReady+0x44>
 8007680:	2302      	movs	r3, #2
 8007682:	e0de      	b.n	8007842 <HAL_I2C_IsDeviceReady+0x202>
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2201      	movs	r2, #1
 8007688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2224      	movs	r2, #36	; 0x24
 8007690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2200      	movs	r2, #0
 8007698:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d105      	bne.n	80076ae <HAL_I2C_IsDeviceReady+0x6e>
 80076a2:	897b      	ldrh	r3, [r7, #10]
 80076a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80076a8:	4b68      	ldr	r3, [pc, #416]	; (800784c <HAL_I2C_IsDeviceReady+0x20c>)
 80076aa:	4313      	orrs	r3, r2
 80076ac:	e004      	b.n	80076b8 <HAL_I2C_IsDeviceReady+0x78>
 80076ae:	897b      	ldrh	r3, [r7, #10]
 80076b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076b4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80076b8:	68fa      	ldr	r2, [r7, #12]
 80076ba:	6812      	ldr	r2, [r2, #0]
 80076bc:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80076be:	f7fd ff4b 	bl	8005558 <HAL_GetTick>
 80076c2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	699b      	ldr	r3, [r3, #24]
 80076ca:	f003 0320 	and.w	r3, r3, #32
 80076ce:	2b20      	cmp	r3, #32
 80076d0:	bf0c      	ite	eq
 80076d2:	2301      	moveq	r3, #1
 80076d4:	2300      	movne	r3, #0
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	699b      	ldr	r3, [r3, #24]
 80076e0:	f003 0310 	and.w	r3, r3, #16
 80076e4:	2b10      	cmp	r3, #16
 80076e6:	bf0c      	ite	eq
 80076e8:	2301      	moveq	r3, #1
 80076ea:	2300      	movne	r3, #0
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80076f0:	e034      	b.n	800775c <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076f8:	d01a      	beq.n	8007730 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80076fa:	f7fd ff2d 	bl	8005558 <HAL_GetTick>
 80076fe:	4602      	mov	r2, r0
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	1ad3      	subs	r3, r2, r3
 8007704:	683a      	ldr	r2, [r7, #0]
 8007706:	429a      	cmp	r2, r3
 8007708:	d302      	bcc.n	8007710 <HAL_I2C_IsDeviceReady+0xd0>
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d10f      	bne.n	8007730 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2220      	movs	r2, #32
 8007714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800771c:	f043 0220 	orr.w	r2, r3, #32
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2200      	movs	r2, #0
 8007728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800772c:	2301      	movs	r3, #1
 800772e:	e088      	b.n	8007842 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	699b      	ldr	r3, [r3, #24]
 8007736:	f003 0320 	and.w	r3, r3, #32
 800773a:	2b20      	cmp	r3, #32
 800773c:	bf0c      	ite	eq
 800773e:	2301      	moveq	r3, #1
 8007740:	2300      	movne	r3, #0
 8007742:	b2db      	uxtb	r3, r3
 8007744:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	699b      	ldr	r3, [r3, #24]
 800774c:	f003 0310 	and.w	r3, r3, #16
 8007750:	2b10      	cmp	r3, #16
 8007752:	bf0c      	ite	eq
 8007754:	2301      	moveq	r3, #1
 8007756:	2300      	movne	r3, #0
 8007758:	b2db      	uxtb	r3, r3
 800775a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800775c:	7ffb      	ldrb	r3, [r7, #31]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d102      	bne.n	8007768 <HAL_I2C_IsDeviceReady+0x128>
 8007762:	7fbb      	ldrb	r3, [r7, #30]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d0c4      	beq.n	80076f2 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	699b      	ldr	r3, [r3, #24]
 800776e:	f003 0310 	and.w	r3, r3, #16
 8007772:	2b10      	cmp	r3, #16
 8007774:	d01a      	beq.n	80077ac <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007776:	69bb      	ldr	r3, [r7, #24]
 8007778:	9300      	str	r3, [sp, #0]
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	2200      	movs	r2, #0
 800777e:	2120      	movs	r1, #32
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	f000 f931 	bl	80079e8 <I2C_WaitOnFlagUntilTimeout>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d001      	beq.n	8007790 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	e058      	b.n	8007842 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	2220      	movs	r2, #32
 8007796:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2220      	movs	r2, #32
 800779c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80077a8:	2300      	movs	r3, #0
 80077aa:	e04a      	b.n	8007842 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80077ac:	69bb      	ldr	r3, [r7, #24]
 80077ae:	9300      	str	r3, [sp, #0]
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	2200      	movs	r2, #0
 80077b4:	2120      	movs	r1, #32
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	f000 f916 	bl	80079e8 <I2C_WaitOnFlagUntilTimeout>
 80077bc:	4603      	mov	r3, r0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d001      	beq.n	80077c6 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e03d      	b.n	8007842 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2210      	movs	r2, #16
 80077cc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2220      	movs	r2, #32
 80077d4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	429a      	cmp	r2, r3
 80077dc:	d118      	bne.n	8007810 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	685a      	ldr	r2, [r3, #4]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80077ec:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	9300      	str	r3, [sp, #0]
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	2200      	movs	r2, #0
 80077f6:	2120      	movs	r1, #32
 80077f8:	68f8      	ldr	r0, [r7, #12]
 80077fa:	f000 f8f5 	bl	80079e8 <I2C_WaitOnFlagUntilTimeout>
 80077fe:	4603      	mov	r3, r0
 8007800:	2b00      	cmp	r3, #0
 8007802:	d001      	beq.n	8007808 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	e01c      	b.n	8007842 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2220      	movs	r2, #32
 800780e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	3301      	adds	r3, #1
 8007814:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	429a      	cmp	r2, r3
 800781c:	f63f af3d 	bhi.w	800769a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2220      	movs	r2, #32
 8007824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800782c:	f043 0220 	orr.w	r2, r3, #32
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2200      	movs	r2, #0
 8007838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	e000      	b.n	8007842 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8007840:	2302      	movs	r3, #2
  }
}
 8007842:	4618      	mov	r0, r3
 8007844:	3720      	adds	r7, #32
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	02002000 	.word	0x02002000

08007850 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b086      	sub	sp, #24
 8007854:	af02      	add	r7, sp, #8
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	4608      	mov	r0, r1
 800785a:	4611      	mov	r1, r2
 800785c:	461a      	mov	r2, r3
 800785e:	4603      	mov	r3, r0
 8007860:	817b      	strh	r3, [r7, #10]
 8007862:	460b      	mov	r3, r1
 8007864:	813b      	strh	r3, [r7, #8]
 8007866:	4613      	mov	r3, r2
 8007868:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800786a:	88fb      	ldrh	r3, [r7, #6]
 800786c:	b2da      	uxtb	r2, r3
 800786e:	8979      	ldrh	r1, [r7, #10]
 8007870:	4b20      	ldr	r3, [pc, #128]	; (80078f4 <I2C_RequestMemoryWrite+0xa4>)
 8007872:	9300      	str	r3, [sp, #0]
 8007874:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007878:	68f8      	ldr	r0, [r7, #12]
 800787a:	f000 fad7 	bl	8007e2c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800787e:	69fa      	ldr	r2, [r7, #28]
 8007880:	69b9      	ldr	r1, [r7, #24]
 8007882:	68f8      	ldr	r0, [r7, #12]
 8007884:	f000 f8f0 	bl	8007a68 <I2C_WaitOnTXISFlagUntilTimeout>
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d001      	beq.n	8007892 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e02c      	b.n	80078ec <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007892:	88fb      	ldrh	r3, [r7, #6]
 8007894:	2b01      	cmp	r3, #1
 8007896:	d105      	bne.n	80078a4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007898:	893b      	ldrh	r3, [r7, #8]
 800789a:	b2da      	uxtb	r2, r3
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	629a      	str	r2, [r3, #40]	; 0x28
 80078a2:	e015      	b.n	80078d0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80078a4:	893b      	ldrh	r3, [r7, #8]
 80078a6:	0a1b      	lsrs	r3, r3, #8
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	b2da      	uxtb	r2, r3
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078b2:	69fa      	ldr	r2, [r7, #28]
 80078b4:	69b9      	ldr	r1, [r7, #24]
 80078b6:	68f8      	ldr	r0, [r7, #12]
 80078b8:	f000 f8d6 	bl	8007a68 <I2C_WaitOnTXISFlagUntilTimeout>
 80078bc:	4603      	mov	r3, r0
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d001      	beq.n	80078c6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	e012      	b.n	80078ec <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80078c6:	893b      	ldrh	r3, [r7, #8]
 80078c8:	b2da      	uxtb	r2, r3
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	9300      	str	r3, [sp, #0]
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	2200      	movs	r2, #0
 80078d8:	2180      	movs	r1, #128	; 0x80
 80078da:	68f8      	ldr	r0, [r7, #12]
 80078dc:	f000 f884 	bl	80079e8 <I2C_WaitOnFlagUntilTimeout>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d001      	beq.n	80078ea <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	e000      	b.n	80078ec <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80078ea:	2300      	movs	r3, #0
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3710      	adds	r7, #16
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	80002000 	.word	0x80002000

080078f8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b086      	sub	sp, #24
 80078fc:	af02      	add	r7, sp, #8
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	4608      	mov	r0, r1
 8007902:	4611      	mov	r1, r2
 8007904:	461a      	mov	r2, r3
 8007906:	4603      	mov	r3, r0
 8007908:	817b      	strh	r3, [r7, #10]
 800790a:	460b      	mov	r3, r1
 800790c:	813b      	strh	r3, [r7, #8]
 800790e:	4613      	mov	r3, r2
 8007910:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007912:	88fb      	ldrh	r3, [r7, #6]
 8007914:	b2da      	uxtb	r2, r3
 8007916:	8979      	ldrh	r1, [r7, #10]
 8007918:	4b20      	ldr	r3, [pc, #128]	; (800799c <I2C_RequestMemoryRead+0xa4>)
 800791a:	9300      	str	r3, [sp, #0]
 800791c:	2300      	movs	r3, #0
 800791e:	68f8      	ldr	r0, [r7, #12]
 8007920:	f000 fa84 	bl	8007e2c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007924:	69fa      	ldr	r2, [r7, #28]
 8007926:	69b9      	ldr	r1, [r7, #24]
 8007928:	68f8      	ldr	r0, [r7, #12]
 800792a:	f000 f89d 	bl	8007a68 <I2C_WaitOnTXISFlagUntilTimeout>
 800792e:	4603      	mov	r3, r0
 8007930:	2b00      	cmp	r3, #0
 8007932:	d001      	beq.n	8007938 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	e02c      	b.n	8007992 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007938:	88fb      	ldrh	r3, [r7, #6]
 800793a:	2b01      	cmp	r3, #1
 800793c:	d105      	bne.n	800794a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800793e:	893b      	ldrh	r3, [r7, #8]
 8007940:	b2da      	uxtb	r2, r3
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	629a      	str	r2, [r3, #40]	; 0x28
 8007948:	e015      	b.n	8007976 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800794a:	893b      	ldrh	r3, [r7, #8]
 800794c:	0a1b      	lsrs	r3, r3, #8
 800794e:	b29b      	uxth	r3, r3
 8007950:	b2da      	uxtb	r2, r3
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007958:	69fa      	ldr	r2, [r7, #28]
 800795a:	69b9      	ldr	r1, [r7, #24]
 800795c:	68f8      	ldr	r0, [r7, #12]
 800795e:	f000 f883 	bl	8007a68 <I2C_WaitOnTXISFlagUntilTimeout>
 8007962:	4603      	mov	r3, r0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d001      	beq.n	800796c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007968:	2301      	movs	r3, #1
 800796a:	e012      	b.n	8007992 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800796c:	893b      	ldrh	r3, [r7, #8]
 800796e:	b2da      	uxtb	r2, r3
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007976:	69fb      	ldr	r3, [r7, #28]
 8007978:	9300      	str	r3, [sp, #0]
 800797a:	69bb      	ldr	r3, [r7, #24]
 800797c:	2200      	movs	r2, #0
 800797e:	2140      	movs	r1, #64	; 0x40
 8007980:	68f8      	ldr	r0, [r7, #12]
 8007982:	f000 f831 	bl	80079e8 <I2C_WaitOnFlagUntilTimeout>
 8007986:	4603      	mov	r3, r0
 8007988:	2b00      	cmp	r3, #0
 800798a:	d001      	beq.n	8007990 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800798c:	2301      	movs	r3, #1
 800798e:	e000      	b.n	8007992 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007990:	2300      	movs	r3, #0
}
 8007992:	4618      	mov	r0, r3
 8007994:	3710      	adds	r7, #16
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	80002000 	.word	0x80002000

080079a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	699b      	ldr	r3, [r3, #24]
 80079ae:	f003 0302 	and.w	r3, r3, #2
 80079b2:	2b02      	cmp	r3, #2
 80079b4:	d103      	bne.n	80079be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2200      	movs	r2, #0
 80079bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	699b      	ldr	r3, [r3, #24]
 80079c4:	f003 0301 	and.w	r3, r3, #1
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d007      	beq.n	80079dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	699a      	ldr	r2, [r3, #24]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f042 0201 	orr.w	r2, r2, #1
 80079da:	619a      	str	r2, [r3, #24]
  }
}
 80079dc:	bf00      	nop
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	603b      	str	r3, [r7, #0]
 80079f4:	4613      	mov	r3, r2
 80079f6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80079f8:	e022      	b.n	8007a40 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a00:	d01e      	beq.n	8007a40 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a02:	f7fd fda9 	bl	8005558 <HAL_GetTick>
 8007a06:	4602      	mov	r2, r0
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	1ad3      	subs	r3, r2, r3
 8007a0c:	683a      	ldr	r2, [r7, #0]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d302      	bcc.n	8007a18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d113      	bne.n	8007a40 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a1c:	f043 0220 	orr.w	r2, r3, #32
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2220      	movs	r2, #32
 8007a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	e00f      	b.n	8007a60 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	699a      	ldr	r2, [r3, #24]
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	4013      	ands	r3, r2
 8007a4a:	68ba      	ldr	r2, [r7, #8]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	bf0c      	ite	eq
 8007a50:	2301      	moveq	r3, #1
 8007a52:	2300      	movne	r3, #0
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	461a      	mov	r2, r3
 8007a58:	79fb      	ldrb	r3, [r7, #7]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d0cd      	beq.n	80079fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007a5e:	2300      	movs	r3, #0
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3710      	adds	r7, #16
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007a74:	e02c      	b.n	8007ad0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	68b9      	ldr	r1, [r7, #8]
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f000 f8ea 	bl	8007c54 <I2C_IsErrorOccurred>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d001      	beq.n	8007a8a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	e02a      	b.n	8007ae0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a90:	d01e      	beq.n	8007ad0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a92:	f7fd fd61 	bl	8005558 <HAL_GetTick>
 8007a96:	4602      	mov	r2, r0
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	1ad3      	subs	r3, r2, r3
 8007a9c:	68ba      	ldr	r2, [r7, #8]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d302      	bcc.n	8007aa8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d113      	bne.n	8007ad0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aac:	f043 0220 	orr.w	r2, r3, #32
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2220      	movs	r2, #32
 8007ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	e007      	b.n	8007ae0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	699b      	ldr	r3, [r3, #24]
 8007ad6:	f003 0302 	and.w	r3, r3, #2
 8007ada:	2b02      	cmp	r3, #2
 8007adc:	d1cb      	bne.n	8007a76 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007ade:	2300      	movs	r3, #0
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3710      	adds	r7, #16
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	60f8      	str	r0, [r7, #12]
 8007af0:	60b9      	str	r1, [r7, #8]
 8007af2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007af4:	e028      	b.n	8007b48 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	68b9      	ldr	r1, [r7, #8]
 8007afa:	68f8      	ldr	r0, [r7, #12]
 8007afc:	f000 f8aa 	bl	8007c54 <I2C_IsErrorOccurred>
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d001      	beq.n	8007b0a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e026      	b.n	8007b58 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b0a:	f7fd fd25 	bl	8005558 <HAL_GetTick>
 8007b0e:	4602      	mov	r2, r0
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	1ad3      	subs	r3, r2, r3
 8007b14:	68ba      	ldr	r2, [r7, #8]
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d302      	bcc.n	8007b20 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d113      	bne.n	8007b48 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b24:	f043 0220 	orr.w	r2, r3, #32
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2220      	movs	r2, #32
 8007b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2200      	movs	r2, #0
 8007b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007b44:	2301      	movs	r3, #1
 8007b46:	e007      	b.n	8007b58 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	699b      	ldr	r3, [r3, #24]
 8007b4e:	f003 0320 	and.w	r3, r3, #32
 8007b52:	2b20      	cmp	r3, #32
 8007b54:	d1cf      	bne.n	8007af6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007b56:	2300      	movs	r3, #0
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3710      	adds	r7, #16
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007b6c:	e064      	b.n	8007c38 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	68b9      	ldr	r1, [r7, #8]
 8007b72:	68f8      	ldr	r0, [r7, #12]
 8007b74:	f000 f86e 	bl	8007c54 <I2C_IsErrorOccurred>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d001      	beq.n	8007b82 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e062      	b.n	8007c48 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	699b      	ldr	r3, [r3, #24]
 8007b88:	f003 0320 	and.w	r3, r3, #32
 8007b8c:	2b20      	cmp	r3, #32
 8007b8e:	d138      	bne.n	8007c02 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	699b      	ldr	r3, [r3, #24]
 8007b96:	f003 0304 	and.w	r3, r3, #4
 8007b9a:	2b04      	cmp	r3, #4
 8007b9c:	d105      	bne.n	8007baa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d001      	beq.n	8007baa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	e04e      	b.n	8007c48 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	699b      	ldr	r3, [r3, #24]
 8007bb0:	f003 0310 	and.w	r3, r3, #16
 8007bb4:	2b10      	cmp	r3, #16
 8007bb6:	d107      	bne.n	8007bc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	2210      	movs	r2, #16
 8007bbe:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2204      	movs	r2, #4
 8007bc4:	645a      	str	r2, [r3, #68]	; 0x44
 8007bc6:	e002      	b.n	8007bce <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	2220      	movs	r2, #32
 8007bd4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	6859      	ldr	r1, [r3, #4]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	4b1b      	ldr	r3, [pc, #108]	; (8007c50 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8007be2:	400b      	ands	r3, r1
 8007be4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2220      	movs	r2, #32
 8007bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e022      	b.n	8007c48 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c02:	f7fd fca9 	bl	8005558 <HAL_GetTick>
 8007c06:	4602      	mov	r2, r0
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	1ad3      	subs	r3, r2, r3
 8007c0c:	68ba      	ldr	r2, [r7, #8]
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d302      	bcc.n	8007c18 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d10f      	bne.n	8007c38 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c1c:	f043 0220 	orr.w	r2, r3, #32
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2220      	movs	r2, #32
 8007c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	e007      	b.n	8007c48 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	699b      	ldr	r3, [r3, #24]
 8007c3e:	f003 0304 	and.w	r3, r3, #4
 8007c42:	2b04      	cmp	r3, #4
 8007c44:	d193      	bne.n	8007b6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3710      	adds	r7, #16
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}
 8007c50:	fe00e800 	.word	0xfe00e800

08007c54 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b08a      	sub	sp, #40	; 0x28
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	60b9      	str	r1, [r7, #8]
 8007c5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c60:	2300      	movs	r3, #0
 8007c62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	699b      	ldr	r3, [r3, #24]
 8007c6c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007c76:	69bb      	ldr	r3, [r7, #24]
 8007c78:	f003 0310 	and.w	r3, r3, #16
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d075      	beq.n	8007d6c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	2210      	movs	r2, #16
 8007c86:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007c88:	e056      	b.n	8007d38 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c90:	d052      	beq.n	8007d38 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007c92:	f7fd fc61 	bl	8005558 <HAL_GetTick>
 8007c96:	4602      	mov	r2, r0
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	1ad3      	subs	r3, r2, r3
 8007c9c:	68ba      	ldr	r2, [r7, #8]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d302      	bcc.n	8007ca8 <I2C_IsErrorOccurred+0x54>
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d147      	bne.n	8007d38 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cb2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007cba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	699b      	ldr	r3, [r3, #24]
 8007cc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007cc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cca:	d12e      	bne.n	8007d2a <I2C_IsErrorOccurred+0xd6>
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cd2:	d02a      	beq.n	8007d2a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8007cd4:	7cfb      	ldrb	r3, [r7, #19]
 8007cd6:	2b20      	cmp	r3, #32
 8007cd8:	d027      	beq.n	8007d2a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	685a      	ldr	r2, [r3, #4]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ce8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007cea:	f7fd fc35 	bl	8005558 <HAL_GetTick>
 8007cee:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007cf0:	e01b      	b.n	8007d2a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007cf2:	f7fd fc31 	bl	8005558 <HAL_GetTick>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	69fb      	ldr	r3, [r7, #28]
 8007cfa:	1ad3      	subs	r3, r2, r3
 8007cfc:	2b19      	cmp	r3, #25
 8007cfe:	d914      	bls.n	8007d2a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d04:	f043 0220 	orr.w	r2, r3, #32
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2220      	movs	r2, #32
 8007d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2200      	movs	r2, #0
 8007d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8007d24:	2301      	movs	r3, #1
 8007d26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	699b      	ldr	r3, [r3, #24]
 8007d30:	f003 0320 	and.w	r3, r3, #32
 8007d34:	2b20      	cmp	r3, #32
 8007d36:	d1dc      	bne.n	8007cf2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	699b      	ldr	r3, [r3, #24]
 8007d3e:	f003 0320 	and.w	r3, r3, #32
 8007d42:	2b20      	cmp	r3, #32
 8007d44:	d003      	beq.n	8007d4e <I2C_IsErrorOccurred+0xfa>
 8007d46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d09d      	beq.n	8007c8a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007d4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d103      	bne.n	8007d5e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	2220      	movs	r2, #32
 8007d5c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007d5e:	6a3b      	ldr	r3, [r7, #32]
 8007d60:	f043 0304 	orr.w	r3, r3, #4
 8007d64:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	699b      	ldr	r3, [r3, #24]
 8007d72:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007d74:	69bb      	ldr	r3, [r7, #24]
 8007d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d00b      	beq.n	8007d96 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007d7e:	6a3b      	ldr	r3, [r7, #32]
 8007d80:	f043 0301 	orr.w	r3, r3, #1
 8007d84:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d8e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007d90:	2301      	movs	r3, #1
 8007d92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d00b      	beq.n	8007db8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007da0:	6a3b      	ldr	r3, [r7, #32]
 8007da2:	f043 0308 	orr.w	r3, r3, #8
 8007da6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007db0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007db8:	69bb      	ldr	r3, [r7, #24]
 8007dba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00b      	beq.n	8007dda <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007dc2:	6a3b      	ldr	r3, [r7, #32]
 8007dc4:	f043 0302 	orr.w	r3, r3, #2
 8007dc8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dd2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007dda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d01c      	beq.n	8007e1c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007de2:	68f8      	ldr	r0, [r7, #12]
 8007de4:	f7ff fddc 	bl	80079a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	6859      	ldr	r1, [r3, #4]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	4b0d      	ldr	r3, [pc, #52]	; (8007e28 <I2C_IsErrorOccurred+0x1d4>)
 8007df4:	400b      	ands	r3, r1
 8007df6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dfc:	6a3b      	ldr	r3, [r7, #32]
 8007dfe:	431a      	orrs	r2, r3
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2220      	movs	r2, #32
 8007e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2200      	movs	r2, #0
 8007e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3728      	adds	r7, #40	; 0x28
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	fe00e800 	.word	0xfe00e800

08007e2c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b087      	sub	sp, #28
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	607b      	str	r3, [r7, #4]
 8007e36:	460b      	mov	r3, r1
 8007e38:	817b      	strh	r3, [r7, #10]
 8007e3a:	4613      	mov	r3, r2
 8007e3c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007e3e:	897b      	ldrh	r3, [r7, #10]
 8007e40:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007e44:	7a7b      	ldrb	r3, [r7, #9]
 8007e46:	041b      	lsls	r3, r3, #16
 8007e48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007e4c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007e52:	6a3b      	ldr	r3, [r7, #32]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e5a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	685a      	ldr	r2, [r3, #4]
 8007e62:	6a3b      	ldr	r3, [r7, #32]
 8007e64:	0d5b      	lsrs	r3, r3, #21
 8007e66:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007e6a:	4b08      	ldr	r3, [pc, #32]	; (8007e8c <I2C_TransferConfig+0x60>)
 8007e6c:	430b      	orrs	r3, r1
 8007e6e:	43db      	mvns	r3, r3
 8007e70:	ea02 0103 	and.w	r1, r2, r3
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	697a      	ldr	r2, [r7, #20]
 8007e7a:	430a      	orrs	r2, r1
 8007e7c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007e7e:	bf00      	nop
 8007e80:	371c      	adds	r7, #28
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr
 8007e8a:	bf00      	nop
 8007e8c:	03ff63ff 	.word	0x03ff63ff

08007e90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	2b20      	cmp	r3, #32
 8007ea4:	d138      	bne.n	8007f18 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d101      	bne.n	8007eb4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007eb0:	2302      	movs	r3, #2
 8007eb2:	e032      	b.n	8007f1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2224      	movs	r2, #36	; 0x24
 8007ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f022 0201 	bic.w	r2, r2, #1
 8007ed2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007ee2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	6819      	ldr	r1, [r3, #0]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	683a      	ldr	r2, [r7, #0]
 8007ef0:	430a      	orrs	r2, r1
 8007ef2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f042 0201 	orr.w	r2, r2, #1
 8007f02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2220      	movs	r2, #32
 8007f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007f14:	2300      	movs	r3, #0
 8007f16:	e000      	b.n	8007f1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007f18:	2302      	movs	r3, #2
  }
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	370c      	adds	r7, #12
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr

08007f26 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007f26:	b480      	push	{r7}
 8007f28:	b085      	sub	sp, #20
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
 8007f2e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	2b20      	cmp	r3, #32
 8007f3a:	d139      	bne.n	8007fb0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d101      	bne.n	8007f4a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007f46:	2302      	movs	r3, #2
 8007f48:	e033      	b.n	8007fb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2224      	movs	r2, #36	; 0x24
 8007f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f022 0201 	bic.w	r2, r2, #1
 8007f68:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007f78:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	021b      	lsls	r3, r3, #8
 8007f7e:	68fa      	ldr	r2, [r7, #12]
 8007f80:	4313      	orrs	r3, r2
 8007f82:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	68fa      	ldr	r2, [r7, #12]
 8007f8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f042 0201 	orr.w	r2, r2, #1
 8007f9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2220      	movs	r2, #32
 8007fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007fac:	2300      	movs	r3, #0
 8007fae:	e000      	b.n	8007fb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007fb0:	2302      	movs	r3, #2
  }
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3714      	adds	r7, #20
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr
	...

08007fc0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007fc4:	4b05      	ldr	r3, [pc, #20]	; (8007fdc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a04      	ldr	r2, [pc, #16]	; (8007fdc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fce:	6013      	str	r3, [r2, #0]
}
 8007fd0:	bf00      	nop
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr
 8007fda:	bf00      	nop
 8007fdc:	40007000 	.word	0x40007000

08007fe0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b086      	sub	sp, #24
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d101      	bne.n	8007ff6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e29b      	b.n	800852e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f003 0301 	and.w	r3, r3, #1
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	f000 8087 	beq.w	8008112 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008004:	4b96      	ldr	r3, [pc, #600]	; (8008260 <HAL_RCC_OscConfig+0x280>)
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	f003 030c 	and.w	r3, r3, #12
 800800c:	2b04      	cmp	r3, #4
 800800e:	d00c      	beq.n	800802a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008010:	4b93      	ldr	r3, [pc, #588]	; (8008260 <HAL_RCC_OscConfig+0x280>)
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	f003 030c 	and.w	r3, r3, #12
 8008018:	2b08      	cmp	r3, #8
 800801a:	d112      	bne.n	8008042 <HAL_RCC_OscConfig+0x62>
 800801c:	4b90      	ldr	r3, [pc, #576]	; (8008260 <HAL_RCC_OscConfig+0x280>)
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008024:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008028:	d10b      	bne.n	8008042 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800802a:	4b8d      	ldr	r3, [pc, #564]	; (8008260 <HAL_RCC_OscConfig+0x280>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008032:	2b00      	cmp	r3, #0
 8008034:	d06c      	beq.n	8008110 <HAL_RCC_OscConfig+0x130>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d168      	bne.n	8008110 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800803e:	2301      	movs	r3, #1
 8008040:	e275      	b.n	800852e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800804a:	d106      	bne.n	800805a <HAL_RCC_OscConfig+0x7a>
 800804c:	4b84      	ldr	r3, [pc, #528]	; (8008260 <HAL_RCC_OscConfig+0x280>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a83      	ldr	r2, [pc, #524]	; (8008260 <HAL_RCC_OscConfig+0x280>)
 8008052:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008056:	6013      	str	r3, [r2, #0]
 8008058:	e02e      	b.n	80080b8 <HAL_RCC_OscConfig+0xd8>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d10c      	bne.n	800807c <HAL_RCC_OscConfig+0x9c>
 8008062:	4b7f      	ldr	r3, [pc, #508]	; (8008260 <HAL_RCC_OscConfig+0x280>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a7e      	ldr	r2, [pc, #504]	; (8008260 <HAL_RCC_OscConfig+0x280>)
 8008068:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800806c:	6013      	str	r3, [r2, #0]
 800806e:	4b7c      	ldr	r3, [pc, #496]	; (8008260 <HAL_RCC_OscConfig+0x280>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a7b      	ldr	r2, [pc, #492]	; (8008260 <HAL_RCC_OscConfig+0x280>)
 8008074:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008078:	6013      	str	r3, [r2, #0]
 800807a:	e01d      	b.n	80080b8 <HAL_RCC_OscConfig+0xd8>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008084:	d10c      	bne.n	80080a0 <HAL_RCC_OscConfig+0xc0>
 8008086:	4b76      	ldr	r3, [pc, #472]	; (8008260 <HAL_RCC_OscConfig+0x280>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a75      	ldr	r2, [pc, #468]	; (8008260 <HAL_RCC_OscConfig+0x280>)
 800808c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008090:	6013      	str	r3, [r2, #0]
 8008092:	4b73      	ldr	r3, [pc, #460]	; (8008260 <HAL_RCC_OscConfig+0x280>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a72      	ldr	r2, [pc, #456]	; (8008260 <HAL_RCC_OscConfig+0x280>)
 8008098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800809c:	6013      	str	r3, [r2, #0]
 800809e:	e00b      	b.n	80080b8 <HAL_RCC_OscConfig+0xd8>
 80080a0:	4b6f      	ldr	r3, [pc, #444]	; (8008260 <HAL_RCC_OscConfig+0x280>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a6e      	ldr	r2, [pc, #440]	; (8008260 <HAL_RCC_OscConfig+0x280>)
 80080a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080aa:	6013      	str	r3, [r2, #0]
 80080ac:	4b6c      	ldr	r3, [pc, #432]	; (8008260 <HAL_RCC_OscConfig+0x280>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a6b      	ldr	r2, [pc, #428]	; (8008260 <HAL_RCC_OscConfig+0x280>)
 80080b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80080b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d013      	beq.n	80080e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080c0:	f7fd fa4a 	bl	8005558 <HAL_GetTick>
 80080c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080c6:	e008      	b.n	80080da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80080c8:	f7fd fa46 	bl	8005558 <HAL_GetTick>
 80080cc:	4602      	mov	r2, r0
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	1ad3      	subs	r3, r2, r3
 80080d2:	2b64      	cmp	r3, #100	; 0x64
 80080d4:	d901      	bls.n	80080da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80080d6:	2303      	movs	r3, #3
 80080d8:	e229      	b.n	800852e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080da:	4b61      	ldr	r3, [pc, #388]	; (8008260 <HAL_RCC_OscConfig+0x280>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d0f0      	beq.n	80080c8 <HAL_RCC_OscConfig+0xe8>
 80080e6:	e014      	b.n	8008112 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080e8:	f7fd fa36 	bl	8005558 <HAL_GetTick>
 80080ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80080ee:	e008      	b.n	8008102 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80080f0:	f7fd fa32 	bl	8005558 <HAL_GetTick>
 80080f4:	4602      	mov	r2, r0
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	1ad3      	subs	r3, r2, r3
 80080fa:	2b64      	cmp	r3, #100	; 0x64
 80080fc:	d901      	bls.n	8008102 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80080fe:	2303      	movs	r3, #3
 8008100:	e215      	b.n	800852e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008102:	4b57      	ldr	r3, [pc, #348]	; (8008260 <HAL_RCC_OscConfig+0x280>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800810a:	2b00      	cmp	r3, #0
 800810c:	d1f0      	bne.n	80080f0 <HAL_RCC_OscConfig+0x110>
 800810e:	e000      	b.n	8008112 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008110:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f003 0302 	and.w	r3, r3, #2
 800811a:	2b00      	cmp	r3, #0
 800811c:	d069      	beq.n	80081f2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800811e:	4b50      	ldr	r3, [pc, #320]	; (8008260 <HAL_RCC_OscConfig+0x280>)
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	f003 030c 	and.w	r3, r3, #12
 8008126:	2b00      	cmp	r3, #0
 8008128:	d00b      	beq.n	8008142 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800812a:	4b4d      	ldr	r3, [pc, #308]	; (8008260 <HAL_RCC_OscConfig+0x280>)
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	f003 030c 	and.w	r3, r3, #12
 8008132:	2b08      	cmp	r3, #8
 8008134:	d11c      	bne.n	8008170 <HAL_RCC_OscConfig+0x190>
 8008136:	4b4a      	ldr	r3, [pc, #296]	; (8008260 <HAL_RCC_OscConfig+0x280>)
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800813e:	2b00      	cmp	r3, #0
 8008140:	d116      	bne.n	8008170 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008142:	4b47      	ldr	r3, [pc, #284]	; (8008260 <HAL_RCC_OscConfig+0x280>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f003 0302 	and.w	r3, r3, #2
 800814a:	2b00      	cmp	r3, #0
 800814c:	d005      	beq.n	800815a <HAL_RCC_OscConfig+0x17a>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	68db      	ldr	r3, [r3, #12]
 8008152:	2b01      	cmp	r3, #1
 8008154:	d001      	beq.n	800815a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	e1e9      	b.n	800852e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800815a:	4b41      	ldr	r3, [pc, #260]	; (8008260 <HAL_RCC_OscConfig+0x280>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	691b      	ldr	r3, [r3, #16]
 8008166:	00db      	lsls	r3, r3, #3
 8008168:	493d      	ldr	r1, [pc, #244]	; (8008260 <HAL_RCC_OscConfig+0x280>)
 800816a:	4313      	orrs	r3, r2
 800816c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800816e:	e040      	b.n	80081f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	68db      	ldr	r3, [r3, #12]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d023      	beq.n	80081c0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008178:	4b39      	ldr	r3, [pc, #228]	; (8008260 <HAL_RCC_OscConfig+0x280>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a38      	ldr	r2, [pc, #224]	; (8008260 <HAL_RCC_OscConfig+0x280>)
 800817e:	f043 0301 	orr.w	r3, r3, #1
 8008182:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008184:	f7fd f9e8 	bl	8005558 <HAL_GetTick>
 8008188:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800818a:	e008      	b.n	800819e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800818c:	f7fd f9e4 	bl	8005558 <HAL_GetTick>
 8008190:	4602      	mov	r2, r0
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	1ad3      	subs	r3, r2, r3
 8008196:	2b02      	cmp	r3, #2
 8008198:	d901      	bls.n	800819e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800819a:	2303      	movs	r3, #3
 800819c:	e1c7      	b.n	800852e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800819e:	4b30      	ldr	r3, [pc, #192]	; (8008260 <HAL_RCC_OscConfig+0x280>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f003 0302 	and.w	r3, r3, #2
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d0f0      	beq.n	800818c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081aa:	4b2d      	ldr	r3, [pc, #180]	; (8008260 <HAL_RCC_OscConfig+0x280>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	691b      	ldr	r3, [r3, #16]
 80081b6:	00db      	lsls	r3, r3, #3
 80081b8:	4929      	ldr	r1, [pc, #164]	; (8008260 <HAL_RCC_OscConfig+0x280>)
 80081ba:	4313      	orrs	r3, r2
 80081bc:	600b      	str	r3, [r1, #0]
 80081be:	e018      	b.n	80081f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80081c0:	4b27      	ldr	r3, [pc, #156]	; (8008260 <HAL_RCC_OscConfig+0x280>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a26      	ldr	r2, [pc, #152]	; (8008260 <HAL_RCC_OscConfig+0x280>)
 80081c6:	f023 0301 	bic.w	r3, r3, #1
 80081ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081cc:	f7fd f9c4 	bl	8005558 <HAL_GetTick>
 80081d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80081d2:	e008      	b.n	80081e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80081d4:	f7fd f9c0 	bl	8005558 <HAL_GetTick>
 80081d8:	4602      	mov	r2, r0
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	1ad3      	subs	r3, r2, r3
 80081de:	2b02      	cmp	r3, #2
 80081e0:	d901      	bls.n	80081e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80081e2:	2303      	movs	r3, #3
 80081e4:	e1a3      	b.n	800852e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80081e6:	4b1e      	ldr	r3, [pc, #120]	; (8008260 <HAL_RCC_OscConfig+0x280>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f003 0302 	and.w	r3, r3, #2
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d1f0      	bne.n	80081d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f003 0308 	and.w	r3, r3, #8
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d038      	beq.n	8008270 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	695b      	ldr	r3, [r3, #20]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d019      	beq.n	800823a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008206:	4b16      	ldr	r3, [pc, #88]	; (8008260 <HAL_RCC_OscConfig+0x280>)
 8008208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800820a:	4a15      	ldr	r2, [pc, #84]	; (8008260 <HAL_RCC_OscConfig+0x280>)
 800820c:	f043 0301 	orr.w	r3, r3, #1
 8008210:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008212:	f7fd f9a1 	bl	8005558 <HAL_GetTick>
 8008216:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008218:	e008      	b.n	800822c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800821a:	f7fd f99d 	bl	8005558 <HAL_GetTick>
 800821e:	4602      	mov	r2, r0
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	1ad3      	subs	r3, r2, r3
 8008224:	2b02      	cmp	r3, #2
 8008226:	d901      	bls.n	800822c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008228:	2303      	movs	r3, #3
 800822a:	e180      	b.n	800852e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800822c:	4b0c      	ldr	r3, [pc, #48]	; (8008260 <HAL_RCC_OscConfig+0x280>)
 800822e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008230:	f003 0302 	and.w	r3, r3, #2
 8008234:	2b00      	cmp	r3, #0
 8008236:	d0f0      	beq.n	800821a <HAL_RCC_OscConfig+0x23a>
 8008238:	e01a      	b.n	8008270 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800823a:	4b09      	ldr	r3, [pc, #36]	; (8008260 <HAL_RCC_OscConfig+0x280>)
 800823c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800823e:	4a08      	ldr	r2, [pc, #32]	; (8008260 <HAL_RCC_OscConfig+0x280>)
 8008240:	f023 0301 	bic.w	r3, r3, #1
 8008244:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008246:	f7fd f987 	bl	8005558 <HAL_GetTick>
 800824a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800824c:	e00a      	b.n	8008264 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800824e:	f7fd f983 	bl	8005558 <HAL_GetTick>
 8008252:	4602      	mov	r2, r0
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	1ad3      	subs	r3, r2, r3
 8008258:	2b02      	cmp	r3, #2
 800825a:	d903      	bls.n	8008264 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800825c:	2303      	movs	r3, #3
 800825e:	e166      	b.n	800852e <HAL_RCC_OscConfig+0x54e>
 8008260:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008264:	4b92      	ldr	r3, [pc, #584]	; (80084b0 <HAL_RCC_OscConfig+0x4d0>)
 8008266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008268:	f003 0302 	and.w	r3, r3, #2
 800826c:	2b00      	cmp	r3, #0
 800826e:	d1ee      	bne.n	800824e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f003 0304 	and.w	r3, r3, #4
 8008278:	2b00      	cmp	r3, #0
 800827a:	f000 80a4 	beq.w	80083c6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800827e:	4b8c      	ldr	r3, [pc, #560]	; (80084b0 <HAL_RCC_OscConfig+0x4d0>)
 8008280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008286:	2b00      	cmp	r3, #0
 8008288:	d10d      	bne.n	80082a6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800828a:	4b89      	ldr	r3, [pc, #548]	; (80084b0 <HAL_RCC_OscConfig+0x4d0>)
 800828c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800828e:	4a88      	ldr	r2, [pc, #544]	; (80084b0 <HAL_RCC_OscConfig+0x4d0>)
 8008290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008294:	6413      	str	r3, [r2, #64]	; 0x40
 8008296:	4b86      	ldr	r3, [pc, #536]	; (80084b0 <HAL_RCC_OscConfig+0x4d0>)
 8008298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800829a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800829e:	60bb      	str	r3, [r7, #8]
 80082a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80082a2:	2301      	movs	r3, #1
 80082a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80082a6:	4b83      	ldr	r3, [pc, #524]	; (80084b4 <HAL_RCC_OscConfig+0x4d4>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d118      	bne.n	80082e4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80082b2:	4b80      	ldr	r3, [pc, #512]	; (80084b4 <HAL_RCC_OscConfig+0x4d4>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a7f      	ldr	r2, [pc, #508]	; (80084b4 <HAL_RCC_OscConfig+0x4d4>)
 80082b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80082be:	f7fd f94b 	bl	8005558 <HAL_GetTick>
 80082c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80082c4:	e008      	b.n	80082d8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082c6:	f7fd f947 	bl	8005558 <HAL_GetTick>
 80082ca:	4602      	mov	r2, r0
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	1ad3      	subs	r3, r2, r3
 80082d0:	2b64      	cmp	r3, #100	; 0x64
 80082d2:	d901      	bls.n	80082d8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80082d4:	2303      	movs	r3, #3
 80082d6:	e12a      	b.n	800852e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80082d8:	4b76      	ldr	r3, [pc, #472]	; (80084b4 <HAL_RCC_OscConfig+0x4d4>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d0f0      	beq.n	80082c6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d106      	bne.n	80082fa <HAL_RCC_OscConfig+0x31a>
 80082ec:	4b70      	ldr	r3, [pc, #448]	; (80084b0 <HAL_RCC_OscConfig+0x4d0>)
 80082ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082f0:	4a6f      	ldr	r2, [pc, #444]	; (80084b0 <HAL_RCC_OscConfig+0x4d0>)
 80082f2:	f043 0301 	orr.w	r3, r3, #1
 80082f6:	6713      	str	r3, [r2, #112]	; 0x70
 80082f8:	e02d      	b.n	8008356 <HAL_RCC_OscConfig+0x376>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d10c      	bne.n	800831c <HAL_RCC_OscConfig+0x33c>
 8008302:	4b6b      	ldr	r3, [pc, #428]	; (80084b0 <HAL_RCC_OscConfig+0x4d0>)
 8008304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008306:	4a6a      	ldr	r2, [pc, #424]	; (80084b0 <HAL_RCC_OscConfig+0x4d0>)
 8008308:	f023 0301 	bic.w	r3, r3, #1
 800830c:	6713      	str	r3, [r2, #112]	; 0x70
 800830e:	4b68      	ldr	r3, [pc, #416]	; (80084b0 <HAL_RCC_OscConfig+0x4d0>)
 8008310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008312:	4a67      	ldr	r2, [pc, #412]	; (80084b0 <HAL_RCC_OscConfig+0x4d0>)
 8008314:	f023 0304 	bic.w	r3, r3, #4
 8008318:	6713      	str	r3, [r2, #112]	; 0x70
 800831a:	e01c      	b.n	8008356 <HAL_RCC_OscConfig+0x376>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	2b05      	cmp	r3, #5
 8008322:	d10c      	bne.n	800833e <HAL_RCC_OscConfig+0x35e>
 8008324:	4b62      	ldr	r3, [pc, #392]	; (80084b0 <HAL_RCC_OscConfig+0x4d0>)
 8008326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008328:	4a61      	ldr	r2, [pc, #388]	; (80084b0 <HAL_RCC_OscConfig+0x4d0>)
 800832a:	f043 0304 	orr.w	r3, r3, #4
 800832e:	6713      	str	r3, [r2, #112]	; 0x70
 8008330:	4b5f      	ldr	r3, [pc, #380]	; (80084b0 <HAL_RCC_OscConfig+0x4d0>)
 8008332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008334:	4a5e      	ldr	r2, [pc, #376]	; (80084b0 <HAL_RCC_OscConfig+0x4d0>)
 8008336:	f043 0301 	orr.w	r3, r3, #1
 800833a:	6713      	str	r3, [r2, #112]	; 0x70
 800833c:	e00b      	b.n	8008356 <HAL_RCC_OscConfig+0x376>
 800833e:	4b5c      	ldr	r3, [pc, #368]	; (80084b0 <HAL_RCC_OscConfig+0x4d0>)
 8008340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008342:	4a5b      	ldr	r2, [pc, #364]	; (80084b0 <HAL_RCC_OscConfig+0x4d0>)
 8008344:	f023 0301 	bic.w	r3, r3, #1
 8008348:	6713      	str	r3, [r2, #112]	; 0x70
 800834a:	4b59      	ldr	r3, [pc, #356]	; (80084b0 <HAL_RCC_OscConfig+0x4d0>)
 800834c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800834e:	4a58      	ldr	r2, [pc, #352]	; (80084b0 <HAL_RCC_OscConfig+0x4d0>)
 8008350:	f023 0304 	bic.w	r3, r3, #4
 8008354:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d015      	beq.n	800838a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800835e:	f7fd f8fb 	bl	8005558 <HAL_GetTick>
 8008362:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008364:	e00a      	b.n	800837c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008366:	f7fd f8f7 	bl	8005558 <HAL_GetTick>
 800836a:	4602      	mov	r2, r0
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	1ad3      	subs	r3, r2, r3
 8008370:	f241 3288 	movw	r2, #5000	; 0x1388
 8008374:	4293      	cmp	r3, r2
 8008376:	d901      	bls.n	800837c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008378:	2303      	movs	r3, #3
 800837a:	e0d8      	b.n	800852e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800837c:	4b4c      	ldr	r3, [pc, #304]	; (80084b0 <HAL_RCC_OscConfig+0x4d0>)
 800837e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008380:	f003 0302 	and.w	r3, r3, #2
 8008384:	2b00      	cmp	r3, #0
 8008386:	d0ee      	beq.n	8008366 <HAL_RCC_OscConfig+0x386>
 8008388:	e014      	b.n	80083b4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800838a:	f7fd f8e5 	bl	8005558 <HAL_GetTick>
 800838e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008390:	e00a      	b.n	80083a8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008392:	f7fd f8e1 	bl	8005558 <HAL_GetTick>
 8008396:	4602      	mov	r2, r0
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	1ad3      	subs	r3, r2, r3
 800839c:	f241 3288 	movw	r2, #5000	; 0x1388
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d901      	bls.n	80083a8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80083a4:	2303      	movs	r3, #3
 80083a6:	e0c2      	b.n	800852e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80083a8:	4b41      	ldr	r3, [pc, #260]	; (80084b0 <HAL_RCC_OscConfig+0x4d0>)
 80083aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083ac:	f003 0302 	and.w	r3, r3, #2
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d1ee      	bne.n	8008392 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80083b4:	7dfb      	ldrb	r3, [r7, #23]
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d105      	bne.n	80083c6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80083ba:	4b3d      	ldr	r3, [pc, #244]	; (80084b0 <HAL_RCC_OscConfig+0x4d0>)
 80083bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083be:	4a3c      	ldr	r2, [pc, #240]	; (80084b0 <HAL_RCC_OscConfig+0x4d0>)
 80083c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	699b      	ldr	r3, [r3, #24]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	f000 80ae 	beq.w	800852c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80083d0:	4b37      	ldr	r3, [pc, #220]	; (80084b0 <HAL_RCC_OscConfig+0x4d0>)
 80083d2:	689b      	ldr	r3, [r3, #8]
 80083d4:	f003 030c 	and.w	r3, r3, #12
 80083d8:	2b08      	cmp	r3, #8
 80083da:	d06d      	beq.n	80084b8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	699b      	ldr	r3, [r3, #24]
 80083e0:	2b02      	cmp	r3, #2
 80083e2:	d14b      	bne.n	800847c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083e4:	4b32      	ldr	r3, [pc, #200]	; (80084b0 <HAL_RCC_OscConfig+0x4d0>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a31      	ldr	r2, [pc, #196]	; (80084b0 <HAL_RCC_OscConfig+0x4d0>)
 80083ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80083ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083f0:	f7fd f8b2 	bl	8005558 <HAL_GetTick>
 80083f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083f6:	e008      	b.n	800840a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083f8:	f7fd f8ae 	bl	8005558 <HAL_GetTick>
 80083fc:	4602      	mov	r2, r0
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	1ad3      	subs	r3, r2, r3
 8008402:	2b02      	cmp	r3, #2
 8008404:	d901      	bls.n	800840a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008406:	2303      	movs	r3, #3
 8008408:	e091      	b.n	800852e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800840a:	4b29      	ldr	r3, [pc, #164]	; (80084b0 <HAL_RCC_OscConfig+0x4d0>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008412:	2b00      	cmp	r3, #0
 8008414:	d1f0      	bne.n	80083f8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	69da      	ldr	r2, [r3, #28]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6a1b      	ldr	r3, [r3, #32]
 800841e:	431a      	orrs	r2, r3
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008424:	019b      	lsls	r3, r3, #6
 8008426:	431a      	orrs	r2, r3
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800842c:	085b      	lsrs	r3, r3, #1
 800842e:	3b01      	subs	r3, #1
 8008430:	041b      	lsls	r3, r3, #16
 8008432:	431a      	orrs	r2, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008438:	061b      	lsls	r3, r3, #24
 800843a:	431a      	orrs	r2, r3
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008440:	071b      	lsls	r3, r3, #28
 8008442:	491b      	ldr	r1, [pc, #108]	; (80084b0 <HAL_RCC_OscConfig+0x4d0>)
 8008444:	4313      	orrs	r3, r2
 8008446:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008448:	4b19      	ldr	r3, [pc, #100]	; (80084b0 <HAL_RCC_OscConfig+0x4d0>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a18      	ldr	r2, [pc, #96]	; (80084b0 <HAL_RCC_OscConfig+0x4d0>)
 800844e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008452:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008454:	f7fd f880 	bl	8005558 <HAL_GetTick>
 8008458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800845a:	e008      	b.n	800846e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800845c:	f7fd f87c 	bl	8005558 <HAL_GetTick>
 8008460:	4602      	mov	r2, r0
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	1ad3      	subs	r3, r2, r3
 8008466:	2b02      	cmp	r3, #2
 8008468:	d901      	bls.n	800846e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800846a:	2303      	movs	r3, #3
 800846c:	e05f      	b.n	800852e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800846e:	4b10      	ldr	r3, [pc, #64]	; (80084b0 <HAL_RCC_OscConfig+0x4d0>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008476:	2b00      	cmp	r3, #0
 8008478:	d0f0      	beq.n	800845c <HAL_RCC_OscConfig+0x47c>
 800847a:	e057      	b.n	800852c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800847c:	4b0c      	ldr	r3, [pc, #48]	; (80084b0 <HAL_RCC_OscConfig+0x4d0>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a0b      	ldr	r2, [pc, #44]	; (80084b0 <HAL_RCC_OscConfig+0x4d0>)
 8008482:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008486:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008488:	f7fd f866 	bl	8005558 <HAL_GetTick>
 800848c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800848e:	e008      	b.n	80084a2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008490:	f7fd f862 	bl	8005558 <HAL_GetTick>
 8008494:	4602      	mov	r2, r0
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	1ad3      	subs	r3, r2, r3
 800849a:	2b02      	cmp	r3, #2
 800849c:	d901      	bls.n	80084a2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800849e:	2303      	movs	r3, #3
 80084a0:	e045      	b.n	800852e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084a2:	4b03      	ldr	r3, [pc, #12]	; (80084b0 <HAL_RCC_OscConfig+0x4d0>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d1f0      	bne.n	8008490 <HAL_RCC_OscConfig+0x4b0>
 80084ae:	e03d      	b.n	800852c <HAL_RCC_OscConfig+0x54c>
 80084b0:	40023800 	.word	0x40023800
 80084b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80084b8:	4b1f      	ldr	r3, [pc, #124]	; (8008538 <HAL_RCC_OscConfig+0x558>)
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	699b      	ldr	r3, [r3, #24]
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d030      	beq.n	8008528 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d129      	bne.n	8008528 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084de:	429a      	cmp	r2, r3
 80084e0:	d122      	bne.n	8008528 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80084e2:	68fa      	ldr	r2, [r7, #12]
 80084e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80084e8:	4013      	ands	r3, r2
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80084ee:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d119      	bne.n	8008528 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084fe:	085b      	lsrs	r3, r3, #1
 8008500:	3b01      	subs	r3, #1
 8008502:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008504:	429a      	cmp	r2, r3
 8008506:	d10f      	bne.n	8008528 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008512:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008514:	429a      	cmp	r2, r3
 8008516:	d107      	bne.n	8008528 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008522:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008524:	429a      	cmp	r2, r3
 8008526:	d001      	beq.n	800852c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8008528:	2301      	movs	r3, #1
 800852a:	e000      	b.n	800852e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800852c:	2300      	movs	r3, #0
}
 800852e:	4618      	mov	r0, r3
 8008530:	3718      	adds	r7, #24
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	40023800 	.word	0x40023800

0800853c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008546:	2300      	movs	r3, #0
 8008548:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d101      	bne.n	8008554 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	e0d0      	b.n	80086f6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008554:	4b6a      	ldr	r3, [pc, #424]	; (8008700 <HAL_RCC_ClockConfig+0x1c4>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f003 030f 	and.w	r3, r3, #15
 800855c:	683a      	ldr	r2, [r7, #0]
 800855e:	429a      	cmp	r2, r3
 8008560:	d910      	bls.n	8008584 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008562:	4b67      	ldr	r3, [pc, #412]	; (8008700 <HAL_RCC_ClockConfig+0x1c4>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f023 020f 	bic.w	r2, r3, #15
 800856a:	4965      	ldr	r1, [pc, #404]	; (8008700 <HAL_RCC_ClockConfig+0x1c4>)
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	4313      	orrs	r3, r2
 8008570:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008572:	4b63      	ldr	r3, [pc, #396]	; (8008700 <HAL_RCC_ClockConfig+0x1c4>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f003 030f 	and.w	r3, r3, #15
 800857a:	683a      	ldr	r2, [r7, #0]
 800857c:	429a      	cmp	r2, r3
 800857e:	d001      	beq.n	8008584 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008580:	2301      	movs	r3, #1
 8008582:	e0b8      	b.n	80086f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f003 0302 	and.w	r3, r3, #2
 800858c:	2b00      	cmp	r3, #0
 800858e:	d020      	beq.n	80085d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f003 0304 	and.w	r3, r3, #4
 8008598:	2b00      	cmp	r3, #0
 800859a:	d005      	beq.n	80085a8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800859c:	4b59      	ldr	r3, [pc, #356]	; (8008704 <HAL_RCC_ClockConfig+0x1c8>)
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	4a58      	ldr	r2, [pc, #352]	; (8008704 <HAL_RCC_ClockConfig+0x1c8>)
 80085a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80085a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 0308 	and.w	r3, r3, #8
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d005      	beq.n	80085c0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80085b4:	4b53      	ldr	r3, [pc, #332]	; (8008704 <HAL_RCC_ClockConfig+0x1c8>)
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	4a52      	ldr	r2, [pc, #328]	; (8008704 <HAL_RCC_ClockConfig+0x1c8>)
 80085ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80085be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80085c0:	4b50      	ldr	r3, [pc, #320]	; (8008704 <HAL_RCC_ClockConfig+0x1c8>)
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	494d      	ldr	r1, [pc, #308]	; (8008704 <HAL_RCC_ClockConfig+0x1c8>)
 80085ce:	4313      	orrs	r3, r2
 80085d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f003 0301 	and.w	r3, r3, #1
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d040      	beq.n	8008660 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d107      	bne.n	80085f6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085e6:	4b47      	ldr	r3, [pc, #284]	; (8008704 <HAL_RCC_ClockConfig+0x1c8>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d115      	bne.n	800861e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	e07f      	b.n	80086f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	2b02      	cmp	r3, #2
 80085fc:	d107      	bne.n	800860e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80085fe:	4b41      	ldr	r3, [pc, #260]	; (8008704 <HAL_RCC_ClockConfig+0x1c8>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008606:	2b00      	cmp	r3, #0
 8008608:	d109      	bne.n	800861e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	e073      	b.n	80086f6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800860e:	4b3d      	ldr	r3, [pc, #244]	; (8008704 <HAL_RCC_ClockConfig+0x1c8>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f003 0302 	and.w	r3, r3, #2
 8008616:	2b00      	cmp	r3, #0
 8008618:	d101      	bne.n	800861e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	e06b      	b.n	80086f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800861e:	4b39      	ldr	r3, [pc, #228]	; (8008704 <HAL_RCC_ClockConfig+0x1c8>)
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	f023 0203 	bic.w	r2, r3, #3
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	4936      	ldr	r1, [pc, #216]	; (8008704 <HAL_RCC_ClockConfig+0x1c8>)
 800862c:	4313      	orrs	r3, r2
 800862e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008630:	f7fc ff92 	bl	8005558 <HAL_GetTick>
 8008634:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008636:	e00a      	b.n	800864e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008638:	f7fc ff8e 	bl	8005558 <HAL_GetTick>
 800863c:	4602      	mov	r2, r0
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	1ad3      	subs	r3, r2, r3
 8008642:	f241 3288 	movw	r2, #5000	; 0x1388
 8008646:	4293      	cmp	r3, r2
 8008648:	d901      	bls.n	800864e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800864a:	2303      	movs	r3, #3
 800864c:	e053      	b.n	80086f6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800864e:	4b2d      	ldr	r3, [pc, #180]	; (8008704 <HAL_RCC_ClockConfig+0x1c8>)
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	f003 020c 	and.w	r2, r3, #12
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	009b      	lsls	r3, r3, #2
 800865c:	429a      	cmp	r2, r3
 800865e:	d1eb      	bne.n	8008638 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008660:	4b27      	ldr	r3, [pc, #156]	; (8008700 <HAL_RCC_ClockConfig+0x1c4>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f003 030f 	and.w	r3, r3, #15
 8008668:	683a      	ldr	r2, [r7, #0]
 800866a:	429a      	cmp	r2, r3
 800866c:	d210      	bcs.n	8008690 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800866e:	4b24      	ldr	r3, [pc, #144]	; (8008700 <HAL_RCC_ClockConfig+0x1c4>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f023 020f 	bic.w	r2, r3, #15
 8008676:	4922      	ldr	r1, [pc, #136]	; (8008700 <HAL_RCC_ClockConfig+0x1c4>)
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	4313      	orrs	r3, r2
 800867c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800867e:	4b20      	ldr	r3, [pc, #128]	; (8008700 <HAL_RCC_ClockConfig+0x1c4>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f003 030f 	and.w	r3, r3, #15
 8008686:	683a      	ldr	r2, [r7, #0]
 8008688:	429a      	cmp	r2, r3
 800868a:	d001      	beq.n	8008690 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800868c:	2301      	movs	r3, #1
 800868e:	e032      	b.n	80086f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f003 0304 	and.w	r3, r3, #4
 8008698:	2b00      	cmp	r3, #0
 800869a:	d008      	beq.n	80086ae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800869c:	4b19      	ldr	r3, [pc, #100]	; (8008704 <HAL_RCC_ClockConfig+0x1c8>)
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	4916      	ldr	r1, [pc, #88]	; (8008704 <HAL_RCC_ClockConfig+0x1c8>)
 80086aa:	4313      	orrs	r3, r2
 80086ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f003 0308 	and.w	r3, r3, #8
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d009      	beq.n	80086ce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80086ba:	4b12      	ldr	r3, [pc, #72]	; (8008704 <HAL_RCC_ClockConfig+0x1c8>)
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	691b      	ldr	r3, [r3, #16]
 80086c6:	00db      	lsls	r3, r3, #3
 80086c8:	490e      	ldr	r1, [pc, #56]	; (8008704 <HAL_RCC_ClockConfig+0x1c8>)
 80086ca:	4313      	orrs	r3, r2
 80086cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80086ce:	f000 f821 	bl	8008714 <HAL_RCC_GetSysClockFreq>
 80086d2:	4602      	mov	r2, r0
 80086d4:	4b0b      	ldr	r3, [pc, #44]	; (8008704 <HAL_RCC_ClockConfig+0x1c8>)
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	091b      	lsrs	r3, r3, #4
 80086da:	f003 030f 	and.w	r3, r3, #15
 80086de:	490a      	ldr	r1, [pc, #40]	; (8008708 <HAL_RCC_ClockConfig+0x1cc>)
 80086e0:	5ccb      	ldrb	r3, [r1, r3]
 80086e2:	fa22 f303 	lsr.w	r3, r2, r3
 80086e6:	4a09      	ldr	r2, [pc, #36]	; (800870c <HAL_RCC_ClockConfig+0x1d0>)
 80086e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80086ea:	4b09      	ldr	r3, [pc, #36]	; (8008710 <HAL_RCC_ClockConfig+0x1d4>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4618      	mov	r0, r3
 80086f0:	f7fc feee 	bl	80054d0 <HAL_InitTick>

  return HAL_OK;
 80086f4:	2300      	movs	r3, #0
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	40023c00 	.word	0x40023c00
 8008704:	40023800 	.word	0x40023800
 8008708:	080176b4 	.word	0x080176b4
 800870c:	200003fc 	.word	0x200003fc
 8008710:	20000400 	.word	0x20000400

08008714 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008718:	b090      	sub	sp, #64	; 0x40
 800871a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800871c:	2300      	movs	r3, #0
 800871e:	637b      	str	r3, [r7, #52]	; 0x34
 8008720:	2300      	movs	r3, #0
 8008722:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008724:	2300      	movs	r3, #0
 8008726:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8008728:	2300      	movs	r3, #0
 800872a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800872c:	4b59      	ldr	r3, [pc, #356]	; (8008894 <HAL_RCC_GetSysClockFreq+0x180>)
 800872e:	689b      	ldr	r3, [r3, #8]
 8008730:	f003 030c 	and.w	r3, r3, #12
 8008734:	2b08      	cmp	r3, #8
 8008736:	d00d      	beq.n	8008754 <HAL_RCC_GetSysClockFreq+0x40>
 8008738:	2b08      	cmp	r3, #8
 800873a:	f200 80a1 	bhi.w	8008880 <HAL_RCC_GetSysClockFreq+0x16c>
 800873e:	2b00      	cmp	r3, #0
 8008740:	d002      	beq.n	8008748 <HAL_RCC_GetSysClockFreq+0x34>
 8008742:	2b04      	cmp	r3, #4
 8008744:	d003      	beq.n	800874e <HAL_RCC_GetSysClockFreq+0x3a>
 8008746:	e09b      	b.n	8008880 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008748:	4b53      	ldr	r3, [pc, #332]	; (8008898 <HAL_RCC_GetSysClockFreq+0x184>)
 800874a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800874c:	e09b      	b.n	8008886 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800874e:	4b53      	ldr	r3, [pc, #332]	; (800889c <HAL_RCC_GetSysClockFreq+0x188>)
 8008750:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008752:	e098      	b.n	8008886 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008754:	4b4f      	ldr	r3, [pc, #316]	; (8008894 <HAL_RCC_GetSysClockFreq+0x180>)
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800875c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800875e:	4b4d      	ldr	r3, [pc, #308]	; (8008894 <HAL_RCC_GetSysClockFreq+0x180>)
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008766:	2b00      	cmp	r3, #0
 8008768:	d028      	beq.n	80087bc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800876a:	4b4a      	ldr	r3, [pc, #296]	; (8008894 <HAL_RCC_GetSysClockFreq+0x180>)
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	099b      	lsrs	r3, r3, #6
 8008770:	2200      	movs	r2, #0
 8008772:	623b      	str	r3, [r7, #32]
 8008774:	627a      	str	r2, [r7, #36]	; 0x24
 8008776:	6a3b      	ldr	r3, [r7, #32]
 8008778:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800877c:	2100      	movs	r1, #0
 800877e:	4b47      	ldr	r3, [pc, #284]	; (800889c <HAL_RCC_GetSysClockFreq+0x188>)
 8008780:	fb03 f201 	mul.w	r2, r3, r1
 8008784:	2300      	movs	r3, #0
 8008786:	fb00 f303 	mul.w	r3, r0, r3
 800878a:	4413      	add	r3, r2
 800878c:	4a43      	ldr	r2, [pc, #268]	; (800889c <HAL_RCC_GetSysClockFreq+0x188>)
 800878e:	fba0 1202 	umull	r1, r2, r0, r2
 8008792:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008794:	460a      	mov	r2, r1
 8008796:	62ba      	str	r2, [r7, #40]	; 0x28
 8008798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800879a:	4413      	add	r3, r2
 800879c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800879e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087a0:	2200      	movs	r2, #0
 80087a2:	61bb      	str	r3, [r7, #24]
 80087a4:	61fa      	str	r2, [r7, #28]
 80087a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80087aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80087ae:	f7f7 fd9f 	bl	80002f0 <__aeabi_uldivmod>
 80087b2:	4602      	mov	r2, r0
 80087b4:	460b      	mov	r3, r1
 80087b6:	4613      	mov	r3, r2
 80087b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087ba:	e053      	b.n	8008864 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80087bc:	4b35      	ldr	r3, [pc, #212]	; (8008894 <HAL_RCC_GetSysClockFreq+0x180>)
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	099b      	lsrs	r3, r3, #6
 80087c2:	2200      	movs	r2, #0
 80087c4:	613b      	str	r3, [r7, #16]
 80087c6:	617a      	str	r2, [r7, #20]
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80087ce:	f04f 0b00 	mov.w	fp, #0
 80087d2:	4652      	mov	r2, sl
 80087d4:	465b      	mov	r3, fp
 80087d6:	f04f 0000 	mov.w	r0, #0
 80087da:	f04f 0100 	mov.w	r1, #0
 80087de:	0159      	lsls	r1, r3, #5
 80087e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80087e4:	0150      	lsls	r0, r2, #5
 80087e6:	4602      	mov	r2, r0
 80087e8:	460b      	mov	r3, r1
 80087ea:	ebb2 080a 	subs.w	r8, r2, sl
 80087ee:	eb63 090b 	sbc.w	r9, r3, fp
 80087f2:	f04f 0200 	mov.w	r2, #0
 80087f6:	f04f 0300 	mov.w	r3, #0
 80087fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80087fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008802:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008806:	ebb2 0408 	subs.w	r4, r2, r8
 800880a:	eb63 0509 	sbc.w	r5, r3, r9
 800880e:	f04f 0200 	mov.w	r2, #0
 8008812:	f04f 0300 	mov.w	r3, #0
 8008816:	00eb      	lsls	r3, r5, #3
 8008818:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800881c:	00e2      	lsls	r2, r4, #3
 800881e:	4614      	mov	r4, r2
 8008820:	461d      	mov	r5, r3
 8008822:	eb14 030a 	adds.w	r3, r4, sl
 8008826:	603b      	str	r3, [r7, #0]
 8008828:	eb45 030b 	adc.w	r3, r5, fp
 800882c:	607b      	str	r3, [r7, #4]
 800882e:	f04f 0200 	mov.w	r2, #0
 8008832:	f04f 0300 	mov.w	r3, #0
 8008836:	e9d7 4500 	ldrd	r4, r5, [r7]
 800883a:	4629      	mov	r1, r5
 800883c:	028b      	lsls	r3, r1, #10
 800883e:	4621      	mov	r1, r4
 8008840:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008844:	4621      	mov	r1, r4
 8008846:	028a      	lsls	r2, r1, #10
 8008848:	4610      	mov	r0, r2
 800884a:	4619      	mov	r1, r3
 800884c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800884e:	2200      	movs	r2, #0
 8008850:	60bb      	str	r3, [r7, #8]
 8008852:	60fa      	str	r2, [r7, #12]
 8008854:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008858:	f7f7 fd4a 	bl	80002f0 <__aeabi_uldivmod>
 800885c:	4602      	mov	r2, r0
 800885e:	460b      	mov	r3, r1
 8008860:	4613      	mov	r3, r2
 8008862:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008864:	4b0b      	ldr	r3, [pc, #44]	; (8008894 <HAL_RCC_GetSysClockFreq+0x180>)
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	0c1b      	lsrs	r3, r3, #16
 800886a:	f003 0303 	and.w	r3, r3, #3
 800886e:	3301      	adds	r3, #1
 8008870:	005b      	lsls	r3, r3, #1
 8008872:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8008874:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008878:	fbb2 f3f3 	udiv	r3, r2, r3
 800887c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800887e:	e002      	b.n	8008886 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008880:	4b05      	ldr	r3, [pc, #20]	; (8008898 <HAL_RCC_GetSysClockFreq+0x184>)
 8008882:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008884:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008888:	4618      	mov	r0, r3
 800888a:	3740      	adds	r7, #64	; 0x40
 800888c:	46bd      	mov	sp, r7
 800888e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008892:	bf00      	nop
 8008894:	40023800 	.word	0x40023800
 8008898:	00f42400 	.word	0x00f42400
 800889c:	017d7840 	.word	0x017d7840

080088a0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80088a0:	b480      	push	{r7}
 80088a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80088a4:	4b03      	ldr	r3, [pc, #12]	; (80088b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80088a6:	681b      	ldr	r3, [r3, #0]
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr
 80088b2:	bf00      	nop
 80088b4:	200003fc 	.word	0x200003fc

080088b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80088bc:	f7ff fff0 	bl	80088a0 <HAL_RCC_GetHCLKFreq>
 80088c0:	4602      	mov	r2, r0
 80088c2:	4b05      	ldr	r3, [pc, #20]	; (80088d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	0a9b      	lsrs	r3, r3, #10
 80088c8:	f003 0307 	and.w	r3, r3, #7
 80088cc:	4903      	ldr	r1, [pc, #12]	; (80088dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80088ce:	5ccb      	ldrb	r3, [r1, r3]
 80088d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	bd80      	pop	{r7, pc}
 80088d8:	40023800 	.word	0x40023800
 80088dc:	080176c4 	.word	0x080176c4

080088e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80088e4:	f7ff ffdc 	bl	80088a0 <HAL_RCC_GetHCLKFreq>
 80088e8:	4602      	mov	r2, r0
 80088ea:	4b05      	ldr	r3, [pc, #20]	; (8008900 <HAL_RCC_GetPCLK2Freq+0x20>)
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	0b5b      	lsrs	r3, r3, #13
 80088f0:	f003 0307 	and.w	r3, r3, #7
 80088f4:	4903      	ldr	r1, [pc, #12]	; (8008904 <HAL_RCC_GetPCLK2Freq+0x24>)
 80088f6:	5ccb      	ldrb	r3, [r1, r3]
 80088f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	bd80      	pop	{r7, pc}
 8008900:	40023800 	.word	0x40023800
 8008904:	080176c4 	.word	0x080176c4

08008908 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b088      	sub	sp, #32
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008910:	2300      	movs	r3, #0
 8008912:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008914:	2300      	movs	r3, #0
 8008916:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008918:	2300      	movs	r3, #0
 800891a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800891c:	2300      	movs	r3, #0
 800891e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008920:	2300      	movs	r3, #0
 8008922:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f003 0301 	and.w	r3, r3, #1
 800892c:	2b00      	cmp	r3, #0
 800892e:	d012      	beq.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008930:	4b69      	ldr	r3, [pc, #420]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	4a68      	ldr	r2, [pc, #416]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008936:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800893a:	6093      	str	r3, [r2, #8]
 800893c:	4b66      	ldr	r3, [pc, #408]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800893e:	689a      	ldr	r2, [r3, #8]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008944:	4964      	ldr	r1, [pc, #400]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008946:	4313      	orrs	r3, r2
 8008948:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800894e:	2b00      	cmp	r3, #0
 8008950:	d101      	bne.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008952:	2301      	movs	r3, #1
 8008954:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800895e:	2b00      	cmp	r3, #0
 8008960:	d017      	beq.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008962:	4b5d      	ldr	r3, [pc, #372]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008964:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008968:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008970:	4959      	ldr	r1, [pc, #356]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008972:	4313      	orrs	r3, r2
 8008974:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800897c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008980:	d101      	bne.n	8008986 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008982:	2301      	movs	r3, #1
 8008984:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800898a:	2b00      	cmp	r3, #0
 800898c:	d101      	bne.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800898e:	2301      	movs	r3, #1
 8008990:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800899a:	2b00      	cmp	r3, #0
 800899c:	d017      	beq.n	80089ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800899e:	4b4e      	ldr	r3, [pc, #312]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80089a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ac:	494a      	ldr	r1, [pc, #296]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80089ae:	4313      	orrs	r3, r2
 80089b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80089bc:	d101      	bne.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80089be:	2301      	movs	r3, #1
 80089c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d101      	bne.n	80089ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80089ca:	2301      	movs	r3, #1
 80089cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d001      	beq.n	80089de <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80089da:	2301      	movs	r3, #1
 80089dc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f003 0320 	and.w	r3, r3, #32
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	f000 808b 	beq.w	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80089ec:	4b3a      	ldr	r3, [pc, #232]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80089ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f0:	4a39      	ldr	r2, [pc, #228]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80089f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089f6:	6413      	str	r3, [r2, #64]	; 0x40
 80089f8:	4b37      	ldr	r3, [pc, #220]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80089fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a00:	60bb      	str	r3, [r7, #8]
 8008a02:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008a04:	4b35      	ldr	r3, [pc, #212]	; (8008adc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a34      	ldr	r2, [pc, #208]	; (8008adc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a10:	f7fc fda2 	bl	8005558 <HAL_GetTick>
 8008a14:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008a16:	e008      	b.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a18:	f7fc fd9e 	bl	8005558 <HAL_GetTick>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	1ad3      	subs	r3, r2, r3
 8008a22:	2b64      	cmp	r3, #100	; 0x64
 8008a24:	d901      	bls.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008a26:	2303      	movs	r3, #3
 8008a28:	e38f      	b.n	800914a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008a2a:	4b2c      	ldr	r3, [pc, #176]	; (8008adc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d0f0      	beq.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008a36:	4b28      	ldr	r3, [pc, #160]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a3e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d035      	beq.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a4e:	693a      	ldr	r2, [r7, #16]
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d02e      	beq.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008a54:	4b20      	ldr	r3, [pc, #128]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a5c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008a5e:	4b1e      	ldr	r3, [pc, #120]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a62:	4a1d      	ldr	r2, [pc, #116]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a68:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008a6a:	4b1b      	ldr	r3, [pc, #108]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a6e:	4a1a      	ldr	r2, [pc, #104]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a74:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008a76:	4a18      	ldr	r2, [pc, #96]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008a7c:	4b16      	ldr	r3, [pc, #88]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a80:	f003 0301 	and.w	r3, r3, #1
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d114      	bne.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a88:	f7fc fd66 	bl	8005558 <HAL_GetTick>
 8008a8c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a8e:	e00a      	b.n	8008aa6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a90:	f7fc fd62 	bl	8005558 <HAL_GetTick>
 8008a94:	4602      	mov	r2, r0
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	1ad3      	subs	r3, r2, r3
 8008a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d901      	bls.n	8008aa6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008aa2:	2303      	movs	r3, #3
 8008aa4:	e351      	b.n	800914a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008aa6:	4b0c      	ldr	r3, [pc, #48]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aaa:	f003 0302 	and.w	r3, r3, #2
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d0ee      	beq.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008aba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008abe:	d111      	bne.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008ac0:	4b05      	ldr	r3, [pc, #20]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008acc:	4b04      	ldr	r3, [pc, #16]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008ace:	400b      	ands	r3, r1
 8008ad0:	4901      	ldr	r1, [pc, #4]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	608b      	str	r3, [r1, #8]
 8008ad6:	e00b      	b.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008ad8:	40023800 	.word	0x40023800
 8008adc:	40007000 	.word	0x40007000
 8008ae0:	0ffffcff 	.word	0x0ffffcff
 8008ae4:	4bac      	ldr	r3, [pc, #688]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	4aab      	ldr	r2, [pc, #684]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008aea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008aee:	6093      	str	r3, [r2, #8]
 8008af0:	4ba9      	ldr	r3, [pc, #676]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008af2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008af8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008afc:	49a6      	ldr	r1, [pc, #664]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008afe:	4313      	orrs	r3, r2
 8008b00:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f003 0310 	and.w	r3, r3, #16
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d010      	beq.n	8008b30 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008b0e:	4ba2      	ldr	r3, [pc, #648]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008b10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b14:	4aa0      	ldr	r2, [pc, #640]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008b16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b1a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008b1e:	4b9e      	ldr	r3, [pc, #632]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008b20:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b28:	499b      	ldr	r1, [pc, #620]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d00a      	beq.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008b3c:	4b96      	ldr	r3, [pc, #600]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b42:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b4a:	4993      	ldr	r1, [pc, #588]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d00a      	beq.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008b5e:	4b8e      	ldr	r3, [pc, #568]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b6c:	498a      	ldr	r1, [pc, #552]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d00a      	beq.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008b80:	4b85      	ldr	r3, [pc, #532]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b8e:	4982      	ldr	r1, [pc, #520]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008b90:	4313      	orrs	r3, r2
 8008b92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d00a      	beq.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008ba2:	4b7d      	ldr	r3, [pc, #500]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ba8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bb0:	4979      	ldr	r1, [pc, #484]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d00a      	beq.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008bc4:	4b74      	ldr	r3, [pc, #464]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bca:	f023 0203 	bic.w	r2, r3, #3
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bd2:	4971      	ldr	r1, [pc, #452]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d00a      	beq.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008be6:	4b6c      	ldr	r3, [pc, #432]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bec:	f023 020c 	bic.w	r2, r3, #12
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bf4:	4968      	ldr	r1, [pc, #416]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d00a      	beq.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008c08:	4b63      	ldr	r3, [pc, #396]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c0e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c16:	4960      	ldr	r1, [pc, #384]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d00a      	beq.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008c2a:	4b5b      	ldr	r3, [pc, #364]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c30:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c38:	4957      	ldr	r1, [pc, #348]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d00a      	beq.n	8008c62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008c4c:	4b52      	ldr	r3, [pc, #328]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c5a:	494f      	ldr	r1, [pc, #316]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00a      	beq.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008c6e:	4b4a      	ldr	r3, [pc, #296]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c74:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c7c:	4946      	ldr	r1, [pc, #280]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d00a      	beq.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008c90:	4b41      	ldr	r3, [pc, #260]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c96:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c9e:	493e      	ldr	r1, [pc, #248]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d00a      	beq.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008cb2:	4b39      	ldr	r3, [pc, #228]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cb8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cc0:	4935      	ldr	r1, [pc, #212]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d00a      	beq.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008cd4:	4b30      	ldr	r3, [pc, #192]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cda:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ce2:	492d      	ldr	r1, [pc, #180]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d011      	beq.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008cf6:	4b28      	ldr	r3, [pc, #160]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cfc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d04:	4924      	ldr	r1, [pc, #144]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008d06:	4313      	orrs	r3, r2
 8008d08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d14:	d101      	bne.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008d16:	2301      	movs	r3, #1
 8008d18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f003 0308 	and.w	r3, r3, #8
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d001      	beq.n	8008d2a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008d26:	2301      	movs	r3, #1
 8008d28:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d00a      	beq.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008d36:	4b18      	ldr	r3, [pc, #96]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d3c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d44:	4914      	ldr	r1, [pc, #80]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008d46:	4313      	orrs	r3, r2
 8008d48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d00b      	beq.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008d58:	4b0f      	ldr	r3, [pc, #60]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d5e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d68:	490b      	ldr	r1, [pc, #44]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d00f      	beq.n	8008d9c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8008d7c:	4b06      	ldr	r3, [pc, #24]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d82:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d8c:	4902      	ldr	r1, [pc, #8]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008d94:	e002      	b.n	8008d9c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8008d96:	bf00      	nop
 8008d98:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d00b      	beq.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008da8:	4b8a      	ldr	r3, [pc, #552]	; (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008daa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008dae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008db8:	4986      	ldr	r1, [pc, #536]	; (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d00b      	beq.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8008dcc:	4b81      	ldr	r3, [pc, #516]	; (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008dce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008dd2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ddc:	497d      	ldr	r1, [pc, #500]	; (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008dde:	4313      	orrs	r3, r2
 8008de0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008de4:	69fb      	ldr	r3, [r7, #28]
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d006      	beq.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	f000 80d6 	beq.w	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008df8:	4b76      	ldr	r3, [pc, #472]	; (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a75      	ldr	r2, [pc, #468]	; (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008dfe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008e02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e04:	f7fc fba8 	bl	8005558 <HAL_GetTick>
 8008e08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008e0a:	e008      	b.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008e0c:	f7fc fba4 	bl	8005558 <HAL_GetTick>
 8008e10:	4602      	mov	r2, r0
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	1ad3      	subs	r3, r2, r3
 8008e16:	2b64      	cmp	r3, #100	; 0x64
 8008e18:	d901      	bls.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008e1a:	2303      	movs	r3, #3
 8008e1c:	e195      	b.n	800914a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008e1e:	4b6d      	ldr	r3, [pc, #436]	; (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d1f0      	bne.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f003 0301 	and.w	r3, r3, #1
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d021      	beq.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d11d      	bne.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008e3e:	4b65      	ldr	r3, [pc, #404]	; (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e44:	0c1b      	lsrs	r3, r3, #16
 8008e46:	f003 0303 	and.w	r3, r3, #3
 8008e4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008e4c:	4b61      	ldr	r3, [pc, #388]	; (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008e4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e52:	0e1b      	lsrs	r3, r3, #24
 8008e54:	f003 030f 	and.w	r3, r3, #15
 8008e58:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	019a      	lsls	r2, r3, #6
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	041b      	lsls	r3, r3, #16
 8008e64:	431a      	orrs	r2, r3
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	061b      	lsls	r3, r3, #24
 8008e6a:	431a      	orrs	r2, r3
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	689b      	ldr	r3, [r3, #8]
 8008e70:	071b      	lsls	r3, r3, #28
 8008e72:	4958      	ldr	r1, [pc, #352]	; (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008e74:	4313      	orrs	r3, r2
 8008e76:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d004      	beq.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e8e:	d00a      	beq.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d02e      	beq.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ea0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ea4:	d129      	bne.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008ea6:	4b4b      	ldr	r3, [pc, #300]	; (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008ea8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008eac:	0c1b      	lsrs	r3, r3, #16
 8008eae:	f003 0303 	and.w	r3, r3, #3
 8008eb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008eb4:	4b47      	ldr	r3, [pc, #284]	; (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008eb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008eba:	0f1b      	lsrs	r3, r3, #28
 8008ebc:	f003 0307 	and.w	r3, r3, #7
 8008ec0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	019a      	lsls	r2, r3, #6
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	041b      	lsls	r3, r3, #16
 8008ecc:	431a      	orrs	r2, r3
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	68db      	ldr	r3, [r3, #12]
 8008ed2:	061b      	lsls	r3, r3, #24
 8008ed4:	431a      	orrs	r2, r3
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	071b      	lsls	r3, r3, #28
 8008eda:	493e      	ldr	r1, [pc, #248]	; (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008edc:	4313      	orrs	r3, r2
 8008ede:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008ee2:	4b3c      	ldr	r3, [pc, #240]	; (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008ee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ee8:	f023 021f 	bic.w	r2, r3, #31
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef0:	3b01      	subs	r3, #1
 8008ef2:	4938      	ldr	r1, [pc, #224]	; (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d01d      	beq.n	8008f42 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008f06:	4b33      	ldr	r3, [pc, #204]	; (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008f08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f0c:	0e1b      	lsrs	r3, r3, #24
 8008f0e:	f003 030f 	and.w	r3, r3, #15
 8008f12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008f14:	4b2f      	ldr	r3, [pc, #188]	; (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008f16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f1a:	0f1b      	lsrs	r3, r3, #28
 8008f1c:	f003 0307 	and.w	r3, r3, #7
 8008f20:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	019a      	lsls	r2, r3, #6
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	691b      	ldr	r3, [r3, #16]
 8008f2c:	041b      	lsls	r3, r3, #16
 8008f2e:	431a      	orrs	r2, r3
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	061b      	lsls	r3, r3, #24
 8008f34:	431a      	orrs	r2, r3
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	071b      	lsls	r3, r3, #28
 8008f3a:	4926      	ldr	r1, [pc, #152]	; (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d011      	beq.n	8008f72 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	019a      	lsls	r2, r3, #6
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	691b      	ldr	r3, [r3, #16]
 8008f58:	041b      	lsls	r3, r3, #16
 8008f5a:	431a      	orrs	r2, r3
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	061b      	lsls	r3, r3, #24
 8008f62:	431a      	orrs	r2, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	071b      	lsls	r3, r3, #28
 8008f6a:	491a      	ldr	r1, [pc, #104]	; (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008f72:	4b18      	ldr	r3, [pc, #96]	; (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a17      	ldr	r2, [pc, #92]	; (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008f78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008f7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f7e:	f7fc faeb 	bl	8005558 <HAL_GetTick>
 8008f82:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008f84:	e008      	b.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008f86:	f7fc fae7 	bl	8005558 <HAL_GetTick>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	1ad3      	subs	r3, r2, r3
 8008f90:	2b64      	cmp	r3, #100	; 0x64
 8008f92:	d901      	bls.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008f94:	2303      	movs	r3, #3
 8008f96:	e0d8      	b.n	800914a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008f98:	4b0e      	ldr	r3, [pc, #56]	; (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d0f0      	beq.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008fa4:	69bb      	ldr	r3, [r7, #24]
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	f040 80ce 	bne.w	8009148 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008fac:	4b09      	ldr	r3, [pc, #36]	; (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a08      	ldr	r2, [pc, #32]	; (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008fb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008fb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fb8:	f7fc face 	bl	8005558 <HAL_GetTick>
 8008fbc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008fbe:	e00b      	b.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008fc0:	f7fc faca 	bl	8005558 <HAL_GetTick>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	1ad3      	subs	r3, r2, r3
 8008fca:	2b64      	cmp	r3, #100	; 0x64
 8008fcc:	d904      	bls.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008fce:	2303      	movs	r3, #3
 8008fd0:	e0bb      	b.n	800914a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8008fd2:	bf00      	nop
 8008fd4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008fd8:	4b5e      	ldr	r3, [pc, #376]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008fe0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fe4:	d0ec      	beq.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d003      	beq.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d009      	beq.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009002:	2b00      	cmp	r3, #0
 8009004:	d02e      	beq.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800900a:	2b00      	cmp	r3, #0
 800900c:	d12a      	bne.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800900e:	4b51      	ldr	r3, [pc, #324]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009014:	0c1b      	lsrs	r3, r3, #16
 8009016:	f003 0303 	and.w	r3, r3, #3
 800901a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800901c:	4b4d      	ldr	r3, [pc, #308]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800901e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009022:	0f1b      	lsrs	r3, r3, #28
 8009024:	f003 0307 	and.w	r3, r3, #7
 8009028:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	695b      	ldr	r3, [r3, #20]
 800902e:	019a      	lsls	r2, r3, #6
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	041b      	lsls	r3, r3, #16
 8009034:	431a      	orrs	r2, r3
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	699b      	ldr	r3, [r3, #24]
 800903a:	061b      	lsls	r3, r3, #24
 800903c:	431a      	orrs	r2, r3
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	071b      	lsls	r3, r3, #28
 8009042:	4944      	ldr	r1, [pc, #272]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009044:	4313      	orrs	r3, r2
 8009046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800904a:	4b42      	ldr	r3, [pc, #264]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800904c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009050:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009058:	3b01      	subs	r3, #1
 800905a:	021b      	lsls	r3, r3, #8
 800905c:	493d      	ldr	r1, [pc, #244]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800905e:	4313      	orrs	r3, r2
 8009060:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800906c:	2b00      	cmp	r3, #0
 800906e:	d022      	beq.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009074:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009078:	d11d      	bne.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800907a:	4b36      	ldr	r3, [pc, #216]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800907c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009080:	0e1b      	lsrs	r3, r3, #24
 8009082:	f003 030f 	and.w	r3, r3, #15
 8009086:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009088:	4b32      	ldr	r3, [pc, #200]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800908a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800908e:	0f1b      	lsrs	r3, r3, #28
 8009090:	f003 0307 	and.w	r3, r3, #7
 8009094:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	695b      	ldr	r3, [r3, #20]
 800909a:	019a      	lsls	r2, r3, #6
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6a1b      	ldr	r3, [r3, #32]
 80090a0:	041b      	lsls	r3, r3, #16
 80090a2:	431a      	orrs	r2, r3
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	061b      	lsls	r3, r3, #24
 80090a8:	431a      	orrs	r2, r3
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	071b      	lsls	r3, r3, #28
 80090ae:	4929      	ldr	r1, [pc, #164]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80090b0:	4313      	orrs	r3, r2
 80090b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f003 0308 	and.w	r3, r3, #8
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d028      	beq.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80090c2:	4b24      	ldr	r3, [pc, #144]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80090c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090c8:	0e1b      	lsrs	r3, r3, #24
 80090ca:	f003 030f 	and.w	r3, r3, #15
 80090ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80090d0:	4b20      	ldr	r3, [pc, #128]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80090d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090d6:	0c1b      	lsrs	r3, r3, #16
 80090d8:	f003 0303 	and.w	r3, r3, #3
 80090dc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	695b      	ldr	r3, [r3, #20]
 80090e2:	019a      	lsls	r2, r3, #6
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	041b      	lsls	r3, r3, #16
 80090e8:	431a      	orrs	r2, r3
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	061b      	lsls	r3, r3, #24
 80090ee:	431a      	orrs	r2, r3
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	69db      	ldr	r3, [r3, #28]
 80090f4:	071b      	lsls	r3, r3, #28
 80090f6:	4917      	ldr	r1, [pc, #92]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80090f8:	4313      	orrs	r3, r2
 80090fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80090fe:	4b15      	ldr	r3, [pc, #84]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009100:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009104:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800910c:	4911      	ldr	r1, [pc, #68]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800910e:	4313      	orrs	r3, r2
 8009110:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009114:	4b0f      	ldr	r3, [pc, #60]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a0e      	ldr	r2, [pc, #56]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800911a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800911e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009120:	f7fc fa1a 	bl	8005558 <HAL_GetTick>
 8009124:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009126:	e008      	b.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009128:	f7fc fa16 	bl	8005558 <HAL_GetTick>
 800912c:	4602      	mov	r2, r0
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	1ad3      	subs	r3, r2, r3
 8009132:	2b64      	cmp	r3, #100	; 0x64
 8009134:	d901      	bls.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009136:	2303      	movs	r3, #3
 8009138:	e007      	b.n	800914a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800913a:	4b06      	ldr	r3, [pc, #24]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009142:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009146:	d1ef      	bne.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8009148:	2300      	movs	r3, #0
}
 800914a:	4618      	mov	r0, r3
 800914c:	3720      	adds	r7, #32
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	40023800 	.word	0x40023800

08009158 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d101      	bne.n	800916a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8009166:	2301      	movs	r3, #1
 8009168:	e081      	b.n	800926e <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	7f5b      	ldrb	r3, [r3, #29]
 800916e:	b2db      	uxtb	r3, r3
 8009170:	2b00      	cmp	r3, #0
 8009172:	d105      	bne.n	8009180 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2200      	movs	r2, #0
 8009178:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f7fb f952 	bl	8004424 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2202      	movs	r2, #2
 8009184:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	22ca      	movs	r2, #202	; 0xca
 800918c:	625a      	str	r2, [r3, #36]	; 0x24
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2253      	movs	r2, #83	; 0x53
 8009194:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 faac 	bl	80096f4 <RTC_EnterInitMode>
 800919c:	4603      	mov	r3, r0
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d008      	beq.n	80091b4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	22ff      	movs	r2, #255	; 0xff
 80091a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2204      	movs	r2, #4
 80091ae:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80091b0:	2301      	movs	r3, #1
 80091b2:	e05c      	b.n	800926e <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	6899      	ldr	r1, [r3, #8]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681a      	ldr	r2, [r3, #0]
 80091be:	4b2e      	ldr	r3, [pc, #184]	; (8009278 <HAL_RTC_Init+0x120>)
 80091c0:	400b      	ands	r3, r1
 80091c2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	6899      	ldr	r1, [r3, #8]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	685a      	ldr	r2, [r3, #4]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	691b      	ldr	r3, [r3, #16]
 80091d2:	431a      	orrs	r2, r3
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	695b      	ldr	r3, [r3, #20]
 80091d8:	431a      	orrs	r2, r3
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	430a      	orrs	r2, r1
 80091e0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	687a      	ldr	r2, [r7, #4]
 80091e8:	68d2      	ldr	r2, [r2, #12]
 80091ea:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	6919      	ldr	r1, [r3, #16]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	689b      	ldr	r3, [r3, #8]
 80091f6:	041a      	lsls	r2, r3, #16
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	430a      	orrs	r2, r1
 80091fe:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	68da      	ldr	r2, [r3, #12]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800920e:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	f003 0320 	and.w	r3, r3, #32
 800921a:	2b00      	cmp	r3, #0
 800921c:	d10e      	bne.n	800923c <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 fa40 	bl	80096a4 <HAL_RTC_WaitForSynchro>
 8009224:	4603      	mov	r3, r0
 8009226:	2b00      	cmp	r3, #0
 8009228:	d008      	beq.n	800923c <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	22ff      	movs	r2, #255	; 0xff
 8009230:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2204      	movs	r2, #4
 8009236:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8009238:	2301      	movs	r3, #1
 800923a:	e018      	b.n	800926e <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f022 0208 	bic.w	r2, r2, #8
 800924a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	699a      	ldr	r2, [r3, #24]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	430a      	orrs	r2, r1
 800925c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	22ff      	movs	r2, #255	; 0xff
 8009264:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2201      	movs	r2, #1
 800926a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800926c:	2300      	movs	r3, #0
  }
}
 800926e:	4618      	mov	r0, r3
 8009270:	3708      	adds	r7, #8
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
 8009276:	bf00      	nop
 8009278:	ff8fffbf 	.word	0xff8fffbf

0800927c <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800927c:	b590      	push	{r4, r7, lr}
 800927e:	b087      	sub	sp, #28
 8009280:	af00      	add	r7, sp, #0
 8009282:	60f8      	str	r0, [r7, #12]
 8009284:	60b9      	str	r1, [r7, #8]
 8009286:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8009288:	2300      	movs	r3, #0
 800928a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	7f1b      	ldrb	r3, [r3, #28]
 8009290:	2b01      	cmp	r3, #1
 8009292:	d101      	bne.n	8009298 <HAL_RTC_SetTime+0x1c>
 8009294:	2302      	movs	r3, #2
 8009296:	e0a8      	b.n	80093ea <HAL_RTC_SetTime+0x16e>
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2201      	movs	r2, #1
 800929c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2202      	movs	r2, #2
 80092a2:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d126      	bne.n	80092f8 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	689b      	ldr	r3, [r3, #8]
 80092b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d102      	bne.n	80092be <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	2200      	movs	r2, #0
 80092bc:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	781b      	ldrb	r3, [r3, #0]
 80092c2:	4618      	mov	r0, r3
 80092c4:	f000 fa42 	bl	800974c <RTC_ByteToBcd2>
 80092c8:	4603      	mov	r3, r0
 80092ca:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	785b      	ldrb	r3, [r3, #1]
 80092d0:	4618      	mov	r0, r3
 80092d2:	f000 fa3b 	bl	800974c <RTC_ByteToBcd2>
 80092d6:	4603      	mov	r3, r0
 80092d8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80092da:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	789b      	ldrb	r3, [r3, #2]
 80092e0:	4618      	mov	r0, r3
 80092e2:	f000 fa33 	bl	800974c <RTC_ByteToBcd2>
 80092e6:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80092e8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	7b1b      	ldrb	r3, [r3, #12]
 80092f0:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80092f2:	4313      	orrs	r3, r2
 80092f4:	617b      	str	r3, [r7, #20]
 80092f6:	e018      	b.n	800932a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009302:	2b00      	cmp	r3, #0
 8009304:	d102      	bne.n	800930c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	2200      	movs	r2, #0
 800930a:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	781b      	ldrb	r3, [r3, #0]
 8009310:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	785b      	ldrb	r3, [r3, #1]
 8009316:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009318:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800931a:	68ba      	ldr	r2, [r7, #8]
 800931c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800931e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	7b1b      	ldrb	r3, [r3, #12]
 8009324:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009326:	4313      	orrs	r3, r2
 8009328:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	22ca      	movs	r2, #202	; 0xca
 8009330:	625a      	str	r2, [r3, #36]	; 0x24
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	2253      	movs	r2, #83	; 0x53
 8009338:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800933a:	68f8      	ldr	r0, [r7, #12]
 800933c:	f000 f9da 	bl	80096f4 <RTC_EnterInitMode>
 8009340:	4603      	mov	r3, r0
 8009342:	2b00      	cmp	r3, #0
 8009344:	d00b      	beq.n	800935e <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	22ff      	movs	r2, #255	; 0xff
 800934c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2204      	movs	r2, #4
 8009352:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2200      	movs	r2, #0
 8009358:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800935a:	2301      	movs	r3, #1
 800935c:	e045      	b.n	80093ea <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681a      	ldr	r2, [r3, #0]
 8009362:	6979      	ldr	r1, [r7, #20]
 8009364:	4b23      	ldr	r3, [pc, #140]	; (80093f4 <HAL_RTC_SetTime+0x178>)
 8009366:	400b      	ands	r3, r1
 8009368:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	689a      	ldr	r2, [r3, #8]
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009378:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	6899      	ldr	r1, [r3, #8]
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	691a      	ldr	r2, [r3, #16]
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	695b      	ldr	r3, [r3, #20]
 8009388:	431a      	orrs	r2, r3
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	430a      	orrs	r2, r1
 8009390:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	68da      	ldr	r2, [r3, #12]
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80093a0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	689b      	ldr	r3, [r3, #8]
 80093a8:	f003 0320 	and.w	r3, r3, #32
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d111      	bne.n	80093d4 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80093b0:	68f8      	ldr	r0, [r7, #12]
 80093b2:	f000 f977 	bl	80096a4 <HAL_RTC_WaitForSynchro>
 80093b6:	4603      	mov	r3, r0
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d00b      	beq.n	80093d4 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	22ff      	movs	r2, #255	; 0xff
 80093c2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2204      	movs	r2, #4
 80093c8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2200      	movs	r2, #0
 80093ce:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80093d0:	2301      	movs	r3, #1
 80093d2:	e00a      	b.n	80093ea <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	22ff      	movs	r2, #255	; 0xff
 80093da:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2201      	movs	r2, #1
 80093e0:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2200      	movs	r2, #0
 80093e6:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80093e8:	2300      	movs	r3, #0
  }
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	371c      	adds	r7, #28
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd90      	pop	{r4, r7, pc}
 80093f2:	bf00      	nop
 80093f4:	007f7f7f 	.word	0x007f7f7f

080093f8 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b086      	sub	sp, #24
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	60f8      	str	r0, [r7, #12]
 8009400:	60b9      	str	r1, [r7, #8]
 8009402:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8009404:	2300      	movs	r3, #0
 8009406:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	691b      	ldr	r3, [r3, #16]
 8009418:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	681a      	ldr	r2, [r3, #0]
 8009426:	4b22      	ldr	r3, [pc, #136]	; (80094b0 <HAL_RTC_GetTime+0xb8>)
 8009428:	4013      	ands	r3, r2
 800942a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	0c1b      	lsrs	r3, r3, #16
 8009430:	b2db      	uxtb	r3, r3
 8009432:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009436:	b2da      	uxtb	r2, r3
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	0a1b      	lsrs	r3, r3, #8
 8009440:	b2db      	uxtb	r3, r3
 8009442:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009446:	b2da      	uxtb	r2, r3
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	b2db      	uxtb	r3, r3
 8009450:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009454:	b2da      	uxtb	r2, r3
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	0c1b      	lsrs	r3, r3, #16
 800945e:	b2db      	uxtb	r3, r3
 8009460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009464:	b2da      	uxtb	r2, r3
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	731a      	strb	r2, [r3, #12]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d11a      	bne.n	80094a6 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	4618      	mov	r0, r3
 8009476:	f000 f987 	bl	8009788 <RTC_Bcd2ToByte>
 800947a:	4603      	mov	r3, r0
 800947c:	461a      	mov	r2, r3
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	785b      	ldrb	r3, [r3, #1]
 8009486:	4618      	mov	r0, r3
 8009488:	f000 f97e 	bl	8009788 <RTC_Bcd2ToByte>
 800948c:	4603      	mov	r3, r0
 800948e:	461a      	mov	r2, r3
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	789b      	ldrb	r3, [r3, #2]
 8009498:	4618      	mov	r0, r3
 800949a:	f000 f975 	bl	8009788 <RTC_Bcd2ToByte>
 800949e:	4603      	mov	r3, r0
 80094a0:	461a      	mov	r2, r3
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80094a6:	2300      	movs	r3, #0
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3718      	adds	r7, #24
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}
 80094b0:	007f7f7f 	.word	0x007f7f7f

080094b4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80094b4:	b590      	push	{r4, r7, lr}
 80094b6:	b087      	sub	sp, #28
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	60f8      	str	r0, [r7, #12]
 80094bc:	60b9      	str	r1, [r7, #8]
 80094be:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80094c0:	2300      	movs	r3, #0
 80094c2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	7f1b      	ldrb	r3, [r3, #28]
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d101      	bne.n	80094d0 <HAL_RTC_SetDate+0x1c>
 80094cc:	2302      	movs	r3, #2
 80094ce:	e092      	b.n	80095f6 <HAL_RTC_SetDate+0x142>
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2201      	movs	r2, #1
 80094d4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2202      	movs	r2, #2
 80094da:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d10e      	bne.n	8009500 <HAL_RTC_SetDate+0x4c>
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	785b      	ldrb	r3, [r3, #1]
 80094e6:	f003 0310 	and.w	r3, r3, #16
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d008      	beq.n	8009500 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	785b      	ldrb	r3, [r3, #1]
 80094f2:	f023 0310 	bic.w	r3, r3, #16
 80094f6:	b2db      	uxtb	r3, r3
 80094f8:	330a      	adds	r3, #10
 80094fa:	b2da      	uxtb	r2, r3
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d11c      	bne.n	8009540 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	78db      	ldrb	r3, [r3, #3]
 800950a:	4618      	mov	r0, r3
 800950c:	f000 f91e 	bl	800974c <RTC_ByteToBcd2>
 8009510:	4603      	mov	r3, r0
 8009512:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	785b      	ldrb	r3, [r3, #1]
 8009518:	4618      	mov	r0, r3
 800951a:	f000 f917 	bl	800974c <RTC_ByteToBcd2>
 800951e:	4603      	mov	r3, r0
 8009520:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8009522:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	789b      	ldrb	r3, [r3, #2]
 8009528:	4618      	mov	r0, r3
 800952a:	f000 f90f 	bl	800974c <RTC_ByteToBcd2>
 800952e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8009530:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800953a:	4313      	orrs	r3, r2
 800953c:	617b      	str	r3, [r7, #20]
 800953e:	e00e      	b.n	800955e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	78db      	ldrb	r3, [r3, #3]
 8009544:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	785b      	ldrb	r3, [r3, #1]
 800954a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800954c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800954e:	68ba      	ldr	r2, [r7, #8]
 8009550:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8009552:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800955a:	4313      	orrs	r3, r2
 800955c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	22ca      	movs	r2, #202	; 0xca
 8009564:	625a      	str	r2, [r3, #36]	; 0x24
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	2253      	movs	r2, #83	; 0x53
 800956c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800956e:	68f8      	ldr	r0, [r7, #12]
 8009570:	f000 f8c0 	bl	80096f4 <RTC_EnterInitMode>
 8009574:	4603      	mov	r3, r0
 8009576:	2b00      	cmp	r3, #0
 8009578:	d00b      	beq.n	8009592 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	22ff      	movs	r2, #255	; 0xff
 8009580:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2204      	movs	r2, #4
 8009586:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2200      	movs	r2, #0
 800958c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800958e:	2301      	movs	r3, #1
 8009590:	e031      	b.n	80095f6 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681a      	ldr	r2, [r3, #0]
 8009596:	6979      	ldr	r1, [r7, #20]
 8009598:	4b19      	ldr	r3, [pc, #100]	; (8009600 <HAL_RTC_SetDate+0x14c>)
 800959a:	400b      	ands	r3, r1
 800959c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	68da      	ldr	r2, [r3, #12]
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80095ac:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	689b      	ldr	r3, [r3, #8]
 80095b4:	f003 0320 	and.w	r3, r3, #32
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d111      	bne.n	80095e0 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80095bc:	68f8      	ldr	r0, [r7, #12]
 80095be:	f000 f871 	bl	80096a4 <HAL_RTC_WaitForSynchro>
 80095c2:	4603      	mov	r3, r0
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d00b      	beq.n	80095e0 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	22ff      	movs	r2, #255	; 0xff
 80095ce:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	2204      	movs	r2, #4
 80095d4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2200      	movs	r2, #0
 80095da:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80095dc:	2301      	movs	r3, #1
 80095de:	e00a      	b.n	80095f6 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	22ff      	movs	r2, #255	; 0xff
 80095e6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2201      	movs	r2, #1
 80095ec:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2200      	movs	r2, #0
 80095f2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80095f4:	2300      	movs	r3, #0
  }
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	371c      	adds	r7, #28
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd90      	pop	{r4, r7, pc}
 80095fe:	bf00      	nop
 8009600:	00ffff3f 	.word	0x00ffff3f

08009604 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b086      	sub	sp, #24
 8009608:	af00      	add	r7, sp, #0
 800960a:	60f8      	str	r0, [r7, #12]
 800960c:	60b9      	str	r1, [r7, #8]
 800960e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8009610:	2300      	movs	r3, #0
 8009612:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	685a      	ldr	r2, [r3, #4]
 800961a:	4b21      	ldr	r3, [pc, #132]	; (80096a0 <HAL_RTC_GetDate+0x9c>)
 800961c:	4013      	ands	r3, r2
 800961e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	0c1b      	lsrs	r3, r3, #16
 8009624:	b2da      	uxtb	r2, r3
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	0a1b      	lsrs	r3, r3, #8
 800962e:	b2db      	uxtb	r3, r3
 8009630:	f003 031f 	and.w	r3, r3, #31
 8009634:	b2da      	uxtb	r2, r3
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	b2db      	uxtb	r3, r3
 800963e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009642:	b2da      	uxtb	r2, r3
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	0b5b      	lsrs	r3, r3, #13
 800964c:	b2db      	uxtb	r3, r3
 800964e:	f003 0307 	and.w	r3, r3, #7
 8009652:	b2da      	uxtb	r2, r3
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d11a      	bne.n	8009694 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	78db      	ldrb	r3, [r3, #3]
 8009662:	4618      	mov	r0, r3
 8009664:	f000 f890 	bl	8009788 <RTC_Bcd2ToByte>
 8009668:	4603      	mov	r3, r0
 800966a:	461a      	mov	r2, r3
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	785b      	ldrb	r3, [r3, #1]
 8009674:	4618      	mov	r0, r3
 8009676:	f000 f887 	bl	8009788 <RTC_Bcd2ToByte>
 800967a:	4603      	mov	r3, r0
 800967c:	461a      	mov	r2, r3
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	789b      	ldrb	r3, [r3, #2]
 8009686:	4618      	mov	r0, r3
 8009688:	f000 f87e 	bl	8009788 <RTC_Bcd2ToByte>
 800968c:	4603      	mov	r3, r0
 800968e:	461a      	mov	r2, r3
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009694:	2300      	movs	r3, #0
}
 8009696:	4618      	mov	r0, r3
 8009698:	3718      	adds	r7, #24
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
 800969e:	bf00      	nop
 80096a0:	00ffff3f 	.word	0x00ffff3f

080096a4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80096ac:	2300      	movs	r3, #0
 80096ae:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	68da      	ldr	r2, [r3, #12]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80096be:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80096c0:	f7fb ff4a 	bl	8005558 <HAL_GetTick>
 80096c4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80096c6:	e009      	b.n	80096dc <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80096c8:	f7fb ff46 	bl	8005558 <HAL_GetTick>
 80096cc:	4602      	mov	r2, r0
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	1ad3      	subs	r3, r2, r3
 80096d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80096d6:	d901      	bls.n	80096dc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80096d8:	2303      	movs	r3, #3
 80096da:	e007      	b.n	80096ec <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	68db      	ldr	r3, [r3, #12]
 80096e2:	f003 0320 	and.w	r3, r3, #32
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d0ee      	beq.n	80096c8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80096ea:	2300      	movs	r3, #0
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3710      	adds	r7, #16
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b084      	sub	sp, #16
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80096fc:	2300      	movs	r3, #0
 80096fe:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	68db      	ldr	r3, [r3, #12]
 8009706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800970a:	2b00      	cmp	r3, #0
 800970c:	d119      	bne.n	8009742 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f04f 32ff 	mov.w	r2, #4294967295
 8009716:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009718:	f7fb ff1e 	bl	8005558 <HAL_GetTick>
 800971c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800971e:	e009      	b.n	8009734 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009720:	f7fb ff1a 	bl	8005558 <HAL_GetTick>
 8009724:	4602      	mov	r2, r0
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	1ad3      	subs	r3, r2, r3
 800972a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800972e:	d901      	bls.n	8009734 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8009730:	2303      	movs	r3, #3
 8009732:	e007      	b.n	8009744 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	68db      	ldr	r3, [r3, #12]
 800973a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800973e:	2b00      	cmp	r3, #0
 8009740:	d0ee      	beq.n	8009720 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8009742:	2300      	movs	r3, #0
}
 8009744:	4618      	mov	r0, r3
 8009746:	3710      	adds	r7, #16
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800974c:	b480      	push	{r7}
 800974e:	b085      	sub	sp, #20
 8009750:	af00      	add	r7, sp, #0
 8009752:	4603      	mov	r3, r0
 8009754:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8009756:	2300      	movs	r3, #0
 8009758:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800975a:	e005      	b.n	8009768 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	3301      	adds	r3, #1
 8009760:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8009762:	79fb      	ldrb	r3, [r7, #7]
 8009764:	3b0a      	subs	r3, #10
 8009766:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8009768:	79fb      	ldrb	r3, [r7, #7]
 800976a:	2b09      	cmp	r3, #9
 800976c:	d8f6      	bhi.n	800975c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	b2db      	uxtb	r3, r3
 8009772:	011b      	lsls	r3, r3, #4
 8009774:	b2da      	uxtb	r2, r3
 8009776:	79fb      	ldrb	r3, [r7, #7]
 8009778:	4313      	orrs	r3, r2
 800977a:	b2db      	uxtb	r3, r3
}
 800977c:	4618      	mov	r0, r3
 800977e:	3714      	adds	r7, #20
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr

08009788 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009788:	b480      	push	{r7}
 800978a:	b085      	sub	sp, #20
 800978c:	af00      	add	r7, sp, #0
 800978e:	4603      	mov	r3, r0
 8009790:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8009792:	2300      	movs	r3, #0
 8009794:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8009796:	79fb      	ldrb	r3, [r7, #7]
 8009798:	091b      	lsrs	r3, r3, #4
 800979a:	b2db      	uxtb	r3, r3
 800979c:	461a      	mov	r2, r3
 800979e:	4613      	mov	r3, r2
 80097a0:	009b      	lsls	r3, r3, #2
 80097a2:	4413      	add	r3, r2
 80097a4:	005b      	lsls	r3, r3, #1
 80097a6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80097a8:	79fb      	ldrb	r3, [r7, #7]
 80097aa:	f003 030f 	and.w	r3, r3, #15
 80097ae:	b2da      	uxtb	r2, r3
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	4413      	add	r3, r2
 80097b6:	b2db      	uxtb	r3, r3
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3714      	adds	r7, #20
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr

080097c4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b082      	sub	sp, #8
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d101      	bne.n	80097d6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80097d2:	2301      	movs	r3, #1
 80097d4:	e022      	b.n	800981c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80097dc:	b2db      	uxtb	r3, r3
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d105      	bne.n	80097ee <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2200      	movs	r2, #0
 80097e6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f7fa fe55 	bl	8004498 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2203      	movs	r2, #3
 80097f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f000 f814 	bl	8009824 <HAL_SD_InitCard>
 80097fc:	4603      	mov	r3, r0
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d001      	beq.n	8009806 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009802:	2301      	movs	r3, #1
 8009804:	e00a      	b.n	800981c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2200      	movs	r2, #0
 800980a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2201      	movs	r2, #1
 8009816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800981a:	2300      	movs	r3, #0
}
 800981c:	4618      	mov	r0, r3
 800981e:	3708      	adds	r7, #8
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}

08009824 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009824:	b5b0      	push	{r4, r5, r7, lr}
 8009826:	b08e      	sub	sp, #56	; 0x38
 8009828:	af04      	add	r7, sp, #16
 800982a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800982c:	2300      	movs	r3, #0
 800982e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8009830:	2300      	movs	r3, #0
 8009832:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009834:	2300      	movs	r3, #0
 8009836:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009838:	2300      	movs	r3, #0
 800983a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800983c:	2300      	movs	r3, #0
 800983e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8009840:	2376      	movs	r3, #118	; 0x76
 8009842:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681d      	ldr	r5, [r3, #0]
 8009848:	466c      	mov	r4, sp
 800984a:	f107 0314 	add.w	r3, r7, #20
 800984e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009852:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009856:	f107 0308 	add.w	r3, r7, #8
 800985a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800985c:	4628      	mov	r0, r5
 800985e:	f003 ffe5 	bl	800d82c <SDMMC_Init>
 8009862:	4603      	mov	r3, r0
 8009864:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8009868:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800986c:	2b00      	cmp	r3, #0
 800986e:	d001      	beq.n	8009874 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8009870:	2301      	movs	r3, #1
 8009872:	e059      	b.n	8009928 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	685a      	ldr	r2, [r3, #4]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009882:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4618      	mov	r0, r3
 800988a:	f004 f819 	bl	800d8c0 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	685a      	ldr	r2, [r3, #4]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800989c:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800989e:	2002      	movs	r0, #2
 80098a0:	f7fb fe66 	bl	8005570 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f000 fff3 	bl	800a890 <SD_PowerON>
 80098aa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80098ac:	6a3b      	ldr	r3, [r7, #32]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d00b      	beq.n	80098ca <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2201      	movs	r2, #1
 80098b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098be:	6a3b      	ldr	r3, [r7, #32]
 80098c0:	431a      	orrs	r2, r3
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80098c6:	2301      	movs	r3, #1
 80098c8:	e02e      	b.n	8009928 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 ff12 	bl	800a6f4 <SD_InitCard>
 80098d0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80098d2:	6a3b      	ldr	r3, [r7, #32]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d00b      	beq.n	80098f0 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2201      	movs	r2, #1
 80098dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098e4:	6a3b      	ldr	r3, [r7, #32]
 80098e6:	431a      	orrs	r2, r3
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80098ec:	2301      	movs	r3, #1
 80098ee:	e01b      	b.n	8009928 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80098f8:	4618      	mov	r0, r3
 80098fa:	f004 f873 	bl	800d9e4 <SDMMC_CmdBlockLength>
 80098fe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009900:	6a3b      	ldr	r3, [r7, #32]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d00f      	beq.n	8009926 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a09      	ldr	r2, [pc, #36]	; (8009930 <HAL_SD_InitCard+0x10c>)
 800990c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009912:	6a3b      	ldr	r3, [r7, #32]
 8009914:	431a      	orrs	r2, r3
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2201      	movs	r2, #1
 800991e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009922:	2301      	movs	r3, #1
 8009924:	e000      	b.n	8009928 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8009926:	2300      	movs	r3, #0
}
 8009928:	4618      	mov	r0, r3
 800992a:	3728      	adds	r7, #40	; 0x28
 800992c:	46bd      	mov	sp, r7
 800992e:	bdb0      	pop	{r4, r5, r7, pc}
 8009930:	004005ff 	.word	0x004005ff

08009934 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b08c      	sub	sp, #48	; 0x30
 8009938:	af00      	add	r7, sp, #0
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	60b9      	str	r1, [r7, #8]
 800993e:	607a      	str	r2, [r7, #4]
 8009940:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d107      	bne.n	800995c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009950:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009958:	2301      	movs	r3, #1
 800995a:	e0c3      	b.n	8009ae4 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009962:	b2db      	uxtb	r3, r3
 8009964:	2b01      	cmp	r3, #1
 8009966:	f040 80bc 	bne.w	8009ae2 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2200      	movs	r2, #0
 800996e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009970:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	441a      	add	r2, r3
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800997a:	429a      	cmp	r2, r3
 800997c:	d907      	bls.n	800998e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009982:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800998a:	2301      	movs	r3, #1
 800998c:	e0aa      	b.n	8009ae4 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2203      	movs	r2, #3
 8009992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	2200      	movs	r2, #0
 800999c:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80099ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099b2:	4a4e      	ldr	r2, [pc, #312]	; (8009aec <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80099b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ba:	4a4d      	ldr	r2, [pc, #308]	; (8009af0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80099bc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099c2:	2200      	movs	r2, #0
 80099c4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ca:	2200      	movs	r2, #0
 80099cc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099de:	689a      	ldr	r2, [r3, #8]
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	430a      	orrs	r2, r1
 80099e8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	3380      	adds	r3, #128	; 0x80
 80099f4:	4619      	mov	r1, r3
 80099f6:	68ba      	ldr	r2, [r7, #8]
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	025b      	lsls	r3, r3, #9
 80099fc:	089b      	lsrs	r3, r3, #2
 80099fe:	f7fc fc63 	bl	80062c8 <HAL_DMA_Start_IT>
 8009a02:	4603      	mov	r3, r0
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d017      	beq.n	8009a38 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8009a16:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4a35      	ldr	r2, [pc, #212]	; (8009af4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8009a1e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a24:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2201      	movs	r2, #1
 8009a30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009a34:	2301      	movs	r3, #1
 8009a36:	e055      	b.n	8009ae4 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f042 0208 	orr.w	r2, r2, #8
 8009a46:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	d002      	beq.n	8009a56 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8009a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a52:	025b      	lsls	r3, r3, #9
 8009a54:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009a56:	f04f 33ff 	mov.w	r3, #4294967295
 8009a5a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	025b      	lsls	r3, r3, #9
 8009a60:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009a62:	2390      	movs	r3, #144	; 0x90
 8009a64:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009a66:	2302      	movs	r3, #2
 8009a68:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f107 0210 	add.w	r2, r7, #16
 8009a7a:	4611      	mov	r1, r2
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f003 ff85 	bl	800d98c <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	2b01      	cmp	r3, #1
 8009a86:	d90a      	bls.n	8009a9e <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2282      	movs	r2, #130	; 0x82
 8009a8c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a94:	4618      	mov	r0, r3
 8009a96:	f003 ffe9 	bl	800da6c <SDMMC_CmdReadMultiBlock>
 8009a9a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009a9c:	e009      	b.n	8009ab2 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2281      	movs	r2, #129	; 0x81
 8009aa2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f003 ffbc 	bl	800da28 <SDMMC_CmdReadSingleBlock>
 8009ab0:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8009ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d012      	beq.n	8009ade <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4a0d      	ldr	r2, [pc, #52]	; (8009af4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8009abe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac6:	431a      	orrs	r2, r3
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	2201      	movs	r2, #1
 8009ad0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8009ada:	2301      	movs	r3, #1
 8009adc:	e002      	b.n	8009ae4 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	e000      	b.n	8009ae4 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8009ae2:	2302      	movs	r3, #2
  }
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3730      	adds	r7, #48	; 0x30
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}
 8009aec:	0800a503 	.word	0x0800a503
 8009af0:	0800a575 	.word	0x0800a575
 8009af4:	004005ff 	.word	0x004005ff

08009af8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b08c      	sub	sp, #48	; 0x30
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	60f8      	str	r0, [r7, #12]
 8009b00:	60b9      	str	r1, [r7, #8]
 8009b02:	607a      	str	r2, [r7, #4]
 8009b04:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d107      	bne.n	8009b20 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b14:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	e0c6      	b.n	8009cae <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	f040 80bf 	bne.w	8009cac <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	2200      	movs	r2, #0
 8009b32:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009b34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	441a      	add	r2, r3
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d907      	bls.n	8009b52 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b46:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009b4e:	2301      	movs	r3, #1
 8009b50:	e0ad      	b.n	8009cae <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2203      	movs	r2, #3
 8009b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f042 021a 	orr.w	r2, r2, #26
 8009b70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b76:	4a50      	ldr	r2, [pc, #320]	; (8009cb8 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8009b78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b7e:	4a4f      	ldr	r2, [pc, #316]	; (8009cbc <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8009b80:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b86:	2200      	movs	r2, #0
 8009b88:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b8e:	2b01      	cmp	r3, #1
 8009b90:	d002      	beq.n	8009b98 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8009b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b94:	025b      	lsls	r3, r3, #9
 8009b96:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	d90a      	bls.n	8009bb4 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	22a0      	movs	r2, #160	; 0xa0
 8009ba2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009baa:	4618      	mov	r0, r3
 8009bac:	f003 ffa2 	bl	800daf4 <SDMMC_CmdWriteMultiBlock>
 8009bb0:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009bb2:	e009      	b.n	8009bc8 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2290      	movs	r2, #144	; 0x90
 8009bb8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f003 ff75 	bl	800dab0 <SDMMC_CmdWriteSingleBlock>
 8009bc6:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d012      	beq.n	8009bf4 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	4a3b      	ldr	r2, [pc, #236]	; (8009cc0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8009bd4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bdc:	431a      	orrs	r2, r3
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2201      	movs	r2, #1
 8009be6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2200      	movs	r2, #0
 8009bee:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	e05c      	b.n	8009cae <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f042 0208 	orr.w	r2, r2, #8
 8009c02:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c08:	2240      	movs	r2, #64	; 0x40
 8009c0a:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c1c:	689a      	ldr	r2, [r3, #8]
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	430a      	orrs	r2, r1
 8009c26:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009c2c:	68b9      	ldr	r1, [r7, #8]
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	3380      	adds	r3, #128	; 0x80
 8009c34:	461a      	mov	r2, r3
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	025b      	lsls	r3, r3, #9
 8009c3a:	089b      	lsrs	r3, r3, #2
 8009c3c:	f7fc fb44 	bl	80062c8 <HAL_DMA_Start_IT>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d01a      	beq.n	8009c7c <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f022 021a 	bic.w	r2, r2, #26
 8009c54:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4a19      	ldr	r2, [pc, #100]	; (8009cc0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8009c5c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c62:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	2200      	movs	r2, #0
 8009c76:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	e018      	b.n	8009cae <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8009c80:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	025b      	lsls	r3, r3, #9
 8009c86:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009c88:	2390      	movs	r3, #144	; 0x90
 8009c8a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009c90:	2300      	movs	r3, #0
 8009c92:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8009c94:	2301      	movs	r3, #1
 8009c96:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f107 0210 	add.w	r2, r7, #16
 8009ca0:	4611      	mov	r1, r2
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f003 fe72 	bl	800d98c <SDMMC_ConfigData>

      return HAL_OK;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	e000      	b.n	8009cae <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8009cac:	2302      	movs	r3, #2
  }
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3730      	adds	r7, #48	; 0x30
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	0800a4d9 	.word	0x0800a4d9
 8009cbc:	0800a575 	.word	0x0800a575
 8009cc0:	004005ff 	.word	0x004005ff

08009cc4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b084      	sub	sp, #16
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cd0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d008      	beq.n	8009cf2 <HAL_SD_IRQHandler+0x2e>
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	f003 0308 	and.w	r3, r3, #8
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d003      	beq.n	8009cf2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 ffef 	bl	800acce <SD_Read_IT>
 8009cf0:	e15a      	b.n	8009fa8 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	f000 808d 	beq.w	8009e1c <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d0a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	4b9a      	ldr	r3, [pc, #616]	; (8009f80 <HAL_SD_IRQHandler+0x2bc>)
 8009d18:	400b      	ands	r3, r1
 8009d1a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f022 0201 	bic.w	r2, r2, #1
 8009d2a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f003 0308 	and.w	r3, r3, #8
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d039      	beq.n	8009daa <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	f003 0302 	and.w	r3, r3, #2
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d104      	bne.n	8009d4a <HAL_SD_IRQHandler+0x86>
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f003 0320 	and.w	r3, r3, #32
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d011      	beq.n	8009d6e <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f003 fef2 	bl	800db38 <SDMMC_CmdStopTransfer>
 8009d54:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d008      	beq.n	8009d6e <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	431a      	orrs	r2, r3
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 f921 	bl	8009fb0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f240 523a 	movw	r2, #1338	; 0x53a
 8009d76:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2200      	movs	r2, #0
 8009d84:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	f003 0301 	and.w	r3, r3, #1
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d104      	bne.n	8009d9a <HAL_SD_IRQHandler+0xd6>
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	f003 0302 	and.w	r3, r3, #2
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d003      	beq.n	8009da2 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f004 fb62 	bl	800e464 <HAL_SD_RxCpltCallback>
 8009da0:	e102      	b.n	8009fa8 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f004 fb54 	bl	800e450 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009da8:	e0fe      	b.n	8009fa8 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	f000 80f9 	beq.w	8009fa8 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	f003 0320 	and.w	r3, r3, #32
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d011      	beq.n	8009de4 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f003 feb7 	bl	800db38 <SDMMC_CmdStopTransfer>
 8009dca:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d008      	beq.n	8009de4 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	431a      	orrs	r2, r3
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f000 f8e6 	bl	8009fb0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f003 0301 	and.w	r3, r3, #1
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	f040 80dc 	bne.w	8009fa8 <HAL_SD_IRQHandler+0x2e4>
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f003 0302 	and.w	r3, r3, #2
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	f040 80d6 	bne.w	8009fa8 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f022 0208 	bic.w	r2, r2, #8
 8009e0a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2201      	movs	r2, #1
 8009e10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f004 fb1b 	bl	800e450 <HAL_SD_TxCpltCallback>
}
 8009e1a:	e0c5      	b.n	8009fa8 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d008      	beq.n	8009e3c <HAL_SD_IRQHandler+0x178>
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	f003 0308 	and.w	r3, r3, #8
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d003      	beq.n	8009e3c <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f000 ff9b 	bl	800ad70 <SD_Write_IT>
 8009e3a:	e0b5      	b.n	8009fa8 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e42:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	f000 80ae 	beq.w	8009fa8 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e52:	f003 0302 	and.w	r3, r3, #2
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d005      	beq.n	8009e66 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e5e:	f043 0202 	orr.w	r2, r3, #2
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e6c:	f003 0308 	and.w	r3, r3, #8
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d005      	beq.n	8009e80 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e78:	f043 0208 	orr.w	r2, r3, #8
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e86:	f003 0320 	and.w	r3, r3, #32
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d005      	beq.n	8009e9a <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e92:	f043 0220 	orr.w	r2, r3, #32
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ea0:	f003 0310 	and.w	r3, r3, #16
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d005      	beq.n	8009eb4 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eac:	f043 0210 	orr.w	r2, r3, #16
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f240 523a 	movw	r2, #1338	; 0x53a
 8009ebc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009ecc:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f003 fe30 	bl	800db38 <SDMMC_CmdStopTransfer>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ede:	431a      	orrs	r2, r3
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f003 0308 	and.w	r3, r3, #8
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d00a      	beq.n	8009f04 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2201      	movs	r2, #1
 8009ef2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2200      	movs	r2, #0
 8009efa:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f000 f857 	bl	8009fb0 <HAL_SD_ErrorCallback>
}
 8009f02:	e051      	b.n	8009fa8 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d04c      	beq.n	8009fa8 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f003 0310 	and.w	r3, r3, #16
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d104      	bne.n	8009f22 <HAL_SD_IRQHandler+0x25e>
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	f003 0320 	and.w	r3, r3, #32
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d011      	beq.n	8009f46 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f26:	4a17      	ldr	r2, [pc, #92]	; (8009f84 <HAL_SD_IRQHandler+0x2c0>)
 8009f28:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f7fc fa9a 	bl	8006468 <HAL_DMA_Abort_IT>
 8009f34:	4603      	mov	r3, r0
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d036      	beq.n	8009fa8 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f000 fb6a 	bl	800a618 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8009f44:	e030      	b.n	8009fa8 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	f003 0301 	and.w	r3, r3, #1
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d104      	bne.n	8009f5a <HAL_SD_IRQHandler+0x296>
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f003 0302 	and.w	r3, r3, #2
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d018      	beq.n	8009f8c <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f5e:	4a0a      	ldr	r2, [pc, #40]	; (8009f88 <HAL_SD_IRQHandler+0x2c4>)
 8009f60:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f66:	4618      	mov	r0, r3
 8009f68:	f7fc fa7e 	bl	8006468 <HAL_DMA_Abort_IT>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d01a      	beq.n	8009fa8 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f76:	4618      	mov	r0, r3
 8009f78:	f000 fb85 	bl	800a686 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009f7c:	e014      	b.n	8009fa8 <HAL_SD_IRQHandler+0x2e4>
 8009f7e:	bf00      	nop
 8009f80:	ffff3ec5 	.word	0xffff3ec5
 8009f84:	0800a619 	.word	0x0800a619
 8009f88:	0800a687 	.word	0x0800a687
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2201      	movs	r2, #1
 8009f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f004 fa4b 	bl	800e43c <HAL_SD_AbortCallback>
}
 8009fa6:	e7ff      	b.n	8009fa8 <HAL_SD_IRQHandler+0x2e4>
 8009fa8:	bf00      	nop
 8009faa:	3710      	adds	r7, #16
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}

08009fb0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b083      	sub	sp, #12
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009fb8:	bf00      	nop
 8009fba:	370c      	adds	r7, #12
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr

08009fc4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b083      	sub	sp, #12
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009fd2:	0f9b      	lsrs	r3, r3, #30
 8009fd4:	b2da      	uxtb	r2, r3
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009fde:	0e9b      	lsrs	r3, r3, #26
 8009fe0:	b2db      	uxtb	r3, r3
 8009fe2:	f003 030f 	and.w	r3, r3, #15
 8009fe6:	b2da      	uxtb	r2, r3
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ff0:	0e1b      	lsrs	r3, r3, #24
 8009ff2:	b2db      	uxtb	r3, r3
 8009ff4:	f003 0303 	and.w	r3, r3, #3
 8009ff8:	b2da      	uxtb	r2, r3
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a002:	0c1b      	lsrs	r3, r3, #16
 800a004:	b2da      	uxtb	r2, r3
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a00e:	0a1b      	lsrs	r3, r3, #8
 800a010:	b2da      	uxtb	r2, r3
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a01a:	b2da      	uxtb	r2, r3
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a024:	0d1b      	lsrs	r3, r3, #20
 800a026:	b29a      	uxth	r2, r3
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a030:	0c1b      	lsrs	r3, r3, #16
 800a032:	b2db      	uxtb	r3, r3
 800a034:	f003 030f 	and.w	r3, r3, #15
 800a038:	b2da      	uxtb	r2, r3
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a042:	0bdb      	lsrs	r3, r3, #15
 800a044:	b2db      	uxtb	r3, r3
 800a046:	f003 0301 	and.w	r3, r3, #1
 800a04a:	b2da      	uxtb	r2, r3
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a054:	0b9b      	lsrs	r3, r3, #14
 800a056:	b2db      	uxtb	r3, r3
 800a058:	f003 0301 	and.w	r3, r3, #1
 800a05c:	b2da      	uxtb	r2, r3
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a066:	0b5b      	lsrs	r3, r3, #13
 800a068:	b2db      	uxtb	r3, r3
 800a06a:	f003 0301 	and.w	r3, r3, #1
 800a06e:	b2da      	uxtb	r2, r3
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a078:	0b1b      	lsrs	r3, r3, #12
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	f003 0301 	and.w	r3, r3, #1
 800a080:	b2da      	uxtb	r2, r3
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	2200      	movs	r2, #0
 800a08a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a090:	2b00      	cmp	r3, #0
 800a092:	d163      	bne.n	800a15c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a098:	009a      	lsls	r2, r3, #2
 800a09a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a09e:	4013      	ands	r3, r2
 800a0a0:	687a      	ldr	r2, [r7, #4]
 800a0a2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a0a4:	0f92      	lsrs	r2, r2, #30
 800a0a6:	431a      	orrs	r2, r3
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0b0:	0edb      	lsrs	r3, r3, #27
 800a0b2:	b2db      	uxtb	r3, r3
 800a0b4:	f003 0307 	and.w	r3, r3, #7
 800a0b8:	b2da      	uxtb	r2, r3
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0c2:	0e1b      	lsrs	r3, r3, #24
 800a0c4:	b2db      	uxtb	r3, r3
 800a0c6:	f003 0307 	and.w	r3, r3, #7
 800a0ca:	b2da      	uxtb	r2, r3
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0d4:	0d5b      	lsrs	r3, r3, #21
 800a0d6:	b2db      	uxtb	r3, r3
 800a0d8:	f003 0307 	and.w	r3, r3, #7
 800a0dc:	b2da      	uxtb	r2, r3
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0e6:	0c9b      	lsrs	r3, r3, #18
 800a0e8:	b2db      	uxtb	r3, r3
 800a0ea:	f003 0307 	and.w	r3, r3, #7
 800a0ee:	b2da      	uxtb	r2, r3
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0f8:	0bdb      	lsrs	r3, r3, #15
 800a0fa:	b2db      	uxtb	r3, r3
 800a0fc:	f003 0307 	and.w	r3, r3, #7
 800a100:	b2da      	uxtb	r2, r3
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	691b      	ldr	r3, [r3, #16]
 800a10a:	1c5a      	adds	r2, r3, #1
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	7e1b      	ldrb	r3, [r3, #24]
 800a114:	b2db      	uxtb	r3, r3
 800a116:	f003 0307 	and.w	r3, r3, #7
 800a11a:	3302      	adds	r3, #2
 800a11c:	2201      	movs	r2, #1
 800a11e:	fa02 f303 	lsl.w	r3, r2, r3
 800a122:	687a      	ldr	r2, [r7, #4]
 800a124:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a126:	fb03 f202 	mul.w	r2, r3, r2
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	7a1b      	ldrb	r3, [r3, #8]
 800a132:	b2db      	uxtb	r3, r3
 800a134:	f003 030f 	and.w	r3, r3, #15
 800a138:	2201      	movs	r2, #1
 800a13a:	409a      	lsls	r2, r3
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a144:	687a      	ldr	r2, [r7, #4]
 800a146:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800a148:	0a52      	lsrs	r2, r2, #9
 800a14a:	fb03 f202 	mul.w	r2, r3, r2
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a158:	661a      	str	r2, [r3, #96]	; 0x60
 800a15a:	e031      	b.n	800a1c0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a160:	2b01      	cmp	r3, #1
 800a162:	d11d      	bne.n	800a1a0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a168:	041b      	lsls	r3, r3, #16
 800a16a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a172:	0c1b      	lsrs	r3, r3, #16
 800a174:	431a      	orrs	r2, r3
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	691b      	ldr	r3, [r3, #16]
 800a17e:	3301      	adds	r3, #1
 800a180:	029a      	lsls	r2, r3, #10
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a194:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	661a      	str	r2, [r3, #96]	; 0x60
 800a19e:	e00f      	b.n	800a1c0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	4a58      	ldr	r2, [pc, #352]	; (800a308 <HAL_SD_GetCardCSD+0x344>)
 800a1a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2201      	movs	r2, #1
 800a1b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a1bc:	2301      	movs	r3, #1
 800a1be:	e09d      	b.n	800a2fc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1c4:	0b9b      	lsrs	r3, r3, #14
 800a1c6:	b2db      	uxtb	r3, r3
 800a1c8:	f003 0301 	and.w	r3, r3, #1
 800a1cc:	b2da      	uxtb	r2, r3
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1d6:	09db      	lsrs	r3, r3, #7
 800a1d8:	b2db      	uxtb	r3, r3
 800a1da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1de:	b2da      	uxtb	r2, r3
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1e8:	b2db      	uxtb	r3, r3
 800a1ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1ee:	b2da      	uxtb	r2, r3
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1f8:	0fdb      	lsrs	r3, r3, #31
 800a1fa:	b2da      	uxtb	r2, r3
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a204:	0f5b      	lsrs	r3, r3, #29
 800a206:	b2db      	uxtb	r3, r3
 800a208:	f003 0303 	and.w	r3, r3, #3
 800a20c:	b2da      	uxtb	r2, r3
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a216:	0e9b      	lsrs	r3, r3, #26
 800a218:	b2db      	uxtb	r3, r3
 800a21a:	f003 0307 	and.w	r3, r3, #7
 800a21e:	b2da      	uxtb	r2, r3
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a228:	0d9b      	lsrs	r3, r3, #22
 800a22a:	b2db      	uxtb	r3, r3
 800a22c:	f003 030f 	and.w	r3, r3, #15
 800a230:	b2da      	uxtb	r2, r3
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a23a:	0d5b      	lsrs	r3, r3, #21
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	f003 0301 	and.w	r3, r3, #1
 800a242:	b2da      	uxtb	r2, r3
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	2200      	movs	r2, #0
 800a24e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a256:	0c1b      	lsrs	r3, r3, #16
 800a258:	b2db      	uxtb	r3, r3
 800a25a:	f003 0301 	and.w	r3, r3, #1
 800a25e:	b2da      	uxtb	r2, r3
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a26a:	0bdb      	lsrs	r3, r3, #15
 800a26c:	b2db      	uxtb	r3, r3
 800a26e:	f003 0301 	and.w	r3, r3, #1
 800a272:	b2da      	uxtb	r2, r3
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a27e:	0b9b      	lsrs	r3, r3, #14
 800a280:	b2db      	uxtb	r3, r3
 800a282:	f003 0301 	and.w	r3, r3, #1
 800a286:	b2da      	uxtb	r2, r3
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a292:	0b5b      	lsrs	r3, r3, #13
 800a294:	b2db      	uxtb	r3, r3
 800a296:	f003 0301 	and.w	r3, r3, #1
 800a29a:	b2da      	uxtb	r2, r3
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2a6:	0b1b      	lsrs	r3, r3, #12
 800a2a8:	b2db      	uxtb	r3, r3
 800a2aa:	f003 0301 	and.w	r3, r3, #1
 800a2ae:	b2da      	uxtb	r2, r3
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2ba:	0a9b      	lsrs	r3, r3, #10
 800a2bc:	b2db      	uxtb	r3, r3
 800a2be:	f003 0303 	and.w	r3, r3, #3
 800a2c2:	b2da      	uxtb	r2, r3
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2ce:	0a1b      	lsrs	r3, r3, #8
 800a2d0:	b2db      	uxtb	r3, r3
 800a2d2:	f003 0303 	and.w	r3, r3, #3
 800a2d6:	b2da      	uxtb	r2, r3
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2e2:	085b      	lsrs	r3, r3, #1
 800a2e4:	b2db      	uxtb	r3, r3
 800a2e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2ea:	b2da      	uxtb	r2, r3
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	2201      	movs	r2, #1
 800a2f6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a2fa:	2300      	movs	r3, #0
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	370c      	adds	r7, #12
 800a300:	46bd      	mov	sp, r7
 800a302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a306:	4770      	bx	lr
 800a308:	004005ff 	.word	0x004005ff

0800a30c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b083      	sub	sp, #12
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a356:	2300      	movs	r3, #0
}
 800a358:	4618      	mov	r0, r3
 800a35a:	370c      	adds	r7, #12
 800a35c:	46bd      	mov	sp, r7
 800a35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a362:	4770      	bx	lr

0800a364 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a364:	b5b0      	push	{r4, r5, r7, lr}
 800a366:	b08e      	sub	sp, #56	; 0x38
 800a368:	af04      	add	r7, sp, #16
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a36e:	2300      	movs	r3, #0
 800a370:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2203      	movs	r2, #3
 800a378:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a380:	2b03      	cmp	r3, #3
 800a382:	d02e      	beq.n	800a3e2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a38a:	d106      	bne.n	800a39a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a390:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	639a      	str	r2, [r3, #56]	; 0x38
 800a398:	e029      	b.n	800a3ee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a3a0:	d10a      	bne.n	800a3b8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f000 fb2a 	bl	800a9fc <SD_WideBus_Enable>
 800a3a8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3ae:	6a3b      	ldr	r3, [r7, #32]
 800a3b0:	431a      	orrs	r2, r3
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	639a      	str	r2, [r3, #56]	; 0x38
 800a3b6:	e01a      	b.n	800a3ee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d10a      	bne.n	800a3d4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f000 fb67 	bl	800aa92 <SD_WideBus_Disable>
 800a3c4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3ca:	6a3b      	ldr	r3, [r7, #32]
 800a3cc:	431a      	orrs	r2, r3
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	639a      	str	r2, [r3, #56]	; 0x38
 800a3d2:	e00c      	b.n	800a3ee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3d8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	639a      	str	r2, [r3, #56]	; 0x38
 800a3e0:	e005      	b.n	800a3ee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3e6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d00b      	beq.n	800a40e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4a26      	ldr	r2, [pc, #152]	; (800a494 <HAL_SD_ConfigWideBusOperation+0x130>)
 800a3fc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2201      	movs	r2, #1
 800a402:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800a406:	2301      	movs	r3, #1
 800a408:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a40c:	e01f      	b.n	800a44e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	685b      	ldr	r3, [r3, #4]
 800a412:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	689b      	ldr	r3, [r3, #8]
 800a418:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	68db      	ldr	r3, [r3, #12]
 800a41e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	695b      	ldr	r3, [r3, #20]
 800a428:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	699b      	ldr	r3, [r3, #24]
 800a42e:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681d      	ldr	r5, [r3, #0]
 800a434:	466c      	mov	r4, sp
 800a436:	f107 0314 	add.w	r3, r7, #20
 800a43a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a43e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a442:	f107 0308 	add.w	r3, r7, #8
 800a446:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a448:	4628      	mov	r0, r5
 800a44a:	f003 f9ef 	bl	800d82c <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a456:	4618      	mov	r0, r3
 800a458:	f003 fac4 	bl	800d9e4 <SDMMC_CmdBlockLength>
 800a45c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a45e:	6a3b      	ldr	r3, [r7, #32]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d00c      	beq.n	800a47e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4a0a      	ldr	r2, [pc, #40]	; (800a494 <HAL_SD_ConfigWideBusOperation+0x130>)
 800a46a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a470:	6a3b      	ldr	r3, [r7, #32]
 800a472:	431a      	orrs	r2, r3
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800a478:	2301      	movs	r3, #1
 800a47a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2201      	movs	r2, #1
 800a482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800a486:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3728      	adds	r7, #40	; 0x28
 800a48e:	46bd      	mov	sp, r7
 800a490:	bdb0      	pop	{r4, r5, r7, pc}
 800a492:	bf00      	nop
 800a494:	004005ff 	.word	0x004005ff

0800a498 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b086      	sub	sp, #24
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a4a4:	f107 030c 	add.w	r3, r7, #12
 800a4a8:	4619      	mov	r1, r3
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f000 fa7e 	bl	800a9ac <SD_SendStatus>
 800a4b0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d005      	beq.n	800a4c4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	431a      	orrs	r2, r3
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	0a5b      	lsrs	r3, r3, #9
 800a4c8:	f003 030f 	and.w	r3, r3, #15
 800a4cc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a4ce:	693b      	ldr	r3, [r7, #16]
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3718      	adds	r7, #24
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b085      	sub	sp, #20
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4e4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a4f4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800a4f6:	bf00      	nop
 800a4f8:	3714      	adds	r7, #20
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a500:	4770      	bx	lr

0800a502 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a502:	b580      	push	{r7, lr}
 800a504:	b084      	sub	sp, #16
 800a506:	af00      	add	r7, sp, #0
 800a508:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a50e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a514:	2b82      	cmp	r3, #130	; 0x82
 800a516:	d111      	bne.n	800a53c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	4618      	mov	r0, r3
 800a51e:	f003 fb0b 	bl	800db38 <SDMMC_CmdStopTransfer>
 800a522:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d008      	beq.n	800a53c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	431a      	orrs	r2, r3
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800a536:	68f8      	ldr	r0, [r7, #12]
 800a538:	f7ff fd3a 	bl	8009fb0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f022 0208 	bic.w	r2, r2, #8
 800a54a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f240 523a 	movw	r2, #1338	; 0x53a
 800a554:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	2201      	movs	r2, #1
 800a55a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	2200      	movs	r2, #0
 800a562:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800a564:	68f8      	ldr	r0, [r7, #12]
 800a566:	f003 ff7d 	bl	800e464 <HAL_SD_RxCpltCallback>
#endif
}
 800a56a:	bf00      	nop
 800a56c:	3710      	adds	r7, #16
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}
	...

0800a574 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b086      	sub	sp, #24
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a580:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f7fc f91c 	bl	80067c0 <HAL_DMA_GetError>
 800a588:	4603      	mov	r3, r0
 800a58a:	2b02      	cmp	r3, #2
 800a58c:	d03e      	beq.n	800a60c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800a58e:	697b      	ldr	r3, [r7, #20]
 800a590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a594:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a59a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a59c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	2b01      	cmp	r3, #1
 800a5a2:	d002      	beq.n	800a5aa <SD_DMAError+0x36>
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2b01      	cmp	r3, #1
 800a5a8:	d12d      	bne.n	800a606 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	4a19      	ldr	r2, [pc, #100]	; (800a614 <SD_DMAError+0xa0>)
 800a5b0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a5b8:	697b      	ldr	r3, [r7, #20]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a5c0:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5c6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800a5ce:	6978      	ldr	r0, [r7, #20]
 800a5d0:	f7ff ff62 	bl	800a498 <HAL_SD_GetCardState>
 800a5d4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	2b06      	cmp	r3, #6
 800a5da:	d002      	beq.n	800a5e2 <SD_DMAError+0x6e>
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	2b05      	cmp	r3, #5
 800a5e0:	d10a      	bne.n	800a5f8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f003 faa6 	bl	800db38 <SDMMC_CmdStopTransfer>
 800a5ec:	4602      	mov	r2, r0
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5f2:	431a      	orrs	r2, r3
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	2200      	movs	r2, #0
 800a604:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800a606:	6978      	ldr	r0, [r7, #20]
 800a608:	f7ff fcd2 	bl	8009fb0 <HAL_SD_ErrorCallback>
#endif
  }
}
 800a60c:	bf00      	nop
 800a60e:	3718      	adds	r7, #24
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}
 800a614:	004005ff 	.word	0x004005ff

0800a618 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b084      	sub	sp, #16
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a624:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f240 523a 	movw	r2, #1338	; 0x53a
 800a62e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800a630:	68f8      	ldr	r0, [r7, #12]
 800a632:	f7ff ff31 	bl	800a498 <HAL_SD_GetCardState>
 800a636:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	2201      	movs	r2, #1
 800a63c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2200      	movs	r2, #0
 800a644:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	2b06      	cmp	r3, #6
 800a64a:	d002      	beq.n	800a652 <SD_DMATxAbort+0x3a>
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	2b05      	cmp	r3, #5
 800a650:	d10a      	bne.n	800a668 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	4618      	mov	r0, r3
 800a658:	f003 fa6e 	bl	800db38 <SDMMC_CmdStopTransfer>
 800a65c:	4602      	mov	r2, r0
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a662:	431a      	orrs	r2, r3
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d103      	bne.n	800a678 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800a670:	68f8      	ldr	r0, [r7, #12]
 800a672:	f003 fee3 	bl	800e43c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800a676:	e002      	b.n	800a67e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800a678:	68f8      	ldr	r0, [r7, #12]
 800a67a:	f7ff fc99 	bl	8009fb0 <HAL_SD_ErrorCallback>
}
 800a67e:	bf00      	nop
 800a680:	3710      	adds	r7, #16
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}

0800a686 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800a686:	b580      	push	{r7, lr}
 800a688:	b084      	sub	sp, #16
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a692:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f240 523a 	movw	r2, #1338	; 0x53a
 800a69c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800a69e:	68f8      	ldr	r0, [r7, #12]
 800a6a0:	f7ff fefa 	bl	800a498 <HAL_SD_GetCardState>
 800a6a4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	2b06      	cmp	r3, #6
 800a6b8:	d002      	beq.n	800a6c0 <SD_DMARxAbort+0x3a>
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	2b05      	cmp	r3, #5
 800a6be:	d10a      	bne.n	800a6d6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f003 fa37 	bl	800db38 <SDMMC_CmdStopTransfer>
 800a6ca:	4602      	mov	r2, r0
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6d0:	431a      	orrs	r2, r3
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d103      	bne.n	800a6e6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800a6de:	68f8      	ldr	r0, [r7, #12]
 800a6e0:	f003 feac 	bl	800e43c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800a6e4:	e002      	b.n	800a6ec <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800a6e6:	68f8      	ldr	r0, [r7, #12]
 800a6e8:	f7ff fc62 	bl	8009fb0 <HAL_SD_ErrorCallback>
}
 800a6ec:	bf00      	nop
 800a6ee:	3710      	adds	r7, #16
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}

0800a6f4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a6f4:	b5b0      	push	{r4, r5, r7, lr}
 800a6f6:	b094      	sub	sp, #80	; 0x50
 800a6f8:	af04      	add	r7, sp, #16
 800a6fa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4618      	mov	r0, r3
 800a706:	f003 f8e9 	bl	800d8dc <SDMMC_GetPowerState>
 800a70a:	4603      	mov	r3, r0
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d102      	bne.n	800a716 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a710:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a714:	e0b8      	b.n	800a888 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a71a:	2b03      	cmp	r3, #3
 800a71c:	d02f      	beq.n	800a77e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4618      	mov	r0, r3
 800a724:	f003 fb13 	bl	800dd4e <SDMMC_CmdSendCID>
 800a728:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a72a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d001      	beq.n	800a734 <SD_InitCard+0x40>
    {
      return errorstate;
 800a730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a732:	e0a9      	b.n	800a888 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	2100      	movs	r1, #0
 800a73a:	4618      	mov	r0, r3
 800a73c:	f003 f913 	bl	800d966 <SDMMC_GetResponse>
 800a740:	4602      	mov	r2, r0
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	2104      	movs	r1, #4
 800a74c:	4618      	mov	r0, r3
 800a74e:	f003 f90a 	bl	800d966 <SDMMC_GetResponse>
 800a752:	4602      	mov	r2, r0
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	2108      	movs	r1, #8
 800a75e:	4618      	mov	r0, r3
 800a760:	f003 f901 	bl	800d966 <SDMMC_GetResponse>
 800a764:	4602      	mov	r2, r0
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	210c      	movs	r1, #12
 800a770:	4618      	mov	r0, r3
 800a772:	f003 f8f8 	bl	800d966 <SDMMC_GetResponse>
 800a776:	4602      	mov	r2, r0
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a782:	2b03      	cmp	r3, #3
 800a784:	d00d      	beq.n	800a7a2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f107 020e 	add.w	r2, r7, #14
 800a78e:	4611      	mov	r1, r2
 800a790:	4618      	mov	r0, r3
 800a792:	f003 fb19 	bl	800ddc8 <SDMMC_CmdSetRelAdd>
 800a796:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d001      	beq.n	800a7a2 <SD_InitCard+0xae>
    {
      return errorstate;
 800a79e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7a0:	e072      	b.n	800a888 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7a6:	2b03      	cmp	r3, #3
 800a7a8:	d036      	beq.n	800a818 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a7aa:	89fb      	ldrh	r3, [r7, #14]
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681a      	ldr	r2, [r3, #0]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7ba:	041b      	lsls	r3, r3, #16
 800a7bc:	4619      	mov	r1, r3
 800a7be:	4610      	mov	r0, r2
 800a7c0:	f003 fae3 	bl	800dd8a <SDMMC_CmdSendCSD>
 800a7c4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a7c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d001      	beq.n	800a7d0 <SD_InitCard+0xdc>
    {
      return errorstate;
 800a7cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7ce:	e05b      	b.n	800a888 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	2100      	movs	r1, #0
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f003 f8c5 	bl	800d966 <SDMMC_GetResponse>
 800a7dc:	4602      	mov	r2, r0
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	2104      	movs	r1, #4
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f003 f8bc 	bl	800d966 <SDMMC_GetResponse>
 800a7ee:	4602      	mov	r2, r0
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	2108      	movs	r1, #8
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f003 f8b3 	bl	800d966 <SDMMC_GetResponse>
 800a800:	4602      	mov	r2, r0
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	210c      	movs	r1, #12
 800a80c:	4618      	mov	r0, r3
 800a80e:	f003 f8aa 	bl	800d966 <SDMMC_GetResponse>
 800a812:	4602      	mov	r2, r0
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	2104      	movs	r1, #4
 800a81e:	4618      	mov	r0, r3
 800a820:	f003 f8a1 	bl	800d966 <SDMMC_GetResponse>
 800a824:	4603      	mov	r3, r0
 800a826:	0d1a      	lsrs	r2, r3, #20
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a82c:	f107 0310 	add.w	r3, r7, #16
 800a830:	4619      	mov	r1, r3
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f7ff fbc6 	bl	8009fc4 <HAL_SD_GetCardCSD>
 800a838:	4603      	mov	r3, r0
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d002      	beq.n	800a844 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a83e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a842:	e021      	b.n	800a888 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6819      	ldr	r1, [r3, #0]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a84c:	041b      	lsls	r3, r3, #16
 800a84e:	2200      	movs	r2, #0
 800a850:	461c      	mov	r4, r3
 800a852:	4615      	mov	r5, r2
 800a854:	4622      	mov	r2, r4
 800a856:	462b      	mov	r3, r5
 800a858:	4608      	mov	r0, r1
 800a85a:	f003 f98f 	bl	800db7c <SDMMC_CmdSelDesel>
 800a85e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a862:	2b00      	cmp	r3, #0
 800a864:	d001      	beq.n	800a86a <SD_InitCard+0x176>
  {
    return errorstate;
 800a866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a868:	e00e      	b.n	800a888 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681d      	ldr	r5, [r3, #0]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	466c      	mov	r4, sp
 800a872:	f103 0210 	add.w	r2, r3, #16
 800a876:	ca07      	ldmia	r2, {r0, r1, r2}
 800a878:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a87c:	3304      	adds	r3, #4
 800a87e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a880:	4628      	mov	r0, r5
 800a882:	f002 ffd3 	bl	800d82c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a886:	2300      	movs	r3, #0
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3740      	adds	r7, #64	; 0x40
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bdb0      	pop	{r4, r5, r7, pc}

0800a890 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b086      	sub	sp, #24
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a898:	2300      	movs	r3, #0
 800a89a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800a89c:	2300      	movs	r3, #0
 800a89e:	617b      	str	r3, [r7, #20]
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f003 f98a 	bl	800dbc2 <SDMMC_CmdGoIdleState>
 800a8ae:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d001      	beq.n	800a8ba <SD_PowerON+0x2a>
  {
    return errorstate;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	e072      	b.n	800a9a0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f003 f99d 	bl	800dbfe <SDMMC_CmdOperCond>
 800a8c4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d00d      	beq.n	800a8e8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f003 f973 	bl	800dbc2 <SDMMC_CmdGoIdleState>
 800a8dc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d004      	beq.n	800a8ee <SD_PowerON+0x5e>
    {
      return errorstate;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	e05b      	b.n	800a9a0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2201      	movs	r2, #1
 800a8ec:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8f2:	2b01      	cmp	r3, #1
 800a8f4:	d137      	bne.n	800a966 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	2100      	movs	r1, #0
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f003 f99d 	bl	800dc3c <SDMMC_CmdAppCommand>
 800a902:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d02d      	beq.n	800a966 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a90a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a90e:	e047      	b.n	800a9a0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	2100      	movs	r1, #0
 800a916:	4618      	mov	r0, r3
 800a918:	f003 f990 	bl	800dc3c <SDMMC_CmdAppCommand>
 800a91c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d001      	beq.n	800a928 <SD_PowerON+0x98>
    {
      return errorstate;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	e03b      	b.n	800a9a0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	491e      	ldr	r1, [pc, #120]	; (800a9a8 <SD_PowerON+0x118>)
 800a92e:	4618      	mov	r0, r3
 800a930:	f003 f9a6 	bl	800dc80 <SDMMC_CmdAppOperCommand>
 800a934:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d002      	beq.n	800a942 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a93c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a940:	e02e      	b.n	800a9a0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	2100      	movs	r1, #0
 800a948:	4618      	mov	r0, r3
 800a94a:	f003 f80c 	bl	800d966 <SDMMC_GetResponse>
 800a94e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	0fdb      	lsrs	r3, r3, #31
 800a954:	2b01      	cmp	r3, #1
 800a956:	d101      	bne.n	800a95c <SD_PowerON+0xcc>
 800a958:	2301      	movs	r3, #1
 800a95a:	e000      	b.n	800a95e <SD_PowerON+0xce>
 800a95c:	2300      	movs	r3, #0
 800a95e:	613b      	str	r3, [r7, #16]

    count++;
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	3301      	adds	r3, #1
 800a964:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d802      	bhi.n	800a976 <SD_PowerON+0xe6>
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d0cc      	beq.n	800a910 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a97c:	4293      	cmp	r3, r2
 800a97e:	d902      	bls.n	800a986 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a980:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a984:	e00c      	b.n	800a9a0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d003      	beq.n	800a998 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2201      	movs	r2, #1
 800a994:	645a      	str	r2, [r3, #68]	; 0x44
 800a996:	e002      	b.n	800a99e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2200      	movs	r2, #0
 800a99c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a99e:	2300      	movs	r3, #0
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3718      	adds	r7, #24
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}
 800a9a8:	c1100000 	.word	0xc1100000

0800a9ac <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b084      	sub	sp, #16
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d102      	bne.n	800a9c2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a9bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a9c0:	e018      	b.n	800a9f4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681a      	ldr	r2, [r3, #0]
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9ca:	041b      	lsls	r3, r3, #16
 800a9cc:	4619      	mov	r1, r3
 800a9ce:	4610      	mov	r0, r2
 800a9d0:	f003 fa1b 	bl	800de0a <SDMMC_CmdSendStatus>
 800a9d4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d001      	beq.n	800a9e0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	e009      	b.n	800a9f4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	2100      	movs	r1, #0
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f002 ffbd 	bl	800d966 <SDMMC_GetResponse>
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a9f2:	2300      	movs	r3, #0
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	3710      	adds	r7, #16
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}

0800a9fc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b086      	sub	sp, #24
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800aa04:	2300      	movs	r3, #0
 800aa06:	60fb      	str	r3, [r7, #12]
 800aa08:	2300      	movs	r3, #0
 800aa0a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	2100      	movs	r1, #0
 800aa12:	4618      	mov	r0, r3
 800aa14:	f002 ffa7 	bl	800d966 <SDMMC_GetResponse>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa22:	d102      	bne.n	800aa2a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800aa24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aa28:	e02f      	b.n	800aa8a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800aa2a:	f107 030c 	add.w	r3, r7, #12
 800aa2e:	4619      	mov	r1, r3
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f000 f879 	bl	800ab28 <SD_FindSCR>
 800aa36:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d001      	beq.n	800aa42 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	e023      	b.n	800aa8a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d01c      	beq.n	800aa86 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681a      	ldr	r2, [r3, #0]
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa54:	041b      	lsls	r3, r3, #16
 800aa56:	4619      	mov	r1, r3
 800aa58:	4610      	mov	r0, r2
 800aa5a:	f003 f8ef 	bl	800dc3c <SDMMC_CmdAppCommand>
 800aa5e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d001      	beq.n	800aa6a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	e00f      	b.n	800aa8a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	2102      	movs	r1, #2
 800aa70:	4618      	mov	r0, r3
 800aa72:	f003 f929 	bl	800dcc8 <SDMMC_CmdBusWidth>
 800aa76:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d001      	beq.n	800aa82 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	e003      	b.n	800aa8a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800aa82:	2300      	movs	r3, #0
 800aa84:	e001      	b.n	800aa8a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800aa86:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3718      	adds	r7, #24
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}

0800aa92 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800aa92:	b580      	push	{r7, lr}
 800aa94:	b086      	sub	sp, #24
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	60fb      	str	r3, [r7, #12]
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	2100      	movs	r1, #0
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f002 ff5c 	bl	800d966 <SDMMC_GetResponse>
 800aaae:	4603      	mov	r3, r0
 800aab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aab4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aab8:	d102      	bne.n	800aac0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800aaba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aabe:	e02f      	b.n	800ab20 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800aac0:	f107 030c 	add.w	r3, r7, #12
 800aac4:	4619      	mov	r1, r3
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f000 f82e 	bl	800ab28 <SD_FindSCR>
 800aacc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d001      	beq.n	800aad8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	e023      	b.n	800ab20 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d01c      	beq.n	800ab1c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681a      	ldr	r2, [r3, #0]
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aaea:	041b      	lsls	r3, r3, #16
 800aaec:	4619      	mov	r1, r3
 800aaee:	4610      	mov	r0, r2
 800aaf0:	f003 f8a4 	bl	800dc3c <SDMMC_CmdAppCommand>
 800aaf4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d001      	beq.n	800ab00 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	e00f      	b.n	800ab20 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	2100      	movs	r1, #0
 800ab06:	4618      	mov	r0, r3
 800ab08:	f003 f8de 	bl	800dcc8 <SDMMC_CmdBusWidth>
 800ab0c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ab0e:	697b      	ldr	r3, [r7, #20]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d001      	beq.n	800ab18 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	e003      	b.n	800ab20 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	e001      	b.n	800ab20 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ab1c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ab20:	4618      	mov	r0, r3
 800ab22:	3718      	adds	r7, #24
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}

0800ab28 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800ab28:	b590      	push	{r4, r7, lr}
 800ab2a:	b08f      	sub	sp, #60	; 0x3c
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ab32:	f7fa fd11 	bl	8005558 <HAL_GetTick>
 800ab36:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	60bb      	str	r3, [r7, #8]
 800ab40:	2300      	movs	r3, #0
 800ab42:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	2108      	movs	r1, #8
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f002 ff48 	bl	800d9e4 <SDMMC_CmdBlockLength>
 800ab54:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d001      	beq.n	800ab60 <SD_FindSCR+0x38>
  {
    return errorstate;
 800ab5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab5e:	e0b2      	b.n	800acc6 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681a      	ldr	r2, [r3, #0]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab68:	041b      	lsls	r3, r3, #16
 800ab6a:	4619      	mov	r1, r3
 800ab6c:	4610      	mov	r0, r2
 800ab6e:	f003 f865 	bl	800dc3c <SDMMC_CmdAppCommand>
 800ab72:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d001      	beq.n	800ab7e <SD_FindSCR+0x56>
  {
    return errorstate;
 800ab7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab7c:	e0a3      	b.n	800acc6 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ab7e:	f04f 33ff 	mov.w	r3, #4294967295
 800ab82:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800ab84:	2308      	movs	r3, #8
 800ab86:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800ab88:	2330      	movs	r3, #48	; 0x30
 800ab8a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ab8c:	2302      	movs	r3, #2
 800ab8e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ab90:	2300      	movs	r3, #0
 800ab92:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ab94:	2301      	movs	r3, #1
 800ab96:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f107 0210 	add.w	r2, r7, #16
 800aba0:	4611      	mov	r1, r2
 800aba2:	4618      	mov	r0, r3
 800aba4:	f002 fef2 	bl	800d98c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	4618      	mov	r0, r3
 800abae:	f003 f8ad 	bl	800dd0c <SDMMC_CmdSendSCR>
 800abb2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800abb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d02a      	beq.n	800ac10 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800abba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abbc:	e083      	b.n	800acc6 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d00f      	beq.n	800abec <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6819      	ldr	r1, [r3, #0]
 800abd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abd2:	009b      	lsls	r3, r3, #2
 800abd4:	f107 0208 	add.w	r2, r7, #8
 800abd8:	18d4      	adds	r4, r2, r3
 800abda:	4608      	mov	r0, r1
 800abdc:	f002 fe52 	bl	800d884 <SDMMC_ReadFIFO>
 800abe0:	4603      	mov	r3, r0
 800abe2:	6023      	str	r3, [r4, #0]
      index++;
 800abe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abe6:	3301      	adds	r3, #1
 800abe8:	637b      	str	r3, [r7, #52]	; 0x34
 800abea:	e006      	b.n	800abfa <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abf2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d012      	beq.n	800ac20 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800abfa:	f7fa fcad 	bl	8005558 <HAL_GetTick>
 800abfe:	4602      	mov	r2, r0
 800ac00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac02:	1ad3      	subs	r3, r2, r3
 800ac04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac08:	d102      	bne.n	800ac10 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ac0a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ac0e:	e05a      	b.n	800acc6 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac16:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d0cf      	beq.n	800abbe <SD_FindSCR+0x96>
 800ac1e:	e000      	b.n	800ac22 <SD_FindSCR+0xfa>
      break;
 800ac20:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac28:	f003 0308 	and.w	r3, r3, #8
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d005      	beq.n	800ac3c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	2208      	movs	r2, #8
 800ac36:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ac38:	2308      	movs	r3, #8
 800ac3a:	e044      	b.n	800acc6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac42:	f003 0302 	and.w	r3, r3, #2
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d005      	beq.n	800ac56 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	2202      	movs	r2, #2
 800ac50:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ac52:	2302      	movs	r3, #2
 800ac54:	e037      	b.n	800acc6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac5c:	f003 0320 	and.w	r3, r3, #32
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d005      	beq.n	800ac70 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	2220      	movs	r2, #32
 800ac6a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800ac6c:	2320      	movs	r3, #32
 800ac6e:	e02a      	b.n	800acc6 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f240 523a 	movw	r2, #1338	; 0x53a
 800ac78:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	061a      	lsls	r2, r3, #24
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	021b      	lsls	r3, r3, #8
 800ac82:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ac86:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	0a1b      	lsrs	r3, r3, #8
 800ac8c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ac90:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	0e1b      	lsrs	r3, r3, #24
 800ac96:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ac98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac9a:	601a      	str	r2, [r3, #0]
    scr++;
 800ac9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac9e:	3304      	adds	r3, #4
 800aca0:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	061a      	lsls	r2, r3, #24
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	021b      	lsls	r3, r3, #8
 800acaa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800acae:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	0a1b      	lsrs	r3, r3, #8
 800acb4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800acb8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	0e1b      	lsrs	r3, r3, #24
 800acbe:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800acc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc2:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800acc4:	2300      	movs	r3, #0
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	373c      	adds	r7, #60	; 0x3c
 800acca:	46bd      	mov	sp, r7
 800accc:	bd90      	pop	{r4, r7, pc}

0800acce <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800acce:	b580      	push	{r7, lr}
 800acd0:	b086      	sub	sp, #24
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acda:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ace0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d03f      	beq.n	800ad68 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800ace8:	2300      	movs	r3, #0
 800acea:	617b      	str	r3, [r7, #20]
 800acec:	e033      	b.n	800ad56 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	4618      	mov	r0, r3
 800acf4:	f002 fdc6 	bl	800d884 <SDMMC_ReadFIFO>
 800acf8:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	b2da      	uxtb	r2, r3
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	3301      	adds	r3, #1
 800ad06:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	3b01      	subs	r3, #1
 800ad0c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	0a1b      	lsrs	r3, r3, #8
 800ad12:	b2da      	uxtb	r2, r3
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	3301      	adds	r3, #1
 800ad1c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	3b01      	subs	r3, #1
 800ad22:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	0c1b      	lsrs	r3, r3, #16
 800ad28:	b2da      	uxtb	r2, r3
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	3301      	adds	r3, #1
 800ad32:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	3b01      	subs	r3, #1
 800ad38:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	0e1b      	lsrs	r3, r3, #24
 800ad3e:	b2da      	uxtb	r2, r3
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	3301      	adds	r3, #1
 800ad48:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	3b01      	subs	r3, #1
 800ad4e:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	3301      	adds	r3, #1
 800ad54:	617b      	str	r3, [r7, #20]
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	2b07      	cmp	r3, #7
 800ad5a:	d9c8      	bls.n	800acee <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	68fa      	ldr	r2, [r7, #12]
 800ad60:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	693a      	ldr	r2, [r7, #16]
 800ad66:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800ad68:	bf00      	nop
 800ad6a:	3718      	adds	r7, #24
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b086      	sub	sp, #24
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6a1b      	ldr	r3, [r3, #32]
 800ad7c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad82:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d043      	beq.n	800ae12 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	617b      	str	r3, [r7, #20]
 800ad8e:	e037      	b.n	800ae00 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	781b      	ldrb	r3, [r3, #0]
 800ad94:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	3301      	adds	r3, #1
 800ad9a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	3b01      	subs	r3, #1
 800ada0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	021a      	lsls	r2, r3, #8
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	4313      	orrs	r3, r2
 800adac:	60bb      	str	r3, [r7, #8]
      tmp++;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	3301      	adds	r3, #1
 800adb2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	3b01      	subs	r3, #1
 800adb8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	781b      	ldrb	r3, [r3, #0]
 800adbe:	041a      	lsls	r2, r3, #16
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	4313      	orrs	r3, r2
 800adc4:	60bb      	str	r3, [r7, #8]
      tmp++;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	3301      	adds	r3, #1
 800adca:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	3b01      	subs	r3, #1
 800add0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	781b      	ldrb	r3, [r3, #0]
 800add6:	061a      	lsls	r2, r3, #24
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	4313      	orrs	r3, r2
 800addc:	60bb      	str	r3, [r7, #8]
      tmp++;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	3301      	adds	r3, #1
 800ade2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ade4:	693b      	ldr	r3, [r7, #16]
 800ade6:	3b01      	subs	r3, #1
 800ade8:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f107 0208 	add.w	r2, r7, #8
 800adf2:	4611      	mov	r1, r2
 800adf4:	4618      	mov	r0, r3
 800adf6:	f002 fd52 	bl	800d89e <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	3301      	adds	r3, #1
 800adfe:	617b      	str	r3, [r7, #20]
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	2b07      	cmp	r3, #7
 800ae04:	d9c4      	bls.n	800ad90 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	68fa      	ldr	r2, [r7, #12]
 800ae0a:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	693a      	ldr	r2, [r7, #16]
 800ae10:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800ae12:	bf00      	nop
 800ae14:	3718      	adds	r7, #24
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}

0800ae1a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ae1a:	b580      	push	{r7, lr}
 800ae1c:	b082      	sub	sp, #8
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d101      	bne.n	800ae2c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ae28:	2301      	movs	r3, #1
 800ae2a:	e049      	b.n	800aec0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae32:	b2db      	uxtb	r3, r3
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d106      	bne.n	800ae46 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f7fa f975 	bl	8005130 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2202      	movs	r2, #2
 800ae4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681a      	ldr	r2, [r3, #0]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	3304      	adds	r3, #4
 800ae56:	4619      	mov	r1, r3
 800ae58:	4610      	mov	r0, r2
 800ae5a:	f000 fe05 	bl	800ba68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2201      	movs	r2, #1
 800ae62:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2201      	movs	r2, #1
 800ae6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2201      	movs	r2, #1
 800ae72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2201      	movs	r2, #1
 800ae7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2201      	movs	r2, #1
 800ae82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2201      	movs	r2, #1
 800ae8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2201      	movs	r2, #1
 800ae92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2201      	movs	r2, #1
 800ae9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2201      	movs	r2, #1
 800aea2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2201      	movs	r2, #1
 800aeaa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2201      	movs	r2, #1
 800aeb2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2201      	movs	r2, #1
 800aeba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aebe:	2300      	movs	r3, #0
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3708      	adds	r7, #8
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}

0800aec8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800aec8:	b480      	push	{r7}
 800aeca:	b085      	sub	sp, #20
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aed6:	b2db      	uxtb	r3, r3
 800aed8:	2b01      	cmp	r3, #1
 800aeda:	d001      	beq.n	800aee0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800aedc:	2301      	movs	r3, #1
 800aede:	e04c      	b.n	800af7a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2202      	movs	r2, #2
 800aee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	4a26      	ldr	r2, [pc, #152]	; (800af88 <HAL_TIM_Base_Start+0xc0>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d022      	beq.n	800af38 <HAL_TIM_Base_Start+0x70>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aefa:	d01d      	beq.n	800af38 <HAL_TIM_Base_Start+0x70>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	4a22      	ldr	r2, [pc, #136]	; (800af8c <HAL_TIM_Base_Start+0xc4>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d018      	beq.n	800af38 <HAL_TIM_Base_Start+0x70>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	4a21      	ldr	r2, [pc, #132]	; (800af90 <HAL_TIM_Base_Start+0xc8>)
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d013      	beq.n	800af38 <HAL_TIM_Base_Start+0x70>
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	4a1f      	ldr	r2, [pc, #124]	; (800af94 <HAL_TIM_Base_Start+0xcc>)
 800af16:	4293      	cmp	r3, r2
 800af18:	d00e      	beq.n	800af38 <HAL_TIM_Base_Start+0x70>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	4a1e      	ldr	r2, [pc, #120]	; (800af98 <HAL_TIM_Base_Start+0xd0>)
 800af20:	4293      	cmp	r3, r2
 800af22:	d009      	beq.n	800af38 <HAL_TIM_Base_Start+0x70>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	4a1c      	ldr	r2, [pc, #112]	; (800af9c <HAL_TIM_Base_Start+0xd4>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d004      	beq.n	800af38 <HAL_TIM_Base_Start+0x70>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	4a1b      	ldr	r2, [pc, #108]	; (800afa0 <HAL_TIM_Base_Start+0xd8>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d115      	bne.n	800af64 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	689a      	ldr	r2, [r3, #8]
 800af3e:	4b19      	ldr	r3, [pc, #100]	; (800afa4 <HAL_TIM_Base_Start+0xdc>)
 800af40:	4013      	ands	r3, r2
 800af42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	2b06      	cmp	r3, #6
 800af48:	d015      	beq.n	800af76 <HAL_TIM_Base_Start+0xae>
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af50:	d011      	beq.n	800af76 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	681a      	ldr	r2, [r3, #0]
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f042 0201 	orr.w	r2, r2, #1
 800af60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af62:	e008      	b.n	800af76 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	681a      	ldr	r2, [r3, #0]
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f042 0201 	orr.w	r2, r2, #1
 800af72:	601a      	str	r2, [r3, #0]
 800af74:	e000      	b.n	800af78 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af76:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800af78:	2300      	movs	r3, #0
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3714      	adds	r7, #20
 800af7e:	46bd      	mov	sp, r7
 800af80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af84:	4770      	bx	lr
 800af86:	bf00      	nop
 800af88:	40010000 	.word	0x40010000
 800af8c:	40000400 	.word	0x40000400
 800af90:	40000800 	.word	0x40000800
 800af94:	40000c00 	.word	0x40000c00
 800af98:	40010400 	.word	0x40010400
 800af9c:	40014000 	.word	0x40014000
 800afa0:	40001800 	.word	0x40001800
 800afa4:	00010007 	.word	0x00010007

0800afa8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b085      	sub	sp, #20
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afb6:	b2db      	uxtb	r3, r3
 800afb8:	2b01      	cmp	r3, #1
 800afba:	d001      	beq.n	800afc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800afbc:	2301      	movs	r3, #1
 800afbe:	e054      	b.n	800b06a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2202      	movs	r2, #2
 800afc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	68da      	ldr	r2, [r3, #12]
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f042 0201 	orr.w	r2, r2, #1
 800afd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	4a26      	ldr	r2, [pc, #152]	; (800b078 <HAL_TIM_Base_Start_IT+0xd0>)
 800afde:	4293      	cmp	r3, r2
 800afe0:	d022      	beq.n	800b028 <HAL_TIM_Base_Start_IT+0x80>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afea:	d01d      	beq.n	800b028 <HAL_TIM_Base_Start_IT+0x80>
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	4a22      	ldr	r2, [pc, #136]	; (800b07c <HAL_TIM_Base_Start_IT+0xd4>)
 800aff2:	4293      	cmp	r3, r2
 800aff4:	d018      	beq.n	800b028 <HAL_TIM_Base_Start_IT+0x80>
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	4a21      	ldr	r2, [pc, #132]	; (800b080 <HAL_TIM_Base_Start_IT+0xd8>)
 800affc:	4293      	cmp	r3, r2
 800affe:	d013      	beq.n	800b028 <HAL_TIM_Base_Start_IT+0x80>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	4a1f      	ldr	r2, [pc, #124]	; (800b084 <HAL_TIM_Base_Start_IT+0xdc>)
 800b006:	4293      	cmp	r3, r2
 800b008:	d00e      	beq.n	800b028 <HAL_TIM_Base_Start_IT+0x80>
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	4a1e      	ldr	r2, [pc, #120]	; (800b088 <HAL_TIM_Base_Start_IT+0xe0>)
 800b010:	4293      	cmp	r3, r2
 800b012:	d009      	beq.n	800b028 <HAL_TIM_Base_Start_IT+0x80>
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	4a1c      	ldr	r2, [pc, #112]	; (800b08c <HAL_TIM_Base_Start_IT+0xe4>)
 800b01a:	4293      	cmp	r3, r2
 800b01c:	d004      	beq.n	800b028 <HAL_TIM_Base_Start_IT+0x80>
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	4a1b      	ldr	r2, [pc, #108]	; (800b090 <HAL_TIM_Base_Start_IT+0xe8>)
 800b024:	4293      	cmp	r3, r2
 800b026:	d115      	bne.n	800b054 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	689a      	ldr	r2, [r3, #8]
 800b02e:	4b19      	ldr	r3, [pc, #100]	; (800b094 <HAL_TIM_Base_Start_IT+0xec>)
 800b030:	4013      	ands	r3, r2
 800b032:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	2b06      	cmp	r3, #6
 800b038:	d015      	beq.n	800b066 <HAL_TIM_Base_Start_IT+0xbe>
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b040:	d011      	beq.n	800b066 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	681a      	ldr	r2, [r3, #0]
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f042 0201 	orr.w	r2, r2, #1
 800b050:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b052:	e008      	b.n	800b066 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	681a      	ldr	r2, [r3, #0]
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f042 0201 	orr.w	r2, r2, #1
 800b062:	601a      	str	r2, [r3, #0]
 800b064:	e000      	b.n	800b068 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b066:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b068:	2300      	movs	r3, #0
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	3714      	adds	r7, #20
 800b06e:	46bd      	mov	sp, r7
 800b070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b074:	4770      	bx	lr
 800b076:	bf00      	nop
 800b078:	40010000 	.word	0x40010000
 800b07c:	40000400 	.word	0x40000400
 800b080:	40000800 	.word	0x40000800
 800b084:	40000c00 	.word	0x40000c00
 800b088:	40010400 	.word	0x40010400
 800b08c:	40014000 	.word	0x40014000
 800b090:	40001800 	.word	0x40001800
 800b094:	00010007 	.word	0x00010007

0800b098 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b082      	sub	sp, #8
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d101      	bne.n	800b0aa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	e049      	b.n	800b13e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0b0:	b2db      	uxtb	r3, r3
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d106      	bne.n	800b0c4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f000 f841 	bl	800b146 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2202      	movs	r2, #2
 800b0c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681a      	ldr	r2, [r3, #0]
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	3304      	adds	r3, #4
 800b0d4:	4619      	mov	r1, r3
 800b0d6:	4610      	mov	r0, r2
 800b0d8:	f000 fcc6 	bl	800ba68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2201      	movs	r2, #1
 800b0e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2201      	movs	r2, #1
 800b100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2201      	movs	r2, #1
 800b108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2201      	movs	r2, #1
 800b110:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2201      	movs	r2, #1
 800b118:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2201      	movs	r2, #1
 800b120:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2201      	movs	r2, #1
 800b128:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2201      	movs	r2, #1
 800b130:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2201      	movs	r2, #1
 800b138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b13c:	2300      	movs	r3, #0
}
 800b13e:	4618      	mov	r0, r3
 800b140:	3708      	adds	r7, #8
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}

0800b146 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800b146:	b480      	push	{r7}
 800b148:	b083      	sub	sp, #12
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800b14e:	bf00      	nop
 800b150:	370c      	adds	r7, #12
 800b152:	46bd      	mov	sp, r7
 800b154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b158:	4770      	bx	lr
	...

0800b15c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b084      	sub	sp, #16
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b166:	2300      	movs	r3, #0
 800b168:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d104      	bne.n	800b17a <HAL_TIM_IC_Start_IT+0x1e>
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b176:	b2db      	uxtb	r3, r3
 800b178:	e023      	b.n	800b1c2 <HAL_TIM_IC_Start_IT+0x66>
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	2b04      	cmp	r3, #4
 800b17e:	d104      	bne.n	800b18a <HAL_TIM_IC_Start_IT+0x2e>
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b186:	b2db      	uxtb	r3, r3
 800b188:	e01b      	b.n	800b1c2 <HAL_TIM_IC_Start_IT+0x66>
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	2b08      	cmp	r3, #8
 800b18e:	d104      	bne.n	800b19a <HAL_TIM_IC_Start_IT+0x3e>
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b196:	b2db      	uxtb	r3, r3
 800b198:	e013      	b.n	800b1c2 <HAL_TIM_IC_Start_IT+0x66>
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	2b0c      	cmp	r3, #12
 800b19e:	d104      	bne.n	800b1aa <HAL_TIM_IC_Start_IT+0x4e>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b1a6:	b2db      	uxtb	r3, r3
 800b1a8:	e00b      	b.n	800b1c2 <HAL_TIM_IC_Start_IT+0x66>
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	2b10      	cmp	r3, #16
 800b1ae:	d104      	bne.n	800b1ba <HAL_TIM_IC_Start_IT+0x5e>
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b1b6:	b2db      	uxtb	r3, r3
 800b1b8:	e003      	b.n	800b1c2 <HAL_TIM_IC_Start_IT+0x66>
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b1c0:	b2db      	uxtb	r3, r3
 800b1c2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d104      	bne.n	800b1d4 <HAL_TIM_IC_Start_IT+0x78>
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b1d0:	b2db      	uxtb	r3, r3
 800b1d2:	e013      	b.n	800b1fc <HAL_TIM_IC_Start_IT+0xa0>
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	2b04      	cmp	r3, #4
 800b1d8:	d104      	bne.n	800b1e4 <HAL_TIM_IC_Start_IT+0x88>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b1e0:	b2db      	uxtb	r3, r3
 800b1e2:	e00b      	b.n	800b1fc <HAL_TIM_IC_Start_IT+0xa0>
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	2b08      	cmp	r3, #8
 800b1e8:	d104      	bne.n	800b1f4 <HAL_TIM_IC_Start_IT+0x98>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b1f0:	b2db      	uxtb	r3, r3
 800b1f2:	e003      	b.n	800b1fc <HAL_TIM_IC_Start_IT+0xa0>
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800b1fa:	b2db      	uxtb	r3, r3
 800b1fc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800b1fe:	7bbb      	ldrb	r3, [r7, #14]
 800b200:	2b01      	cmp	r3, #1
 800b202:	d102      	bne.n	800b20a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800b204:	7b7b      	ldrb	r3, [r7, #13]
 800b206:	2b01      	cmp	r3, #1
 800b208:	d001      	beq.n	800b20e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800b20a:	2301      	movs	r3, #1
 800b20c:	e0e2      	b.n	800b3d4 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d104      	bne.n	800b21e <HAL_TIM_IC_Start_IT+0xc2>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2202      	movs	r2, #2
 800b218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b21c:	e023      	b.n	800b266 <HAL_TIM_IC_Start_IT+0x10a>
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	2b04      	cmp	r3, #4
 800b222:	d104      	bne.n	800b22e <HAL_TIM_IC_Start_IT+0xd2>
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2202      	movs	r2, #2
 800b228:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b22c:	e01b      	b.n	800b266 <HAL_TIM_IC_Start_IT+0x10a>
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	2b08      	cmp	r3, #8
 800b232:	d104      	bne.n	800b23e <HAL_TIM_IC_Start_IT+0xe2>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2202      	movs	r2, #2
 800b238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b23c:	e013      	b.n	800b266 <HAL_TIM_IC_Start_IT+0x10a>
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	2b0c      	cmp	r3, #12
 800b242:	d104      	bne.n	800b24e <HAL_TIM_IC_Start_IT+0xf2>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2202      	movs	r2, #2
 800b248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b24c:	e00b      	b.n	800b266 <HAL_TIM_IC_Start_IT+0x10a>
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	2b10      	cmp	r3, #16
 800b252:	d104      	bne.n	800b25e <HAL_TIM_IC_Start_IT+0x102>
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2202      	movs	r2, #2
 800b258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b25c:	e003      	b.n	800b266 <HAL_TIM_IC_Start_IT+0x10a>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2202      	movs	r2, #2
 800b262:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d104      	bne.n	800b276 <HAL_TIM_IC_Start_IT+0x11a>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2202      	movs	r2, #2
 800b270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b274:	e013      	b.n	800b29e <HAL_TIM_IC_Start_IT+0x142>
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	2b04      	cmp	r3, #4
 800b27a:	d104      	bne.n	800b286 <HAL_TIM_IC_Start_IT+0x12a>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2202      	movs	r2, #2
 800b280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b284:	e00b      	b.n	800b29e <HAL_TIM_IC_Start_IT+0x142>
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	2b08      	cmp	r3, #8
 800b28a:	d104      	bne.n	800b296 <HAL_TIM_IC_Start_IT+0x13a>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2202      	movs	r2, #2
 800b290:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b294:	e003      	b.n	800b29e <HAL_TIM_IC_Start_IT+0x142>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2202      	movs	r2, #2
 800b29a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	2b0c      	cmp	r3, #12
 800b2a2:	d841      	bhi.n	800b328 <HAL_TIM_IC_Start_IT+0x1cc>
 800b2a4:	a201      	add	r2, pc, #4	; (adr r2, 800b2ac <HAL_TIM_IC_Start_IT+0x150>)
 800b2a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2aa:	bf00      	nop
 800b2ac:	0800b2e1 	.word	0x0800b2e1
 800b2b0:	0800b329 	.word	0x0800b329
 800b2b4:	0800b329 	.word	0x0800b329
 800b2b8:	0800b329 	.word	0x0800b329
 800b2bc:	0800b2f3 	.word	0x0800b2f3
 800b2c0:	0800b329 	.word	0x0800b329
 800b2c4:	0800b329 	.word	0x0800b329
 800b2c8:	0800b329 	.word	0x0800b329
 800b2cc:	0800b305 	.word	0x0800b305
 800b2d0:	0800b329 	.word	0x0800b329
 800b2d4:	0800b329 	.word	0x0800b329
 800b2d8:	0800b329 	.word	0x0800b329
 800b2dc:	0800b317 	.word	0x0800b317
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	68da      	ldr	r2, [r3, #12]
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f042 0202 	orr.w	r2, r2, #2
 800b2ee:	60da      	str	r2, [r3, #12]
      break;
 800b2f0:	e01d      	b.n	800b32e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	68da      	ldr	r2, [r3, #12]
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f042 0204 	orr.w	r2, r2, #4
 800b300:	60da      	str	r2, [r3, #12]
      break;
 800b302:	e014      	b.n	800b32e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	68da      	ldr	r2, [r3, #12]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f042 0208 	orr.w	r2, r2, #8
 800b312:	60da      	str	r2, [r3, #12]
      break;
 800b314:	e00b      	b.n	800b32e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	68da      	ldr	r2, [r3, #12]
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f042 0210 	orr.w	r2, r2, #16
 800b324:	60da      	str	r2, [r3, #12]
      break;
 800b326:	e002      	b.n	800b32e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800b328:	2301      	movs	r3, #1
 800b32a:	73fb      	strb	r3, [r7, #15]
      break;
 800b32c:	bf00      	nop
  }

  if (status == HAL_OK)
 800b32e:	7bfb      	ldrb	r3, [r7, #15]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d14e      	bne.n	800b3d2 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	2201      	movs	r2, #1
 800b33a:	6839      	ldr	r1, [r7, #0]
 800b33c:	4618      	mov	r0, r3
 800b33e:	f000 fe8b 	bl	800c058 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	4a25      	ldr	r2, [pc, #148]	; (800b3dc <HAL_TIM_IC_Start_IT+0x280>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	d022      	beq.n	800b392 <HAL_TIM_IC_Start_IT+0x236>
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b354:	d01d      	beq.n	800b392 <HAL_TIM_IC_Start_IT+0x236>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	4a21      	ldr	r2, [pc, #132]	; (800b3e0 <HAL_TIM_IC_Start_IT+0x284>)
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d018      	beq.n	800b392 <HAL_TIM_IC_Start_IT+0x236>
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	4a1f      	ldr	r2, [pc, #124]	; (800b3e4 <HAL_TIM_IC_Start_IT+0x288>)
 800b366:	4293      	cmp	r3, r2
 800b368:	d013      	beq.n	800b392 <HAL_TIM_IC_Start_IT+0x236>
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	4a1e      	ldr	r2, [pc, #120]	; (800b3e8 <HAL_TIM_IC_Start_IT+0x28c>)
 800b370:	4293      	cmp	r3, r2
 800b372:	d00e      	beq.n	800b392 <HAL_TIM_IC_Start_IT+0x236>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	4a1c      	ldr	r2, [pc, #112]	; (800b3ec <HAL_TIM_IC_Start_IT+0x290>)
 800b37a:	4293      	cmp	r3, r2
 800b37c:	d009      	beq.n	800b392 <HAL_TIM_IC_Start_IT+0x236>
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	4a1b      	ldr	r2, [pc, #108]	; (800b3f0 <HAL_TIM_IC_Start_IT+0x294>)
 800b384:	4293      	cmp	r3, r2
 800b386:	d004      	beq.n	800b392 <HAL_TIM_IC_Start_IT+0x236>
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	4a19      	ldr	r2, [pc, #100]	; (800b3f4 <HAL_TIM_IC_Start_IT+0x298>)
 800b38e:	4293      	cmp	r3, r2
 800b390:	d115      	bne.n	800b3be <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	689a      	ldr	r2, [r3, #8]
 800b398:	4b17      	ldr	r3, [pc, #92]	; (800b3f8 <HAL_TIM_IC_Start_IT+0x29c>)
 800b39a:	4013      	ands	r3, r2
 800b39c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	2b06      	cmp	r3, #6
 800b3a2:	d015      	beq.n	800b3d0 <HAL_TIM_IC_Start_IT+0x274>
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3aa:	d011      	beq.n	800b3d0 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	681a      	ldr	r2, [r3, #0]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f042 0201 	orr.w	r2, r2, #1
 800b3ba:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3bc:	e008      	b.n	800b3d0 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	681a      	ldr	r2, [r3, #0]
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	f042 0201 	orr.w	r2, r2, #1
 800b3cc:	601a      	str	r2, [r3, #0]
 800b3ce:	e000      	b.n	800b3d2 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3d0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800b3d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	3710      	adds	r7, #16
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}
 800b3dc:	40010000 	.word	0x40010000
 800b3e0:	40000400 	.word	0x40000400
 800b3e4:	40000800 	.word	0x40000800
 800b3e8:	40000c00 	.word	0x40000c00
 800b3ec:	40010400 	.word	0x40010400
 800b3f0:	40014000 	.word	0x40014000
 800b3f4:	40001800 	.word	0x40001800
 800b3f8:	00010007 	.word	0x00010007

0800b3fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b082      	sub	sp, #8
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	691b      	ldr	r3, [r3, #16]
 800b40a:	f003 0302 	and.w	r3, r3, #2
 800b40e:	2b02      	cmp	r3, #2
 800b410:	d122      	bne.n	800b458 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	68db      	ldr	r3, [r3, #12]
 800b418:	f003 0302 	and.w	r3, r3, #2
 800b41c:	2b02      	cmp	r3, #2
 800b41e:	d11b      	bne.n	800b458 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	f06f 0202 	mvn.w	r2, #2
 800b428:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2201      	movs	r2, #1
 800b42e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	699b      	ldr	r3, [r3, #24]
 800b436:	f003 0303 	and.w	r3, r3, #3
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d003      	beq.n	800b446 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f7f8 fdc2 	bl	8003fc8 <HAL_TIM_IC_CaptureCallback>
 800b444:	e005      	b.n	800b452 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f000 fae4 	bl	800ba14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f000 faeb 	bl	800ba28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2200      	movs	r2, #0
 800b456:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	691b      	ldr	r3, [r3, #16]
 800b45e:	f003 0304 	and.w	r3, r3, #4
 800b462:	2b04      	cmp	r3, #4
 800b464:	d122      	bne.n	800b4ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	68db      	ldr	r3, [r3, #12]
 800b46c:	f003 0304 	and.w	r3, r3, #4
 800b470:	2b04      	cmp	r3, #4
 800b472:	d11b      	bne.n	800b4ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	f06f 0204 	mvn.w	r2, #4
 800b47c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2202      	movs	r2, #2
 800b482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	699b      	ldr	r3, [r3, #24]
 800b48a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d003      	beq.n	800b49a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f7f8 fd98 	bl	8003fc8 <HAL_TIM_IC_CaptureCallback>
 800b498:	e005      	b.n	800b4a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f000 faba 	bl	800ba14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f000 fac1 	bl	800ba28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	691b      	ldr	r3, [r3, #16]
 800b4b2:	f003 0308 	and.w	r3, r3, #8
 800b4b6:	2b08      	cmp	r3, #8
 800b4b8:	d122      	bne.n	800b500 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	68db      	ldr	r3, [r3, #12]
 800b4c0:	f003 0308 	and.w	r3, r3, #8
 800b4c4:	2b08      	cmp	r3, #8
 800b4c6:	d11b      	bne.n	800b500 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f06f 0208 	mvn.w	r2, #8
 800b4d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2204      	movs	r2, #4
 800b4d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	69db      	ldr	r3, [r3, #28]
 800b4de:	f003 0303 	and.w	r3, r3, #3
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d003      	beq.n	800b4ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f7f8 fd6e 	bl	8003fc8 <HAL_TIM_IC_CaptureCallback>
 800b4ec:	e005      	b.n	800b4fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f000 fa90 	bl	800ba14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f000 fa97 	bl	800ba28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	691b      	ldr	r3, [r3, #16]
 800b506:	f003 0310 	and.w	r3, r3, #16
 800b50a:	2b10      	cmp	r3, #16
 800b50c:	d122      	bne.n	800b554 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	68db      	ldr	r3, [r3, #12]
 800b514:	f003 0310 	and.w	r3, r3, #16
 800b518:	2b10      	cmp	r3, #16
 800b51a:	d11b      	bne.n	800b554 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f06f 0210 	mvn.w	r2, #16
 800b524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2208      	movs	r2, #8
 800b52a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	69db      	ldr	r3, [r3, #28]
 800b532:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b536:	2b00      	cmp	r3, #0
 800b538:	d003      	beq.n	800b542 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f7f8 fd44 	bl	8003fc8 <HAL_TIM_IC_CaptureCallback>
 800b540:	e005      	b.n	800b54e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f000 fa66 	bl	800ba14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f000 fa6d 	bl	800ba28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2200      	movs	r2, #0
 800b552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	691b      	ldr	r3, [r3, #16]
 800b55a:	f003 0301 	and.w	r3, r3, #1
 800b55e:	2b01      	cmp	r3, #1
 800b560:	d10e      	bne.n	800b580 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	68db      	ldr	r3, [r3, #12]
 800b568:	f003 0301 	and.w	r3, r3, #1
 800b56c:	2b01      	cmp	r3, #1
 800b56e:	d107      	bne.n	800b580 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f06f 0201 	mvn.w	r2, #1
 800b578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f7f8 fcba 	bl	8003ef4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	691b      	ldr	r3, [r3, #16]
 800b586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b58a:	2b80      	cmp	r3, #128	; 0x80
 800b58c:	d10e      	bne.n	800b5ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	68db      	ldr	r3, [r3, #12]
 800b594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b598:	2b80      	cmp	r3, #128	; 0x80
 800b59a:	d107      	bne.n	800b5ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b5a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f000 fe14 	bl	800c1d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	691b      	ldr	r3, [r3, #16]
 800b5b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5ba:	d10e      	bne.n	800b5da <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	68db      	ldr	r3, [r3, #12]
 800b5c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5c6:	2b80      	cmp	r3, #128	; 0x80
 800b5c8:	d107      	bne.n	800b5da <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b5d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f000 fe07 	bl	800c1e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	691b      	ldr	r3, [r3, #16]
 800b5e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5e4:	2b40      	cmp	r3, #64	; 0x40
 800b5e6:	d10e      	bne.n	800b606 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	68db      	ldr	r3, [r3, #12]
 800b5ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5f2:	2b40      	cmp	r3, #64	; 0x40
 800b5f4:	d107      	bne.n	800b606 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b5fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f000 fa1b 	bl	800ba3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	691b      	ldr	r3, [r3, #16]
 800b60c:	f003 0320 	and.w	r3, r3, #32
 800b610:	2b20      	cmp	r3, #32
 800b612:	d10e      	bne.n	800b632 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	68db      	ldr	r3, [r3, #12]
 800b61a:	f003 0320 	and.w	r3, r3, #32
 800b61e:	2b20      	cmp	r3, #32
 800b620:	d107      	bne.n	800b632 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f06f 0220 	mvn.w	r2, #32
 800b62a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f000 fdc7 	bl	800c1c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b632:	bf00      	nop
 800b634:	3708      	adds	r7, #8
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}

0800b63a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800b63a:	b580      	push	{r7, lr}
 800b63c:	b086      	sub	sp, #24
 800b63e:	af00      	add	r7, sp, #0
 800b640:	60f8      	str	r0, [r7, #12]
 800b642:	60b9      	str	r1, [r7, #8]
 800b644:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b646:	2300      	movs	r3, #0
 800b648:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b650:	2b01      	cmp	r3, #1
 800b652:	d101      	bne.n	800b658 <HAL_TIM_IC_ConfigChannel+0x1e>
 800b654:	2302      	movs	r3, #2
 800b656:	e088      	b.n	800b76a <HAL_TIM_IC_ConfigChannel+0x130>
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	2201      	movs	r2, #1
 800b65c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d11b      	bne.n	800b69e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	6818      	ldr	r0, [r3, #0]
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	6819      	ldr	r1, [r3, #0]
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	685a      	ldr	r2, [r3, #4]
 800b672:	68bb      	ldr	r3, [r7, #8]
 800b674:	68db      	ldr	r3, [r3, #12]
 800b676:	f000 fb2b 	bl	800bcd0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	699a      	ldr	r2, [r3, #24]
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f022 020c 	bic.w	r2, r2, #12
 800b688:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	6999      	ldr	r1, [r3, #24]
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	689a      	ldr	r2, [r3, #8]
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	430a      	orrs	r2, r1
 800b69a:	619a      	str	r2, [r3, #24]
 800b69c:	e060      	b.n	800b760 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2b04      	cmp	r3, #4
 800b6a2:	d11c      	bne.n	800b6de <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	6818      	ldr	r0, [r3, #0]
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	6819      	ldr	r1, [r3, #0]
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	685a      	ldr	r2, [r3, #4]
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	68db      	ldr	r3, [r3, #12]
 800b6b4:	f000 fbaf 	bl	800be16 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	699a      	ldr	r2, [r3, #24]
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b6c6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	6999      	ldr	r1, [r3, #24]
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	689b      	ldr	r3, [r3, #8]
 800b6d2:	021a      	lsls	r2, r3, #8
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	430a      	orrs	r2, r1
 800b6da:	619a      	str	r2, [r3, #24]
 800b6dc:	e040      	b.n	800b760 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2b08      	cmp	r3, #8
 800b6e2:	d11b      	bne.n	800b71c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	6818      	ldr	r0, [r3, #0]
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	6819      	ldr	r1, [r3, #0]
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	685a      	ldr	r2, [r3, #4]
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	68db      	ldr	r3, [r3, #12]
 800b6f4:	f000 fbfc 	bl	800bef0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	69da      	ldr	r2, [r3, #28]
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	f022 020c 	bic.w	r2, r2, #12
 800b706:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	69d9      	ldr	r1, [r3, #28]
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	689a      	ldr	r2, [r3, #8]
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	430a      	orrs	r2, r1
 800b718:	61da      	str	r2, [r3, #28]
 800b71a:	e021      	b.n	800b760 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2b0c      	cmp	r3, #12
 800b720:	d11c      	bne.n	800b75c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	6818      	ldr	r0, [r3, #0]
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	6819      	ldr	r1, [r3, #0]
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	685a      	ldr	r2, [r3, #4]
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	68db      	ldr	r3, [r3, #12]
 800b732:	f000 fc19 	bl	800bf68 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	69da      	ldr	r2, [r3, #28]
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b744:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	69d9      	ldr	r1, [r3, #28]
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	689b      	ldr	r3, [r3, #8]
 800b750:	021a      	lsls	r2, r3, #8
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	430a      	orrs	r2, r1
 800b758:	61da      	str	r2, [r3, #28]
 800b75a:	e001      	b.n	800b760 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800b75c:	2301      	movs	r3, #1
 800b75e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	2200      	movs	r2, #0
 800b764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b768:	7dfb      	ldrb	r3, [r7, #23]
}
 800b76a:	4618      	mov	r0, r3
 800b76c:	3718      	adds	r7, #24
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}
	...

0800b774 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b084      	sub	sp, #16
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b77e:	2300      	movs	r3, #0
 800b780:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b788:	2b01      	cmp	r3, #1
 800b78a:	d101      	bne.n	800b790 <HAL_TIM_ConfigClockSource+0x1c>
 800b78c:	2302      	movs	r3, #2
 800b78e:	e0b4      	b.n	800b8fa <HAL_TIM_ConfigClockSource+0x186>
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2201      	movs	r2, #1
 800b794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2202      	movs	r2, #2
 800b79c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	689b      	ldr	r3, [r3, #8]
 800b7a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b7a8:	68ba      	ldr	r2, [r7, #8]
 800b7aa:	4b56      	ldr	r3, [pc, #344]	; (800b904 <HAL_TIM_ConfigClockSource+0x190>)
 800b7ac:	4013      	ands	r3, r2
 800b7ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b7b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	68ba      	ldr	r2, [r7, #8]
 800b7be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7c8:	d03e      	beq.n	800b848 <HAL_TIM_ConfigClockSource+0xd4>
 800b7ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7ce:	f200 8087 	bhi.w	800b8e0 <HAL_TIM_ConfigClockSource+0x16c>
 800b7d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7d6:	f000 8086 	beq.w	800b8e6 <HAL_TIM_ConfigClockSource+0x172>
 800b7da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7de:	d87f      	bhi.n	800b8e0 <HAL_TIM_ConfigClockSource+0x16c>
 800b7e0:	2b70      	cmp	r3, #112	; 0x70
 800b7e2:	d01a      	beq.n	800b81a <HAL_TIM_ConfigClockSource+0xa6>
 800b7e4:	2b70      	cmp	r3, #112	; 0x70
 800b7e6:	d87b      	bhi.n	800b8e0 <HAL_TIM_ConfigClockSource+0x16c>
 800b7e8:	2b60      	cmp	r3, #96	; 0x60
 800b7ea:	d050      	beq.n	800b88e <HAL_TIM_ConfigClockSource+0x11a>
 800b7ec:	2b60      	cmp	r3, #96	; 0x60
 800b7ee:	d877      	bhi.n	800b8e0 <HAL_TIM_ConfigClockSource+0x16c>
 800b7f0:	2b50      	cmp	r3, #80	; 0x50
 800b7f2:	d03c      	beq.n	800b86e <HAL_TIM_ConfigClockSource+0xfa>
 800b7f4:	2b50      	cmp	r3, #80	; 0x50
 800b7f6:	d873      	bhi.n	800b8e0 <HAL_TIM_ConfigClockSource+0x16c>
 800b7f8:	2b40      	cmp	r3, #64	; 0x40
 800b7fa:	d058      	beq.n	800b8ae <HAL_TIM_ConfigClockSource+0x13a>
 800b7fc:	2b40      	cmp	r3, #64	; 0x40
 800b7fe:	d86f      	bhi.n	800b8e0 <HAL_TIM_ConfigClockSource+0x16c>
 800b800:	2b30      	cmp	r3, #48	; 0x30
 800b802:	d064      	beq.n	800b8ce <HAL_TIM_ConfigClockSource+0x15a>
 800b804:	2b30      	cmp	r3, #48	; 0x30
 800b806:	d86b      	bhi.n	800b8e0 <HAL_TIM_ConfigClockSource+0x16c>
 800b808:	2b20      	cmp	r3, #32
 800b80a:	d060      	beq.n	800b8ce <HAL_TIM_ConfigClockSource+0x15a>
 800b80c:	2b20      	cmp	r3, #32
 800b80e:	d867      	bhi.n	800b8e0 <HAL_TIM_ConfigClockSource+0x16c>
 800b810:	2b00      	cmp	r3, #0
 800b812:	d05c      	beq.n	800b8ce <HAL_TIM_ConfigClockSource+0x15a>
 800b814:	2b10      	cmp	r3, #16
 800b816:	d05a      	beq.n	800b8ce <HAL_TIM_ConfigClockSource+0x15a>
 800b818:	e062      	b.n	800b8e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6818      	ldr	r0, [r3, #0]
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	6899      	ldr	r1, [r3, #8]
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	685a      	ldr	r2, [r3, #4]
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	68db      	ldr	r3, [r3, #12]
 800b82a:	f000 fbf5 	bl	800c018 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	689b      	ldr	r3, [r3, #8]
 800b834:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b83c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	68ba      	ldr	r2, [r7, #8]
 800b844:	609a      	str	r2, [r3, #8]
      break;
 800b846:	e04f      	b.n	800b8e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6818      	ldr	r0, [r3, #0]
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	6899      	ldr	r1, [r3, #8]
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	685a      	ldr	r2, [r3, #4]
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	68db      	ldr	r3, [r3, #12]
 800b858:	f000 fbde 	bl	800c018 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	689a      	ldr	r2, [r3, #8]
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b86a:	609a      	str	r2, [r3, #8]
      break;
 800b86c:	e03c      	b.n	800b8e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6818      	ldr	r0, [r3, #0]
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	6859      	ldr	r1, [r3, #4]
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	68db      	ldr	r3, [r3, #12]
 800b87a:	461a      	mov	r2, r3
 800b87c:	f000 fa9c 	bl	800bdb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	2150      	movs	r1, #80	; 0x50
 800b886:	4618      	mov	r0, r3
 800b888:	f000 fbab 	bl	800bfe2 <TIM_ITRx_SetConfig>
      break;
 800b88c:	e02c      	b.n	800b8e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6818      	ldr	r0, [r3, #0]
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	6859      	ldr	r1, [r3, #4]
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	68db      	ldr	r3, [r3, #12]
 800b89a:	461a      	mov	r2, r3
 800b89c:	f000 faf8 	bl	800be90 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	2160      	movs	r1, #96	; 0x60
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f000 fb9b 	bl	800bfe2 <TIM_ITRx_SetConfig>
      break;
 800b8ac:	e01c      	b.n	800b8e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6818      	ldr	r0, [r3, #0]
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	6859      	ldr	r1, [r3, #4]
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	68db      	ldr	r3, [r3, #12]
 800b8ba:	461a      	mov	r2, r3
 800b8bc:	f000 fa7c 	bl	800bdb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	2140      	movs	r1, #64	; 0x40
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f000 fb8b 	bl	800bfe2 <TIM_ITRx_SetConfig>
      break;
 800b8cc:	e00c      	b.n	800b8e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681a      	ldr	r2, [r3, #0]
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	4619      	mov	r1, r3
 800b8d8:	4610      	mov	r0, r2
 800b8da:	f000 fb82 	bl	800bfe2 <TIM_ITRx_SetConfig>
      break;
 800b8de:	e003      	b.n	800b8e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	73fb      	strb	r3, [r7, #15]
      break;
 800b8e4:	e000      	b.n	800b8e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b8e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2201      	movs	r2, #1
 800b8ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b8f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	3710      	adds	r7, #16
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}
 800b902:	bf00      	nop
 800b904:	fffeff88 	.word	0xfffeff88

0800b908 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b082      	sub	sp, #8
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
 800b910:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b918:	2b01      	cmp	r3, #1
 800b91a:	d101      	bne.n	800b920 <HAL_TIM_SlaveConfigSynchro+0x18>
 800b91c:	2302      	movs	r3, #2
 800b91e:	e031      	b.n	800b984 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2201      	movs	r2, #1
 800b924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2202      	movs	r2, #2
 800b92c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800b930:	6839      	ldr	r1, [r7, #0]
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f000 f938 	bl	800bba8 <TIM_SlaveTimer_SetConfig>
 800b938:	4603      	mov	r3, r0
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d009      	beq.n	800b952 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2201      	movs	r2, #1
 800b942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2200      	movs	r2, #0
 800b94a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800b94e:	2301      	movs	r3, #1
 800b950:	e018      	b.n	800b984 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	68da      	ldr	r2, [r3, #12]
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b960:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	68da      	ldr	r2, [r3, #12]
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b970:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2201      	movs	r2, #1
 800b976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2200      	movs	r2, #0
 800b97e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b982:	2300      	movs	r3, #0
}
 800b984:	4618      	mov	r0, r3
 800b986:	3708      	adds	r7, #8
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}

0800b98c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b98c:	b480      	push	{r7}
 800b98e:	b085      	sub	sp, #20
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
 800b994:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800b996:	2300      	movs	r3, #0
 800b998:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	2b0c      	cmp	r3, #12
 800b99e:	d831      	bhi.n	800ba04 <HAL_TIM_ReadCapturedValue+0x78>
 800b9a0:	a201      	add	r2, pc, #4	; (adr r2, 800b9a8 <HAL_TIM_ReadCapturedValue+0x1c>)
 800b9a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9a6:	bf00      	nop
 800b9a8:	0800b9dd 	.word	0x0800b9dd
 800b9ac:	0800ba05 	.word	0x0800ba05
 800b9b0:	0800ba05 	.word	0x0800ba05
 800b9b4:	0800ba05 	.word	0x0800ba05
 800b9b8:	0800b9e7 	.word	0x0800b9e7
 800b9bc:	0800ba05 	.word	0x0800ba05
 800b9c0:	0800ba05 	.word	0x0800ba05
 800b9c4:	0800ba05 	.word	0x0800ba05
 800b9c8:	0800b9f1 	.word	0x0800b9f1
 800b9cc:	0800ba05 	.word	0x0800ba05
 800b9d0:	0800ba05 	.word	0x0800ba05
 800b9d4:	0800ba05 	.word	0x0800ba05
 800b9d8:	0800b9fb 	.word	0x0800b9fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9e2:	60fb      	str	r3, [r7, #12]

      break;
 800b9e4:	e00f      	b.n	800ba06 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ec:	60fb      	str	r3, [r7, #12]

      break;
 800b9ee:	e00a      	b.n	800ba06 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9f6:	60fb      	str	r3, [r7, #12]

      break;
 800b9f8:	e005      	b.n	800ba06 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba00:	60fb      	str	r3, [r7, #12]

      break;
 800ba02:	e000      	b.n	800ba06 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800ba04:	bf00      	nop
  }

  return tmpreg;
 800ba06:	68fb      	ldr	r3, [r7, #12]
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3714      	adds	r7, #20
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba12:	4770      	bx	lr

0800ba14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ba14:	b480      	push	{r7}
 800ba16:	b083      	sub	sp, #12
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ba1c:	bf00      	nop
 800ba1e:	370c      	adds	r7, #12
 800ba20:	46bd      	mov	sp, r7
 800ba22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba26:	4770      	bx	lr

0800ba28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b083      	sub	sp, #12
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ba30:	bf00      	nop
 800ba32:	370c      	adds	r7, #12
 800ba34:	46bd      	mov	sp, r7
 800ba36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3a:	4770      	bx	lr

0800ba3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ba3c:	b480      	push	{r7}
 800ba3e:	b083      	sub	sp, #12
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ba44:	bf00      	nop
 800ba46:	370c      	adds	r7, #12
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4e:	4770      	bx	lr

0800ba50 <HAL_TIM_GetActiveChannel>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM handle
  * @retval Active channel
  */
HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(TIM_HandleTypeDef *htim)
{
 800ba50:	b480      	push	{r7}
 800ba52:	b083      	sub	sp, #12
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
  return htim->Channel;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	7f1b      	ldrb	r3, [r3, #28]
}
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	370c      	adds	r7, #12
 800ba60:	46bd      	mov	sp, r7
 800ba62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba66:	4770      	bx	lr

0800ba68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b085      	sub	sp, #20
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
 800ba70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	4a40      	ldr	r2, [pc, #256]	; (800bb7c <TIM_Base_SetConfig+0x114>)
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	d013      	beq.n	800baa8 <TIM_Base_SetConfig+0x40>
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba86:	d00f      	beq.n	800baa8 <TIM_Base_SetConfig+0x40>
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	4a3d      	ldr	r2, [pc, #244]	; (800bb80 <TIM_Base_SetConfig+0x118>)
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	d00b      	beq.n	800baa8 <TIM_Base_SetConfig+0x40>
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	4a3c      	ldr	r2, [pc, #240]	; (800bb84 <TIM_Base_SetConfig+0x11c>)
 800ba94:	4293      	cmp	r3, r2
 800ba96:	d007      	beq.n	800baa8 <TIM_Base_SetConfig+0x40>
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	4a3b      	ldr	r2, [pc, #236]	; (800bb88 <TIM_Base_SetConfig+0x120>)
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	d003      	beq.n	800baa8 <TIM_Base_SetConfig+0x40>
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	4a3a      	ldr	r2, [pc, #232]	; (800bb8c <TIM_Base_SetConfig+0x124>)
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d108      	bne.n	800baba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800baae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	685b      	ldr	r3, [r3, #4]
 800bab4:	68fa      	ldr	r2, [r7, #12]
 800bab6:	4313      	orrs	r3, r2
 800bab8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	4a2f      	ldr	r2, [pc, #188]	; (800bb7c <TIM_Base_SetConfig+0x114>)
 800babe:	4293      	cmp	r3, r2
 800bac0:	d02b      	beq.n	800bb1a <TIM_Base_SetConfig+0xb2>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bac8:	d027      	beq.n	800bb1a <TIM_Base_SetConfig+0xb2>
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	4a2c      	ldr	r2, [pc, #176]	; (800bb80 <TIM_Base_SetConfig+0x118>)
 800bace:	4293      	cmp	r3, r2
 800bad0:	d023      	beq.n	800bb1a <TIM_Base_SetConfig+0xb2>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	4a2b      	ldr	r2, [pc, #172]	; (800bb84 <TIM_Base_SetConfig+0x11c>)
 800bad6:	4293      	cmp	r3, r2
 800bad8:	d01f      	beq.n	800bb1a <TIM_Base_SetConfig+0xb2>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	4a2a      	ldr	r2, [pc, #168]	; (800bb88 <TIM_Base_SetConfig+0x120>)
 800bade:	4293      	cmp	r3, r2
 800bae0:	d01b      	beq.n	800bb1a <TIM_Base_SetConfig+0xb2>
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	4a29      	ldr	r2, [pc, #164]	; (800bb8c <TIM_Base_SetConfig+0x124>)
 800bae6:	4293      	cmp	r3, r2
 800bae8:	d017      	beq.n	800bb1a <TIM_Base_SetConfig+0xb2>
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	4a28      	ldr	r2, [pc, #160]	; (800bb90 <TIM_Base_SetConfig+0x128>)
 800baee:	4293      	cmp	r3, r2
 800baf0:	d013      	beq.n	800bb1a <TIM_Base_SetConfig+0xb2>
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	4a27      	ldr	r2, [pc, #156]	; (800bb94 <TIM_Base_SetConfig+0x12c>)
 800baf6:	4293      	cmp	r3, r2
 800baf8:	d00f      	beq.n	800bb1a <TIM_Base_SetConfig+0xb2>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	4a26      	ldr	r2, [pc, #152]	; (800bb98 <TIM_Base_SetConfig+0x130>)
 800bafe:	4293      	cmp	r3, r2
 800bb00:	d00b      	beq.n	800bb1a <TIM_Base_SetConfig+0xb2>
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	4a25      	ldr	r2, [pc, #148]	; (800bb9c <TIM_Base_SetConfig+0x134>)
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d007      	beq.n	800bb1a <TIM_Base_SetConfig+0xb2>
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	4a24      	ldr	r2, [pc, #144]	; (800bba0 <TIM_Base_SetConfig+0x138>)
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	d003      	beq.n	800bb1a <TIM_Base_SetConfig+0xb2>
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	4a23      	ldr	r2, [pc, #140]	; (800bba4 <TIM_Base_SetConfig+0x13c>)
 800bb16:	4293      	cmp	r3, r2
 800bb18:	d108      	bne.n	800bb2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	68db      	ldr	r3, [r3, #12]
 800bb26:	68fa      	ldr	r2, [r7, #12]
 800bb28:	4313      	orrs	r3, r2
 800bb2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	695b      	ldr	r3, [r3, #20]
 800bb36:	4313      	orrs	r3, r2
 800bb38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	68fa      	ldr	r2, [r7, #12]
 800bb3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	689a      	ldr	r2, [r3, #8]
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	681a      	ldr	r2, [r3, #0]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	4a0a      	ldr	r2, [pc, #40]	; (800bb7c <TIM_Base_SetConfig+0x114>)
 800bb54:	4293      	cmp	r3, r2
 800bb56:	d003      	beq.n	800bb60 <TIM_Base_SetConfig+0xf8>
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	4a0c      	ldr	r2, [pc, #48]	; (800bb8c <TIM_Base_SetConfig+0x124>)
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	d103      	bne.n	800bb68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	691a      	ldr	r2, [r3, #16]
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2201      	movs	r2, #1
 800bb6c:	615a      	str	r2, [r3, #20]
}
 800bb6e:	bf00      	nop
 800bb70:	3714      	adds	r7, #20
 800bb72:	46bd      	mov	sp, r7
 800bb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb78:	4770      	bx	lr
 800bb7a:	bf00      	nop
 800bb7c:	40010000 	.word	0x40010000
 800bb80:	40000400 	.word	0x40000400
 800bb84:	40000800 	.word	0x40000800
 800bb88:	40000c00 	.word	0x40000c00
 800bb8c:	40010400 	.word	0x40010400
 800bb90:	40014000 	.word	0x40014000
 800bb94:	40014400 	.word	0x40014400
 800bb98:	40014800 	.word	0x40014800
 800bb9c:	40001800 	.word	0x40001800
 800bba0:	40001c00 	.word	0x40001c00
 800bba4:	40002000 	.word	0x40002000

0800bba8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b086      	sub	sp, #24
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
 800bbb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	689b      	ldr	r3, [r3, #8]
 800bbbc:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bbbe:	693b      	ldr	r3, [r7, #16]
 800bbc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbc4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	685b      	ldr	r3, [r3, #4]
 800bbca:	693a      	ldr	r2, [r7, #16]
 800bbcc:	4313      	orrs	r3, r2
 800bbce:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800bbd0:	693a      	ldr	r2, [r7, #16]
 800bbd2:	4b3e      	ldr	r3, [pc, #248]	; (800bccc <TIM_SlaveTimer_SetConfig+0x124>)
 800bbd4:	4013      	ands	r3, r2
 800bbd6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	693a      	ldr	r2, [r7, #16]
 800bbde:	4313      	orrs	r3, r2
 800bbe0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	693a      	ldr	r2, [r7, #16]
 800bbe8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	685b      	ldr	r3, [r3, #4]
 800bbee:	2b70      	cmp	r3, #112	; 0x70
 800bbf0:	d01a      	beq.n	800bc28 <TIM_SlaveTimer_SetConfig+0x80>
 800bbf2:	2b70      	cmp	r3, #112	; 0x70
 800bbf4:	d860      	bhi.n	800bcb8 <TIM_SlaveTimer_SetConfig+0x110>
 800bbf6:	2b60      	cmp	r3, #96	; 0x60
 800bbf8:	d054      	beq.n	800bca4 <TIM_SlaveTimer_SetConfig+0xfc>
 800bbfa:	2b60      	cmp	r3, #96	; 0x60
 800bbfc:	d85c      	bhi.n	800bcb8 <TIM_SlaveTimer_SetConfig+0x110>
 800bbfe:	2b50      	cmp	r3, #80	; 0x50
 800bc00:	d046      	beq.n	800bc90 <TIM_SlaveTimer_SetConfig+0xe8>
 800bc02:	2b50      	cmp	r3, #80	; 0x50
 800bc04:	d858      	bhi.n	800bcb8 <TIM_SlaveTimer_SetConfig+0x110>
 800bc06:	2b40      	cmp	r3, #64	; 0x40
 800bc08:	d019      	beq.n	800bc3e <TIM_SlaveTimer_SetConfig+0x96>
 800bc0a:	2b40      	cmp	r3, #64	; 0x40
 800bc0c:	d854      	bhi.n	800bcb8 <TIM_SlaveTimer_SetConfig+0x110>
 800bc0e:	2b30      	cmp	r3, #48	; 0x30
 800bc10:	d055      	beq.n	800bcbe <TIM_SlaveTimer_SetConfig+0x116>
 800bc12:	2b30      	cmp	r3, #48	; 0x30
 800bc14:	d850      	bhi.n	800bcb8 <TIM_SlaveTimer_SetConfig+0x110>
 800bc16:	2b20      	cmp	r3, #32
 800bc18:	d051      	beq.n	800bcbe <TIM_SlaveTimer_SetConfig+0x116>
 800bc1a:	2b20      	cmp	r3, #32
 800bc1c:	d84c      	bhi.n	800bcb8 <TIM_SlaveTimer_SetConfig+0x110>
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d04d      	beq.n	800bcbe <TIM_SlaveTimer_SetConfig+0x116>
 800bc22:	2b10      	cmp	r3, #16
 800bc24:	d04b      	beq.n	800bcbe <TIM_SlaveTimer_SetConfig+0x116>
 800bc26:	e047      	b.n	800bcb8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	6818      	ldr	r0, [r3, #0]
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	68d9      	ldr	r1, [r3, #12]
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	689a      	ldr	r2, [r3, #8]
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	691b      	ldr	r3, [r3, #16]
 800bc38:	f000 f9ee 	bl	800c018 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800bc3c:	e040      	b.n	800bcc0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	2b05      	cmp	r3, #5
 800bc44:	d101      	bne.n	800bc4a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800bc46:	2301      	movs	r3, #1
 800bc48:	e03b      	b.n	800bcc2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	6a1b      	ldr	r3, [r3, #32]
 800bc50:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	6a1a      	ldr	r2, [r3, #32]
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	f022 0201 	bic.w	r2, r2, #1
 800bc60:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	699b      	ldr	r3, [r3, #24]
 800bc68:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bc70:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	691b      	ldr	r3, [r3, #16]
 800bc76:	011b      	lsls	r3, r3, #4
 800bc78:	68ba      	ldr	r2, [r7, #8]
 800bc7a:	4313      	orrs	r3, r2
 800bc7c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	68ba      	ldr	r2, [r7, #8]
 800bc84:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	68fa      	ldr	r2, [r7, #12]
 800bc8c:	621a      	str	r2, [r3, #32]
      break;
 800bc8e:	e017      	b.n	800bcc0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	6818      	ldr	r0, [r3, #0]
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	6899      	ldr	r1, [r3, #8]
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	691b      	ldr	r3, [r3, #16]
 800bc9c:	461a      	mov	r2, r3
 800bc9e:	f000 f88b 	bl	800bdb8 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800bca2:	e00d      	b.n	800bcc0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6818      	ldr	r0, [r3, #0]
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	6899      	ldr	r1, [r3, #8]
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	691b      	ldr	r3, [r3, #16]
 800bcb0:	461a      	mov	r2, r3
 800bcb2:	f000 f8ed 	bl	800be90 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800bcb6:	e003      	b.n	800bcc0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800bcb8:	2301      	movs	r3, #1
 800bcba:	75fb      	strb	r3, [r7, #23]
      break;
 800bcbc:	e000      	b.n	800bcc0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800bcbe:	bf00      	nop
  }

  return status;
 800bcc0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3718      	adds	r7, #24
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}
 800bcca:	bf00      	nop
 800bccc:	fffefff8 	.word	0xfffefff8

0800bcd0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800bcd0:	b480      	push	{r7}
 800bcd2:	b087      	sub	sp, #28
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	60f8      	str	r0, [r7, #12]
 800bcd8:	60b9      	str	r1, [r7, #8]
 800bcda:	607a      	str	r2, [r7, #4]
 800bcdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	6a1b      	ldr	r3, [r3, #32]
 800bce2:	f023 0201 	bic.w	r2, r3, #1
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	699b      	ldr	r3, [r3, #24]
 800bcee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	6a1b      	ldr	r3, [r3, #32]
 800bcf4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	4a28      	ldr	r2, [pc, #160]	; (800bd9c <TIM_TI1_SetConfig+0xcc>)
 800bcfa:	4293      	cmp	r3, r2
 800bcfc:	d01b      	beq.n	800bd36 <TIM_TI1_SetConfig+0x66>
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd04:	d017      	beq.n	800bd36 <TIM_TI1_SetConfig+0x66>
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	4a25      	ldr	r2, [pc, #148]	; (800bda0 <TIM_TI1_SetConfig+0xd0>)
 800bd0a:	4293      	cmp	r3, r2
 800bd0c:	d013      	beq.n	800bd36 <TIM_TI1_SetConfig+0x66>
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	4a24      	ldr	r2, [pc, #144]	; (800bda4 <TIM_TI1_SetConfig+0xd4>)
 800bd12:	4293      	cmp	r3, r2
 800bd14:	d00f      	beq.n	800bd36 <TIM_TI1_SetConfig+0x66>
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	4a23      	ldr	r2, [pc, #140]	; (800bda8 <TIM_TI1_SetConfig+0xd8>)
 800bd1a:	4293      	cmp	r3, r2
 800bd1c:	d00b      	beq.n	800bd36 <TIM_TI1_SetConfig+0x66>
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	4a22      	ldr	r2, [pc, #136]	; (800bdac <TIM_TI1_SetConfig+0xdc>)
 800bd22:	4293      	cmp	r3, r2
 800bd24:	d007      	beq.n	800bd36 <TIM_TI1_SetConfig+0x66>
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	4a21      	ldr	r2, [pc, #132]	; (800bdb0 <TIM_TI1_SetConfig+0xe0>)
 800bd2a:	4293      	cmp	r3, r2
 800bd2c:	d003      	beq.n	800bd36 <TIM_TI1_SetConfig+0x66>
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	4a20      	ldr	r2, [pc, #128]	; (800bdb4 <TIM_TI1_SetConfig+0xe4>)
 800bd32:	4293      	cmp	r3, r2
 800bd34:	d101      	bne.n	800bd3a <TIM_TI1_SetConfig+0x6a>
 800bd36:	2301      	movs	r3, #1
 800bd38:	e000      	b.n	800bd3c <TIM_TI1_SetConfig+0x6c>
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d008      	beq.n	800bd52 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	f023 0303 	bic.w	r3, r3, #3
 800bd46:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800bd48:	697a      	ldr	r2, [r7, #20]
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	4313      	orrs	r3, r2
 800bd4e:	617b      	str	r3, [r7, #20]
 800bd50:	e003      	b.n	800bd5a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	f043 0301 	orr.w	r3, r3, #1
 800bd58:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bd60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	011b      	lsls	r3, r3, #4
 800bd66:	b2db      	uxtb	r3, r3
 800bd68:	697a      	ldr	r2, [r7, #20]
 800bd6a:	4313      	orrs	r3, r2
 800bd6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bd6e:	693b      	ldr	r3, [r7, #16]
 800bd70:	f023 030a 	bic.w	r3, r3, #10
 800bd74:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	f003 030a 	and.w	r3, r3, #10
 800bd7c:	693a      	ldr	r2, [r7, #16]
 800bd7e:	4313      	orrs	r3, r2
 800bd80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	697a      	ldr	r2, [r7, #20]
 800bd86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	693a      	ldr	r2, [r7, #16]
 800bd8c:	621a      	str	r2, [r3, #32]
}
 800bd8e:	bf00      	nop
 800bd90:	371c      	adds	r7, #28
 800bd92:	46bd      	mov	sp, r7
 800bd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd98:	4770      	bx	lr
 800bd9a:	bf00      	nop
 800bd9c:	40010000 	.word	0x40010000
 800bda0:	40000400 	.word	0x40000400
 800bda4:	40000800 	.word	0x40000800
 800bda8:	40000c00 	.word	0x40000c00
 800bdac:	40010400 	.word	0x40010400
 800bdb0:	40014000 	.word	0x40014000
 800bdb4:	40001800 	.word	0x40001800

0800bdb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bdb8:	b480      	push	{r7}
 800bdba:	b087      	sub	sp, #28
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	60f8      	str	r0, [r7, #12]
 800bdc0:	60b9      	str	r1, [r7, #8]
 800bdc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	6a1b      	ldr	r3, [r3, #32]
 800bdc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	6a1b      	ldr	r3, [r3, #32]
 800bdce:	f023 0201 	bic.w	r2, r3, #1
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	699b      	ldr	r3, [r3, #24]
 800bdda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bddc:	693b      	ldr	r3, [r7, #16]
 800bdde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bde2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	011b      	lsls	r3, r3, #4
 800bde8:	693a      	ldr	r2, [r7, #16]
 800bdea:	4313      	orrs	r3, r2
 800bdec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bdee:	697b      	ldr	r3, [r7, #20]
 800bdf0:	f023 030a 	bic.w	r3, r3, #10
 800bdf4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bdf6:	697a      	ldr	r2, [r7, #20]
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	4313      	orrs	r3, r2
 800bdfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	693a      	ldr	r2, [r7, #16]
 800be02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	697a      	ldr	r2, [r7, #20]
 800be08:	621a      	str	r2, [r3, #32]
}
 800be0a:	bf00      	nop
 800be0c:	371c      	adds	r7, #28
 800be0e:	46bd      	mov	sp, r7
 800be10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be14:	4770      	bx	lr

0800be16 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800be16:	b480      	push	{r7}
 800be18:	b087      	sub	sp, #28
 800be1a:	af00      	add	r7, sp, #0
 800be1c:	60f8      	str	r0, [r7, #12]
 800be1e:	60b9      	str	r1, [r7, #8]
 800be20:	607a      	str	r2, [r7, #4]
 800be22:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	6a1b      	ldr	r3, [r3, #32]
 800be28:	f023 0210 	bic.w	r2, r3, #16
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	699b      	ldr	r3, [r3, #24]
 800be34:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	6a1b      	ldr	r3, [r3, #32]
 800be3a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800be3c:	697b      	ldr	r3, [r7, #20]
 800be3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be42:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	021b      	lsls	r3, r3, #8
 800be48:	697a      	ldr	r2, [r7, #20]
 800be4a:	4313      	orrs	r3, r2
 800be4c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800be4e:	697b      	ldr	r3, [r7, #20]
 800be50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800be54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	031b      	lsls	r3, r3, #12
 800be5a:	b29b      	uxth	r3, r3
 800be5c:	697a      	ldr	r2, [r7, #20]
 800be5e:	4313      	orrs	r3, r2
 800be60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800be68:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800be6a:	68bb      	ldr	r3, [r7, #8]
 800be6c:	011b      	lsls	r3, r3, #4
 800be6e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800be72:	693a      	ldr	r2, [r7, #16]
 800be74:	4313      	orrs	r3, r2
 800be76:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	697a      	ldr	r2, [r7, #20]
 800be7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	693a      	ldr	r2, [r7, #16]
 800be82:	621a      	str	r2, [r3, #32]
}
 800be84:	bf00      	nop
 800be86:	371c      	adds	r7, #28
 800be88:	46bd      	mov	sp, r7
 800be8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8e:	4770      	bx	lr

0800be90 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800be90:	b480      	push	{r7}
 800be92:	b087      	sub	sp, #28
 800be94:	af00      	add	r7, sp, #0
 800be96:	60f8      	str	r0, [r7, #12]
 800be98:	60b9      	str	r1, [r7, #8]
 800be9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	6a1b      	ldr	r3, [r3, #32]
 800bea0:	f023 0210 	bic.w	r2, r3, #16
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	699b      	ldr	r3, [r3, #24]
 800beac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	6a1b      	ldr	r3, [r3, #32]
 800beb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800beba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	031b      	lsls	r3, r3, #12
 800bec0:	697a      	ldr	r2, [r7, #20]
 800bec2:	4313      	orrs	r3, r2
 800bec4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bec6:	693b      	ldr	r3, [r7, #16]
 800bec8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800becc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bece:	68bb      	ldr	r3, [r7, #8]
 800bed0:	011b      	lsls	r3, r3, #4
 800bed2:	693a      	ldr	r2, [r7, #16]
 800bed4:	4313      	orrs	r3, r2
 800bed6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	697a      	ldr	r2, [r7, #20]
 800bedc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	693a      	ldr	r2, [r7, #16]
 800bee2:	621a      	str	r2, [r3, #32]
}
 800bee4:	bf00      	nop
 800bee6:	371c      	adds	r7, #28
 800bee8:	46bd      	mov	sp, r7
 800beea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beee:	4770      	bx	lr

0800bef0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800bef0:	b480      	push	{r7}
 800bef2:	b087      	sub	sp, #28
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	60f8      	str	r0, [r7, #12]
 800bef8:	60b9      	str	r1, [r7, #8]
 800befa:	607a      	str	r2, [r7, #4]
 800befc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	6a1b      	ldr	r3, [r3, #32]
 800bf02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	69db      	ldr	r3, [r3, #28]
 800bf0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	6a1b      	ldr	r3, [r3, #32]
 800bf14:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800bf16:	697b      	ldr	r3, [r7, #20]
 800bf18:	f023 0303 	bic.w	r3, r3, #3
 800bf1c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800bf1e:	697a      	ldr	r2, [r7, #20]
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	4313      	orrs	r3, r2
 800bf24:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800bf26:	697b      	ldr	r3, [r7, #20]
 800bf28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bf2c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	011b      	lsls	r3, r3, #4
 800bf32:	b2db      	uxtb	r3, r3
 800bf34:	697a      	ldr	r2, [r7, #20]
 800bf36:	4313      	orrs	r3, r2
 800bf38:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800bf3a:	693b      	ldr	r3, [r7, #16]
 800bf3c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800bf40:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	021b      	lsls	r3, r3, #8
 800bf46:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800bf4a:	693a      	ldr	r2, [r7, #16]
 800bf4c:	4313      	orrs	r3, r2
 800bf4e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	697a      	ldr	r2, [r7, #20]
 800bf54:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	693a      	ldr	r2, [r7, #16]
 800bf5a:	621a      	str	r2, [r3, #32]
}
 800bf5c:	bf00      	nop
 800bf5e:	371c      	adds	r7, #28
 800bf60:	46bd      	mov	sp, r7
 800bf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf66:	4770      	bx	lr

0800bf68 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b087      	sub	sp, #28
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	60f8      	str	r0, [r7, #12]
 800bf70:	60b9      	str	r1, [r7, #8]
 800bf72:	607a      	str	r2, [r7, #4]
 800bf74:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	6a1b      	ldr	r3, [r3, #32]
 800bf7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	69db      	ldr	r3, [r3, #28]
 800bf86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	6a1b      	ldr	r3, [r3, #32]
 800bf8c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800bf8e:	697b      	ldr	r3, [r7, #20]
 800bf90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf94:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	021b      	lsls	r3, r3, #8
 800bf9a:	697a      	ldr	r2, [r7, #20]
 800bf9c:	4313      	orrs	r3, r2
 800bf9e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bfa6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	031b      	lsls	r3, r3, #12
 800bfac:	b29b      	uxth	r3, r3
 800bfae:	697a      	ldr	r2, [r7, #20]
 800bfb0:	4313      	orrs	r3, r2
 800bfb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800bfba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	031b      	lsls	r3, r3, #12
 800bfc0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800bfc4:	693a      	ldr	r2, [r7, #16]
 800bfc6:	4313      	orrs	r3, r2
 800bfc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	697a      	ldr	r2, [r7, #20]
 800bfce:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	693a      	ldr	r2, [r7, #16]
 800bfd4:	621a      	str	r2, [r3, #32]
}
 800bfd6:	bf00      	nop
 800bfd8:	371c      	adds	r7, #28
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe0:	4770      	bx	lr

0800bfe2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bfe2:	b480      	push	{r7}
 800bfe4:	b085      	sub	sp, #20
 800bfe6:	af00      	add	r7, sp, #0
 800bfe8:	6078      	str	r0, [r7, #4]
 800bfea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	689b      	ldr	r3, [r3, #8]
 800bff0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bff8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bffa:	683a      	ldr	r2, [r7, #0]
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	4313      	orrs	r3, r2
 800c000:	f043 0307 	orr.w	r3, r3, #7
 800c004:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	68fa      	ldr	r2, [r7, #12]
 800c00a:	609a      	str	r2, [r3, #8]
}
 800c00c:	bf00      	nop
 800c00e:	3714      	adds	r7, #20
 800c010:	46bd      	mov	sp, r7
 800c012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c016:	4770      	bx	lr

0800c018 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c018:	b480      	push	{r7}
 800c01a:	b087      	sub	sp, #28
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	60f8      	str	r0, [r7, #12]
 800c020:	60b9      	str	r1, [r7, #8]
 800c022:	607a      	str	r2, [r7, #4]
 800c024:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	689b      	ldr	r3, [r3, #8]
 800c02a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c02c:	697b      	ldr	r3, [r7, #20]
 800c02e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c032:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	021a      	lsls	r2, r3, #8
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	431a      	orrs	r2, r3
 800c03c:	68bb      	ldr	r3, [r7, #8]
 800c03e:	4313      	orrs	r3, r2
 800c040:	697a      	ldr	r2, [r7, #20]
 800c042:	4313      	orrs	r3, r2
 800c044:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	697a      	ldr	r2, [r7, #20]
 800c04a:	609a      	str	r2, [r3, #8]
}
 800c04c:	bf00      	nop
 800c04e:	371c      	adds	r7, #28
 800c050:	46bd      	mov	sp, r7
 800c052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c056:	4770      	bx	lr

0800c058 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c058:	b480      	push	{r7}
 800c05a:	b087      	sub	sp, #28
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	60f8      	str	r0, [r7, #12]
 800c060:	60b9      	str	r1, [r7, #8]
 800c062:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c064:	68bb      	ldr	r3, [r7, #8]
 800c066:	f003 031f 	and.w	r3, r3, #31
 800c06a:	2201      	movs	r2, #1
 800c06c:	fa02 f303 	lsl.w	r3, r2, r3
 800c070:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	6a1a      	ldr	r2, [r3, #32]
 800c076:	697b      	ldr	r3, [r7, #20]
 800c078:	43db      	mvns	r3, r3
 800c07a:	401a      	ands	r2, r3
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	6a1a      	ldr	r2, [r3, #32]
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	f003 031f 	and.w	r3, r3, #31
 800c08a:	6879      	ldr	r1, [r7, #4]
 800c08c:	fa01 f303 	lsl.w	r3, r1, r3
 800c090:	431a      	orrs	r2, r3
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	621a      	str	r2, [r3, #32]
}
 800c096:	bf00      	nop
 800c098:	371c      	adds	r7, #28
 800c09a:	46bd      	mov	sp, r7
 800c09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a0:	4770      	bx	lr
	...

0800c0a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b085      	sub	sp, #20
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
 800c0ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c0b4:	2b01      	cmp	r3, #1
 800c0b6:	d101      	bne.n	800c0bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c0b8:	2302      	movs	r3, #2
 800c0ba:	e06d      	b.n	800c198 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2201      	movs	r2, #1
 800c0c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2202      	movs	r2, #2
 800c0c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	685b      	ldr	r3, [r3, #4]
 800c0d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	689b      	ldr	r3, [r3, #8]
 800c0da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	4a30      	ldr	r2, [pc, #192]	; (800c1a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c0e2:	4293      	cmp	r3, r2
 800c0e4:	d004      	beq.n	800c0f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	4a2f      	ldr	r2, [pc, #188]	; (800c1a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c0ec:	4293      	cmp	r3, r2
 800c0ee:	d108      	bne.n	800c102 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c0f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	685b      	ldr	r3, [r3, #4]
 800c0fc:	68fa      	ldr	r2, [r7, #12]
 800c0fe:	4313      	orrs	r3, r2
 800c100:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c108:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	68fa      	ldr	r2, [r7, #12]
 800c110:	4313      	orrs	r3, r2
 800c112:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	68fa      	ldr	r2, [r7, #12]
 800c11a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	4a20      	ldr	r2, [pc, #128]	; (800c1a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c122:	4293      	cmp	r3, r2
 800c124:	d022      	beq.n	800c16c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c12e:	d01d      	beq.n	800c16c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	4a1d      	ldr	r2, [pc, #116]	; (800c1ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c136:	4293      	cmp	r3, r2
 800c138:	d018      	beq.n	800c16c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	4a1c      	ldr	r2, [pc, #112]	; (800c1b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c140:	4293      	cmp	r3, r2
 800c142:	d013      	beq.n	800c16c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	4a1a      	ldr	r2, [pc, #104]	; (800c1b4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c14a:	4293      	cmp	r3, r2
 800c14c:	d00e      	beq.n	800c16c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	4a15      	ldr	r2, [pc, #84]	; (800c1a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c154:	4293      	cmp	r3, r2
 800c156:	d009      	beq.n	800c16c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	4a16      	ldr	r2, [pc, #88]	; (800c1b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c15e:	4293      	cmp	r3, r2
 800c160:	d004      	beq.n	800c16c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	4a15      	ldr	r2, [pc, #84]	; (800c1bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c168:	4293      	cmp	r3, r2
 800c16a:	d10c      	bne.n	800c186 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c172:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	689b      	ldr	r3, [r3, #8]
 800c178:	68ba      	ldr	r2, [r7, #8]
 800c17a:	4313      	orrs	r3, r2
 800c17c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	68ba      	ldr	r2, [r7, #8]
 800c184:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2201      	movs	r2, #1
 800c18a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2200      	movs	r2, #0
 800c192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c196:	2300      	movs	r3, #0
}
 800c198:	4618      	mov	r0, r3
 800c19a:	3714      	adds	r7, #20
 800c19c:	46bd      	mov	sp, r7
 800c19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a2:	4770      	bx	lr
 800c1a4:	40010000 	.word	0x40010000
 800c1a8:	40010400 	.word	0x40010400
 800c1ac:	40000400 	.word	0x40000400
 800c1b0:	40000800 	.word	0x40000800
 800c1b4:	40000c00 	.word	0x40000c00
 800c1b8:	40014000 	.word	0x40014000
 800c1bc:	40001800 	.word	0x40001800

0800c1c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c1c0:	b480      	push	{r7}
 800c1c2:	b083      	sub	sp, #12
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c1c8:	bf00      	nop
 800c1ca:	370c      	adds	r7, #12
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d2:	4770      	bx	lr

0800c1d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c1d4:	b480      	push	{r7}
 800c1d6:	b083      	sub	sp, #12
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c1dc:	bf00      	nop
 800c1de:	370c      	adds	r7, #12
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e6:	4770      	bx	lr

0800c1e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b083      	sub	sp, #12
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c1f0:	bf00      	nop
 800c1f2:	370c      	adds	r7, #12
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fa:	4770      	bx	lr

0800c1fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b082      	sub	sp, #8
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d101      	bne.n	800c20e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c20a:	2301      	movs	r3, #1
 800c20c:	e040      	b.n	800c290 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c212:	2b00      	cmp	r3, #0
 800c214:	d106      	bne.n	800c224 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2200      	movs	r2, #0
 800c21a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f7f9 f890 	bl	8005344 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2224      	movs	r2, #36	; 0x24
 800c228:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	681a      	ldr	r2, [r3, #0]
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	f022 0201 	bic.w	r2, r2, #1
 800c238:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f000 fc18 	bl	800ca70 <UART_SetConfig>
 800c240:	4603      	mov	r3, r0
 800c242:	2b01      	cmp	r3, #1
 800c244:	d101      	bne.n	800c24a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800c246:	2301      	movs	r3, #1
 800c248:	e022      	b.n	800c290 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d002      	beq.n	800c258 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f000 fe70 	bl	800cf38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	685a      	ldr	r2, [r3, #4]
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c266:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	689a      	ldr	r2, [r3, #8]
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c276:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	681a      	ldr	r2, [r3, #0]
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	f042 0201 	orr.w	r2, r2, #1
 800c286:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c288:	6878      	ldr	r0, [r7, #4]
 800c28a:	f000 fef7 	bl	800d07c <UART_CheckIdleState>
 800c28e:	4603      	mov	r3, r0
}
 800c290:	4618      	mov	r0, r3
 800c292:	3708      	adds	r7, #8
 800c294:	46bd      	mov	sp, r7
 800c296:	bd80      	pop	{r7, pc}

0800c298 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b08a      	sub	sp, #40	; 0x28
 800c29c:	af02      	add	r7, sp, #8
 800c29e:	60f8      	str	r0, [r7, #12]
 800c2a0:	60b9      	str	r1, [r7, #8]
 800c2a2:	603b      	str	r3, [r7, #0]
 800c2a4:	4613      	mov	r3, r2
 800c2a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c2ac:	2b20      	cmp	r3, #32
 800c2ae:	f040 8081 	bne.w	800c3b4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c2b2:	68bb      	ldr	r3, [r7, #8]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d002      	beq.n	800c2be <HAL_UART_Transmit+0x26>
 800c2b8:	88fb      	ldrh	r3, [r7, #6]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d101      	bne.n	800c2c2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c2be:	2301      	movs	r3, #1
 800c2c0:	e079      	b.n	800c3b6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800c2c8:	2b01      	cmp	r3, #1
 800c2ca:	d101      	bne.n	800c2d0 <HAL_UART_Transmit+0x38>
 800c2cc:	2302      	movs	r3, #2
 800c2ce:	e072      	b.n	800c3b6 <HAL_UART_Transmit+0x11e>
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	2201      	movs	r2, #1
 800c2d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	2200      	movs	r2, #0
 800c2dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	2221      	movs	r2, #33	; 0x21
 800c2e4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c2e6:	f7f9 f937 	bl	8005558 <HAL_GetTick>
 800c2ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	88fa      	ldrh	r2, [r7, #6]
 800c2f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	88fa      	ldrh	r2, [r7, #6]
 800c2f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	689b      	ldr	r3, [r3, #8]
 800c300:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c304:	d108      	bne.n	800c318 <HAL_UART_Transmit+0x80>
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	691b      	ldr	r3, [r3, #16]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d104      	bne.n	800c318 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800c30e:	2300      	movs	r3, #0
 800c310:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	61bb      	str	r3, [r7, #24]
 800c316:	e003      	b.n	800c320 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c31c:	2300      	movs	r3, #0
 800c31e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	2200      	movs	r2, #0
 800c324:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800c328:	e02c      	b.n	800c384 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	9300      	str	r3, [sp, #0]
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	2200      	movs	r2, #0
 800c332:	2180      	movs	r1, #128	; 0x80
 800c334:	68f8      	ldr	r0, [r7, #12]
 800c336:	f000 feea 	bl	800d10e <UART_WaitOnFlagUntilTimeout>
 800c33a:	4603      	mov	r3, r0
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d001      	beq.n	800c344 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800c340:	2303      	movs	r3, #3
 800c342:	e038      	b.n	800c3b6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800c344:	69fb      	ldr	r3, [r7, #28]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d10b      	bne.n	800c362 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c34a:	69bb      	ldr	r3, [r7, #24]
 800c34c:	881b      	ldrh	r3, [r3, #0]
 800c34e:	461a      	mov	r2, r3
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c358:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c35a:	69bb      	ldr	r3, [r7, #24]
 800c35c:	3302      	adds	r3, #2
 800c35e:	61bb      	str	r3, [r7, #24]
 800c360:	e007      	b.n	800c372 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c362:	69fb      	ldr	r3, [r7, #28]
 800c364:	781a      	ldrb	r2, [r3, #0]
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c36c:	69fb      	ldr	r3, [r7, #28]
 800c36e:	3301      	adds	r3, #1
 800c370:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c378:	b29b      	uxth	r3, r3
 800c37a:	3b01      	subs	r3, #1
 800c37c:	b29a      	uxth	r2, r3
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c38a:	b29b      	uxth	r3, r3
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d1cc      	bne.n	800c32a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	9300      	str	r3, [sp, #0]
 800c394:	697b      	ldr	r3, [r7, #20]
 800c396:	2200      	movs	r2, #0
 800c398:	2140      	movs	r1, #64	; 0x40
 800c39a:	68f8      	ldr	r0, [r7, #12]
 800c39c:	f000 feb7 	bl	800d10e <UART_WaitOnFlagUntilTimeout>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d001      	beq.n	800c3aa <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800c3a6:	2303      	movs	r3, #3
 800c3a8:	e005      	b.n	800c3b6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	2220      	movs	r2, #32
 800c3ae:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	e000      	b.n	800c3b6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800c3b4:	2302      	movs	r3, #2
  }
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	3720      	adds	r7, #32
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}

0800c3be <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c3be:	b580      	push	{r7, lr}
 800c3c0:	b08a      	sub	sp, #40	; 0x28
 800c3c2:	af00      	add	r7, sp, #0
 800c3c4:	60f8      	str	r0, [r7, #12]
 800c3c6:	60b9      	str	r1, [r7, #8]
 800c3c8:	4613      	mov	r3, r2
 800c3ca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3d0:	2b20      	cmp	r3, #32
 800c3d2:	d13d      	bne.n	800c450 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d002      	beq.n	800c3e0 <HAL_UART_Receive_IT+0x22>
 800c3da:	88fb      	ldrh	r3, [r7, #6]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d101      	bne.n	800c3e4 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	e036      	b.n	800c452 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800c3ea:	2b01      	cmp	r3, #1
 800c3ec:	d101      	bne.n	800c3f2 <HAL_UART_Receive_IT+0x34>
 800c3ee:	2302      	movs	r3, #2
 800c3f0:	e02f      	b.n	800c452 <HAL_UART_Receive_IT+0x94>
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	2201      	movs	r2, #1
 800c3f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	685b      	ldr	r3, [r3, #4]
 800c406:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d018      	beq.n	800c440 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c414:	697b      	ldr	r3, [r7, #20]
 800c416:	e853 3f00 	ldrex	r3, [r3]
 800c41a:	613b      	str	r3, [r7, #16]
   return(result);
 800c41c:	693b      	ldr	r3, [r7, #16]
 800c41e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c422:	627b      	str	r3, [r7, #36]	; 0x24
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	461a      	mov	r2, r3
 800c42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c42c:	623b      	str	r3, [r7, #32]
 800c42e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c430:	69f9      	ldr	r1, [r7, #28]
 800c432:	6a3a      	ldr	r2, [r7, #32]
 800c434:	e841 2300 	strex	r3, r2, [r1]
 800c438:	61bb      	str	r3, [r7, #24]
   return(result);
 800c43a:	69bb      	ldr	r3, [r7, #24]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d1e6      	bne.n	800c40e <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c440:	88fb      	ldrh	r3, [r7, #6]
 800c442:	461a      	mov	r2, r3
 800c444:	68b9      	ldr	r1, [r7, #8]
 800c446:	68f8      	ldr	r0, [r7, #12]
 800c448:	f000 ff26 	bl	800d298 <UART_Start_Receive_IT>
 800c44c:	4603      	mov	r3, r0
 800c44e:	e000      	b.n	800c452 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c450:	2302      	movs	r3, #2
  }
}
 800c452:	4618      	mov	r0, r3
 800c454:	3728      	adds	r7, #40	; 0x28
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}
	...

0800c45c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b0ba      	sub	sp, #232	; 0xe8
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	69db      	ldr	r3, [r3, #28]
 800c46a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	689b      	ldr	r3, [r3, #8]
 800c47e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c482:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c486:	f640 030f 	movw	r3, #2063	; 0x80f
 800c48a:	4013      	ands	r3, r2
 800c48c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c490:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c494:	2b00      	cmp	r3, #0
 800c496:	d115      	bne.n	800c4c4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800c498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c49c:	f003 0320 	and.w	r3, r3, #32
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d00f      	beq.n	800c4c4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c4a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4a8:	f003 0320 	and.w	r3, r3, #32
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d009      	beq.n	800c4c4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	f000 82a4 	beq.w	800ca02 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c4be:	6878      	ldr	r0, [r7, #4]
 800c4c0:	4798      	blx	r3
      }
      return;
 800c4c2:	e29e      	b.n	800ca02 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c4c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	f000 8117 	beq.w	800c6fc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800c4ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4d2:	f003 0301 	and.w	r3, r3, #1
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d106      	bne.n	800c4e8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800c4da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c4de:	4b85      	ldr	r3, [pc, #532]	; (800c6f4 <HAL_UART_IRQHandler+0x298>)
 800c4e0:	4013      	ands	r3, r2
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	f000 810a 	beq.w	800c6fc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c4e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4ec:	f003 0301 	and.w	r3, r3, #1
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d011      	beq.n	800c518 <HAL_UART_IRQHandler+0xbc>
 800c4f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d00b      	beq.n	800c518 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	2201      	movs	r2, #1
 800c506:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c50e:	f043 0201 	orr.w	r2, r3, #1
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c51c:	f003 0302 	and.w	r3, r3, #2
 800c520:	2b00      	cmp	r3, #0
 800c522:	d011      	beq.n	800c548 <HAL_UART_IRQHandler+0xec>
 800c524:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c528:	f003 0301 	and.w	r3, r3, #1
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d00b      	beq.n	800c548 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	2202      	movs	r2, #2
 800c536:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c53e:	f043 0204 	orr.w	r2, r3, #4
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c54c:	f003 0304 	and.w	r3, r3, #4
 800c550:	2b00      	cmp	r3, #0
 800c552:	d011      	beq.n	800c578 <HAL_UART_IRQHandler+0x11c>
 800c554:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c558:	f003 0301 	and.w	r3, r3, #1
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d00b      	beq.n	800c578 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	2204      	movs	r2, #4
 800c566:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c56e:	f043 0202 	orr.w	r2, r3, #2
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c57c:	f003 0308 	and.w	r3, r3, #8
 800c580:	2b00      	cmp	r3, #0
 800c582:	d017      	beq.n	800c5b4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c588:	f003 0320 	and.w	r3, r3, #32
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d105      	bne.n	800c59c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800c590:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c594:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d00b      	beq.n	800c5b4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	2208      	movs	r2, #8
 800c5a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5aa:	f043 0208 	orr.w	r2, r3, #8
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c5b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d012      	beq.n	800c5e6 <HAL_UART_IRQHandler+0x18a>
 800c5c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c5c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d00c      	beq.n	800c5e6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c5d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5dc:	f043 0220 	orr.w	r2, r3, #32
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	f000 820a 	beq.w	800ca06 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800c5f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5f6:	f003 0320 	and.w	r3, r3, #32
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d00d      	beq.n	800c61a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c5fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c602:	f003 0320 	and.w	r3, r3, #32
 800c606:	2b00      	cmp	r3, #0
 800c608:	d007      	beq.n	800c61a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d003      	beq.n	800c61a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c620:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	689b      	ldr	r3, [r3, #8]
 800c62a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c62e:	2b40      	cmp	r3, #64	; 0x40
 800c630:	d005      	beq.n	800c63e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c632:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c636:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d04f      	beq.n	800c6de <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f000 fef4 	bl	800d42c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	689b      	ldr	r3, [r3, #8]
 800c64a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c64e:	2b40      	cmp	r3, #64	; 0x40
 800c650:	d141      	bne.n	800c6d6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	3308      	adds	r3, #8
 800c658:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c65c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c660:	e853 3f00 	ldrex	r3, [r3]
 800c664:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c668:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c66c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c670:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	3308      	adds	r3, #8
 800c67a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c67e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c682:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c686:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c68a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c68e:	e841 2300 	strex	r3, r2, [r1]
 800c692:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c696:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d1d9      	bne.n	800c652 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d013      	beq.n	800c6ce <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6aa:	4a13      	ldr	r2, [pc, #76]	; (800c6f8 <HAL_UART_IRQHandler+0x29c>)
 800c6ac:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f7f9 fed8 	bl	8006468 <HAL_DMA_Abort_IT>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d017      	beq.n	800c6ee <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6c4:	687a      	ldr	r2, [r7, #4]
 800c6c6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800c6c8:	4610      	mov	r0, r2
 800c6ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6cc:	e00f      	b.n	800c6ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f000 f9ae 	bl	800ca30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6d4:	e00b      	b.n	800c6ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f000 f9aa 	bl	800ca30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6dc:	e007      	b.n	800c6ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c6de:	6878      	ldr	r0, [r7, #4]
 800c6e0:	f000 f9a6 	bl	800ca30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800c6ec:	e18b      	b.n	800ca06 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6ee:	bf00      	nop
    return;
 800c6f0:	e189      	b.n	800ca06 <HAL_UART_IRQHandler+0x5aa>
 800c6f2:	bf00      	nop
 800c6f4:	04000120 	.word	0x04000120
 800c6f8:	0800d4f3 	.word	0x0800d4f3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c700:	2b01      	cmp	r3, #1
 800c702:	f040 8144 	bne.w	800c98e <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c70a:	f003 0310 	and.w	r3, r3, #16
 800c70e:	2b00      	cmp	r3, #0
 800c710:	f000 813d 	beq.w	800c98e <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c718:	f003 0310 	and.w	r3, r3, #16
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	f000 8136 	beq.w	800c98e <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	2210      	movs	r2, #16
 800c728:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	689b      	ldr	r3, [r3, #8]
 800c730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c734:	2b40      	cmp	r3, #64	; 0x40
 800c736:	f040 80b2 	bne.w	800c89e <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	685b      	ldr	r3, [r3, #4]
 800c742:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c746:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	f000 815d 	beq.w	800ca0a <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c756:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c75a:	429a      	cmp	r2, r3
 800c75c:	f080 8155 	bcs.w	800ca0a <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c766:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c76e:	69db      	ldr	r3, [r3, #28]
 800c770:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c774:	f000 8085 	beq.w	800c882 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c780:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c784:	e853 3f00 	ldrex	r3, [r3]
 800c788:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c78c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c790:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c794:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	461a      	mov	r2, r3
 800c79e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c7a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c7a6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c7ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c7b2:	e841 2300 	strex	r3, r2, [r1]
 800c7b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c7ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d1da      	bne.n	800c778 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	3308      	adds	r3, #8
 800c7c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c7cc:	e853 3f00 	ldrex	r3, [r3]
 800c7d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c7d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c7d4:	f023 0301 	bic.w	r3, r3, #1
 800c7d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	3308      	adds	r3, #8
 800c7e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c7e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c7ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c7ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c7f2:	e841 2300 	strex	r3, r2, [r1]
 800c7f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c7f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d1e1      	bne.n	800c7c2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	3308      	adds	r3, #8
 800c804:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c806:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c808:	e853 3f00 	ldrex	r3, [r3]
 800c80c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c80e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c810:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c814:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	3308      	adds	r3, #8
 800c81e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c822:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c824:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c826:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c828:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c82a:	e841 2300 	strex	r3, r2, [r1]
 800c82e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c830:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c832:	2b00      	cmp	r3, #0
 800c834:	d1e3      	bne.n	800c7fe <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2220      	movs	r2, #32
 800c83a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2200      	movs	r2, #0
 800c840:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c84a:	e853 3f00 	ldrex	r3, [r3]
 800c84e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c850:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c852:	f023 0310 	bic.w	r3, r3, #16
 800c856:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	461a      	mov	r2, r3
 800c860:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c864:	65bb      	str	r3, [r7, #88]	; 0x58
 800c866:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c868:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c86a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c86c:	e841 2300 	strex	r3, r2, [r1]
 800c870:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c874:	2b00      	cmp	r3, #0
 800c876:	d1e4      	bne.n	800c842 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c87c:	4618      	mov	r0, r3
 800c87e:	f7f9 fd83 	bl	8006388 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c88e:	b29b      	uxth	r3, r3
 800c890:	1ad3      	subs	r3, r2, r3
 800c892:	b29b      	uxth	r3, r3
 800c894:	4619      	mov	r1, r3
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f000 f8d4 	bl	800ca44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c89c:	e0b5      	b.n	800ca0a <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c8aa:	b29b      	uxth	r3, r3
 800c8ac:	1ad3      	subs	r3, r2, r3
 800c8ae:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c8b8:	b29b      	uxth	r3, r3
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	f000 80a7 	beq.w	800ca0e <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 800c8c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	f000 80a2 	beq.w	800ca0e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d2:	e853 3f00 	ldrex	r3, [r3]
 800c8d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c8d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c8de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	461a      	mov	r2, r3
 800c8e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c8ec:	647b      	str	r3, [r7, #68]	; 0x44
 800c8ee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c8f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c8f4:	e841 2300 	strex	r3, r2, [r1]
 800c8f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c8fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d1e4      	bne.n	800c8ca <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	3308      	adds	r3, #8
 800c906:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c90a:	e853 3f00 	ldrex	r3, [r3]
 800c90e:	623b      	str	r3, [r7, #32]
   return(result);
 800c910:	6a3b      	ldr	r3, [r7, #32]
 800c912:	f023 0301 	bic.w	r3, r3, #1
 800c916:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	3308      	adds	r3, #8
 800c920:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c924:	633a      	str	r2, [r7, #48]	; 0x30
 800c926:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c928:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c92a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c92c:	e841 2300 	strex	r3, r2, [r1]
 800c930:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c934:	2b00      	cmp	r3, #0
 800c936:	d1e3      	bne.n	800c900 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2220      	movs	r2, #32
 800c93c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2200      	movs	r2, #0
 800c942:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2200      	movs	r2, #0
 800c948:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c950:	693b      	ldr	r3, [r7, #16]
 800c952:	e853 3f00 	ldrex	r3, [r3]
 800c956:	60fb      	str	r3, [r7, #12]
   return(result);
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	f023 0310 	bic.w	r3, r3, #16
 800c95e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	461a      	mov	r2, r3
 800c968:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c96c:	61fb      	str	r3, [r7, #28]
 800c96e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c970:	69b9      	ldr	r1, [r7, #24]
 800c972:	69fa      	ldr	r2, [r7, #28]
 800c974:	e841 2300 	strex	r3, r2, [r1]
 800c978:	617b      	str	r3, [r7, #20]
   return(result);
 800c97a:	697b      	ldr	r3, [r7, #20]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d1e4      	bne.n	800c94a <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c980:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c984:	4619      	mov	r1, r3
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f000 f85c 	bl	800ca44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c98c:	e03f      	b.n	800ca0e <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c98e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c992:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c996:	2b00      	cmp	r3, #0
 800c998:	d00e      	beq.n	800c9b8 <HAL_UART_IRQHandler+0x55c>
 800c99a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c99e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d008      	beq.n	800c9b8 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c9ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	f000 f853 	bl	800ca5c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c9b6:	e02d      	b.n	800ca14 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800c9b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c9bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d00e      	beq.n	800c9e2 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800c9c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c9c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d008      	beq.n	800c9e2 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d01c      	beq.n	800ca12 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	4798      	blx	r3
    }
    return;
 800c9e0:	e017      	b.n	800ca12 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c9e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c9e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d012      	beq.n	800ca14 <HAL_UART_IRQHandler+0x5b8>
 800c9ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c9f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d00c      	beq.n	800ca14 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f000 fd8f 	bl	800d51e <UART_EndTransmit_IT>
    return;
 800ca00:	e008      	b.n	800ca14 <HAL_UART_IRQHandler+0x5b8>
      return;
 800ca02:	bf00      	nop
 800ca04:	e006      	b.n	800ca14 <HAL_UART_IRQHandler+0x5b8>
    return;
 800ca06:	bf00      	nop
 800ca08:	e004      	b.n	800ca14 <HAL_UART_IRQHandler+0x5b8>
      return;
 800ca0a:	bf00      	nop
 800ca0c:	e002      	b.n	800ca14 <HAL_UART_IRQHandler+0x5b8>
      return;
 800ca0e:	bf00      	nop
 800ca10:	e000      	b.n	800ca14 <HAL_UART_IRQHandler+0x5b8>
    return;
 800ca12:	bf00      	nop
  }

}
 800ca14:	37e8      	adds	r7, #232	; 0xe8
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}
 800ca1a:	bf00      	nop

0800ca1c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ca1c:	b480      	push	{r7}
 800ca1e:	b083      	sub	sp, #12
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ca24:	bf00      	nop
 800ca26:	370c      	adds	r7, #12
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2e:	4770      	bx	lr

0800ca30 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ca30:	b480      	push	{r7}
 800ca32:	b083      	sub	sp, #12
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ca38:	bf00      	nop
 800ca3a:	370c      	adds	r7, #12
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca42:	4770      	bx	lr

0800ca44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ca44:	b480      	push	{r7}
 800ca46:	b083      	sub	sp, #12
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	460b      	mov	r3, r1
 800ca4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ca50:	bf00      	nop
 800ca52:	370c      	adds	r7, #12
 800ca54:	46bd      	mov	sp, r7
 800ca56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5a:	4770      	bx	lr

0800ca5c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ca5c:	b480      	push	{r7}
 800ca5e:	b083      	sub	sp, #12
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ca64:	bf00      	nop
 800ca66:	370c      	adds	r7, #12
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6e:	4770      	bx	lr

0800ca70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b088      	sub	sp, #32
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	689a      	ldr	r2, [r3, #8]
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	691b      	ldr	r3, [r3, #16]
 800ca84:	431a      	orrs	r2, r3
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	695b      	ldr	r3, [r3, #20]
 800ca8a:	431a      	orrs	r2, r3
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	69db      	ldr	r3, [r3, #28]
 800ca90:	4313      	orrs	r3, r2
 800ca92:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	681a      	ldr	r2, [r3, #0]
 800ca9a:	4ba6      	ldr	r3, [pc, #664]	; (800cd34 <UART_SetConfig+0x2c4>)
 800ca9c:	4013      	ands	r3, r2
 800ca9e:	687a      	ldr	r2, [r7, #4]
 800caa0:	6812      	ldr	r2, [r2, #0]
 800caa2:	6979      	ldr	r1, [r7, #20]
 800caa4:	430b      	orrs	r3, r1
 800caa6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	685b      	ldr	r3, [r3, #4]
 800caae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	68da      	ldr	r2, [r3, #12]
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	430a      	orrs	r2, r1
 800cabc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	699b      	ldr	r3, [r3, #24]
 800cac2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	6a1b      	ldr	r3, [r3, #32]
 800cac8:	697a      	ldr	r2, [r7, #20]
 800caca:	4313      	orrs	r3, r2
 800cacc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	689b      	ldr	r3, [r3, #8]
 800cad4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	697a      	ldr	r2, [r7, #20]
 800cade:	430a      	orrs	r2, r1
 800cae0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	4a94      	ldr	r2, [pc, #592]	; (800cd38 <UART_SetConfig+0x2c8>)
 800cae8:	4293      	cmp	r3, r2
 800caea:	d120      	bne.n	800cb2e <UART_SetConfig+0xbe>
 800caec:	4b93      	ldr	r3, [pc, #588]	; (800cd3c <UART_SetConfig+0x2cc>)
 800caee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800caf2:	f003 0303 	and.w	r3, r3, #3
 800caf6:	2b03      	cmp	r3, #3
 800caf8:	d816      	bhi.n	800cb28 <UART_SetConfig+0xb8>
 800cafa:	a201      	add	r2, pc, #4	; (adr r2, 800cb00 <UART_SetConfig+0x90>)
 800cafc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb00:	0800cb11 	.word	0x0800cb11
 800cb04:	0800cb1d 	.word	0x0800cb1d
 800cb08:	0800cb17 	.word	0x0800cb17
 800cb0c:	0800cb23 	.word	0x0800cb23
 800cb10:	2301      	movs	r3, #1
 800cb12:	77fb      	strb	r3, [r7, #31]
 800cb14:	e150      	b.n	800cdb8 <UART_SetConfig+0x348>
 800cb16:	2302      	movs	r3, #2
 800cb18:	77fb      	strb	r3, [r7, #31]
 800cb1a:	e14d      	b.n	800cdb8 <UART_SetConfig+0x348>
 800cb1c:	2304      	movs	r3, #4
 800cb1e:	77fb      	strb	r3, [r7, #31]
 800cb20:	e14a      	b.n	800cdb8 <UART_SetConfig+0x348>
 800cb22:	2308      	movs	r3, #8
 800cb24:	77fb      	strb	r3, [r7, #31]
 800cb26:	e147      	b.n	800cdb8 <UART_SetConfig+0x348>
 800cb28:	2310      	movs	r3, #16
 800cb2a:	77fb      	strb	r3, [r7, #31]
 800cb2c:	e144      	b.n	800cdb8 <UART_SetConfig+0x348>
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	4a83      	ldr	r2, [pc, #524]	; (800cd40 <UART_SetConfig+0x2d0>)
 800cb34:	4293      	cmp	r3, r2
 800cb36:	d132      	bne.n	800cb9e <UART_SetConfig+0x12e>
 800cb38:	4b80      	ldr	r3, [pc, #512]	; (800cd3c <UART_SetConfig+0x2cc>)
 800cb3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb3e:	f003 030c 	and.w	r3, r3, #12
 800cb42:	2b0c      	cmp	r3, #12
 800cb44:	d828      	bhi.n	800cb98 <UART_SetConfig+0x128>
 800cb46:	a201      	add	r2, pc, #4	; (adr r2, 800cb4c <UART_SetConfig+0xdc>)
 800cb48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb4c:	0800cb81 	.word	0x0800cb81
 800cb50:	0800cb99 	.word	0x0800cb99
 800cb54:	0800cb99 	.word	0x0800cb99
 800cb58:	0800cb99 	.word	0x0800cb99
 800cb5c:	0800cb8d 	.word	0x0800cb8d
 800cb60:	0800cb99 	.word	0x0800cb99
 800cb64:	0800cb99 	.word	0x0800cb99
 800cb68:	0800cb99 	.word	0x0800cb99
 800cb6c:	0800cb87 	.word	0x0800cb87
 800cb70:	0800cb99 	.word	0x0800cb99
 800cb74:	0800cb99 	.word	0x0800cb99
 800cb78:	0800cb99 	.word	0x0800cb99
 800cb7c:	0800cb93 	.word	0x0800cb93
 800cb80:	2300      	movs	r3, #0
 800cb82:	77fb      	strb	r3, [r7, #31]
 800cb84:	e118      	b.n	800cdb8 <UART_SetConfig+0x348>
 800cb86:	2302      	movs	r3, #2
 800cb88:	77fb      	strb	r3, [r7, #31]
 800cb8a:	e115      	b.n	800cdb8 <UART_SetConfig+0x348>
 800cb8c:	2304      	movs	r3, #4
 800cb8e:	77fb      	strb	r3, [r7, #31]
 800cb90:	e112      	b.n	800cdb8 <UART_SetConfig+0x348>
 800cb92:	2308      	movs	r3, #8
 800cb94:	77fb      	strb	r3, [r7, #31]
 800cb96:	e10f      	b.n	800cdb8 <UART_SetConfig+0x348>
 800cb98:	2310      	movs	r3, #16
 800cb9a:	77fb      	strb	r3, [r7, #31]
 800cb9c:	e10c      	b.n	800cdb8 <UART_SetConfig+0x348>
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	4a68      	ldr	r2, [pc, #416]	; (800cd44 <UART_SetConfig+0x2d4>)
 800cba4:	4293      	cmp	r3, r2
 800cba6:	d120      	bne.n	800cbea <UART_SetConfig+0x17a>
 800cba8:	4b64      	ldr	r3, [pc, #400]	; (800cd3c <UART_SetConfig+0x2cc>)
 800cbaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cbae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800cbb2:	2b30      	cmp	r3, #48	; 0x30
 800cbb4:	d013      	beq.n	800cbde <UART_SetConfig+0x16e>
 800cbb6:	2b30      	cmp	r3, #48	; 0x30
 800cbb8:	d814      	bhi.n	800cbe4 <UART_SetConfig+0x174>
 800cbba:	2b20      	cmp	r3, #32
 800cbbc:	d009      	beq.n	800cbd2 <UART_SetConfig+0x162>
 800cbbe:	2b20      	cmp	r3, #32
 800cbc0:	d810      	bhi.n	800cbe4 <UART_SetConfig+0x174>
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d002      	beq.n	800cbcc <UART_SetConfig+0x15c>
 800cbc6:	2b10      	cmp	r3, #16
 800cbc8:	d006      	beq.n	800cbd8 <UART_SetConfig+0x168>
 800cbca:	e00b      	b.n	800cbe4 <UART_SetConfig+0x174>
 800cbcc:	2300      	movs	r3, #0
 800cbce:	77fb      	strb	r3, [r7, #31]
 800cbd0:	e0f2      	b.n	800cdb8 <UART_SetConfig+0x348>
 800cbd2:	2302      	movs	r3, #2
 800cbd4:	77fb      	strb	r3, [r7, #31]
 800cbd6:	e0ef      	b.n	800cdb8 <UART_SetConfig+0x348>
 800cbd8:	2304      	movs	r3, #4
 800cbda:	77fb      	strb	r3, [r7, #31]
 800cbdc:	e0ec      	b.n	800cdb8 <UART_SetConfig+0x348>
 800cbde:	2308      	movs	r3, #8
 800cbe0:	77fb      	strb	r3, [r7, #31]
 800cbe2:	e0e9      	b.n	800cdb8 <UART_SetConfig+0x348>
 800cbe4:	2310      	movs	r3, #16
 800cbe6:	77fb      	strb	r3, [r7, #31]
 800cbe8:	e0e6      	b.n	800cdb8 <UART_SetConfig+0x348>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	4a56      	ldr	r2, [pc, #344]	; (800cd48 <UART_SetConfig+0x2d8>)
 800cbf0:	4293      	cmp	r3, r2
 800cbf2:	d120      	bne.n	800cc36 <UART_SetConfig+0x1c6>
 800cbf4:	4b51      	ldr	r3, [pc, #324]	; (800cd3c <UART_SetConfig+0x2cc>)
 800cbf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cbfa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800cbfe:	2bc0      	cmp	r3, #192	; 0xc0
 800cc00:	d013      	beq.n	800cc2a <UART_SetConfig+0x1ba>
 800cc02:	2bc0      	cmp	r3, #192	; 0xc0
 800cc04:	d814      	bhi.n	800cc30 <UART_SetConfig+0x1c0>
 800cc06:	2b80      	cmp	r3, #128	; 0x80
 800cc08:	d009      	beq.n	800cc1e <UART_SetConfig+0x1ae>
 800cc0a:	2b80      	cmp	r3, #128	; 0x80
 800cc0c:	d810      	bhi.n	800cc30 <UART_SetConfig+0x1c0>
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d002      	beq.n	800cc18 <UART_SetConfig+0x1a8>
 800cc12:	2b40      	cmp	r3, #64	; 0x40
 800cc14:	d006      	beq.n	800cc24 <UART_SetConfig+0x1b4>
 800cc16:	e00b      	b.n	800cc30 <UART_SetConfig+0x1c0>
 800cc18:	2300      	movs	r3, #0
 800cc1a:	77fb      	strb	r3, [r7, #31]
 800cc1c:	e0cc      	b.n	800cdb8 <UART_SetConfig+0x348>
 800cc1e:	2302      	movs	r3, #2
 800cc20:	77fb      	strb	r3, [r7, #31]
 800cc22:	e0c9      	b.n	800cdb8 <UART_SetConfig+0x348>
 800cc24:	2304      	movs	r3, #4
 800cc26:	77fb      	strb	r3, [r7, #31]
 800cc28:	e0c6      	b.n	800cdb8 <UART_SetConfig+0x348>
 800cc2a:	2308      	movs	r3, #8
 800cc2c:	77fb      	strb	r3, [r7, #31]
 800cc2e:	e0c3      	b.n	800cdb8 <UART_SetConfig+0x348>
 800cc30:	2310      	movs	r3, #16
 800cc32:	77fb      	strb	r3, [r7, #31]
 800cc34:	e0c0      	b.n	800cdb8 <UART_SetConfig+0x348>
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	4a44      	ldr	r2, [pc, #272]	; (800cd4c <UART_SetConfig+0x2dc>)
 800cc3c:	4293      	cmp	r3, r2
 800cc3e:	d125      	bne.n	800cc8c <UART_SetConfig+0x21c>
 800cc40:	4b3e      	ldr	r3, [pc, #248]	; (800cd3c <UART_SetConfig+0x2cc>)
 800cc42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cc4e:	d017      	beq.n	800cc80 <UART_SetConfig+0x210>
 800cc50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cc54:	d817      	bhi.n	800cc86 <UART_SetConfig+0x216>
 800cc56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc5a:	d00b      	beq.n	800cc74 <UART_SetConfig+0x204>
 800cc5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc60:	d811      	bhi.n	800cc86 <UART_SetConfig+0x216>
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d003      	beq.n	800cc6e <UART_SetConfig+0x1fe>
 800cc66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc6a:	d006      	beq.n	800cc7a <UART_SetConfig+0x20a>
 800cc6c:	e00b      	b.n	800cc86 <UART_SetConfig+0x216>
 800cc6e:	2300      	movs	r3, #0
 800cc70:	77fb      	strb	r3, [r7, #31]
 800cc72:	e0a1      	b.n	800cdb8 <UART_SetConfig+0x348>
 800cc74:	2302      	movs	r3, #2
 800cc76:	77fb      	strb	r3, [r7, #31]
 800cc78:	e09e      	b.n	800cdb8 <UART_SetConfig+0x348>
 800cc7a:	2304      	movs	r3, #4
 800cc7c:	77fb      	strb	r3, [r7, #31]
 800cc7e:	e09b      	b.n	800cdb8 <UART_SetConfig+0x348>
 800cc80:	2308      	movs	r3, #8
 800cc82:	77fb      	strb	r3, [r7, #31]
 800cc84:	e098      	b.n	800cdb8 <UART_SetConfig+0x348>
 800cc86:	2310      	movs	r3, #16
 800cc88:	77fb      	strb	r3, [r7, #31]
 800cc8a:	e095      	b.n	800cdb8 <UART_SetConfig+0x348>
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	4a2f      	ldr	r2, [pc, #188]	; (800cd50 <UART_SetConfig+0x2e0>)
 800cc92:	4293      	cmp	r3, r2
 800cc94:	d125      	bne.n	800cce2 <UART_SetConfig+0x272>
 800cc96:	4b29      	ldr	r3, [pc, #164]	; (800cd3c <UART_SetConfig+0x2cc>)
 800cc98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800cca0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cca4:	d017      	beq.n	800ccd6 <UART_SetConfig+0x266>
 800cca6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ccaa:	d817      	bhi.n	800ccdc <UART_SetConfig+0x26c>
 800ccac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ccb0:	d00b      	beq.n	800ccca <UART_SetConfig+0x25a>
 800ccb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ccb6:	d811      	bhi.n	800ccdc <UART_SetConfig+0x26c>
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d003      	beq.n	800ccc4 <UART_SetConfig+0x254>
 800ccbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ccc0:	d006      	beq.n	800ccd0 <UART_SetConfig+0x260>
 800ccc2:	e00b      	b.n	800ccdc <UART_SetConfig+0x26c>
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	77fb      	strb	r3, [r7, #31]
 800ccc8:	e076      	b.n	800cdb8 <UART_SetConfig+0x348>
 800ccca:	2302      	movs	r3, #2
 800cccc:	77fb      	strb	r3, [r7, #31]
 800ccce:	e073      	b.n	800cdb8 <UART_SetConfig+0x348>
 800ccd0:	2304      	movs	r3, #4
 800ccd2:	77fb      	strb	r3, [r7, #31]
 800ccd4:	e070      	b.n	800cdb8 <UART_SetConfig+0x348>
 800ccd6:	2308      	movs	r3, #8
 800ccd8:	77fb      	strb	r3, [r7, #31]
 800ccda:	e06d      	b.n	800cdb8 <UART_SetConfig+0x348>
 800ccdc:	2310      	movs	r3, #16
 800ccde:	77fb      	strb	r3, [r7, #31]
 800cce0:	e06a      	b.n	800cdb8 <UART_SetConfig+0x348>
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	4a1b      	ldr	r2, [pc, #108]	; (800cd54 <UART_SetConfig+0x2e4>)
 800cce8:	4293      	cmp	r3, r2
 800ccea:	d138      	bne.n	800cd5e <UART_SetConfig+0x2ee>
 800ccec:	4b13      	ldr	r3, [pc, #76]	; (800cd3c <UART_SetConfig+0x2cc>)
 800ccee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ccf2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ccf6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ccfa:	d017      	beq.n	800cd2c <UART_SetConfig+0x2bc>
 800ccfc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cd00:	d82a      	bhi.n	800cd58 <UART_SetConfig+0x2e8>
 800cd02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd06:	d00b      	beq.n	800cd20 <UART_SetConfig+0x2b0>
 800cd08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd0c:	d824      	bhi.n	800cd58 <UART_SetConfig+0x2e8>
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d003      	beq.n	800cd1a <UART_SetConfig+0x2aa>
 800cd12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd16:	d006      	beq.n	800cd26 <UART_SetConfig+0x2b6>
 800cd18:	e01e      	b.n	800cd58 <UART_SetConfig+0x2e8>
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	77fb      	strb	r3, [r7, #31]
 800cd1e:	e04b      	b.n	800cdb8 <UART_SetConfig+0x348>
 800cd20:	2302      	movs	r3, #2
 800cd22:	77fb      	strb	r3, [r7, #31]
 800cd24:	e048      	b.n	800cdb8 <UART_SetConfig+0x348>
 800cd26:	2304      	movs	r3, #4
 800cd28:	77fb      	strb	r3, [r7, #31]
 800cd2a:	e045      	b.n	800cdb8 <UART_SetConfig+0x348>
 800cd2c:	2308      	movs	r3, #8
 800cd2e:	77fb      	strb	r3, [r7, #31]
 800cd30:	e042      	b.n	800cdb8 <UART_SetConfig+0x348>
 800cd32:	bf00      	nop
 800cd34:	efff69f3 	.word	0xefff69f3
 800cd38:	40011000 	.word	0x40011000
 800cd3c:	40023800 	.word	0x40023800
 800cd40:	40004400 	.word	0x40004400
 800cd44:	40004800 	.word	0x40004800
 800cd48:	40004c00 	.word	0x40004c00
 800cd4c:	40005000 	.word	0x40005000
 800cd50:	40011400 	.word	0x40011400
 800cd54:	40007800 	.word	0x40007800
 800cd58:	2310      	movs	r3, #16
 800cd5a:	77fb      	strb	r3, [r7, #31]
 800cd5c:	e02c      	b.n	800cdb8 <UART_SetConfig+0x348>
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	4a72      	ldr	r2, [pc, #456]	; (800cf2c <UART_SetConfig+0x4bc>)
 800cd64:	4293      	cmp	r3, r2
 800cd66:	d125      	bne.n	800cdb4 <UART_SetConfig+0x344>
 800cd68:	4b71      	ldr	r3, [pc, #452]	; (800cf30 <UART_SetConfig+0x4c0>)
 800cd6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd6e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800cd72:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800cd76:	d017      	beq.n	800cda8 <UART_SetConfig+0x338>
 800cd78:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800cd7c:	d817      	bhi.n	800cdae <UART_SetConfig+0x33e>
 800cd7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cd82:	d00b      	beq.n	800cd9c <UART_SetConfig+0x32c>
 800cd84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cd88:	d811      	bhi.n	800cdae <UART_SetConfig+0x33e>
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d003      	beq.n	800cd96 <UART_SetConfig+0x326>
 800cd8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cd92:	d006      	beq.n	800cda2 <UART_SetConfig+0x332>
 800cd94:	e00b      	b.n	800cdae <UART_SetConfig+0x33e>
 800cd96:	2300      	movs	r3, #0
 800cd98:	77fb      	strb	r3, [r7, #31]
 800cd9a:	e00d      	b.n	800cdb8 <UART_SetConfig+0x348>
 800cd9c:	2302      	movs	r3, #2
 800cd9e:	77fb      	strb	r3, [r7, #31]
 800cda0:	e00a      	b.n	800cdb8 <UART_SetConfig+0x348>
 800cda2:	2304      	movs	r3, #4
 800cda4:	77fb      	strb	r3, [r7, #31]
 800cda6:	e007      	b.n	800cdb8 <UART_SetConfig+0x348>
 800cda8:	2308      	movs	r3, #8
 800cdaa:	77fb      	strb	r3, [r7, #31]
 800cdac:	e004      	b.n	800cdb8 <UART_SetConfig+0x348>
 800cdae:	2310      	movs	r3, #16
 800cdb0:	77fb      	strb	r3, [r7, #31]
 800cdb2:	e001      	b.n	800cdb8 <UART_SetConfig+0x348>
 800cdb4:	2310      	movs	r3, #16
 800cdb6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	69db      	ldr	r3, [r3, #28]
 800cdbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cdc0:	d15b      	bne.n	800ce7a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800cdc2:	7ffb      	ldrb	r3, [r7, #31]
 800cdc4:	2b08      	cmp	r3, #8
 800cdc6:	d828      	bhi.n	800ce1a <UART_SetConfig+0x3aa>
 800cdc8:	a201      	add	r2, pc, #4	; (adr r2, 800cdd0 <UART_SetConfig+0x360>)
 800cdca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdce:	bf00      	nop
 800cdd0:	0800cdf5 	.word	0x0800cdf5
 800cdd4:	0800cdfd 	.word	0x0800cdfd
 800cdd8:	0800ce05 	.word	0x0800ce05
 800cddc:	0800ce1b 	.word	0x0800ce1b
 800cde0:	0800ce0b 	.word	0x0800ce0b
 800cde4:	0800ce1b 	.word	0x0800ce1b
 800cde8:	0800ce1b 	.word	0x0800ce1b
 800cdec:	0800ce1b 	.word	0x0800ce1b
 800cdf0:	0800ce13 	.word	0x0800ce13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cdf4:	f7fb fd60 	bl	80088b8 <HAL_RCC_GetPCLK1Freq>
 800cdf8:	61b8      	str	r0, [r7, #24]
        break;
 800cdfa:	e013      	b.n	800ce24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cdfc:	f7fb fd70 	bl	80088e0 <HAL_RCC_GetPCLK2Freq>
 800ce00:	61b8      	str	r0, [r7, #24]
        break;
 800ce02:	e00f      	b.n	800ce24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ce04:	4b4b      	ldr	r3, [pc, #300]	; (800cf34 <UART_SetConfig+0x4c4>)
 800ce06:	61bb      	str	r3, [r7, #24]
        break;
 800ce08:	e00c      	b.n	800ce24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ce0a:	f7fb fc83 	bl	8008714 <HAL_RCC_GetSysClockFreq>
 800ce0e:	61b8      	str	r0, [r7, #24]
        break;
 800ce10:	e008      	b.n	800ce24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ce12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ce16:	61bb      	str	r3, [r7, #24]
        break;
 800ce18:	e004      	b.n	800ce24 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ce1e:	2301      	movs	r3, #1
 800ce20:	77bb      	strb	r3, [r7, #30]
        break;
 800ce22:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ce24:	69bb      	ldr	r3, [r7, #24]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d074      	beq.n	800cf14 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ce2a:	69bb      	ldr	r3, [r7, #24]
 800ce2c:	005a      	lsls	r2, r3, #1
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	685b      	ldr	r3, [r3, #4]
 800ce32:	085b      	lsrs	r3, r3, #1
 800ce34:	441a      	add	r2, r3
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	685b      	ldr	r3, [r3, #4]
 800ce3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce3e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ce40:	693b      	ldr	r3, [r7, #16]
 800ce42:	2b0f      	cmp	r3, #15
 800ce44:	d916      	bls.n	800ce74 <UART_SetConfig+0x404>
 800ce46:	693b      	ldr	r3, [r7, #16]
 800ce48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce4c:	d212      	bcs.n	800ce74 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ce4e:	693b      	ldr	r3, [r7, #16]
 800ce50:	b29b      	uxth	r3, r3
 800ce52:	f023 030f 	bic.w	r3, r3, #15
 800ce56:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ce58:	693b      	ldr	r3, [r7, #16]
 800ce5a:	085b      	lsrs	r3, r3, #1
 800ce5c:	b29b      	uxth	r3, r3
 800ce5e:	f003 0307 	and.w	r3, r3, #7
 800ce62:	b29a      	uxth	r2, r3
 800ce64:	89fb      	ldrh	r3, [r7, #14]
 800ce66:	4313      	orrs	r3, r2
 800ce68:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	89fa      	ldrh	r2, [r7, #14]
 800ce70:	60da      	str	r2, [r3, #12]
 800ce72:	e04f      	b.n	800cf14 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ce74:	2301      	movs	r3, #1
 800ce76:	77bb      	strb	r3, [r7, #30]
 800ce78:	e04c      	b.n	800cf14 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ce7a:	7ffb      	ldrb	r3, [r7, #31]
 800ce7c:	2b08      	cmp	r3, #8
 800ce7e:	d828      	bhi.n	800ced2 <UART_SetConfig+0x462>
 800ce80:	a201      	add	r2, pc, #4	; (adr r2, 800ce88 <UART_SetConfig+0x418>)
 800ce82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce86:	bf00      	nop
 800ce88:	0800cead 	.word	0x0800cead
 800ce8c:	0800ceb5 	.word	0x0800ceb5
 800ce90:	0800cebd 	.word	0x0800cebd
 800ce94:	0800ced3 	.word	0x0800ced3
 800ce98:	0800cec3 	.word	0x0800cec3
 800ce9c:	0800ced3 	.word	0x0800ced3
 800cea0:	0800ced3 	.word	0x0800ced3
 800cea4:	0800ced3 	.word	0x0800ced3
 800cea8:	0800cecb 	.word	0x0800cecb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ceac:	f7fb fd04 	bl	80088b8 <HAL_RCC_GetPCLK1Freq>
 800ceb0:	61b8      	str	r0, [r7, #24]
        break;
 800ceb2:	e013      	b.n	800cedc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ceb4:	f7fb fd14 	bl	80088e0 <HAL_RCC_GetPCLK2Freq>
 800ceb8:	61b8      	str	r0, [r7, #24]
        break;
 800ceba:	e00f      	b.n	800cedc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cebc:	4b1d      	ldr	r3, [pc, #116]	; (800cf34 <UART_SetConfig+0x4c4>)
 800cebe:	61bb      	str	r3, [r7, #24]
        break;
 800cec0:	e00c      	b.n	800cedc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cec2:	f7fb fc27 	bl	8008714 <HAL_RCC_GetSysClockFreq>
 800cec6:	61b8      	str	r0, [r7, #24]
        break;
 800cec8:	e008      	b.n	800cedc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ceca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cece:	61bb      	str	r3, [r7, #24]
        break;
 800ced0:	e004      	b.n	800cedc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800ced2:	2300      	movs	r3, #0
 800ced4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ced6:	2301      	movs	r3, #1
 800ced8:	77bb      	strb	r3, [r7, #30]
        break;
 800ceda:	bf00      	nop
    }

    if (pclk != 0U)
 800cedc:	69bb      	ldr	r3, [r7, #24]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d018      	beq.n	800cf14 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	685b      	ldr	r3, [r3, #4]
 800cee6:	085a      	lsrs	r2, r3, #1
 800cee8:	69bb      	ldr	r3, [r7, #24]
 800ceea:	441a      	add	r2, r3
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	685b      	ldr	r3, [r3, #4]
 800cef0:	fbb2 f3f3 	udiv	r3, r2, r3
 800cef4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cef6:	693b      	ldr	r3, [r7, #16]
 800cef8:	2b0f      	cmp	r3, #15
 800cefa:	d909      	bls.n	800cf10 <UART_SetConfig+0x4a0>
 800cefc:	693b      	ldr	r3, [r7, #16]
 800cefe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf02:	d205      	bcs.n	800cf10 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cf04:	693b      	ldr	r3, [r7, #16]
 800cf06:	b29a      	uxth	r2, r3
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	60da      	str	r2, [r3, #12]
 800cf0e:	e001      	b.n	800cf14 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800cf10:	2301      	movs	r3, #1
 800cf12:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2200      	movs	r2, #0
 800cf18:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800cf20:	7fbb      	ldrb	r3, [r7, #30]
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	3720      	adds	r7, #32
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}
 800cf2a:	bf00      	nop
 800cf2c:	40007c00 	.word	0x40007c00
 800cf30:	40023800 	.word	0x40023800
 800cf34:	00f42400 	.word	0x00f42400

0800cf38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cf38:	b480      	push	{r7}
 800cf3a:	b083      	sub	sp, #12
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf44:	f003 0301 	and.w	r3, r3, #1
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d00a      	beq.n	800cf62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	685b      	ldr	r3, [r3, #4]
 800cf52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	430a      	orrs	r2, r1
 800cf60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf66:	f003 0302 	and.w	r3, r3, #2
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d00a      	beq.n	800cf84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	685b      	ldr	r3, [r3, #4]
 800cf74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	430a      	orrs	r2, r1
 800cf82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf88:	f003 0304 	and.w	r3, r3, #4
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d00a      	beq.n	800cfa6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	685b      	ldr	r3, [r3, #4]
 800cf96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	430a      	orrs	r2, r1
 800cfa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfaa:	f003 0308 	and.w	r3, r3, #8
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d00a      	beq.n	800cfc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	685b      	ldr	r3, [r3, #4]
 800cfb8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	430a      	orrs	r2, r1
 800cfc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfcc:	f003 0310 	and.w	r3, r3, #16
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d00a      	beq.n	800cfea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	689b      	ldr	r3, [r3, #8]
 800cfda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	430a      	orrs	r2, r1
 800cfe8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfee:	f003 0320 	and.w	r3, r3, #32
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d00a      	beq.n	800d00c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	689b      	ldr	r3, [r3, #8]
 800cffc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	430a      	orrs	r2, r1
 800d00a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d014:	2b00      	cmp	r3, #0
 800d016:	d01a      	beq.n	800d04e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	685b      	ldr	r3, [r3, #4]
 800d01e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	430a      	orrs	r2, r1
 800d02c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d032:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d036:	d10a      	bne.n	800d04e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	685b      	ldr	r3, [r3, #4]
 800d03e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	430a      	orrs	r2, r1
 800d04c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d056:	2b00      	cmp	r3, #0
 800d058:	d00a      	beq.n	800d070 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	685b      	ldr	r3, [r3, #4]
 800d060:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	430a      	orrs	r2, r1
 800d06e:	605a      	str	r2, [r3, #4]
  }
}
 800d070:	bf00      	nop
 800d072:	370c      	adds	r7, #12
 800d074:	46bd      	mov	sp, r7
 800d076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07a:	4770      	bx	lr

0800d07c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b086      	sub	sp, #24
 800d080:	af02      	add	r7, sp, #8
 800d082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2200      	movs	r2, #0
 800d088:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d08c:	f7f8 fa64 	bl	8005558 <HAL_GetTick>
 800d090:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	f003 0308 	and.w	r3, r3, #8
 800d09c:	2b08      	cmp	r3, #8
 800d09e:	d10e      	bne.n	800d0be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d0a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d0a4:	9300      	str	r3, [sp, #0]
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	f000 f82d 	bl	800d10e <UART_WaitOnFlagUntilTimeout>
 800d0b4:	4603      	mov	r3, r0
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d001      	beq.n	800d0be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d0ba:	2303      	movs	r3, #3
 800d0bc:	e023      	b.n	800d106 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	f003 0304 	and.w	r3, r3, #4
 800d0c8:	2b04      	cmp	r3, #4
 800d0ca:	d10e      	bne.n	800d0ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d0cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d0d0:	9300      	str	r3, [sp, #0]
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d0da:	6878      	ldr	r0, [r7, #4]
 800d0dc:	f000 f817 	bl	800d10e <UART_WaitOnFlagUntilTimeout>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d001      	beq.n	800d0ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d0e6:	2303      	movs	r3, #3
 800d0e8:	e00d      	b.n	800d106 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2220      	movs	r2, #32
 800d0ee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2220      	movs	r2, #32
 800d0f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2200      	movs	r2, #0
 800d100:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800d104:	2300      	movs	r3, #0
}
 800d106:	4618      	mov	r0, r3
 800d108:	3710      	adds	r7, #16
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}

0800d10e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d10e:	b580      	push	{r7, lr}
 800d110:	b09c      	sub	sp, #112	; 0x70
 800d112:	af00      	add	r7, sp, #0
 800d114:	60f8      	str	r0, [r7, #12]
 800d116:	60b9      	str	r1, [r7, #8]
 800d118:	603b      	str	r3, [r7, #0]
 800d11a:	4613      	mov	r3, r2
 800d11c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d11e:	e0a5      	b.n	800d26c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d120:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d122:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d126:	f000 80a1 	beq.w	800d26c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d12a:	f7f8 fa15 	bl	8005558 <HAL_GetTick>
 800d12e:	4602      	mov	r2, r0
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	1ad3      	subs	r3, r2, r3
 800d134:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d136:	429a      	cmp	r2, r3
 800d138:	d302      	bcc.n	800d140 <UART_WaitOnFlagUntilTimeout+0x32>
 800d13a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d13e      	bne.n	800d1be <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d148:	e853 3f00 	ldrex	r3, [r3]
 800d14c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d14e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d150:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d154:	667b      	str	r3, [r7, #100]	; 0x64
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	461a      	mov	r2, r3
 800d15c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d15e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d160:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d162:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d164:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d166:	e841 2300 	strex	r3, r2, [r1]
 800d16a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d16c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d1e6      	bne.n	800d140 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	3308      	adds	r3, #8
 800d178:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d17a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d17c:	e853 3f00 	ldrex	r3, [r3]
 800d180:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d184:	f023 0301 	bic.w	r3, r3, #1
 800d188:	663b      	str	r3, [r7, #96]	; 0x60
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	3308      	adds	r3, #8
 800d190:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d192:	64ba      	str	r2, [r7, #72]	; 0x48
 800d194:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d196:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d198:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d19a:	e841 2300 	strex	r3, r2, [r1]
 800d19e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d1a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d1e5      	bne.n	800d172 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	2220      	movs	r2, #32
 800d1aa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	2220      	movs	r2, #32
 800d1b0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800d1ba:	2303      	movs	r3, #3
 800d1bc:	e067      	b.n	800d28e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	f003 0304 	and.w	r3, r3, #4
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d04f      	beq.n	800d26c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	69db      	ldr	r3, [r3, #28]
 800d1d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d1d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d1da:	d147      	bne.n	800d26c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d1e4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ee:	e853 3f00 	ldrex	r3, [r3]
 800d1f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d1fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	461a      	mov	r2, r3
 800d202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d204:	637b      	str	r3, [r7, #52]	; 0x34
 800d206:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d208:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d20a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d20c:	e841 2300 	strex	r3, r2, [r1]
 800d210:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d214:	2b00      	cmp	r3, #0
 800d216:	d1e6      	bne.n	800d1e6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	3308      	adds	r3, #8
 800d21e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d220:	697b      	ldr	r3, [r7, #20]
 800d222:	e853 3f00 	ldrex	r3, [r3]
 800d226:	613b      	str	r3, [r7, #16]
   return(result);
 800d228:	693b      	ldr	r3, [r7, #16]
 800d22a:	f023 0301 	bic.w	r3, r3, #1
 800d22e:	66bb      	str	r3, [r7, #104]	; 0x68
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	3308      	adds	r3, #8
 800d236:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d238:	623a      	str	r2, [r7, #32]
 800d23a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d23c:	69f9      	ldr	r1, [r7, #28]
 800d23e:	6a3a      	ldr	r2, [r7, #32]
 800d240:	e841 2300 	strex	r3, r2, [r1]
 800d244:	61bb      	str	r3, [r7, #24]
   return(result);
 800d246:	69bb      	ldr	r3, [r7, #24]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d1e5      	bne.n	800d218 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	2220      	movs	r2, #32
 800d250:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	2220      	movs	r2, #32
 800d256:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	2220      	movs	r2, #32
 800d25c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	2200      	movs	r2, #0
 800d264:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800d268:	2303      	movs	r3, #3
 800d26a:	e010      	b.n	800d28e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	69da      	ldr	r2, [r3, #28]
 800d272:	68bb      	ldr	r3, [r7, #8]
 800d274:	4013      	ands	r3, r2
 800d276:	68ba      	ldr	r2, [r7, #8]
 800d278:	429a      	cmp	r2, r3
 800d27a:	bf0c      	ite	eq
 800d27c:	2301      	moveq	r3, #1
 800d27e:	2300      	movne	r3, #0
 800d280:	b2db      	uxtb	r3, r3
 800d282:	461a      	mov	r2, r3
 800d284:	79fb      	ldrb	r3, [r7, #7]
 800d286:	429a      	cmp	r2, r3
 800d288:	f43f af4a 	beq.w	800d120 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d28c:	2300      	movs	r3, #0
}
 800d28e:	4618      	mov	r0, r3
 800d290:	3770      	adds	r7, #112	; 0x70
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}
	...

0800d298 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d298:	b480      	push	{r7}
 800d29a:	b097      	sub	sp, #92	; 0x5c
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	60f8      	str	r0, [r7, #12]
 800d2a0:	60b9      	str	r1, [r7, #8]
 800d2a2:	4613      	mov	r3, r2
 800d2a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	68ba      	ldr	r2, [r7, #8]
 800d2aa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	88fa      	ldrh	r2, [r7, #6]
 800d2b0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	88fa      	ldrh	r2, [r7, #6]
 800d2b8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	2200      	movs	r2, #0
 800d2c0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	689b      	ldr	r3, [r3, #8]
 800d2c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d2ca:	d10e      	bne.n	800d2ea <UART_Start_Receive_IT+0x52>
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	691b      	ldr	r3, [r3, #16]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d105      	bne.n	800d2e0 <UART_Start_Receive_IT+0x48>
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d2da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d2de:	e02d      	b.n	800d33c <UART_Start_Receive_IT+0xa4>
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	22ff      	movs	r2, #255	; 0xff
 800d2e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d2e8:	e028      	b.n	800d33c <UART_Start_Receive_IT+0xa4>
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	689b      	ldr	r3, [r3, #8]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d10d      	bne.n	800d30e <UART_Start_Receive_IT+0x76>
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	691b      	ldr	r3, [r3, #16]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d104      	bne.n	800d304 <UART_Start_Receive_IT+0x6c>
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	22ff      	movs	r2, #255	; 0xff
 800d2fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d302:	e01b      	b.n	800d33c <UART_Start_Receive_IT+0xa4>
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	227f      	movs	r2, #127	; 0x7f
 800d308:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d30c:	e016      	b.n	800d33c <UART_Start_Receive_IT+0xa4>
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	689b      	ldr	r3, [r3, #8]
 800d312:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d316:	d10d      	bne.n	800d334 <UART_Start_Receive_IT+0x9c>
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	691b      	ldr	r3, [r3, #16]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d104      	bne.n	800d32a <UART_Start_Receive_IT+0x92>
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	227f      	movs	r2, #127	; 0x7f
 800d324:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d328:	e008      	b.n	800d33c <UART_Start_Receive_IT+0xa4>
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	223f      	movs	r2, #63	; 0x3f
 800d32e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d332:	e003      	b.n	800d33c <UART_Start_Receive_IT+0xa4>
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	2200      	movs	r2, #0
 800d338:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	2200      	movs	r2, #0
 800d340:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	2222      	movs	r2, #34	; 0x22
 800d348:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	3308      	adds	r3, #8
 800d350:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d354:	e853 3f00 	ldrex	r3, [r3]
 800d358:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d35a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d35c:	f043 0301 	orr.w	r3, r3, #1
 800d360:	657b      	str	r3, [r7, #84]	; 0x54
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	3308      	adds	r3, #8
 800d368:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d36a:	64ba      	str	r2, [r7, #72]	; 0x48
 800d36c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d36e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d370:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d372:	e841 2300 	strex	r3, r2, [r1]
 800d376:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d378:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d1e5      	bne.n	800d34a <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	689b      	ldr	r3, [r3, #8]
 800d382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d386:	d107      	bne.n	800d398 <UART_Start_Receive_IT+0x100>
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	691b      	ldr	r3, [r3, #16]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d103      	bne.n	800d398 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	4a24      	ldr	r2, [pc, #144]	; (800d424 <UART_Start_Receive_IT+0x18c>)
 800d394:	665a      	str	r2, [r3, #100]	; 0x64
 800d396:	e002      	b.n	800d39e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	4a23      	ldr	r2, [pc, #140]	; (800d428 <UART_Start_Receive_IT+0x190>)
 800d39c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	691b      	ldr	r3, [r3, #16]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d019      	beq.n	800d3e2 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3b6:	e853 3f00 	ldrex	r3, [r3]
 800d3ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3be:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800d3c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	461a      	mov	r2, r3
 800d3ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3cc:	637b      	str	r3, [r7, #52]	; 0x34
 800d3ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d3d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d3d4:	e841 2300 	strex	r3, r2, [r1]
 800d3d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d1e6      	bne.n	800d3ae <UART_Start_Receive_IT+0x116>
 800d3e0:	e018      	b.n	800d414 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3e8:	697b      	ldr	r3, [r7, #20]
 800d3ea:	e853 3f00 	ldrex	r3, [r3]
 800d3ee:	613b      	str	r3, [r7, #16]
   return(result);
 800d3f0:	693b      	ldr	r3, [r7, #16]
 800d3f2:	f043 0320 	orr.w	r3, r3, #32
 800d3f6:	653b      	str	r3, [r7, #80]	; 0x50
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	461a      	mov	r2, r3
 800d3fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d400:	623b      	str	r3, [r7, #32]
 800d402:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d404:	69f9      	ldr	r1, [r7, #28]
 800d406:	6a3a      	ldr	r2, [r7, #32]
 800d408:	e841 2300 	strex	r3, r2, [r1]
 800d40c:	61bb      	str	r3, [r7, #24]
   return(result);
 800d40e:	69bb      	ldr	r3, [r7, #24]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d1e6      	bne.n	800d3e2 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 800d414:	2300      	movs	r3, #0
}
 800d416:	4618      	mov	r0, r3
 800d418:	375c      	adds	r7, #92	; 0x5c
 800d41a:	46bd      	mov	sp, r7
 800d41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d420:	4770      	bx	lr
 800d422:	bf00      	nop
 800d424:	0800d6cf 	.word	0x0800d6cf
 800d428:	0800d573 	.word	0x0800d573

0800d42c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d42c:	b480      	push	{r7}
 800d42e:	b095      	sub	sp, #84	; 0x54
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d43a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d43c:	e853 3f00 	ldrex	r3, [r3]
 800d440:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d444:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d448:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	461a      	mov	r2, r3
 800d450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d452:	643b      	str	r3, [r7, #64]	; 0x40
 800d454:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d456:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d458:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d45a:	e841 2300 	strex	r3, r2, [r1]
 800d45e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d462:	2b00      	cmp	r3, #0
 800d464:	d1e6      	bne.n	800d434 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	3308      	adds	r3, #8
 800d46c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d46e:	6a3b      	ldr	r3, [r7, #32]
 800d470:	e853 3f00 	ldrex	r3, [r3]
 800d474:	61fb      	str	r3, [r7, #28]
   return(result);
 800d476:	69fb      	ldr	r3, [r7, #28]
 800d478:	f023 0301 	bic.w	r3, r3, #1
 800d47c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	3308      	adds	r3, #8
 800d484:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d486:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d488:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d48a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d48c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d48e:	e841 2300 	strex	r3, r2, [r1]
 800d492:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d496:	2b00      	cmp	r3, #0
 800d498:	d1e5      	bne.n	800d466 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d49e:	2b01      	cmp	r3, #1
 800d4a0:	d118      	bne.n	800d4d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	e853 3f00 	ldrex	r3, [r3]
 800d4ae:	60bb      	str	r3, [r7, #8]
   return(result);
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	f023 0310 	bic.w	r3, r3, #16
 800d4b6:	647b      	str	r3, [r7, #68]	; 0x44
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	461a      	mov	r2, r3
 800d4be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4c0:	61bb      	str	r3, [r7, #24]
 800d4c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4c4:	6979      	ldr	r1, [r7, #20]
 800d4c6:	69ba      	ldr	r2, [r7, #24]
 800d4c8:	e841 2300 	strex	r3, r2, [r1]
 800d4cc:	613b      	str	r3, [r7, #16]
   return(result);
 800d4ce:	693b      	ldr	r3, [r7, #16]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d1e6      	bne.n	800d4a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	2220      	movs	r2, #32
 800d4d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	2200      	movs	r2, #0
 800d4de:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	665a      	str	r2, [r3, #100]	; 0x64
}
 800d4e6:	bf00      	nop
 800d4e8:	3754      	adds	r7, #84	; 0x54
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f0:	4770      	bx	lr

0800d4f2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d4f2:	b580      	push	{r7, lr}
 800d4f4:	b084      	sub	sp, #16
 800d4f6:	af00      	add	r7, sp, #0
 800d4f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	2200      	movs	r2, #0
 800d504:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	2200      	movs	r2, #0
 800d50c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d510:	68f8      	ldr	r0, [r7, #12]
 800d512:	f7ff fa8d 	bl	800ca30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d516:	bf00      	nop
 800d518:	3710      	adds	r7, #16
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd80      	pop	{r7, pc}

0800d51e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d51e:	b580      	push	{r7, lr}
 800d520:	b088      	sub	sp, #32
 800d522:	af00      	add	r7, sp, #0
 800d524:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	e853 3f00 	ldrex	r3, [r3]
 800d532:	60bb      	str	r3, [r7, #8]
   return(result);
 800d534:	68bb      	ldr	r3, [r7, #8]
 800d536:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d53a:	61fb      	str	r3, [r7, #28]
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	461a      	mov	r2, r3
 800d542:	69fb      	ldr	r3, [r7, #28]
 800d544:	61bb      	str	r3, [r7, #24]
 800d546:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d548:	6979      	ldr	r1, [r7, #20]
 800d54a:	69ba      	ldr	r2, [r7, #24]
 800d54c:	e841 2300 	strex	r3, r2, [r1]
 800d550:	613b      	str	r3, [r7, #16]
   return(result);
 800d552:	693b      	ldr	r3, [r7, #16]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d1e6      	bne.n	800d526 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2220      	movs	r2, #32
 800d55c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	2200      	movs	r2, #0
 800d562:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	f7ff fa59 	bl	800ca1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d56a:	bf00      	nop
 800d56c:	3720      	adds	r7, #32
 800d56e:	46bd      	mov	sp, r7
 800d570:	bd80      	pop	{r7, pc}

0800d572 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d572:	b580      	push	{r7, lr}
 800d574:	b096      	sub	sp, #88	; 0x58
 800d576:	af00      	add	r7, sp, #0
 800d578:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d580:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d588:	2b22      	cmp	r3, #34	; 0x22
 800d58a:	f040 8094 	bne.w	800d6b6 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d594:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d598:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800d59c:	b2d9      	uxtb	r1, r3
 800d59e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800d5a2:	b2da      	uxtb	r2, r3
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5a8:	400a      	ands	r2, r1
 800d5aa:	b2d2      	uxtb	r2, r2
 800d5ac:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5b2:	1c5a      	adds	r2, r3, #1
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d5be:	b29b      	uxth	r3, r3
 800d5c0:	3b01      	subs	r3, #1
 800d5c2:	b29a      	uxth	r2, r3
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d5d0:	b29b      	uxth	r3, r3
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d177      	bne.n	800d6c6 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5de:	e853 3f00 	ldrex	r3, [r3]
 800d5e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d5e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d5ea:	653b      	str	r3, [r7, #80]	; 0x50
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	461a      	mov	r2, r3
 800d5f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5f4:	647b      	str	r3, [r7, #68]	; 0x44
 800d5f6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d5fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d5fc:	e841 2300 	strex	r3, r2, [r1]
 800d600:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d604:	2b00      	cmp	r3, #0
 800d606:	d1e6      	bne.n	800d5d6 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	3308      	adds	r3, #8
 800d60e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d612:	e853 3f00 	ldrex	r3, [r3]
 800d616:	623b      	str	r3, [r7, #32]
   return(result);
 800d618:	6a3b      	ldr	r3, [r7, #32]
 800d61a:	f023 0301 	bic.w	r3, r3, #1
 800d61e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	3308      	adds	r3, #8
 800d626:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d628:	633a      	str	r2, [r7, #48]	; 0x30
 800d62a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d62c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d62e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d630:	e841 2300 	strex	r3, r2, [r1]
 800d634:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d1e5      	bne.n	800d608 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2220      	movs	r2, #32
 800d640:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2200      	movs	r2, #0
 800d646:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d64c:	2b01      	cmp	r3, #1
 800d64e:	d12e      	bne.n	800d6ae <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	2200      	movs	r2, #0
 800d654:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d65c:	693b      	ldr	r3, [r7, #16]
 800d65e:	e853 3f00 	ldrex	r3, [r3]
 800d662:	60fb      	str	r3, [r7, #12]
   return(result);
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	f023 0310 	bic.w	r3, r3, #16
 800d66a:	64bb      	str	r3, [r7, #72]	; 0x48
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	461a      	mov	r2, r3
 800d672:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d674:	61fb      	str	r3, [r7, #28]
 800d676:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d678:	69b9      	ldr	r1, [r7, #24]
 800d67a:	69fa      	ldr	r2, [r7, #28]
 800d67c:	e841 2300 	strex	r3, r2, [r1]
 800d680:	617b      	str	r3, [r7, #20]
   return(result);
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d1e6      	bne.n	800d656 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	69db      	ldr	r3, [r3, #28]
 800d68e:	f003 0310 	and.w	r3, r3, #16
 800d692:	2b10      	cmp	r3, #16
 800d694:	d103      	bne.n	800d69e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	2210      	movs	r2, #16
 800d69c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d6a4:	4619      	mov	r1, r3
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	f7ff f9cc 	bl	800ca44 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d6ac:	e00b      	b.n	800d6c6 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	f7f6 fcd4 	bl	800405c <HAL_UART_RxCpltCallback>
}
 800d6b4:	e007      	b.n	800d6c6 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	699a      	ldr	r2, [r3, #24]
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	f042 0208 	orr.w	r2, r2, #8
 800d6c4:	619a      	str	r2, [r3, #24]
}
 800d6c6:	bf00      	nop
 800d6c8:	3758      	adds	r7, #88	; 0x58
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd80      	pop	{r7, pc}

0800d6ce <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d6ce:	b580      	push	{r7, lr}
 800d6d0:	b096      	sub	sp, #88	; 0x58
 800d6d2:	af00      	add	r7, sp, #0
 800d6d4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d6dc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6e4:	2b22      	cmp	r3, #34	; 0x22
 800d6e6:	f040 8094 	bne.w	800d812 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6f0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6f8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800d6fa:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800d6fe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800d702:	4013      	ands	r3, r2
 800d704:	b29a      	uxth	r2, r3
 800d706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d708:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d70e:	1c9a      	adds	r2, r3, #2
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d71a:	b29b      	uxth	r3, r3
 800d71c:	3b01      	subs	r3, #1
 800d71e:	b29a      	uxth	r2, r3
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d72c:	b29b      	uxth	r3, r3
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d177      	bne.n	800d822 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d73a:	e853 3f00 	ldrex	r3, [r3]
 800d73e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d742:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d746:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	461a      	mov	r2, r3
 800d74e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d750:	643b      	str	r3, [r7, #64]	; 0x40
 800d752:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d754:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d756:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d758:	e841 2300 	strex	r3, r2, [r1]
 800d75c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d760:	2b00      	cmp	r3, #0
 800d762:	d1e6      	bne.n	800d732 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	3308      	adds	r3, #8
 800d76a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d76c:	6a3b      	ldr	r3, [r7, #32]
 800d76e:	e853 3f00 	ldrex	r3, [r3]
 800d772:	61fb      	str	r3, [r7, #28]
   return(result);
 800d774:	69fb      	ldr	r3, [r7, #28]
 800d776:	f023 0301 	bic.w	r3, r3, #1
 800d77a:	64bb      	str	r3, [r7, #72]	; 0x48
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	3308      	adds	r3, #8
 800d782:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d784:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d786:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d788:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d78a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d78c:	e841 2300 	strex	r3, r2, [r1]
 800d790:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d794:	2b00      	cmp	r3, #0
 800d796:	d1e5      	bne.n	800d764 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2220      	movs	r2, #32
 800d79c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d7a8:	2b01      	cmp	r3, #1
 800d7aa:	d12e      	bne.n	800d80a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	e853 3f00 	ldrex	r3, [r3]
 800d7be:	60bb      	str	r3, [r7, #8]
   return(result);
 800d7c0:	68bb      	ldr	r3, [r7, #8]
 800d7c2:	f023 0310 	bic.w	r3, r3, #16
 800d7c6:	647b      	str	r3, [r7, #68]	; 0x44
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	461a      	mov	r2, r3
 800d7ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7d0:	61bb      	str	r3, [r7, #24]
 800d7d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7d4:	6979      	ldr	r1, [r7, #20]
 800d7d6:	69ba      	ldr	r2, [r7, #24]
 800d7d8:	e841 2300 	strex	r3, r2, [r1]
 800d7dc:	613b      	str	r3, [r7, #16]
   return(result);
 800d7de:	693b      	ldr	r3, [r7, #16]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d1e6      	bne.n	800d7b2 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	69db      	ldr	r3, [r3, #28]
 800d7ea:	f003 0310 	and.w	r3, r3, #16
 800d7ee:	2b10      	cmp	r3, #16
 800d7f0:	d103      	bne.n	800d7fa <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	2210      	movs	r2, #16
 800d7f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d800:	4619      	mov	r1, r3
 800d802:	6878      	ldr	r0, [r7, #4]
 800d804:	f7ff f91e 	bl	800ca44 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d808:	e00b      	b.n	800d822 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800d80a:	6878      	ldr	r0, [r7, #4]
 800d80c:	f7f6 fc26 	bl	800405c <HAL_UART_RxCpltCallback>
}
 800d810:	e007      	b.n	800d822 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	699a      	ldr	r2, [r3, #24]
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	f042 0208 	orr.w	r2, r2, #8
 800d820:	619a      	str	r2, [r3, #24]
}
 800d822:	bf00      	nop
 800d824:	3758      	adds	r7, #88	; 0x58
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}
	...

0800d82c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d82c:	b084      	sub	sp, #16
 800d82e:	b480      	push	{r7}
 800d830:	b085      	sub	sp, #20
 800d832:	af00      	add	r7, sp, #0
 800d834:	6078      	str	r0, [r7, #4]
 800d836:	f107 001c 	add.w	r0, r7, #28
 800d83a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d83e:	2300      	movs	r3, #0
 800d840:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d842:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800d844:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d846:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800d848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800d84a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800d84e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800d852:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800d856:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d858:	68fa      	ldr	r2, [r7, #12]
 800d85a:	4313      	orrs	r3, r2
 800d85c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	685a      	ldr	r2, [r3, #4]
 800d862:	4b07      	ldr	r3, [pc, #28]	; (800d880 <SDMMC_Init+0x54>)
 800d864:	4013      	ands	r3, r2
 800d866:	68fa      	ldr	r2, [r7, #12]
 800d868:	431a      	orrs	r2, r3
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d86e:	2300      	movs	r3, #0
}
 800d870:	4618      	mov	r0, r3
 800d872:	3714      	adds	r7, #20
 800d874:	46bd      	mov	sp, r7
 800d876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87a:	b004      	add	sp, #16
 800d87c:	4770      	bx	lr
 800d87e:	bf00      	nop
 800d880:	ffff8100 	.word	0xffff8100

0800d884 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800d884:	b480      	push	{r7}
 800d886:	b083      	sub	sp, #12
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d892:	4618      	mov	r0, r3
 800d894:	370c      	adds	r7, #12
 800d896:	46bd      	mov	sp, r7
 800d898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89c:	4770      	bx	lr

0800d89e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800d89e:	b480      	push	{r7}
 800d8a0:	b083      	sub	sp, #12
 800d8a2:	af00      	add	r7, sp, #0
 800d8a4:	6078      	str	r0, [r7, #4]
 800d8a6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	681a      	ldr	r2, [r3, #0]
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d8b2:	2300      	movs	r3, #0
}
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	370c      	adds	r7, #12
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8be:	4770      	bx	lr

0800d8c0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800d8c0:	b480      	push	{r7}
 800d8c2:	b083      	sub	sp, #12
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2203      	movs	r2, #3
 800d8cc:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d8ce:	2300      	movs	r3, #0
}
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	370c      	adds	r7, #12
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8da:	4770      	bx	lr

0800d8dc <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800d8dc:	b480      	push	{r7}
 800d8de:	b083      	sub	sp, #12
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	f003 0303 	and.w	r3, r3, #3
}
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	370c      	adds	r7, #12
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f6:	4770      	bx	lr

0800d8f8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800d8f8:	b480      	push	{r7}
 800d8fa:	b085      	sub	sp, #20
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
 800d900:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d902:	2300      	movs	r3, #0
 800d904:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	681a      	ldr	r2, [r3, #0]
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d912:	683b      	ldr	r3, [r7, #0]
 800d914:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d916:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d918:	683b      	ldr	r3, [r7, #0]
 800d91a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d91c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d91e:	683b      	ldr	r3, [r7, #0]
 800d920:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d922:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d924:	68fa      	ldr	r2, [r7, #12]
 800d926:	4313      	orrs	r3, r2
 800d928:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	68da      	ldr	r2, [r3, #12]
 800d92e:	4b06      	ldr	r3, [pc, #24]	; (800d948 <SDMMC_SendCommand+0x50>)
 800d930:	4013      	ands	r3, r2
 800d932:	68fa      	ldr	r2, [r7, #12]
 800d934:	431a      	orrs	r2, r3
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800d93a:	2300      	movs	r3, #0
}
 800d93c:	4618      	mov	r0, r3
 800d93e:	3714      	adds	r7, #20
 800d940:	46bd      	mov	sp, r7
 800d942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d946:	4770      	bx	lr
 800d948:	fffff000 	.word	0xfffff000

0800d94c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d94c:	b480      	push	{r7}
 800d94e:	b083      	sub	sp, #12
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	691b      	ldr	r3, [r3, #16]
 800d958:	b2db      	uxtb	r3, r3
}
 800d95a:	4618      	mov	r0, r3
 800d95c:	370c      	adds	r7, #12
 800d95e:	46bd      	mov	sp, r7
 800d960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d964:	4770      	bx	lr

0800d966 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d966:	b480      	push	{r7}
 800d968:	b085      	sub	sp, #20
 800d96a:	af00      	add	r7, sp, #0
 800d96c:	6078      	str	r0, [r7, #4]
 800d96e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	3314      	adds	r3, #20
 800d974:	461a      	mov	r2, r3
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	4413      	add	r3, r2
 800d97a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	681b      	ldr	r3, [r3, #0]
}  
 800d980:	4618      	mov	r0, r3
 800d982:	3714      	adds	r7, #20
 800d984:	46bd      	mov	sp, r7
 800d986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98a:	4770      	bx	lr

0800d98c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800d98c:	b480      	push	{r7}
 800d98e:	b085      	sub	sp, #20
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
 800d994:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d996:	2300      	movs	r3, #0
 800d998:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	681a      	ldr	r2, [r3, #0]
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	685a      	ldr	r2, [r3, #4]
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d9ae:	683b      	ldr	r3, [r7, #0]
 800d9b0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d9b2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d9b8:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d9be:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d9c0:	68fa      	ldr	r2, [r7, #12]
 800d9c2:	4313      	orrs	r3, r2
 800d9c4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9ca:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	431a      	orrs	r2, r3
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d9d6:	2300      	movs	r3, #0

}
 800d9d8:	4618      	mov	r0, r3
 800d9da:	3714      	adds	r7, #20
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e2:	4770      	bx	lr

0800d9e4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b088      	sub	sp, #32
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
 800d9ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d9ee:	683b      	ldr	r3, [r7, #0]
 800d9f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d9f2:	2310      	movs	r3, #16
 800d9f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d9f6:	2340      	movs	r3, #64	; 0x40
 800d9f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d9fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da02:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800da04:	f107 0308 	add.w	r3, r7, #8
 800da08:	4619      	mov	r1, r3
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	f7ff ff74 	bl	800d8f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800da10:	f241 3288 	movw	r2, #5000	; 0x1388
 800da14:	2110      	movs	r1, #16
 800da16:	6878      	ldr	r0, [r7, #4]
 800da18:	f000 fa1a 	bl	800de50 <SDMMC_GetCmdResp1>
 800da1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da1e:	69fb      	ldr	r3, [r7, #28]
}
 800da20:	4618      	mov	r0, r3
 800da22:	3720      	adds	r7, #32
 800da24:	46bd      	mov	sp, r7
 800da26:	bd80      	pop	{r7, pc}

0800da28 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b088      	sub	sp, #32
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
 800da30:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800da36:	2311      	movs	r3, #17
 800da38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800da3a:	2340      	movs	r3, #64	; 0x40
 800da3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800da3e:	2300      	movs	r3, #0
 800da40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800da42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da46:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800da48:	f107 0308 	add.w	r3, r7, #8
 800da4c:	4619      	mov	r1, r3
 800da4e:	6878      	ldr	r0, [r7, #4]
 800da50:	f7ff ff52 	bl	800d8f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800da54:	f241 3288 	movw	r2, #5000	; 0x1388
 800da58:	2111      	movs	r1, #17
 800da5a:	6878      	ldr	r0, [r7, #4]
 800da5c:	f000 f9f8 	bl	800de50 <SDMMC_GetCmdResp1>
 800da60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da62:	69fb      	ldr	r3, [r7, #28]
}
 800da64:	4618      	mov	r0, r3
 800da66:	3720      	adds	r7, #32
 800da68:	46bd      	mov	sp, r7
 800da6a:	bd80      	pop	{r7, pc}

0800da6c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b088      	sub	sp, #32
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
 800da74:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800da7a:	2312      	movs	r3, #18
 800da7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800da7e:	2340      	movs	r3, #64	; 0x40
 800da80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800da82:	2300      	movs	r3, #0
 800da84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800da86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da8a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800da8c:	f107 0308 	add.w	r3, r7, #8
 800da90:	4619      	mov	r1, r3
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	f7ff ff30 	bl	800d8f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800da98:	f241 3288 	movw	r2, #5000	; 0x1388
 800da9c:	2112      	movs	r1, #18
 800da9e:	6878      	ldr	r0, [r7, #4]
 800daa0:	f000 f9d6 	bl	800de50 <SDMMC_GetCmdResp1>
 800daa4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800daa6:	69fb      	ldr	r3, [r7, #28]
}
 800daa8:	4618      	mov	r0, r3
 800daaa:	3720      	adds	r7, #32
 800daac:	46bd      	mov	sp, r7
 800daae:	bd80      	pop	{r7, pc}

0800dab0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b088      	sub	sp, #32
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
 800dab8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800dabe:	2318      	movs	r3, #24
 800dac0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dac2:	2340      	movs	r3, #64	; 0x40
 800dac4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dac6:	2300      	movs	r3, #0
 800dac8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800daca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dace:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dad0:	f107 0308 	add.w	r3, r7, #8
 800dad4:	4619      	mov	r1, r3
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	f7ff ff0e 	bl	800d8f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800dadc:	f241 3288 	movw	r2, #5000	; 0x1388
 800dae0:	2118      	movs	r1, #24
 800dae2:	6878      	ldr	r0, [r7, #4]
 800dae4:	f000 f9b4 	bl	800de50 <SDMMC_GetCmdResp1>
 800dae8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800daea:	69fb      	ldr	r3, [r7, #28]
}
 800daec:	4618      	mov	r0, r3
 800daee:	3720      	adds	r7, #32
 800daf0:	46bd      	mov	sp, r7
 800daf2:	bd80      	pop	{r7, pc}

0800daf4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b088      	sub	sp, #32
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
 800dafc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800db02:	2319      	movs	r3, #25
 800db04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800db06:	2340      	movs	r3, #64	; 0x40
 800db08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800db0a:	2300      	movs	r3, #0
 800db0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db12:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db14:	f107 0308 	add.w	r3, r7, #8
 800db18:	4619      	mov	r1, r3
 800db1a:	6878      	ldr	r0, [r7, #4]
 800db1c:	f7ff feec 	bl	800d8f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800db20:	f241 3288 	movw	r2, #5000	; 0x1388
 800db24:	2119      	movs	r1, #25
 800db26:	6878      	ldr	r0, [r7, #4]
 800db28:	f000 f992 	bl	800de50 <SDMMC_GetCmdResp1>
 800db2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db2e:	69fb      	ldr	r3, [r7, #28]
}
 800db30:	4618      	mov	r0, r3
 800db32:	3720      	adds	r7, #32
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}

0800db38 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b088      	sub	sp, #32
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800db40:	2300      	movs	r3, #0
 800db42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800db44:	230c      	movs	r3, #12
 800db46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800db48:	2340      	movs	r3, #64	; 0x40
 800db4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800db4c:	2300      	movs	r3, #0
 800db4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db54:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db56:	f107 0308 	add.w	r3, r7, #8
 800db5a:	4619      	mov	r1, r3
 800db5c:	6878      	ldr	r0, [r7, #4]
 800db5e:	f7ff fecb 	bl	800d8f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800db62:	4a05      	ldr	r2, [pc, #20]	; (800db78 <SDMMC_CmdStopTransfer+0x40>)
 800db64:	210c      	movs	r1, #12
 800db66:	6878      	ldr	r0, [r7, #4]
 800db68:	f000 f972 	bl	800de50 <SDMMC_GetCmdResp1>
 800db6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db6e:	69fb      	ldr	r3, [r7, #28]
}
 800db70:	4618      	mov	r0, r3
 800db72:	3720      	adds	r7, #32
 800db74:	46bd      	mov	sp, r7
 800db76:	bd80      	pop	{r7, pc}
 800db78:	05f5e100 	.word	0x05f5e100

0800db7c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b08a      	sub	sp, #40	; 0x28
 800db80:	af00      	add	r7, sp, #0
 800db82:	60f8      	str	r0, [r7, #12]
 800db84:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800db8c:	2307      	movs	r3, #7
 800db8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800db90:	2340      	movs	r3, #64	; 0x40
 800db92:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800db94:	2300      	movs	r3, #0
 800db96:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db9c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db9e:	f107 0310 	add.w	r3, r7, #16
 800dba2:	4619      	mov	r1, r3
 800dba4:	68f8      	ldr	r0, [r7, #12]
 800dba6:	f7ff fea7 	bl	800d8f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800dbaa:	f241 3288 	movw	r2, #5000	; 0x1388
 800dbae:	2107      	movs	r1, #7
 800dbb0:	68f8      	ldr	r0, [r7, #12]
 800dbb2:	f000 f94d 	bl	800de50 <SDMMC_GetCmdResp1>
 800dbb6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800dbb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dbba:	4618      	mov	r0, r3
 800dbbc:	3728      	adds	r7, #40	; 0x28
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}

0800dbc2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800dbc2:	b580      	push	{r7, lr}
 800dbc4:	b088      	sub	sp, #32
 800dbc6:	af00      	add	r7, sp, #0
 800dbc8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800dbca:	2300      	movs	r3, #0
 800dbcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dbda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dbde:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dbe0:	f107 0308 	add.w	r3, r7, #8
 800dbe4:	4619      	mov	r1, r3
 800dbe6:	6878      	ldr	r0, [r7, #4]
 800dbe8:	f7ff fe86 	bl	800d8f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800dbec:	6878      	ldr	r0, [r7, #4]
 800dbee:	f000 fb67 	bl	800e2c0 <SDMMC_GetCmdError>
 800dbf2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dbf4:	69fb      	ldr	r3, [r7, #28]
}
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	3720      	adds	r7, #32
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	bd80      	pop	{r7, pc}

0800dbfe <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800dbfe:	b580      	push	{r7, lr}
 800dc00:	b088      	sub	sp, #32
 800dc02:	af00      	add	r7, sp, #0
 800dc04:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800dc06:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800dc0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800dc0c:	2308      	movs	r3, #8
 800dc0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dc10:	2340      	movs	r3, #64	; 0x40
 800dc12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc14:	2300      	movs	r3, #0
 800dc16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc1c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc1e:	f107 0308 	add.w	r3, r7, #8
 800dc22:	4619      	mov	r1, r3
 800dc24:	6878      	ldr	r0, [r7, #4]
 800dc26:	f7ff fe67 	bl	800d8f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	f000 fafa 	bl	800e224 <SDMMC_GetCmdResp7>
 800dc30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc32:	69fb      	ldr	r3, [r7, #28]
}
 800dc34:	4618      	mov	r0, r3
 800dc36:	3720      	adds	r7, #32
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd80      	pop	{r7, pc}

0800dc3c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b088      	sub	sp, #32
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
 800dc44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800dc46:	683b      	ldr	r3, [r7, #0]
 800dc48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800dc4a:	2337      	movs	r3, #55	; 0x37
 800dc4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dc4e:	2340      	movs	r3, #64	; 0x40
 800dc50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc52:	2300      	movs	r3, #0
 800dc54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc5c:	f107 0308 	add.w	r3, r7, #8
 800dc60:	4619      	mov	r1, r3
 800dc62:	6878      	ldr	r0, [r7, #4]
 800dc64:	f7ff fe48 	bl	800d8f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800dc68:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc6c:	2137      	movs	r1, #55	; 0x37
 800dc6e:	6878      	ldr	r0, [r7, #4]
 800dc70:	f000 f8ee 	bl	800de50 <SDMMC_GetCmdResp1>
 800dc74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc76:	69fb      	ldr	r3, [r7, #28]
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	3720      	adds	r7, #32
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}

0800dc80 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b088      	sub	sp, #32
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
 800dc88:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800dc8a:	683a      	ldr	r2, [r7, #0]
 800dc8c:	4b0d      	ldr	r3, [pc, #52]	; (800dcc4 <SDMMC_CmdAppOperCommand+0x44>)
 800dc8e:	4313      	orrs	r3, r2
 800dc90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800dc92:	2329      	movs	r3, #41	; 0x29
 800dc94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dc96:	2340      	movs	r3, #64	; 0x40
 800dc98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dca2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dca4:	f107 0308 	add.w	r3, r7, #8
 800dca8:	4619      	mov	r1, r3
 800dcaa:	6878      	ldr	r0, [r7, #4]
 800dcac:	f7ff fe24 	bl	800d8f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800dcb0:	6878      	ldr	r0, [r7, #4]
 800dcb2:	f000 fa03 	bl	800e0bc <SDMMC_GetCmdResp3>
 800dcb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dcb8:	69fb      	ldr	r3, [r7, #28]
}
 800dcba:	4618      	mov	r0, r3
 800dcbc:	3720      	adds	r7, #32
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	bd80      	pop	{r7, pc}
 800dcc2:	bf00      	nop
 800dcc4:	80100000 	.word	0x80100000

0800dcc8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b088      	sub	sp, #32
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
 800dcd0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800dcd2:	683b      	ldr	r3, [r7, #0]
 800dcd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800dcd6:	2306      	movs	r3, #6
 800dcd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dcda:	2340      	movs	r3, #64	; 0x40
 800dcdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dcde:	2300      	movs	r3, #0
 800dce0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dce2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dce6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dce8:	f107 0308 	add.w	r3, r7, #8
 800dcec:	4619      	mov	r1, r3
 800dcee:	6878      	ldr	r0, [r7, #4]
 800dcf0:	f7ff fe02 	bl	800d8f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800dcf4:	f241 3288 	movw	r2, #5000	; 0x1388
 800dcf8:	2106      	movs	r1, #6
 800dcfa:	6878      	ldr	r0, [r7, #4]
 800dcfc:	f000 f8a8 	bl	800de50 <SDMMC_GetCmdResp1>
 800dd00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd02:	69fb      	ldr	r3, [r7, #28]
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	3720      	adds	r7, #32
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}

0800dd0c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b088      	sub	sp, #32
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800dd14:	2300      	movs	r3, #0
 800dd16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800dd18:	2333      	movs	r3, #51	; 0x33
 800dd1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dd1c:	2340      	movs	r3, #64	; 0x40
 800dd1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd20:	2300      	movs	r3, #0
 800dd22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd28:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd2a:	f107 0308 	add.w	r3, r7, #8
 800dd2e:	4619      	mov	r1, r3
 800dd30:	6878      	ldr	r0, [r7, #4]
 800dd32:	f7ff fde1 	bl	800d8f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800dd36:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd3a:	2133      	movs	r1, #51	; 0x33
 800dd3c:	6878      	ldr	r0, [r7, #4]
 800dd3e:	f000 f887 	bl	800de50 <SDMMC_GetCmdResp1>
 800dd42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd44:	69fb      	ldr	r3, [r7, #28]
}
 800dd46:	4618      	mov	r0, r3
 800dd48:	3720      	adds	r7, #32
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	bd80      	pop	{r7, pc}

0800dd4e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800dd4e:	b580      	push	{r7, lr}
 800dd50:	b088      	sub	sp, #32
 800dd52:	af00      	add	r7, sp, #0
 800dd54:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800dd56:	2300      	movs	r3, #0
 800dd58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800dd5a:	2302      	movs	r3, #2
 800dd5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800dd5e:	23c0      	movs	r3, #192	; 0xc0
 800dd60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd62:	2300      	movs	r3, #0
 800dd64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd6c:	f107 0308 	add.w	r3, r7, #8
 800dd70:	4619      	mov	r1, r3
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	f7ff fdc0 	bl	800d8f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800dd78:	6878      	ldr	r0, [r7, #4]
 800dd7a:	f000 f957 	bl	800e02c <SDMMC_GetCmdResp2>
 800dd7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd80:	69fb      	ldr	r3, [r7, #28]
}
 800dd82:	4618      	mov	r0, r3
 800dd84:	3720      	adds	r7, #32
 800dd86:	46bd      	mov	sp, r7
 800dd88:	bd80      	pop	{r7, pc}

0800dd8a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dd8a:	b580      	push	{r7, lr}
 800dd8c:	b088      	sub	sp, #32
 800dd8e:	af00      	add	r7, sp, #0
 800dd90:	6078      	str	r0, [r7, #4]
 800dd92:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800dd94:	683b      	ldr	r3, [r7, #0]
 800dd96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800dd98:	2309      	movs	r3, #9
 800dd9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800dd9c:	23c0      	movs	r3, #192	; 0xc0
 800dd9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dda0:	2300      	movs	r3, #0
 800dda2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dda4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dda8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ddaa:	f107 0308 	add.w	r3, r7, #8
 800ddae:	4619      	mov	r1, r3
 800ddb0:	6878      	ldr	r0, [r7, #4]
 800ddb2:	f7ff fda1 	bl	800d8f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ddb6:	6878      	ldr	r0, [r7, #4]
 800ddb8:	f000 f938 	bl	800e02c <SDMMC_GetCmdResp2>
 800ddbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ddbe:	69fb      	ldr	r3, [r7, #28]
}
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	3720      	adds	r7, #32
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	bd80      	pop	{r7, pc}

0800ddc8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b088      	sub	sp, #32
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
 800ddd0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ddd6:	2303      	movs	r3, #3
 800ddd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ddda:	2340      	movs	r3, #64	; 0x40
 800dddc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ddde:	2300      	movs	r3, #0
 800dde0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dde2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dde6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dde8:	f107 0308 	add.w	r3, r7, #8
 800ddec:	4619      	mov	r1, r3
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	f7ff fd82 	bl	800d8f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ddf4:	683a      	ldr	r2, [r7, #0]
 800ddf6:	2103      	movs	r1, #3
 800ddf8:	6878      	ldr	r0, [r7, #4]
 800ddfa:	f000 f99d 	bl	800e138 <SDMMC_GetCmdResp6>
 800ddfe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de00:	69fb      	ldr	r3, [r7, #28]
}
 800de02:	4618      	mov	r0, r3
 800de04:	3720      	adds	r7, #32
 800de06:	46bd      	mov	sp, r7
 800de08:	bd80      	pop	{r7, pc}

0800de0a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800de0a:	b580      	push	{r7, lr}
 800de0c:	b088      	sub	sp, #32
 800de0e:	af00      	add	r7, sp, #0
 800de10:	6078      	str	r0, [r7, #4]
 800de12:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800de18:	230d      	movs	r3, #13
 800de1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800de1c:	2340      	movs	r3, #64	; 0x40
 800de1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800de20:	2300      	movs	r3, #0
 800de22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800de24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de28:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800de2a:	f107 0308 	add.w	r3, r7, #8
 800de2e:	4619      	mov	r1, r3
 800de30:	6878      	ldr	r0, [r7, #4]
 800de32:	f7ff fd61 	bl	800d8f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800de36:	f241 3288 	movw	r2, #5000	; 0x1388
 800de3a:	210d      	movs	r1, #13
 800de3c:	6878      	ldr	r0, [r7, #4]
 800de3e:	f000 f807 	bl	800de50 <SDMMC_GetCmdResp1>
 800de42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de44:	69fb      	ldr	r3, [r7, #28]
}
 800de46:	4618      	mov	r0, r3
 800de48:	3720      	adds	r7, #32
 800de4a:	46bd      	mov	sp, r7
 800de4c:	bd80      	pop	{r7, pc}
	...

0800de50 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800de50:	b580      	push	{r7, lr}
 800de52:	b088      	sub	sp, #32
 800de54:	af00      	add	r7, sp, #0
 800de56:	60f8      	str	r0, [r7, #12]
 800de58:	460b      	mov	r3, r1
 800de5a:	607a      	str	r2, [r7, #4]
 800de5c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800de5e:	4b70      	ldr	r3, [pc, #448]	; (800e020 <SDMMC_GetCmdResp1+0x1d0>)
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	4a70      	ldr	r2, [pc, #448]	; (800e024 <SDMMC_GetCmdResp1+0x1d4>)
 800de64:	fba2 2303 	umull	r2, r3, r2, r3
 800de68:	0a5a      	lsrs	r2, r3, #9
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	fb02 f303 	mul.w	r3, r2, r3
 800de70:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800de72:	69fb      	ldr	r3, [r7, #28]
 800de74:	1e5a      	subs	r2, r3, #1
 800de76:	61fa      	str	r2, [r7, #28]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d102      	bne.n	800de82 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800de7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800de80:	e0c9      	b.n	800e016 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de86:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800de88:	69bb      	ldr	r3, [r7, #24]
 800de8a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d0ef      	beq.n	800de72 <SDMMC_GetCmdResp1+0x22>
 800de92:	69bb      	ldr	r3, [r7, #24]
 800de94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d1ea      	bne.n	800de72 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dea0:	f003 0304 	and.w	r3, r3, #4
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d004      	beq.n	800deb2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	2204      	movs	r2, #4
 800deac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800deae:	2304      	movs	r3, #4
 800deb0:	e0b1      	b.n	800e016 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800deb6:	f003 0301 	and.w	r3, r3, #1
 800deba:	2b00      	cmp	r3, #0
 800debc:	d004      	beq.n	800dec8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	2201      	movs	r2, #1
 800dec2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dec4:	2301      	movs	r3, #1
 800dec6:	e0a6      	b.n	800e016 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	22c5      	movs	r2, #197	; 0xc5
 800decc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800dece:	68f8      	ldr	r0, [r7, #12]
 800ded0:	f7ff fd3c 	bl	800d94c <SDMMC_GetCommandResponse>
 800ded4:	4603      	mov	r3, r0
 800ded6:	461a      	mov	r2, r3
 800ded8:	7afb      	ldrb	r3, [r7, #11]
 800deda:	4293      	cmp	r3, r2
 800dedc:	d001      	beq.n	800dee2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dede:	2301      	movs	r3, #1
 800dee0:	e099      	b.n	800e016 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800dee2:	2100      	movs	r1, #0
 800dee4:	68f8      	ldr	r0, [r7, #12]
 800dee6:	f7ff fd3e 	bl	800d966 <SDMMC_GetResponse>
 800deea:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800deec:	697a      	ldr	r2, [r7, #20]
 800deee:	4b4e      	ldr	r3, [pc, #312]	; (800e028 <SDMMC_GetCmdResp1+0x1d8>)
 800def0:	4013      	ands	r3, r2
 800def2:	2b00      	cmp	r3, #0
 800def4:	d101      	bne.n	800defa <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800def6:	2300      	movs	r3, #0
 800def8:	e08d      	b.n	800e016 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800defa:	697b      	ldr	r3, [r7, #20]
 800defc:	2b00      	cmp	r3, #0
 800defe:	da02      	bge.n	800df06 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800df00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800df04:	e087      	b.n	800e016 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800df06:	697b      	ldr	r3, [r7, #20]
 800df08:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d001      	beq.n	800df14 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800df10:	2340      	movs	r3, #64	; 0x40
 800df12:	e080      	b.n	800e016 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800df14:	697b      	ldr	r3, [r7, #20]
 800df16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d001      	beq.n	800df22 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800df1e:	2380      	movs	r3, #128	; 0x80
 800df20:	e079      	b.n	800e016 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800df22:	697b      	ldr	r3, [r7, #20]
 800df24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d002      	beq.n	800df32 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800df2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800df30:	e071      	b.n	800e016 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800df32:	697b      	ldr	r3, [r7, #20]
 800df34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d002      	beq.n	800df42 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800df3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800df40:	e069      	b.n	800e016 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800df42:	697b      	ldr	r3, [r7, #20]
 800df44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d002      	beq.n	800df52 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800df4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df50:	e061      	b.n	800e016 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800df52:	697b      	ldr	r3, [r7, #20]
 800df54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d002      	beq.n	800df62 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800df5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800df60:	e059      	b.n	800e016 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800df62:	697b      	ldr	r3, [r7, #20]
 800df64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d002      	beq.n	800df72 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800df6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800df70:	e051      	b.n	800e016 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800df72:	697b      	ldr	r3, [r7, #20]
 800df74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d002      	beq.n	800df82 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800df7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800df80:	e049      	b.n	800e016 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800df82:	697b      	ldr	r3, [r7, #20]
 800df84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d002      	beq.n	800df92 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800df8c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800df90:	e041      	b.n	800e016 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800df92:	697b      	ldr	r3, [r7, #20]
 800df94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d002      	beq.n	800dfa2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800df9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dfa0:	e039      	b.n	800e016 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800dfa2:	697b      	ldr	r3, [r7, #20]
 800dfa4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d002      	beq.n	800dfb2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800dfac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800dfb0:	e031      	b.n	800e016 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d002      	beq.n	800dfc2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800dfbc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800dfc0:	e029      	b.n	800e016 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800dfc2:	697b      	ldr	r3, [r7, #20]
 800dfc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d002      	beq.n	800dfd2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800dfcc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800dfd0:	e021      	b.n	800e016 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800dfd2:	697b      	ldr	r3, [r7, #20]
 800dfd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d002      	beq.n	800dfe2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800dfdc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800dfe0:	e019      	b.n	800e016 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800dfe2:	697b      	ldr	r3, [r7, #20]
 800dfe4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d002      	beq.n	800dff2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800dfec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800dff0:	e011      	b.n	800e016 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800dff2:	697b      	ldr	r3, [r7, #20]
 800dff4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d002      	beq.n	800e002 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800dffc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e000:	e009      	b.n	800e016 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e002:	697b      	ldr	r3, [r7, #20]
 800e004:	f003 0308 	and.w	r3, r3, #8
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d002      	beq.n	800e012 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e00c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e010:	e001      	b.n	800e016 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e012:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e016:	4618      	mov	r0, r3
 800e018:	3720      	adds	r7, #32
 800e01a:	46bd      	mov	sp, r7
 800e01c:	bd80      	pop	{r7, pc}
 800e01e:	bf00      	nop
 800e020:	200003fc 	.word	0x200003fc
 800e024:	10624dd3 	.word	0x10624dd3
 800e028:	fdffe008 	.word	0xfdffe008

0800e02c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800e02c:	b480      	push	{r7}
 800e02e:	b085      	sub	sp, #20
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e034:	4b1f      	ldr	r3, [pc, #124]	; (800e0b4 <SDMMC_GetCmdResp2+0x88>)
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	4a1f      	ldr	r2, [pc, #124]	; (800e0b8 <SDMMC_GetCmdResp2+0x8c>)
 800e03a:	fba2 2303 	umull	r2, r3, r2, r3
 800e03e:	0a5b      	lsrs	r3, r3, #9
 800e040:	f241 3288 	movw	r2, #5000	; 0x1388
 800e044:	fb02 f303 	mul.w	r3, r2, r3
 800e048:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	1e5a      	subs	r2, r3, #1
 800e04e:	60fa      	str	r2, [r7, #12]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d102      	bne.n	800e05a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e054:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e058:	e026      	b.n	800e0a8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e05e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e060:	68bb      	ldr	r3, [r7, #8]
 800e062:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e066:	2b00      	cmp	r3, #0
 800e068:	d0ef      	beq.n	800e04a <SDMMC_GetCmdResp2+0x1e>
 800e06a:	68bb      	ldr	r3, [r7, #8]
 800e06c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e070:	2b00      	cmp	r3, #0
 800e072:	d1ea      	bne.n	800e04a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e078:	f003 0304 	and.w	r3, r3, #4
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d004      	beq.n	800e08a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2204      	movs	r2, #4
 800e084:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e086:	2304      	movs	r3, #4
 800e088:	e00e      	b.n	800e0a8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e08e:	f003 0301 	and.w	r3, r3, #1
 800e092:	2b00      	cmp	r3, #0
 800e094:	d004      	beq.n	800e0a0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	2201      	movs	r2, #1
 800e09a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e09c:	2301      	movs	r3, #1
 800e09e:	e003      	b.n	800e0a8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	22c5      	movs	r2, #197	; 0xc5
 800e0a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e0a6:	2300      	movs	r3, #0
}
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	3714      	adds	r7, #20
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b2:	4770      	bx	lr
 800e0b4:	200003fc 	.word	0x200003fc
 800e0b8:	10624dd3 	.word	0x10624dd3

0800e0bc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800e0bc:	b480      	push	{r7}
 800e0be:	b085      	sub	sp, #20
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e0c4:	4b1a      	ldr	r3, [pc, #104]	; (800e130 <SDMMC_GetCmdResp3+0x74>)
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	4a1a      	ldr	r2, [pc, #104]	; (800e134 <SDMMC_GetCmdResp3+0x78>)
 800e0ca:	fba2 2303 	umull	r2, r3, r2, r3
 800e0ce:	0a5b      	lsrs	r3, r3, #9
 800e0d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e0d4:	fb02 f303 	mul.w	r3, r2, r3
 800e0d8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	1e5a      	subs	r2, r3, #1
 800e0de:	60fa      	str	r2, [r7, #12]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d102      	bne.n	800e0ea <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e0e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e0e8:	e01b      	b.n	800e122 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0ee:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e0f0:	68bb      	ldr	r3, [r7, #8]
 800e0f2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d0ef      	beq.n	800e0da <SDMMC_GetCmdResp3+0x1e>
 800e0fa:	68bb      	ldr	r3, [r7, #8]
 800e0fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e100:	2b00      	cmp	r3, #0
 800e102:	d1ea      	bne.n	800e0da <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e108:	f003 0304 	and.w	r3, r3, #4
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d004      	beq.n	800e11a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2204      	movs	r2, #4
 800e114:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e116:	2304      	movs	r3, #4
 800e118:	e003      	b.n	800e122 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	22c5      	movs	r2, #197	; 0xc5
 800e11e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e120:	2300      	movs	r3, #0
}
 800e122:	4618      	mov	r0, r3
 800e124:	3714      	adds	r7, #20
 800e126:	46bd      	mov	sp, r7
 800e128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12c:	4770      	bx	lr
 800e12e:	bf00      	nop
 800e130:	200003fc 	.word	0x200003fc
 800e134:	10624dd3 	.word	0x10624dd3

0800e138 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b088      	sub	sp, #32
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	60f8      	str	r0, [r7, #12]
 800e140:	460b      	mov	r3, r1
 800e142:	607a      	str	r2, [r7, #4]
 800e144:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e146:	4b35      	ldr	r3, [pc, #212]	; (800e21c <SDMMC_GetCmdResp6+0xe4>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	4a35      	ldr	r2, [pc, #212]	; (800e220 <SDMMC_GetCmdResp6+0xe8>)
 800e14c:	fba2 2303 	umull	r2, r3, r2, r3
 800e150:	0a5b      	lsrs	r3, r3, #9
 800e152:	f241 3288 	movw	r2, #5000	; 0x1388
 800e156:	fb02 f303 	mul.w	r3, r2, r3
 800e15a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800e15c:	69fb      	ldr	r3, [r7, #28]
 800e15e:	1e5a      	subs	r2, r3, #1
 800e160:	61fa      	str	r2, [r7, #28]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d102      	bne.n	800e16c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e166:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e16a:	e052      	b.n	800e212 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e170:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e172:	69bb      	ldr	r3, [r7, #24]
 800e174:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d0ef      	beq.n	800e15c <SDMMC_GetCmdResp6+0x24>
 800e17c:	69bb      	ldr	r3, [r7, #24]
 800e17e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e182:	2b00      	cmp	r3, #0
 800e184:	d1ea      	bne.n	800e15c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e18a:	f003 0304 	and.w	r3, r3, #4
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d004      	beq.n	800e19c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	2204      	movs	r2, #4
 800e196:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e198:	2304      	movs	r3, #4
 800e19a:	e03a      	b.n	800e212 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1a0:	f003 0301 	and.w	r3, r3, #1
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d004      	beq.n	800e1b2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	2201      	movs	r2, #1
 800e1ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e1ae:	2301      	movs	r3, #1
 800e1b0:	e02f      	b.n	800e212 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e1b2:	68f8      	ldr	r0, [r7, #12]
 800e1b4:	f7ff fbca 	bl	800d94c <SDMMC_GetCommandResponse>
 800e1b8:	4603      	mov	r3, r0
 800e1ba:	461a      	mov	r2, r3
 800e1bc:	7afb      	ldrb	r3, [r7, #11]
 800e1be:	4293      	cmp	r3, r2
 800e1c0:	d001      	beq.n	800e1c6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e1c2:	2301      	movs	r3, #1
 800e1c4:	e025      	b.n	800e212 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	22c5      	movs	r2, #197	; 0xc5
 800e1ca:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e1cc:	2100      	movs	r1, #0
 800e1ce:	68f8      	ldr	r0, [r7, #12]
 800e1d0:	f7ff fbc9 	bl	800d966 <SDMMC_GetResponse>
 800e1d4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e1d6:	697b      	ldr	r3, [r7, #20]
 800e1d8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d106      	bne.n	800e1ee <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e1e0:	697b      	ldr	r3, [r7, #20]
 800e1e2:	0c1b      	lsrs	r3, r3, #16
 800e1e4:	b29a      	uxth	r2, r3
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	e011      	b.n	800e212 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e1ee:	697b      	ldr	r3, [r7, #20]
 800e1f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d002      	beq.n	800e1fe <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e1f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e1fc:	e009      	b.n	800e212 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e1fe:	697b      	ldr	r3, [r7, #20]
 800e200:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e204:	2b00      	cmp	r3, #0
 800e206:	d002      	beq.n	800e20e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e208:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e20c:	e001      	b.n	800e212 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e20e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e212:	4618      	mov	r0, r3
 800e214:	3720      	adds	r7, #32
 800e216:	46bd      	mov	sp, r7
 800e218:	bd80      	pop	{r7, pc}
 800e21a:	bf00      	nop
 800e21c:	200003fc 	.word	0x200003fc
 800e220:	10624dd3 	.word	0x10624dd3

0800e224 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800e224:	b480      	push	{r7}
 800e226:	b085      	sub	sp, #20
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e22c:	4b22      	ldr	r3, [pc, #136]	; (800e2b8 <SDMMC_GetCmdResp7+0x94>)
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	4a22      	ldr	r2, [pc, #136]	; (800e2bc <SDMMC_GetCmdResp7+0x98>)
 800e232:	fba2 2303 	umull	r2, r3, r2, r3
 800e236:	0a5b      	lsrs	r3, r3, #9
 800e238:	f241 3288 	movw	r2, #5000	; 0x1388
 800e23c:	fb02 f303 	mul.w	r3, r2, r3
 800e240:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	1e5a      	subs	r2, r3, #1
 800e246:	60fa      	str	r2, [r7, #12]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d102      	bne.n	800e252 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e24c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e250:	e02c      	b.n	800e2ac <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e256:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e258:	68bb      	ldr	r3, [r7, #8]
 800e25a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d0ef      	beq.n	800e242 <SDMMC_GetCmdResp7+0x1e>
 800e262:	68bb      	ldr	r3, [r7, #8]
 800e264:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d1ea      	bne.n	800e242 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e270:	f003 0304 	and.w	r3, r3, #4
 800e274:	2b00      	cmp	r3, #0
 800e276:	d004      	beq.n	800e282 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	2204      	movs	r2, #4
 800e27c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e27e:	2304      	movs	r3, #4
 800e280:	e014      	b.n	800e2ac <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e286:	f003 0301 	and.w	r3, r3, #1
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d004      	beq.n	800e298 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	2201      	movs	r2, #1
 800e292:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e294:	2301      	movs	r3, #1
 800e296:	e009      	b.n	800e2ac <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e29c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d002      	beq.n	800e2aa <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	2240      	movs	r2, #64	; 0x40
 800e2a8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e2aa:	2300      	movs	r3, #0
  
}
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	3714      	adds	r7, #20
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b6:	4770      	bx	lr
 800e2b8:	200003fc 	.word	0x200003fc
 800e2bc:	10624dd3 	.word	0x10624dd3

0800e2c0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800e2c0:	b480      	push	{r7}
 800e2c2:	b085      	sub	sp, #20
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e2c8:	4b11      	ldr	r3, [pc, #68]	; (800e310 <SDMMC_GetCmdError+0x50>)
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	4a11      	ldr	r2, [pc, #68]	; (800e314 <SDMMC_GetCmdError+0x54>)
 800e2ce:	fba2 2303 	umull	r2, r3, r2, r3
 800e2d2:	0a5b      	lsrs	r3, r3, #9
 800e2d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e2d8:	fb02 f303 	mul.w	r3, r2, r3
 800e2dc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	1e5a      	subs	r2, r3, #1
 800e2e2:	60fa      	str	r2, [r7, #12]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d102      	bne.n	800e2ee <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e2e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e2ec:	e009      	b.n	800e302 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d0f1      	beq.n	800e2de <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	22c5      	movs	r2, #197	; 0xc5
 800e2fe:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800e300:	2300      	movs	r3, #0
}
 800e302:	4618      	mov	r0, r3
 800e304:	3714      	adds	r7, #20
 800e306:	46bd      	mov	sp, r7
 800e308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30c:	4770      	bx	lr
 800e30e:	bf00      	nop
 800e310:	200003fc 	.word	0x200003fc
 800e314:	10624dd3 	.word	0x10624dd3

0800e318 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e31c:	4904      	ldr	r1, [pc, #16]	; (800e330 <MX_FATFS_Init+0x18>)
 800e31e:	4805      	ldr	r0, [pc, #20]	; (800e334 <MX_FATFS_Init+0x1c>)
 800e320:	f002 fd04 	bl	8010d2c <FATFS_LinkDriver>
 800e324:	4603      	mov	r3, r0
 800e326:	461a      	mov	r2, r3
 800e328:	4b03      	ldr	r3, [pc, #12]	; (800e338 <MX_FATFS_Init+0x20>)
 800e32a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e32c:	bf00      	nop
 800e32e:	bd80      	pop	{r7, pc}
 800e330:	200064b8 	.word	0x200064b8
 800e334:	080176d4 	.word	0x080176d4
 800e338:	200064b4 	.word	0x200064b4

0800e33c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800e33c:	b480      	push	{r7}
 800e33e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800e340:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800e342:	4618      	mov	r0, r3
 800e344:	46bd      	mov	sp, r7
 800e346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34a:	4770      	bx	lr

0800e34c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b082      	sub	sp, #8
 800e350:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e352:	2300      	movs	r3, #0
 800e354:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e356:	f000 f896 	bl	800e486 <BSP_SD_IsDetected>
 800e35a:	4603      	mov	r3, r0
 800e35c:	2b01      	cmp	r3, #1
 800e35e:	d001      	beq.n	800e364 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800e360:	2302      	movs	r3, #2
 800e362:	e012      	b.n	800e38a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 800e364:	480b      	ldr	r0, [pc, #44]	; (800e394 <BSP_SD_Init+0x48>)
 800e366:	f7fb fa2d 	bl	80097c4 <HAL_SD_Init>
 800e36a:	4603      	mov	r3, r0
 800e36c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800e36e:	79fb      	ldrb	r3, [r7, #7]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d109      	bne.n	800e388 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800e374:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e378:	4806      	ldr	r0, [pc, #24]	; (800e394 <BSP_SD_Init+0x48>)
 800e37a:	f7fb fff3 	bl	800a364 <HAL_SD_ConfigWideBusOperation>
 800e37e:	4603      	mov	r3, r0
 800e380:	2b00      	cmp	r3, #0
 800e382:	d001      	beq.n	800e388 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800e384:	2301      	movs	r3, #1
 800e386:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800e388:	79fb      	ldrb	r3, [r7, #7]
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	3708      	adds	r7, #8
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}
 800e392:	bf00      	nop
 800e394:	200020e4 	.word	0x200020e4

0800e398 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b086      	sub	sp, #24
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	60f8      	str	r0, [r7, #12]
 800e3a0:	60b9      	str	r1, [r7, #8]
 800e3a2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	68ba      	ldr	r2, [r7, #8]
 800e3ac:	68f9      	ldr	r1, [r7, #12]
 800e3ae:	4806      	ldr	r0, [pc, #24]	; (800e3c8 <BSP_SD_ReadBlocks_DMA+0x30>)
 800e3b0:	f7fb fac0 	bl	8009934 <HAL_SD_ReadBlocks_DMA>
 800e3b4:	4603      	mov	r3, r0
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d001      	beq.n	800e3be <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e3ba:	2301      	movs	r3, #1
 800e3bc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e3be:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	3718      	adds	r7, #24
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	bd80      	pop	{r7, pc}
 800e3c8:	200020e4 	.word	0x200020e4

0800e3cc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b086      	sub	sp, #24
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	60f8      	str	r0, [r7, #12]
 800e3d4:	60b9      	str	r1, [r7, #8]
 800e3d6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e3d8:	2300      	movs	r3, #0
 800e3da:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	68ba      	ldr	r2, [r7, #8]
 800e3e0:	68f9      	ldr	r1, [r7, #12]
 800e3e2:	4806      	ldr	r0, [pc, #24]	; (800e3fc <BSP_SD_WriteBlocks_DMA+0x30>)
 800e3e4:	f7fb fb88 	bl	8009af8 <HAL_SD_WriteBlocks_DMA>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d001      	beq.n	800e3f2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e3ee:	2301      	movs	r3, #1
 800e3f0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e3f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	3718      	adds	r7, #24
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	bd80      	pop	{r7, pc}
 800e3fc:	200020e4 	.word	0x200020e4

0800e400 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e404:	4805      	ldr	r0, [pc, #20]	; (800e41c <BSP_SD_GetCardState+0x1c>)
 800e406:	f7fc f847 	bl	800a498 <HAL_SD_GetCardState>
 800e40a:	4603      	mov	r3, r0
 800e40c:	2b04      	cmp	r3, #4
 800e40e:	bf14      	ite	ne
 800e410:	2301      	movne	r3, #1
 800e412:	2300      	moveq	r3, #0
 800e414:	b2db      	uxtb	r3, r3
}
 800e416:	4618      	mov	r0, r3
 800e418:	bd80      	pop	{r7, pc}
 800e41a:	bf00      	nop
 800e41c:	200020e4 	.word	0x200020e4

0800e420 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b082      	sub	sp, #8
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 800e428:	6879      	ldr	r1, [r7, #4]
 800e42a:	4803      	ldr	r0, [pc, #12]	; (800e438 <BSP_SD_GetCardInfo+0x18>)
 800e42c:	f7fb ff6e 	bl	800a30c <HAL_SD_GetCardInfo>
}
 800e430:	bf00      	nop
 800e432:	3708      	adds	r7, #8
 800e434:	46bd      	mov	sp, r7
 800e436:	bd80      	pop	{r7, pc}
 800e438:	200020e4 	.word	0x200020e4

0800e43c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b082      	sub	sp, #8
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800e444:	f000 f818 	bl	800e478 <BSP_SD_AbortCallback>
}
 800e448:	bf00      	nop
 800e44a:	3708      	adds	r7, #8
 800e44c:	46bd      	mov	sp, r7
 800e44e:	bd80      	pop	{r7, pc}

0800e450 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b082      	sub	sp, #8
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800e458:	f000 f98c 	bl	800e774 <BSP_SD_WriteCpltCallback>
}
 800e45c:	bf00      	nop
 800e45e:	3708      	adds	r7, #8
 800e460:	46bd      	mov	sp, r7
 800e462:	bd80      	pop	{r7, pc}

0800e464 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e464:	b580      	push	{r7, lr}
 800e466:	b082      	sub	sp, #8
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800e46c:	f000 f98e 	bl	800e78c <BSP_SD_ReadCpltCallback>
}
 800e470:	bf00      	nop
 800e472:	3708      	adds	r7, #8
 800e474:	46bd      	mov	sp, r7
 800e476:	bd80      	pop	{r7, pc}

0800e478 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800e478:	b480      	push	{r7}
 800e47a:	af00      	add	r7, sp, #0

}
 800e47c:	bf00      	nop
 800e47e:	46bd      	mov	sp, r7
 800e480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e484:	4770      	bx	lr

0800e486 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800e486:	b480      	push	{r7}
 800e488:	b083      	sub	sp, #12
 800e48a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800e48c:	2301      	movs	r3, #1
 800e48e:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800e490:	79fb      	ldrb	r3, [r7, #7]
 800e492:	b2db      	uxtb	r3, r3
}
 800e494:	4618      	mov	r0, r3
 800e496:	370c      	adds	r7, #12
 800e498:	46bd      	mov	sp, r7
 800e49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49e:	4770      	bx	lr

0800e4a0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b084      	sub	sp, #16
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800e4a8:	f7f7 f856 	bl	8005558 <HAL_GetTick>
 800e4ac:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800e4ae:	e006      	b.n	800e4be <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e4b0:	f7ff ffa6 	bl	800e400 <BSP_SD_GetCardState>
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d101      	bne.n	800e4be <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	e009      	b.n	800e4d2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800e4be:	f7f7 f84b 	bl	8005558 <HAL_GetTick>
 800e4c2:	4602      	mov	r2, r0
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	1ad3      	subs	r3, r2, r3
 800e4c8:	687a      	ldr	r2, [r7, #4]
 800e4ca:	429a      	cmp	r2, r3
 800e4cc:	d8f0      	bhi.n	800e4b0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800e4ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	3710      	adds	r7, #16
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bd80      	pop	{r7, pc}
	...

0800e4dc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b082      	sub	sp, #8
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e4e6:	4b0b      	ldr	r3, [pc, #44]	; (800e514 <SD_CheckStatus+0x38>)
 800e4e8:	2201      	movs	r2, #1
 800e4ea:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800e4ec:	f7ff ff88 	bl	800e400 <BSP_SD_GetCardState>
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d107      	bne.n	800e506 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e4f6:	4b07      	ldr	r3, [pc, #28]	; (800e514 <SD_CheckStatus+0x38>)
 800e4f8:	781b      	ldrb	r3, [r3, #0]
 800e4fa:	b2db      	uxtb	r3, r3
 800e4fc:	f023 0301 	bic.w	r3, r3, #1
 800e500:	b2da      	uxtb	r2, r3
 800e502:	4b04      	ldr	r3, [pc, #16]	; (800e514 <SD_CheckStatus+0x38>)
 800e504:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e506:	4b03      	ldr	r3, [pc, #12]	; (800e514 <SD_CheckStatus+0x38>)
 800e508:	781b      	ldrb	r3, [r3, #0]
 800e50a:	b2db      	uxtb	r3, r3
}
 800e50c:	4618      	mov	r0, r3
 800e50e:	3708      	adds	r7, #8
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}
 800e514:	20000405 	.word	0x20000405

0800e518 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b082      	sub	sp, #8
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	4603      	mov	r3, r0
 800e520:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800e522:	f7ff ff13 	bl	800e34c <BSP_SD_Init>
 800e526:	4603      	mov	r3, r0
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d107      	bne.n	800e53c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800e52c:	79fb      	ldrb	r3, [r7, #7]
 800e52e:	4618      	mov	r0, r3
 800e530:	f7ff ffd4 	bl	800e4dc <SD_CheckStatus>
 800e534:	4603      	mov	r3, r0
 800e536:	461a      	mov	r2, r3
 800e538:	4b04      	ldr	r3, [pc, #16]	; (800e54c <SD_initialize+0x34>)
 800e53a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800e53c:	4b03      	ldr	r3, [pc, #12]	; (800e54c <SD_initialize+0x34>)
 800e53e:	781b      	ldrb	r3, [r3, #0]
 800e540:	b2db      	uxtb	r3, r3
}
 800e542:	4618      	mov	r0, r3
 800e544:	3708      	adds	r7, #8
 800e546:	46bd      	mov	sp, r7
 800e548:	bd80      	pop	{r7, pc}
 800e54a:	bf00      	nop
 800e54c:	20000405 	.word	0x20000405

0800e550 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e550:	b580      	push	{r7, lr}
 800e552:	b082      	sub	sp, #8
 800e554:	af00      	add	r7, sp, #0
 800e556:	4603      	mov	r3, r0
 800e558:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e55a:	79fb      	ldrb	r3, [r7, #7]
 800e55c:	4618      	mov	r0, r3
 800e55e:	f7ff ffbd 	bl	800e4dc <SD_CheckStatus>
 800e562:	4603      	mov	r3, r0
}
 800e564:	4618      	mov	r0, r3
 800e566:	3708      	adds	r7, #8
 800e568:	46bd      	mov	sp, r7
 800e56a:	bd80      	pop	{r7, pc}

0800e56c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b086      	sub	sp, #24
 800e570:	af00      	add	r7, sp, #0
 800e572:	60b9      	str	r1, [r7, #8]
 800e574:	607a      	str	r2, [r7, #4]
 800e576:	603b      	str	r3, [r7, #0]
 800e578:	4603      	mov	r3, r0
 800e57a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e57c:	2301      	movs	r3, #1
 800e57e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e580:	f247 5030 	movw	r0, #30000	; 0x7530
 800e584:	f7ff ff8c 	bl	800e4a0 <SD_CheckStatusWithTimeout>
 800e588:	4603      	mov	r3, r0
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	da01      	bge.n	800e592 <SD_read+0x26>
  {
    return res;
 800e58e:	7dfb      	ldrb	r3, [r7, #23]
 800e590:	e03b      	b.n	800e60a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800e592:	683a      	ldr	r2, [r7, #0]
 800e594:	6879      	ldr	r1, [r7, #4]
 800e596:	68b8      	ldr	r0, [r7, #8]
 800e598:	f7ff fefe 	bl	800e398 <BSP_SD_ReadBlocks_DMA>
 800e59c:	4603      	mov	r3, r0
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d132      	bne.n	800e608 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800e5a2:	4b1c      	ldr	r3, [pc, #112]	; (800e614 <SD_read+0xa8>)
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800e5a8:	f7f6 ffd6 	bl	8005558 <HAL_GetTick>
 800e5ac:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e5ae:	bf00      	nop
 800e5b0:	4b18      	ldr	r3, [pc, #96]	; (800e614 <SD_read+0xa8>)
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d108      	bne.n	800e5ca <SD_read+0x5e>
 800e5b8:	f7f6 ffce 	bl	8005558 <HAL_GetTick>
 800e5bc:	4602      	mov	r2, r0
 800e5be:	693b      	ldr	r3, [r7, #16]
 800e5c0:	1ad3      	subs	r3, r2, r3
 800e5c2:	f247 522f 	movw	r2, #29999	; 0x752f
 800e5c6:	4293      	cmp	r3, r2
 800e5c8:	d9f2      	bls.n	800e5b0 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800e5ca:	4b12      	ldr	r3, [pc, #72]	; (800e614 <SD_read+0xa8>)
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d102      	bne.n	800e5d8 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800e5d2:	2301      	movs	r3, #1
 800e5d4:	75fb      	strb	r3, [r7, #23]
 800e5d6:	e017      	b.n	800e608 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800e5d8:	4b0e      	ldr	r3, [pc, #56]	; (800e614 <SD_read+0xa8>)
 800e5da:	2200      	movs	r2, #0
 800e5dc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800e5de:	f7f6 ffbb 	bl	8005558 <HAL_GetTick>
 800e5e2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e5e4:	e007      	b.n	800e5f6 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e5e6:	f7ff ff0b 	bl	800e400 <BSP_SD_GetCardState>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d102      	bne.n	800e5f6 <SD_read+0x8a>
          {
            res = RES_OK;
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800e5f4:	e008      	b.n	800e608 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e5f6:	f7f6 ffaf 	bl	8005558 <HAL_GetTick>
 800e5fa:	4602      	mov	r2, r0
 800e5fc:	693b      	ldr	r3, [r7, #16]
 800e5fe:	1ad3      	subs	r3, r2, r3
 800e600:	f247 522f 	movw	r2, #29999	; 0x752f
 800e604:	4293      	cmp	r3, r2
 800e606:	d9ee      	bls.n	800e5e6 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800e608:	7dfb      	ldrb	r3, [r7, #23]
}
 800e60a:	4618      	mov	r0, r3
 800e60c:	3718      	adds	r7, #24
 800e60e:	46bd      	mov	sp, r7
 800e610:	bd80      	pop	{r7, pc}
 800e612:	bf00      	nop
 800e614:	200064c0 	.word	0x200064c0

0800e618 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b086      	sub	sp, #24
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	60b9      	str	r1, [r7, #8]
 800e620:	607a      	str	r2, [r7, #4]
 800e622:	603b      	str	r3, [r7, #0]
 800e624:	4603      	mov	r3, r0
 800e626:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e628:	2301      	movs	r3, #1
 800e62a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800e62c:	4b24      	ldr	r3, [pc, #144]	; (800e6c0 <SD_write+0xa8>)
 800e62e:	2200      	movs	r2, #0
 800e630:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e632:	f247 5030 	movw	r0, #30000	; 0x7530
 800e636:	f7ff ff33 	bl	800e4a0 <SD_CheckStatusWithTimeout>
 800e63a:	4603      	mov	r3, r0
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	da01      	bge.n	800e644 <SD_write+0x2c>
  {
    return res;
 800e640:	7dfb      	ldrb	r3, [r7, #23]
 800e642:	e038      	b.n	800e6b6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800e644:	683a      	ldr	r2, [r7, #0]
 800e646:	6879      	ldr	r1, [r7, #4]
 800e648:	68b8      	ldr	r0, [r7, #8]
 800e64a:	f7ff febf 	bl	800e3cc <BSP_SD_WriteBlocks_DMA>
 800e64e:	4603      	mov	r3, r0
 800e650:	2b00      	cmp	r3, #0
 800e652:	d12f      	bne.n	800e6b4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800e654:	f7f6 ff80 	bl	8005558 <HAL_GetTick>
 800e658:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e65a:	bf00      	nop
 800e65c:	4b18      	ldr	r3, [pc, #96]	; (800e6c0 <SD_write+0xa8>)
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d108      	bne.n	800e676 <SD_write+0x5e>
 800e664:	f7f6 ff78 	bl	8005558 <HAL_GetTick>
 800e668:	4602      	mov	r2, r0
 800e66a:	693b      	ldr	r3, [r7, #16]
 800e66c:	1ad3      	subs	r3, r2, r3
 800e66e:	f247 522f 	movw	r2, #29999	; 0x752f
 800e672:	4293      	cmp	r3, r2
 800e674:	d9f2      	bls.n	800e65c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800e676:	4b12      	ldr	r3, [pc, #72]	; (800e6c0 <SD_write+0xa8>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d102      	bne.n	800e684 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800e67e:	2301      	movs	r3, #1
 800e680:	75fb      	strb	r3, [r7, #23]
 800e682:	e017      	b.n	800e6b4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800e684:	4b0e      	ldr	r3, [pc, #56]	; (800e6c0 <SD_write+0xa8>)
 800e686:	2200      	movs	r2, #0
 800e688:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800e68a:	f7f6 ff65 	bl	8005558 <HAL_GetTick>
 800e68e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e690:	e007      	b.n	800e6a2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e692:	f7ff feb5 	bl	800e400 <BSP_SD_GetCardState>
 800e696:	4603      	mov	r3, r0
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d102      	bne.n	800e6a2 <SD_write+0x8a>
          {
            res = RES_OK;
 800e69c:	2300      	movs	r3, #0
 800e69e:	75fb      	strb	r3, [r7, #23]
            break;
 800e6a0:	e008      	b.n	800e6b4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e6a2:	f7f6 ff59 	bl	8005558 <HAL_GetTick>
 800e6a6:	4602      	mov	r2, r0
 800e6a8:	693b      	ldr	r3, [r7, #16]
 800e6aa:	1ad3      	subs	r3, r2, r3
 800e6ac:	f247 522f 	movw	r2, #29999	; 0x752f
 800e6b0:	4293      	cmp	r3, r2
 800e6b2:	d9ee      	bls.n	800e692 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800e6b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	3718      	adds	r7, #24
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	bd80      	pop	{r7, pc}
 800e6be:	bf00      	nop
 800e6c0:	200064bc 	.word	0x200064bc

0800e6c4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b08c      	sub	sp, #48	; 0x30
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	603a      	str	r2, [r7, #0]
 800e6ce:	71fb      	strb	r3, [r7, #7]
 800e6d0:	460b      	mov	r3, r1
 800e6d2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e6d4:	2301      	movs	r3, #1
 800e6d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e6da:	4b25      	ldr	r3, [pc, #148]	; (800e770 <SD_ioctl+0xac>)
 800e6dc:	781b      	ldrb	r3, [r3, #0]
 800e6de:	b2db      	uxtb	r3, r3
 800e6e0:	f003 0301 	and.w	r3, r3, #1
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d001      	beq.n	800e6ec <SD_ioctl+0x28>
 800e6e8:	2303      	movs	r3, #3
 800e6ea:	e03c      	b.n	800e766 <SD_ioctl+0xa2>

  switch (cmd)
 800e6ec:	79bb      	ldrb	r3, [r7, #6]
 800e6ee:	2b03      	cmp	r3, #3
 800e6f0:	d834      	bhi.n	800e75c <SD_ioctl+0x98>
 800e6f2:	a201      	add	r2, pc, #4	; (adr r2, 800e6f8 <SD_ioctl+0x34>)
 800e6f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6f8:	0800e709 	.word	0x0800e709
 800e6fc:	0800e711 	.word	0x0800e711
 800e700:	0800e729 	.word	0x0800e729
 800e704:	0800e743 	.word	0x0800e743
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e708:	2300      	movs	r3, #0
 800e70a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e70e:	e028      	b.n	800e762 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e710:	f107 030c 	add.w	r3, r7, #12
 800e714:	4618      	mov	r0, r3
 800e716:	f7ff fe83 	bl	800e420 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e71a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e71c:	683b      	ldr	r3, [r7, #0]
 800e71e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e720:	2300      	movs	r3, #0
 800e722:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e726:	e01c      	b.n	800e762 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e728:	f107 030c 	add.w	r3, r7, #12
 800e72c:	4618      	mov	r0, r3
 800e72e:	f7ff fe77 	bl	800e420 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e734:	b29a      	uxth	r2, r3
 800e736:	683b      	ldr	r3, [r7, #0]
 800e738:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e73a:	2300      	movs	r3, #0
 800e73c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e740:	e00f      	b.n	800e762 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e742:	f107 030c 	add.w	r3, r7, #12
 800e746:	4618      	mov	r0, r3
 800e748:	f7ff fe6a 	bl	800e420 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e74c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e74e:	0a5a      	lsrs	r2, r3, #9
 800e750:	683b      	ldr	r3, [r7, #0]
 800e752:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e754:	2300      	movs	r3, #0
 800e756:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e75a:	e002      	b.n	800e762 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e75c:	2304      	movs	r3, #4
 800e75e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e762:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e766:	4618      	mov	r0, r3
 800e768:	3730      	adds	r7, #48	; 0x30
 800e76a:	46bd      	mov	sp, r7
 800e76c:	bd80      	pop	{r7, pc}
 800e76e:	bf00      	nop
 800e770:	20000405 	.word	0x20000405

0800e774 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800e774:	b480      	push	{r7}
 800e776:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800e778:	4b03      	ldr	r3, [pc, #12]	; (800e788 <BSP_SD_WriteCpltCallback+0x14>)
 800e77a:	2201      	movs	r2, #1
 800e77c:	601a      	str	r2, [r3, #0]
}
 800e77e:	bf00      	nop
 800e780:	46bd      	mov	sp, r7
 800e782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e786:	4770      	bx	lr
 800e788:	200064bc 	.word	0x200064bc

0800e78c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800e78c:	b480      	push	{r7}
 800e78e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800e790:	4b03      	ldr	r3, [pc, #12]	; (800e7a0 <BSP_SD_ReadCpltCallback+0x14>)
 800e792:	2201      	movs	r2, #1
 800e794:	601a      	str	r2, [r3, #0]
}
 800e796:	bf00      	nop
 800e798:	46bd      	mov	sp, r7
 800e79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79e:	4770      	bx	lr
 800e7a0:	200064c0 	.word	0x200064c0

0800e7a4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b084      	sub	sp, #16
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	4603      	mov	r3, r0
 800e7ac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e7ae:	79fb      	ldrb	r3, [r7, #7]
 800e7b0:	4a08      	ldr	r2, [pc, #32]	; (800e7d4 <disk_status+0x30>)
 800e7b2:	009b      	lsls	r3, r3, #2
 800e7b4:	4413      	add	r3, r2
 800e7b6:	685b      	ldr	r3, [r3, #4]
 800e7b8:	685b      	ldr	r3, [r3, #4]
 800e7ba:	79fa      	ldrb	r2, [r7, #7]
 800e7bc:	4905      	ldr	r1, [pc, #20]	; (800e7d4 <disk_status+0x30>)
 800e7be:	440a      	add	r2, r1
 800e7c0:	7a12      	ldrb	r2, [r2, #8]
 800e7c2:	4610      	mov	r0, r2
 800e7c4:	4798      	blx	r3
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e7ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	3710      	adds	r7, #16
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	bd80      	pop	{r7, pc}
 800e7d4:	2000651c 	.word	0x2000651c

0800e7d8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b084      	sub	sp, #16
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	4603      	mov	r3, r0
 800e7e0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e7e6:	79fb      	ldrb	r3, [r7, #7]
 800e7e8:	4a0d      	ldr	r2, [pc, #52]	; (800e820 <disk_initialize+0x48>)
 800e7ea:	5cd3      	ldrb	r3, [r2, r3]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d111      	bne.n	800e814 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e7f0:	79fb      	ldrb	r3, [r7, #7]
 800e7f2:	4a0b      	ldr	r2, [pc, #44]	; (800e820 <disk_initialize+0x48>)
 800e7f4:	2101      	movs	r1, #1
 800e7f6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e7f8:	79fb      	ldrb	r3, [r7, #7]
 800e7fa:	4a09      	ldr	r2, [pc, #36]	; (800e820 <disk_initialize+0x48>)
 800e7fc:	009b      	lsls	r3, r3, #2
 800e7fe:	4413      	add	r3, r2
 800e800:	685b      	ldr	r3, [r3, #4]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	79fa      	ldrb	r2, [r7, #7]
 800e806:	4906      	ldr	r1, [pc, #24]	; (800e820 <disk_initialize+0x48>)
 800e808:	440a      	add	r2, r1
 800e80a:	7a12      	ldrb	r2, [r2, #8]
 800e80c:	4610      	mov	r0, r2
 800e80e:	4798      	blx	r3
 800e810:	4603      	mov	r3, r0
 800e812:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e814:	7bfb      	ldrb	r3, [r7, #15]
}
 800e816:	4618      	mov	r0, r3
 800e818:	3710      	adds	r7, #16
 800e81a:	46bd      	mov	sp, r7
 800e81c:	bd80      	pop	{r7, pc}
 800e81e:	bf00      	nop
 800e820:	2000651c 	.word	0x2000651c

0800e824 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e824:	b590      	push	{r4, r7, lr}
 800e826:	b087      	sub	sp, #28
 800e828:	af00      	add	r7, sp, #0
 800e82a:	60b9      	str	r1, [r7, #8]
 800e82c:	607a      	str	r2, [r7, #4]
 800e82e:	603b      	str	r3, [r7, #0]
 800e830:	4603      	mov	r3, r0
 800e832:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e834:	7bfb      	ldrb	r3, [r7, #15]
 800e836:	4a0a      	ldr	r2, [pc, #40]	; (800e860 <disk_read+0x3c>)
 800e838:	009b      	lsls	r3, r3, #2
 800e83a:	4413      	add	r3, r2
 800e83c:	685b      	ldr	r3, [r3, #4]
 800e83e:	689c      	ldr	r4, [r3, #8]
 800e840:	7bfb      	ldrb	r3, [r7, #15]
 800e842:	4a07      	ldr	r2, [pc, #28]	; (800e860 <disk_read+0x3c>)
 800e844:	4413      	add	r3, r2
 800e846:	7a18      	ldrb	r0, [r3, #8]
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	687a      	ldr	r2, [r7, #4]
 800e84c:	68b9      	ldr	r1, [r7, #8]
 800e84e:	47a0      	blx	r4
 800e850:	4603      	mov	r3, r0
 800e852:	75fb      	strb	r3, [r7, #23]
  return res;
 800e854:	7dfb      	ldrb	r3, [r7, #23]
}
 800e856:	4618      	mov	r0, r3
 800e858:	371c      	adds	r7, #28
 800e85a:	46bd      	mov	sp, r7
 800e85c:	bd90      	pop	{r4, r7, pc}
 800e85e:	bf00      	nop
 800e860:	2000651c 	.word	0x2000651c

0800e864 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e864:	b590      	push	{r4, r7, lr}
 800e866:	b087      	sub	sp, #28
 800e868:	af00      	add	r7, sp, #0
 800e86a:	60b9      	str	r1, [r7, #8]
 800e86c:	607a      	str	r2, [r7, #4]
 800e86e:	603b      	str	r3, [r7, #0]
 800e870:	4603      	mov	r3, r0
 800e872:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e874:	7bfb      	ldrb	r3, [r7, #15]
 800e876:	4a0a      	ldr	r2, [pc, #40]	; (800e8a0 <disk_write+0x3c>)
 800e878:	009b      	lsls	r3, r3, #2
 800e87a:	4413      	add	r3, r2
 800e87c:	685b      	ldr	r3, [r3, #4]
 800e87e:	68dc      	ldr	r4, [r3, #12]
 800e880:	7bfb      	ldrb	r3, [r7, #15]
 800e882:	4a07      	ldr	r2, [pc, #28]	; (800e8a0 <disk_write+0x3c>)
 800e884:	4413      	add	r3, r2
 800e886:	7a18      	ldrb	r0, [r3, #8]
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	687a      	ldr	r2, [r7, #4]
 800e88c:	68b9      	ldr	r1, [r7, #8]
 800e88e:	47a0      	blx	r4
 800e890:	4603      	mov	r3, r0
 800e892:	75fb      	strb	r3, [r7, #23]
  return res;
 800e894:	7dfb      	ldrb	r3, [r7, #23]
}
 800e896:	4618      	mov	r0, r3
 800e898:	371c      	adds	r7, #28
 800e89a:	46bd      	mov	sp, r7
 800e89c:	bd90      	pop	{r4, r7, pc}
 800e89e:	bf00      	nop
 800e8a0:	2000651c 	.word	0x2000651c

0800e8a4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b084      	sub	sp, #16
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	4603      	mov	r3, r0
 800e8ac:	603a      	str	r2, [r7, #0]
 800e8ae:	71fb      	strb	r3, [r7, #7]
 800e8b0:	460b      	mov	r3, r1
 800e8b2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e8b4:	79fb      	ldrb	r3, [r7, #7]
 800e8b6:	4a09      	ldr	r2, [pc, #36]	; (800e8dc <disk_ioctl+0x38>)
 800e8b8:	009b      	lsls	r3, r3, #2
 800e8ba:	4413      	add	r3, r2
 800e8bc:	685b      	ldr	r3, [r3, #4]
 800e8be:	691b      	ldr	r3, [r3, #16]
 800e8c0:	79fa      	ldrb	r2, [r7, #7]
 800e8c2:	4906      	ldr	r1, [pc, #24]	; (800e8dc <disk_ioctl+0x38>)
 800e8c4:	440a      	add	r2, r1
 800e8c6:	7a10      	ldrb	r0, [r2, #8]
 800e8c8:	79b9      	ldrb	r1, [r7, #6]
 800e8ca:	683a      	ldr	r2, [r7, #0]
 800e8cc:	4798      	blx	r3
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	73fb      	strb	r3, [r7, #15]
  return res;
 800e8d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	3710      	adds	r7, #16
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	bd80      	pop	{r7, pc}
 800e8dc:	2000651c 	.word	0x2000651c

0800e8e0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e8e0:	b480      	push	{r7}
 800e8e2:	b085      	sub	sp, #20
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	3301      	adds	r3, #1
 800e8ec:	781b      	ldrb	r3, [r3, #0]
 800e8ee:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e8f0:	89fb      	ldrh	r3, [r7, #14]
 800e8f2:	021b      	lsls	r3, r3, #8
 800e8f4:	b21a      	sxth	r2, r3
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	781b      	ldrb	r3, [r3, #0]
 800e8fa:	b21b      	sxth	r3, r3
 800e8fc:	4313      	orrs	r3, r2
 800e8fe:	b21b      	sxth	r3, r3
 800e900:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e902:	89fb      	ldrh	r3, [r7, #14]
}
 800e904:	4618      	mov	r0, r3
 800e906:	3714      	adds	r7, #20
 800e908:	46bd      	mov	sp, r7
 800e90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90e:	4770      	bx	lr

0800e910 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e910:	b480      	push	{r7}
 800e912:	b085      	sub	sp, #20
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	3303      	adds	r3, #3
 800e91c:	781b      	ldrb	r3, [r3, #0]
 800e91e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	021b      	lsls	r3, r3, #8
 800e924:	687a      	ldr	r2, [r7, #4]
 800e926:	3202      	adds	r2, #2
 800e928:	7812      	ldrb	r2, [r2, #0]
 800e92a:	4313      	orrs	r3, r2
 800e92c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	021b      	lsls	r3, r3, #8
 800e932:	687a      	ldr	r2, [r7, #4]
 800e934:	3201      	adds	r2, #1
 800e936:	7812      	ldrb	r2, [r2, #0]
 800e938:	4313      	orrs	r3, r2
 800e93a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	021b      	lsls	r3, r3, #8
 800e940:	687a      	ldr	r2, [r7, #4]
 800e942:	7812      	ldrb	r2, [r2, #0]
 800e944:	4313      	orrs	r3, r2
 800e946:	60fb      	str	r3, [r7, #12]
	return rv;
 800e948:	68fb      	ldr	r3, [r7, #12]
}
 800e94a:	4618      	mov	r0, r3
 800e94c:	3714      	adds	r7, #20
 800e94e:	46bd      	mov	sp, r7
 800e950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e954:	4770      	bx	lr

0800e956 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e956:	b480      	push	{r7}
 800e958:	b083      	sub	sp, #12
 800e95a:	af00      	add	r7, sp, #0
 800e95c:	6078      	str	r0, [r7, #4]
 800e95e:	460b      	mov	r3, r1
 800e960:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	1c5a      	adds	r2, r3, #1
 800e966:	607a      	str	r2, [r7, #4]
 800e968:	887a      	ldrh	r2, [r7, #2]
 800e96a:	b2d2      	uxtb	r2, r2
 800e96c:	701a      	strb	r2, [r3, #0]
 800e96e:	887b      	ldrh	r3, [r7, #2]
 800e970:	0a1b      	lsrs	r3, r3, #8
 800e972:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	1c5a      	adds	r2, r3, #1
 800e978:	607a      	str	r2, [r7, #4]
 800e97a:	887a      	ldrh	r2, [r7, #2]
 800e97c:	b2d2      	uxtb	r2, r2
 800e97e:	701a      	strb	r2, [r3, #0]
}
 800e980:	bf00      	nop
 800e982:	370c      	adds	r7, #12
 800e984:	46bd      	mov	sp, r7
 800e986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98a:	4770      	bx	lr

0800e98c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e98c:	b480      	push	{r7}
 800e98e:	b083      	sub	sp, #12
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
 800e994:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	1c5a      	adds	r2, r3, #1
 800e99a:	607a      	str	r2, [r7, #4]
 800e99c:	683a      	ldr	r2, [r7, #0]
 800e99e:	b2d2      	uxtb	r2, r2
 800e9a0:	701a      	strb	r2, [r3, #0]
 800e9a2:	683b      	ldr	r3, [r7, #0]
 800e9a4:	0a1b      	lsrs	r3, r3, #8
 800e9a6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	1c5a      	adds	r2, r3, #1
 800e9ac:	607a      	str	r2, [r7, #4]
 800e9ae:	683a      	ldr	r2, [r7, #0]
 800e9b0:	b2d2      	uxtb	r2, r2
 800e9b2:	701a      	strb	r2, [r3, #0]
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	0a1b      	lsrs	r3, r3, #8
 800e9b8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	1c5a      	adds	r2, r3, #1
 800e9be:	607a      	str	r2, [r7, #4]
 800e9c0:	683a      	ldr	r2, [r7, #0]
 800e9c2:	b2d2      	uxtb	r2, r2
 800e9c4:	701a      	strb	r2, [r3, #0]
 800e9c6:	683b      	ldr	r3, [r7, #0]
 800e9c8:	0a1b      	lsrs	r3, r3, #8
 800e9ca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	1c5a      	adds	r2, r3, #1
 800e9d0:	607a      	str	r2, [r7, #4]
 800e9d2:	683a      	ldr	r2, [r7, #0]
 800e9d4:	b2d2      	uxtb	r2, r2
 800e9d6:	701a      	strb	r2, [r3, #0]
}
 800e9d8:	bf00      	nop
 800e9da:	370c      	adds	r7, #12
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e2:	4770      	bx	lr

0800e9e4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e9e4:	b480      	push	{r7}
 800e9e6:	b087      	sub	sp, #28
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	60f8      	str	r0, [r7, #12]
 800e9ec:	60b9      	str	r1, [r7, #8]
 800e9ee:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e9f4:	68bb      	ldr	r3, [r7, #8]
 800e9f6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d00d      	beq.n	800ea1a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e9fe:	693a      	ldr	r2, [r7, #16]
 800ea00:	1c53      	adds	r3, r2, #1
 800ea02:	613b      	str	r3, [r7, #16]
 800ea04:	697b      	ldr	r3, [r7, #20]
 800ea06:	1c59      	adds	r1, r3, #1
 800ea08:	6179      	str	r1, [r7, #20]
 800ea0a:	7812      	ldrb	r2, [r2, #0]
 800ea0c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	3b01      	subs	r3, #1
 800ea12:	607b      	str	r3, [r7, #4]
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d1f1      	bne.n	800e9fe <mem_cpy+0x1a>
	}
}
 800ea1a:	bf00      	nop
 800ea1c:	371c      	adds	r7, #28
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea24:	4770      	bx	lr

0800ea26 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ea26:	b480      	push	{r7}
 800ea28:	b087      	sub	sp, #28
 800ea2a:	af00      	add	r7, sp, #0
 800ea2c:	60f8      	str	r0, [r7, #12]
 800ea2e:	60b9      	str	r1, [r7, #8]
 800ea30:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ea36:	697b      	ldr	r3, [r7, #20]
 800ea38:	1c5a      	adds	r2, r3, #1
 800ea3a:	617a      	str	r2, [r7, #20]
 800ea3c:	68ba      	ldr	r2, [r7, #8]
 800ea3e:	b2d2      	uxtb	r2, r2
 800ea40:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	3b01      	subs	r3, #1
 800ea46:	607b      	str	r3, [r7, #4]
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d1f3      	bne.n	800ea36 <mem_set+0x10>
}
 800ea4e:	bf00      	nop
 800ea50:	bf00      	nop
 800ea52:	371c      	adds	r7, #28
 800ea54:	46bd      	mov	sp, r7
 800ea56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5a:	4770      	bx	lr

0800ea5c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ea5c:	b480      	push	{r7}
 800ea5e:	b089      	sub	sp, #36	; 0x24
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	60f8      	str	r0, [r7, #12]
 800ea64:	60b9      	str	r1, [r7, #8]
 800ea66:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	61fb      	str	r3, [r7, #28]
 800ea6c:	68bb      	ldr	r3, [r7, #8]
 800ea6e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ea70:	2300      	movs	r3, #0
 800ea72:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ea74:	69fb      	ldr	r3, [r7, #28]
 800ea76:	1c5a      	adds	r2, r3, #1
 800ea78:	61fa      	str	r2, [r7, #28]
 800ea7a:	781b      	ldrb	r3, [r3, #0]
 800ea7c:	4619      	mov	r1, r3
 800ea7e:	69bb      	ldr	r3, [r7, #24]
 800ea80:	1c5a      	adds	r2, r3, #1
 800ea82:	61ba      	str	r2, [r7, #24]
 800ea84:	781b      	ldrb	r3, [r3, #0]
 800ea86:	1acb      	subs	r3, r1, r3
 800ea88:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	3b01      	subs	r3, #1
 800ea8e:	607b      	str	r3, [r7, #4]
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d002      	beq.n	800ea9c <mem_cmp+0x40>
 800ea96:	697b      	ldr	r3, [r7, #20]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d0eb      	beq.n	800ea74 <mem_cmp+0x18>

	return r;
 800ea9c:	697b      	ldr	r3, [r7, #20]
}
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	3724      	adds	r7, #36	; 0x24
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa8:	4770      	bx	lr

0800eaaa <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800eaaa:	b480      	push	{r7}
 800eaac:	b083      	sub	sp, #12
 800eaae:	af00      	add	r7, sp, #0
 800eab0:	6078      	str	r0, [r7, #4]
 800eab2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800eab4:	e002      	b.n	800eabc <chk_chr+0x12>
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	3301      	adds	r3, #1
 800eaba:	607b      	str	r3, [r7, #4]
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	781b      	ldrb	r3, [r3, #0]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d005      	beq.n	800ead0 <chk_chr+0x26>
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	781b      	ldrb	r3, [r3, #0]
 800eac8:	461a      	mov	r2, r3
 800eaca:	683b      	ldr	r3, [r7, #0]
 800eacc:	4293      	cmp	r3, r2
 800eace:	d1f2      	bne.n	800eab6 <chk_chr+0xc>
	return *str;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	781b      	ldrb	r3, [r3, #0]
}
 800ead4:	4618      	mov	r0, r3
 800ead6:	370c      	adds	r7, #12
 800ead8:	46bd      	mov	sp, r7
 800eada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eade:	4770      	bx	lr

0800eae0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800eae0:	b480      	push	{r7}
 800eae2:	b085      	sub	sp, #20
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
 800eae8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800eaea:	2300      	movs	r3, #0
 800eaec:	60bb      	str	r3, [r7, #8]
 800eaee:	68bb      	ldr	r3, [r7, #8]
 800eaf0:	60fb      	str	r3, [r7, #12]
 800eaf2:	e029      	b.n	800eb48 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800eaf4:	4a27      	ldr	r2, [pc, #156]	; (800eb94 <chk_lock+0xb4>)
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	011b      	lsls	r3, r3, #4
 800eafa:	4413      	add	r3, r2
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d01d      	beq.n	800eb3e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800eb02:	4a24      	ldr	r2, [pc, #144]	; (800eb94 <chk_lock+0xb4>)
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	011b      	lsls	r3, r3, #4
 800eb08:	4413      	add	r3, r2
 800eb0a:	681a      	ldr	r2, [r3, #0]
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	429a      	cmp	r2, r3
 800eb12:	d116      	bne.n	800eb42 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800eb14:	4a1f      	ldr	r2, [pc, #124]	; (800eb94 <chk_lock+0xb4>)
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	011b      	lsls	r3, r3, #4
 800eb1a:	4413      	add	r3, r2
 800eb1c:	3304      	adds	r3, #4
 800eb1e:	681a      	ldr	r2, [r3, #0]
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800eb24:	429a      	cmp	r2, r3
 800eb26:	d10c      	bne.n	800eb42 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800eb28:	4a1a      	ldr	r2, [pc, #104]	; (800eb94 <chk_lock+0xb4>)
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	011b      	lsls	r3, r3, #4
 800eb2e:	4413      	add	r3, r2
 800eb30:	3308      	adds	r3, #8
 800eb32:	681a      	ldr	r2, [r3, #0]
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800eb38:	429a      	cmp	r2, r3
 800eb3a:	d102      	bne.n	800eb42 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800eb3c:	e007      	b.n	800eb4e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800eb3e:	2301      	movs	r3, #1
 800eb40:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	3301      	adds	r3, #1
 800eb46:	60fb      	str	r3, [r7, #12]
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	2b04      	cmp	r3, #4
 800eb4c:	d9d2      	bls.n	800eaf4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	2b05      	cmp	r3, #5
 800eb52:	d109      	bne.n	800eb68 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800eb54:	68bb      	ldr	r3, [r7, #8]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d102      	bne.n	800eb60 <chk_lock+0x80>
 800eb5a:	683b      	ldr	r3, [r7, #0]
 800eb5c:	2b02      	cmp	r3, #2
 800eb5e:	d101      	bne.n	800eb64 <chk_lock+0x84>
 800eb60:	2300      	movs	r3, #0
 800eb62:	e010      	b.n	800eb86 <chk_lock+0xa6>
 800eb64:	2312      	movs	r3, #18
 800eb66:	e00e      	b.n	800eb86 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d108      	bne.n	800eb80 <chk_lock+0xa0>
 800eb6e:	4a09      	ldr	r2, [pc, #36]	; (800eb94 <chk_lock+0xb4>)
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	011b      	lsls	r3, r3, #4
 800eb74:	4413      	add	r3, r2
 800eb76:	330c      	adds	r3, #12
 800eb78:	881b      	ldrh	r3, [r3, #0]
 800eb7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eb7e:	d101      	bne.n	800eb84 <chk_lock+0xa4>
 800eb80:	2310      	movs	r3, #16
 800eb82:	e000      	b.n	800eb86 <chk_lock+0xa6>
 800eb84:	2300      	movs	r3, #0
}
 800eb86:	4618      	mov	r0, r3
 800eb88:	3714      	adds	r7, #20
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb90:	4770      	bx	lr
 800eb92:	bf00      	nop
 800eb94:	200064cc 	.word	0x200064cc

0800eb98 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800eb98:	b480      	push	{r7}
 800eb9a:	b083      	sub	sp, #12
 800eb9c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800eb9e:	2300      	movs	r3, #0
 800eba0:	607b      	str	r3, [r7, #4]
 800eba2:	e002      	b.n	800ebaa <enq_lock+0x12>
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	3301      	adds	r3, #1
 800eba8:	607b      	str	r3, [r7, #4]
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	2b04      	cmp	r3, #4
 800ebae:	d806      	bhi.n	800ebbe <enq_lock+0x26>
 800ebb0:	4a09      	ldr	r2, [pc, #36]	; (800ebd8 <enq_lock+0x40>)
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	011b      	lsls	r3, r3, #4
 800ebb6:	4413      	add	r3, r2
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d1f2      	bne.n	800eba4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	2b05      	cmp	r3, #5
 800ebc2:	bf14      	ite	ne
 800ebc4:	2301      	movne	r3, #1
 800ebc6:	2300      	moveq	r3, #0
 800ebc8:	b2db      	uxtb	r3, r3
}
 800ebca:	4618      	mov	r0, r3
 800ebcc:	370c      	adds	r7, #12
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd4:	4770      	bx	lr
 800ebd6:	bf00      	nop
 800ebd8:	200064cc 	.word	0x200064cc

0800ebdc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ebdc:	b480      	push	{r7}
 800ebde:	b085      	sub	sp, #20
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
 800ebe4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	60fb      	str	r3, [r7, #12]
 800ebea:	e01f      	b.n	800ec2c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ebec:	4a41      	ldr	r2, [pc, #260]	; (800ecf4 <inc_lock+0x118>)
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	011b      	lsls	r3, r3, #4
 800ebf2:	4413      	add	r3, r2
 800ebf4:	681a      	ldr	r2, [r3, #0]
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	429a      	cmp	r2, r3
 800ebfc:	d113      	bne.n	800ec26 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ebfe:	4a3d      	ldr	r2, [pc, #244]	; (800ecf4 <inc_lock+0x118>)
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	011b      	lsls	r3, r3, #4
 800ec04:	4413      	add	r3, r2
 800ec06:	3304      	adds	r3, #4
 800ec08:	681a      	ldr	r2, [r3, #0]
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ec0e:	429a      	cmp	r2, r3
 800ec10:	d109      	bne.n	800ec26 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ec12:	4a38      	ldr	r2, [pc, #224]	; (800ecf4 <inc_lock+0x118>)
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	011b      	lsls	r3, r3, #4
 800ec18:	4413      	add	r3, r2
 800ec1a:	3308      	adds	r3, #8
 800ec1c:	681a      	ldr	r2, [r3, #0]
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ec22:	429a      	cmp	r2, r3
 800ec24:	d006      	beq.n	800ec34 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	3301      	adds	r3, #1
 800ec2a:	60fb      	str	r3, [r7, #12]
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	2b04      	cmp	r3, #4
 800ec30:	d9dc      	bls.n	800ebec <inc_lock+0x10>
 800ec32:	e000      	b.n	800ec36 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ec34:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	2b05      	cmp	r3, #5
 800ec3a:	d132      	bne.n	800eca2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	60fb      	str	r3, [r7, #12]
 800ec40:	e002      	b.n	800ec48 <inc_lock+0x6c>
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	3301      	adds	r3, #1
 800ec46:	60fb      	str	r3, [r7, #12]
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	2b04      	cmp	r3, #4
 800ec4c:	d806      	bhi.n	800ec5c <inc_lock+0x80>
 800ec4e:	4a29      	ldr	r2, [pc, #164]	; (800ecf4 <inc_lock+0x118>)
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	011b      	lsls	r3, r3, #4
 800ec54:	4413      	add	r3, r2
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d1f2      	bne.n	800ec42 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	2b05      	cmp	r3, #5
 800ec60:	d101      	bne.n	800ec66 <inc_lock+0x8a>
 800ec62:	2300      	movs	r3, #0
 800ec64:	e040      	b.n	800ece8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	681a      	ldr	r2, [r3, #0]
 800ec6a:	4922      	ldr	r1, [pc, #136]	; (800ecf4 <inc_lock+0x118>)
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	011b      	lsls	r3, r3, #4
 800ec70:	440b      	add	r3, r1
 800ec72:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	689a      	ldr	r2, [r3, #8]
 800ec78:	491e      	ldr	r1, [pc, #120]	; (800ecf4 <inc_lock+0x118>)
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	011b      	lsls	r3, r3, #4
 800ec7e:	440b      	add	r3, r1
 800ec80:	3304      	adds	r3, #4
 800ec82:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	695a      	ldr	r2, [r3, #20]
 800ec88:	491a      	ldr	r1, [pc, #104]	; (800ecf4 <inc_lock+0x118>)
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	011b      	lsls	r3, r3, #4
 800ec8e:	440b      	add	r3, r1
 800ec90:	3308      	adds	r3, #8
 800ec92:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ec94:	4a17      	ldr	r2, [pc, #92]	; (800ecf4 <inc_lock+0x118>)
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	011b      	lsls	r3, r3, #4
 800ec9a:	4413      	add	r3, r2
 800ec9c:	330c      	adds	r3, #12
 800ec9e:	2200      	movs	r2, #0
 800eca0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d009      	beq.n	800ecbc <inc_lock+0xe0>
 800eca8:	4a12      	ldr	r2, [pc, #72]	; (800ecf4 <inc_lock+0x118>)
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	011b      	lsls	r3, r3, #4
 800ecae:	4413      	add	r3, r2
 800ecb0:	330c      	adds	r3, #12
 800ecb2:	881b      	ldrh	r3, [r3, #0]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d001      	beq.n	800ecbc <inc_lock+0xe0>
 800ecb8:	2300      	movs	r3, #0
 800ecba:	e015      	b.n	800ece8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ecbc:	683b      	ldr	r3, [r7, #0]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d108      	bne.n	800ecd4 <inc_lock+0xf8>
 800ecc2:	4a0c      	ldr	r2, [pc, #48]	; (800ecf4 <inc_lock+0x118>)
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	011b      	lsls	r3, r3, #4
 800ecc8:	4413      	add	r3, r2
 800ecca:	330c      	adds	r3, #12
 800eccc:	881b      	ldrh	r3, [r3, #0]
 800ecce:	3301      	adds	r3, #1
 800ecd0:	b29a      	uxth	r2, r3
 800ecd2:	e001      	b.n	800ecd8 <inc_lock+0xfc>
 800ecd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ecd8:	4906      	ldr	r1, [pc, #24]	; (800ecf4 <inc_lock+0x118>)
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	011b      	lsls	r3, r3, #4
 800ecde:	440b      	add	r3, r1
 800ece0:	330c      	adds	r3, #12
 800ece2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	3301      	adds	r3, #1
}
 800ece8:	4618      	mov	r0, r3
 800ecea:	3714      	adds	r7, #20
 800ecec:	46bd      	mov	sp, r7
 800ecee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf2:	4770      	bx	lr
 800ecf4:	200064cc 	.word	0x200064cc

0800ecf8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ecf8:	b480      	push	{r7}
 800ecfa:	b085      	sub	sp, #20
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ed00:	2300      	movs	r3, #0
 800ed02:	60fb      	str	r3, [r7, #12]
 800ed04:	e010      	b.n	800ed28 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ed06:	4a0d      	ldr	r2, [pc, #52]	; (800ed3c <clear_lock+0x44>)
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	011b      	lsls	r3, r3, #4
 800ed0c:	4413      	add	r3, r2
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	687a      	ldr	r2, [r7, #4]
 800ed12:	429a      	cmp	r2, r3
 800ed14:	d105      	bne.n	800ed22 <clear_lock+0x2a>
 800ed16:	4a09      	ldr	r2, [pc, #36]	; (800ed3c <clear_lock+0x44>)
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	011b      	lsls	r3, r3, #4
 800ed1c:	4413      	add	r3, r2
 800ed1e:	2200      	movs	r2, #0
 800ed20:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	3301      	adds	r3, #1
 800ed26:	60fb      	str	r3, [r7, #12]
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	2b04      	cmp	r3, #4
 800ed2c:	d9eb      	bls.n	800ed06 <clear_lock+0xe>
	}
}
 800ed2e:	bf00      	nop
 800ed30:	bf00      	nop
 800ed32:	3714      	adds	r7, #20
 800ed34:	46bd      	mov	sp, r7
 800ed36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3a:	4770      	bx	lr
 800ed3c:	200064cc 	.word	0x200064cc

0800ed40 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b086      	sub	sp, #24
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ed48:	2300      	movs	r3, #0
 800ed4a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	78db      	ldrb	r3, [r3, #3]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d034      	beq.n	800edbe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed58:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	7858      	ldrb	r0, [r3, #1]
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ed64:	2301      	movs	r3, #1
 800ed66:	697a      	ldr	r2, [r7, #20]
 800ed68:	f7ff fd7c 	bl	800e864 <disk_write>
 800ed6c:	4603      	mov	r3, r0
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d002      	beq.n	800ed78 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ed72:	2301      	movs	r3, #1
 800ed74:	73fb      	strb	r3, [r7, #15]
 800ed76:	e022      	b.n	800edbe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed82:	697a      	ldr	r2, [r7, #20]
 800ed84:	1ad2      	subs	r2, r2, r3
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	69db      	ldr	r3, [r3, #28]
 800ed8a:	429a      	cmp	r2, r3
 800ed8c:	d217      	bcs.n	800edbe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	789b      	ldrb	r3, [r3, #2]
 800ed92:	613b      	str	r3, [r7, #16]
 800ed94:	e010      	b.n	800edb8 <sync_window+0x78>
					wsect += fs->fsize;
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	69db      	ldr	r3, [r3, #28]
 800ed9a:	697a      	ldr	r2, [r7, #20]
 800ed9c:	4413      	add	r3, r2
 800ed9e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	7858      	ldrb	r0, [r3, #1]
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800edaa:	2301      	movs	r3, #1
 800edac:	697a      	ldr	r2, [r7, #20]
 800edae:	f7ff fd59 	bl	800e864 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800edb2:	693b      	ldr	r3, [r7, #16]
 800edb4:	3b01      	subs	r3, #1
 800edb6:	613b      	str	r3, [r7, #16]
 800edb8:	693b      	ldr	r3, [r7, #16]
 800edba:	2b01      	cmp	r3, #1
 800edbc:	d8eb      	bhi.n	800ed96 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800edbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800edc0:	4618      	mov	r0, r3
 800edc2:	3718      	adds	r7, #24
 800edc4:	46bd      	mov	sp, r7
 800edc6:	bd80      	pop	{r7, pc}

0800edc8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	b084      	sub	sp, #16
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
 800edd0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800edd2:	2300      	movs	r3, #0
 800edd4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edda:	683a      	ldr	r2, [r7, #0]
 800eddc:	429a      	cmp	r2, r3
 800edde:	d01b      	beq.n	800ee18 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ede0:	6878      	ldr	r0, [r7, #4]
 800ede2:	f7ff ffad 	bl	800ed40 <sync_window>
 800ede6:	4603      	mov	r3, r0
 800ede8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800edea:	7bfb      	ldrb	r3, [r7, #15]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d113      	bne.n	800ee18 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	7858      	ldrb	r0, [r3, #1]
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800edfa:	2301      	movs	r3, #1
 800edfc:	683a      	ldr	r2, [r7, #0]
 800edfe:	f7ff fd11 	bl	800e824 <disk_read>
 800ee02:	4603      	mov	r3, r0
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d004      	beq.n	800ee12 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ee08:	f04f 33ff 	mov.w	r3, #4294967295
 800ee0c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ee0e:	2301      	movs	r3, #1
 800ee10:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	683a      	ldr	r2, [r7, #0]
 800ee16:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800ee18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	3710      	adds	r7, #16
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	bd80      	pop	{r7, pc}
	...

0800ee24 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b084      	sub	sp, #16
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ee2c:	6878      	ldr	r0, [r7, #4]
 800ee2e:	f7ff ff87 	bl	800ed40 <sync_window>
 800ee32:	4603      	mov	r3, r0
 800ee34:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ee36:	7bfb      	ldrb	r3, [r7, #15]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d159      	bne.n	800eef0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	781b      	ldrb	r3, [r3, #0]
 800ee40:	2b03      	cmp	r3, #3
 800ee42:	d149      	bne.n	800eed8 <sync_fs+0xb4>
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	791b      	ldrb	r3, [r3, #4]
 800ee48:	2b01      	cmp	r3, #1
 800ee4a:	d145      	bne.n	800eed8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	899b      	ldrh	r3, [r3, #12]
 800ee56:	461a      	mov	r2, r3
 800ee58:	2100      	movs	r1, #0
 800ee5a:	f7ff fde4 	bl	800ea26 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	3334      	adds	r3, #52	; 0x34
 800ee62:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ee66:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	f7ff fd73 	bl	800e956 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	3334      	adds	r3, #52	; 0x34
 800ee74:	4921      	ldr	r1, [pc, #132]	; (800eefc <sync_fs+0xd8>)
 800ee76:	4618      	mov	r0, r3
 800ee78:	f7ff fd88 	bl	800e98c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	3334      	adds	r3, #52	; 0x34
 800ee80:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ee84:	491e      	ldr	r1, [pc, #120]	; (800ef00 <sync_fs+0xdc>)
 800ee86:	4618      	mov	r0, r3
 800ee88:	f7ff fd80 	bl	800e98c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	3334      	adds	r3, #52	; 0x34
 800ee90:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	695b      	ldr	r3, [r3, #20]
 800ee98:	4619      	mov	r1, r3
 800ee9a:	4610      	mov	r0, r2
 800ee9c:	f7ff fd76 	bl	800e98c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	3334      	adds	r3, #52	; 0x34
 800eea4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	691b      	ldr	r3, [r3, #16]
 800eeac:	4619      	mov	r1, r3
 800eeae:	4610      	mov	r0, r2
 800eeb0:	f7ff fd6c 	bl	800e98c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	6a1b      	ldr	r3, [r3, #32]
 800eeb8:	1c5a      	adds	r2, r3, #1
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	7858      	ldrb	r0, [r3, #1]
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eecc:	2301      	movs	r3, #1
 800eece:	f7ff fcc9 	bl	800e864 <disk_write>
			fs->fsi_flag = 0;
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	2200      	movs	r2, #0
 800eed6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	785b      	ldrb	r3, [r3, #1]
 800eedc:	2200      	movs	r2, #0
 800eede:	2100      	movs	r1, #0
 800eee0:	4618      	mov	r0, r3
 800eee2:	f7ff fcdf 	bl	800e8a4 <disk_ioctl>
 800eee6:	4603      	mov	r3, r0
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d001      	beq.n	800eef0 <sync_fs+0xcc>
 800eeec:	2301      	movs	r3, #1
 800eeee:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800eef0:	7bfb      	ldrb	r3, [r7, #15]
}
 800eef2:	4618      	mov	r0, r3
 800eef4:	3710      	adds	r7, #16
 800eef6:	46bd      	mov	sp, r7
 800eef8:	bd80      	pop	{r7, pc}
 800eefa:	bf00      	nop
 800eefc:	41615252 	.word	0x41615252
 800ef00:	61417272 	.word	0x61417272

0800ef04 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ef04:	b480      	push	{r7}
 800ef06:	b083      	sub	sp, #12
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
 800ef0c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ef0e:	683b      	ldr	r3, [r7, #0]
 800ef10:	3b02      	subs	r3, #2
 800ef12:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	699b      	ldr	r3, [r3, #24]
 800ef18:	3b02      	subs	r3, #2
 800ef1a:	683a      	ldr	r2, [r7, #0]
 800ef1c:	429a      	cmp	r2, r3
 800ef1e:	d301      	bcc.n	800ef24 <clust2sect+0x20>
 800ef20:	2300      	movs	r3, #0
 800ef22:	e008      	b.n	800ef36 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	895b      	ldrh	r3, [r3, #10]
 800ef28:	461a      	mov	r2, r3
 800ef2a:	683b      	ldr	r3, [r7, #0]
 800ef2c:	fb03 f202 	mul.w	r2, r3, r2
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef34:	4413      	add	r3, r2
}
 800ef36:	4618      	mov	r0, r3
 800ef38:	370c      	adds	r7, #12
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef40:	4770      	bx	lr

0800ef42 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ef42:	b580      	push	{r7, lr}
 800ef44:	b086      	sub	sp, #24
 800ef46:	af00      	add	r7, sp, #0
 800ef48:	6078      	str	r0, [r7, #4]
 800ef4a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ef52:	683b      	ldr	r3, [r7, #0]
 800ef54:	2b01      	cmp	r3, #1
 800ef56:	d904      	bls.n	800ef62 <get_fat+0x20>
 800ef58:	693b      	ldr	r3, [r7, #16]
 800ef5a:	699b      	ldr	r3, [r3, #24]
 800ef5c:	683a      	ldr	r2, [r7, #0]
 800ef5e:	429a      	cmp	r2, r3
 800ef60:	d302      	bcc.n	800ef68 <get_fat+0x26>
		val = 1;	/* Internal error */
 800ef62:	2301      	movs	r3, #1
 800ef64:	617b      	str	r3, [r7, #20]
 800ef66:	e0bb      	b.n	800f0e0 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ef68:	f04f 33ff 	mov.w	r3, #4294967295
 800ef6c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ef6e:	693b      	ldr	r3, [r7, #16]
 800ef70:	781b      	ldrb	r3, [r3, #0]
 800ef72:	2b03      	cmp	r3, #3
 800ef74:	f000 8083 	beq.w	800f07e <get_fat+0x13c>
 800ef78:	2b03      	cmp	r3, #3
 800ef7a:	f300 80a7 	bgt.w	800f0cc <get_fat+0x18a>
 800ef7e:	2b01      	cmp	r3, #1
 800ef80:	d002      	beq.n	800ef88 <get_fat+0x46>
 800ef82:	2b02      	cmp	r3, #2
 800ef84:	d056      	beq.n	800f034 <get_fat+0xf2>
 800ef86:	e0a1      	b.n	800f0cc <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ef88:	683b      	ldr	r3, [r7, #0]
 800ef8a:	60fb      	str	r3, [r7, #12]
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	085b      	lsrs	r3, r3, #1
 800ef90:	68fa      	ldr	r2, [r7, #12]
 800ef92:	4413      	add	r3, r2
 800ef94:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ef96:	693b      	ldr	r3, [r7, #16]
 800ef98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ef9a:	693b      	ldr	r3, [r7, #16]
 800ef9c:	899b      	ldrh	r3, [r3, #12]
 800ef9e:	4619      	mov	r1, r3
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	fbb3 f3f1 	udiv	r3, r3, r1
 800efa6:	4413      	add	r3, r2
 800efa8:	4619      	mov	r1, r3
 800efaa:	6938      	ldr	r0, [r7, #16]
 800efac:	f7ff ff0c 	bl	800edc8 <move_window>
 800efb0:	4603      	mov	r3, r0
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	f040 808d 	bne.w	800f0d2 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	1c5a      	adds	r2, r3, #1
 800efbc:	60fa      	str	r2, [r7, #12]
 800efbe:	693a      	ldr	r2, [r7, #16]
 800efc0:	8992      	ldrh	r2, [r2, #12]
 800efc2:	fbb3 f1f2 	udiv	r1, r3, r2
 800efc6:	fb01 f202 	mul.w	r2, r1, r2
 800efca:	1a9b      	subs	r3, r3, r2
 800efcc:	693a      	ldr	r2, [r7, #16]
 800efce:	4413      	add	r3, r2
 800efd0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800efd4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800efd6:	693b      	ldr	r3, [r7, #16]
 800efd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800efda:	693b      	ldr	r3, [r7, #16]
 800efdc:	899b      	ldrh	r3, [r3, #12]
 800efde:	4619      	mov	r1, r3
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	fbb3 f3f1 	udiv	r3, r3, r1
 800efe6:	4413      	add	r3, r2
 800efe8:	4619      	mov	r1, r3
 800efea:	6938      	ldr	r0, [r7, #16]
 800efec:	f7ff feec 	bl	800edc8 <move_window>
 800eff0:	4603      	mov	r3, r0
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d16f      	bne.n	800f0d6 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800eff6:	693b      	ldr	r3, [r7, #16]
 800eff8:	899b      	ldrh	r3, [r3, #12]
 800effa:	461a      	mov	r2, r3
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	fbb3 f1f2 	udiv	r1, r3, r2
 800f002:	fb01 f202 	mul.w	r2, r1, r2
 800f006:	1a9b      	subs	r3, r3, r2
 800f008:	693a      	ldr	r2, [r7, #16]
 800f00a:	4413      	add	r3, r2
 800f00c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f010:	021b      	lsls	r3, r3, #8
 800f012:	461a      	mov	r2, r3
 800f014:	68bb      	ldr	r3, [r7, #8]
 800f016:	4313      	orrs	r3, r2
 800f018:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	f003 0301 	and.w	r3, r3, #1
 800f020:	2b00      	cmp	r3, #0
 800f022:	d002      	beq.n	800f02a <get_fat+0xe8>
 800f024:	68bb      	ldr	r3, [r7, #8]
 800f026:	091b      	lsrs	r3, r3, #4
 800f028:	e002      	b.n	800f030 <get_fat+0xee>
 800f02a:	68bb      	ldr	r3, [r7, #8]
 800f02c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f030:	617b      	str	r3, [r7, #20]
			break;
 800f032:	e055      	b.n	800f0e0 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f034:	693b      	ldr	r3, [r7, #16]
 800f036:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f038:	693b      	ldr	r3, [r7, #16]
 800f03a:	899b      	ldrh	r3, [r3, #12]
 800f03c:	085b      	lsrs	r3, r3, #1
 800f03e:	b29b      	uxth	r3, r3
 800f040:	4619      	mov	r1, r3
 800f042:	683b      	ldr	r3, [r7, #0]
 800f044:	fbb3 f3f1 	udiv	r3, r3, r1
 800f048:	4413      	add	r3, r2
 800f04a:	4619      	mov	r1, r3
 800f04c:	6938      	ldr	r0, [r7, #16]
 800f04e:	f7ff febb 	bl	800edc8 <move_window>
 800f052:	4603      	mov	r3, r0
 800f054:	2b00      	cmp	r3, #0
 800f056:	d140      	bne.n	800f0da <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f058:	693b      	ldr	r3, [r7, #16]
 800f05a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f05e:	683b      	ldr	r3, [r7, #0]
 800f060:	005b      	lsls	r3, r3, #1
 800f062:	693a      	ldr	r2, [r7, #16]
 800f064:	8992      	ldrh	r2, [r2, #12]
 800f066:	fbb3 f0f2 	udiv	r0, r3, r2
 800f06a:	fb00 f202 	mul.w	r2, r0, r2
 800f06e:	1a9b      	subs	r3, r3, r2
 800f070:	440b      	add	r3, r1
 800f072:	4618      	mov	r0, r3
 800f074:	f7ff fc34 	bl	800e8e0 <ld_word>
 800f078:	4603      	mov	r3, r0
 800f07a:	617b      	str	r3, [r7, #20]
			break;
 800f07c:	e030      	b.n	800f0e0 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f07e:	693b      	ldr	r3, [r7, #16]
 800f080:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f082:	693b      	ldr	r3, [r7, #16]
 800f084:	899b      	ldrh	r3, [r3, #12]
 800f086:	089b      	lsrs	r3, r3, #2
 800f088:	b29b      	uxth	r3, r3
 800f08a:	4619      	mov	r1, r3
 800f08c:	683b      	ldr	r3, [r7, #0]
 800f08e:	fbb3 f3f1 	udiv	r3, r3, r1
 800f092:	4413      	add	r3, r2
 800f094:	4619      	mov	r1, r3
 800f096:	6938      	ldr	r0, [r7, #16]
 800f098:	f7ff fe96 	bl	800edc8 <move_window>
 800f09c:	4603      	mov	r3, r0
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d11d      	bne.n	800f0de <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f0a2:	693b      	ldr	r3, [r7, #16]
 800f0a4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f0a8:	683b      	ldr	r3, [r7, #0]
 800f0aa:	009b      	lsls	r3, r3, #2
 800f0ac:	693a      	ldr	r2, [r7, #16]
 800f0ae:	8992      	ldrh	r2, [r2, #12]
 800f0b0:	fbb3 f0f2 	udiv	r0, r3, r2
 800f0b4:	fb00 f202 	mul.w	r2, r0, r2
 800f0b8:	1a9b      	subs	r3, r3, r2
 800f0ba:	440b      	add	r3, r1
 800f0bc:	4618      	mov	r0, r3
 800f0be:	f7ff fc27 	bl	800e910 <ld_dword>
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800f0c8:	617b      	str	r3, [r7, #20]
			break;
 800f0ca:	e009      	b.n	800f0e0 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800f0cc:	2301      	movs	r3, #1
 800f0ce:	617b      	str	r3, [r7, #20]
 800f0d0:	e006      	b.n	800f0e0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f0d2:	bf00      	nop
 800f0d4:	e004      	b.n	800f0e0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f0d6:	bf00      	nop
 800f0d8:	e002      	b.n	800f0e0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f0da:	bf00      	nop
 800f0dc:	e000      	b.n	800f0e0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f0de:	bf00      	nop
		}
	}

	return val;
 800f0e0:	697b      	ldr	r3, [r7, #20]
}
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	3718      	adds	r7, #24
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	bd80      	pop	{r7, pc}

0800f0ea <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800f0ea:	b590      	push	{r4, r7, lr}
 800f0ec:	b089      	sub	sp, #36	; 0x24
 800f0ee:	af00      	add	r7, sp, #0
 800f0f0:	60f8      	str	r0, [r7, #12]
 800f0f2:	60b9      	str	r1, [r7, #8]
 800f0f4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800f0f6:	2302      	movs	r3, #2
 800f0f8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f0fa:	68bb      	ldr	r3, [r7, #8]
 800f0fc:	2b01      	cmp	r3, #1
 800f0fe:	f240 8102 	bls.w	800f306 <put_fat+0x21c>
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	699b      	ldr	r3, [r3, #24]
 800f106:	68ba      	ldr	r2, [r7, #8]
 800f108:	429a      	cmp	r2, r3
 800f10a:	f080 80fc 	bcs.w	800f306 <put_fat+0x21c>
		switch (fs->fs_type) {
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	781b      	ldrb	r3, [r3, #0]
 800f112:	2b03      	cmp	r3, #3
 800f114:	f000 80b6 	beq.w	800f284 <put_fat+0x19a>
 800f118:	2b03      	cmp	r3, #3
 800f11a:	f300 80fd 	bgt.w	800f318 <put_fat+0x22e>
 800f11e:	2b01      	cmp	r3, #1
 800f120:	d003      	beq.n	800f12a <put_fat+0x40>
 800f122:	2b02      	cmp	r3, #2
 800f124:	f000 8083 	beq.w	800f22e <put_fat+0x144>
 800f128:	e0f6      	b.n	800f318 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800f12a:	68bb      	ldr	r3, [r7, #8]
 800f12c:	61bb      	str	r3, [r7, #24]
 800f12e:	69bb      	ldr	r3, [r7, #24]
 800f130:	085b      	lsrs	r3, r3, #1
 800f132:	69ba      	ldr	r2, [r7, #24]
 800f134:	4413      	add	r3, r2
 800f136:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	899b      	ldrh	r3, [r3, #12]
 800f140:	4619      	mov	r1, r3
 800f142:	69bb      	ldr	r3, [r7, #24]
 800f144:	fbb3 f3f1 	udiv	r3, r3, r1
 800f148:	4413      	add	r3, r2
 800f14a:	4619      	mov	r1, r3
 800f14c:	68f8      	ldr	r0, [r7, #12]
 800f14e:	f7ff fe3b 	bl	800edc8 <move_window>
 800f152:	4603      	mov	r3, r0
 800f154:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f156:	7ffb      	ldrb	r3, [r7, #31]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	f040 80d6 	bne.w	800f30a <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f164:	69bb      	ldr	r3, [r7, #24]
 800f166:	1c5a      	adds	r2, r3, #1
 800f168:	61ba      	str	r2, [r7, #24]
 800f16a:	68fa      	ldr	r2, [r7, #12]
 800f16c:	8992      	ldrh	r2, [r2, #12]
 800f16e:	fbb3 f0f2 	udiv	r0, r3, r2
 800f172:	fb00 f202 	mul.w	r2, r0, r2
 800f176:	1a9b      	subs	r3, r3, r2
 800f178:	440b      	add	r3, r1
 800f17a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f17c:	68bb      	ldr	r3, [r7, #8]
 800f17e:	f003 0301 	and.w	r3, r3, #1
 800f182:	2b00      	cmp	r3, #0
 800f184:	d00d      	beq.n	800f1a2 <put_fat+0xb8>
 800f186:	697b      	ldr	r3, [r7, #20]
 800f188:	781b      	ldrb	r3, [r3, #0]
 800f18a:	b25b      	sxtb	r3, r3
 800f18c:	f003 030f 	and.w	r3, r3, #15
 800f190:	b25a      	sxtb	r2, r3
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	b2db      	uxtb	r3, r3
 800f196:	011b      	lsls	r3, r3, #4
 800f198:	b25b      	sxtb	r3, r3
 800f19a:	4313      	orrs	r3, r2
 800f19c:	b25b      	sxtb	r3, r3
 800f19e:	b2db      	uxtb	r3, r3
 800f1a0:	e001      	b.n	800f1a6 <put_fat+0xbc>
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	b2db      	uxtb	r3, r3
 800f1a6:	697a      	ldr	r2, [r7, #20]
 800f1a8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	2201      	movs	r2, #1
 800f1ae:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	899b      	ldrh	r3, [r3, #12]
 800f1b8:	4619      	mov	r1, r3
 800f1ba:	69bb      	ldr	r3, [r7, #24]
 800f1bc:	fbb3 f3f1 	udiv	r3, r3, r1
 800f1c0:	4413      	add	r3, r2
 800f1c2:	4619      	mov	r1, r3
 800f1c4:	68f8      	ldr	r0, [r7, #12]
 800f1c6:	f7ff fdff 	bl	800edc8 <move_window>
 800f1ca:	4603      	mov	r3, r0
 800f1cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f1ce:	7ffb      	ldrb	r3, [r7, #31]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	f040 809c 	bne.w	800f30e <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	899b      	ldrh	r3, [r3, #12]
 800f1e0:	461a      	mov	r2, r3
 800f1e2:	69bb      	ldr	r3, [r7, #24]
 800f1e4:	fbb3 f0f2 	udiv	r0, r3, r2
 800f1e8:	fb00 f202 	mul.w	r2, r0, r2
 800f1ec:	1a9b      	subs	r3, r3, r2
 800f1ee:	440b      	add	r3, r1
 800f1f0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f1f2:	68bb      	ldr	r3, [r7, #8]
 800f1f4:	f003 0301 	and.w	r3, r3, #1
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d003      	beq.n	800f204 <put_fat+0x11a>
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	091b      	lsrs	r3, r3, #4
 800f200:	b2db      	uxtb	r3, r3
 800f202:	e00e      	b.n	800f222 <put_fat+0x138>
 800f204:	697b      	ldr	r3, [r7, #20]
 800f206:	781b      	ldrb	r3, [r3, #0]
 800f208:	b25b      	sxtb	r3, r3
 800f20a:	f023 030f 	bic.w	r3, r3, #15
 800f20e:	b25a      	sxtb	r2, r3
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	0a1b      	lsrs	r3, r3, #8
 800f214:	b25b      	sxtb	r3, r3
 800f216:	f003 030f 	and.w	r3, r3, #15
 800f21a:	b25b      	sxtb	r3, r3
 800f21c:	4313      	orrs	r3, r2
 800f21e:	b25b      	sxtb	r3, r3
 800f220:	b2db      	uxtb	r3, r3
 800f222:	697a      	ldr	r2, [r7, #20]
 800f224:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	2201      	movs	r2, #1
 800f22a:	70da      	strb	r2, [r3, #3]
			break;
 800f22c:	e074      	b.n	800f318 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	899b      	ldrh	r3, [r3, #12]
 800f236:	085b      	lsrs	r3, r3, #1
 800f238:	b29b      	uxth	r3, r3
 800f23a:	4619      	mov	r1, r3
 800f23c:	68bb      	ldr	r3, [r7, #8]
 800f23e:	fbb3 f3f1 	udiv	r3, r3, r1
 800f242:	4413      	add	r3, r2
 800f244:	4619      	mov	r1, r3
 800f246:	68f8      	ldr	r0, [r7, #12]
 800f248:	f7ff fdbe 	bl	800edc8 <move_window>
 800f24c:	4603      	mov	r3, r0
 800f24e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f250:	7ffb      	ldrb	r3, [r7, #31]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d15d      	bne.n	800f312 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f25c:	68bb      	ldr	r3, [r7, #8]
 800f25e:	005b      	lsls	r3, r3, #1
 800f260:	68fa      	ldr	r2, [r7, #12]
 800f262:	8992      	ldrh	r2, [r2, #12]
 800f264:	fbb3 f0f2 	udiv	r0, r3, r2
 800f268:	fb00 f202 	mul.w	r2, r0, r2
 800f26c:	1a9b      	subs	r3, r3, r2
 800f26e:	440b      	add	r3, r1
 800f270:	687a      	ldr	r2, [r7, #4]
 800f272:	b292      	uxth	r2, r2
 800f274:	4611      	mov	r1, r2
 800f276:	4618      	mov	r0, r3
 800f278:	f7ff fb6d 	bl	800e956 <st_word>
			fs->wflag = 1;
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	2201      	movs	r2, #1
 800f280:	70da      	strb	r2, [r3, #3]
			break;
 800f282:	e049      	b.n	800f318 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	899b      	ldrh	r3, [r3, #12]
 800f28c:	089b      	lsrs	r3, r3, #2
 800f28e:	b29b      	uxth	r3, r3
 800f290:	4619      	mov	r1, r3
 800f292:	68bb      	ldr	r3, [r7, #8]
 800f294:	fbb3 f3f1 	udiv	r3, r3, r1
 800f298:	4413      	add	r3, r2
 800f29a:	4619      	mov	r1, r3
 800f29c:	68f8      	ldr	r0, [r7, #12]
 800f29e:	f7ff fd93 	bl	800edc8 <move_window>
 800f2a2:	4603      	mov	r3, r0
 800f2a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f2a6:	7ffb      	ldrb	r3, [r7, #31]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d134      	bne.n	800f316 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f2b8:	68bb      	ldr	r3, [r7, #8]
 800f2ba:	009b      	lsls	r3, r3, #2
 800f2bc:	68fa      	ldr	r2, [r7, #12]
 800f2be:	8992      	ldrh	r2, [r2, #12]
 800f2c0:	fbb3 f0f2 	udiv	r0, r3, r2
 800f2c4:	fb00 f202 	mul.w	r2, r0, r2
 800f2c8:	1a9b      	subs	r3, r3, r2
 800f2ca:	440b      	add	r3, r1
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	f7ff fb1f 	bl	800e910 <ld_dword>
 800f2d2:	4603      	mov	r3, r0
 800f2d4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f2d8:	4323      	orrs	r3, r4
 800f2da:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f2e2:	68bb      	ldr	r3, [r7, #8]
 800f2e4:	009b      	lsls	r3, r3, #2
 800f2e6:	68fa      	ldr	r2, [r7, #12]
 800f2e8:	8992      	ldrh	r2, [r2, #12]
 800f2ea:	fbb3 f0f2 	udiv	r0, r3, r2
 800f2ee:	fb00 f202 	mul.w	r2, r0, r2
 800f2f2:	1a9b      	subs	r3, r3, r2
 800f2f4:	440b      	add	r3, r1
 800f2f6:	6879      	ldr	r1, [r7, #4]
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	f7ff fb47 	bl	800e98c <st_dword>
			fs->wflag = 1;
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	2201      	movs	r2, #1
 800f302:	70da      	strb	r2, [r3, #3]
			break;
 800f304:	e008      	b.n	800f318 <put_fat+0x22e>
		}
	}
 800f306:	bf00      	nop
 800f308:	e006      	b.n	800f318 <put_fat+0x22e>
			if (res != FR_OK) break;
 800f30a:	bf00      	nop
 800f30c:	e004      	b.n	800f318 <put_fat+0x22e>
			if (res != FR_OK) break;
 800f30e:	bf00      	nop
 800f310:	e002      	b.n	800f318 <put_fat+0x22e>
			if (res != FR_OK) break;
 800f312:	bf00      	nop
 800f314:	e000      	b.n	800f318 <put_fat+0x22e>
			if (res != FR_OK) break;
 800f316:	bf00      	nop
	return res;
 800f318:	7ffb      	ldrb	r3, [r7, #31]
}
 800f31a:	4618      	mov	r0, r3
 800f31c:	3724      	adds	r7, #36	; 0x24
 800f31e:	46bd      	mov	sp, r7
 800f320:	bd90      	pop	{r4, r7, pc}

0800f322 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f322:	b580      	push	{r7, lr}
 800f324:	b088      	sub	sp, #32
 800f326:	af00      	add	r7, sp, #0
 800f328:	60f8      	str	r0, [r7, #12]
 800f32a:	60b9      	str	r1, [r7, #8]
 800f32c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f32e:	2300      	movs	r3, #0
 800f330:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f338:	68bb      	ldr	r3, [r7, #8]
 800f33a:	2b01      	cmp	r3, #1
 800f33c:	d904      	bls.n	800f348 <remove_chain+0x26>
 800f33e:	69bb      	ldr	r3, [r7, #24]
 800f340:	699b      	ldr	r3, [r3, #24]
 800f342:	68ba      	ldr	r2, [r7, #8]
 800f344:	429a      	cmp	r2, r3
 800f346:	d301      	bcc.n	800f34c <remove_chain+0x2a>
 800f348:	2302      	movs	r3, #2
 800f34a:	e04b      	b.n	800f3e4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d00c      	beq.n	800f36c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f352:	f04f 32ff 	mov.w	r2, #4294967295
 800f356:	6879      	ldr	r1, [r7, #4]
 800f358:	69b8      	ldr	r0, [r7, #24]
 800f35a:	f7ff fec6 	bl	800f0ea <put_fat>
 800f35e:	4603      	mov	r3, r0
 800f360:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f362:	7ffb      	ldrb	r3, [r7, #31]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d001      	beq.n	800f36c <remove_chain+0x4a>
 800f368:	7ffb      	ldrb	r3, [r7, #31]
 800f36a:	e03b      	b.n	800f3e4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f36c:	68b9      	ldr	r1, [r7, #8]
 800f36e:	68f8      	ldr	r0, [r7, #12]
 800f370:	f7ff fde7 	bl	800ef42 <get_fat>
 800f374:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f376:	697b      	ldr	r3, [r7, #20]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d031      	beq.n	800f3e0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f37c:	697b      	ldr	r3, [r7, #20]
 800f37e:	2b01      	cmp	r3, #1
 800f380:	d101      	bne.n	800f386 <remove_chain+0x64>
 800f382:	2302      	movs	r3, #2
 800f384:	e02e      	b.n	800f3e4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f386:	697b      	ldr	r3, [r7, #20]
 800f388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f38c:	d101      	bne.n	800f392 <remove_chain+0x70>
 800f38e:	2301      	movs	r3, #1
 800f390:	e028      	b.n	800f3e4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f392:	2200      	movs	r2, #0
 800f394:	68b9      	ldr	r1, [r7, #8]
 800f396:	69b8      	ldr	r0, [r7, #24]
 800f398:	f7ff fea7 	bl	800f0ea <put_fat>
 800f39c:	4603      	mov	r3, r0
 800f39e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f3a0:	7ffb      	ldrb	r3, [r7, #31]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d001      	beq.n	800f3aa <remove_chain+0x88>
 800f3a6:	7ffb      	ldrb	r3, [r7, #31]
 800f3a8:	e01c      	b.n	800f3e4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f3aa:	69bb      	ldr	r3, [r7, #24]
 800f3ac:	695a      	ldr	r2, [r3, #20]
 800f3ae:	69bb      	ldr	r3, [r7, #24]
 800f3b0:	699b      	ldr	r3, [r3, #24]
 800f3b2:	3b02      	subs	r3, #2
 800f3b4:	429a      	cmp	r2, r3
 800f3b6:	d20b      	bcs.n	800f3d0 <remove_chain+0xae>
			fs->free_clst++;
 800f3b8:	69bb      	ldr	r3, [r7, #24]
 800f3ba:	695b      	ldr	r3, [r3, #20]
 800f3bc:	1c5a      	adds	r2, r3, #1
 800f3be:	69bb      	ldr	r3, [r7, #24]
 800f3c0:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800f3c2:	69bb      	ldr	r3, [r7, #24]
 800f3c4:	791b      	ldrb	r3, [r3, #4]
 800f3c6:	f043 0301 	orr.w	r3, r3, #1
 800f3ca:	b2da      	uxtb	r2, r3
 800f3cc:	69bb      	ldr	r3, [r7, #24]
 800f3ce:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f3d0:	697b      	ldr	r3, [r7, #20]
 800f3d2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f3d4:	69bb      	ldr	r3, [r7, #24]
 800f3d6:	699b      	ldr	r3, [r3, #24]
 800f3d8:	68ba      	ldr	r2, [r7, #8]
 800f3da:	429a      	cmp	r2, r3
 800f3dc:	d3c6      	bcc.n	800f36c <remove_chain+0x4a>
 800f3de:	e000      	b.n	800f3e2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800f3e0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800f3e2:	2300      	movs	r3, #0
}
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	3720      	adds	r7, #32
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	bd80      	pop	{r7, pc}

0800f3ec <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b088      	sub	sp, #32
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	6078      	str	r0, [r7, #4]
 800f3f4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f3fc:	683b      	ldr	r3, [r7, #0]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d10d      	bne.n	800f41e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f402:	693b      	ldr	r3, [r7, #16]
 800f404:	691b      	ldr	r3, [r3, #16]
 800f406:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f408:	69bb      	ldr	r3, [r7, #24]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d004      	beq.n	800f418 <create_chain+0x2c>
 800f40e:	693b      	ldr	r3, [r7, #16]
 800f410:	699b      	ldr	r3, [r3, #24]
 800f412:	69ba      	ldr	r2, [r7, #24]
 800f414:	429a      	cmp	r2, r3
 800f416:	d31b      	bcc.n	800f450 <create_chain+0x64>
 800f418:	2301      	movs	r3, #1
 800f41a:	61bb      	str	r3, [r7, #24]
 800f41c:	e018      	b.n	800f450 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f41e:	6839      	ldr	r1, [r7, #0]
 800f420:	6878      	ldr	r0, [r7, #4]
 800f422:	f7ff fd8e 	bl	800ef42 <get_fat>
 800f426:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	2b01      	cmp	r3, #1
 800f42c:	d801      	bhi.n	800f432 <create_chain+0x46>
 800f42e:	2301      	movs	r3, #1
 800f430:	e070      	b.n	800f514 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f438:	d101      	bne.n	800f43e <create_chain+0x52>
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	e06a      	b.n	800f514 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f43e:	693b      	ldr	r3, [r7, #16]
 800f440:	699b      	ldr	r3, [r3, #24]
 800f442:	68fa      	ldr	r2, [r7, #12]
 800f444:	429a      	cmp	r2, r3
 800f446:	d201      	bcs.n	800f44c <create_chain+0x60>
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	e063      	b.n	800f514 <create_chain+0x128>
		scl = clst;
 800f44c:	683b      	ldr	r3, [r7, #0]
 800f44e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f450:	69bb      	ldr	r3, [r7, #24]
 800f452:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f454:	69fb      	ldr	r3, [r7, #28]
 800f456:	3301      	adds	r3, #1
 800f458:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f45a:	693b      	ldr	r3, [r7, #16]
 800f45c:	699b      	ldr	r3, [r3, #24]
 800f45e:	69fa      	ldr	r2, [r7, #28]
 800f460:	429a      	cmp	r2, r3
 800f462:	d307      	bcc.n	800f474 <create_chain+0x88>
				ncl = 2;
 800f464:	2302      	movs	r3, #2
 800f466:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f468:	69fa      	ldr	r2, [r7, #28]
 800f46a:	69bb      	ldr	r3, [r7, #24]
 800f46c:	429a      	cmp	r2, r3
 800f46e:	d901      	bls.n	800f474 <create_chain+0x88>
 800f470:	2300      	movs	r3, #0
 800f472:	e04f      	b.n	800f514 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f474:	69f9      	ldr	r1, [r7, #28]
 800f476:	6878      	ldr	r0, [r7, #4]
 800f478:	f7ff fd63 	bl	800ef42 <get_fat>
 800f47c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	2b00      	cmp	r3, #0
 800f482:	d00e      	beq.n	800f4a2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	2b01      	cmp	r3, #1
 800f488:	d003      	beq.n	800f492 <create_chain+0xa6>
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f490:	d101      	bne.n	800f496 <create_chain+0xaa>
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	e03e      	b.n	800f514 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f496:	69fa      	ldr	r2, [r7, #28]
 800f498:	69bb      	ldr	r3, [r7, #24]
 800f49a:	429a      	cmp	r2, r3
 800f49c:	d1da      	bne.n	800f454 <create_chain+0x68>
 800f49e:	2300      	movs	r3, #0
 800f4a0:	e038      	b.n	800f514 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f4a2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f4a4:	f04f 32ff 	mov.w	r2, #4294967295
 800f4a8:	69f9      	ldr	r1, [r7, #28]
 800f4aa:	6938      	ldr	r0, [r7, #16]
 800f4ac:	f7ff fe1d 	bl	800f0ea <put_fat>
 800f4b0:	4603      	mov	r3, r0
 800f4b2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f4b4:	7dfb      	ldrb	r3, [r7, #23]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d109      	bne.n	800f4ce <create_chain+0xe2>
 800f4ba:	683b      	ldr	r3, [r7, #0]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d006      	beq.n	800f4ce <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f4c0:	69fa      	ldr	r2, [r7, #28]
 800f4c2:	6839      	ldr	r1, [r7, #0]
 800f4c4:	6938      	ldr	r0, [r7, #16]
 800f4c6:	f7ff fe10 	bl	800f0ea <put_fat>
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f4ce:	7dfb      	ldrb	r3, [r7, #23]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d116      	bne.n	800f502 <create_chain+0x116>
		fs->last_clst = ncl;
 800f4d4:	693b      	ldr	r3, [r7, #16]
 800f4d6:	69fa      	ldr	r2, [r7, #28]
 800f4d8:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f4da:	693b      	ldr	r3, [r7, #16]
 800f4dc:	695a      	ldr	r2, [r3, #20]
 800f4de:	693b      	ldr	r3, [r7, #16]
 800f4e0:	699b      	ldr	r3, [r3, #24]
 800f4e2:	3b02      	subs	r3, #2
 800f4e4:	429a      	cmp	r2, r3
 800f4e6:	d804      	bhi.n	800f4f2 <create_chain+0x106>
 800f4e8:	693b      	ldr	r3, [r7, #16]
 800f4ea:	695b      	ldr	r3, [r3, #20]
 800f4ec:	1e5a      	subs	r2, r3, #1
 800f4ee:	693b      	ldr	r3, [r7, #16]
 800f4f0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800f4f2:	693b      	ldr	r3, [r7, #16]
 800f4f4:	791b      	ldrb	r3, [r3, #4]
 800f4f6:	f043 0301 	orr.w	r3, r3, #1
 800f4fa:	b2da      	uxtb	r2, r3
 800f4fc:	693b      	ldr	r3, [r7, #16]
 800f4fe:	711a      	strb	r2, [r3, #4]
 800f500:	e007      	b.n	800f512 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f502:	7dfb      	ldrb	r3, [r7, #23]
 800f504:	2b01      	cmp	r3, #1
 800f506:	d102      	bne.n	800f50e <create_chain+0x122>
 800f508:	f04f 33ff 	mov.w	r3, #4294967295
 800f50c:	e000      	b.n	800f510 <create_chain+0x124>
 800f50e:	2301      	movs	r3, #1
 800f510:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f512:	69fb      	ldr	r3, [r7, #28]
}
 800f514:	4618      	mov	r0, r3
 800f516:	3720      	adds	r7, #32
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd80      	pop	{r7, pc}

0800f51c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f51c:	b480      	push	{r7}
 800f51e:	b087      	sub	sp, #28
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
 800f524:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f530:	3304      	adds	r3, #4
 800f532:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	899b      	ldrh	r3, [r3, #12]
 800f538:	461a      	mov	r2, r3
 800f53a:	683b      	ldr	r3, [r7, #0]
 800f53c:	fbb3 f3f2 	udiv	r3, r3, r2
 800f540:	68fa      	ldr	r2, [r7, #12]
 800f542:	8952      	ldrh	r2, [r2, #10]
 800f544:	fbb3 f3f2 	udiv	r3, r3, r2
 800f548:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f54a:	693b      	ldr	r3, [r7, #16]
 800f54c:	1d1a      	adds	r2, r3, #4
 800f54e:	613a      	str	r2, [r7, #16]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f554:	68bb      	ldr	r3, [r7, #8]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d101      	bne.n	800f55e <clmt_clust+0x42>
 800f55a:	2300      	movs	r3, #0
 800f55c:	e010      	b.n	800f580 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800f55e:	697a      	ldr	r2, [r7, #20]
 800f560:	68bb      	ldr	r3, [r7, #8]
 800f562:	429a      	cmp	r2, r3
 800f564:	d307      	bcc.n	800f576 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800f566:	697a      	ldr	r2, [r7, #20]
 800f568:	68bb      	ldr	r3, [r7, #8]
 800f56a:	1ad3      	subs	r3, r2, r3
 800f56c:	617b      	str	r3, [r7, #20]
 800f56e:	693b      	ldr	r3, [r7, #16]
 800f570:	3304      	adds	r3, #4
 800f572:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f574:	e7e9      	b.n	800f54a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800f576:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f578:	693b      	ldr	r3, [r7, #16]
 800f57a:	681a      	ldr	r2, [r3, #0]
 800f57c:	697b      	ldr	r3, [r7, #20]
 800f57e:	4413      	add	r3, r2
}
 800f580:	4618      	mov	r0, r3
 800f582:	371c      	adds	r7, #28
 800f584:	46bd      	mov	sp, r7
 800f586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58a:	4770      	bx	lr

0800f58c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f58c:	b580      	push	{r7, lr}
 800f58e:	b086      	sub	sp, #24
 800f590:	af00      	add	r7, sp, #0
 800f592:	6078      	str	r0, [r7, #4]
 800f594:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f59c:	683b      	ldr	r3, [r7, #0]
 800f59e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f5a2:	d204      	bcs.n	800f5ae <dir_sdi+0x22>
 800f5a4:	683b      	ldr	r3, [r7, #0]
 800f5a6:	f003 031f 	and.w	r3, r3, #31
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d001      	beq.n	800f5b2 <dir_sdi+0x26>
		return FR_INT_ERR;
 800f5ae:	2302      	movs	r3, #2
 800f5b0:	e071      	b.n	800f696 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	683a      	ldr	r2, [r7, #0]
 800f5b6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	689b      	ldr	r3, [r3, #8]
 800f5bc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f5be:	697b      	ldr	r3, [r7, #20]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d106      	bne.n	800f5d2 <dir_sdi+0x46>
 800f5c4:	693b      	ldr	r3, [r7, #16]
 800f5c6:	781b      	ldrb	r3, [r3, #0]
 800f5c8:	2b02      	cmp	r3, #2
 800f5ca:	d902      	bls.n	800f5d2 <dir_sdi+0x46>
		clst = fs->dirbase;
 800f5cc:	693b      	ldr	r3, [r7, #16]
 800f5ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5d0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f5d2:	697b      	ldr	r3, [r7, #20]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d10c      	bne.n	800f5f2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f5d8:	683b      	ldr	r3, [r7, #0]
 800f5da:	095b      	lsrs	r3, r3, #5
 800f5dc:	693a      	ldr	r2, [r7, #16]
 800f5de:	8912      	ldrh	r2, [r2, #8]
 800f5e0:	4293      	cmp	r3, r2
 800f5e2:	d301      	bcc.n	800f5e8 <dir_sdi+0x5c>
 800f5e4:	2302      	movs	r3, #2
 800f5e6:	e056      	b.n	800f696 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800f5e8:	693b      	ldr	r3, [r7, #16]
 800f5ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	61da      	str	r2, [r3, #28]
 800f5f0:	e02d      	b.n	800f64e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f5f2:	693b      	ldr	r3, [r7, #16]
 800f5f4:	895b      	ldrh	r3, [r3, #10]
 800f5f6:	461a      	mov	r2, r3
 800f5f8:	693b      	ldr	r3, [r7, #16]
 800f5fa:	899b      	ldrh	r3, [r3, #12]
 800f5fc:	fb02 f303 	mul.w	r3, r2, r3
 800f600:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f602:	e019      	b.n	800f638 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	6979      	ldr	r1, [r7, #20]
 800f608:	4618      	mov	r0, r3
 800f60a:	f7ff fc9a 	bl	800ef42 <get_fat>
 800f60e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f610:	697b      	ldr	r3, [r7, #20]
 800f612:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f616:	d101      	bne.n	800f61c <dir_sdi+0x90>
 800f618:	2301      	movs	r3, #1
 800f61a:	e03c      	b.n	800f696 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f61c:	697b      	ldr	r3, [r7, #20]
 800f61e:	2b01      	cmp	r3, #1
 800f620:	d904      	bls.n	800f62c <dir_sdi+0xa0>
 800f622:	693b      	ldr	r3, [r7, #16]
 800f624:	699b      	ldr	r3, [r3, #24]
 800f626:	697a      	ldr	r2, [r7, #20]
 800f628:	429a      	cmp	r2, r3
 800f62a:	d301      	bcc.n	800f630 <dir_sdi+0xa4>
 800f62c:	2302      	movs	r3, #2
 800f62e:	e032      	b.n	800f696 <dir_sdi+0x10a>
			ofs -= csz;
 800f630:	683a      	ldr	r2, [r7, #0]
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	1ad3      	subs	r3, r2, r3
 800f636:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f638:	683a      	ldr	r2, [r7, #0]
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	429a      	cmp	r2, r3
 800f63e:	d2e1      	bcs.n	800f604 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800f640:	6979      	ldr	r1, [r7, #20]
 800f642:	6938      	ldr	r0, [r7, #16]
 800f644:	f7ff fc5e 	bl	800ef04 <clust2sect>
 800f648:	4602      	mov	r2, r0
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	697a      	ldr	r2, [r7, #20]
 800f652:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	69db      	ldr	r3, [r3, #28]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d101      	bne.n	800f660 <dir_sdi+0xd4>
 800f65c:	2302      	movs	r3, #2
 800f65e:	e01a      	b.n	800f696 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	69da      	ldr	r2, [r3, #28]
 800f664:	693b      	ldr	r3, [r7, #16]
 800f666:	899b      	ldrh	r3, [r3, #12]
 800f668:	4619      	mov	r1, r3
 800f66a:	683b      	ldr	r3, [r7, #0]
 800f66c:	fbb3 f3f1 	udiv	r3, r3, r1
 800f670:	441a      	add	r2, r3
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f676:	693b      	ldr	r3, [r7, #16]
 800f678:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f67c:	693b      	ldr	r3, [r7, #16]
 800f67e:	899b      	ldrh	r3, [r3, #12]
 800f680:	461a      	mov	r2, r3
 800f682:	683b      	ldr	r3, [r7, #0]
 800f684:	fbb3 f0f2 	udiv	r0, r3, r2
 800f688:	fb00 f202 	mul.w	r2, r0, r2
 800f68c:	1a9b      	subs	r3, r3, r2
 800f68e:	18ca      	adds	r2, r1, r3
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f694:	2300      	movs	r3, #0
}
 800f696:	4618      	mov	r0, r3
 800f698:	3718      	adds	r7, #24
 800f69a:	46bd      	mov	sp, r7
 800f69c:	bd80      	pop	{r7, pc}

0800f69e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f69e:	b580      	push	{r7, lr}
 800f6a0:	b086      	sub	sp, #24
 800f6a2:	af00      	add	r7, sp, #0
 800f6a4:	6078      	str	r0, [r7, #4]
 800f6a6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	695b      	ldr	r3, [r3, #20]
 800f6b2:	3320      	adds	r3, #32
 800f6b4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	69db      	ldr	r3, [r3, #28]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d003      	beq.n	800f6c6 <dir_next+0x28>
 800f6be:	68bb      	ldr	r3, [r7, #8]
 800f6c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f6c4:	d301      	bcc.n	800f6ca <dir_next+0x2c>
 800f6c6:	2304      	movs	r3, #4
 800f6c8:	e0bb      	b.n	800f842 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	899b      	ldrh	r3, [r3, #12]
 800f6ce:	461a      	mov	r2, r3
 800f6d0:	68bb      	ldr	r3, [r7, #8]
 800f6d2:	fbb3 f1f2 	udiv	r1, r3, r2
 800f6d6:	fb01 f202 	mul.w	r2, r1, r2
 800f6da:	1a9b      	subs	r3, r3, r2
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	f040 809d 	bne.w	800f81c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	69db      	ldr	r3, [r3, #28]
 800f6e6:	1c5a      	adds	r2, r3, #1
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	699b      	ldr	r3, [r3, #24]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d10b      	bne.n	800f70c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f6f4:	68bb      	ldr	r3, [r7, #8]
 800f6f6:	095b      	lsrs	r3, r3, #5
 800f6f8:	68fa      	ldr	r2, [r7, #12]
 800f6fa:	8912      	ldrh	r2, [r2, #8]
 800f6fc:	4293      	cmp	r3, r2
 800f6fe:	f0c0 808d 	bcc.w	800f81c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	2200      	movs	r2, #0
 800f706:	61da      	str	r2, [r3, #28]
 800f708:	2304      	movs	r3, #4
 800f70a:	e09a      	b.n	800f842 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	899b      	ldrh	r3, [r3, #12]
 800f710:	461a      	mov	r2, r3
 800f712:	68bb      	ldr	r3, [r7, #8]
 800f714:	fbb3 f3f2 	udiv	r3, r3, r2
 800f718:	68fa      	ldr	r2, [r7, #12]
 800f71a:	8952      	ldrh	r2, [r2, #10]
 800f71c:	3a01      	subs	r2, #1
 800f71e:	4013      	ands	r3, r2
 800f720:	2b00      	cmp	r3, #0
 800f722:	d17b      	bne.n	800f81c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f724:	687a      	ldr	r2, [r7, #4]
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	699b      	ldr	r3, [r3, #24]
 800f72a:	4619      	mov	r1, r3
 800f72c:	4610      	mov	r0, r2
 800f72e:	f7ff fc08 	bl	800ef42 <get_fat>
 800f732:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f734:	697b      	ldr	r3, [r7, #20]
 800f736:	2b01      	cmp	r3, #1
 800f738:	d801      	bhi.n	800f73e <dir_next+0xa0>
 800f73a:	2302      	movs	r3, #2
 800f73c:	e081      	b.n	800f842 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f73e:	697b      	ldr	r3, [r7, #20]
 800f740:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f744:	d101      	bne.n	800f74a <dir_next+0xac>
 800f746:	2301      	movs	r3, #1
 800f748:	e07b      	b.n	800f842 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	699b      	ldr	r3, [r3, #24]
 800f74e:	697a      	ldr	r2, [r7, #20]
 800f750:	429a      	cmp	r2, r3
 800f752:	d359      	bcc.n	800f808 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f754:	683b      	ldr	r3, [r7, #0]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d104      	bne.n	800f764 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	2200      	movs	r2, #0
 800f75e:	61da      	str	r2, [r3, #28]
 800f760:	2304      	movs	r3, #4
 800f762:	e06e      	b.n	800f842 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f764:	687a      	ldr	r2, [r7, #4]
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	699b      	ldr	r3, [r3, #24]
 800f76a:	4619      	mov	r1, r3
 800f76c:	4610      	mov	r0, r2
 800f76e:	f7ff fe3d 	bl	800f3ec <create_chain>
 800f772:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f774:	697b      	ldr	r3, [r7, #20]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d101      	bne.n	800f77e <dir_next+0xe0>
 800f77a:	2307      	movs	r3, #7
 800f77c:	e061      	b.n	800f842 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f77e:	697b      	ldr	r3, [r7, #20]
 800f780:	2b01      	cmp	r3, #1
 800f782:	d101      	bne.n	800f788 <dir_next+0xea>
 800f784:	2302      	movs	r3, #2
 800f786:	e05c      	b.n	800f842 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f788:	697b      	ldr	r3, [r7, #20]
 800f78a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f78e:	d101      	bne.n	800f794 <dir_next+0xf6>
 800f790:	2301      	movs	r3, #1
 800f792:	e056      	b.n	800f842 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f794:	68f8      	ldr	r0, [r7, #12]
 800f796:	f7ff fad3 	bl	800ed40 <sync_window>
 800f79a:	4603      	mov	r3, r0
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d001      	beq.n	800f7a4 <dir_next+0x106>
 800f7a0:	2301      	movs	r3, #1
 800f7a2:	e04e      	b.n	800f842 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	899b      	ldrh	r3, [r3, #12]
 800f7ae:	461a      	mov	r2, r3
 800f7b0:	2100      	movs	r1, #0
 800f7b2:	f7ff f938 	bl	800ea26 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	613b      	str	r3, [r7, #16]
 800f7ba:	6979      	ldr	r1, [r7, #20]
 800f7bc:	68f8      	ldr	r0, [r7, #12]
 800f7be:	f7ff fba1 	bl	800ef04 <clust2sect>
 800f7c2:	4602      	mov	r2, r0
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	631a      	str	r2, [r3, #48]	; 0x30
 800f7c8:	e012      	b.n	800f7f0 <dir_next+0x152>
						fs->wflag = 1;
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	2201      	movs	r2, #1
 800f7ce:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f7d0:	68f8      	ldr	r0, [r7, #12]
 800f7d2:	f7ff fab5 	bl	800ed40 <sync_window>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d001      	beq.n	800f7e0 <dir_next+0x142>
 800f7dc:	2301      	movs	r3, #1
 800f7de:	e030      	b.n	800f842 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f7e0:	693b      	ldr	r3, [r7, #16]
 800f7e2:	3301      	adds	r3, #1
 800f7e4:	613b      	str	r3, [r7, #16]
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7ea:	1c5a      	adds	r2, r3, #1
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	631a      	str	r2, [r3, #48]	; 0x30
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	895b      	ldrh	r3, [r3, #10]
 800f7f4:	461a      	mov	r2, r3
 800f7f6:	693b      	ldr	r3, [r7, #16]
 800f7f8:	4293      	cmp	r3, r2
 800f7fa:	d3e6      	bcc.n	800f7ca <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f800:	693b      	ldr	r3, [r7, #16]
 800f802:	1ad2      	subs	r2, r2, r3
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	697a      	ldr	r2, [r7, #20]
 800f80c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f80e:	6979      	ldr	r1, [r7, #20]
 800f810:	68f8      	ldr	r0, [r7, #12]
 800f812:	f7ff fb77 	bl	800ef04 <clust2sect>
 800f816:	4602      	mov	r2, r0
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	68ba      	ldr	r2, [r7, #8]
 800f820:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	899b      	ldrh	r3, [r3, #12]
 800f82c:	461a      	mov	r2, r3
 800f82e:	68bb      	ldr	r3, [r7, #8]
 800f830:	fbb3 f0f2 	udiv	r0, r3, r2
 800f834:	fb00 f202 	mul.w	r2, r0, r2
 800f838:	1a9b      	subs	r3, r3, r2
 800f83a:	18ca      	adds	r2, r1, r3
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f840:	2300      	movs	r3, #0
}
 800f842:	4618      	mov	r0, r3
 800f844:	3718      	adds	r7, #24
 800f846:	46bd      	mov	sp, r7
 800f848:	bd80      	pop	{r7, pc}

0800f84a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f84a:	b580      	push	{r7, lr}
 800f84c:	b086      	sub	sp, #24
 800f84e:	af00      	add	r7, sp, #0
 800f850:	6078      	str	r0, [r7, #4]
 800f852:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f85a:	2100      	movs	r1, #0
 800f85c:	6878      	ldr	r0, [r7, #4]
 800f85e:	f7ff fe95 	bl	800f58c <dir_sdi>
 800f862:	4603      	mov	r3, r0
 800f864:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f866:	7dfb      	ldrb	r3, [r7, #23]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d12b      	bne.n	800f8c4 <dir_alloc+0x7a>
		n = 0;
 800f86c:	2300      	movs	r3, #0
 800f86e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	69db      	ldr	r3, [r3, #28]
 800f874:	4619      	mov	r1, r3
 800f876:	68f8      	ldr	r0, [r7, #12]
 800f878:	f7ff faa6 	bl	800edc8 <move_window>
 800f87c:	4603      	mov	r3, r0
 800f87e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f880:	7dfb      	ldrb	r3, [r7, #23]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d11d      	bne.n	800f8c2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	6a1b      	ldr	r3, [r3, #32]
 800f88a:	781b      	ldrb	r3, [r3, #0]
 800f88c:	2be5      	cmp	r3, #229	; 0xe5
 800f88e:	d004      	beq.n	800f89a <dir_alloc+0x50>
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	6a1b      	ldr	r3, [r3, #32]
 800f894:	781b      	ldrb	r3, [r3, #0]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d107      	bne.n	800f8aa <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f89a:	693b      	ldr	r3, [r7, #16]
 800f89c:	3301      	adds	r3, #1
 800f89e:	613b      	str	r3, [r7, #16]
 800f8a0:	693a      	ldr	r2, [r7, #16]
 800f8a2:	683b      	ldr	r3, [r7, #0]
 800f8a4:	429a      	cmp	r2, r3
 800f8a6:	d102      	bne.n	800f8ae <dir_alloc+0x64>
 800f8a8:	e00c      	b.n	800f8c4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f8ae:	2101      	movs	r1, #1
 800f8b0:	6878      	ldr	r0, [r7, #4]
 800f8b2:	f7ff fef4 	bl	800f69e <dir_next>
 800f8b6:	4603      	mov	r3, r0
 800f8b8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f8ba:	7dfb      	ldrb	r3, [r7, #23]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d0d7      	beq.n	800f870 <dir_alloc+0x26>
 800f8c0:	e000      	b.n	800f8c4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f8c2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f8c4:	7dfb      	ldrb	r3, [r7, #23]
 800f8c6:	2b04      	cmp	r3, #4
 800f8c8:	d101      	bne.n	800f8ce <dir_alloc+0x84>
 800f8ca:	2307      	movs	r3, #7
 800f8cc:	75fb      	strb	r3, [r7, #23]
	return res;
 800f8ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	3718      	adds	r7, #24
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	bd80      	pop	{r7, pc}

0800f8d8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b084      	sub	sp, #16
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
 800f8e0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f8e2:	683b      	ldr	r3, [r7, #0]
 800f8e4:	331a      	adds	r3, #26
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	f7fe fffa 	bl	800e8e0 <ld_word>
 800f8ec:	4603      	mov	r3, r0
 800f8ee:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	781b      	ldrb	r3, [r3, #0]
 800f8f4:	2b03      	cmp	r3, #3
 800f8f6:	d109      	bne.n	800f90c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	3314      	adds	r3, #20
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	f7fe ffef 	bl	800e8e0 <ld_word>
 800f902:	4603      	mov	r3, r0
 800f904:	041b      	lsls	r3, r3, #16
 800f906:	68fa      	ldr	r2, [r7, #12]
 800f908:	4313      	orrs	r3, r2
 800f90a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f90c:	68fb      	ldr	r3, [r7, #12]
}
 800f90e:	4618      	mov	r0, r3
 800f910:	3710      	adds	r7, #16
 800f912:	46bd      	mov	sp, r7
 800f914:	bd80      	pop	{r7, pc}

0800f916 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f916:	b580      	push	{r7, lr}
 800f918:	b084      	sub	sp, #16
 800f91a:	af00      	add	r7, sp, #0
 800f91c:	60f8      	str	r0, [r7, #12]
 800f91e:	60b9      	str	r1, [r7, #8]
 800f920:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f922:	68bb      	ldr	r3, [r7, #8]
 800f924:	331a      	adds	r3, #26
 800f926:	687a      	ldr	r2, [r7, #4]
 800f928:	b292      	uxth	r2, r2
 800f92a:	4611      	mov	r1, r2
 800f92c:	4618      	mov	r0, r3
 800f92e:	f7ff f812 	bl	800e956 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	781b      	ldrb	r3, [r3, #0]
 800f936:	2b03      	cmp	r3, #3
 800f938:	d109      	bne.n	800f94e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f93a:	68bb      	ldr	r3, [r7, #8]
 800f93c:	f103 0214 	add.w	r2, r3, #20
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	0c1b      	lsrs	r3, r3, #16
 800f944:	b29b      	uxth	r3, r3
 800f946:	4619      	mov	r1, r3
 800f948:	4610      	mov	r0, r2
 800f94a:	f7ff f804 	bl	800e956 <st_word>
	}
}
 800f94e:	bf00      	nop
 800f950:	3710      	adds	r7, #16
 800f952:	46bd      	mov	sp, r7
 800f954:	bd80      	pop	{r7, pc}

0800f956 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f956:	b580      	push	{r7, lr}
 800f958:	b086      	sub	sp, #24
 800f95a:	af00      	add	r7, sp, #0
 800f95c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f964:	2100      	movs	r1, #0
 800f966:	6878      	ldr	r0, [r7, #4]
 800f968:	f7ff fe10 	bl	800f58c <dir_sdi>
 800f96c:	4603      	mov	r3, r0
 800f96e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f970:	7dfb      	ldrb	r3, [r7, #23]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d001      	beq.n	800f97a <dir_find+0x24>
 800f976:	7dfb      	ldrb	r3, [r7, #23]
 800f978:	e03e      	b.n	800f9f8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	69db      	ldr	r3, [r3, #28]
 800f97e:	4619      	mov	r1, r3
 800f980:	6938      	ldr	r0, [r7, #16]
 800f982:	f7ff fa21 	bl	800edc8 <move_window>
 800f986:	4603      	mov	r3, r0
 800f988:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f98a:	7dfb      	ldrb	r3, [r7, #23]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d12f      	bne.n	800f9f0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	6a1b      	ldr	r3, [r3, #32]
 800f994:	781b      	ldrb	r3, [r3, #0]
 800f996:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f998:	7bfb      	ldrb	r3, [r7, #15]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d102      	bne.n	800f9a4 <dir_find+0x4e>
 800f99e:	2304      	movs	r3, #4
 800f9a0:	75fb      	strb	r3, [r7, #23]
 800f9a2:	e028      	b.n	800f9f6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	6a1b      	ldr	r3, [r3, #32]
 800f9a8:	330b      	adds	r3, #11
 800f9aa:	781b      	ldrb	r3, [r3, #0]
 800f9ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f9b0:	b2da      	uxtb	r2, r3
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	6a1b      	ldr	r3, [r3, #32]
 800f9ba:	330b      	adds	r3, #11
 800f9bc:	781b      	ldrb	r3, [r3, #0]
 800f9be:	f003 0308 	and.w	r3, r3, #8
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d10a      	bne.n	800f9dc <dir_find+0x86>
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	6a18      	ldr	r0, [r3, #32]
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	3324      	adds	r3, #36	; 0x24
 800f9ce:	220b      	movs	r2, #11
 800f9d0:	4619      	mov	r1, r3
 800f9d2:	f7ff f843 	bl	800ea5c <mem_cmp>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d00b      	beq.n	800f9f4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f9dc:	2100      	movs	r1, #0
 800f9de:	6878      	ldr	r0, [r7, #4]
 800f9e0:	f7ff fe5d 	bl	800f69e <dir_next>
 800f9e4:	4603      	mov	r3, r0
 800f9e6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f9e8:	7dfb      	ldrb	r3, [r7, #23]
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d0c5      	beq.n	800f97a <dir_find+0x24>
 800f9ee:	e002      	b.n	800f9f6 <dir_find+0xa0>
		if (res != FR_OK) break;
 800f9f0:	bf00      	nop
 800f9f2:	e000      	b.n	800f9f6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f9f4:	bf00      	nop

	return res;
 800f9f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	3718      	adds	r7, #24
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	bd80      	pop	{r7, pc}

0800fa00 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b084      	sub	sp, #16
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800fa0e:	2101      	movs	r1, #1
 800fa10:	6878      	ldr	r0, [r7, #4]
 800fa12:	f7ff ff1a 	bl	800f84a <dir_alloc>
 800fa16:	4603      	mov	r3, r0
 800fa18:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800fa1a:	7bfb      	ldrb	r3, [r7, #15]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d11c      	bne.n	800fa5a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	69db      	ldr	r3, [r3, #28]
 800fa24:	4619      	mov	r1, r3
 800fa26:	68b8      	ldr	r0, [r7, #8]
 800fa28:	f7ff f9ce 	bl	800edc8 <move_window>
 800fa2c:	4603      	mov	r3, r0
 800fa2e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800fa30:	7bfb      	ldrb	r3, [r7, #15]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d111      	bne.n	800fa5a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	6a1b      	ldr	r3, [r3, #32]
 800fa3a:	2220      	movs	r2, #32
 800fa3c:	2100      	movs	r1, #0
 800fa3e:	4618      	mov	r0, r3
 800fa40:	f7fe fff1 	bl	800ea26 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	6a18      	ldr	r0, [r3, #32]
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	3324      	adds	r3, #36	; 0x24
 800fa4c:	220b      	movs	r2, #11
 800fa4e:	4619      	mov	r1, r3
 800fa50:	f7fe ffc8 	bl	800e9e4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800fa54:	68bb      	ldr	r3, [r7, #8]
 800fa56:	2201      	movs	r2, #1
 800fa58:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800fa5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	3710      	adds	r7, #16
 800fa60:	46bd      	mov	sp, r7
 800fa62:	bd80      	pop	{r7, pc}

0800fa64 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b086      	sub	sp, #24
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
 800fa6c:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800fa6e:	683b      	ldr	r3, [r7, #0]
 800fa70:	2200      	movs	r2, #0
 800fa72:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	69db      	ldr	r3, [r3, #28]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d04e      	beq.n	800fb1a <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800fa7c:	2300      	movs	r3, #0
 800fa7e:	613b      	str	r3, [r7, #16]
 800fa80:	693b      	ldr	r3, [r7, #16]
 800fa82:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800fa84:	e021      	b.n	800faca <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	6a1a      	ldr	r2, [r3, #32]
 800fa8a:	697b      	ldr	r3, [r7, #20]
 800fa8c:	1c59      	adds	r1, r3, #1
 800fa8e:	6179      	str	r1, [r7, #20]
 800fa90:	4413      	add	r3, r2
 800fa92:	781b      	ldrb	r3, [r3, #0]
 800fa94:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800fa96:	7bfb      	ldrb	r3, [r7, #15]
 800fa98:	2b20      	cmp	r3, #32
 800fa9a:	d100      	bne.n	800fa9e <get_fileinfo+0x3a>
 800fa9c:	e015      	b.n	800faca <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800fa9e:	7bfb      	ldrb	r3, [r7, #15]
 800faa0:	2b05      	cmp	r3, #5
 800faa2:	d101      	bne.n	800faa8 <get_fileinfo+0x44>
 800faa4:	23e5      	movs	r3, #229	; 0xe5
 800faa6:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800faa8:	697b      	ldr	r3, [r7, #20]
 800faaa:	2b09      	cmp	r3, #9
 800faac:	d106      	bne.n	800fabc <get_fileinfo+0x58>
 800faae:	693b      	ldr	r3, [r7, #16]
 800fab0:	1c5a      	adds	r2, r3, #1
 800fab2:	613a      	str	r2, [r7, #16]
 800fab4:	683a      	ldr	r2, [r7, #0]
 800fab6:	4413      	add	r3, r2
 800fab8:	222e      	movs	r2, #46	; 0x2e
 800faba:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800fabc:	693b      	ldr	r3, [r7, #16]
 800fabe:	1c5a      	adds	r2, r3, #1
 800fac0:	613a      	str	r2, [r7, #16]
 800fac2:	683a      	ldr	r2, [r7, #0]
 800fac4:	4413      	add	r3, r2
 800fac6:	7bfa      	ldrb	r2, [r7, #15]
 800fac8:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800faca:	697b      	ldr	r3, [r7, #20]
 800facc:	2b0a      	cmp	r3, #10
 800face:	d9da      	bls.n	800fa86 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800fad0:	683a      	ldr	r2, [r7, #0]
 800fad2:	693b      	ldr	r3, [r7, #16]
 800fad4:	4413      	add	r3, r2
 800fad6:	3309      	adds	r3, #9
 800fad8:	2200      	movs	r2, #0
 800fada:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	6a1b      	ldr	r3, [r3, #32]
 800fae0:	7ada      	ldrb	r2, [r3, #11]
 800fae2:	683b      	ldr	r3, [r7, #0]
 800fae4:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	6a1b      	ldr	r3, [r3, #32]
 800faea:	331c      	adds	r3, #28
 800faec:	4618      	mov	r0, r3
 800faee:	f7fe ff0f 	bl	800e910 <ld_dword>
 800faf2:	4602      	mov	r2, r0
 800faf4:	683b      	ldr	r3, [r7, #0]
 800faf6:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	6a1b      	ldr	r3, [r3, #32]
 800fafc:	3316      	adds	r3, #22
 800fafe:	4618      	mov	r0, r3
 800fb00:	f7fe ff06 	bl	800e910 <ld_dword>
 800fb04:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800fb06:	68bb      	ldr	r3, [r7, #8]
 800fb08:	b29a      	uxth	r2, r3
 800fb0a:	683b      	ldr	r3, [r7, #0]
 800fb0c:	80da      	strh	r2, [r3, #6]
 800fb0e:	68bb      	ldr	r3, [r7, #8]
 800fb10:	0c1b      	lsrs	r3, r3, #16
 800fb12:	b29a      	uxth	r2, r3
 800fb14:	683b      	ldr	r3, [r7, #0]
 800fb16:	809a      	strh	r2, [r3, #4]
 800fb18:	e000      	b.n	800fb1c <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800fb1a:	bf00      	nop
}
 800fb1c:	3718      	adds	r7, #24
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	bd80      	pop	{r7, pc}
	...

0800fb24 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b088      	sub	sp, #32
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
 800fb2c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800fb2e:	683b      	ldr	r3, [r7, #0]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	60fb      	str	r3, [r7, #12]
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	3324      	adds	r3, #36	; 0x24
 800fb38:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800fb3a:	220b      	movs	r2, #11
 800fb3c:	2120      	movs	r1, #32
 800fb3e:	68b8      	ldr	r0, [r7, #8]
 800fb40:	f7fe ff71 	bl	800ea26 <mem_set>
	si = i = 0; ni = 8;
 800fb44:	2300      	movs	r3, #0
 800fb46:	613b      	str	r3, [r7, #16]
 800fb48:	693b      	ldr	r3, [r7, #16]
 800fb4a:	61fb      	str	r3, [r7, #28]
 800fb4c:	2308      	movs	r3, #8
 800fb4e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800fb50:	69fb      	ldr	r3, [r7, #28]
 800fb52:	1c5a      	adds	r2, r3, #1
 800fb54:	61fa      	str	r2, [r7, #28]
 800fb56:	68fa      	ldr	r2, [r7, #12]
 800fb58:	4413      	add	r3, r2
 800fb5a:	781b      	ldrb	r3, [r3, #0]
 800fb5c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800fb5e:	7efb      	ldrb	r3, [r7, #27]
 800fb60:	2b20      	cmp	r3, #32
 800fb62:	d94e      	bls.n	800fc02 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800fb64:	7efb      	ldrb	r3, [r7, #27]
 800fb66:	2b2f      	cmp	r3, #47	; 0x2f
 800fb68:	d006      	beq.n	800fb78 <create_name+0x54>
 800fb6a:	7efb      	ldrb	r3, [r7, #27]
 800fb6c:	2b5c      	cmp	r3, #92	; 0x5c
 800fb6e:	d110      	bne.n	800fb92 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800fb70:	e002      	b.n	800fb78 <create_name+0x54>
 800fb72:	69fb      	ldr	r3, [r7, #28]
 800fb74:	3301      	adds	r3, #1
 800fb76:	61fb      	str	r3, [r7, #28]
 800fb78:	68fa      	ldr	r2, [r7, #12]
 800fb7a:	69fb      	ldr	r3, [r7, #28]
 800fb7c:	4413      	add	r3, r2
 800fb7e:	781b      	ldrb	r3, [r3, #0]
 800fb80:	2b2f      	cmp	r3, #47	; 0x2f
 800fb82:	d0f6      	beq.n	800fb72 <create_name+0x4e>
 800fb84:	68fa      	ldr	r2, [r7, #12]
 800fb86:	69fb      	ldr	r3, [r7, #28]
 800fb88:	4413      	add	r3, r2
 800fb8a:	781b      	ldrb	r3, [r3, #0]
 800fb8c:	2b5c      	cmp	r3, #92	; 0x5c
 800fb8e:	d0f0      	beq.n	800fb72 <create_name+0x4e>
			break;
 800fb90:	e038      	b.n	800fc04 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800fb92:	7efb      	ldrb	r3, [r7, #27]
 800fb94:	2b2e      	cmp	r3, #46	; 0x2e
 800fb96:	d003      	beq.n	800fba0 <create_name+0x7c>
 800fb98:	693a      	ldr	r2, [r7, #16]
 800fb9a:	697b      	ldr	r3, [r7, #20]
 800fb9c:	429a      	cmp	r2, r3
 800fb9e:	d30c      	bcc.n	800fbba <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800fba0:	697b      	ldr	r3, [r7, #20]
 800fba2:	2b0b      	cmp	r3, #11
 800fba4:	d002      	beq.n	800fbac <create_name+0x88>
 800fba6:	7efb      	ldrb	r3, [r7, #27]
 800fba8:	2b2e      	cmp	r3, #46	; 0x2e
 800fbaa:	d001      	beq.n	800fbb0 <create_name+0x8c>
 800fbac:	2306      	movs	r3, #6
 800fbae:	e044      	b.n	800fc3a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800fbb0:	2308      	movs	r3, #8
 800fbb2:	613b      	str	r3, [r7, #16]
 800fbb4:	230b      	movs	r3, #11
 800fbb6:	617b      	str	r3, [r7, #20]
			continue;
 800fbb8:	e022      	b.n	800fc00 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800fbba:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	da04      	bge.n	800fbcc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800fbc2:	7efb      	ldrb	r3, [r7, #27]
 800fbc4:	3b80      	subs	r3, #128	; 0x80
 800fbc6:	4a1f      	ldr	r2, [pc, #124]	; (800fc44 <create_name+0x120>)
 800fbc8:	5cd3      	ldrb	r3, [r2, r3]
 800fbca:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800fbcc:	7efb      	ldrb	r3, [r7, #27]
 800fbce:	4619      	mov	r1, r3
 800fbd0:	481d      	ldr	r0, [pc, #116]	; (800fc48 <create_name+0x124>)
 800fbd2:	f7fe ff6a 	bl	800eaaa <chk_chr>
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d001      	beq.n	800fbe0 <create_name+0xbc>
 800fbdc:	2306      	movs	r3, #6
 800fbde:	e02c      	b.n	800fc3a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800fbe0:	7efb      	ldrb	r3, [r7, #27]
 800fbe2:	2b60      	cmp	r3, #96	; 0x60
 800fbe4:	d905      	bls.n	800fbf2 <create_name+0xce>
 800fbe6:	7efb      	ldrb	r3, [r7, #27]
 800fbe8:	2b7a      	cmp	r3, #122	; 0x7a
 800fbea:	d802      	bhi.n	800fbf2 <create_name+0xce>
 800fbec:	7efb      	ldrb	r3, [r7, #27]
 800fbee:	3b20      	subs	r3, #32
 800fbf0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800fbf2:	693b      	ldr	r3, [r7, #16]
 800fbf4:	1c5a      	adds	r2, r3, #1
 800fbf6:	613a      	str	r2, [r7, #16]
 800fbf8:	68ba      	ldr	r2, [r7, #8]
 800fbfa:	4413      	add	r3, r2
 800fbfc:	7efa      	ldrb	r2, [r7, #27]
 800fbfe:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800fc00:	e7a6      	b.n	800fb50 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800fc02:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800fc04:	68fa      	ldr	r2, [r7, #12]
 800fc06:	69fb      	ldr	r3, [r7, #28]
 800fc08:	441a      	add	r2, r3
 800fc0a:	683b      	ldr	r3, [r7, #0]
 800fc0c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800fc0e:	693b      	ldr	r3, [r7, #16]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d101      	bne.n	800fc18 <create_name+0xf4>
 800fc14:	2306      	movs	r3, #6
 800fc16:	e010      	b.n	800fc3a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800fc18:	68bb      	ldr	r3, [r7, #8]
 800fc1a:	781b      	ldrb	r3, [r3, #0]
 800fc1c:	2be5      	cmp	r3, #229	; 0xe5
 800fc1e:	d102      	bne.n	800fc26 <create_name+0x102>
 800fc20:	68bb      	ldr	r3, [r7, #8]
 800fc22:	2205      	movs	r2, #5
 800fc24:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800fc26:	7efb      	ldrb	r3, [r7, #27]
 800fc28:	2b20      	cmp	r3, #32
 800fc2a:	d801      	bhi.n	800fc30 <create_name+0x10c>
 800fc2c:	2204      	movs	r2, #4
 800fc2e:	e000      	b.n	800fc32 <create_name+0x10e>
 800fc30:	2200      	movs	r2, #0
 800fc32:	68bb      	ldr	r3, [r7, #8]
 800fc34:	330b      	adds	r3, #11
 800fc36:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800fc38:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	3720      	adds	r7, #32
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	bd80      	pop	{r7, pc}
 800fc42:	bf00      	nop
 800fc44:	080176e8 	.word	0x080176e8
 800fc48:	08017670 	.word	0x08017670

0800fc4c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b086      	sub	sp, #24
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]
 800fc54:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800fc5a:	693b      	ldr	r3, [r7, #16]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800fc60:	e002      	b.n	800fc68 <follow_path+0x1c>
 800fc62:	683b      	ldr	r3, [r7, #0]
 800fc64:	3301      	adds	r3, #1
 800fc66:	603b      	str	r3, [r7, #0]
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	781b      	ldrb	r3, [r3, #0]
 800fc6c:	2b2f      	cmp	r3, #47	; 0x2f
 800fc6e:	d0f8      	beq.n	800fc62 <follow_path+0x16>
 800fc70:	683b      	ldr	r3, [r7, #0]
 800fc72:	781b      	ldrb	r3, [r3, #0]
 800fc74:	2b5c      	cmp	r3, #92	; 0x5c
 800fc76:	d0f4      	beq.n	800fc62 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800fc78:	693b      	ldr	r3, [r7, #16]
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800fc7e:	683b      	ldr	r3, [r7, #0]
 800fc80:	781b      	ldrb	r3, [r3, #0]
 800fc82:	2b1f      	cmp	r3, #31
 800fc84:	d80a      	bhi.n	800fc9c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	2280      	movs	r2, #128	; 0x80
 800fc8a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800fc8e:	2100      	movs	r1, #0
 800fc90:	6878      	ldr	r0, [r7, #4]
 800fc92:	f7ff fc7b 	bl	800f58c <dir_sdi>
 800fc96:	4603      	mov	r3, r0
 800fc98:	75fb      	strb	r3, [r7, #23]
 800fc9a:	e048      	b.n	800fd2e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fc9c:	463b      	mov	r3, r7
 800fc9e:	4619      	mov	r1, r3
 800fca0:	6878      	ldr	r0, [r7, #4]
 800fca2:	f7ff ff3f 	bl	800fb24 <create_name>
 800fca6:	4603      	mov	r3, r0
 800fca8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fcaa:	7dfb      	ldrb	r3, [r7, #23]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d139      	bne.n	800fd24 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800fcb0:	6878      	ldr	r0, [r7, #4]
 800fcb2:	f7ff fe50 	bl	800f956 <dir_find>
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fcc0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800fcc2:	7dfb      	ldrb	r3, [r7, #23]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d00a      	beq.n	800fcde <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800fcc8:	7dfb      	ldrb	r3, [r7, #23]
 800fcca:	2b04      	cmp	r3, #4
 800fccc:	d12c      	bne.n	800fd28 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800fcce:	7afb      	ldrb	r3, [r7, #11]
 800fcd0:	f003 0304 	and.w	r3, r3, #4
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d127      	bne.n	800fd28 <follow_path+0xdc>
 800fcd8:	2305      	movs	r3, #5
 800fcda:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800fcdc:	e024      	b.n	800fd28 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fcde:	7afb      	ldrb	r3, [r7, #11]
 800fce0:	f003 0304 	and.w	r3, r3, #4
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d121      	bne.n	800fd2c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800fce8:	693b      	ldr	r3, [r7, #16]
 800fcea:	799b      	ldrb	r3, [r3, #6]
 800fcec:	f003 0310 	and.w	r3, r3, #16
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d102      	bne.n	800fcfa <follow_path+0xae>
				res = FR_NO_PATH; break;
 800fcf4:	2305      	movs	r3, #5
 800fcf6:	75fb      	strb	r3, [r7, #23]
 800fcf8:	e019      	b.n	800fd2e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	695b      	ldr	r3, [r3, #20]
 800fd04:	68fa      	ldr	r2, [r7, #12]
 800fd06:	8992      	ldrh	r2, [r2, #12]
 800fd08:	fbb3 f0f2 	udiv	r0, r3, r2
 800fd0c:	fb00 f202 	mul.w	r2, r0, r2
 800fd10:	1a9b      	subs	r3, r3, r2
 800fd12:	440b      	add	r3, r1
 800fd14:	4619      	mov	r1, r3
 800fd16:	68f8      	ldr	r0, [r7, #12]
 800fd18:	f7ff fdde 	bl	800f8d8 <ld_clust>
 800fd1c:	4602      	mov	r2, r0
 800fd1e:	693b      	ldr	r3, [r7, #16]
 800fd20:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fd22:	e7bb      	b.n	800fc9c <follow_path+0x50>
			if (res != FR_OK) break;
 800fd24:	bf00      	nop
 800fd26:	e002      	b.n	800fd2e <follow_path+0xe2>
				break;
 800fd28:	bf00      	nop
 800fd2a:	e000      	b.n	800fd2e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fd2c:	bf00      	nop
			}
		}
	}

	return res;
 800fd2e:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd30:	4618      	mov	r0, r3
 800fd32:	3718      	adds	r7, #24
 800fd34:	46bd      	mov	sp, r7
 800fd36:	bd80      	pop	{r7, pc}

0800fd38 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800fd38:	b480      	push	{r7}
 800fd3a:	b087      	sub	sp, #28
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800fd40:	f04f 33ff 	mov.w	r3, #4294967295
 800fd44:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d031      	beq.n	800fdb2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	617b      	str	r3, [r7, #20]
 800fd54:	e002      	b.n	800fd5c <get_ldnumber+0x24>
 800fd56:	697b      	ldr	r3, [r7, #20]
 800fd58:	3301      	adds	r3, #1
 800fd5a:	617b      	str	r3, [r7, #20]
 800fd5c:	697b      	ldr	r3, [r7, #20]
 800fd5e:	781b      	ldrb	r3, [r3, #0]
 800fd60:	2b20      	cmp	r3, #32
 800fd62:	d903      	bls.n	800fd6c <get_ldnumber+0x34>
 800fd64:	697b      	ldr	r3, [r7, #20]
 800fd66:	781b      	ldrb	r3, [r3, #0]
 800fd68:	2b3a      	cmp	r3, #58	; 0x3a
 800fd6a:	d1f4      	bne.n	800fd56 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800fd6c:	697b      	ldr	r3, [r7, #20]
 800fd6e:	781b      	ldrb	r3, [r3, #0]
 800fd70:	2b3a      	cmp	r3, #58	; 0x3a
 800fd72:	d11c      	bne.n	800fdae <get_ldnumber+0x76>
			tp = *path;
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	1c5a      	adds	r2, r3, #1
 800fd7e:	60fa      	str	r2, [r7, #12]
 800fd80:	781b      	ldrb	r3, [r3, #0]
 800fd82:	3b30      	subs	r3, #48	; 0x30
 800fd84:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800fd86:	68bb      	ldr	r3, [r7, #8]
 800fd88:	2b09      	cmp	r3, #9
 800fd8a:	d80e      	bhi.n	800fdaa <get_ldnumber+0x72>
 800fd8c:	68fa      	ldr	r2, [r7, #12]
 800fd8e:	697b      	ldr	r3, [r7, #20]
 800fd90:	429a      	cmp	r2, r3
 800fd92:	d10a      	bne.n	800fdaa <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800fd94:	68bb      	ldr	r3, [r7, #8]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d107      	bne.n	800fdaa <get_ldnumber+0x72>
					vol = (int)i;
 800fd9a:	68bb      	ldr	r3, [r7, #8]
 800fd9c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800fd9e:	697b      	ldr	r3, [r7, #20]
 800fda0:	3301      	adds	r3, #1
 800fda2:	617b      	str	r3, [r7, #20]
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	697a      	ldr	r2, [r7, #20]
 800fda8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800fdaa:	693b      	ldr	r3, [r7, #16]
 800fdac:	e002      	b.n	800fdb4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800fdae:	2300      	movs	r3, #0
 800fdb0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800fdb2:	693b      	ldr	r3, [r7, #16]
}
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	371c      	adds	r7, #28
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdbe:	4770      	bx	lr

0800fdc0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	b082      	sub	sp, #8
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	6078      	str	r0, [r7, #4]
 800fdc8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	2200      	movs	r2, #0
 800fdce:	70da      	strb	r2, [r3, #3]
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	f04f 32ff 	mov.w	r2, #4294967295
 800fdd6:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800fdd8:	6839      	ldr	r1, [r7, #0]
 800fdda:	6878      	ldr	r0, [r7, #4]
 800fddc:	f7fe fff4 	bl	800edc8 <move_window>
 800fde0:	4603      	mov	r3, r0
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d001      	beq.n	800fdea <check_fs+0x2a>
 800fde6:	2304      	movs	r3, #4
 800fde8:	e038      	b.n	800fe5c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	3334      	adds	r3, #52	; 0x34
 800fdee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	f7fe fd74 	bl	800e8e0 <ld_word>
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	461a      	mov	r2, r3
 800fdfc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fe00:	429a      	cmp	r2, r3
 800fe02:	d001      	beq.n	800fe08 <check_fs+0x48>
 800fe04:	2303      	movs	r3, #3
 800fe06:	e029      	b.n	800fe5c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fe0e:	2be9      	cmp	r3, #233	; 0xe9
 800fe10:	d009      	beq.n	800fe26 <check_fs+0x66>
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fe18:	2beb      	cmp	r3, #235	; 0xeb
 800fe1a:	d11e      	bne.n	800fe5a <check_fs+0x9a>
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800fe22:	2b90      	cmp	r3, #144	; 0x90
 800fe24:	d119      	bne.n	800fe5a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	3334      	adds	r3, #52	; 0x34
 800fe2a:	3336      	adds	r3, #54	; 0x36
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	f7fe fd6f 	bl	800e910 <ld_dword>
 800fe32:	4603      	mov	r3, r0
 800fe34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fe38:	4a0a      	ldr	r2, [pc, #40]	; (800fe64 <check_fs+0xa4>)
 800fe3a:	4293      	cmp	r3, r2
 800fe3c:	d101      	bne.n	800fe42 <check_fs+0x82>
 800fe3e:	2300      	movs	r3, #0
 800fe40:	e00c      	b.n	800fe5c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	3334      	adds	r3, #52	; 0x34
 800fe46:	3352      	adds	r3, #82	; 0x52
 800fe48:	4618      	mov	r0, r3
 800fe4a:	f7fe fd61 	bl	800e910 <ld_dword>
 800fe4e:	4603      	mov	r3, r0
 800fe50:	4a05      	ldr	r2, [pc, #20]	; (800fe68 <check_fs+0xa8>)
 800fe52:	4293      	cmp	r3, r2
 800fe54:	d101      	bne.n	800fe5a <check_fs+0x9a>
 800fe56:	2300      	movs	r3, #0
 800fe58:	e000      	b.n	800fe5c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800fe5a:	2302      	movs	r3, #2
}
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	3708      	adds	r7, #8
 800fe60:	46bd      	mov	sp, r7
 800fe62:	bd80      	pop	{r7, pc}
 800fe64:	00544146 	.word	0x00544146
 800fe68:	33544146 	.word	0x33544146

0800fe6c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	b096      	sub	sp, #88	; 0x58
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	60f8      	str	r0, [r7, #12]
 800fe74:	60b9      	str	r1, [r7, #8]
 800fe76:	4613      	mov	r3, r2
 800fe78:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800fe7a:	68bb      	ldr	r3, [r7, #8]
 800fe7c:	2200      	movs	r2, #0
 800fe7e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800fe80:	68f8      	ldr	r0, [r7, #12]
 800fe82:	f7ff ff59 	bl	800fd38 <get_ldnumber>
 800fe86:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800fe88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	da01      	bge.n	800fe92 <find_volume+0x26>
 800fe8e:	230b      	movs	r3, #11
 800fe90:	e262      	b.n	8010358 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800fe92:	4a9f      	ldr	r2, [pc, #636]	; (8010110 <find_volume+0x2a4>)
 800fe94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe9a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800fe9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d101      	bne.n	800fea6 <find_volume+0x3a>
 800fea2:	230c      	movs	r3, #12
 800fea4:	e258      	b.n	8010358 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800fea6:	68bb      	ldr	r3, [r7, #8]
 800fea8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800feaa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800feac:	79fb      	ldrb	r3, [r7, #7]
 800feae:	f023 0301 	bic.w	r3, r3, #1
 800feb2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800feb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feb6:	781b      	ldrb	r3, [r3, #0]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d01a      	beq.n	800fef2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800febc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800febe:	785b      	ldrb	r3, [r3, #1]
 800fec0:	4618      	mov	r0, r3
 800fec2:	f7fe fc6f 	bl	800e7a4 <disk_status>
 800fec6:	4603      	mov	r3, r0
 800fec8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800fecc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fed0:	f003 0301 	and.w	r3, r3, #1
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d10c      	bne.n	800fef2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800fed8:	79fb      	ldrb	r3, [r7, #7]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d007      	beq.n	800feee <find_volume+0x82>
 800fede:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fee2:	f003 0304 	and.w	r3, r3, #4
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d001      	beq.n	800feee <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800feea:	230a      	movs	r3, #10
 800feec:	e234      	b.n	8010358 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800feee:	2300      	movs	r3, #0
 800fef0:	e232      	b.n	8010358 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800fef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fef4:	2200      	movs	r2, #0
 800fef6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800fef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fefa:	b2da      	uxtb	r2, r3
 800fefc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fefe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ff00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff02:	785b      	ldrb	r3, [r3, #1]
 800ff04:	4618      	mov	r0, r3
 800ff06:	f7fe fc67 	bl	800e7d8 <disk_initialize>
 800ff0a:	4603      	mov	r3, r0
 800ff0c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ff10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ff14:	f003 0301 	and.w	r3, r3, #1
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d001      	beq.n	800ff20 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ff1c:	2303      	movs	r3, #3
 800ff1e:	e21b      	b.n	8010358 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ff20:	79fb      	ldrb	r3, [r7, #7]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d007      	beq.n	800ff36 <find_volume+0xca>
 800ff26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ff2a:	f003 0304 	and.w	r3, r3, #4
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d001      	beq.n	800ff36 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ff32:	230a      	movs	r3, #10
 800ff34:	e210      	b.n	8010358 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800ff36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff38:	7858      	ldrb	r0, [r3, #1]
 800ff3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff3c:	330c      	adds	r3, #12
 800ff3e:	461a      	mov	r2, r3
 800ff40:	2102      	movs	r1, #2
 800ff42:	f7fe fcaf 	bl	800e8a4 <disk_ioctl>
 800ff46:	4603      	mov	r3, r0
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d001      	beq.n	800ff50 <find_volume+0xe4>
 800ff4c:	2301      	movs	r3, #1
 800ff4e:	e203      	b.n	8010358 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800ff50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff52:	899b      	ldrh	r3, [r3, #12]
 800ff54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ff58:	d80d      	bhi.n	800ff76 <find_volume+0x10a>
 800ff5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff5c:	899b      	ldrh	r3, [r3, #12]
 800ff5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ff62:	d308      	bcc.n	800ff76 <find_volume+0x10a>
 800ff64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff66:	899b      	ldrh	r3, [r3, #12]
 800ff68:	461a      	mov	r2, r3
 800ff6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff6c:	899b      	ldrh	r3, [r3, #12]
 800ff6e:	3b01      	subs	r3, #1
 800ff70:	4013      	ands	r3, r2
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d001      	beq.n	800ff7a <find_volume+0x10e>
 800ff76:	2301      	movs	r3, #1
 800ff78:	e1ee      	b.n	8010358 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ff7e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ff80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ff82:	f7ff ff1d 	bl	800fdc0 <check_fs>
 800ff86:	4603      	mov	r3, r0
 800ff88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ff8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ff90:	2b02      	cmp	r3, #2
 800ff92:	d149      	bne.n	8010028 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ff94:	2300      	movs	r3, #0
 800ff96:	643b      	str	r3, [r7, #64]	; 0x40
 800ff98:	e01e      	b.n	800ffd8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ff9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff9c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ffa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ffa2:	011b      	lsls	r3, r3, #4
 800ffa4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ffa8:	4413      	add	r3, r2
 800ffaa:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ffac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffae:	3304      	adds	r3, #4
 800ffb0:	781b      	ldrb	r3, [r3, #0]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d006      	beq.n	800ffc4 <find_volume+0x158>
 800ffb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffb8:	3308      	adds	r3, #8
 800ffba:	4618      	mov	r0, r3
 800ffbc:	f7fe fca8 	bl	800e910 <ld_dword>
 800ffc0:	4602      	mov	r2, r0
 800ffc2:	e000      	b.n	800ffc6 <find_volume+0x15a>
 800ffc4:	2200      	movs	r2, #0
 800ffc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ffc8:	009b      	lsls	r3, r3, #2
 800ffca:	3358      	adds	r3, #88	; 0x58
 800ffcc:	443b      	add	r3, r7
 800ffce:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ffd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ffd4:	3301      	adds	r3, #1
 800ffd6:	643b      	str	r3, [r7, #64]	; 0x40
 800ffd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ffda:	2b03      	cmp	r3, #3
 800ffdc:	d9dd      	bls.n	800ff9a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ffde:	2300      	movs	r3, #0
 800ffe0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ffe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d002      	beq.n	800ffee <find_volume+0x182>
 800ffe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ffea:	3b01      	subs	r3, #1
 800ffec:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ffee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fff0:	009b      	lsls	r3, r3, #2
 800fff2:	3358      	adds	r3, #88	; 0x58
 800fff4:	443b      	add	r3, r7
 800fff6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800fffa:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800fffc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d005      	beq.n	801000e <find_volume+0x1a2>
 8010002:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010004:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010006:	f7ff fedb 	bl	800fdc0 <check_fs>
 801000a:	4603      	mov	r3, r0
 801000c:	e000      	b.n	8010010 <find_volume+0x1a4>
 801000e:	2303      	movs	r3, #3
 8010010:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010014:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010018:	2b01      	cmp	r3, #1
 801001a:	d905      	bls.n	8010028 <find_volume+0x1bc>
 801001c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801001e:	3301      	adds	r3, #1
 8010020:	643b      	str	r3, [r7, #64]	; 0x40
 8010022:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010024:	2b03      	cmp	r3, #3
 8010026:	d9e2      	bls.n	800ffee <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010028:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801002c:	2b04      	cmp	r3, #4
 801002e:	d101      	bne.n	8010034 <find_volume+0x1c8>
 8010030:	2301      	movs	r3, #1
 8010032:	e191      	b.n	8010358 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010034:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010038:	2b01      	cmp	r3, #1
 801003a:	d901      	bls.n	8010040 <find_volume+0x1d4>
 801003c:	230d      	movs	r3, #13
 801003e:	e18b      	b.n	8010358 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010042:	3334      	adds	r3, #52	; 0x34
 8010044:	330b      	adds	r3, #11
 8010046:	4618      	mov	r0, r3
 8010048:	f7fe fc4a 	bl	800e8e0 <ld_word>
 801004c:	4603      	mov	r3, r0
 801004e:	461a      	mov	r2, r3
 8010050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010052:	899b      	ldrh	r3, [r3, #12]
 8010054:	429a      	cmp	r2, r3
 8010056:	d001      	beq.n	801005c <find_volume+0x1f0>
 8010058:	230d      	movs	r3, #13
 801005a:	e17d      	b.n	8010358 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801005c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801005e:	3334      	adds	r3, #52	; 0x34
 8010060:	3316      	adds	r3, #22
 8010062:	4618      	mov	r0, r3
 8010064:	f7fe fc3c 	bl	800e8e0 <ld_word>
 8010068:	4603      	mov	r3, r0
 801006a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801006c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801006e:	2b00      	cmp	r3, #0
 8010070:	d106      	bne.n	8010080 <find_volume+0x214>
 8010072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010074:	3334      	adds	r3, #52	; 0x34
 8010076:	3324      	adds	r3, #36	; 0x24
 8010078:	4618      	mov	r0, r3
 801007a:	f7fe fc49 	bl	800e910 <ld_dword>
 801007e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8010080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010082:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010084:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010088:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 801008c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801008e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010092:	789b      	ldrb	r3, [r3, #2]
 8010094:	2b01      	cmp	r3, #1
 8010096:	d005      	beq.n	80100a4 <find_volume+0x238>
 8010098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801009a:	789b      	ldrb	r3, [r3, #2]
 801009c:	2b02      	cmp	r3, #2
 801009e:	d001      	beq.n	80100a4 <find_volume+0x238>
 80100a0:	230d      	movs	r3, #13
 80100a2:	e159      	b.n	8010358 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80100a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100a6:	789b      	ldrb	r3, [r3, #2]
 80100a8:	461a      	mov	r2, r3
 80100aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100ac:	fb02 f303 	mul.w	r3, r2, r3
 80100b0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80100b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80100b8:	b29a      	uxth	r2, r3
 80100ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100bc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80100be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100c0:	895b      	ldrh	r3, [r3, #10]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d008      	beq.n	80100d8 <find_volume+0x26c>
 80100c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100c8:	895b      	ldrh	r3, [r3, #10]
 80100ca:	461a      	mov	r2, r3
 80100cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ce:	895b      	ldrh	r3, [r3, #10]
 80100d0:	3b01      	subs	r3, #1
 80100d2:	4013      	ands	r3, r2
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d001      	beq.n	80100dc <find_volume+0x270>
 80100d8:	230d      	movs	r3, #13
 80100da:	e13d      	b.n	8010358 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80100dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100de:	3334      	adds	r3, #52	; 0x34
 80100e0:	3311      	adds	r3, #17
 80100e2:	4618      	mov	r0, r3
 80100e4:	f7fe fbfc 	bl	800e8e0 <ld_word>
 80100e8:	4603      	mov	r3, r0
 80100ea:	461a      	mov	r2, r3
 80100ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ee:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80100f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100f2:	891b      	ldrh	r3, [r3, #8]
 80100f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80100f6:	8992      	ldrh	r2, [r2, #12]
 80100f8:	0952      	lsrs	r2, r2, #5
 80100fa:	b292      	uxth	r2, r2
 80100fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8010100:	fb01 f202 	mul.w	r2, r1, r2
 8010104:	1a9b      	subs	r3, r3, r2
 8010106:	b29b      	uxth	r3, r3
 8010108:	2b00      	cmp	r3, #0
 801010a:	d003      	beq.n	8010114 <find_volume+0x2a8>
 801010c:	230d      	movs	r3, #13
 801010e:	e123      	b.n	8010358 <find_volume+0x4ec>
 8010110:	200064c4 	.word	0x200064c4

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010116:	3334      	adds	r3, #52	; 0x34
 8010118:	3313      	adds	r3, #19
 801011a:	4618      	mov	r0, r3
 801011c:	f7fe fbe0 	bl	800e8e0 <ld_word>
 8010120:	4603      	mov	r3, r0
 8010122:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010126:	2b00      	cmp	r3, #0
 8010128:	d106      	bne.n	8010138 <find_volume+0x2cc>
 801012a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801012c:	3334      	adds	r3, #52	; 0x34
 801012e:	3320      	adds	r3, #32
 8010130:	4618      	mov	r0, r3
 8010132:	f7fe fbed 	bl	800e910 <ld_dword>
 8010136:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8010138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801013a:	3334      	adds	r3, #52	; 0x34
 801013c:	330e      	adds	r3, #14
 801013e:	4618      	mov	r0, r3
 8010140:	f7fe fbce 	bl	800e8e0 <ld_word>
 8010144:	4603      	mov	r3, r0
 8010146:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010148:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801014a:	2b00      	cmp	r3, #0
 801014c:	d101      	bne.n	8010152 <find_volume+0x2e6>
 801014e:	230d      	movs	r3, #13
 8010150:	e102      	b.n	8010358 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010152:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010156:	4413      	add	r3, r2
 8010158:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801015a:	8911      	ldrh	r1, [r2, #8]
 801015c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801015e:	8992      	ldrh	r2, [r2, #12]
 8010160:	0952      	lsrs	r2, r2, #5
 8010162:	b292      	uxth	r2, r2
 8010164:	fbb1 f2f2 	udiv	r2, r1, r2
 8010168:	b292      	uxth	r2, r2
 801016a:	4413      	add	r3, r2
 801016c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801016e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010172:	429a      	cmp	r2, r3
 8010174:	d201      	bcs.n	801017a <find_volume+0x30e>
 8010176:	230d      	movs	r3, #13
 8010178:	e0ee      	b.n	8010358 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801017a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801017c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801017e:	1ad3      	subs	r3, r2, r3
 8010180:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010182:	8952      	ldrh	r2, [r2, #10]
 8010184:	fbb3 f3f2 	udiv	r3, r3, r2
 8010188:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801018a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801018c:	2b00      	cmp	r3, #0
 801018e:	d101      	bne.n	8010194 <find_volume+0x328>
 8010190:	230d      	movs	r3, #13
 8010192:	e0e1      	b.n	8010358 <find_volume+0x4ec>
		fmt = FS_FAT32;
 8010194:	2303      	movs	r3, #3
 8010196:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801019a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801019c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80101a0:	4293      	cmp	r3, r2
 80101a2:	d802      	bhi.n	80101aa <find_volume+0x33e>
 80101a4:	2302      	movs	r3, #2
 80101a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80101aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101ac:	f640 72f5 	movw	r2, #4085	; 0xff5
 80101b0:	4293      	cmp	r3, r2
 80101b2:	d802      	bhi.n	80101ba <find_volume+0x34e>
 80101b4:	2301      	movs	r3, #1
 80101b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80101ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101bc:	1c9a      	adds	r2, r3, #2
 80101be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101c0:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80101c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80101c6:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80101c8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80101ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101cc:	441a      	add	r2, r3
 80101ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101d0:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80101d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80101d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101d6:	441a      	add	r2, r3
 80101d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101da:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80101dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80101e0:	2b03      	cmp	r3, #3
 80101e2:	d11e      	bne.n	8010222 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80101e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101e6:	3334      	adds	r3, #52	; 0x34
 80101e8:	332a      	adds	r3, #42	; 0x2a
 80101ea:	4618      	mov	r0, r3
 80101ec:	f7fe fb78 	bl	800e8e0 <ld_word>
 80101f0:	4603      	mov	r3, r0
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d001      	beq.n	80101fa <find_volume+0x38e>
 80101f6:	230d      	movs	r3, #13
 80101f8:	e0ae      	b.n	8010358 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80101fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101fc:	891b      	ldrh	r3, [r3, #8]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d001      	beq.n	8010206 <find_volume+0x39a>
 8010202:	230d      	movs	r3, #13
 8010204:	e0a8      	b.n	8010358 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010208:	3334      	adds	r3, #52	; 0x34
 801020a:	332c      	adds	r3, #44	; 0x2c
 801020c:	4618      	mov	r0, r3
 801020e:	f7fe fb7f 	bl	800e910 <ld_dword>
 8010212:	4602      	mov	r2, r0
 8010214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010216:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801021a:	699b      	ldr	r3, [r3, #24]
 801021c:	009b      	lsls	r3, r3, #2
 801021e:	647b      	str	r3, [r7, #68]	; 0x44
 8010220:	e01f      	b.n	8010262 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010224:	891b      	ldrh	r3, [r3, #8]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d101      	bne.n	801022e <find_volume+0x3c2>
 801022a:	230d      	movs	r3, #13
 801022c:	e094      	b.n	8010358 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801022e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010230:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010232:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010234:	441a      	add	r2, r3
 8010236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010238:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801023a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801023e:	2b02      	cmp	r3, #2
 8010240:	d103      	bne.n	801024a <find_volume+0x3de>
 8010242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010244:	699b      	ldr	r3, [r3, #24]
 8010246:	005b      	lsls	r3, r3, #1
 8010248:	e00a      	b.n	8010260 <find_volume+0x3f4>
 801024a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801024c:	699a      	ldr	r2, [r3, #24]
 801024e:	4613      	mov	r3, r2
 8010250:	005b      	lsls	r3, r3, #1
 8010252:	4413      	add	r3, r2
 8010254:	085a      	lsrs	r2, r3, #1
 8010256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010258:	699b      	ldr	r3, [r3, #24]
 801025a:	f003 0301 	and.w	r3, r3, #1
 801025e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010260:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010264:	69da      	ldr	r2, [r3, #28]
 8010266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010268:	899b      	ldrh	r3, [r3, #12]
 801026a:	4619      	mov	r1, r3
 801026c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801026e:	440b      	add	r3, r1
 8010270:	3b01      	subs	r3, #1
 8010272:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010274:	8989      	ldrh	r1, [r1, #12]
 8010276:	fbb3 f3f1 	udiv	r3, r3, r1
 801027a:	429a      	cmp	r2, r3
 801027c:	d201      	bcs.n	8010282 <find_volume+0x416>
 801027e:	230d      	movs	r3, #13
 8010280:	e06a      	b.n	8010358 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010284:	f04f 32ff 	mov.w	r2, #4294967295
 8010288:	615a      	str	r2, [r3, #20]
 801028a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801028c:	695a      	ldr	r2, [r3, #20]
 801028e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010290:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8010292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010294:	2280      	movs	r2, #128	; 0x80
 8010296:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010298:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801029c:	2b03      	cmp	r3, #3
 801029e:	d149      	bne.n	8010334 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80102a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102a2:	3334      	adds	r3, #52	; 0x34
 80102a4:	3330      	adds	r3, #48	; 0x30
 80102a6:	4618      	mov	r0, r3
 80102a8:	f7fe fb1a 	bl	800e8e0 <ld_word>
 80102ac:	4603      	mov	r3, r0
 80102ae:	2b01      	cmp	r3, #1
 80102b0:	d140      	bne.n	8010334 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80102b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102b4:	3301      	adds	r3, #1
 80102b6:	4619      	mov	r1, r3
 80102b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80102ba:	f7fe fd85 	bl	800edc8 <move_window>
 80102be:	4603      	mov	r3, r0
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d137      	bne.n	8010334 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80102c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102c6:	2200      	movs	r2, #0
 80102c8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80102ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102cc:	3334      	adds	r3, #52	; 0x34
 80102ce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80102d2:	4618      	mov	r0, r3
 80102d4:	f7fe fb04 	bl	800e8e0 <ld_word>
 80102d8:	4603      	mov	r3, r0
 80102da:	461a      	mov	r2, r3
 80102dc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80102e0:	429a      	cmp	r2, r3
 80102e2:	d127      	bne.n	8010334 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80102e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102e6:	3334      	adds	r3, #52	; 0x34
 80102e8:	4618      	mov	r0, r3
 80102ea:	f7fe fb11 	bl	800e910 <ld_dword>
 80102ee:	4603      	mov	r3, r0
 80102f0:	4a1b      	ldr	r2, [pc, #108]	; (8010360 <find_volume+0x4f4>)
 80102f2:	4293      	cmp	r3, r2
 80102f4:	d11e      	bne.n	8010334 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80102f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102f8:	3334      	adds	r3, #52	; 0x34
 80102fa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80102fe:	4618      	mov	r0, r3
 8010300:	f7fe fb06 	bl	800e910 <ld_dword>
 8010304:	4603      	mov	r3, r0
 8010306:	4a17      	ldr	r2, [pc, #92]	; (8010364 <find_volume+0x4f8>)
 8010308:	4293      	cmp	r3, r2
 801030a:	d113      	bne.n	8010334 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801030c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801030e:	3334      	adds	r3, #52	; 0x34
 8010310:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8010314:	4618      	mov	r0, r3
 8010316:	f7fe fafb 	bl	800e910 <ld_dword>
 801031a:	4602      	mov	r2, r0
 801031c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801031e:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010322:	3334      	adds	r3, #52	; 0x34
 8010324:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8010328:	4618      	mov	r0, r3
 801032a:	f7fe faf1 	bl	800e910 <ld_dword>
 801032e:	4602      	mov	r2, r0
 8010330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010332:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010336:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801033a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801033c:	4b0a      	ldr	r3, [pc, #40]	; (8010368 <find_volume+0x4fc>)
 801033e:	881b      	ldrh	r3, [r3, #0]
 8010340:	3301      	adds	r3, #1
 8010342:	b29a      	uxth	r2, r3
 8010344:	4b08      	ldr	r3, [pc, #32]	; (8010368 <find_volume+0x4fc>)
 8010346:	801a      	strh	r2, [r3, #0]
 8010348:	4b07      	ldr	r3, [pc, #28]	; (8010368 <find_volume+0x4fc>)
 801034a:	881a      	ldrh	r2, [r3, #0]
 801034c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801034e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010350:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010352:	f7fe fcd1 	bl	800ecf8 <clear_lock>
#endif
	return FR_OK;
 8010356:	2300      	movs	r3, #0
}
 8010358:	4618      	mov	r0, r3
 801035a:	3758      	adds	r7, #88	; 0x58
 801035c:	46bd      	mov	sp, r7
 801035e:	bd80      	pop	{r7, pc}
 8010360:	41615252 	.word	0x41615252
 8010364:	61417272 	.word	0x61417272
 8010368:	200064c8 	.word	0x200064c8

0801036c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801036c:	b580      	push	{r7, lr}
 801036e:	b084      	sub	sp, #16
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]
 8010374:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010376:	2309      	movs	r3, #9
 8010378:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d01c      	beq.n	80103ba <validate+0x4e>
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	2b00      	cmp	r3, #0
 8010386:	d018      	beq.n	80103ba <validate+0x4e>
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	781b      	ldrb	r3, [r3, #0]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d013      	beq.n	80103ba <validate+0x4e>
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	889a      	ldrh	r2, [r3, #4]
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	88db      	ldrh	r3, [r3, #6]
 801039c:	429a      	cmp	r2, r3
 801039e:	d10c      	bne.n	80103ba <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	785b      	ldrb	r3, [r3, #1]
 80103a6:	4618      	mov	r0, r3
 80103a8:	f7fe f9fc 	bl	800e7a4 <disk_status>
 80103ac:	4603      	mov	r3, r0
 80103ae:	f003 0301 	and.w	r3, r3, #1
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d101      	bne.n	80103ba <validate+0x4e>
			res = FR_OK;
 80103b6:	2300      	movs	r3, #0
 80103b8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80103ba:	7bfb      	ldrb	r3, [r7, #15]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d102      	bne.n	80103c6 <validate+0x5a>
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	e000      	b.n	80103c8 <validate+0x5c>
 80103c6:	2300      	movs	r3, #0
 80103c8:	683a      	ldr	r2, [r7, #0]
 80103ca:	6013      	str	r3, [r2, #0]
	return res;
 80103cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80103ce:	4618      	mov	r0, r3
 80103d0:	3710      	adds	r7, #16
 80103d2:	46bd      	mov	sp, r7
 80103d4:	bd80      	pop	{r7, pc}
	...

080103d8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80103d8:	b580      	push	{r7, lr}
 80103da:	b088      	sub	sp, #32
 80103dc:	af00      	add	r7, sp, #0
 80103de:	60f8      	str	r0, [r7, #12]
 80103e0:	60b9      	str	r1, [r7, #8]
 80103e2:	4613      	mov	r3, r2
 80103e4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80103e6:	68bb      	ldr	r3, [r7, #8]
 80103e8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80103ea:	f107 0310 	add.w	r3, r7, #16
 80103ee:	4618      	mov	r0, r3
 80103f0:	f7ff fca2 	bl	800fd38 <get_ldnumber>
 80103f4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80103f6:	69fb      	ldr	r3, [r7, #28]
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	da01      	bge.n	8010400 <f_mount+0x28>
 80103fc:	230b      	movs	r3, #11
 80103fe:	e02b      	b.n	8010458 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010400:	4a17      	ldr	r2, [pc, #92]	; (8010460 <f_mount+0x88>)
 8010402:	69fb      	ldr	r3, [r7, #28]
 8010404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010408:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801040a:	69bb      	ldr	r3, [r7, #24]
 801040c:	2b00      	cmp	r3, #0
 801040e:	d005      	beq.n	801041c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010410:	69b8      	ldr	r0, [r7, #24]
 8010412:	f7fe fc71 	bl	800ecf8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010416:	69bb      	ldr	r3, [r7, #24]
 8010418:	2200      	movs	r2, #0
 801041a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d002      	beq.n	8010428 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	2200      	movs	r2, #0
 8010426:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010428:	68fa      	ldr	r2, [r7, #12]
 801042a:	490d      	ldr	r1, [pc, #52]	; (8010460 <f_mount+0x88>)
 801042c:	69fb      	ldr	r3, [r7, #28]
 801042e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	2b00      	cmp	r3, #0
 8010436:	d002      	beq.n	801043e <f_mount+0x66>
 8010438:	79fb      	ldrb	r3, [r7, #7]
 801043a:	2b01      	cmp	r3, #1
 801043c:	d001      	beq.n	8010442 <f_mount+0x6a>
 801043e:	2300      	movs	r3, #0
 8010440:	e00a      	b.n	8010458 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010442:	f107 010c 	add.w	r1, r7, #12
 8010446:	f107 0308 	add.w	r3, r7, #8
 801044a:	2200      	movs	r2, #0
 801044c:	4618      	mov	r0, r3
 801044e:	f7ff fd0d 	bl	800fe6c <find_volume>
 8010452:	4603      	mov	r3, r0
 8010454:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010456:	7dfb      	ldrb	r3, [r7, #23]
}
 8010458:	4618      	mov	r0, r3
 801045a:	3720      	adds	r7, #32
 801045c:	46bd      	mov	sp, r7
 801045e:	bd80      	pop	{r7, pc}
 8010460:	200064c4 	.word	0x200064c4

08010464 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010464:	b580      	push	{r7, lr}
 8010466:	b098      	sub	sp, #96	; 0x60
 8010468:	af00      	add	r7, sp, #0
 801046a:	60f8      	str	r0, [r7, #12]
 801046c:	60b9      	str	r1, [r7, #8]
 801046e:	4613      	mov	r3, r2
 8010470:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	2b00      	cmp	r3, #0
 8010476:	d101      	bne.n	801047c <f_open+0x18>
 8010478:	2309      	movs	r3, #9
 801047a:	e1bb      	b.n	80107f4 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801047c:	79fb      	ldrb	r3, [r7, #7]
 801047e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010482:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010484:	79fa      	ldrb	r2, [r7, #7]
 8010486:	f107 0110 	add.w	r1, r7, #16
 801048a:	f107 0308 	add.w	r3, r7, #8
 801048e:	4618      	mov	r0, r3
 8010490:	f7ff fcec 	bl	800fe6c <find_volume>
 8010494:	4603      	mov	r3, r0
 8010496:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801049a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801049e:	2b00      	cmp	r3, #0
 80104a0:	f040 819f 	bne.w	80107e2 <f_open+0x37e>
		dj.obj.fs = fs;
 80104a4:	693b      	ldr	r3, [r7, #16]
 80104a6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80104a8:	68ba      	ldr	r2, [r7, #8]
 80104aa:	f107 0314 	add.w	r3, r7, #20
 80104ae:	4611      	mov	r1, r2
 80104b0:	4618      	mov	r0, r3
 80104b2:	f7ff fbcb 	bl	800fc4c <follow_path>
 80104b6:	4603      	mov	r3, r0
 80104b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80104bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d11a      	bne.n	80104fa <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80104c4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80104c8:	b25b      	sxtb	r3, r3
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	da03      	bge.n	80104d6 <f_open+0x72>
				res = FR_INVALID_NAME;
 80104ce:	2306      	movs	r3, #6
 80104d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80104d4:	e011      	b.n	80104fa <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80104d6:	79fb      	ldrb	r3, [r7, #7]
 80104d8:	f023 0301 	bic.w	r3, r3, #1
 80104dc:	2b00      	cmp	r3, #0
 80104de:	bf14      	ite	ne
 80104e0:	2301      	movne	r3, #1
 80104e2:	2300      	moveq	r3, #0
 80104e4:	b2db      	uxtb	r3, r3
 80104e6:	461a      	mov	r2, r3
 80104e8:	f107 0314 	add.w	r3, r7, #20
 80104ec:	4611      	mov	r1, r2
 80104ee:	4618      	mov	r0, r3
 80104f0:	f7fe faf6 	bl	800eae0 <chk_lock>
 80104f4:	4603      	mov	r3, r0
 80104f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80104fa:	79fb      	ldrb	r3, [r7, #7]
 80104fc:	f003 031c 	and.w	r3, r3, #28
 8010500:	2b00      	cmp	r3, #0
 8010502:	d07f      	beq.n	8010604 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8010504:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010508:	2b00      	cmp	r3, #0
 801050a:	d017      	beq.n	801053c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801050c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010510:	2b04      	cmp	r3, #4
 8010512:	d10e      	bne.n	8010532 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010514:	f7fe fb40 	bl	800eb98 <enq_lock>
 8010518:	4603      	mov	r3, r0
 801051a:	2b00      	cmp	r3, #0
 801051c:	d006      	beq.n	801052c <f_open+0xc8>
 801051e:	f107 0314 	add.w	r3, r7, #20
 8010522:	4618      	mov	r0, r3
 8010524:	f7ff fa6c 	bl	800fa00 <dir_register>
 8010528:	4603      	mov	r3, r0
 801052a:	e000      	b.n	801052e <f_open+0xca>
 801052c:	2312      	movs	r3, #18
 801052e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010532:	79fb      	ldrb	r3, [r7, #7]
 8010534:	f043 0308 	orr.w	r3, r3, #8
 8010538:	71fb      	strb	r3, [r7, #7]
 801053a:	e010      	b.n	801055e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801053c:	7ebb      	ldrb	r3, [r7, #26]
 801053e:	f003 0311 	and.w	r3, r3, #17
 8010542:	2b00      	cmp	r3, #0
 8010544:	d003      	beq.n	801054e <f_open+0xea>
					res = FR_DENIED;
 8010546:	2307      	movs	r3, #7
 8010548:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801054c:	e007      	b.n	801055e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801054e:	79fb      	ldrb	r3, [r7, #7]
 8010550:	f003 0304 	and.w	r3, r3, #4
 8010554:	2b00      	cmp	r3, #0
 8010556:	d002      	beq.n	801055e <f_open+0xfa>
 8010558:	2308      	movs	r3, #8
 801055a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801055e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010562:	2b00      	cmp	r3, #0
 8010564:	d168      	bne.n	8010638 <f_open+0x1d4>
 8010566:	79fb      	ldrb	r3, [r7, #7]
 8010568:	f003 0308 	and.w	r3, r3, #8
 801056c:	2b00      	cmp	r3, #0
 801056e:	d063      	beq.n	8010638 <f_open+0x1d4>
				dw = GET_FATTIME();
 8010570:	f7fd fee4 	bl	800e33c <get_fattime>
 8010574:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010578:	330e      	adds	r3, #14
 801057a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801057c:	4618      	mov	r0, r3
 801057e:	f7fe fa05 	bl	800e98c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010584:	3316      	adds	r3, #22
 8010586:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010588:	4618      	mov	r0, r3
 801058a:	f7fe f9ff 	bl	800e98c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801058e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010590:	330b      	adds	r3, #11
 8010592:	2220      	movs	r2, #32
 8010594:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010596:	693b      	ldr	r3, [r7, #16]
 8010598:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801059a:	4611      	mov	r1, r2
 801059c:	4618      	mov	r0, r3
 801059e:	f7ff f99b 	bl	800f8d8 <ld_clust>
 80105a2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80105a4:	693b      	ldr	r3, [r7, #16]
 80105a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80105a8:	2200      	movs	r2, #0
 80105aa:	4618      	mov	r0, r3
 80105ac:	f7ff f9b3 	bl	800f916 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80105b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105b2:	331c      	adds	r3, #28
 80105b4:	2100      	movs	r1, #0
 80105b6:	4618      	mov	r0, r3
 80105b8:	f7fe f9e8 	bl	800e98c <st_dword>
					fs->wflag = 1;
 80105bc:	693b      	ldr	r3, [r7, #16]
 80105be:	2201      	movs	r2, #1
 80105c0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80105c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d037      	beq.n	8010638 <f_open+0x1d4>
						dw = fs->winsect;
 80105c8:	693b      	ldr	r3, [r7, #16]
 80105ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105cc:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80105ce:	f107 0314 	add.w	r3, r7, #20
 80105d2:	2200      	movs	r2, #0
 80105d4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80105d6:	4618      	mov	r0, r3
 80105d8:	f7fe fea3 	bl	800f322 <remove_chain>
 80105dc:	4603      	mov	r3, r0
 80105de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80105e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d126      	bne.n	8010638 <f_open+0x1d4>
							res = move_window(fs, dw);
 80105ea:	693b      	ldr	r3, [r7, #16]
 80105ec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80105ee:	4618      	mov	r0, r3
 80105f0:	f7fe fbea 	bl	800edc8 <move_window>
 80105f4:	4603      	mov	r3, r0
 80105f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80105fa:	693b      	ldr	r3, [r7, #16]
 80105fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80105fe:	3a01      	subs	r2, #1
 8010600:	611a      	str	r2, [r3, #16]
 8010602:	e019      	b.n	8010638 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010604:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010608:	2b00      	cmp	r3, #0
 801060a:	d115      	bne.n	8010638 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801060c:	7ebb      	ldrb	r3, [r7, #26]
 801060e:	f003 0310 	and.w	r3, r3, #16
 8010612:	2b00      	cmp	r3, #0
 8010614:	d003      	beq.n	801061e <f_open+0x1ba>
					res = FR_NO_FILE;
 8010616:	2304      	movs	r3, #4
 8010618:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801061c:	e00c      	b.n	8010638 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801061e:	79fb      	ldrb	r3, [r7, #7]
 8010620:	f003 0302 	and.w	r3, r3, #2
 8010624:	2b00      	cmp	r3, #0
 8010626:	d007      	beq.n	8010638 <f_open+0x1d4>
 8010628:	7ebb      	ldrb	r3, [r7, #26]
 801062a:	f003 0301 	and.w	r3, r3, #1
 801062e:	2b00      	cmp	r3, #0
 8010630:	d002      	beq.n	8010638 <f_open+0x1d4>
						res = FR_DENIED;
 8010632:	2307      	movs	r3, #7
 8010634:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8010638:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801063c:	2b00      	cmp	r3, #0
 801063e:	d128      	bne.n	8010692 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010640:	79fb      	ldrb	r3, [r7, #7]
 8010642:	f003 0308 	and.w	r3, r3, #8
 8010646:	2b00      	cmp	r3, #0
 8010648:	d003      	beq.n	8010652 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801064a:	79fb      	ldrb	r3, [r7, #7]
 801064c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010650:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010652:	693b      	ldr	r3, [r7, #16]
 8010654:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801065a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010660:	79fb      	ldrb	r3, [r7, #7]
 8010662:	f023 0301 	bic.w	r3, r3, #1
 8010666:	2b00      	cmp	r3, #0
 8010668:	bf14      	ite	ne
 801066a:	2301      	movne	r3, #1
 801066c:	2300      	moveq	r3, #0
 801066e:	b2db      	uxtb	r3, r3
 8010670:	461a      	mov	r2, r3
 8010672:	f107 0314 	add.w	r3, r7, #20
 8010676:	4611      	mov	r1, r2
 8010678:	4618      	mov	r0, r3
 801067a:	f7fe faaf 	bl	800ebdc <inc_lock>
 801067e:	4602      	mov	r2, r0
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	691b      	ldr	r3, [r3, #16]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d102      	bne.n	8010692 <f_open+0x22e>
 801068c:	2302      	movs	r3, #2
 801068e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010692:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010696:	2b00      	cmp	r3, #0
 8010698:	f040 80a3 	bne.w	80107e2 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801069c:	693b      	ldr	r3, [r7, #16]
 801069e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80106a0:	4611      	mov	r1, r2
 80106a2:	4618      	mov	r0, r3
 80106a4:	f7ff f918 	bl	800f8d8 <ld_clust>
 80106a8:	4602      	mov	r2, r0
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80106ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106b0:	331c      	adds	r3, #28
 80106b2:	4618      	mov	r0, r3
 80106b4:	f7fe f92c 	bl	800e910 <ld_dword>
 80106b8:	4602      	mov	r2, r0
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	2200      	movs	r2, #0
 80106c2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80106c4:	693a      	ldr	r2, [r7, #16]
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80106ca:	693b      	ldr	r3, [r7, #16]
 80106cc:	88da      	ldrh	r2, [r3, #6]
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	79fa      	ldrb	r2, [r7, #7]
 80106d6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	2200      	movs	r2, #0
 80106dc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	2200      	movs	r2, #0
 80106e2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	2200      	movs	r2, #0
 80106e8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	3330      	adds	r3, #48	; 0x30
 80106ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80106f2:	2100      	movs	r1, #0
 80106f4:	4618      	mov	r0, r3
 80106f6:	f7fe f996 	bl	800ea26 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80106fa:	79fb      	ldrb	r3, [r7, #7]
 80106fc:	f003 0320 	and.w	r3, r3, #32
 8010700:	2b00      	cmp	r3, #0
 8010702:	d06e      	beq.n	80107e2 <f_open+0x37e>
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	68db      	ldr	r3, [r3, #12]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d06a      	beq.n	80107e2 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	68da      	ldr	r2, [r3, #12]
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010714:	693b      	ldr	r3, [r7, #16]
 8010716:	895b      	ldrh	r3, [r3, #10]
 8010718:	461a      	mov	r2, r3
 801071a:	693b      	ldr	r3, [r7, #16]
 801071c:	899b      	ldrh	r3, [r3, #12]
 801071e:	fb02 f303 	mul.w	r3, r2, r3
 8010722:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	689b      	ldr	r3, [r3, #8]
 8010728:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	68db      	ldr	r3, [r3, #12]
 801072e:	657b      	str	r3, [r7, #84]	; 0x54
 8010730:	e016      	b.n	8010760 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010736:	4618      	mov	r0, r3
 8010738:	f7fe fc03 	bl	800ef42 <get_fat>
 801073c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801073e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010740:	2b01      	cmp	r3, #1
 8010742:	d802      	bhi.n	801074a <f_open+0x2e6>
 8010744:	2302      	movs	r3, #2
 8010746:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801074a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801074c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010750:	d102      	bne.n	8010758 <f_open+0x2f4>
 8010752:	2301      	movs	r3, #1
 8010754:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010758:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801075a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801075c:	1ad3      	subs	r3, r2, r3
 801075e:	657b      	str	r3, [r7, #84]	; 0x54
 8010760:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010764:	2b00      	cmp	r3, #0
 8010766:	d103      	bne.n	8010770 <f_open+0x30c>
 8010768:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801076a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801076c:	429a      	cmp	r2, r3
 801076e:	d8e0      	bhi.n	8010732 <f_open+0x2ce>
				}
				fp->clust = clst;
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010774:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010776:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801077a:	2b00      	cmp	r3, #0
 801077c:	d131      	bne.n	80107e2 <f_open+0x37e>
 801077e:	693b      	ldr	r3, [r7, #16]
 8010780:	899b      	ldrh	r3, [r3, #12]
 8010782:	461a      	mov	r2, r3
 8010784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010786:	fbb3 f1f2 	udiv	r1, r3, r2
 801078a:	fb01 f202 	mul.w	r2, r1, r2
 801078e:	1a9b      	subs	r3, r3, r2
 8010790:	2b00      	cmp	r3, #0
 8010792:	d026      	beq.n	80107e2 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010794:	693b      	ldr	r3, [r7, #16]
 8010796:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010798:	4618      	mov	r0, r3
 801079a:	f7fe fbb3 	bl	800ef04 <clust2sect>
 801079e:	6478      	str	r0, [r7, #68]	; 0x44
 80107a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d103      	bne.n	80107ae <f_open+0x34a>
						res = FR_INT_ERR;
 80107a6:	2302      	movs	r3, #2
 80107a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80107ac:	e019      	b.n	80107e2 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80107ae:	693b      	ldr	r3, [r7, #16]
 80107b0:	899b      	ldrh	r3, [r3, #12]
 80107b2:	461a      	mov	r2, r3
 80107b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80107b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80107ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80107bc:	441a      	add	r2, r3
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80107c2:	693b      	ldr	r3, [r7, #16]
 80107c4:	7858      	ldrb	r0, [r3, #1]
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	6a1a      	ldr	r2, [r3, #32]
 80107d0:	2301      	movs	r3, #1
 80107d2:	f7fe f827 	bl	800e824 <disk_read>
 80107d6:	4603      	mov	r3, r0
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d002      	beq.n	80107e2 <f_open+0x37e>
 80107dc:	2301      	movs	r3, #1
 80107de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80107e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d002      	beq.n	80107f0 <f_open+0x38c>
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	2200      	movs	r2, #0
 80107ee:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80107f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80107f4:	4618      	mov	r0, r3
 80107f6:	3760      	adds	r7, #96	; 0x60
 80107f8:	46bd      	mov	sp, r7
 80107fa:	bd80      	pop	{r7, pc}

080107fc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80107fc:	b580      	push	{r7, lr}
 80107fe:	b08c      	sub	sp, #48	; 0x30
 8010800:	af00      	add	r7, sp, #0
 8010802:	60f8      	str	r0, [r7, #12]
 8010804:	60b9      	str	r1, [r7, #8]
 8010806:	607a      	str	r2, [r7, #4]
 8010808:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801080a:	68bb      	ldr	r3, [r7, #8]
 801080c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801080e:	683b      	ldr	r3, [r7, #0]
 8010810:	2200      	movs	r2, #0
 8010812:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	f107 0210 	add.w	r2, r7, #16
 801081a:	4611      	mov	r1, r2
 801081c:	4618      	mov	r0, r3
 801081e:	f7ff fda5 	bl	801036c <validate>
 8010822:	4603      	mov	r3, r0
 8010824:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010828:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801082c:	2b00      	cmp	r3, #0
 801082e:	d107      	bne.n	8010840 <f_write+0x44>
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	7d5b      	ldrb	r3, [r3, #21]
 8010834:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010838:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801083c:	2b00      	cmp	r3, #0
 801083e:	d002      	beq.n	8010846 <f_write+0x4a>
 8010840:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010844:	e16a      	b.n	8010b1c <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	7d1b      	ldrb	r3, [r3, #20]
 801084a:	f003 0302 	and.w	r3, r3, #2
 801084e:	2b00      	cmp	r3, #0
 8010850:	d101      	bne.n	8010856 <f_write+0x5a>
 8010852:	2307      	movs	r3, #7
 8010854:	e162      	b.n	8010b1c <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	699a      	ldr	r2, [r3, #24]
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	441a      	add	r2, r3
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	699b      	ldr	r3, [r3, #24]
 8010862:	429a      	cmp	r2, r3
 8010864:	f080 814c 	bcs.w	8010b00 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	699b      	ldr	r3, [r3, #24]
 801086c:	43db      	mvns	r3, r3
 801086e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8010870:	e146      	b.n	8010b00 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	699b      	ldr	r3, [r3, #24]
 8010876:	693a      	ldr	r2, [r7, #16]
 8010878:	8992      	ldrh	r2, [r2, #12]
 801087a:	fbb3 f1f2 	udiv	r1, r3, r2
 801087e:	fb01 f202 	mul.w	r2, r1, r2
 8010882:	1a9b      	subs	r3, r3, r2
 8010884:	2b00      	cmp	r3, #0
 8010886:	f040 80f1 	bne.w	8010a6c <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	699b      	ldr	r3, [r3, #24]
 801088e:	693a      	ldr	r2, [r7, #16]
 8010890:	8992      	ldrh	r2, [r2, #12]
 8010892:	fbb3 f3f2 	udiv	r3, r3, r2
 8010896:	693a      	ldr	r2, [r7, #16]
 8010898:	8952      	ldrh	r2, [r2, #10]
 801089a:	3a01      	subs	r2, #1
 801089c:	4013      	ands	r3, r2
 801089e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80108a0:	69bb      	ldr	r3, [r7, #24]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d143      	bne.n	801092e <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	699b      	ldr	r3, [r3, #24]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d10c      	bne.n	80108c8 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	689b      	ldr	r3, [r3, #8]
 80108b2:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80108b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d11a      	bne.n	80108f0 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	2100      	movs	r1, #0
 80108be:	4618      	mov	r0, r3
 80108c0:	f7fe fd94 	bl	800f3ec <create_chain>
 80108c4:	62b8      	str	r0, [r7, #40]	; 0x28
 80108c6:	e013      	b.n	80108f0 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d007      	beq.n	80108e0 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	699b      	ldr	r3, [r3, #24]
 80108d4:	4619      	mov	r1, r3
 80108d6:	68f8      	ldr	r0, [r7, #12]
 80108d8:	f7fe fe20 	bl	800f51c <clmt_clust>
 80108dc:	62b8      	str	r0, [r7, #40]	; 0x28
 80108de:	e007      	b.n	80108f0 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80108e0:	68fa      	ldr	r2, [r7, #12]
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	69db      	ldr	r3, [r3, #28]
 80108e6:	4619      	mov	r1, r3
 80108e8:	4610      	mov	r0, r2
 80108ea:	f7fe fd7f 	bl	800f3ec <create_chain>
 80108ee:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80108f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	f000 8109 	beq.w	8010b0a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80108f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108fa:	2b01      	cmp	r3, #1
 80108fc:	d104      	bne.n	8010908 <f_write+0x10c>
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	2202      	movs	r2, #2
 8010902:	755a      	strb	r2, [r3, #21]
 8010904:	2302      	movs	r3, #2
 8010906:	e109      	b.n	8010b1c <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801090a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801090e:	d104      	bne.n	801091a <f_write+0x11e>
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	2201      	movs	r2, #1
 8010914:	755a      	strb	r2, [r3, #21]
 8010916:	2301      	movs	r3, #1
 8010918:	e100      	b.n	8010b1c <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801091e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	689b      	ldr	r3, [r3, #8]
 8010924:	2b00      	cmp	r3, #0
 8010926:	d102      	bne.n	801092e <f_write+0x132>
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801092c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	7d1b      	ldrb	r3, [r3, #20]
 8010932:	b25b      	sxtb	r3, r3
 8010934:	2b00      	cmp	r3, #0
 8010936:	da18      	bge.n	801096a <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010938:	693b      	ldr	r3, [r7, #16]
 801093a:	7858      	ldrb	r0, [r3, #1]
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	6a1a      	ldr	r2, [r3, #32]
 8010946:	2301      	movs	r3, #1
 8010948:	f7fd ff8c 	bl	800e864 <disk_write>
 801094c:	4603      	mov	r3, r0
 801094e:	2b00      	cmp	r3, #0
 8010950:	d004      	beq.n	801095c <f_write+0x160>
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	2201      	movs	r2, #1
 8010956:	755a      	strb	r2, [r3, #21]
 8010958:	2301      	movs	r3, #1
 801095a:	e0df      	b.n	8010b1c <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	7d1b      	ldrb	r3, [r3, #20]
 8010960:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010964:	b2da      	uxtb	r2, r3
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801096a:	693a      	ldr	r2, [r7, #16]
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	69db      	ldr	r3, [r3, #28]
 8010970:	4619      	mov	r1, r3
 8010972:	4610      	mov	r0, r2
 8010974:	f7fe fac6 	bl	800ef04 <clust2sect>
 8010978:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801097a:	697b      	ldr	r3, [r7, #20]
 801097c:	2b00      	cmp	r3, #0
 801097e:	d104      	bne.n	801098a <f_write+0x18e>
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	2202      	movs	r2, #2
 8010984:	755a      	strb	r2, [r3, #21]
 8010986:	2302      	movs	r3, #2
 8010988:	e0c8      	b.n	8010b1c <f_write+0x320>
			sect += csect;
 801098a:	697a      	ldr	r2, [r7, #20]
 801098c:	69bb      	ldr	r3, [r7, #24]
 801098e:	4413      	add	r3, r2
 8010990:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8010992:	693b      	ldr	r3, [r7, #16]
 8010994:	899b      	ldrh	r3, [r3, #12]
 8010996:	461a      	mov	r2, r3
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	fbb3 f3f2 	udiv	r3, r3, r2
 801099e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80109a0:	6a3b      	ldr	r3, [r7, #32]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d043      	beq.n	8010a2e <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80109a6:	69ba      	ldr	r2, [r7, #24]
 80109a8:	6a3b      	ldr	r3, [r7, #32]
 80109aa:	4413      	add	r3, r2
 80109ac:	693a      	ldr	r2, [r7, #16]
 80109ae:	8952      	ldrh	r2, [r2, #10]
 80109b0:	4293      	cmp	r3, r2
 80109b2:	d905      	bls.n	80109c0 <f_write+0x1c4>
					cc = fs->csize - csect;
 80109b4:	693b      	ldr	r3, [r7, #16]
 80109b6:	895b      	ldrh	r3, [r3, #10]
 80109b8:	461a      	mov	r2, r3
 80109ba:	69bb      	ldr	r3, [r7, #24]
 80109bc:	1ad3      	subs	r3, r2, r3
 80109be:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80109c0:	693b      	ldr	r3, [r7, #16]
 80109c2:	7858      	ldrb	r0, [r3, #1]
 80109c4:	6a3b      	ldr	r3, [r7, #32]
 80109c6:	697a      	ldr	r2, [r7, #20]
 80109c8:	69f9      	ldr	r1, [r7, #28]
 80109ca:	f7fd ff4b 	bl	800e864 <disk_write>
 80109ce:	4603      	mov	r3, r0
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d004      	beq.n	80109de <f_write+0x1e2>
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	2201      	movs	r2, #1
 80109d8:	755a      	strb	r2, [r3, #21]
 80109da:	2301      	movs	r3, #1
 80109dc:	e09e      	b.n	8010b1c <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	6a1a      	ldr	r2, [r3, #32]
 80109e2:	697b      	ldr	r3, [r7, #20]
 80109e4:	1ad3      	subs	r3, r2, r3
 80109e6:	6a3a      	ldr	r2, [r7, #32]
 80109e8:	429a      	cmp	r2, r3
 80109ea:	d918      	bls.n	8010a1e <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	6a1a      	ldr	r2, [r3, #32]
 80109f6:	697b      	ldr	r3, [r7, #20]
 80109f8:	1ad3      	subs	r3, r2, r3
 80109fa:	693a      	ldr	r2, [r7, #16]
 80109fc:	8992      	ldrh	r2, [r2, #12]
 80109fe:	fb02 f303 	mul.w	r3, r2, r3
 8010a02:	69fa      	ldr	r2, [r7, #28]
 8010a04:	18d1      	adds	r1, r2, r3
 8010a06:	693b      	ldr	r3, [r7, #16]
 8010a08:	899b      	ldrh	r3, [r3, #12]
 8010a0a:	461a      	mov	r2, r3
 8010a0c:	f7fd ffea 	bl	800e9e4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	7d1b      	ldrb	r3, [r3, #20]
 8010a14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a18:	b2da      	uxtb	r2, r3
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8010a1e:	693b      	ldr	r3, [r7, #16]
 8010a20:	899b      	ldrh	r3, [r3, #12]
 8010a22:	461a      	mov	r2, r3
 8010a24:	6a3b      	ldr	r3, [r7, #32]
 8010a26:	fb02 f303 	mul.w	r3, r2, r3
 8010a2a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8010a2c:	e04b      	b.n	8010ac6 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	6a1b      	ldr	r3, [r3, #32]
 8010a32:	697a      	ldr	r2, [r7, #20]
 8010a34:	429a      	cmp	r2, r3
 8010a36:	d016      	beq.n	8010a66 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	699a      	ldr	r2, [r3, #24]
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010a40:	429a      	cmp	r2, r3
 8010a42:	d210      	bcs.n	8010a66 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010a44:	693b      	ldr	r3, [r7, #16]
 8010a46:	7858      	ldrb	r0, [r3, #1]
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010a4e:	2301      	movs	r3, #1
 8010a50:	697a      	ldr	r2, [r7, #20]
 8010a52:	f7fd fee7 	bl	800e824 <disk_read>
 8010a56:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d004      	beq.n	8010a66 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	2201      	movs	r2, #1
 8010a60:	755a      	strb	r2, [r3, #21]
 8010a62:	2301      	movs	r3, #1
 8010a64:	e05a      	b.n	8010b1c <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	697a      	ldr	r2, [r7, #20]
 8010a6a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010a6c:	693b      	ldr	r3, [r7, #16]
 8010a6e:	899b      	ldrh	r3, [r3, #12]
 8010a70:	4618      	mov	r0, r3
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	699b      	ldr	r3, [r3, #24]
 8010a76:	693a      	ldr	r2, [r7, #16]
 8010a78:	8992      	ldrh	r2, [r2, #12]
 8010a7a:	fbb3 f1f2 	udiv	r1, r3, r2
 8010a7e:	fb01 f202 	mul.w	r2, r1, r2
 8010a82:	1a9b      	subs	r3, r3, r2
 8010a84:	1ac3      	subs	r3, r0, r3
 8010a86:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8010a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	429a      	cmp	r2, r3
 8010a8e:	d901      	bls.n	8010a94 <f_write+0x298>
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	699b      	ldr	r3, [r3, #24]
 8010a9e:	693a      	ldr	r2, [r7, #16]
 8010aa0:	8992      	ldrh	r2, [r2, #12]
 8010aa2:	fbb3 f0f2 	udiv	r0, r3, r2
 8010aa6:	fb00 f202 	mul.w	r2, r0, r2
 8010aaa:	1a9b      	subs	r3, r3, r2
 8010aac:	440b      	add	r3, r1
 8010aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ab0:	69f9      	ldr	r1, [r7, #28]
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	f7fd ff96 	bl	800e9e4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	7d1b      	ldrb	r3, [r3, #20]
 8010abc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010ac0:	b2da      	uxtb	r2, r3
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8010ac6:	69fa      	ldr	r2, [r7, #28]
 8010ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aca:	4413      	add	r3, r2
 8010acc:	61fb      	str	r3, [r7, #28]
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	699a      	ldr	r2, [r3, #24]
 8010ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ad4:	441a      	add	r2, r3
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	619a      	str	r2, [r3, #24]
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	68da      	ldr	r2, [r3, #12]
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	699b      	ldr	r3, [r3, #24]
 8010ae2:	429a      	cmp	r2, r3
 8010ae4:	bf38      	it	cc
 8010ae6:	461a      	movcc	r2, r3
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	60da      	str	r2, [r3, #12]
 8010aec:	683b      	ldr	r3, [r7, #0]
 8010aee:	681a      	ldr	r2, [r3, #0]
 8010af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010af2:	441a      	add	r2, r3
 8010af4:	683b      	ldr	r3, [r7, #0]
 8010af6:	601a      	str	r2, [r3, #0]
 8010af8:	687a      	ldr	r2, [r7, #4]
 8010afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010afc:	1ad3      	subs	r3, r2, r3
 8010afe:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	f47f aeb5 	bne.w	8010872 <f_write+0x76>
 8010b08:	e000      	b.n	8010b0c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010b0a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	7d1b      	ldrb	r3, [r3, #20]
 8010b10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010b14:	b2da      	uxtb	r2, r3
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010b1a:	2300      	movs	r3, #0
}
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	3730      	adds	r7, #48	; 0x30
 8010b20:	46bd      	mov	sp, r7
 8010b22:	bd80      	pop	{r7, pc}

08010b24 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b086      	sub	sp, #24
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	f107 0208 	add.w	r2, r7, #8
 8010b32:	4611      	mov	r1, r2
 8010b34:	4618      	mov	r0, r3
 8010b36:	f7ff fc19 	bl	801036c <validate>
 8010b3a:	4603      	mov	r3, r0
 8010b3c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010b3e:	7dfb      	ldrb	r3, [r7, #23]
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d168      	bne.n	8010c16 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	7d1b      	ldrb	r3, [r3, #20]
 8010b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d062      	beq.n	8010c16 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	7d1b      	ldrb	r3, [r3, #20]
 8010b54:	b25b      	sxtb	r3, r3
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	da15      	bge.n	8010b86 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010b5a:	68bb      	ldr	r3, [r7, #8]
 8010b5c:	7858      	ldrb	r0, [r3, #1]
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	6a1a      	ldr	r2, [r3, #32]
 8010b68:	2301      	movs	r3, #1
 8010b6a:	f7fd fe7b 	bl	800e864 <disk_write>
 8010b6e:	4603      	mov	r3, r0
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d001      	beq.n	8010b78 <f_sync+0x54>
 8010b74:	2301      	movs	r3, #1
 8010b76:	e04f      	b.n	8010c18 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	7d1b      	ldrb	r3, [r3, #20]
 8010b7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010b80:	b2da      	uxtb	r2, r3
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010b86:	f7fd fbd9 	bl	800e33c <get_fattime>
 8010b8a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010b8c:	68ba      	ldr	r2, [r7, #8]
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b92:	4619      	mov	r1, r3
 8010b94:	4610      	mov	r0, r2
 8010b96:	f7fe f917 	bl	800edc8 <move_window>
 8010b9a:	4603      	mov	r3, r0
 8010b9c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8010b9e:	7dfb      	ldrb	r3, [r7, #23]
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d138      	bne.n	8010c16 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ba8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	330b      	adds	r3, #11
 8010bae:	781a      	ldrb	r2, [r3, #0]
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	330b      	adds	r3, #11
 8010bb4:	f042 0220 	orr.w	r2, r2, #32
 8010bb8:	b2d2      	uxtb	r2, r2
 8010bba:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	6818      	ldr	r0, [r3, #0]
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	689b      	ldr	r3, [r3, #8]
 8010bc4:	461a      	mov	r2, r3
 8010bc6:	68f9      	ldr	r1, [r7, #12]
 8010bc8:	f7fe fea5 	bl	800f916 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	f103 021c 	add.w	r2, r3, #28
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	68db      	ldr	r3, [r3, #12]
 8010bd6:	4619      	mov	r1, r3
 8010bd8:	4610      	mov	r0, r2
 8010bda:	f7fd fed7 	bl	800e98c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	3316      	adds	r3, #22
 8010be2:	6939      	ldr	r1, [r7, #16]
 8010be4:	4618      	mov	r0, r3
 8010be6:	f7fd fed1 	bl	800e98c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	3312      	adds	r3, #18
 8010bee:	2100      	movs	r1, #0
 8010bf0:	4618      	mov	r0, r3
 8010bf2:	f7fd feb0 	bl	800e956 <st_word>
					fs->wflag = 1;
 8010bf6:	68bb      	ldr	r3, [r7, #8]
 8010bf8:	2201      	movs	r2, #1
 8010bfa:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010bfc:	68bb      	ldr	r3, [r7, #8]
 8010bfe:	4618      	mov	r0, r3
 8010c00:	f7fe f910 	bl	800ee24 <sync_fs>
 8010c04:	4603      	mov	r3, r0
 8010c06:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	7d1b      	ldrb	r3, [r3, #20]
 8010c0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010c10:	b2da      	uxtb	r2, r3
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c18:	4618      	mov	r0, r3
 8010c1a:	3718      	adds	r7, #24
 8010c1c:	46bd      	mov	sp, r7
 8010c1e:	bd80      	pop	{r7, pc}

08010c20 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8010c20:	b580      	push	{r7, lr}
 8010c22:	b090      	sub	sp, #64	; 0x40
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	6078      	str	r0, [r7, #4]
 8010c28:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8010c2a:	f107 010c 	add.w	r1, r7, #12
 8010c2e:	1d3b      	adds	r3, r7, #4
 8010c30:	2200      	movs	r2, #0
 8010c32:	4618      	mov	r0, r3
 8010c34:	f7ff f91a 	bl	800fe6c <find_volume>
 8010c38:	4603      	mov	r3, r0
 8010c3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8010c3e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d11f      	bne.n	8010c86 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010c46:	687a      	ldr	r2, [r7, #4]
 8010c48:	f107 030c 	add.w	r3, r7, #12
 8010c4c:	4611      	mov	r1, r2
 8010c4e:	4618      	mov	r0, r3
 8010c50:	f7fe fffc 	bl	800fc4c <follow_path>
 8010c54:	4603      	mov	r3, r0
 8010c56:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8010c5a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d111      	bne.n	8010c86 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8010c62:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010c66:	b25b      	sxtb	r3, r3
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	da03      	bge.n	8010c74 <f_stat+0x54>
				res = FR_INVALID_NAME;
 8010c6c:	2306      	movs	r3, #6
 8010c6e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010c72:	e008      	b.n	8010c86 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8010c74:	683b      	ldr	r3, [r7, #0]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d005      	beq.n	8010c86 <f_stat+0x66>
 8010c7a:	f107 030c 	add.w	r3, r7, #12
 8010c7e:	6839      	ldr	r1, [r7, #0]
 8010c80:	4618      	mov	r0, r3
 8010c82:	f7fe feef 	bl	800fa64 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8010c86:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	3740      	adds	r7, #64	; 0x40
 8010c8e:	46bd      	mov	sp, r7
 8010c90:	bd80      	pop	{r7, pc}
	...

08010c94 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010c94:	b480      	push	{r7}
 8010c96:	b087      	sub	sp, #28
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	60f8      	str	r0, [r7, #12]
 8010c9c:	60b9      	str	r1, [r7, #8]
 8010c9e:	4613      	mov	r3, r2
 8010ca0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010ca2:	2301      	movs	r3, #1
 8010ca4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010caa:	4b1f      	ldr	r3, [pc, #124]	; (8010d28 <FATFS_LinkDriverEx+0x94>)
 8010cac:	7a5b      	ldrb	r3, [r3, #9]
 8010cae:	b2db      	uxtb	r3, r3
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d131      	bne.n	8010d18 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010cb4:	4b1c      	ldr	r3, [pc, #112]	; (8010d28 <FATFS_LinkDriverEx+0x94>)
 8010cb6:	7a5b      	ldrb	r3, [r3, #9]
 8010cb8:	b2db      	uxtb	r3, r3
 8010cba:	461a      	mov	r2, r3
 8010cbc:	4b1a      	ldr	r3, [pc, #104]	; (8010d28 <FATFS_LinkDriverEx+0x94>)
 8010cbe:	2100      	movs	r1, #0
 8010cc0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010cc2:	4b19      	ldr	r3, [pc, #100]	; (8010d28 <FATFS_LinkDriverEx+0x94>)
 8010cc4:	7a5b      	ldrb	r3, [r3, #9]
 8010cc6:	b2db      	uxtb	r3, r3
 8010cc8:	4a17      	ldr	r2, [pc, #92]	; (8010d28 <FATFS_LinkDriverEx+0x94>)
 8010cca:	009b      	lsls	r3, r3, #2
 8010ccc:	4413      	add	r3, r2
 8010cce:	68fa      	ldr	r2, [r7, #12]
 8010cd0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010cd2:	4b15      	ldr	r3, [pc, #84]	; (8010d28 <FATFS_LinkDriverEx+0x94>)
 8010cd4:	7a5b      	ldrb	r3, [r3, #9]
 8010cd6:	b2db      	uxtb	r3, r3
 8010cd8:	461a      	mov	r2, r3
 8010cda:	4b13      	ldr	r3, [pc, #76]	; (8010d28 <FATFS_LinkDriverEx+0x94>)
 8010cdc:	4413      	add	r3, r2
 8010cde:	79fa      	ldrb	r2, [r7, #7]
 8010ce0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010ce2:	4b11      	ldr	r3, [pc, #68]	; (8010d28 <FATFS_LinkDriverEx+0x94>)
 8010ce4:	7a5b      	ldrb	r3, [r3, #9]
 8010ce6:	b2db      	uxtb	r3, r3
 8010ce8:	1c5a      	adds	r2, r3, #1
 8010cea:	b2d1      	uxtb	r1, r2
 8010cec:	4a0e      	ldr	r2, [pc, #56]	; (8010d28 <FATFS_LinkDriverEx+0x94>)
 8010cee:	7251      	strb	r1, [r2, #9]
 8010cf0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010cf2:	7dbb      	ldrb	r3, [r7, #22]
 8010cf4:	3330      	adds	r3, #48	; 0x30
 8010cf6:	b2da      	uxtb	r2, r3
 8010cf8:	68bb      	ldr	r3, [r7, #8]
 8010cfa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010cfc:	68bb      	ldr	r3, [r7, #8]
 8010cfe:	3301      	adds	r3, #1
 8010d00:	223a      	movs	r2, #58	; 0x3a
 8010d02:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010d04:	68bb      	ldr	r3, [r7, #8]
 8010d06:	3302      	adds	r3, #2
 8010d08:	222f      	movs	r2, #47	; 0x2f
 8010d0a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010d0c:	68bb      	ldr	r3, [r7, #8]
 8010d0e:	3303      	adds	r3, #3
 8010d10:	2200      	movs	r2, #0
 8010d12:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010d14:	2300      	movs	r3, #0
 8010d16:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010d18:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	371c      	adds	r7, #28
 8010d1e:	46bd      	mov	sp, r7
 8010d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d24:	4770      	bx	lr
 8010d26:	bf00      	nop
 8010d28:	2000651c 	.word	0x2000651c

08010d2c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010d2c:	b580      	push	{r7, lr}
 8010d2e:	b082      	sub	sp, #8
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	6078      	str	r0, [r7, #4]
 8010d34:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010d36:	2200      	movs	r2, #0
 8010d38:	6839      	ldr	r1, [r7, #0]
 8010d3a:	6878      	ldr	r0, [r7, #4]
 8010d3c:	f7ff ffaa 	bl	8010c94 <FATFS_LinkDriverEx>
 8010d40:	4603      	mov	r3, r0
}
 8010d42:	4618      	mov	r0, r3
 8010d44:	3708      	adds	r7, #8
 8010d46:	46bd      	mov	sp, r7
 8010d48:	bd80      	pop	{r7, pc}
	...

08010d4c <__libc_init_array>:
 8010d4c:	b570      	push	{r4, r5, r6, lr}
 8010d4e:	4d0d      	ldr	r5, [pc, #52]	; (8010d84 <__libc_init_array+0x38>)
 8010d50:	4c0d      	ldr	r4, [pc, #52]	; (8010d88 <__libc_init_array+0x3c>)
 8010d52:	1b64      	subs	r4, r4, r5
 8010d54:	10a4      	asrs	r4, r4, #2
 8010d56:	2600      	movs	r6, #0
 8010d58:	42a6      	cmp	r6, r4
 8010d5a:	d109      	bne.n	8010d70 <__libc_init_array+0x24>
 8010d5c:	4d0b      	ldr	r5, [pc, #44]	; (8010d8c <__libc_init_array+0x40>)
 8010d5e:	4c0c      	ldr	r4, [pc, #48]	; (8010d90 <__libc_init_array+0x44>)
 8010d60:	f006 fb22 	bl	80173a8 <_init>
 8010d64:	1b64      	subs	r4, r4, r5
 8010d66:	10a4      	asrs	r4, r4, #2
 8010d68:	2600      	movs	r6, #0
 8010d6a:	42a6      	cmp	r6, r4
 8010d6c:	d105      	bne.n	8010d7a <__libc_init_array+0x2e>
 8010d6e:	bd70      	pop	{r4, r5, r6, pc}
 8010d70:	f855 3b04 	ldr.w	r3, [r5], #4
 8010d74:	4798      	blx	r3
 8010d76:	3601      	adds	r6, #1
 8010d78:	e7ee      	b.n	8010d58 <__libc_init_array+0xc>
 8010d7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8010d7e:	4798      	blx	r3
 8010d80:	3601      	adds	r6, #1
 8010d82:	e7f2      	b.n	8010d6a <__libc_init_array+0x1e>
 8010d84:	080193e0 	.word	0x080193e0
 8010d88:	080193e0 	.word	0x080193e0
 8010d8c:	080193e0 	.word	0x080193e0
 8010d90:	080193e8 	.word	0x080193e8

08010d94 <malloc>:
 8010d94:	4b02      	ldr	r3, [pc, #8]	; (8010da0 <malloc+0xc>)
 8010d96:	4601      	mov	r1, r0
 8010d98:	6818      	ldr	r0, [r3, #0]
 8010d9a:	f000 b803 	b.w	8010da4 <_malloc_r>
 8010d9e:	bf00      	nop
 8010da0:	20000408 	.word	0x20000408

08010da4 <_malloc_r>:
 8010da4:	f101 030b 	add.w	r3, r1, #11
 8010da8:	2b16      	cmp	r3, #22
 8010daa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dae:	4605      	mov	r5, r0
 8010db0:	d906      	bls.n	8010dc0 <_malloc_r+0x1c>
 8010db2:	f033 0707 	bics.w	r7, r3, #7
 8010db6:	d504      	bpl.n	8010dc2 <_malloc_r+0x1e>
 8010db8:	230c      	movs	r3, #12
 8010dba:	602b      	str	r3, [r5, #0]
 8010dbc:	2400      	movs	r4, #0
 8010dbe:	e1a5      	b.n	801110c <_malloc_r+0x368>
 8010dc0:	2710      	movs	r7, #16
 8010dc2:	42b9      	cmp	r1, r7
 8010dc4:	d8f8      	bhi.n	8010db8 <_malloc_r+0x14>
 8010dc6:	4628      	mov	r0, r5
 8010dc8:	f000 fa30 	bl	801122c <__malloc_lock>
 8010dcc:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 8010dd0:	4eb0      	ldr	r6, [pc, #704]	; (8011094 <_malloc_r+0x2f0>)
 8010dd2:	d237      	bcs.n	8010e44 <_malloc_r+0xa0>
 8010dd4:	f107 0208 	add.w	r2, r7, #8
 8010dd8:	4432      	add	r2, r6
 8010dda:	f1a2 0108 	sub.w	r1, r2, #8
 8010dde:	6854      	ldr	r4, [r2, #4]
 8010de0:	428c      	cmp	r4, r1
 8010de2:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8010de6:	d102      	bne.n	8010dee <_malloc_r+0x4a>
 8010de8:	68d4      	ldr	r4, [r2, #12]
 8010dea:	42a2      	cmp	r2, r4
 8010dec:	d010      	beq.n	8010e10 <_malloc_r+0x6c>
 8010dee:	6863      	ldr	r3, [r4, #4]
 8010df0:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8010df4:	f023 0303 	bic.w	r3, r3, #3
 8010df8:	60ca      	str	r2, [r1, #12]
 8010dfa:	4423      	add	r3, r4
 8010dfc:	6091      	str	r1, [r2, #8]
 8010dfe:	685a      	ldr	r2, [r3, #4]
 8010e00:	f042 0201 	orr.w	r2, r2, #1
 8010e04:	605a      	str	r2, [r3, #4]
 8010e06:	4628      	mov	r0, r5
 8010e08:	f000 fa16 	bl	8011238 <__malloc_unlock>
 8010e0c:	3408      	adds	r4, #8
 8010e0e:	e17d      	b.n	801110c <_malloc_r+0x368>
 8010e10:	3302      	adds	r3, #2
 8010e12:	6934      	ldr	r4, [r6, #16]
 8010e14:	49a0      	ldr	r1, [pc, #640]	; (8011098 <_malloc_r+0x2f4>)
 8010e16:	428c      	cmp	r4, r1
 8010e18:	d077      	beq.n	8010f0a <_malloc_r+0x166>
 8010e1a:	6862      	ldr	r2, [r4, #4]
 8010e1c:	f022 0c03 	bic.w	ip, r2, #3
 8010e20:	ebac 0007 	sub.w	r0, ip, r7
 8010e24:	280f      	cmp	r0, #15
 8010e26:	dd48      	ble.n	8010eba <_malloc_r+0x116>
 8010e28:	19e2      	adds	r2, r4, r7
 8010e2a:	f040 0301 	orr.w	r3, r0, #1
 8010e2e:	f047 0701 	orr.w	r7, r7, #1
 8010e32:	6067      	str	r7, [r4, #4]
 8010e34:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8010e38:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8010e3c:	6053      	str	r3, [r2, #4]
 8010e3e:	f844 000c 	str.w	r0, [r4, ip]
 8010e42:	e7e0      	b.n	8010e06 <_malloc_r+0x62>
 8010e44:	0a7b      	lsrs	r3, r7, #9
 8010e46:	d02a      	beq.n	8010e9e <_malloc_r+0xfa>
 8010e48:	2b04      	cmp	r3, #4
 8010e4a:	d812      	bhi.n	8010e72 <_malloc_r+0xce>
 8010e4c:	09bb      	lsrs	r3, r7, #6
 8010e4e:	3338      	adds	r3, #56	; 0x38
 8010e50:	1c5a      	adds	r2, r3, #1
 8010e52:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8010e56:	f1a2 0c08 	sub.w	ip, r2, #8
 8010e5a:	6854      	ldr	r4, [r2, #4]
 8010e5c:	4564      	cmp	r4, ip
 8010e5e:	d006      	beq.n	8010e6e <_malloc_r+0xca>
 8010e60:	6862      	ldr	r2, [r4, #4]
 8010e62:	f022 0203 	bic.w	r2, r2, #3
 8010e66:	1bd0      	subs	r0, r2, r7
 8010e68:	280f      	cmp	r0, #15
 8010e6a:	dd1c      	ble.n	8010ea6 <_malloc_r+0x102>
 8010e6c:	3b01      	subs	r3, #1
 8010e6e:	3301      	adds	r3, #1
 8010e70:	e7cf      	b.n	8010e12 <_malloc_r+0x6e>
 8010e72:	2b14      	cmp	r3, #20
 8010e74:	d801      	bhi.n	8010e7a <_malloc_r+0xd6>
 8010e76:	335b      	adds	r3, #91	; 0x5b
 8010e78:	e7ea      	b.n	8010e50 <_malloc_r+0xac>
 8010e7a:	2b54      	cmp	r3, #84	; 0x54
 8010e7c:	d802      	bhi.n	8010e84 <_malloc_r+0xe0>
 8010e7e:	0b3b      	lsrs	r3, r7, #12
 8010e80:	336e      	adds	r3, #110	; 0x6e
 8010e82:	e7e5      	b.n	8010e50 <_malloc_r+0xac>
 8010e84:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8010e88:	d802      	bhi.n	8010e90 <_malloc_r+0xec>
 8010e8a:	0bfb      	lsrs	r3, r7, #15
 8010e8c:	3377      	adds	r3, #119	; 0x77
 8010e8e:	e7df      	b.n	8010e50 <_malloc_r+0xac>
 8010e90:	f240 5254 	movw	r2, #1364	; 0x554
 8010e94:	4293      	cmp	r3, r2
 8010e96:	d804      	bhi.n	8010ea2 <_malloc_r+0xfe>
 8010e98:	0cbb      	lsrs	r3, r7, #18
 8010e9a:	337c      	adds	r3, #124	; 0x7c
 8010e9c:	e7d8      	b.n	8010e50 <_malloc_r+0xac>
 8010e9e:	233f      	movs	r3, #63	; 0x3f
 8010ea0:	e7d6      	b.n	8010e50 <_malloc_r+0xac>
 8010ea2:	237e      	movs	r3, #126	; 0x7e
 8010ea4:	e7d4      	b.n	8010e50 <_malloc_r+0xac>
 8010ea6:	2800      	cmp	r0, #0
 8010ea8:	68e1      	ldr	r1, [r4, #12]
 8010eaa:	db04      	blt.n	8010eb6 <_malloc_r+0x112>
 8010eac:	68a3      	ldr	r3, [r4, #8]
 8010eae:	60d9      	str	r1, [r3, #12]
 8010eb0:	608b      	str	r3, [r1, #8]
 8010eb2:	18a3      	adds	r3, r4, r2
 8010eb4:	e7a3      	b.n	8010dfe <_malloc_r+0x5a>
 8010eb6:	460c      	mov	r4, r1
 8010eb8:	e7d0      	b.n	8010e5c <_malloc_r+0xb8>
 8010eba:	2800      	cmp	r0, #0
 8010ebc:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8010ec0:	db07      	blt.n	8010ed2 <_malloc_r+0x12e>
 8010ec2:	44a4      	add	ip, r4
 8010ec4:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8010ec8:	f043 0301 	orr.w	r3, r3, #1
 8010ecc:	f8cc 3004 	str.w	r3, [ip, #4]
 8010ed0:	e799      	b.n	8010e06 <_malloc_r+0x62>
 8010ed2:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8010ed6:	6870      	ldr	r0, [r6, #4]
 8010ed8:	f080 8096 	bcs.w	8011008 <_malloc_r+0x264>
 8010edc:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8010ee0:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8010ee4:	f04f 0c01 	mov.w	ip, #1
 8010ee8:	3201      	adds	r2, #1
 8010eea:	fa0c fc0e 	lsl.w	ip, ip, lr
 8010eee:	ea4c 0000 	orr.w	r0, ip, r0
 8010ef2:	6070      	str	r0, [r6, #4]
 8010ef4:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8010ef8:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8010efc:	3808      	subs	r0, #8
 8010efe:	e9c4 c002 	strd	ip, r0, [r4, #8]
 8010f02:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 8010f06:	f8cc 400c 	str.w	r4, [ip, #12]
 8010f0a:	2001      	movs	r0, #1
 8010f0c:	109a      	asrs	r2, r3, #2
 8010f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8010f12:	6870      	ldr	r0, [r6, #4]
 8010f14:	4290      	cmp	r0, r2
 8010f16:	d326      	bcc.n	8010f66 <_malloc_r+0x1c2>
 8010f18:	4210      	tst	r0, r2
 8010f1a:	d106      	bne.n	8010f2a <_malloc_r+0x186>
 8010f1c:	f023 0303 	bic.w	r3, r3, #3
 8010f20:	0052      	lsls	r2, r2, #1
 8010f22:	4210      	tst	r0, r2
 8010f24:	f103 0304 	add.w	r3, r3, #4
 8010f28:	d0fa      	beq.n	8010f20 <_malloc_r+0x17c>
 8010f2a:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 8010f2e:	46c1      	mov	r9, r8
 8010f30:	469e      	mov	lr, r3
 8010f32:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8010f36:	454c      	cmp	r4, r9
 8010f38:	f040 80ba 	bne.w	80110b0 <_malloc_r+0x30c>
 8010f3c:	f10e 0e01 	add.w	lr, lr, #1
 8010f40:	f01e 0f03 	tst.w	lr, #3
 8010f44:	f109 0908 	add.w	r9, r9, #8
 8010f48:	d1f3      	bne.n	8010f32 <_malloc_r+0x18e>
 8010f4a:	0798      	lsls	r0, r3, #30
 8010f4c:	f040 80e4 	bne.w	8011118 <_malloc_r+0x374>
 8010f50:	6873      	ldr	r3, [r6, #4]
 8010f52:	ea23 0302 	bic.w	r3, r3, r2
 8010f56:	6073      	str	r3, [r6, #4]
 8010f58:	6870      	ldr	r0, [r6, #4]
 8010f5a:	0052      	lsls	r2, r2, #1
 8010f5c:	4290      	cmp	r0, r2
 8010f5e:	d302      	bcc.n	8010f66 <_malloc_r+0x1c2>
 8010f60:	2a00      	cmp	r2, #0
 8010f62:	f040 80e6 	bne.w	8011132 <_malloc_r+0x38e>
 8010f66:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8010f6a:	f8da 3004 	ldr.w	r3, [sl, #4]
 8010f6e:	f023 0903 	bic.w	r9, r3, #3
 8010f72:	45b9      	cmp	r9, r7
 8010f74:	d304      	bcc.n	8010f80 <_malloc_r+0x1dc>
 8010f76:	eba9 0207 	sub.w	r2, r9, r7
 8010f7a:	2a0f      	cmp	r2, #15
 8010f7c:	f300 8142 	bgt.w	8011204 <_malloc_r+0x460>
 8010f80:	4b46      	ldr	r3, [pc, #280]	; (801109c <_malloc_r+0x2f8>)
 8010f82:	6819      	ldr	r1, [r3, #0]
 8010f84:	3110      	adds	r1, #16
 8010f86:	4439      	add	r1, r7
 8010f88:	2008      	movs	r0, #8
 8010f8a:	9101      	str	r1, [sp, #4]
 8010f8c:	f001 fbf2 	bl	8012774 <sysconf>
 8010f90:	4a43      	ldr	r2, [pc, #268]	; (80110a0 <_malloc_r+0x2fc>)
 8010f92:	9901      	ldr	r1, [sp, #4]
 8010f94:	6813      	ldr	r3, [r2, #0]
 8010f96:	3301      	adds	r3, #1
 8010f98:	bf1f      	itttt	ne
 8010f9a:	f101 31ff 	addne.w	r1, r1, #4294967295
 8010f9e:	1809      	addne	r1, r1, r0
 8010fa0:	4243      	negne	r3, r0
 8010fa2:	4019      	andne	r1, r3
 8010fa4:	4680      	mov	r8, r0
 8010fa6:	4628      	mov	r0, r5
 8010fa8:	9101      	str	r1, [sp, #4]
 8010faa:	f000 f9b3 	bl	8011314 <_sbrk_r>
 8010fae:	1c42      	adds	r2, r0, #1
 8010fb0:	eb0a 0b09 	add.w	fp, sl, r9
 8010fb4:	4604      	mov	r4, r0
 8010fb6:	f000 80f8 	beq.w	80111aa <_malloc_r+0x406>
 8010fba:	4583      	cmp	fp, r0
 8010fbc:	9901      	ldr	r1, [sp, #4]
 8010fbe:	4a38      	ldr	r2, [pc, #224]	; (80110a0 <_malloc_r+0x2fc>)
 8010fc0:	d902      	bls.n	8010fc8 <_malloc_r+0x224>
 8010fc2:	45b2      	cmp	sl, r6
 8010fc4:	f040 80f1 	bne.w	80111aa <_malloc_r+0x406>
 8010fc8:	4b36      	ldr	r3, [pc, #216]	; (80110a4 <_malloc_r+0x300>)
 8010fca:	6818      	ldr	r0, [r3, #0]
 8010fcc:	45a3      	cmp	fp, r4
 8010fce:	eb00 0e01 	add.w	lr, r0, r1
 8010fd2:	f8c3 e000 	str.w	lr, [r3]
 8010fd6:	f108 3cff 	add.w	ip, r8, #4294967295
 8010fda:	f040 80ac 	bne.w	8011136 <_malloc_r+0x392>
 8010fde:	ea1b 0f0c 	tst.w	fp, ip
 8010fe2:	f040 80a8 	bne.w	8011136 <_malloc_r+0x392>
 8010fe6:	68b2      	ldr	r2, [r6, #8]
 8010fe8:	4449      	add	r1, r9
 8010fea:	f041 0101 	orr.w	r1, r1, #1
 8010fee:	6051      	str	r1, [r2, #4]
 8010ff0:	4a2d      	ldr	r2, [pc, #180]	; (80110a8 <_malloc_r+0x304>)
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	6811      	ldr	r1, [r2, #0]
 8010ff6:	428b      	cmp	r3, r1
 8010ff8:	bf88      	it	hi
 8010ffa:	6013      	strhi	r3, [r2, #0]
 8010ffc:	4a2b      	ldr	r2, [pc, #172]	; (80110ac <_malloc_r+0x308>)
 8010ffe:	6811      	ldr	r1, [r2, #0]
 8011000:	428b      	cmp	r3, r1
 8011002:	bf88      	it	hi
 8011004:	6013      	strhi	r3, [r2, #0]
 8011006:	e0d0      	b.n	80111aa <_malloc_r+0x406>
 8011008:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 801100c:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8011010:	d218      	bcs.n	8011044 <_malloc_r+0x2a0>
 8011012:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8011016:	3238      	adds	r2, #56	; 0x38
 8011018:	f102 0e01 	add.w	lr, r2, #1
 801101c:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 8011020:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 8011024:	45f0      	cmp	r8, lr
 8011026:	d12b      	bne.n	8011080 <_malloc_r+0x2dc>
 8011028:	1092      	asrs	r2, r2, #2
 801102a:	f04f 0c01 	mov.w	ip, #1
 801102e:	fa0c f202 	lsl.w	r2, ip, r2
 8011032:	4310      	orrs	r0, r2
 8011034:	6070      	str	r0, [r6, #4]
 8011036:	e9c4 e802 	strd	lr, r8, [r4, #8]
 801103a:	f8c8 4008 	str.w	r4, [r8, #8]
 801103e:	f8ce 400c 	str.w	r4, [lr, #12]
 8011042:	e762      	b.n	8010f0a <_malloc_r+0x166>
 8011044:	2a14      	cmp	r2, #20
 8011046:	d801      	bhi.n	801104c <_malloc_r+0x2a8>
 8011048:	325b      	adds	r2, #91	; 0x5b
 801104a:	e7e5      	b.n	8011018 <_malloc_r+0x274>
 801104c:	2a54      	cmp	r2, #84	; 0x54
 801104e:	d803      	bhi.n	8011058 <_malloc_r+0x2b4>
 8011050:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8011054:	326e      	adds	r2, #110	; 0x6e
 8011056:	e7df      	b.n	8011018 <_malloc_r+0x274>
 8011058:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 801105c:	d803      	bhi.n	8011066 <_malloc_r+0x2c2>
 801105e:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8011062:	3277      	adds	r2, #119	; 0x77
 8011064:	e7d8      	b.n	8011018 <_malloc_r+0x274>
 8011066:	f240 5e54 	movw	lr, #1364	; 0x554
 801106a:	4572      	cmp	r2, lr
 801106c:	bf9a      	itte	ls
 801106e:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8011072:	327c      	addls	r2, #124	; 0x7c
 8011074:	227e      	movhi	r2, #126	; 0x7e
 8011076:	e7cf      	b.n	8011018 <_malloc_r+0x274>
 8011078:	f8de e008 	ldr.w	lr, [lr, #8]
 801107c:	45f0      	cmp	r8, lr
 801107e:	d005      	beq.n	801108c <_malloc_r+0x2e8>
 8011080:	f8de 2004 	ldr.w	r2, [lr, #4]
 8011084:	f022 0203 	bic.w	r2, r2, #3
 8011088:	4562      	cmp	r2, ip
 801108a:	d8f5      	bhi.n	8011078 <_malloc_r+0x2d4>
 801108c:	f8de 800c 	ldr.w	r8, [lr, #12]
 8011090:	e7d1      	b.n	8011036 <_malloc_r+0x292>
 8011092:	bf00      	nop
 8011094:	20000838 	.word	0x20000838
 8011098:	20000840 	.word	0x20000840
 801109c:	20006558 	.word	0x20006558
 80110a0:	20000c40 	.word	0x20000c40
 80110a4:	20006528 	.word	0x20006528
 80110a8:	20006550 	.word	0x20006550
 80110ac:	20006554 	.word	0x20006554
 80110b0:	6860      	ldr	r0, [r4, #4]
 80110b2:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80110b6:	f020 0003 	bic.w	r0, r0, #3
 80110ba:	eba0 0a07 	sub.w	sl, r0, r7
 80110be:	f1ba 0f0f 	cmp.w	sl, #15
 80110c2:	dd12      	ble.n	80110ea <_malloc_r+0x346>
 80110c4:	68a3      	ldr	r3, [r4, #8]
 80110c6:	19e2      	adds	r2, r4, r7
 80110c8:	f047 0701 	orr.w	r7, r7, #1
 80110cc:	6067      	str	r7, [r4, #4]
 80110ce:	f8c3 c00c 	str.w	ip, [r3, #12]
 80110d2:	f8cc 3008 	str.w	r3, [ip, #8]
 80110d6:	f04a 0301 	orr.w	r3, sl, #1
 80110da:	e9c6 2204 	strd	r2, r2, [r6, #16]
 80110de:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80110e2:	6053      	str	r3, [r2, #4]
 80110e4:	f844 a000 	str.w	sl, [r4, r0]
 80110e8:	e68d      	b.n	8010e06 <_malloc_r+0x62>
 80110ea:	f1ba 0f00 	cmp.w	sl, #0
 80110ee:	db11      	blt.n	8011114 <_malloc_r+0x370>
 80110f0:	4420      	add	r0, r4
 80110f2:	6843      	ldr	r3, [r0, #4]
 80110f4:	f043 0301 	orr.w	r3, r3, #1
 80110f8:	6043      	str	r3, [r0, #4]
 80110fa:	f854 3f08 	ldr.w	r3, [r4, #8]!
 80110fe:	4628      	mov	r0, r5
 8011100:	f8c3 c00c 	str.w	ip, [r3, #12]
 8011104:	f8cc 3008 	str.w	r3, [ip, #8]
 8011108:	f000 f896 	bl	8011238 <__malloc_unlock>
 801110c:	4620      	mov	r0, r4
 801110e:	b003      	add	sp, #12
 8011110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011114:	4664      	mov	r4, ip
 8011116:	e70e      	b.n	8010f36 <_malloc_r+0x192>
 8011118:	f858 0908 	ldr.w	r0, [r8], #-8
 801111c:	4540      	cmp	r0, r8
 801111e:	f103 33ff 	add.w	r3, r3, #4294967295
 8011122:	f43f af12 	beq.w	8010f4a <_malloc_r+0x1a6>
 8011126:	e717      	b.n	8010f58 <_malloc_r+0x1b4>
 8011128:	3304      	adds	r3, #4
 801112a:	0052      	lsls	r2, r2, #1
 801112c:	4210      	tst	r0, r2
 801112e:	d0fb      	beq.n	8011128 <_malloc_r+0x384>
 8011130:	e6fb      	b.n	8010f2a <_malloc_r+0x186>
 8011132:	4673      	mov	r3, lr
 8011134:	e7fa      	b.n	801112c <_malloc_r+0x388>
 8011136:	6810      	ldr	r0, [r2, #0]
 8011138:	3001      	adds	r0, #1
 801113a:	bf1b      	ittet	ne
 801113c:	eba4 0b0b 	subne.w	fp, r4, fp
 8011140:	eb0b 020e 	addne.w	r2, fp, lr
 8011144:	6014      	streq	r4, [r2, #0]
 8011146:	601a      	strne	r2, [r3, #0]
 8011148:	f014 0b07 	ands.w	fp, r4, #7
 801114c:	bf1a      	itte	ne
 801114e:	f1cb 0008 	rsbne	r0, fp, #8
 8011152:	1824      	addne	r4, r4, r0
 8011154:	4658      	moveq	r0, fp
 8011156:	1862      	adds	r2, r4, r1
 8011158:	ea02 010c 	and.w	r1, r2, ip
 801115c:	4480      	add	r8, r0
 801115e:	eba8 0801 	sub.w	r8, r8, r1
 8011162:	ea08 080c 	and.w	r8, r8, ip
 8011166:	4641      	mov	r1, r8
 8011168:	4628      	mov	r0, r5
 801116a:	9201      	str	r2, [sp, #4]
 801116c:	f000 f8d2 	bl	8011314 <_sbrk_r>
 8011170:	1c43      	adds	r3, r0, #1
 8011172:	9a01      	ldr	r2, [sp, #4]
 8011174:	4b28      	ldr	r3, [pc, #160]	; (8011218 <_malloc_r+0x474>)
 8011176:	d107      	bne.n	8011188 <_malloc_r+0x3e4>
 8011178:	f1bb 0f00 	cmp.w	fp, #0
 801117c:	d023      	beq.n	80111c6 <_malloc_r+0x422>
 801117e:	f1ab 0008 	sub.w	r0, fp, #8
 8011182:	4410      	add	r0, r2
 8011184:	f04f 0800 	mov.w	r8, #0
 8011188:	681a      	ldr	r2, [r3, #0]
 801118a:	60b4      	str	r4, [r6, #8]
 801118c:	1b00      	subs	r0, r0, r4
 801118e:	4440      	add	r0, r8
 8011190:	4442      	add	r2, r8
 8011192:	f040 0001 	orr.w	r0, r0, #1
 8011196:	45b2      	cmp	sl, r6
 8011198:	601a      	str	r2, [r3, #0]
 801119a:	6060      	str	r0, [r4, #4]
 801119c:	f43f af28 	beq.w	8010ff0 <_malloc_r+0x24c>
 80111a0:	f1b9 0f0f 	cmp.w	r9, #15
 80111a4:	d812      	bhi.n	80111cc <_malloc_r+0x428>
 80111a6:	2301      	movs	r3, #1
 80111a8:	6063      	str	r3, [r4, #4]
 80111aa:	68b3      	ldr	r3, [r6, #8]
 80111ac:	685b      	ldr	r3, [r3, #4]
 80111ae:	f023 0303 	bic.w	r3, r3, #3
 80111b2:	42bb      	cmp	r3, r7
 80111b4:	eba3 0207 	sub.w	r2, r3, r7
 80111b8:	d301      	bcc.n	80111be <_malloc_r+0x41a>
 80111ba:	2a0f      	cmp	r2, #15
 80111bc:	dc22      	bgt.n	8011204 <_malloc_r+0x460>
 80111be:	4628      	mov	r0, r5
 80111c0:	f000 f83a 	bl	8011238 <__malloc_unlock>
 80111c4:	e5fa      	b.n	8010dbc <_malloc_r+0x18>
 80111c6:	4610      	mov	r0, r2
 80111c8:	46d8      	mov	r8, fp
 80111ca:	e7dd      	b.n	8011188 <_malloc_r+0x3e4>
 80111cc:	f8da 2004 	ldr.w	r2, [sl, #4]
 80111d0:	f1a9 090c 	sub.w	r9, r9, #12
 80111d4:	f029 0907 	bic.w	r9, r9, #7
 80111d8:	f002 0201 	and.w	r2, r2, #1
 80111dc:	ea42 0209 	orr.w	r2, r2, r9
 80111e0:	f8ca 2004 	str.w	r2, [sl, #4]
 80111e4:	2105      	movs	r1, #5
 80111e6:	eb0a 0209 	add.w	r2, sl, r9
 80111ea:	f1b9 0f0f 	cmp.w	r9, #15
 80111ee:	e9c2 1101 	strd	r1, r1, [r2, #4]
 80111f2:	f67f aefd 	bls.w	8010ff0 <_malloc_r+0x24c>
 80111f6:	f10a 0108 	add.w	r1, sl, #8
 80111fa:	4628      	mov	r0, r5
 80111fc:	f003 fd06 	bl	8014c0c <_free_r>
 8011200:	4b05      	ldr	r3, [pc, #20]	; (8011218 <_malloc_r+0x474>)
 8011202:	e6f5      	b.n	8010ff0 <_malloc_r+0x24c>
 8011204:	68b4      	ldr	r4, [r6, #8]
 8011206:	f047 0301 	orr.w	r3, r7, #1
 801120a:	4427      	add	r7, r4
 801120c:	f042 0201 	orr.w	r2, r2, #1
 8011210:	6063      	str	r3, [r4, #4]
 8011212:	60b7      	str	r7, [r6, #8]
 8011214:	607a      	str	r2, [r7, #4]
 8011216:	e5f6      	b.n	8010e06 <_malloc_r+0x62>
 8011218:	20006528 	.word	0x20006528

0801121c <memset>:
 801121c:	4402      	add	r2, r0
 801121e:	4603      	mov	r3, r0
 8011220:	4293      	cmp	r3, r2
 8011222:	d100      	bne.n	8011226 <memset+0xa>
 8011224:	4770      	bx	lr
 8011226:	f803 1b01 	strb.w	r1, [r3], #1
 801122a:	e7f9      	b.n	8011220 <memset+0x4>

0801122c <__malloc_lock>:
 801122c:	4801      	ldr	r0, [pc, #4]	; (8011234 <__malloc_lock+0x8>)
 801122e:	f003 bf1d 	b.w	801506c <__retarget_lock_acquire_recursive>
 8011232:	bf00      	nop
 8011234:	2000655d 	.word	0x2000655d

08011238 <__malloc_unlock>:
 8011238:	4801      	ldr	r0, [pc, #4]	; (8011240 <__malloc_unlock+0x8>)
 801123a:	f003 bf18 	b.w	801506e <__retarget_lock_release_recursive>
 801123e:	bf00      	nop
 8011240:	2000655d 	.word	0x2000655d

08011244 <printf>:
 8011244:	b40f      	push	{r0, r1, r2, r3}
 8011246:	b507      	push	{r0, r1, r2, lr}
 8011248:	4906      	ldr	r1, [pc, #24]	; (8011264 <printf+0x20>)
 801124a:	ab04      	add	r3, sp, #16
 801124c:	6808      	ldr	r0, [r1, #0]
 801124e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011252:	6881      	ldr	r1, [r0, #8]
 8011254:	9301      	str	r3, [sp, #4]
 8011256:	f001 fa9b 	bl	8012790 <_vfprintf_r>
 801125a:	b003      	add	sp, #12
 801125c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011260:	b004      	add	sp, #16
 8011262:	4770      	bx	lr
 8011264:	20000408 	.word	0x20000408

08011268 <putchar>:
 8011268:	4b02      	ldr	r3, [pc, #8]	; (8011274 <putchar+0xc>)
 801126a:	4601      	mov	r1, r0
 801126c:	6818      	ldr	r0, [r3, #0]
 801126e:	6882      	ldr	r2, [r0, #8]
 8011270:	f004 bac8 	b.w	8015804 <_putc_r>
 8011274:	20000408 	.word	0x20000408

08011278 <_puts_r>:
 8011278:	b530      	push	{r4, r5, lr}
 801127a:	4605      	mov	r5, r0
 801127c:	b089      	sub	sp, #36	; 0x24
 801127e:	4608      	mov	r0, r1
 8011280:	460c      	mov	r4, r1
 8011282:	f7ee ffdd 	bl	8000240 <strlen>
 8011286:	4b1e      	ldr	r3, [pc, #120]	; (8011300 <_puts_r+0x88>)
 8011288:	9306      	str	r3, [sp, #24]
 801128a:	2301      	movs	r3, #1
 801128c:	e9cd 4004 	strd	r4, r0, [sp, #16]
 8011290:	9307      	str	r3, [sp, #28]
 8011292:	4418      	add	r0, r3
 8011294:	ab04      	add	r3, sp, #16
 8011296:	9301      	str	r3, [sp, #4]
 8011298:	2302      	movs	r3, #2
 801129a:	9302      	str	r3, [sp, #8]
 801129c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801129e:	68ac      	ldr	r4, [r5, #8]
 80112a0:	9003      	str	r0, [sp, #12]
 80112a2:	b913      	cbnz	r3, 80112aa <_puts_r+0x32>
 80112a4:	4628      	mov	r0, r5
 80112a6:	f003 fc21 	bl	8014aec <__sinit>
 80112aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80112ac:	07db      	lsls	r3, r3, #31
 80112ae:	d405      	bmi.n	80112bc <_puts_r+0x44>
 80112b0:	89a3      	ldrh	r3, [r4, #12]
 80112b2:	0598      	lsls	r0, r3, #22
 80112b4:	d402      	bmi.n	80112bc <_puts_r+0x44>
 80112b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80112b8:	f003 fed8 	bl	801506c <__retarget_lock_acquire_recursive>
 80112bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80112c0:	0499      	lsls	r1, r3, #18
 80112c2:	d406      	bmi.n	80112d2 <_puts_r+0x5a>
 80112c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80112c8:	81a3      	strh	r3, [r4, #12]
 80112ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80112cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80112d0:	6663      	str	r3, [r4, #100]	; 0x64
 80112d2:	4628      	mov	r0, r5
 80112d4:	aa01      	add	r2, sp, #4
 80112d6:	4621      	mov	r1, r4
 80112d8:	f003 fd58 	bl	8014d8c <__sfvwrite_r>
 80112dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80112de:	2800      	cmp	r0, #0
 80112e0:	bf14      	ite	ne
 80112e2:	f04f 35ff 	movne.w	r5, #4294967295
 80112e6:	250a      	moveq	r5, #10
 80112e8:	07da      	lsls	r2, r3, #31
 80112ea:	d405      	bmi.n	80112f8 <_puts_r+0x80>
 80112ec:	89a3      	ldrh	r3, [r4, #12]
 80112ee:	059b      	lsls	r3, r3, #22
 80112f0:	d402      	bmi.n	80112f8 <_puts_r+0x80>
 80112f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80112f4:	f003 febb 	bl	801506e <__retarget_lock_release_recursive>
 80112f8:	4628      	mov	r0, r5
 80112fa:	b009      	add	sp, #36	; 0x24
 80112fc:	bd30      	pop	{r4, r5, pc}
 80112fe:	bf00      	nop
 8011300:	08017a0e 	.word	0x08017a0e

08011304 <puts>:
 8011304:	4b02      	ldr	r3, [pc, #8]	; (8011310 <puts+0xc>)
 8011306:	4601      	mov	r1, r0
 8011308:	6818      	ldr	r0, [r3, #0]
 801130a:	f7ff bfb5 	b.w	8011278 <_puts_r>
 801130e:	bf00      	nop
 8011310:	20000408 	.word	0x20000408

08011314 <_sbrk_r>:
 8011314:	b538      	push	{r3, r4, r5, lr}
 8011316:	4d06      	ldr	r5, [pc, #24]	; (8011330 <_sbrk_r+0x1c>)
 8011318:	2300      	movs	r3, #0
 801131a:	4604      	mov	r4, r0
 801131c:	4608      	mov	r0, r1
 801131e:	602b      	str	r3, [r5, #0]
 8011320:	f006 f832 	bl	8017388 <_sbrk>
 8011324:	1c43      	adds	r3, r0, #1
 8011326:	d102      	bne.n	801132e <_sbrk_r+0x1a>
 8011328:	682b      	ldr	r3, [r5, #0]
 801132a:	b103      	cbz	r3, 801132e <_sbrk_r+0x1a>
 801132c:	6023      	str	r3, [r4, #0]
 801132e:	bd38      	pop	{r3, r4, r5, pc}
 8011330:	20006560 	.word	0x20006560

08011334 <sprintf>:
 8011334:	b40e      	push	{r1, r2, r3}
 8011336:	b500      	push	{lr}
 8011338:	b09c      	sub	sp, #112	; 0x70
 801133a:	ab1d      	add	r3, sp, #116	; 0x74
 801133c:	9002      	str	r0, [sp, #8]
 801133e:	9006      	str	r0, [sp, #24]
 8011340:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011344:	4809      	ldr	r0, [pc, #36]	; (801136c <sprintf+0x38>)
 8011346:	9107      	str	r1, [sp, #28]
 8011348:	9104      	str	r1, [sp, #16]
 801134a:	4909      	ldr	r1, [pc, #36]	; (8011370 <sprintf+0x3c>)
 801134c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011350:	9105      	str	r1, [sp, #20]
 8011352:	6800      	ldr	r0, [r0, #0]
 8011354:	9301      	str	r3, [sp, #4]
 8011356:	a902      	add	r1, sp, #8
 8011358:	f000 f83e 	bl	80113d8 <_svfprintf_r>
 801135c:	9b02      	ldr	r3, [sp, #8]
 801135e:	2200      	movs	r2, #0
 8011360:	701a      	strb	r2, [r3, #0]
 8011362:	b01c      	add	sp, #112	; 0x70
 8011364:	f85d eb04 	ldr.w	lr, [sp], #4
 8011368:	b003      	add	sp, #12
 801136a:	4770      	bx	lr
 801136c:	20000408 	.word	0x20000408
 8011370:	ffff0208 	.word	0xffff0208

08011374 <strcpy>:
 8011374:	4603      	mov	r3, r0
 8011376:	f811 2b01 	ldrb.w	r2, [r1], #1
 801137a:	f803 2b01 	strb.w	r2, [r3], #1
 801137e:	2a00      	cmp	r2, #0
 8011380:	d1f9      	bne.n	8011376 <strcpy+0x2>
 8011382:	4770      	bx	lr

08011384 <strncat>:
 8011384:	b530      	push	{r4, r5, lr}
 8011386:	4604      	mov	r4, r0
 8011388:	7825      	ldrb	r5, [r4, #0]
 801138a:	4623      	mov	r3, r4
 801138c:	3401      	adds	r4, #1
 801138e:	2d00      	cmp	r5, #0
 8011390:	d1fa      	bne.n	8011388 <strncat+0x4>
 8011392:	3a01      	subs	r2, #1
 8011394:	d304      	bcc.n	80113a0 <strncat+0x1c>
 8011396:	f811 4b01 	ldrb.w	r4, [r1], #1
 801139a:	f803 4b01 	strb.w	r4, [r3], #1
 801139e:	b904      	cbnz	r4, 80113a2 <strncat+0x1e>
 80113a0:	bd30      	pop	{r4, r5, pc}
 80113a2:	2a00      	cmp	r2, #0
 80113a4:	d1f5      	bne.n	8011392 <strncat+0xe>
 80113a6:	701a      	strb	r2, [r3, #0]
 80113a8:	e7f3      	b.n	8011392 <strncat+0xe>

080113aa <strstr>:
 80113aa:	780a      	ldrb	r2, [r1, #0]
 80113ac:	b570      	push	{r4, r5, r6, lr}
 80113ae:	b96a      	cbnz	r2, 80113cc <strstr+0x22>
 80113b0:	bd70      	pop	{r4, r5, r6, pc}
 80113b2:	429a      	cmp	r2, r3
 80113b4:	d109      	bne.n	80113ca <strstr+0x20>
 80113b6:	460c      	mov	r4, r1
 80113b8:	4605      	mov	r5, r0
 80113ba:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d0f6      	beq.n	80113b0 <strstr+0x6>
 80113c2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80113c6:	429e      	cmp	r6, r3
 80113c8:	d0f7      	beq.n	80113ba <strstr+0x10>
 80113ca:	3001      	adds	r0, #1
 80113cc:	7803      	ldrb	r3, [r0, #0]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d1ef      	bne.n	80113b2 <strstr+0x8>
 80113d2:	4618      	mov	r0, r3
 80113d4:	e7ec      	b.n	80113b0 <strstr+0x6>
	...

080113d8 <_svfprintf_r>:
 80113d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113dc:	ed2d 8b04 	vpush	{d8-d9}
 80113e0:	b0cb      	sub	sp, #300	; 0x12c
 80113e2:	468b      	mov	fp, r1
 80113e4:	4692      	mov	sl, r2
 80113e6:	4698      	mov	r8, r3
 80113e8:	4607      	mov	r7, r0
 80113ea:	f003 fe39 	bl	8015060 <_localeconv_r>
 80113ee:	6803      	ldr	r3, [r0, #0]
 80113f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80113f2:	4618      	mov	r0, r3
 80113f4:	f7ee ff24 	bl	8000240 <strlen>
 80113f8:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80113fc:	900b      	str	r0, [sp, #44]	; 0x2c
 80113fe:	061a      	lsls	r2, r3, #24
 8011400:	d519      	bpl.n	8011436 <_svfprintf_r+0x5e>
 8011402:	f8db 3010 	ldr.w	r3, [fp, #16]
 8011406:	b9b3      	cbnz	r3, 8011436 <_svfprintf_r+0x5e>
 8011408:	2140      	movs	r1, #64	; 0x40
 801140a:	4638      	mov	r0, r7
 801140c:	f7ff fcca 	bl	8010da4 <_malloc_r>
 8011410:	f8cb 0000 	str.w	r0, [fp]
 8011414:	f8cb 0010 	str.w	r0, [fp, #16]
 8011418:	b950      	cbnz	r0, 8011430 <_svfprintf_r+0x58>
 801141a:	230c      	movs	r3, #12
 801141c:	603b      	str	r3, [r7, #0]
 801141e:	f04f 33ff 	mov.w	r3, #4294967295
 8011422:	930a      	str	r3, [sp, #40]	; 0x28
 8011424:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011426:	b04b      	add	sp, #300	; 0x12c
 8011428:	ecbd 8b04 	vpop	{d8-d9}
 801142c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011430:	2340      	movs	r3, #64	; 0x40
 8011432:	f8cb 3014 	str.w	r3, [fp, #20]
 8011436:	2300      	movs	r3, #0
 8011438:	e9cd 331f 	strd	r3, r3, [sp, #124]	; 0x7c
 801143c:	ed9f 8b96 	vldr	d8, [pc, #600]	; 8011698 <_svfprintf_r+0x2c0>
 8011440:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 8011444:	ac21      	add	r4, sp, #132	; 0x84
 8011446:	941e      	str	r4, [sp, #120]	; 0x78
 8011448:	9303      	str	r3, [sp, #12]
 801144a:	9308      	str	r3, [sp, #32]
 801144c:	930e      	str	r3, [sp, #56]	; 0x38
 801144e:	9310      	str	r3, [sp, #64]	; 0x40
 8011450:	930a      	str	r3, [sp, #40]	; 0x28
 8011452:	4653      	mov	r3, sl
 8011454:	461d      	mov	r5, r3
 8011456:	f813 2b01 	ldrb.w	r2, [r3], #1
 801145a:	b10a      	cbz	r2, 8011460 <_svfprintf_r+0x88>
 801145c:	2a25      	cmp	r2, #37	; 0x25
 801145e:	d1f9      	bne.n	8011454 <_svfprintf_r+0x7c>
 8011460:	ebb5 060a 	subs.w	r6, r5, sl
 8011464:	d00d      	beq.n	8011482 <_svfprintf_r+0xaa>
 8011466:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8011468:	4433      	add	r3, r6
 801146a:	9320      	str	r3, [sp, #128]	; 0x80
 801146c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801146e:	3301      	adds	r3, #1
 8011470:	2b07      	cmp	r3, #7
 8011472:	e9c4 a600 	strd	sl, r6, [r4]
 8011476:	931f      	str	r3, [sp, #124]	; 0x7c
 8011478:	dc77      	bgt.n	801156a <_svfprintf_r+0x192>
 801147a:	3408      	adds	r4, #8
 801147c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801147e:	4433      	add	r3, r6
 8011480:	930a      	str	r3, [sp, #40]	; 0x28
 8011482:	782b      	ldrb	r3, [r5, #0]
 8011484:	2b00      	cmp	r3, #0
 8011486:	f001 8135 	beq.w	80126f4 <_svfprintf_r+0x131c>
 801148a:	2200      	movs	r2, #0
 801148c:	1c6b      	adds	r3, r5, #1
 801148e:	f88d 205b 	strb.w	r2, [sp, #91]	; 0x5b
 8011492:	f04f 36ff 	mov.w	r6, #4294967295
 8011496:	920c      	str	r2, [sp, #48]	; 0x30
 8011498:	4615      	mov	r5, r2
 801149a:	f04f 092b 	mov.w	r9, #43	; 0x2b
 801149e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80114a2:	9204      	str	r2, [sp, #16]
 80114a4:	9309      	str	r3, [sp, #36]	; 0x24
 80114a6:	9b04      	ldr	r3, [sp, #16]
 80114a8:	3b20      	subs	r3, #32
 80114aa:	2b5a      	cmp	r3, #90	; 0x5a
 80114ac:	f200 8590 	bhi.w	8011fd0 <_svfprintf_r+0xbf8>
 80114b0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80114b4:	058e007d 	.word	0x058e007d
 80114b8:	0085058e 	.word	0x0085058e
 80114bc:	058e058e 	.word	0x058e058e
 80114c0:	0065058e 	.word	0x0065058e
 80114c4:	058e058e 	.word	0x058e058e
 80114c8:	00920088 	.word	0x00920088
 80114cc:	008f058e 	.word	0x008f058e
 80114d0:	058e0095 	.word	0x058e0095
 80114d4:	00b200af 	.word	0x00b200af
 80114d8:	00b200b2 	.word	0x00b200b2
 80114dc:	00b200b2 	.word	0x00b200b2
 80114e0:	00b200b2 	.word	0x00b200b2
 80114e4:	00b200b2 	.word	0x00b200b2
 80114e8:	058e058e 	.word	0x058e058e
 80114ec:	058e058e 	.word	0x058e058e
 80114f0:	058e058e 	.word	0x058e058e
 80114f4:	012d058e 	.word	0x012d058e
 80114f8:	00e0058e 	.word	0x00e0058e
 80114fc:	012d00fa 	.word	0x012d00fa
 8011500:	012d012d 	.word	0x012d012d
 8011504:	058e058e 	.word	0x058e058e
 8011508:	058e058e 	.word	0x058e058e
 801150c:	058e00c3 	.word	0x058e00c3
 8011510:	0455058e 	.word	0x0455058e
 8011514:	058e058e 	.word	0x058e058e
 8011518:	04a3058e 	.word	0x04a3058e
 801151c:	04c7058e 	.word	0x04c7058e
 8011520:	058e058e 	.word	0x058e058e
 8011524:	058e04ed 	.word	0x058e04ed
 8011528:	058e058e 	.word	0x058e058e
 801152c:	058e058e 	.word	0x058e058e
 8011530:	058e058e 	.word	0x058e058e
 8011534:	012d058e 	.word	0x012d058e
 8011538:	00e0058e 	.word	0x00e0058e
 801153c:	012d00fc 	.word	0x012d00fc
 8011540:	012d012d 	.word	0x012d012d
 8011544:	00fc00c6 	.word	0x00fc00c6
 8011548:	058e00da 	.word	0x058e00da
 801154c:	058e00d3 	.word	0x058e00d3
 8011550:	0457042e 	.word	0x0457042e
 8011554:	00da0490 	.word	0x00da0490
 8011558:	04a3058e 	.word	0x04a3058e
 801155c:	04c9007b 	.word	0x04c9007b
 8011560:	058e058e 	.word	0x058e058e
 8011564:	058e050d 	.word	0x058e050d
 8011568:	007b      	.short	0x007b
 801156a:	aa1e      	add	r2, sp, #120	; 0x78
 801156c:	4659      	mov	r1, fp
 801156e:	4638      	mov	r0, r7
 8011570:	f004 fbb0 	bl	8015cd4 <__ssprint_r>
 8011574:	2800      	cmp	r0, #0
 8011576:	f040 8126 	bne.w	80117c6 <_svfprintf_r+0x3ee>
 801157a:	ac21      	add	r4, sp, #132	; 0x84
 801157c:	e77e      	b.n	801147c <_svfprintf_r+0xa4>
 801157e:	4638      	mov	r0, r7
 8011580:	f003 fd6e 	bl	8015060 <_localeconv_r>
 8011584:	6843      	ldr	r3, [r0, #4]
 8011586:	9310      	str	r3, [sp, #64]	; 0x40
 8011588:	4618      	mov	r0, r3
 801158a:	f7ee fe59 	bl	8000240 <strlen>
 801158e:	900e      	str	r0, [sp, #56]	; 0x38
 8011590:	4638      	mov	r0, r7
 8011592:	f003 fd65 	bl	8015060 <_localeconv_r>
 8011596:	6883      	ldr	r3, [r0, #8]
 8011598:	9308      	str	r3, [sp, #32]
 801159a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801159c:	b12b      	cbz	r3, 80115aa <_svfprintf_r+0x1d2>
 801159e:	9b08      	ldr	r3, [sp, #32]
 80115a0:	b11b      	cbz	r3, 80115aa <_svfprintf_r+0x1d2>
 80115a2:	781b      	ldrb	r3, [r3, #0]
 80115a4:	b10b      	cbz	r3, 80115aa <_svfprintf_r+0x1d2>
 80115a6:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
 80115aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115ac:	e777      	b.n	801149e <_svfprintf_r+0xc6>
 80115ae:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d1f9      	bne.n	80115aa <_svfprintf_r+0x1d2>
 80115b6:	2320      	movs	r3, #32
 80115b8:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 80115bc:	e7f5      	b.n	80115aa <_svfprintf_r+0x1d2>
 80115be:	f045 0501 	orr.w	r5, r5, #1
 80115c2:	e7f2      	b.n	80115aa <_svfprintf_r+0x1d2>
 80115c4:	f858 3b04 	ldr.w	r3, [r8], #4
 80115c8:	930c      	str	r3, [sp, #48]	; 0x30
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	daed      	bge.n	80115aa <_svfprintf_r+0x1d2>
 80115ce:	425b      	negs	r3, r3
 80115d0:	930c      	str	r3, [sp, #48]	; 0x30
 80115d2:	f045 0504 	orr.w	r5, r5, #4
 80115d6:	e7e8      	b.n	80115aa <_svfprintf_r+0x1d2>
 80115d8:	f88d 905b 	strb.w	r9, [sp, #91]	; 0x5b
 80115dc:	e7e5      	b.n	80115aa <_svfprintf_r+0x1d2>
 80115de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80115e0:	f812 3b01 	ldrb.w	r3, [r2], #1
 80115e4:	9304      	str	r3, [sp, #16]
 80115e6:	2b2a      	cmp	r3, #42	; 0x2a
 80115e8:	d111      	bne.n	801160e <_svfprintf_r+0x236>
 80115ea:	f858 6b04 	ldr.w	r6, [r8], #4
 80115ee:	9209      	str	r2, [sp, #36]	; 0x24
 80115f0:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 80115f4:	e7d9      	b.n	80115aa <_svfprintf_r+0x1d2>
 80115f6:	210a      	movs	r1, #10
 80115f8:	fb01 3606 	mla	r6, r1, r6, r3
 80115fc:	f812 3b01 	ldrb.w	r3, [r2], #1
 8011600:	9304      	str	r3, [sp, #16]
 8011602:	9b04      	ldr	r3, [sp, #16]
 8011604:	3b30      	subs	r3, #48	; 0x30
 8011606:	2b09      	cmp	r3, #9
 8011608:	d9f5      	bls.n	80115f6 <_svfprintf_r+0x21e>
 801160a:	9209      	str	r2, [sp, #36]	; 0x24
 801160c:	e74b      	b.n	80114a6 <_svfprintf_r+0xce>
 801160e:	2600      	movs	r6, #0
 8011610:	e7f7      	b.n	8011602 <_svfprintf_r+0x22a>
 8011612:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8011616:	e7c8      	b.n	80115aa <_svfprintf_r+0x1d2>
 8011618:	2300      	movs	r3, #0
 801161a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801161c:	930c      	str	r3, [sp, #48]	; 0x30
 801161e:	9b04      	ldr	r3, [sp, #16]
 8011620:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011622:	3b30      	subs	r3, #48	; 0x30
 8011624:	200a      	movs	r0, #10
 8011626:	fb00 3301 	mla	r3, r0, r1, r3
 801162a:	930c      	str	r3, [sp, #48]	; 0x30
 801162c:	f812 3b01 	ldrb.w	r3, [r2], #1
 8011630:	9304      	str	r3, [sp, #16]
 8011632:	3b30      	subs	r3, #48	; 0x30
 8011634:	2b09      	cmp	r3, #9
 8011636:	d9f2      	bls.n	801161e <_svfprintf_r+0x246>
 8011638:	e7e7      	b.n	801160a <_svfprintf_r+0x232>
 801163a:	f045 0508 	orr.w	r5, r5, #8
 801163e:	e7b4      	b.n	80115aa <_svfprintf_r+0x1d2>
 8011640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011642:	781b      	ldrb	r3, [r3, #0]
 8011644:	2b68      	cmp	r3, #104	; 0x68
 8011646:	bf01      	itttt	eq
 8011648:	9b09      	ldreq	r3, [sp, #36]	; 0x24
 801164a:	3301      	addeq	r3, #1
 801164c:	9309      	streq	r3, [sp, #36]	; 0x24
 801164e:	f445 7500 	orreq.w	r5, r5, #512	; 0x200
 8011652:	bf18      	it	ne
 8011654:	f045 0540 	orrne.w	r5, r5, #64	; 0x40
 8011658:	e7a7      	b.n	80115aa <_svfprintf_r+0x1d2>
 801165a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801165c:	781b      	ldrb	r3, [r3, #0]
 801165e:	2b6c      	cmp	r3, #108	; 0x6c
 8011660:	d105      	bne.n	801166e <_svfprintf_r+0x296>
 8011662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011664:	3301      	adds	r3, #1
 8011666:	9309      	str	r3, [sp, #36]	; 0x24
 8011668:	f045 0520 	orr.w	r5, r5, #32
 801166c:	e79d      	b.n	80115aa <_svfprintf_r+0x1d2>
 801166e:	f045 0510 	orr.w	r5, r5, #16
 8011672:	e79a      	b.n	80115aa <_svfprintf_r+0x1d2>
 8011674:	4642      	mov	r2, r8
 8011676:	2000      	movs	r0, #0
 8011678:	f852 3b04 	ldr.w	r3, [r2], #4
 801167c:	9205      	str	r2, [sp, #20]
 801167e:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
 8011682:	f88d 005b 	strb.w	r0, [sp, #91]	; 0x5b
 8011686:	e9cd 0006 	strd	r0, r0, [sp, #24]
 801168a:	9002      	str	r0, [sp, #8]
 801168c:	2601      	movs	r6, #1
 801168e:	4681      	mov	r9, r0
 8011690:	4680      	mov	r8, r0
 8011692:	f10d 0ac4 	add.w	sl, sp, #196	; 0xc4
 8011696:	e18e      	b.n	80119b6 <_svfprintf_r+0x5de>
	...
 80116a0:	ffffffff 	.word	0xffffffff
 80116a4:	7fefffff 	.word	0x7fefffff
 80116a8:	f045 0510 	orr.w	r5, r5, #16
 80116ac:	06ab      	lsls	r3, r5, #26
 80116ae:	d516      	bpl.n	80116de <_svfprintf_r+0x306>
 80116b0:	f108 0307 	add.w	r3, r8, #7
 80116b4:	f023 0307 	bic.w	r3, r3, #7
 80116b8:	461a      	mov	r2, r3
 80116ba:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80116be:	f852 8b08 	ldr.w	r8, [r2], #8
 80116c2:	9205      	str	r2, [sp, #20]
 80116c4:	f1b9 0f00 	cmp.w	r9, #0
 80116c8:	da07      	bge.n	80116da <_svfprintf_r+0x302>
 80116ca:	f1d8 0800 	rsbs	r8, r8, #0
 80116ce:	f04f 032d 	mov.w	r3, #45	; 0x2d
 80116d2:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
 80116d6:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 80116da:	2301      	movs	r3, #1
 80116dc:	e354      	b.n	8011d88 <_svfprintf_r+0x9b0>
 80116de:	4642      	mov	r2, r8
 80116e0:	06e8      	lsls	r0, r5, #27
 80116e2:	f852 3b04 	ldr.w	r3, [r2], #4
 80116e6:	9205      	str	r2, [sp, #20]
 80116e8:	d503      	bpl.n	80116f2 <_svfprintf_r+0x31a>
 80116ea:	4698      	mov	r8, r3
 80116ec:	ea4f 79e3 	mov.w	r9, r3, asr #31
 80116f0:	e7e8      	b.n	80116c4 <_svfprintf_r+0x2ec>
 80116f2:	0669      	lsls	r1, r5, #25
 80116f4:	d504      	bpl.n	8011700 <_svfprintf_r+0x328>
 80116f6:	fa0f f883 	sxth.w	r8, r3
 80116fa:	f343 39c0 	sbfx	r9, r3, #15, #1
 80116fe:	e7e1      	b.n	80116c4 <_svfprintf_r+0x2ec>
 8011700:	05aa      	lsls	r2, r5, #22
 8011702:	d5f2      	bpl.n	80116ea <_svfprintf_r+0x312>
 8011704:	fa4f f883 	sxtb.w	r8, r3
 8011708:	f343 19c0 	sbfx	r9, r3, #7, #1
 801170c:	e7da      	b.n	80116c4 <_svfprintf_r+0x2ec>
 801170e:	f108 0807 	add.w	r8, r8, #7
 8011712:	f028 0307 	bic.w	r3, r8, #7
 8011716:	ecb3 8b02 	vldmia	r3!, {d8}
 801171a:	ed1f 7b1f 	vldr	d7, [pc, #-124]	; 80116a0 <_svfprintf_r+0x2c8>
 801171e:	eeb0 6bc8 	vabs.f64	d6, d8
 8011722:	eeb4 6b47 	vcmp.f64	d6, d7
 8011726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801172a:	9305      	str	r3, [sp, #20]
 801172c:	dd18      	ble.n	8011760 <_svfprintf_r+0x388>
 801172e:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8011732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011736:	d502      	bpl.n	801173e <_svfprintf_r+0x366>
 8011738:	232d      	movs	r3, #45	; 0x2d
 801173a:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 801173e:	4a26      	ldr	r2, [pc, #152]	; (80117d8 <_svfprintf_r+0x400>)
 8011740:	4826      	ldr	r0, [pc, #152]	; (80117dc <_svfprintf_r+0x404>)
 8011742:	9b04      	ldr	r3, [sp, #16]
 8011744:	2b47      	cmp	r3, #71	; 0x47
 8011746:	bfd4      	ite	le
 8011748:	4692      	movle	sl, r2
 801174a:	4682      	movgt	sl, r0
 801174c:	2300      	movs	r3, #0
 801174e:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8011752:	9302      	str	r3, [sp, #8]
 8011754:	2603      	movs	r6, #3
 8011756:	4699      	mov	r9, r3
 8011758:	e9cd 3306 	strd	r3, r3, [sp, #24]
 801175c:	4698      	mov	r8, r3
 801175e:	e12a      	b.n	80119b6 <_svfprintf_r+0x5de>
 8011760:	eeb4 8b48 	vcmp.f64	d8, d8
 8011764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011768:	d70a      	bvc.n	8011780 <_svfprintf_r+0x3a8>
 801176a:	ee18 3a90 	vmov	r3, s17
 801176e:	2b00      	cmp	r3, #0
 8011770:	bfb8      	it	lt
 8011772:	232d      	movlt	r3, #45	; 0x2d
 8011774:	4a1a      	ldr	r2, [pc, #104]	; (80117e0 <_svfprintf_r+0x408>)
 8011776:	481b      	ldr	r0, [pc, #108]	; (80117e4 <_svfprintf_r+0x40c>)
 8011778:	bfb8      	it	lt
 801177a:	f88d 305b 	strblt.w	r3, [sp, #91]	; 0x5b
 801177e:	e7e0      	b.n	8011742 <_svfprintf_r+0x36a>
 8011780:	9b04      	ldr	r3, [sp, #16]
 8011782:	f023 0920 	bic.w	r9, r3, #32
 8011786:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
 801178a:	d12d      	bne.n	80117e8 <_svfprintf_r+0x410>
 801178c:	2330      	movs	r3, #48	; 0x30
 801178e:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8011792:	9b04      	ldr	r3, [sp, #16]
 8011794:	2b61      	cmp	r3, #97	; 0x61
 8011796:	bf0c      	ite	eq
 8011798:	2378      	moveq	r3, #120	; 0x78
 801179a:	2358      	movne	r3, #88	; 0x58
 801179c:	2e63      	cmp	r6, #99	; 0x63
 801179e:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
 80117a2:	f045 0502 	orr.w	r5, r5, #2
 80117a6:	f340 81db 	ble.w	8011b60 <_svfprintf_r+0x788>
 80117aa:	1c71      	adds	r1, r6, #1
 80117ac:	4638      	mov	r0, r7
 80117ae:	f7ff faf9 	bl	8010da4 <_malloc_r>
 80117b2:	4682      	mov	sl, r0
 80117b4:	2800      	cmp	r0, #0
 80117b6:	f040 81d8 	bne.w	8011b6a <_svfprintf_r+0x792>
 80117ba:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80117be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80117c2:	f8ab 300c 	strh.w	r3, [fp, #12]
 80117c6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80117ca:	f013 0f40 	tst.w	r3, #64	; 0x40
 80117ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80117d0:	bf18      	it	ne
 80117d2:	f04f 33ff 	movne.w	r3, #4294967295
 80117d6:	e624      	b.n	8011422 <_svfprintf_r+0x4a>
 80117d8:	0801776c 	.word	0x0801776c
 80117dc:	08017770 	.word	0x08017770
 80117e0:	08017774 	.word	0x08017774
 80117e4:	08017778 	.word	0x08017778
 80117e8:	1c73      	adds	r3, r6, #1
 80117ea:	f000 81c0 	beq.w	8011b6e <_svfprintf_r+0x796>
 80117ee:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80117f2:	f040 81c0 	bne.w	8011b76 <_svfprintf_r+0x79e>
 80117f6:	2e00      	cmp	r6, #0
 80117f8:	f040 81bd 	bne.w	8011b76 <_svfprintf_r+0x79e>
 80117fc:	9602      	str	r6, [sp, #8]
 80117fe:	2601      	movs	r6, #1
 8011800:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8011804:	930d      	str	r3, [sp, #52]	; 0x34
 8011806:	ee18 3a90 	vmov	r3, s17
 801180a:	2b00      	cmp	r3, #0
 801180c:	f280 81b6 	bge.w	8011b7c <_svfprintf_r+0x7a4>
 8011810:	eeb1 9b48 	vneg.f64	d9, d8
 8011814:	232d      	movs	r3, #45	; 0x2d
 8011816:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
 801181a:	9313      	str	r3, [sp, #76]	; 0x4c
 801181c:	f040 81c7 	bne.w	8011bae <_svfprintf_r+0x7d6>
 8011820:	eeb0 0b49 	vmov.f64	d0, d9
 8011824:	a818      	add	r0, sp, #96	; 0x60
 8011826:	f004 f9c7 	bl	8015bb8 <frexp>
 801182a:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
 801182e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011832:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8011836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801183a:	bf08      	it	eq
 801183c:	2301      	moveq	r3, #1
 801183e:	9a04      	ldr	r2, [sp, #16]
 8011840:	bf08      	it	eq
 8011842:	9318      	streq	r3, [sp, #96]	; 0x60
 8011844:	49b5      	ldr	r1, [pc, #724]	; (8011b1c <_svfprintf_r+0x744>)
 8011846:	4bb6      	ldr	r3, [pc, #728]	; (8011b20 <_svfprintf_r+0x748>)
 8011848:	eeb3 7b00 	vmov.f64	d7, #48	; 0x41800000  16.0
 801184c:	2a61      	cmp	r2, #97	; 0x61
 801184e:	bf18      	it	ne
 8011850:	4619      	movne	r1, r3
 8011852:	1e72      	subs	r2, r6, #1
 8011854:	4653      	mov	r3, sl
 8011856:	ee20 0b07 	vmul.f64	d0, d0, d7
 801185a:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 801185e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011862:	ee16 ca90 	vmov	ip, s13
 8011866:	f811 000c 	ldrb.w	r0, [r1, ip]
 801186a:	f803 0b01 	strb.w	r0, [r3], #1
 801186e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8011872:	4610      	mov	r0, r2
 8011874:	ee30 0b46 	vsub.f64	d0, d0, d6
 8011878:	d006      	beq.n	8011888 <_svfprintf_r+0x4b0>
 801187a:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801187e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011882:	f102 32ff 	add.w	r2, r2, #4294967295
 8011886:	d1e6      	bne.n	8011856 <_svfprintf_r+0x47e>
 8011888:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801188c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8011890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011894:	dc09      	bgt.n	80118aa <_svfprintf_r+0x4d2>
 8011896:	eeb4 0b47 	vcmp.f64	d0, d7
 801189a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801189e:	f040 8180 	bne.w	8011ba2 <_svfprintf_r+0x7ca>
 80118a2:	f01c 0f01 	tst.w	ip, #1
 80118a6:	f000 817c 	beq.w	8011ba2 <_svfprintf_r+0x7ca>
 80118aa:	f891 c00f 	ldrb.w	ip, [r1, #15]
 80118ae:	931c      	str	r3, [sp, #112]	; 0x70
 80118b0:	f04f 0e30 	mov.w	lr, #48	; 0x30
 80118b4:	981c      	ldr	r0, [sp, #112]	; 0x70
 80118b6:	1e42      	subs	r2, r0, #1
 80118b8:	921c      	str	r2, [sp, #112]	; 0x70
 80118ba:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 80118be:	4562      	cmp	r2, ip
 80118c0:	f000 8160 	beq.w	8011b84 <_svfprintf_r+0x7ac>
 80118c4:	2a39      	cmp	r2, #57	; 0x39
 80118c6:	bf16      	itet	ne
 80118c8:	3201      	addne	r2, #1
 80118ca:	7a8a      	ldrbeq	r2, [r1, #10]
 80118cc:	b2d2      	uxtbne	r2, r2
 80118ce:	f800 2c01 	strb.w	r2, [r0, #-1]
 80118d2:	eba3 030a 	sub.w	r3, r3, sl
 80118d6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80118da:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80118de:	9303      	str	r3, [sp, #12]
 80118e0:	f040 81a7 	bne.w	8011c32 <_svfprintf_r+0x85a>
 80118e4:	f118 0f03 	cmn.w	r8, #3
 80118e8:	db02      	blt.n	80118f0 <_svfprintf_r+0x518>
 80118ea:	4546      	cmp	r6, r8
 80118ec:	f280 81c9 	bge.w	8011c82 <_svfprintf_r+0x8aa>
 80118f0:	9b04      	ldr	r3, [sp, #16]
 80118f2:	3b02      	subs	r3, #2
 80118f4:	9304      	str	r3, [sp, #16]
 80118f6:	9904      	ldr	r1, [sp, #16]
 80118f8:	f89d 2010 	ldrb.w	r2, [sp, #16]
 80118fc:	f021 0120 	bic.w	r1, r1, #32
 8011900:	2941      	cmp	r1, #65	; 0x41
 8011902:	bf08      	it	eq
 8011904:	320f      	addeq	r2, #15
 8011906:	f108 33ff 	add.w	r3, r8, #4294967295
 801190a:	bf06      	itte	eq
 801190c:	b2d2      	uxtbeq	r2, r2
 801190e:	2101      	moveq	r1, #1
 8011910:	2100      	movne	r1, #0
 8011912:	2b00      	cmp	r3, #0
 8011914:	9318      	str	r3, [sp, #96]	; 0x60
 8011916:	bfb8      	it	lt
 8011918:	f1c8 0301 	rsblt	r3, r8, #1
 801191c:	f88d 2068 	strb.w	r2, [sp, #104]	; 0x68
 8011920:	bfb4      	ite	lt
 8011922:	222d      	movlt	r2, #45	; 0x2d
 8011924:	222b      	movge	r2, #43	; 0x2b
 8011926:	2b09      	cmp	r3, #9
 8011928:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 801192c:	f340 8198 	ble.w	8011c60 <_svfprintf_r+0x888>
 8011930:	f10d 0277 	add.w	r2, sp, #119	; 0x77
 8011934:	200a      	movs	r0, #10
 8011936:	4611      	mov	r1, r2
 8011938:	fb93 f6f0 	sdiv	r6, r3, r0
 801193c:	fb00 3016 	mls	r0, r0, r6, r3
 8011940:	3030      	adds	r0, #48	; 0x30
 8011942:	f801 0c01 	strb.w	r0, [r1, #-1]
 8011946:	4618      	mov	r0, r3
 8011948:	2863      	cmp	r0, #99	; 0x63
 801194a:	f102 32ff 	add.w	r2, r2, #4294967295
 801194e:	4633      	mov	r3, r6
 8011950:	dcf0      	bgt.n	8011934 <_svfprintf_r+0x55c>
 8011952:	3330      	adds	r3, #48	; 0x30
 8011954:	1e88      	subs	r0, r1, #2
 8011956:	f802 3c01 	strb.w	r3, [r2, #-1]
 801195a:	f10d 0677 	add.w	r6, sp, #119	; 0x77
 801195e:	f10d 026a 	add.w	r2, sp, #106	; 0x6a
 8011962:	4603      	mov	r3, r0
 8011964:	42b3      	cmp	r3, r6
 8011966:	f0c0 8176 	bcc.w	8011c56 <_svfprintf_r+0x87e>
 801196a:	f10d 0279 	add.w	r2, sp, #121	; 0x79
 801196e:	1a52      	subs	r2, r2, r1
 8011970:	42b0      	cmp	r0, r6
 8011972:	bf88      	it	hi
 8011974:	2200      	movhi	r2, #0
 8011976:	f10d 036a 	add.w	r3, sp, #106	; 0x6a
 801197a:	441a      	add	r2, r3
 801197c:	ab1a      	add	r3, sp, #104	; 0x68
 801197e:	1ad3      	subs	r3, r2, r3
 8011980:	9a03      	ldr	r2, [sp, #12]
 8011982:	9311      	str	r3, [sp, #68]	; 0x44
 8011984:	2a01      	cmp	r2, #1
 8011986:	eb03 0602 	add.w	r6, r3, r2
 801198a:	dc01      	bgt.n	8011990 <_svfprintf_r+0x5b8>
 801198c:	07e8      	lsls	r0, r5, #31
 801198e:	d501      	bpl.n	8011994 <_svfprintf_r+0x5bc>
 8011990:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011992:	441e      	add	r6, r3
 8011994:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 8011998:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 801199c:	930d      	str	r3, [sp, #52]	; 0x34
 801199e:	2300      	movs	r3, #0
 80119a0:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80119a4:	4698      	mov	r8, r3
 80119a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80119a8:	b113      	cbz	r3, 80119b0 <_svfprintf_r+0x5d8>
 80119aa:	232d      	movs	r3, #45	; 0x2d
 80119ac:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 80119b0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80119b2:	f04f 0900 	mov.w	r9, #0
 80119b6:	45b1      	cmp	r9, r6
 80119b8:	464b      	mov	r3, r9
 80119ba:	bfb8      	it	lt
 80119bc:	4633      	movlt	r3, r6
 80119be:	930d      	str	r3, [sp, #52]	; 0x34
 80119c0:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 80119c4:	b113      	cbz	r3, 80119cc <_svfprintf_r+0x5f4>
 80119c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80119c8:	3301      	adds	r3, #1
 80119ca:	930d      	str	r3, [sp, #52]	; 0x34
 80119cc:	f015 0302 	ands.w	r3, r5, #2
 80119d0:	9313      	str	r3, [sp, #76]	; 0x4c
 80119d2:	bf1e      	ittt	ne
 80119d4:	9b0d      	ldrne	r3, [sp, #52]	; 0x34
 80119d6:	3302      	addne	r3, #2
 80119d8:	930d      	strne	r3, [sp, #52]	; 0x34
 80119da:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 80119de:	9314      	str	r3, [sp, #80]	; 0x50
 80119e0:	d120      	bne.n	8011a24 <_svfprintf_r+0x64c>
 80119e2:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 80119e6:	1a9b      	subs	r3, r3, r2
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	dd1b      	ble.n	8011a24 <_svfprintf_r+0x64c>
 80119ec:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	; 0x7c
 80119f0:	494c      	ldr	r1, [pc, #304]	; (8011b24 <_svfprintf_r+0x74c>)
 80119f2:	6021      	str	r1, [r4, #0]
 80119f4:	2b10      	cmp	r3, #16
 80119f6:	f102 0201 	add.w	r2, r2, #1
 80119fa:	f104 0008 	add.w	r0, r4, #8
 80119fe:	f300 82f7 	bgt.w	8011ff0 <_svfprintf_r+0xc18>
 8011a02:	eb0c 0103 	add.w	r1, ip, r3
 8011a06:	2a07      	cmp	r2, #7
 8011a08:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 8011a0c:	6063      	str	r3, [r4, #4]
 8011a0e:	f340 8304 	ble.w	801201a <_svfprintf_r+0xc42>
 8011a12:	aa1e      	add	r2, sp, #120	; 0x78
 8011a14:	4659      	mov	r1, fp
 8011a16:	4638      	mov	r0, r7
 8011a18:	f004 f95c 	bl	8015cd4 <__ssprint_r>
 8011a1c:	2800      	cmp	r0, #0
 8011a1e:	f040 8646 	bne.w	80126ae <_svfprintf_r+0x12d6>
 8011a22:	ac21      	add	r4, sp, #132	; 0x84
 8011a24:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 8011a28:	b173      	cbz	r3, 8011a48 <_svfprintf_r+0x670>
 8011a2a:	f10d 035b 	add.w	r3, sp, #91	; 0x5b
 8011a2e:	6023      	str	r3, [r4, #0]
 8011a30:	2301      	movs	r3, #1
 8011a32:	6063      	str	r3, [r4, #4]
 8011a34:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8011a36:	3301      	adds	r3, #1
 8011a38:	9320      	str	r3, [sp, #128]	; 0x80
 8011a3a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011a3c:	3301      	adds	r3, #1
 8011a3e:	2b07      	cmp	r3, #7
 8011a40:	931f      	str	r3, [sp, #124]	; 0x7c
 8011a42:	f300 82ec 	bgt.w	801201e <_svfprintf_r+0xc46>
 8011a46:	3408      	adds	r4, #8
 8011a48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011a4a:	b16b      	cbz	r3, 8011a68 <_svfprintf_r+0x690>
 8011a4c:	ab17      	add	r3, sp, #92	; 0x5c
 8011a4e:	6023      	str	r3, [r4, #0]
 8011a50:	2302      	movs	r3, #2
 8011a52:	6063      	str	r3, [r4, #4]
 8011a54:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8011a56:	3302      	adds	r3, #2
 8011a58:	9320      	str	r3, [sp, #128]	; 0x80
 8011a5a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011a5c:	3301      	adds	r3, #1
 8011a5e:	2b07      	cmp	r3, #7
 8011a60:	931f      	str	r3, [sp, #124]	; 0x7c
 8011a62:	f300 82e6 	bgt.w	8012032 <_svfprintf_r+0xc5a>
 8011a66:	3408      	adds	r4, #8
 8011a68:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011a6a:	2b80      	cmp	r3, #128	; 0x80
 8011a6c:	d120      	bne.n	8011ab0 <_svfprintf_r+0x6d8>
 8011a6e:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 8011a72:	1a9b      	subs	r3, r3, r2
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	dd1b      	ble.n	8011ab0 <_svfprintf_r+0x6d8>
 8011a78:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	; 0x7c
 8011a7c:	492a      	ldr	r1, [pc, #168]	; (8011b28 <_svfprintf_r+0x750>)
 8011a7e:	6021      	str	r1, [r4, #0]
 8011a80:	2b10      	cmp	r3, #16
 8011a82:	f102 0201 	add.w	r2, r2, #1
 8011a86:	f104 0008 	add.w	r0, r4, #8
 8011a8a:	f300 82dc 	bgt.w	8012046 <_svfprintf_r+0xc6e>
 8011a8e:	eb0c 0103 	add.w	r1, ip, r3
 8011a92:	2a07      	cmp	r2, #7
 8011a94:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 8011a98:	6063      	str	r3, [r4, #4]
 8011a9a:	f340 82e9 	ble.w	8012070 <_svfprintf_r+0xc98>
 8011a9e:	aa1e      	add	r2, sp, #120	; 0x78
 8011aa0:	4659      	mov	r1, fp
 8011aa2:	4638      	mov	r0, r7
 8011aa4:	f004 f916 	bl	8015cd4 <__ssprint_r>
 8011aa8:	2800      	cmp	r0, #0
 8011aaa:	f040 8600 	bne.w	80126ae <_svfprintf_r+0x12d6>
 8011aae:	ac21      	add	r4, sp, #132	; 0x84
 8011ab0:	eba9 0906 	sub.w	r9, r9, r6
 8011ab4:	f1b9 0f00 	cmp.w	r9, #0
 8011ab8:	dd1c      	ble.n	8011af4 <_svfprintf_r+0x71c>
 8011aba:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	; 0x7c
 8011abe:	481a      	ldr	r0, [pc, #104]	; (8011b28 <_svfprintf_r+0x750>)
 8011ac0:	6020      	str	r0, [r4, #0]
 8011ac2:	f1b9 0f10 	cmp.w	r9, #16
 8011ac6:	f102 0201 	add.w	r2, r2, #1
 8011aca:	f104 0108 	add.w	r1, r4, #8
 8011ace:	f300 82d1 	bgt.w	8012074 <_svfprintf_r+0xc9c>
 8011ad2:	444b      	add	r3, r9
 8011ad4:	2a07      	cmp	r2, #7
 8011ad6:	e9cd 231f 	strd	r2, r3, [sp, #124]	; 0x7c
 8011ada:	f8c4 9004 	str.w	r9, [r4, #4]
 8011ade:	f340 82dd 	ble.w	801209c <_svfprintf_r+0xcc4>
 8011ae2:	aa1e      	add	r2, sp, #120	; 0x78
 8011ae4:	4659      	mov	r1, fp
 8011ae6:	4638      	mov	r0, r7
 8011ae8:	f004 f8f4 	bl	8015cd4 <__ssprint_r>
 8011aec:	2800      	cmp	r0, #0
 8011aee:	f040 85de 	bne.w	80126ae <_svfprintf_r+0x12d6>
 8011af2:	ac21      	add	r4, sp, #132	; 0x84
 8011af4:	05e9      	lsls	r1, r5, #23
 8011af6:	9820      	ldr	r0, [sp, #128]	; 0x80
 8011af8:	f100 82d6 	bmi.w	80120a8 <_svfprintf_r+0xcd0>
 8011afc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011afe:	3301      	adds	r3, #1
 8011b00:	4430      	add	r0, r6
 8011b02:	2b07      	cmp	r3, #7
 8011b04:	e9c4 a600 	strd	sl, r6, [r4]
 8011b08:	9020      	str	r0, [sp, #128]	; 0x80
 8011b0a:	931f      	str	r3, [sp, #124]	; 0x7c
 8011b0c:	f300 8310 	bgt.w	8012130 <_svfprintf_r+0xd58>
 8011b10:	3408      	adds	r4, #8
 8011b12:	076b      	lsls	r3, r5, #29
 8011b14:	f100 85ac 	bmi.w	8012670 <_svfprintf_r+0x1298>
 8011b18:	e008      	b.n	8011b2c <_svfprintf_r+0x754>
 8011b1a:	bf00      	nop
 8011b1c:	0801777c 	.word	0x0801777c
 8011b20:	0801778d 	.word	0x0801778d
 8011b24:	080177a0 	.word	0x080177a0
 8011b28:	080177b0 	.word	0x080177b0
 8011b2c:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
 8011b30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b32:	428a      	cmp	r2, r1
 8011b34:	bfac      	ite	ge
 8011b36:	189b      	addge	r3, r3, r2
 8011b38:	185b      	addlt	r3, r3, r1
 8011b3a:	930a      	str	r3, [sp, #40]	; 0x28
 8011b3c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8011b3e:	b13b      	cbz	r3, 8011b50 <_svfprintf_r+0x778>
 8011b40:	aa1e      	add	r2, sp, #120	; 0x78
 8011b42:	4659      	mov	r1, fp
 8011b44:	4638      	mov	r0, r7
 8011b46:	f004 f8c5 	bl	8015cd4 <__ssprint_r>
 8011b4a:	2800      	cmp	r0, #0
 8011b4c:	f040 85af 	bne.w	80126ae <_svfprintf_r+0x12d6>
 8011b50:	2300      	movs	r3, #0
 8011b52:	931f      	str	r3, [sp, #124]	; 0x7c
 8011b54:	9b02      	ldr	r3, [sp, #8]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	f040 85c6 	bne.w	80126e8 <_svfprintf_r+0x1310>
 8011b5c:	ac21      	add	r4, sp, #132	; 0x84
 8011b5e:	e0e3      	b.n	8011d28 <_svfprintf_r+0x950>
 8011b60:	2300      	movs	r3, #0
 8011b62:	9302      	str	r3, [sp, #8]
 8011b64:	f10d 0ac4 	add.w	sl, sp, #196	; 0xc4
 8011b68:	e64a      	b.n	8011800 <_svfprintf_r+0x428>
 8011b6a:	9002      	str	r0, [sp, #8]
 8011b6c:	e648      	b.n	8011800 <_svfprintf_r+0x428>
 8011b6e:	2300      	movs	r3, #0
 8011b70:	9302      	str	r3, [sp, #8]
 8011b72:	2606      	movs	r6, #6
 8011b74:	e644      	b.n	8011800 <_svfprintf_r+0x428>
 8011b76:	2300      	movs	r3, #0
 8011b78:	9302      	str	r3, [sp, #8]
 8011b7a:	e641      	b.n	8011800 <_svfprintf_r+0x428>
 8011b7c:	2300      	movs	r3, #0
 8011b7e:	eeb0 9b48 	vmov.f64	d9, d8
 8011b82:	e648      	b.n	8011816 <_svfprintf_r+0x43e>
 8011b84:	f800 ec01 	strb.w	lr, [r0, #-1]
 8011b88:	e694      	b.n	80118b4 <_svfprintf_r+0x4dc>
 8011b8a:	f802 eb01 	strb.w	lr, [r2], #1
 8011b8e:	ebac 0102 	sub.w	r1, ip, r2
 8011b92:	2900      	cmp	r1, #0
 8011b94:	daf9      	bge.n	8011b8a <_svfprintf_r+0x7b2>
 8011b96:	1c42      	adds	r2, r0, #1
 8011b98:	3001      	adds	r0, #1
 8011b9a:	bfb8      	it	lt
 8011b9c:	2200      	movlt	r2, #0
 8011b9e:	4413      	add	r3, r2
 8011ba0:	e697      	b.n	80118d2 <_svfprintf_r+0x4fa>
 8011ba2:	461a      	mov	r2, r3
 8011ba4:	eb03 0c00 	add.w	ip, r3, r0
 8011ba8:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8011bac:	e7ef      	b.n	8011b8e <_svfprintf_r+0x7b6>
 8011bae:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
 8011bb2:	d006      	beq.n	8011bc2 <_svfprintf_r+0x7ea>
 8011bb4:	f1b9 0f45 	cmp.w	r9, #69	; 0x45
 8011bb8:	d118      	bne.n	8011bec <_svfprintf_r+0x814>
 8011bba:	f106 0801 	add.w	r8, r6, #1
 8011bbe:	2102      	movs	r1, #2
 8011bc0:	e001      	b.n	8011bc6 <_svfprintf_r+0x7ee>
 8011bc2:	46b0      	mov	r8, r6
 8011bc4:	2103      	movs	r1, #3
 8011bc6:	ab1c      	add	r3, sp, #112	; 0x70
 8011bc8:	9301      	str	r3, [sp, #4]
 8011bca:	ab19      	add	r3, sp, #100	; 0x64
 8011bcc:	9300      	str	r3, [sp, #0]
 8011bce:	4642      	mov	r2, r8
 8011bd0:	ab18      	add	r3, sp, #96	; 0x60
 8011bd2:	4638      	mov	r0, r7
 8011bd4:	eeb0 0b49 	vmov.f64	d0, d9
 8011bd8:	f002 f932 	bl	8013e40 <_dtoa_r>
 8011bdc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8011be0:	4682      	mov	sl, r0
 8011be2:	d105      	bne.n	8011bf0 <_svfprintf_r+0x818>
 8011be4:	07eb      	lsls	r3, r5, #31
 8011be6:	d403      	bmi.n	8011bf0 <_svfprintf_r+0x818>
 8011be8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8011bea:	e672      	b.n	80118d2 <_svfprintf_r+0x4fa>
 8011bec:	46b0      	mov	r8, r6
 8011bee:	e7e6      	b.n	8011bbe <_svfprintf_r+0x7e6>
 8011bf0:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
 8011bf4:	eb0a 0308 	add.w	r3, sl, r8
 8011bf8:	d10d      	bne.n	8011c16 <_svfprintf_r+0x83e>
 8011bfa:	f89a 2000 	ldrb.w	r2, [sl]
 8011bfe:	2a30      	cmp	r2, #48	; 0x30
 8011c00:	d107      	bne.n	8011c12 <_svfprintf_r+0x83a>
 8011c02:	eeb5 9b40 	vcmp.f64	d9, #0.0
 8011c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c0a:	bf1c      	itt	ne
 8011c0c:	f1c8 0201 	rsbne	r2, r8, #1
 8011c10:	9218      	strne	r2, [sp, #96]	; 0x60
 8011c12:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011c14:	4413      	add	r3, r2
 8011c16:	eeb5 9b40 	vcmp.f64	d9, #0.0
 8011c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c1e:	bf08      	it	eq
 8011c20:	931c      	streq	r3, [sp, #112]	; 0x70
 8011c22:	2130      	movs	r1, #48	; 0x30
 8011c24:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011c26:	4293      	cmp	r3, r2
 8011c28:	d9de      	bls.n	8011be8 <_svfprintf_r+0x810>
 8011c2a:	1c50      	adds	r0, r2, #1
 8011c2c:	901c      	str	r0, [sp, #112]	; 0x70
 8011c2e:	7011      	strb	r1, [r2, #0]
 8011c30:	e7f8      	b.n	8011c24 <_svfprintf_r+0x84c>
 8011c32:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
 8011c36:	f47f ae5e 	bne.w	80118f6 <_svfprintf_r+0x51e>
 8011c3a:	f005 0301 	and.w	r3, r5, #1
 8011c3e:	f1b8 0f00 	cmp.w	r8, #0
 8011c42:	ea43 0306 	orr.w	r3, r3, r6
 8011c46:	dd18      	ble.n	8011c7a <_svfprintf_r+0x8a2>
 8011c48:	b383      	cbz	r3, 8011cac <_svfprintf_r+0x8d4>
 8011c4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011c4c:	4443      	add	r3, r8
 8011c4e:	441e      	add	r6, r3
 8011c50:	2366      	movs	r3, #102	; 0x66
 8011c52:	9304      	str	r3, [sp, #16]
 8011c54:	e02f      	b.n	8011cb6 <_svfprintf_r+0x8de>
 8011c56:	f813 cb01 	ldrb.w	ip, [r3], #1
 8011c5a:	f802 cb01 	strb.w	ip, [r2], #1
 8011c5e:	e681      	b.n	8011964 <_svfprintf_r+0x58c>
 8011c60:	b941      	cbnz	r1, 8011c74 <_svfprintf_r+0x89c>
 8011c62:	2230      	movs	r2, #48	; 0x30
 8011c64:	f88d 206a 	strb.w	r2, [sp, #106]	; 0x6a
 8011c68:	f10d 026b 	add.w	r2, sp, #107	; 0x6b
 8011c6c:	3330      	adds	r3, #48	; 0x30
 8011c6e:	f802 3b01 	strb.w	r3, [r2], #1
 8011c72:	e683      	b.n	801197c <_svfprintf_r+0x5a4>
 8011c74:	f10d 026a 	add.w	r2, sp, #106	; 0x6a
 8011c78:	e7f8      	b.n	8011c6c <_svfprintf_r+0x894>
 8011c7a:	b1cb      	cbz	r3, 8011cb0 <_svfprintf_r+0x8d8>
 8011c7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011c7e:	3301      	adds	r3, #1
 8011c80:	e7e5      	b.n	8011c4e <_svfprintf_r+0x876>
 8011c82:	9b03      	ldr	r3, [sp, #12]
 8011c84:	4598      	cmp	r8, r3
 8011c86:	db06      	blt.n	8011c96 <_svfprintf_r+0x8be>
 8011c88:	07e9      	lsls	r1, r5, #31
 8011c8a:	d52a      	bpl.n	8011ce2 <_svfprintf_r+0x90a>
 8011c8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011c8e:	eb08 0603 	add.w	r6, r8, r3
 8011c92:	2367      	movs	r3, #103	; 0x67
 8011c94:	e7dd      	b.n	8011c52 <_svfprintf_r+0x87a>
 8011c96:	9b03      	ldr	r3, [sp, #12]
 8011c98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011c9a:	f1b8 0f00 	cmp.w	r8, #0
 8011c9e:	eb03 0602 	add.w	r6, r3, r2
 8011ca2:	dcf6      	bgt.n	8011c92 <_svfprintf_r+0x8ba>
 8011ca4:	f1c8 0301 	rsb	r3, r8, #1
 8011ca8:	441e      	add	r6, r3
 8011caa:	e7f2      	b.n	8011c92 <_svfprintf_r+0x8ba>
 8011cac:	4646      	mov	r6, r8
 8011cae:	e7cf      	b.n	8011c50 <_svfprintf_r+0x878>
 8011cb0:	2366      	movs	r3, #102	; 0x66
 8011cb2:	9304      	str	r3, [sp, #16]
 8011cb4:	2601      	movs	r6, #1
 8011cb6:	f415 6380 	ands.w	r3, r5, #1024	; 0x400
 8011cba:	9307      	str	r3, [sp, #28]
 8011cbc:	d025      	beq.n	8011d0a <_svfprintf_r+0x932>
 8011cbe:	2300      	movs	r3, #0
 8011cc0:	f1b8 0f00 	cmp.w	r8, #0
 8011cc4:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8011cc8:	f77f ae6d 	ble.w	80119a6 <_svfprintf_r+0x5ce>
 8011ccc:	9b08      	ldr	r3, [sp, #32]
 8011cce:	781b      	ldrb	r3, [r3, #0]
 8011cd0:	2bff      	cmp	r3, #255	; 0xff
 8011cd2:	d108      	bne.n	8011ce6 <_svfprintf_r+0x90e>
 8011cd4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011cd8:	4413      	add	r3, r2
 8011cda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011cdc:	fb02 6603 	mla	r6, r2, r3, r6
 8011ce0:	e661      	b.n	80119a6 <_svfprintf_r+0x5ce>
 8011ce2:	4646      	mov	r6, r8
 8011ce4:	e7d5      	b.n	8011c92 <_svfprintf_r+0x8ba>
 8011ce6:	4543      	cmp	r3, r8
 8011ce8:	daf4      	bge.n	8011cd4 <_svfprintf_r+0x8fc>
 8011cea:	eba8 0803 	sub.w	r8, r8, r3
 8011cee:	9b08      	ldr	r3, [sp, #32]
 8011cf0:	785b      	ldrb	r3, [r3, #1]
 8011cf2:	b133      	cbz	r3, 8011d02 <_svfprintf_r+0x92a>
 8011cf4:	9b07      	ldr	r3, [sp, #28]
 8011cf6:	3301      	adds	r3, #1
 8011cf8:	9307      	str	r3, [sp, #28]
 8011cfa:	9b08      	ldr	r3, [sp, #32]
 8011cfc:	3301      	adds	r3, #1
 8011cfe:	9308      	str	r3, [sp, #32]
 8011d00:	e7e4      	b.n	8011ccc <_svfprintf_r+0x8f4>
 8011d02:	9b06      	ldr	r3, [sp, #24]
 8011d04:	3301      	adds	r3, #1
 8011d06:	9306      	str	r3, [sp, #24]
 8011d08:	e7e0      	b.n	8011ccc <_svfprintf_r+0x8f4>
 8011d0a:	9b07      	ldr	r3, [sp, #28]
 8011d0c:	9306      	str	r3, [sp, #24]
 8011d0e:	e64a      	b.n	80119a6 <_svfprintf_r+0x5ce>
 8011d10:	f108 0304 	add.w	r3, r8, #4
 8011d14:	06aa      	lsls	r2, r5, #26
 8011d16:	9305      	str	r3, [sp, #20]
 8011d18:	d50c      	bpl.n	8011d34 <_svfprintf_r+0x95c>
 8011d1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011d1c:	f8d8 3000 	ldr.w	r3, [r8]
 8011d20:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011d22:	17d2      	asrs	r2, r2, #31
 8011d24:	e9c3 1200 	strd	r1, r2, [r3]
 8011d28:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8011d2c:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8011d30:	f7ff bb8f 	b.w	8011452 <_svfprintf_r+0x7a>
 8011d34:	06eb      	lsls	r3, r5, #27
 8011d36:	d504      	bpl.n	8011d42 <_svfprintf_r+0x96a>
 8011d38:	f8d8 3000 	ldr.w	r3, [r8]
 8011d3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011d3e:	601a      	str	r2, [r3, #0]
 8011d40:	e7f2      	b.n	8011d28 <_svfprintf_r+0x950>
 8011d42:	066e      	lsls	r6, r5, #25
 8011d44:	d504      	bpl.n	8011d50 <_svfprintf_r+0x978>
 8011d46:	f8d8 3000 	ldr.w	r3, [r8]
 8011d4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011d4c:	801a      	strh	r2, [r3, #0]
 8011d4e:	e7eb      	b.n	8011d28 <_svfprintf_r+0x950>
 8011d50:	05ad      	lsls	r5, r5, #22
 8011d52:	d5f1      	bpl.n	8011d38 <_svfprintf_r+0x960>
 8011d54:	f8d8 3000 	ldr.w	r3, [r8]
 8011d58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011d5a:	701a      	strb	r2, [r3, #0]
 8011d5c:	e7e4      	b.n	8011d28 <_svfprintf_r+0x950>
 8011d5e:	f045 0510 	orr.w	r5, r5, #16
 8011d62:	f015 0320 	ands.w	r3, r5, #32
 8011d66:	d020      	beq.n	8011daa <_svfprintf_r+0x9d2>
 8011d68:	f108 0307 	add.w	r3, r8, #7
 8011d6c:	f023 0307 	bic.w	r3, r3, #7
 8011d70:	461a      	mov	r2, r3
 8011d72:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8011d76:	f852 8b08 	ldr.w	r8, [r2], #8
 8011d7a:	9205      	str	r2, [sp, #20]
 8011d7c:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 8011d80:	2300      	movs	r3, #0
 8011d82:	2200      	movs	r2, #0
 8011d84:	f88d 205b 	strb.w	r2, [sp, #91]	; 0x5b
 8011d88:	1c72      	adds	r2, r6, #1
 8011d8a:	f000 84c3 	beq.w	8012714 <_svfprintf_r+0x133c>
 8011d8e:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 8011d92:	9202      	str	r2, [sp, #8]
 8011d94:	ea58 0209 	orrs.w	r2, r8, r9
 8011d98:	f040 84c1 	bne.w	801271e <_svfprintf_r+0x1346>
 8011d9c:	2e00      	cmp	r6, #0
 8011d9e:	f000 810d 	beq.w	8011fbc <_svfprintf_r+0xbe4>
 8011da2:	2b01      	cmp	r3, #1
 8011da4:	f040 84be 	bne.w	8012724 <_svfprintf_r+0x134c>
 8011da8:	e0ad      	b.n	8011f06 <_svfprintf_r+0xb2e>
 8011daa:	4642      	mov	r2, r8
 8011dac:	f015 0910 	ands.w	r9, r5, #16
 8011db0:	f852 8b04 	ldr.w	r8, [r2], #4
 8011db4:	9205      	str	r2, [sp, #20]
 8011db6:	d001      	beq.n	8011dbc <_svfprintf_r+0x9e4>
 8011db8:	4699      	mov	r9, r3
 8011dba:	e7df      	b.n	8011d7c <_svfprintf_r+0x9a4>
 8011dbc:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8011dc0:	d002      	beq.n	8011dc8 <_svfprintf_r+0x9f0>
 8011dc2:	fa1f f888 	uxth.w	r8, r8
 8011dc6:	e7d9      	b.n	8011d7c <_svfprintf_r+0x9a4>
 8011dc8:	f415 7900 	ands.w	r9, r5, #512	; 0x200
 8011dcc:	d0d6      	beq.n	8011d7c <_svfprintf_r+0x9a4>
 8011dce:	fa5f f888 	uxtb.w	r8, r8
 8011dd2:	e7f1      	b.n	8011db8 <_svfprintf_r+0x9e0>
 8011dd4:	4643      	mov	r3, r8
 8011dd6:	2278      	movs	r2, #120	; 0x78
 8011dd8:	f853 8b04 	ldr.w	r8, [r3], #4
 8011ddc:	9305      	str	r3, [sp, #20]
 8011dde:	2330      	movs	r3, #48	; 0x30
 8011de0:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8011de4:	4bae      	ldr	r3, [pc, #696]	; (80120a0 <_svfprintf_r+0xcc8>)
 8011de6:	9312      	str	r3, [sp, #72]	; 0x48
 8011de8:	f04f 0900 	mov.w	r9, #0
 8011dec:	f045 0502 	orr.w	r5, r5, #2
 8011df0:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
 8011df4:	2302      	movs	r3, #2
 8011df6:	9204      	str	r2, [sp, #16]
 8011df8:	e7c3      	b.n	8011d82 <_svfprintf_r+0x9aa>
 8011dfa:	4643      	mov	r3, r8
 8011dfc:	1c70      	adds	r0, r6, #1
 8011dfe:	f853 ab04 	ldr.w	sl, [r3], #4
 8011e02:	9305      	str	r3, [sp, #20]
 8011e04:	f04f 0800 	mov.w	r8, #0
 8011e08:	f88d 805b 	strb.w	r8, [sp, #91]	; 0x5b
 8011e0c:	d010      	beq.n	8011e30 <_svfprintf_r+0xa58>
 8011e0e:	4632      	mov	r2, r6
 8011e10:	4641      	mov	r1, r8
 8011e12:	4650      	mov	r0, sl
 8011e14:	f7ee fa1c 	bl	8000250 <memchr>
 8011e18:	9002      	str	r0, [sp, #8]
 8011e1a:	2800      	cmp	r0, #0
 8011e1c:	f000 80e5 	beq.w	8011fea <_svfprintf_r+0xc12>
 8011e20:	e9cd 8806 	strd	r8, r8, [sp, #24]
 8011e24:	eba0 060a 	sub.w	r6, r0, sl
 8011e28:	f8cd 8008 	str.w	r8, [sp, #8]
 8011e2c:	46c1      	mov	r9, r8
 8011e2e:	e5c2      	b.n	80119b6 <_svfprintf_r+0x5de>
 8011e30:	4650      	mov	r0, sl
 8011e32:	f7ee fa05 	bl	8000240 <strlen>
 8011e36:	46c1      	mov	r9, r8
 8011e38:	4606      	mov	r6, r0
 8011e3a:	f8cd 8008 	str.w	r8, [sp, #8]
 8011e3e:	464b      	mov	r3, r9
 8011e40:	e48a      	b.n	8011758 <_svfprintf_r+0x380>
 8011e42:	f045 0510 	orr.w	r5, r5, #16
 8011e46:	f015 0320 	ands.w	r3, r5, #32
 8011e4a:	d00b      	beq.n	8011e64 <_svfprintf_r+0xa8c>
 8011e4c:	f108 0307 	add.w	r3, r8, #7
 8011e50:	f023 0307 	bic.w	r3, r3, #7
 8011e54:	461a      	mov	r2, r3
 8011e56:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8011e5a:	f852 8b08 	ldr.w	r8, [r2], #8
 8011e5e:	9205      	str	r2, [sp, #20]
 8011e60:	2301      	movs	r3, #1
 8011e62:	e78e      	b.n	8011d82 <_svfprintf_r+0x9aa>
 8011e64:	4642      	mov	r2, r8
 8011e66:	f015 0910 	ands.w	r9, r5, #16
 8011e6a:	f852 8b04 	ldr.w	r8, [r2], #4
 8011e6e:	9205      	str	r2, [sp, #20]
 8011e70:	d001      	beq.n	8011e76 <_svfprintf_r+0xa9e>
 8011e72:	4699      	mov	r9, r3
 8011e74:	e7f4      	b.n	8011e60 <_svfprintf_r+0xa88>
 8011e76:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8011e7a:	d002      	beq.n	8011e82 <_svfprintf_r+0xaaa>
 8011e7c:	fa1f f888 	uxth.w	r8, r8
 8011e80:	e7ee      	b.n	8011e60 <_svfprintf_r+0xa88>
 8011e82:	f415 7900 	ands.w	r9, r5, #512	; 0x200
 8011e86:	d0eb      	beq.n	8011e60 <_svfprintf_r+0xa88>
 8011e88:	fa5f f888 	uxtb.w	r8, r8
 8011e8c:	e7f1      	b.n	8011e72 <_svfprintf_r+0xa9a>
 8011e8e:	4b85      	ldr	r3, [pc, #532]	; (80120a4 <_svfprintf_r+0xccc>)
 8011e90:	9312      	str	r3, [sp, #72]	; 0x48
 8011e92:	f015 0320 	ands.w	r3, r5, #32
 8011e96:	d01c      	beq.n	8011ed2 <_svfprintf_r+0xafa>
 8011e98:	f108 0307 	add.w	r3, r8, #7
 8011e9c:	f023 0307 	bic.w	r3, r3, #7
 8011ea0:	461a      	mov	r2, r3
 8011ea2:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8011ea6:	f852 8b08 	ldr.w	r8, [r2], #8
 8011eaa:	9205      	str	r2, [sp, #20]
 8011eac:	07e9      	lsls	r1, r5, #31
 8011eae:	d50a      	bpl.n	8011ec6 <_svfprintf_r+0xaee>
 8011eb0:	ea58 0309 	orrs.w	r3, r8, r9
 8011eb4:	d007      	beq.n	8011ec6 <_svfprintf_r+0xaee>
 8011eb6:	2330      	movs	r3, #48	; 0x30
 8011eb8:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8011ebc:	9b04      	ldr	r3, [sp, #16]
 8011ebe:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
 8011ec2:	f045 0502 	orr.w	r5, r5, #2
 8011ec6:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 8011eca:	2302      	movs	r3, #2
 8011ecc:	e759      	b.n	8011d82 <_svfprintf_r+0x9aa>
 8011ece:	4b74      	ldr	r3, [pc, #464]	; (80120a0 <_svfprintf_r+0xcc8>)
 8011ed0:	e7de      	b.n	8011e90 <_svfprintf_r+0xab8>
 8011ed2:	4642      	mov	r2, r8
 8011ed4:	f015 0910 	ands.w	r9, r5, #16
 8011ed8:	f852 8b04 	ldr.w	r8, [r2], #4
 8011edc:	9205      	str	r2, [sp, #20]
 8011ede:	d001      	beq.n	8011ee4 <_svfprintf_r+0xb0c>
 8011ee0:	4699      	mov	r9, r3
 8011ee2:	e7e3      	b.n	8011eac <_svfprintf_r+0xad4>
 8011ee4:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8011ee8:	d002      	beq.n	8011ef0 <_svfprintf_r+0xb18>
 8011eea:	fa1f f888 	uxth.w	r8, r8
 8011eee:	e7dd      	b.n	8011eac <_svfprintf_r+0xad4>
 8011ef0:	f415 7900 	ands.w	r9, r5, #512	; 0x200
 8011ef4:	d0da      	beq.n	8011eac <_svfprintf_r+0xad4>
 8011ef6:	fa5f f888 	uxtb.w	r8, r8
 8011efa:	e7f1      	b.n	8011ee0 <_svfprintf_r+0xb08>
 8011efc:	f1b8 0f0a 	cmp.w	r8, #10
 8011f00:	f179 0300 	sbcs.w	r3, r9, #0
 8011f04:	d207      	bcs.n	8011f16 <_svfprintf_r+0xb3e>
 8011f06:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8011f0a:	f88d 8127 	strb.w	r8, [sp, #295]	; 0x127
 8011f0e:	f20d 1a27 	addw	sl, sp, #295	; 0x127
 8011f12:	f000 bc25 	b.w	8012760 <_svfprintf_r+0x1388>
 8011f16:	2300      	movs	r3, #0
 8011f18:	9303      	str	r3, [sp, #12]
 8011f1a:	9b02      	ldr	r3, [sp, #8]
 8011f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011f20:	ad4a      	add	r5, sp, #296	; 0x128
 8011f22:	9306      	str	r3, [sp, #24]
 8011f24:	220a      	movs	r2, #10
 8011f26:	2300      	movs	r3, #0
 8011f28:	4640      	mov	r0, r8
 8011f2a:	4649      	mov	r1, r9
 8011f2c:	f7ee f9e0 	bl	80002f0 <__aeabi_uldivmod>
 8011f30:	9b03      	ldr	r3, [sp, #12]
 8011f32:	3301      	adds	r3, #1
 8011f34:	9303      	str	r3, [sp, #12]
 8011f36:	9b06      	ldr	r3, [sp, #24]
 8011f38:	3230      	adds	r2, #48	; 0x30
 8011f3a:	f105 3aff 	add.w	sl, r5, #4294967295
 8011f3e:	f805 2c01 	strb.w	r2, [r5, #-1]
 8011f42:	b1db      	cbz	r3, 8011f7c <_svfprintf_r+0xba4>
 8011f44:	9b08      	ldr	r3, [sp, #32]
 8011f46:	9a03      	ldr	r2, [sp, #12]
 8011f48:	781b      	ldrb	r3, [r3, #0]
 8011f4a:	429a      	cmp	r2, r3
 8011f4c:	d116      	bne.n	8011f7c <_svfprintf_r+0xba4>
 8011f4e:	2aff      	cmp	r2, #255	; 0xff
 8011f50:	d014      	beq.n	8011f7c <_svfprintf_r+0xba4>
 8011f52:	f1b8 0f0a 	cmp.w	r8, #10
 8011f56:	f179 0300 	sbcs.w	r3, r9, #0
 8011f5a:	d30f      	bcc.n	8011f7c <_svfprintf_r+0xba4>
 8011f5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011f5e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8011f60:	ebaa 0a03 	sub.w	sl, sl, r3
 8011f64:	461a      	mov	r2, r3
 8011f66:	4650      	mov	r0, sl
 8011f68:	f003 fea1 	bl	8015cae <strncpy>
 8011f6c:	9b08      	ldr	r3, [sp, #32]
 8011f6e:	785b      	ldrb	r3, [r3, #1]
 8011f70:	b11b      	cbz	r3, 8011f7a <_svfprintf_r+0xba2>
 8011f72:	9b08      	ldr	r3, [sp, #32]
 8011f74:	3301      	adds	r3, #1
 8011f76:	9308      	str	r3, [sp, #32]
 8011f78:	2300      	movs	r3, #0
 8011f7a:	9303      	str	r3, [sp, #12]
 8011f7c:	2300      	movs	r3, #0
 8011f7e:	220a      	movs	r2, #10
 8011f80:	4640      	mov	r0, r8
 8011f82:	4649      	mov	r1, r9
 8011f84:	f7ee f9b4 	bl	80002f0 <__aeabi_uldivmod>
 8011f88:	f1b8 0f0a 	cmp.w	r8, #10
 8011f8c:	f179 0300 	sbcs.w	r3, r9, #0
 8011f90:	f0c0 83e6 	bcc.w	8012760 <_svfprintf_r+0x1388>
 8011f94:	4680      	mov	r8, r0
 8011f96:	4689      	mov	r9, r1
 8011f98:	4655      	mov	r5, sl
 8011f9a:	e7c3      	b.n	8011f24 <_svfprintf_r+0xb4c>
 8011f9c:	f008 030f 	and.w	r3, r8, #15
 8011fa0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011fa2:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8011fa6:	5cd3      	ldrb	r3, [r2, r3]
 8011fa8:	f80a 3d01 	strb.w	r3, [sl, #-1]!
 8011fac:	ea48 7809 	orr.w	r8, r8, r9, lsl #28
 8011fb0:	ea4f 1919 	mov.w	r9, r9, lsr #4
 8011fb4:	ea58 0309 	orrs.w	r3, r8, r9
 8011fb8:	d1f0      	bne.n	8011f9c <_svfprintf_r+0xbc4>
 8011fba:	e3d1      	b.n	8012760 <_svfprintf_r+0x1388>
 8011fbc:	b92b      	cbnz	r3, 8011fca <_svfprintf_r+0xbf2>
 8011fbe:	07e8      	lsls	r0, r5, #31
 8011fc0:	d503      	bpl.n	8011fca <_svfprintf_r+0xbf2>
 8011fc2:	2330      	movs	r3, #48	; 0x30
 8011fc4:	f88d 3127 	strb.w	r3, [sp, #295]	; 0x127
 8011fc8:	e7a1      	b.n	8011f0e <_svfprintf_r+0xb36>
 8011fca:	f50d 7a94 	add.w	sl, sp, #296	; 0x128
 8011fce:	e3c7      	b.n	8012760 <_svfprintf_r+0x1388>
 8011fd0:	9b04      	ldr	r3, [sp, #16]
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	f000 838e 	beq.w	80126f4 <_svfprintf_r+0x131c>
 8011fd8:	2000      	movs	r0, #0
 8011fda:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
 8011fde:	f88d 005b 	strb.w	r0, [sp, #91]	; 0x5b
 8011fe2:	f8cd 8014 	str.w	r8, [sp, #20]
 8011fe6:	f7ff bb4e 	b.w	8011686 <_svfprintf_r+0x2ae>
 8011fea:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8011fee:	e726      	b.n	8011e3e <_svfprintf_r+0xa66>
 8011ff0:	2110      	movs	r1, #16
 8011ff2:	6061      	str	r1, [r4, #4]
 8011ff4:	2a07      	cmp	r2, #7
 8011ff6:	4461      	add	r1, ip
 8011ff8:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 8011ffc:	dd0a      	ble.n	8012014 <_svfprintf_r+0xc3c>
 8011ffe:	aa1e      	add	r2, sp, #120	; 0x78
 8012000:	4659      	mov	r1, fp
 8012002:	4638      	mov	r0, r7
 8012004:	9315      	str	r3, [sp, #84]	; 0x54
 8012006:	f003 fe65 	bl	8015cd4 <__ssprint_r>
 801200a:	2800      	cmp	r0, #0
 801200c:	f040 834f 	bne.w	80126ae <_svfprintf_r+0x12d6>
 8012010:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012012:	a821      	add	r0, sp, #132	; 0x84
 8012014:	3b10      	subs	r3, #16
 8012016:	4604      	mov	r4, r0
 8012018:	e4e8      	b.n	80119ec <_svfprintf_r+0x614>
 801201a:	4604      	mov	r4, r0
 801201c:	e502      	b.n	8011a24 <_svfprintf_r+0x64c>
 801201e:	aa1e      	add	r2, sp, #120	; 0x78
 8012020:	4659      	mov	r1, fp
 8012022:	4638      	mov	r0, r7
 8012024:	f003 fe56 	bl	8015cd4 <__ssprint_r>
 8012028:	2800      	cmp	r0, #0
 801202a:	f040 8340 	bne.w	80126ae <_svfprintf_r+0x12d6>
 801202e:	ac21      	add	r4, sp, #132	; 0x84
 8012030:	e50a      	b.n	8011a48 <_svfprintf_r+0x670>
 8012032:	aa1e      	add	r2, sp, #120	; 0x78
 8012034:	4659      	mov	r1, fp
 8012036:	4638      	mov	r0, r7
 8012038:	f003 fe4c 	bl	8015cd4 <__ssprint_r>
 801203c:	2800      	cmp	r0, #0
 801203e:	f040 8336 	bne.w	80126ae <_svfprintf_r+0x12d6>
 8012042:	ac21      	add	r4, sp, #132	; 0x84
 8012044:	e510      	b.n	8011a68 <_svfprintf_r+0x690>
 8012046:	2110      	movs	r1, #16
 8012048:	6061      	str	r1, [r4, #4]
 801204a:	2a07      	cmp	r2, #7
 801204c:	4461      	add	r1, ip
 801204e:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 8012052:	dd0a      	ble.n	801206a <_svfprintf_r+0xc92>
 8012054:	aa1e      	add	r2, sp, #120	; 0x78
 8012056:	4659      	mov	r1, fp
 8012058:	4638      	mov	r0, r7
 801205a:	9313      	str	r3, [sp, #76]	; 0x4c
 801205c:	f003 fe3a 	bl	8015cd4 <__ssprint_r>
 8012060:	2800      	cmp	r0, #0
 8012062:	f040 8324 	bne.w	80126ae <_svfprintf_r+0x12d6>
 8012066:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012068:	a821      	add	r0, sp, #132	; 0x84
 801206a:	3b10      	subs	r3, #16
 801206c:	4604      	mov	r4, r0
 801206e:	e503      	b.n	8011a78 <_svfprintf_r+0x6a0>
 8012070:	4604      	mov	r4, r0
 8012072:	e51d      	b.n	8011ab0 <_svfprintf_r+0x6d8>
 8012074:	2010      	movs	r0, #16
 8012076:	4403      	add	r3, r0
 8012078:	2a07      	cmp	r2, #7
 801207a:	e9cd 231f 	strd	r2, r3, [sp, #124]	; 0x7c
 801207e:	6060      	str	r0, [r4, #4]
 8012080:	dd08      	ble.n	8012094 <_svfprintf_r+0xcbc>
 8012082:	aa1e      	add	r2, sp, #120	; 0x78
 8012084:	4659      	mov	r1, fp
 8012086:	4638      	mov	r0, r7
 8012088:	f003 fe24 	bl	8015cd4 <__ssprint_r>
 801208c:	2800      	cmp	r0, #0
 801208e:	f040 830e 	bne.w	80126ae <_svfprintf_r+0x12d6>
 8012092:	a921      	add	r1, sp, #132	; 0x84
 8012094:	f1a9 0910 	sub.w	r9, r9, #16
 8012098:	460c      	mov	r4, r1
 801209a:	e50e      	b.n	8011aba <_svfprintf_r+0x6e2>
 801209c:	460c      	mov	r4, r1
 801209e:	e529      	b.n	8011af4 <_svfprintf_r+0x71c>
 80120a0:	0801777c 	.word	0x0801777c
 80120a4:	0801778d 	.word	0x0801778d
 80120a8:	9b04      	ldr	r3, [sp, #16]
 80120aa:	2b65      	cmp	r3, #101	; 0x65
 80120ac:	f340 8252 	ble.w	8012554 <_svfprintf_r+0x117c>
 80120b0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80120b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120b8:	d16b      	bne.n	8012192 <_svfprintf_r+0xdba>
 80120ba:	4b74      	ldr	r3, [pc, #464]	; (801228c <_svfprintf_r+0xeb4>)
 80120bc:	6023      	str	r3, [r4, #0]
 80120be:	2301      	movs	r3, #1
 80120c0:	4418      	add	r0, r3
 80120c2:	6063      	str	r3, [r4, #4]
 80120c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80120c6:	9020      	str	r0, [sp, #128]	; 0x80
 80120c8:	3301      	adds	r3, #1
 80120ca:	2b07      	cmp	r3, #7
 80120cc:	931f      	str	r3, [sp, #124]	; 0x7c
 80120ce:	dc39      	bgt.n	8012144 <_svfprintf_r+0xd6c>
 80120d0:	3408      	adds	r4, #8
 80120d2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80120d4:	9a03      	ldr	r2, [sp, #12]
 80120d6:	4293      	cmp	r3, r2
 80120d8:	db02      	blt.n	80120e0 <_svfprintf_r+0xd08>
 80120da:	07ea      	lsls	r2, r5, #31
 80120dc:	f57f ad19 	bpl.w	8011b12 <_svfprintf_r+0x73a>
 80120e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80120e2:	6023      	str	r3, [r4, #0]
 80120e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80120e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80120e8:	6063      	str	r3, [r4, #4]
 80120ea:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80120ec:	4413      	add	r3, r2
 80120ee:	9320      	str	r3, [sp, #128]	; 0x80
 80120f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80120f2:	3301      	adds	r3, #1
 80120f4:	2b07      	cmp	r3, #7
 80120f6:	931f      	str	r3, [sp, #124]	; 0x7c
 80120f8:	dc2e      	bgt.n	8012158 <_svfprintf_r+0xd80>
 80120fa:	3408      	adds	r4, #8
 80120fc:	9b03      	ldr	r3, [sp, #12]
 80120fe:	1e5e      	subs	r6, r3, #1
 8012100:	2e00      	cmp	r6, #0
 8012102:	f77f ad06 	ble.w	8011b12 <_svfprintf_r+0x73a>
 8012106:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8012290 <_svfprintf_r+0xeb8>
 801210a:	f04f 0910 	mov.w	r9, #16
 801210e:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 8012112:	2e10      	cmp	r6, #16
 8012114:	f103 0301 	add.w	r3, r3, #1
 8012118:	f104 0108 	add.w	r1, r4, #8
 801211c:	f8c4 8000 	str.w	r8, [r4]
 8012120:	dc24      	bgt.n	801216c <_svfprintf_r+0xd94>
 8012122:	6066      	str	r6, [r4, #4]
 8012124:	2b07      	cmp	r3, #7
 8012126:	4416      	add	r6, r2
 8012128:	e9cd 361f 	strd	r3, r6, [sp, #124]	; 0x7c
 801212c:	f340 829d 	ble.w	801266a <_svfprintf_r+0x1292>
 8012130:	aa1e      	add	r2, sp, #120	; 0x78
 8012132:	4659      	mov	r1, fp
 8012134:	4638      	mov	r0, r7
 8012136:	f003 fdcd 	bl	8015cd4 <__ssprint_r>
 801213a:	2800      	cmp	r0, #0
 801213c:	f040 82b7 	bne.w	80126ae <_svfprintf_r+0x12d6>
 8012140:	ac21      	add	r4, sp, #132	; 0x84
 8012142:	e4e6      	b.n	8011b12 <_svfprintf_r+0x73a>
 8012144:	aa1e      	add	r2, sp, #120	; 0x78
 8012146:	4659      	mov	r1, fp
 8012148:	4638      	mov	r0, r7
 801214a:	f003 fdc3 	bl	8015cd4 <__ssprint_r>
 801214e:	2800      	cmp	r0, #0
 8012150:	f040 82ad 	bne.w	80126ae <_svfprintf_r+0x12d6>
 8012154:	ac21      	add	r4, sp, #132	; 0x84
 8012156:	e7bc      	b.n	80120d2 <_svfprintf_r+0xcfa>
 8012158:	aa1e      	add	r2, sp, #120	; 0x78
 801215a:	4659      	mov	r1, fp
 801215c:	4638      	mov	r0, r7
 801215e:	f003 fdb9 	bl	8015cd4 <__ssprint_r>
 8012162:	2800      	cmp	r0, #0
 8012164:	f040 82a3 	bne.w	80126ae <_svfprintf_r+0x12d6>
 8012168:	ac21      	add	r4, sp, #132	; 0x84
 801216a:	e7c7      	b.n	80120fc <_svfprintf_r+0xd24>
 801216c:	3210      	adds	r2, #16
 801216e:	2b07      	cmp	r3, #7
 8012170:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 8012174:	f8c4 9004 	str.w	r9, [r4, #4]
 8012178:	dd08      	ble.n	801218c <_svfprintf_r+0xdb4>
 801217a:	aa1e      	add	r2, sp, #120	; 0x78
 801217c:	4659      	mov	r1, fp
 801217e:	4638      	mov	r0, r7
 8012180:	f003 fda8 	bl	8015cd4 <__ssprint_r>
 8012184:	2800      	cmp	r0, #0
 8012186:	f040 8292 	bne.w	80126ae <_svfprintf_r+0x12d6>
 801218a:	a921      	add	r1, sp, #132	; 0x84
 801218c:	3e10      	subs	r6, #16
 801218e:	460c      	mov	r4, r1
 8012190:	e7bd      	b.n	801210e <_svfprintf_r+0xd36>
 8012192:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8012194:	2b00      	cmp	r3, #0
 8012196:	dc7d      	bgt.n	8012294 <_svfprintf_r+0xebc>
 8012198:	4b3c      	ldr	r3, [pc, #240]	; (801228c <_svfprintf_r+0xeb4>)
 801219a:	6023      	str	r3, [r4, #0]
 801219c:	2301      	movs	r3, #1
 801219e:	4418      	add	r0, r3
 80121a0:	6063      	str	r3, [r4, #4]
 80121a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80121a4:	9020      	str	r0, [sp, #128]	; 0x80
 80121a6:	3301      	adds	r3, #1
 80121a8:	2b07      	cmp	r3, #7
 80121aa:	931f      	str	r3, [sp, #124]	; 0x7c
 80121ac:	dc47      	bgt.n	801223e <_svfprintf_r+0xe66>
 80121ae:	3408      	adds	r4, #8
 80121b0:	9903      	ldr	r1, [sp, #12]
 80121b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80121b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80121b6:	430a      	orrs	r2, r1
 80121b8:	f005 0101 	and.w	r1, r5, #1
 80121bc:	430a      	orrs	r2, r1
 80121be:	f43f aca8 	beq.w	8011b12 <_svfprintf_r+0x73a>
 80121c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80121c4:	6022      	str	r2, [r4, #0]
 80121c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80121c8:	6062      	str	r2, [r4, #4]
 80121ca:	4413      	add	r3, r2
 80121cc:	9320      	str	r3, [sp, #128]	; 0x80
 80121ce:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80121d0:	3301      	adds	r3, #1
 80121d2:	2b07      	cmp	r3, #7
 80121d4:	931f      	str	r3, [sp, #124]	; 0x7c
 80121d6:	dc3c      	bgt.n	8012252 <_svfprintf_r+0xe7a>
 80121d8:	f104 0308 	add.w	r3, r4, #8
 80121dc:	9e18      	ldr	r6, [sp, #96]	; 0x60
 80121de:	2e00      	cmp	r6, #0
 80121e0:	da1c      	bge.n	801221c <_svfprintf_r+0xe44>
 80121e2:	4c2b      	ldr	r4, [pc, #172]	; (8012290 <_svfprintf_r+0xeb8>)
 80121e4:	4276      	negs	r6, r6
 80121e6:	461a      	mov	r2, r3
 80121e8:	f04f 0810 	mov.w	r8, #16
 80121ec:	e9dd 101f 	ldrd	r1, r0, [sp, #124]	; 0x7c
 80121f0:	2e10      	cmp	r6, #16
 80121f2:	f101 0101 	add.w	r1, r1, #1
 80121f6:	f103 0308 	add.w	r3, r3, #8
 80121fa:	6014      	str	r4, [r2, #0]
 80121fc:	dc33      	bgt.n	8012266 <_svfprintf_r+0xe8e>
 80121fe:	6056      	str	r6, [r2, #4]
 8012200:	2907      	cmp	r1, #7
 8012202:	4406      	add	r6, r0
 8012204:	e9cd 161f 	strd	r1, r6, [sp, #124]	; 0x7c
 8012208:	dd08      	ble.n	801221c <_svfprintf_r+0xe44>
 801220a:	aa1e      	add	r2, sp, #120	; 0x78
 801220c:	4659      	mov	r1, fp
 801220e:	4638      	mov	r0, r7
 8012210:	f003 fd60 	bl	8015cd4 <__ssprint_r>
 8012214:	2800      	cmp	r0, #0
 8012216:	f040 824a 	bne.w	80126ae <_svfprintf_r+0x12d6>
 801221a:	ab21      	add	r3, sp, #132	; 0x84
 801221c:	9a03      	ldr	r2, [sp, #12]
 801221e:	605a      	str	r2, [r3, #4]
 8012220:	9903      	ldr	r1, [sp, #12]
 8012222:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012224:	f8c3 a000 	str.w	sl, [r3]
 8012228:	440a      	add	r2, r1
 801222a:	9220      	str	r2, [sp, #128]	; 0x80
 801222c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801222e:	3201      	adds	r2, #1
 8012230:	2a07      	cmp	r2, #7
 8012232:	921f      	str	r2, [sp, #124]	; 0x7c
 8012234:	f73f af7c 	bgt.w	8012130 <_svfprintf_r+0xd58>
 8012238:	f103 0408 	add.w	r4, r3, #8
 801223c:	e469      	b.n	8011b12 <_svfprintf_r+0x73a>
 801223e:	aa1e      	add	r2, sp, #120	; 0x78
 8012240:	4659      	mov	r1, fp
 8012242:	4638      	mov	r0, r7
 8012244:	f003 fd46 	bl	8015cd4 <__ssprint_r>
 8012248:	2800      	cmp	r0, #0
 801224a:	f040 8230 	bne.w	80126ae <_svfprintf_r+0x12d6>
 801224e:	ac21      	add	r4, sp, #132	; 0x84
 8012250:	e7ae      	b.n	80121b0 <_svfprintf_r+0xdd8>
 8012252:	aa1e      	add	r2, sp, #120	; 0x78
 8012254:	4659      	mov	r1, fp
 8012256:	4638      	mov	r0, r7
 8012258:	f003 fd3c 	bl	8015cd4 <__ssprint_r>
 801225c:	2800      	cmp	r0, #0
 801225e:	f040 8226 	bne.w	80126ae <_svfprintf_r+0x12d6>
 8012262:	ab21      	add	r3, sp, #132	; 0x84
 8012264:	e7ba      	b.n	80121dc <_svfprintf_r+0xe04>
 8012266:	3010      	adds	r0, #16
 8012268:	2907      	cmp	r1, #7
 801226a:	e9cd 101f 	strd	r1, r0, [sp, #124]	; 0x7c
 801226e:	f8c2 8004 	str.w	r8, [r2, #4]
 8012272:	dd08      	ble.n	8012286 <_svfprintf_r+0xeae>
 8012274:	aa1e      	add	r2, sp, #120	; 0x78
 8012276:	4659      	mov	r1, fp
 8012278:	4638      	mov	r0, r7
 801227a:	f003 fd2b 	bl	8015cd4 <__ssprint_r>
 801227e:	2800      	cmp	r0, #0
 8012280:	f040 8215 	bne.w	80126ae <_svfprintf_r+0x12d6>
 8012284:	ab21      	add	r3, sp, #132	; 0x84
 8012286:	3e10      	subs	r6, #16
 8012288:	461a      	mov	r2, r3
 801228a:	e7af      	b.n	80121ec <_svfprintf_r+0xe14>
 801228c:	0801779e 	.word	0x0801779e
 8012290:	080177b0 	.word	0x080177b0
 8012294:	9b03      	ldr	r3, [sp, #12]
 8012296:	4543      	cmp	r3, r8
 8012298:	bfa8      	it	ge
 801229a:	4643      	movge	r3, r8
 801229c:	2b00      	cmp	r3, #0
 801229e:	4699      	mov	r9, r3
 80122a0:	dd0a      	ble.n	80122b8 <_svfprintf_r+0xee0>
 80122a2:	4418      	add	r0, r3
 80122a4:	e9c4 a300 	strd	sl, r3, [r4]
 80122a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80122aa:	9020      	str	r0, [sp, #128]	; 0x80
 80122ac:	3301      	adds	r3, #1
 80122ae:	2b07      	cmp	r3, #7
 80122b0:	931f      	str	r3, [sp, #124]	; 0x7c
 80122b2:	f300 8094 	bgt.w	80123de <_svfprintf_r+0x1006>
 80122b6:	3408      	adds	r4, #8
 80122b8:	f1b9 0f00 	cmp.w	r9, #0
 80122bc:	bfac      	ite	ge
 80122be:	eba8 0609 	subge.w	r6, r8, r9
 80122c2:	4646      	movlt	r6, r8
 80122c4:	2e00      	cmp	r6, #0
 80122c6:	dd1c      	ble.n	8012302 <_svfprintf_r+0xf2a>
 80122c8:	f8df 9440 	ldr.w	r9, [pc, #1088]	; 801270c <_svfprintf_r+0x1334>
 80122cc:	f8c4 9000 	str.w	r9, [r4]
 80122d0:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 80122d4:	2e10      	cmp	r6, #16
 80122d6:	f103 0301 	add.w	r3, r3, #1
 80122da:	f104 0108 	add.w	r1, r4, #8
 80122de:	f300 8088 	bgt.w	80123f2 <_svfprintf_r+0x101a>
 80122e2:	6066      	str	r6, [r4, #4]
 80122e4:	2b07      	cmp	r3, #7
 80122e6:	4416      	add	r6, r2
 80122e8:	e9cd 361f 	strd	r3, r6, [sp, #124]	; 0x7c
 80122ec:	f340 8094 	ble.w	8012418 <_svfprintf_r+0x1040>
 80122f0:	aa1e      	add	r2, sp, #120	; 0x78
 80122f2:	4659      	mov	r1, fp
 80122f4:	4638      	mov	r0, r7
 80122f6:	f003 fced 	bl	8015cd4 <__ssprint_r>
 80122fa:	2800      	cmp	r0, #0
 80122fc:	f040 81d7 	bne.w	80126ae <_svfprintf_r+0x12d6>
 8012300:	ac21      	add	r4, sp, #132	; 0x84
 8012302:	056b      	lsls	r3, r5, #21
 8012304:	eb0a 0608 	add.w	r6, sl, r8
 8012308:	d50c      	bpl.n	8012324 <_svfprintf_r+0xf4c>
 801230a:	9b07      	ldr	r3, [sp, #28]
 801230c:	2b00      	cmp	r3, #0
 801230e:	f040 8085 	bne.w	801241c <_svfprintf_r+0x1044>
 8012312:	9b06      	ldr	r3, [sp, #24]
 8012314:	2b00      	cmp	r3, #0
 8012316:	f040 8084 	bne.w	8012422 <_svfprintf_r+0x104a>
 801231a:	9b03      	ldr	r3, [sp, #12]
 801231c:	4453      	add	r3, sl
 801231e:	429e      	cmp	r6, r3
 8012320:	bf28      	it	cs
 8012322:	461e      	movcs	r6, r3
 8012324:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8012326:	9a03      	ldr	r2, [sp, #12]
 8012328:	4293      	cmp	r3, r2
 801232a:	db01      	blt.n	8012330 <_svfprintf_r+0xf58>
 801232c:	07e8      	lsls	r0, r5, #31
 801232e:	d50e      	bpl.n	801234e <_svfprintf_r+0xf76>
 8012330:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012332:	6023      	str	r3, [r4, #0]
 8012334:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012336:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012338:	6063      	str	r3, [r4, #4]
 801233a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801233c:	4413      	add	r3, r2
 801233e:	9320      	str	r3, [sp, #128]	; 0x80
 8012340:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012342:	3301      	adds	r3, #1
 8012344:	2b07      	cmp	r3, #7
 8012346:	931f      	str	r3, [sp, #124]	; 0x7c
 8012348:	f300 80f0 	bgt.w	801252c <_svfprintf_r+0x1154>
 801234c:	3408      	adds	r4, #8
 801234e:	9b03      	ldr	r3, [sp, #12]
 8012350:	9903      	ldr	r1, [sp, #12]
 8012352:	eb0a 0203 	add.w	r2, sl, r3
 8012356:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8012358:	1b92      	subs	r2, r2, r6
 801235a:	eba1 0803 	sub.w	r8, r1, r3
 801235e:	4590      	cmp	r8, r2
 8012360:	bfa8      	it	ge
 8012362:	4690      	movge	r8, r2
 8012364:	f1b8 0f00 	cmp.w	r8, #0
 8012368:	dd0b      	ble.n	8012382 <_svfprintf_r+0xfaa>
 801236a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801236c:	4443      	add	r3, r8
 801236e:	9320      	str	r3, [sp, #128]	; 0x80
 8012370:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012372:	3301      	adds	r3, #1
 8012374:	2b07      	cmp	r3, #7
 8012376:	e9c4 6800 	strd	r6, r8, [r4]
 801237a:	931f      	str	r3, [sp, #124]	; 0x7c
 801237c:	f300 80e0 	bgt.w	8012540 <_svfprintf_r+0x1168>
 8012380:	3408      	adds	r4, #8
 8012382:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8012384:	9b03      	ldr	r3, [sp, #12]
 8012386:	f1b8 0f00 	cmp.w	r8, #0
 801238a:	eba3 0606 	sub.w	r6, r3, r6
 801238e:	bfa8      	it	ge
 8012390:	eba6 0608 	subge.w	r6, r6, r8
 8012394:	2e00      	cmp	r6, #0
 8012396:	f77f abbc 	ble.w	8011b12 <_svfprintf_r+0x73a>
 801239a:	f8df 8370 	ldr.w	r8, [pc, #880]	; 801270c <_svfprintf_r+0x1334>
 801239e:	f04f 0910 	mov.w	r9, #16
 80123a2:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 80123a6:	2e10      	cmp	r6, #16
 80123a8:	f103 0301 	add.w	r3, r3, #1
 80123ac:	f104 0108 	add.w	r1, r4, #8
 80123b0:	f8c4 8000 	str.w	r8, [r4]
 80123b4:	f77f aeb5 	ble.w	8012122 <_svfprintf_r+0xd4a>
 80123b8:	3210      	adds	r2, #16
 80123ba:	2b07      	cmp	r3, #7
 80123bc:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 80123c0:	f8c4 9004 	str.w	r9, [r4, #4]
 80123c4:	dd08      	ble.n	80123d8 <_svfprintf_r+0x1000>
 80123c6:	aa1e      	add	r2, sp, #120	; 0x78
 80123c8:	4659      	mov	r1, fp
 80123ca:	4638      	mov	r0, r7
 80123cc:	f003 fc82 	bl	8015cd4 <__ssprint_r>
 80123d0:	2800      	cmp	r0, #0
 80123d2:	f040 816c 	bne.w	80126ae <_svfprintf_r+0x12d6>
 80123d6:	a921      	add	r1, sp, #132	; 0x84
 80123d8:	3e10      	subs	r6, #16
 80123da:	460c      	mov	r4, r1
 80123dc:	e7e1      	b.n	80123a2 <_svfprintf_r+0xfca>
 80123de:	aa1e      	add	r2, sp, #120	; 0x78
 80123e0:	4659      	mov	r1, fp
 80123e2:	4638      	mov	r0, r7
 80123e4:	f003 fc76 	bl	8015cd4 <__ssprint_r>
 80123e8:	2800      	cmp	r0, #0
 80123ea:	f040 8160 	bne.w	80126ae <_svfprintf_r+0x12d6>
 80123ee:	ac21      	add	r4, sp, #132	; 0x84
 80123f0:	e762      	b.n	80122b8 <_svfprintf_r+0xee0>
 80123f2:	2010      	movs	r0, #16
 80123f4:	4402      	add	r2, r0
 80123f6:	2b07      	cmp	r3, #7
 80123f8:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 80123fc:	6060      	str	r0, [r4, #4]
 80123fe:	dd08      	ble.n	8012412 <_svfprintf_r+0x103a>
 8012400:	aa1e      	add	r2, sp, #120	; 0x78
 8012402:	4659      	mov	r1, fp
 8012404:	4638      	mov	r0, r7
 8012406:	f003 fc65 	bl	8015cd4 <__ssprint_r>
 801240a:	2800      	cmp	r0, #0
 801240c:	f040 814f 	bne.w	80126ae <_svfprintf_r+0x12d6>
 8012410:	a921      	add	r1, sp, #132	; 0x84
 8012412:	3e10      	subs	r6, #16
 8012414:	460c      	mov	r4, r1
 8012416:	e759      	b.n	80122cc <_svfprintf_r+0xef4>
 8012418:	460c      	mov	r4, r1
 801241a:	e772      	b.n	8012302 <_svfprintf_r+0xf2a>
 801241c:	9b06      	ldr	r3, [sp, #24]
 801241e:	2b00      	cmp	r3, #0
 8012420:	d053      	beq.n	80124ca <_svfprintf_r+0x10f2>
 8012422:	9b06      	ldr	r3, [sp, #24]
 8012424:	3b01      	subs	r3, #1
 8012426:	9306      	str	r3, [sp, #24]
 8012428:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801242a:	6023      	str	r3, [r4, #0]
 801242c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801242e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012430:	6063      	str	r3, [r4, #4]
 8012432:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012434:	4413      	add	r3, r2
 8012436:	9320      	str	r3, [sp, #128]	; 0x80
 8012438:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801243a:	3301      	adds	r3, #1
 801243c:	2b07      	cmp	r3, #7
 801243e:	931f      	str	r3, [sp, #124]	; 0x7c
 8012440:	dc4a      	bgt.n	80124d8 <_svfprintf_r+0x1100>
 8012442:	3408      	adds	r4, #8
 8012444:	9b03      	ldr	r3, [sp, #12]
 8012446:	9a08      	ldr	r2, [sp, #32]
 8012448:	eb0a 0903 	add.w	r9, sl, r3
 801244c:	eba9 0306 	sub.w	r3, r9, r6
 8012450:	f892 9000 	ldrb.w	r9, [r2]
 8012454:	4599      	cmp	r9, r3
 8012456:	bfa8      	it	ge
 8012458:	4699      	movge	r9, r3
 801245a:	f1b9 0f00 	cmp.w	r9, #0
 801245e:	dd0a      	ble.n	8012476 <_svfprintf_r+0x109e>
 8012460:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012462:	444b      	add	r3, r9
 8012464:	9320      	str	r3, [sp, #128]	; 0x80
 8012466:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012468:	3301      	adds	r3, #1
 801246a:	2b07      	cmp	r3, #7
 801246c:	e9c4 6900 	strd	r6, r9, [r4]
 8012470:	931f      	str	r3, [sp, #124]	; 0x7c
 8012472:	dc3b      	bgt.n	80124ec <_svfprintf_r+0x1114>
 8012474:	3408      	adds	r4, #8
 8012476:	9b08      	ldr	r3, [sp, #32]
 8012478:	f893 8000 	ldrb.w	r8, [r3]
 801247c:	f1b9 0f00 	cmp.w	r9, #0
 8012480:	bfa8      	it	ge
 8012482:	eba8 0809 	subge.w	r8, r8, r9
 8012486:	f1b8 0f00 	cmp.w	r8, #0
 801248a:	dd1a      	ble.n	80124c2 <_svfprintf_r+0x10ea>
 801248c:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 8012490:	489e      	ldr	r0, [pc, #632]	; (801270c <_svfprintf_r+0x1334>)
 8012492:	6020      	str	r0, [r4, #0]
 8012494:	f1b8 0f10 	cmp.w	r8, #16
 8012498:	f103 0301 	add.w	r3, r3, #1
 801249c:	f104 0108 	add.w	r1, r4, #8
 80124a0:	dc2e      	bgt.n	8012500 <_svfprintf_r+0x1128>
 80124a2:	4442      	add	r2, r8
 80124a4:	2b07      	cmp	r3, #7
 80124a6:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 80124aa:	f8c4 8004 	str.w	r8, [r4, #4]
 80124ae:	dd3b      	ble.n	8012528 <_svfprintf_r+0x1150>
 80124b0:	aa1e      	add	r2, sp, #120	; 0x78
 80124b2:	4659      	mov	r1, fp
 80124b4:	4638      	mov	r0, r7
 80124b6:	f003 fc0d 	bl	8015cd4 <__ssprint_r>
 80124ba:	2800      	cmp	r0, #0
 80124bc:	f040 80f7 	bne.w	80126ae <_svfprintf_r+0x12d6>
 80124c0:	ac21      	add	r4, sp, #132	; 0x84
 80124c2:	9b08      	ldr	r3, [sp, #32]
 80124c4:	781b      	ldrb	r3, [r3, #0]
 80124c6:	441e      	add	r6, r3
 80124c8:	e71f      	b.n	801230a <_svfprintf_r+0xf32>
 80124ca:	9b08      	ldr	r3, [sp, #32]
 80124cc:	3b01      	subs	r3, #1
 80124ce:	9308      	str	r3, [sp, #32]
 80124d0:	9b07      	ldr	r3, [sp, #28]
 80124d2:	3b01      	subs	r3, #1
 80124d4:	9307      	str	r3, [sp, #28]
 80124d6:	e7a7      	b.n	8012428 <_svfprintf_r+0x1050>
 80124d8:	aa1e      	add	r2, sp, #120	; 0x78
 80124da:	4659      	mov	r1, fp
 80124dc:	4638      	mov	r0, r7
 80124de:	f003 fbf9 	bl	8015cd4 <__ssprint_r>
 80124e2:	2800      	cmp	r0, #0
 80124e4:	f040 80e3 	bne.w	80126ae <_svfprintf_r+0x12d6>
 80124e8:	ac21      	add	r4, sp, #132	; 0x84
 80124ea:	e7ab      	b.n	8012444 <_svfprintf_r+0x106c>
 80124ec:	aa1e      	add	r2, sp, #120	; 0x78
 80124ee:	4659      	mov	r1, fp
 80124f0:	4638      	mov	r0, r7
 80124f2:	f003 fbef 	bl	8015cd4 <__ssprint_r>
 80124f6:	2800      	cmp	r0, #0
 80124f8:	f040 80d9 	bne.w	80126ae <_svfprintf_r+0x12d6>
 80124fc:	ac21      	add	r4, sp, #132	; 0x84
 80124fe:	e7ba      	b.n	8012476 <_svfprintf_r+0x109e>
 8012500:	2010      	movs	r0, #16
 8012502:	4402      	add	r2, r0
 8012504:	2b07      	cmp	r3, #7
 8012506:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 801250a:	6060      	str	r0, [r4, #4]
 801250c:	dd08      	ble.n	8012520 <_svfprintf_r+0x1148>
 801250e:	aa1e      	add	r2, sp, #120	; 0x78
 8012510:	4659      	mov	r1, fp
 8012512:	4638      	mov	r0, r7
 8012514:	f003 fbde 	bl	8015cd4 <__ssprint_r>
 8012518:	2800      	cmp	r0, #0
 801251a:	f040 80c8 	bne.w	80126ae <_svfprintf_r+0x12d6>
 801251e:	a921      	add	r1, sp, #132	; 0x84
 8012520:	f1a8 0810 	sub.w	r8, r8, #16
 8012524:	460c      	mov	r4, r1
 8012526:	e7b1      	b.n	801248c <_svfprintf_r+0x10b4>
 8012528:	460c      	mov	r4, r1
 801252a:	e7ca      	b.n	80124c2 <_svfprintf_r+0x10ea>
 801252c:	aa1e      	add	r2, sp, #120	; 0x78
 801252e:	4659      	mov	r1, fp
 8012530:	4638      	mov	r0, r7
 8012532:	f003 fbcf 	bl	8015cd4 <__ssprint_r>
 8012536:	2800      	cmp	r0, #0
 8012538:	f040 80b9 	bne.w	80126ae <_svfprintf_r+0x12d6>
 801253c:	ac21      	add	r4, sp, #132	; 0x84
 801253e:	e706      	b.n	801234e <_svfprintf_r+0xf76>
 8012540:	aa1e      	add	r2, sp, #120	; 0x78
 8012542:	4659      	mov	r1, fp
 8012544:	4638      	mov	r0, r7
 8012546:	f003 fbc5 	bl	8015cd4 <__ssprint_r>
 801254a:	2800      	cmp	r0, #0
 801254c:	f040 80af 	bne.w	80126ae <_svfprintf_r+0x12d6>
 8012550:	ac21      	add	r4, sp, #132	; 0x84
 8012552:	e716      	b.n	8012382 <_svfprintf_r+0xfaa>
 8012554:	9903      	ldr	r1, [sp, #12]
 8012556:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8012558:	2901      	cmp	r1, #1
 801255a:	f100 0001 	add.w	r0, r0, #1
 801255e:	f102 0201 	add.w	r2, r2, #1
 8012562:	f104 0308 	add.w	r3, r4, #8
 8012566:	dc01      	bgt.n	801256c <_svfprintf_r+0x1194>
 8012568:	07e9      	lsls	r1, r5, #31
 801256a:	d573      	bpl.n	8012654 <_svfprintf_r+0x127c>
 801256c:	2101      	movs	r1, #1
 801256e:	2a07      	cmp	r2, #7
 8012570:	e9cd 201f 	strd	r2, r0, [sp, #124]	; 0x7c
 8012574:	f8c4 a000 	str.w	sl, [r4]
 8012578:	6061      	str	r1, [r4, #4]
 801257a:	dd08      	ble.n	801258e <_svfprintf_r+0x11b6>
 801257c:	aa1e      	add	r2, sp, #120	; 0x78
 801257e:	4659      	mov	r1, fp
 8012580:	4638      	mov	r0, r7
 8012582:	f003 fba7 	bl	8015cd4 <__ssprint_r>
 8012586:	2800      	cmp	r0, #0
 8012588:	f040 8091 	bne.w	80126ae <_svfprintf_r+0x12d6>
 801258c:	ab21      	add	r3, sp, #132	; 0x84
 801258e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012590:	601a      	str	r2, [r3, #0]
 8012592:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012594:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012596:	605a      	str	r2, [r3, #4]
 8012598:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801259a:	440a      	add	r2, r1
 801259c:	9220      	str	r2, [sp, #128]	; 0x80
 801259e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80125a0:	3201      	adds	r2, #1
 80125a2:	2a07      	cmp	r2, #7
 80125a4:	921f      	str	r2, [sp, #124]	; 0x7c
 80125a6:	dc25      	bgt.n	80125f4 <_svfprintf_r+0x121c>
 80125a8:	3308      	adds	r3, #8
 80125aa:	9a03      	ldr	r2, [sp, #12]
 80125ac:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80125b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125b4:	f102 34ff 	add.w	r4, r2, #4294967295
 80125b8:	d025      	beq.n	8012606 <_svfprintf_r+0x122e>
 80125ba:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80125bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80125be:	f10a 0001 	add.w	r0, sl, #1
 80125c2:	e9c3 0400 	strd	r0, r4, [r3]
 80125c6:	9803      	ldr	r0, [sp, #12]
 80125c8:	3101      	adds	r1, #1
 80125ca:	3a01      	subs	r2, #1
 80125cc:	4402      	add	r2, r0
 80125ce:	2907      	cmp	r1, #7
 80125d0:	e9cd 121f 	strd	r1, r2, [sp, #124]	; 0x7c
 80125d4:	dd47      	ble.n	8012666 <_svfprintf_r+0x128e>
 80125d6:	aa1e      	add	r2, sp, #120	; 0x78
 80125d8:	4659      	mov	r1, fp
 80125da:	4638      	mov	r0, r7
 80125dc:	f003 fb7a 	bl	8015cd4 <__ssprint_r>
 80125e0:	2800      	cmp	r0, #0
 80125e2:	d164      	bne.n	80126ae <_svfprintf_r+0x12d6>
 80125e4:	ab21      	add	r3, sp, #132	; 0x84
 80125e6:	aa1a      	add	r2, sp, #104	; 0x68
 80125e8:	601a      	str	r2, [r3, #0]
 80125ea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80125ec:	605a      	str	r2, [r3, #4]
 80125ee:	9911      	ldr	r1, [sp, #68]	; 0x44
 80125f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80125f2:	e619      	b.n	8012228 <_svfprintf_r+0xe50>
 80125f4:	aa1e      	add	r2, sp, #120	; 0x78
 80125f6:	4659      	mov	r1, fp
 80125f8:	4638      	mov	r0, r7
 80125fa:	f003 fb6b 	bl	8015cd4 <__ssprint_r>
 80125fe:	2800      	cmp	r0, #0
 8012600:	d155      	bne.n	80126ae <_svfprintf_r+0x12d6>
 8012602:	ab21      	add	r3, sp, #132	; 0x84
 8012604:	e7d1      	b.n	80125aa <_svfprintf_r+0x11d2>
 8012606:	2c00      	cmp	r4, #0
 8012608:	dded      	ble.n	80125e6 <_svfprintf_r+0x120e>
 801260a:	4e40      	ldr	r6, [pc, #256]	; (801270c <_svfprintf_r+0x1334>)
 801260c:	f04f 0810 	mov.w	r8, #16
 8012610:	e9dd 211f 	ldrd	r2, r1, [sp, #124]	; 0x7c
 8012614:	2c10      	cmp	r4, #16
 8012616:	f102 0201 	add.w	r2, r2, #1
 801261a:	f103 0008 	add.w	r0, r3, #8
 801261e:	601e      	str	r6, [r3, #0]
 8012620:	dc07      	bgt.n	8012632 <_svfprintf_r+0x125a>
 8012622:	605c      	str	r4, [r3, #4]
 8012624:	2a07      	cmp	r2, #7
 8012626:	440c      	add	r4, r1
 8012628:	e9cd 241f 	strd	r2, r4, [sp, #124]	; 0x7c
 801262c:	dcd3      	bgt.n	80125d6 <_svfprintf_r+0x11fe>
 801262e:	4603      	mov	r3, r0
 8012630:	e7d9      	b.n	80125e6 <_svfprintf_r+0x120e>
 8012632:	3110      	adds	r1, #16
 8012634:	2a07      	cmp	r2, #7
 8012636:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 801263a:	f8c3 8004 	str.w	r8, [r3, #4]
 801263e:	dd06      	ble.n	801264e <_svfprintf_r+0x1276>
 8012640:	aa1e      	add	r2, sp, #120	; 0x78
 8012642:	4659      	mov	r1, fp
 8012644:	4638      	mov	r0, r7
 8012646:	f003 fb45 	bl	8015cd4 <__ssprint_r>
 801264a:	bb80      	cbnz	r0, 80126ae <_svfprintf_r+0x12d6>
 801264c:	a821      	add	r0, sp, #132	; 0x84
 801264e:	3c10      	subs	r4, #16
 8012650:	4603      	mov	r3, r0
 8012652:	e7dd      	b.n	8012610 <_svfprintf_r+0x1238>
 8012654:	2101      	movs	r1, #1
 8012656:	2a07      	cmp	r2, #7
 8012658:	e9cd 201f 	strd	r2, r0, [sp, #124]	; 0x7c
 801265c:	f8c4 a000 	str.w	sl, [r4]
 8012660:	6061      	str	r1, [r4, #4]
 8012662:	ddc0      	ble.n	80125e6 <_svfprintf_r+0x120e>
 8012664:	e7b7      	b.n	80125d6 <_svfprintf_r+0x11fe>
 8012666:	3308      	adds	r3, #8
 8012668:	e7bd      	b.n	80125e6 <_svfprintf_r+0x120e>
 801266a:	460c      	mov	r4, r1
 801266c:	f7ff ba51 	b.w	8011b12 <_svfprintf_r+0x73a>
 8012670:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 8012674:	1a9d      	subs	r5, r3, r2
 8012676:	2d00      	cmp	r5, #0
 8012678:	f77f aa58 	ble.w	8011b2c <_svfprintf_r+0x754>
 801267c:	4e24      	ldr	r6, [pc, #144]	; (8012710 <_svfprintf_r+0x1338>)
 801267e:	f04f 0810 	mov.w	r8, #16
 8012682:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 8012686:	2d10      	cmp	r5, #16
 8012688:	f103 0301 	add.w	r3, r3, #1
 801268c:	6026      	str	r6, [r4, #0]
 801268e:	dc18      	bgt.n	80126c2 <_svfprintf_r+0x12ea>
 8012690:	6065      	str	r5, [r4, #4]
 8012692:	2b07      	cmp	r3, #7
 8012694:	4415      	add	r5, r2
 8012696:	e9cd 351f 	strd	r3, r5, [sp, #124]	; 0x7c
 801269a:	f77f aa47 	ble.w	8011b2c <_svfprintf_r+0x754>
 801269e:	aa1e      	add	r2, sp, #120	; 0x78
 80126a0:	4659      	mov	r1, fp
 80126a2:	4638      	mov	r0, r7
 80126a4:	f003 fb16 	bl	8015cd4 <__ssprint_r>
 80126a8:	2800      	cmp	r0, #0
 80126aa:	f43f aa3f 	beq.w	8011b2c <_svfprintf_r+0x754>
 80126ae:	9b02      	ldr	r3, [sp, #8]
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	f43f a888 	beq.w	80117c6 <_svfprintf_r+0x3ee>
 80126b6:	4619      	mov	r1, r3
 80126b8:	4638      	mov	r0, r7
 80126ba:	f002 faa7 	bl	8014c0c <_free_r>
 80126be:	f7ff b882 	b.w	80117c6 <_svfprintf_r+0x3ee>
 80126c2:	3210      	adds	r2, #16
 80126c4:	2b07      	cmp	r3, #7
 80126c6:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 80126ca:	f8c4 8004 	str.w	r8, [r4, #4]
 80126ce:	dc02      	bgt.n	80126d6 <_svfprintf_r+0x12fe>
 80126d0:	3408      	adds	r4, #8
 80126d2:	3d10      	subs	r5, #16
 80126d4:	e7d5      	b.n	8012682 <_svfprintf_r+0x12aa>
 80126d6:	aa1e      	add	r2, sp, #120	; 0x78
 80126d8:	4659      	mov	r1, fp
 80126da:	4638      	mov	r0, r7
 80126dc:	f003 fafa 	bl	8015cd4 <__ssprint_r>
 80126e0:	2800      	cmp	r0, #0
 80126e2:	d1e4      	bne.n	80126ae <_svfprintf_r+0x12d6>
 80126e4:	ac21      	add	r4, sp, #132	; 0x84
 80126e6:	e7f4      	b.n	80126d2 <_svfprintf_r+0x12fa>
 80126e8:	9902      	ldr	r1, [sp, #8]
 80126ea:	4638      	mov	r0, r7
 80126ec:	f002 fa8e 	bl	8014c0c <_free_r>
 80126f0:	f7ff ba34 	b.w	8011b5c <_svfprintf_r+0x784>
 80126f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	f43f a865 	beq.w	80117c6 <_svfprintf_r+0x3ee>
 80126fc:	aa1e      	add	r2, sp, #120	; 0x78
 80126fe:	4659      	mov	r1, fp
 8012700:	4638      	mov	r0, r7
 8012702:	f003 fae7 	bl	8015cd4 <__ssprint_r>
 8012706:	f7ff b85e 	b.w	80117c6 <_svfprintf_r+0x3ee>
 801270a:	bf00      	nop
 801270c:	080177b0 	.word	0x080177b0
 8012710:	080177a0 	.word	0x080177a0
 8012714:	ea58 0209 	orrs.w	r2, r8, r9
 8012718:	9502      	str	r5, [sp, #8]
 801271a:	f43f ab42 	beq.w	8011da2 <_svfprintf_r+0x9ca>
 801271e:	2b01      	cmp	r3, #1
 8012720:	f43f abec 	beq.w	8011efc <_svfprintf_r+0xb24>
 8012724:	2b02      	cmp	r3, #2
 8012726:	f50d 7a94 	add.w	sl, sp, #296	; 0x128
 801272a:	f43f ac37 	beq.w	8011f9c <_svfprintf_r+0xbc4>
 801272e:	f008 0307 	and.w	r3, r8, #7
 8012732:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 8012736:	ea48 7849 	orr.w	r8, r8, r9, lsl #29
 801273a:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 801273e:	3330      	adds	r3, #48	; 0x30
 8012740:	ea58 0109 	orrs.w	r1, r8, r9
 8012744:	4652      	mov	r2, sl
 8012746:	f80a 3d01 	strb.w	r3, [sl, #-1]!
 801274a:	d1f0      	bne.n	801272e <_svfprintf_r+0x1356>
 801274c:	9902      	ldr	r1, [sp, #8]
 801274e:	07cd      	lsls	r5, r1, #31
 8012750:	d506      	bpl.n	8012760 <_svfprintf_r+0x1388>
 8012752:	2b30      	cmp	r3, #48	; 0x30
 8012754:	d004      	beq.n	8012760 <_svfprintf_r+0x1388>
 8012756:	2330      	movs	r3, #48	; 0x30
 8012758:	f80a 3c01 	strb.w	r3, [sl, #-1]
 801275c:	f1a2 0a02 	sub.w	sl, r2, #2
 8012760:	ab4a      	add	r3, sp, #296	; 0x128
 8012762:	46b1      	mov	r9, r6
 8012764:	eba3 060a 	sub.w	r6, r3, sl
 8012768:	2300      	movs	r3, #0
 801276a:	9d02      	ldr	r5, [sp, #8]
 801276c:	9302      	str	r3, [sp, #8]
 801276e:	f7fe bff3 	b.w	8011758 <_svfprintf_r+0x380>
 8012772:	bf00      	nop

08012774 <sysconf>:
 8012774:	2808      	cmp	r0, #8
 8012776:	b508      	push	{r3, lr}
 8012778:	d006      	beq.n	8012788 <sysconf+0x14>
 801277a:	f002 f8b7 	bl	80148ec <__errno>
 801277e:	2316      	movs	r3, #22
 8012780:	6003      	str	r3, [r0, #0]
 8012782:	f04f 30ff 	mov.w	r0, #4294967295
 8012786:	bd08      	pop	{r3, pc}
 8012788:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801278c:	e7fb      	b.n	8012786 <sysconf+0x12>
	...

08012790 <_vfprintf_r>:
 8012790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012794:	ed2d 8b04 	vpush	{d8-d9}
 8012798:	b0cb      	sub	sp, #300	; 0x12c
 801279a:	460d      	mov	r5, r1
 801279c:	4692      	mov	sl, r2
 801279e:	461c      	mov	r4, r3
 80127a0:	4698      	mov	r8, r3
 80127a2:	4606      	mov	r6, r0
 80127a4:	f002 fc5c 	bl	8015060 <_localeconv_r>
 80127a8:	6803      	ldr	r3, [r0, #0]
 80127aa:	930f      	str	r3, [sp, #60]	; 0x3c
 80127ac:	4618      	mov	r0, r3
 80127ae:	f7ed fd47 	bl	8000240 <strlen>
 80127b2:	900a      	str	r0, [sp, #40]	; 0x28
 80127b4:	b126      	cbz	r6, 80127c0 <_vfprintf_r+0x30>
 80127b6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80127b8:	b913      	cbnz	r3, 80127c0 <_vfprintf_r+0x30>
 80127ba:	4630      	mov	r0, r6
 80127bc:	f002 f996 	bl	8014aec <__sinit>
 80127c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80127c2:	07d8      	lsls	r0, r3, #31
 80127c4:	d405      	bmi.n	80127d2 <_vfprintf_r+0x42>
 80127c6:	89ab      	ldrh	r3, [r5, #12]
 80127c8:	0599      	lsls	r1, r3, #22
 80127ca:	d402      	bmi.n	80127d2 <_vfprintf_r+0x42>
 80127cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80127ce:	f002 fc4d 	bl	801506c <__retarget_lock_acquire_recursive>
 80127d2:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 80127d6:	049a      	lsls	r2, r3, #18
 80127d8:	d406      	bmi.n	80127e8 <_vfprintf_r+0x58>
 80127da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80127de:	81ab      	strh	r3, [r5, #12]
 80127e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80127e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80127e6:	666b      	str	r3, [r5, #100]	; 0x64
 80127e8:	89ab      	ldrh	r3, [r5, #12]
 80127ea:	071f      	lsls	r7, r3, #28
 80127ec:	d501      	bpl.n	80127f2 <_vfprintf_r+0x62>
 80127ee:	692b      	ldr	r3, [r5, #16]
 80127f0:	b9bb      	cbnz	r3, 8012822 <_vfprintf_r+0x92>
 80127f2:	4629      	mov	r1, r5
 80127f4:	4630      	mov	r0, r6
 80127f6:	f001 fa2f 	bl	8013c58 <__swsetup_r>
 80127fa:	b190      	cbz	r0, 8012822 <_vfprintf_r+0x92>
 80127fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80127fe:	07dc      	lsls	r4, r3, #31
 8012800:	d508      	bpl.n	8012814 <_vfprintf_r+0x84>
 8012802:	f04f 33ff 	mov.w	r3, #4294967295
 8012806:	930b      	str	r3, [sp, #44]	; 0x2c
 8012808:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801280a:	b04b      	add	sp, #300	; 0x12c
 801280c:	ecbd 8b04 	vpop	{d8-d9}
 8012810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012814:	89ab      	ldrh	r3, [r5, #12]
 8012816:	0598      	lsls	r0, r3, #22
 8012818:	d4f3      	bmi.n	8012802 <_vfprintf_r+0x72>
 801281a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801281c:	f002 fc27 	bl	801506e <__retarget_lock_release_recursive>
 8012820:	e7ef      	b.n	8012802 <_vfprintf_r+0x72>
 8012822:	89ab      	ldrh	r3, [r5, #12]
 8012824:	f003 021a 	and.w	r2, r3, #26
 8012828:	2a0a      	cmp	r2, #10
 801282a:	d116      	bne.n	801285a <_vfprintf_r+0xca>
 801282c:	f9b5 200e 	ldrsh.w	r2, [r5, #14]
 8012830:	2a00      	cmp	r2, #0
 8012832:	db12      	blt.n	801285a <_vfprintf_r+0xca>
 8012834:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8012836:	07d1      	lsls	r1, r2, #31
 8012838:	d404      	bmi.n	8012844 <_vfprintf_r+0xb4>
 801283a:	059a      	lsls	r2, r3, #22
 801283c:	d402      	bmi.n	8012844 <_vfprintf_r+0xb4>
 801283e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012840:	f002 fc15 	bl	801506e <__retarget_lock_release_recursive>
 8012844:	4623      	mov	r3, r4
 8012846:	4652      	mov	r2, sl
 8012848:	4629      	mov	r1, r5
 801284a:	4630      	mov	r0, r6
 801284c:	b04b      	add	sp, #300	; 0x12c
 801284e:	ecbd 8b04 	vpop	{d8-d9}
 8012852:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012856:	f001 b9bf 	b.w	8013bd8 <__sbprintf>
 801285a:	2300      	movs	r3, #0
 801285c:	e9cd 331f 	strd	r3, r3, [sp, #124]	; 0x7c
 8012860:	ed9f 8b97 	vldr	d8, [pc, #604]	; 8012ac0 <_vfprintf_r+0x330>
 8012864:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 8012868:	ac21      	add	r4, sp, #132	; 0x84
 801286a:	941e      	str	r4, [sp, #120]	; 0x78
 801286c:	9303      	str	r3, [sp, #12]
 801286e:	9308      	str	r3, [sp, #32]
 8012870:	930e      	str	r3, [sp, #56]	; 0x38
 8012872:	9310      	str	r3, [sp, #64]	; 0x40
 8012874:	930b      	str	r3, [sp, #44]	; 0x2c
 8012876:	4653      	mov	r3, sl
 8012878:	461f      	mov	r7, r3
 801287a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801287e:	b10a      	cbz	r2, 8012884 <_vfprintf_r+0xf4>
 8012880:	2a25      	cmp	r2, #37	; 0x25
 8012882:	d1f9      	bne.n	8012878 <_vfprintf_r+0xe8>
 8012884:	ebb7 090a 	subs.w	r9, r7, sl
 8012888:	d00d      	beq.n	80128a6 <_vfprintf_r+0x116>
 801288a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801288c:	444b      	add	r3, r9
 801288e:	9320      	str	r3, [sp, #128]	; 0x80
 8012890:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012892:	3301      	adds	r3, #1
 8012894:	2b07      	cmp	r3, #7
 8012896:	e9c4 a900 	strd	sl, r9, [r4]
 801289a:	931f      	str	r3, [sp, #124]	; 0x7c
 801289c:	dc77      	bgt.n	801298e <_vfprintf_r+0x1fe>
 801289e:	3408      	adds	r4, #8
 80128a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80128a2:	444b      	add	r3, r9
 80128a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80128a6:	783b      	ldrb	r3, [r7, #0]
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	f001 8150 	beq.w	8013b4e <_vfprintf_r+0x13be>
 80128ae:	2200      	movs	r2, #0
 80128b0:	1c7b      	adds	r3, r7, #1
 80128b2:	f88d 205b 	strb.w	r2, [sp, #91]	; 0x5b
 80128b6:	f04f 37ff 	mov.w	r7, #4294967295
 80128ba:	920c      	str	r2, [sp, #48]	; 0x30
 80128bc:	4693      	mov	fp, r2
 80128be:	f04f 092b 	mov.w	r9, #43	; 0x2b
 80128c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80128c6:	9204      	str	r2, [sp, #16]
 80128c8:	9309      	str	r3, [sp, #36]	; 0x24
 80128ca:	9b04      	ldr	r3, [sp, #16]
 80128cc:	3b20      	subs	r3, #32
 80128ce:	2b5a      	cmp	r3, #90	; 0x5a
 80128d0:	f200 85a7 	bhi.w	8013422 <_vfprintf_r+0xc92>
 80128d4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80128d8:	05a5007d 	.word	0x05a5007d
 80128dc:	008505a5 	.word	0x008505a5
 80128e0:	05a505a5 	.word	0x05a505a5
 80128e4:	006505a5 	.word	0x006505a5
 80128e8:	05a505a5 	.word	0x05a505a5
 80128ec:	00920088 	.word	0x00920088
 80128f0:	008f05a5 	.word	0x008f05a5
 80128f4:	05a50095 	.word	0x05a50095
 80128f8:	00b100ae 	.word	0x00b100ae
 80128fc:	00b100b1 	.word	0x00b100b1
 8012900:	00b100b1 	.word	0x00b100b1
 8012904:	00b100b1 	.word	0x00b100b1
 8012908:	00b100b1 	.word	0x00b100b1
 801290c:	05a505a5 	.word	0x05a505a5
 8012910:	05a505a5 	.word	0x05a505a5
 8012914:	05a505a5 	.word	0x05a505a5
 8012918:	013305a5 	.word	0x013305a5
 801291c:	00df05a5 	.word	0x00df05a5
 8012920:	013300fc 	.word	0x013300fc
 8012924:	01330133 	.word	0x01330133
 8012928:	05a505a5 	.word	0x05a505a5
 801292c:	05a505a5 	.word	0x05a505a5
 8012930:	05a500c2 	.word	0x05a500c2
 8012934:	046905a5 	.word	0x046905a5
 8012938:	05a505a5 	.word	0x05a505a5
 801293c:	04b705a5 	.word	0x04b705a5
 8012940:	04db05a5 	.word	0x04db05a5
 8012944:	05a505a5 	.word	0x05a505a5
 8012948:	05a50501 	.word	0x05a50501
 801294c:	05a505a5 	.word	0x05a505a5
 8012950:	05a505a5 	.word	0x05a505a5
 8012954:	05a505a5 	.word	0x05a505a5
 8012958:	013305a5 	.word	0x013305a5
 801295c:	00df05a5 	.word	0x00df05a5
 8012960:	013300fe 	.word	0x013300fe
 8012964:	01330133 	.word	0x01330133
 8012968:	00fe00c5 	.word	0x00fe00c5
 801296c:	05a500d9 	.word	0x05a500d9
 8012970:	05a500d2 	.word	0x05a500d2
 8012974:	046b043e 	.word	0x046b043e
 8012978:	00d904a4 	.word	0x00d904a4
 801297c:	04b705a5 	.word	0x04b705a5
 8012980:	04dd007b 	.word	0x04dd007b
 8012984:	05a505a5 	.word	0x05a505a5
 8012988:	05a50522 	.word	0x05a50522
 801298c:	007b      	.short	0x007b
 801298e:	aa1e      	add	r2, sp, #120	; 0x78
 8012990:	4629      	mov	r1, r5
 8012992:	4630      	mov	r0, r6
 8012994:	f003 fa19 	bl	8015dca <__sprint_r>
 8012998:	2800      	cmp	r0, #0
 801299a:	f040 812a 	bne.w	8012bf2 <_vfprintf_r+0x462>
 801299e:	ac21      	add	r4, sp, #132	; 0x84
 80129a0:	e77e      	b.n	80128a0 <_vfprintf_r+0x110>
 80129a2:	4630      	mov	r0, r6
 80129a4:	f002 fb5c 	bl	8015060 <_localeconv_r>
 80129a8:	6843      	ldr	r3, [r0, #4]
 80129aa:	9310      	str	r3, [sp, #64]	; 0x40
 80129ac:	4618      	mov	r0, r3
 80129ae:	f7ed fc47 	bl	8000240 <strlen>
 80129b2:	900e      	str	r0, [sp, #56]	; 0x38
 80129b4:	4630      	mov	r0, r6
 80129b6:	f002 fb53 	bl	8015060 <_localeconv_r>
 80129ba:	6883      	ldr	r3, [r0, #8]
 80129bc:	9308      	str	r3, [sp, #32]
 80129be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80129c0:	b12b      	cbz	r3, 80129ce <_vfprintf_r+0x23e>
 80129c2:	9b08      	ldr	r3, [sp, #32]
 80129c4:	b11b      	cbz	r3, 80129ce <_vfprintf_r+0x23e>
 80129c6:	781b      	ldrb	r3, [r3, #0]
 80129c8:	b10b      	cbz	r3, 80129ce <_vfprintf_r+0x23e>
 80129ca:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 80129ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129d0:	e777      	b.n	80128c2 <_vfprintf_r+0x132>
 80129d2:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d1f9      	bne.n	80129ce <_vfprintf_r+0x23e>
 80129da:	2320      	movs	r3, #32
 80129dc:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 80129e0:	e7f5      	b.n	80129ce <_vfprintf_r+0x23e>
 80129e2:	f04b 0b01 	orr.w	fp, fp, #1
 80129e6:	e7f2      	b.n	80129ce <_vfprintf_r+0x23e>
 80129e8:	f858 3b04 	ldr.w	r3, [r8], #4
 80129ec:	930c      	str	r3, [sp, #48]	; 0x30
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	daed      	bge.n	80129ce <_vfprintf_r+0x23e>
 80129f2:	425b      	negs	r3, r3
 80129f4:	930c      	str	r3, [sp, #48]	; 0x30
 80129f6:	f04b 0b04 	orr.w	fp, fp, #4
 80129fa:	e7e8      	b.n	80129ce <_vfprintf_r+0x23e>
 80129fc:	f88d 905b 	strb.w	r9, [sp, #91]	; 0x5b
 8012a00:	e7e5      	b.n	80129ce <_vfprintf_r+0x23e>
 8012a02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012a08:	9204      	str	r2, [sp, #16]
 8012a0a:	2a2a      	cmp	r2, #42	; 0x2a
 8012a0c:	d110      	bne.n	8012a30 <_vfprintf_r+0x2a0>
 8012a0e:	f858 7b04 	ldr.w	r7, [r8], #4
 8012a12:	9309      	str	r3, [sp, #36]	; 0x24
 8012a14:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
 8012a18:	e7d9      	b.n	80129ce <_vfprintf_r+0x23e>
 8012a1a:	210a      	movs	r1, #10
 8012a1c:	fb01 2707 	mla	r7, r1, r7, r2
 8012a20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012a24:	9204      	str	r2, [sp, #16]
 8012a26:	9a04      	ldr	r2, [sp, #16]
 8012a28:	3a30      	subs	r2, #48	; 0x30
 8012a2a:	2a09      	cmp	r2, #9
 8012a2c:	d9f5      	bls.n	8012a1a <_vfprintf_r+0x28a>
 8012a2e:	e74b      	b.n	80128c8 <_vfprintf_r+0x138>
 8012a30:	2700      	movs	r7, #0
 8012a32:	e7f8      	b.n	8012a26 <_vfprintf_r+0x296>
 8012a34:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8012a38:	e7c9      	b.n	80129ce <_vfprintf_r+0x23e>
 8012a3a:	2200      	movs	r2, #0
 8012a3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a3e:	920c      	str	r2, [sp, #48]	; 0x30
 8012a40:	9a04      	ldr	r2, [sp, #16]
 8012a42:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012a44:	3a30      	subs	r2, #48	; 0x30
 8012a46:	200a      	movs	r0, #10
 8012a48:	fb00 2201 	mla	r2, r0, r1, r2
 8012a4c:	920c      	str	r2, [sp, #48]	; 0x30
 8012a4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012a52:	9204      	str	r2, [sp, #16]
 8012a54:	3a30      	subs	r2, #48	; 0x30
 8012a56:	2a09      	cmp	r2, #9
 8012a58:	d9f2      	bls.n	8012a40 <_vfprintf_r+0x2b0>
 8012a5a:	e735      	b.n	80128c8 <_vfprintf_r+0x138>
 8012a5c:	f04b 0b08 	orr.w	fp, fp, #8
 8012a60:	e7b5      	b.n	80129ce <_vfprintf_r+0x23e>
 8012a62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a64:	781b      	ldrb	r3, [r3, #0]
 8012a66:	2b68      	cmp	r3, #104	; 0x68
 8012a68:	bf01      	itttt	eq
 8012a6a:	9b09      	ldreq	r3, [sp, #36]	; 0x24
 8012a6c:	3301      	addeq	r3, #1
 8012a6e:	9309      	streq	r3, [sp, #36]	; 0x24
 8012a70:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 8012a74:	bf18      	it	ne
 8012a76:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 8012a7a:	e7a8      	b.n	80129ce <_vfprintf_r+0x23e>
 8012a7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a7e:	781b      	ldrb	r3, [r3, #0]
 8012a80:	2b6c      	cmp	r3, #108	; 0x6c
 8012a82:	d105      	bne.n	8012a90 <_vfprintf_r+0x300>
 8012a84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a86:	3301      	adds	r3, #1
 8012a88:	9309      	str	r3, [sp, #36]	; 0x24
 8012a8a:	f04b 0b20 	orr.w	fp, fp, #32
 8012a8e:	e79e      	b.n	80129ce <_vfprintf_r+0x23e>
 8012a90:	f04b 0b10 	orr.w	fp, fp, #16
 8012a94:	e79b      	b.n	80129ce <_vfprintf_r+0x23e>
 8012a96:	4642      	mov	r2, r8
 8012a98:	2000      	movs	r0, #0
 8012a9a:	f852 3b04 	ldr.w	r3, [r2], #4
 8012a9e:	9205      	str	r2, [sp, #20]
 8012aa0:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
 8012aa4:	f88d 005b 	strb.w	r0, [sp, #91]	; 0x5b
 8012aa8:	e9cd 0006 	strd	r0, r0, [sp, #24]
 8012aac:	9002      	str	r0, [sp, #8]
 8012aae:	2701      	movs	r7, #1
 8012ab0:	4681      	mov	r9, r0
 8012ab2:	4680      	mov	r8, r0
 8012ab4:	f10d 0ac4 	add.w	sl, sp, #196	; 0xc4
 8012ab8:	e19b      	b.n	8012df2 <_vfprintf_r+0x662>
 8012aba:	bf00      	nop
 8012abc:	f3af 8000 	nop.w
	...
 8012ac8:	ffffffff 	.word	0xffffffff
 8012acc:	7fefffff 	.word	0x7fefffff
 8012ad0:	f04b 0b10 	orr.w	fp, fp, #16
 8012ad4:	f01b 0f20 	tst.w	fp, #32
 8012ad8:	d016      	beq.n	8012b08 <_vfprintf_r+0x378>
 8012ada:	f108 0807 	add.w	r8, r8, #7
 8012ade:	f028 0307 	bic.w	r3, r8, #7
 8012ae2:	461a      	mov	r2, r3
 8012ae4:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8012ae8:	f852 8b08 	ldr.w	r8, [r2], #8
 8012aec:	9205      	str	r2, [sp, #20]
 8012aee:	f1b9 0f00 	cmp.w	r9, #0
 8012af2:	da07      	bge.n	8012b04 <_vfprintf_r+0x374>
 8012af4:	f1d8 0800 	rsbs	r8, r8, #0
 8012af8:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8012afc:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
 8012b00:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 8012b04:	2301      	movs	r3, #1
 8012b06:	e365      	b.n	80131d4 <_vfprintf_r+0xa44>
 8012b08:	4642      	mov	r2, r8
 8012b0a:	f01b 0f10 	tst.w	fp, #16
 8012b0e:	f852 3b04 	ldr.w	r3, [r2], #4
 8012b12:	9205      	str	r2, [sp, #20]
 8012b14:	d003      	beq.n	8012b1e <_vfprintf_r+0x38e>
 8012b16:	4698      	mov	r8, r3
 8012b18:	ea4f 79e3 	mov.w	r9, r3, asr #31
 8012b1c:	e7e7      	b.n	8012aee <_vfprintf_r+0x35e>
 8012b1e:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8012b22:	d004      	beq.n	8012b2e <_vfprintf_r+0x39e>
 8012b24:	fa0f f883 	sxth.w	r8, r3
 8012b28:	f343 39c0 	sbfx	r9, r3, #15, #1
 8012b2c:	e7df      	b.n	8012aee <_vfprintf_r+0x35e>
 8012b2e:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8012b32:	d0f0      	beq.n	8012b16 <_vfprintf_r+0x386>
 8012b34:	fa4f f883 	sxtb.w	r8, r3
 8012b38:	f343 19c0 	sbfx	r9, r3, #7, #1
 8012b3c:	e7d7      	b.n	8012aee <_vfprintf_r+0x35e>
 8012b3e:	f108 0807 	add.w	r8, r8, #7
 8012b42:	f028 0307 	bic.w	r3, r8, #7
 8012b46:	ecb3 8b02 	vldmia	r3!, {d8}
 8012b4a:	ed1f 7b21 	vldr	d7, [pc, #-132]	; 8012ac8 <_vfprintf_r+0x338>
 8012b4e:	eeb0 6bc8 	vabs.f64	d6, d8
 8012b52:	eeb4 6b47 	vcmp.f64	d6, d7
 8012b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b5a:	9305      	str	r3, [sp, #20]
 8012b5c:	dd18      	ble.n	8012b90 <_vfprintf_r+0x400>
 8012b5e:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8012b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b66:	d502      	bpl.n	8012b6e <_vfprintf_r+0x3de>
 8012b68:	232d      	movs	r3, #45	; 0x2d
 8012b6a:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 8012b6e:	4a28      	ldr	r2, [pc, #160]	; (8012c10 <_vfprintf_r+0x480>)
 8012b70:	4828      	ldr	r0, [pc, #160]	; (8012c14 <_vfprintf_r+0x484>)
 8012b72:	9b04      	ldr	r3, [sp, #16]
 8012b74:	2b47      	cmp	r3, #71	; 0x47
 8012b76:	bfd4      	ite	le
 8012b78:	4692      	movle	sl, r2
 8012b7a:	4682      	movgt	sl, r0
 8012b7c:	2300      	movs	r3, #0
 8012b7e:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 8012b82:	9302      	str	r3, [sp, #8]
 8012b84:	2703      	movs	r7, #3
 8012b86:	4699      	mov	r9, r3
 8012b88:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8012b8c:	4698      	mov	r8, r3
 8012b8e:	e130      	b.n	8012df2 <_vfprintf_r+0x662>
 8012b90:	eeb4 8b48 	vcmp.f64	d8, d8
 8012b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b98:	d70a      	bvc.n	8012bb0 <_vfprintf_r+0x420>
 8012b9a:	ee18 3a90 	vmov	r3, s17
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	bfb8      	it	lt
 8012ba2:	232d      	movlt	r3, #45	; 0x2d
 8012ba4:	4a1c      	ldr	r2, [pc, #112]	; (8012c18 <_vfprintf_r+0x488>)
 8012ba6:	481d      	ldr	r0, [pc, #116]	; (8012c1c <_vfprintf_r+0x48c>)
 8012ba8:	bfb8      	it	lt
 8012baa:	f88d 305b 	strblt.w	r3, [sp, #91]	; 0x5b
 8012bae:	e7e0      	b.n	8012b72 <_vfprintf_r+0x3e2>
 8012bb0:	9b04      	ldr	r3, [sp, #16]
 8012bb2:	f023 0920 	bic.w	r9, r3, #32
 8012bb6:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
 8012bba:	d131      	bne.n	8012c20 <_vfprintf_r+0x490>
 8012bbc:	2330      	movs	r3, #48	; 0x30
 8012bbe:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8012bc2:	9b04      	ldr	r3, [sp, #16]
 8012bc4:	2b61      	cmp	r3, #97	; 0x61
 8012bc6:	bf0c      	ite	eq
 8012bc8:	2378      	moveq	r3, #120	; 0x78
 8012bca:	2358      	movne	r3, #88	; 0x58
 8012bcc:	2f63      	cmp	r7, #99	; 0x63
 8012bce:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
 8012bd2:	f04b 0b02 	orr.w	fp, fp, #2
 8012bd6:	f340 81e3 	ble.w	8012fa0 <_vfprintf_r+0x810>
 8012bda:	1c79      	adds	r1, r7, #1
 8012bdc:	4630      	mov	r0, r6
 8012bde:	f7fe f8e1 	bl	8010da4 <_malloc_r>
 8012be2:	4682      	mov	sl, r0
 8012be4:	2800      	cmp	r0, #0
 8012be6:	f040 81e0 	bne.w	8012faa <_vfprintf_r+0x81a>
 8012bea:	89ab      	ldrh	r3, [r5, #12]
 8012bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012bf0:	81ab      	strh	r3, [r5, #12]
 8012bf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012bf4:	07d9      	lsls	r1, r3, #31
 8012bf6:	d405      	bmi.n	8012c04 <_vfprintf_r+0x474>
 8012bf8:	89ab      	ldrh	r3, [r5, #12]
 8012bfa:	059a      	lsls	r2, r3, #22
 8012bfc:	d402      	bmi.n	8012c04 <_vfprintf_r+0x474>
 8012bfe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012c00:	f002 fa35 	bl	801506e <__retarget_lock_release_recursive>
 8012c04:	89ab      	ldrh	r3, [r5, #12]
 8012c06:	065b      	lsls	r3, r3, #25
 8012c08:	f57f adfe 	bpl.w	8012808 <_vfprintf_r+0x78>
 8012c0c:	e5f9      	b.n	8012802 <_vfprintf_r+0x72>
 8012c0e:	bf00      	nop
 8012c10:	0801776c 	.word	0x0801776c
 8012c14:	08017770 	.word	0x08017770
 8012c18:	08017774 	.word	0x08017774
 8012c1c:	08017778 	.word	0x08017778
 8012c20:	1c7b      	adds	r3, r7, #1
 8012c22:	f000 81c4 	beq.w	8012fae <_vfprintf_r+0x81e>
 8012c26:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8012c2a:	f040 81c4 	bne.w	8012fb6 <_vfprintf_r+0x826>
 8012c2e:	2f00      	cmp	r7, #0
 8012c30:	f040 81c1 	bne.w	8012fb6 <_vfprintf_r+0x826>
 8012c34:	9702      	str	r7, [sp, #8]
 8012c36:	2701      	movs	r7, #1
 8012c38:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 8012c3c:	930d      	str	r3, [sp, #52]	; 0x34
 8012c3e:	ee18 3a90 	vmov	r3, s17
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	f280 81ba 	bge.w	8012fbc <_vfprintf_r+0x82c>
 8012c48:	eeb1 9b48 	vneg.f64	d9, d8
 8012c4c:	232d      	movs	r3, #45	; 0x2d
 8012c4e:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
 8012c52:	9313      	str	r3, [sp, #76]	; 0x4c
 8012c54:	f040 81cb 	bne.w	8012fee <_vfprintf_r+0x85e>
 8012c58:	eeb0 0b49 	vmov.f64	d0, d9
 8012c5c:	a818      	add	r0, sp, #96	; 0x60
 8012c5e:	f002 ffab 	bl	8015bb8 <frexp>
 8012c62:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
 8012c66:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012c6a:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8012c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c72:	bf08      	it	eq
 8012c74:	2301      	moveq	r3, #1
 8012c76:	9a04      	ldr	r2, [sp, #16]
 8012c78:	bf08      	it	eq
 8012c7a:	9318      	streq	r3, [sp, #96]	; 0x60
 8012c7c:	49b7      	ldr	r1, [pc, #732]	; (8012f5c <_vfprintf_r+0x7cc>)
 8012c7e:	4bb8      	ldr	r3, [pc, #736]	; (8012f60 <_vfprintf_r+0x7d0>)
 8012c80:	eeb3 7b00 	vmov.f64	d7, #48	; 0x41800000  16.0
 8012c84:	2a61      	cmp	r2, #97	; 0x61
 8012c86:	bf18      	it	ne
 8012c88:	4619      	movne	r1, r3
 8012c8a:	1e7a      	subs	r2, r7, #1
 8012c8c:	4653      	mov	r3, sl
 8012c8e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012c92:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 8012c96:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012c9a:	ee16 ca90 	vmov	ip, s13
 8012c9e:	f811 000c 	ldrb.w	r0, [r1, ip]
 8012ca2:	f803 0b01 	strb.w	r0, [r3], #1
 8012ca6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8012caa:	4610      	mov	r0, r2
 8012cac:	ee30 0b46 	vsub.f64	d0, d0, d6
 8012cb0:	d006      	beq.n	8012cc0 <_vfprintf_r+0x530>
 8012cb2:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8012cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cba:	f102 32ff 	add.w	r2, r2, #4294967295
 8012cbe:	d1e6      	bne.n	8012c8e <_vfprintf_r+0x4fe>
 8012cc0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8012cc4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8012cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ccc:	dc09      	bgt.n	8012ce2 <_vfprintf_r+0x552>
 8012cce:	eeb4 0b47 	vcmp.f64	d0, d7
 8012cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cd6:	f040 8184 	bne.w	8012fe2 <_vfprintf_r+0x852>
 8012cda:	f01c 0f01 	tst.w	ip, #1
 8012cde:	f000 8180 	beq.w	8012fe2 <_vfprintf_r+0x852>
 8012ce2:	f891 c00f 	ldrb.w	ip, [r1, #15]
 8012ce6:	931c      	str	r3, [sp, #112]	; 0x70
 8012ce8:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8012cec:	981c      	ldr	r0, [sp, #112]	; 0x70
 8012cee:	1e42      	subs	r2, r0, #1
 8012cf0:	921c      	str	r2, [sp, #112]	; 0x70
 8012cf2:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 8012cf6:	4562      	cmp	r2, ip
 8012cf8:	f000 8164 	beq.w	8012fc4 <_vfprintf_r+0x834>
 8012cfc:	2a39      	cmp	r2, #57	; 0x39
 8012cfe:	bf16      	itet	ne
 8012d00:	3201      	addne	r2, #1
 8012d02:	7a8a      	ldrbeq	r2, [r1, #10]
 8012d04:	b2d2      	uxtbne	r2, r2
 8012d06:	f800 2c01 	strb.w	r2, [r0, #-1]
 8012d0a:	eba3 030a 	sub.w	r3, r3, sl
 8012d0e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8012d12:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8012d16:	9303      	str	r3, [sp, #12]
 8012d18:	f040 81ac 	bne.w	8013074 <_vfprintf_r+0x8e4>
 8012d1c:	f118 0f03 	cmn.w	r8, #3
 8012d20:	db02      	blt.n	8012d28 <_vfprintf_r+0x598>
 8012d22:	4547      	cmp	r7, r8
 8012d24:	f280 81ce 	bge.w	80130c4 <_vfprintf_r+0x934>
 8012d28:	9b04      	ldr	r3, [sp, #16]
 8012d2a:	3b02      	subs	r3, #2
 8012d2c:	9304      	str	r3, [sp, #16]
 8012d2e:	9904      	ldr	r1, [sp, #16]
 8012d30:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8012d34:	f021 0120 	bic.w	r1, r1, #32
 8012d38:	2941      	cmp	r1, #65	; 0x41
 8012d3a:	bf08      	it	eq
 8012d3c:	320f      	addeq	r2, #15
 8012d3e:	f108 33ff 	add.w	r3, r8, #4294967295
 8012d42:	bf06      	itte	eq
 8012d44:	b2d2      	uxtbeq	r2, r2
 8012d46:	2101      	moveq	r1, #1
 8012d48:	2100      	movne	r1, #0
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	9318      	str	r3, [sp, #96]	; 0x60
 8012d4e:	bfb8      	it	lt
 8012d50:	f1c8 0301 	rsblt	r3, r8, #1
 8012d54:	f88d 2068 	strb.w	r2, [sp, #104]	; 0x68
 8012d58:	bfb4      	ite	lt
 8012d5a:	222d      	movlt	r2, #45	; 0x2d
 8012d5c:	222b      	movge	r2, #43	; 0x2b
 8012d5e:	2b09      	cmp	r3, #9
 8012d60:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 8012d64:	f340 819d 	ble.w	80130a2 <_vfprintf_r+0x912>
 8012d68:	f10d 0277 	add.w	r2, sp, #119	; 0x77
 8012d6c:	200a      	movs	r0, #10
 8012d6e:	4611      	mov	r1, r2
 8012d70:	fb93 f7f0 	sdiv	r7, r3, r0
 8012d74:	fb00 3017 	mls	r0, r0, r7, r3
 8012d78:	3030      	adds	r0, #48	; 0x30
 8012d7a:	f801 0c01 	strb.w	r0, [r1, #-1]
 8012d7e:	4618      	mov	r0, r3
 8012d80:	2863      	cmp	r0, #99	; 0x63
 8012d82:	f102 32ff 	add.w	r2, r2, #4294967295
 8012d86:	463b      	mov	r3, r7
 8012d88:	dcf0      	bgt.n	8012d6c <_vfprintf_r+0x5dc>
 8012d8a:	3330      	adds	r3, #48	; 0x30
 8012d8c:	1e88      	subs	r0, r1, #2
 8012d8e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012d92:	f10d 0777 	add.w	r7, sp, #119	; 0x77
 8012d96:	f10d 026a 	add.w	r2, sp, #106	; 0x6a
 8012d9a:	4603      	mov	r3, r0
 8012d9c:	42bb      	cmp	r3, r7
 8012d9e:	f0c0 817b 	bcc.w	8013098 <_vfprintf_r+0x908>
 8012da2:	f10d 0279 	add.w	r2, sp, #121	; 0x79
 8012da6:	1a52      	subs	r2, r2, r1
 8012da8:	42b8      	cmp	r0, r7
 8012daa:	bf88      	it	hi
 8012dac:	2200      	movhi	r2, #0
 8012dae:	f10d 036a 	add.w	r3, sp, #106	; 0x6a
 8012db2:	441a      	add	r2, r3
 8012db4:	ab1a      	add	r3, sp, #104	; 0x68
 8012db6:	1ad3      	subs	r3, r2, r3
 8012db8:	9a03      	ldr	r2, [sp, #12]
 8012dba:	9311      	str	r3, [sp, #68]	; 0x44
 8012dbc:	2a01      	cmp	r2, #1
 8012dbe:	eb03 0702 	add.w	r7, r3, r2
 8012dc2:	dc02      	bgt.n	8012dca <_vfprintf_r+0x63a>
 8012dc4:	f01b 0f01 	tst.w	fp, #1
 8012dc8:	d001      	beq.n	8012dce <_vfprintf_r+0x63e>
 8012dca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012dcc:	441f      	add	r7, r3
 8012dce:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 8012dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012dd6:	930d      	str	r3, [sp, #52]	; 0x34
 8012dd8:	2300      	movs	r3, #0
 8012dda:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8012dde:	4698      	mov	r8, r3
 8012de0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012de2:	b113      	cbz	r3, 8012dea <_vfprintf_r+0x65a>
 8012de4:	232d      	movs	r3, #45	; 0x2d
 8012de6:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 8012dea:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8012dee:	f04f 0900 	mov.w	r9, #0
 8012df2:	45b9      	cmp	r9, r7
 8012df4:	464b      	mov	r3, r9
 8012df6:	bfb8      	it	lt
 8012df8:	463b      	movlt	r3, r7
 8012dfa:	930d      	str	r3, [sp, #52]	; 0x34
 8012dfc:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 8012e00:	b113      	cbz	r3, 8012e08 <_vfprintf_r+0x678>
 8012e02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012e04:	3301      	adds	r3, #1
 8012e06:	930d      	str	r3, [sp, #52]	; 0x34
 8012e08:	f01b 0302 	ands.w	r3, fp, #2
 8012e0c:	9313      	str	r3, [sp, #76]	; 0x4c
 8012e0e:	bf1e      	ittt	ne
 8012e10:	9b0d      	ldrne	r3, [sp, #52]	; 0x34
 8012e12:	3302      	addne	r3, #2
 8012e14:	930d      	strne	r3, [sp, #52]	; 0x34
 8012e16:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 8012e1a:	9314      	str	r3, [sp, #80]	; 0x50
 8012e1c:	d120      	bne.n	8012e60 <_vfprintf_r+0x6d0>
 8012e1e:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 8012e22:	1a9b      	subs	r3, r3, r2
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	dd1b      	ble.n	8012e60 <_vfprintf_r+0x6d0>
 8012e28:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	; 0x7c
 8012e2c:	494d      	ldr	r1, [pc, #308]	; (8012f64 <_vfprintf_r+0x7d4>)
 8012e2e:	6021      	str	r1, [r4, #0]
 8012e30:	2b10      	cmp	r3, #16
 8012e32:	f102 0201 	add.w	r2, r2, #1
 8012e36:	f104 0008 	add.w	r0, r4, #8
 8012e3a:	f300 8302 	bgt.w	8013442 <_vfprintf_r+0xcb2>
 8012e3e:	eb0c 0103 	add.w	r1, ip, r3
 8012e42:	2a07      	cmp	r2, #7
 8012e44:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 8012e48:	6063      	str	r3, [r4, #4]
 8012e4a:	f340 830f 	ble.w	801346c <_vfprintf_r+0xcdc>
 8012e4e:	aa1e      	add	r2, sp, #120	; 0x78
 8012e50:	4629      	mov	r1, r5
 8012e52:	4630      	mov	r0, r6
 8012e54:	f002 ffb9 	bl	8015dca <__sprint_r>
 8012e58:	2800      	cmp	r0, #0
 8012e5a:	f040 8655 	bne.w	8013b08 <_vfprintf_r+0x1378>
 8012e5e:	ac21      	add	r4, sp, #132	; 0x84
 8012e60:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 8012e64:	b173      	cbz	r3, 8012e84 <_vfprintf_r+0x6f4>
 8012e66:	f10d 035b 	add.w	r3, sp, #91	; 0x5b
 8012e6a:	6023      	str	r3, [r4, #0]
 8012e6c:	2301      	movs	r3, #1
 8012e6e:	6063      	str	r3, [r4, #4]
 8012e70:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012e72:	3301      	adds	r3, #1
 8012e74:	9320      	str	r3, [sp, #128]	; 0x80
 8012e76:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012e78:	3301      	adds	r3, #1
 8012e7a:	2b07      	cmp	r3, #7
 8012e7c:	931f      	str	r3, [sp, #124]	; 0x7c
 8012e7e:	f300 82f7 	bgt.w	8013470 <_vfprintf_r+0xce0>
 8012e82:	3408      	adds	r4, #8
 8012e84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012e86:	b16b      	cbz	r3, 8012ea4 <_vfprintf_r+0x714>
 8012e88:	ab17      	add	r3, sp, #92	; 0x5c
 8012e8a:	6023      	str	r3, [r4, #0]
 8012e8c:	2302      	movs	r3, #2
 8012e8e:	6063      	str	r3, [r4, #4]
 8012e90:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012e92:	3302      	adds	r3, #2
 8012e94:	9320      	str	r3, [sp, #128]	; 0x80
 8012e96:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012e98:	3301      	adds	r3, #1
 8012e9a:	2b07      	cmp	r3, #7
 8012e9c:	931f      	str	r3, [sp, #124]	; 0x7c
 8012e9e:	f300 82f1 	bgt.w	8013484 <_vfprintf_r+0xcf4>
 8012ea2:	3408      	adds	r4, #8
 8012ea4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012ea6:	2b80      	cmp	r3, #128	; 0x80
 8012ea8:	d120      	bne.n	8012eec <_vfprintf_r+0x75c>
 8012eaa:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 8012eae:	1a9b      	subs	r3, r3, r2
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	dd1b      	ble.n	8012eec <_vfprintf_r+0x75c>
 8012eb4:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	; 0x7c
 8012eb8:	492b      	ldr	r1, [pc, #172]	; (8012f68 <_vfprintf_r+0x7d8>)
 8012eba:	6021      	str	r1, [r4, #0]
 8012ebc:	2b10      	cmp	r3, #16
 8012ebe:	f102 0201 	add.w	r2, r2, #1
 8012ec2:	f104 0008 	add.w	r0, r4, #8
 8012ec6:	f300 82e7 	bgt.w	8013498 <_vfprintf_r+0xd08>
 8012eca:	eb0c 0103 	add.w	r1, ip, r3
 8012ece:	2a07      	cmp	r2, #7
 8012ed0:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 8012ed4:	6063      	str	r3, [r4, #4]
 8012ed6:	f340 82f4 	ble.w	80134c2 <_vfprintf_r+0xd32>
 8012eda:	aa1e      	add	r2, sp, #120	; 0x78
 8012edc:	4629      	mov	r1, r5
 8012ede:	4630      	mov	r0, r6
 8012ee0:	f002 ff73 	bl	8015dca <__sprint_r>
 8012ee4:	2800      	cmp	r0, #0
 8012ee6:	f040 860f 	bne.w	8013b08 <_vfprintf_r+0x1378>
 8012eea:	ac21      	add	r4, sp, #132	; 0x84
 8012eec:	eba9 0907 	sub.w	r9, r9, r7
 8012ef0:	f1b9 0f00 	cmp.w	r9, #0
 8012ef4:	dd1c      	ble.n	8012f30 <_vfprintf_r+0x7a0>
 8012ef6:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	; 0x7c
 8012efa:	481b      	ldr	r0, [pc, #108]	; (8012f68 <_vfprintf_r+0x7d8>)
 8012efc:	6020      	str	r0, [r4, #0]
 8012efe:	f1b9 0f10 	cmp.w	r9, #16
 8012f02:	f102 0201 	add.w	r2, r2, #1
 8012f06:	f104 0108 	add.w	r1, r4, #8
 8012f0a:	f300 82dc 	bgt.w	80134c6 <_vfprintf_r+0xd36>
 8012f0e:	444b      	add	r3, r9
 8012f10:	2a07      	cmp	r2, #7
 8012f12:	e9cd 231f 	strd	r2, r3, [sp, #124]	; 0x7c
 8012f16:	f8c4 9004 	str.w	r9, [r4, #4]
 8012f1a:	f340 82e8 	ble.w	80134ee <_vfprintf_r+0xd5e>
 8012f1e:	aa1e      	add	r2, sp, #120	; 0x78
 8012f20:	4629      	mov	r1, r5
 8012f22:	4630      	mov	r0, r6
 8012f24:	f002 ff51 	bl	8015dca <__sprint_r>
 8012f28:	2800      	cmp	r0, #0
 8012f2a:	f040 85ed 	bne.w	8013b08 <_vfprintf_r+0x1378>
 8012f2e:	ac21      	add	r4, sp, #132	; 0x84
 8012f30:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8012f34:	9820      	ldr	r0, [sp, #128]	; 0x80
 8012f36:	f040 82e1 	bne.w	80134fc <_vfprintf_r+0xd6c>
 8012f3a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012f3c:	3301      	adds	r3, #1
 8012f3e:	4438      	add	r0, r7
 8012f40:	2b07      	cmp	r3, #7
 8012f42:	e9c4 a700 	strd	sl, r7, [r4]
 8012f46:	9020      	str	r0, [sp, #128]	; 0x80
 8012f48:	931f      	str	r3, [sp, #124]	; 0x7c
 8012f4a:	f300 831c 	bgt.w	8013586 <_vfprintf_r+0xdf6>
 8012f4e:	3408      	adds	r4, #8
 8012f50:	f01b 0f04 	tst.w	fp, #4
 8012f54:	f040 85b7 	bne.w	8013ac6 <_vfprintf_r+0x1336>
 8012f58:	e008      	b.n	8012f6c <_vfprintf_r+0x7dc>
 8012f5a:	bf00      	nop
 8012f5c:	0801777c 	.word	0x0801777c
 8012f60:	0801778d 	.word	0x0801778d
 8012f64:	080177c0 	.word	0x080177c0
 8012f68:	080177d0 	.word	0x080177d0
 8012f6c:	e9dd 320b 	ldrd	r3, r2, [sp, #44]	; 0x2c
 8012f70:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012f72:	428a      	cmp	r2, r1
 8012f74:	bfac      	ite	ge
 8012f76:	189b      	addge	r3, r3, r2
 8012f78:	185b      	addlt	r3, r3, r1
 8012f7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8012f7c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012f7e:	b13b      	cbz	r3, 8012f90 <_vfprintf_r+0x800>
 8012f80:	aa1e      	add	r2, sp, #120	; 0x78
 8012f82:	4629      	mov	r1, r5
 8012f84:	4630      	mov	r0, r6
 8012f86:	f002 ff20 	bl	8015dca <__sprint_r>
 8012f8a:	2800      	cmp	r0, #0
 8012f8c:	f040 85bc 	bne.w	8013b08 <_vfprintf_r+0x1378>
 8012f90:	2300      	movs	r3, #0
 8012f92:	931f      	str	r3, [sp, #124]	; 0x7c
 8012f94:	9b02      	ldr	r3, [sp, #8]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	f040 85d3 	bne.w	8013b42 <_vfprintf_r+0x13b2>
 8012f9c:	ac21      	add	r4, sp, #132	; 0x84
 8012f9e:	e0e6      	b.n	801316e <_vfprintf_r+0x9de>
 8012fa0:	2300      	movs	r3, #0
 8012fa2:	9302      	str	r3, [sp, #8]
 8012fa4:	f10d 0ac4 	add.w	sl, sp, #196	; 0xc4
 8012fa8:	e646      	b.n	8012c38 <_vfprintf_r+0x4a8>
 8012faa:	9002      	str	r0, [sp, #8]
 8012fac:	e644      	b.n	8012c38 <_vfprintf_r+0x4a8>
 8012fae:	2300      	movs	r3, #0
 8012fb0:	9302      	str	r3, [sp, #8]
 8012fb2:	2706      	movs	r7, #6
 8012fb4:	e640      	b.n	8012c38 <_vfprintf_r+0x4a8>
 8012fb6:	2300      	movs	r3, #0
 8012fb8:	9302      	str	r3, [sp, #8]
 8012fba:	e63d      	b.n	8012c38 <_vfprintf_r+0x4a8>
 8012fbc:	2300      	movs	r3, #0
 8012fbe:	eeb0 9b48 	vmov.f64	d9, d8
 8012fc2:	e644      	b.n	8012c4e <_vfprintf_r+0x4be>
 8012fc4:	f800 ec01 	strb.w	lr, [r0, #-1]
 8012fc8:	e690      	b.n	8012cec <_vfprintf_r+0x55c>
 8012fca:	f802 eb01 	strb.w	lr, [r2], #1
 8012fce:	ebac 0102 	sub.w	r1, ip, r2
 8012fd2:	2900      	cmp	r1, #0
 8012fd4:	daf9      	bge.n	8012fca <_vfprintf_r+0x83a>
 8012fd6:	1c42      	adds	r2, r0, #1
 8012fd8:	3001      	adds	r0, #1
 8012fda:	bfb8      	it	lt
 8012fdc:	2200      	movlt	r2, #0
 8012fde:	4413      	add	r3, r2
 8012fe0:	e693      	b.n	8012d0a <_vfprintf_r+0x57a>
 8012fe2:	461a      	mov	r2, r3
 8012fe4:	eb03 0c00 	add.w	ip, r3, r0
 8012fe8:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8012fec:	e7ef      	b.n	8012fce <_vfprintf_r+0x83e>
 8012fee:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
 8012ff2:	d006      	beq.n	8013002 <_vfprintf_r+0x872>
 8012ff4:	f1b9 0f45 	cmp.w	r9, #69	; 0x45
 8012ff8:	d119      	bne.n	801302e <_vfprintf_r+0x89e>
 8012ffa:	f107 0801 	add.w	r8, r7, #1
 8012ffe:	2102      	movs	r1, #2
 8013000:	e001      	b.n	8013006 <_vfprintf_r+0x876>
 8013002:	46b8      	mov	r8, r7
 8013004:	2103      	movs	r1, #3
 8013006:	ab1c      	add	r3, sp, #112	; 0x70
 8013008:	9301      	str	r3, [sp, #4]
 801300a:	ab19      	add	r3, sp, #100	; 0x64
 801300c:	9300      	str	r3, [sp, #0]
 801300e:	4642      	mov	r2, r8
 8013010:	ab18      	add	r3, sp, #96	; 0x60
 8013012:	4630      	mov	r0, r6
 8013014:	eeb0 0b49 	vmov.f64	d0, d9
 8013018:	f000 ff12 	bl	8013e40 <_dtoa_r>
 801301c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8013020:	4682      	mov	sl, r0
 8013022:	d106      	bne.n	8013032 <_vfprintf_r+0x8a2>
 8013024:	f01b 0f01 	tst.w	fp, #1
 8013028:	d103      	bne.n	8013032 <_vfprintf_r+0x8a2>
 801302a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801302c:	e66d      	b.n	8012d0a <_vfprintf_r+0x57a>
 801302e:	46b8      	mov	r8, r7
 8013030:	e7e5      	b.n	8012ffe <_vfprintf_r+0x86e>
 8013032:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
 8013036:	eb0a 0308 	add.w	r3, sl, r8
 801303a:	d10d      	bne.n	8013058 <_vfprintf_r+0x8c8>
 801303c:	f89a 2000 	ldrb.w	r2, [sl]
 8013040:	2a30      	cmp	r2, #48	; 0x30
 8013042:	d107      	bne.n	8013054 <_vfprintf_r+0x8c4>
 8013044:	eeb5 9b40 	vcmp.f64	d9, #0.0
 8013048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801304c:	bf1c      	itt	ne
 801304e:	f1c8 0201 	rsbne	r2, r8, #1
 8013052:	9218      	strne	r2, [sp, #96]	; 0x60
 8013054:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013056:	4413      	add	r3, r2
 8013058:	eeb5 9b40 	vcmp.f64	d9, #0.0
 801305c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013060:	bf08      	it	eq
 8013062:	931c      	streq	r3, [sp, #112]	; 0x70
 8013064:	2130      	movs	r1, #48	; 0x30
 8013066:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013068:	4293      	cmp	r3, r2
 801306a:	d9de      	bls.n	801302a <_vfprintf_r+0x89a>
 801306c:	1c50      	adds	r0, r2, #1
 801306e:	901c      	str	r0, [sp, #112]	; 0x70
 8013070:	7011      	strb	r1, [r2, #0]
 8013072:	e7f8      	b.n	8013066 <_vfprintf_r+0x8d6>
 8013074:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
 8013078:	f47f ae59 	bne.w	8012d2e <_vfprintf_r+0x59e>
 801307c:	f00b 0301 	and.w	r3, fp, #1
 8013080:	f1b8 0f00 	cmp.w	r8, #0
 8013084:	ea43 0307 	orr.w	r3, r3, r7
 8013088:	dd18      	ble.n	80130bc <_vfprintf_r+0x92c>
 801308a:	b38b      	cbz	r3, 80130f0 <_vfprintf_r+0x960>
 801308c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801308e:	4443      	add	r3, r8
 8013090:	441f      	add	r7, r3
 8013092:	2366      	movs	r3, #102	; 0x66
 8013094:	9304      	str	r3, [sp, #16]
 8013096:	e030      	b.n	80130fa <_vfprintf_r+0x96a>
 8013098:	f813 cb01 	ldrb.w	ip, [r3], #1
 801309c:	f802 cb01 	strb.w	ip, [r2], #1
 80130a0:	e67c      	b.n	8012d9c <_vfprintf_r+0x60c>
 80130a2:	b941      	cbnz	r1, 80130b6 <_vfprintf_r+0x926>
 80130a4:	2230      	movs	r2, #48	; 0x30
 80130a6:	f88d 206a 	strb.w	r2, [sp, #106]	; 0x6a
 80130aa:	f10d 026b 	add.w	r2, sp, #107	; 0x6b
 80130ae:	3330      	adds	r3, #48	; 0x30
 80130b0:	f802 3b01 	strb.w	r3, [r2], #1
 80130b4:	e67e      	b.n	8012db4 <_vfprintf_r+0x624>
 80130b6:	f10d 026a 	add.w	r2, sp, #106	; 0x6a
 80130ba:	e7f8      	b.n	80130ae <_vfprintf_r+0x91e>
 80130bc:	b1d3      	cbz	r3, 80130f4 <_vfprintf_r+0x964>
 80130be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80130c0:	3301      	adds	r3, #1
 80130c2:	e7e5      	b.n	8013090 <_vfprintf_r+0x900>
 80130c4:	9b03      	ldr	r3, [sp, #12]
 80130c6:	4543      	cmp	r3, r8
 80130c8:	dc07      	bgt.n	80130da <_vfprintf_r+0x94a>
 80130ca:	f01b 0f01 	tst.w	fp, #1
 80130ce:	d02a      	beq.n	8013126 <_vfprintf_r+0x996>
 80130d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80130d2:	eb08 0703 	add.w	r7, r8, r3
 80130d6:	2367      	movs	r3, #103	; 0x67
 80130d8:	e7dc      	b.n	8013094 <_vfprintf_r+0x904>
 80130da:	9b03      	ldr	r3, [sp, #12]
 80130dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80130de:	f1b8 0f00 	cmp.w	r8, #0
 80130e2:	eb03 0702 	add.w	r7, r3, r2
 80130e6:	dcf6      	bgt.n	80130d6 <_vfprintf_r+0x946>
 80130e8:	f1c8 0301 	rsb	r3, r8, #1
 80130ec:	441f      	add	r7, r3
 80130ee:	e7f2      	b.n	80130d6 <_vfprintf_r+0x946>
 80130f0:	4647      	mov	r7, r8
 80130f2:	e7ce      	b.n	8013092 <_vfprintf_r+0x902>
 80130f4:	2366      	movs	r3, #102	; 0x66
 80130f6:	9304      	str	r3, [sp, #16]
 80130f8:	2701      	movs	r7, #1
 80130fa:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 80130fe:	9307      	str	r3, [sp, #28]
 8013100:	d025      	beq.n	801314e <_vfprintf_r+0x9be>
 8013102:	2300      	movs	r3, #0
 8013104:	f1b8 0f00 	cmp.w	r8, #0
 8013108:	e9cd 3306 	strd	r3, r3, [sp, #24]
 801310c:	f77f ae68 	ble.w	8012de0 <_vfprintf_r+0x650>
 8013110:	9b08      	ldr	r3, [sp, #32]
 8013112:	781b      	ldrb	r3, [r3, #0]
 8013114:	2bff      	cmp	r3, #255	; 0xff
 8013116:	d108      	bne.n	801312a <_vfprintf_r+0x99a>
 8013118:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801311c:	4413      	add	r3, r2
 801311e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013120:	fb02 7703 	mla	r7, r2, r3, r7
 8013124:	e65c      	b.n	8012de0 <_vfprintf_r+0x650>
 8013126:	4647      	mov	r7, r8
 8013128:	e7d5      	b.n	80130d6 <_vfprintf_r+0x946>
 801312a:	4543      	cmp	r3, r8
 801312c:	daf4      	bge.n	8013118 <_vfprintf_r+0x988>
 801312e:	eba8 0803 	sub.w	r8, r8, r3
 8013132:	9b08      	ldr	r3, [sp, #32]
 8013134:	785b      	ldrb	r3, [r3, #1]
 8013136:	b133      	cbz	r3, 8013146 <_vfprintf_r+0x9b6>
 8013138:	9b07      	ldr	r3, [sp, #28]
 801313a:	3301      	adds	r3, #1
 801313c:	9307      	str	r3, [sp, #28]
 801313e:	9b08      	ldr	r3, [sp, #32]
 8013140:	3301      	adds	r3, #1
 8013142:	9308      	str	r3, [sp, #32]
 8013144:	e7e4      	b.n	8013110 <_vfprintf_r+0x980>
 8013146:	9b06      	ldr	r3, [sp, #24]
 8013148:	3301      	adds	r3, #1
 801314a:	9306      	str	r3, [sp, #24]
 801314c:	e7e0      	b.n	8013110 <_vfprintf_r+0x980>
 801314e:	9b07      	ldr	r3, [sp, #28]
 8013150:	9306      	str	r3, [sp, #24]
 8013152:	e645      	b.n	8012de0 <_vfprintf_r+0x650>
 8013154:	f108 0304 	add.w	r3, r8, #4
 8013158:	f01b 0f20 	tst.w	fp, #32
 801315c:	9305      	str	r3, [sp, #20]
 801315e:	d00c      	beq.n	801317a <_vfprintf_r+0x9ea>
 8013160:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013162:	f8d8 3000 	ldr.w	r3, [r8]
 8013166:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013168:	17d2      	asrs	r2, r2, #31
 801316a:	e9c3 1200 	strd	r1, r2, [r3]
 801316e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8013172:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8013176:	f7ff bb7e 	b.w	8012876 <_vfprintf_r+0xe6>
 801317a:	f01b 0f10 	tst.w	fp, #16
 801317e:	d004      	beq.n	801318a <_vfprintf_r+0x9fa>
 8013180:	f8d8 3000 	ldr.w	r3, [r8]
 8013184:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013186:	601a      	str	r2, [r3, #0]
 8013188:	e7f1      	b.n	801316e <_vfprintf_r+0x9de>
 801318a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 801318e:	d004      	beq.n	801319a <_vfprintf_r+0xa0a>
 8013190:	f8d8 3000 	ldr.w	r3, [r8]
 8013194:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013196:	801a      	strh	r2, [r3, #0]
 8013198:	e7e9      	b.n	801316e <_vfprintf_r+0x9de>
 801319a:	f41b 7f00 	tst.w	fp, #512	; 0x200
 801319e:	d0ef      	beq.n	8013180 <_vfprintf_r+0x9f0>
 80131a0:	f8d8 3000 	ldr.w	r3, [r8]
 80131a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80131a6:	701a      	strb	r2, [r3, #0]
 80131a8:	e7e1      	b.n	801316e <_vfprintf_r+0x9de>
 80131aa:	f04b 0b10 	orr.w	fp, fp, #16
 80131ae:	f01b 0320 	ands.w	r3, fp, #32
 80131b2:	d020      	beq.n	80131f6 <_vfprintf_r+0xa66>
 80131b4:	f108 0807 	add.w	r8, r8, #7
 80131b8:	f028 0307 	bic.w	r3, r8, #7
 80131bc:	461a      	mov	r2, r3
 80131be:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80131c2:	f852 8b08 	ldr.w	r8, [r2], #8
 80131c6:	9205      	str	r2, [sp, #20]
 80131c8:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 80131cc:	2300      	movs	r3, #0
 80131ce:	2200      	movs	r2, #0
 80131d0:	f88d 205b 	strb.w	r2, [sp, #91]	; 0x5b
 80131d4:	1c7a      	adds	r2, r7, #1
 80131d6:	f000 84cd 	beq.w	8013b74 <_vfprintf_r+0x13e4>
 80131da:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
 80131de:	9202      	str	r2, [sp, #8]
 80131e0:	ea58 0209 	orrs.w	r2, r8, r9
 80131e4:	f040 84cc 	bne.w	8013b80 <_vfprintf_r+0x13f0>
 80131e8:	2f00      	cmp	r7, #0
 80131ea:	f000 810f 	beq.w	801340c <_vfprintf_r+0xc7c>
 80131ee:	2b01      	cmp	r3, #1
 80131f0:	f040 84c9 	bne.w	8013b86 <_vfprintf_r+0x13f6>
 80131f4:	e0ae      	b.n	8013354 <_vfprintf_r+0xbc4>
 80131f6:	4642      	mov	r2, r8
 80131f8:	f01b 0910 	ands.w	r9, fp, #16
 80131fc:	f852 8b04 	ldr.w	r8, [r2], #4
 8013200:	9205      	str	r2, [sp, #20]
 8013202:	d001      	beq.n	8013208 <_vfprintf_r+0xa78>
 8013204:	4699      	mov	r9, r3
 8013206:	e7df      	b.n	80131c8 <_vfprintf_r+0xa38>
 8013208:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 801320c:	d002      	beq.n	8013214 <_vfprintf_r+0xa84>
 801320e:	fa1f f888 	uxth.w	r8, r8
 8013212:	e7d9      	b.n	80131c8 <_vfprintf_r+0xa38>
 8013214:	f41b 7900 	ands.w	r9, fp, #512	; 0x200
 8013218:	d0d6      	beq.n	80131c8 <_vfprintf_r+0xa38>
 801321a:	fa5f f888 	uxtb.w	r8, r8
 801321e:	e7f1      	b.n	8013204 <_vfprintf_r+0xa74>
 8013220:	4643      	mov	r3, r8
 8013222:	2278      	movs	r2, #120	; 0x78
 8013224:	f853 8b04 	ldr.w	r8, [r3], #4
 8013228:	9305      	str	r3, [sp, #20]
 801322a:	2330      	movs	r3, #48	; 0x30
 801322c:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8013230:	4bb0      	ldr	r3, [pc, #704]	; (80134f4 <_vfprintf_r+0xd64>)
 8013232:	9312      	str	r3, [sp, #72]	; 0x48
 8013234:	f04f 0900 	mov.w	r9, #0
 8013238:	f04b 0b02 	orr.w	fp, fp, #2
 801323c:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
 8013240:	2302      	movs	r3, #2
 8013242:	9204      	str	r2, [sp, #16]
 8013244:	e7c3      	b.n	80131ce <_vfprintf_r+0xa3e>
 8013246:	4643      	mov	r3, r8
 8013248:	1c79      	adds	r1, r7, #1
 801324a:	f853 ab04 	ldr.w	sl, [r3], #4
 801324e:	9305      	str	r3, [sp, #20]
 8013250:	f04f 0800 	mov.w	r8, #0
 8013254:	f88d 805b 	strb.w	r8, [sp, #91]	; 0x5b
 8013258:	d010      	beq.n	801327c <_vfprintf_r+0xaec>
 801325a:	463a      	mov	r2, r7
 801325c:	4641      	mov	r1, r8
 801325e:	4650      	mov	r0, sl
 8013260:	f7ec fff6 	bl	8000250 <memchr>
 8013264:	9002      	str	r0, [sp, #8]
 8013266:	2800      	cmp	r0, #0
 8013268:	f000 80e8 	beq.w	801343c <_vfprintf_r+0xcac>
 801326c:	e9cd 8806 	strd	r8, r8, [sp, #24]
 8013270:	eba0 070a 	sub.w	r7, r0, sl
 8013274:	f8cd 8008 	str.w	r8, [sp, #8]
 8013278:	46c1      	mov	r9, r8
 801327a:	e5ba      	b.n	8012df2 <_vfprintf_r+0x662>
 801327c:	4650      	mov	r0, sl
 801327e:	f7ec ffdf 	bl	8000240 <strlen>
 8013282:	46c1      	mov	r9, r8
 8013284:	4607      	mov	r7, r0
 8013286:	f8cd 8008 	str.w	r8, [sp, #8]
 801328a:	464b      	mov	r3, r9
 801328c:	e47c      	b.n	8012b88 <_vfprintf_r+0x3f8>
 801328e:	f04b 0b10 	orr.w	fp, fp, #16
 8013292:	f01b 0320 	ands.w	r3, fp, #32
 8013296:	d00b      	beq.n	80132b0 <_vfprintf_r+0xb20>
 8013298:	f108 0807 	add.w	r8, r8, #7
 801329c:	f028 0307 	bic.w	r3, r8, #7
 80132a0:	461a      	mov	r2, r3
 80132a2:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80132a6:	f852 8b08 	ldr.w	r8, [r2], #8
 80132aa:	9205      	str	r2, [sp, #20]
 80132ac:	2301      	movs	r3, #1
 80132ae:	e78e      	b.n	80131ce <_vfprintf_r+0xa3e>
 80132b0:	4642      	mov	r2, r8
 80132b2:	f01b 0910 	ands.w	r9, fp, #16
 80132b6:	f852 8b04 	ldr.w	r8, [r2], #4
 80132ba:	9205      	str	r2, [sp, #20]
 80132bc:	d001      	beq.n	80132c2 <_vfprintf_r+0xb32>
 80132be:	4699      	mov	r9, r3
 80132c0:	e7f4      	b.n	80132ac <_vfprintf_r+0xb1c>
 80132c2:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 80132c6:	d002      	beq.n	80132ce <_vfprintf_r+0xb3e>
 80132c8:	fa1f f888 	uxth.w	r8, r8
 80132cc:	e7ee      	b.n	80132ac <_vfprintf_r+0xb1c>
 80132ce:	f41b 7900 	ands.w	r9, fp, #512	; 0x200
 80132d2:	d0eb      	beq.n	80132ac <_vfprintf_r+0xb1c>
 80132d4:	fa5f f888 	uxtb.w	r8, r8
 80132d8:	e7f1      	b.n	80132be <_vfprintf_r+0xb2e>
 80132da:	4b87      	ldr	r3, [pc, #540]	; (80134f8 <_vfprintf_r+0xd68>)
 80132dc:	9312      	str	r3, [sp, #72]	; 0x48
 80132de:	f01b 0320 	ands.w	r3, fp, #32
 80132e2:	d01d      	beq.n	8013320 <_vfprintf_r+0xb90>
 80132e4:	f108 0807 	add.w	r8, r8, #7
 80132e8:	f028 0307 	bic.w	r3, r8, #7
 80132ec:	461a      	mov	r2, r3
 80132ee:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80132f2:	f852 8b08 	ldr.w	r8, [r2], #8
 80132f6:	9205      	str	r2, [sp, #20]
 80132f8:	f01b 0f01 	tst.w	fp, #1
 80132fc:	d00a      	beq.n	8013314 <_vfprintf_r+0xb84>
 80132fe:	ea58 0309 	orrs.w	r3, r8, r9
 8013302:	d007      	beq.n	8013314 <_vfprintf_r+0xb84>
 8013304:	2330      	movs	r3, #48	; 0x30
 8013306:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 801330a:	9b04      	ldr	r3, [sp, #16]
 801330c:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
 8013310:	f04b 0b02 	orr.w	fp, fp, #2
 8013314:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8013318:	2302      	movs	r3, #2
 801331a:	e758      	b.n	80131ce <_vfprintf_r+0xa3e>
 801331c:	4b75      	ldr	r3, [pc, #468]	; (80134f4 <_vfprintf_r+0xd64>)
 801331e:	e7dd      	b.n	80132dc <_vfprintf_r+0xb4c>
 8013320:	4642      	mov	r2, r8
 8013322:	f01b 0910 	ands.w	r9, fp, #16
 8013326:	f852 8b04 	ldr.w	r8, [r2], #4
 801332a:	9205      	str	r2, [sp, #20]
 801332c:	d001      	beq.n	8013332 <_vfprintf_r+0xba2>
 801332e:	4699      	mov	r9, r3
 8013330:	e7e2      	b.n	80132f8 <_vfprintf_r+0xb68>
 8013332:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8013336:	d002      	beq.n	801333e <_vfprintf_r+0xbae>
 8013338:	fa1f f888 	uxth.w	r8, r8
 801333c:	e7dc      	b.n	80132f8 <_vfprintf_r+0xb68>
 801333e:	f41b 7900 	ands.w	r9, fp, #512	; 0x200
 8013342:	d0d9      	beq.n	80132f8 <_vfprintf_r+0xb68>
 8013344:	fa5f f888 	uxtb.w	r8, r8
 8013348:	e7f1      	b.n	801332e <_vfprintf_r+0xb9e>
 801334a:	f1b8 0f0a 	cmp.w	r8, #10
 801334e:	f179 0300 	sbcs.w	r3, r9, #0
 8013352:	d207      	bcs.n	8013364 <_vfprintf_r+0xbd4>
 8013354:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8013358:	f88d 8127 	strb.w	r8, [sp, #295]	; 0x127
 801335c:	f20d 1a27 	addw	sl, sp, #295	; 0x127
 8013360:	f000 bc2f 	b.w	8013bc2 <_vfprintf_r+0x1432>
 8013364:	2300      	movs	r3, #0
 8013366:	9303      	str	r3, [sp, #12]
 8013368:	9b02      	ldr	r3, [sp, #8]
 801336a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801336e:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 8013372:	9306      	str	r3, [sp, #24]
 8013374:	220a      	movs	r2, #10
 8013376:	2300      	movs	r3, #0
 8013378:	4640      	mov	r0, r8
 801337a:	4649      	mov	r1, r9
 801337c:	f7ec ffb8 	bl	80002f0 <__aeabi_uldivmod>
 8013380:	9b03      	ldr	r3, [sp, #12]
 8013382:	3301      	adds	r3, #1
 8013384:	9303      	str	r3, [sp, #12]
 8013386:	9b06      	ldr	r3, [sp, #24]
 8013388:	3230      	adds	r2, #48	; 0x30
 801338a:	f10b 3aff 	add.w	sl, fp, #4294967295
 801338e:	f80b 2c01 	strb.w	r2, [fp, #-1]
 8013392:	b1db      	cbz	r3, 80133cc <_vfprintf_r+0xc3c>
 8013394:	9b08      	ldr	r3, [sp, #32]
 8013396:	9a03      	ldr	r2, [sp, #12]
 8013398:	781b      	ldrb	r3, [r3, #0]
 801339a:	429a      	cmp	r2, r3
 801339c:	d116      	bne.n	80133cc <_vfprintf_r+0xc3c>
 801339e:	2aff      	cmp	r2, #255	; 0xff
 80133a0:	d014      	beq.n	80133cc <_vfprintf_r+0xc3c>
 80133a2:	f1b8 0f0a 	cmp.w	r8, #10
 80133a6:	f179 0300 	sbcs.w	r3, r9, #0
 80133aa:	d30f      	bcc.n	80133cc <_vfprintf_r+0xc3c>
 80133ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80133ae:	9910      	ldr	r1, [sp, #64]	; 0x40
 80133b0:	ebaa 0a03 	sub.w	sl, sl, r3
 80133b4:	461a      	mov	r2, r3
 80133b6:	4650      	mov	r0, sl
 80133b8:	f002 fc79 	bl	8015cae <strncpy>
 80133bc:	9b08      	ldr	r3, [sp, #32]
 80133be:	785b      	ldrb	r3, [r3, #1]
 80133c0:	b11b      	cbz	r3, 80133ca <_vfprintf_r+0xc3a>
 80133c2:	9b08      	ldr	r3, [sp, #32]
 80133c4:	3301      	adds	r3, #1
 80133c6:	9308      	str	r3, [sp, #32]
 80133c8:	2300      	movs	r3, #0
 80133ca:	9303      	str	r3, [sp, #12]
 80133cc:	2300      	movs	r3, #0
 80133ce:	220a      	movs	r2, #10
 80133d0:	4640      	mov	r0, r8
 80133d2:	4649      	mov	r1, r9
 80133d4:	f7ec ff8c 	bl	80002f0 <__aeabi_uldivmod>
 80133d8:	f1b8 0f0a 	cmp.w	r8, #10
 80133dc:	f179 0300 	sbcs.w	r3, r9, #0
 80133e0:	f0c0 83ef 	bcc.w	8013bc2 <_vfprintf_r+0x1432>
 80133e4:	4680      	mov	r8, r0
 80133e6:	4689      	mov	r9, r1
 80133e8:	46d3      	mov	fp, sl
 80133ea:	e7c3      	b.n	8013374 <_vfprintf_r+0xbe4>
 80133ec:	f008 030f 	and.w	r3, r8, #15
 80133f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80133f2:	ea4f 1818 	mov.w	r8, r8, lsr #4
 80133f6:	5cd3      	ldrb	r3, [r2, r3]
 80133f8:	f80a 3d01 	strb.w	r3, [sl, #-1]!
 80133fc:	ea48 7809 	orr.w	r8, r8, r9, lsl #28
 8013400:	ea4f 1919 	mov.w	r9, r9, lsr #4
 8013404:	ea58 0309 	orrs.w	r3, r8, r9
 8013408:	d1f0      	bne.n	80133ec <_vfprintf_r+0xc5c>
 801340a:	e3da      	b.n	8013bc2 <_vfprintf_r+0x1432>
 801340c:	b933      	cbnz	r3, 801341c <_vfprintf_r+0xc8c>
 801340e:	f01b 0f01 	tst.w	fp, #1
 8013412:	d003      	beq.n	801341c <_vfprintf_r+0xc8c>
 8013414:	2330      	movs	r3, #48	; 0x30
 8013416:	f88d 3127 	strb.w	r3, [sp, #295]	; 0x127
 801341a:	e79f      	b.n	801335c <_vfprintf_r+0xbcc>
 801341c:	f50d 7a94 	add.w	sl, sp, #296	; 0x128
 8013420:	e3cf      	b.n	8013bc2 <_vfprintf_r+0x1432>
 8013422:	9b04      	ldr	r3, [sp, #16]
 8013424:	2b00      	cmp	r3, #0
 8013426:	f000 8392 	beq.w	8013b4e <_vfprintf_r+0x13be>
 801342a:	2000      	movs	r0, #0
 801342c:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
 8013430:	f88d 005b 	strb.w	r0, [sp, #91]	; 0x5b
 8013434:	f8cd 8014 	str.w	r8, [sp, #20]
 8013438:	f7ff bb36 	b.w	8012aa8 <_vfprintf_r+0x318>
 801343c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8013440:	e723      	b.n	801328a <_vfprintf_r+0xafa>
 8013442:	2110      	movs	r1, #16
 8013444:	6061      	str	r1, [r4, #4]
 8013446:	2a07      	cmp	r2, #7
 8013448:	4461      	add	r1, ip
 801344a:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 801344e:	dd0a      	ble.n	8013466 <_vfprintf_r+0xcd6>
 8013450:	aa1e      	add	r2, sp, #120	; 0x78
 8013452:	4629      	mov	r1, r5
 8013454:	4630      	mov	r0, r6
 8013456:	9315      	str	r3, [sp, #84]	; 0x54
 8013458:	f002 fcb7 	bl	8015dca <__sprint_r>
 801345c:	2800      	cmp	r0, #0
 801345e:	f040 8353 	bne.w	8013b08 <_vfprintf_r+0x1378>
 8013462:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013464:	a821      	add	r0, sp, #132	; 0x84
 8013466:	3b10      	subs	r3, #16
 8013468:	4604      	mov	r4, r0
 801346a:	e4dd      	b.n	8012e28 <_vfprintf_r+0x698>
 801346c:	4604      	mov	r4, r0
 801346e:	e4f7      	b.n	8012e60 <_vfprintf_r+0x6d0>
 8013470:	aa1e      	add	r2, sp, #120	; 0x78
 8013472:	4629      	mov	r1, r5
 8013474:	4630      	mov	r0, r6
 8013476:	f002 fca8 	bl	8015dca <__sprint_r>
 801347a:	2800      	cmp	r0, #0
 801347c:	f040 8344 	bne.w	8013b08 <_vfprintf_r+0x1378>
 8013480:	ac21      	add	r4, sp, #132	; 0x84
 8013482:	e4ff      	b.n	8012e84 <_vfprintf_r+0x6f4>
 8013484:	aa1e      	add	r2, sp, #120	; 0x78
 8013486:	4629      	mov	r1, r5
 8013488:	4630      	mov	r0, r6
 801348a:	f002 fc9e 	bl	8015dca <__sprint_r>
 801348e:	2800      	cmp	r0, #0
 8013490:	f040 833a 	bne.w	8013b08 <_vfprintf_r+0x1378>
 8013494:	ac21      	add	r4, sp, #132	; 0x84
 8013496:	e505      	b.n	8012ea4 <_vfprintf_r+0x714>
 8013498:	2110      	movs	r1, #16
 801349a:	6061      	str	r1, [r4, #4]
 801349c:	2a07      	cmp	r2, #7
 801349e:	4461      	add	r1, ip
 80134a0:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 80134a4:	dd0a      	ble.n	80134bc <_vfprintf_r+0xd2c>
 80134a6:	aa1e      	add	r2, sp, #120	; 0x78
 80134a8:	4629      	mov	r1, r5
 80134aa:	4630      	mov	r0, r6
 80134ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80134ae:	f002 fc8c 	bl	8015dca <__sprint_r>
 80134b2:	2800      	cmp	r0, #0
 80134b4:	f040 8328 	bne.w	8013b08 <_vfprintf_r+0x1378>
 80134b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80134ba:	a821      	add	r0, sp, #132	; 0x84
 80134bc:	3b10      	subs	r3, #16
 80134be:	4604      	mov	r4, r0
 80134c0:	e4f8      	b.n	8012eb4 <_vfprintf_r+0x724>
 80134c2:	4604      	mov	r4, r0
 80134c4:	e512      	b.n	8012eec <_vfprintf_r+0x75c>
 80134c6:	2010      	movs	r0, #16
 80134c8:	4403      	add	r3, r0
 80134ca:	2a07      	cmp	r2, #7
 80134cc:	e9cd 231f 	strd	r2, r3, [sp, #124]	; 0x7c
 80134d0:	6060      	str	r0, [r4, #4]
 80134d2:	dd08      	ble.n	80134e6 <_vfprintf_r+0xd56>
 80134d4:	aa1e      	add	r2, sp, #120	; 0x78
 80134d6:	4629      	mov	r1, r5
 80134d8:	4630      	mov	r0, r6
 80134da:	f002 fc76 	bl	8015dca <__sprint_r>
 80134de:	2800      	cmp	r0, #0
 80134e0:	f040 8312 	bne.w	8013b08 <_vfprintf_r+0x1378>
 80134e4:	a921      	add	r1, sp, #132	; 0x84
 80134e6:	f1a9 0910 	sub.w	r9, r9, #16
 80134ea:	460c      	mov	r4, r1
 80134ec:	e503      	b.n	8012ef6 <_vfprintf_r+0x766>
 80134ee:	460c      	mov	r4, r1
 80134f0:	e51e      	b.n	8012f30 <_vfprintf_r+0x7a0>
 80134f2:	bf00      	nop
 80134f4:	0801777c 	.word	0x0801777c
 80134f8:	0801778d 	.word	0x0801778d
 80134fc:	9b04      	ldr	r3, [sp, #16]
 80134fe:	2b65      	cmp	r3, #101	; 0x65
 8013500:	f340 8252 	ble.w	80139a8 <_vfprintf_r+0x1218>
 8013504:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801350c:	d16c      	bne.n	80135e8 <_vfprintf_r+0xe58>
 801350e:	4b75      	ldr	r3, [pc, #468]	; (80136e4 <_vfprintf_r+0xf54>)
 8013510:	6023      	str	r3, [r4, #0]
 8013512:	2301      	movs	r3, #1
 8013514:	4418      	add	r0, r3
 8013516:	6063      	str	r3, [r4, #4]
 8013518:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801351a:	9020      	str	r0, [sp, #128]	; 0x80
 801351c:	3301      	adds	r3, #1
 801351e:	2b07      	cmp	r3, #7
 8013520:	931f      	str	r3, [sp, #124]	; 0x7c
 8013522:	dc3a      	bgt.n	801359a <_vfprintf_r+0xe0a>
 8013524:	3408      	adds	r4, #8
 8013526:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8013528:	9a03      	ldr	r2, [sp, #12]
 801352a:	4293      	cmp	r3, r2
 801352c:	db03      	blt.n	8013536 <_vfprintf_r+0xda6>
 801352e:	f01b 0f01 	tst.w	fp, #1
 8013532:	f43f ad0d 	beq.w	8012f50 <_vfprintf_r+0x7c0>
 8013536:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013538:	6023      	str	r3, [r4, #0]
 801353a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801353c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801353e:	6063      	str	r3, [r4, #4]
 8013540:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013542:	4413      	add	r3, r2
 8013544:	9320      	str	r3, [sp, #128]	; 0x80
 8013546:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013548:	3301      	adds	r3, #1
 801354a:	2b07      	cmp	r3, #7
 801354c:	931f      	str	r3, [sp, #124]	; 0x7c
 801354e:	dc2e      	bgt.n	80135ae <_vfprintf_r+0xe1e>
 8013550:	3408      	adds	r4, #8
 8013552:	9b03      	ldr	r3, [sp, #12]
 8013554:	1e5f      	subs	r7, r3, #1
 8013556:	2f00      	cmp	r7, #0
 8013558:	f77f acfa 	ble.w	8012f50 <_vfprintf_r+0x7c0>
 801355c:	f8df 8188 	ldr.w	r8, [pc, #392]	; 80136e8 <_vfprintf_r+0xf58>
 8013560:	f04f 0910 	mov.w	r9, #16
 8013564:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 8013568:	2f10      	cmp	r7, #16
 801356a:	f103 0301 	add.w	r3, r3, #1
 801356e:	f104 0108 	add.w	r1, r4, #8
 8013572:	f8c4 8000 	str.w	r8, [r4]
 8013576:	dc24      	bgt.n	80135c2 <_vfprintf_r+0xe32>
 8013578:	443a      	add	r2, r7
 801357a:	6067      	str	r7, [r4, #4]
 801357c:	9220      	str	r2, [sp, #128]	; 0x80
 801357e:	2b07      	cmp	r3, #7
 8013580:	931f      	str	r3, [sp, #124]	; 0x7c
 8013582:	f340 829d 	ble.w	8013ac0 <_vfprintf_r+0x1330>
 8013586:	aa1e      	add	r2, sp, #120	; 0x78
 8013588:	4629      	mov	r1, r5
 801358a:	4630      	mov	r0, r6
 801358c:	f002 fc1d 	bl	8015dca <__sprint_r>
 8013590:	2800      	cmp	r0, #0
 8013592:	f040 82b9 	bne.w	8013b08 <_vfprintf_r+0x1378>
 8013596:	ac21      	add	r4, sp, #132	; 0x84
 8013598:	e4da      	b.n	8012f50 <_vfprintf_r+0x7c0>
 801359a:	aa1e      	add	r2, sp, #120	; 0x78
 801359c:	4629      	mov	r1, r5
 801359e:	4630      	mov	r0, r6
 80135a0:	f002 fc13 	bl	8015dca <__sprint_r>
 80135a4:	2800      	cmp	r0, #0
 80135a6:	f040 82af 	bne.w	8013b08 <_vfprintf_r+0x1378>
 80135aa:	ac21      	add	r4, sp, #132	; 0x84
 80135ac:	e7bb      	b.n	8013526 <_vfprintf_r+0xd96>
 80135ae:	aa1e      	add	r2, sp, #120	; 0x78
 80135b0:	4629      	mov	r1, r5
 80135b2:	4630      	mov	r0, r6
 80135b4:	f002 fc09 	bl	8015dca <__sprint_r>
 80135b8:	2800      	cmp	r0, #0
 80135ba:	f040 82a5 	bne.w	8013b08 <_vfprintf_r+0x1378>
 80135be:	ac21      	add	r4, sp, #132	; 0x84
 80135c0:	e7c7      	b.n	8013552 <_vfprintf_r+0xdc2>
 80135c2:	3210      	adds	r2, #16
 80135c4:	2b07      	cmp	r3, #7
 80135c6:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 80135ca:	f8c4 9004 	str.w	r9, [r4, #4]
 80135ce:	dd08      	ble.n	80135e2 <_vfprintf_r+0xe52>
 80135d0:	aa1e      	add	r2, sp, #120	; 0x78
 80135d2:	4629      	mov	r1, r5
 80135d4:	4630      	mov	r0, r6
 80135d6:	f002 fbf8 	bl	8015dca <__sprint_r>
 80135da:	2800      	cmp	r0, #0
 80135dc:	f040 8294 	bne.w	8013b08 <_vfprintf_r+0x1378>
 80135e0:	a921      	add	r1, sp, #132	; 0x84
 80135e2:	3f10      	subs	r7, #16
 80135e4:	460c      	mov	r4, r1
 80135e6:	e7bd      	b.n	8013564 <_vfprintf_r+0xdd4>
 80135e8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	dc7e      	bgt.n	80136ec <_vfprintf_r+0xf5c>
 80135ee:	4b3d      	ldr	r3, [pc, #244]	; (80136e4 <_vfprintf_r+0xf54>)
 80135f0:	6023      	str	r3, [r4, #0]
 80135f2:	2301      	movs	r3, #1
 80135f4:	4418      	add	r0, r3
 80135f6:	6063      	str	r3, [r4, #4]
 80135f8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80135fa:	9020      	str	r0, [sp, #128]	; 0x80
 80135fc:	3301      	adds	r3, #1
 80135fe:	2b07      	cmp	r3, #7
 8013600:	931f      	str	r3, [sp, #124]	; 0x7c
 8013602:	dc47      	bgt.n	8013694 <_vfprintf_r+0xf04>
 8013604:	3408      	adds	r4, #8
 8013606:	9903      	ldr	r1, [sp, #12]
 8013608:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801360a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801360c:	430a      	orrs	r2, r1
 801360e:	f00b 0101 	and.w	r1, fp, #1
 8013612:	430a      	orrs	r2, r1
 8013614:	f43f ac9c 	beq.w	8012f50 <_vfprintf_r+0x7c0>
 8013618:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801361a:	6022      	str	r2, [r4, #0]
 801361c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801361e:	6062      	str	r2, [r4, #4]
 8013620:	4413      	add	r3, r2
 8013622:	9320      	str	r3, [sp, #128]	; 0x80
 8013624:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013626:	3301      	adds	r3, #1
 8013628:	2b07      	cmp	r3, #7
 801362a:	931f      	str	r3, [sp, #124]	; 0x7c
 801362c:	dc3c      	bgt.n	80136a8 <_vfprintf_r+0xf18>
 801362e:	f104 0308 	add.w	r3, r4, #8
 8013632:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8013634:	2f00      	cmp	r7, #0
 8013636:	da1c      	bge.n	8013672 <_vfprintf_r+0xee2>
 8013638:	4c2b      	ldr	r4, [pc, #172]	; (80136e8 <_vfprintf_r+0xf58>)
 801363a:	427f      	negs	r7, r7
 801363c:	461a      	mov	r2, r3
 801363e:	f04f 0810 	mov.w	r8, #16
 8013642:	e9dd 101f 	ldrd	r1, r0, [sp, #124]	; 0x7c
 8013646:	2f10      	cmp	r7, #16
 8013648:	f101 0101 	add.w	r1, r1, #1
 801364c:	f103 0308 	add.w	r3, r3, #8
 8013650:	6014      	str	r4, [r2, #0]
 8013652:	dc33      	bgt.n	80136bc <_vfprintf_r+0xf2c>
 8013654:	6057      	str	r7, [r2, #4]
 8013656:	2907      	cmp	r1, #7
 8013658:	4407      	add	r7, r0
 801365a:	e9cd 171f 	strd	r1, r7, [sp, #124]	; 0x7c
 801365e:	dd08      	ble.n	8013672 <_vfprintf_r+0xee2>
 8013660:	aa1e      	add	r2, sp, #120	; 0x78
 8013662:	4629      	mov	r1, r5
 8013664:	4630      	mov	r0, r6
 8013666:	f002 fbb0 	bl	8015dca <__sprint_r>
 801366a:	2800      	cmp	r0, #0
 801366c:	f040 824c 	bne.w	8013b08 <_vfprintf_r+0x1378>
 8013670:	ab21      	add	r3, sp, #132	; 0x84
 8013672:	9a03      	ldr	r2, [sp, #12]
 8013674:	605a      	str	r2, [r3, #4]
 8013676:	9903      	ldr	r1, [sp, #12]
 8013678:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801367a:	f8c3 a000 	str.w	sl, [r3]
 801367e:	440a      	add	r2, r1
 8013680:	9220      	str	r2, [sp, #128]	; 0x80
 8013682:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8013684:	3201      	adds	r2, #1
 8013686:	2a07      	cmp	r2, #7
 8013688:	921f      	str	r2, [sp, #124]	; 0x7c
 801368a:	f73f af7c 	bgt.w	8013586 <_vfprintf_r+0xdf6>
 801368e:	f103 0408 	add.w	r4, r3, #8
 8013692:	e45d      	b.n	8012f50 <_vfprintf_r+0x7c0>
 8013694:	aa1e      	add	r2, sp, #120	; 0x78
 8013696:	4629      	mov	r1, r5
 8013698:	4630      	mov	r0, r6
 801369a:	f002 fb96 	bl	8015dca <__sprint_r>
 801369e:	2800      	cmp	r0, #0
 80136a0:	f040 8232 	bne.w	8013b08 <_vfprintf_r+0x1378>
 80136a4:	ac21      	add	r4, sp, #132	; 0x84
 80136a6:	e7ae      	b.n	8013606 <_vfprintf_r+0xe76>
 80136a8:	aa1e      	add	r2, sp, #120	; 0x78
 80136aa:	4629      	mov	r1, r5
 80136ac:	4630      	mov	r0, r6
 80136ae:	f002 fb8c 	bl	8015dca <__sprint_r>
 80136b2:	2800      	cmp	r0, #0
 80136b4:	f040 8228 	bne.w	8013b08 <_vfprintf_r+0x1378>
 80136b8:	ab21      	add	r3, sp, #132	; 0x84
 80136ba:	e7ba      	b.n	8013632 <_vfprintf_r+0xea2>
 80136bc:	3010      	adds	r0, #16
 80136be:	2907      	cmp	r1, #7
 80136c0:	e9cd 101f 	strd	r1, r0, [sp, #124]	; 0x7c
 80136c4:	f8c2 8004 	str.w	r8, [r2, #4]
 80136c8:	dd08      	ble.n	80136dc <_vfprintf_r+0xf4c>
 80136ca:	aa1e      	add	r2, sp, #120	; 0x78
 80136cc:	4629      	mov	r1, r5
 80136ce:	4630      	mov	r0, r6
 80136d0:	f002 fb7b 	bl	8015dca <__sprint_r>
 80136d4:	2800      	cmp	r0, #0
 80136d6:	f040 8217 	bne.w	8013b08 <_vfprintf_r+0x1378>
 80136da:	ab21      	add	r3, sp, #132	; 0x84
 80136dc:	3f10      	subs	r7, #16
 80136de:	461a      	mov	r2, r3
 80136e0:	e7af      	b.n	8013642 <_vfprintf_r+0xeb2>
 80136e2:	bf00      	nop
 80136e4:	0801779e 	.word	0x0801779e
 80136e8:	080177d0 	.word	0x080177d0
 80136ec:	9b03      	ldr	r3, [sp, #12]
 80136ee:	4543      	cmp	r3, r8
 80136f0:	bfa8      	it	ge
 80136f2:	4643      	movge	r3, r8
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	4699      	mov	r9, r3
 80136f8:	dd0a      	ble.n	8013710 <_vfprintf_r+0xf80>
 80136fa:	4418      	add	r0, r3
 80136fc:	e9c4 a300 	strd	sl, r3, [r4]
 8013700:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013702:	9020      	str	r0, [sp, #128]	; 0x80
 8013704:	3301      	adds	r3, #1
 8013706:	2b07      	cmp	r3, #7
 8013708:	931f      	str	r3, [sp, #124]	; 0x7c
 801370a:	f300 8084 	bgt.w	8013816 <_vfprintf_r+0x1086>
 801370e:	3408      	adds	r4, #8
 8013710:	f1b9 0f00 	cmp.w	r9, #0
 8013714:	bfac      	ite	ge
 8013716:	eba8 0709 	subge.w	r7, r8, r9
 801371a:	4647      	movlt	r7, r8
 801371c:	2f00      	cmp	r7, #0
 801371e:	dd1b      	ble.n	8013758 <_vfprintf_r+0xfc8>
 8013720:	f8df 9448 	ldr.w	r9, [pc, #1096]	; 8013b6c <_vfprintf_r+0x13dc>
 8013724:	f8c4 9000 	str.w	r9, [r4]
 8013728:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 801372c:	2f10      	cmp	r7, #16
 801372e:	f103 0301 	add.w	r3, r3, #1
 8013732:	f104 0108 	add.w	r1, r4, #8
 8013736:	dc78      	bgt.n	801382a <_vfprintf_r+0x109a>
 8013738:	6067      	str	r7, [r4, #4]
 801373a:	2b07      	cmp	r3, #7
 801373c:	4417      	add	r7, r2
 801373e:	e9cd 371f 	strd	r3, r7, [sp, #124]	; 0x7c
 8013742:	f340 8085 	ble.w	8013850 <_vfprintf_r+0x10c0>
 8013746:	aa1e      	add	r2, sp, #120	; 0x78
 8013748:	4629      	mov	r1, r5
 801374a:	4630      	mov	r0, r6
 801374c:	f002 fb3d 	bl	8015dca <__sprint_r>
 8013750:	2800      	cmp	r0, #0
 8013752:	f040 81d9 	bne.w	8013b08 <_vfprintf_r+0x1378>
 8013756:	ac21      	add	r4, sp, #132	; 0x84
 8013758:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 801375c:	44d0      	add	r8, sl
 801375e:	d00a      	beq.n	8013776 <_vfprintf_r+0xfe6>
 8013760:	9b07      	ldr	r3, [sp, #28]
 8013762:	2b00      	cmp	r3, #0
 8013764:	d176      	bne.n	8013854 <_vfprintf_r+0x10c4>
 8013766:	9b06      	ldr	r3, [sp, #24]
 8013768:	2b00      	cmp	r3, #0
 801376a:	d176      	bne.n	801385a <_vfprintf_r+0x10ca>
 801376c:	9b03      	ldr	r3, [sp, #12]
 801376e:	4453      	add	r3, sl
 8013770:	4598      	cmp	r8, r3
 8013772:	bf28      	it	cs
 8013774:	4698      	movcs	r8, r3
 8013776:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8013778:	9a03      	ldr	r2, [sp, #12]
 801377a:	4293      	cmp	r3, r2
 801377c:	db02      	blt.n	8013784 <_vfprintf_r+0xff4>
 801377e:	f01b 0f01 	tst.w	fp, #1
 8013782:	d00e      	beq.n	80137a2 <_vfprintf_r+0x1012>
 8013784:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013786:	6023      	str	r3, [r4, #0]
 8013788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801378a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801378c:	6063      	str	r3, [r4, #4]
 801378e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013790:	4413      	add	r3, r2
 8013792:	9320      	str	r3, [sp, #128]	; 0x80
 8013794:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013796:	3301      	adds	r3, #1
 8013798:	2b07      	cmp	r3, #7
 801379a:	931f      	str	r3, [sp, #124]	; 0x7c
 801379c:	f300 80dd 	bgt.w	801395a <_vfprintf_r+0x11ca>
 80137a0:	3408      	adds	r4, #8
 80137a2:	9b03      	ldr	r3, [sp, #12]
 80137a4:	9903      	ldr	r1, [sp, #12]
 80137a6:	eb0a 0203 	add.w	r2, sl, r3
 80137aa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80137ac:	eba2 0208 	sub.w	r2, r2, r8
 80137b0:	eba1 0903 	sub.w	r9, r1, r3
 80137b4:	4591      	cmp	r9, r2
 80137b6:	bfa8      	it	ge
 80137b8:	4691      	movge	r9, r2
 80137ba:	f1b9 0f00 	cmp.w	r9, #0
 80137be:	dd0b      	ble.n	80137d8 <_vfprintf_r+0x1048>
 80137c0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80137c2:	444b      	add	r3, r9
 80137c4:	9320      	str	r3, [sp, #128]	; 0x80
 80137c6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80137c8:	3301      	adds	r3, #1
 80137ca:	2b07      	cmp	r3, #7
 80137cc:	e9c4 8900 	strd	r8, r9, [r4]
 80137d0:	931f      	str	r3, [sp, #124]	; 0x7c
 80137d2:	f300 80cc 	bgt.w	801396e <_vfprintf_r+0x11de>
 80137d6:	3408      	adds	r4, #8
 80137d8:	9f18      	ldr	r7, [sp, #96]	; 0x60
 80137da:	9b03      	ldr	r3, [sp, #12]
 80137dc:	f1b9 0f00 	cmp.w	r9, #0
 80137e0:	eba3 0707 	sub.w	r7, r3, r7
 80137e4:	bfa8      	it	ge
 80137e6:	eba7 0709 	subge.w	r7, r7, r9
 80137ea:	2f00      	cmp	r7, #0
 80137ec:	f77f abb0 	ble.w	8012f50 <_vfprintf_r+0x7c0>
 80137f0:	f8df 8378 	ldr.w	r8, [pc, #888]	; 8013b6c <_vfprintf_r+0x13dc>
 80137f4:	f04f 0910 	mov.w	r9, #16
 80137f8:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 80137fc:	2f10      	cmp	r7, #16
 80137fe:	f103 0301 	add.w	r3, r3, #1
 8013802:	f104 0108 	add.w	r1, r4, #8
 8013806:	f8c4 8000 	str.w	r8, [r4]
 801380a:	f300 80ba 	bgt.w	8013982 <_vfprintf_r+0x11f2>
 801380e:	6067      	str	r7, [r4, #4]
 8013810:	4417      	add	r7, r2
 8013812:	9720      	str	r7, [sp, #128]	; 0x80
 8013814:	e6b3      	b.n	801357e <_vfprintf_r+0xdee>
 8013816:	aa1e      	add	r2, sp, #120	; 0x78
 8013818:	4629      	mov	r1, r5
 801381a:	4630      	mov	r0, r6
 801381c:	f002 fad5 	bl	8015dca <__sprint_r>
 8013820:	2800      	cmp	r0, #0
 8013822:	f040 8171 	bne.w	8013b08 <_vfprintf_r+0x1378>
 8013826:	ac21      	add	r4, sp, #132	; 0x84
 8013828:	e772      	b.n	8013710 <_vfprintf_r+0xf80>
 801382a:	2010      	movs	r0, #16
 801382c:	4402      	add	r2, r0
 801382e:	2b07      	cmp	r3, #7
 8013830:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 8013834:	6060      	str	r0, [r4, #4]
 8013836:	dd08      	ble.n	801384a <_vfprintf_r+0x10ba>
 8013838:	aa1e      	add	r2, sp, #120	; 0x78
 801383a:	4629      	mov	r1, r5
 801383c:	4630      	mov	r0, r6
 801383e:	f002 fac4 	bl	8015dca <__sprint_r>
 8013842:	2800      	cmp	r0, #0
 8013844:	f040 8160 	bne.w	8013b08 <_vfprintf_r+0x1378>
 8013848:	a921      	add	r1, sp, #132	; 0x84
 801384a:	3f10      	subs	r7, #16
 801384c:	460c      	mov	r4, r1
 801384e:	e769      	b.n	8013724 <_vfprintf_r+0xf94>
 8013850:	460c      	mov	r4, r1
 8013852:	e781      	b.n	8013758 <_vfprintf_r+0xfc8>
 8013854:	9b06      	ldr	r3, [sp, #24]
 8013856:	2b00      	cmp	r3, #0
 8013858:	d04f      	beq.n	80138fa <_vfprintf_r+0x116a>
 801385a:	9b06      	ldr	r3, [sp, #24]
 801385c:	3b01      	subs	r3, #1
 801385e:	9306      	str	r3, [sp, #24]
 8013860:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013862:	6023      	str	r3, [r4, #0]
 8013864:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013866:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013868:	6063      	str	r3, [r4, #4]
 801386a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801386c:	4413      	add	r3, r2
 801386e:	9320      	str	r3, [sp, #128]	; 0x80
 8013870:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013872:	3301      	adds	r3, #1
 8013874:	2b07      	cmp	r3, #7
 8013876:	931f      	str	r3, [sp, #124]	; 0x7c
 8013878:	dc46      	bgt.n	8013908 <_vfprintf_r+0x1178>
 801387a:	3408      	adds	r4, #8
 801387c:	9b03      	ldr	r3, [sp, #12]
 801387e:	9a08      	ldr	r2, [sp, #32]
 8013880:	eb0a 0903 	add.w	r9, sl, r3
 8013884:	eba9 0308 	sub.w	r3, r9, r8
 8013888:	f892 9000 	ldrb.w	r9, [r2]
 801388c:	4599      	cmp	r9, r3
 801388e:	bfa8      	it	ge
 8013890:	4699      	movge	r9, r3
 8013892:	f1b9 0f00 	cmp.w	r9, #0
 8013896:	dd0a      	ble.n	80138ae <_vfprintf_r+0x111e>
 8013898:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801389a:	444b      	add	r3, r9
 801389c:	9320      	str	r3, [sp, #128]	; 0x80
 801389e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80138a0:	3301      	adds	r3, #1
 80138a2:	2b07      	cmp	r3, #7
 80138a4:	e9c4 8900 	strd	r8, r9, [r4]
 80138a8:	931f      	str	r3, [sp, #124]	; 0x7c
 80138aa:	dc37      	bgt.n	801391c <_vfprintf_r+0x118c>
 80138ac:	3408      	adds	r4, #8
 80138ae:	9b08      	ldr	r3, [sp, #32]
 80138b0:	781f      	ldrb	r7, [r3, #0]
 80138b2:	f1b9 0f00 	cmp.w	r9, #0
 80138b6:	bfa8      	it	ge
 80138b8:	eba7 0709 	subge.w	r7, r7, r9
 80138bc:	2f00      	cmp	r7, #0
 80138be:	dd18      	ble.n	80138f2 <_vfprintf_r+0x1162>
 80138c0:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 80138c4:	48a9      	ldr	r0, [pc, #676]	; (8013b6c <_vfprintf_r+0x13dc>)
 80138c6:	6020      	str	r0, [r4, #0]
 80138c8:	2f10      	cmp	r7, #16
 80138ca:	f103 0301 	add.w	r3, r3, #1
 80138ce:	f104 0108 	add.w	r1, r4, #8
 80138d2:	dc2d      	bgt.n	8013930 <_vfprintf_r+0x11a0>
 80138d4:	6067      	str	r7, [r4, #4]
 80138d6:	2b07      	cmp	r3, #7
 80138d8:	4417      	add	r7, r2
 80138da:	e9cd 371f 	strd	r3, r7, [sp, #124]	; 0x7c
 80138de:	dd3a      	ble.n	8013956 <_vfprintf_r+0x11c6>
 80138e0:	aa1e      	add	r2, sp, #120	; 0x78
 80138e2:	4629      	mov	r1, r5
 80138e4:	4630      	mov	r0, r6
 80138e6:	f002 fa70 	bl	8015dca <__sprint_r>
 80138ea:	2800      	cmp	r0, #0
 80138ec:	f040 810c 	bne.w	8013b08 <_vfprintf_r+0x1378>
 80138f0:	ac21      	add	r4, sp, #132	; 0x84
 80138f2:	9b08      	ldr	r3, [sp, #32]
 80138f4:	781b      	ldrb	r3, [r3, #0]
 80138f6:	4498      	add	r8, r3
 80138f8:	e732      	b.n	8013760 <_vfprintf_r+0xfd0>
 80138fa:	9b08      	ldr	r3, [sp, #32]
 80138fc:	3b01      	subs	r3, #1
 80138fe:	9308      	str	r3, [sp, #32]
 8013900:	9b07      	ldr	r3, [sp, #28]
 8013902:	3b01      	subs	r3, #1
 8013904:	9307      	str	r3, [sp, #28]
 8013906:	e7ab      	b.n	8013860 <_vfprintf_r+0x10d0>
 8013908:	aa1e      	add	r2, sp, #120	; 0x78
 801390a:	4629      	mov	r1, r5
 801390c:	4630      	mov	r0, r6
 801390e:	f002 fa5c 	bl	8015dca <__sprint_r>
 8013912:	2800      	cmp	r0, #0
 8013914:	f040 80f8 	bne.w	8013b08 <_vfprintf_r+0x1378>
 8013918:	ac21      	add	r4, sp, #132	; 0x84
 801391a:	e7af      	b.n	801387c <_vfprintf_r+0x10ec>
 801391c:	aa1e      	add	r2, sp, #120	; 0x78
 801391e:	4629      	mov	r1, r5
 8013920:	4630      	mov	r0, r6
 8013922:	f002 fa52 	bl	8015dca <__sprint_r>
 8013926:	2800      	cmp	r0, #0
 8013928:	f040 80ee 	bne.w	8013b08 <_vfprintf_r+0x1378>
 801392c:	ac21      	add	r4, sp, #132	; 0x84
 801392e:	e7be      	b.n	80138ae <_vfprintf_r+0x111e>
 8013930:	2010      	movs	r0, #16
 8013932:	4402      	add	r2, r0
 8013934:	2b07      	cmp	r3, #7
 8013936:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 801393a:	6060      	str	r0, [r4, #4]
 801393c:	dd08      	ble.n	8013950 <_vfprintf_r+0x11c0>
 801393e:	aa1e      	add	r2, sp, #120	; 0x78
 8013940:	4629      	mov	r1, r5
 8013942:	4630      	mov	r0, r6
 8013944:	f002 fa41 	bl	8015dca <__sprint_r>
 8013948:	2800      	cmp	r0, #0
 801394a:	f040 80dd 	bne.w	8013b08 <_vfprintf_r+0x1378>
 801394e:	a921      	add	r1, sp, #132	; 0x84
 8013950:	3f10      	subs	r7, #16
 8013952:	460c      	mov	r4, r1
 8013954:	e7b4      	b.n	80138c0 <_vfprintf_r+0x1130>
 8013956:	460c      	mov	r4, r1
 8013958:	e7cb      	b.n	80138f2 <_vfprintf_r+0x1162>
 801395a:	aa1e      	add	r2, sp, #120	; 0x78
 801395c:	4629      	mov	r1, r5
 801395e:	4630      	mov	r0, r6
 8013960:	f002 fa33 	bl	8015dca <__sprint_r>
 8013964:	2800      	cmp	r0, #0
 8013966:	f040 80cf 	bne.w	8013b08 <_vfprintf_r+0x1378>
 801396a:	ac21      	add	r4, sp, #132	; 0x84
 801396c:	e719      	b.n	80137a2 <_vfprintf_r+0x1012>
 801396e:	aa1e      	add	r2, sp, #120	; 0x78
 8013970:	4629      	mov	r1, r5
 8013972:	4630      	mov	r0, r6
 8013974:	f002 fa29 	bl	8015dca <__sprint_r>
 8013978:	2800      	cmp	r0, #0
 801397a:	f040 80c5 	bne.w	8013b08 <_vfprintf_r+0x1378>
 801397e:	ac21      	add	r4, sp, #132	; 0x84
 8013980:	e72a      	b.n	80137d8 <_vfprintf_r+0x1048>
 8013982:	3210      	adds	r2, #16
 8013984:	2b07      	cmp	r3, #7
 8013986:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 801398a:	f8c4 9004 	str.w	r9, [r4, #4]
 801398e:	dd08      	ble.n	80139a2 <_vfprintf_r+0x1212>
 8013990:	aa1e      	add	r2, sp, #120	; 0x78
 8013992:	4629      	mov	r1, r5
 8013994:	4630      	mov	r0, r6
 8013996:	f002 fa18 	bl	8015dca <__sprint_r>
 801399a:	2800      	cmp	r0, #0
 801399c:	f040 80b4 	bne.w	8013b08 <_vfprintf_r+0x1378>
 80139a0:	a921      	add	r1, sp, #132	; 0x84
 80139a2:	3f10      	subs	r7, #16
 80139a4:	460c      	mov	r4, r1
 80139a6:	e727      	b.n	80137f8 <_vfprintf_r+0x1068>
 80139a8:	9903      	ldr	r1, [sp, #12]
 80139aa:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80139ac:	2901      	cmp	r1, #1
 80139ae:	f100 0001 	add.w	r0, r0, #1
 80139b2:	f102 0201 	add.w	r2, r2, #1
 80139b6:	f104 0308 	add.w	r3, r4, #8
 80139ba:	dc02      	bgt.n	80139c2 <_vfprintf_r+0x1232>
 80139bc:	f01b 0f01 	tst.w	fp, #1
 80139c0:	d073      	beq.n	8013aaa <_vfprintf_r+0x131a>
 80139c2:	2101      	movs	r1, #1
 80139c4:	2a07      	cmp	r2, #7
 80139c6:	e9cd 201f 	strd	r2, r0, [sp, #124]	; 0x7c
 80139ca:	f8c4 a000 	str.w	sl, [r4]
 80139ce:	6061      	str	r1, [r4, #4]
 80139d0:	dd08      	ble.n	80139e4 <_vfprintf_r+0x1254>
 80139d2:	aa1e      	add	r2, sp, #120	; 0x78
 80139d4:	4629      	mov	r1, r5
 80139d6:	4630      	mov	r0, r6
 80139d8:	f002 f9f7 	bl	8015dca <__sprint_r>
 80139dc:	2800      	cmp	r0, #0
 80139de:	f040 8093 	bne.w	8013b08 <_vfprintf_r+0x1378>
 80139e2:	ab21      	add	r3, sp, #132	; 0x84
 80139e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80139e6:	601a      	str	r2, [r3, #0]
 80139e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80139ea:	990a      	ldr	r1, [sp, #40]	; 0x28
 80139ec:	605a      	str	r2, [r3, #4]
 80139ee:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80139f0:	440a      	add	r2, r1
 80139f2:	9220      	str	r2, [sp, #128]	; 0x80
 80139f4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80139f6:	3201      	adds	r2, #1
 80139f8:	2a07      	cmp	r2, #7
 80139fa:	921f      	str	r2, [sp, #124]	; 0x7c
 80139fc:	dc25      	bgt.n	8013a4a <_vfprintf_r+0x12ba>
 80139fe:	3308      	adds	r3, #8
 8013a00:	9a03      	ldr	r2, [sp, #12]
 8013a02:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a0a:	f102 34ff 	add.w	r4, r2, #4294967295
 8013a0e:	d025      	beq.n	8013a5c <_vfprintf_r+0x12cc>
 8013a10:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8013a12:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013a14:	f10a 0001 	add.w	r0, sl, #1
 8013a18:	e9c3 0400 	strd	r0, r4, [r3]
 8013a1c:	9803      	ldr	r0, [sp, #12]
 8013a1e:	3101      	adds	r1, #1
 8013a20:	3a01      	subs	r2, #1
 8013a22:	4402      	add	r2, r0
 8013a24:	2907      	cmp	r1, #7
 8013a26:	e9cd 121f 	strd	r1, r2, [sp, #124]	; 0x7c
 8013a2a:	dd47      	ble.n	8013abc <_vfprintf_r+0x132c>
 8013a2c:	aa1e      	add	r2, sp, #120	; 0x78
 8013a2e:	4629      	mov	r1, r5
 8013a30:	4630      	mov	r0, r6
 8013a32:	f002 f9ca 	bl	8015dca <__sprint_r>
 8013a36:	2800      	cmp	r0, #0
 8013a38:	d166      	bne.n	8013b08 <_vfprintf_r+0x1378>
 8013a3a:	ab21      	add	r3, sp, #132	; 0x84
 8013a3c:	aa1a      	add	r2, sp, #104	; 0x68
 8013a3e:	601a      	str	r2, [r3, #0]
 8013a40:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013a42:	605a      	str	r2, [r3, #4]
 8013a44:	9911      	ldr	r1, [sp, #68]	; 0x44
 8013a46:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013a48:	e619      	b.n	801367e <_vfprintf_r+0xeee>
 8013a4a:	aa1e      	add	r2, sp, #120	; 0x78
 8013a4c:	4629      	mov	r1, r5
 8013a4e:	4630      	mov	r0, r6
 8013a50:	f002 f9bb 	bl	8015dca <__sprint_r>
 8013a54:	2800      	cmp	r0, #0
 8013a56:	d157      	bne.n	8013b08 <_vfprintf_r+0x1378>
 8013a58:	ab21      	add	r3, sp, #132	; 0x84
 8013a5a:	e7d1      	b.n	8013a00 <_vfprintf_r+0x1270>
 8013a5c:	2c00      	cmp	r4, #0
 8013a5e:	dded      	ble.n	8013a3c <_vfprintf_r+0x12ac>
 8013a60:	4f42      	ldr	r7, [pc, #264]	; (8013b6c <_vfprintf_r+0x13dc>)
 8013a62:	f04f 0810 	mov.w	r8, #16
 8013a66:	e9dd 211f 	ldrd	r2, r1, [sp, #124]	; 0x7c
 8013a6a:	2c10      	cmp	r4, #16
 8013a6c:	f102 0201 	add.w	r2, r2, #1
 8013a70:	f103 0008 	add.w	r0, r3, #8
 8013a74:	601f      	str	r7, [r3, #0]
 8013a76:	dc07      	bgt.n	8013a88 <_vfprintf_r+0x12f8>
 8013a78:	605c      	str	r4, [r3, #4]
 8013a7a:	2a07      	cmp	r2, #7
 8013a7c:	440c      	add	r4, r1
 8013a7e:	e9cd 241f 	strd	r2, r4, [sp, #124]	; 0x7c
 8013a82:	dcd3      	bgt.n	8013a2c <_vfprintf_r+0x129c>
 8013a84:	4603      	mov	r3, r0
 8013a86:	e7d9      	b.n	8013a3c <_vfprintf_r+0x12ac>
 8013a88:	3110      	adds	r1, #16
 8013a8a:	2a07      	cmp	r2, #7
 8013a8c:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 8013a90:	f8c3 8004 	str.w	r8, [r3, #4]
 8013a94:	dd06      	ble.n	8013aa4 <_vfprintf_r+0x1314>
 8013a96:	aa1e      	add	r2, sp, #120	; 0x78
 8013a98:	4629      	mov	r1, r5
 8013a9a:	4630      	mov	r0, r6
 8013a9c:	f002 f995 	bl	8015dca <__sprint_r>
 8013aa0:	bb90      	cbnz	r0, 8013b08 <_vfprintf_r+0x1378>
 8013aa2:	a821      	add	r0, sp, #132	; 0x84
 8013aa4:	3c10      	subs	r4, #16
 8013aa6:	4603      	mov	r3, r0
 8013aa8:	e7dd      	b.n	8013a66 <_vfprintf_r+0x12d6>
 8013aaa:	2101      	movs	r1, #1
 8013aac:	2a07      	cmp	r2, #7
 8013aae:	e9cd 201f 	strd	r2, r0, [sp, #124]	; 0x7c
 8013ab2:	f8c4 a000 	str.w	sl, [r4]
 8013ab6:	6061      	str	r1, [r4, #4]
 8013ab8:	ddc0      	ble.n	8013a3c <_vfprintf_r+0x12ac>
 8013aba:	e7b7      	b.n	8013a2c <_vfprintf_r+0x129c>
 8013abc:	3308      	adds	r3, #8
 8013abe:	e7bd      	b.n	8013a3c <_vfprintf_r+0x12ac>
 8013ac0:	460c      	mov	r4, r1
 8013ac2:	f7ff ba45 	b.w	8012f50 <_vfprintf_r+0x7c0>
 8013ac6:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 8013aca:	1a9f      	subs	r7, r3, r2
 8013acc:	2f00      	cmp	r7, #0
 8013ace:	f77f aa4d 	ble.w	8012f6c <_vfprintf_r+0x7dc>
 8013ad2:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8013b70 <_vfprintf_r+0x13e0>
 8013ad6:	f04f 0910 	mov.w	r9, #16
 8013ada:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 8013ade:	2f10      	cmp	r7, #16
 8013ae0:	f103 0301 	add.w	r3, r3, #1
 8013ae4:	f8c4 8000 	str.w	r8, [r4]
 8013ae8:	dc18      	bgt.n	8013b1c <_vfprintf_r+0x138c>
 8013aea:	6067      	str	r7, [r4, #4]
 8013aec:	2b07      	cmp	r3, #7
 8013aee:	4417      	add	r7, r2
 8013af0:	e9cd 371f 	strd	r3, r7, [sp, #124]	; 0x7c
 8013af4:	f77f aa3a 	ble.w	8012f6c <_vfprintf_r+0x7dc>
 8013af8:	aa1e      	add	r2, sp, #120	; 0x78
 8013afa:	4629      	mov	r1, r5
 8013afc:	4630      	mov	r0, r6
 8013afe:	f002 f964 	bl	8015dca <__sprint_r>
 8013b02:	2800      	cmp	r0, #0
 8013b04:	f43f aa32 	beq.w	8012f6c <_vfprintf_r+0x7dc>
 8013b08:	9b02      	ldr	r3, [sp, #8]
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	f43f a871 	beq.w	8012bf2 <_vfprintf_r+0x462>
 8013b10:	4619      	mov	r1, r3
 8013b12:	4630      	mov	r0, r6
 8013b14:	f001 f87a 	bl	8014c0c <_free_r>
 8013b18:	f7ff b86b 	b.w	8012bf2 <_vfprintf_r+0x462>
 8013b1c:	3210      	adds	r2, #16
 8013b1e:	2b07      	cmp	r3, #7
 8013b20:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 8013b24:	f8c4 9004 	str.w	r9, [r4, #4]
 8013b28:	dc02      	bgt.n	8013b30 <_vfprintf_r+0x13a0>
 8013b2a:	3408      	adds	r4, #8
 8013b2c:	3f10      	subs	r7, #16
 8013b2e:	e7d4      	b.n	8013ada <_vfprintf_r+0x134a>
 8013b30:	aa1e      	add	r2, sp, #120	; 0x78
 8013b32:	4629      	mov	r1, r5
 8013b34:	4630      	mov	r0, r6
 8013b36:	f002 f948 	bl	8015dca <__sprint_r>
 8013b3a:	2800      	cmp	r0, #0
 8013b3c:	d1e4      	bne.n	8013b08 <_vfprintf_r+0x1378>
 8013b3e:	ac21      	add	r4, sp, #132	; 0x84
 8013b40:	e7f4      	b.n	8013b2c <_vfprintf_r+0x139c>
 8013b42:	9902      	ldr	r1, [sp, #8]
 8013b44:	4630      	mov	r0, r6
 8013b46:	f001 f861 	bl	8014c0c <_free_r>
 8013b4a:	f7ff ba27 	b.w	8012f9c <_vfprintf_r+0x80c>
 8013b4e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013b50:	b91b      	cbnz	r3, 8013b5a <_vfprintf_r+0x13ca>
 8013b52:	2300      	movs	r3, #0
 8013b54:	931f      	str	r3, [sp, #124]	; 0x7c
 8013b56:	f7ff b84c 	b.w	8012bf2 <_vfprintf_r+0x462>
 8013b5a:	aa1e      	add	r2, sp, #120	; 0x78
 8013b5c:	4629      	mov	r1, r5
 8013b5e:	4630      	mov	r0, r6
 8013b60:	f002 f933 	bl	8015dca <__sprint_r>
 8013b64:	2800      	cmp	r0, #0
 8013b66:	d0f4      	beq.n	8013b52 <_vfprintf_r+0x13c2>
 8013b68:	f7ff b843 	b.w	8012bf2 <_vfprintf_r+0x462>
 8013b6c:	080177d0 	.word	0x080177d0
 8013b70:	080177c0 	.word	0x080177c0
 8013b74:	ea58 0209 	orrs.w	r2, r8, r9
 8013b78:	f8cd b008 	str.w	fp, [sp, #8]
 8013b7c:	f43f ab37 	beq.w	80131ee <_vfprintf_r+0xa5e>
 8013b80:	2b01      	cmp	r3, #1
 8013b82:	f43f abe2 	beq.w	801334a <_vfprintf_r+0xbba>
 8013b86:	2b02      	cmp	r3, #2
 8013b88:	f50d 7a94 	add.w	sl, sp, #296	; 0x128
 8013b8c:	f43f ac2e 	beq.w	80133ec <_vfprintf_r+0xc5c>
 8013b90:	f008 0307 	and.w	r3, r8, #7
 8013b94:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 8013b98:	ea48 7849 	orr.w	r8, r8, r9, lsl #29
 8013b9c:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 8013ba0:	3330      	adds	r3, #48	; 0x30
 8013ba2:	ea58 0109 	orrs.w	r1, r8, r9
 8013ba6:	4652      	mov	r2, sl
 8013ba8:	f80a 3d01 	strb.w	r3, [sl, #-1]!
 8013bac:	d1f0      	bne.n	8013b90 <_vfprintf_r+0x1400>
 8013bae:	9902      	ldr	r1, [sp, #8]
 8013bb0:	07c8      	lsls	r0, r1, #31
 8013bb2:	d506      	bpl.n	8013bc2 <_vfprintf_r+0x1432>
 8013bb4:	2b30      	cmp	r3, #48	; 0x30
 8013bb6:	d004      	beq.n	8013bc2 <_vfprintf_r+0x1432>
 8013bb8:	2330      	movs	r3, #48	; 0x30
 8013bba:	f80a 3c01 	strb.w	r3, [sl, #-1]
 8013bbe:	f1a2 0a02 	sub.w	sl, r2, #2
 8013bc2:	ab4a      	add	r3, sp, #296	; 0x128
 8013bc4:	46b9      	mov	r9, r7
 8013bc6:	eba3 070a 	sub.w	r7, r3, sl
 8013bca:	2300      	movs	r3, #0
 8013bcc:	f8dd b008 	ldr.w	fp, [sp, #8]
 8013bd0:	9302      	str	r3, [sp, #8]
 8013bd2:	f7fe bfd9 	b.w	8012b88 <_vfprintf_r+0x3f8>
 8013bd6:	bf00      	nop

08013bd8 <__sbprintf>:
 8013bd8:	b570      	push	{r4, r5, r6, lr}
 8013bda:	460c      	mov	r4, r1
 8013bdc:	8989      	ldrh	r1, [r1, #12]
 8013bde:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 8013be2:	f021 0102 	bic.w	r1, r1, #2
 8013be6:	f8ad 1014 	strh.w	r1, [sp, #20]
 8013bea:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8013bec:	911b      	str	r1, [sp, #108]	; 0x6c
 8013bee:	89e1      	ldrh	r1, [r4, #14]
 8013bf0:	f8ad 1016 	strh.w	r1, [sp, #22]
 8013bf4:	69e1      	ldr	r1, [r4, #28]
 8013bf6:	9109      	str	r1, [sp, #36]	; 0x24
 8013bf8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013bfa:	910b      	str	r1, [sp, #44]	; 0x2c
 8013bfc:	a91c      	add	r1, sp, #112	; 0x70
 8013bfe:	9102      	str	r1, [sp, #8]
 8013c00:	9106      	str	r1, [sp, #24]
 8013c02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013c06:	4606      	mov	r6, r0
 8013c08:	9104      	str	r1, [sp, #16]
 8013c0a:	9107      	str	r1, [sp, #28]
 8013c0c:	a818      	add	r0, sp, #96	; 0x60
 8013c0e:	2100      	movs	r1, #0
 8013c10:	e9cd 3200 	strd	r3, r2, [sp]
 8013c14:	9108      	str	r1, [sp, #32]
 8013c16:	f001 fa27 	bl	8015068 <__retarget_lock_init_recursive>
 8013c1a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013c1e:	a902      	add	r1, sp, #8
 8013c20:	4630      	mov	r0, r6
 8013c22:	f7fe fdb5 	bl	8012790 <_vfprintf_r>
 8013c26:	1e05      	subs	r5, r0, #0
 8013c28:	db07      	blt.n	8013c3a <__sbprintf+0x62>
 8013c2a:	a902      	add	r1, sp, #8
 8013c2c:	4630      	mov	r0, r6
 8013c2e:	f000 fef1 	bl	8014a14 <_fflush_r>
 8013c32:	2800      	cmp	r0, #0
 8013c34:	bf18      	it	ne
 8013c36:	f04f 35ff 	movne.w	r5, #4294967295
 8013c3a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8013c3e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8013c40:	065b      	lsls	r3, r3, #25
 8013c42:	bf42      	ittt	mi
 8013c44:	89a3      	ldrhmi	r3, [r4, #12]
 8013c46:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8013c4a:	81a3      	strhmi	r3, [r4, #12]
 8013c4c:	f001 fa0d 	bl	801506a <__retarget_lock_close_recursive>
 8013c50:	4628      	mov	r0, r5
 8013c52:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 8013c56:	bd70      	pop	{r4, r5, r6, pc}

08013c58 <__swsetup_r>:
 8013c58:	b538      	push	{r3, r4, r5, lr}
 8013c5a:	4b2a      	ldr	r3, [pc, #168]	; (8013d04 <__swsetup_r+0xac>)
 8013c5c:	4605      	mov	r5, r0
 8013c5e:	6818      	ldr	r0, [r3, #0]
 8013c60:	460c      	mov	r4, r1
 8013c62:	b118      	cbz	r0, 8013c6c <__swsetup_r+0x14>
 8013c64:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8013c66:	b90b      	cbnz	r3, 8013c6c <__swsetup_r+0x14>
 8013c68:	f000 ff40 	bl	8014aec <__sinit>
 8013c6c:	89a3      	ldrh	r3, [r4, #12]
 8013c6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013c72:	0718      	lsls	r0, r3, #28
 8013c74:	d422      	bmi.n	8013cbc <__swsetup_r+0x64>
 8013c76:	06d9      	lsls	r1, r3, #27
 8013c78:	d407      	bmi.n	8013c8a <__swsetup_r+0x32>
 8013c7a:	2309      	movs	r3, #9
 8013c7c:	602b      	str	r3, [r5, #0]
 8013c7e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013c82:	81a3      	strh	r3, [r4, #12]
 8013c84:	f04f 30ff 	mov.w	r0, #4294967295
 8013c88:	e034      	b.n	8013cf4 <__swsetup_r+0x9c>
 8013c8a:	0758      	lsls	r0, r3, #29
 8013c8c:	d512      	bpl.n	8013cb4 <__swsetup_r+0x5c>
 8013c8e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8013c90:	b141      	cbz	r1, 8013ca4 <__swsetup_r+0x4c>
 8013c92:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8013c96:	4299      	cmp	r1, r3
 8013c98:	d002      	beq.n	8013ca0 <__swsetup_r+0x48>
 8013c9a:	4628      	mov	r0, r5
 8013c9c:	f000 ffb6 	bl	8014c0c <_free_r>
 8013ca0:	2300      	movs	r3, #0
 8013ca2:	6323      	str	r3, [r4, #48]	; 0x30
 8013ca4:	89a3      	ldrh	r3, [r4, #12]
 8013ca6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013caa:	81a3      	strh	r3, [r4, #12]
 8013cac:	2300      	movs	r3, #0
 8013cae:	6063      	str	r3, [r4, #4]
 8013cb0:	6923      	ldr	r3, [r4, #16]
 8013cb2:	6023      	str	r3, [r4, #0]
 8013cb4:	89a3      	ldrh	r3, [r4, #12]
 8013cb6:	f043 0308 	orr.w	r3, r3, #8
 8013cba:	81a3      	strh	r3, [r4, #12]
 8013cbc:	6923      	ldr	r3, [r4, #16]
 8013cbe:	b94b      	cbnz	r3, 8013cd4 <__swsetup_r+0x7c>
 8013cc0:	89a3      	ldrh	r3, [r4, #12]
 8013cc2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013cc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013cca:	d003      	beq.n	8013cd4 <__swsetup_r+0x7c>
 8013ccc:	4621      	mov	r1, r4
 8013cce:	4628      	mov	r0, r5
 8013cd0:	f001 f9fa 	bl	80150c8 <__smakebuf_r>
 8013cd4:	89a0      	ldrh	r0, [r4, #12]
 8013cd6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013cda:	f010 0301 	ands.w	r3, r0, #1
 8013cde:	d00a      	beq.n	8013cf6 <__swsetup_r+0x9e>
 8013ce0:	2300      	movs	r3, #0
 8013ce2:	60a3      	str	r3, [r4, #8]
 8013ce4:	6963      	ldr	r3, [r4, #20]
 8013ce6:	425b      	negs	r3, r3
 8013ce8:	61a3      	str	r3, [r4, #24]
 8013cea:	6923      	ldr	r3, [r4, #16]
 8013cec:	b943      	cbnz	r3, 8013d00 <__swsetup_r+0xa8>
 8013cee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013cf2:	d1c4      	bne.n	8013c7e <__swsetup_r+0x26>
 8013cf4:	bd38      	pop	{r3, r4, r5, pc}
 8013cf6:	0781      	lsls	r1, r0, #30
 8013cf8:	bf58      	it	pl
 8013cfa:	6963      	ldrpl	r3, [r4, #20]
 8013cfc:	60a3      	str	r3, [r4, #8]
 8013cfe:	e7f4      	b.n	8013cea <__swsetup_r+0x92>
 8013d00:	2000      	movs	r0, #0
 8013d02:	e7f7      	b.n	8013cf4 <__swsetup_r+0x9c>
 8013d04:	20000408 	.word	0x20000408

08013d08 <register_fini>:
 8013d08:	4b02      	ldr	r3, [pc, #8]	; (8013d14 <register_fini+0xc>)
 8013d0a:	b113      	cbz	r3, 8013d12 <register_fini+0xa>
 8013d0c:	4802      	ldr	r0, [pc, #8]	; (8013d18 <register_fini+0x10>)
 8013d0e:	f000 b805 	b.w	8013d1c <atexit>
 8013d12:	4770      	bx	lr
 8013d14:	00000000 	.word	0x00000000
 8013d18:	08014b3d 	.word	0x08014b3d

08013d1c <atexit>:
 8013d1c:	2300      	movs	r3, #0
 8013d1e:	4601      	mov	r1, r0
 8013d20:	461a      	mov	r2, r3
 8013d22:	4618      	mov	r0, r3
 8013d24:	f002 bdb6 	b.w	8016894 <__register_exitproc>

08013d28 <quorem>:
 8013d28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d2c:	6903      	ldr	r3, [r0, #16]
 8013d2e:	690c      	ldr	r4, [r1, #16]
 8013d30:	42a3      	cmp	r3, r4
 8013d32:	4607      	mov	r7, r0
 8013d34:	f2c0 8081 	blt.w	8013e3a <quorem+0x112>
 8013d38:	3c01      	subs	r4, #1
 8013d3a:	f101 0814 	add.w	r8, r1, #20
 8013d3e:	f100 0514 	add.w	r5, r0, #20
 8013d42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013d46:	9301      	str	r3, [sp, #4]
 8013d48:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013d4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013d50:	3301      	adds	r3, #1
 8013d52:	429a      	cmp	r2, r3
 8013d54:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013d58:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013d5c:	fbb2 f6f3 	udiv	r6, r2, r3
 8013d60:	d331      	bcc.n	8013dc6 <quorem+0x9e>
 8013d62:	f04f 0e00 	mov.w	lr, #0
 8013d66:	4640      	mov	r0, r8
 8013d68:	46ac      	mov	ip, r5
 8013d6a:	46f2      	mov	sl, lr
 8013d6c:	f850 2b04 	ldr.w	r2, [r0], #4
 8013d70:	b293      	uxth	r3, r2
 8013d72:	fb06 e303 	mla	r3, r6, r3, lr
 8013d76:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8013d7a:	b29b      	uxth	r3, r3
 8013d7c:	ebaa 0303 	sub.w	r3, sl, r3
 8013d80:	f8dc a000 	ldr.w	sl, [ip]
 8013d84:	0c12      	lsrs	r2, r2, #16
 8013d86:	fa13 f38a 	uxtah	r3, r3, sl
 8013d8a:	fb06 e202 	mla	r2, r6, r2, lr
 8013d8e:	9300      	str	r3, [sp, #0]
 8013d90:	9b00      	ldr	r3, [sp, #0]
 8013d92:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013d96:	b292      	uxth	r2, r2
 8013d98:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8013d9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013da0:	f8bd 3000 	ldrh.w	r3, [sp]
 8013da4:	4581      	cmp	r9, r0
 8013da6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013daa:	f84c 3b04 	str.w	r3, [ip], #4
 8013dae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013db2:	d2db      	bcs.n	8013d6c <quorem+0x44>
 8013db4:	f855 300b 	ldr.w	r3, [r5, fp]
 8013db8:	b92b      	cbnz	r3, 8013dc6 <quorem+0x9e>
 8013dba:	9b01      	ldr	r3, [sp, #4]
 8013dbc:	3b04      	subs	r3, #4
 8013dbe:	429d      	cmp	r5, r3
 8013dc0:	461a      	mov	r2, r3
 8013dc2:	d32e      	bcc.n	8013e22 <quorem+0xfa>
 8013dc4:	613c      	str	r4, [r7, #16]
 8013dc6:	4638      	mov	r0, r7
 8013dc8:	f001 fc1a 	bl	8015600 <__mcmp>
 8013dcc:	2800      	cmp	r0, #0
 8013dce:	db24      	blt.n	8013e1a <quorem+0xf2>
 8013dd0:	3601      	adds	r6, #1
 8013dd2:	4628      	mov	r0, r5
 8013dd4:	f04f 0c00 	mov.w	ip, #0
 8013dd8:	f858 2b04 	ldr.w	r2, [r8], #4
 8013ddc:	f8d0 e000 	ldr.w	lr, [r0]
 8013de0:	b293      	uxth	r3, r2
 8013de2:	ebac 0303 	sub.w	r3, ip, r3
 8013de6:	0c12      	lsrs	r2, r2, #16
 8013de8:	fa13 f38e 	uxtah	r3, r3, lr
 8013dec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013df0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013df4:	b29b      	uxth	r3, r3
 8013df6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013dfa:	45c1      	cmp	r9, r8
 8013dfc:	f840 3b04 	str.w	r3, [r0], #4
 8013e00:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013e04:	d2e8      	bcs.n	8013dd8 <quorem+0xb0>
 8013e06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013e0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013e0e:	b922      	cbnz	r2, 8013e1a <quorem+0xf2>
 8013e10:	3b04      	subs	r3, #4
 8013e12:	429d      	cmp	r5, r3
 8013e14:	461a      	mov	r2, r3
 8013e16:	d30a      	bcc.n	8013e2e <quorem+0x106>
 8013e18:	613c      	str	r4, [r7, #16]
 8013e1a:	4630      	mov	r0, r6
 8013e1c:	b003      	add	sp, #12
 8013e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e22:	6812      	ldr	r2, [r2, #0]
 8013e24:	3b04      	subs	r3, #4
 8013e26:	2a00      	cmp	r2, #0
 8013e28:	d1cc      	bne.n	8013dc4 <quorem+0x9c>
 8013e2a:	3c01      	subs	r4, #1
 8013e2c:	e7c7      	b.n	8013dbe <quorem+0x96>
 8013e2e:	6812      	ldr	r2, [r2, #0]
 8013e30:	3b04      	subs	r3, #4
 8013e32:	2a00      	cmp	r2, #0
 8013e34:	d1f0      	bne.n	8013e18 <quorem+0xf0>
 8013e36:	3c01      	subs	r4, #1
 8013e38:	e7eb      	b.n	8013e12 <quorem+0xea>
 8013e3a:	2000      	movs	r0, #0
 8013e3c:	e7ee      	b.n	8013e1c <quorem+0xf4>
	...

08013e40 <_dtoa_r>:
 8013e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e44:	ed2d 8b02 	vpush	{d8}
 8013e48:	b091      	sub	sp, #68	; 0x44
 8013e4a:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013e4e:	9106      	str	r1, [sp, #24]
 8013e50:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8013e52:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8013e54:	9208      	str	r2, [sp, #32]
 8013e56:	ec59 8b10 	vmov	r8, r9, d0
 8013e5a:	4606      	mov	r6, r0
 8013e5c:	930c      	str	r3, [sp, #48]	; 0x30
 8013e5e:	b141      	cbz	r1, 8013e72 <_dtoa_r+0x32>
 8013e60:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013e62:	604a      	str	r2, [r1, #4]
 8013e64:	2301      	movs	r3, #1
 8013e66:	4093      	lsls	r3, r2
 8013e68:	608b      	str	r3, [r1, #8]
 8013e6a:	f001 f9ba 	bl	80151e2 <_Bfree>
 8013e6e:	2300      	movs	r3, #0
 8013e70:	6433      	str	r3, [r6, #64]	; 0x40
 8013e72:	f1b9 0300 	subs.w	r3, r9, #0
 8013e76:	bfbb      	ittet	lt
 8013e78:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013e7c:	9303      	strlt	r3, [sp, #12]
 8013e7e:	2300      	movge	r3, #0
 8013e80:	2201      	movlt	r2, #1
 8013e82:	bfac      	ite	ge
 8013e84:	6023      	strge	r3, [r4, #0]
 8013e86:	6022      	strlt	r2, [r4, #0]
 8013e88:	4b99      	ldr	r3, [pc, #612]	; (80140f0 <_dtoa_r+0x2b0>)
 8013e8a:	9c03      	ldr	r4, [sp, #12]
 8013e8c:	43a3      	bics	r3, r4
 8013e8e:	d11c      	bne.n	8013eca <_dtoa_r+0x8a>
 8013e90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013e92:	f242 730f 	movw	r3, #9999	; 0x270f
 8013e96:	6013      	str	r3, [r2, #0]
 8013e98:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8013e9c:	ea53 0308 	orrs.w	r3, r3, r8
 8013ea0:	f000 84f8 	beq.w	8014894 <_dtoa_r+0xa54>
 8013ea4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013ea6:	b90b      	cbnz	r3, 8013eac <_dtoa_r+0x6c>
 8013ea8:	4b92      	ldr	r3, [pc, #584]	; (80140f4 <_dtoa_r+0x2b4>)
 8013eaa:	e01f      	b.n	8013eec <_dtoa_r+0xac>
 8013eac:	4b91      	ldr	r3, [pc, #580]	; (80140f4 <_dtoa_r+0x2b4>)
 8013eae:	9301      	str	r3, [sp, #4]
 8013eb0:	3303      	adds	r3, #3
 8013eb2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8013eb4:	6013      	str	r3, [r2, #0]
 8013eb6:	9801      	ldr	r0, [sp, #4]
 8013eb8:	b011      	add	sp, #68	; 0x44
 8013eba:	ecbd 8b02 	vpop	{d8}
 8013ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ec2:	4b8d      	ldr	r3, [pc, #564]	; (80140f8 <_dtoa_r+0x2b8>)
 8013ec4:	9301      	str	r3, [sp, #4]
 8013ec6:	3308      	adds	r3, #8
 8013ec8:	e7f3      	b.n	8013eb2 <_dtoa_r+0x72>
 8013eca:	ed9d 8b02 	vldr	d8, [sp, #8]
 8013ece:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ed6:	d10b      	bne.n	8013ef0 <_dtoa_r+0xb0>
 8013ed8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013eda:	2301      	movs	r3, #1
 8013edc:	6013      	str	r3, [r2, #0]
 8013ede:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	f000 84d4 	beq.w	801488e <_dtoa_r+0xa4e>
 8013ee6:	4885      	ldr	r0, [pc, #532]	; (80140fc <_dtoa_r+0x2bc>)
 8013ee8:	6018      	str	r0, [r3, #0]
 8013eea:	1e43      	subs	r3, r0, #1
 8013eec:	9301      	str	r3, [sp, #4]
 8013eee:	e7e2      	b.n	8013eb6 <_dtoa_r+0x76>
 8013ef0:	a90f      	add	r1, sp, #60	; 0x3c
 8013ef2:	aa0e      	add	r2, sp, #56	; 0x38
 8013ef4:	4630      	mov	r0, r6
 8013ef6:	eeb0 0b48 	vmov.f64	d0, d8
 8013efa:	f001 fc27 	bl	801574c <__d2b>
 8013efe:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8013f02:	4605      	mov	r5, r0
 8013f04:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013f06:	2900      	cmp	r1, #0
 8013f08:	d046      	beq.n	8013f98 <_dtoa_r+0x158>
 8013f0a:	ee18 4a90 	vmov	r4, s17
 8013f0e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8013f12:	ec53 2b18 	vmov	r2, r3, d8
 8013f16:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8013f1a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013f1e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8013f22:	2400      	movs	r4, #0
 8013f24:	ec43 2b16 	vmov	d6, r2, r3
 8013f28:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8013f2c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80140d8 <_dtoa_r+0x298>
 8013f30:	ee36 7b47 	vsub.f64	d7, d6, d7
 8013f34:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80140e0 <_dtoa_r+0x2a0>
 8013f38:	eea7 6b05 	vfma.f64	d6, d7, d5
 8013f3c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80140e8 <_dtoa_r+0x2a8>
 8013f40:	ee07 1a90 	vmov	s15, r1
 8013f44:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8013f48:	eeb0 7b46 	vmov.f64	d7, d6
 8013f4c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8013f50:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8013f54:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8013f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f5c:	ee16 ba90 	vmov	fp, s13
 8013f60:	940a      	str	r4, [sp, #40]	; 0x28
 8013f62:	d508      	bpl.n	8013f76 <_dtoa_r+0x136>
 8013f64:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8013f68:	eeb4 6b47 	vcmp.f64	d6, d7
 8013f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f70:	bf18      	it	ne
 8013f72:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8013f76:	f1bb 0f16 	cmp.w	fp, #22
 8013f7a:	d82f      	bhi.n	8013fdc <_dtoa_r+0x19c>
 8013f7c:	4b60      	ldr	r3, [pc, #384]	; (8014100 <_dtoa_r+0x2c0>)
 8013f7e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013f82:	ed93 7b00 	vldr	d7, [r3]
 8013f86:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8013f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f8e:	d501      	bpl.n	8013f94 <_dtoa_r+0x154>
 8013f90:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013f94:	2300      	movs	r3, #0
 8013f96:	e022      	b.n	8013fde <_dtoa_r+0x19e>
 8013f98:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013f9a:	4401      	add	r1, r0
 8013f9c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8013fa0:	2b20      	cmp	r3, #32
 8013fa2:	bfc1      	itttt	gt
 8013fa4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013fa8:	fa04 f303 	lslgt.w	r3, r4, r3
 8013fac:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8013fb0:	fa28 f804 	lsrgt.w	r8, r8, r4
 8013fb4:	bfd6      	itet	le
 8013fb6:	f1c3 0320 	rsble	r3, r3, #32
 8013fba:	ea43 0808 	orrgt.w	r8, r3, r8
 8013fbe:	fa08 f803 	lslle.w	r8, r8, r3
 8013fc2:	ee07 8a90 	vmov	s15, r8
 8013fc6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8013fca:	3901      	subs	r1, #1
 8013fcc:	ee17 4a90 	vmov	r4, s15
 8013fd0:	ec53 2b17 	vmov	r2, r3, d7
 8013fd4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8013fd8:	2401      	movs	r4, #1
 8013fda:	e7a3      	b.n	8013f24 <_dtoa_r+0xe4>
 8013fdc:	2301      	movs	r3, #1
 8013fde:	930b      	str	r3, [sp, #44]	; 0x2c
 8013fe0:	1a43      	subs	r3, r0, r1
 8013fe2:	1e5a      	subs	r2, r3, #1
 8013fe4:	bf45      	ittet	mi
 8013fe6:	f1c3 0301 	rsbmi	r3, r3, #1
 8013fea:	9304      	strmi	r3, [sp, #16]
 8013fec:	2300      	movpl	r3, #0
 8013fee:	2300      	movmi	r3, #0
 8013ff0:	9205      	str	r2, [sp, #20]
 8013ff2:	bf54      	ite	pl
 8013ff4:	9304      	strpl	r3, [sp, #16]
 8013ff6:	9305      	strmi	r3, [sp, #20]
 8013ff8:	f1bb 0f00 	cmp.w	fp, #0
 8013ffc:	db18      	blt.n	8014030 <_dtoa_r+0x1f0>
 8013ffe:	9b05      	ldr	r3, [sp, #20]
 8014000:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8014004:	445b      	add	r3, fp
 8014006:	9305      	str	r3, [sp, #20]
 8014008:	2300      	movs	r3, #0
 801400a:	9a06      	ldr	r2, [sp, #24]
 801400c:	2a09      	cmp	r2, #9
 801400e:	d84a      	bhi.n	80140a6 <_dtoa_r+0x266>
 8014010:	2a05      	cmp	r2, #5
 8014012:	bfc4      	itt	gt
 8014014:	3a04      	subgt	r2, #4
 8014016:	9206      	strgt	r2, [sp, #24]
 8014018:	9a06      	ldr	r2, [sp, #24]
 801401a:	f1a2 0202 	sub.w	r2, r2, #2
 801401e:	bfcc      	ite	gt
 8014020:	2400      	movgt	r4, #0
 8014022:	2401      	movle	r4, #1
 8014024:	2a03      	cmp	r2, #3
 8014026:	d849      	bhi.n	80140bc <_dtoa_r+0x27c>
 8014028:	e8df f002 	tbb	[pc, r2]
 801402c:	3b2d2f0b 	.word	0x3b2d2f0b
 8014030:	9b04      	ldr	r3, [sp, #16]
 8014032:	2200      	movs	r2, #0
 8014034:	eba3 030b 	sub.w	r3, r3, fp
 8014038:	9304      	str	r3, [sp, #16]
 801403a:	9209      	str	r2, [sp, #36]	; 0x24
 801403c:	f1cb 0300 	rsb	r3, fp, #0
 8014040:	e7e3      	b.n	801400a <_dtoa_r+0x1ca>
 8014042:	2200      	movs	r2, #0
 8014044:	9207      	str	r2, [sp, #28]
 8014046:	9a08      	ldr	r2, [sp, #32]
 8014048:	2a00      	cmp	r2, #0
 801404a:	dc3a      	bgt.n	80140c2 <_dtoa_r+0x282>
 801404c:	f04f 0a01 	mov.w	sl, #1
 8014050:	46d1      	mov	r9, sl
 8014052:	4652      	mov	r2, sl
 8014054:	f8cd a020 	str.w	sl, [sp, #32]
 8014058:	2100      	movs	r1, #0
 801405a:	6471      	str	r1, [r6, #68]	; 0x44
 801405c:	2004      	movs	r0, #4
 801405e:	f100 0714 	add.w	r7, r0, #20
 8014062:	4297      	cmp	r7, r2
 8014064:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8014066:	d931      	bls.n	80140cc <_dtoa_r+0x28c>
 8014068:	4630      	mov	r0, r6
 801406a:	930d      	str	r3, [sp, #52]	; 0x34
 801406c:	f001 f894 	bl	8015198 <_Balloc>
 8014070:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014072:	9001      	str	r0, [sp, #4]
 8014074:	4602      	mov	r2, r0
 8014076:	2800      	cmp	r0, #0
 8014078:	d148      	bne.n	801410c <_dtoa_r+0x2cc>
 801407a:	4b22      	ldr	r3, [pc, #136]	; (8014104 <_dtoa_r+0x2c4>)
 801407c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8014080:	4821      	ldr	r0, [pc, #132]	; (8014108 <_dtoa_r+0x2c8>)
 8014082:	f002 fc49 	bl	8016918 <__assert_func>
 8014086:	2201      	movs	r2, #1
 8014088:	e7dc      	b.n	8014044 <_dtoa_r+0x204>
 801408a:	2200      	movs	r2, #0
 801408c:	9207      	str	r2, [sp, #28]
 801408e:	9a08      	ldr	r2, [sp, #32]
 8014090:	eb0b 0a02 	add.w	sl, fp, r2
 8014094:	f10a 0901 	add.w	r9, sl, #1
 8014098:	464a      	mov	r2, r9
 801409a:	2a01      	cmp	r2, #1
 801409c:	bfb8      	it	lt
 801409e:	2201      	movlt	r2, #1
 80140a0:	e7da      	b.n	8014058 <_dtoa_r+0x218>
 80140a2:	2201      	movs	r2, #1
 80140a4:	e7f2      	b.n	801408c <_dtoa_r+0x24c>
 80140a6:	2401      	movs	r4, #1
 80140a8:	2200      	movs	r2, #0
 80140aa:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80140ae:	f04f 3aff 	mov.w	sl, #4294967295
 80140b2:	2100      	movs	r1, #0
 80140b4:	46d1      	mov	r9, sl
 80140b6:	2212      	movs	r2, #18
 80140b8:	9108      	str	r1, [sp, #32]
 80140ba:	e7cd      	b.n	8014058 <_dtoa_r+0x218>
 80140bc:	2201      	movs	r2, #1
 80140be:	9207      	str	r2, [sp, #28]
 80140c0:	e7f5      	b.n	80140ae <_dtoa_r+0x26e>
 80140c2:	f8dd a020 	ldr.w	sl, [sp, #32]
 80140c6:	46d1      	mov	r9, sl
 80140c8:	4652      	mov	r2, sl
 80140ca:	e7c5      	b.n	8014058 <_dtoa_r+0x218>
 80140cc:	3101      	adds	r1, #1
 80140ce:	6471      	str	r1, [r6, #68]	; 0x44
 80140d0:	0040      	lsls	r0, r0, #1
 80140d2:	e7c4      	b.n	801405e <_dtoa_r+0x21e>
 80140d4:	f3af 8000 	nop.w
 80140d8:	636f4361 	.word	0x636f4361
 80140dc:	3fd287a7 	.word	0x3fd287a7
 80140e0:	8b60c8b3 	.word	0x8b60c8b3
 80140e4:	3fc68a28 	.word	0x3fc68a28
 80140e8:	509f79fb 	.word	0x509f79fb
 80140ec:	3fd34413 	.word	0x3fd34413
 80140f0:	7ff00000 	.word	0x7ff00000
 80140f4:	080177e0 	.word	0x080177e0
 80140f8:	080177e4 	.word	0x080177e4
 80140fc:	0801779f 	.word	0x0801779f
 8014100:	080178e0 	.word	0x080178e0
 8014104:	080177ed 	.word	0x080177ed
 8014108:	080177fe 	.word	0x080177fe
 801410c:	9a01      	ldr	r2, [sp, #4]
 801410e:	6432      	str	r2, [r6, #64]	; 0x40
 8014110:	f1b9 0f0e 	cmp.w	r9, #14
 8014114:	d86c      	bhi.n	80141f0 <_dtoa_r+0x3b0>
 8014116:	2c00      	cmp	r4, #0
 8014118:	d06a      	beq.n	80141f0 <_dtoa_r+0x3b0>
 801411a:	f1bb 0f00 	cmp.w	fp, #0
 801411e:	f340 80a0 	ble.w	8014262 <_dtoa_r+0x422>
 8014122:	49c1      	ldr	r1, [pc, #772]	; (8014428 <_dtoa_r+0x5e8>)
 8014124:	f00b 020f 	and.w	r2, fp, #15
 8014128:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801412c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8014130:	ed92 7b00 	vldr	d7, [r2]
 8014134:	ea4f 112b 	mov.w	r1, fp, asr #4
 8014138:	f000 8087 	beq.w	801424a <_dtoa_r+0x40a>
 801413c:	4abb      	ldr	r2, [pc, #748]	; (801442c <_dtoa_r+0x5ec>)
 801413e:	ed92 6b08 	vldr	d6, [r2, #32]
 8014142:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8014146:	ed8d 6b02 	vstr	d6, [sp, #8]
 801414a:	f001 010f 	and.w	r1, r1, #15
 801414e:	2203      	movs	r2, #3
 8014150:	48b6      	ldr	r0, [pc, #728]	; (801442c <_dtoa_r+0x5ec>)
 8014152:	2900      	cmp	r1, #0
 8014154:	d17b      	bne.n	801424e <_dtoa_r+0x40e>
 8014156:	ed9d 6b02 	vldr	d6, [sp, #8]
 801415a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801415e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014162:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014164:	2900      	cmp	r1, #0
 8014166:	f000 80a2 	beq.w	80142ae <_dtoa_r+0x46e>
 801416a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801416e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014172:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8014176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801417a:	f140 8098 	bpl.w	80142ae <_dtoa_r+0x46e>
 801417e:	f1b9 0f00 	cmp.w	r9, #0
 8014182:	f000 8094 	beq.w	80142ae <_dtoa_r+0x46e>
 8014186:	f1ba 0f00 	cmp.w	sl, #0
 801418a:	dd2f      	ble.n	80141ec <_dtoa_r+0x3ac>
 801418c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8014190:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014194:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014198:	f10b 37ff 	add.w	r7, fp, #4294967295
 801419c:	3201      	adds	r2, #1
 801419e:	4650      	mov	r0, sl
 80141a0:	ed9d 6b02 	vldr	d6, [sp, #8]
 80141a4:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80141a8:	ee07 2a90 	vmov	s15, r2
 80141ac:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80141b0:	eea7 5b06 	vfma.f64	d5, d7, d6
 80141b4:	ee15 4a90 	vmov	r4, s11
 80141b8:	ec52 1b15 	vmov	r1, r2, d5
 80141bc:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80141c0:	2800      	cmp	r0, #0
 80141c2:	d177      	bne.n	80142b4 <_dtoa_r+0x474>
 80141c4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80141c8:	ee36 6b47 	vsub.f64	d6, d6, d7
 80141cc:	ec42 1b17 	vmov	d7, r1, r2
 80141d0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80141d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141d8:	f300 8262 	bgt.w	80146a0 <_dtoa_r+0x860>
 80141dc:	eeb1 7b47 	vneg.f64	d7, d7
 80141e0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80141e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141e8:	f100 8257 	bmi.w	801469a <_dtoa_r+0x85a>
 80141ec:	ed8d 8b02 	vstr	d8, [sp, #8]
 80141f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80141f2:	2a00      	cmp	r2, #0
 80141f4:	f2c0 811c 	blt.w	8014430 <_dtoa_r+0x5f0>
 80141f8:	f1bb 0f0e 	cmp.w	fp, #14
 80141fc:	f300 8118 	bgt.w	8014430 <_dtoa_r+0x5f0>
 8014200:	4b89      	ldr	r3, [pc, #548]	; (8014428 <_dtoa_r+0x5e8>)
 8014202:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8014206:	ed93 6b00 	vldr	d6, [r3]
 801420a:	9b08      	ldr	r3, [sp, #32]
 801420c:	2b00      	cmp	r3, #0
 801420e:	f280 80b7 	bge.w	8014380 <_dtoa_r+0x540>
 8014212:	f1b9 0f00 	cmp.w	r9, #0
 8014216:	f300 80b3 	bgt.w	8014380 <_dtoa_r+0x540>
 801421a:	f040 823e 	bne.w	801469a <_dtoa_r+0x85a>
 801421e:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8014222:	ee26 6b07 	vmul.f64	d6, d6, d7
 8014226:	ed9d 7b02 	vldr	d7, [sp, #8]
 801422a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801422e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014232:	464c      	mov	r4, r9
 8014234:	464f      	mov	r7, r9
 8014236:	f280 8214 	bge.w	8014662 <_dtoa_r+0x822>
 801423a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801423e:	2331      	movs	r3, #49	; 0x31
 8014240:	f808 3b01 	strb.w	r3, [r8], #1
 8014244:	f10b 0b01 	add.w	fp, fp, #1
 8014248:	e210      	b.n	801466c <_dtoa_r+0x82c>
 801424a:	2202      	movs	r2, #2
 801424c:	e780      	b.n	8014150 <_dtoa_r+0x310>
 801424e:	07cc      	lsls	r4, r1, #31
 8014250:	d504      	bpl.n	801425c <_dtoa_r+0x41c>
 8014252:	ed90 6b00 	vldr	d6, [r0]
 8014256:	3201      	adds	r2, #1
 8014258:	ee27 7b06 	vmul.f64	d7, d7, d6
 801425c:	1049      	asrs	r1, r1, #1
 801425e:	3008      	adds	r0, #8
 8014260:	e777      	b.n	8014152 <_dtoa_r+0x312>
 8014262:	d022      	beq.n	80142aa <_dtoa_r+0x46a>
 8014264:	f1cb 0100 	rsb	r1, fp, #0
 8014268:	4a6f      	ldr	r2, [pc, #444]	; (8014428 <_dtoa_r+0x5e8>)
 801426a:	f001 000f 	and.w	r0, r1, #15
 801426e:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8014272:	ed92 7b00 	vldr	d7, [r2]
 8014276:	ee28 7b07 	vmul.f64	d7, d8, d7
 801427a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801427e:	486b      	ldr	r0, [pc, #428]	; (801442c <_dtoa_r+0x5ec>)
 8014280:	1109      	asrs	r1, r1, #4
 8014282:	2400      	movs	r4, #0
 8014284:	2202      	movs	r2, #2
 8014286:	b929      	cbnz	r1, 8014294 <_dtoa_r+0x454>
 8014288:	2c00      	cmp	r4, #0
 801428a:	f43f af6a 	beq.w	8014162 <_dtoa_r+0x322>
 801428e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014292:	e766      	b.n	8014162 <_dtoa_r+0x322>
 8014294:	07cf      	lsls	r7, r1, #31
 8014296:	d505      	bpl.n	80142a4 <_dtoa_r+0x464>
 8014298:	ed90 6b00 	vldr	d6, [r0]
 801429c:	3201      	adds	r2, #1
 801429e:	2401      	movs	r4, #1
 80142a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80142a4:	1049      	asrs	r1, r1, #1
 80142a6:	3008      	adds	r0, #8
 80142a8:	e7ed      	b.n	8014286 <_dtoa_r+0x446>
 80142aa:	2202      	movs	r2, #2
 80142ac:	e759      	b.n	8014162 <_dtoa_r+0x322>
 80142ae:	465f      	mov	r7, fp
 80142b0:	4648      	mov	r0, r9
 80142b2:	e775      	b.n	80141a0 <_dtoa_r+0x360>
 80142b4:	ec42 1b17 	vmov	d7, r1, r2
 80142b8:	4a5b      	ldr	r2, [pc, #364]	; (8014428 <_dtoa_r+0x5e8>)
 80142ba:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80142be:	ed12 4b02 	vldr	d4, [r2, #-8]
 80142c2:	9a01      	ldr	r2, [sp, #4]
 80142c4:	1814      	adds	r4, r2, r0
 80142c6:	9a07      	ldr	r2, [sp, #28]
 80142c8:	b352      	cbz	r2, 8014320 <_dtoa_r+0x4e0>
 80142ca:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80142ce:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80142d2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80142d6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80142da:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80142de:	ee35 7b47 	vsub.f64	d7, d5, d7
 80142e2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80142e6:	ee14 2a90 	vmov	r2, s9
 80142ea:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80142ee:	3230      	adds	r2, #48	; 0x30
 80142f0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80142f4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80142f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142fc:	f808 2b01 	strb.w	r2, [r8], #1
 8014300:	d439      	bmi.n	8014376 <_dtoa_r+0x536>
 8014302:	ee32 5b46 	vsub.f64	d5, d2, d6
 8014306:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801430a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801430e:	d472      	bmi.n	80143f6 <_dtoa_r+0x5b6>
 8014310:	45a0      	cmp	r8, r4
 8014312:	f43f af6b 	beq.w	80141ec <_dtoa_r+0x3ac>
 8014316:	ee27 7b03 	vmul.f64	d7, d7, d3
 801431a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801431e:	e7e0      	b.n	80142e2 <_dtoa_r+0x4a2>
 8014320:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014324:	ee27 7b04 	vmul.f64	d7, d7, d4
 8014328:	4621      	mov	r1, r4
 801432a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801432e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8014332:	ee14 2a90 	vmov	r2, s9
 8014336:	3230      	adds	r2, #48	; 0x30
 8014338:	f808 2b01 	strb.w	r2, [r8], #1
 801433c:	45a0      	cmp	r8, r4
 801433e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8014342:	ee36 6b45 	vsub.f64	d6, d6, d5
 8014346:	d118      	bne.n	801437a <_dtoa_r+0x53a>
 8014348:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801434c:	ee37 4b05 	vadd.f64	d4, d7, d5
 8014350:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8014354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014358:	dc4d      	bgt.n	80143f6 <_dtoa_r+0x5b6>
 801435a:	ee35 7b47 	vsub.f64	d7, d5, d7
 801435e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014366:	f57f af41 	bpl.w	80141ec <_dtoa_r+0x3ac>
 801436a:	4688      	mov	r8, r1
 801436c:	3901      	subs	r1, #1
 801436e:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8014372:	2b30      	cmp	r3, #48	; 0x30
 8014374:	d0f9      	beq.n	801436a <_dtoa_r+0x52a>
 8014376:	46bb      	mov	fp, r7
 8014378:	e02a      	b.n	80143d0 <_dtoa_r+0x590>
 801437a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801437e:	e7d6      	b.n	801432e <_dtoa_r+0x4ee>
 8014380:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014384:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8014388:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801438c:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8014390:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8014394:	ee15 3a10 	vmov	r3, s10
 8014398:	3330      	adds	r3, #48	; 0x30
 801439a:	f808 3b01 	strb.w	r3, [r8], #1
 801439e:	9b01      	ldr	r3, [sp, #4]
 80143a0:	eba8 0303 	sub.w	r3, r8, r3
 80143a4:	4599      	cmp	r9, r3
 80143a6:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80143aa:	eea3 7b46 	vfms.f64	d7, d3, d6
 80143ae:	d133      	bne.n	8014418 <_dtoa_r+0x5d8>
 80143b0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80143b4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80143b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143bc:	dc1a      	bgt.n	80143f4 <_dtoa_r+0x5b4>
 80143be:	eeb4 7b46 	vcmp.f64	d7, d6
 80143c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143c6:	d103      	bne.n	80143d0 <_dtoa_r+0x590>
 80143c8:	ee15 3a10 	vmov	r3, s10
 80143cc:	07d9      	lsls	r1, r3, #31
 80143ce:	d411      	bmi.n	80143f4 <_dtoa_r+0x5b4>
 80143d0:	4629      	mov	r1, r5
 80143d2:	4630      	mov	r0, r6
 80143d4:	f000 ff05 	bl	80151e2 <_Bfree>
 80143d8:	2300      	movs	r3, #0
 80143da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80143dc:	f888 3000 	strb.w	r3, [r8]
 80143e0:	f10b 0301 	add.w	r3, fp, #1
 80143e4:	6013      	str	r3, [r2, #0]
 80143e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	f43f ad64 	beq.w	8013eb6 <_dtoa_r+0x76>
 80143ee:	f8c3 8000 	str.w	r8, [r3]
 80143f2:	e560      	b.n	8013eb6 <_dtoa_r+0x76>
 80143f4:	465f      	mov	r7, fp
 80143f6:	4643      	mov	r3, r8
 80143f8:	4698      	mov	r8, r3
 80143fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80143fe:	2a39      	cmp	r2, #57	; 0x39
 8014400:	d106      	bne.n	8014410 <_dtoa_r+0x5d0>
 8014402:	9a01      	ldr	r2, [sp, #4]
 8014404:	429a      	cmp	r2, r3
 8014406:	d1f7      	bne.n	80143f8 <_dtoa_r+0x5b8>
 8014408:	9901      	ldr	r1, [sp, #4]
 801440a:	2230      	movs	r2, #48	; 0x30
 801440c:	3701      	adds	r7, #1
 801440e:	700a      	strb	r2, [r1, #0]
 8014410:	781a      	ldrb	r2, [r3, #0]
 8014412:	3201      	adds	r2, #1
 8014414:	701a      	strb	r2, [r3, #0]
 8014416:	e7ae      	b.n	8014376 <_dtoa_r+0x536>
 8014418:	ee27 7b04 	vmul.f64	d7, d7, d4
 801441c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014424:	d1b2      	bne.n	801438c <_dtoa_r+0x54c>
 8014426:	e7d3      	b.n	80143d0 <_dtoa_r+0x590>
 8014428:	080178e0 	.word	0x080178e0
 801442c:	080178b8 	.word	0x080178b8
 8014430:	9907      	ldr	r1, [sp, #28]
 8014432:	2900      	cmp	r1, #0
 8014434:	f000 80d0 	beq.w	80145d8 <_dtoa_r+0x798>
 8014438:	9906      	ldr	r1, [sp, #24]
 801443a:	2901      	cmp	r1, #1
 801443c:	f300 80b4 	bgt.w	80145a8 <_dtoa_r+0x768>
 8014440:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014442:	2900      	cmp	r1, #0
 8014444:	f000 80ac 	beq.w	80145a0 <_dtoa_r+0x760>
 8014448:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801444c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8014450:	461c      	mov	r4, r3
 8014452:	930a      	str	r3, [sp, #40]	; 0x28
 8014454:	9b04      	ldr	r3, [sp, #16]
 8014456:	4413      	add	r3, r2
 8014458:	9304      	str	r3, [sp, #16]
 801445a:	9b05      	ldr	r3, [sp, #20]
 801445c:	2101      	movs	r1, #1
 801445e:	4413      	add	r3, r2
 8014460:	4630      	mov	r0, r6
 8014462:	9305      	str	r3, [sp, #20]
 8014464:	f000 ff5c 	bl	8015320 <__i2b>
 8014468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801446a:	4607      	mov	r7, r0
 801446c:	f1b8 0f00 	cmp.w	r8, #0
 8014470:	dd0d      	ble.n	801448e <_dtoa_r+0x64e>
 8014472:	9a05      	ldr	r2, [sp, #20]
 8014474:	2a00      	cmp	r2, #0
 8014476:	dd0a      	ble.n	801448e <_dtoa_r+0x64e>
 8014478:	4542      	cmp	r2, r8
 801447a:	9904      	ldr	r1, [sp, #16]
 801447c:	bfa8      	it	ge
 801447e:	4642      	movge	r2, r8
 8014480:	1a89      	subs	r1, r1, r2
 8014482:	9104      	str	r1, [sp, #16]
 8014484:	9905      	ldr	r1, [sp, #20]
 8014486:	eba8 0802 	sub.w	r8, r8, r2
 801448a:	1a8a      	subs	r2, r1, r2
 801448c:	9205      	str	r2, [sp, #20]
 801448e:	b303      	cbz	r3, 80144d2 <_dtoa_r+0x692>
 8014490:	9a07      	ldr	r2, [sp, #28]
 8014492:	2a00      	cmp	r2, #0
 8014494:	f000 80a5 	beq.w	80145e2 <_dtoa_r+0x7a2>
 8014498:	2c00      	cmp	r4, #0
 801449a:	dd13      	ble.n	80144c4 <_dtoa_r+0x684>
 801449c:	4639      	mov	r1, r7
 801449e:	4622      	mov	r2, r4
 80144a0:	4630      	mov	r0, r6
 80144a2:	930d      	str	r3, [sp, #52]	; 0x34
 80144a4:	f000 fffc 	bl	80154a0 <__pow5mult>
 80144a8:	462a      	mov	r2, r5
 80144aa:	4601      	mov	r1, r0
 80144ac:	4607      	mov	r7, r0
 80144ae:	4630      	mov	r0, r6
 80144b0:	f000 ff4c 	bl	801534c <__multiply>
 80144b4:	4629      	mov	r1, r5
 80144b6:	900a      	str	r0, [sp, #40]	; 0x28
 80144b8:	4630      	mov	r0, r6
 80144ba:	f000 fe92 	bl	80151e2 <_Bfree>
 80144be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80144c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80144c2:	4615      	mov	r5, r2
 80144c4:	1b1a      	subs	r2, r3, r4
 80144c6:	d004      	beq.n	80144d2 <_dtoa_r+0x692>
 80144c8:	4629      	mov	r1, r5
 80144ca:	4630      	mov	r0, r6
 80144cc:	f000 ffe8 	bl	80154a0 <__pow5mult>
 80144d0:	4605      	mov	r5, r0
 80144d2:	2101      	movs	r1, #1
 80144d4:	4630      	mov	r0, r6
 80144d6:	f000 ff23 	bl	8015320 <__i2b>
 80144da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144dc:	2b00      	cmp	r3, #0
 80144de:	4604      	mov	r4, r0
 80144e0:	f340 8081 	ble.w	80145e6 <_dtoa_r+0x7a6>
 80144e4:	461a      	mov	r2, r3
 80144e6:	4601      	mov	r1, r0
 80144e8:	4630      	mov	r0, r6
 80144ea:	f000 ffd9 	bl	80154a0 <__pow5mult>
 80144ee:	9b06      	ldr	r3, [sp, #24]
 80144f0:	2b01      	cmp	r3, #1
 80144f2:	4604      	mov	r4, r0
 80144f4:	dd7a      	ble.n	80145ec <_dtoa_r+0x7ac>
 80144f6:	2300      	movs	r3, #0
 80144f8:	930a      	str	r3, [sp, #40]	; 0x28
 80144fa:	6922      	ldr	r2, [r4, #16]
 80144fc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8014500:	6910      	ldr	r0, [r2, #16]
 8014502:	f000 febd 	bl	8015280 <__hi0bits>
 8014506:	f1c0 0020 	rsb	r0, r0, #32
 801450a:	9b05      	ldr	r3, [sp, #20]
 801450c:	4418      	add	r0, r3
 801450e:	f010 001f 	ands.w	r0, r0, #31
 8014512:	f000 808c 	beq.w	801462e <_dtoa_r+0x7ee>
 8014516:	f1c0 0220 	rsb	r2, r0, #32
 801451a:	2a04      	cmp	r2, #4
 801451c:	f340 8085 	ble.w	801462a <_dtoa_r+0x7ea>
 8014520:	f1c0 001c 	rsb	r0, r0, #28
 8014524:	9b04      	ldr	r3, [sp, #16]
 8014526:	4403      	add	r3, r0
 8014528:	9304      	str	r3, [sp, #16]
 801452a:	9b05      	ldr	r3, [sp, #20]
 801452c:	4403      	add	r3, r0
 801452e:	4480      	add	r8, r0
 8014530:	9305      	str	r3, [sp, #20]
 8014532:	9b04      	ldr	r3, [sp, #16]
 8014534:	2b00      	cmp	r3, #0
 8014536:	dd05      	ble.n	8014544 <_dtoa_r+0x704>
 8014538:	4629      	mov	r1, r5
 801453a:	461a      	mov	r2, r3
 801453c:	4630      	mov	r0, r6
 801453e:	f000 ffef 	bl	8015520 <__lshift>
 8014542:	4605      	mov	r5, r0
 8014544:	9b05      	ldr	r3, [sp, #20]
 8014546:	2b00      	cmp	r3, #0
 8014548:	dd05      	ble.n	8014556 <_dtoa_r+0x716>
 801454a:	4621      	mov	r1, r4
 801454c:	461a      	mov	r2, r3
 801454e:	4630      	mov	r0, r6
 8014550:	f000 ffe6 	bl	8015520 <__lshift>
 8014554:	4604      	mov	r4, r0
 8014556:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014558:	2b00      	cmp	r3, #0
 801455a:	d06a      	beq.n	8014632 <_dtoa_r+0x7f2>
 801455c:	4621      	mov	r1, r4
 801455e:	4628      	mov	r0, r5
 8014560:	f001 f84e 	bl	8015600 <__mcmp>
 8014564:	2800      	cmp	r0, #0
 8014566:	da64      	bge.n	8014632 <_dtoa_r+0x7f2>
 8014568:	2300      	movs	r3, #0
 801456a:	4629      	mov	r1, r5
 801456c:	220a      	movs	r2, #10
 801456e:	4630      	mov	r0, r6
 8014570:	f000 fe40 	bl	80151f4 <__multadd>
 8014574:	9b07      	ldr	r3, [sp, #28]
 8014576:	f10b 3bff 	add.w	fp, fp, #4294967295
 801457a:	4605      	mov	r5, r0
 801457c:	2b00      	cmp	r3, #0
 801457e:	f000 8190 	beq.w	80148a2 <_dtoa_r+0xa62>
 8014582:	4639      	mov	r1, r7
 8014584:	2300      	movs	r3, #0
 8014586:	220a      	movs	r2, #10
 8014588:	4630      	mov	r0, r6
 801458a:	f000 fe33 	bl	80151f4 <__multadd>
 801458e:	f1ba 0f00 	cmp.w	sl, #0
 8014592:	4607      	mov	r7, r0
 8014594:	f300 808d 	bgt.w	80146b2 <_dtoa_r+0x872>
 8014598:	9b06      	ldr	r3, [sp, #24]
 801459a:	2b02      	cmp	r3, #2
 801459c:	dc50      	bgt.n	8014640 <_dtoa_r+0x800>
 801459e:	e088      	b.n	80146b2 <_dtoa_r+0x872>
 80145a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80145a2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80145a6:	e751      	b.n	801444c <_dtoa_r+0x60c>
 80145a8:	f109 34ff 	add.w	r4, r9, #4294967295
 80145ac:	42a3      	cmp	r3, r4
 80145ae:	bfbf      	itttt	lt
 80145b0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 80145b2:	1ae3      	sublt	r3, r4, r3
 80145b4:	18d2      	addlt	r2, r2, r3
 80145b6:	9209      	strlt	r2, [sp, #36]	; 0x24
 80145b8:	bfb6      	itet	lt
 80145ba:	4623      	movlt	r3, r4
 80145bc:	1b1c      	subge	r4, r3, r4
 80145be:	2400      	movlt	r4, #0
 80145c0:	f1b9 0f00 	cmp.w	r9, #0
 80145c4:	bfb5      	itete	lt
 80145c6:	9a04      	ldrlt	r2, [sp, #16]
 80145c8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80145cc:	eba2 0809 	sublt.w	r8, r2, r9
 80145d0:	464a      	movge	r2, r9
 80145d2:	bfb8      	it	lt
 80145d4:	2200      	movlt	r2, #0
 80145d6:	e73c      	b.n	8014452 <_dtoa_r+0x612>
 80145d8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80145dc:	9f07      	ldr	r7, [sp, #28]
 80145de:	461c      	mov	r4, r3
 80145e0:	e744      	b.n	801446c <_dtoa_r+0x62c>
 80145e2:	461a      	mov	r2, r3
 80145e4:	e770      	b.n	80144c8 <_dtoa_r+0x688>
 80145e6:	9b06      	ldr	r3, [sp, #24]
 80145e8:	2b01      	cmp	r3, #1
 80145ea:	dc18      	bgt.n	801461e <_dtoa_r+0x7de>
 80145ec:	9b02      	ldr	r3, [sp, #8]
 80145ee:	b9b3      	cbnz	r3, 801461e <_dtoa_r+0x7de>
 80145f0:	9b03      	ldr	r3, [sp, #12]
 80145f2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80145f6:	b9a2      	cbnz	r2, 8014622 <_dtoa_r+0x7e2>
 80145f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80145fc:	0d12      	lsrs	r2, r2, #20
 80145fe:	0512      	lsls	r2, r2, #20
 8014600:	b18a      	cbz	r2, 8014626 <_dtoa_r+0x7e6>
 8014602:	9b04      	ldr	r3, [sp, #16]
 8014604:	3301      	adds	r3, #1
 8014606:	9304      	str	r3, [sp, #16]
 8014608:	9b05      	ldr	r3, [sp, #20]
 801460a:	3301      	adds	r3, #1
 801460c:	9305      	str	r3, [sp, #20]
 801460e:	2301      	movs	r3, #1
 8014610:	930a      	str	r3, [sp, #40]	; 0x28
 8014612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014614:	2b00      	cmp	r3, #0
 8014616:	f47f af70 	bne.w	80144fa <_dtoa_r+0x6ba>
 801461a:	2001      	movs	r0, #1
 801461c:	e775      	b.n	801450a <_dtoa_r+0x6ca>
 801461e:	2300      	movs	r3, #0
 8014620:	e7f6      	b.n	8014610 <_dtoa_r+0x7d0>
 8014622:	9b02      	ldr	r3, [sp, #8]
 8014624:	e7f4      	b.n	8014610 <_dtoa_r+0x7d0>
 8014626:	920a      	str	r2, [sp, #40]	; 0x28
 8014628:	e7f3      	b.n	8014612 <_dtoa_r+0x7d2>
 801462a:	d082      	beq.n	8014532 <_dtoa_r+0x6f2>
 801462c:	4610      	mov	r0, r2
 801462e:	301c      	adds	r0, #28
 8014630:	e778      	b.n	8014524 <_dtoa_r+0x6e4>
 8014632:	f1b9 0f00 	cmp.w	r9, #0
 8014636:	dc37      	bgt.n	80146a8 <_dtoa_r+0x868>
 8014638:	9b06      	ldr	r3, [sp, #24]
 801463a:	2b02      	cmp	r3, #2
 801463c:	dd34      	ble.n	80146a8 <_dtoa_r+0x868>
 801463e:	46ca      	mov	sl, r9
 8014640:	f1ba 0f00 	cmp.w	sl, #0
 8014644:	d10d      	bne.n	8014662 <_dtoa_r+0x822>
 8014646:	4621      	mov	r1, r4
 8014648:	4653      	mov	r3, sl
 801464a:	2205      	movs	r2, #5
 801464c:	4630      	mov	r0, r6
 801464e:	f000 fdd1 	bl	80151f4 <__multadd>
 8014652:	4601      	mov	r1, r0
 8014654:	4604      	mov	r4, r0
 8014656:	4628      	mov	r0, r5
 8014658:	f000 ffd2 	bl	8015600 <__mcmp>
 801465c:	2800      	cmp	r0, #0
 801465e:	f73f adec 	bgt.w	801423a <_dtoa_r+0x3fa>
 8014662:	9b08      	ldr	r3, [sp, #32]
 8014664:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014668:	ea6f 0b03 	mvn.w	fp, r3
 801466c:	f04f 0900 	mov.w	r9, #0
 8014670:	4621      	mov	r1, r4
 8014672:	4630      	mov	r0, r6
 8014674:	f000 fdb5 	bl	80151e2 <_Bfree>
 8014678:	2f00      	cmp	r7, #0
 801467a:	f43f aea9 	beq.w	80143d0 <_dtoa_r+0x590>
 801467e:	f1b9 0f00 	cmp.w	r9, #0
 8014682:	d005      	beq.n	8014690 <_dtoa_r+0x850>
 8014684:	45b9      	cmp	r9, r7
 8014686:	d003      	beq.n	8014690 <_dtoa_r+0x850>
 8014688:	4649      	mov	r1, r9
 801468a:	4630      	mov	r0, r6
 801468c:	f000 fda9 	bl	80151e2 <_Bfree>
 8014690:	4639      	mov	r1, r7
 8014692:	4630      	mov	r0, r6
 8014694:	f000 fda5 	bl	80151e2 <_Bfree>
 8014698:	e69a      	b.n	80143d0 <_dtoa_r+0x590>
 801469a:	2400      	movs	r4, #0
 801469c:	4627      	mov	r7, r4
 801469e:	e7e0      	b.n	8014662 <_dtoa_r+0x822>
 80146a0:	46bb      	mov	fp, r7
 80146a2:	4604      	mov	r4, r0
 80146a4:	4607      	mov	r7, r0
 80146a6:	e5c8      	b.n	801423a <_dtoa_r+0x3fa>
 80146a8:	9b07      	ldr	r3, [sp, #28]
 80146aa:	46ca      	mov	sl, r9
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	f000 80ff 	beq.w	80148b0 <_dtoa_r+0xa70>
 80146b2:	f1b8 0f00 	cmp.w	r8, #0
 80146b6:	dd05      	ble.n	80146c4 <_dtoa_r+0x884>
 80146b8:	4639      	mov	r1, r7
 80146ba:	4642      	mov	r2, r8
 80146bc:	4630      	mov	r0, r6
 80146be:	f000 ff2f 	bl	8015520 <__lshift>
 80146c2:	4607      	mov	r7, r0
 80146c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	d05c      	beq.n	8014784 <_dtoa_r+0x944>
 80146ca:	6879      	ldr	r1, [r7, #4]
 80146cc:	4630      	mov	r0, r6
 80146ce:	f000 fd63 	bl	8015198 <_Balloc>
 80146d2:	4680      	mov	r8, r0
 80146d4:	b920      	cbnz	r0, 80146e0 <_dtoa_r+0x8a0>
 80146d6:	4b82      	ldr	r3, [pc, #520]	; (80148e0 <_dtoa_r+0xaa0>)
 80146d8:	4602      	mov	r2, r0
 80146da:	f240 21ea 	movw	r1, #746	; 0x2ea
 80146de:	e4cf      	b.n	8014080 <_dtoa_r+0x240>
 80146e0:	693a      	ldr	r2, [r7, #16]
 80146e2:	3202      	adds	r2, #2
 80146e4:	0092      	lsls	r2, r2, #2
 80146e6:	f107 010c 	add.w	r1, r7, #12
 80146ea:	300c      	adds	r0, #12
 80146ec:	f000 fd2c 	bl	8015148 <memcpy>
 80146f0:	2201      	movs	r2, #1
 80146f2:	4641      	mov	r1, r8
 80146f4:	4630      	mov	r0, r6
 80146f6:	f000 ff13 	bl	8015520 <__lshift>
 80146fa:	9b01      	ldr	r3, [sp, #4]
 80146fc:	3301      	adds	r3, #1
 80146fe:	9304      	str	r3, [sp, #16]
 8014700:	9b01      	ldr	r3, [sp, #4]
 8014702:	4453      	add	r3, sl
 8014704:	9308      	str	r3, [sp, #32]
 8014706:	9b02      	ldr	r3, [sp, #8]
 8014708:	f003 0301 	and.w	r3, r3, #1
 801470c:	46b9      	mov	r9, r7
 801470e:	9307      	str	r3, [sp, #28]
 8014710:	4607      	mov	r7, r0
 8014712:	9b04      	ldr	r3, [sp, #16]
 8014714:	4621      	mov	r1, r4
 8014716:	3b01      	subs	r3, #1
 8014718:	4628      	mov	r0, r5
 801471a:	9302      	str	r3, [sp, #8]
 801471c:	f7ff fb04 	bl	8013d28 <quorem>
 8014720:	4603      	mov	r3, r0
 8014722:	3330      	adds	r3, #48	; 0x30
 8014724:	9005      	str	r0, [sp, #20]
 8014726:	4649      	mov	r1, r9
 8014728:	4628      	mov	r0, r5
 801472a:	9309      	str	r3, [sp, #36]	; 0x24
 801472c:	f000 ff68 	bl	8015600 <__mcmp>
 8014730:	463a      	mov	r2, r7
 8014732:	4682      	mov	sl, r0
 8014734:	4621      	mov	r1, r4
 8014736:	4630      	mov	r0, r6
 8014738:	f000 ff7e 	bl	8015638 <__mdiff>
 801473c:	68c2      	ldr	r2, [r0, #12]
 801473e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014740:	4680      	mov	r8, r0
 8014742:	bb0a      	cbnz	r2, 8014788 <_dtoa_r+0x948>
 8014744:	4601      	mov	r1, r0
 8014746:	4628      	mov	r0, r5
 8014748:	f000 ff5a 	bl	8015600 <__mcmp>
 801474c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801474e:	4602      	mov	r2, r0
 8014750:	4641      	mov	r1, r8
 8014752:	4630      	mov	r0, r6
 8014754:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8014758:	f000 fd43 	bl	80151e2 <_Bfree>
 801475c:	9b06      	ldr	r3, [sp, #24]
 801475e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014760:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8014764:	ea43 0102 	orr.w	r1, r3, r2
 8014768:	9b07      	ldr	r3, [sp, #28]
 801476a:	430b      	orrs	r3, r1
 801476c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801476e:	d10d      	bne.n	801478c <_dtoa_r+0x94c>
 8014770:	2b39      	cmp	r3, #57	; 0x39
 8014772:	d029      	beq.n	80147c8 <_dtoa_r+0x988>
 8014774:	f1ba 0f00 	cmp.w	sl, #0
 8014778:	dd01      	ble.n	801477e <_dtoa_r+0x93e>
 801477a:	9b05      	ldr	r3, [sp, #20]
 801477c:	3331      	adds	r3, #49	; 0x31
 801477e:	9a02      	ldr	r2, [sp, #8]
 8014780:	7013      	strb	r3, [r2, #0]
 8014782:	e775      	b.n	8014670 <_dtoa_r+0x830>
 8014784:	4638      	mov	r0, r7
 8014786:	e7b8      	b.n	80146fa <_dtoa_r+0x8ba>
 8014788:	2201      	movs	r2, #1
 801478a:	e7e1      	b.n	8014750 <_dtoa_r+0x910>
 801478c:	f1ba 0f00 	cmp.w	sl, #0
 8014790:	db06      	blt.n	80147a0 <_dtoa_r+0x960>
 8014792:	9906      	ldr	r1, [sp, #24]
 8014794:	ea41 0a0a 	orr.w	sl, r1, sl
 8014798:	9907      	ldr	r1, [sp, #28]
 801479a:	ea5a 0101 	orrs.w	r1, sl, r1
 801479e:	d120      	bne.n	80147e2 <_dtoa_r+0x9a2>
 80147a0:	2a00      	cmp	r2, #0
 80147a2:	ddec      	ble.n	801477e <_dtoa_r+0x93e>
 80147a4:	4629      	mov	r1, r5
 80147a6:	2201      	movs	r2, #1
 80147a8:	4630      	mov	r0, r6
 80147aa:	9304      	str	r3, [sp, #16]
 80147ac:	f000 feb8 	bl	8015520 <__lshift>
 80147b0:	4621      	mov	r1, r4
 80147b2:	4605      	mov	r5, r0
 80147b4:	f000 ff24 	bl	8015600 <__mcmp>
 80147b8:	2800      	cmp	r0, #0
 80147ba:	9b04      	ldr	r3, [sp, #16]
 80147bc:	dc02      	bgt.n	80147c4 <_dtoa_r+0x984>
 80147be:	d1de      	bne.n	801477e <_dtoa_r+0x93e>
 80147c0:	07da      	lsls	r2, r3, #31
 80147c2:	d5dc      	bpl.n	801477e <_dtoa_r+0x93e>
 80147c4:	2b39      	cmp	r3, #57	; 0x39
 80147c6:	d1d8      	bne.n	801477a <_dtoa_r+0x93a>
 80147c8:	9a02      	ldr	r2, [sp, #8]
 80147ca:	2339      	movs	r3, #57	; 0x39
 80147cc:	7013      	strb	r3, [r2, #0]
 80147ce:	4643      	mov	r3, r8
 80147d0:	4698      	mov	r8, r3
 80147d2:	3b01      	subs	r3, #1
 80147d4:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80147d8:	2a39      	cmp	r2, #57	; 0x39
 80147da:	d051      	beq.n	8014880 <_dtoa_r+0xa40>
 80147dc:	3201      	adds	r2, #1
 80147de:	701a      	strb	r2, [r3, #0]
 80147e0:	e746      	b.n	8014670 <_dtoa_r+0x830>
 80147e2:	2a00      	cmp	r2, #0
 80147e4:	dd03      	ble.n	80147ee <_dtoa_r+0x9ae>
 80147e6:	2b39      	cmp	r3, #57	; 0x39
 80147e8:	d0ee      	beq.n	80147c8 <_dtoa_r+0x988>
 80147ea:	3301      	adds	r3, #1
 80147ec:	e7c7      	b.n	801477e <_dtoa_r+0x93e>
 80147ee:	9a04      	ldr	r2, [sp, #16]
 80147f0:	9908      	ldr	r1, [sp, #32]
 80147f2:	f802 3c01 	strb.w	r3, [r2, #-1]
 80147f6:	428a      	cmp	r2, r1
 80147f8:	d02b      	beq.n	8014852 <_dtoa_r+0xa12>
 80147fa:	4629      	mov	r1, r5
 80147fc:	2300      	movs	r3, #0
 80147fe:	220a      	movs	r2, #10
 8014800:	4630      	mov	r0, r6
 8014802:	f000 fcf7 	bl	80151f4 <__multadd>
 8014806:	45b9      	cmp	r9, r7
 8014808:	4605      	mov	r5, r0
 801480a:	f04f 0300 	mov.w	r3, #0
 801480e:	f04f 020a 	mov.w	r2, #10
 8014812:	4649      	mov	r1, r9
 8014814:	4630      	mov	r0, r6
 8014816:	d107      	bne.n	8014828 <_dtoa_r+0x9e8>
 8014818:	f000 fcec 	bl	80151f4 <__multadd>
 801481c:	4681      	mov	r9, r0
 801481e:	4607      	mov	r7, r0
 8014820:	9b04      	ldr	r3, [sp, #16]
 8014822:	3301      	adds	r3, #1
 8014824:	9304      	str	r3, [sp, #16]
 8014826:	e774      	b.n	8014712 <_dtoa_r+0x8d2>
 8014828:	f000 fce4 	bl	80151f4 <__multadd>
 801482c:	4639      	mov	r1, r7
 801482e:	4681      	mov	r9, r0
 8014830:	2300      	movs	r3, #0
 8014832:	220a      	movs	r2, #10
 8014834:	4630      	mov	r0, r6
 8014836:	f000 fcdd 	bl	80151f4 <__multadd>
 801483a:	4607      	mov	r7, r0
 801483c:	e7f0      	b.n	8014820 <_dtoa_r+0x9e0>
 801483e:	f1ba 0f00 	cmp.w	sl, #0
 8014842:	9a01      	ldr	r2, [sp, #4]
 8014844:	bfcc      	ite	gt
 8014846:	46d0      	movgt	r8, sl
 8014848:	f04f 0801 	movle.w	r8, #1
 801484c:	4490      	add	r8, r2
 801484e:	f04f 0900 	mov.w	r9, #0
 8014852:	4629      	mov	r1, r5
 8014854:	2201      	movs	r2, #1
 8014856:	4630      	mov	r0, r6
 8014858:	9302      	str	r3, [sp, #8]
 801485a:	f000 fe61 	bl	8015520 <__lshift>
 801485e:	4621      	mov	r1, r4
 8014860:	4605      	mov	r5, r0
 8014862:	f000 fecd 	bl	8015600 <__mcmp>
 8014866:	2800      	cmp	r0, #0
 8014868:	dcb1      	bgt.n	80147ce <_dtoa_r+0x98e>
 801486a:	d102      	bne.n	8014872 <_dtoa_r+0xa32>
 801486c:	9b02      	ldr	r3, [sp, #8]
 801486e:	07db      	lsls	r3, r3, #31
 8014870:	d4ad      	bmi.n	80147ce <_dtoa_r+0x98e>
 8014872:	4643      	mov	r3, r8
 8014874:	4698      	mov	r8, r3
 8014876:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801487a:	2a30      	cmp	r2, #48	; 0x30
 801487c:	d0fa      	beq.n	8014874 <_dtoa_r+0xa34>
 801487e:	e6f7      	b.n	8014670 <_dtoa_r+0x830>
 8014880:	9a01      	ldr	r2, [sp, #4]
 8014882:	429a      	cmp	r2, r3
 8014884:	d1a4      	bne.n	80147d0 <_dtoa_r+0x990>
 8014886:	f10b 0b01 	add.w	fp, fp, #1
 801488a:	2331      	movs	r3, #49	; 0x31
 801488c:	e778      	b.n	8014780 <_dtoa_r+0x940>
 801488e:	4b15      	ldr	r3, [pc, #84]	; (80148e4 <_dtoa_r+0xaa4>)
 8014890:	f7ff bb2c 	b.w	8013eec <_dtoa_r+0xac>
 8014894:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014896:	2b00      	cmp	r3, #0
 8014898:	f47f ab13 	bne.w	8013ec2 <_dtoa_r+0x82>
 801489c:	4b12      	ldr	r3, [pc, #72]	; (80148e8 <_dtoa_r+0xaa8>)
 801489e:	f7ff bb25 	b.w	8013eec <_dtoa_r+0xac>
 80148a2:	f1ba 0f00 	cmp.w	sl, #0
 80148a6:	dc03      	bgt.n	80148b0 <_dtoa_r+0xa70>
 80148a8:	9b06      	ldr	r3, [sp, #24]
 80148aa:	2b02      	cmp	r3, #2
 80148ac:	f73f aec8 	bgt.w	8014640 <_dtoa_r+0x800>
 80148b0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80148b4:	4621      	mov	r1, r4
 80148b6:	4628      	mov	r0, r5
 80148b8:	f7ff fa36 	bl	8013d28 <quorem>
 80148bc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80148c0:	f808 3b01 	strb.w	r3, [r8], #1
 80148c4:	9a01      	ldr	r2, [sp, #4]
 80148c6:	eba8 0202 	sub.w	r2, r8, r2
 80148ca:	4592      	cmp	sl, r2
 80148cc:	ddb7      	ble.n	801483e <_dtoa_r+0x9fe>
 80148ce:	4629      	mov	r1, r5
 80148d0:	2300      	movs	r3, #0
 80148d2:	220a      	movs	r2, #10
 80148d4:	4630      	mov	r0, r6
 80148d6:	f000 fc8d 	bl	80151f4 <__multadd>
 80148da:	4605      	mov	r5, r0
 80148dc:	e7ea      	b.n	80148b4 <_dtoa_r+0xa74>
 80148de:	bf00      	nop
 80148e0:	080177ed 	.word	0x080177ed
 80148e4:	0801779e 	.word	0x0801779e
 80148e8:	080177e4 	.word	0x080177e4

080148ec <__errno>:
 80148ec:	4b01      	ldr	r3, [pc, #4]	; (80148f4 <__errno+0x8>)
 80148ee:	6818      	ldr	r0, [r3, #0]
 80148f0:	4770      	bx	lr
 80148f2:	bf00      	nop
 80148f4:	20000408 	.word	0x20000408

080148f8 <__sflush_r>:
 80148f8:	898b      	ldrh	r3, [r1, #12]
 80148fa:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80148fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014902:	4605      	mov	r5, r0
 8014904:	0718      	lsls	r0, r3, #28
 8014906:	460c      	mov	r4, r1
 8014908:	d45f      	bmi.n	80149ca <__sflush_r+0xd2>
 801490a:	684b      	ldr	r3, [r1, #4]
 801490c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014910:	2b00      	cmp	r3, #0
 8014912:	818a      	strh	r2, [r1, #12]
 8014914:	dc05      	bgt.n	8014922 <__sflush_r+0x2a>
 8014916:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8014918:	2b00      	cmp	r3, #0
 801491a:	dc02      	bgt.n	8014922 <__sflush_r+0x2a>
 801491c:	2000      	movs	r0, #0
 801491e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014922:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014924:	2e00      	cmp	r6, #0
 8014926:	d0f9      	beq.n	801491c <__sflush_r+0x24>
 8014928:	2300      	movs	r3, #0
 801492a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801492e:	682f      	ldr	r7, [r5, #0]
 8014930:	602b      	str	r3, [r5, #0]
 8014932:	d036      	beq.n	80149a2 <__sflush_r+0xaa>
 8014934:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8014936:	89a3      	ldrh	r3, [r4, #12]
 8014938:	075a      	lsls	r2, r3, #29
 801493a:	d505      	bpl.n	8014948 <__sflush_r+0x50>
 801493c:	6863      	ldr	r3, [r4, #4]
 801493e:	1ac0      	subs	r0, r0, r3
 8014940:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014942:	b10b      	cbz	r3, 8014948 <__sflush_r+0x50>
 8014944:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8014946:	1ac0      	subs	r0, r0, r3
 8014948:	2300      	movs	r3, #0
 801494a:	4602      	mov	r2, r0
 801494c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801494e:	69e1      	ldr	r1, [r4, #28]
 8014950:	4628      	mov	r0, r5
 8014952:	47b0      	blx	r6
 8014954:	1c43      	adds	r3, r0, #1
 8014956:	89a3      	ldrh	r3, [r4, #12]
 8014958:	d106      	bne.n	8014968 <__sflush_r+0x70>
 801495a:	6829      	ldr	r1, [r5, #0]
 801495c:	291d      	cmp	r1, #29
 801495e:	d830      	bhi.n	80149c2 <__sflush_r+0xca>
 8014960:	4a2b      	ldr	r2, [pc, #172]	; (8014a10 <__sflush_r+0x118>)
 8014962:	40ca      	lsrs	r2, r1
 8014964:	07d6      	lsls	r6, r2, #31
 8014966:	d52c      	bpl.n	80149c2 <__sflush_r+0xca>
 8014968:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801496c:	b21b      	sxth	r3, r3
 801496e:	2200      	movs	r2, #0
 8014970:	6062      	str	r2, [r4, #4]
 8014972:	04d9      	lsls	r1, r3, #19
 8014974:	6922      	ldr	r2, [r4, #16]
 8014976:	81a3      	strh	r3, [r4, #12]
 8014978:	6022      	str	r2, [r4, #0]
 801497a:	d504      	bpl.n	8014986 <__sflush_r+0x8e>
 801497c:	1c42      	adds	r2, r0, #1
 801497e:	d101      	bne.n	8014984 <__sflush_r+0x8c>
 8014980:	682b      	ldr	r3, [r5, #0]
 8014982:	b903      	cbnz	r3, 8014986 <__sflush_r+0x8e>
 8014984:	6520      	str	r0, [r4, #80]	; 0x50
 8014986:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8014988:	602f      	str	r7, [r5, #0]
 801498a:	2900      	cmp	r1, #0
 801498c:	d0c6      	beq.n	801491c <__sflush_r+0x24>
 801498e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8014992:	4299      	cmp	r1, r3
 8014994:	d002      	beq.n	801499c <__sflush_r+0xa4>
 8014996:	4628      	mov	r0, r5
 8014998:	f000 f938 	bl	8014c0c <_free_r>
 801499c:	2000      	movs	r0, #0
 801499e:	6320      	str	r0, [r4, #48]	; 0x30
 80149a0:	e7bd      	b.n	801491e <__sflush_r+0x26>
 80149a2:	69e1      	ldr	r1, [r4, #28]
 80149a4:	2301      	movs	r3, #1
 80149a6:	4628      	mov	r0, r5
 80149a8:	47b0      	blx	r6
 80149aa:	1c41      	adds	r1, r0, #1
 80149ac:	d1c3      	bne.n	8014936 <__sflush_r+0x3e>
 80149ae:	682b      	ldr	r3, [r5, #0]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d0c0      	beq.n	8014936 <__sflush_r+0x3e>
 80149b4:	2b1d      	cmp	r3, #29
 80149b6:	d001      	beq.n	80149bc <__sflush_r+0xc4>
 80149b8:	2b16      	cmp	r3, #22
 80149ba:	d101      	bne.n	80149c0 <__sflush_r+0xc8>
 80149bc:	602f      	str	r7, [r5, #0]
 80149be:	e7ad      	b.n	801491c <__sflush_r+0x24>
 80149c0:	89a3      	ldrh	r3, [r4, #12]
 80149c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80149c6:	81a3      	strh	r3, [r4, #12]
 80149c8:	e7a9      	b.n	801491e <__sflush_r+0x26>
 80149ca:	690f      	ldr	r7, [r1, #16]
 80149cc:	2f00      	cmp	r7, #0
 80149ce:	d0a5      	beq.n	801491c <__sflush_r+0x24>
 80149d0:	079b      	lsls	r3, r3, #30
 80149d2:	680e      	ldr	r6, [r1, #0]
 80149d4:	bf08      	it	eq
 80149d6:	694b      	ldreq	r3, [r1, #20]
 80149d8:	600f      	str	r7, [r1, #0]
 80149da:	bf18      	it	ne
 80149dc:	2300      	movne	r3, #0
 80149de:	eba6 0807 	sub.w	r8, r6, r7
 80149e2:	608b      	str	r3, [r1, #8]
 80149e4:	f1b8 0f00 	cmp.w	r8, #0
 80149e8:	dd98      	ble.n	801491c <__sflush_r+0x24>
 80149ea:	69e1      	ldr	r1, [r4, #28]
 80149ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80149ee:	4643      	mov	r3, r8
 80149f0:	463a      	mov	r2, r7
 80149f2:	4628      	mov	r0, r5
 80149f4:	47b0      	blx	r6
 80149f6:	2800      	cmp	r0, #0
 80149f8:	dc06      	bgt.n	8014a08 <__sflush_r+0x110>
 80149fa:	89a3      	ldrh	r3, [r4, #12]
 80149fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a00:	81a3      	strh	r3, [r4, #12]
 8014a02:	f04f 30ff 	mov.w	r0, #4294967295
 8014a06:	e78a      	b.n	801491e <__sflush_r+0x26>
 8014a08:	4407      	add	r7, r0
 8014a0a:	eba8 0800 	sub.w	r8, r8, r0
 8014a0e:	e7e9      	b.n	80149e4 <__sflush_r+0xec>
 8014a10:	20400001 	.word	0x20400001

08014a14 <_fflush_r>:
 8014a14:	b538      	push	{r3, r4, r5, lr}
 8014a16:	460c      	mov	r4, r1
 8014a18:	4605      	mov	r5, r0
 8014a1a:	b118      	cbz	r0, 8014a24 <_fflush_r+0x10>
 8014a1c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8014a1e:	b90b      	cbnz	r3, 8014a24 <_fflush_r+0x10>
 8014a20:	f000 f864 	bl	8014aec <__sinit>
 8014a24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a28:	b1bb      	cbz	r3, 8014a5a <_fflush_r+0x46>
 8014a2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014a2c:	07d0      	lsls	r0, r2, #31
 8014a2e:	d404      	bmi.n	8014a3a <_fflush_r+0x26>
 8014a30:	0599      	lsls	r1, r3, #22
 8014a32:	d402      	bmi.n	8014a3a <_fflush_r+0x26>
 8014a34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014a36:	f000 fb19 	bl	801506c <__retarget_lock_acquire_recursive>
 8014a3a:	4628      	mov	r0, r5
 8014a3c:	4621      	mov	r1, r4
 8014a3e:	f7ff ff5b 	bl	80148f8 <__sflush_r>
 8014a42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014a44:	07da      	lsls	r2, r3, #31
 8014a46:	4605      	mov	r5, r0
 8014a48:	d405      	bmi.n	8014a56 <_fflush_r+0x42>
 8014a4a:	89a3      	ldrh	r3, [r4, #12]
 8014a4c:	059b      	lsls	r3, r3, #22
 8014a4e:	d402      	bmi.n	8014a56 <_fflush_r+0x42>
 8014a50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014a52:	f000 fb0c 	bl	801506e <__retarget_lock_release_recursive>
 8014a56:	4628      	mov	r0, r5
 8014a58:	bd38      	pop	{r3, r4, r5, pc}
 8014a5a:	461d      	mov	r5, r3
 8014a5c:	e7fb      	b.n	8014a56 <_fflush_r+0x42>
	...

08014a60 <std>:
 8014a60:	2300      	movs	r3, #0
 8014a62:	b510      	push	{r4, lr}
 8014a64:	4604      	mov	r4, r0
 8014a66:	e9c0 3300 	strd	r3, r3, [r0]
 8014a6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014a6e:	6083      	str	r3, [r0, #8]
 8014a70:	8181      	strh	r1, [r0, #12]
 8014a72:	6643      	str	r3, [r0, #100]	; 0x64
 8014a74:	81c2      	strh	r2, [r0, #14]
 8014a76:	6183      	str	r3, [r0, #24]
 8014a78:	4619      	mov	r1, r3
 8014a7a:	2208      	movs	r2, #8
 8014a7c:	305c      	adds	r0, #92	; 0x5c
 8014a7e:	f7fc fbcd 	bl	801121c <memset>
 8014a82:	4b07      	ldr	r3, [pc, #28]	; (8014aa0 <std+0x40>)
 8014a84:	6223      	str	r3, [r4, #32]
 8014a86:	4b07      	ldr	r3, [pc, #28]	; (8014aa4 <std+0x44>)
 8014a88:	6263      	str	r3, [r4, #36]	; 0x24
 8014a8a:	4b07      	ldr	r3, [pc, #28]	; (8014aa8 <std+0x48>)
 8014a8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8014a8e:	4b07      	ldr	r3, [pc, #28]	; (8014aac <std+0x4c>)
 8014a90:	61e4      	str	r4, [r4, #28]
 8014a92:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014a94:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014a9c:	f000 bae4 	b.w	8015068 <__retarget_lock_init_recursive>
 8014aa0:	08015c29 	.word	0x08015c29
 8014aa4:	08015c4b 	.word	0x08015c4b
 8014aa8:	08015c83 	.word	0x08015c83
 8014aac:	08015ca7 	.word	0x08015ca7

08014ab0 <_cleanup_r>:
 8014ab0:	4901      	ldr	r1, [pc, #4]	; (8014ab8 <_cleanup_r+0x8>)
 8014ab2:	f000 bab5 	b.w	8015020 <_fwalk_reent>
 8014ab6:	bf00      	nop
 8014ab8:	080169e1 	.word	0x080169e1

08014abc <__sfp_lock_acquire>:
 8014abc:	4801      	ldr	r0, [pc, #4]	; (8014ac4 <__sfp_lock_acquire+0x8>)
 8014abe:	f000 bad5 	b.w	801506c <__retarget_lock_acquire_recursive>
 8014ac2:	bf00      	nop
 8014ac4:	2000655e 	.word	0x2000655e

08014ac8 <__sfp_lock_release>:
 8014ac8:	4801      	ldr	r0, [pc, #4]	; (8014ad0 <__sfp_lock_release+0x8>)
 8014aca:	f000 bad0 	b.w	801506e <__retarget_lock_release_recursive>
 8014ace:	bf00      	nop
 8014ad0:	2000655e 	.word	0x2000655e

08014ad4 <__sinit_lock_acquire>:
 8014ad4:	4801      	ldr	r0, [pc, #4]	; (8014adc <__sinit_lock_acquire+0x8>)
 8014ad6:	f000 bac9 	b.w	801506c <__retarget_lock_acquire_recursive>
 8014ada:	bf00      	nop
 8014adc:	2000655f 	.word	0x2000655f

08014ae0 <__sinit_lock_release>:
 8014ae0:	4801      	ldr	r0, [pc, #4]	; (8014ae8 <__sinit_lock_release+0x8>)
 8014ae2:	f000 bac4 	b.w	801506e <__retarget_lock_release_recursive>
 8014ae6:	bf00      	nop
 8014ae8:	2000655f 	.word	0x2000655f

08014aec <__sinit>:
 8014aec:	b510      	push	{r4, lr}
 8014aee:	4604      	mov	r4, r0
 8014af0:	f7ff fff0 	bl	8014ad4 <__sinit_lock_acquire>
 8014af4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8014af6:	b11a      	cbz	r2, 8014b00 <__sinit+0x14>
 8014af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014afc:	f7ff bff0 	b.w	8014ae0 <__sinit_lock_release>
 8014b00:	4b0d      	ldr	r3, [pc, #52]	; (8014b38 <__sinit+0x4c>)
 8014b02:	63e3      	str	r3, [r4, #60]	; 0x3c
 8014b04:	2303      	movs	r3, #3
 8014b06:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 8014b0a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 8014b0e:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 8014b12:	6860      	ldr	r0, [r4, #4]
 8014b14:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 8014b18:	2104      	movs	r1, #4
 8014b1a:	f7ff ffa1 	bl	8014a60 <std>
 8014b1e:	68a0      	ldr	r0, [r4, #8]
 8014b20:	2201      	movs	r2, #1
 8014b22:	2109      	movs	r1, #9
 8014b24:	f7ff ff9c 	bl	8014a60 <std>
 8014b28:	68e0      	ldr	r0, [r4, #12]
 8014b2a:	2202      	movs	r2, #2
 8014b2c:	2112      	movs	r1, #18
 8014b2e:	f7ff ff97 	bl	8014a60 <std>
 8014b32:	2301      	movs	r3, #1
 8014b34:	63a3      	str	r3, [r4, #56]	; 0x38
 8014b36:	e7df      	b.n	8014af8 <__sinit+0xc>
 8014b38:	08014ab1 	.word	0x08014ab1

08014b3c <__libc_fini_array>:
 8014b3c:	b538      	push	{r3, r4, r5, lr}
 8014b3e:	4d07      	ldr	r5, [pc, #28]	; (8014b5c <__libc_fini_array+0x20>)
 8014b40:	4c07      	ldr	r4, [pc, #28]	; (8014b60 <__libc_fini_array+0x24>)
 8014b42:	1b64      	subs	r4, r4, r5
 8014b44:	10a4      	asrs	r4, r4, #2
 8014b46:	b91c      	cbnz	r4, 8014b50 <__libc_fini_array+0x14>
 8014b48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014b4c:	f002 bc32 	b.w	80173b4 <_fini>
 8014b50:	3c01      	subs	r4, #1
 8014b52:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8014b56:	4798      	blx	r3
 8014b58:	e7f5      	b.n	8014b46 <__libc_fini_array+0xa>
 8014b5a:	bf00      	nop
 8014b5c:	080193e8 	.word	0x080193e8
 8014b60:	080193ec 	.word	0x080193ec

08014b64 <_malloc_trim_r>:
 8014b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b68:	4606      	mov	r6, r0
 8014b6a:	2008      	movs	r0, #8
 8014b6c:	460c      	mov	r4, r1
 8014b6e:	f7fd fe01 	bl	8012774 <sysconf>
 8014b72:	4f23      	ldr	r7, [pc, #140]	; (8014c00 <_malloc_trim_r+0x9c>)
 8014b74:	4680      	mov	r8, r0
 8014b76:	4630      	mov	r0, r6
 8014b78:	f7fc fb58 	bl	801122c <__malloc_lock>
 8014b7c:	68bb      	ldr	r3, [r7, #8]
 8014b7e:	685d      	ldr	r5, [r3, #4]
 8014b80:	f025 0503 	bic.w	r5, r5, #3
 8014b84:	1b2c      	subs	r4, r5, r4
 8014b86:	3c11      	subs	r4, #17
 8014b88:	4444      	add	r4, r8
 8014b8a:	fbb4 f4f8 	udiv	r4, r4, r8
 8014b8e:	3c01      	subs	r4, #1
 8014b90:	fb08 f404 	mul.w	r4, r8, r4
 8014b94:	45a0      	cmp	r8, r4
 8014b96:	dd05      	ble.n	8014ba4 <_malloc_trim_r+0x40>
 8014b98:	4630      	mov	r0, r6
 8014b9a:	f7fc fb4d 	bl	8011238 <__malloc_unlock>
 8014b9e:	2000      	movs	r0, #0
 8014ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ba4:	2100      	movs	r1, #0
 8014ba6:	4630      	mov	r0, r6
 8014ba8:	f7fc fbb4 	bl	8011314 <_sbrk_r>
 8014bac:	68bb      	ldr	r3, [r7, #8]
 8014bae:	442b      	add	r3, r5
 8014bb0:	4298      	cmp	r0, r3
 8014bb2:	d1f1      	bne.n	8014b98 <_malloc_trim_r+0x34>
 8014bb4:	4261      	negs	r1, r4
 8014bb6:	4630      	mov	r0, r6
 8014bb8:	f7fc fbac 	bl	8011314 <_sbrk_r>
 8014bbc:	3001      	adds	r0, #1
 8014bbe:	d110      	bne.n	8014be2 <_malloc_trim_r+0x7e>
 8014bc0:	2100      	movs	r1, #0
 8014bc2:	4630      	mov	r0, r6
 8014bc4:	f7fc fba6 	bl	8011314 <_sbrk_r>
 8014bc8:	68ba      	ldr	r2, [r7, #8]
 8014bca:	1a83      	subs	r3, r0, r2
 8014bcc:	2b0f      	cmp	r3, #15
 8014bce:	dde3      	ble.n	8014b98 <_malloc_trim_r+0x34>
 8014bd0:	490c      	ldr	r1, [pc, #48]	; (8014c04 <_malloc_trim_r+0xa0>)
 8014bd2:	6809      	ldr	r1, [r1, #0]
 8014bd4:	1a40      	subs	r0, r0, r1
 8014bd6:	490c      	ldr	r1, [pc, #48]	; (8014c08 <_malloc_trim_r+0xa4>)
 8014bd8:	f043 0301 	orr.w	r3, r3, #1
 8014bdc:	6008      	str	r0, [r1, #0]
 8014bde:	6053      	str	r3, [r2, #4]
 8014be0:	e7da      	b.n	8014b98 <_malloc_trim_r+0x34>
 8014be2:	68bb      	ldr	r3, [r7, #8]
 8014be4:	4a08      	ldr	r2, [pc, #32]	; (8014c08 <_malloc_trim_r+0xa4>)
 8014be6:	1b2d      	subs	r5, r5, r4
 8014be8:	f045 0501 	orr.w	r5, r5, #1
 8014bec:	605d      	str	r5, [r3, #4]
 8014bee:	6813      	ldr	r3, [r2, #0]
 8014bf0:	4630      	mov	r0, r6
 8014bf2:	1b1b      	subs	r3, r3, r4
 8014bf4:	6013      	str	r3, [r2, #0]
 8014bf6:	f7fc fb1f 	bl	8011238 <__malloc_unlock>
 8014bfa:	2001      	movs	r0, #1
 8014bfc:	e7d0      	b.n	8014ba0 <_malloc_trim_r+0x3c>
 8014bfe:	bf00      	nop
 8014c00:	20000838 	.word	0x20000838
 8014c04:	20000c40 	.word	0x20000c40
 8014c08:	20006528 	.word	0x20006528

08014c0c <_free_r>:
 8014c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c0e:	4605      	mov	r5, r0
 8014c10:	460f      	mov	r7, r1
 8014c12:	2900      	cmp	r1, #0
 8014c14:	f000 80b1 	beq.w	8014d7a <_free_r+0x16e>
 8014c18:	f7fc fb08 	bl	801122c <__malloc_lock>
 8014c1c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8014c20:	4856      	ldr	r0, [pc, #344]	; (8014d7c <_free_r+0x170>)
 8014c22:	f022 0401 	bic.w	r4, r2, #1
 8014c26:	f1a7 0308 	sub.w	r3, r7, #8
 8014c2a:	eb03 0c04 	add.w	ip, r3, r4
 8014c2e:	6881      	ldr	r1, [r0, #8]
 8014c30:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8014c34:	4561      	cmp	r1, ip
 8014c36:	f026 0603 	bic.w	r6, r6, #3
 8014c3a:	f002 0201 	and.w	r2, r2, #1
 8014c3e:	d11b      	bne.n	8014c78 <_free_r+0x6c>
 8014c40:	4434      	add	r4, r6
 8014c42:	b93a      	cbnz	r2, 8014c54 <_free_r+0x48>
 8014c44:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8014c48:	1a9b      	subs	r3, r3, r2
 8014c4a:	4414      	add	r4, r2
 8014c4c:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8014c50:	60ca      	str	r2, [r1, #12]
 8014c52:	6091      	str	r1, [r2, #8]
 8014c54:	f044 0201 	orr.w	r2, r4, #1
 8014c58:	605a      	str	r2, [r3, #4]
 8014c5a:	6083      	str	r3, [r0, #8]
 8014c5c:	4b48      	ldr	r3, [pc, #288]	; (8014d80 <_free_r+0x174>)
 8014c5e:	681b      	ldr	r3, [r3, #0]
 8014c60:	42a3      	cmp	r3, r4
 8014c62:	d804      	bhi.n	8014c6e <_free_r+0x62>
 8014c64:	4b47      	ldr	r3, [pc, #284]	; (8014d84 <_free_r+0x178>)
 8014c66:	4628      	mov	r0, r5
 8014c68:	6819      	ldr	r1, [r3, #0]
 8014c6a:	f7ff ff7b 	bl	8014b64 <_malloc_trim_r>
 8014c6e:	4628      	mov	r0, r5
 8014c70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014c74:	f7fc bae0 	b.w	8011238 <__malloc_unlock>
 8014c78:	f8cc 6004 	str.w	r6, [ip, #4]
 8014c7c:	2a00      	cmp	r2, #0
 8014c7e:	d138      	bne.n	8014cf2 <_free_r+0xe6>
 8014c80:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8014c84:	1a5b      	subs	r3, r3, r1
 8014c86:	440c      	add	r4, r1
 8014c88:	6899      	ldr	r1, [r3, #8]
 8014c8a:	f100 0708 	add.w	r7, r0, #8
 8014c8e:	42b9      	cmp	r1, r7
 8014c90:	d031      	beq.n	8014cf6 <_free_r+0xea>
 8014c92:	68df      	ldr	r7, [r3, #12]
 8014c94:	60cf      	str	r7, [r1, #12]
 8014c96:	60b9      	str	r1, [r7, #8]
 8014c98:	eb0c 0106 	add.w	r1, ip, r6
 8014c9c:	6849      	ldr	r1, [r1, #4]
 8014c9e:	07c9      	lsls	r1, r1, #31
 8014ca0:	d40b      	bmi.n	8014cba <_free_r+0xae>
 8014ca2:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8014ca6:	4434      	add	r4, r6
 8014ca8:	bb3a      	cbnz	r2, 8014cfa <_free_r+0xee>
 8014caa:	4e37      	ldr	r6, [pc, #220]	; (8014d88 <_free_r+0x17c>)
 8014cac:	42b1      	cmp	r1, r6
 8014cae:	d124      	bne.n	8014cfa <_free_r+0xee>
 8014cb0:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014cb4:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8014cb8:	2201      	movs	r2, #1
 8014cba:	f044 0101 	orr.w	r1, r4, #1
 8014cbe:	6059      	str	r1, [r3, #4]
 8014cc0:	511c      	str	r4, [r3, r4]
 8014cc2:	2a00      	cmp	r2, #0
 8014cc4:	d1d3      	bne.n	8014c6e <_free_r+0x62>
 8014cc6:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8014cca:	d21b      	bcs.n	8014d04 <_free_r+0xf8>
 8014ccc:	0961      	lsrs	r1, r4, #5
 8014cce:	08e2      	lsrs	r2, r4, #3
 8014cd0:	2401      	movs	r4, #1
 8014cd2:	408c      	lsls	r4, r1
 8014cd4:	6841      	ldr	r1, [r0, #4]
 8014cd6:	3201      	adds	r2, #1
 8014cd8:	430c      	orrs	r4, r1
 8014cda:	6044      	str	r4, [r0, #4]
 8014cdc:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8014ce0:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 8014ce4:	3908      	subs	r1, #8
 8014ce6:	e9c3 4102 	strd	r4, r1, [r3, #8]
 8014cea:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 8014cee:	60e3      	str	r3, [r4, #12]
 8014cf0:	e7bd      	b.n	8014c6e <_free_r+0x62>
 8014cf2:	2200      	movs	r2, #0
 8014cf4:	e7d0      	b.n	8014c98 <_free_r+0x8c>
 8014cf6:	2201      	movs	r2, #1
 8014cf8:	e7ce      	b.n	8014c98 <_free_r+0x8c>
 8014cfa:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8014cfe:	60ce      	str	r6, [r1, #12]
 8014d00:	60b1      	str	r1, [r6, #8]
 8014d02:	e7da      	b.n	8014cba <_free_r+0xae>
 8014d04:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 8014d08:	ea4f 2254 	mov.w	r2, r4, lsr #9
 8014d0c:	d214      	bcs.n	8014d38 <_free_r+0x12c>
 8014d0e:	09a2      	lsrs	r2, r4, #6
 8014d10:	3238      	adds	r2, #56	; 0x38
 8014d12:	1c51      	adds	r1, r2, #1
 8014d14:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8014d18:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 8014d1c:	428e      	cmp	r6, r1
 8014d1e:	d125      	bne.n	8014d6c <_free_r+0x160>
 8014d20:	2401      	movs	r4, #1
 8014d22:	1092      	asrs	r2, r2, #2
 8014d24:	fa04 f202 	lsl.w	r2, r4, r2
 8014d28:	6844      	ldr	r4, [r0, #4]
 8014d2a:	4322      	orrs	r2, r4
 8014d2c:	6042      	str	r2, [r0, #4]
 8014d2e:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8014d32:	60b3      	str	r3, [r6, #8]
 8014d34:	60cb      	str	r3, [r1, #12]
 8014d36:	e79a      	b.n	8014c6e <_free_r+0x62>
 8014d38:	2a14      	cmp	r2, #20
 8014d3a:	d801      	bhi.n	8014d40 <_free_r+0x134>
 8014d3c:	325b      	adds	r2, #91	; 0x5b
 8014d3e:	e7e8      	b.n	8014d12 <_free_r+0x106>
 8014d40:	2a54      	cmp	r2, #84	; 0x54
 8014d42:	d802      	bhi.n	8014d4a <_free_r+0x13e>
 8014d44:	0b22      	lsrs	r2, r4, #12
 8014d46:	326e      	adds	r2, #110	; 0x6e
 8014d48:	e7e3      	b.n	8014d12 <_free_r+0x106>
 8014d4a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8014d4e:	d802      	bhi.n	8014d56 <_free_r+0x14a>
 8014d50:	0be2      	lsrs	r2, r4, #15
 8014d52:	3277      	adds	r2, #119	; 0x77
 8014d54:	e7dd      	b.n	8014d12 <_free_r+0x106>
 8014d56:	f240 5154 	movw	r1, #1364	; 0x554
 8014d5a:	428a      	cmp	r2, r1
 8014d5c:	bf9a      	itte	ls
 8014d5e:	0ca2      	lsrls	r2, r4, #18
 8014d60:	327c      	addls	r2, #124	; 0x7c
 8014d62:	227e      	movhi	r2, #126	; 0x7e
 8014d64:	e7d5      	b.n	8014d12 <_free_r+0x106>
 8014d66:	6889      	ldr	r1, [r1, #8]
 8014d68:	428e      	cmp	r6, r1
 8014d6a:	d004      	beq.n	8014d76 <_free_r+0x16a>
 8014d6c:	684a      	ldr	r2, [r1, #4]
 8014d6e:	f022 0203 	bic.w	r2, r2, #3
 8014d72:	42a2      	cmp	r2, r4
 8014d74:	d8f7      	bhi.n	8014d66 <_free_r+0x15a>
 8014d76:	68ce      	ldr	r6, [r1, #12]
 8014d78:	e7d9      	b.n	8014d2e <_free_r+0x122>
 8014d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d7c:	20000838 	.word	0x20000838
 8014d80:	20000c44 	.word	0x20000c44
 8014d84:	20006558 	.word	0x20006558
 8014d88:	20000840 	.word	0x20000840

08014d8c <__sfvwrite_r>:
 8014d8c:	6893      	ldr	r3, [r2, #8]
 8014d8e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d92:	4606      	mov	r6, r0
 8014d94:	460c      	mov	r4, r1
 8014d96:	4690      	mov	r8, r2
 8014d98:	b91b      	cbnz	r3, 8014da2 <__sfvwrite_r+0x16>
 8014d9a:	2000      	movs	r0, #0
 8014d9c:	b003      	add	sp, #12
 8014d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014da2:	898b      	ldrh	r3, [r1, #12]
 8014da4:	0718      	lsls	r0, r3, #28
 8014da6:	d550      	bpl.n	8014e4a <__sfvwrite_r+0xbe>
 8014da8:	690b      	ldr	r3, [r1, #16]
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	d04d      	beq.n	8014e4a <__sfvwrite_r+0xbe>
 8014dae:	89a3      	ldrh	r3, [r4, #12]
 8014db0:	f8d8 7000 	ldr.w	r7, [r8]
 8014db4:	f013 0902 	ands.w	r9, r3, #2
 8014db8:	d16c      	bne.n	8014e94 <__sfvwrite_r+0x108>
 8014dba:	f013 0301 	ands.w	r3, r3, #1
 8014dbe:	f000 809c 	beq.w	8014efa <__sfvwrite_r+0x16e>
 8014dc2:	4648      	mov	r0, r9
 8014dc4:	46ca      	mov	sl, r9
 8014dc6:	46cb      	mov	fp, r9
 8014dc8:	f1bb 0f00 	cmp.w	fp, #0
 8014dcc:	f000 8103 	beq.w	8014fd6 <__sfvwrite_r+0x24a>
 8014dd0:	b950      	cbnz	r0, 8014de8 <__sfvwrite_r+0x5c>
 8014dd2:	465a      	mov	r2, fp
 8014dd4:	210a      	movs	r1, #10
 8014dd6:	4650      	mov	r0, sl
 8014dd8:	f7eb fa3a 	bl	8000250 <memchr>
 8014ddc:	2800      	cmp	r0, #0
 8014dde:	f000 80ff 	beq.w	8014fe0 <__sfvwrite_r+0x254>
 8014de2:	3001      	adds	r0, #1
 8014de4:	eba0 090a 	sub.w	r9, r0, sl
 8014de8:	6820      	ldr	r0, [r4, #0]
 8014dea:	6921      	ldr	r1, [r4, #16]
 8014dec:	6963      	ldr	r3, [r4, #20]
 8014dee:	45d9      	cmp	r9, fp
 8014df0:	464a      	mov	r2, r9
 8014df2:	bf28      	it	cs
 8014df4:	465a      	movcs	r2, fp
 8014df6:	4288      	cmp	r0, r1
 8014df8:	f240 80f5 	bls.w	8014fe6 <__sfvwrite_r+0x25a>
 8014dfc:	68a5      	ldr	r5, [r4, #8]
 8014dfe:	441d      	add	r5, r3
 8014e00:	42aa      	cmp	r2, r5
 8014e02:	f340 80f0 	ble.w	8014fe6 <__sfvwrite_r+0x25a>
 8014e06:	4651      	mov	r1, sl
 8014e08:	462a      	mov	r2, r5
 8014e0a:	f000 f9ab 	bl	8015164 <memmove>
 8014e0e:	6823      	ldr	r3, [r4, #0]
 8014e10:	442b      	add	r3, r5
 8014e12:	6023      	str	r3, [r4, #0]
 8014e14:	4621      	mov	r1, r4
 8014e16:	4630      	mov	r0, r6
 8014e18:	f7ff fdfc 	bl	8014a14 <_fflush_r>
 8014e1c:	2800      	cmp	r0, #0
 8014e1e:	d167      	bne.n	8014ef0 <__sfvwrite_r+0x164>
 8014e20:	ebb9 0905 	subs.w	r9, r9, r5
 8014e24:	f040 80f7 	bne.w	8015016 <__sfvwrite_r+0x28a>
 8014e28:	4621      	mov	r1, r4
 8014e2a:	4630      	mov	r0, r6
 8014e2c:	f7ff fdf2 	bl	8014a14 <_fflush_r>
 8014e30:	2800      	cmp	r0, #0
 8014e32:	d15d      	bne.n	8014ef0 <__sfvwrite_r+0x164>
 8014e34:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8014e38:	44aa      	add	sl, r5
 8014e3a:	ebab 0b05 	sub.w	fp, fp, r5
 8014e3e:	1b55      	subs	r5, r2, r5
 8014e40:	f8c8 5008 	str.w	r5, [r8, #8]
 8014e44:	2d00      	cmp	r5, #0
 8014e46:	d1bf      	bne.n	8014dc8 <__sfvwrite_r+0x3c>
 8014e48:	e7a7      	b.n	8014d9a <__sfvwrite_r+0xe>
 8014e4a:	4621      	mov	r1, r4
 8014e4c:	4630      	mov	r0, r6
 8014e4e:	f7fe ff03 	bl	8013c58 <__swsetup_r>
 8014e52:	2800      	cmp	r0, #0
 8014e54:	d0ab      	beq.n	8014dae <__sfvwrite_r+0x22>
 8014e56:	f04f 30ff 	mov.w	r0, #4294967295
 8014e5a:	e79f      	b.n	8014d9c <__sfvwrite_r+0x10>
 8014e5c:	e9d7 b900 	ldrd	fp, r9, [r7]
 8014e60:	3708      	adds	r7, #8
 8014e62:	f1b9 0f00 	cmp.w	r9, #0
 8014e66:	d0f9      	beq.n	8014e5c <__sfvwrite_r+0xd0>
 8014e68:	45d1      	cmp	r9, sl
 8014e6a:	464b      	mov	r3, r9
 8014e6c:	69e1      	ldr	r1, [r4, #28]
 8014e6e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8014e70:	bf28      	it	cs
 8014e72:	4653      	movcs	r3, sl
 8014e74:	465a      	mov	r2, fp
 8014e76:	4630      	mov	r0, r6
 8014e78:	47a8      	blx	r5
 8014e7a:	2800      	cmp	r0, #0
 8014e7c:	dd38      	ble.n	8014ef0 <__sfvwrite_r+0x164>
 8014e7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014e82:	4483      	add	fp, r0
 8014e84:	eba9 0900 	sub.w	r9, r9, r0
 8014e88:	1a18      	subs	r0, r3, r0
 8014e8a:	f8c8 0008 	str.w	r0, [r8, #8]
 8014e8e:	2800      	cmp	r0, #0
 8014e90:	d1e7      	bne.n	8014e62 <__sfvwrite_r+0xd6>
 8014e92:	e782      	b.n	8014d9a <__sfvwrite_r+0xe>
 8014e94:	f04f 0b00 	mov.w	fp, #0
 8014e98:	f8df a180 	ldr.w	sl, [pc, #384]	; 801501c <__sfvwrite_r+0x290>
 8014e9c:	46d9      	mov	r9, fp
 8014e9e:	e7e0      	b.n	8014e62 <__sfvwrite_r+0xd6>
 8014ea0:	e9d7 9a00 	ldrd	r9, sl, [r7]
 8014ea4:	3708      	adds	r7, #8
 8014ea6:	f1ba 0f00 	cmp.w	sl, #0
 8014eaa:	d0f9      	beq.n	8014ea0 <__sfvwrite_r+0x114>
 8014eac:	89a3      	ldrh	r3, [r4, #12]
 8014eae:	6820      	ldr	r0, [r4, #0]
 8014eb0:	68a2      	ldr	r2, [r4, #8]
 8014eb2:	0599      	lsls	r1, r3, #22
 8014eb4:	d563      	bpl.n	8014f7e <__sfvwrite_r+0x1f2>
 8014eb6:	4552      	cmp	r2, sl
 8014eb8:	d836      	bhi.n	8014f28 <__sfvwrite_r+0x19c>
 8014eba:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8014ebe:	d033      	beq.n	8014f28 <__sfvwrite_r+0x19c>
 8014ec0:	6921      	ldr	r1, [r4, #16]
 8014ec2:	6965      	ldr	r5, [r4, #20]
 8014ec4:	eba0 0b01 	sub.w	fp, r0, r1
 8014ec8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014ecc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014ed0:	f10b 0201 	add.w	r2, fp, #1
 8014ed4:	106d      	asrs	r5, r5, #1
 8014ed6:	4452      	add	r2, sl
 8014ed8:	4295      	cmp	r5, r2
 8014eda:	bf38      	it	cc
 8014edc:	4615      	movcc	r5, r2
 8014ede:	055b      	lsls	r3, r3, #21
 8014ee0:	d53d      	bpl.n	8014f5e <__sfvwrite_r+0x1d2>
 8014ee2:	4629      	mov	r1, r5
 8014ee4:	4630      	mov	r0, r6
 8014ee6:	f7fb ff5d 	bl	8010da4 <_malloc_r>
 8014eea:	b948      	cbnz	r0, 8014f00 <__sfvwrite_r+0x174>
 8014eec:	230c      	movs	r3, #12
 8014eee:	6033      	str	r3, [r6, #0]
 8014ef0:	89a3      	ldrh	r3, [r4, #12]
 8014ef2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014ef6:	81a3      	strh	r3, [r4, #12]
 8014ef8:	e7ad      	b.n	8014e56 <__sfvwrite_r+0xca>
 8014efa:	4699      	mov	r9, r3
 8014efc:	469a      	mov	sl, r3
 8014efe:	e7d2      	b.n	8014ea6 <__sfvwrite_r+0x11a>
 8014f00:	465a      	mov	r2, fp
 8014f02:	6921      	ldr	r1, [r4, #16]
 8014f04:	9001      	str	r0, [sp, #4]
 8014f06:	f000 f91f 	bl	8015148 <memcpy>
 8014f0a:	89a2      	ldrh	r2, [r4, #12]
 8014f0c:	9b01      	ldr	r3, [sp, #4]
 8014f0e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8014f12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8014f16:	81a2      	strh	r2, [r4, #12]
 8014f18:	6123      	str	r3, [r4, #16]
 8014f1a:	6165      	str	r5, [r4, #20]
 8014f1c:	445b      	add	r3, fp
 8014f1e:	eba5 050b 	sub.w	r5, r5, fp
 8014f22:	6023      	str	r3, [r4, #0]
 8014f24:	4652      	mov	r2, sl
 8014f26:	60a5      	str	r5, [r4, #8]
 8014f28:	4552      	cmp	r2, sl
 8014f2a:	bf28      	it	cs
 8014f2c:	4652      	movcs	r2, sl
 8014f2e:	6820      	ldr	r0, [r4, #0]
 8014f30:	9201      	str	r2, [sp, #4]
 8014f32:	4649      	mov	r1, r9
 8014f34:	f000 f916 	bl	8015164 <memmove>
 8014f38:	68a3      	ldr	r3, [r4, #8]
 8014f3a:	9a01      	ldr	r2, [sp, #4]
 8014f3c:	1a9b      	subs	r3, r3, r2
 8014f3e:	60a3      	str	r3, [r4, #8]
 8014f40:	6823      	ldr	r3, [r4, #0]
 8014f42:	441a      	add	r2, r3
 8014f44:	4655      	mov	r5, sl
 8014f46:	6022      	str	r2, [r4, #0]
 8014f48:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8014f4c:	44a9      	add	r9, r5
 8014f4e:	ebaa 0a05 	sub.w	sl, sl, r5
 8014f52:	1b45      	subs	r5, r0, r5
 8014f54:	f8c8 5008 	str.w	r5, [r8, #8]
 8014f58:	2d00      	cmp	r5, #0
 8014f5a:	d1a4      	bne.n	8014ea6 <__sfvwrite_r+0x11a>
 8014f5c:	e71d      	b.n	8014d9a <__sfvwrite_r+0xe>
 8014f5e:	462a      	mov	r2, r5
 8014f60:	4630      	mov	r0, r6
 8014f62:	f000 fc83 	bl	801586c <_realloc_r>
 8014f66:	4603      	mov	r3, r0
 8014f68:	2800      	cmp	r0, #0
 8014f6a:	d1d5      	bne.n	8014f18 <__sfvwrite_r+0x18c>
 8014f6c:	6921      	ldr	r1, [r4, #16]
 8014f6e:	4630      	mov	r0, r6
 8014f70:	f7ff fe4c 	bl	8014c0c <_free_r>
 8014f74:	89a3      	ldrh	r3, [r4, #12]
 8014f76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014f7a:	81a3      	strh	r3, [r4, #12]
 8014f7c:	e7b6      	b.n	8014eec <__sfvwrite_r+0x160>
 8014f7e:	6923      	ldr	r3, [r4, #16]
 8014f80:	4283      	cmp	r3, r0
 8014f82:	d302      	bcc.n	8014f8a <__sfvwrite_r+0x1fe>
 8014f84:	6961      	ldr	r1, [r4, #20]
 8014f86:	4551      	cmp	r1, sl
 8014f88:	d915      	bls.n	8014fb6 <__sfvwrite_r+0x22a>
 8014f8a:	4552      	cmp	r2, sl
 8014f8c:	bf28      	it	cs
 8014f8e:	4652      	movcs	r2, sl
 8014f90:	4649      	mov	r1, r9
 8014f92:	4615      	mov	r5, r2
 8014f94:	f000 f8e6 	bl	8015164 <memmove>
 8014f98:	68a3      	ldr	r3, [r4, #8]
 8014f9a:	6822      	ldr	r2, [r4, #0]
 8014f9c:	1b5b      	subs	r3, r3, r5
 8014f9e:	442a      	add	r2, r5
 8014fa0:	60a3      	str	r3, [r4, #8]
 8014fa2:	6022      	str	r2, [r4, #0]
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d1cf      	bne.n	8014f48 <__sfvwrite_r+0x1bc>
 8014fa8:	4621      	mov	r1, r4
 8014faa:	4630      	mov	r0, r6
 8014fac:	f7ff fd32 	bl	8014a14 <_fflush_r>
 8014fb0:	2800      	cmp	r0, #0
 8014fb2:	d0c9      	beq.n	8014f48 <__sfvwrite_r+0x1bc>
 8014fb4:	e79c      	b.n	8014ef0 <__sfvwrite_r+0x164>
 8014fb6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014fba:	459a      	cmp	sl, r3
 8014fbc:	bf38      	it	cc
 8014fbe:	4653      	movcc	r3, sl
 8014fc0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8014fc2:	fb93 f3f1 	sdiv	r3, r3, r1
 8014fc6:	464a      	mov	r2, r9
 8014fc8:	434b      	muls	r3, r1
 8014fca:	4630      	mov	r0, r6
 8014fcc:	69e1      	ldr	r1, [r4, #28]
 8014fce:	47a8      	blx	r5
 8014fd0:	1e05      	subs	r5, r0, #0
 8014fd2:	dcb9      	bgt.n	8014f48 <__sfvwrite_r+0x1bc>
 8014fd4:	e78c      	b.n	8014ef0 <__sfvwrite_r+0x164>
 8014fd6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8014fda:	2000      	movs	r0, #0
 8014fdc:	3708      	adds	r7, #8
 8014fde:	e6f3      	b.n	8014dc8 <__sfvwrite_r+0x3c>
 8014fe0:	f10b 0901 	add.w	r9, fp, #1
 8014fe4:	e700      	b.n	8014de8 <__sfvwrite_r+0x5c>
 8014fe6:	4293      	cmp	r3, r2
 8014fe8:	dc08      	bgt.n	8014ffc <__sfvwrite_r+0x270>
 8014fea:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8014fec:	69e1      	ldr	r1, [r4, #28]
 8014fee:	4652      	mov	r2, sl
 8014ff0:	4630      	mov	r0, r6
 8014ff2:	47a8      	blx	r5
 8014ff4:	1e05      	subs	r5, r0, #0
 8014ff6:	f73f af13 	bgt.w	8014e20 <__sfvwrite_r+0x94>
 8014ffa:	e779      	b.n	8014ef0 <__sfvwrite_r+0x164>
 8014ffc:	4651      	mov	r1, sl
 8014ffe:	9201      	str	r2, [sp, #4]
 8015000:	f000 f8b0 	bl	8015164 <memmove>
 8015004:	9a01      	ldr	r2, [sp, #4]
 8015006:	68a3      	ldr	r3, [r4, #8]
 8015008:	1a9b      	subs	r3, r3, r2
 801500a:	60a3      	str	r3, [r4, #8]
 801500c:	6823      	ldr	r3, [r4, #0]
 801500e:	4413      	add	r3, r2
 8015010:	6023      	str	r3, [r4, #0]
 8015012:	4615      	mov	r5, r2
 8015014:	e704      	b.n	8014e20 <__sfvwrite_r+0x94>
 8015016:	2001      	movs	r0, #1
 8015018:	e70c      	b.n	8014e34 <__sfvwrite_r+0xa8>
 801501a:	bf00      	nop
 801501c:	7ffffc00 	.word	0x7ffffc00

08015020 <_fwalk_reent>:
 8015020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015024:	4606      	mov	r6, r0
 8015026:	4688      	mov	r8, r1
 8015028:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 801502c:	2700      	movs	r7, #0
 801502e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015032:	f1b9 0901 	subs.w	r9, r9, #1
 8015036:	d505      	bpl.n	8015044 <_fwalk_reent+0x24>
 8015038:	6824      	ldr	r4, [r4, #0]
 801503a:	2c00      	cmp	r4, #0
 801503c:	d1f7      	bne.n	801502e <_fwalk_reent+0xe>
 801503e:	4638      	mov	r0, r7
 8015040:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015044:	89ab      	ldrh	r3, [r5, #12]
 8015046:	2b01      	cmp	r3, #1
 8015048:	d907      	bls.n	801505a <_fwalk_reent+0x3a>
 801504a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801504e:	3301      	adds	r3, #1
 8015050:	d003      	beq.n	801505a <_fwalk_reent+0x3a>
 8015052:	4629      	mov	r1, r5
 8015054:	4630      	mov	r0, r6
 8015056:	47c0      	blx	r8
 8015058:	4307      	orrs	r7, r0
 801505a:	3568      	adds	r5, #104	; 0x68
 801505c:	e7e9      	b.n	8015032 <_fwalk_reent+0x12>
	...

08015060 <_localeconv_r>:
 8015060:	4800      	ldr	r0, [pc, #0]	; (8015064 <_localeconv_r+0x4>)
 8015062:	4770      	bx	lr
 8015064:	20000d3c 	.word	0x20000d3c

08015068 <__retarget_lock_init_recursive>:
 8015068:	4770      	bx	lr

0801506a <__retarget_lock_close_recursive>:
 801506a:	4770      	bx	lr

0801506c <__retarget_lock_acquire_recursive>:
 801506c:	4770      	bx	lr

0801506e <__retarget_lock_release_recursive>:
 801506e:	4770      	bx	lr

08015070 <__swhatbuf_r>:
 8015070:	b570      	push	{r4, r5, r6, lr}
 8015072:	460e      	mov	r6, r1
 8015074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015078:	2900      	cmp	r1, #0
 801507a:	b096      	sub	sp, #88	; 0x58
 801507c:	4614      	mov	r4, r2
 801507e:	461d      	mov	r5, r3
 8015080:	da0a      	bge.n	8015098 <__swhatbuf_r+0x28>
 8015082:	f9b6 100c 	ldrsh.w	r1, [r6, #12]
 8015086:	2300      	movs	r3, #0
 8015088:	f011 0080 	ands.w	r0, r1, #128	; 0x80
 801508c:	602b      	str	r3, [r5, #0]
 801508e:	d116      	bne.n	80150be <__swhatbuf_r+0x4e>
 8015090:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015094:	6023      	str	r3, [r4, #0]
 8015096:	e015      	b.n	80150c4 <__swhatbuf_r+0x54>
 8015098:	466a      	mov	r2, sp
 801509a:	f001 fd77 	bl	8016b8c <_fstat_r>
 801509e:	2800      	cmp	r0, #0
 80150a0:	dbef      	blt.n	8015082 <__swhatbuf_r+0x12>
 80150a2:	9a01      	ldr	r2, [sp, #4]
 80150a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80150a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80150ac:	425a      	negs	r2, r3
 80150ae:	415a      	adcs	r2, r3
 80150b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80150b4:	602a      	str	r2, [r5, #0]
 80150b6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80150ba:	6023      	str	r3, [r4, #0]
 80150bc:	e002      	b.n	80150c4 <__swhatbuf_r+0x54>
 80150be:	2240      	movs	r2, #64	; 0x40
 80150c0:	6022      	str	r2, [r4, #0]
 80150c2:	4618      	mov	r0, r3
 80150c4:	b016      	add	sp, #88	; 0x58
 80150c6:	bd70      	pop	{r4, r5, r6, pc}

080150c8 <__smakebuf_r>:
 80150c8:	898b      	ldrh	r3, [r1, #12]
 80150ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80150cc:	079d      	lsls	r5, r3, #30
 80150ce:	4606      	mov	r6, r0
 80150d0:	460c      	mov	r4, r1
 80150d2:	d507      	bpl.n	80150e4 <__smakebuf_r+0x1c>
 80150d4:	f104 0343 	add.w	r3, r4, #67	; 0x43
 80150d8:	6023      	str	r3, [r4, #0]
 80150da:	6123      	str	r3, [r4, #16]
 80150dc:	2301      	movs	r3, #1
 80150de:	6163      	str	r3, [r4, #20]
 80150e0:	b002      	add	sp, #8
 80150e2:	bd70      	pop	{r4, r5, r6, pc}
 80150e4:	ab01      	add	r3, sp, #4
 80150e6:	466a      	mov	r2, sp
 80150e8:	f7ff ffc2 	bl	8015070 <__swhatbuf_r>
 80150ec:	9900      	ldr	r1, [sp, #0]
 80150ee:	4605      	mov	r5, r0
 80150f0:	4630      	mov	r0, r6
 80150f2:	f7fb fe57 	bl	8010da4 <_malloc_r>
 80150f6:	b948      	cbnz	r0, 801510c <__smakebuf_r+0x44>
 80150f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80150fc:	059a      	lsls	r2, r3, #22
 80150fe:	d4ef      	bmi.n	80150e0 <__smakebuf_r+0x18>
 8015100:	f023 0303 	bic.w	r3, r3, #3
 8015104:	f043 0302 	orr.w	r3, r3, #2
 8015108:	81a3      	strh	r3, [r4, #12]
 801510a:	e7e3      	b.n	80150d4 <__smakebuf_r+0xc>
 801510c:	4b0d      	ldr	r3, [pc, #52]	; (8015144 <__smakebuf_r+0x7c>)
 801510e:	63f3      	str	r3, [r6, #60]	; 0x3c
 8015110:	89a3      	ldrh	r3, [r4, #12]
 8015112:	6020      	str	r0, [r4, #0]
 8015114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015118:	81a3      	strh	r3, [r4, #12]
 801511a:	9b00      	ldr	r3, [sp, #0]
 801511c:	6163      	str	r3, [r4, #20]
 801511e:	9b01      	ldr	r3, [sp, #4]
 8015120:	6120      	str	r0, [r4, #16]
 8015122:	b15b      	cbz	r3, 801513c <__smakebuf_r+0x74>
 8015124:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015128:	4630      	mov	r0, r6
 801512a:	f001 fd41 	bl	8016bb0 <_isatty_r>
 801512e:	b128      	cbz	r0, 801513c <__smakebuf_r+0x74>
 8015130:	89a3      	ldrh	r3, [r4, #12]
 8015132:	f023 0303 	bic.w	r3, r3, #3
 8015136:	f043 0301 	orr.w	r3, r3, #1
 801513a:	81a3      	strh	r3, [r4, #12]
 801513c:	89a0      	ldrh	r0, [r4, #12]
 801513e:	4305      	orrs	r5, r0
 8015140:	81a5      	strh	r5, [r4, #12]
 8015142:	e7cd      	b.n	80150e0 <__smakebuf_r+0x18>
 8015144:	08014ab1 	.word	0x08014ab1

08015148 <memcpy>:
 8015148:	440a      	add	r2, r1
 801514a:	4291      	cmp	r1, r2
 801514c:	f100 33ff 	add.w	r3, r0, #4294967295
 8015150:	d100      	bne.n	8015154 <memcpy+0xc>
 8015152:	4770      	bx	lr
 8015154:	b510      	push	{r4, lr}
 8015156:	f811 4b01 	ldrb.w	r4, [r1], #1
 801515a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801515e:	4291      	cmp	r1, r2
 8015160:	d1f9      	bne.n	8015156 <memcpy+0xe>
 8015162:	bd10      	pop	{r4, pc}

08015164 <memmove>:
 8015164:	4288      	cmp	r0, r1
 8015166:	b510      	push	{r4, lr}
 8015168:	eb01 0402 	add.w	r4, r1, r2
 801516c:	d902      	bls.n	8015174 <memmove+0x10>
 801516e:	4284      	cmp	r4, r0
 8015170:	4623      	mov	r3, r4
 8015172:	d807      	bhi.n	8015184 <memmove+0x20>
 8015174:	1e43      	subs	r3, r0, #1
 8015176:	42a1      	cmp	r1, r4
 8015178:	d008      	beq.n	801518c <memmove+0x28>
 801517a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801517e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015182:	e7f8      	b.n	8015176 <memmove+0x12>
 8015184:	4402      	add	r2, r0
 8015186:	4601      	mov	r1, r0
 8015188:	428a      	cmp	r2, r1
 801518a:	d100      	bne.n	801518e <memmove+0x2a>
 801518c:	bd10      	pop	{r4, pc}
 801518e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015192:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015196:	e7f7      	b.n	8015188 <memmove+0x24>

08015198 <_Balloc>:
 8015198:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801519a:	b570      	push	{r4, r5, r6, lr}
 801519c:	4605      	mov	r5, r0
 801519e:	460c      	mov	r4, r1
 80151a0:	b17b      	cbz	r3, 80151c2 <_Balloc+0x2a>
 80151a2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80151a4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80151a8:	b9a0      	cbnz	r0, 80151d4 <_Balloc+0x3c>
 80151aa:	2101      	movs	r1, #1
 80151ac:	fa01 f604 	lsl.w	r6, r1, r4
 80151b0:	1d72      	adds	r2, r6, #5
 80151b2:	0092      	lsls	r2, r2, #2
 80151b4:	4628      	mov	r0, r5
 80151b6:	f001 fbcd 	bl	8016954 <_calloc_r>
 80151ba:	b148      	cbz	r0, 80151d0 <_Balloc+0x38>
 80151bc:	e9c0 4601 	strd	r4, r6, [r0, #4]
 80151c0:	e00b      	b.n	80151da <_Balloc+0x42>
 80151c2:	2221      	movs	r2, #33	; 0x21
 80151c4:	2104      	movs	r1, #4
 80151c6:	f001 fbc5 	bl	8016954 <_calloc_r>
 80151ca:	64e8      	str	r0, [r5, #76]	; 0x4c
 80151cc:	2800      	cmp	r0, #0
 80151ce:	d1e8      	bne.n	80151a2 <_Balloc+0xa>
 80151d0:	2000      	movs	r0, #0
 80151d2:	bd70      	pop	{r4, r5, r6, pc}
 80151d4:	6802      	ldr	r2, [r0, #0]
 80151d6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80151da:	2300      	movs	r3, #0
 80151dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80151e0:	e7f7      	b.n	80151d2 <_Balloc+0x3a>

080151e2 <_Bfree>:
 80151e2:	b131      	cbz	r1, 80151f2 <_Bfree+0x10>
 80151e4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80151e6:	684a      	ldr	r2, [r1, #4]
 80151e8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80151ec:	6008      	str	r0, [r1, #0]
 80151ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80151f2:	4770      	bx	lr

080151f4 <__multadd>:
 80151f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151f8:	690d      	ldr	r5, [r1, #16]
 80151fa:	4607      	mov	r7, r0
 80151fc:	460c      	mov	r4, r1
 80151fe:	461e      	mov	r6, r3
 8015200:	f101 0c14 	add.w	ip, r1, #20
 8015204:	2000      	movs	r0, #0
 8015206:	f8dc 3000 	ldr.w	r3, [ip]
 801520a:	b299      	uxth	r1, r3
 801520c:	fb02 6101 	mla	r1, r2, r1, r6
 8015210:	0c1e      	lsrs	r6, r3, #16
 8015212:	0c0b      	lsrs	r3, r1, #16
 8015214:	fb02 3306 	mla	r3, r2, r6, r3
 8015218:	b289      	uxth	r1, r1
 801521a:	3001      	adds	r0, #1
 801521c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015220:	4285      	cmp	r5, r0
 8015222:	f84c 1b04 	str.w	r1, [ip], #4
 8015226:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801522a:	dcec      	bgt.n	8015206 <__multadd+0x12>
 801522c:	b30e      	cbz	r6, 8015272 <__multadd+0x7e>
 801522e:	68a3      	ldr	r3, [r4, #8]
 8015230:	42ab      	cmp	r3, r5
 8015232:	dc19      	bgt.n	8015268 <__multadd+0x74>
 8015234:	6861      	ldr	r1, [r4, #4]
 8015236:	4638      	mov	r0, r7
 8015238:	3101      	adds	r1, #1
 801523a:	f7ff ffad 	bl	8015198 <_Balloc>
 801523e:	4680      	mov	r8, r0
 8015240:	b928      	cbnz	r0, 801524e <__multadd+0x5a>
 8015242:	4602      	mov	r2, r0
 8015244:	4b0c      	ldr	r3, [pc, #48]	; (8015278 <__multadd+0x84>)
 8015246:	480d      	ldr	r0, [pc, #52]	; (801527c <__multadd+0x88>)
 8015248:	21b5      	movs	r1, #181	; 0xb5
 801524a:	f001 fb65 	bl	8016918 <__assert_func>
 801524e:	6922      	ldr	r2, [r4, #16]
 8015250:	3202      	adds	r2, #2
 8015252:	f104 010c 	add.w	r1, r4, #12
 8015256:	0092      	lsls	r2, r2, #2
 8015258:	300c      	adds	r0, #12
 801525a:	f7ff ff75 	bl	8015148 <memcpy>
 801525e:	4621      	mov	r1, r4
 8015260:	4638      	mov	r0, r7
 8015262:	f7ff ffbe 	bl	80151e2 <_Bfree>
 8015266:	4644      	mov	r4, r8
 8015268:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801526c:	3501      	adds	r5, #1
 801526e:	615e      	str	r6, [r3, #20]
 8015270:	6125      	str	r5, [r4, #16]
 8015272:	4620      	mov	r0, r4
 8015274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015278:	080177ed 	.word	0x080177ed
 801527c:	08017859 	.word	0x08017859

08015280 <__hi0bits>:
 8015280:	0c03      	lsrs	r3, r0, #16
 8015282:	041b      	lsls	r3, r3, #16
 8015284:	b9d3      	cbnz	r3, 80152bc <__hi0bits+0x3c>
 8015286:	0400      	lsls	r0, r0, #16
 8015288:	2310      	movs	r3, #16
 801528a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801528e:	bf04      	itt	eq
 8015290:	0200      	lsleq	r0, r0, #8
 8015292:	3308      	addeq	r3, #8
 8015294:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015298:	bf04      	itt	eq
 801529a:	0100      	lsleq	r0, r0, #4
 801529c:	3304      	addeq	r3, #4
 801529e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80152a2:	bf04      	itt	eq
 80152a4:	0080      	lsleq	r0, r0, #2
 80152a6:	3302      	addeq	r3, #2
 80152a8:	2800      	cmp	r0, #0
 80152aa:	db05      	blt.n	80152b8 <__hi0bits+0x38>
 80152ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80152b0:	f103 0301 	add.w	r3, r3, #1
 80152b4:	bf08      	it	eq
 80152b6:	2320      	moveq	r3, #32
 80152b8:	4618      	mov	r0, r3
 80152ba:	4770      	bx	lr
 80152bc:	2300      	movs	r3, #0
 80152be:	e7e4      	b.n	801528a <__hi0bits+0xa>

080152c0 <__lo0bits>:
 80152c0:	6803      	ldr	r3, [r0, #0]
 80152c2:	f013 0207 	ands.w	r2, r3, #7
 80152c6:	4601      	mov	r1, r0
 80152c8:	d00b      	beq.n	80152e2 <__lo0bits+0x22>
 80152ca:	07da      	lsls	r2, r3, #31
 80152cc:	d423      	bmi.n	8015316 <__lo0bits+0x56>
 80152ce:	0798      	lsls	r0, r3, #30
 80152d0:	bf49      	itett	mi
 80152d2:	085b      	lsrmi	r3, r3, #1
 80152d4:	089b      	lsrpl	r3, r3, #2
 80152d6:	2001      	movmi	r0, #1
 80152d8:	600b      	strmi	r3, [r1, #0]
 80152da:	bf5c      	itt	pl
 80152dc:	600b      	strpl	r3, [r1, #0]
 80152de:	2002      	movpl	r0, #2
 80152e0:	4770      	bx	lr
 80152e2:	b298      	uxth	r0, r3
 80152e4:	b9a8      	cbnz	r0, 8015312 <__lo0bits+0x52>
 80152e6:	0c1b      	lsrs	r3, r3, #16
 80152e8:	2010      	movs	r0, #16
 80152ea:	b2da      	uxtb	r2, r3
 80152ec:	b90a      	cbnz	r2, 80152f2 <__lo0bits+0x32>
 80152ee:	3008      	adds	r0, #8
 80152f0:	0a1b      	lsrs	r3, r3, #8
 80152f2:	071a      	lsls	r2, r3, #28
 80152f4:	bf04      	itt	eq
 80152f6:	091b      	lsreq	r3, r3, #4
 80152f8:	3004      	addeq	r0, #4
 80152fa:	079a      	lsls	r2, r3, #30
 80152fc:	bf04      	itt	eq
 80152fe:	089b      	lsreq	r3, r3, #2
 8015300:	3002      	addeq	r0, #2
 8015302:	07da      	lsls	r2, r3, #31
 8015304:	d403      	bmi.n	801530e <__lo0bits+0x4e>
 8015306:	085b      	lsrs	r3, r3, #1
 8015308:	f100 0001 	add.w	r0, r0, #1
 801530c:	d005      	beq.n	801531a <__lo0bits+0x5a>
 801530e:	600b      	str	r3, [r1, #0]
 8015310:	4770      	bx	lr
 8015312:	4610      	mov	r0, r2
 8015314:	e7e9      	b.n	80152ea <__lo0bits+0x2a>
 8015316:	2000      	movs	r0, #0
 8015318:	4770      	bx	lr
 801531a:	2020      	movs	r0, #32
 801531c:	4770      	bx	lr
	...

08015320 <__i2b>:
 8015320:	b510      	push	{r4, lr}
 8015322:	460c      	mov	r4, r1
 8015324:	2101      	movs	r1, #1
 8015326:	f7ff ff37 	bl	8015198 <_Balloc>
 801532a:	4602      	mov	r2, r0
 801532c:	b928      	cbnz	r0, 801533a <__i2b+0x1a>
 801532e:	4b05      	ldr	r3, [pc, #20]	; (8015344 <__i2b+0x24>)
 8015330:	4805      	ldr	r0, [pc, #20]	; (8015348 <__i2b+0x28>)
 8015332:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8015336:	f001 faef 	bl	8016918 <__assert_func>
 801533a:	2301      	movs	r3, #1
 801533c:	6144      	str	r4, [r0, #20]
 801533e:	6103      	str	r3, [r0, #16]
 8015340:	bd10      	pop	{r4, pc}
 8015342:	bf00      	nop
 8015344:	080177ed 	.word	0x080177ed
 8015348:	08017859 	.word	0x08017859

0801534c <__multiply>:
 801534c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015350:	4691      	mov	r9, r2
 8015352:	690a      	ldr	r2, [r1, #16]
 8015354:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015358:	429a      	cmp	r2, r3
 801535a:	bfb8      	it	lt
 801535c:	460b      	movlt	r3, r1
 801535e:	460c      	mov	r4, r1
 8015360:	bfbc      	itt	lt
 8015362:	464c      	movlt	r4, r9
 8015364:	4699      	movlt	r9, r3
 8015366:	6927      	ldr	r7, [r4, #16]
 8015368:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801536c:	68a3      	ldr	r3, [r4, #8]
 801536e:	6861      	ldr	r1, [r4, #4]
 8015370:	eb07 060a 	add.w	r6, r7, sl
 8015374:	42b3      	cmp	r3, r6
 8015376:	b085      	sub	sp, #20
 8015378:	bfb8      	it	lt
 801537a:	3101      	addlt	r1, #1
 801537c:	f7ff ff0c 	bl	8015198 <_Balloc>
 8015380:	b930      	cbnz	r0, 8015390 <__multiply+0x44>
 8015382:	4602      	mov	r2, r0
 8015384:	4b44      	ldr	r3, [pc, #272]	; (8015498 <__multiply+0x14c>)
 8015386:	4845      	ldr	r0, [pc, #276]	; (801549c <__multiply+0x150>)
 8015388:	f240 115d 	movw	r1, #349	; 0x15d
 801538c:	f001 fac4 	bl	8016918 <__assert_func>
 8015390:	f100 0514 	add.w	r5, r0, #20
 8015394:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015398:	462b      	mov	r3, r5
 801539a:	2200      	movs	r2, #0
 801539c:	4543      	cmp	r3, r8
 801539e:	d321      	bcc.n	80153e4 <__multiply+0x98>
 80153a0:	f104 0314 	add.w	r3, r4, #20
 80153a4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80153a8:	f109 0314 	add.w	r3, r9, #20
 80153ac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80153b0:	9202      	str	r2, [sp, #8]
 80153b2:	1b3a      	subs	r2, r7, r4
 80153b4:	3a15      	subs	r2, #21
 80153b6:	f022 0203 	bic.w	r2, r2, #3
 80153ba:	3204      	adds	r2, #4
 80153bc:	f104 0115 	add.w	r1, r4, #21
 80153c0:	428f      	cmp	r7, r1
 80153c2:	bf38      	it	cc
 80153c4:	2204      	movcc	r2, #4
 80153c6:	9201      	str	r2, [sp, #4]
 80153c8:	9a02      	ldr	r2, [sp, #8]
 80153ca:	9303      	str	r3, [sp, #12]
 80153cc:	429a      	cmp	r2, r3
 80153ce:	d80c      	bhi.n	80153ea <__multiply+0x9e>
 80153d0:	2e00      	cmp	r6, #0
 80153d2:	dd03      	ble.n	80153dc <__multiply+0x90>
 80153d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d05a      	beq.n	8015492 <__multiply+0x146>
 80153dc:	6106      	str	r6, [r0, #16]
 80153de:	b005      	add	sp, #20
 80153e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153e4:	f843 2b04 	str.w	r2, [r3], #4
 80153e8:	e7d8      	b.n	801539c <__multiply+0x50>
 80153ea:	f8b3 a000 	ldrh.w	sl, [r3]
 80153ee:	f1ba 0f00 	cmp.w	sl, #0
 80153f2:	d024      	beq.n	801543e <__multiply+0xf2>
 80153f4:	f104 0e14 	add.w	lr, r4, #20
 80153f8:	46a9      	mov	r9, r5
 80153fa:	f04f 0c00 	mov.w	ip, #0
 80153fe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8015402:	f8d9 1000 	ldr.w	r1, [r9]
 8015406:	fa1f fb82 	uxth.w	fp, r2
 801540a:	b289      	uxth	r1, r1
 801540c:	fb0a 110b 	mla	r1, sl, fp, r1
 8015410:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8015414:	f8d9 2000 	ldr.w	r2, [r9]
 8015418:	4461      	add	r1, ip
 801541a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801541e:	fb0a c20b 	mla	r2, sl, fp, ip
 8015422:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015426:	b289      	uxth	r1, r1
 8015428:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801542c:	4577      	cmp	r7, lr
 801542e:	f849 1b04 	str.w	r1, [r9], #4
 8015432:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015436:	d8e2      	bhi.n	80153fe <__multiply+0xb2>
 8015438:	9a01      	ldr	r2, [sp, #4]
 801543a:	f845 c002 	str.w	ip, [r5, r2]
 801543e:	9a03      	ldr	r2, [sp, #12]
 8015440:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015444:	3304      	adds	r3, #4
 8015446:	f1b9 0f00 	cmp.w	r9, #0
 801544a:	d020      	beq.n	801548e <__multiply+0x142>
 801544c:	6829      	ldr	r1, [r5, #0]
 801544e:	f104 0c14 	add.w	ip, r4, #20
 8015452:	46ae      	mov	lr, r5
 8015454:	f04f 0a00 	mov.w	sl, #0
 8015458:	f8bc b000 	ldrh.w	fp, [ip]
 801545c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8015460:	fb09 220b 	mla	r2, r9, fp, r2
 8015464:	4492      	add	sl, r2
 8015466:	b289      	uxth	r1, r1
 8015468:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801546c:	f84e 1b04 	str.w	r1, [lr], #4
 8015470:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015474:	f8be 1000 	ldrh.w	r1, [lr]
 8015478:	0c12      	lsrs	r2, r2, #16
 801547a:	fb09 1102 	mla	r1, r9, r2, r1
 801547e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8015482:	4567      	cmp	r7, ip
 8015484:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015488:	d8e6      	bhi.n	8015458 <__multiply+0x10c>
 801548a:	9a01      	ldr	r2, [sp, #4]
 801548c:	50a9      	str	r1, [r5, r2]
 801548e:	3504      	adds	r5, #4
 8015490:	e79a      	b.n	80153c8 <__multiply+0x7c>
 8015492:	3e01      	subs	r6, #1
 8015494:	e79c      	b.n	80153d0 <__multiply+0x84>
 8015496:	bf00      	nop
 8015498:	080177ed 	.word	0x080177ed
 801549c:	08017859 	.word	0x08017859

080154a0 <__pow5mult>:
 80154a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80154a4:	4615      	mov	r5, r2
 80154a6:	f012 0203 	ands.w	r2, r2, #3
 80154aa:	4606      	mov	r6, r0
 80154ac:	460f      	mov	r7, r1
 80154ae:	d007      	beq.n	80154c0 <__pow5mult+0x20>
 80154b0:	4c1a      	ldr	r4, [pc, #104]	; (801551c <__pow5mult+0x7c>)
 80154b2:	3a01      	subs	r2, #1
 80154b4:	2300      	movs	r3, #0
 80154b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80154ba:	f7ff fe9b 	bl	80151f4 <__multadd>
 80154be:	4607      	mov	r7, r0
 80154c0:	10ad      	asrs	r5, r5, #2
 80154c2:	d027      	beq.n	8015514 <__pow5mult+0x74>
 80154c4:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 80154c6:	b944      	cbnz	r4, 80154da <__pow5mult+0x3a>
 80154c8:	f240 2171 	movw	r1, #625	; 0x271
 80154cc:	4630      	mov	r0, r6
 80154ce:	f7ff ff27 	bl	8015320 <__i2b>
 80154d2:	2300      	movs	r3, #0
 80154d4:	64b0      	str	r0, [r6, #72]	; 0x48
 80154d6:	4604      	mov	r4, r0
 80154d8:	6003      	str	r3, [r0, #0]
 80154da:	f04f 0900 	mov.w	r9, #0
 80154de:	07eb      	lsls	r3, r5, #31
 80154e0:	d50a      	bpl.n	80154f8 <__pow5mult+0x58>
 80154e2:	4639      	mov	r1, r7
 80154e4:	4622      	mov	r2, r4
 80154e6:	4630      	mov	r0, r6
 80154e8:	f7ff ff30 	bl	801534c <__multiply>
 80154ec:	4639      	mov	r1, r7
 80154ee:	4680      	mov	r8, r0
 80154f0:	4630      	mov	r0, r6
 80154f2:	f7ff fe76 	bl	80151e2 <_Bfree>
 80154f6:	4647      	mov	r7, r8
 80154f8:	106d      	asrs	r5, r5, #1
 80154fa:	d00b      	beq.n	8015514 <__pow5mult+0x74>
 80154fc:	6820      	ldr	r0, [r4, #0]
 80154fe:	b938      	cbnz	r0, 8015510 <__pow5mult+0x70>
 8015500:	4622      	mov	r2, r4
 8015502:	4621      	mov	r1, r4
 8015504:	4630      	mov	r0, r6
 8015506:	f7ff ff21 	bl	801534c <__multiply>
 801550a:	6020      	str	r0, [r4, #0]
 801550c:	f8c0 9000 	str.w	r9, [r0]
 8015510:	4604      	mov	r4, r0
 8015512:	e7e4      	b.n	80154de <__pow5mult+0x3e>
 8015514:	4638      	mov	r0, r7
 8015516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801551a:	bf00      	nop
 801551c:	080179a8 	.word	0x080179a8

08015520 <__lshift>:
 8015520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015524:	460c      	mov	r4, r1
 8015526:	6849      	ldr	r1, [r1, #4]
 8015528:	6923      	ldr	r3, [r4, #16]
 801552a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801552e:	68a3      	ldr	r3, [r4, #8]
 8015530:	4607      	mov	r7, r0
 8015532:	4691      	mov	r9, r2
 8015534:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015538:	f108 0601 	add.w	r6, r8, #1
 801553c:	42b3      	cmp	r3, r6
 801553e:	db0b      	blt.n	8015558 <__lshift+0x38>
 8015540:	4638      	mov	r0, r7
 8015542:	f7ff fe29 	bl	8015198 <_Balloc>
 8015546:	4605      	mov	r5, r0
 8015548:	b948      	cbnz	r0, 801555e <__lshift+0x3e>
 801554a:	4602      	mov	r2, r0
 801554c:	4b2a      	ldr	r3, [pc, #168]	; (80155f8 <__lshift+0xd8>)
 801554e:	482b      	ldr	r0, [pc, #172]	; (80155fc <__lshift+0xdc>)
 8015550:	f240 11d9 	movw	r1, #473	; 0x1d9
 8015554:	f001 f9e0 	bl	8016918 <__assert_func>
 8015558:	3101      	adds	r1, #1
 801555a:	005b      	lsls	r3, r3, #1
 801555c:	e7ee      	b.n	801553c <__lshift+0x1c>
 801555e:	2300      	movs	r3, #0
 8015560:	f100 0114 	add.w	r1, r0, #20
 8015564:	f100 0210 	add.w	r2, r0, #16
 8015568:	4618      	mov	r0, r3
 801556a:	4553      	cmp	r3, sl
 801556c:	db37      	blt.n	80155de <__lshift+0xbe>
 801556e:	6920      	ldr	r0, [r4, #16]
 8015570:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015574:	f104 0314 	add.w	r3, r4, #20
 8015578:	f019 091f 	ands.w	r9, r9, #31
 801557c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015580:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8015584:	d02f      	beq.n	80155e6 <__lshift+0xc6>
 8015586:	f1c9 0e20 	rsb	lr, r9, #32
 801558a:	468a      	mov	sl, r1
 801558c:	f04f 0c00 	mov.w	ip, #0
 8015590:	681a      	ldr	r2, [r3, #0]
 8015592:	fa02 f209 	lsl.w	r2, r2, r9
 8015596:	ea42 020c 	orr.w	r2, r2, ip
 801559a:	f84a 2b04 	str.w	r2, [sl], #4
 801559e:	f853 2b04 	ldr.w	r2, [r3], #4
 80155a2:	4298      	cmp	r0, r3
 80155a4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80155a8:	d8f2      	bhi.n	8015590 <__lshift+0x70>
 80155aa:	1b03      	subs	r3, r0, r4
 80155ac:	3b15      	subs	r3, #21
 80155ae:	f023 0303 	bic.w	r3, r3, #3
 80155b2:	3304      	adds	r3, #4
 80155b4:	f104 0215 	add.w	r2, r4, #21
 80155b8:	4290      	cmp	r0, r2
 80155ba:	bf38      	it	cc
 80155bc:	2304      	movcc	r3, #4
 80155be:	f841 c003 	str.w	ip, [r1, r3]
 80155c2:	f1bc 0f00 	cmp.w	ip, #0
 80155c6:	d001      	beq.n	80155cc <__lshift+0xac>
 80155c8:	f108 0602 	add.w	r6, r8, #2
 80155cc:	3e01      	subs	r6, #1
 80155ce:	4638      	mov	r0, r7
 80155d0:	612e      	str	r6, [r5, #16]
 80155d2:	4621      	mov	r1, r4
 80155d4:	f7ff fe05 	bl	80151e2 <_Bfree>
 80155d8:	4628      	mov	r0, r5
 80155da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80155de:	f842 0f04 	str.w	r0, [r2, #4]!
 80155e2:	3301      	adds	r3, #1
 80155e4:	e7c1      	b.n	801556a <__lshift+0x4a>
 80155e6:	3904      	subs	r1, #4
 80155e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80155ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80155f0:	4298      	cmp	r0, r3
 80155f2:	d8f9      	bhi.n	80155e8 <__lshift+0xc8>
 80155f4:	e7ea      	b.n	80155cc <__lshift+0xac>
 80155f6:	bf00      	nop
 80155f8:	080177ed 	.word	0x080177ed
 80155fc:	08017859 	.word	0x08017859

08015600 <__mcmp>:
 8015600:	b530      	push	{r4, r5, lr}
 8015602:	6902      	ldr	r2, [r0, #16]
 8015604:	690c      	ldr	r4, [r1, #16]
 8015606:	1b12      	subs	r2, r2, r4
 8015608:	d10e      	bne.n	8015628 <__mcmp+0x28>
 801560a:	f100 0314 	add.w	r3, r0, #20
 801560e:	3114      	adds	r1, #20
 8015610:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015614:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015618:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801561c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015620:	42a5      	cmp	r5, r4
 8015622:	d003      	beq.n	801562c <__mcmp+0x2c>
 8015624:	d305      	bcc.n	8015632 <__mcmp+0x32>
 8015626:	2201      	movs	r2, #1
 8015628:	4610      	mov	r0, r2
 801562a:	bd30      	pop	{r4, r5, pc}
 801562c:	4283      	cmp	r3, r0
 801562e:	d3f3      	bcc.n	8015618 <__mcmp+0x18>
 8015630:	e7fa      	b.n	8015628 <__mcmp+0x28>
 8015632:	f04f 32ff 	mov.w	r2, #4294967295
 8015636:	e7f7      	b.n	8015628 <__mcmp+0x28>

08015638 <__mdiff>:
 8015638:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801563c:	460c      	mov	r4, r1
 801563e:	4606      	mov	r6, r0
 8015640:	4611      	mov	r1, r2
 8015642:	4620      	mov	r0, r4
 8015644:	4690      	mov	r8, r2
 8015646:	f7ff ffdb 	bl	8015600 <__mcmp>
 801564a:	1e05      	subs	r5, r0, #0
 801564c:	d110      	bne.n	8015670 <__mdiff+0x38>
 801564e:	4629      	mov	r1, r5
 8015650:	4630      	mov	r0, r6
 8015652:	f7ff fda1 	bl	8015198 <_Balloc>
 8015656:	b930      	cbnz	r0, 8015666 <__mdiff+0x2e>
 8015658:	4b3a      	ldr	r3, [pc, #232]	; (8015744 <__mdiff+0x10c>)
 801565a:	4602      	mov	r2, r0
 801565c:	f240 2132 	movw	r1, #562	; 0x232
 8015660:	4839      	ldr	r0, [pc, #228]	; (8015748 <__mdiff+0x110>)
 8015662:	f001 f959 	bl	8016918 <__assert_func>
 8015666:	2301      	movs	r3, #1
 8015668:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801566c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015670:	bfa4      	itt	ge
 8015672:	4643      	movge	r3, r8
 8015674:	46a0      	movge	r8, r4
 8015676:	4630      	mov	r0, r6
 8015678:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801567c:	bfa6      	itte	ge
 801567e:	461c      	movge	r4, r3
 8015680:	2500      	movge	r5, #0
 8015682:	2501      	movlt	r5, #1
 8015684:	f7ff fd88 	bl	8015198 <_Balloc>
 8015688:	b920      	cbnz	r0, 8015694 <__mdiff+0x5c>
 801568a:	4b2e      	ldr	r3, [pc, #184]	; (8015744 <__mdiff+0x10c>)
 801568c:	4602      	mov	r2, r0
 801568e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8015692:	e7e5      	b.n	8015660 <__mdiff+0x28>
 8015694:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015698:	6926      	ldr	r6, [r4, #16]
 801569a:	60c5      	str	r5, [r0, #12]
 801569c:	f104 0914 	add.w	r9, r4, #20
 80156a0:	f108 0514 	add.w	r5, r8, #20
 80156a4:	f100 0e14 	add.w	lr, r0, #20
 80156a8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80156ac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80156b0:	f108 0210 	add.w	r2, r8, #16
 80156b4:	46f2      	mov	sl, lr
 80156b6:	2100      	movs	r1, #0
 80156b8:	f859 3b04 	ldr.w	r3, [r9], #4
 80156bc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80156c0:	fa1f f883 	uxth.w	r8, r3
 80156c4:	fa11 f18b 	uxtah	r1, r1, fp
 80156c8:	0c1b      	lsrs	r3, r3, #16
 80156ca:	eba1 0808 	sub.w	r8, r1, r8
 80156ce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80156d2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80156d6:	fa1f f888 	uxth.w	r8, r8
 80156da:	1419      	asrs	r1, r3, #16
 80156dc:	454e      	cmp	r6, r9
 80156de:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80156e2:	f84a 3b04 	str.w	r3, [sl], #4
 80156e6:	d8e7      	bhi.n	80156b8 <__mdiff+0x80>
 80156e8:	1b33      	subs	r3, r6, r4
 80156ea:	3b15      	subs	r3, #21
 80156ec:	f023 0303 	bic.w	r3, r3, #3
 80156f0:	3304      	adds	r3, #4
 80156f2:	3415      	adds	r4, #21
 80156f4:	42a6      	cmp	r6, r4
 80156f6:	bf38      	it	cc
 80156f8:	2304      	movcc	r3, #4
 80156fa:	441d      	add	r5, r3
 80156fc:	4473      	add	r3, lr
 80156fe:	469e      	mov	lr, r3
 8015700:	462e      	mov	r6, r5
 8015702:	4566      	cmp	r6, ip
 8015704:	d30e      	bcc.n	8015724 <__mdiff+0xec>
 8015706:	f10c 0203 	add.w	r2, ip, #3
 801570a:	1b52      	subs	r2, r2, r5
 801570c:	f022 0203 	bic.w	r2, r2, #3
 8015710:	3d03      	subs	r5, #3
 8015712:	45ac      	cmp	ip, r5
 8015714:	bf38      	it	cc
 8015716:	2200      	movcc	r2, #0
 8015718:	441a      	add	r2, r3
 801571a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801571e:	b17b      	cbz	r3, 8015740 <__mdiff+0x108>
 8015720:	6107      	str	r7, [r0, #16]
 8015722:	e7a3      	b.n	801566c <__mdiff+0x34>
 8015724:	f856 8b04 	ldr.w	r8, [r6], #4
 8015728:	fa11 f288 	uxtah	r2, r1, r8
 801572c:	1414      	asrs	r4, r2, #16
 801572e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8015732:	b292      	uxth	r2, r2
 8015734:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8015738:	f84e 2b04 	str.w	r2, [lr], #4
 801573c:	1421      	asrs	r1, r4, #16
 801573e:	e7e0      	b.n	8015702 <__mdiff+0xca>
 8015740:	3f01      	subs	r7, #1
 8015742:	e7ea      	b.n	801571a <__mdiff+0xe2>
 8015744:	080177ed 	.word	0x080177ed
 8015748:	08017859 	.word	0x08017859

0801574c <__d2b>:
 801574c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015750:	4689      	mov	r9, r1
 8015752:	2101      	movs	r1, #1
 8015754:	ec57 6b10 	vmov	r6, r7, d0
 8015758:	4690      	mov	r8, r2
 801575a:	f7ff fd1d 	bl	8015198 <_Balloc>
 801575e:	4604      	mov	r4, r0
 8015760:	b930      	cbnz	r0, 8015770 <__d2b+0x24>
 8015762:	4602      	mov	r2, r0
 8015764:	4b25      	ldr	r3, [pc, #148]	; (80157fc <__d2b+0xb0>)
 8015766:	4826      	ldr	r0, [pc, #152]	; (8015800 <__d2b+0xb4>)
 8015768:	f240 310a 	movw	r1, #778	; 0x30a
 801576c:	f001 f8d4 	bl	8016918 <__assert_func>
 8015770:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8015774:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015778:	bb35      	cbnz	r5, 80157c8 <__d2b+0x7c>
 801577a:	2e00      	cmp	r6, #0
 801577c:	9301      	str	r3, [sp, #4]
 801577e:	d028      	beq.n	80157d2 <__d2b+0x86>
 8015780:	4668      	mov	r0, sp
 8015782:	9600      	str	r6, [sp, #0]
 8015784:	f7ff fd9c 	bl	80152c0 <__lo0bits>
 8015788:	9900      	ldr	r1, [sp, #0]
 801578a:	b300      	cbz	r0, 80157ce <__d2b+0x82>
 801578c:	9a01      	ldr	r2, [sp, #4]
 801578e:	f1c0 0320 	rsb	r3, r0, #32
 8015792:	fa02 f303 	lsl.w	r3, r2, r3
 8015796:	430b      	orrs	r3, r1
 8015798:	40c2      	lsrs	r2, r0
 801579a:	6163      	str	r3, [r4, #20]
 801579c:	9201      	str	r2, [sp, #4]
 801579e:	9b01      	ldr	r3, [sp, #4]
 80157a0:	61a3      	str	r3, [r4, #24]
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	bf14      	ite	ne
 80157a6:	2202      	movne	r2, #2
 80157a8:	2201      	moveq	r2, #1
 80157aa:	6122      	str	r2, [r4, #16]
 80157ac:	b1d5      	cbz	r5, 80157e4 <__d2b+0x98>
 80157ae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80157b2:	4405      	add	r5, r0
 80157b4:	f8c9 5000 	str.w	r5, [r9]
 80157b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80157bc:	f8c8 0000 	str.w	r0, [r8]
 80157c0:	4620      	mov	r0, r4
 80157c2:	b003      	add	sp, #12
 80157c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80157c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80157cc:	e7d5      	b.n	801577a <__d2b+0x2e>
 80157ce:	6161      	str	r1, [r4, #20]
 80157d0:	e7e5      	b.n	801579e <__d2b+0x52>
 80157d2:	a801      	add	r0, sp, #4
 80157d4:	f7ff fd74 	bl	80152c0 <__lo0bits>
 80157d8:	9b01      	ldr	r3, [sp, #4]
 80157da:	6163      	str	r3, [r4, #20]
 80157dc:	2201      	movs	r2, #1
 80157de:	6122      	str	r2, [r4, #16]
 80157e0:	3020      	adds	r0, #32
 80157e2:	e7e3      	b.n	80157ac <__d2b+0x60>
 80157e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80157e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80157ec:	f8c9 0000 	str.w	r0, [r9]
 80157f0:	6918      	ldr	r0, [r3, #16]
 80157f2:	f7ff fd45 	bl	8015280 <__hi0bits>
 80157f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80157fa:	e7df      	b.n	80157bc <__d2b+0x70>
 80157fc:	080177ed 	.word	0x080177ed
 8015800:	08017859 	.word	0x08017859

08015804 <_putc_r>:
 8015804:	b570      	push	{r4, r5, r6, lr}
 8015806:	460d      	mov	r5, r1
 8015808:	4614      	mov	r4, r2
 801580a:	4606      	mov	r6, r0
 801580c:	b118      	cbz	r0, 8015816 <_putc_r+0x12>
 801580e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8015810:	b90b      	cbnz	r3, 8015816 <_putc_r+0x12>
 8015812:	f7ff f96b 	bl	8014aec <__sinit>
 8015816:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015818:	07d8      	lsls	r0, r3, #31
 801581a:	d405      	bmi.n	8015828 <_putc_r+0x24>
 801581c:	89a3      	ldrh	r3, [r4, #12]
 801581e:	0599      	lsls	r1, r3, #22
 8015820:	d402      	bmi.n	8015828 <_putc_r+0x24>
 8015822:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015824:	f7ff fc22 	bl	801506c <__retarget_lock_acquire_recursive>
 8015828:	68a3      	ldr	r3, [r4, #8]
 801582a:	3b01      	subs	r3, #1
 801582c:	2b00      	cmp	r3, #0
 801582e:	60a3      	str	r3, [r4, #8]
 8015830:	da05      	bge.n	801583e <_putc_r+0x3a>
 8015832:	69a2      	ldr	r2, [r4, #24]
 8015834:	4293      	cmp	r3, r2
 8015836:	db12      	blt.n	801585e <_putc_r+0x5a>
 8015838:	b2eb      	uxtb	r3, r5
 801583a:	2b0a      	cmp	r3, #10
 801583c:	d00f      	beq.n	801585e <_putc_r+0x5a>
 801583e:	6823      	ldr	r3, [r4, #0]
 8015840:	1c5a      	adds	r2, r3, #1
 8015842:	6022      	str	r2, [r4, #0]
 8015844:	701d      	strb	r5, [r3, #0]
 8015846:	b2ed      	uxtb	r5, r5
 8015848:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801584a:	07da      	lsls	r2, r3, #31
 801584c:	d405      	bmi.n	801585a <_putc_r+0x56>
 801584e:	89a3      	ldrh	r3, [r4, #12]
 8015850:	059b      	lsls	r3, r3, #22
 8015852:	d402      	bmi.n	801585a <_putc_r+0x56>
 8015854:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015856:	f7ff fc0a 	bl	801506e <__retarget_lock_release_recursive>
 801585a:	4628      	mov	r0, r5
 801585c:	bd70      	pop	{r4, r5, r6, pc}
 801585e:	4629      	mov	r1, r5
 8015860:	4622      	mov	r2, r4
 8015862:	4630      	mov	r0, r6
 8015864:	f000 ffba 	bl	80167dc <__swbuf_r>
 8015868:	4605      	mov	r5, r0
 801586a:	e7ed      	b.n	8015848 <_putc_r+0x44>

0801586c <_realloc_r>:
 801586c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015870:	4681      	mov	r9, r0
 8015872:	460c      	mov	r4, r1
 8015874:	b929      	cbnz	r1, 8015882 <_realloc_r+0x16>
 8015876:	4611      	mov	r1, r2
 8015878:	b003      	add	sp, #12
 801587a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801587e:	f7fb ba91 	b.w	8010da4 <_malloc_r>
 8015882:	9201      	str	r2, [sp, #4]
 8015884:	f7fb fcd2 	bl	801122c <__malloc_lock>
 8015888:	9a01      	ldr	r2, [sp, #4]
 801588a:	f102 080b 	add.w	r8, r2, #11
 801588e:	f1b8 0f16 	cmp.w	r8, #22
 8015892:	d90b      	bls.n	80158ac <_realloc_r+0x40>
 8015894:	f038 0807 	bics.w	r8, r8, #7
 8015898:	d50a      	bpl.n	80158b0 <_realloc_r+0x44>
 801589a:	230c      	movs	r3, #12
 801589c:	f8c9 3000 	str.w	r3, [r9]
 80158a0:	f04f 0b00 	mov.w	fp, #0
 80158a4:	4658      	mov	r0, fp
 80158a6:	b003      	add	sp, #12
 80158a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158ac:	f04f 0810 	mov.w	r8, #16
 80158b0:	4590      	cmp	r8, r2
 80158b2:	d3f2      	bcc.n	801589a <_realloc_r+0x2e>
 80158b4:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80158b8:	f025 0603 	bic.w	r6, r5, #3
 80158bc:	45b0      	cmp	r8, r6
 80158be:	f1a4 0a08 	sub.w	sl, r4, #8
 80158c2:	f340 816e 	ble.w	8015ba2 <_realloc_r+0x336>
 80158c6:	499b      	ldr	r1, [pc, #620]	; (8015b34 <_realloc_r+0x2c8>)
 80158c8:	f8d1 c008 	ldr.w	ip, [r1, #8]
 80158cc:	eb0a 0306 	add.w	r3, sl, r6
 80158d0:	459c      	cmp	ip, r3
 80158d2:	6859      	ldr	r1, [r3, #4]
 80158d4:	d005      	beq.n	80158e2 <_realloc_r+0x76>
 80158d6:	f021 0001 	bic.w	r0, r1, #1
 80158da:	4418      	add	r0, r3
 80158dc:	6840      	ldr	r0, [r0, #4]
 80158de:	07c7      	lsls	r7, r0, #31
 80158e0:	d427      	bmi.n	8015932 <_realloc_r+0xc6>
 80158e2:	f021 0103 	bic.w	r1, r1, #3
 80158e6:	459c      	cmp	ip, r3
 80158e8:	eb06 0701 	add.w	r7, r6, r1
 80158ec:	d119      	bne.n	8015922 <_realloc_r+0xb6>
 80158ee:	f108 0010 	add.w	r0, r8, #16
 80158f2:	42b8      	cmp	r0, r7
 80158f4:	dc1f      	bgt.n	8015936 <_realloc_r+0xca>
 80158f6:	eb0a 0308 	add.w	r3, sl, r8
 80158fa:	4a8e      	ldr	r2, [pc, #568]	; (8015b34 <_realloc_r+0x2c8>)
 80158fc:	eba7 0708 	sub.w	r7, r7, r8
 8015900:	f047 0701 	orr.w	r7, r7, #1
 8015904:	6093      	str	r3, [r2, #8]
 8015906:	605f      	str	r7, [r3, #4]
 8015908:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801590c:	f003 0301 	and.w	r3, r3, #1
 8015910:	ea43 0308 	orr.w	r3, r3, r8
 8015914:	f844 3c04 	str.w	r3, [r4, #-4]
 8015918:	4648      	mov	r0, r9
 801591a:	f7fb fc8d 	bl	8011238 <__malloc_unlock>
 801591e:	46a3      	mov	fp, r4
 8015920:	e7c0      	b.n	80158a4 <_realloc_r+0x38>
 8015922:	45b8      	cmp	r8, r7
 8015924:	dc07      	bgt.n	8015936 <_realloc_r+0xca>
 8015926:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 801592a:	60da      	str	r2, [r3, #12]
 801592c:	6093      	str	r3, [r2, #8]
 801592e:	4655      	mov	r5, sl
 8015930:	e07f      	b.n	8015a32 <_realloc_r+0x1c6>
 8015932:	2100      	movs	r1, #0
 8015934:	460b      	mov	r3, r1
 8015936:	07e8      	lsls	r0, r5, #31
 8015938:	f100 80e5 	bmi.w	8015b06 <_realloc_r+0x29a>
 801593c:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8015940:	ebaa 0505 	sub.w	r5, sl, r5
 8015944:	6868      	ldr	r0, [r5, #4]
 8015946:	f020 0003 	bic.w	r0, r0, #3
 801594a:	eb00 0b06 	add.w	fp, r0, r6
 801594e:	2b00      	cmp	r3, #0
 8015950:	f000 80a5 	beq.w	8015a9e <_realloc_r+0x232>
 8015954:	459c      	cmp	ip, r3
 8015956:	eb01 070b 	add.w	r7, r1, fp
 801595a:	d14a      	bne.n	80159f2 <_realloc_r+0x186>
 801595c:	f108 0310 	add.w	r3, r8, #16
 8015960:	42bb      	cmp	r3, r7
 8015962:	f300 809c 	bgt.w	8015a9e <_realloc_r+0x232>
 8015966:	46ab      	mov	fp, r5
 8015968:	68eb      	ldr	r3, [r5, #12]
 801596a:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 801596e:	60d3      	str	r3, [r2, #12]
 8015970:	609a      	str	r2, [r3, #8]
 8015972:	1f32      	subs	r2, r6, #4
 8015974:	2a24      	cmp	r2, #36	; 0x24
 8015976:	d837      	bhi.n	80159e8 <_realloc_r+0x17c>
 8015978:	2a13      	cmp	r2, #19
 801597a:	d933      	bls.n	80159e4 <_realloc_r+0x178>
 801597c:	6823      	ldr	r3, [r4, #0]
 801597e:	60ab      	str	r3, [r5, #8]
 8015980:	6863      	ldr	r3, [r4, #4]
 8015982:	60eb      	str	r3, [r5, #12]
 8015984:	2a1b      	cmp	r2, #27
 8015986:	d81b      	bhi.n	80159c0 <_realloc_r+0x154>
 8015988:	3408      	adds	r4, #8
 801598a:	f105 0310 	add.w	r3, r5, #16
 801598e:	6822      	ldr	r2, [r4, #0]
 8015990:	601a      	str	r2, [r3, #0]
 8015992:	6862      	ldr	r2, [r4, #4]
 8015994:	605a      	str	r2, [r3, #4]
 8015996:	68a2      	ldr	r2, [r4, #8]
 8015998:	609a      	str	r2, [r3, #8]
 801599a:	eb05 0308 	add.w	r3, r5, r8
 801599e:	4a65      	ldr	r2, [pc, #404]	; (8015b34 <_realloc_r+0x2c8>)
 80159a0:	eba7 0708 	sub.w	r7, r7, r8
 80159a4:	f047 0701 	orr.w	r7, r7, #1
 80159a8:	6093      	str	r3, [r2, #8]
 80159aa:	605f      	str	r7, [r3, #4]
 80159ac:	686b      	ldr	r3, [r5, #4]
 80159ae:	f003 0301 	and.w	r3, r3, #1
 80159b2:	ea43 0308 	orr.w	r3, r3, r8
 80159b6:	606b      	str	r3, [r5, #4]
 80159b8:	4648      	mov	r0, r9
 80159ba:	f7fb fc3d 	bl	8011238 <__malloc_unlock>
 80159be:	e771      	b.n	80158a4 <_realloc_r+0x38>
 80159c0:	68a3      	ldr	r3, [r4, #8]
 80159c2:	612b      	str	r3, [r5, #16]
 80159c4:	68e3      	ldr	r3, [r4, #12]
 80159c6:	616b      	str	r3, [r5, #20]
 80159c8:	2a24      	cmp	r2, #36	; 0x24
 80159ca:	bf01      	itttt	eq
 80159cc:	6923      	ldreq	r3, [r4, #16]
 80159ce:	61ab      	streq	r3, [r5, #24]
 80159d0:	6962      	ldreq	r2, [r4, #20]
 80159d2:	61ea      	streq	r2, [r5, #28]
 80159d4:	bf19      	ittee	ne
 80159d6:	3410      	addne	r4, #16
 80159d8:	f105 0318 	addne.w	r3, r5, #24
 80159dc:	f105 0320 	addeq.w	r3, r5, #32
 80159e0:	3418      	addeq	r4, #24
 80159e2:	e7d4      	b.n	801598e <_realloc_r+0x122>
 80159e4:	465b      	mov	r3, fp
 80159e6:	e7d2      	b.n	801598e <_realloc_r+0x122>
 80159e8:	4621      	mov	r1, r4
 80159ea:	4658      	mov	r0, fp
 80159ec:	f7ff fbba 	bl	8015164 <memmove>
 80159f0:	e7d3      	b.n	801599a <_realloc_r+0x12e>
 80159f2:	45b8      	cmp	r8, r7
 80159f4:	dc53      	bgt.n	8015a9e <_realloc_r+0x232>
 80159f6:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 80159fa:	4628      	mov	r0, r5
 80159fc:	60da      	str	r2, [r3, #12]
 80159fe:	6093      	str	r3, [r2, #8]
 8015a00:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8015a04:	68eb      	ldr	r3, [r5, #12]
 8015a06:	60d3      	str	r3, [r2, #12]
 8015a08:	609a      	str	r2, [r3, #8]
 8015a0a:	1f32      	subs	r2, r6, #4
 8015a0c:	2a24      	cmp	r2, #36	; 0x24
 8015a0e:	d842      	bhi.n	8015a96 <_realloc_r+0x22a>
 8015a10:	2a13      	cmp	r2, #19
 8015a12:	d908      	bls.n	8015a26 <_realloc_r+0x1ba>
 8015a14:	6823      	ldr	r3, [r4, #0]
 8015a16:	60ab      	str	r3, [r5, #8]
 8015a18:	6863      	ldr	r3, [r4, #4]
 8015a1a:	60eb      	str	r3, [r5, #12]
 8015a1c:	2a1b      	cmp	r2, #27
 8015a1e:	d828      	bhi.n	8015a72 <_realloc_r+0x206>
 8015a20:	3408      	adds	r4, #8
 8015a22:	f105 0010 	add.w	r0, r5, #16
 8015a26:	6823      	ldr	r3, [r4, #0]
 8015a28:	6003      	str	r3, [r0, #0]
 8015a2a:	6863      	ldr	r3, [r4, #4]
 8015a2c:	6043      	str	r3, [r0, #4]
 8015a2e:	68a3      	ldr	r3, [r4, #8]
 8015a30:	6083      	str	r3, [r0, #8]
 8015a32:	686b      	ldr	r3, [r5, #4]
 8015a34:	eba7 0008 	sub.w	r0, r7, r8
 8015a38:	280f      	cmp	r0, #15
 8015a3a:	f003 0301 	and.w	r3, r3, #1
 8015a3e:	eb05 0207 	add.w	r2, r5, r7
 8015a42:	f240 80b0 	bls.w	8015ba6 <_realloc_r+0x33a>
 8015a46:	eb05 0108 	add.w	r1, r5, r8
 8015a4a:	ea48 0303 	orr.w	r3, r8, r3
 8015a4e:	f040 0001 	orr.w	r0, r0, #1
 8015a52:	606b      	str	r3, [r5, #4]
 8015a54:	6048      	str	r0, [r1, #4]
 8015a56:	6853      	ldr	r3, [r2, #4]
 8015a58:	f043 0301 	orr.w	r3, r3, #1
 8015a5c:	6053      	str	r3, [r2, #4]
 8015a5e:	3108      	adds	r1, #8
 8015a60:	4648      	mov	r0, r9
 8015a62:	f7ff f8d3 	bl	8014c0c <_free_r>
 8015a66:	4648      	mov	r0, r9
 8015a68:	f7fb fbe6 	bl	8011238 <__malloc_unlock>
 8015a6c:	f105 0b08 	add.w	fp, r5, #8
 8015a70:	e718      	b.n	80158a4 <_realloc_r+0x38>
 8015a72:	68a3      	ldr	r3, [r4, #8]
 8015a74:	612b      	str	r3, [r5, #16]
 8015a76:	68e3      	ldr	r3, [r4, #12]
 8015a78:	616b      	str	r3, [r5, #20]
 8015a7a:	2a24      	cmp	r2, #36	; 0x24
 8015a7c:	bf01      	itttt	eq
 8015a7e:	6923      	ldreq	r3, [r4, #16]
 8015a80:	61ab      	streq	r3, [r5, #24]
 8015a82:	6963      	ldreq	r3, [r4, #20]
 8015a84:	61eb      	streq	r3, [r5, #28]
 8015a86:	bf19      	ittee	ne
 8015a88:	3410      	addne	r4, #16
 8015a8a:	f105 0018 	addne.w	r0, r5, #24
 8015a8e:	f105 0020 	addeq.w	r0, r5, #32
 8015a92:	3418      	addeq	r4, #24
 8015a94:	e7c7      	b.n	8015a26 <_realloc_r+0x1ba>
 8015a96:	4621      	mov	r1, r4
 8015a98:	f7ff fb64 	bl	8015164 <memmove>
 8015a9c:	e7c9      	b.n	8015a32 <_realloc_r+0x1c6>
 8015a9e:	45d8      	cmp	r8, fp
 8015aa0:	dc31      	bgt.n	8015b06 <_realloc_r+0x29a>
 8015aa2:	4628      	mov	r0, r5
 8015aa4:	68eb      	ldr	r3, [r5, #12]
 8015aa6:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8015aaa:	60d3      	str	r3, [r2, #12]
 8015aac:	609a      	str	r2, [r3, #8]
 8015aae:	1f32      	subs	r2, r6, #4
 8015ab0:	2a24      	cmp	r2, #36	; 0x24
 8015ab2:	d824      	bhi.n	8015afe <_realloc_r+0x292>
 8015ab4:	2a13      	cmp	r2, #19
 8015ab6:	d908      	bls.n	8015aca <_realloc_r+0x25e>
 8015ab8:	6823      	ldr	r3, [r4, #0]
 8015aba:	60ab      	str	r3, [r5, #8]
 8015abc:	6863      	ldr	r3, [r4, #4]
 8015abe:	60eb      	str	r3, [r5, #12]
 8015ac0:	2a1b      	cmp	r2, #27
 8015ac2:	d80a      	bhi.n	8015ada <_realloc_r+0x26e>
 8015ac4:	3408      	adds	r4, #8
 8015ac6:	f105 0010 	add.w	r0, r5, #16
 8015aca:	6823      	ldr	r3, [r4, #0]
 8015acc:	6003      	str	r3, [r0, #0]
 8015ace:	6863      	ldr	r3, [r4, #4]
 8015ad0:	6043      	str	r3, [r0, #4]
 8015ad2:	68a3      	ldr	r3, [r4, #8]
 8015ad4:	6083      	str	r3, [r0, #8]
 8015ad6:	465f      	mov	r7, fp
 8015ad8:	e7ab      	b.n	8015a32 <_realloc_r+0x1c6>
 8015ada:	68a3      	ldr	r3, [r4, #8]
 8015adc:	612b      	str	r3, [r5, #16]
 8015ade:	68e3      	ldr	r3, [r4, #12]
 8015ae0:	616b      	str	r3, [r5, #20]
 8015ae2:	2a24      	cmp	r2, #36	; 0x24
 8015ae4:	bf01      	itttt	eq
 8015ae6:	6923      	ldreq	r3, [r4, #16]
 8015ae8:	61ab      	streq	r3, [r5, #24]
 8015aea:	6963      	ldreq	r3, [r4, #20]
 8015aec:	61eb      	streq	r3, [r5, #28]
 8015aee:	bf19      	ittee	ne
 8015af0:	3410      	addne	r4, #16
 8015af2:	f105 0018 	addne.w	r0, r5, #24
 8015af6:	f105 0020 	addeq.w	r0, r5, #32
 8015afa:	3418      	addeq	r4, #24
 8015afc:	e7e5      	b.n	8015aca <_realloc_r+0x25e>
 8015afe:	4621      	mov	r1, r4
 8015b00:	f7ff fb30 	bl	8015164 <memmove>
 8015b04:	e7e7      	b.n	8015ad6 <_realloc_r+0x26a>
 8015b06:	4611      	mov	r1, r2
 8015b08:	4648      	mov	r0, r9
 8015b0a:	f7fb f94b 	bl	8010da4 <_malloc_r>
 8015b0e:	4683      	mov	fp, r0
 8015b10:	2800      	cmp	r0, #0
 8015b12:	f43f af51 	beq.w	80159b8 <_realloc_r+0x14c>
 8015b16:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8015b1a:	f023 0301 	bic.w	r3, r3, #1
 8015b1e:	4453      	add	r3, sl
 8015b20:	f1a0 0208 	sub.w	r2, r0, #8
 8015b24:	4293      	cmp	r3, r2
 8015b26:	d107      	bne.n	8015b38 <_realloc_r+0x2cc>
 8015b28:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8015b2c:	f027 0703 	bic.w	r7, r7, #3
 8015b30:	4437      	add	r7, r6
 8015b32:	e6fc      	b.n	801592e <_realloc_r+0xc2>
 8015b34:	20000838 	.word	0x20000838
 8015b38:	1f32      	subs	r2, r6, #4
 8015b3a:	2a24      	cmp	r2, #36	; 0x24
 8015b3c:	d82d      	bhi.n	8015b9a <_realloc_r+0x32e>
 8015b3e:	2a13      	cmp	r2, #19
 8015b40:	d928      	bls.n	8015b94 <_realloc_r+0x328>
 8015b42:	6823      	ldr	r3, [r4, #0]
 8015b44:	6003      	str	r3, [r0, #0]
 8015b46:	6863      	ldr	r3, [r4, #4]
 8015b48:	6043      	str	r3, [r0, #4]
 8015b4a:	2a1b      	cmp	r2, #27
 8015b4c:	d80e      	bhi.n	8015b6c <_realloc_r+0x300>
 8015b4e:	f104 0208 	add.w	r2, r4, #8
 8015b52:	f100 0308 	add.w	r3, r0, #8
 8015b56:	6811      	ldr	r1, [r2, #0]
 8015b58:	6019      	str	r1, [r3, #0]
 8015b5a:	6851      	ldr	r1, [r2, #4]
 8015b5c:	6059      	str	r1, [r3, #4]
 8015b5e:	6892      	ldr	r2, [r2, #8]
 8015b60:	609a      	str	r2, [r3, #8]
 8015b62:	4621      	mov	r1, r4
 8015b64:	4648      	mov	r0, r9
 8015b66:	f7ff f851 	bl	8014c0c <_free_r>
 8015b6a:	e725      	b.n	80159b8 <_realloc_r+0x14c>
 8015b6c:	68a3      	ldr	r3, [r4, #8]
 8015b6e:	6083      	str	r3, [r0, #8]
 8015b70:	68e3      	ldr	r3, [r4, #12]
 8015b72:	60c3      	str	r3, [r0, #12]
 8015b74:	2a24      	cmp	r2, #36	; 0x24
 8015b76:	bf01      	itttt	eq
 8015b78:	6923      	ldreq	r3, [r4, #16]
 8015b7a:	6103      	streq	r3, [r0, #16]
 8015b7c:	6961      	ldreq	r1, [r4, #20]
 8015b7e:	6141      	streq	r1, [r0, #20]
 8015b80:	bf19      	ittee	ne
 8015b82:	f104 0210 	addne.w	r2, r4, #16
 8015b86:	f100 0310 	addne.w	r3, r0, #16
 8015b8a:	f104 0218 	addeq.w	r2, r4, #24
 8015b8e:	f100 0318 	addeq.w	r3, r0, #24
 8015b92:	e7e0      	b.n	8015b56 <_realloc_r+0x2ea>
 8015b94:	4603      	mov	r3, r0
 8015b96:	4622      	mov	r2, r4
 8015b98:	e7dd      	b.n	8015b56 <_realloc_r+0x2ea>
 8015b9a:	4621      	mov	r1, r4
 8015b9c:	f7ff fae2 	bl	8015164 <memmove>
 8015ba0:	e7df      	b.n	8015b62 <_realloc_r+0x2f6>
 8015ba2:	4637      	mov	r7, r6
 8015ba4:	e6c3      	b.n	801592e <_realloc_r+0xc2>
 8015ba6:	431f      	orrs	r7, r3
 8015ba8:	606f      	str	r7, [r5, #4]
 8015baa:	6853      	ldr	r3, [r2, #4]
 8015bac:	f043 0301 	orr.w	r3, r3, #1
 8015bb0:	6053      	str	r3, [r2, #4]
 8015bb2:	e758      	b.n	8015a66 <_realloc_r+0x1fa>
 8015bb4:	0000      	movs	r0, r0
	...

08015bb8 <frexp>:
 8015bb8:	2200      	movs	r2, #0
 8015bba:	ee10 1a90 	vmov	r1, s1
 8015bbe:	6002      	str	r2, [r0, #0]
 8015bc0:	4a17      	ldr	r2, [pc, #92]	; (8015c20 <frexp+0x68>)
 8015bc2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015bc6:	4293      	cmp	r3, r2
 8015bc8:	dc23      	bgt.n	8015c12 <frexp+0x5a>
 8015bca:	ee10 2a10 	vmov	r2, s0
 8015bce:	431a      	orrs	r2, r3
 8015bd0:	d01f      	beq.n	8015c12 <frexp+0x5a>
 8015bd2:	4a14      	ldr	r2, [pc, #80]	; (8015c24 <frexp+0x6c>)
 8015bd4:	400a      	ands	r2, r1
 8015bd6:	b952      	cbnz	r2, 8015bee <frexp+0x36>
 8015bd8:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8015c18 <frexp+0x60>
 8015bdc:	ee20 0b07 	vmul.f64	d0, d0, d7
 8015be0:	ee10 1a90 	vmov	r1, s1
 8015be4:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8015be8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015bec:	6002      	str	r2, [r0, #0]
 8015bee:	6802      	ldr	r2, [r0, #0]
 8015bf0:	151b      	asrs	r3, r3, #20
 8015bf2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8015bf6:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8015bfa:	4413      	add	r3, r2
 8015bfc:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8015c00:	6003      	str	r3, [r0, #0]
 8015c02:	ec53 2b10 	vmov	r2, r3, d0
 8015c06:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 8015c0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8015c0e:	ec43 2b10 	vmov	d0, r2, r3
 8015c12:	4770      	bx	lr
 8015c14:	f3af 8000 	nop.w
 8015c18:	00000000 	.word	0x00000000
 8015c1c:	43500000 	.word	0x43500000
 8015c20:	7fefffff 	.word	0x7fefffff
 8015c24:	7ff00000 	.word	0x7ff00000

08015c28 <__sread>:
 8015c28:	b510      	push	{r4, lr}
 8015c2a:	460c      	mov	r4, r1
 8015c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c30:	f000 fff8 	bl	8016c24 <_read_r>
 8015c34:	2800      	cmp	r0, #0
 8015c36:	bfab      	itete	ge
 8015c38:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 8015c3a:	89a3      	ldrhlt	r3, [r4, #12]
 8015c3c:	181b      	addge	r3, r3, r0
 8015c3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015c42:	bfac      	ite	ge
 8015c44:	6523      	strge	r3, [r4, #80]	; 0x50
 8015c46:	81a3      	strhlt	r3, [r4, #12]
 8015c48:	bd10      	pop	{r4, pc}

08015c4a <__swrite>:
 8015c4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c4e:	461f      	mov	r7, r3
 8015c50:	898b      	ldrh	r3, [r1, #12]
 8015c52:	05db      	lsls	r3, r3, #23
 8015c54:	4605      	mov	r5, r0
 8015c56:	460c      	mov	r4, r1
 8015c58:	4616      	mov	r6, r2
 8015c5a:	d505      	bpl.n	8015c68 <__swrite+0x1e>
 8015c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c60:	2302      	movs	r3, #2
 8015c62:	2200      	movs	r2, #0
 8015c64:	f000 ffba 	bl	8016bdc <_lseek_r>
 8015c68:	89a3      	ldrh	r3, [r4, #12]
 8015c6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015c6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015c72:	81a3      	strh	r3, [r4, #12]
 8015c74:	4632      	mov	r2, r6
 8015c76:	463b      	mov	r3, r7
 8015c78:	4628      	mov	r0, r5
 8015c7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015c7e:	f000 bdf7 	b.w	8016870 <_write_r>

08015c82 <__sseek>:
 8015c82:	b510      	push	{r4, lr}
 8015c84:	460c      	mov	r4, r1
 8015c86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c8a:	f000 ffa7 	bl	8016bdc <_lseek_r>
 8015c8e:	1c43      	adds	r3, r0, #1
 8015c90:	89a3      	ldrh	r3, [r4, #12]
 8015c92:	bf15      	itete	ne
 8015c94:	6520      	strne	r0, [r4, #80]	; 0x50
 8015c96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015c9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015c9e:	81a3      	strheq	r3, [r4, #12]
 8015ca0:	bf18      	it	ne
 8015ca2:	81a3      	strhne	r3, [r4, #12]
 8015ca4:	bd10      	pop	{r4, pc}

08015ca6 <__sclose>:
 8015ca6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015caa:	f000 be89 	b.w	80169c0 <_close_r>

08015cae <strncpy>:
 8015cae:	b510      	push	{r4, lr}
 8015cb0:	3901      	subs	r1, #1
 8015cb2:	4603      	mov	r3, r0
 8015cb4:	b132      	cbz	r2, 8015cc4 <strncpy+0x16>
 8015cb6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015cba:	f803 4b01 	strb.w	r4, [r3], #1
 8015cbe:	3a01      	subs	r2, #1
 8015cc0:	2c00      	cmp	r4, #0
 8015cc2:	d1f7      	bne.n	8015cb4 <strncpy+0x6>
 8015cc4:	441a      	add	r2, r3
 8015cc6:	2100      	movs	r1, #0
 8015cc8:	4293      	cmp	r3, r2
 8015cca:	d100      	bne.n	8015cce <strncpy+0x20>
 8015ccc:	bd10      	pop	{r4, pc}
 8015cce:	f803 1b01 	strb.w	r1, [r3], #1
 8015cd2:	e7f9      	b.n	8015cc8 <strncpy+0x1a>

08015cd4 <__ssprint_r>:
 8015cd4:	6893      	ldr	r3, [r2, #8]
 8015cd6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cda:	4680      	mov	r8, r0
 8015cdc:	460c      	mov	r4, r1
 8015cde:	4617      	mov	r7, r2
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	d061      	beq.n	8015da8 <__ssprint_r+0xd4>
 8015ce4:	2300      	movs	r3, #0
 8015ce6:	f8d2 a000 	ldr.w	sl, [r2]
 8015cea:	9301      	str	r3, [sp, #4]
 8015cec:	469b      	mov	fp, r3
 8015cee:	f1bb 0f00 	cmp.w	fp, #0
 8015cf2:	d02b      	beq.n	8015d4c <__ssprint_r+0x78>
 8015cf4:	68a6      	ldr	r6, [r4, #8]
 8015cf6:	455e      	cmp	r6, fp
 8015cf8:	d844      	bhi.n	8015d84 <__ssprint_r+0xb0>
 8015cfa:	89a2      	ldrh	r2, [r4, #12]
 8015cfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015d00:	d03e      	beq.n	8015d80 <__ssprint_r+0xac>
 8015d02:	6820      	ldr	r0, [r4, #0]
 8015d04:	6921      	ldr	r1, [r4, #16]
 8015d06:	6965      	ldr	r5, [r4, #20]
 8015d08:	eba0 0901 	sub.w	r9, r0, r1
 8015d0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015d10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015d14:	f109 0001 	add.w	r0, r9, #1
 8015d18:	106d      	asrs	r5, r5, #1
 8015d1a:	4458      	add	r0, fp
 8015d1c:	4285      	cmp	r5, r0
 8015d1e:	bf38      	it	cc
 8015d20:	4605      	movcc	r5, r0
 8015d22:	0553      	lsls	r3, r2, #21
 8015d24:	d545      	bpl.n	8015db2 <__ssprint_r+0xde>
 8015d26:	4629      	mov	r1, r5
 8015d28:	4640      	mov	r0, r8
 8015d2a:	f7fb f83b 	bl	8010da4 <_malloc_r>
 8015d2e:	4606      	mov	r6, r0
 8015d30:	b9a0      	cbnz	r0, 8015d5c <__ssprint_r+0x88>
 8015d32:	230c      	movs	r3, #12
 8015d34:	f8c8 3000 	str.w	r3, [r8]
 8015d38:	89a3      	ldrh	r3, [r4, #12]
 8015d3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015d3e:	81a3      	strh	r3, [r4, #12]
 8015d40:	2300      	movs	r3, #0
 8015d42:	e9c7 3301 	strd	r3, r3, [r7, #4]
 8015d46:	f04f 30ff 	mov.w	r0, #4294967295
 8015d4a:	e02f      	b.n	8015dac <__ssprint_r+0xd8>
 8015d4c:	f8da 3000 	ldr.w	r3, [sl]
 8015d50:	f8da b004 	ldr.w	fp, [sl, #4]
 8015d54:	9301      	str	r3, [sp, #4]
 8015d56:	f10a 0a08 	add.w	sl, sl, #8
 8015d5a:	e7c8      	b.n	8015cee <__ssprint_r+0x1a>
 8015d5c:	464a      	mov	r2, r9
 8015d5e:	6921      	ldr	r1, [r4, #16]
 8015d60:	f7ff f9f2 	bl	8015148 <memcpy>
 8015d64:	89a2      	ldrh	r2, [r4, #12]
 8015d66:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8015d6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8015d6e:	81a2      	strh	r2, [r4, #12]
 8015d70:	6126      	str	r6, [r4, #16]
 8015d72:	6165      	str	r5, [r4, #20]
 8015d74:	444e      	add	r6, r9
 8015d76:	eba5 0509 	sub.w	r5, r5, r9
 8015d7a:	6026      	str	r6, [r4, #0]
 8015d7c:	60a5      	str	r5, [r4, #8]
 8015d7e:	465e      	mov	r6, fp
 8015d80:	455e      	cmp	r6, fp
 8015d82:	d900      	bls.n	8015d86 <__ssprint_r+0xb2>
 8015d84:	465e      	mov	r6, fp
 8015d86:	4632      	mov	r2, r6
 8015d88:	9901      	ldr	r1, [sp, #4]
 8015d8a:	6820      	ldr	r0, [r4, #0]
 8015d8c:	f7ff f9ea 	bl	8015164 <memmove>
 8015d90:	68a2      	ldr	r2, [r4, #8]
 8015d92:	1b92      	subs	r2, r2, r6
 8015d94:	60a2      	str	r2, [r4, #8]
 8015d96:	6822      	ldr	r2, [r4, #0]
 8015d98:	4432      	add	r2, r6
 8015d9a:	6022      	str	r2, [r4, #0]
 8015d9c:	68ba      	ldr	r2, [r7, #8]
 8015d9e:	eba2 030b 	sub.w	r3, r2, fp
 8015da2:	60bb      	str	r3, [r7, #8]
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d1d1      	bne.n	8015d4c <__ssprint_r+0x78>
 8015da8:	2000      	movs	r0, #0
 8015daa:	6078      	str	r0, [r7, #4]
 8015dac:	b003      	add	sp, #12
 8015dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015db2:	462a      	mov	r2, r5
 8015db4:	4640      	mov	r0, r8
 8015db6:	f7ff fd59 	bl	801586c <_realloc_r>
 8015dba:	4606      	mov	r6, r0
 8015dbc:	2800      	cmp	r0, #0
 8015dbe:	d1d7      	bne.n	8015d70 <__ssprint_r+0x9c>
 8015dc0:	6921      	ldr	r1, [r4, #16]
 8015dc2:	4640      	mov	r0, r8
 8015dc4:	f7fe ff22 	bl	8014c0c <_free_r>
 8015dc8:	e7b3      	b.n	8015d32 <__ssprint_r+0x5e>

08015dca <__sprint_r>:
 8015dca:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015dce:	6893      	ldr	r3, [r2, #8]
 8015dd0:	4680      	mov	r8, r0
 8015dd2:	460f      	mov	r7, r1
 8015dd4:	4614      	mov	r4, r2
 8015dd6:	b91b      	cbnz	r3, 8015de0 <__sprint_r+0x16>
 8015dd8:	6053      	str	r3, [r2, #4]
 8015dda:	4618      	mov	r0, r3
 8015ddc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015de0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8015de2:	049d      	lsls	r5, r3, #18
 8015de4:	d520      	bpl.n	8015e28 <__sprint_r+0x5e>
 8015de6:	6815      	ldr	r5, [r2, #0]
 8015de8:	3508      	adds	r5, #8
 8015dea:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 8015dee:	f04f 0900 	mov.w	r9, #0
 8015df2:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 8015df6:	45ca      	cmp	sl, r9
 8015df8:	dc0b      	bgt.n	8015e12 <__sprint_r+0x48>
 8015dfa:	68a3      	ldr	r3, [r4, #8]
 8015dfc:	f026 0003 	bic.w	r0, r6, #3
 8015e00:	1a18      	subs	r0, r3, r0
 8015e02:	60a0      	str	r0, [r4, #8]
 8015e04:	3508      	adds	r5, #8
 8015e06:	2800      	cmp	r0, #0
 8015e08:	d1ef      	bne.n	8015dea <__sprint_r+0x20>
 8015e0a:	2300      	movs	r3, #0
 8015e0c:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8015e10:	e7e4      	b.n	8015ddc <__sprint_r+0x12>
 8015e12:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8015e16:	463a      	mov	r2, r7
 8015e18:	4640      	mov	r0, r8
 8015e1a:	f000 fe8c 	bl	8016b36 <_fputwc_r>
 8015e1e:	1c43      	adds	r3, r0, #1
 8015e20:	d0f3      	beq.n	8015e0a <__sprint_r+0x40>
 8015e22:	f109 0901 	add.w	r9, r9, #1
 8015e26:	e7e6      	b.n	8015df6 <__sprint_r+0x2c>
 8015e28:	f7fe ffb0 	bl	8014d8c <__sfvwrite_r>
 8015e2c:	e7ed      	b.n	8015e0a <__sprint_r+0x40>
	...

08015e30 <_vfiprintf_r>:
 8015e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e34:	ed2d 8b02 	vpush	{d8}
 8015e38:	b0b9      	sub	sp, #228	; 0xe4
 8015e3a:	460f      	mov	r7, r1
 8015e3c:	9201      	str	r2, [sp, #4]
 8015e3e:	461d      	mov	r5, r3
 8015e40:	461c      	mov	r4, r3
 8015e42:	4681      	mov	r9, r0
 8015e44:	b118      	cbz	r0, 8015e4e <_vfiprintf_r+0x1e>
 8015e46:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8015e48:	b90b      	cbnz	r3, 8015e4e <_vfiprintf_r+0x1e>
 8015e4a:	f7fe fe4f 	bl	8014aec <__sinit>
 8015e4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015e50:	07d8      	lsls	r0, r3, #31
 8015e52:	d405      	bmi.n	8015e60 <_vfiprintf_r+0x30>
 8015e54:	89bb      	ldrh	r3, [r7, #12]
 8015e56:	0599      	lsls	r1, r3, #22
 8015e58:	d402      	bmi.n	8015e60 <_vfiprintf_r+0x30>
 8015e5a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8015e5c:	f7ff f906 	bl	801506c <__retarget_lock_acquire_recursive>
 8015e60:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8015e64:	049a      	lsls	r2, r3, #18
 8015e66:	d406      	bmi.n	8015e76 <_vfiprintf_r+0x46>
 8015e68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015e6c:	81bb      	strh	r3, [r7, #12]
 8015e6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015e70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8015e74:	667b      	str	r3, [r7, #100]	; 0x64
 8015e76:	89bb      	ldrh	r3, [r7, #12]
 8015e78:	071e      	lsls	r6, r3, #28
 8015e7a:	d501      	bpl.n	8015e80 <_vfiprintf_r+0x50>
 8015e7c:	693b      	ldr	r3, [r7, #16]
 8015e7e:	b9bb      	cbnz	r3, 8015eb0 <_vfiprintf_r+0x80>
 8015e80:	4639      	mov	r1, r7
 8015e82:	4648      	mov	r0, r9
 8015e84:	f7fd fee8 	bl	8013c58 <__swsetup_r>
 8015e88:	b190      	cbz	r0, 8015eb0 <_vfiprintf_r+0x80>
 8015e8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015e8c:	07d8      	lsls	r0, r3, #31
 8015e8e:	d508      	bpl.n	8015ea2 <_vfiprintf_r+0x72>
 8015e90:	f04f 33ff 	mov.w	r3, #4294967295
 8015e94:	9302      	str	r3, [sp, #8]
 8015e96:	9802      	ldr	r0, [sp, #8]
 8015e98:	b039      	add	sp, #228	; 0xe4
 8015e9a:	ecbd 8b02 	vpop	{d8}
 8015e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ea2:	89bb      	ldrh	r3, [r7, #12]
 8015ea4:	0599      	lsls	r1, r3, #22
 8015ea6:	d4f3      	bmi.n	8015e90 <_vfiprintf_r+0x60>
 8015ea8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8015eaa:	f7ff f8e0 	bl	801506e <__retarget_lock_release_recursive>
 8015eae:	e7ef      	b.n	8015e90 <_vfiprintf_r+0x60>
 8015eb0:	89bb      	ldrh	r3, [r7, #12]
 8015eb2:	f003 021a 	and.w	r2, r3, #26
 8015eb6:	2a0a      	cmp	r2, #10
 8015eb8:	d116      	bne.n	8015ee8 <_vfiprintf_r+0xb8>
 8015eba:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8015ebe:	2a00      	cmp	r2, #0
 8015ec0:	db12      	blt.n	8015ee8 <_vfiprintf_r+0xb8>
 8015ec2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015ec4:	07d2      	lsls	r2, r2, #31
 8015ec6:	d404      	bmi.n	8015ed2 <_vfiprintf_r+0xa2>
 8015ec8:	059e      	lsls	r6, r3, #22
 8015eca:	d402      	bmi.n	8015ed2 <_vfiprintf_r+0xa2>
 8015ecc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8015ece:	f7ff f8ce 	bl	801506e <__retarget_lock_release_recursive>
 8015ed2:	9a01      	ldr	r2, [sp, #4]
 8015ed4:	462b      	mov	r3, r5
 8015ed6:	4639      	mov	r1, r7
 8015ed8:	4648      	mov	r0, r9
 8015eda:	b039      	add	sp, #228	; 0xe4
 8015edc:	ecbd 8b02 	vpop	{d8}
 8015ee0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ee4:	f000 bc3a 	b.w	801675c <__sbprintf>
 8015ee8:	2300      	movs	r3, #0
 8015eea:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 8015eee:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8015ef2:	ae0f      	add	r6, sp, #60	; 0x3c
 8015ef4:	ee08 3a10 	vmov	s16, r3
 8015ef8:	960c      	str	r6, [sp, #48]	; 0x30
 8015efa:	9307      	str	r3, [sp, #28]
 8015efc:	9302      	str	r3, [sp, #8]
 8015efe:	9b01      	ldr	r3, [sp, #4]
 8015f00:	461d      	mov	r5, r3
 8015f02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015f06:	b10a      	cbz	r2, 8015f0c <_vfiprintf_r+0xdc>
 8015f08:	2a25      	cmp	r2, #37	; 0x25
 8015f0a:	d1f9      	bne.n	8015f00 <_vfiprintf_r+0xd0>
 8015f0c:	9b01      	ldr	r3, [sp, #4]
 8015f0e:	ebb5 0803 	subs.w	r8, r5, r3
 8015f12:	d00d      	beq.n	8015f30 <_vfiprintf_r+0x100>
 8015f14:	e9c6 3800 	strd	r3, r8, [r6]
 8015f18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015f1a:	4443      	add	r3, r8
 8015f1c:	930e      	str	r3, [sp, #56]	; 0x38
 8015f1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015f20:	3301      	adds	r3, #1
 8015f22:	2b07      	cmp	r3, #7
 8015f24:	930d      	str	r3, [sp, #52]	; 0x34
 8015f26:	dc75      	bgt.n	8016014 <_vfiprintf_r+0x1e4>
 8015f28:	3608      	adds	r6, #8
 8015f2a:	9b02      	ldr	r3, [sp, #8]
 8015f2c:	4443      	add	r3, r8
 8015f2e:	9302      	str	r3, [sp, #8]
 8015f30:	782b      	ldrb	r3, [r5, #0]
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	f000 83d6 	beq.w	80166e4 <_vfiprintf_r+0x8b4>
 8015f38:	2300      	movs	r3, #0
 8015f3a:	f04f 31ff 	mov.w	r1, #4294967295
 8015f3e:	1c6a      	adds	r2, r5, #1
 8015f40:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8015f44:	9100      	str	r1, [sp, #0]
 8015f46:	9303      	str	r3, [sp, #12]
 8015f48:	469a      	mov	sl, r3
 8015f4a:	f812 3b01 	ldrb.w	r3, [r2], #1
 8015f4e:	9201      	str	r2, [sp, #4]
 8015f50:	f1a3 0220 	sub.w	r2, r3, #32
 8015f54:	2a5a      	cmp	r2, #90	; 0x5a
 8015f56:	f200 831f 	bhi.w	8016598 <_vfiprintf_r+0x768>
 8015f5a:	e8df f012 	tbh	[pc, r2, lsl #1]
 8015f5e:	009b      	.short	0x009b
 8015f60:	031d031d 	.word	0x031d031d
 8015f64:	031d00a3 	.word	0x031d00a3
 8015f68:	031d031d 	.word	0x031d031d
 8015f6c:	031d0082 	.word	0x031d0082
 8015f70:	00a6031d 	.word	0x00a6031d
 8015f74:	031d00b0 	.word	0x031d00b0
 8015f78:	00b200ad 	.word	0x00b200ad
 8015f7c:	00cd031d 	.word	0x00cd031d
 8015f80:	00d000d0 	.word	0x00d000d0
 8015f84:	00d000d0 	.word	0x00d000d0
 8015f88:	00d000d0 	.word	0x00d000d0
 8015f8c:	00d000d0 	.word	0x00d000d0
 8015f90:	031d00d0 	.word	0x031d00d0
 8015f94:	031d031d 	.word	0x031d031d
 8015f98:	031d031d 	.word	0x031d031d
 8015f9c:	031d031d 	.word	0x031d031d
 8015fa0:	031d031d 	.word	0x031d031d
 8015fa4:	010800fa 	.word	0x010800fa
 8015fa8:	031d031d 	.word	0x031d031d
 8015fac:	031d031d 	.word	0x031d031d
 8015fb0:	031d031d 	.word	0x031d031d
 8015fb4:	031d031d 	.word	0x031d031d
 8015fb8:	031d031d 	.word	0x031d031d
 8015fbc:	031d0158 	.word	0x031d0158
 8015fc0:	031d031d 	.word	0x031d031d
 8015fc4:	031d01a1 	.word	0x031d01a1
 8015fc8:	031d027e 	.word	0x031d027e
 8015fcc:	029e031d 	.word	0x029e031d
 8015fd0:	031d031d 	.word	0x031d031d
 8015fd4:	031d031d 	.word	0x031d031d
 8015fd8:	031d031d 	.word	0x031d031d
 8015fdc:	031d031d 	.word	0x031d031d
 8015fe0:	031d031d 	.word	0x031d031d
 8015fe4:	010a00fa 	.word	0x010a00fa
 8015fe8:	031d031d 	.word	0x031d031d
 8015fec:	00e0031d 	.word	0x00e0031d
 8015ff0:	00f4010a 	.word	0x00f4010a
 8015ff4:	00ed031d 	.word	0x00ed031d
 8015ff8:	0136031d 	.word	0x0136031d
 8015ffc:	018f015a 	.word	0x018f015a
 8016000:	031d00f4 	.word	0x031d00f4
 8016004:	009901a1 	.word	0x009901a1
 8016008:	031d0280 	.word	0x031d0280
 801600c:	0065031d 	.word	0x0065031d
 8016010:	0099031d 	.word	0x0099031d
 8016014:	aa0c      	add	r2, sp, #48	; 0x30
 8016016:	4639      	mov	r1, r7
 8016018:	4648      	mov	r0, r9
 801601a:	f7ff fed6 	bl	8015dca <__sprint_r>
 801601e:	2800      	cmp	r0, #0
 8016020:	f040 833f 	bne.w	80166a2 <_vfiprintf_r+0x872>
 8016024:	ae0f      	add	r6, sp, #60	; 0x3c
 8016026:	e780      	b.n	8015f2a <_vfiprintf_r+0xfa>
 8016028:	4a9c      	ldr	r2, [pc, #624]	; (801629c <_vfiprintf_r+0x46c>)
 801602a:	9205      	str	r2, [sp, #20]
 801602c:	f01a 0220 	ands.w	r2, sl, #32
 8016030:	f000 8235 	beq.w	801649e <_vfiprintf_r+0x66e>
 8016034:	3407      	adds	r4, #7
 8016036:	f024 0207 	bic.w	r2, r4, #7
 801603a:	4693      	mov	fp, r2
 801603c:	6855      	ldr	r5, [r2, #4]
 801603e:	f85b 4b08 	ldr.w	r4, [fp], #8
 8016042:	f01a 0f01 	tst.w	sl, #1
 8016046:	d009      	beq.n	801605c <_vfiprintf_r+0x22c>
 8016048:	ea54 0205 	orrs.w	r2, r4, r5
 801604c:	bf1f      	itttt	ne
 801604e:	2230      	movne	r2, #48	; 0x30
 8016050:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 8016054:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 8016058:	f04a 0a02 	orrne.w	sl, sl, #2
 801605c:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8016060:	e11a      	b.n	8016298 <_vfiprintf_r+0x468>
 8016062:	4648      	mov	r0, r9
 8016064:	f7fe fffc 	bl	8015060 <_localeconv_r>
 8016068:	6843      	ldr	r3, [r0, #4]
 801606a:	4618      	mov	r0, r3
 801606c:	ee08 3a10 	vmov	s16, r3
 8016070:	f7ea f8e6 	bl	8000240 <strlen>
 8016074:	9007      	str	r0, [sp, #28]
 8016076:	4648      	mov	r0, r9
 8016078:	f7fe fff2 	bl	8015060 <_localeconv_r>
 801607c:	6883      	ldr	r3, [r0, #8]
 801607e:	9306      	str	r3, [sp, #24]
 8016080:	9b07      	ldr	r3, [sp, #28]
 8016082:	b12b      	cbz	r3, 8016090 <_vfiprintf_r+0x260>
 8016084:	9b06      	ldr	r3, [sp, #24]
 8016086:	b11b      	cbz	r3, 8016090 <_vfiprintf_r+0x260>
 8016088:	781b      	ldrb	r3, [r3, #0]
 801608a:	b10b      	cbz	r3, 8016090 <_vfiprintf_r+0x260>
 801608c:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 8016090:	9a01      	ldr	r2, [sp, #4]
 8016092:	e75a      	b.n	8015f4a <_vfiprintf_r+0x11a>
 8016094:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8016098:	2b00      	cmp	r3, #0
 801609a:	d1f9      	bne.n	8016090 <_vfiprintf_r+0x260>
 801609c:	2320      	movs	r3, #32
 801609e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 80160a2:	e7f5      	b.n	8016090 <_vfiprintf_r+0x260>
 80160a4:	f04a 0a01 	orr.w	sl, sl, #1
 80160a8:	e7f2      	b.n	8016090 <_vfiprintf_r+0x260>
 80160aa:	f854 3b04 	ldr.w	r3, [r4], #4
 80160ae:	9303      	str	r3, [sp, #12]
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	daed      	bge.n	8016090 <_vfiprintf_r+0x260>
 80160b4:	425b      	negs	r3, r3
 80160b6:	9303      	str	r3, [sp, #12]
 80160b8:	f04a 0a04 	orr.w	sl, sl, #4
 80160bc:	e7e8      	b.n	8016090 <_vfiprintf_r+0x260>
 80160be:	232b      	movs	r3, #43	; 0x2b
 80160c0:	e7ed      	b.n	801609e <_vfiprintf_r+0x26e>
 80160c2:	9a01      	ldr	r2, [sp, #4]
 80160c4:	f812 3b01 	ldrb.w	r3, [r2], #1
 80160c8:	2b2a      	cmp	r3, #42	; 0x2a
 80160ca:	d112      	bne.n	80160f2 <_vfiprintf_r+0x2c2>
 80160cc:	f854 0b04 	ldr.w	r0, [r4], #4
 80160d0:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 80160d4:	e9cd 3200 	strd	r3, r2, [sp]
 80160d8:	e7da      	b.n	8016090 <_vfiprintf_r+0x260>
 80160da:	9b00      	ldr	r3, [sp, #0]
 80160dc:	200a      	movs	r0, #10
 80160de:	fb00 1303 	mla	r3, r0, r3, r1
 80160e2:	9300      	str	r3, [sp, #0]
 80160e4:	f812 3b01 	ldrb.w	r3, [r2], #1
 80160e8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80160ec:	2909      	cmp	r1, #9
 80160ee:	d9f4      	bls.n	80160da <_vfiprintf_r+0x2aa>
 80160f0:	e72d      	b.n	8015f4e <_vfiprintf_r+0x11e>
 80160f2:	2100      	movs	r1, #0
 80160f4:	9100      	str	r1, [sp, #0]
 80160f6:	e7f7      	b.n	80160e8 <_vfiprintf_r+0x2b8>
 80160f8:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 80160fc:	e7c8      	b.n	8016090 <_vfiprintf_r+0x260>
 80160fe:	2100      	movs	r1, #0
 8016100:	9a01      	ldr	r2, [sp, #4]
 8016102:	9103      	str	r1, [sp, #12]
 8016104:	9903      	ldr	r1, [sp, #12]
 8016106:	3b30      	subs	r3, #48	; 0x30
 8016108:	200a      	movs	r0, #10
 801610a:	fb00 3301 	mla	r3, r0, r1, r3
 801610e:	9303      	str	r3, [sp, #12]
 8016110:	f812 3b01 	ldrb.w	r3, [r2], #1
 8016114:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8016118:	2909      	cmp	r1, #9
 801611a:	d9f3      	bls.n	8016104 <_vfiprintf_r+0x2d4>
 801611c:	e717      	b.n	8015f4e <_vfiprintf_r+0x11e>
 801611e:	9b01      	ldr	r3, [sp, #4]
 8016120:	781b      	ldrb	r3, [r3, #0]
 8016122:	2b68      	cmp	r3, #104	; 0x68
 8016124:	bf01      	itttt	eq
 8016126:	9b01      	ldreq	r3, [sp, #4]
 8016128:	3301      	addeq	r3, #1
 801612a:	9301      	streq	r3, [sp, #4]
 801612c:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8016130:	bf18      	it	ne
 8016132:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 8016136:	e7ab      	b.n	8016090 <_vfiprintf_r+0x260>
 8016138:	9b01      	ldr	r3, [sp, #4]
 801613a:	781b      	ldrb	r3, [r3, #0]
 801613c:	2b6c      	cmp	r3, #108	; 0x6c
 801613e:	d105      	bne.n	801614c <_vfiprintf_r+0x31c>
 8016140:	9b01      	ldr	r3, [sp, #4]
 8016142:	3301      	adds	r3, #1
 8016144:	9301      	str	r3, [sp, #4]
 8016146:	f04a 0a20 	orr.w	sl, sl, #32
 801614a:	e7a1      	b.n	8016090 <_vfiprintf_r+0x260>
 801614c:	f04a 0a10 	orr.w	sl, sl, #16
 8016150:	e79e      	b.n	8016090 <_vfiprintf_r+0x260>
 8016152:	46a3      	mov	fp, r4
 8016154:	2100      	movs	r1, #0
 8016156:	f85b 3b04 	ldr.w	r3, [fp], #4
 801615a:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 801615e:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8016162:	2301      	movs	r3, #1
 8016164:	9300      	str	r3, [sp, #0]
 8016166:	460d      	mov	r5, r1
 8016168:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 801616c:	e0ad      	b.n	80162ca <_vfiprintf_r+0x49a>
 801616e:	f04a 0a10 	orr.w	sl, sl, #16
 8016172:	f01a 0f20 	tst.w	sl, #32
 8016176:	d011      	beq.n	801619c <_vfiprintf_r+0x36c>
 8016178:	3407      	adds	r4, #7
 801617a:	f024 0307 	bic.w	r3, r4, #7
 801617e:	469b      	mov	fp, r3
 8016180:	685d      	ldr	r5, [r3, #4]
 8016182:	f85b 4b08 	ldr.w	r4, [fp], #8
 8016186:	2d00      	cmp	r5, #0
 8016188:	da06      	bge.n	8016198 <_vfiprintf_r+0x368>
 801618a:	4264      	negs	r4, r4
 801618c:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8016190:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8016194:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8016198:	2301      	movs	r3, #1
 801619a:	e04a      	b.n	8016232 <_vfiprintf_r+0x402>
 801619c:	46a3      	mov	fp, r4
 801619e:	f01a 0f10 	tst.w	sl, #16
 80161a2:	f85b 5b04 	ldr.w	r5, [fp], #4
 80161a6:	d002      	beq.n	80161ae <_vfiprintf_r+0x37e>
 80161a8:	462c      	mov	r4, r5
 80161aa:	17ed      	asrs	r5, r5, #31
 80161ac:	e7eb      	b.n	8016186 <_vfiprintf_r+0x356>
 80161ae:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80161b2:	d003      	beq.n	80161bc <_vfiprintf_r+0x38c>
 80161b4:	b22c      	sxth	r4, r5
 80161b6:	f345 35c0 	sbfx	r5, r5, #15, #1
 80161ba:	e7e4      	b.n	8016186 <_vfiprintf_r+0x356>
 80161bc:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80161c0:	d0f2      	beq.n	80161a8 <_vfiprintf_r+0x378>
 80161c2:	b26c      	sxtb	r4, r5
 80161c4:	f345 15c0 	sbfx	r5, r5, #7, #1
 80161c8:	e7dd      	b.n	8016186 <_vfiprintf_r+0x356>
 80161ca:	f01a 0f20 	tst.w	sl, #32
 80161ce:	f104 0b04 	add.w	fp, r4, #4
 80161d2:	d007      	beq.n	80161e4 <_vfiprintf_r+0x3b4>
 80161d4:	9a02      	ldr	r2, [sp, #8]
 80161d6:	6823      	ldr	r3, [r4, #0]
 80161d8:	9902      	ldr	r1, [sp, #8]
 80161da:	17d2      	asrs	r2, r2, #31
 80161dc:	e9c3 1200 	strd	r1, r2, [r3]
 80161e0:	465c      	mov	r4, fp
 80161e2:	e68c      	b.n	8015efe <_vfiprintf_r+0xce>
 80161e4:	f01a 0f10 	tst.w	sl, #16
 80161e8:	d003      	beq.n	80161f2 <_vfiprintf_r+0x3c2>
 80161ea:	6823      	ldr	r3, [r4, #0]
 80161ec:	9a02      	ldr	r2, [sp, #8]
 80161ee:	601a      	str	r2, [r3, #0]
 80161f0:	e7f6      	b.n	80161e0 <_vfiprintf_r+0x3b0>
 80161f2:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80161f6:	d003      	beq.n	8016200 <_vfiprintf_r+0x3d0>
 80161f8:	6823      	ldr	r3, [r4, #0]
 80161fa:	9a02      	ldr	r2, [sp, #8]
 80161fc:	801a      	strh	r2, [r3, #0]
 80161fe:	e7ef      	b.n	80161e0 <_vfiprintf_r+0x3b0>
 8016200:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8016204:	d0f1      	beq.n	80161ea <_vfiprintf_r+0x3ba>
 8016206:	6823      	ldr	r3, [r4, #0]
 8016208:	9a02      	ldr	r2, [sp, #8]
 801620a:	701a      	strb	r2, [r3, #0]
 801620c:	e7e8      	b.n	80161e0 <_vfiprintf_r+0x3b0>
 801620e:	f04a 0a10 	orr.w	sl, sl, #16
 8016212:	f01a 0320 	ands.w	r3, sl, #32
 8016216:	d01f      	beq.n	8016258 <_vfiprintf_r+0x428>
 8016218:	3407      	adds	r4, #7
 801621a:	f024 0307 	bic.w	r3, r4, #7
 801621e:	469b      	mov	fp, r3
 8016220:	685d      	ldr	r5, [r3, #4]
 8016222:	f85b 4b08 	ldr.w	r4, [fp], #8
 8016226:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 801622a:	2300      	movs	r3, #0
 801622c:	2200      	movs	r2, #0
 801622e:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 8016232:	9a00      	ldr	r2, [sp, #0]
 8016234:	3201      	adds	r2, #1
 8016236:	f000 8262 	beq.w	80166fe <_vfiprintf_r+0x8ce>
 801623a:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 801623e:	9204      	str	r2, [sp, #16]
 8016240:	ea54 0205 	orrs.w	r2, r4, r5
 8016244:	f040 8261 	bne.w	801670a <_vfiprintf_r+0x8da>
 8016248:	9a00      	ldr	r2, [sp, #0]
 801624a:	2a00      	cmp	r2, #0
 801624c:	f000 8199 	beq.w	8016582 <_vfiprintf_r+0x752>
 8016250:	2b01      	cmp	r3, #1
 8016252:	f040 825d 	bne.w	8016710 <_vfiprintf_r+0x8e0>
 8016256:	e139      	b.n	80164cc <_vfiprintf_r+0x69c>
 8016258:	46a3      	mov	fp, r4
 801625a:	f01a 0510 	ands.w	r5, sl, #16
 801625e:	f85b 4b04 	ldr.w	r4, [fp], #4
 8016262:	d001      	beq.n	8016268 <_vfiprintf_r+0x438>
 8016264:	461d      	mov	r5, r3
 8016266:	e7de      	b.n	8016226 <_vfiprintf_r+0x3f6>
 8016268:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 801626c:	d001      	beq.n	8016272 <_vfiprintf_r+0x442>
 801626e:	b2a4      	uxth	r4, r4
 8016270:	e7d9      	b.n	8016226 <_vfiprintf_r+0x3f6>
 8016272:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 8016276:	d0d6      	beq.n	8016226 <_vfiprintf_r+0x3f6>
 8016278:	b2e4      	uxtb	r4, r4
 801627a:	e7f3      	b.n	8016264 <_vfiprintf_r+0x434>
 801627c:	2330      	movs	r3, #48	; 0x30
 801627e:	46a3      	mov	fp, r4
 8016280:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8016284:	2378      	movs	r3, #120	; 0x78
 8016286:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801628a:	f85b 4b04 	ldr.w	r4, [fp], #4
 801628e:	4b03      	ldr	r3, [pc, #12]	; (801629c <_vfiprintf_r+0x46c>)
 8016290:	9305      	str	r3, [sp, #20]
 8016292:	2500      	movs	r5, #0
 8016294:	f04a 0a02 	orr.w	sl, sl, #2
 8016298:	2302      	movs	r3, #2
 801629a:	e7c7      	b.n	801622c <_vfiprintf_r+0x3fc>
 801629c:	0801777c 	.word	0x0801777c
 80162a0:	9b00      	ldr	r3, [sp, #0]
 80162a2:	46a3      	mov	fp, r4
 80162a4:	2500      	movs	r5, #0
 80162a6:	1c5c      	adds	r4, r3, #1
 80162a8:	f85b 8b04 	ldr.w	r8, [fp], #4
 80162ac:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80162b0:	f000 80ce 	beq.w	8016450 <_vfiprintf_r+0x620>
 80162b4:	461a      	mov	r2, r3
 80162b6:	4629      	mov	r1, r5
 80162b8:	4640      	mov	r0, r8
 80162ba:	f7e9 ffc9 	bl	8000250 <memchr>
 80162be:	2800      	cmp	r0, #0
 80162c0:	f000 8174 	beq.w	80165ac <_vfiprintf_r+0x77c>
 80162c4:	eba0 0308 	sub.w	r3, r0, r8
 80162c8:	9300      	str	r3, [sp, #0]
 80162ca:	9b00      	ldr	r3, [sp, #0]
 80162cc:	42ab      	cmp	r3, r5
 80162ce:	bfb8      	it	lt
 80162d0:	462b      	movlt	r3, r5
 80162d2:	9304      	str	r3, [sp, #16]
 80162d4:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 80162d8:	b113      	cbz	r3, 80162e0 <_vfiprintf_r+0x4b0>
 80162da:	9b04      	ldr	r3, [sp, #16]
 80162dc:	3301      	adds	r3, #1
 80162de:	9304      	str	r3, [sp, #16]
 80162e0:	f01a 0302 	ands.w	r3, sl, #2
 80162e4:	9308      	str	r3, [sp, #32]
 80162e6:	bf1e      	ittt	ne
 80162e8:	9b04      	ldrne	r3, [sp, #16]
 80162ea:	3302      	addne	r3, #2
 80162ec:	9304      	strne	r3, [sp, #16]
 80162ee:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 80162f2:	9309      	str	r3, [sp, #36]	; 0x24
 80162f4:	d11f      	bne.n	8016336 <_vfiprintf_r+0x506>
 80162f6:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80162fa:	1a9c      	subs	r4, r3, r2
 80162fc:	2c00      	cmp	r4, #0
 80162fe:	dd1a      	ble.n	8016336 <_vfiprintf_r+0x506>
 8016300:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8016304:	48aa      	ldr	r0, [pc, #680]	; (80165b0 <_vfiprintf_r+0x780>)
 8016306:	6030      	str	r0, [r6, #0]
 8016308:	2c10      	cmp	r4, #16
 801630a:	f103 0301 	add.w	r3, r3, #1
 801630e:	f106 0108 	add.w	r1, r6, #8
 8016312:	f300 8153 	bgt.w	80165bc <_vfiprintf_r+0x78c>
 8016316:	6074      	str	r4, [r6, #4]
 8016318:	2b07      	cmp	r3, #7
 801631a:	4414      	add	r4, r2
 801631c:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8016320:	f340 815e 	ble.w	80165e0 <_vfiprintf_r+0x7b0>
 8016324:	aa0c      	add	r2, sp, #48	; 0x30
 8016326:	4639      	mov	r1, r7
 8016328:	4648      	mov	r0, r9
 801632a:	f7ff fd4e 	bl	8015dca <__sprint_r>
 801632e:	2800      	cmp	r0, #0
 8016330:	f040 81b7 	bne.w	80166a2 <_vfiprintf_r+0x872>
 8016334:	ae0f      	add	r6, sp, #60	; 0x3c
 8016336:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 801633a:	b173      	cbz	r3, 801635a <_vfiprintf_r+0x52a>
 801633c:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 8016340:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016342:	6032      	str	r2, [r6, #0]
 8016344:	2201      	movs	r2, #1
 8016346:	6072      	str	r2, [r6, #4]
 8016348:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801634a:	3301      	adds	r3, #1
 801634c:	3201      	adds	r2, #1
 801634e:	2b07      	cmp	r3, #7
 8016350:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8016354:	f300 8146 	bgt.w	80165e4 <_vfiprintf_r+0x7b4>
 8016358:	3608      	adds	r6, #8
 801635a:	9b08      	ldr	r3, [sp, #32]
 801635c:	b16b      	cbz	r3, 801637a <_vfiprintf_r+0x54a>
 801635e:	aa0b      	add	r2, sp, #44	; 0x2c
 8016360:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016362:	6032      	str	r2, [r6, #0]
 8016364:	2202      	movs	r2, #2
 8016366:	6072      	str	r2, [r6, #4]
 8016368:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801636a:	3301      	adds	r3, #1
 801636c:	3202      	adds	r2, #2
 801636e:	2b07      	cmp	r3, #7
 8016370:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8016374:	f300 813f 	bgt.w	80165f6 <_vfiprintf_r+0x7c6>
 8016378:	3608      	adds	r6, #8
 801637a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801637c:	2b80      	cmp	r3, #128	; 0x80
 801637e:	d11f      	bne.n	80163c0 <_vfiprintf_r+0x590>
 8016380:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8016384:	1a9c      	subs	r4, r3, r2
 8016386:	2c00      	cmp	r4, #0
 8016388:	dd1a      	ble.n	80163c0 <_vfiprintf_r+0x590>
 801638a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 801638e:	4889      	ldr	r0, [pc, #548]	; (80165b4 <_vfiprintf_r+0x784>)
 8016390:	6030      	str	r0, [r6, #0]
 8016392:	2c10      	cmp	r4, #16
 8016394:	f103 0301 	add.w	r3, r3, #1
 8016398:	f106 0108 	add.w	r1, r6, #8
 801639c:	f300 8134 	bgt.w	8016608 <_vfiprintf_r+0x7d8>
 80163a0:	6074      	str	r4, [r6, #4]
 80163a2:	2b07      	cmp	r3, #7
 80163a4:	4414      	add	r4, r2
 80163a6:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 80163aa:	f340 813f 	ble.w	801662c <_vfiprintf_r+0x7fc>
 80163ae:	aa0c      	add	r2, sp, #48	; 0x30
 80163b0:	4639      	mov	r1, r7
 80163b2:	4648      	mov	r0, r9
 80163b4:	f7ff fd09 	bl	8015dca <__sprint_r>
 80163b8:	2800      	cmp	r0, #0
 80163ba:	f040 8172 	bne.w	80166a2 <_vfiprintf_r+0x872>
 80163be:	ae0f      	add	r6, sp, #60	; 0x3c
 80163c0:	9b00      	ldr	r3, [sp, #0]
 80163c2:	1aec      	subs	r4, r5, r3
 80163c4:	2c00      	cmp	r4, #0
 80163c6:	dd1a      	ble.n	80163fe <_vfiprintf_r+0x5ce>
 80163c8:	4d7a      	ldr	r5, [pc, #488]	; (80165b4 <_vfiprintf_r+0x784>)
 80163ca:	6035      	str	r5, [r6, #0]
 80163cc:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 80163d0:	2c10      	cmp	r4, #16
 80163d2:	f103 0301 	add.w	r3, r3, #1
 80163d6:	f106 0208 	add.w	r2, r6, #8
 80163da:	f300 8129 	bgt.w	8016630 <_vfiprintf_r+0x800>
 80163de:	6074      	str	r4, [r6, #4]
 80163e0:	2b07      	cmp	r3, #7
 80163e2:	440c      	add	r4, r1
 80163e4:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 80163e8:	f340 8133 	ble.w	8016652 <_vfiprintf_r+0x822>
 80163ec:	aa0c      	add	r2, sp, #48	; 0x30
 80163ee:	4639      	mov	r1, r7
 80163f0:	4648      	mov	r0, r9
 80163f2:	f7ff fcea 	bl	8015dca <__sprint_r>
 80163f6:	2800      	cmp	r0, #0
 80163f8:	f040 8153 	bne.w	80166a2 <_vfiprintf_r+0x872>
 80163fc:	ae0f      	add	r6, sp, #60	; 0x3c
 80163fe:	9b00      	ldr	r3, [sp, #0]
 8016400:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016402:	6073      	str	r3, [r6, #4]
 8016404:	4418      	add	r0, r3
 8016406:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016408:	f8c6 8000 	str.w	r8, [r6]
 801640c:	3301      	adds	r3, #1
 801640e:	2b07      	cmp	r3, #7
 8016410:	900e      	str	r0, [sp, #56]	; 0x38
 8016412:	930d      	str	r3, [sp, #52]	; 0x34
 8016414:	f300 811f 	bgt.w	8016656 <_vfiprintf_r+0x826>
 8016418:	f106 0308 	add.w	r3, r6, #8
 801641c:	f01a 0f04 	tst.w	sl, #4
 8016420:	f040 8121 	bne.w	8016666 <_vfiprintf_r+0x836>
 8016424:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8016428:	9904      	ldr	r1, [sp, #16]
 801642a:	428a      	cmp	r2, r1
 801642c:	bfac      	ite	ge
 801642e:	189b      	addge	r3, r3, r2
 8016430:	185b      	addlt	r3, r3, r1
 8016432:	9302      	str	r3, [sp, #8]
 8016434:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016436:	b13b      	cbz	r3, 8016448 <_vfiprintf_r+0x618>
 8016438:	aa0c      	add	r2, sp, #48	; 0x30
 801643a:	4639      	mov	r1, r7
 801643c:	4648      	mov	r0, r9
 801643e:	f7ff fcc4 	bl	8015dca <__sprint_r>
 8016442:	2800      	cmp	r0, #0
 8016444:	f040 812d 	bne.w	80166a2 <_vfiprintf_r+0x872>
 8016448:	2300      	movs	r3, #0
 801644a:	930d      	str	r3, [sp, #52]	; 0x34
 801644c:	ae0f      	add	r6, sp, #60	; 0x3c
 801644e:	e6c7      	b.n	80161e0 <_vfiprintf_r+0x3b0>
 8016450:	4640      	mov	r0, r8
 8016452:	f7e9 fef5 	bl	8000240 <strlen>
 8016456:	9000      	str	r0, [sp, #0]
 8016458:	e737      	b.n	80162ca <_vfiprintf_r+0x49a>
 801645a:	f04a 0a10 	orr.w	sl, sl, #16
 801645e:	f01a 0320 	ands.w	r3, sl, #32
 8016462:	d008      	beq.n	8016476 <_vfiprintf_r+0x646>
 8016464:	3407      	adds	r4, #7
 8016466:	f024 0307 	bic.w	r3, r4, #7
 801646a:	469b      	mov	fp, r3
 801646c:	685d      	ldr	r5, [r3, #4]
 801646e:	f85b 4b08 	ldr.w	r4, [fp], #8
 8016472:	2301      	movs	r3, #1
 8016474:	e6da      	b.n	801622c <_vfiprintf_r+0x3fc>
 8016476:	46a3      	mov	fp, r4
 8016478:	f01a 0510 	ands.w	r5, sl, #16
 801647c:	f85b 4b04 	ldr.w	r4, [fp], #4
 8016480:	d001      	beq.n	8016486 <_vfiprintf_r+0x656>
 8016482:	461d      	mov	r5, r3
 8016484:	e7f5      	b.n	8016472 <_vfiprintf_r+0x642>
 8016486:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 801648a:	d001      	beq.n	8016490 <_vfiprintf_r+0x660>
 801648c:	b2a4      	uxth	r4, r4
 801648e:	e7f0      	b.n	8016472 <_vfiprintf_r+0x642>
 8016490:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 8016494:	d0ed      	beq.n	8016472 <_vfiprintf_r+0x642>
 8016496:	b2e4      	uxtb	r4, r4
 8016498:	e7f3      	b.n	8016482 <_vfiprintf_r+0x652>
 801649a:	4a47      	ldr	r2, [pc, #284]	; (80165b8 <_vfiprintf_r+0x788>)
 801649c:	e5c5      	b.n	801602a <_vfiprintf_r+0x1fa>
 801649e:	46a3      	mov	fp, r4
 80164a0:	f01a 0510 	ands.w	r5, sl, #16
 80164a4:	f85b 4b04 	ldr.w	r4, [fp], #4
 80164a8:	d001      	beq.n	80164ae <_vfiprintf_r+0x67e>
 80164aa:	4615      	mov	r5, r2
 80164ac:	e5c9      	b.n	8016042 <_vfiprintf_r+0x212>
 80164ae:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 80164b2:	d001      	beq.n	80164b8 <_vfiprintf_r+0x688>
 80164b4:	b2a4      	uxth	r4, r4
 80164b6:	e5c4      	b.n	8016042 <_vfiprintf_r+0x212>
 80164b8:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 80164bc:	f43f adc1 	beq.w	8016042 <_vfiprintf_r+0x212>
 80164c0:	b2e4      	uxtb	r4, r4
 80164c2:	e7f2      	b.n	80164aa <_vfiprintf_r+0x67a>
 80164c4:	2c0a      	cmp	r4, #10
 80164c6:	f175 0300 	sbcs.w	r3, r5, #0
 80164ca:	d205      	bcs.n	80164d8 <_vfiprintf_r+0x6a8>
 80164cc:	3430      	adds	r4, #48	; 0x30
 80164ce:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 80164d2:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 80164d6:	e137      	b.n	8016748 <_vfiprintf_r+0x918>
 80164d8:	ab38      	add	r3, sp, #224	; 0xe0
 80164da:	9308      	str	r3, [sp, #32]
 80164dc:	9b04      	ldr	r3, [sp, #16]
 80164de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80164e2:	f04f 0a00 	mov.w	sl, #0
 80164e6:	9309      	str	r3, [sp, #36]	; 0x24
 80164e8:	9b08      	ldr	r3, [sp, #32]
 80164ea:	220a      	movs	r2, #10
 80164ec:	f103 38ff 	add.w	r8, r3, #4294967295
 80164f0:	4620      	mov	r0, r4
 80164f2:	2300      	movs	r3, #0
 80164f4:	4629      	mov	r1, r5
 80164f6:	f7e9 fefb 	bl	80002f0 <__aeabi_uldivmod>
 80164fa:	9b08      	ldr	r3, [sp, #32]
 80164fc:	3230      	adds	r2, #48	; 0x30
 80164fe:	f803 2c01 	strb.w	r2, [r3, #-1]
 8016502:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016504:	f10a 0a01 	add.w	sl, sl, #1
 8016508:	b1db      	cbz	r3, 8016542 <_vfiprintf_r+0x712>
 801650a:	9b06      	ldr	r3, [sp, #24]
 801650c:	781b      	ldrb	r3, [r3, #0]
 801650e:	4553      	cmp	r3, sl
 8016510:	d117      	bne.n	8016542 <_vfiprintf_r+0x712>
 8016512:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8016516:	d014      	beq.n	8016542 <_vfiprintf_r+0x712>
 8016518:	2c0a      	cmp	r4, #10
 801651a:	f175 0300 	sbcs.w	r3, r5, #0
 801651e:	d310      	bcc.n	8016542 <_vfiprintf_r+0x712>
 8016520:	9b07      	ldr	r3, [sp, #28]
 8016522:	eba8 0803 	sub.w	r8, r8, r3
 8016526:	461a      	mov	r2, r3
 8016528:	ee18 1a10 	vmov	r1, s16
 801652c:	4640      	mov	r0, r8
 801652e:	f7ff fbbe 	bl	8015cae <strncpy>
 8016532:	9b06      	ldr	r3, [sp, #24]
 8016534:	785b      	ldrb	r3, [r3, #1]
 8016536:	b1a3      	cbz	r3, 8016562 <_vfiprintf_r+0x732>
 8016538:	9b06      	ldr	r3, [sp, #24]
 801653a:	3301      	adds	r3, #1
 801653c:	9306      	str	r3, [sp, #24]
 801653e:	f04f 0a00 	mov.w	sl, #0
 8016542:	2300      	movs	r3, #0
 8016544:	220a      	movs	r2, #10
 8016546:	4620      	mov	r0, r4
 8016548:	4629      	mov	r1, r5
 801654a:	f7e9 fed1 	bl	80002f0 <__aeabi_uldivmod>
 801654e:	2c0a      	cmp	r4, #10
 8016550:	f175 0300 	sbcs.w	r3, r5, #0
 8016554:	f0c0 80f8 	bcc.w	8016748 <_vfiprintf_r+0x918>
 8016558:	4604      	mov	r4, r0
 801655a:	460d      	mov	r5, r1
 801655c:	f8cd 8020 	str.w	r8, [sp, #32]
 8016560:	e7c2      	b.n	80164e8 <_vfiprintf_r+0x6b8>
 8016562:	469a      	mov	sl, r3
 8016564:	e7ed      	b.n	8016542 <_vfiprintf_r+0x712>
 8016566:	f004 030f 	and.w	r3, r4, #15
 801656a:	9a05      	ldr	r2, [sp, #20]
 801656c:	0924      	lsrs	r4, r4, #4
 801656e:	5cd3      	ldrb	r3, [r2, r3]
 8016570:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8016574:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 8016578:	092d      	lsrs	r5, r5, #4
 801657a:	ea54 0305 	orrs.w	r3, r4, r5
 801657e:	d1f2      	bne.n	8016566 <_vfiprintf_r+0x736>
 8016580:	e0e2      	b.n	8016748 <_vfiprintf_r+0x918>
 8016582:	b933      	cbnz	r3, 8016592 <_vfiprintf_r+0x762>
 8016584:	f01a 0f01 	tst.w	sl, #1
 8016588:	d003      	beq.n	8016592 <_vfiprintf_r+0x762>
 801658a:	2330      	movs	r3, #48	; 0x30
 801658c:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 8016590:	e79f      	b.n	80164d2 <_vfiprintf_r+0x6a2>
 8016592:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 8016596:	e0d7      	b.n	8016748 <_vfiprintf_r+0x918>
 8016598:	2b00      	cmp	r3, #0
 801659a:	f000 80a3 	beq.w	80166e4 <_vfiprintf_r+0x8b4>
 801659e:	2100      	movs	r1, #0
 80165a0:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 80165a4:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 80165a8:	46a3      	mov	fp, r4
 80165aa:	e5da      	b.n	8016162 <_vfiprintf_r+0x332>
 80165ac:	4605      	mov	r5, r0
 80165ae:	e68c      	b.n	80162ca <_vfiprintf_r+0x49a>
 80165b0:	080179b4 	.word	0x080179b4
 80165b4:	080179c4 	.word	0x080179c4
 80165b8:	0801778d 	.word	0x0801778d
 80165bc:	2010      	movs	r0, #16
 80165be:	4402      	add	r2, r0
 80165c0:	2b07      	cmp	r3, #7
 80165c2:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 80165c6:	6070      	str	r0, [r6, #4]
 80165c8:	dd07      	ble.n	80165da <_vfiprintf_r+0x7aa>
 80165ca:	aa0c      	add	r2, sp, #48	; 0x30
 80165cc:	4639      	mov	r1, r7
 80165ce:	4648      	mov	r0, r9
 80165d0:	f7ff fbfb 	bl	8015dca <__sprint_r>
 80165d4:	2800      	cmp	r0, #0
 80165d6:	d164      	bne.n	80166a2 <_vfiprintf_r+0x872>
 80165d8:	a90f      	add	r1, sp, #60	; 0x3c
 80165da:	3c10      	subs	r4, #16
 80165dc:	460e      	mov	r6, r1
 80165de:	e68f      	b.n	8016300 <_vfiprintf_r+0x4d0>
 80165e0:	460e      	mov	r6, r1
 80165e2:	e6a8      	b.n	8016336 <_vfiprintf_r+0x506>
 80165e4:	aa0c      	add	r2, sp, #48	; 0x30
 80165e6:	4639      	mov	r1, r7
 80165e8:	4648      	mov	r0, r9
 80165ea:	f7ff fbee 	bl	8015dca <__sprint_r>
 80165ee:	2800      	cmp	r0, #0
 80165f0:	d157      	bne.n	80166a2 <_vfiprintf_r+0x872>
 80165f2:	ae0f      	add	r6, sp, #60	; 0x3c
 80165f4:	e6b1      	b.n	801635a <_vfiprintf_r+0x52a>
 80165f6:	aa0c      	add	r2, sp, #48	; 0x30
 80165f8:	4639      	mov	r1, r7
 80165fa:	4648      	mov	r0, r9
 80165fc:	f7ff fbe5 	bl	8015dca <__sprint_r>
 8016600:	2800      	cmp	r0, #0
 8016602:	d14e      	bne.n	80166a2 <_vfiprintf_r+0x872>
 8016604:	ae0f      	add	r6, sp, #60	; 0x3c
 8016606:	e6b8      	b.n	801637a <_vfiprintf_r+0x54a>
 8016608:	2010      	movs	r0, #16
 801660a:	4402      	add	r2, r0
 801660c:	2b07      	cmp	r3, #7
 801660e:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8016612:	6070      	str	r0, [r6, #4]
 8016614:	dd07      	ble.n	8016626 <_vfiprintf_r+0x7f6>
 8016616:	aa0c      	add	r2, sp, #48	; 0x30
 8016618:	4639      	mov	r1, r7
 801661a:	4648      	mov	r0, r9
 801661c:	f7ff fbd5 	bl	8015dca <__sprint_r>
 8016620:	2800      	cmp	r0, #0
 8016622:	d13e      	bne.n	80166a2 <_vfiprintf_r+0x872>
 8016624:	a90f      	add	r1, sp, #60	; 0x3c
 8016626:	3c10      	subs	r4, #16
 8016628:	460e      	mov	r6, r1
 801662a:	e6ae      	b.n	801638a <_vfiprintf_r+0x55a>
 801662c:	460e      	mov	r6, r1
 801662e:	e6c7      	b.n	80163c0 <_vfiprintf_r+0x590>
 8016630:	2010      	movs	r0, #16
 8016632:	4401      	add	r1, r0
 8016634:	2b07      	cmp	r3, #7
 8016636:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 801663a:	6070      	str	r0, [r6, #4]
 801663c:	dd06      	ble.n	801664c <_vfiprintf_r+0x81c>
 801663e:	aa0c      	add	r2, sp, #48	; 0x30
 8016640:	4639      	mov	r1, r7
 8016642:	4648      	mov	r0, r9
 8016644:	f7ff fbc1 	bl	8015dca <__sprint_r>
 8016648:	bb58      	cbnz	r0, 80166a2 <_vfiprintf_r+0x872>
 801664a:	aa0f      	add	r2, sp, #60	; 0x3c
 801664c:	3c10      	subs	r4, #16
 801664e:	4616      	mov	r6, r2
 8016650:	e6bb      	b.n	80163ca <_vfiprintf_r+0x59a>
 8016652:	4616      	mov	r6, r2
 8016654:	e6d3      	b.n	80163fe <_vfiprintf_r+0x5ce>
 8016656:	aa0c      	add	r2, sp, #48	; 0x30
 8016658:	4639      	mov	r1, r7
 801665a:	4648      	mov	r0, r9
 801665c:	f7ff fbb5 	bl	8015dca <__sprint_r>
 8016660:	b9f8      	cbnz	r0, 80166a2 <_vfiprintf_r+0x872>
 8016662:	ab0f      	add	r3, sp, #60	; 0x3c
 8016664:	e6da      	b.n	801641c <_vfiprintf_r+0x5ec>
 8016666:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 801666a:	1a54      	subs	r4, r2, r1
 801666c:	2c00      	cmp	r4, #0
 801666e:	f77f aed9 	ble.w	8016424 <_vfiprintf_r+0x5f4>
 8016672:	4d39      	ldr	r5, [pc, #228]	; (8016758 <_vfiprintf_r+0x928>)
 8016674:	2610      	movs	r6, #16
 8016676:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801667a:	2c10      	cmp	r4, #16
 801667c:	f102 0201 	add.w	r2, r2, #1
 8016680:	601d      	str	r5, [r3, #0]
 8016682:	dc1d      	bgt.n	80166c0 <_vfiprintf_r+0x890>
 8016684:	605c      	str	r4, [r3, #4]
 8016686:	2a07      	cmp	r2, #7
 8016688:	440c      	add	r4, r1
 801668a:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 801668e:	f77f aec9 	ble.w	8016424 <_vfiprintf_r+0x5f4>
 8016692:	aa0c      	add	r2, sp, #48	; 0x30
 8016694:	4639      	mov	r1, r7
 8016696:	4648      	mov	r0, r9
 8016698:	f7ff fb97 	bl	8015dca <__sprint_r>
 801669c:	2800      	cmp	r0, #0
 801669e:	f43f aec1 	beq.w	8016424 <_vfiprintf_r+0x5f4>
 80166a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80166a4:	07d9      	lsls	r1, r3, #31
 80166a6:	d405      	bmi.n	80166b4 <_vfiprintf_r+0x884>
 80166a8:	89bb      	ldrh	r3, [r7, #12]
 80166aa:	059a      	lsls	r2, r3, #22
 80166ac:	d402      	bmi.n	80166b4 <_vfiprintf_r+0x884>
 80166ae:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80166b0:	f7fe fcdd 	bl	801506e <__retarget_lock_release_recursive>
 80166b4:	89bb      	ldrh	r3, [r7, #12]
 80166b6:	065b      	lsls	r3, r3, #25
 80166b8:	f57f abed 	bpl.w	8015e96 <_vfiprintf_r+0x66>
 80166bc:	f7ff bbe8 	b.w	8015e90 <_vfiprintf_r+0x60>
 80166c0:	3110      	adds	r1, #16
 80166c2:	2a07      	cmp	r2, #7
 80166c4:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 80166c8:	605e      	str	r6, [r3, #4]
 80166ca:	dc02      	bgt.n	80166d2 <_vfiprintf_r+0x8a2>
 80166cc:	3308      	adds	r3, #8
 80166ce:	3c10      	subs	r4, #16
 80166d0:	e7d1      	b.n	8016676 <_vfiprintf_r+0x846>
 80166d2:	aa0c      	add	r2, sp, #48	; 0x30
 80166d4:	4639      	mov	r1, r7
 80166d6:	4648      	mov	r0, r9
 80166d8:	f7ff fb77 	bl	8015dca <__sprint_r>
 80166dc:	2800      	cmp	r0, #0
 80166de:	d1e0      	bne.n	80166a2 <_vfiprintf_r+0x872>
 80166e0:	ab0f      	add	r3, sp, #60	; 0x3c
 80166e2:	e7f4      	b.n	80166ce <_vfiprintf_r+0x89e>
 80166e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80166e6:	b913      	cbnz	r3, 80166ee <_vfiprintf_r+0x8be>
 80166e8:	2300      	movs	r3, #0
 80166ea:	930d      	str	r3, [sp, #52]	; 0x34
 80166ec:	e7d9      	b.n	80166a2 <_vfiprintf_r+0x872>
 80166ee:	aa0c      	add	r2, sp, #48	; 0x30
 80166f0:	4639      	mov	r1, r7
 80166f2:	4648      	mov	r0, r9
 80166f4:	f7ff fb69 	bl	8015dca <__sprint_r>
 80166f8:	2800      	cmp	r0, #0
 80166fa:	d0f5      	beq.n	80166e8 <_vfiprintf_r+0x8b8>
 80166fc:	e7d1      	b.n	80166a2 <_vfiprintf_r+0x872>
 80166fe:	ea54 0205 	orrs.w	r2, r4, r5
 8016702:	f8cd a010 	str.w	sl, [sp, #16]
 8016706:	f43f ada3 	beq.w	8016250 <_vfiprintf_r+0x420>
 801670a:	2b01      	cmp	r3, #1
 801670c:	f43f aeda 	beq.w	80164c4 <_vfiprintf_r+0x694>
 8016710:	2b02      	cmp	r3, #2
 8016712:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 8016716:	f43f af26 	beq.w	8016566 <_vfiprintf_r+0x736>
 801671a:	f004 0307 	and.w	r3, r4, #7
 801671e:	08e4      	lsrs	r4, r4, #3
 8016720:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 8016724:	08ed      	lsrs	r5, r5, #3
 8016726:	3330      	adds	r3, #48	; 0x30
 8016728:	ea54 0105 	orrs.w	r1, r4, r5
 801672c:	4642      	mov	r2, r8
 801672e:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8016732:	d1f2      	bne.n	801671a <_vfiprintf_r+0x8ea>
 8016734:	9904      	ldr	r1, [sp, #16]
 8016736:	07c8      	lsls	r0, r1, #31
 8016738:	d506      	bpl.n	8016748 <_vfiprintf_r+0x918>
 801673a:	2b30      	cmp	r3, #48	; 0x30
 801673c:	d004      	beq.n	8016748 <_vfiprintf_r+0x918>
 801673e:	2330      	movs	r3, #48	; 0x30
 8016740:	f808 3c01 	strb.w	r3, [r8, #-1]
 8016744:	f1a2 0802 	sub.w	r8, r2, #2
 8016748:	ab38      	add	r3, sp, #224	; 0xe0
 801674a:	eba3 0308 	sub.w	r3, r3, r8
 801674e:	9d00      	ldr	r5, [sp, #0]
 8016750:	f8dd a010 	ldr.w	sl, [sp, #16]
 8016754:	9300      	str	r3, [sp, #0]
 8016756:	e5b8      	b.n	80162ca <_vfiprintf_r+0x49a>
 8016758:	080179b4 	.word	0x080179b4

0801675c <__sbprintf>:
 801675c:	b570      	push	{r4, r5, r6, lr}
 801675e:	460c      	mov	r4, r1
 8016760:	8989      	ldrh	r1, [r1, #12]
 8016762:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 8016766:	f021 0102 	bic.w	r1, r1, #2
 801676a:	f8ad 1014 	strh.w	r1, [sp, #20]
 801676e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8016770:	911b      	str	r1, [sp, #108]	; 0x6c
 8016772:	89e1      	ldrh	r1, [r4, #14]
 8016774:	f8ad 1016 	strh.w	r1, [sp, #22]
 8016778:	69e1      	ldr	r1, [r4, #28]
 801677a:	9109      	str	r1, [sp, #36]	; 0x24
 801677c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801677e:	910b      	str	r1, [sp, #44]	; 0x2c
 8016780:	a91c      	add	r1, sp, #112	; 0x70
 8016782:	9102      	str	r1, [sp, #8]
 8016784:	9106      	str	r1, [sp, #24]
 8016786:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801678a:	4606      	mov	r6, r0
 801678c:	9104      	str	r1, [sp, #16]
 801678e:	9107      	str	r1, [sp, #28]
 8016790:	a818      	add	r0, sp, #96	; 0x60
 8016792:	2100      	movs	r1, #0
 8016794:	e9cd 3200 	strd	r3, r2, [sp]
 8016798:	9108      	str	r1, [sp, #32]
 801679a:	f7fe fc65 	bl	8015068 <__retarget_lock_init_recursive>
 801679e:	e9dd 3200 	ldrd	r3, r2, [sp]
 80167a2:	a902      	add	r1, sp, #8
 80167a4:	4630      	mov	r0, r6
 80167a6:	f7ff fb43 	bl	8015e30 <_vfiprintf_r>
 80167aa:	1e05      	subs	r5, r0, #0
 80167ac:	db07      	blt.n	80167be <__sbprintf+0x62>
 80167ae:	a902      	add	r1, sp, #8
 80167b0:	4630      	mov	r0, r6
 80167b2:	f7fe f92f 	bl	8014a14 <_fflush_r>
 80167b6:	2800      	cmp	r0, #0
 80167b8:	bf18      	it	ne
 80167ba:	f04f 35ff 	movne.w	r5, #4294967295
 80167be:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80167c2:	9818      	ldr	r0, [sp, #96]	; 0x60
 80167c4:	065b      	lsls	r3, r3, #25
 80167c6:	bf42      	ittt	mi
 80167c8:	89a3      	ldrhmi	r3, [r4, #12]
 80167ca:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 80167ce:	81a3      	strhmi	r3, [r4, #12]
 80167d0:	f7fe fc4b 	bl	801506a <__retarget_lock_close_recursive>
 80167d4:	4628      	mov	r0, r5
 80167d6:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 80167da:	bd70      	pop	{r4, r5, r6, pc}

080167dc <__swbuf_r>:
 80167dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167de:	460e      	mov	r6, r1
 80167e0:	4614      	mov	r4, r2
 80167e2:	4605      	mov	r5, r0
 80167e4:	b118      	cbz	r0, 80167ee <__swbuf_r+0x12>
 80167e6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80167e8:	b90b      	cbnz	r3, 80167ee <__swbuf_r+0x12>
 80167ea:	f7fe f97f 	bl	8014aec <__sinit>
 80167ee:	69a3      	ldr	r3, [r4, #24]
 80167f0:	60a3      	str	r3, [r4, #8]
 80167f2:	89a3      	ldrh	r3, [r4, #12]
 80167f4:	0719      	lsls	r1, r3, #28
 80167f6:	d529      	bpl.n	801684c <__swbuf_r+0x70>
 80167f8:	6923      	ldr	r3, [r4, #16]
 80167fa:	b33b      	cbz	r3, 801684c <__swbuf_r+0x70>
 80167fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016800:	b2f6      	uxtb	r6, r6
 8016802:	049a      	lsls	r2, r3, #18
 8016804:	4637      	mov	r7, r6
 8016806:	d52a      	bpl.n	801685e <__swbuf_r+0x82>
 8016808:	6823      	ldr	r3, [r4, #0]
 801680a:	6920      	ldr	r0, [r4, #16]
 801680c:	1a18      	subs	r0, r3, r0
 801680e:	6963      	ldr	r3, [r4, #20]
 8016810:	4283      	cmp	r3, r0
 8016812:	dc04      	bgt.n	801681e <__swbuf_r+0x42>
 8016814:	4621      	mov	r1, r4
 8016816:	4628      	mov	r0, r5
 8016818:	f7fe f8fc 	bl	8014a14 <_fflush_r>
 801681c:	b9e0      	cbnz	r0, 8016858 <__swbuf_r+0x7c>
 801681e:	68a3      	ldr	r3, [r4, #8]
 8016820:	3b01      	subs	r3, #1
 8016822:	60a3      	str	r3, [r4, #8]
 8016824:	6823      	ldr	r3, [r4, #0]
 8016826:	1c5a      	adds	r2, r3, #1
 8016828:	6022      	str	r2, [r4, #0]
 801682a:	701e      	strb	r6, [r3, #0]
 801682c:	6962      	ldr	r2, [r4, #20]
 801682e:	1c43      	adds	r3, r0, #1
 8016830:	429a      	cmp	r2, r3
 8016832:	d004      	beq.n	801683e <__swbuf_r+0x62>
 8016834:	89a3      	ldrh	r3, [r4, #12]
 8016836:	07db      	lsls	r3, r3, #31
 8016838:	d506      	bpl.n	8016848 <__swbuf_r+0x6c>
 801683a:	2e0a      	cmp	r6, #10
 801683c:	d104      	bne.n	8016848 <__swbuf_r+0x6c>
 801683e:	4621      	mov	r1, r4
 8016840:	4628      	mov	r0, r5
 8016842:	f7fe f8e7 	bl	8014a14 <_fflush_r>
 8016846:	b938      	cbnz	r0, 8016858 <__swbuf_r+0x7c>
 8016848:	4638      	mov	r0, r7
 801684a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801684c:	4621      	mov	r1, r4
 801684e:	4628      	mov	r0, r5
 8016850:	f7fd fa02 	bl	8013c58 <__swsetup_r>
 8016854:	2800      	cmp	r0, #0
 8016856:	d0d1      	beq.n	80167fc <__swbuf_r+0x20>
 8016858:	f04f 37ff 	mov.w	r7, #4294967295
 801685c:	e7f4      	b.n	8016848 <__swbuf_r+0x6c>
 801685e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016862:	81a3      	strh	r3, [r4, #12]
 8016864:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016866:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801686a:	6663      	str	r3, [r4, #100]	; 0x64
 801686c:	e7cc      	b.n	8016808 <__swbuf_r+0x2c>
	...

08016870 <_write_r>:
 8016870:	b538      	push	{r3, r4, r5, lr}
 8016872:	4d07      	ldr	r5, [pc, #28]	; (8016890 <_write_r+0x20>)
 8016874:	4604      	mov	r4, r0
 8016876:	4608      	mov	r0, r1
 8016878:	4611      	mov	r1, r2
 801687a:	2200      	movs	r2, #0
 801687c:	602a      	str	r2, [r5, #0]
 801687e:	461a      	mov	r2, r3
 8016880:	f7ec fe8a 	bl	8003598 <_write>
 8016884:	1c43      	adds	r3, r0, #1
 8016886:	d102      	bne.n	801688e <_write_r+0x1e>
 8016888:	682b      	ldr	r3, [r5, #0]
 801688a:	b103      	cbz	r3, 801688e <_write_r+0x1e>
 801688c:	6023      	str	r3, [r4, #0]
 801688e:	bd38      	pop	{r3, r4, r5, pc}
 8016890:	20006560 	.word	0x20006560

08016894 <__register_exitproc>:
 8016894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016898:	f8df a078 	ldr.w	sl, [pc, #120]	; 8016914 <__register_exitproc+0x80>
 801689c:	4606      	mov	r6, r0
 801689e:	f8da 0000 	ldr.w	r0, [sl]
 80168a2:	4698      	mov	r8, r3
 80168a4:	460f      	mov	r7, r1
 80168a6:	4691      	mov	r9, r2
 80168a8:	f7fe fbe0 	bl	801506c <__retarget_lock_acquire_recursive>
 80168ac:	4b18      	ldr	r3, [pc, #96]	; (8016910 <__register_exitproc+0x7c>)
 80168ae:	681b      	ldr	r3, [r3, #0]
 80168b0:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 80168b4:	b91c      	cbnz	r4, 80168be <__register_exitproc+0x2a>
 80168b6:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 80168ba:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 80168be:	6865      	ldr	r5, [r4, #4]
 80168c0:	f8da 0000 	ldr.w	r0, [sl]
 80168c4:	2d1f      	cmp	r5, #31
 80168c6:	dd05      	ble.n	80168d4 <__register_exitproc+0x40>
 80168c8:	f7fe fbd1 	bl	801506e <__retarget_lock_release_recursive>
 80168cc:	f04f 30ff 	mov.w	r0, #4294967295
 80168d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80168d4:	b19e      	cbz	r6, 80168fe <__register_exitproc+0x6a>
 80168d6:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 80168da:	2201      	movs	r2, #1
 80168dc:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 80168e0:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 80168e4:	40aa      	lsls	r2, r5
 80168e6:	4313      	orrs	r3, r2
 80168e8:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 80168ec:	2e02      	cmp	r6, #2
 80168ee:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 80168f2:	bf02      	ittt	eq
 80168f4:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 80168f8:	4313      	orreq	r3, r2
 80168fa:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 80168fe:	1c6b      	adds	r3, r5, #1
 8016900:	3502      	adds	r5, #2
 8016902:	6063      	str	r3, [r4, #4]
 8016904:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8016908:	f7fe fbb1 	bl	801506e <__retarget_lock_release_recursive>
 801690c:	2000      	movs	r0, #0
 801690e:	e7df      	b.n	80168d0 <__register_exitproc+0x3c>
 8016910:	08017768 	.word	0x08017768
 8016914:	20000c48 	.word	0x20000c48

08016918 <__assert_func>:
 8016918:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801691a:	4614      	mov	r4, r2
 801691c:	461a      	mov	r2, r3
 801691e:	4b09      	ldr	r3, [pc, #36]	; (8016944 <__assert_func+0x2c>)
 8016920:	681b      	ldr	r3, [r3, #0]
 8016922:	4605      	mov	r5, r0
 8016924:	68d8      	ldr	r0, [r3, #12]
 8016926:	b14c      	cbz	r4, 801693c <__assert_func+0x24>
 8016928:	4b07      	ldr	r3, [pc, #28]	; (8016948 <__assert_func+0x30>)
 801692a:	9100      	str	r1, [sp, #0]
 801692c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016930:	4906      	ldr	r1, [pc, #24]	; (801694c <__assert_func+0x34>)
 8016932:	462b      	mov	r3, r5
 8016934:	f000 f8ac 	bl	8016a90 <fiprintf>
 8016938:	f000 f9a9 	bl	8016c8e <abort>
 801693c:	4b04      	ldr	r3, [pc, #16]	; (8016950 <__assert_func+0x38>)
 801693e:	461c      	mov	r4, r3
 8016940:	e7f3      	b.n	801692a <__assert_func+0x12>
 8016942:	bf00      	nop
 8016944:	20000408 	.word	0x20000408
 8016948:	080179d4 	.word	0x080179d4
 801694c:	080179e1 	.word	0x080179e1
 8016950:	08017a0f 	.word	0x08017a0f

08016954 <_calloc_r>:
 8016954:	b538      	push	{r3, r4, r5, lr}
 8016956:	fba1 1502 	umull	r1, r5, r1, r2
 801695a:	b92d      	cbnz	r5, 8016968 <_calloc_r+0x14>
 801695c:	f7fa fa22 	bl	8010da4 <_malloc_r>
 8016960:	4604      	mov	r4, r0
 8016962:	b938      	cbnz	r0, 8016974 <_calloc_r+0x20>
 8016964:	4620      	mov	r0, r4
 8016966:	bd38      	pop	{r3, r4, r5, pc}
 8016968:	f7fd ffc0 	bl	80148ec <__errno>
 801696c:	230c      	movs	r3, #12
 801696e:	6003      	str	r3, [r0, #0]
 8016970:	2400      	movs	r4, #0
 8016972:	e7f7      	b.n	8016964 <_calloc_r+0x10>
 8016974:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8016978:	f022 0203 	bic.w	r2, r2, #3
 801697c:	3a04      	subs	r2, #4
 801697e:	2a24      	cmp	r2, #36	; 0x24
 8016980:	d819      	bhi.n	80169b6 <_calloc_r+0x62>
 8016982:	2a13      	cmp	r2, #19
 8016984:	d915      	bls.n	80169b2 <_calloc_r+0x5e>
 8016986:	2a1b      	cmp	r2, #27
 8016988:	e9c0 5500 	strd	r5, r5, [r0]
 801698c:	d806      	bhi.n	801699c <_calloc_r+0x48>
 801698e:	f100 0308 	add.w	r3, r0, #8
 8016992:	2200      	movs	r2, #0
 8016994:	e9c3 2200 	strd	r2, r2, [r3]
 8016998:	609a      	str	r2, [r3, #8]
 801699a:	e7e3      	b.n	8016964 <_calloc_r+0x10>
 801699c:	2a24      	cmp	r2, #36	; 0x24
 801699e:	e9c0 5502 	strd	r5, r5, [r0, #8]
 80169a2:	bf11      	iteee	ne
 80169a4:	f100 0310 	addne.w	r3, r0, #16
 80169a8:	6105      	streq	r5, [r0, #16]
 80169aa:	f100 0318 	addeq.w	r3, r0, #24
 80169ae:	6145      	streq	r5, [r0, #20]
 80169b0:	e7ef      	b.n	8016992 <_calloc_r+0x3e>
 80169b2:	4603      	mov	r3, r0
 80169b4:	e7ed      	b.n	8016992 <_calloc_r+0x3e>
 80169b6:	4629      	mov	r1, r5
 80169b8:	f7fa fc30 	bl	801121c <memset>
 80169bc:	e7d2      	b.n	8016964 <_calloc_r+0x10>
	...

080169c0 <_close_r>:
 80169c0:	b538      	push	{r3, r4, r5, lr}
 80169c2:	4d06      	ldr	r5, [pc, #24]	; (80169dc <_close_r+0x1c>)
 80169c4:	2300      	movs	r3, #0
 80169c6:	4604      	mov	r4, r0
 80169c8:	4608      	mov	r0, r1
 80169ca:	602b      	str	r3, [r5, #0]
 80169cc:	f000 fca4 	bl	8017318 <_close>
 80169d0:	1c43      	adds	r3, r0, #1
 80169d2:	d102      	bne.n	80169da <_close_r+0x1a>
 80169d4:	682b      	ldr	r3, [r5, #0]
 80169d6:	b103      	cbz	r3, 80169da <_close_r+0x1a>
 80169d8:	6023      	str	r3, [r4, #0]
 80169da:	bd38      	pop	{r3, r4, r5, pc}
 80169dc:	20006560 	.word	0x20006560

080169e0 <_fclose_r>:
 80169e0:	b570      	push	{r4, r5, r6, lr}
 80169e2:	4606      	mov	r6, r0
 80169e4:	460c      	mov	r4, r1
 80169e6:	b911      	cbnz	r1, 80169ee <_fclose_r+0xe>
 80169e8:	2500      	movs	r5, #0
 80169ea:	4628      	mov	r0, r5
 80169ec:	bd70      	pop	{r4, r5, r6, pc}
 80169ee:	b118      	cbz	r0, 80169f8 <_fclose_r+0x18>
 80169f0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80169f2:	b90b      	cbnz	r3, 80169f8 <_fclose_r+0x18>
 80169f4:	f7fe f87a 	bl	8014aec <__sinit>
 80169f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80169fa:	07d8      	lsls	r0, r3, #31
 80169fc:	d405      	bmi.n	8016a0a <_fclose_r+0x2a>
 80169fe:	89a3      	ldrh	r3, [r4, #12]
 8016a00:	0599      	lsls	r1, r3, #22
 8016a02:	d402      	bmi.n	8016a0a <_fclose_r+0x2a>
 8016a04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016a06:	f7fe fb31 	bl	801506c <__retarget_lock_acquire_recursive>
 8016a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016a0e:	b93b      	cbnz	r3, 8016a20 <_fclose_r+0x40>
 8016a10:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8016a12:	f015 0501 	ands.w	r5, r5, #1
 8016a16:	d1e7      	bne.n	80169e8 <_fclose_r+0x8>
 8016a18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016a1a:	f7fe fb28 	bl	801506e <__retarget_lock_release_recursive>
 8016a1e:	e7e4      	b.n	80169ea <_fclose_r+0xa>
 8016a20:	4621      	mov	r1, r4
 8016a22:	4630      	mov	r0, r6
 8016a24:	f7fd ff68 	bl	80148f8 <__sflush_r>
 8016a28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8016a2a:	4605      	mov	r5, r0
 8016a2c:	b133      	cbz	r3, 8016a3c <_fclose_r+0x5c>
 8016a2e:	69e1      	ldr	r1, [r4, #28]
 8016a30:	4630      	mov	r0, r6
 8016a32:	4798      	blx	r3
 8016a34:	2800      	cmp	r0, #0
 8016a36:	bfb8      	it	lt
 8016a38:	f04f 35ff 	movlt.w	r5, #4294967295
 8016a3c:	89a3      	ldrh	r3, [r4, #12]
 8016a3e:	061a      	lsls	r2, r3, #24
 8016a40:	d503      	bpl.n	8016a4a <_fclose_r+0x6a>
 8016a42:	6921      	ldr	r1, [r4, #16]
 8016a44:	4630      	mov	r0, r6
 8016a46:	f7fe f8e1 	bl	8014c0c <_free_r>
 8016a4a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8016a4c:	b141      	cbz	r1, 8016a60 <_fclose_r+0x80>
 8016a4e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8016a52:	4299      	cmp	r1, r3
 8016a54:	d002      	beq.n	8016a5c <_fclose_r+0x7c>
 8016a56:	4630      	mov	r0, r6
 8016a58:	f7fe f8d8 	bl	8014c0c <_free_r>
 8016a5c:	2300      	movs	r3, #0
 8016a5e:	6323      	str	r3, [r4, #48]	; 0x30
 8016a60:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8016a62:	b121      	cbz	r1, 8016a6e <_fclose_r+0x8e>
 8016a64:	4630      	mov	r0, r6
 8016a66:	f7fe f8d1 	bl	8014c0c <_free_r>
 8016a6a:	2300      	movs	r3, #0
 8016a6c:	6463      	str	r3, [r4, #68]	; 0x44
 8016a6e:	f7fe f825 	bl	8014abc <__sfp_lock_acquire>
 8016a72:	2300      	movs	r3, #0
 8016a74:	81a3      	strh	r3, [r4, #12]
 8016a76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016a78:	07db      	lsls	r3, r3, #31
 8016a7a:	d402      	bmi.n	8016a82 <_fclose_r+0xa2>
 8016a7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016a7e:	f7fe faf6 	bl	801506e <__retarget_lock_release_recursive>
 8016a82:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016a84:	f7fe faf1 	bl	801506a <__retarget_lock_close_recursive>
 8016a88:	f7fe f81e 	bl	8014ac8 <__sfp_lock_release>
 8016a8c:	e7ad      	b.n	80169ea <_fclose_r+0xa>
	...

08016a90 <fiprintf>:
 8016a90:	b40e      	push	{r1, r2, r3}
 8016a92:	b503      	push	{r0, r1, lr}
 8016a94:	4601      	mov	r1, r0
 8016a96:	ab03      	add	r3, sp, #12
 8016a98:	4805      	ldr	r0, [pc, #20]	; (8016ab0 <fiprintf+0x20>)
 8016a9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8016a9e:	6800      	ldr	r0, [r0, #0]
 8016aa0:	9301      	str	r3, [sp, #4]
 8016aa2:	f7ff f9c5 	bl	8015e30 <_vfiprintf_r>
 8016aa6:	b002      	add	sp, #8
 8016aa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8016aac:	b003      	add	sp, #12
 8016aae:	4770      	bx	lr
 8016ab0:	20000408 	.word	0x20000408

08016ab4 <__fputwc>:
 8016ab4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016ab8:	4680      	mov	r8, r0
 8016aba:	460e      	mov	r6, r1
 8016abc:	4615      	mov	r5, r2
 8016abe:	f000 f887 	bl	8016bd0 <__locale_mb_cur_max>
 8016ac2:	2801      	cmp	r0, #1
 8016ac4:	d11c      	bne.n	8016b00 <__fputwc+0x4c>
 8016ac6:	1e73      	subs	r3, r6, #1
 8016ac8:	2bfe      	cmp	r3, #254	; 0xfe
 8016aca:	d819      	bhi.n	8016b00 <__fputwc+0x4c>
 8016acc:	f88d 6004 	strb.w	r6, [sp, #4]
 8016ad0:	4604      	mov	r4, r0
 8016ad2:	2700      	movs	r7, #0
 8016ad4:	f10d 0904 	add.w	r9, sp, #4
 8016ad8:	42a7      	cmp	r7, r4
 8016ada:	d020      	beq.n	8016b1e <__fputwc+0x6a>
 8016adc:	68ab      	ldr	r3, [r5, #8]
 8016ade:	f817 1009 	ldrb.w	r1, [r7, r9]
 8016ae2:	3b01      	subs	r3, #1
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	60ab      	str	r3, [r5, #8]
 8016ae8:	da04      	bge.n	8016af4 <__fputwc+0x40>
 8016aea:	69aa      	ldr	r2, [r5, #24]
 8016aec:	4293      	cmp	r3, r2
 8016aee:	db1a      	blt.n	8016b26 <__fputwc+0x72>
 8016af0:	290a      	cmp	r1, #10
 8016af2:	d018      	beq.n	8016b26 <__fputwc+0x72>
 8016af4:	682b      	ldr	r3, [r5, #0]
 8016af6:	1c5a      	adds	r2, r3, #1
 8016af8:	602a      	str	r2, [r5, #0]
 8016afa:	7019      	strb	r1, [r3, #0]
 8016afc:	3701      	adds	r7, #1
 8016afe:	e7eb      	b.n	8016ad8 <__fputwc+0x24>
 8016b00:	a901      	add	r1, sp, #4
 8016b02:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 8016b06:	4632      	mov	r2, r6
 8016b08:	4640      	mov	r0, r8
 8016b0a:	f000 f89d 	bl	8016c48 <_wcrtomb_r>
 8016b0e:	1c41      	adds	r1, r0, #1
 8016b10:	4604      	mov	r4, r0
 8016b12:	d1de      	bne.n	8016ad2 <__fputwc+0x1e>
 8016b14:	89ab      	ldrh	r3, [r5, #12]
 8016b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016b1a:	81ab      	strh	r3, [r5, #12]
 8016b1c:	4606      	mov	r6, r0
 8016b1e:	4630      	mov	r0, r6
 8016b20:	b003      	add	sp, #12
 8016b22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016b26:	462a      	mov	r2, r5
 8016b28:	4640      	mov	r0, r8
 8016b2a:	f7ff fe57 	bl	80167dc <__swbuf_r>
 8016b2e:	1c42      	adds	r2, r0, #1
 8016b30:	d1e4      	bne.n	8016afc <__fputwc+0x48>
 8016b32:	4606      	mov	r6, r0
 8016b34:	e7f3      	b.n	8016b1e <__fputwc+0x6a>

08016b36 <_fputwc_r>:
 8016b36:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8016b38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016b3a:	4614      	mov	r4, r2
 8016b3c:	07da      	lsls	r2, r3, #31
 8016b3e:	4605      	mov	r5, r0
 8016b40:	d407      	bmi.n	8016b52 <_fputwc_r+0x1c>
 8016b42:	89a3      	ldrh	r3, [r4, #12]
 8016b44:	059b      	lsls	r3, r3, #22
 8016b46:	d404      	bmi.n	8016b52 <_fputwc_r+0x1c>
 8016b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016b4a:	9101      	str	r1, [sp, #4]
 8016b4c:	f7fe fa8e 	bl	801506c <__retarget_lock_acquire_recursive>
 8016b50:	9901      	ldr	r1, [sp, #4]
 8016b52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016b56:	0498      	lsls	r0, r3, #18
 8016b58:	d406      	bmi.n	8016b68 <_fputwc_r+0x32>
 8016b5a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016b5e:	81a3      	strh	r3, [r4, #12]
 8016b60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016b62:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016b66:	6663      	str	r3, [r4, #100]	; 0x64
 8016b68:	4622      	mov	r2, r4
 8016b6a:	4628      	mov	r0, r5
 8016b6c:	f7ff ffa2 	bl	8016ab4 <__fputwc>
 8016b70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016b72:	07da      	lsls	r2, r3, #31
 8016b74:	4605      	mov	r5, r0
 8016b76:	d405      	bmi.n	8016b84 <_fputwc_r+0x4e>
 8016b78:	89a3      	ldrh	r3, [r4, #12]
 8016b7a:	059b      	lsls	r3, r3, #22
 8016b7c:	d402      	bmi.n	8016b84 <_fputwc_r+0x4e>
 8016b7e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016b80:	f7fe fa75 	bl	801506e <__retarget_lock_release_recursive>
 8016b84:	4628      	mov	r0, r5
 8016b86:	b003      	add	sp, #12
 8016b88:	bd30      	pop	{r4, r5, pc}
	...

08016b8c <_fstat_r>:
 8016b8c:	b538      	push	{r3, r4, r5, lr}
 8016b8e:	4d07      	ldr	r5, [pc, #28]	; (8016bac <_fstat_r+0x20>)
 8016b90:	2300      	movs	r3, #0
 8016b92:	4604      	mov	r4, r0
 8016b94:	4608      	mov	r0, r1
 8016b96:	4611      	mov	r1, r2
 8016b98:	602b      	str	r3, [r5, #0]
 8016b9a:	f000 fbc5 	bl	8017328 <_fstat>
 8016b9e:	1c43      	adds	r3, r0, #1
 8016ba0:	d102      	bne.n	8016ba8 <_fstat_r+0x1c>
 8016ba2:	682b      	ldr	r3, [r5, #0]
 8016ba4:	b103      	cbz	r3, 8016ba8 <_fstat_r+0x1c>
 8016ba6:	6023      	str	r3, [r4, #0]
 8016ba8:	bd38      	pop	{r3, r4, r5, pc}
 8016baa:	bf00      	nop
 8016bac:	20006560 	.word	0x20006560

08016bb0 <_isatty_r>:
 8016bb0:	b538      	push	{r3, r4, r5, lr}
 8016bb2:	4d06      	ldr	r5, [pc, #24]	; (8016bcc <_isatty_r+0x1c>)
 8016bb4:	2300      	movs	r3, #0
 8016bb6:	4604      	mov	r4, r0
 8016bb8:	4608      	mov	r0, r1
 8016bba:	602b      	str	r3, [r5, #0]
 8016bbc:	f000 fbc4 	bl	8017348 <_isatty>
 8016bc0:	1c43      	adds	r3, r0, #1
 8016bc2:	d102      	bne.n	8016bca <_isatty_r+0x1a>
 8016bc4:	682b      	ldr	r3, [r5, #0]
 8016bc6:	b103      	cbz	r3, 8016bca <_isatty_r+0x1a>
 8016bc8:	6023      	str	r3, [r4, #0]
 8016bca:	bd38      	pop	{r3, r4, r5, pc}
 8016bcc:	20006560 	.word	0x20006560

08016bd0 <__locale_mb_cur_max>:
 8016bd0:	4b01      	ldr	r3, [pc, #4]	; (8016bd8 <__locale_mb_cur_max+0x8>)
 8016bd2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8016bd6:	4770      	bx	lr
 8016bd8:	20000c4c 	.word	0x20000c4c

08016bdc <_lseek_r>:
 8016bdc:	b538      	push	{r3, r4, r5, lr}
 8016bde:	4d07      	ldr	r5, [pc, #28]	; (8016bfc <_lseek_r+0x20>)
 8016be0:	4604      	mov	r4, r0
 8016be2:	4608      	mov	r0, r1
 8016be4:	4611      	mov	r1, r2
 8016be6:	2200      	movs	r2, #0
 8016be8:	602a      	str	r2, [r5, #0]
 8016bea:	461a      	mov	r2, r3
 8016bec:	f000 fbbc 	bl	8017368 <_lseek>
 8016bf0:	1c43      	adds	r3, r0, #1
 8016bf2:	d102      	bne.n	8016bfa <_lseek_r+0x1e>
 8016bf4:	682b      	ldr	r3, [r5, #0]
 8016bf6:	b103      	cbz	r3, 8016bfa <_lseek_r+0x1e>
 8016bf8:	6023      	str	r3, [r4, #0]
 8016bfa:	bd38      	pop	{r3, r4, r5, pc}
 8016bfc:	20006560 	.word	0x20006560

08016c00 <__ascii_mbtowc>:
 8016c00:	b082      	sub	sp, #8
 8016c02:	b901      	cbnz	r1, 8016c06 <__ascii_mbtowc+0x6>
 8016c04:	a901      	add	r1, sp, #4
 8016c06:	b142      	cbz	r2, 8016c1a <__ascii_mbtowc+0x1a>
 8016c08:	b14b      	cbz	r3, 8016c1e <__ascii_mbtowc+0x1e>
 8016c0a:	7813      	ldrb	r3, [r2, #0]
 8016c0c:	600b      	str	r3, [r1, #0]
 8016c0e:	7812      	ldrb	r2, [r2, #0]
 8016c10:	1e10      	subs	r0, r2, #0
 8016c12:	bf18      	it	ne
 8016c14:	2001      	movne	r0, #1
 8016c16:	b002      	add	sp, #8
 8016c18:	4770      	bx	lr
 8016c1a:	4610      	mov	r0, r2
 8016c1c:	e7fb      	b.n	8016c16 <__ascii_mbtowc+0x16>
 8016c1e:	f06f 0001 	mvn.w	r0, #1
 8016c22:	e7f8      	b.n	8016c16 <__ascii_mbtowc+0x16>

08016c24 <_read_r>:
 8016c24:	b538      	push	{r3, r4, r5, lr}
 8016c26:	4d07      	ldr	r5, [pc, #28]	; (8016c44 <_read_r+0x20>)
 8016c28:	4604      	mov	r4, r0
 8016c2a:	4608      	mov	r0, r1
 8016c2c:	4611      	mov	r1, r2
 8016c2e:	2200      	movs	r2, #0
 8016c30:	602a      	str	r2, [r5, #0]
 8016c32:	461a      	mov	r2, r3
 8016c34:	f000 fba0 	bl	8017378 <_read>
 8016c38:	1c43      	adds	r3, r0, #1
 8016c3a:	d102      	bne.n	8016c42 <_read_r+0x1e>
 8016c3c:	682b      	ldr	r3, [r5, #0]
 8016c3e:	b103      	cbz	r3, 8016c42 <_read_r+0x1e>
 8016c40:	6023      	str	r3, [r4, #0]
 8016c42:	bd38      	pop	{r3, r4, r5, pc}
 8016c44:	20006560 	.word	0x20006560

08016c48 <_wcrtomb_r>:
 8016c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016c4a:	4c09      	ldr	r4, [pc, #36]	; (8016c70 <_wcrtomb_r+0x28>)
 8016c4c:	b085      	sub	sp, #20
 8016c4e:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 8016c52:	4605      	mov	r5, r0
 8016c54:	461e      	mov	r6, r3
 8016c56:	b909      	cbnz	r1, 8016c5c <_wcrtomb_r+0x14>
 8016c58:	460a      	mov	r2, r1
 8016c5a:	a901      	add	r1, sp, #4
 8016c5c:	47b8      	blx	r7
 8016c5e:	1c43      	adds	r3, r0, #1
 8016c60:	bf01      	itttt	eq
 8016c62:	2300      	moveq	r3, #0
 8016c64:	6033      	streq	r3, [r6, #0]
 8016c66:	238a      	moveq	r3, #138	; 0x8a
 8016c68:	602b      	streq	r3, [r5, #0]
 8016c6a:	b005      	add	sp, #20
 8016c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016c6e:	bf00      	nop
 8016c70:	20000c4c 	.word	0x20000c4c

08016c74 <__ascii_wctomb>:
 8016c74:	b149      	cbz	r1, 8016c8a <__ascii_wctomb+0x16>
 8016c76:	2aff      	cmp	r2, #255	; 0xff
 8016c78:	bf85      	ittet	hi
 8016c7a:	238a      	movhi	r3, #138	; 0x8a
 8016c7c:	6003      	strhi	r3, [r0, #0]
 8016c7e:	700a      	strbls	r2, [r1, #0]
 8016c80:	f04f 30ff 	movhi.w	r0, #4294967295
 8016c84:	bf98      	it	ls
 8016c86:	2001      	movls	r0, #1
 8016c88:	4770      	bx	lr
 8016c8a:	4608      	mov	r0, r1
 8016c8c:	4770      	bx	lr

08016c8e <abort>:
 8016c8e:	b508      	push	{r3, lr}
 8016c90:	2006      	movs	r0, #6
 8016c92:	f000 f82d 	bl	8016cf0 <raise>
 8016c96:	2001      	movs	r0, #1
 8016c98:	f000 fb84 	bl	80173a4 <_exit>

08016c9c <_raise_r>:
 8016c9c:	291f      	cmp	r1, #31
 8016c9e:	b538      	push	{r3, r4, r5, lr}
 8016ca0:	4604      	mov	r4, r0
 8016ca2:	460d      	mov	r5, r1
 8016ca4:	d904      	bls.n	8016cb0 <_raise_r+0x14>
 8016ca6:	2316      	movs	r3, #22
 8016ca8:	6003      	str	r3, [r0, #0]
 8016caa:	f04f 30ff 	mov.w	r0, #4294967295
 8016cae:	bd38      	pop	{r3, r4, r5, pc}
 8016cb0:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 8016cb4:	b112      	cbz	r2, 8016cbc <_raise_r+0x20>
 8016cb6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016cba:	b94b      	cbnz	r3, 8016cd0 <_raise_r+0x34>
 8016cbc:	4620      	mov	r0, r4
 8016cbe:	f000 f831 	bl	8016d24 <_getpid_r>
 8016cc2:	462a      	mov	r2, r5
 8016cc4:	4601      	mov	r1, r0
 8016cc6:	4620      	mov	r0, r4
 8016cc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016ccc:	f000 b818 	b.w	8016d00 <_kill_r>
 8016cd0:	2b01      	cmp	r3, #1
 8016cd2:	d00a      	beq.n	8016cea <_raise_r+0x4e>
 8016cd4:	1c59      	adds	r1, r3, #1
 8016cd6:	d103      	bne.n	8016ce0 <_raise_r+0x44>
 8016cd8:	2316      	movs	r3, #22
 8016cda:	6003      	str	r3, [r0, #0]
 8016cdc:	2001      	movs	r0, #1
 8016cde:	e7e6      	b.n	8016cae <_raise_r+0x12>
 8016ce0:	2400      	movs	r4, #0
 8016ce2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016ce6:	4628      	mov	r0, r5
 8016ce8:	4798      	blx	r3
 8016cea:	2000      	movs	r0, #0
 8016cec:	e7df      	b.n	8016cae <_raise_r+0x12>
	...

08016cf0 <raise>:
 8016cf0:	4b02      	ldr	r3, [pc, #8]	; (8016cfc <raise+0xc>)
 8016cf2:	4601      	mov	r1, r0
 8016cf4:	6818      	ldr	r0, [r3, #0]
 8016cf6:	f7ff bfd1 	b.w	8016c9c <_raise_r>
 8016cfa:	bf00      	nop
 8016cfc:	20000408 	.word	0x20000408

08016d00 <_kill_r>:
 8016d00:	b538      	push	{r3, r4, r5, lr}
 8016d02:	4d07      	ldr	r5, [pc, #28]	; (8016d20 <_kill_r+0x20>)
 8016d04:	2300      	movs	r3, #0
 8016d06:	4604      	mov	r4, r0
 8016d08:	4608      	mov	r0, r1
 8016d0a:	4611      	mov	r1, r2
 8016d0c:	602b      	str	r3, [r5, #0]
 8016d0e:	f000 fb23 	bl	8017358 <_kill>
 8016d12:	1c43      	adds	r3, r0, #1
 8016d14:	d102      	bne.n	8016d1c <_kill_r+0x1c>
 8016d16:	682b      	ldr	r3, [r5, #0]
 8016d18:	b103      	cbz	r3, 8016d1c <_kill_r+0x1c>
 8016d1a:	6023      	str	r3, [r4, #0]
 8016d1c:	bd38      	pop	{r3, r4, r5, pc}
 8016d1e:	bf00      	nop
 8016d20:	20006560 	.word	0x20006560

08016d24 <_getpid_r>:
 8016d24:	f000 bb08 	b.w	8017338 <_getpid>

08016d28 <checkint>:
 8016d28:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8016d2c:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8016d30:	429a      	cmp	r2, r3
 8016d32:	b570      	push	{r4, r5, r6, lr}
 8016d34:	dd2a      	ble.n	8016d8c <checkint+0x64>
 8016d36:	f240 4333 	movw	r3, #1075	; 0x433
 8016d3a:	429a      	cmp	r2, r3
 8016d3c:	dc24      	bgt.n	8016d88 <checkint+0x60>
 8016d3e:	1a9b      	subs	r3, r3, r2
 8016d40:	f1a3 0620 	sub.w	r6, r3, #32
 8016d44:	f04f 32ff 	mov.w	r2, #4294967295
 8016d48:	fa02 f403 	lsl.w	r4, r2, r3
 8016d4c:	fa02 f606 	lsl.w	r6, r2, r6
 8016d50:	f1c3 0520 	rsb	r5, r3, #32
 8016d54:	fa22 f505 	lsr.w	r5, r2, r5
 8016d58:	4334      	orrs	r4, r6
 8016d5a:	432c      	orrs	r4, r5
 8016d5c:	409a      	lsls	r2, r3
 8016d5e:	ea20 0202 	bic.w	r2, r0, r2
 8016d62:	ea21 0404 	bic.w	r4, r1, r4
 8016d66:	4322      	orrs	r2, r4
 8016d68:	f1a3 0420 	sub.w	r4, r3, #32
 8016d6c:	f1c3 0220 	rsb	r2, r3, #32
 8016d70:	d10c      	bne.n	8016d8c <checkint+0x64>
 8016d72:	40d8      	lsrs	r0, r3
 8016d74:	fa01 f302 	lsl.w	r3, r1, r2
 8016d78:	4318      	orrs	r0, r3
 8016d7a:	40e1      	lsrs	r1, r4
 8016d7c:	4308      	orrs	r0, r1
 8016d7e:	f000 0001 	and.w	r0, r0, #1
 8016d82:	f1d0 0002 	rsbs	r0, r0, #2
 8016d86:	bd70      	pop	{r4, r5, r6, pc}
 8016d88:	2002      	movs	r0, #2
 8016d8a:	e7fc      	b.n	8016d86 <checkint+0x5e>
 8016d8c:	2000      	movs	r0, #0
 8016d8e:	e7fa      	b.n	8016d86 <checkint+0x5e>

08016d90 <pow>:
 8016d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016d94:	ee10 4a90 	vmov	r4, s1
 8016d98:	ed2d 8b0a 	vpush	{d8-d12}
 8016d9c:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 8016da0:	ee11 7a90 	vmov	r7, s3
 8016da4:	f10a 32ff 	add.w	r2, sl, #4294967295
 8016da8:	f240 73fd 	movw	r3, #2045	; 0x7fd
 8016dac:	429a      	cmp	r2, r3
 8016dae:	ee10 6a10 	vmov	r6, s0
 8016db2:	ee11 0a10 	vmov	r0, s2
 8016db6:	b086      	sub	sp, #24
 8016db8:	46d4      	mov	ip, sl
 8016dba:	ea4f 5517 	mov.w	r5, r7, lsr #20
 8016dbe:	d806      	bhi.n	8016dce <pow+0x3e>
 8016dc0:	f3c5 030a 	ubfx	r3, r5, #0, #11
 8016dc4:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8016dc8:	2b7f      	cmp	r3, #127	; 0x7f
 8016dca:	f240 8156 	bls.w	801707a <pow+0x2ea>
 8016dce:	1802      	adds	r2, r0, r0
 8016dd0:	eb47 0107 	adc.w	r1, r7, r7
 8016dd4:	f06f 0e01 	mvn.w	lr, #1
 8016dd8:	f112 39ff 	adds.w	r9, r2, #4294967295
 8016ddc:	f141 38ff 	adc.w	r8, r1, #4294967295
 8016de0:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8016de4:	45ce      	cmp	lr, r9
 8016de6:	eb73 0808 	sbcs.w	r8, r3, r8
 8016dea:	d23f      	bcs.n	8016e6c <pow+0xdc>
 8016dec:	ea52 0301 	orrs.w	r3, r2, r1
 8016df0:	f04f 0300 	mov.w	r3, #0
 8016df4:	d10c      	bne.n	8016e10 <pow+0x80>
 8016df6:	19b6      	adds	r6, r6, r6
 8016df8:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 8016dfc:	4164      	adcs	r4, r4
 8016dfe:	42b3      	cmp	r3, r6
 8016e00:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016e04:	41a3      	sbcs	r3, r4
 8016e06:	f0c0 808c 	bcc.w	8016f22 <pow+0x192>
 8016e0a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8016e0e:	e028      	b.n	8016e62 <pow+0xd2>
 8016e10:	4da3      	ldr	r5, [pc, #652]	; (80170a0 <pow+0x310>)
 8016e12:	42ac      	cmp	r4, r5
 8016e14:	bf08      	it	eq
 8016e16:	429e      	cmpeq	r6, r3
 8016e18:	d107      	bne.n	8016e2a <pow+0x9a>
 8016e1a:	1800      	adds	r0, r0, r0
 8016e1c:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 8016e20:	417f      	adcs	r7, r7
 8016e22:	4283      	cmp	r3, r0
 8016e24:	4b9f      	ldr	r3, [pc, #636]	; (80170a4 <pow+0x314>)
 8016e26:	41bb      	sbcs	r3, r7
 8016e28:	e7ed      	b.n	8016e06 <pow+0x76>
 8016e2a:	19b6      	adds	r6, r6, r6
 8016e2c:	489e      	ldr	r0, [pc, #632]	; (80170a8 <pow+0x318>)
 8016e2e:	4164      	adcs	r4, r4
 8016e30:	42b3      	cmp	r3, r6
 8016e32:	eb70 0504 	sbcs.w	r5, r0, r4
 8016e36:	d374      	bcc.n	8016f22 <pow+0x192>
 8016e38:	4281      	cmp	r1, r0
 8016e3a:	bf08      	it	eq
 8016e3c:	429a      	cmpeq	r2, r3
 8016e3e:	d170      	bne.n	8016f22 <pow+0x192>
 8016e40:	4a9a      	ldr	r2, [pc, #616]	; (80170ac <pow+0x31c>)
 8016e42:	4294      	cmp	r4, r2
 8016e44:	bf08      	it	eq
 8016e46:	429e      	cmpeq	r6, r3
 8016e48:	d0df      	beq.n	8016e0a <pow+0x7a>
 8016e4a:	4294      	cmp	r4, r2
 8016e4c:	ea6f 0707 	mvn.w	r7, r7
 8016e50:	bf34      	ite	cc
 8016e52:	2400      	movcc	r4, #0
 8016e54:	2401      	movcs	r4, #1
 8016e56:	0fff      	lsrs	r7, r7, #31
 8016e58:	42bc      	cmp	r4, r7
 8016e5a:	f040 81d9 	bne.w	8017210 <pow+0x480>
 8016e5e:	ee21 0b01 	vmul.f64	d0, d1, d1
 8016e62:	b006      	add	sp, #24
 8016e64:	ecbd 8b0a 	vpop	{d8-d12}
 8016e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e6c:	eb16 0806 	adds.w	r8, r6, r6
 8016e70:	eb44 0904 	adc.w	r9, r4, r4
 8016e74:	f118 31ff 	adds.w	r1, r8, #4294967295
 8016e78:	f169 0200 	sbc.w	r2, r9, #0
 8016e7c:	458e      	cmp	lr, r1
 8016e7e:	4193      	sbcs	r3, r2
 8016e80:	d223      	bcs.n	8016eca <pow+0x13a>
 8016e82:	ee20 0b00 	vmul.f64	d0, d0, d0
 8016e86:	2c00      	cmp	r4, #0
 8016e88:	da12      	bge.n	8016eb0 <pow+0x120>
 8016e8a:	4639      	mov	r1, r7
 8016e8c:	f7ff ff4c 	bl	8016d28 <checkint>
 8016e90:	2801      	cmp	r0, #1
 8016e92:	d10d      	bne.n	8016eb0 <pow+0x120>
 8016e94:	eeb1 0b40 	vneg.f64	d0, d0
 8016e98:	ea58 0309 	orrs.w	r3, r8, r9
 8016e9c:	d10a      	bne.n	8016eb4 <pow+0x124>
 8016e9e:	2f00      	cmp	r7, #0
 8016ea0:	dadf      	bge.n	8016e62 <pow+0xd2>
 8016ea2:	b006      	add	sp, #24
 8016ea4:	ecbd 8b0a 	vpop	{d8-d12}
 8016ea8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016eac:	f000 b9f0 	b.w	8017290 <__math_divzero>
 8016eb0:	2000      	movs	r0, #0
 8016eb2:	e7f1      	b.n	8016e98 <pow+0x108>
 8016eb4:	2f00      	cmp	r7, #0
 8016eb6:	dad4      	bge.n	8016e62 <pow+0xd2>
 8016eb8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8016ebc:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8016ec0:	ed8d 7b00 	vstr	d7, [sp]
 8016ec4:	ed9d 0b00 	vldr	d0, [sp]
 8016ec8:	e7cb      	b.n	8016e62 <pow+0xd2>
 8016eca:	2c00      	cmp	r4, #0
 8016ecc:	da2c      	bge.n	8016f28 <pow+0x198>
 8016ece:	4639      	mov	r1, r7
 8016ed0:	f7ff ff2a 	bl	8016d28 <checkint>
 8016ed4:	b930      	cbnz	r0, 8016ee4 <pow+0x154>
 8016ed6:	b006      	add	sp, #24
 8016ed8:	ecbd 8b0a 	vpop	{d8-d12}
 8016edc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016ee0:	f000 b9ee 	b.w	80172c0 <__math_invalid>
 8016ee4:	2801      	cmp	r0, #1
 8016ee6:	bf14      	ite	ne
 8016ee8:	2000      	movne	r0, #0
 8016eea:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8016eee:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8016ef2:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 8016ef6:	f3c5 020a 	ubfx	r2, r5, #0, #11
 8016efa:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 8016efe:	2b7f      	cmp	r3, #127	; 0x7f
 8016f00:	d92d      	bls.n	8016f5e <pow+0x1ce>
 8016f02:	4b67      	ldr	r3, [pc, #412]	; (80170a0 <pow+0x310>)
 8016f04:	2000      	movs	r0, #0
 8016f06:	429c      	cmp	r4, r3
 8016f08:	bf08      	it	eq
 8016f0a:	4286      	cmpeq	r6, r0
 8016f0c:	f43f af7d 	beq.w	8016e0a <pow+0x7a>
 8016f10:	f240 31bd 	movw	r1, #957	; 0x3bd
 8016f14:	428a      	cmp	r2, r1
 8016f16:	d80c      	bhi.n	8016f32 <pow+0x1a2>
 8016f18:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8016f1c:	42b0      	cmp	r0, r6
 8016f1e:	41a3      	sbcs	r3, r4
 8016f20:	d204      	bcs.n	8016f2c <pow+0x19c>
 8016f22:	ee31 0b00 	vadd.f64	d0, d1, d0
 8016f26:	e79c      	b.n	8016e62 <pow+0xd2>
 8016f28:	2000      	movs	r0, #0
 8016f2a:	e7e4      	b.n	8016ef6 <pow+0x166>
 8016f2c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8016f30:	e797      	b.n	8016e62 <pow+0xd2>
 8016f32:	2e01      	cmp	r6, #1
 8016f34:	eb74 0303 	sbcs.w	r3, r4, r3
 8016f38:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8016f3c:	bf34      	ite	cc
 8016f3e:	2301      	movcc	r3, #1
 8016f40:	2300      	movcs	r3, #0
 8016f42:	4295      	cmp	r5, r2
 8016f44:	bf8c      	ite	hi
 8016f46:	2500      	movhi	r5, #0
 8016f48:	2501      	movls	r5, #1
 8016f4a:	42ab      	cmp	r3, r5
 8016f4c:	f000 809d 	beq.w	801708a <pow+0x2fa>
 8016f50:	b006      	add	sp, #24
 8016f52:	ecbd 8b0a 	vpop	{d8-d12}
 8016f56:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f5a:	f000 b991 	b.w	8017280 <__math_oflow>
 8016f5e:	f1bc 0f00 	cmp.w	ip, #0
 8016f62:	d10b      	bne.n	8016f7c <pow+0x1ec>
 8016f64:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8017098 <pow+0x308>
 8016f68:	ee20 7b07 	vmul.f64	d7, d0, d7
 8016f6c:	ec53 2b17 	vmov	r2, r3, d7
 8016f70:	ee17 6a10 	vmov	r6, s14
 8016f74:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8016f78:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 8016f7c:	4b4c      	ldr	r3, [pc, #304]	; (80170b0 <pow+0x320>)
 8016f7e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8016f82:	4423      	add	r3, r4
 8016f84:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8016f88:	1519      	asrs	r1, r3, #20
 8016f8a:	0d1b      	lsrs	r3, r3, #20
 8016f8c:	051b      	lsls	r3, r3, #20
 8016f8e:	eba4 0903 	sub.w	r9, r4, r3
 8016f92:	4b48      	ldr	r3, [pc, #288]	; (80170b4 <pow+0x324>)
 8016f94:	ee04 1a10 	vmov	s8, r1
 8016f98:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 8016f9c:	f1b6 0800 	subs.w	r8, r6, #0
 8016fa0:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 8016fa4:	ec49 8b15 	vmov	d5, r8, r9
 8016fa8:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 8016fac:	eea5 6b07 	vfma.f64	d6, d5, d7
 8016fb0:	ed93 7b00 	vldr	d7, [r3]
 8016fb4:	ed93 5b02 	vldr	d5, [r3, #8]
 8016fb8:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 8016fbc:	eea4 2b07 	vfma.f64	d2, d4, d7
 8016fc0:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 8016fc4:	ee36 ab02 	vadd.f64	d10, d6, d2
 8016fc8:	ee32 2b4a 	vsub.f64	d2, d2, d10
 8016fcc:	eea4 7b05 	vfma.f64	d7, d4, d5
 8016fd0:	ed93 5b04 	vldr	d5, [r3, #16]
 8016fd4:	ee32 2b06 	vadd.f64	d2, d2, d6
 8016fd8:	ee37 7b02 	vadd.f64	d7, d7, d2
 8016fdc:	ee26 5b05 	vmul.f64	d5, d6, d5
 8016fe0:	ed93 4b08 	vldr	d4, [r3, #32]
 8016fe4:	ee26 0b05 	vmul.f64	d0, d6, d5
 8016fe8:	eeb0 9b40 	vmov.f64	d9, d0
 8016fec:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8016ff0:	ed93 5b06 	vldr	d5, [r3, #24]
 8016ff4:	ee3a 8b00 	vadd.f64	d8, d10, d0
 8016ff8:	ee26 bb00 	vmul.f64	d11, d6, d0
 8016ffc:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8017000:	eea6 5b04 	vfma.f64	d5, d6, d4
 8017004:	ee3a ab48 	vsub.f64	d10, d10, d8
 8017008:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 801700c:	ee37 9b09 	vadd.f64	d9, d7, d9
 8017010:	ee3a ab00 	vadd.f64	d10, d10, d0
 8017014:	eea6 4b03 	vfma.f64	d4, d6, d3
 8017018:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 801701c:	ee39 ab0a 	vadd.f64	d10, d9, d10
 8017020:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8017024:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8017028:	eea0 4b03 	vfma.f64	d4, d0, d3
 801702c:	eea0 5b04 	vfma.f64	d5, d0, d4
 8017030:	eeab ab05 	vfma.f64	d10, d11, d5
 8017034:	ee38 6b0a 	vadd.f64	d6, d8, d10
 8017038:	ee21 7b06 	vmul.f64	d7, d1, d6
 801703c:	ee17 3a90 	vmov	r3, s15
 8017040:	eeb0 5b47 	vmov.f64	d5, d7
 8017044:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8017048:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 801704c:	18b2      	adds	r2, r6, r2
 801704e:	2a3e      	cmp	r2, #62	; 0x3e
 8017050:	ee91 5b06 	vfnms.f64	d5, d1, d6
 8017054:	ee38 8b46 	vsub.f64	d8, d8, d6
 8017058:	ee38 ab0a 	vadd.f64	d10, d8, d10
 801705c:	eea1 5b0a 	vfma.f64	d5, d1, d10
 8017060:	d92b      	bls.n	80170ba <pow+0x32a>
 8017062:	2a00      	cmp	r2, #0
 8017064:	da0b      	bge.n	801707e <pow+0x2ee>
 8017066:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801706a:	ee37 0b00 	vadd.f64	d0, d7, d0
 801706e:	2800      	cmp	r0, #0
 8017070:	f43f aef7 	beq.w	8016e62 <pow+0xd2>
 8017074:	eeb1 0b40 	vneg.f64	d0, d0
 8017078:	e6f3      	b.n	8016e62 <pow+0xd2>
 801707a:	2000      	movs	r0, #0
 801707c:	e77e      	b.n	8016f7c <pow+0x1ec>
 801707e:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8017082:	d919      	bls.n	80170b8 <pow+0x328>
 8017084:	2b00      	cmp	r3, #0
 8017086:	f6bf af63 	bge.w	8016f50 <pow+0x1c0>
 801708a:	b006      	add	sp, #24
 801708c:	ecbd 8b0a 	vpop	{d8-d12}
 8017090:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017094:	f000 b8ec 	b.w	8017270 <__math_uflow>
 8017098:	00000000 	.word	0x00000000
 801709c:	43300000 	.word	0x43300000
 80170a0:	3ff00000 	.word	0x3ff00000
 80170a4:	fff00000 	.word	0xfff00000
 80170a8:	ffe00000 	.word	0xffe00000
 80170ac:	7fe00000 	.word	0x7fe00000
 80170b0:	c0196aab 	.word	0xc0196aab
 80170b4:	08017b20 	.word	0x08017b20
 80170b8:	2600      	movs	r6, #0
 80170ba:	495d      	ldr	r1, [pc, #372]	; (8017230 <pow+0x4a0>)
 80170bc:	ed91 4b02 	vldr	d4, [r1, #8]
 80170c0:	ed91 3b00 	vldr	d3, [r1]
 80170c4:	eeb0 6b44 	vmov.f64	d6, d4
 80170c8:	eea7 6b03 	vfma.f64	d6, d7, d3
 80170cc:	ee16 5a10 	vmov	r5, s12
 80170d0:	ee36 6b44 	vsub.f64	d6, d6, d4
 80170d4:	ed91 4b04 	vldr	d4, [r1, #16]
 80170d8:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 80170dc:	eea6 7b04 	vfma.f64	d7, d6, d4
 80170e0:	eeb0 0b47 	vmov.f64	d0, d7
 80170e4:	ed91 7b06 	vldr	d7, [r1, #24]
 80170e8:	18dc      	adds	r4, r3, r3
 80170ea:	f104 030f 	add.w	r3, r4, #15
 80170ee:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 80170f2:	eea6 0b07 	vfma.f64	d0, d6, d7
 80170f6:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 80170fa:	ee35 0b00 	vadd.f64	d0, d5, d0
 80170fe:	ee20 6b00 	vmul.f64	d6, d0, d0
 8017102:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 8017106:	ed91 5b08 	vldr	d5, [r1, #32]
 801710a:	ee30 7b07 	vadd.f64	d7, d0, d7
 801710e:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8017112:	eea0 5b04 	vfma.f64	d5, d0, d4
 8017116:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 801711a:	eea6 7b05 	vfma.f64	d7, d6, d5
 801711e:	ee26 6b06 	vmul.f64	d6, d6, d6
 8017122:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 8017126:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 801712a:	f8d2 e004 	ldr.w	lr, [r2, #4]
 801712e:	eea0 5b04 	vfma.f64	d5, d0, d4
 8017132:	1940      	adds	r0, r0, r5
 8017134:	2700      	movs	r7, #0
 8017136:	eb17 020c 	adds.w	r2, r7, ip
 801713a:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 801713e:	eea6 7b05 	vfma.f64	d7, d6, d5
 8017142:	2e00      	cmp	r6, #0
 8017144:	d15f      	bne.n	8017206 <pow+0x476>
 8017146:	42bd      	cmp	r5, r7
 8017148:	db13      	blt.n	8017172 <pow+0x3e2>
 801714a:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 801714e:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8017152:	4610      	mov	r0, r2
 8017154:	ec41 0b10 	vmov	d0, r0, r1
 8017158:	eea7 0b00 	vfma.f64	d0, d7, d0
 801715c:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8017218 <pow+0x488>
 8017160:	ee20 0b07 	vmul.f64	d0, d0, d7
 8017164:	b006      	add	sp, #24
 8017166:	ecbd 8b0a 	vpop	{d8-d12}
 801716a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801716e:	f000 b8bf 	b.w	80172f0 <__math_check_oflow>
 8017172:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8017176:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 801717a:	4610      	mov	r0, r2
 801717c:	ec41 0b15 	vmov	d5, r0, r1
 8017180:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8017184:	ee27 6b05 	vmul.f64	d6, d7, d5
 8017188:	ee35 7b06 	vadd.f64	d7, d5, d6
 801718c:	eeb0 3bc7 	vabs.f64	d3, d7
 8017190:	eeb4 3bc4 	vcmpe.f64	d3, d4
 8017194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017198:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8017220 <pow+0x490>
 801719c:	d52a      	bpl.n	80171f4 <pow+0x464>
 801719e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80171a2:	ee35 5b47 	vsub.f64	d5, d5, d7
 80171a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171aa:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 80171ae:	ee35 6b06 	vadd.f64	d6, d5, d6
 80171b2:	bf48      	it	mi
 80171b4:	eeb0 4b43 	vmovmi.f64	d4, d3
 80171b8:	ee37 3b04 	vadd.f64	d3, d7, d4
 80171bc:	ee34 5b43 	vsub.f64	d5, d4, d3
 80171c0:	ee35 7b07 	vadd.f64	d7, d5, d7
 80171c4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80171c8:	ee37 7b03 	vadd.f64	d7, d7, d3
 80171cc:	ee37 7b44 	vsub.f64	d7, d7, d4
 80171d0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80171d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171d8:	d104      	bne.n	80171e4 <pow+0x454>
 80171da:	4632      	mov	r2, r6
 80171dc:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80171e0:	ec43 2b17 	vmov	d7, r2, r3
 80171e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80171e8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80171ec:	ee26 6b00 	vmul.f64	d6, d6, d0
 80171f0:	ed8d 6b04 	vstr	d6, [sp, #16]
 80171f4:	ee27 0b00 	vmul.f64	d0, d7, d0
 80171f8:	b006      	add	sp, #24
 80171fa:	ecbd 8b0a 	vpop	{d8-d12}
 80171fe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017202:	f000 b86c 	b.w	80172de <__math_check_uflow>
 8017206:	ec43 2b10 	vmov	d0, r2, r3
 801720a:	eea7 0b00 	vfma.f64	d0, d7, d0
 801720e:	e628      	b.n	8016e62 <pow+0xd2>
 8017210:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8017228 <pow+0x498>
 8017214:	e625      	b.n	8016e62 <pow+0xd2>
 8017216:	bf00      	nop
 8017218:	00000000 	.word	0x00000000
 801721c:	7f000000 	.word	0x7f000000
 8017220:	00000000 	.word	0x00000000
 8017224:	00100000 	.word	0x00100000
	...
 8017230:	08018b68 	.word	0x08018b68

08017234 <with_errno>:
 8017234:	b513      	push	{r0, r1, r4, lr}
 8017236:	4604      	mov	r4, r0
 8017238:	ed8d 0b00 	vstr	d0, [sp]
 801723c:	f7fd fb56 	bl	80148ec <__errno>
 8017240:	ed9d 0b00 	vldr	d0, [sp]
 8017244:	6004      	str	r4, [r0, #0]
 8017246:	b002      	add	sp, #8
 8017248:	bd10      	pop	{r4, pc}

0801724a <xflow>:
 801724a:	b082      	sub	sp, #8
 801724c:	b158      	cbz	r0, 8017266 <xflow+0x1c>
 801724e:	eeb1 7b40 	vneg.f64	d7, d0
 8017252:	ed8d 7b00 	vstr	d7, [sp]
 8017256:	ed9d 7b00 	vldr	d7, [sp]
 801725a:	2022      	movs	r0, #34	; 0x22
 801725c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8017260:	b002      	add	sp, #8
 8017262:	f7ff bfe7 	b.w	8017234 <with_errno>
 8017266:	eeb0 7b40 	vmov.f64	d7, d0
 801726a:	e7f2      	b.n	8017252 <xflow+0x8>
 801726c:	0000      	movs	r0, r0
	...

08017270 <__math_uflow>:
 8017270:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017278 <__math_uflow+0x8>
 8017274:	f7ff bfe9 	b.w	801724a <xflow>
 8017278:	00000000 	.word	0x00000000
 801727c:	10000000 	.word	0x10000000

08017280 <__math_oflow>:
 8017280:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017288 <__math_oflow+0x8>
 8017284:	f7ff bfe1 	b.w	801724a <xflow>
 8017288:	00000000 	.word	0x00000000
 801728c:	70000000 	.word	0x70000000

08017290 <__math_divzero>:
 8017290:	b082      	sub	sp, #8
 8017292:	2800      	cmp	r0, #0
 8017294:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8017298:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 801729c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 80172a0:	ed8d 7b00 	vstr	d7, [sp]
 80172a4:	ed9d 0b00 	vldr	d0, [sp]
 80172a8:	ed9f 7b03 	vldr	d7, [pc, #12]	; 80172b8 <__math_divzero+0x28>
 80172ac:	2022      	movs	r0, #34	; 0x22
 80172ae:	ee80 0b07 	vdiv.f64	d0, d0, d7
 80172b2:	b002      	add	sp, #8
 80172b4:	f7ff bfbe 	b.w	8017234 <with_errno>
	...

080172c0 <__math_invalid>:
 80172c0:	eeb0 7b40 	vmov.f64	d7, d0
 80172c4:	eeb4 7b47 	vcmp.f64	d7, d7
 80172c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172cc:	ee30 6b40 	vsub.f64	d6, d0, d0
 80172d0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 80172d4:	d602      	bvs.n	80172dc <__math_invalid+0x1c>
 80172d6:	2021      	movs	r0, #33	; 0x21
 80172d8:	f7ff bfac 	b.w	8017234 <with_errno>
 80172dc:	4770      	bx	lr

080172de <__math_check_uflow>:
 80172de:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80172e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172e6:	d102      	bne.n	80172ee <__math_check_uflow+0x10>
 80172e8:	2022      	movs	r0, #34	; 0x22
 80172ea:	f7ff bfa3 	b.w	8017234 <with_errno>
 80172ee:	4770      	bx	lr

080172f0 <__math_check_oflow>:
 80172f0:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8017310 <__math_check_oflow+0x20>
 80172f4:	eeb0 7bc0 	vabs.f64	d7, d0
 80172f8:	eeb4 7b46 	vcmp.f64	d7, d6
 80172fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017300:	dd02      	ble.n	8017308 <__math_check_oflow+0x18>
 8017302:	2022      	movs	r0, #34	; 0x22
 8017304:	f7ff bf96 	b.w	8017234 <with_errno>
 8017308:	4770      	bx	lr
 801730a:	bf00      	nop
 801730c:	f3af 8000 	nop.w
 8017310:	ffffffff 	.word	0xffffffff
 8017314:	7fefffff 	.word	0x7fefffff

08017318 <_close>:
 8017318:	4b02      	ldr	r3, [pc, #8]	; (8017324 <_close+0xc>)
 801731a:	2258      	movs	r2, #88	; 0x58
 801731c:	601a      	str	r2, [r3, #0]
 801731e:	f04f 30ff 	mov.w	r0, #4294967295
 8017322:	4770      	bx	lr
 8017324:	20006560 	.word	0x20006560

08017328 <_fstat>:
 8017328:	4b02      	ldr	r3, [pc, #8]	; (8017334 <_fstat+0xc>)
 801732a:	2258      	movs	r2, #88	; 0x58
 801732c:	601a      	str	r2, [r3, #0]
 801732e:	f04f 30ff 	mov.w	r0, #4294967295
 8017332:	4770      	bx	lr
 8017334:	20006560 	.word	0x20006560

08017338 <_getpid>:
 8017338:	4b02      	ldr	r3, [pc, #8]	; (8017344 <_getpid+0xc>)
 801733a:	2258      	movs	r2, #88	; 0x58
 801733c:	601a      	str	r2, [r3, #0]
 801733e:	f04f 30ff 	mov.w	r0, #4294967295
 8017342:	4770      	bx	lr
 8017344:	20006560 	.word	0x20006560

08017348 <_isatty>:
 8017348:	4b02      	ldr	r3, [pc, #8]	; (8017354 <_isatty+0xc>)
 801734a:	2258      	movs	r2, #88	; 0x58
 801734c:	601a      	str	r2, [r3, #0]
 801734e:	2000      	movs	r0, #0
 8017350:	4770      	bx	lr
 8017352:	bf00      	nop
 8017354:	20006560 	.word	0x20006560

08017358 <_kill>:
 8017358:	4b02      	ldr	r3, [pc, #8]	; (8017364 <_kill+0xc>)
 801735a:	2258      	movs	r2, #88	; 0x58
 801735c:	601a      	str	r2, [r3, #0]
 801735e:	f04f 30ff 	mov.w	r0, #4294967295
 8017362:	4770      	bx	lr
 8017364:	20006560 	.word	0x20006560

08017368 <_lseek>:
 8017368:	4b02      	ldr	r3, [pc, #8]	; (8017374 <_lseek+0xc>)
 801736a:	2258      	movs	r2, #88	; 0x58
 801736c:	601a      	str	r2, [r3, #0]
 801736e:	f04f 30ff 	mov.w	r0, #4294967295
 8017372:	4770      	bx	lr
 8017374:	20006560 	.word	0x20006560

08017378 <_read>:
 8017378:	4b02      	ldr	r3, [pc, #8]	; (8017384 <_read+0xc>)
 801737a:	2258      	movs	r2, #88	; 0x58
 801737c:	601a      	str	r2, [r3, #0]
 801737e:	f04f 30ff 	mov.w	r0, #4294967295
 8017382:	4770      	bx	lr
 8017384:	20006560 	.word	0x20006560

08017388 <_sbrk>:
 8017388:	4a04      	ldr	r2, [pc, #16]	; (801739c <_sbrk+0x14>)
 801738a:	6811      	ldr	r1, [r2, #0]
 801738c:	4603      	mov	r3, r0
 801738e:	b909      	cbnz	r1, 8017394 <_sbrk+0xc>
 8017390:	4903      	ldr	r1, [pc, #12]	; (80173a0 <_sbrk+0x18>)
 8017392:	6011      	str	r1, [r2, #0]
 8017394:	6810      	ldr	r0, [r2, #0]
 8017396:	4403      	add	r3, r0
 8017398:	6013      	str	r3, [r2, #0]
 801739a:	4770      	bx	lr
 801739c:	20006564 	.word	0x20006564
 80173a0:	20006568 	.word	0x20006568

080173a4 <_exit>:
 80173a4:	e7fe      	b.n	80173a4 <_exit>
	...

080173a8 <_init>:
 80173a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80173aa:	bf00      	nop
 80173ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80173ae:	bc08      	pop	{r3}
 80173b0:	469e      	mov	lr, r3
 80173b2:	4770      	bx	lr

080173b4 <_fini>:
 80173b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80173b6:	bf00      	nop
 80173b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80173ba:	bc08      	pop	{r3}
 80173bc:	469e      	mov	lr, r3
 80173be:	4770      	bx	lr
