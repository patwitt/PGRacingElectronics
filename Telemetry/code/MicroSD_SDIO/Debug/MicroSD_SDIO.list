
MicroSD_SDIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012208  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002028  08012408  08012408  00022408  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014430  08014430  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  08014430  08014430  00024430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014438  08014438  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014438  08014438  00024438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801443c  0801443c  0002443c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08014440  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003eb8  200001e0  08014620  000301e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004098  08014620  00034098  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b565  00000000  00000000  0003020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e3e  00000000  00000000  0004b773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001480  00000000  00000000  0004f5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a8  00000000  00000000  00050a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bd14  00000000  00000000  00051ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dec6  00000000  00000000  0007d9f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fbc75  00000000  00000000  0009b8ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019752f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a68  00000000  00000000  00197580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e0 	.word	0x200001e0
 800021c:	00000000 	.word	0x00000000
 8000220:	080123f0 	.word	0x080123f0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e4 	.word	0x200001e4
 800023c:	080123f0 	.word	0x080123f0

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_drsub>:
 8000310:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000314:	e002      	b.n	800031c <__adddf3>
 8000316:	bf00      	nop

08000318 <__aeabi_dsub>:
 8000318:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800031c <__adddf3>:
 800031c:	b530      	push	{r4, r5, lr}
 800031e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000322:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000326:	ea94 0f05 	teq	r4, r5
 800032a:	bf08      	it	eq
 800032c:	ea90 0f02 	teqeq	r0, r2
 8000330:	bf1f      	itttt	ne
 8000332:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000336:	ea55 0c02 	orrsne.w	ip, r5, r2
 800033a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000342:	f000 80e2 	beq.w	800050a <__adddf3+0x1ee>
 8000346:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800034a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034e:	bfb8      	it	lt
 8000350:	426d      	neglt	r5, r5
 8000352:	dd0c      	ble.n	800036e <__adddf3+0x52>
 8000354:	442c      	add	r4, r5
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	ea82 0000 	eor.w	r0, r2, r0
 8000362:	ea83 0101 	eor.w	r1, r3, r1
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	2d36      	cmp	r5, #54	; 0x36
 8000370:	bf88      	it	hi
 8000372:	bd30      	pophi	{r4, r5, pc}
 8000374:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000378:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800037c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000380:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000384:	d002      	beq.n	800038c <__adddf3+0x70>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000394:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000398:	d002      	beq.n	80003a0 <__adddf3+0x84>
 800039a:	4252      	negs	r2, r2
 800039c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a0:	ea94 0f05 	teq	r4, r5
 80003a4:	f000 80a7 	beq.w	80004f6 <__adddf3+0x1da>
 80003a8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80003b0:	db0d      	blt.n	80003ce <__adddf3+0xb2>
 80003b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ba:	1880      	adds	r0, r0, r2
 80003bc:	f141 0100 	adc.w	r1, r1, #0
 80003c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c4:	1880      	adds	r0, r0, r2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	4159      	adcs	r1, r3
 80003cc:	e00e      	b.n	80003ec <__adddf3+0xd0>
 80003ce:	f1a5 0520 	sub.w	r5, r5, #32
 80003d2:	f10e 0e20 	add.w	lr, lr, #32
 80003d6:	2a01      	cmp	r2, #1
 80003d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003dc:	bf28      	it	cs
 80003de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003e2:	fa43 f305 	asr.w	r3, r3, r5
 80003e6:	18c0      	adds	r0, r0, r3
 80003e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	d507      	bpl.n	8000402 <__adddf3+0xe6>
 80003f2:	f04f 0e00 	mov.w	lr, #0
 80003f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000402:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000406:	d31b      	bcc.n	8000440 <__adddf3+0x124>
 8000408:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800040c:	d30c      	bcc.n	8000428 <__adddf3+0x10c>
 800040e:	0849      	lsrs	r1, r1, #1
 8000410:	ea5f 0030 	movs.w	r0, r0, rrx
 8000414:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000418:	f104 0401 	add.w	r4, r4, #1
 800041c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000420:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000424:	f080 809a 	bcs.w	800055c <__adddf3+0x240>
 8000428:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800042c:	bf08      	it	eq
 800042e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000432:	f150 0000 	adcs.w	r0, r0, #0
 8000436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800043a:	ea41 0105 	orr.w	r1, r1, r5
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000444:	4140      	adcs	r0, r0
 8000446:	eb41 0101 	adc.w	r1, r1, r1
 800044a:	3c01      	subs	r4, #1
 800044c:	bf28      	it	cs
 800044e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000452:	d2e9      	bcs.n	8000428 <__adddf3+0x10c>
 8000454:	f091 0f00 	teq	r1, #0
 8000458:	bf04      	itt	eq
 800045a:	4601      	moveq	r1, r0
 800045c:	2000      	moveq	r0, #0
 800045e:	fab1 f381 	clz	r3, r1
 8000462:	bf08      	it	eq
 8000464:	3320      	addeq	r3, #32
 8000466:	f1a3 030b 	sub.w	r3, r3, #11
 800046a:	f1b3 0220 	subs.w	r2, r3, #32
 800046e:	da0c      	bge.n	800048a <__adddf3+0x16e>
 8000470:	320c      	adds	r2, #12
 8000472:	dd08      	ble.n	8000486 <__adddf3+0x16a>
 8000474:	f102 0c14 	add.w	ip, r2, #20
 8000478:	f1c2 020c 	rsb	r2, r2, #12
 800047c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000480:	fa21 f102 	lsr.w	r1, r1, r2
 8000484:	e00c      	b.n	80004a0 <__adddf3+0x184>
 8000486:	f102 0214 	add.w	r2, r2, #20
 800048a:	bfd8      	it	le
 800048c:	f1c2 0c20 	rsble	ip, r2, #32
 8000490:	fa01 f102 	lsl.w	r1, r1, r2
 8000494:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000498:	bfdc      	itt	le
 800049a:	ea41 010c 	orrle.w	r1, r1, ip
 800049e:	4090      	lslle	r0, r2
 80004a0:	1ae4      	subs	r4, r4, r3
 80004a2:	bfa2      	ittt	ge
 80004a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a8:	4329      	orrge	r1, r5
 80004aa:	bd30      	popge	{r4, r5, pc}
 80004ac:	ea6f 0404 	mvn.w	r4, r4
 80004b0:	3c1f      	subs	r4, #31
 80004b2:	da1c      	bge.n	80004ee <__adddf3+0x1d2>
 80004b4:	340c      	adds	r4, #12
 80004b6:	dc0e      	bgt.n	80004d6 <__adddf3+0x1ba>
 80004b8:	f104 0414 	add.w	r4, r4, #20
 80004bc:	f1c4 0220 	rsb	r2, r4, #32
 80004c0:	fa20 f004 	lsr.w	r0, r0, r4
 80004c4:	fa01 f302 	lsl.w	r3, r1, r2
 80004c8:	ea40 0003 	orr.w	r0, r0, r3
 80004cc:	fa21 f304 	lsr.w	r3, r1, r4
 80004d0:	ea45 0103 	orr.w	r1, r5, r3
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f1c4 040c 	rsb	r4, r4, #12
 80004da:	f1c4 0220 	rsb	r2, r4, #32
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 f304 	lsl.w	r3, r1, r4
 80004e6:	ea40 0003 	orr.w	r0, r0, r3
 80004ea:	4629      	mov	r1, r5
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	fa21 f004 	lsr.w	r0, r1, r4
 80004f2:	4629      	mov	r1, r5
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f094 0f00 	teq	r4, #0
 80004fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004fe:	bf06      	itte	eq
 8000500:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000504:	3401      	addeq	r4, #1
 8000506:	3d01      	subne	r5, #1
 8000508:	e74e      	b.n	80003a8 <__adddf3+0x8c>
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf18      	it	ne
 8000510:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000514:	d029      	beq.n	800056a <__adddf3+0x24e>
 8000516:	ea94 0f05 	teq	r4, r5
 800051a:	bf08      	it	eq
 800051c:	ea90 0f02 	teqeq	r0, r2
 8000520:	d005      	beq.n	800052e <__adddf3+0x212>
 8000522:	ea54 0c00 	orrs.w	ip, r4, r0
 8000526:	bf04      	itt	eq
 8000528:	4619      	moveq	r1, r3
 800052a:	4610      	moveq	r0, r2
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea91 0f03 	teq	r1, r3
 8000532:	bf1e      	ittt	ne
 8000534:	2100      	movne	r1, #0
 8000536:	2000      	movne	r0, #0
 8000538:	bd30      	popne	{r4, r5, pc}
 800053a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053e:	d105      	bne.n	800054c <__adddf3+0x230>
 8000540:	0040      	lsls	r0, r0, #1
 8000542:	4149      	adcs	r1, r1
 8000544:	bf28      	it	cs
 8000546:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000550:	bf3c      	itt	cc
 8000552:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000556:	bd30      	popcc	{r4, r5, pc}
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000560:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000564:	f04f 0000 	mov.w	r0, #0
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf1a      	itte	ne
 8000570:	4619      	movne	r1, r3
 8000572:	4610      	movne	r0, r2
 8000574:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000578:	bf1c      	itt	ne
 800057a:	460b      	movne	r3, r1
 800057c:	4602      	movne	r2, r0
 800057e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000582:	bf06      	itte	eq
 8000584:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000588:	ea91 0f03 	teqeq	r1, r3
 800058c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	bf00      	nop

08000594 <__aeabi_ui2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f04f 0500 	mov.w	r5, #0
 80005ac:	f04f 0100 	mov.w	r1, #0
 80005b0:	e750      	b.n	8000454 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_i2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005cc:	bf48      	it	mi
 80005ce:	4240      	negmi	r0, r0
 80005d0:	f04f 0100 	mov.w	r1, #0
 80005d4:	e73e      	b.n	8000454 <__adddf3+0x138>
 80005d6:	bf00      	nop

080005d8 <__aeabi_f2d>:
 80005d8:	0042      	lsls	r2, r0, #1
 80005da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005de:	ea4f 0131 	mov.w	r1, r1, rrx
 80005e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e6:	bf1f      	itttt	ne
 80005e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005f4:	4770      	bxne	lr
 80005f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005fa:	bf08      	it	eq
 80005fc:	4770      	bxeq	lr
 80005fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000602:	bf04      	itt	eq
 8000604:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000608:	4770      	bxeq	lr
 800060a:	b530      	push	{r4, r5, lr}
 800060c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000618:	e71c      	b.n	8000454 <__adddf3+0x138>
 800061a:	bf00      	nop

0800061c <__aeabi_ul2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	e00a      	b.n	8000642 <__aeabi_l2d+0x16>

0800062c <__aeabi_l2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800063a:	d502      	bpl.n	8000642 <__aeabi_l2d+0x16>
 800063c:	4240      	negs	r0, r0
 800063e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000642:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000646:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064e:	f43f aed8 	beq.w	8000402 <__adddf3+0xe6>
 8000652:	f04f 0203 	mov.w	r2, #3
 8000656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065a:	bf18      	it	ne
 800065c:	3203      	addne	r2, #3
 800065e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000662:	bf18      	it	ne
 8000664:	3203      	addne	r2, #3
 8000666:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000672:	fa20 f002 	lsr.w	r0, r0, r2
 8000676:	fa01 fe03 	lsl.w	lr, r1, r3
 800067a:	ea40 000e 	orr.w	r0, r0, lr
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	4414      	add	r4, r2
 8000684:	e6bd      	b.n	8000402 <__adddf3+0xe6>
 8000686:	bf00      	nop

08000688 <__aeabi_uldivmod>:
 8000688:	b953      	cbnz	r3, 80006a0 <__aeabi_uldivmod+0x18>
 800068a:	b94a      	cbnz	r2, 80006a0 <__aeabi_uldivmod+0x18>
 800068c:	2900      	cmp	r1, #0
 800068e:	bf08      	it	eq
 8000690:	2800      	cmpeq	r0, #0
 8000692:	bf1c      	itt	ne
 8000694:	f04f 31ff 	movne.w	r1, #4294967295
 8000698:	f04f 30ff 	movne.w	r0, #4294967295
 800069c:	f000 b9ac 	b.w	80009f8 <__aeabi_idiv0>
 80006a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006a8:	f000 f83e 	bl	8000728 <__udivmoddi4>
 80006ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006b4:	b004      	add	sp, #16
 80006b6:	4770      	bx	lr

080006b8 <__aeabi_d2lz>:
 80006b8:	b508      	push	{r3, lr}
 80006ba:	4602      	mov	r2, r0
 80006bc:	460b      	mov	r3, r1
 80006be:	ec43 2b17 	vmov	d7, r2, r3
 80006c2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ca:	d403      	bmi.n	80006d4 <__aeabi_d2lz+0x1c>
 80006cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006d0:	f000 b80a 	b.w	80006e8 <__aeabi_d2ulz>
 80006d4:	eeb1 7b47 	vneg.f64	d7, d7
 80006d8:	ec51 0b17 	vmov	r0, r1, d7
 80006dc:	f000 f804 	bl	80006e8 <__aeabi_d2ulz>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	bd08      	pop	{r3, pc}

080006e8 <__aeabi_d2ulz>:
 80006e8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000718 <__aeabi_d2ulz+0x30>
 80006ec:	ec41 0b17 	vmov	d7, r0, r1
 80006f0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000720 <__aeabi_d2ulz+0x38>
 80006f4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006f8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006fc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000700:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000704:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000708:	ee16 1a10 	vmov	r1, s12
 800070c:	ee17 0a90 	vmov	r0, s15
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	f3af 8000 	nop.w
 8000718:	00000000 	.word	0x00000000
 800071c:	3df00000 	.word	0x3df00000
 8000720:	00000000 	.word	0x00000000
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800072c:	9d08      	ldr	r5, [sp, #32]
 800072e:	4604      	mov	r4, r0
 8000730:	468e      	mov	lr, r1
 8000732:	2b00      	cmp	r3, #0
 8000734:	d14d      	bne.n	80007d2 <__udivmoddi4+0xaa>
 8000736:	428a      	cmp	r2, r1
 8000738:	4694      	mov	ip, r2
 800073a:	d969      	bls.n	8000810 <__udivmoddi4+0xe8>
 800073c:	fab2 f282 	clz	r2, r2
 8000740:	b152      	cbz	r2, 8000758 <__udivmoddi4+0x30>
 8000742:	fa01 f302 	lsl.w	r3, r1, r2
 8000746:	f1c2 0120 	rsb	r1, r2, #32
 800074a:	fa20 f101 	lsr.w	r1, r0, r1
 800074e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000752:	ea41 0e03 	orr.w	lr, r1, r3
 8000756:	4094      	lsls	r4, r2
 8000758:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800075c:	0c21      	lsrs	r1, r4, #16
 800075e:	fbbe f6f8 	udiv	r6, lr, r8
 8000762:	fa1f f78c 	uxth.w	r7, ip
 8000766:	fb08 e316 	mls	r3, r8, r6, lr
 800076a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800076e:	fb06 f107 	mul.w	r1, r6, r7
 8000772:	4299      	cmp	r1, r3
 8000774:	d90a      	bls.n	800078c <__udivmoddi4+0x64>
 8000776:	eb1c 0303 	adds.w	r3, ip, r3
 800077a:	f106 30ff 	add.w	r0, r6, #4294967295
 800077e:	f080 811f 	bcs.w	80009c0 <__udivmoddi4+0x298>
 8000782:	4299      	cmp	r1, r3
 8000784:	f240 811c 	bls.w	80009c0 <__udivmoddi4+0x298>
 8000788:	3e02      	subs	r6, #2
 800078a:	4463      	add	r3, ip
 800078c:	1a5b      	subs	r3, r3, r1
 800078e:	b2a4      	uxth	r4, r4
 8000790:	fbb3 f0f8 	udiv	r0, r3, r8
 8000794:	fb08 3310 	mls	r3, r8, r0, r3
 8000798:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800079c:	fb00 f707 	mul.w	r7, r0, r7
 80007a0:	42a7      	cmp	r7, r4
 80007a2:	d90a      	bls.n	80007ba <__udivmoddi4+0x92>
 80007a4:	eb1c 0404 	adds.w	r4, ip, r4
 80007a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80007ac:	f080 810a 	bcs.w	80009c4 <__udivmoddi4+0x29c>
 80007b0:	42a7      	cmp	r7, r4
 80007b2:	f240 8107 	bls.w	80009c4 <__udivmoddi4+0x29c>
 80007b6:	4464      	add	r4, ip
 80007b8:	3802      	subs	r0, #2
 80007ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007be:	1be4      	subs	r4, r4, r7
 80007c0:	2600      	movs	r6, #0
 80007c2:	b11d      	cbz	r5, 80007cc <__udivmoddi4+0xa4>
 80007c4:	40d4      	lsrs	r4, r2
 80007c6:	2300      	movs	r3, #0
 80007c8:	e9c5 4300 	strd	r4, r3, [r5]
 80007cc:	4631      	mov	r1, r6
 80007ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d909      	bls.n	80007ea <__udivmoddi4+0xc2>
 80007d6:	2d00      	cmp	r5, #0
 80007d8:	f000 80ef 	beq.w	80009ba <__udivmoddi4+0x292>
 80007dc:	2600      	movs	r6, #0
 80007de:	e9c5 0100 	strd	r0, r1, [r5]
 80007e2:	4630      	mov	r0, r6
 80007e4:	4631      	mov	r1, r6
 80007e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ea:	fab3 f683 	clz	r6, r3
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	d14a      	bne.n	8000888 <__udivmoddi4+0x160>
 80007f2:	428b      	cmp	r3, r1
 80007f4:	d302      	bcc.n	80007fc <__udivmoddi4+0xd4>
 80007f6:	4282      	cmp	r2, r0
 80007f8:	f200 80f9 	bhi.w	80009ee <__udivmoddi4+0x2c6>
 80007fc:	1a84      	subs	r4, r0, r2
 80007fe:	eb61 0303 	sbc.w	r3, r1, r3
 8000802:	2001      	movs	r0, #1
 8000804:	469e      	mov	lr, r3
 8000806:	2d00      	cmp	r5, #0
 8000808:	d0e0      	beq.n	80007cc <__udivmoddi4+0xa4>
 800080a:	e9c5 4e00 	strd	r4, lr, [r5]
 800080e:	e7dd      	b.n	80007cc <__udivmoddi4+0xa4>
 8000810:	b902      	cbnz	r2, 8000814 <__udivmoddi4+0xec>
 8000812:	deff      	udf	#255	; 0xff
 8000814:	fab2 f282 	clz	r2, r2
 8000818:	2a00      	cmp	r2, #0
 800081a:	f040 8092 	bne.w	8000942 <__udivmoddi4+0x21a>
 800081e:	eba1 010c 	sub.w	r1, r1, ip
 8000822:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000826:	fa1f fe8c 	uxth.w	lr, ip
 800082a:	2601      	movs	r6, #1
 800082c:	0c20      	lsrs	r0, r4, #16
 800082e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000832:	fb07 1113 	mls	r1, r7, r3, r1
 8000836:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800083a:	fb0e f003 	mul.w	r0, lr, r3
 800083e:	4288      	cmp	r0, r1
 8000840:	d908      	bls.n	8000854 <__udivmoddi4+0x12c>
 8000842:	eb1c 0101 	adds.w	r1, ip, r1
 8000846:	f103 38ff 	add.w	r8, r3, #4294967295
 800084a:	d202      	bcs.n	8000852 <__udivmoddi4+0x12a>
 800084c:	4288      	cmp	r0, r1
 800084e:	f200 80cb 	bhi.w	80009e8 <__udivmoddi4+0x2c0>
 8000852:	4643      	mov	r3, r8
 8000854:	1a09      	subs	r1, r1, r0
 8000856:	b2a4      	uxth	r4, r4
 8000858:	fbb1 f0f7 	udiv	r0, r1, r7
 800085c:	fb07 1110 	mls	r1, r7, r0, r1
 8000860:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000864:	fb0e fe00 	mul.w	lr, lr, r0
 8000868:	45a6      	cmp	lr, r4
 800086a:	d908      	bls.n	800087e <__udivmoddi4+0x156>
 800086c:	eb1c 0404 	adds.w	r4, ip, r4
 8000870:	f100 31ff 	add.w	r1, r0, #4294967295
 8000874:	d202      	bcs.n	800087c <__udivmoddi4+0x154>
 8000876:	45a6      	cmp	lr, r4
 8000878:	f200 80bb 	bhi.w	80009f2 <__udivmoddi4+0x2ca>
 800087c:	4608      	mov	r0, r1
 800087e:	eba4 040e 	sub.w	r4, r4, lr
 8000882:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000886:	e79c      	b.n	80007c2 <__udivmoddi4+0x9a>
 8000888:	f1c6 0720 	rsb	r7, r6, #32
 800088c:	40b3      	lsls	r3, r6
 800088e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000892:	ea4c 0c03 	orr.w	ip, ip, r3
 8000896:	fa20 f407 	lsr.w	r4, r0, r7
 800089a:	fa01 f306 	lsl.w	r3, r1, r6
 800089e:	431c      	orrs	r4, r3
 80008a0:	40f9      	lsrs	r1, r7
 80008a2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80008a6:	fa00 f306 	lsl.w	r3, r0, r6
 80008aa:	fbb1 f8f9 	udiv	r8, r1, r9
 80008ae:	0c20      	lsrs	r0, r4, #16
 80008b0:	fa1f fe8c 	uxth.w	lr, ip
 80008b4:	fb09 1118 	mls	r1, r9, r8, r1
 80008b8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008bc:	fb08 f00e 	mul.w	r0, r8, lr
 80008c0:	4288      	cmp	r0, r1
 80008c2:	fa02 f206 	lsl.w	r2, r2, r6
 80008c6:	d90b      	bls.n	80008e0 <__udivmoddi4+0x1b8>
 80008c8:	eb1c 0101 	adds.w	r1, ip, r1
 80008cc:	f108 3aff 	add.w	sl, r8, #4294967295
 80008d0:	f080 8088 	bcs.w	80009e4 <__udivmoddi4+0x2bc>
 80008d4:	4288      	cmp	r0, r1
 80008d6:	f240 8085 	bls.w	80009e4 <__udivmoddi4+0x2bc>
 80008da:	f1a8 0802 	sub.w	r8, r8, #2
 80008de:	4461      	add	r1, ip
 80008e0:	1a09      	subs	r1, r1, r0
 80008e2:	b2a4      	uxth	r4, r4
 80008e4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008e8:	fb09 1110 	mls	r1, r9, r0, r1
 80008ec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008f0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008f4:	458e      	cmp	lr, r1
 80008f6:	d908      	bls.n	800090a <__udivmoddi4+0x1e2>
 80008f8:	eb1c 0101 	adds.w	r1, ip, r1
 80008fc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000900:	d26c      	bcs.n	80009dc <__udivmoddi4+0x2b4>
 8000902:	458e      	cmp	lr, r1
 8000904:	d96a      	bls.n	80009dc <__udivmoddi4+0x2b4>
 8000906:	3802      	subs	r0, #2
 8000908:	4461      	add	r1, ip
 800090a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800090e:	fba0 9402 	umull	r9, r4, r0, r2
 8000912:	eba1 010e 	sub.w	r1, r1, lr
 8000916:	42a1      	cmp	r1, r4
 8000918:	46c8      	mov	r8, r9
 800091a:	46a6      	mov	lr, r4
 800091c:	d356      	bcc.n	80009cc <__udivmoddi4+0x2a4>
 800091e:	d053      	beq.n	80009c8 <__udivmoddi4+0x2a0>
 8000920:	b15d      	cbz	r5, 800093a <__udivmoddi4+0x212>
 8000922:	ebb3 0208 	subs.w	r2, r3, r8
 8000926:	eb61 010e 	sbc.w	r1, r1, lr
 800092a:	fa01 f707 	lsl.w	r7, r1, r7
 800092e:	fa22 f306 	lsr.w	r3, r2, r6
 8000932:	40f1      	lsrs	r1, r6
 8000934:	431f      	orrs	r7, r3
 8000936:	e9c5 7100 	strd	r7, r1, [r5]
 800093a:	2600      	movs	r6, #0
 800093c:	4631      	mov	r1, r6
 800093e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000942:	f1c2 0320 	rsb	r3, r2, #32
 8000946:	40d8      	lsrs	r0, r3
 8000948:	fa0c fc02 	lsl.w	ip, ip, r2
 800094c:	fa21 f303 	lsr.w	r3, r1, r3
 8000950:	4091      	lsls	r1, r2
 8000952:	4301      	orrs	r1, r0
 8000954:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000958:	fa1f fe8c 	uxth.w	lr, ip
 800095c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000960:	fb07 3610 	mls	r6, r7, r0, r3
 8000964:	0c0b      	lsrs	r3, r1, #16
 8000966:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800096a:	fb00 f60e 	mul.w	r6, r0, lr
 800096e:	429e      	cmp	r6, r3
 8000970:	fa04 f402 	lsl.w	r4, r4, r2
 8000974:	d908      	bls.n	8000988 <__udivmoddi4+0x260>
 8000976:	eb1c 0303 	adds.w	r3, ip, r3
 800097a:	f100 38ff 	add.w	r8, r0, #4294967295
 800097e:	d22f      	bcs.n	80009e0 <__udivmoddi4+0x2b8>
 8000980:	429e      	cmp	r6, r3
 8000982:	d92d      	bls.n	80009e0 <__udivmoddi4+0x2b8>
 8000984:	3802      	subs	r0, #2
 8000986:	4463      	add	r3, ip
 8000988:	1b9b      	subs	r3, r3, r6
 800098a:	b289      	uxth	r1, r1
 800098c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000990:	fb07 3316 	mls	r3, r7, r6, r3
 8000994:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000998:	fb06 f30e 	mul.w	r3, r6, lr
 800099c:	428b      	cmp	r3, r1
 800099e:	d908      	bls.n	80009b2 <__udivmoddi4+0x28a>
 80009a0:	eb1c 0101 	adds.w	r1, ip, r1
 80009a4:	f106 38ff 	add.w	r8, r6, #4294967295
 80009a8:	d216      	bcs.n	80009d8 <__udivmoddi4+0x2b0>
 80009aa:	428b      	cmp	r3, r1
 80009ac:	d914      	bls.n	80009d8 <__udivmoddi4+0x2b0>
 80009ae:	3e02      	subs	r6, #2
 80009b0:	4461      	add	r1, ip
 80009b2:	1ac9      	subs	r1, r1, r3
 80009b4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80009b8:	e738      	b.n	800082c <__udivmoddi4+0x104>
 80009ba:	462e      	mov	r6, r5
 80009bc:	4628      	mov	r0, r5
 80009be:	e705      	b.n	80007cc <__udivmoddi4+0xa4>
 80009c0:	4606      	mov	r6, r0
 80009c2:	e6e3      	b.n	800078c <__udivmoddi4+0x64>
 80009c4:	4618      	mov	r0, r3
 80009c6:	e6f8      	b.n	80007ba <__udivmoddi4+0x92>
 80009c8:	454b      	cmp	r3, r9
 80009ca:	d2a9      	bcs.n	8000920 <__udivmoddi4+0x1f8>
 80009cc:	ebb9 0802 	subs.w	r8, r9, r2
 80009d0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009d4:	3801      	subs	r0, #1
 80009d6:	e7a3      	b.n	8000920 <__udivmoddi4+0x1f8>
 80009d8:	4646      	mov	r6, r8
 80009da:	e7ea      	b.n	80009b2 <__udivmoddi4+0x28a>
 80009dc:	4620      	mov	r0, r4
 80009de:	e794      	b.n	800090a <__udivmoddi4+0x1e2>
 80009e0:	4640      	mov	r0, r8
 80009e2:	e7d1      	b.n	8000988 <__udivmoddi4+0x260>
 80009e4:	46d0      	mov	r8, sl
 80009e6:	e77b      	b.n	80008e0 <__udivmoddi4+0x1b8>
 80009e8:	3b02      	subs	r3, #2
 80009ea:	4461      	add	r1, ip
 80009ec:	e732      	b.n	8000854 <__udivmoddi4+0x12c>
 80009ee:	4630      	mov	r0, r6
 80009f0:	e709      	b.n	8000806 <__udivmoddi4+0xde>
 80009f2:	4464      	add	r4, ip
 80009f4:	3802      	subs	r0, #2
 80009f6:	e742      	b.n	800087e <__udivmoddi4+0x156>

080009f8 <__aeabi_idiv0>:
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop

080009fc <MLX90640_DumpEE>:
int CheckAdjacentPixels(uint16_t pix1, uint16_t pix2);  
float GetMedian(float *values, int n);
int IsPixelBad(uint16_t pixel,paramsMLX90640 *params);
  
int MLX90640_DumpEE(uint8_t slaveAddr, uint16_t *eeData)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	6039      	str	r1, [r7, #0]
 8000a06:	71fb      	strb	r3, [r7, #7]
     return MLX90640_I2CRead(slaveAddr, 0x2400, 832, eeData);
 8000a08:	79f8      	ldrb	r0, [r7, #7]
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	f44f 7250 	mov.w	r2, #832	; 0x340
 8000a10:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8000a14:	f002 fd9c 	bl	8003550 <MLX90640_I2CRead>
 8000a18:	4603      	mov	r3, r0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <MLX90640_GetFrameData>:

int MLX90640_GetFrameData(uint8_t slaveAddr, uint16_t *frameData)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b0a6      	sub	sp, #152	; 0x98
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	6039      	str	r1, [r7, #0]
 8000a2e:	71fb      	strb	r3, [r7, #7]
    uint16_t dataReady = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    uint16_t controlRegister1;
    uint16_t statusRegister;
    int error = 1;
 8000a36:	2301      	movs	r3, #1
 8000a38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    uint16_t data[64];
    uint8_t cnt = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
    
    while(dataReady == 0)
 8000a42:	e016      	b.n	8000a72 <MLX90640_GetFrameData+0x4e>
    {
        error = MLX90640_I2CRead(slaveAddr, 0x8000, 1, &statusRegister);
 8000a44:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000a48:	79f8      	ldrb	r0, [r7, #7]
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a50:	f002 fd7e 	bl	8003550 <MLX90640_I2CRead>
 8000a54:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
        if(error != 0)
 8000a58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d002      	beq.n	8000a66 <MLX90640_GetFrameData+0x42>
        {
            return error;
 8000a60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000a64:	e088      	b.n	8000b78 <MLX90640_GetFrameData+0x154>
        }    
        dataReady = statusRegister & 0x0008;
 8000a66:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8000a6a:	f003 0308 	and.w	r3, r3, #8
 8000a6e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    while(dataReady == 0)
 8000a72:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d0e4      	beq.n	8000a44 <MLX90640_GetFrameData+0x20>
    }

    error = MLX90640_I2CWrite(slaveAddr, 0x8000, 0x0030);
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	2230      	movs	r2, #48	; 0x30
 8000a7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a82:	4618      	mov	r0, r3
 8000a84:	f002 fdb4 	bl	80035f0 <MLX90640_I2CWrite>
 8000a88:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    if(error == -1)
 8000a8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a94:	d102      	bne.n	8000a9c <MLX90640_GetFrameData+0x78>
    {
        return error;
 8000a96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000a9a:	e06d      	b.n	8000b78 <MLX90640_GetFrameData+0x154>
    }

    error = MLX90640_I2CRead(slaveAddr, 0x0400, 768, frameData);
 8000a9c:	79f8      	ldrb	r0, [r7, #7]
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000aa4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aa8:	f002 fd52 	bl	8003550 <MLX90640_I2CRead>
 8000aac:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    if(error != 0)
 8000ab0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d002      	beq.n	8000abe <MLX90640_GetFrameData+0x9a>
    {
        return error;
 8000ab8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000abc:	e05c      	b.n	8000b78 <MLX90640_GetFrameData+0x154>
    }
    
    error = MLX90640_I2CRead(slaveAddr, 0x0700, 64, data);
 8000abe:	f107 030c 	add.w	r3, r7, #12
 8000ac2:	79f8      	ldrb	r0, [r7, #7]
 8000ac4:	2240      	movs	r2, #64	; 0x40
 8000ac6:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000aca:	f002 fd41 	bl	8003550 <MLX90640_I2CRead>
 8000ace:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    if(error != 0)
 8000ad2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d002      	beq.n	8000ae0 <MLX90640_GetFrameData+0xbc>
    {
        return error;
 8000ada:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000ade:	e04b      	b.n	8000b78 <MLX90640_GetFrameData+0x154>
    }

    error = MLX90640_I2CRead(slaveAddr, 0x800D, 1, &controlRegister1);
 8000ae0:	f107 038e 	add.w	r3, r7, #142	; 0x8e
 8000ae4:	79f8      	ldrb	r0, [r7, #7]
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	f248 010d 	movw	r1, #32781	; 0x800d
 8000aec:	f002 fd30 	bl	8003550 <MLX90640_I2CRead>
 8000af0:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    frameData[832] = controlRegister1;
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 8000afa:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8000afe:	801a      	strh	r2, [r3, #0]
    frameData[833] = statusRegister & 0x0001;
 8000b00:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	f203 6382 	addw	r3, r3, #1666	; 0x682
 8000b0a:	f002 0201 	and.w	r2, r2, #1
 8000b0e:	b292      	uxth	r2, r2
 8000b10:	801a      	strh	r2, [r3, #0]

    if(error != 0)
 8000b12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d002      	beq.n	8000b20 <MLX90640_GetFrameData+0xfc>
    {
        return error;
 8000b1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000b1e:	e02b      	b.n	8000b78 <MLX90640_GetFrameData+0x154>
    }
    
    //error = ValidateAuxData(data);
    if(error == 0)
 8000b20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d11b      	bne.n	8000b60 <MLX90640_GetFrameData+0x13c>
    {
        for(cnt=0; cnt<64; cnt++)
 8000b28:	2300      	movs	r3, #0
 8000b2a:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 8000b2e:	e013      	b.n	8000b58 <MLX90640_GetFrameData+0x134>
        {
            frameData[cnt+768] = data[cnt];
 8000b30:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8000b34:	f897 2095 	ldrb.w	r2, [r7, #149]	; 0x95
 8000b38:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8000b3c:	0052      	lsls	r2, r2, #1
 8000b3e:	6839      	ldr	r1, [r7, #0]
 8000b40:	440a      	add	r2, r1
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	3398      	adds	r3, #152	; 0x98
 8000b46:	443b      	add	r3, r7
 8000b48:	f833 3c8c 	ldrh.w	r3, [r3, #-140]
 8000b4c:	8013      	strh	r3, [r2, #0]
        for(cnt=0; cnt<64; cnt++)
 8000b4e:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8000b52:	3301      	adds	r3, #1
 8000b54:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 8000b58:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8000b5c:	2b3f      	cmp	r3, #63	; 0x3f
 8000b5e:	d9e7      	bls.n	8000b30 <MLX90640_GetFrameData+0x10c>
        }
    }


    printf("%d \n", frameData[833]);
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	f203 6382 	addw	r3, r3, #1666	; 0x682
 8000b66:	881b      	ldrh	r3, [r3, #0]
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4805      	ldr	r0, [pc, #20]	; (8000b80 <MLX90640_GetFrameData+0x15c>)
 8000b6c:	f00d fb74 	bl	800e258 <iprintf>
    return frameData[833];    
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	f203 6382 	addw	r3, r3, #1666	; 0x682
 8000b76:	881b      	ldrh	r3, [r3, #0]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3798      	adds	r7, #152	; 0x98
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	08012408 	.word	0x08012408

08000b84 <MLX90640_ExtractParameters>:

int MLX90640_ExtractParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
    int error = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
    
    ExtractVDDParameters(eeData, mlx90640);
 8000b92:	6839      	ldr	r1, [r7, #0]
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f000 fdd9 	bl	800174c <ExtractVDDParameters>
    ExtractPTATParameters(eeData, mlx90640);
 8000b9a:	6839      	ldr	r1, [r7, #0]
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f000 fe0f 	bl	80017c0 <ExtractPTATParameters>
    ExtractGainParameters(eeData, mlx90640);
 8000ba2:	6839      	ldr	r1, [r7, #0]
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f000 fe8f 	bl	80018c8 <ExtractGainParameters>
    ExtractTgcParameters(eeData, mlx90640);
 8000baa:	6839      	ldr	r1, [r7, #0]
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f000 fe9d 	bl	80018ec <ExtractTgcParameters>
    ExtractResolutionParameters(eeData, mlx90640);
 8000bb2:	6839      	ldr	r1, [r7, #0]
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f000 fed1 	bl	800195c <ExtractResolutionParameters>
    ExtractKsTaParameters(eeData, mlx90640);
 8000bba:	6839      	ldr	r1, [r7, #0]
 8000bbc:	6878      	ldr	r0, [r7, #4]
 8000bbe:	f000 fee5 	bl	800198c <ExtractKsTaParameters>
    ExtractKsToParameters(eeData, mlx90640);
 8000bc2:	6839      	ldr	r1, [r7, #0]
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f000 ff19 	bl	80019fc <ExtractKsToParameters>
    ExtractCPParameters(eeData, mlx90640);
 8000bca:	6839      	ldr	r1, [r7, #0]
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f002 f9af 	bl	8002f30 <ExtractCPParameters>
    ExtractAlphaParameters(eeData, mlx90640);
 8000bd2:	6839      	ldr	r1, [r7, #0]
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f000 fff7 	bl	8001bc8 <ExtractAlphaParameters>
    ExtractOffsetParameters(eeData, mlx90640);
 8000bda:	6839      	ldr	r1, [r7, #0]
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f001 fb51 	bl	8002284 <ExtractOffsetParameters>
    ExtractKtaPixelParameters(eeData, mlx90640);
 8000be2:	6839      	ldr	r1, [r7, #0]
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f001 fd87 	bl	80026f8 <ExtractKtaPixelParameters>
    ExtractKvPixelParameters(eeData, mlx90640);
 8000bea:	6839      	ldr	r1, [r7, #0]
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f001 ffb7 	bl	8002b60 <ExtractKvPixelParameters>
    ExtractCILCParameters(eeData, mlx90640);
 8000bf2:	6839      	ldr	r1, [r7, #0]
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f002 fadf 	bl	80031b8 <ExtractCILCParameters>
    error = ExtractDeviatingPixels(eeData, mlx90640);  
 8000bfa:	6839      	ldr	r1, [r7, #0]
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f002 fb7b 	bl	80032f8 <ExtractDeviatingPixels>
 8000c02:	60f8      	str	r0, [r7, #12]
    
    return error;
 8000c04:	68fb      	ldr	r3, [r7, #12]

}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <MLX90640_SetRefreshRate>:
}

//------------------------------------------------------------------------------

int MLX90640_SetRefreshRate(uint8_t slaveAddr, uint8_t refreshRate)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b086      	sub	sp, #24
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	4603      	mov	r3, r0
 8000c16:	460a      	mov	r2, r1
 8000c18:	71fb      	strb	r3, [r7, #7]
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	71bb      	strb	r3, [r7, #6]
    uint16_t controlRegister1;
    int value;
    int error;
    
    value = (refreshRate & 0x07)<<7;
 8000c1e:	79bb      	ldrb	r3, [r7, #6]
 8000c20:	01db      	lsls	r3, r3, #7
 8000c22:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000c26:	613b      	str	r3, [r7, #16]
    
    error = MLX90640_I2CRead(slaveAddr, 0x800D, 1, &controlRegister1);
 8000c28:	f107 030e 	add.w	r3, r7, #14
 8000c2c:	79f8      	ldrb	r0, [r7, #7]
 8000c2e:	2201      	movs	r2, #1
 8000c30:	f248 010d 	movw	r1, #32781	; 0x800d
 8000c34:	f002 fc8c 	bl	8003550 <MLX90640_I2CRead>
 8000c38:	6178      	str	r0, [r7, #20]
    if(error == 0)
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d110      	bne.n	8000c62 <MLX90640_SetRefreshRate+0x54>
    {
        value = (controlRegister1 & 0xFC7F) | value;
 8000c40:	89fb      	ldrh	r3, [r7, #14]
 8000c42:	461a      	mov	r2, r3
 8000c44:	f64f 437f 	movw	r3, #64639	; 0xfc7f
 8000c48:	4013      	ands	r3, r2
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]
        error = MLX90640_I2CWrite(slaveAddr, 0x800D, value);
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	f248 010d 	movw	r1, #32781	; 0x800d
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f002 fcc8 	bl	80035f0 <MLX90640_I2CWrite>
 8000c60:	6178      	str	r0, [r7, #20]
    }    
    
    return error;
 8000c62:	697b      	ldr	r3, [r7, #20]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3718      	adds	r7, #24
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <MLX90640_SetChessMode>:
}

//------------------------------------------------------------------------------

int MLX90640_SetChessMode(uint8_t slaveAddr)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
    uint16_t controlRegister1;
    int value;
    int error;
        
    error = MLX90640_I2CRead(slaveAddr, 0x800D, 1, &controlRegister1);
 8000c76:	f107 030e 	add.w	r3, r7, #14
 8000c7a:	79f8      	ldrb	r0, [r7, #7]
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	f248 010d 	movw	r1, #32781	; 0x800d
 8000c82:	f002 fc65 	bl	8003550 <MLX90640_I2CRead>
 8000c86:	6178      	str	r0, [r7, #20]
    
    if(error == 0)
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d10d      	bne.n	8000caa <MLX90640_SetChessMode+0x3e>
    {
        value = (controlRegister1 | 0x1000);
 8000c8e:	89fb      	ldrh	r3, [r7, #14]
 8000c90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	613b      	str	r3, [r7, #16]
        error = MLX90640_I2CWrite(slaveAddr, 0x800D, value);        
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	b29a      	uxth	r2, r3
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	f248 010d 	movw	r1, #32781	; 0x800d
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f002 fca4 	bl	80035f0 <MLX90640_I2CWrite>
 8000ca8:	6178      	str	r0, [r7, #20]
    }    
    
    return error;
 8000caa:	697b      	ldr	r3, [r7, #20]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3718      	adds	r7, #24
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	0000      	movs	r0, r0
	...

08000cb8 <MLX90640_CalculateTo>:
}

//------------------------------------------------------------------------------

void MLX90640_CalculateTo(uint16_t *frameData, const paramsMLX90640 *params, float emissivity, float tr, float *result)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b0a0      	sub	sp, #128	; 0x80
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6178      	str	r0, [r7, #20]
 8000cc0:	6139      	str	r1, [r7, #16]
 8000cc2:	ed87 0a03 	vstr	s0, [r7, #12]
 8000cc6:	edc7 0a02 	vstr	s1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
    float kvScale;
    float alphaScale;
    float kta;
    float kv;
    
    subPage = frameData[833];
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	f8b3 3682 	ldrh.w	r3, [r3, #1666]	; 0x682
 8000cd2:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
    vdd = MLX90640_GetVdd(frameData, params);
 8000cd6:	6939      	ldr	r1, [r7, #16]
 8000cd8:	6978      	ldr	r0, [r7, #20]
 8000cda:	f000 fc2d 	bl	8001538 <MLX90640_GetVdd>
 8000cde:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
    ta = MLX90640_GetTa(frameData, params);
 8000ce2:	6939      	ldr	r1, [r7, #16]
 8000ce4:	6978      	ldr	r0, [r7, #20]
 8000ce6:	f000 fca1 	bl	800162c <MLX90640_GetTa>
 8000cea:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
    
    ta4 = (ta + 273.15f);
 8000cee:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8000cf2:	ed9f 7ad3 	vldr	s14, [pc, #844]	; 8001040 <MLX90640_CalculateTo+0x388>
 8000cf6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000cfa:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    ta4 = ta4 * ta4;
 8000cfe:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8000d02:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000d06:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    ta4 = ta4 * ta4;
 8000d0a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8000d0e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000d12:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    tr4 = (tr + 273.15f);
 8000d16:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d1a:	ed9f 7ac9 	vldr	s14, [pc, #804]	; 8001040 <MLX90640_CalculateTo+0x388>
 8000d1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d22:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    tr4 = tr4 * tr4;
 8000d26:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8000d2a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000d2e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    tr4 = tr4 * tr4;
 8000d32:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8000d36:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000d3a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    taTr = tr4 - (tr4-ta4)/emissivity;
 8000d3e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000d42:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8000d46:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000d4a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d52:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000d56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d5a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    
    ktaScale = pow(2,(double)params->ktaScale);
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	f893 3f4c 	ldrb.w	r3, [r3, #3916]	; 0xf4c
 8000d64:	ee07 3a90 	vmov	s15, r3
 8000d68:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000d6c:	eeb0 1b47 	vmov.f64	d1, d7
 8000d70:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8000d74:	f011 f854 	bl	8011e20 <pow>
 8000d78:	eeb0 7b40 	vmov.f64	d7, d0
 8000d7c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d80:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    kvScale = pow(2,(double)params->kvScale);
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d8a:	f893 324d 	ldrb.w	r3, [r3, #589]	; 0x24d
 8000d8e:	ee07 3a90 	vmov	s15, r3
 8000d92:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000d96:	eeb0 1b47 	vmov.f64	d1, d7
 8000d9a:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8000d9e:	f011 f83f 	bl	8011e20 <pow>
 8000da2:	eeb0 7b40 	vmov.f64	d7, d0
 8000da6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000daa:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    alphaScale = pow(2,(double)params->alphaScale);
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	f893 364a 	ldrb.w	r3, [r3, #1610]	; 0x64a
 8000db4:	ee07 3a90 	vmov	s15, r3
 8000db8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000dbc:	eeb0 1b47 	vmov.f64	d1, d7
 8000dc0:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8000dc4:	f011 f82c 	bl	8011e20 <pow>
 8000dc8:	eeb0 7b40 	vmov.f64	d7, d0
 8000dcc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000dd0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    
    alphaCorrR[0] = 1 / (1 + params->ksTo[0] * 40);
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000dda:	ed9f 7a94 	vldr	s14, [pc, #592]	; 800102c <MLX90640_CalculateTo+0x374>
 8000dde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000de2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000de6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000dea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000dee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000df2:	edc7 7a06 	vstr	s15, [r7, #24]
    alphaCorrR[1] = 1 ;
 8000df6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000dfa:	61fb      	str	r3, [r7, #28]
    alphaCorrR[2] = (1 + params->ksTo[1] * params->ct[2]);
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8000e08:	ee07 3a90 	vmov	s15, r3
 8000e0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000e18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e1c:	edc7 7a08 	vstr	s15, [r7, #32]
    alphaCorrR[3] = alphaCorrR[2] * (1 + params->ksTo[2] * (params->ct[3] - params->ct[2]));
 8000e20:	ed97 7a08 	vldr	s14, [r7, #32]
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8000e30:	461a      	mov	r2, r3
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	ee07 3a90 	vmov	s15, r3
 8000e3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000e4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e52:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    
//------------------------- Gain calculation -----------------------------------    
    gain = frameData[778];
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	f203 6314 	addw	r3, r3, #1556	; 0x614
 8000e5c:	881b      	ldrh	r3, [r3, #0]
 8000e5e:	ee07 3a90 	vmov	s15, r3
 8000e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e66:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    if(gain > 32767)
 8000e6a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8000e6e:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8001030 <MLX90640_CalculateTo+0x378>
 8000e72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e7a:	dd07      	ble.n	8000e8c <MLX90640_CalculateTo+0x1d4>
    {
        gain = gain - 65536;
 8000e7c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8000e80:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8001034 <MLX90640_CalculateTo+0x37c>
 8000e84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e88:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    }
    
    gain = params->gainEE / gain; 
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000e92:	ee07 3a90 	vmov	s15, r3
 8000e96:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e9a:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8000e9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ea2:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
  
//------------------------- To calculation -------------------------------------    
    mode = (frameData[832] & 0x1000) >> 5;
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 8000eac:	881b      	ldrh	r3, [r3, #0]
 8000eae:	115b      	asrs	r3, r3, #5
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000eb6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
    irDataCP[0] = frameData[776];  
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8000ec0:	881b      	ldrh	r3, [r3, #0]
 8000ec2:	ee07 3a90 	vmov	s15, r3
 8000ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000eca:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    irDataCP[1] = frameData[808];
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8000ed4:	881b      	ldrh	r3, [r3, #0]
 8000ed6:	ee07 3a90 	vmov	s15, r3
 8000eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ede:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    for( int i = 0; i < 2; i++)
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	673b      	str	r3, [r7, #112]	; 0x70
 8000ee6:	e034      	b.n	8000f52 <MLX90640_CalculateTo+0x29a>
    {
        if(irDataCP[i] > 32767)
 8000ee8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	3380      	adds	r3, #128	; 0x80
 8000eee:	443b      	add	r3, r7
 8000ef0:	3b58      	subs	r3, #88	; 0x58
 8000ef2:	edd3 7a00 	vldr	s15, [r3]
 8000ef6:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8001030 <MLX90640_CalculateTo+0x378>
 8000efa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f02:	dd11      	ble.n	8000f28 <MLX90640_CalculateTo+0x270>
        {
            irDataCP[i] = irDataCP[i] - 65536;
 8000f04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	3380      	adds	r3, #128	; 0x80
 8000f0a:	443b      	add	r3, r7
 8000f0c:	3b58      	subs	r3, #88	; 0x58
 8000f0e:	edd3 7a00 	vldr	s15, [r3]
 8000f12:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001034 <MLX90640_CalculateTo+0x37c>
 8000f16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	3380      	adds	r3, #128	; 0x80
 8000f20:	443b      	add	r3, r7
 8000f22:	3b58      	subs	r3, #88	; 0x58
 8000f24:	edc3 7a00 	vstr	s15, [r3]
        }
        irDataCP[i] = irDataCP[i] * gain;
 8000f28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	3380      	adds	r3, #128	; 0x80
 8000f2e:	443b      	add	r3, r7
 8000f30:	3b58      	subs	r3, #88	; 0x58
 8000f32:	ed93 7a00 	vldr	s14, [r3]
 8000f36:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8000f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	3380      	adds	r3, #128	; 0x80
 8000f44:	443b      	add	r3, r7
 8000f46:	3b58      	subs	r3, #88	; 0x58
 8000f48:	edc3 7a00 	vstr	s15, [r3]
    for( int i = 0; i < 2; i++)
 8000f4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f4e:	3301      	adds	r3, #1
 8000f50:	673b      	str	r3, [r7, #112]	; 0x70
 8000f52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	ddc7      	ble.n	8000ee8 <MLX90640_CalculateTo+0x230>
    }
    irDataCP[0] = irDataCP[0] - params->cpOffset[0] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3f));
 8000f58:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f62:	f9b3 3258 	ldrsh.w	r3, [r3, #600]	; 0x258
 8000f66:	ee07 3a90 	vmov	s15, r3
 8000f6a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	ed93 6a08 	vldr	s12, [r3, #32]
 8000f74:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8000f78:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
 8000f7c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8000f80:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000f84:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000f88:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000f8c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	ed93 6a07 	vldr	s12, [r3, #28]
 8000f96:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8000f9a:	eddf 5a27 	vldr	s11, [pc, #156]	; 8001038 <MLX90640_CalculateTo+0x380>
 8000f9e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8000fa2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000fa6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000faa:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000fae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fb6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    if( mode ==  params->calibrationModeEE)
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000fc0:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d13d      	bne.n	8001044 <MLX90640_CalculateTo+0x38c>
    {
        irDataCP[1] = irDataCP[1] - params->cpOffset[1] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3f));
 8000fc8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000fd2:	f9b3 325a 	ldrsh.w	r3, [r3, #602]	; 0x25a
 8000fd6:	ee07 3a90 	vmov	s15, r3
 8000fda:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	ed93 6a08 	vldr	s12, [r3, #32]
 8000fe4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8000fe8:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
 8000fec:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8000ff0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000ff4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000ff8:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000ffc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	ed93 6a07 	vldr	s12, [r3, #28]
 8001006:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800100a:	eddf 5a0b 	vldr	s11, [pc, #44]	; 8001038 <MLX90640_CalculateTo+0x380>
 800100e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8001012:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001016:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800101a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800101e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001022:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001026:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 800102a:	e043      	b.n	80010b4 <MLX90640_CalculateTo+0x3fc>
 800102c:	42200000 	.word	0x42200000
 8001030:	46fffe00 	.word	0x46fffe00
 8001034:	47800000 	.word	0x47800000
 8001038:	40533333 	.word	0x40533333
 800103c:	358637bd 	.word	0x358637bd
 8001040:	43889333 	.word	0x43889333
    }
    else
    {
      irDataCP[1] = irDataCP[1] - (params->cpOffset[1] + params->ilChessC[0]) * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3f));
 8001044:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800104e:	f9b3 325a 	ldrsh.w	r3, [r3, #602]	; 0x25a
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001060:	edd3 7a97 	vldr	s15, [r3, #604]	; 0x25c
 8001064:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	ed93 6a08 	vldr	s12, [r3, #32]
 800106e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001072:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
 8001076:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800107a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800107e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001082:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001086:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	ed93 6a07 	vldr	s12, [r3, #28]
 8001090:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001094:	ed5f 5a18 	vldr	s11, [pc, #-96]	; 8001038 <MLX90640_CalculateTo+0x380>
 8001098:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800109c:	ee66 7a27 	vmul.f32	s15, s12, s15
 80010a0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80010a4:	ee77 7a86 	vadd.f32	s15, s15, s12
 80010a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010b0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    }

    for( int pixelNumber = 0; pixelNumber < 768; pixelNumber++)
 80010b4:	2300      	movs	r3, #0
 80010b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80010b8:	e230      	b.n	800151c <MLX90640_CalculateTo+0x864>
    {
        ilPattern = pixelNumber / 32 - (pixelNumber / 64) * 2; 
 80010ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80010bc:	2b00      	cmp	r3, #0
 80010be:	da00      	bge.n	80010c2 <MLX90640_CalculateTo+0x40a>
 80010c0:	331f      	adds	r3, #31
 80010c2:	115b      	asrs	r3, r3, #5
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	da00      	bge.n	80010ce <MLX90640_CalculateTo+0x416>
 80010cc:	333f      	adds	r3, #63	; 0x3f
 80010ce:	119b      	asrs	r3, r3, #6
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
        chessPattern = ilPattern ^ (pixelNumber - (pixelNumber/2)*2); 
 80010de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	bfb8      	it	lt
 80010e8:	425b      	neglt	r3, r3
 80010ea:	b25a      	sxtb	r2, r3
 80010ec:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80010f0:	4053      	eors	r3, r2
 80010f2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
        conversionPattern = ((pixelNumber + 2) / 4 - (pixelNumber + 3) / 4 + (pixelNumber + 1) / 4 - pixelNumber / 4) * (1 - 2 * ilPattern);
 80010f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80010f8:	3302      	adds	r3, #2
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	da00      	bge.n	8001100 <MLX90640_CalculateTo+0x448>
 80010fe:	3303      	adds	r3, #3
 8001100:	109b      	asrs	r3, r3, #2
 8001102:	461a      	mov	r2, r3
 8001104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001106:	3303      	adds	r3, #3
 8001108:	2b00      	cmp	r3, #0
 800110a:	da00      	bge.n	800110e <MLX90640_CalculateTo+0x456>
 800110c:	3303      	adds	r3, #3
 800110e:	109b      	asrs	r3, r3, #2
 8001110:	425b      	negs	r3, r3
 8001112:	441a      	add	r2, r3
 8001114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001116:	3301      	adds	r3, #1
 8001118:	2b00      	cmp	r3, #0
 800111a:	da00      	bge.n	800111e <MLX90640_CalculateTo+0x466>
 800111c:	3303      	adds	r3, #3
 800111e:	109b      	asrs	r3, r3, #2
 8001120:	441a      	add	r2, r3
 8001122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001124:	2b00      	cmp	r3, #0
 8001126:	da00      	bge.n	800112a <MLX90640_CalculateTo+0x472>
 8001128:	3303      	adds	r3, #3
 800112a:	109b      	asrs	r3, r3, #2
 800112c:	425b      	negs	r3, r3
 800112e:	4413      	add	r3, r2
 8001130:	b2da      	uxtb	r2, r3
 8001132:	f997 3046 	ldrsb.w	r3, [r7, #70]	; 0x46
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	f1c3 0301 	rsb	r3, r3, #1
 800113c:	b2db      	uxtb	r3, r3
 800113e:	fb12 f303 	smulbb	r3, r2, r3
 8001142:	b2db      	uxtb	r3, r3
 8001144:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
        
        if(mode == 0)
 8001148:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800114c:	2b00      	cmp	r3, #0
 800114e:	d104      	bne.n	800115a <MLX90640_CalculateTo+0x4a2>
        {
          pattern = ilPattern; 
 8001150:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001154:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001158:	e003      	b.n	8001162 <MLX90640_CalculateTo+0x4aa>
        }
        else 
        {
          pattern = chessPattern; 
 800115a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800115e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
        }               
        
        if(pattern == frameData[833])
 8001162:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 8001166:	697a      	ldr	r2, [r7, #20]
 8001168:	f202 6282 	addw	r2, r2, #1666	; 0x682
 800116c:	8812      	ldrh	r2, [r2, #0]
 800116e:	4293      	cmp	r3, r2
 8001170:	f040 81d1 	bne.w	8001516 <MLX90640_CalculateTo+0x85e>
        {    
            irData = frameData[pixelNumber];
 8001174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	697a      	ldr	r2, [r7, #20]
 800117a:	4413      	add	r3, r2
 800117c:	881b      	ldrh	r3, [r3, #0]
 800117e:	ee07 3a90 	vmov	s15, r3
 8001182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001186:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            if(irData > 32767)
 800118a:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800118e:	ed1f 7a58 	vldr	s14, [pc, #-352]	; 8001030 <MLX90640_CalculateTo+0x378>
 8001192:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800119a:	dd07      	ble.n	80011ac <MLX90640_CalculateTo+0x4f4>
            {
                irData = irData - 65536;
 800119c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80011a0:	ed1f 7a5c 	vldr	s14, [pc, #-368]	; 8001034 <MLX90640_CalculateTo+0x37c>
 80011a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011a8:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            }
            irData = irData * gain;
 80011ac:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80011b0:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80011b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b8:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            
            kta = params->kta[pixelNumber]/ktaScale;
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80011c0:	4413      	add	r3, r2
 80011c2:	f603 434c 	addw	r3, r3, #3148	; 0xc4c
 80011c6:	f993 3000 	ldrsb.w	r3, [r3]
 80011ca:	ee07 3a90 	vmov	s15, r3
 80011ce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80011d2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80011d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011da:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            kv = params->kv[pixelNumber]/kvScale;
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80011e2:	4413      	add	r3, r2
 80011e4:	f603 734d 	addw	r3, r3, #3917	; 0xf4d
 80011e8:	f993 3000 	ldrsb.w	r3, [r3]
 80011ec:	ee07 3a90 	vmov	s15, r3
 80011f0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80011f4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80011f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011fc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            irData = irData - params->offset[pixelNumber]*(1 + kta*(ta - 25))*(1 + kv*(vdd - 3.3f));
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001204:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	4413      	add	r3, r2
 800120c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001210:	ee07 3a90 	vmov	s15, r3
 8001214:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001218:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800121c:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8001220:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8001224:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001228:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800122c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001230:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001234:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001238:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800123c:	ed5f 6a82 	vldr	s13, [pc, #-520]	; 8001038 <MLX90640_CalculateTo+0x380>
 8001240:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8001244:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001248:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800124c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001250:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001254:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001258:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800125c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001260:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            
            if(mode !=  params->calibrationModeEE)
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800126a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800126e:	429a      	cmp	r2, r3
 8001270:	d023      	beq.n	80012ba <MLX90640_CalculateTo+0x602>
            {
              irData = irData + params->ilChessC[2] * (2 * ilPattern - 1) - params->ilChessC[1] * conversionPattern; 
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001278:	ed93 7a99 	vldr	s14, [r3, #612]	; 0x264
 800127c:	f997 3046 	ldrsb.w	r3, [r7, #70]	; 0x46
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	3b01      	subs	r3, #1
 8001284:	ee07 3a90 	vmov	s15, r3
 8001288:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800128c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001290:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001294:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800129e:	edd3 6a98 	vldr	s13, [r3, #608]	; 0x260
 80012a2:	f997 3044 	ldrsb.w	r3, [r7, #68]	; 0x44
 80012a6:	ee07 3a90 	vmov	s15, r3
 80012aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012b6:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            }                       
    
            irData = irData - params->tgc * irDataCP[subPage];
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	ed93 7a06 	vldr	s14, [r3, #24]
 80012c0:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	3380      	adds	r3, #128	; 0x80
 80012c8:	443b      	add	r3, r7
 80012ca:	3b58      	subs	r3, #88	; 0x58
 80012cc:	edd3 7a00 	vldr	s15, [r3]
 80012d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012d4:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80012d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012dc:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            irData = irData / emissivity;
 80012e0:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 80012e4:	ed97 7a03 	vldr	s14, [r7, #12]
 80012e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012ec:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            
            alphaCompensated = SCALEALPHA*alphaScale/params->alpha[pixelNumber];
 80012f0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80012f4:	ed1f 7aaf 	vldr	s14, [pc, #-700]	; 800103c <MLX90640_CalculateTo+0x384>
 80012f8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001300:	3324      	adds	r3, #36	; 0x24
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	4413      	add	r3, r2
 8001306:	885b      	ldrh	r3, [r3, #2]
 8001308:	ee07 3a90 	vmov	s15, r3
 800130c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001310:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001314:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            alphaCompensated = alphaCompensated*(1 + params->KsTa * (ta - 25));
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800131e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001322:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8001326:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800132a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800132e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001332:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001336:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800133a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800133e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                        
            Sx = alphaCompensated * alphaCompensated * alphaCompensated * (irData + alphaCompensated * taTr);
 8001342:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001346:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800134a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800134e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001352:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8001356:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800135a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800135e:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800136a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            Sx = sqrt(sqrt(Sx)) * params->ksTo[1];            
 800136e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001372:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001376:	eeb0 0b47 	vmov.f64	d0, d7
 800137a:	f010 ffa5 	bl	80122c8 <sqrt>
 800137e:	eeb0 7b40 	vmov.f64	d7, d0
 8001382:	eeb0 0b47 	vmov.f64	d0, d7
 8001386:	f010 ff9f 	bl	80122c8 <sqrt>
 800138a:	eeb0 6b40 	vmov.f64	d6, d0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001394:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001398:	ee26 7b07 	vmul.f64	d7, d6, d7
 800139c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80013a0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            
            To = sqrt(sqrt(irData/(alphaCompensated * (1 - params->ksTo[1] * 273.15f) + Sx) + taTr)) - 273.15f;                     
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80013aa:	ed1f 7adb 	vldr	s14, [pc, #-876]	; 8001040 <MLX90640_CalculateTo+0x388>
 80013ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013ba:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80013be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013c2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80013c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ca:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 80013ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80013d2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80013d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013de:	eeb0 0b47 	vmov.f64	d0, d7
 80013e2:	f010 ff71 	bl	80122c8 <sqrt>
 80013e6:	eeb0 7b40 	vmov.f64	d7, d0
 80013ea:	eeb0 0b47 	vmov.f64	d0, d7
 80013ee:	f010 ff6b 	bl	80122c8 <sqrt>
 80013f2:	eeb0 7b40 	vmov.f64	d7, d0
 80013f6:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8001530 <MLX90640_CalculateTo+0x878>
 80013fa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80013fe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001402:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
                    
            if(To < params->ct[1])
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 800140c:	ee07 3a90 	vmov	s15, r3
 8001410:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001414:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001418:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800141c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001420:	d503      	bpl.n	800142a <MLX90640_CalculateTo+0x772>
            {
                range = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8001428:	e026      	b.n	8001478 <MLX90640_CalculateTo+0x7c0>
            }
            else if(To < params->ct[2])   
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8001430:	ee07 3a90 	vmov	s15, r3
 8001434:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001438:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800143c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001444:	d503      	bpl.n	800144e <MLX90640_CalculateTo+0x796>
            {
                range = 1;            
 8001446:	2301      	movs	r3, #1
 8001448:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 800144c:	e014      	b.n	8001478 <MLX90640_CalculateTo+0x7c0>
            }   
            else if(To < params->ct[3])
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8001454:	ee07 3a90 	vmov	s15, r3
 8001458:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800145c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001460:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001468:	d503      	bpl.n	8001472 <MLX90640_CalculateTo+0x7ba>
            {
                range = 2;            
 800146a:	2302      	movs	r3, #2
 800146c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8001470:	e002      	b.n	8001478 <MLX90640_CalculateTo+0x7c0>
            }
            else
            {
                range = 3;            
 8001472:	2303      	movs	r3, #3
 8001474:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
            }      
            
            To = sqrt(sqrt(irData / (alphaCompensated * alphaCorrR[range] * (1 + params->ksTo[range] * (To - params->ct[range]))) + taTr)) - 273.15f;
 8001478:	f997 3076 	ldrsb.w	r3, [r7, #118]	; 0x76
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	3380      	adds	r3, #128	; 0x80
 8001480:	443b      	add	r3, r7
 8001482:	3b68      	subs	r3, #104	; 0x68
 8001484:	ed93 7a00 	vldr	s14, [r3]
 8001488:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800148c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001490:	f997 3076 	ldrsb.w	r3, [r7, #118]	; 0x76
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	330a      	adds	r3, #10
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	4413      	add	r3, r2
 800149c:	3304      	adds	r3, #4
 800149e:	edd3 6a00 	vldr	s13, [r3]
 80014a2:	f997 2076 	ldrsb.w	r2, [r7, #118]	; 0x76
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	3220      	adds	r2, #32
 80014aa:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80014ae:	ee07 3a90 	vmov	s15, r3
 80014b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014b6:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 80014ba:	ee76 7a67 	vsub.f32	s15, s12, s15
 80014be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80014c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80014ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ce:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 80014d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80014d6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80014da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014e2:	eeb0 0b47 	vmov.f64	d0, d7
 80014e6:	f010 feef 	bl	80122c8 <sqrt>
 80014ea:	eeb0 7b40 	vmov.f64	d7, d0
 80014ee:	eeb0 0b47 	vmov.f64	d0, d7
 80014f2:	f010 fee9 	bl	80122c8 <sqrt>
 80014f6:	eeb0 7b40 	vmov.f64	d7, d0
 80014fa:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001530 <MLX90640_CalculateTo+0x878>
 80014fe:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001502:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001506:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
                        
            result[pixelNumber] = To;
 800150a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	4413      	add	r3, r2
 8001512:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001514:	601a      	str	r2, [r3, #0]
    for( int pixelNumber = 0; pixelNumber < 768; pixelNumber++)
 8001516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001518:	3301      	adds	r3, #1
 800151a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800151c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800151e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001522:	f6ff adca 	blt.w	80010ba <MLX90640_CalculateTo+0x402>
        }
    }
}
 8001526:	bf00      	nop
 8001528:	bf00      	nop
 800152a:	3780      	adds	r7, #128	; 0x80
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	60000000 	.word	0x60000000
 8001534:	40711266 	.word	0x40711266

08001538 <MLX90640_GetVdd>:
}

//------------------------------------------------------------------------------

float MLX90640_GetVdd(uint16_t *frameData, const paramsMLX90640 *params)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	ed2d 8b02 	vpush	{d8}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
    float vdd;
    float resolutionCorrection;

    int resolutionRAM;    
    
    vdd = frameData[810];
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f203 6354 	addw	r3, r3, #1620	; 0x654
 800154c:	881b      	ldrh	r3, [r3, #0]
 800154e:	ee07 3a90 	vmov	s15, r3
 8001552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001556:	edc7 7a05 	vstr	s15, [r7, #20]
    if(vdd > 32767)
 800155a:	edd7 7a05 	vldr	s15, [r7, #20]
 800155e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001620 <MLX90640_GetVdd+0xe8>
 8001562:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800156a:	dd07      	ble.n	800157c <MLX90640_GetVdd+0x44>
    {
        vdd = vdd - 65536;
 800156c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001570:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001624 <MLX90640_GetVdd+0xec>
 8001574:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001578:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    resolutionRAM = (frameData[832] & 0x0C00) >> 10;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	129b      	asrs	r3, r3, #10
 8001586:	f003 0303 	and.w	r3, r3, #3
 800158a:	613b      	str	r3, [r7, #16]
    resolutionCorrection = pow(2, (double)params->resolutionEE) / pow(2, (double)resolutionRAM);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001592:	ee07 3a90 	vmov	s15, r3
 8001596:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800159a:	eeb0 1b47 	vmov.f64	d1, d7
 800159e:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80015a2:	f010 fc3d 	bl	8011e20 <pow>
 80015a6:	eeb0 8b40 	vmov.f64	d8, d0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	ee07 3a90 	vmov	s15, r3
 80015b0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80015b4:	eeb0 1b47 	vmov.f64	d1, d7
 80015b8:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80015bc:	f010 fc30 	bl	8011e20 <pow>
 80015c0:	eeb0 6b40 	vmov.f64	d6, d0
 80015c4:	ee88 7b06 	vdiv.f64	d7, d8, d6
 80015c8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015cc:	edc7 7a03 	vstr	s15, [r7, #12]
    vdd = (resolutionCorrection * vdd - params->vdd25) / params->kVdd + 3.3f;
 80015d0:	ed97 7a03 	vldr	s14, [r7, #12]
 80015d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80015d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015e2:	ee07 3a90 	vmov	s15, r3
 80015e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ea:	ee77 6a67 	vsub.f32	s13, s14, s15
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f4:	ee07 3a90 	vmov	s15, r3
 80015f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001600:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001628 <MLX90640_GetVdd+0xf0>
 8001604:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001608:	edc7 7a05 	vstr	s15, [r7, #20]
    
    return vdd;
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	ee07 3a90 	vmov	s15, r3
}
 8001612:	eeb0 0a67 	vmov.f32	s0, s15
 8001616:	3718      	adds	r7, #24
 8001618:	46bd      	mov	sp, r7
 800161a:	ecbd 8b02 	vpop	{d8}
 800161e:	bd80      	pop	{r7, pc}
 8001620:	46fffe00 	.word	0x46fffe00
 8001624:	47800000 	.word	0x47800000
 8001628:	40533333 	.word	0x40533333

0800162c <MLX90640_GetTa>:

//------------------------------------------------------------------------------

float MLX90640_GetTa(uint16_t *frameData, const paramsMLX90640 *params)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
    float ptat;
    float ptatArt;
    float vdd;
    float ta;
    
    vdd = MLX90640_GetVdd(frameData, params);
 8001636:	6839      	ldr	r1, [r7, #0]
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff ff7d 	bl	8001538 <MLX90640_GetVdd>
 800163e:	ed87 0a03 	vstr	s0, [r7, #12]
    
    ptat = frameData[800];
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8001648:	881b      	ldrh	r3, [r3, #0]
 800164a:	ee07 3a90 	vmov	s15, r3
 800164e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001652:	edc7 7a05 	vstr	s15, [r7, #20]
    if(ptat > 32767)
 8001656:	edd7 7a05 	vldr	s15, [r7, #20]
 800165a:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800173c <MLX90640_GetTa+0x110>
 800165e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001666:	dd07      	ble.n	8001678 <MLX90640_GetTa+0x4c>
    {
        ptat = ptat - 65536;
 8001668:	edd7 7a05 	vldr	s15, [r7, #20]
 800166c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001740 <MLX90640_GetTa+0x114>
 8001670:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001674:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    
    ptatArt = frameData[768];
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800167e:	881b      	ldrh	r3, [r3, #0]
 8001680:	ee07 3a90 	vmov	s15, r3
 8001684:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001688:	edc7 7a04 	vstr	s15, [r7, #16]
    if(ptatArt > 32767)
 800168c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001690:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800173c <MLX90640_GetTa+0x110>
 8001694:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800169c:	dd07      	ble.n	80016ae <MLX90640_GetTa+0x82>
    {
        ptatArt = ptatArt - 65536;
 800169e:	edd7 7a04 	vldr	s15, [r7, #16]
 80016a2:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001740 <MLX90640_GetTa+0x114>
 80016a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016aa:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    ptatArt = (ptat / (ptat * params->alphaPTAT + ptatArt)) * pow(2, (double)18);
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	ed93 7a04 	vldr	s14, [r3, #16]
 80016b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80016b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80016c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016c4:	edd7 6a05 	vldr	s13, [r7, #20]
 80016c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016cc:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001744 <MLX90640_GetTa+0x118>
 80016d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016d4:	edc7 7a04 	vstr	s15, [r7, #16]
    
    ta = (ptatArt / (1 + params->KvPTAT * (vdd - 3.3f)) - params->vPTAT25);
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	ed93 7a01 	vldr	s14, [r3, #4]
 80016de:	edd7 7a03 	vldr	s15, [r7, #12]
 80016e2:	eddf 6a19 	vldr	s13, [pc, #100]	; 8001748 <MLX90640_GetTa+0x11c>
 80016e6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80016ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016f6:	edd7 6a04 	vldr	s13, [r7, #16]
 80016fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	899b      	ldrh	r3, [r3, #12]
 8001702:	ee07 3a90 	vmov	s15, r3
 8001706:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800170a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800170e:	edc7 7a02 	vstr	s15, [r7, #8]
    ta = ta / params->KtPTAT + 25;
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	ed93 7a02 	vldr	s14, [r3, #8]
 8001718:	edd7 6a02 	vldr	s13, [r7, #8]
 800171c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001720:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001724:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001728:	edc7 7a02 	vstr	s15, [r7, #8]
    
    return ta;
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	ee07 3a90 	vmov	s15, r3
}
 8001732:	eeb0 0a67 	vmov.f32	s0, s15
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	46fffe00 	.word	0x46fffe00
 8001740:	47800000 	.word	0x47800000
 8001744:	48800000 	.word	0x48800000
 8001748:	40533333 	.word	0x40533333

0800174c <ExtractVDDParameters>:
}

//------------------------------------------------------------------------------

void ExtractVDDParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
    int16_t kVdd;
    int16_t vdd25;
    
    kVdd = eeData[51];
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	3366      	adds	r3, #102	; 0x66
 800175a:	881b      	ldrh	r3, [r3, #0]
 800175c:	81fb      	strh	r3, [r7, #14]
    
    kVdd = (eeData[51] & 0xFF00) >> 8;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	3366      	adds	r3, #102	; 0x66
 8001762:	881b      	ldrh	r3, [r3, #0]
 8001764:	0a1b      	lsrs	r3, r3, #8
 8001766:	b29b      	uxth	r3, r3
 8001768:	81fb      	strh	r3, [r7, #14]
    if(kVdd > 127)
 800176a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800176e:	2b7f      	cmp	r3, #127	; 0x7f
 8001770:	dd04      	ble.n	800177c <ExtractVDDParameters+0x30>
    {
        kVdd = kVdd - 256;
 8001772:	89fb      	ldrh	r3, [r7, #14]
 8001774:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001778:	b29b      	uxth	r3, r3
 800177a:	81fb      	strh	r3, [r7, #14]
    }
    kVdd = 32 * kVdd;
 800177c:	89fb      	ldrh	r3, [r7, #14]
 800177e:	015b      	lsls	r3, r3, #5
 8001780:	b29b      	uxth	r3, r3
 8001782:	81fb      	strh	r3, [r7, #14]
    vdd25 = eeData[51] & 0x00FF;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3366      	adds	r3, #102	; 0x66
 8001788:	881b      	ldrh	r3, [r3, #0]
 800178a:	b21b      	sxth	r3, r3
 800178c:	b2db      	uxtb	r3, r3
 800178e:	81bb      	strh	r3, [r7, #12]
    vdd25 = ((vdd25 - 256) << 5) - 8192;
 8001790:	89bb      	ldrh	r3, [r7, #12]
 8001792:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001796:	b29b      	uxth	r3, r3
 8001798:	015b      	lsls	r3, r3, #5
 800179a:	b29b      	uxth	r3, r3
 800179c:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	81bb      	strh	r3, [r7, #12]
    
    mlx90640->kVdd = kVdd;
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	89fa      	ldrh	r2, [r7, #14]
 80017a8:	801a      	strh	r2, [r3, #0]
    mlx90640->vdd25 = vdd25; 
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	89ba      	ldrh	r2, [r7, #12]
 80017ae:	805a      	strh	r2, [r3, #2]
}
 80017b0:	bf00      	nop
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	0000      	movs	r0, r0
	...

080017c0 <ExtractPTATParameters>:

//------------------------------------------------------------------------------

void ExtractPTATParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b087      	sub	sp, #28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
    float KvPTAT;
    float KtPTAT;
    int16_t vPTAT25;
    float alphaPTAT;
    
    KvPTAT = (eeData[50] & 0xFC00) >> 10;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3364      	adds	r3, #100	; 0x64
 80017ce:	881b      	ldrh	r3, [r3, #0]
 80017d0:	0a9b      	lsrs	r3, r3, #10
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	ee07 3a90 	vmov	s15, r3
 80017d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017dc:	edc7 7a05 	vstr	s15, [r7, #20]
    if(KvPTAT > 31)
 80017e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80017e4:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 80017e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f0:	dd07      	ble.n	8001802 <ExtractPTATParameters+0x42>
    {
        KvPTAT = KvPTAT - 64;
 80017f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80017f6:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80018b8 <ExtractPTATParameters+0xf8>
 80017fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017fe:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    KvPTAT = KvPTAT/4096;
 8001802:	ed97 7a05 	vldr	s14, [r7, #20]
 8001806:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80018bc <ExtractPTATParameters+0xfc>
 800180a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800180e:	edc7 7a05 	vstr	s15, [r7, #20]
    
    KtPTAT = eeData[50] & 0x03FF;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	3364      	adds	r3, #100	; 0x64
 8001816:	881b      	ldrh	r3, [r3, #0]
 8001818:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800181c:	ee07 3a90 	vmov	s15, r3
 8001820:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001824:	edc7 7a04 	vstr	s15, [r7, #16]
    if(KtPTAT > 511)
 8001828:	edd7 7a04 	vldr	s15, [r7, #16]
 800182c:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80018c0 <ExtractPTATParameters+0x100>
 8001830:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001838:	dd07      	ble.n	800184a <ExtractPTATParameters+0x8a>
    {
        KtPTAT = KtPTAT - 1024;
 800183a:	edd7 7a04 	vldr	s15, [r7, #16]
 800183e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80018c4 <ExtractPTATParameters+0x104>
 8001842:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001846:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    KtPTAT = KtPTAT/8;
 800184a:	ed97 7a04 	vldr	s14, [r7, #16]
 800184e:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001852:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001856:	edc7 7a04 	vstr	s15, [r7, #16]
    
    vPTAT25 = eeData[49];
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3362      	adds	r3, #98	; 0x62
 800185e:	881b      	ldrh	r3, [r3, #0]
 8001860:	81fb      	strh	r3, [r7, #14]
    
    alphaPTAT = (eeData[16] & 0xF000) / pow(2, (double)14) + 8.0f;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	3320      	adds	r3, #32
 8001866:	881b      	ldrh	r3, [r3, #0]
 8001868:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800186c:	ee07 3a90 	vmov	s15, r3
 8001870:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001874:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 80018b0 <ExtractPTATParameters+0xf0>
 8001878:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800187c:	eeb2 6b00 	vmov.f64	d6, #32	; 0x41000000  8.0
 8001880:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001884:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001888:	edc7 7a02 	vstr	s15, [r7, #8]
    
    mlx90640->KvPTAT = KvPTAT;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	605a      	str	r2, [r3, #4]
    mlx90640->KtPTAT = KtPTAT;    
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	609a      	str	r2, [r3, #8]
    mlx90640->vPTAT25 = vPTAT25;
 8001898:	89fa      	ldrh	r2, [r7, #14]
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	819a      	strh	r2, [r3, #12]
    mlx90640->alphaPTAT = alphaPTAT;   
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	68ba      	ldr	r2, [r7, #8]
 80018a2:	611a      	str	r2, [r3, #16]
}
 80018a4:	bf00      	nop
 80018a6:	371c      	adds	r7, #28
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	00000000 	.word	0x00000000
 80018b4:	40d00000 	.word	0x40d00000
 80018b8:	42800000 	.word	0x42800000
 80018bc:	45800000 	.word	0x45800000
 80018c0:	43ff8000 	.word	0x43ff8000
 80018c4:	44800000 	.word	0x44800000

080018c8 <ExtractGainParameters>:

//------------------------------------------------------------------------------

void ExtractGainParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
    int16_t gainEE;
    
    gainEE = eeData[48];
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	3360      	adds	r3, #96	; 0x60
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	81fb      	strh	r3, [r7, #14]
    if(gainEE > 32767)
    {
        gainEE = gainEE -65536;
    }
    
    mlx90640->gainEE = gainEE;    
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	89fa      	ldrh	r2, [r7, #14]
 80018de:	829a      	strh	r2, [r3, #20]
}
 80018e0:	bf00      	nop
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <ExtractTgcParameters>:

//------------------------------------------------------------------------------

void ExtractTgcParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
    float tgc;
    tgc = eeData[60] & 0x00FF;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	3378      	adds	r3, #120	; 0x78
 80018fa:	881b      	ldrh	r3, [r3, #0]
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	ee07 3a90 	vmov	s15, r3
 8001902:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001906:	edc7 7a03 	vstr	s15, [r7, #12]
    if(tgc > 127)
 800190a:	edd7 7a03 	vldr	s15, [r7, #12]
 800190e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001950 <ExtractTgcParameters+0x64>
 8001912:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800191a:	dd07      	ble.n	800192c <ExtractTgcParameters+0x40>
    {
        tgc = tgc - 256;
 800191c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001920:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001954 <ExtractTgcParameters+0x68>
 8001924:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001928:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    tgc = tgc / 32.0f;
 800192c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001930:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001958 <ExtractTgcParameters+0x6c>
 8001934:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001938:	edc7 7a03 	vstr	s15, [r7, #12]
    
    mlx90640->tgc = tgc;        
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	619a      	str	r2, [r3, #24]
}
 8001942:	bf00      	nop
 8001944:	3714      	adds	r7, #20
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	42fe0000 	.word	0x42fe0000
 8001954:	43800000 	.word	0x43800000
 8001958:	42000000 	.word	0x42000000

0800195c <ExtractResolutionParameters>:

//------------------------------------------------------------------------------

void ExtractResolutionParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
    uint8_t resolutionEE;
    resolutionEE = (eeData[56] & 0x3000) >> 12;    
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	3370      	adds	r3, #112	; 0x70
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	131b      	asrs	r3, r3, #12
 800196e:	b2db      	uxtb	r3, r3
 8001970:	f003 0303 	and.w	r3, r3, #3
 8001974:	73fb      	strb	r3, [r7, #15]
    
    mlx90640->resolutionEE = resolutionEE;
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	7bfa      	ldrb	r2, [r7, #15]
 800197a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 800197e:	bf00      	nop
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
	...

0800198c <ExtractKsTaParameters>:

//------------------------------------------------------------------------------

void ExtractKsTaParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
    float KsTa;
    KsTa = (eeData[60] & 0xFF00) >> 8;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	3378      	adds	r3, #120	; 0x78
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	0a1b      	lsrs	r3, r3, #8
 800199e:	b29b      	uxth	r3, r3
 80019a0:	ee07 3a90 	vmov	s15, r3
 80019a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019a8:	edc7 7a03 	vstr	s15, [r7, #12]
    if(KsTa > 127)
 80019ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80019b0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80019f0 <ExtractKsTaParameters+0x64>
 80019b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019bc:	dd07      	ble.n	80019ce <ExtractKsTaParameters+0x42>
    {
        KsTa = KsTa -256;
 80019be:	edd7 7a03 	vldr	s15, [r7, #12]
 80019c2:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80019f4 <ExtractKsTaParameters+0x68>
 80019c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80019ca:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    KsTa = KsTa / 8192.0f;
 80019ce:	ed97 7a03 	vldr	s14, [r7, #12]
 80019d2:	eddf 6a09 	vldr	s13, [pc, #36]	; 80019f8 <ExtractKsTaParameters+0x6c>
 80019d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019da:	edc7 7a03 	vstr	s15, [r7, #12]
    
    mlx90640->KsTa = KsTa;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019e4:	bf00      	nop
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	42fe0000 	.word	0x42fe0000
 80019f4:	43800000 	.word	0x43800000
 80019f8:	46000000 	.word	0x46000000

080019fc <ExtractKsToParameters>:

//------------------------------------------------------------------------------

void ExtractKsToParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b087      	sub	sp, #28
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
    int KsToScale;
    int8_t step;
    
    step = ((eeData[63] & 0x3000) >> 12) * 10;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	337e      	adds	r3, #126	; 0x7e
 8001a0a:	881b      	ldrh	r3, [r3, #0]
 8001a0c:	131b      	asrs	r3, r3, #12
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	f003 0303 	and.w	r3, r3, #3
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	461a      	mov	r2, r3
 8001a18:	0092      	lsls	r2, r2, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	74fb      	strb	r3, [r7, #19]
    
    mlx90640->ct[0] = -40;
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	f64f 72d8 	movw	r2, #65496	; 0xffd8
 8001a28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    mlx90640->ct[1] = 0;
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    mlx90640->ct[2] = (eeData[63] & 0x00F0) >> 4;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	337e      	adds	r3, #126	; 0x7e
 8001a38:	881b      	ldrh	r3, [r3, #0]
 8001a3a:	111b      	asrs	r3, r3, #4
 8001a3c:	b21b      	sxth	r3, r3
 8001a3e:	f003 030f 	and.w	r3, r3, #15
 8001a42:	b21a      	sxth	r2, r3
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    mlx90640->ct[3] = (eeData[63] & 0x0F00) >> 8;    
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	337e      	adds	r3, #126	; 0x7e
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	121b      	asrs	r3, r3, #8
 8001a52:	b21b      	sxth	r3, r3
 8001a54:	f003 030f 	and.w	r3, r3, #15
 8001a58:	b21a      	sxth	r2, r3
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    
    mlx90640->ct[2] = mlx90640->ct[2]*step;
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	fb12 f303 	smulbb	r3, r2, r3
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	b21a      	sxth	r2, r3
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    mlx90640->ct[3] = mlx90640->ct[2] + mlx90640->ct[3]*step;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8001a8a:	b299      	uxth	r1, r3
 8001a8c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	fb11 f303 	smulbb	r3, r1, r3
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	4413      	add	r3, r2
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	b21a      	sxth	r2, r3
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    mlx90640->ct[4] = 400;
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001aaa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    
    KsToScale = (eeData[63] & 0x000F) + 8;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	337e      	adds	r3, #126	; 0x7e
 8001ab2:	881b      	ldrh	r3, [r3, #0]
 8001ab4:	f003 030f 	and.w	r3, r3, #15
 8001ab8:	3308      	adds	r3, #8
 8001aba:	60fb      	str	r3, [r7, #12]
    KsToScale = 1 << KsToScale;
 8001abc:	2201      	movs	r2, #1
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	60fb      	str	r3, [r7, #12]
    
    mlx90640->ksTo[0] = eeData[61] & 0x00FF;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	337a      	adds	r3, #122	; 0x7a
 8001aca:	881b      	ldrh	r3, [r3, #0]
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	ee07 3a90 	vmov	s15, r3
 8001ad2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    mlx90640->ksTo[1] = (eeData[61] & 0xFF00) >> 8;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	337a      	adds	r3, #122	; 0x7a
 8001ae0:	881b      	ldrh	r3, [r3, #0]
 8001ae2:	0a1b      	lsrs	r3, r3, #8
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	ee07 3a90 	vmov	s15, r3
 8001aea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    mlx90640->ksTo[2] = eeData[62] & 0x00FF;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	337c      	adds	r3, #124	; 0x7c
 8001af8:	881b      	ldrh	r3, [r3, #0]
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	ee07 3a90 	vmov	s15, r3
 8001b00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    mlx90640->ksTo[3] = (eeData[62] & 0xFF00) >> 8;      
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	337c      	adds	r3, #124	; 0x7c
 8001b0e:	881b      	ldrh	r3, [r3, #0]
 8001b10:	0a1b      	lsrs	r3, r3, #8
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	ee07 3a90 	vmov	s15, r3
 8001b18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
    
    for(int i = 0; i < 4; i++)
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]
 8001b26:	e03c      	b.n	8001ba2 <ExtractKsToParameters+0x1a6>
    {
        if(mlx90640->ksTo[i] > 127)
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	330a      	adds	r3, #10
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	3304      	adds	r3, #4
 8001b34:	edd3 7a00 	vldr	s15, [r3]
 8001b38:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001bbc <ExtractKsToParameters+0x1c0>
 8001b3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b44:	dd13      	ble.n	8001b6e <ExtractKsToParameters+0x172>
        {
            mlx90640->ksTo[i] = mlx90640->ksTo[i] - 256;
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	330a      	adds	r3, #10
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4413      	add	r3, r2
 8001b50:	3304      	adds	r3, #4
 8001b52:	edd3 7a00 	vldr	s15, [r3]
 8001b56:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001bc0 <ExtractKsToParameters+0x1c4>
 8001b5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	330a      	adds	r3, #10
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4413      	add	r3, r2
 8001b68:	3304      	adds	r3, #4
 8001b6a:	edc3 7a00 	vstr	s15, [r3]
        }
        mlx90640->ksTo[i] = mlx90640->ksTo[i] / KsToScale;
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	330a      	adds	r3, #10
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	4413      	add	r3, r2
 8001b78:	3304      	adds	r3, #4
 8001b7a:	edd3 6a00 	vldr	s13, [r3]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	ee07 3a90 	vmov	s15, r3
 8001b84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	330a      	adds	r3, #10
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	3304      	adds	r3, #4
 8001b98:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 0; i < 4; i++)
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	2b03      	cmp	r3, #3
 8001ba6:	ddbf      	ble.n	8001b28 <ExtractKsToParameters+0x12c>
    } 
    
    mlx90640->ksTo[4] = -0.0002;
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	4a06      	ldr	r2, [pc, #24]	; (8001bc4 <ExtractKsToParameters+0x1c8>)
 8001bac:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001bae:	bf00      	nop
 8001bb0:	371c      	adds	r7, #28
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	42fe0000 	.word	0x42fe0000
 8001bc0:	43800000 	.word	0x43800000
 8001bc4:	b951b717 	.word	0xb951b717

08001bc8 <ExtractAlphaParameters>:

//------------------------------------------------------------------------------

void ExtractAlphaParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	ed2d 8b02 	vpush	{d8}
 8001bce:	f5ad 6d52 	sub.w	sp, sp, #3360	; 0xd20
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001bd8:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8001bdc:	6018      	str	r0, [r3, #0]
 8001bde:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001be2:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 8001be6:	6019      	str	r1, [r3, #0]
    int accRow[24];
    int accColumn[32];
    int p = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
    uint8_t accRemScale;
    float alphaTemp[768];
    float temp;
    

    accRemScale = eeData[32] & 0x000F;
 8001bee:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001bf2:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	3340      	adds	r3, #64	; 0x40
 8001bfa:	881b      	ldrh	r3, [r3, #0]
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	f887 3cf3 	strb.w	r3, [r7, #3315]	; 0xcf3
    accColumnScale = (eeData[32] & 0x00F0) >> 4;
 8001c06:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001c0a:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	3340      	adds	r3, #64	; 0x40
 8001c12:	881b      	ldrh	r3, [r3, #0]
 8001c14:	111b      	asrs	r3, r3, #4
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	f003 030f 	and.w	r3, r3, #15
 8001c1c:	f887 3cf2 	strb.w	r3, [r7, #3314]	; 0xcf2
    accRowScale = (eeData[32] & 0x0F00) >> 8;
 8001c20:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001c24:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	3340      	adds	r3, #64	; 0x40
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	121b      	asrs	r3, r3, #8
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	f003 030f 	and.w	r3, r3, #15
 8001c36:	f887 3cf1 	strb.w	r3, [r7, #3313]	; 0xcf1
    alphaScale = ((eeData[32] & 0xF000) >> 12) + 30;
 8001c3a:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001c3e:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	3340      	adds	r3, #64	; 0x40
 8001c46:	881b      	ldrh	r3, [r3, #0]
 8001c48:	0b1b      	lsrs	r3, r3, #12
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	331e      	adds	r3, #30
 8001c50:	f887 3d1f 	strb.w	r3, [r7, #3359]	; 0xd1f
    alphaRef = eeData[33];
 8001c54:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001c58:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	3342      	adds	r3, #66	; 0x42
 8001c60:	881b      	ldrh	r3, [r3, #0]
 8001c62:	f8c7 3cec 	str.w	r3, [r7, #3308]	; 0xcec
    
    for(int i = 0; i < 6; i++)
 8001c66:	2300      	movs	r3, #0
 8001c68:	f8c7 3d14 	str.w	r3, [r7, #3348]	; 0xd14
 8001c6c:	e062      	b.n	8001d34 <ExtractAlphaParameters+0x16c>
    {
        p = i * 4;
 8001c6e:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
        accRow[p + 0] = (eeData[34 + i] & 0x000F);
 8001c78:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8001c7c:	3322      	adds	r3, #34	; 0x22
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8001c84:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8001c88:	6812      	ldr	r2, [r2, #0]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	881b      	ldrh	r3, [r3, #0]
 8001c8e:	f003 020f 	and.w	r2, r3, #15
 8001c92:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8001c9c:	443b      	add	r3, r7
 8001c9e:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 1] = (eeData[34 + i] & 0x00F0) >> 4;
 8001ca2:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8001ca6:	3322      	adds	r3, #34	; 0x22
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8001cae:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8001cb2:	6812      	ldr	r2, [r2, #0]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	111a      	asrs	r2, r3, #4
 8001cba:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	f002 020f 	and.w	r2, r2, #15
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8001cca:	443b      	add	r3, r7
 8001ccc:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 2] = (eeData[34 + i] & 0x0F00) >> 8;
 8001cd0:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8001cd4:	3322      	adds	r3, #34	; 0x22
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8001cdc:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8001ce0:	6812      	ldr	r2, [r2, #0]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	881b      	ldrh	r3, [r3, #0]
 8001ce6:	121a      	asrs	r2, r3, #8
 8001ce8:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001cec:	3302      	adds	r3, #2
 8001cee:	f002 020f 	and.w	r2, r2, #15
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8001cf8:	443b      	add	r3, r7
 8001cfa:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 3] = (eeData[34 + i] & 0xF000) >> 12;
 8001cfe:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8001d02:	3322      	adds	r3, #34	; 0x22
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8001d0a:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8001d0e:	6812      	ldr	r2, [r2, #0]
 8001d10:	4413      	add	r3, r2
 8001d12:	881b      	ldrh	r3, [r3, #0]
 8001d14:	0b1b      	lsrs	r3, r3, #12
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001d1c:	3303      	adds	r3, #3
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8001d24:	443b      	add	r3, r7
 8001d26:	f843 2c94 	str.w	r2, [r3, #-148]
    for(int i = 0; i < 6; i++)
 8001d2a:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8001d2e:	3301      	adds	r3, #1
 8001d30:	f8c7 3d14 	str.w	r3, [r7, #3348]	; 0xd14
 8001d34:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8001d38:	2b05      	cmp	r3, #5
 8001d3a:	dd98      	ble.n	8001c6e <ExtractAlphaParameters+0xa6>
    }
    
    for(int i = 0; i < 24; i++)
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f8c7 3d10 	str.w	r3, [r7, #3344]	; 0xd10
 8001d42:	e020      	b.n	8001d86 <ExtractAlphaParameters+0x1be>
    {
        if (accRow[i] > 7)
 8001d44:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8001d4e:	443b      	add	r3, r7
 8001d50:	f853 3c94 	ldr.w	r3, [r3, #-148]
 8001d54:	2b07      	cmp	r3, #7
 8001d56:	dd11      	ble.n	8001d7c <ExtractAlphaParameters+0x1b4>
        {
            accRow[i] = accRow[i] - 16;
 8001d58:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8001d62:	443b      	add	r3, r7
 8001d64:	f853 3c94 	ldr.w	r3, [r3, #-148]
 8001d68:	f1a3 0210 	sub.w	r2, r3, #16
 8001d6c:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8001d76:	443b      	add	r3, r7
 8001d78:	f843 2c94 	str.w	r2, [r3, #-148]
    for(int i = 0; i < 24; i++)
 8001d7c:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8001d80:	3301      	adds	r3, #1
 8001d82:	f8c7 3d10 	str.w	r3, [r7, #3344]	; 0xd10
 8001d86:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8001d8a:	2b17      	cmp	r3, #23
 8001d8c:	ddda      	ble.n	8001d44 <ExtractAlphaParameters+0x17c>
        }
    }
    
    for(int i = 0; i < 8; i++)
 8001d8e:	2300      	movs	r3, #0
 8001d90:	f8c7 3d0c 	str.w	r3, [r7, #3340]	; 0xd0c
 8001d94:	e062      	b.n	8001e5c <ExtractAlphaParameters+0x294>
    {
        p = i * 4;
 8001d96:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
        accColumn[p + 0] = (eeData[40 + i] & 0x000F);
 8001da0:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8001da4:	3328      	adds	r3, #40	; 0x28
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8001dac:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8001db0:	6812      	ldr	r2, [r2, #0]
 8001db2:	4413      	add	r3, r2
 8001db4:	881b      	ldrh	r3, [r3, #0]
 8001db6:	f003 010f 	and.w	r1, r3, #15
 8001dba:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001dbe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001dc2:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	; 0xcf4
 8001dc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 1] = (eeData[40 + i] & 0x00F0) >> 4;
 8001dca:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8001dce:	3328      	adds	r3, #40	; 0x28
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8001dd6:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8001dda:	6812      	ldr	r2, [r2, #0]
 8001ddc:	4413      	add	r3, r2
 8001dde:	881b      	ldrh	r3, [r3, #0]
 8001de0:	111b      	asrs	r3, r3, #4
 8001de2:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	; 0xcf4
 8001de6:	3201      	adds	r2, #1
 8001de8:	f003 010f 	and.w	r1, r3, #15
 8001dec:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001df0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001df4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 2] = (eeData[40 + i] & 0x0F00) >> 8;
 8001df8:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8001dfc:	3328      	adds	r3, #40	; 0x28
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8001e04:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8001e08:	6812      	ldr	r2, [r2, #0]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	881b      	ldrh	r3, [r3, #0]
 8001e0e:	121b      	asrs	r3, r3, #8
 8001e10:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	; 0xcf4
 8001e14:	3202      	adds	r2, #2
 8001e16:	f003 010f 	and.w	r1, r3, #15
 8001e1a:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001e1e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001e22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 3] = (eeData[40 + i] & 0xF000) >> 12;
 8001e26:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8001e2a:	3328      	adds	r3, #40	; 0x28
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8001e32:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8001e36:	6812      	ldr	r2, [r2, #0]
 8001e38:	4413      	add	r3, r2
 8001e3a:	881b      	ldrh	r3, [r3, #0]
 8001e3c:	0b1b      	lsrs	r3, r3, #12
 8001e3e:	b299      	uxth	r1, r3
 8001e40:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001e44:	1cda      	adds	r2, r3, #3
 8001e46:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001e4a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001e4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 8; i++)
 8001e52:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8001e56:	3301      	adds	r3, #1
 8001e58:	f8c7 3d0c 	str.w	r3, [r7, #3340]	; 0xd0c
 8001e5c:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8001e60:	2b07      	cmp	r3, #7
 8001e62:	dd98      	ble.n	8001d96 <ExtractAlphaParameters+0x1ce>
    }
    
    for(int i = 0; i < 32; i ++)
 8001e64:	2300      	movs	r3, #0
 8001e66:	f8c7 3d08 	str.w	r3, [r7, #3336]	; 0xd08
 8001e6a:	e020      	b.n	8001eae <ExtractAlphaParameters+0x2e6>
    {
        if (accColumn[i] > 7)
 8001e6c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001e70:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001e74:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	; 0xd08
 8001e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e7c:	2b07      	cmp	r3, #7
 8001e7e:	dd11      	ble.n	8001ea4 <ExtractAlphaParameters+0x2dc>
        {
            accColumn[i] = accColumn[i] - 16;
 8001e80:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001e84:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001e88:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	; 0xd08
 8001e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e90:	f1a3 0110 	sub.w	r1, r3, #16
 8001e94:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001e98:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001e9c:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	; 0xd08
 8001ea0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 32; i ++)
 8001ea4:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	f8c7 3d08 	str.w	r3, [r7, #3336]	; 0xd08
 8001eae:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 8001eb2:	2b1f      	cmp	r3, #31
 8001eb4:	ddda      	ble.n	8001e6c <ExtractAlphaParameters+0x2a4>
        }
    }

    for(int i = 0; i < 24; i++)
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	f8c7 3d04 	str.w	r3, [r7, #3332]	; 0xd04
 8001ebc:	e12a      	b.n	8002114 <ExtractAlphaParameters+0x54c>
    {
        for(int j = 0; j < 32; j ++)
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f8c7 3d00 	str.w	r3, [r7, #3328]	; 0xd00
 8001ec4:	e11c      	b.n	8002100 <ExtractAlphaParameters+0x538>
        {
            p = 32 * i +j;
 8001ec6:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8001eca:	015b      	lsls	r3, r3, #5
 8001ecc:	f8d7 2d00 	ldr.w	r2, [r7, #3328]	; 0xd00
 8001ed0:	4413      	add	r3, r2
 8001ed2:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
            alphaTemp[p] = (eeData[64 + p] & 0x03F0) >> 4;
 8001ed6:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001eda:	3340      	adds	r3, #64	; 0x40
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8001ee2:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8001ee6:	6812      	ldr	r2, [r2, #0]
 8001ee8:	4413      	add	r3, r2
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	111b      	asrs	r3, r3, #4
 8001eee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ef2:	ee07 3a90 	vmov	s15, r3
 8001ef6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001efa:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001efe:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001f02:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	edc3 7a00 	vstr	s15, [r3]
            if (alphaTemp[p] > 31)
 8001f0e:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001f12:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001f16:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	4413      	add	r3, r2
 8001f1e:	edd3 7a00 	vldr	s15, [r3]
 8001f22:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8001f26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f2e:	dd17      	ble.n	8001f60 <ExtractAlphaParameters+0x398>
            {
                alphaTemp[p] = alphaTemp[p] - 64;
 8001f30:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001f34:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001f38:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	edd3 7a00 	vldr	s15, [r3]
 8001f44:	ed9f 7acc 	vldr	s14, [pc, #816]	; 8002278 <ExtractAlphaParameters+0x6b0>
 8001f48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f4c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001f50:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001f54:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	edc3 7a00 	vstr	s15, [r3]
            }
            alphaTemp[p] = alphaTemp[p]*(1 << accRemScale);
 8001f60:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001f64:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001f68:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4413      	add	r3, r2
 8001f70:	ed93 7a00 	vldr	s14, [r3]
 8001f74:	f897 3cf3 	ldrb.w	r3, [r7, #3315]	; 0xcf3
 8001f78:	2201      	movs	r2, #1
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	ee07 3a90 	vmov	s15, r3
 8001f82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f8a:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001f8e:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001f92:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = (alphaRef + (accRow[i] << accRowScale) + (accColumn[j] << accColumnScale) + alphaTemp[p]);
 8001f9e:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8001fa8:	443b      	add	r3, r7
 8001faa:	f853 2c94 	ldr.w	r2, [r3, #-148]
 8001fae:	f897 3cf1 	ldrb.w	r3, [r7, #3313]	; 0xcf1
 8001fb2:	409a      	lsls	r2, r3
 8001fb4:	f8d7 3cec 	ldr.w	r3, [r7, #3308]	; 0xcec
 8001fb8:	441a      	add	r2, r3
 8001fba:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001fbe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001fc2:	f8d7 1d00 	ldr.w	r1, [r7, #3328]	; 0xd00
 8001fc6:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001fca:	f897 3cf2 	ldrb.w	r3, [r7, #3314]	; 0xcf2
 8001fce:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	ee07 3a90 	vmov	s15, r3
 8001fd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fdc:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001fe0:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001fe4:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	edd3 7a00 	vldr	s15, [r3]
 8001ff0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ff4:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8001ff8:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8001ffc:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	4413      	add	r3, r2
 8002004:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = alphaTemp[p] / pow(2,(double)alphaScale);
 8002008:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800200c:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8002010:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	edd3 7a00 	vldr	s15, [r3]
 800201c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002020:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	; 0xd1f
 8002024:	ee07 3a90 	vmov	s15, r3
 8002028:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800202c:	eeb0 1b47 	vmov.f64	d1, d7
 8002030:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8002034:	f00f fef4 	bl	8011e20 <pow>
 8002038:	eeb0 6b40 	vmov.f64	d6, d0
 800203c:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8002040:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002044:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002048:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 800204c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4413      	add	r3, r2
 8002054:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = alphaTemp[p] - mlx90640->tgc * (mlx90640->cpAlpha[0] + mlx90640->cpAlpha[1])/2;
 8002058:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800205c:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8002060:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	ed93 7a00 	vldr	s14, [r3]
 800206c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002070:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	edd3 6a06 	vldr	s13, [r3, #24]
 800207a:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800207e:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002088:	ed93 6a94 	vldr	s12, [r3, #592]	; 0x250
 800208c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002090:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800209a:	edd3 7a95 	vldr	s15, [r3, #596]	; 0x254
 800209e:	ee76 7a27 	vadd.f32	s15, s12, s15
 80020a2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020a6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80020aa:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80020ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020b2:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80020b6:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80020ba:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = SCALEALPHA/alphaTemp[p];
 80020c6:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80020ca:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80020ce:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4413      	add	r3, r2
 80020d6:	ed93 7a00 	vldr	s14, [r3]
 80020da:	eddf 6a68 	vldr	s13, [pc, #416]	; 800227c <ExtractAlphaParameters+0x6b4>
 80020de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020e2:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80020e6:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80020ea:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < 32; j ++)
 80020f6:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 80020fa:	3301      	adds	r3, #1
 80020fc:	f8c7 3d00 	str.w	r3, [r7, #3328]	; 0xd00
 8002100:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8002104:	2b1f      	cmp	r3, #31
 8002106:	f77f aede 	ble.w	8001ec6 <ExtractAlphaParameters+0x2fe>
    for(int i = 0; i < 24; i++)
 800210a:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 800210e:	3301      	adds	r3, #1
 8002110:	f8c7 3d04 	str.w	r3, [r7, #3332]	; 0xd04
 8002114:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8002118:	2b17      	cmp	r3, #23
 800211a:	f77f aed0 	ble.w	8001ebe <ExtractAlphaParameters+0x2f6>
        }
    }
    
    temp = alphaTemp[0];
 800211e:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002122:	f6a3 5314 	subw	r3, r3, #3348	; 0xd14
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 800212c:	6013      	str	r3, [r2, #0]
    for(int i = 1; i < 768; i++)
 800212e:	2301      	movs	r3, #1
 8002130:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 8002134:	e023      	b.n	800217e <ExtractAlphaParameters+0x5b6>
    {
        if (alphaTemp[i] > temp)
 8002136:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800213a:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 800213e:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	edd3 7a00 	vldr	s15, [r3]
 800214a:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 800214e:	ed93 7a00 	vldr	s14, [r3]
 8002152:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800215a:	d50b      	bpl.n	8002174 <ExtractAlphaParameters+0x5ac>
        {
            temp = alphaTemp[i];
 800215c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002160:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8002164:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 8002172:	6013      	str	r3, [r2, #0]
    for(int i = 1; i < 768; i++)
 8002174:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8002178:	3301      	adds	r3, #1
 800217a:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 800217e:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8002182:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002186:	dbd6      	blt.n	8002136 <ExtractAlphaParameters+0x56e>
        }
    }
    
    alphaScale = 0;
 8002188:	2300      	movs	r3, #0
 800218a:	f887 3d1f 	strb.w	r3, [r7, #3359]	; 0xd1f
    while(temp < 32768)
 800218e:	e00e      	b.n	80021ae <ExtractAlphaParameters+0x5e6>
    {
        temp = temp*2;
 8002190:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 8002194:	edd3 7a00 	vldr	s15, [r3]
 8002198:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800219c:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 80021a0:	edc3 7a00 	vstr	s15, [r3]
        alphaScale = alphaScale + 1;
 80021a4:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	; 0xd1f
 80021a8:	3301      	adds	r3, #1
 80021aa:	f887 3d1f 	strb.w	r3, [r7, #3359]	; 0xd1f
    while(temp < 32768)
 80021ae:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 80021b2:	edd3 7a00 	vldr	s15, [r3]
 80021b6:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8002280 <ExtractAlphaParameters+0x6b8>
 80021ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c2:	d4e5      	bmi.n	8002190 <ExtractAlphaParameters+0x5c8>
    } 
    
    for(int i = 0; i < 768; i++)
 80021c4:	2300      	movs	r3, #0
 80021c6:	f8c7 3cf8 	str.w	r3, [r7, #3320]	; 0xcf8
 80021ca:	e03f      	b.n	800224c <ExtractAlphaParameters+0x684>
    {
        temp = alphaTemp[i] * pow(2,(double)alphaScale);        
 80021cc:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80021d0:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80021d4:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	edd3 7a00 	vldr	s15, [r3]
 80021e0:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80021e4:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	; 0xd1f
 80021e8:	ee07 3a90 	vmov	s15, r3
 80021ec:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80021f0:	eeb0 1b47 	vmov.f64	d1, d7
 80021f4:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80021f8:	f00f fe12 	bl	8011e20 <pow>
 80021fc:	eeb0 7b40 	vmov.f64	d7, d0
 8002200:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002204:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002208:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 800220c:	edc3 7a00 	vstr	s15, [r3]
        mlx90640->alpha[i] = (temp + 0.5f);        
 8002210:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 8002214:	edd3 7a00 	vldr	s15, [r3]
 8002218:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800221c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002220:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002224:	ee17 3a90 	vmov	r3, s15
 8002228:	b299      	uxth	r1, r3
 800222a:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800222e:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 8002238:	3324      	adds	r3, #36	; 0x24
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	4413      	add	r3, r2
 800223e:	460a      	mov	r2, r1
 8002240:	805a      	strh	r2, [r3, #2]
    for(int i = 0; i < 768; i++)
 8002242:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 8002246:	3301      	adds	r3, #1
 8002248:	f8c7 3cf8 	str.w	r3, [r7, #3320]	; 0xcf8
 800224c:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 8002250:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002254:	dbba      	blt.n	80021cc <ExtractAlphaParameters+0x604>
        
    } 
    
    mlx90640->alphaScale = alphaScale;      
 8002256:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800225a:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f897 2d1f 	ldrb.w	r2, [r7, #3359]	; 0xd1f
 8002264:	f883 264a 	strb.w	r2, [r3, #1610]	; 0x64a
   
}
 8002268:	bf00      	nop
 800226a:	f507 6752 	add.w	r7, r7, #3360	; 0xd20
 800226e:	46bd      	mov	sp, r7
 8002270:	ecbd 8b02 	vpop	{d8}
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	42800000 	.word	0x42800000
 800227c:	358637bd 	.word	0x358637bd
 8002280:	47000000 	.word	0x47000000

08002284 <ExtractOffsetParameters>:

//------------------------------------------------------------------------------

void ExtractOffsetParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002284:	b480      	push	{r7}
 8002286:	b0c5      	sub	sp, #276	; 0x114
 8002288:	af00      	add	r7, sp, #0
 800228a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800228e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002292:	6018      	str	r0, [r3, #0]
 8002294:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002298:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800229c:	6019      	str	r1, [r3, #0]
    int occRow[24];
    int occColumn[32];
    int p = 0;
 800229e:	2300      	movs	r3, #0
 80022a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    uint8_t occRowScale;
    uint8_t occColumnScale;
    uint8_t occRemScale;
    

    occRemScale = (eeData[16] & 0x000F);
 80022a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80022a8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	3320      	adds	r3, #32
 80022b0:	881b      	ldrh	r3, [r3, #0]
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	f003 030f 	and.w	r3, r3, #15
 80022b8:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
    occColumnScale = (eeData[16] & 0x00F0) >> 4;
 80022bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80022c0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	3320      	adds	r3, #32
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	111b      	asrs	r3, r3, #4
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
    occRowScale = (eeData[16] & 0x0F00) >> 8;
 80022d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80022da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	3320      	adds	r3, #32
 80022e2:	881b      	ldrh	r3, [r3, #0]
 80022e4:	121b      	asrs	r3, r3, #8
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	f003 030f 	and.w	r3, r3, #15
 80022ec:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
    offsetRef = eeData[17];
 80022f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80022f4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	3322      	adds	r3, #34	; 0x22
 80022fc:	881b      	ldrh	r3, [r3, #0]
 80022fe:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
    if (offsetRef > 32767)
    {
        offsetRef = offsetRef - 65536;
    }
    
    for(int i = 0; i < 6; i++)
 8002302:	2300      	movs	r3, #0
 8002304:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002308:	e062      	b.n	80023d0 <ExtractOffsetParameters+0x14c>
    {
        p = i * 4;
 800230a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        occRow[p + 0] = (eeData[18 + i] & 0x000F);
 8002314:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002318:	3312      	adds	r3, #18
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002320:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002324:	6812      	ldr	r2, [r2, #0]
 8002326:	4413      	add	r3, r2
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	f003 020f 	and.w	r2, r3, #15
 800232e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002338:	443b      	add	r3, r7
 800233a:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 1] = (eeData[18 + i] & 0x00F0) >> 4;
 800233e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002342:	3312      	adds	r3, #18
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800234a:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800234e:	6812      	ldr	r2, [r2, #0]
 8002350:	4413      	add	r3, r2
 8002352:	881b      	ldrh	r3, [r3, #0]
 8002354:	111a      	asrs	r2, r3, #4
 8002356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800235a:	3301      	adds	r3, #1
 800235c:	f002 020f 	and.w	r2, r2, #15
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002366:	443b      	add	r3, r7
 8002368:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 2] = (eeData[18 + i] & 0x0F00) >> 8;
 800236c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002370:	3312      	adds	r3, #18
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002378:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800237c:	6812      	ldr	r2, [r2, #0]
 800237e:	4413      	add	r3, r2
 8002380:	881b      	ldrh	r3, [r3, #0]
 8002382:	121a      	asrs	r2, r3, #8
 8002384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002388:	3302      	adds	r3, #2
 800238a:	f002 020f 	and.w	r2, r2, #15
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002394:	443b      	add	r3, r7
 8002396:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 3] = (eeData[18 + i] & 0xF000) >> 12;
 800239a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800239e:	3312      	adds	r3, #18
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80023a6:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80023aa:	6812      	ldr	r2, [r2, #0]
 80023ac:	4413      	add	r3, r2
 80023ae:	881b      	ldrh	r3, [r3, #0]
 80023b0:	0b1b      	lsrs	r3, r3, #12
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023b8:	3303      	adds	r3, #3
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80023c0:	443b      	add	r3, r7
 80023c2:	f843 2c84 	str.w	r2, [r3, #-132]
    for(int i = 0; i < 6; i++)
 80023c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80023ca:	3301      	adds	r3, #1
 80023cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80023d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80023d4:	2b05      	cmp	r3, #5
 80023d6:	dd98      	ble.n	800230a <ExtractOffsetParameters+0x86>
    }
    
    for(int i = 0; i < 24; i++)
 80023d8:	2300      	movs	r3, #0
 80023da:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80023de:	e020      	b.n	8002422 <ExtractOffsetParameters+0x19e>
    {
        if (occRow[i] > 7)
 80023e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80023ea:	443b      	add	r3, r7
 80023ec:	f853 3c84 	ldr.w	r3, [r3, #-132]
 80023f0:	2b07      	cmp	r3, #7
 80023f2:	dd11      	ble.n	8002418 <ExtractOffsetParameters+0x194>
        {
            occRow[i] = occRow[i] - 16;
 80023f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80023fe:	443b      	add	r3, r7
 8002400:	f853 3c84 	ldr.w	r3, [r3, #-132]
 8002404:	f1a3 0210 	sub.w	r2, r3, #16
 8002408:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002412:	443b      	add	r3, r7
 8002414:	f843 2c84 	str.w	r2, [r3, #-132]
    for(int i = 0; i < 24; i++)
 8002418:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800241c:	3301      	adds	r3, #1
 800241e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002422:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002426:	2b17      	cmp	r3, #23
 8002428:	ddda      	ble.n	80023e0 <ExtractOffsetParameters+0x15c>
        }
    }
    
    for(int i = 0; i < 8; i++)
 800242a:	2300      	movs	r3, #0
 800242c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002430:	e062      	b.n	80024f8 <ExtractOffsetParameters+0x274>
    {
        p = i * 4;
 8002432:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        occColumn[p + 0] = (eeData[24 + i] & 0x000F);
 800243c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002440:	3318      	adds	r3, #24
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002448:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800244c:	6812      	ldr	r2, [r2, #0]
 800244e:	4413      	add	r3, r2
 8002450:	881b      	ldrh	r3, [r3, #0]
 8002452:	f003 010f 	and.w	r1, r3, #15
 8002456:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800245a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800245e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8002462:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 1] = (eeData[24 + i] & 0x00F0) >> 4;
 8002466:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800246a:	3318      	adds	r3, #24
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002472:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002476:	6812      	ldr	r2, [r2, #0]
 8002478:	4413      	add	r3, r2
 800247a:	881b      	ldrh	r3, [r3, #0]
 800247c:	111b      	asrs	r3, r3, #4
 800247e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8002482:	3201      	adds	r2, #1
 8002484:	f003 010f 	and.w	r1, r3, #15
 8002488:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800248c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 2] = (eeData[24 + i] & 0x0F00) >> 8;
 8002494:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002498:	3318      	adds	r3, #24
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80024a0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80024a4:	6812      	ldr	r2, [r2, #0]
 80024a6:	4413      	add	r3, r2
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	121b      	asrs	r3, r3, #8
 80024ac:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80024b0:	3202      	adds	r2, #2
 80024b2:	f003 010f 	and.w	r1, r3, #15
 80024b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80024ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80024be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 3] = (eeData[24 + i] & 0xF000) >> 12;
 80024c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80024c6:	3318      	adds	r3, #24
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80024ce:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80024d2:	6812      	ldr	r2, [r2, #0]
 80024d4:	4413      	add	r3, r2
 80024d6:	881b      	ldrh	r3, [r3, #0]
 80024d8:	0b1b      	lsrs	r3, r3, #12
 80024da:	b299      	uxth	r1, r3
 80024dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024e0:	1cda      	adds	r2, r3, #3
 80024e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80024e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80024ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 8; i++)
 80024ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80024f2:	3301      	adds	r3, #1
 80024f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80024f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80024fc:	2b07      	cmp	r3, #7
 80024fe:	dd98      	ble.n	8002432 <ExtractOffsetParameters+0x1ae>
    }
    
    for(int i = 0; i < 32; i ++)
 8002500:	2300      	movs	r3, #0
 8002502:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002506:	e020      	b.n	800254a <ExtractOffsetParameters+0x2c6>
    {
        if (occColumn[i] > 7)
 8002508:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800250c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002510:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8002514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002518:	2b07      	cmp	r3, #7
 800251a:	dd11      	ble.n	8002540 <ExtractOffsetParameters+0x2bc>
        {
            occColumn[i] = occColumn[i] - 16;
 800251c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002520:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002524:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8002528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800252c:	f1a3 0110 	sub.w	r1, r3, #16
 8002530:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002534:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002538:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800253c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 32; i ++)
 8002540:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002544:	3301      	adds	r3, #1
 8002546:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800254a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800254e:	2b1f      	cmp	r3, #31
 8002550:	ddda      	ble.n	8002508 <ExtractOffsetParameters+0x284>
        }
    }

    for(int i = 0; i < 24; i++)
 8002552:	2300      	movs	r3, #0
 8002554:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002558:	e0c0      	b.n	80026dc <ExtractOffsetParameters+0x458>
    {
        for(int j = 0; j < 32; j ++)
 800255a:	2300      	movs	r3, #0
 800255c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002560:	e0b2      	b.n	80026c8 <ExtractOffsetParameters+0x444>
        {
            p = 32 * i +j;
 8002562:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002566:	015b      	lsls	r3, r3, #5
 8002568:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800256c:	4413      	add	r3, r2
 800256e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
            mlx90640->offset[p] = (eeData[64 + p] & 0xFC00) >> 10;
 8002572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002576:	3340      	adds	r3, #64	; 0x40
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800257e:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002582:	6812      	ldr	r2, [r2, #0]
 8002584:	4413      	add	r3, r2
 8002586:	881b      	ldrh	r3, [r3, #0]
 8002588:	0a9b      	lsrs	r3, r3, #10
 800258a:	b29b      	uxth	r3, r3
 800258c:	b219      	sxth	r1, r3
 800258e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002592:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800259c:	f503 7349 	add.w	r3, r3, #804	; 0x324
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	4413      	add	r3, r2
 80025a4:	460a      	mov	r2, r1
 80025a6:	809a      	strh	r2, [r3, #4]
            if (mlx90640->offset[p] > 31)
 80025a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80025ac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025b6:	f503 7349 	add.w	r3, r3, #804	; 0x324
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	4413      	add	r3, r2
 80025be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80025c2:	2b1f      	cmp	r3, #31
 80025c4:	dd1d      	ble.n	8002602 <ExtractOffsetParameters+0x37e>
            {
                mlx90640->offset[p] = mlx90640->offset[p] - 64;
 80025c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80025ca:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025d4:	f503 7349 	add.w	r3, r3, #804	; 0x324
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	4413      	add	r3, r2
 80025dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	3b40      	subs	r3, #64	; 0x40
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	b219      	sxth	r1, r3
 80025e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80025ec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025f6:	f503 7349 	add.w	r3, r3, #804	; 0x324
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	4413      	add	r3, r2
 80025fe:	460a      	mov	r2, r1
 8002600:	809a      	strh	r2, [r3, #4]
            }
            mlx90640->offset[p] = mlx90640->offset[p]*(1 << occRemScale);
 8002602:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002606:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002610:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	4413      	add	r3, r2
 8002618:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800261c:	461a      	mov	r2, r3
 800261e:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	b219      	sxth	r1, r3
 8002628:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800262c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002636:	f503 7349 	add.w	r3, r3, #804	; 0x324
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	4413      	add	r3, r2
 800263e:	460a      	mov	r2, r1
 8002640:	809a      	strh	r2, [r3, #4]
            mlx90640->offset[p] = (offsetRef + (occRow[i] << occRowScale) + (occColumn[j] << occColumnScale) + mlx90640->offset[p]);
 8002642:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800264c:	443b      	add	r3, r7
 800264e:	f853 2c84 	ldr.w	r2, [r3, #-132]
 8002652:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	b29a      	uxth	r2, r3
 800265c:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8002660:	4413      	add	r3, r2
 8002662:	b29a      	uxth	r2, r3
 8002664:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002668:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800266c:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8002670:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002674:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 8002678:	fa01 f303 	lsl.w	r3, r1, r3
 800267c:	b29b      	uxth	r3, r3
 800267e:	4413      	add	r3, r2
 8002680:	b29a      	uxth	r2, r3
 8002682:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002686:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800268a:	6819      	ldr	r1, [r3, #0]
 800268c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002690:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	440b      	add	r3, r1
 8002698:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800269c:	b29b      	uxth	r3, r3
 800269e:	4413      	add	r3, r2
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	b219      	sxth	r1, r3
 80026a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80026a8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026b2:	f503 7349 	add.w	r3, r3, #804	; 0x324
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	4413      	add	r3, r2
 80026ba:	460a      	mov	r2, r1
 80026bc:	809a      	strh	r2, [r3, #4]
        for(int j = 0; j < 32; j ++)
 80026be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80026c2:	3301      	adds	r3, #1
 80026c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80026c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80026cc:	2b1f      	cmp	r3, #31
 80026ce:	f77f af48 	ble.w	8002562 <ExtractOffsetParameters+0x2de>
    for(int i = 0; i < 24; i++)
 80026d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026d6:	3301      	adds	r3, #1
 80026d8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80026dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026e0:	2b17      	cmp	r3, #23
 80026e2:	f77f af3a 	ble.w	800255a <ExtractOffsetParameters+0x2d6>
        }
    }
}
 80026e6:	bf00      	nop
 80026e8:	bf00      	nop
 80026ea:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
	...

080026f8 <ExtractKtaPixelParameters>:

//------------------------------------------------------------------------------

void ExtractKtaPixelParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	ed2d 8b02 	vpush	{d8}
 80026fe:	f6ad 4d38 	subw	sp, sp, #3128	; 0xc38
 8002702:	af00      	add	r7, sp, #0
 8002704:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002708:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 800270c:	6018      	str	r0, [r3, #0]
 800270e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002712:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8002716:	6019      	str	r1, [r3, #0]
    int p = 0;
 8002718:	2300      	movs	r3, #0
 800271a:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
    uint8_t ktaScale2;
    uint8_t split;
    float ktaTemp[768];
    float temp;
    
    KtaRoCo = (eeData[54] & 0xFF00) >> 8;
 800271e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002722:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	336c      	adds	r3, #108	; 0x6c
 800272a:	881b      	ldrh	r3, [r3, #0]
 800272c:	0a1b      	lsrs	r3, r3, #8
 800272e:	b29b      	uxth	r3, r3
 8002730:	f887 3c1b 	strb.w	r3, [r7, #3099]	; 0xc1b
    if (KtaRoCo > 127)
    {
        KtaRoCo = KtaRoCo - 256;
    }
    KtaRC[0] = KtaRoCo;
 8002734:	f897 3c1b 	ldrb.w	r3, [r7, #3099]	; 0xc1b
 8002738:	f887 3c10 	strb.w	r3, [r7, #3088]	; 0xc10
    
    KtaReCo = (eeData[54] & 0x00FF);
 800273c:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002740:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	336c      	adds	r3, #108	; 0x6c
 8002748:	881b      	ldrh	r3, [r3, #0]
 800274a:	f887 3c1a 	strb.w	r3, [r7, #3098]	; 0xc1a
    if (KtaReCo > 127)
    {
        KtaReCo = KtaReCo - 256;
    }
    KtaRC[2] = KtaReCo;
 800274e:	f897 3c1a 	ldrb.w	r3, [r7, #3098]	; 0xc1a
 8002752:	f887 3c12 	strb.w	r3, [r7, #3090]	; 0xc12
      
    KtaRoCe = (eeData[55] & 0xFF00) >> 8;
 8002756:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800275a:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	336e      	adds	r3, #110	; 0x6e
 8002762:	881b      	ldrh	r3, [r3, #0]
 8002764:	0a1b      	lsrs	r3, r3, #8
 8002766:	b29b      	uxth	r3, r3
 8002768:	f887 3c19 	strb.w	r3, [r7, #3097]	; 0xc19
    if (KtaRoCe > 127)
    {
        KtaRoCe = KtaRoCe - 256;
    }
    KtaRC[1] = KtaRoCe;
 800276c:	f897 3c19 	ldrb.w	r3, [r7, #3097]	; 0xc19
 8002770:	f887 3c11 	strb.w	r3, [r7, #3089]	; 0xc11
      
    KtaReCe = (eeData[55] & 0x00FF);
 8002774:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002778:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	336e      	adds	r3, #110	; 0x6e
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	f887 3c18 	strb.w	r3, [r7, #3096]	; 0xc18
    if (KtaReCe > 127)
    {
        KtaReCe = KtaReCe - 256;
    }
    KtaRC[3] = KtaReCe;
 8002786:	f897 3c18 	ldrb.w	r3, [r7, #3096]	; 0xc18
 800278a:	f887 3c13 	strb.w	r3, [r7, #3091]	; 0xc13
  
    ktaScale1 = ((eeData[56] & 0x00F0) >> 4) + 8;
 800278e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002792:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	3370      	adds	r3, #112	; 0x70
 800279a:	881b      	ldrh	r3, [r3, #0]
 800279c:	111b      	asrs	r3, r3, #4
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	f003 030f 	and.w	r3, r3, #15
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	3308      	adds	r3, #8
 80027a8:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
    ktaScale2 = (eeData[56] & 0x000F);
 80027ac:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80027b0:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	3370      	adds	r3, #112	; 0x70
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	f003 030f 	and.w	r3, r3, #15
 80027c0:	f887 3c17 	strb.w	r3, [r7, #3095]	; 0xc17

    for(int i = 0; i < 24; i++)
 80027c4:	2300      	movs	r3, #0
 80027c6:	f8c7 3c2c 	str.w	r3, [r7, #3116]	; 0xc2c
 80027ca:	e0e6      	b.n	800299a <ExtractKtaPixelParameters+0x2a2>
    {
        for(int j = 0; j < 32; j ++)
 80027cc:	2300      	movs	r3, #0
 80027ce:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
 80027d2:	e0d8      	b.n	8002986 <ExtractKtaPixelParameters+0x28e>
        {
            p = 32 * i +j;
 80027d4:	f8d7 3c2c 	ldr.w	r3, [r7, #3116]	; 0xc2c
 80027d8:	015b      	lsls	r3, r3, #5
 80027da:	f8d7 2c28 	ldr.w	r2, [r7, #3112]	; 0xc28
 80027de:	4413      	add	r3, r2
 80027e0:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
            split = 2*(p/32 - (p/64)*2) + p%2;
 80027e4:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	da00      	bge.n	80027ee <ExtractKtaPixelParameters+0xf6>
 80027ec:	331f      	adds	r3, #31
 80027ee:	115b      	asrs	r3, r3, #5
 80027f0:	461a      	mov	r2, r3
 80027f2:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	da00      	bge.n	80027fc <ExtractKtaPixelParameters+0x104>
 80027fa:	333f      	adds	r3, #63	; 0x3f
 80027fc:	119b      	asrs	r3, r3, #6
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	b2db      	uxtb	r3, r3
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	b2da      	uxtb	r2, r3
 8002808:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 800280c:	2b00      	cmp	r3, #0
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	bfb8      	it	lt
 8002814:	425b      	neglt	r3, r3
 8002816:	b2db      	uxtb	r3, r3
 8002818:	4413      	add	r3, r2
 800281a:	f887 3c16 	strb.w	r3, [r7, #3094]	; 0xc16
            ktaTemp[p] = (eeData[64 + p] & 0x000E) >> 1;
 800281e:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002822:	3340      	adds	r3, #64	; 0x40
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	f607 4238 	addw	r2, r7, #3128	; 0xc38
 800282a:	f6a2 422c 	subw	r2, r2, #3116	; 0xc2c
 800282e:	6812      	ldr	r2, [r2, #0]
 8002830:	4413      	add	r3, r2
 8002832:	881b      	ldrh	r3, [r3, #0]
 8002834:	105b      	asrs	r3, r3, #1
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	ee07 3a90 	vmov	s15, r3
 800283e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002842:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002846:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 800284a:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	edc3 7a00 	vstr	s15, [r3]
            if (ktaTemp[p] > 3)
 8002856:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800285a:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 800285e:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4413      	add	r3, r2
 8002866:	edd3 7a00 	vldr	s15, [r3]
 800286a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800286e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002876:	dd17      	ble.n	80028a8 <ExtractKtaPixelParameters+0x1b0>
            {
                ktaTemp[p] = ktaTemp[p] - 8;
 8002878:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800287c:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002880:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	4413      	add	r3, r2
 8002888:	edd3 7a00 	vldr	s15, [r3]
 800288c:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002890:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002894:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002898:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 800289c:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	edc3 7a00 	vstr	s15, [r3]
            }
            ktaTemp[p] = ktaTemp[p] * (1 << ktaScale2);
 80028a8:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80028ac:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80028b0:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	ed93 7a00 	vldr	s14, [r3]
 80028bc:	f897 3c17 	ldrb.w	r3, [r7, #3095]	; 0xc17
 80028c0:	2201      	movs	r2, #1
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	ee07 3a90 	vmov	s15, r3
 80028ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028d2:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80028d6:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80028da:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	edc3 7a00 	vstr	s15, [r3]
            ktaTemp[p] = KtaRC[split] + ktaTemp[p];
 80028e6:	f897 3c16 	ldrb.w	r3, [r7, #3094]	; 0xc16
 80028ea:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 80028ee:	f107 0208 	add.w	r2, r7, #8
 80028f2:	4413      	add	r3, r2
 80028f4:	f913 3c28 	ldrsb.w	r3, [r3, #-40]
 80028f8:	ee07 3a90 	vmov	s15, r3
 80028fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002900:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002904:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002908:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4413      	add	r3, r2
 8002910:	edd3 7a00 	vldr	s15, [r3]
 8002914:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002918:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800291c:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002920:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4413      	add	r3, r2
 8002928:	edc3 7a00 	vstr	s15, [r3]
            ktaTemp[p] = ktaTemp[p] / pow(2,(double)ktaScale1);
 800292c:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002930:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002934:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	4413      	add	r3, r2
 800293c:	edd3 7a00 	vldr	s15, [r3]
 8002940:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002944:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 8002948:	ee07 3a90 	vmov	s15, r3
 800294c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002950:	eeb0 1b47 	vmov.f64	d1, d7
 8002954:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8002958:	f00f fa62 	bl	8011e20 <pow>
 800295c:	eeb0 6b40 	vmov.f64	d6, d0
 8002960:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8002964:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002968:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800296c:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002970:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4413      	add	r3, r2
 8002978:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < 32; j ++)
 800297c:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 8002980:	3301      	adds	r3, #1
 8002982:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
 8002986:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 800298a:	2b1f      	cmp	r3, #31
 800298c:	f77f af22 	ble.w	80027d4 <ExtractKtaPixelParameters+0xdc>
    for(int i = 0; i < 24; i++)
 8002990:	f8d7 3c2c 	ldr.w	r3, [r7, #3116]	; 0xc2c
 8002994:	3301      	adds	r3, #1
 8002996:	f8c7 3c2c 	str.w	r3, [r7, #3116]	; 0xc2c
 800299a:	f8d7 3c2c 	ldr.w	r3, [r7, #3116]	; 0xc2c
 800299e:	2b17      	cmp	r3, #23
 80029a0:	f77f af14 	ble.w	80027cc <ExtractKtaPixelParameters+0xd4>
            //ktaTemp[p] = ktaTemp[p] * mlx90640->offset[p];
        }
    }
    
    temp = fabs(ktaTemp[0]);
 80029a4:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80029a8:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 80029ac:	edd3 7a00 	vldr	s15, [r3]
 80029b0:	eef0 7ae7 	vabs.f32	s15, s15
 80029b4:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80029b8:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < 768; i++)
 80029bc:	2301      	movs	r3, #1
 80029be:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 80029c2:	e029      	b.n	8002a18 <ExtractKtaPixelParameters+0x320>
    {
        if (fabs(ktaTemp[i]) > temp)
 80029c4:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80029c8:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80029cc:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	edd3 7a00 	vldr	s15, [r3]
 80029d8:	eef0 7ae7 	vabs.f32	s15, s15
 80029dc:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80029e0:	ed93 7a00 	vldr	s14, [r3]
 80029e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ec:	d50f      	bpl.n	8002a0e <ExtractKtaPixelParameters+0x316>
        {
            temp = fabs(ktaTemp[i]);
 80029ee:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80029f2:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80029f6:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	edd3 7a00 	vldr	s15, [r3]
 8002a02:	eef0 7ae7 	vabs.f32	s15, s15
 8002a06:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8002a0a:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < 768; i++)
 8002a0e:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 8002a12:	3301      	adds	r3, #1
 8002a14:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 8002a18:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 8002a1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a20:	dbd0      	blt.n	80029c4 <ExtractKtaPixelParameters+0x2cc>
        }
    }
    
    ktaScale1 = 0;
 8002a22:	2300      	movs	r3, #0
 8002a24:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
    while(temp < 64)
 8002a28:	e00e      	b.n	8002a48 <ExtractKtaPixelParameters+0x350>
    {
        temp = temp*2;
 8002a2a:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8002a2e:	edd3 7a00 	vldr	s15, [r3]
 8002a32:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002a36:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8002a3a:	edc3 7a00 	vstr	s15, [r3]
        ktaScale1 = ktaScale1 + 1;
 8002a3e:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 8002a42:	3301      	adds	r3, #1
 8002a44:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
    while(temp < 64)
 8002a48:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8002a4c:	edd3 7a00 	vldr	s15, [r3]
 8002a50:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8002b5c <ExtractKtaPixelParameters+0x464>
 8002a54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a5c:	d4e5      	bmi.n	8002a2a <ExtractKtaPixelParameters+0x332>
    }    
     
    for(int i = 0; i < 768; i++)
 8002a5e:	2300      	movs	r3, #0
 8002a60:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 8002a64:	e064      	b.n	8002b30 <ExtractKtaPixelParameters+0x438>
    {
        temp = ktaTemp[i] * pow(2,(double)ktaScale1);
 8002a66:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002a6a:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002a6e:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	edd3 7a00 	vldr	s15, [r3]
 8002a7a:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002a7e:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 8002a82:	ee07 3a90 	vmov	s15, r3
 8002a86:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002a8a:	eeb0 1b47 	vmov.f64	d1, d7
 8002a8e:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8002a92:	f00f f9c5 	bl	8011e20 <pow>
 8002a96:	eeb0 7b40 	vmov.f64	d7, d0
 8002a9a:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002a9e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002aa2:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8002aa6:	edc3 7a00 	vstr	s15, [r3]
        if (temp < 0)
 8002aaa:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8002aae:	edd3 7a00 	vldr	s15, [r3]
 8002ab2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aba:	d51a      	bpl.n	8002af2 <ExtractKtaPixelParameters+0x3fa>
        {
            mlx90640->kta[i] = (temp - 0.5f);
 8002abc:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8002ac0:	edd3 7a00 	vldr	s15, [r3]
 8002ac4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002ac8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002acc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ad0:	edc7 7a01 	vstr	s15, [r7, #4]
 8002ad4:	793b      	ldrb	r3, [r7, #4]
 8002ad6:	b259      	sxtb	r1, r3
 8002ad8:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002adc:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8002ae6:	4413      	add	r3, r2
 8002ae8:	f603 434c 	addw	r3, r3, #3148	; 0xc4c
 8002aec:	460a      	mov	r2, r1
 8002aee:	701a      	strb	r2, [r3, #0]
 8002af0:	e019      	b.n	8002b26 <ExtractKtaPixelParameters+0x42e>
        }
        else
        {
            mlx90640->kta[i] = (temp + 0.5f);
 8002af2:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8002af6:	edd3 7a00 	vldr	s15, [r3]
 8002afa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002afe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b06:	edc7 7a01 	vstr	s15, [r7, #4]
 8002b0a:	793b      	ldrb	r3, [r7, #4]
 8002b0c:	b259      	sxtb	r1, r3
 8002b0e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002b12:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8002b1c:	4413      	add	r3, r2
 8002b1e:	f603 434c 	addw	r3, r3, #3148	; 0xc4c
 8002b22:	460a      	mov	r2, r1
 8002b24:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 768; i++)
 8002b26:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 8002b30:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8002b34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b38:	db95      	blt.n	8002a66 <ExtractKtaPixelParameters+0x36e>
        }        
        
    } 
    
    mlx90640->ktaScale = ktaScale1;           
 8002b3a:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002b3e:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f897 2c37 	ldrb.w	r2, [r7, #3127]	; 0xc37
 8002b48:	f883 2f4c 	strb.w	r2, [r3, #3916]	; 0xf4c
}
 8002b4c:	bf00      	nop
 8002b4e:	f607 4738 	addw	r7, r7, #3128	; 0xc38
 8002b52:	46bd      	mov	sp, r7
 8002b54:	ecbd 8b02 	vpop	{d8}
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	42800000 	.word	0x42800000

08002b60 <ExtractKvPixelParameters>:


//------------------------------------------------------------------------------

void ExtractKvPixelParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	ed2d 8b02 	vpush	{d8}
 8002b66:	f6ad 4d38 	subw	sp, sp, #3128	; 0xc38
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002b70:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8002b74:	6018      	str	r0, [r3, #0]
 8002b76:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002b7a:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8002b7e:	6019      	str	r1, [r3, #0]
    int p = 0;
 8002b80:	2300      	movs	r3, #0
 8002b82:	f8c7 3c18 	str.w	r3, [r7, #3096]	; 0xc18
    uint8_t kvScale;
    uint8_t split;
    float kvTemp[768];
    float temp;

    KvRoCo = (eeData[52] & 0xF000) >> 12;
 8002b86:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002b8a:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	3368      	adds	r3, #104	; 0x68
 8002b92:	881b      	ldrh	r3, [r3, #0]
 8002b94:	0b1b      	lsrs	r3, r3, #12
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
    if (KvRoCo > 7)
 8002b9c:	f997 3c37 	ldrsb.w	r3, [r7, #3127]	; 0xc37
 8002ba0:	2b07      	cmp	r3, #7
 8002ba2:	dd05      	ble.n	8002bb0 <ExtractKvPixelParameters+0x50>
    {
        KvRoCo = KvRoCo - 16;
 8002ba4:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 8002ba8:	3b10      	subs	r3, #16
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
    }
    KvT[0] = KvRoCo;
 8002bb0:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 8002bb4:	f887 3c10 	strb.w	r3, [r7, #3088]	; 0xc10
    
    KvReCo = (eeData[52] & 0x0F00) >> 8;
 8002bb8:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002bbc:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	3368      	adds	r3, #104	; 0x68
 8002bc4:	881b      	ldrh	r3, [r3, #0]
 8002bc6:	121b      	asrs	r3, r3, #8
 8002bc8:	b25b      	sxtb	r3, r3
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	f887 3c35 	strb.w	r3, [r7, #3125]	; 0xc35
    if (KvReCo > 7)
 8002bd2:	f997 3c35 	ldrsb.w	r3, [r7, #3125]	; 0xc35
 8002bd6:	2b07      	cmp	r3, #7
 8002bd8:	dd05      	ble.n	8002be6 <ExtractKvPixelParameters+0x86>
    {
        KvReCo = KvReCo - 16;
 8002bda:	f897 3c35 	ldrb.w	r3, [r7, #3125]	; 0xc35
 8002bde:	3b10      	subs	r3, #16
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	f887 3c35 	strb.w	r3, [r7, #3125]	; 0xc35
    }
    KvT[2] = KvReCo;
 8002be6:	f897 3c35 	ldrb.w	r3, [r7, #3125]	; 0xc35
 8002bea:	f887 3c12 	strb.w	r3, [r7, #3090]	; 0xc12
      
    KvRoCe = (eeData[52] & 0x00F0) >> 4;
 8002bee:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002bf2:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	3368      	adds	r3, #104	; 0x68
 8002bfa:	881b      	ldrh	r3, [r3, #0]
 8002bfc:	111b      	asrs	r3, r3, #4
 8002bfe:	b25b      	sxtb	r3, r3
 8002c00:	f003 030f 	and.w	r3, r3, #15
 8002c04:	f887 3c36 	strb.w	r3, [r7, #3126]	; 0xc36
    if (KvRoCe > 7)
 8002c08:	f997 3c36 	ldrsb.w	r3, [r7, #3126]	; 0xc36
 8002c0c:	2b07      	cmp	r3, #7
 8002c0e:	dd05      	ble.n	8002c1c <ExtractKvPixelParameters+0xbc>
    {
        KvRoCe = KvRoCe - 16;
 8002c10:	f897 3c36 	ldrb.w	r3, [r7, #3126]	; 0xc36
 8002c14:	3b10      	subs	r3, #16
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	f887 3c36 	strb.w	r3, [r7, #3126]	; 0xc36
    }
    KvT[1] = KvRoCe;
 8002c1c:	f897 3c36 	ldrb.w	r3, [r7, #3126]	; 0xc36
 8002c20:	f887 3c11 	strb.w	r3, [r7, #3089]	; 0xc11
      
    KvReCe = (eeData[52] & 0x000F);
 8002c24:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002c28:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	3368      	adds	r3, #104	; 0x68
 8002c30:	881b      	ldrh	r3, [r3, #0]
 8002c32:	b25b      	sxtb	r3, r3
 8002c34:	f003 030f 	and.w	r3, r3, #15
 8002c38:	f887 3c34 	strb.w	r3, [r7, #3124]	; 0xc34
    if (KvReCe > 7)
 8002c3c:	f997 3c34 	ldrsb.w	r3, [r7, #3124]	; 0xc34
 8002c40:	2b07      	cmp	r3, #7
 8002c42:	dd05      	ble.n	8002c50 <ExtractKvPixelParameters+0xf0>
    {
        KvReCe = KvReCe - 16;
 8002c44:	f897 3c34 	ldrb.w	r3, [r7, #3124]	; 0xc34
 8002c48:	3b10      	subs	r3, #16
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	f887 3c34 	strb.w	r3, [r7, #3124]	; 0xc34
    }
    KvT[3] = KvReCe;
 8002c50:	f897 3c34 	ldrb.w	r3, [r7, #3124]	; 0xc34
 8002c54:	f887 3c13 	strb.w	r3, [r7, #3091]	; 0xc13
  
    kvScale = (eeData[56] & 0x0F00) >> 8;
 8002c58:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002c5c:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	3370      	adds	r3, #112	; 0x70
 8002c64:	881b      	ldrh	r3, [r3, #0]
 8002c66:	121b      	asrs	r3, r3, #8
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	f003 030f 	and.w	r3, r3, #15
 8002c6e:	f887 3c33 	strb.w	r3, [r7, #3123]	; 0xc33


    for(int i = 0; i < 24; i++)
 8002c72:	2300      	movs	r3, #0
 8002c74:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
 8002c78:	e075      	b.n	8002d66 <ExtractKvPixelParameters+0x206>
    {
        for(int j = 0; j < 32; j ++)
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 8002c80:	e068      	b.n	8002d54 <ExtractKvPixelParameters+0x1f4>
        {
            p = 32 * i +j;
 8002c82:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 8002c86:	015b      	lsls	r3, r3, #5
 8002c88:	f8d7 2c24 	ldr.w	r2, [r7, #3108]	; 0xc24
 8002c8c:	4413      	add	r3, r2
 8002c8e:	f8c7 3c18 	str.w	r3, [r7, #3096]	; 0xc18
            split = 2*(p/32 - (p/64)*2) + p%2;
 8002c92:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	da00      	bge.n	8002c9c <ExtractKvPixelParameters+0x13c>
 8002c9a:	331f      	adds	r3, #31
 8002c9c:	115b      	asrs	r3, r3, #5
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	da00      	bge.n	8002caa <ExtractKvPixelParameters+0x14a>
 8002ca8:	333f      	adds	r3, #63	; 0x3f
 8002caa:	119b      	asrs	r3, r3, #6
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	bfb8      	it	lt
 8002cc2:	425b      	neglt	r3, r3
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	f887 3c17 	strb.w	r3, [r7, #3095]	; 0xc17
            kvTemp[p] = KvT[split];
 8002ccc:	f897 3c17 	ldrb.w	r3, [r7, #3095]	; 0xc17
 8002cd0:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 8002cd4:	f107 0208 	add.w	r2, r7, #8
 8002cd8:	4413      	add	r3, r2
 8002cda:	f913 3c28 	ldrsb.w	r3, [r3, #-40]
 8002cde:	ee07 3a90 	vmov	s15, r3
 8002ce2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ce6:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002cea:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002cee:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4413      	add	r3, r2
 8002cf6:	edc3 7a00 	vstr	s15, [r3]
            kvTemp[p] = kvTemp[p] / pow(2,(double)kvScale);
 8002cfa:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002cfe:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002d02:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	edd3 7a00 	vldr	s15, [r3]
 8002d0e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002d12:	f897 3c33 	ldrb.w	r3, [r7, #3123]	; 0xc33
 8002d16:	ee07 3a90 	vmov	s15, r3
 8002d1a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002d1e:	eeb0 1b47 	vmov.f64	d1, d7
 8002d22:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8002d26:	f00f f87b 	bl	8011e20 <pow>
 8002d2a:	eeb0 6b40 	vmov.f64	d6, d0
 8002d2e:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8002d32:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002d36:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002d3a:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002d3e:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4413      	add	r3, r2
 8002d46:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < 32; j ++)
 8002d4a:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 8002d4e:	3301      	adds	r3, #1
 8002d50:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 8002d54:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 8002d58:	2b1f      	cmp	r3, #31
 8002d5a:	dd92      	ble.n	8002c82 <ExtractKvPixelParameters+0x122>
    for(int i = 0; i < 24; i++)
 8002d5c:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 8002d60:	3301      	adds	r3, #1
 8002d62:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
 8002d66:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 8002d6a:	2b17      	cmp	r3, #23
 8002d6c:	dd85      	ble.n	8002c7a <ExtractKvPixelParameters+0x11a>
            //kvTemp[p] = kvTemp[p] * mlx90640->offset[p];
        }
    }
    
    temp = fabs(kvTemp[0]);
 8002d6e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002d72:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8002d76:	edd3 7a00 	vldr	s15, [r3]
 8002d7a:	eef0 7ae7 	vabs.f32	s15, s15
 8002d7e:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8002d82:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < 768; i++)
 8002d86:	2301      	movs	r3, #1
 8002d88:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 8002d8c:	e029      	b.n	8002de2 <ExtractKvPixelParameters+0x282>
    {
        if (fabs(kvTemp[i]) > temp)
 8002d8e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002d92:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002d96:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	edd3 7a00 	vldr	s15, [r3]
 8002da2:	eef0 7ae7 	vabs.f32	s15, s15
 8002da6:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8002daa:	ed93 7a00 	vldr	s14, [r3]
 8002dae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002db6:	d50f      	bpl.n	8002dd8 <ExtractKvPixelParameters+0x278>
        {
            temp = fabs(kvTemp[i]);
 8002db8:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002dbc:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002dc0:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4413      	add	r3, r2
 8002dc8:	edd3 7a00 	vldr	s15, [r3]
 8002dcc:	eef0 7ae7 	vabs.f32	s15, s15
 8002dd0:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8002dd4:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < 768; i++)
 8002dd8:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8002ddc:	3301      	adds	r3, #1
 8002dde:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 8002de2:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8002de6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002dea:	dbd0      	blt.n	8002d8e <ExtractKvPixelParameters+0x22e>
        }
    }
    
    kvScale = 0;
 8002dec:	2300      	movs	r3, #0
 8002dee:	f887 3c33 	strb.w	r3, [r7, #3123]	; 0xc33
    while(temp < 64)
 8002df2:	e00e      	b.n	8002e12 <ExtractKvPixelParameters+0x2b2>
    {
        temp = temp*2;
 8002df4:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8002df8:	edd3 7a00 	vldr	s15, [r3]
 8002dfc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002e00:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8002e04:	edc3 7a00 	vstr	s15, [r3]
        kvScale = kvScale + 1;
 8002e08:	f897 3c33 	ldrb.w	r3, [r7, #3123]	; 0xc33
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	f887 3c33 	strb.w	r3, [r7, #3123]	; 0xc33
    while(temp < 64)
 8002e12:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8002e16:	edd3 7a00 	vldr	s15, [r3]
 8002e1a:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8002f2c <ExtractKvPixelParameters+0x3cc>
 8002e1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e26:	d4e5      	bmi.n	8002df4 <ExtractKvPixelParameters+0x294>
    }    
     
    for(int i = 0; i < 768; i++)
 8002e28:	2300      	movs	r3, #0
 8002e2a:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
 8002e2e:	e064      	b.n	8002efa <ExtractKvPixelParameters+0x39a>
    {
        temp = kvTemp[i] * pow(2,(double)kvScale);
 8002e30:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002e34:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8002e38:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	edd3 7a00 	vldr	s15, [r3]
 8002e44:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002e48:	f897 3c33 	ldrb.w	r3, [r7, #3123]	; 0xc33
 8002e4c:	ee07 3a90 	vmov	s15, r3
 8002e50:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002e54:	eeb0 1b47 	vmov.f64	d1, d7
 8002e58:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8002e5c:	f00e ffe0 	bl	8011e20 <pow>
 8002e60:	eeb0 7b40 	vmov.f64	d7, d0
 8002e64:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002e68:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002e6c:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8002e70:	edc3 7a00 	vstr	s15, [r3]
        if (temp < 0)
 8002e74:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8002e78:	edd3 7a00 	vldr	s15, [r3]
 8002e7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e84:	d51a      	bpl.n	8002ebc <ExtractKvPixelParameters+0x35c>
        {
            mlx90640->kv[i] = (temp - 0.5f);
 8002e86:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8002e8a:	edd3 7a00 	vldr	s15, [r3]
 8002e8e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002e92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e9a:	edc7 7a01 	vstr	s15, [r7, #4]
 8002e9e:	793b      	ldrb	r3, [r7, #4]
 8002ea0:	b259      	sxtb	r1, r3
 8002ea2:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002ea6:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f603 734d 	addw	r3, r3, #3917	; 0xf4d
 8002eb6:	460a      	mov	r2, r1
 8002eb8:	701a      	strb	r2, [r3, #0]
 8002eba:	e019      	b.n	8002ef0 <ExtractKvPixelParameters+0x390>
        }
        else
        {
            mlx90640->kv[i] = (temp + 0.5f);
 8002ebc:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8002ec0:	edd3 7a00 	vldr	s15, [r3]
 8002ec4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002ec8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ecc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ed0:	edc7 7a01 	vstr	s15, [r7, #4]
 8002ed4:	793b      	ldrb	r3, [r7, #4]
 8002ed6:	b259      	sxtb	r1, r3
 8002ed8:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002edc:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002ee6:	4413      	add	r3, r2
 8002ee8:	f603 734d 	addw	r3, r3, #3917	; 0xf4d
 8002eec:	460a      	mov	r2, r1
 8002eee:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 768; i++)
 8002ef0:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
 8002efa:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8002efe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f02:	db95      	blt.n	8002e30 <ExtractKvPixelParameters+0x2d0>
        }        
        
    } 
    
    mlx90640->kvScale = kvScale;        
 8002f04:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002f08:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f12:	461a      	mov	r2, r3
 8002f14:	f897 3c33 	ldrb.w	r3, [r7, #3123]	; 0xc33
 8002f18:	f882 324d 	strb.w	r3, [r2, #589]	; 0x24d
}
 8002f1c:	bf00      	nop
 8002f1e:	f607 4738 	addw	r7, r7, #3128	; 0xc38
 8002f22:	46bd      	mov	sp, r7
 8002f24:	ecbd 8b02 	vpop	{d8}
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	42800000 	.word	0x42800000

08002f30 <ExtractCPParameters>:

//------------------------------------------------------------------------------

void ExtractCPParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	ed2d 8b02 	vpush	{d8}
 8002f36:	b088      	sub	sp, #32
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
    float cpKta;
    uint8_t alphaScale;
    uint8_t ktaScale1;
    uint8_t kvScale;

    alphaScale = ((eeData[32] & 0xF000) >> 12) + 27;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	3340      	adds	r3, #64	; 0x40
 8002f42:	881b      	ldrh	r3, [r3, #0]
 8002f44:	0b1b      	lsrs	r3, r3, #12
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	331b      	adds	r3, #27
 8002f4c:	75fb      	strb	r3, [r7, #23]
    
    offsetSP[0] = (eeData[58] & 0x03FF);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	3374      	adds	r3, #116	; 0x74
 8002f52:	881b      	ldrh	r3, [r3, #0]
 8002f54:	b21b      	sxth	r3, r3
 8002f56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f5a:	b21b      	sxth	r3, r3
 8002f5c:	813b      	strh	r3, [r7, #8]
    if (offsetSP[0] > 511)
 8002f5e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002f62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f66:	db07      	blt.n	8002f78 <ExtractCPParameters+0x48>
    {
        offsetSP[0] = offsetSP[0] - 1024;
 8002f68:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	b21b      	sxth	r3, r3
 8002f76:	813b      	strh	r3, [r7, #8]
    }
    
    offsetSP[1] = (eeData[58] & 0xFC00) >> 10;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	3374      	adds	r3, #116	; 0x74
 8002f7c:	881b      	ldrh	r3, [r3, #0]
 8002f7e:	0a9b      	lsrs	r3, r3, #10
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	b21b      	sxth	r3, r3
 8002f84:	817b      	strh	r3, [r7, #10]
    if (offsetSP[1] > 31)
 8002f86:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002f8a:	2b1f      	cmp	r3, #31
 8002f8c:	dd06      	ble.n	8002f9c <ExtractCPParameters+0x6c>
    {
        offsetSP[1] = offsetSP[1] - 64;
 8002f8e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	3b40      	subs	r3, #64	; 0x40
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	b21b      	sxth	r3, r3
 8002f9a:	817b      	strh	r3, [r7, #10]
    }
    offsetSP[1] = offsetSP[1] + offsetSP[0]; 
 8002f9c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	4413      	add	r3, r2
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	b21b      	sxth	r3, r3
 8002fae:	817b      	strh	r3, [r7, #10]
    
    alphaSP[0] = (eeData[57] & 0x03FF);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	3372      	adds	r3, #114	; 0x72
 8002fb4:	881b      	ldrh	r3, [r3, #0]
 8002fb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fba:	ee07 3a90 	vmov	s15, r3
 8002fbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fc2:	edc7 7a03 	vstr	s15, [r7, #12]
    if (alphaSP[0] > 511)
 8002fc6:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fca:	ed9f 7a75 	vldr	s14, [pc, #468]	; 80031a0 <ExtractCPParameters+0x270>
 8002fce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fd6:	dd07      	ble.n	8002fe8 <ExtractCPParameters+0xb8>
    {
        alphaSP[0] = alphaSP[0] - 1024;
 8002fd8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fdc:	ed9f 7a71 	vldr	s14, [pc, #452]	; 80031a4 <ExtractCPParameters+0x274>
 8002fe0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002fe4:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    alphaSP[0] = alphaSP[0] /  pow(2,(double)alphaScale);
 8002fe8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fec:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002ff0:	7dfb      	ldrb	r3, [r7, #23]
 8002ff2:	ee07 3a90 	vmov	s15, r3
 8002ff6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002ffa:	eeb0 1b47 	vmov.f64	d1, d7
 8002ffe:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8003002:	f00e ff0d 	bl	8011e20 <pow>
 8003006:	eeb0 6b40 	vmov.f64	d6, d0
 800300a:	ee88 7b06 	vdiv.f64	d7, d8, d6
 800300e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003012:	edc7 7a03 	vstr	s15, [r7, #12]
    
    alphaSP[1] = (eeData[57] & 0xFC00) >> 10;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	3372      	adds	r3, #114	; 0x72
 800301a:	881b      	ldrh	r3, [r3, #0]
 800301c:	0a9b      	lsrs	r3, r3, #10
 800301e:	b29b      	uxth	r3, r3
 8003020:	ee07 3a90 	vmov	s15, r3
 8003024:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003028:	edc7 7a04 	vstr	s15, [r7, #16]
    if (alphaSP[1] > 31)
 800302c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003030:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8003034:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800303c:	dd07      	ble.n	800304e <ExtractCPParameters+0x11e>
    {
        alphaSP[1] = alphaSP[1] - 64;
 800303e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003042:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80031a8 <ExtractCPParameters+0x278>
 8003046:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800304a:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    alphaSP[1] = (1 + alphaSP[1]/128) * alphaSP[0];
 800304e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003052:	eddf 6a56 	vldr	s13, [pc, #344]	; 80031ac <ExtractCPParameters+0x27c>
 8003056:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800305a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800305e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003062:	edd7 7a03 	vldr	s15, [r7, #12]
 8003066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800306a:	edc7 7a04 	vstr	s15, [r7, #16]
    
    cpKta = (eeData[59] & 0x00FF);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	3376      	adds	r3, #118	; 0x76
 8003072:	881b      	ldrh	r3, [r3, #0]
 8003074:	b2db      	uxtb	r3, r3
 8003076:	ee07 3a90 	vmov	s15, r3
 800307a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800307e:	edc7 7a06 	vstr	s15, [r7, #24]
    if (cpKta > 127)
 8003082:	edd7 7a06 	vldr	s15, [r7, #24]
 8003086:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80031b0 <ExtractCPParameters+0x280>
 800308a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800308e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003092:	dd07      	ble.n	80030a4 <ExtractCPParameters+0x174>
    {
        cpKta = cpKta - 256;
 8003094:	edd7 7a06 	vldr	s15, [r7, #24]
 8003098:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80031b4 <ExtractCPParameters+0x284>
 800309c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80030a0:	edc7 7a06 	vstr	s15, [r7, #24]
    }
    ktaScale1 = ((eeData[56] & 0x00F0) >> 4) + 8;    
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3370      	adds	r3, #112	; 0x70
 80030a8:	881b      	ldrh	r3, [r3, #0]
 80030aa:	111b      	asrs	r3, r3, #4
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	3308      	adds	r3, #8
 80030b6:	75bb      	strb	r3, [r7, #22]
    mlx90640->cpKta = cpKta / pow(2,(double)ktaScale1);
 80030b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80030bc:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80030c0:	7dbb      	ldrb	r3, [r7, #22]
 80030c2:	ee07 3a90 	vmov	s15, r3
 80030c6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80030ca:	eeb0 1b47 	vmov.f64	d1, d7
 80030ce:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80030d2:	f00e fea5 	bl	8011e20 <pow>
 80030d6:	eeb0 6b40 	vmov.f64	d6, d0
 80030da:	ee88 7b06 	vdiv.f64	d7, d8, d6
 80030de:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	edc3 7a08 	vstr	s15, [r3, #32]
    
    cpKv = (eeData[59] & 0xFF00) >> 8;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3376      	adds	r3, #118	; 0x76
 80030ec:	881b      	ldrh	r3, [r3, #0]
 80030ee:	0a1b      	lsrs	r3, r3, #8
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	ee07 3a90 	vmov	s15, r3
 80030f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030fa:	edc7 7a07 	vstr	s15, [r7, #28]
    if (cpKv > 127)
 80030fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8003102:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80031b0 <ExtractCPParameters+0x280>
 8003106:	eef4 7ac7 	vcmpe.f32	s15, s14
 800310a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800310e:	dd07      	ble.n	8003120 <ExtractCPParameters+0x1f0>
    {
        cpKv = cpKv - 256;
 8003110:	edd7 7a07 	vldr	s15, [r7, #28]
 8003114:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80031b4 <ExtractCPParameters+0x284>
 8003118:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800311c:	edc7 7a07 	vstr	s15, [r7, #28]
    }
    kvScale = (eeData[56] & 0x0F00) >> 8;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3370      	adds	r3, #112	; 0x70
 8003124:	881b      	ldrh	r3, [r3, #0]
 8003126:	121b      	asrs	r3, r3, #8
 8003128:	b2db      	uxtb	r3, r3
 800312a:	f003 030f 	and.w	r3, r3, #15
 800312e:	757b      	strb	r3, [r7, #21]
    mlx90640->cpKv = cpKv / pow(2,(double)kvScale);
 8003130:	edd7 7a07 	vldr	s15, [r7, #28]
 8003134:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8003138:	7d7b      	ldrb	r3, [r7, #21]
 800313a:	ee07 3a90 	vmov	s15, r3
 800313e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003142:	eeb0 1b47 	vmov.f64	d1, d7
 8003146:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 800314a:	f00e fe69 	bl	8011e20 <pow>
 800314e:	eeb0 6b40 	vmov.f64	d6, d0
 8003152:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8003156:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	edc3 7a07 	vstr	s15, [r3, #28]
       
    mlx90640->cpAlpha[0] = alphaSP[0];
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003168:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    mlx90640->cpAlpha[1] = alphaSP[1];
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003174:	f8c2 3254 	str.w	r3, [r2, #596]	; 0x254
    mlx90640->cpOffset[0] = offsetSP[0];
 8003178:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003182:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
    mlx90640->cpOffset[1] = offsetSP[1];  
 8003186:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003190:	f8a3 225a 	strh.w	r2, [r3, #602]	; 0x25a
}
 8003194:	bf00      	nop
 8003196:	3720      	adds	r7, #32
 8003198:	46bd      	mov	sp, r7
 800319a:	ecbd 8b02 	vpop	{d8}
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	43ff8000 	.word	0x43ff8000
 80031a4:	44800000 	.word	0x44800000
 80031a8:	42800000 	.word	0x42800000
 80031ac:	43000000 	.word	0x43000000
 80031b0:	42fe0000 	.word	0x42fe0000
 80031b4:	43800000 	.word	0x43800000

080031b8 <ExtractCILCParameters>:

//------------------------------------------------------------------------------

void ExtractCILCParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b087      	sub	sp, #28
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
    float ilChessC[3];
    uint8_t calibrationModeEE;
    
    calibrationModeEE = (eeData[10] & 0x0800) >> 4;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	3314      	adds	r3, #20
 80031c6:	881b      	ldrh	r3, [r3, #0]
 80031c8:	111b      	asrs	r3, r3, #4
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80031d0:	75fb      	strb	r3, [r7, #23]
    calibrationModeEE = calibrationModeEE ^ 0x80;
 80031d2:	7dfb      	ldrb	r3, [r7, #23]
 80031d4:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 80031d8:	43db      	mvns	r3, r3
 80031da:	75fb      	strb	r3, [r7, #23]

    ilChessC[0] = (eeData[53] & 0x003F);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	336a      	adds	r3, #106	; 0x6a
 80031e0:	881b      	ldrh	r3, [r3, #0]
 80031e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031e6:	ee07 3a90 	vmov	s15, r3
 80031ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031ee:	edc7 7a02 	vstr	s15, [r7, #8]
    if (ilChessC[0] > 31)
 80031f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80031f6:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 80031fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003202:	dd07      	ble.n	8003214 <ExtractCILCParameters+0x5c>
    {
        ilChessC[0] = ilChessC[0] - 64;
 8003204:	edd7 7a02 	vldr	s15, [r7, #8]
 8003208:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80032f0 <ExtractCILCParameters+0x138>
 800320c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003210:	edc7 7a02 	vstr	s15, [r7, #8]
    }
    ilChessC[0] = ilChessC[0] / 16.0f;
 8003214:	ed97 7a02 	vldr	s14, [r7, #8]
 8003218:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800321c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003220:	edc7 7a02 	vstr	s15, [r7, #8]
    
    ilChessC[1] = (eeData[53] & 0x07C0) >> 6;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	336a      	adds	r3, #106	; 0x6a
 8003228:	881b      	ldrh	r3, [r3, #0]
 800322a:	119b      	asrs	r3, r3, #6
 800322c:	f003 031f 	and.w	r3, r3, #31
 8003230:	ee07 3a90 	vmov	s15, r3
 8003234:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003238:	edc7 7a03 	vstr	s15, [r7, #12]
    if (ilChessC[1] > 15)
 800323c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003240:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8003244:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800324c:	dd07      	ble.n	800325e <ExtractCILCParameters+0xa6>
    {
        ilChessC[1] = ilChessC[1] - 32;
 800324e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003252:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80032f4 <ExtractCILCParameters+0x13c>
 8003256:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800325a:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    ilChessC[1] = ilChessC[1] / 2.0f;
 800325e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003262:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003266:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800326a:	edc7 7a03 	vstr	s15, [r7, #12]
    
    ilChessC[2] = (eeData[53] & 0xF800) >> 11;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	336a      	adds	r3, #106	; 0x6a
 8003272:	881b      	ldrh	r3, [r3, #0]
 8003274:	0adb      	lsrs	r3, r3, #11
 8003276:	b29b      	uxth	r3, r3
 8003278:	ee07 3a90 	vmov	s15, r3
 800327c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003280:	edc7 7a04 	vstr	s15, [r7, #16]
    if (ilChessC[2] > 15)
 8003284:	edd7 7a04 	vldr	s15, [r7, #16]
 8003288:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800328c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003294:	dd07      	ble.n	80032a6 <ExtractCILCParameters+0xee>
    {
        ilChessC[2] = ilChessC[2] - 32;
 8003296:	edd7 7a04 	vldr	s15, [r7, #16]
 800329a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80032f4 <ExtractCILCParameters+0x13c>
 800329e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80032a2:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    ilChessC[2] = ilChessC[2] / 8.0f;
 80032a6:	ed97 7a04 	vldr	s14, [r7, #16]
 80032aa:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80032ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80032b2:	edc7 7a04 	vstr	s15, [r7, #16]
    
    mlx90640->calibrationModeEE = calibrationModeEE;
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	7dfa      	ldrb	r2, [r7, #23]
 80032ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    mlx90640->ilChessC[0] = ilChessC[0];
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80032c6:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
    mlx90640->ilChessC[1] = ilChessC[1];
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80032d2:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
    mlx90640->ilChessC[2] = ilChessC[2];
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80032de:	f8c2 3264 	str.w	r3, [r2, #612]	; 0x264
}
 80032e2:	bf00      	nop
 80032e4:	371c      	adds	r7, #28
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	42800000 	.word	0x42800000
 80032f4:	42000000 	.word	0x42000000

080032f8 <ExtractDeviatingPixels>:

//------------------------------------------------------------------------------

int ExtractDeviatingPixels(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
    uint16_t pixCnt = 0;
 8003302:	2300      	movs	r3, #0
 8003304:	82fb      	strh	r3, [r7, #22]
    uint16_t brokenPixCnt = 0;
 8003306:	2300      	movs	r3, #0
 8003308:	82bb      	strh	r3, [r7, #20]
    uint16_t outlierPixCnt = 0;
 800330a:	2300      	movs	r3, #0
 800330c:	827b      	strh	r3, [r7, #18]
    int warn = 0;
 800330e:	2300      	movs	r3, #0
 8003310:	60fb      	str	r3, [r7, #12]
    int i;
    
    for(pixCnt = 0; pixCnt<5; pixCnt++)
 8003312:	2300      	movs	r3, #0
 8003314:	82fb      	strh	r3, [r7, #22]
 8003316:	e013      	b.n	8003340 <ExtractDeviatingPixels+0x48>
    {
        mlx90640->brokenPixels[pixCnt] = 0xFFFF;
 8003318:	8afa      	ldrh	r2, [r7, #22]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	f602 1234 	addw	r2, r2, #2356	; 0x934
 8003320:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003324:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        mlx90640->outlierPixels[pixCnt] = 0xFFFF;
 8003328:	8afb      	ldrh	r3, [r7, #22]
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	4413      	add	r3, r2
 8003334:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003338:	805a      	strh	r2, [r3, #2]
    for(pixCnt = 0; pixCnt<5; pixCnt++)
 800333a:	8afb      	ldrh	r3, [r7, #22]
 800333c:	3301      	adds	r3, #1
 800333e:	82fb      	strh	r3, [r7, #22]
 8003340:	8afb      	ldrh	r3, [r7, #22]
 8003342:	2b04      	cmp	r3, #4
 8003344:	d9e8      	bls.n	8003318 <ExtractDeviatingPixels+0x20>
    }
        
    pixCnt = 0;    
 8003346:	2300      	movs	r3, #0
 8003348:	82fb      	strh	r3, [r7, #22]
    while (pixCnt < 768 && brokenPixCnt < 5 && outlierPixCnt < 5)
 800334a:	e02a      	b.n	80033a2 <ExtractDeviatingPixels+0xaa>
    {
        if(eeData[pixCnt+64] == 0)
 800334c:	8afb      	ldrh	r3, [r7, #22]
 800334e:	3340      	adds	r3, #64	; 0x40
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	4413      	add	r3, r2
 8003356:	881b      	ldrh	r3, [r3, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10a      	bne.n	8003372 <ExtractDeviatingPixels+0x7a>
        {
            mlx90640->brokenPixels[brokenPixCnt] = pixCnt;
 800335c:	8aba      	ldrh	r2, [r7, #20]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	f602 1234 	addw	r2, r2, #2356	; 0x934
 8003364:	8af9      	ldrh	r1, [r7, #22]
 8003366:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            brokenPixCnt = brokenPixCnt + 1;
 800336a:	8abb      	ldrh	r3, [r7, #20]
 800336c:	3301      	adds	r3, #1
 800336e:	82bb      	strh	r3, [r7, #20]
 8003370:	e014      	b.n	800339c <ExtractDeviatingPixels+0xa4>
        }    
        else if((eeData[pixCnt+64] & 0x0001) != 0)
 8003372:	8afb      	ldrh	r3, [r7, #22]
 8003374:	3340      	adds	r3, #64	; 0x40
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	4413      	add	r3, r2
 800337c:	881b      	ldrh	r3, [r3, #0]
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00a      	beq.n	800339c <ExtractDeviatingPixels+0xa4>
        {
            mlx90640->outlierPixels[outlierPixCnt] = pixCnt;
 8003386:	8a7b      	ldrh	r3, [r7, #18]
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	f603 1338 	addw	r3, r3, #2360	; 0x938
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	4413      	add	r3, r2
 8003392:	8afa      	ldrh	r2, [r7, #22]
 8003394:	805a      	strh	r2, [r3, #2]
            outlierPixCnt = outlierPixCnt + 1;
 8003396:	8a7b      	ldrh	r3, [r7, #18]
 8003398:	3301      	adds	r3, #1
 800339a:	827b      	strh	r3, [r7, #18]
        }    
        
        pixCnt = pixCnt + 1;
 800339c:	8afb      	ldrh	r3, [r7, #22]
 800339e:	3301      	adds	r3, #1
 80033a0:	82fb      	strh	r3, [r7, #22]
    while (pixCnt < 768 && brokenPixCnt < 5 && outlierPixCnt < 5)
 80033a2:	8afb      	ldrh	r3, [r7, #22]
 80033a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033a8:	d205      	bcs.n	80033b6 <ExtractDeviatingPixels+0xbe>
 80033aa:	8abb      	ldrh	r3, [r7, #20]
 80033ac:	2b04      	cmp	r3, #4
 80033ae:	d802      	bhi.n	80033b6 <ExtractDeviatingPixels+0xbe>
 80033b0:	8a7b      	ldrh	r3, [r7, #18]
 80033b2:	2b04      	cmp	r3, #4
 80033b4:	d9ca      	bls.n	800334c <ExtractDeviatingPixels+0x54>
        
    } 
    
    if(brokenPixCnt > 4)  
 80033b6:	8abb      	ldrh	r3, [r7, #20]
 80033b8:	2b04      	cmp	r3, #4
 80033ba:	d903      	bls.n	80033c4 <ExtractDeviatingPixels+0xcc>
    {
        warn = -3;
 80033bc:	f06f 0302 	mvn.w	r3, #2
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	e08f      	b.n	80034e4 <ExtractDeviatingPixels+0x1ec>
    }         
    else if(outlierPixCnt > 4)  
 80033c4:	8a7b      	ldrh	r3, [r7, #18]
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	d903      	bls.n	80033d2 <ExtractDeviatingPixels+0xda>
    {
        warn = -4;
 80033ca:	f06f 0303 	mvn.w	r3, #3
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	e088      	b.n	80034e4 <ExtractDeviatingPixels+0x1ec>
    }
    else if((brokenPixCnt + outlierPixCnt) > 4)  
 80033d2:	8aba      	ldrh	r2, [r7, #20]
 80033d4:	8a7b      	ldrh	r3, [r7, #18]
 80033d6:	4413      	add	r3, r2
 80033d8:	2b04      	cmp	r3, #4
 80033da:	dd03      	ble.n	80033e4 <ExtractDeviatingPixels+0xec>
    {
        warn = -5;
 80033dc:	f06f 0304 	mvn.w	r3, #4
 80033e0:	60fb      	str	r3, [r7, #12]
 80033e2:	e07f      	b.n	80034e4 <ExtractDeviatingPixels+0x1ec>
    } 
    else
    {
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 80033e4:	2300      	movs	r3, #0
 80033e6:	82fb      	strh	r3, [r7, #22]
 80033e8:	e022      	b.n	8003430 <ExtractDeviatingPixels+0x138>
        {
            for(i=pixCnt+1; i<brokenPixCnt; i++)
 80033ea:	8afb      	ldrh	r3, [r7, #22]
 80033ec:	3301      	adds	r3, #1
 80033ee:	60bb      	str	r3, [r7, #8]
 80033f0:	e017      	b.n	8003422 <ExtractDeviatingPixels+0x12a>
            {
                warn = CheckAdjacentPixels(mlx90640->brokenPixels[pixCnt],mlx90640->brokenPixels[i]);
 80033f2:	8afa      	ldrh	r2, [r7, #22]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	f602 1234 	addw	r2, r2, #2356	; 0x934
 80033fa:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	f602 1234 	addw	r2, r2, #2356	; 0x934
 8003406:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800340a:	4619      	mov	r1, r3
 800340c:	f000 f86f 	bl	80034ee <CheckAdjacentPixels>
 8003410:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <ExtractDeviatingPixels+0x124>
                {
                    return warn;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	e064      	b.n	80034e6 <ExtractDeviatingPixels+0x1ee>
            for(i=pixCnt+1; i<brokenPixCnt; i++)
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	3301      	adds	r3, #1
 8003420:	60bb      	str	r3, [r7, #8]
 8003422:	8abb      	ldrh	r3, [r7, #20]
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	429a      	cmp	r2, r3
 8003428:	dbe3      	blt.n	80033f2 <ExtractDeviatingPixels+0xfa>
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 800342a:	8afb      	ldrh	r3, [r7, #22]
 800342c:	3301      	adds	r3, #1
 800342e:	82fb      	strh	r3, [r7, #22]
 8003430:	8afa      	ldrh	r2, [r7, #22]
 8003432:	8abb      	ldrh	r3, [r7, #20]
 8003434:	429a      	cmp	r2, r3
 8003436:	d3d8      	bcc.n	80033ea <ExtractDeviatingPixels+0xf2>
                }    
            }    
        }
        
        for(pixCnt=0; pixCnt<outlierPixCnt; pixCnt++)
 8003438:	2300      	movs	r3, #0
 800343a:	82fb      	strh	r3, [r7, #22]
 800343c:	e024      	b.n	8003488 <ExtractDeviatingPixels+0x190>
        {
            for(i=pixCnt+1; i<outlierPixCnt; i++)
 800343e:	8afb      	ldrh	r3, [r7, #22]
 8003440:	3301      	adds	r3, #1
 8003442:	60bb      	str	r3, [r7, #8]
 8003444:	e019      	b.n	800347a <ExtractDeviatingPixels+0x182>
            {
                warn = CheckAdjacentPixels(mlx90640->outlierPixels[pixCnt],mlx90640->outlierPixels[i]);
 8003446:	8afb      	ldrh	r3, [r7, #22]
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	f603 1338 	addw	r3, r3, #2360	; 0x938
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	4413      	add	r3, r2
 8003452:	8858      	ldrh	r0, [r3, #2]
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	f603 1338 	addw	r3, r3, #2360	; 0x938
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	4413      	add	r3, r2
 8003460:	885b      	ldrh	r3, [r3, #2]
 8003462:	4619      	mov	r1, r3
 8003464:	f000 f843 	bl	80034ee <CheckAdjacentPixels>
 8003468:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <ExtractDeviatingPixels+0x17c>
                {
                    return warn;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	e038      	b.n	80034e6 <ExtractDeviatingPixels+0x1ee>
            for(i=pixCnt+1; i<outlierPixCnt; i++)
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	3301      	adds	r3, #1
 8003478:	60bb      	str	r3, [r7, #8]
 800347a:	8a7b      	ldrh	r3, [r7, #18]
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	429a      	cmp	r2, r3
 8003480:	dbe1      	blt.n	8003446 <ExtractDeviatingPixels+0x14e>
        for(pixCnt=0; pixCnt<outlierPixCnt; pixCnt++)
 8003482:	8afb      	ldrh	r3, [r7, #22]
 8003484:	3301      	adds	r3, #1
 8003486:	82fb      	strh	r3, [r7, #22]
 8003488:	8afa      	ldrh	r2, [r7, #22]
 800348a:	8a7b      	ldrh	r3, [r7, #18]
 800348c:	429a      	cmp	r2, r3
 800348e:	d3d6      	bcc.n	800343e <ExtractDeviatingPixels+0x146>
                }    
            }    
        } 
        
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 8003490:	2300      	movs	r3, #0
 8003492:	82fb      	strh	r3, [r7, #22]
 8003494:	e022      	b.n	80034dc <ExtractDeviatingPixels+0x1e4>
        {
            for(i=0; i<outlierPixCnt; i++)
 8003496:	2300      	movs	r3, #0
 8003498:	60bb      	str	r3, [r7, #8]
 800349a:	e018      	b.n	80034ce <ExtractDeviatingPixels+0x1d6>
            {
                warn = CheckAdjacentPixels(mlx90640->brokenPixels[pixCnt],mlx90640->outlierPixels[i]);
 800349c:	8afa      	ldrh	r2, [r7, #22]
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	f602 1234 	addw	r2, r2, #2356	; 0x934
 80034a4:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	f603 1338 	addw	r3, r3, #2360	; 0x938
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	4413      	add	r3, r2
 80034b4:	885b      	ldrh	r3, [r3, #2]
 80034b6:	4619      	mov	r1, r3
 80034b8:	f000 f819 	bl	80034ee <CheckAdjacentPixels>
 80034bc:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <ExtractDeviatingPixels+0x1d0>
                {
                    return warn;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	e00e      	b.n	80034e6 <ExtractDeviatingPixels+0x1ee>
            for(i=0; i<outlierPixCnt; i++)
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	3301      	adds	r3, #1
 80034cc:	60bb      	str	r3, [r7, #8]
 80034ce:	8a7b      	ldrh	r3, [r7, #18]
 80034d0:	68ba      	ldr	r2, [r7, #8]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	dbe2      	blt.n	800349c <ExtractDeviatingPixels+0x1a4>
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 80034d6:	8afb      	ldrh	r3, [r7, #22]
 80034d8:	3301      	adds	r3, #1
 80034da:	82fb      	strh	r3, [r7, #22]
 80034dc:	8afa      	ldrh	r2, [r7, #22]
 80034de:	8abb      	ldrh	r3, [r7, #20]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d3d8      	bcc.n	8003496 <ExtractDeviatingPixels+0x19e>
        }    
        
    }    
    
    
    return warn;
 80034e4:	68fb      	ldr	r3, [r7, #12]
       
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3718      	adds	r7, #24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <CheckAdjacentPixels>:

//------------------------------------------------------------------------------

 int CheckAdjacentPixels(uint16_t pix1, uint16_t pix2)
 {
 80034ee:	b480      	push	{r7}
 80034f0:	b085      	sub	sp, #20
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	4603      	mov	r3, r0
 80034f6:	460a      	mov	r2, r1
 80034f8:	80fb      	strh	r3, [r7, #6]
 80034fa:	4613      	mov	r3, r2
 80034fc:	80bb      	strh	r3, [r7, #4]
     int pixPosDif;
     
     pixPosDif = pix1 - pix2;
 80034fe:	88fa      	ldrh	r2, [r7, #6]
 8003500:	88bb      	ldrh	r3, [r7, #4]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	60fb      	str	r3, [r7, #12]
     if(pixPosDif > -34 && pixPosDif < -30)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f113 0f21 	cmn.w	r3, #33	; 0x21
 800350c:	db06      	blt.n	800351c <CheckAdjacentPixels+0x2e>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f113 0f1e 	cmn.w	r3, #30
 8003514:	da02      	bge.n	800351c <CheckAdjacentPixels+0x2e>
     {
         return -6;
 8003516:	f06f 0305 	mvn.w	r3, #5
 800351a:	e013      	b.n	8003544 <CheckAdjacentPixels+0x56>
     } 
     if(pixPosDif > -2 && pixPosDif < 2)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003522:	db05      	blt.n	8003530 <CheckAdjacentPixels+0x42>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2b01      	cmp	r3, #1
 8003528:	dc02      	bgt.n	8003530 <CheckAdjacentPixels+0x42>
     {
         return -6;
 800352a:	f06f 0305 	mvn.w	r3, #5
 800352e:	e009      	b.n	8003544 <CheckAdjacentPixels+0x56>
     } 
     if(pixPosDif > 30 && pixPosDif < 34)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2b1e      	cmp	r3, #30
 8003534:	dd05      	ble.n	8003542 <CheckAdjacentPixels+0x54>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2b21      	cmp	r3, #33	; 0x21
 800353a:	dc02      	bgt.n	8003542 <CheckAdjacentPixels+0x54>
     {
         return -6;
 800353c:	f06f 0305 	mvn.w	r3, #5
 8003540:	e000      	b.n	8003544 <CheckAdjacentPixels+0x56>
     }
     
     return 0;    
 8003542:	2300      	movs	r3, #0
 }
 8003544:	4618      	mov	r0, r3
 8003546:	3714      	adds	r7, #20
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <MLX90640_I2CRead>:
	MX_I2C1_Init();
}


int MLX90640_I2CRead(uint8_t slaveAddr, uint16_t startAddress, uint16_t nMemAddressRead, uint16_t *data)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08c      	sub	sp, #48	; 0x30
 8003554:	af04      	add	r7, sp, #16
 8003556:	607b      	str	r3, [r7, #4]
 8003558:	4603      	mov	r3, r0
 800355a:	73fb      	strb	r3, [r7, #15]
 800355c:	460b      	mov	r3, r1
 800355e:	81bb      	strh	r3, [r7, #12]
 8003560:	4613      	mov	r3, r2
 8003562:	817b      	strh	r3, [r7, #10]

	uint8_t* p = (uint8_t*) data;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	61bb      	str	r3, [r7, #24]

	int ack = 0;                               
 8003568:	2300      	movs	r3, #0
 800356a:	617b      	str	r3, [r7, #20]
	int cnt = 0;
 800356c:	2300      	movs	r3, #0
 800356e:	61fb      	str	r3, [r7, #28]
	
	ack = HAL_I2C_Mem_Read(&hi2c1, (slaveAddr<<1), startAddress, I2C_MEMADD_SIZE_16BIT, p, nMemAddressRead*2, 500);
 8003570:	7bfb      	ldrb	r3, [r7, #15]
 8003572:	b29b      	uxth	r3, r3
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	b299      	uxth	r1, r3
 8003578:	897b      	ldrh	r3, [r7, #10]
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	b29b      	uxth	r3, r3
 800357e:	89ba      	ldrh	r2, [r7, #12]
 8003580:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003584:	9002      	str	r0, [sp, #8]
 8003586:	9301      	str	r3, [sp, #4]
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	2302      	movs	r3, #2
 800358e:	4817      	ldr	r0, [pc, #92]	; (80035ec <MLX90640_I2CRead+0x9c>)
 8003590:	f002 fea0 	bl	80062d4 <HAL_I2C_Mem_Read>
 8003594:	4603      	mov	r3, r0
 8003596:	617b      	str	r3, [r7, #20]

	if (ack != HAL_OK)
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d002      	beq.n	80035a4 <MLX90640_I2CRead+0x54>
	{
			return -1;
 800359e:	f04f 33ff 	mov.w	r3, #4294967295
 80035a2:	e01f      	b.n	80035e4 <MLX90640_I2CRead+0x94>
	}
	

	for(cnt=0; cnt < nMemAddressRead*2; cnt+=2) {
 80035a4:	2300      	movs	r3, #0
 80035a6:	61fb      	str	r3, [r7, #28]
 80035a8:	e016      	b.n	80035d8 <MLX90640_I2CRead+0x88>
		uint8_t tempBuffer = p[cnt+1];
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	3301      	adds	r3, #1
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	4413      	add	r3, r2
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	74fb      	strb	r3, [r7, #19]
		p[cnt+1] = p[cnt];
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	441a      	add	r2, r3
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	3301      	adds	r3, #1
 80035c0:	69b9      	ldr	r1, [r7, #24]
 80035c2:	440b      	add	r3, r1
 80035c4:	7812      	ldrb	r2, [r2, #0]
 80035c6:	701a      	strb	r2, [r3, #0]
		p[cnt] = tempBuffer;
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	4413      	add	r3, r2
 80035ce:	7cfa      	ldrb	r2, [r7, #19]
 80035d0:	701a      	strb	r2, [r3, #0]
	for(cnt=0; cnt < nMemAddressRead*2; cnt+=2) {
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	3302      	adds	r3, #2
 80035d6:	61fb      	str	r3, [r7, #28]
 80035d8:	897b      	ldrh	r3, [r7, #10]
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	69fa      	ldr	r2, [r7, #28]
 80035de:	429a      	cmp	r2, r3
 80035e0:	dbe3      	blt.n	80035aa <MLX90640_I2CRead+0x5a>
	}

	return 0;   
 80035e2:	2300      	movs	r3, #0
} 
 80035e4:	4618      	mov	r0, r3
 80035e6:	3720      	adds	r7, #32
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	2000021c 	.word	0x2000021c

080035f0 <MLX90640_I2CWrite>:


int MLX90640_I2CWrite(uint8_t slaveAddr, uint16_t writeAddress, uint16_t data)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b088      	sub	sp, #32
 80035f4:	af04      	add	r7, sp, #16
 80035f6:	4603      	mov	r3, r0
 80035f8:	71fb      	strb	r3, [r7, #7]
 80035fa:	460b      	mov	r3, r1
 80035fc:	80bb      	strh	r3, [r7, #4]
 80035fe:	4613      	mov	r3, r2
 8003600:	807b      	strh	r3, [r7, #2]

	uint8_t sa;
	int ack = 0;
 8003602:	2300      	movs	r3, #0
 8003604:	60fb      	str	r3, [r7, #12]
	uint8_t cmd[2];
	static uint16_t dataCheck;

	sa = (slaveAddr << 1);
 8003606:	79fb      	ldrb	r3, [r7, #7]
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	72fb      	strb	r3, [r7, #11]

	cmd[0] = data >> 8;
 800360c:	887b      	ldrh	r3, [r7, #2]
 800360e:	0a1b      	lsrs	r3, r3, #8
 8003610:	b29b      	uxth	r3, r3
 8003612:	b2db      	uxtb	r3, r3
 8003614:	723b      	strb	r3, [r7, #8]
	cmd[1] = data & 0x00FF;
 8003616:	887b      	ldrh	r3, [r7, #2]
 8003618:	b2db      	uxtb	r3, r3
 800361a:	727b      	strb	r3, [r7, #9]


	ack = HAL_I2C_Mem_Write(&hi2c1, sa, writeAddress, I2C_MEMADD_SIZE_16BIT, cmd, sizeof(cmd), 500);
 800361c:	7afb      	ldrb	r3, [r7, #11]
 800361e:	b299      	uxth	r1, r3
 8003620:	88ba      	ldrh	r2, [r7, #4]
 8003622:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003626:	9302      	str	r3, [sp, #8]
 8003628:	2302      	movs	r3, #2
 800362a:	9301      	str	r3, [sp, #4]
 800362c:	f107 0308 	add.w	r3, r7, #8
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	2302      	movs	r3, #2
 8003634:	480e      	ldr	r0, [pc, #56]	; (8003670 <MLX90640_I2CWrite+0x80>)
 8003636:	f002 fd39 	bl	80060ac <HAL_I2C_Mem_Write>
 800363a:	4603      	mov	r3, r0
 800363c:	60fb      	str	r3, [r7, #12]

	if (ack != HAL_OK)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d002      	beq.n	800364a <MLX90640_I2CWrite+0x5a>
	{
			return -1;
 8003644:	f04f 33ff 	mov.w	r3, #4294967295
 8003648:	e00e      	b.n	8003668 <MLX90640_I2CWrite+0x78>
	}         
	
	MLX90640_I2CRead(slaveAddr,writeAddress,1, &dataCheck);
 800364a:	88b9      	ldrh	r1, [r7, #4]
 800364c:	79f8      	ldrb	r0, [r7, #7]
 800364e:	4b09      	ldr	r3, [pc, #36]	; (8003674 <MLX90640_I2CWrite+0x84>)
 8003650:	2201      	movs	r2, #1
 8003652:	f7ff ff7d 	bl	8003550 <MLX90640_I2CRead>
	
	if ( dataCheck != data)
 8003656:	4b07      	ldr	r3, [pc, #28]	; (8003674 <MLX90640_I2CWrite+0x84>)
 8003658:	881b      	ldrh	r3, [r3, #0]
 800365a:	887a      	ldrh	r2, [r7, #2]
 800365c:	429a      	cmp	r2, r3
 800365e:	d002      	beq.n	8003666 <MLX90640_I2CWrite+0x76>
	{
			return -2;
 8003660:	f06f 0301 	mvn.w	r3, #1
 8003664:	e000      	b.n	8003668 <MLX90640_I2CWrite+0x78>
	}    
	
	return 0;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	2000021c 	.word	0x2000021c
 8003674:	200001fc 	.word	0x200001fc

08003678 <MPU9250_IsConnected>:
__weak void MPU9250_OnActivate()
{
}
#ifndef USE_SPI
bool	MPU9250_IsConnected()
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&_MPU9250_I2C,_dev_add,1,HAL_MAX_DELAY)==HAL_OK)
 800367c:	21d0      	movs	r1, #208	; 0xd0
 800367e:	f04f 33ff 	mov.w	r3, #4294967295
 8003682:	2201      	movs	r2, #1
 8003684:	4805      	ldr	r0, [pc, #20]	; (800369c <MPU9250_IsConnected+0x24>)
 8003686:	f002 ff3f 	bl	8006508 <HAL_I2C_IsDeviceReady>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d101      	bne.n	8003694 <MPU9250_IsConnected+0x1c>
		return true;
 8003690:	2301      	movs	r3, #1
 8003692:	e000      	b.n	8003696 <MPU9250_IsConnected+0x1e>
	else
		return false;	
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	2000021c 	.word	0x2000021c

080036a0 <MPU_I2C_Write>:

void MPU_I2C_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af04      	add	r7, sp, #16
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	460b      	mov	r3, r1
 80036aa:	70fb      	strb	r3, [r7, #3]
 80036ac:	4613      	mov	r3, r2
 80036ae:	803b      	strh	r3, [r7, #0]
	HAL_I2C_Mem_Write(&_MPU9250_I2C,_dev_add,WriteAddr,I2C_MEMADD_SIZE_8BIT,pBuffer,NumByteToWrite,HAL_MAX_DELAY);
 80036b0:	21d0      	movs	r1, #208	; 0xd0
 80036b2:	78fb      	ldrb	r3, [r7, #3]
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	f04f 33ff 	mov.w	r3, #4294967295
 80036ba:	9302      	str	r3, [sp, #8]
 80036bc:	883b      	ldrh	r3, [r7, #0]
 80036be:	9301      	str	r3, [sp, #4]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	2301      	movs	r3, #1
 80036c6:	4803      	ldr	r0, [pc, #12]	; (80036d4 <MPU_I2C_Write+0x34>)
 80036c8:	f002 fcf0 	bl	80060ac <HAL_I2C_Mem_Write>
}
 80036cc:	bf00      	nop
 80036ce:	3708      	adds	r7, #8
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	2000021c 	.word	0x2000021c

080036d8 <MPU_I2C_Read>:

void MPU_I2C_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	af02      	add	r7, sp, #8
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	460b      	mov	r3, r1
 80036e2:	70fb      	strb	r3, [r7, #3]
 80036e4:	4613      	mov	r3, r2
 80036e6:	803b      	strh	r3, [r7, #0]
	uint8_t data = ReadAddr | READWRITE_CMD;
 80036e8:	2280      	movs	r2, #128	; 0x80
 80036ea:	78fb      	ldrb	r3, [r7, #3]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&_MPU9250_I2C,_dev_add,&data,1,HAL_MAX_DELAY);
 80036f2:	21d0      	movs	r1, #208	; 0xd0
 80036f4:	f107 020f 	add.w	r2, r7, #15
 80036f8:	f04f 33ff 	mov.w	r3, #4294967295
 80036fc:	9300      	str	r3, [sp, #0]
 80036fe:	2301      	movs	r3, #1
 8003700:	4807      	ldr	r0, [pc, #28]	; (8003720 <MPU_I2C_Read+0x48>)
 8003702:	f002 fae9 	bl	8005cd8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&_MPU9250_I2C,_dev_add,pBuffer,NumByteToRead,HAL_MAX_DELAY);
 8003706:	21d0      	movs	r1, #208	; 0xd0
 8003708:	883b      	ldrh	r3, [r7, #0]
 800370a:	f04f 32ff 	mov.w	r2, #4294967295
 800370e:	9200      	str	r2, [sp, #0]
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	4803      	ldr	r0, [pc, #12]	; (8003720 <MPU_I2C_Read+0x48>)
 8003714:	f002 fbd4 	bl	8005ec0 <HAL_I2C_Master_Receive>
}
 8003718:	bf00      	nop
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	2000021c 	.word	0x2000021c

08003724 <writeRegister>:
	MPU9250_Deactivate();
}
#endif
/* writes a byte to MPU9250 register given a register address and data */
void writeRegister(uint8_t subAddress, uint8_t data)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	4603      	mov	r3, r0
 800372c:	460a      	mov	r2, r1
 800372e:	71fb      	strb	r3, [r7, #7]
 8003730:	4613      	mov	r3, r2
 8003732:	71bb      	strb	r3, [r7, #6]
	#ifdef USE_SPI
	MPU_SPI_Write(&data, subAddress, 1);
	#else
	MPU_I2C_Write(&data, subAddress, 1);
 8003734:	79f9      	ldrb	r1, [r7, #7]
 8003736:	1dbb      	adds	r3, r7, #6
 8003738:	2201      	movs	r2, #1
 800373a:	4618      	mov	r0, r3
 800373c:	f7ff ffb0 	bl	80036a0 <MPU_I2C_Write>
	#endif
	HAL_Delay(10);
 8003740:	200a      	movs	r0, #10
 8003742:	f001 fbb1 	bl	8004ea8 <HAL_Delay>
}
 8003746:	bf00      	nop
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <readRegisters>:

/* reads registers from MPU9250 given a starting register address, number of bytes, and a pointer to store data */
void readRegisters(uint8_t subAddress, uint8_t count, uint8_t* dest){
 800374e:	b580      	push	{r7, lr}
 8003750:	b082      	sub	sp, #8
 8003752:	af00      	add	r7, sp, #0
 8003754:	4603      	mov	r3, r0
 8003756:	603a      	str	r2, [r7, #0]
 8003758:	71fb      	strb	r3, [r7, #7]
 800375a:	460b      	mov	r3, r1
 800375c:	71bb      	strb	r3, [r7, #6]
	#ifdef USE_SPI
	MPU_SPI_Read(dest, subAddress, count);
	#else
	MPU_I2C_Read(dest, subAddress, count);
 800375e:	79bb      	ldrb	r3, [r7, #6]
 8003760:	b29a      	uxth	r2, r3
 8003762:	79fb      	ldrb	r3, [r7, #7]
 8003764:	4619      	mov	r1, r3
 8003766:	6838      	ldr	r0, [r7, #0]
 8003768:	f7ff ffb6 	bl	80036d8 <MPU_I2C_Read>
	#endif
}
 800376c:	bf00      	nop
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <writeAK8963Register>:

/* writes a register to the AK8963 given a register address and data */
void writeAK8963Register(uint8_t subAddress, uint8_t data)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	4603      	mov	r3, r0
 800377c:	460a      	mov	r2, r1
 800377e:	71fb      	strb	r3, [r7, #7]
 8003780:	4613      	mov	r3, r2
 8003782:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for write
	writeRegister(I2C_SLV0_ADDR,AK8963_I2C_ADDR);
 8003784:	2325      	movs	r3, #37	; 0x25
 8003786:	220c      	movs	r2, #12
 8003788:	4611      	mov	r1, r2
 800378a:	4618      	mov	r0, r3
 800378c:	f7ff ffca 	bl	8003724 <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 8003790:	2226      	movs	r2, #38	; 0x26
 8003792:	79fb      	ldrb	r3, [r7, #7]
 8003794:	4619      	mov	r1, r3
 8003796:	4610      	mov	r0, r2
 8003798:	f7ff ffc4 	bl	8003724 <writeRegister>

	// store the data for write
	writeRegister(I2C_SLV0_DO,data);
 800379c:	2263      	movs	r2, #99	; 0x63
 800379e:	79bb      	ldrb	r3, [r7, #6]
 80037a0:	4619      	mov	r1, r3
 80037a2:	4610      	mov	r0, r2
 80037a4:	f7ff ffbe 	bl	8003724 <writeRegister>

	// enable I2C and send 1 byte
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | (uint8_t)1);
 80037a8:	2227      	movs	r2, #39	; 0x27
 80037aa:	2380      	movs	r3, #128	; 0x80
 80037ac:	f043 0301 	orr.w	r3, r3, #1
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	4619      	mov	r1, r3
 80037b4:	4610      	mov	r0, r2
 80037b6:	f7ff ffb5 	bl	8003724 <writeRegister>
}
 80037ba:	bf00      	nop
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <readAK8963Registers>:

/* reads registers from the AK8963 */
void readAK8963Registers(uint8_t subAddress, uint8_t count, uint8_t* dest)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b082      	sub	sp, #8
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	4603      	mov	r3, r0
 80037ca:	603a      	str	r2, [r7, #0]
 80037cc:	71fb      	strb	r3, [r7, #7]
 80037ce:	460b      	mov	r3, r1
 80037d0:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for read
	writeRegister(I2C_SLV0_ADDR, AK8963_I2C_ADDR | I2C_READ_FLAG);
 80037d2:	2025      	movs	r0, #37	; 0x25
 80037d4:	220c      	movs	r2, #12
 80037d6:	2380      	movs	r3, #128	; 0x80
 80037d8:	4313      	orrs	r3, r2
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	4619      	mov	r1, r3
 80037de:	f7ff ffa1 	bl	8003724 <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 80037e2:	2226      	movs	r2, #38	; 0x26
 80037e4:	79fb      	ldrb	r3, [r7, #7]
 80037e6:	4619      	mov	r1, r3
 80037e8:	4610      	mov	r0, r2
 80037ea:	f7ff ff9b 	bl	8003724 <writeRegister>

	// enable I2C and request the bytes
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | count);
 80037ee:	2027      	movs	r0, #39	; 0x27
 80037f0:	2280      	movs	r2, #128	; 0x80
 80037f2:	79bb      	ldrb	r3, [r7, #6]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	4619      	mov	r1, r3
 80037fa:	f7ff ff93 	bl	8003724 <writeRegister>

	// takes some time for these registers to fill
	HAL_Delay(1);
 80037fe:	2001      	movs	r0, #1
 8003800:	f001 fb52 	bl	8004ea8 <HAL_Delay>

	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	readRegisters(EXT_SENS_DATA_00,count,dest);
 8003804:	2049      	movs	r0, #73	; 0x49
 8003806:	79bb      	ldrb	r3, [r7, #6]
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	4619      	mov	r1, r3
 800380c:	f7ff ff9f 	bl	800374e <readRegisters>
}
 8003810:	bf00      	nop
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <whoAmI>:

/* gets the MPU9250 WHO_AM_I register value, expected to be 0x71 */
static uint8_t whoAmI(){
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readRegisters(WHO_AM_I,1,_buffer);
 800381c:	2375      	movs	r3, #117	; 0x75
 800381e:	4a04      	ldr	r2, [pc, #16]	; (8003830 <whoAmI+0x18>)
 8003820:	2101      	movs	r1, #1
 8003822:	4618      	mov	r0, r3
 8003824:	f7ff ff93 	bl	800374e <readRegisters>

	// return the register value
	return _buffer[0];
 8003828:	4b01      	ldr	r3, [pc, #4]	; (8003830 <whoAmI+0x18>)
 800382a:	781b      	ldrb	r3, [r3, #0]
}
 800382c:	4618      	mov	r0, r3
 800382e:	bd80      	pop	{r7, pc}
 8003830:	20000200 	.word	0x20000200

08003834 <whoAmIAK8963>:

/* gets the AK8963 WHO_AM_I register value, expected to be 0x48 */
static int whoAmIAK8963(){
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readAK8963Registers(AK8963_WHO_AM_I,1,_buffer);
 8003838:	2300      	movs	r3, #0
 800383a:	4a04      	ldr	r2, [pc, #16]	; (800384c <whoAmIAK8963+0x18>)
 800383c:	2101      	movs	r1, #1
 800383e:	4618      	mov	r0, r3
 8003840:	f7ff ffbf 	bl	80037c2 <readAK8963Registers>
	// return the register value
	return _buffer[0];
 8003844:	4b01      	ldr	r3, [pc, #4]	; (800384c <whoAmIAK8963+0x18>)
 8003846:	781b      	ldrb	r3, [r3, #0]
}
 8003848:	4618      	mov	r0, r3
 800384a:	bd80      	pop	{r7, pc}
 800384c:	20000200 	.word	0x20000200

08003850 <MPU9250_Init>:

/* starts communication with the MPU-9250 */
uint8_t MPU9250_Init()
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
	#ifndef USE_SPI
	while(MPU9250_IsConnected() == false)
 8003856:	e002      	b.n	800385e <MPU9250_Init+0xe>
	{
		HAL_Delay(100);
 8003858:	2064      	movs	r0, #100	; 0x64
 800385a:	f001 fb25 	bl	8004ea8 <HAL_Delay>
	while(MPU9250_IsConnected() == false)
 800385e:	f7ff ff0b 	bl	8003678 <MPU9250_IsConnected>
 8003862:	4603      	mov	r3, r0
 8003864:	f083 0301 	eor.w	r3, r3, #1
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1f4      	bne.n	8003858 <MPU9250_Init+0x8>
	}
	#endif
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL);
 800386e:	236b      	movs	r3, #107	; 0x6b
 8003870:	2201      	movs	r2, #1
 8003872:	4611      	mov	r1, r2
 8003874:	4618      	mov	r0, r3
 8003876:	f7ff ff55 	bl	8003724 <writeRegister>
	// enable I2C master mode
	writeRegister(USER_CTRL, I2C_MST_EN);
 800387a:	236a      	movs	r3, #106	; 0x6a
 800387c:	2220      	movs	r2, #32
 800387e:	4611      	mov	r1, r2
 8003880:	4618      	mov	r0, r3
 8003882:	f7ff ff4f 	bl	8003724 <writeRegister>
	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL, I2C_MST_CLK);
 8003886:	2324      	movs	r3, #36	; 0x24
 8003888:	220d      	movs	r2, #13
 800388a:	4611      	mov	r1, r2
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff ff49 	bl	8003724 <writeRegister>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 8003892:	230a      	movs	r3, #10
 8003894:	2200      	movs	r2, #0
 8003896:	4611      	mov	r1, r2
 8003898:	4618      	mov	r0, r3
 800389a:	f7ff ff6b 	bl	8003774 <writeAK8963Register>
	// reset the MPU9250
	writeRegister(PWR_MGMNT_1,PWR_RESET);
 800389e:	236b      	movs	r3, #107	; 0x6b
 80038a0:	2280      	movs	r2, #128	; 0x80
 80038a2:	4611      	mov	r1, r2
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7ff ff3d 	bl	8003724 <writeRegister>
	// wait for MPU-9250 to come back up
	HAL_Delay(10);
 80038aa:	200a      	movs	r0, #10
 80038ac:	f001 fafc 	bl	8004ea8 <HAL_Delay>
	// reset the AK8963
	writeAK8963Register(AK8963_CNTL2,AK8963_RESET);
 80038b0:	230b      	movs	r3, #11
 80038b2:	2201      	movs	r2, #1
 80038b4:	4611      	mov	r1, r2
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7ff ff5c 	bl	8003774 <writeAK8963Register>
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL);
 80038bc:	236b      	movs	r3, #107	; 0x6b
 80038be:	2201      	movs	r2, #1
 80038c0:	4611      	mov	r1, r2
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7ff ff2e 	bl	8003724 <writeRegister>

	// check the WHO AM I byte, expected value is 0x71 (decimal 113) or 0x73 (decimal 115)
	uint8_t who = whoAmI();
 80038c8:	f7ff ffa6 	bl	8003818 <whoAmI>
 80038cc:	4603      	mov	r3, r0
 80038ce:	71fb      	strb	r3, [r7, #7]
	if((who != 0x71) && ( who != 0x73))
 80038d0:	79fb      	ldrb	r3, [r7, #7]
 80038d2:	2b71      	cmp	r3, #113	; 0x71
 80038d4:	d004      	beq.n	80038e0 <MPU9250_Init+0x90>
 80038d6:	79fb      	ldrb	r3, [r7, #7]
 80038d8:	2b73      	cmp	r3, #115	; 0x73
 80038da:	d001      	beq.n	80038e0 <MPU9250_Init+0x90>
	{
		return 1;
 80038dc:	2301      	movs	r3, #1
 80038de:	e06c      	b.n	80039ba <MPU9250_Init+0x16a>
	}

	// enable accelerometer and gyro
	writeRegister(PWR_MGMNT_2,SEN_ENABLE);
 80038e0:	236c      	movs	r3, #108	; 0x6c
 80038e2:	2200      	movs	r2, #0
 80038e4:	4611      	mov	r1, r2
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7ff ff1c 	bl	8003724 <writeRegister>

	// setting accel range to 16G as default
	writeRegister(ACCEL_CONFIG,ACCEL_FS_SEL_2G);
 80038ec:	231c      	movs	r3, #28
 80038ee:	2200      	movs	r2, #0
 80038f0:	4611      	mov	r1, r2
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7ff ff16 	bl	8003724 <writeRegister>

	// setting the gyro range to 2000DPS as default
	writeRegister(GYRO_CONFIG,GYRO_FS_SEL_250DPS);
 80038f8:	231b      	movs	r3, #27
 80038fa:	2200      	movs	r2, #0
 80038fc:	4611      	mov	r1, r2
 80038fe:	4618      	mov	r0, r3
 8003900:	f7ff ff10 	bl	8003724 <writeRegister>

	// setting bandwidth to 184Hz as default
	writeRegister(ACCEL_CONFIG2,DLPF_184);
 8003904:	231d      	movs	r3, #29
 8003906:	2201      	movs	r2, #1
 8003908:	4611      	mov	r1, r2
 800390a:	4618      	mov	r0, r3
 800390c:	f7ff ff0a 	bl	8003724 <writeRegister>

	// setting gyro bandwidth to 184Hz
	writeRegister(CONFIG,DLPF_184);
 8003910:	231a      	movs	r3, #26
 8003912:	2201      	movs	r2, #1
 8003914:	4611      	mov	r1, r2
 8003916:	4618      	mov	r0, r3
 8003918:	f7ff ff04 	bl	8003724 <writeRegister>

	// setting the sample rate divider to 0 as default
	writeRegister(SMPDIV,0x00);
 800391c:	2319      	movs	r3, #25
 800391e:	2100      	movs	r1, #0
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff feff 	bl	8003724 <writeRegister>

	// enable I2C master mode
	writeRegister(USER_CTRL,I2C_MST_EN);
 8003926:	236a      	movs	r3, #106	; 0x6a
 8003928:	2220      	movs	r2, #32
 800392a:	4611      	mov	r1, r2
 800392c:	4618      	mov	r0, r3
 800392e:	f7ff fef9 	bl	8003724 <writeRegister>

	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL,I2C_MST_CLK);
 8003932:	2324      	movs	r3, #36	; 0x24
 8003934:	220d      	movs	r2, #13
 8003936:	4611      	mov	r1, r2
 8003938:	4618      	mov	r0, r3
 800393a:	f7ff fef3 	bl	8003724 <writeRegister>

	// check AK8963 WHO AM I register, expected value is 0x48 (decimal 72)
	if( whoAmIAK8963() != 0x48 )
 800393e:	f7ff ff79 	bl	8003834 <whoAmIAK8963>
 8003942:	4603      	mov	r3, r0
 8003944:	2b48      	cmp	r3, #72	; 0x48
 8003946:	d001      	beq.n	800394c <MPU9250_Init+0xfc>
	{
		return 1;
 8003948:	2301      	movs	r3, #1
 800394a:	e036      	b.n	80039ba <MPU9250_Init+0x16a>
	}

	/* get the magnetometer calibration */
	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 800394c:	230a      	movs	r3, #10
 800394e:	2200      	movs	r2, #0
 8003950:	4611      	mov	r1, r2
 8003952:	4618      	mov	r0, r3
 8003954:	f7ff ff0e 	bl	8003774 <writeAK8963Register>

	HAL_Delay(100); // long wait between AK8963 mode changes
 8003958:	2064      	movs	r0, #100	; 0x64
 800395a:	f001 faa5 	bl	8004ea8 <HAL_Delay>

	// set AK8963 to FUSE ROM access
	writeAK8963Register(AK8963_CNTL1,AK8963_FUSE_ROM);
 800395e:	230a      	movs	r3, #10
 8003960:	220f      	movs	r2, #15
 8003962:	4611      	mov	r1, r2
 8003964:	4618      	mov	r0, r3
 8003966:	f7ff ff05 	bl	8003774 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 800396a:	2064      	movs	r0, #100	; 0x64
 800396c:	f001 fa9c 	bl	8004ea8 <HAL_Delay>

	// read the AK8963 ASA registers and compute magnetometer scale factors
	readAK8963Registers(AK8963_ASA, 3, _mag_adjust);
 8003970:	2310      	movs	r3, #16
 8003972:	4a14      	ldr	r2, [pc, #80]	; (80039c4 <MPU9250_Init+0x174>)
 8003974:	2103      	movs	r1, #3
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff ff23 	bl	80037c2 <readAK8963Registers>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 800397c:	230a      	movs	r3, #10
 800397e:	2200      	movs	r2, #0
 8003980:	4611      	mov	r1, r2
 8003982:	4618      	mov	r0, r3
 8003984:	f7ff fef6 	bl	8003774 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8003988:	2064      	movs	r0, #100	; 0x64
 800398a:	f001 fa8d 	bl	8004ea8 <HAL_Delay>

	// set AK8963 to 16 bit resolution, 100 Hz update rate
	writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS2);
 800398e:	230a      	movs	r3, #10
 8003990:	2216      	movs	r2, #22
 8003992:	4611      	mov	r1, r2
 8003994:	4618      	mov	r0, r3
 8003996:	f7ff feed 	bl	8003774 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 800399a:	2064      	movs	r0, #100	; 0x64
 800399c:	f001 fa84 	bl	8004ea8 <HAL_Delay>

	// select clock source to gyro
	writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL);
 80039a0:	236b      	movs	r3, #107	; 0x6b
 80039a2:	2201      	movs	r2, #1
 80039a4:	4611      	mov	r1, r2
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7ff febc 	bl	8003724 <writeRegister>

	// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
	readAK8963Registers(AK8963_HXL,7,_buffer);
 80039ac:	2303      	movs	r3, #3
 80039ae:	4a06      	ldr	r2, [pc, #24]	; (80039c8 <MPU9250_Init+0x178>)
 80039b0:	2107      	movs	r1, #7
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7ff ff05 	bl	80037c2 <readAK8963Registers>

	// successful init, return 0
	return 0;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	20000218 	.word	0x20000218
 80039c8:	20000200 	.word	0x20000200

080039cc <MPU9250_GetData>:
	writeRegister(SMPDIV, srd);
}

/* read the data, each argiment should point to a array for x, y, and x */
void MPU9250_GetData(int16_t* AccData, int16_t* MagData, int16_t* GyroData)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
	// grab the data from the MPU9250
	readRegisters(ACCEL_OUT, 21, _buffer);
 80039d8:	233b      	movs	r3, #59	; 0x3b
 80039da:	4a63      	ldr	r2, [pc, #396]	; (8003b68 <MPU9250_GetData+0x19c>)
 80039dc:	2115      	movs	r1, #21
 80039de:	4618      	mov	r0, r3
 80039e0:	f7ff feb5 	bl	800374e <readRegisters>

	// combine into 16 bit values
	AccData[0] = (((int16_t)_buffer[0]) << 8) | _buffer[1];
 80039e4:	4b60      	ldr	r3, [pc, #384]	; (8003b68 <MPU9250_GetData+0x19c>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	021b      	lsls	r3, r3, #8
 80039ea:	b21a      	sxth	r2, r3
 80039ec:	4b5e      	ldr	r3, [pc, #376]	; (8003b68 <MPU9250_GetData+0x19c>)
 80039ee:	785b      	ldrb	r3, [r3, #1]
 80039f0:	b21b      	sxth	r3, r3
 80039f2:	4313      	orrs	r3, r2
 80039f4:	b21a      	sxth	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	801a      	strh	r2, [r3, #0]
	AccData[1] = (((int16_t)_buffer[2]) << 8) | _buffer[3];
 80039fa:	4b5b      	ldr	r3, [pc, #364]	; (8003b68 <MPU9250_GetData+0x19c>)
 80039fc:	789b      	ldrb	r3, [r3, #2]
 80039fe:	021b      	lsls	r3, r3, #8
 8003a00:	b219      	sxth	r1, r3
 8003a02:	4b59      	ldr	r3, [pc, #356]	; (8003b68 <MPU9250_GetData+0x19c>)
 8003a04:	78db      	ldrb	r3, [r3, #3]
 8003a06:	b21a      	sxth	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	3302      	adds	r3, #2
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	b212      	sxth	r2, r2
 8003a10:	801a      	strh	r2, [r3, #0]
	AccData[2] = (((int16_t)_buffer[4]) << 8) | _buffer[5];
 8003a12:	4b55      	ldr	r3, [pc, #340]	; (8003b68 <MPU9250_GetData+0x19c>)
 8003a14:	791b      	ldrb	r3, [r3, #4]
 8003a16:	021b      	lsls	r3, r3, #8
 8003a18:	b219      	sxth	r1, r3
 8003a1a:	4b53      	ldr	r3, [pc, #332]	; (8003b68 <MPU9250_GetData+0x19c>)
 8003a1c:	795b      	ldrb	r3, [r3, #5]
 8003a1e:	b21a      	sxth	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	3304      	adds	r3, #4
 8003a24:	430a      	orrs	r2, r1
 8003a26:	b212      	sxth	r2, r2
 8003a28:	801a      	strh	r2, [r3, #0]
	GyroData[0] = (((int16_t)_buffer[8]) << 8) | _buffer[9];
 8003a2a:	4b4f      	ldr	r3, [pc, #316]	; (8003b68 <MPU9250_GetData+0x19c>)
 8003a2c:	7a1b      	ldrb	r3, [r3, #8]
 8003a2e:	021b      	lsls	r3, r3, #8
 8003a30:	b21a      	sxth	r2, r3
 8003a32:	4b4d      	ldr	r3, [pc, #308]	; (8003b68 <MPU9250_GetData+0x19c>)
 8003a34:	7a5b      	ldrb	r3, [r3, #9]
 8003a36:	b21b      	sxth	r3, r3
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	b21a      	sxth	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	801a      	strh	r2, [r3, #0]
	GyroData[1] = (((int16_t)_buffer[10]) << 8) | _buffer[11];
 8003a40:	4b49      	ldr	r3, [pc, #292]	; (8003b68 <MPU9250_GetData+0x19c>)
 8003a42:	7a9b      	ldrb	r3, [r3, #10]
 8003a44:	021b      	lsls	r3, r3, #8
 8003a46:	b219      	sxth	r1, r3
 8003a48:	4b47      	ldr	r3, [pc, #284]	; (8003b68 <MPU9250_GetData+0x19c>)
 8003a4a:	7adb      	ldrb	r3, [r3, #11]
 8003a4c:	b21a      	sxth	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	3302      	adds	r3, #2
 8003a52:	430a      	orrs	r2, r1
 8003a54:	b212      	sxth	r2, r2
 8003a56:	801a      	strh	r2, [r3, #0]
	GyroData[2] = (((int16_t)_buffer[12]) << 8) | _buffer[13];
 8003a58:	4b43      	ldr	r3, [pc, #268]	; (8003b68 <MPU9250_GetData+0x19c>)
 8003a5a:	7b1b      	ldrb	r3, [r3, #12]
 8003a5c:	021b      	lsls	r3, r3, #8
 8003a5e:	b219      	sxth	r1, r3
 8003a60:	4b41      	ldr	r3, [pc, #260]	; (8003b68 <MPU9250_GetData+0x19c>)
 8003a62:	7b5b      	ldrb	r3, [r3, #13]
 8003a64:	b21a      	sxth	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	3304      	adds	r3, #4
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	b212      	sxth	r2, r2
 8003a6e:	801a      	strh	r2, [r3, #0]

	int16_t magx = (((int16_t)_buffer[15]) << 8) | _buffer[14];
 8003a70:	4b3d      	ldr	r3, [pc, #244]	; (8003b68 <MPU9250_GetData+0x19c>)
 8003a72:	7bdb      	ldrb	r3, [r3, #15]
 8003a74:	021b      	lsls	r3, r3, #8
 8003a76:	b21a      	sxth	r2, r3
 8003a78:	4b3b      	ldr	r3, [pc, #236]	; (8003b68 <MPU9250_GetData+0x19c>)
 8003a7a:	7b9b      	ldrb	r3, [r3, #14]
 8003a7c:	b21b      	sxth	r3, r3
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	82fb      	strh	r3, [r7, #22]
	int16_t magy = (((int16_t)_buffer[17]) << 8) | _buffer[16];
 8003a82:	4b39      	ldr	r3, [pc, #228]	; (8003b68 <MPU9250_GetData+0x19c>)
 8003a84:	7c5b      	ldrb	r3, [r3, #17]
 8003a86:	021b      	lsls	r3, r3, #8
 8003a88:	b21a      	sxth	r2, r3
 8003a8a:	4b37      	ldr	r3, [pc, #220]	; (8003b68 <MPU9250_GetData+0x19c>)
 8003a8c:	7c1b      	ldrb	r3, [r3, #16]
 8003a8e:	b21b      	sxth	r3, r3
 8003a90:	4313      	orrs	r3, r2
 8003a92:	82bb      	strh	r3, [r7, #20]
	int16_t magz = (((int16_t)_buffer[19]) << 8) | _buffer[18];
 8003a94:	4b34      	ldr	r3, [pc, #208]	; (8003b68 <MPU9250_GetData+0x19c>)
 8003a96:	7cdb      	ldrb	r3, [r3, #19]
 8003a98:	021b      	lsls	r3, r3, #8
 8003a9a:	b21a      	sxth	r2, r3
 8003a9c:	4b32      	ldr	r3, [pc, #200]	; (8003b68 <MPU9250_GetData+0x19c>)
 8003a9e:	7c9b      	ldrb	r3, [r3, #18]
 8003aa0:	b21b      	sxth	r3, r3
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	827b      	strh	r3, [r7, #18]

	MagData[0] = (int16_t)((float)magx * ((float)(_mag_adjust[0] - 128) / 256.0f + 1.0f));
 8003aa6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003aaa:	ee07 3a90 	vmov	s15, r3
 8003aae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ab2:	4b2e      	ldr	r3, [pc, #184]	; (8003b6c <MPU9250_GetData+0x1a0>)
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	3b80      	subs	r3, #128	; 0x80
 8003ab8:	ee07 3a90 	vmov	s15, r3
 8003abc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003ac0:	ed9f 6a2b 	vldr	s12, [pc, #172]	; 8003b70 <MPU9250_GetData+0x1a4>
 8003ac4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003ac8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003acc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ad0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ad4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ad8:	ee17 3a90 	vmov	r3, s15
 8003adc:	b21a      	sxth	r2, r3
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	801a      	strh	r2, [r3, #0]
	MagData[1] = (int16_t)((float)magy * ((float)(_mag_adjust[1] - 128) / 256.0f + 1.0f));
 8003ae2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003ae6:	ee07 3a90 	vmov	s15, r3
 8003aea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003aee:	4b1f      	ldr	r3, [pc, #124]	; (8003b6c <MPU9250_GetData+0x1a0>)
 8003af0:	785b      	ldrb	r3, [r3, #1]
 8003af2:	3b80      	subs	r3, #128	; 0x80
 8003af4:	ee07 3a90 	vmov	s15, r3
 8003af8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003afc:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8003b70 <MPU9250_GetData+0x1a4>
 8003b00:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003b04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	3302      	adds	r3, #2
 8003b14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b18:	ee17 2a90 	vmov	r2, s15
 8003b1c:	b212      	sxth	r2, r2
 8003b1e:	801a      	strh	r2, [r3, #0]
	MagData[2] = (int16_t)((float)magz * ((float)(_mag_adjust[2] - 128) / 256.0f + 1.0f));
 8003b20:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003b24:	ee07 3a90 	vmov	s15, r3
 8003b28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b2c:	4b0f      	ldr	r3, [pc, #60]	; (8003b6c <MPU9250_GetData+0x1a0>)
 8003b2e:	789b      	ldrb	r3, [r3, #2]
 8003b30:	3b80      	subs	r3, #128	; 0x80
 8003b32:	ee07 3a90 	vmov	s15, r3
 8003b36:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003b3a:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 8003b70 <MPU9250_GetData+0x1a4>
 8003b3e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003b42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	3304      	adds	r3, #4
 8003b52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b56:	ee17 2a90 	vmov	r2, s15
 8003b5a:	b212      	sxth	r2, r2
 8003b5c:	801a      	strh	r2, [r3, #0]
}
 8003b5e:	bf00      	nop
 8003b60:	3718      	adds	r7, #24
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	20000200 	.word	0x20000200
 8003b6c:	20000218 	.word	0x20000218
 8003b70:	43800000 	.word	0x43800000

08003b74 <__io_putchar>:
			}
	}
		HAL_UART_Transmit(&huart3, EndMSG, sizeof(EndMSG), 10000);
};

int __io_putchar(int ch){
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
	if(ch == '\n')
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b0a      	cmp	r3, #10
 8003b80:	d106      	bne.n	8003b90 <__io_putchar+0x1c>
	{
		HAL_UART_Transmit(&huart3, (uint8_t*)"\r", 1, HAL_MAX_DELAY);
 8003b82:	f04f 33ff 	mov.w	r3, #4294967295
 8003b86:	2201      	movs	r2, #1
 8003b88:	4907      	ldr	r1, [pc, #28]	; (8003ba8 <__io_putchar+0x34>)
 8003b8a:	4808      	ldr	r0, [pc, #32]	; (8003bac <__io_putchar+0x38>)
 8003b8c:	f005 fdb1 	bl	80096f2 <HAL_UART_Transmit>
	}
	HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8003b90:	1d39      	adds	r1, r7, #4
 8003b92:	f04f 33ff 	mov.w	r3, #4294967295
 8003b96:	2201      	movs	r2, #1
 8003b98:	4804      	ldr	r0, [pc, #16]	; (8003bac <__io_putchar+0x38>)
 8003b9a:	f005 fdaa 	bl	80096f2 <HAL_UART_Transmit>
	return 1;
 8003b9e:	2301      	movs	r3, #1
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3708      	adds	r7, #8
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	08012440 	.word	0x08012440
 8003bac:	20003fbc 	.word	0x20003fbc

08003bb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003bb6:	4b10      	ldr	r3, [pc, #64]	; (8003bf8 <MX_DMA_Init+0x48>)
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bba:	4a0f      	ldr	r2, [pc, #60]	; (8003bf8 <MX_DMA_Init+0x48>)
 8003bbc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8003bc2:	4b0d      	ldr	r3, [pc, #52]	; (8003bf8 <MX_DMA_Init+0x48>)
 8003bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bca:	607b      	str	r3, [r7, #4]
 8003bcc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8003bce:	2200      	movs	r2, #0
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	203b      	movs	r0, #59	; 0x3b
 8003bd4:	f001 fa67 	bl	80050a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8003bd8:	203b      	movs	r0, #59	; 0x3b
 8003bda:	f001 fa80 	bl	80050de <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8003bde:	2200      	movs	r2, #0
 8003be0:	2100      	movs	r1, #0
 8003be2:	2045      	movs	r0, #69	; 0x45
 8003be4:	f001 fa5f 	bl	80050a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8003be8:	2045      	movs	r0, #69	; 0x45
 8003bea:	f001 fa78 	bl	80050de <HAL_NVIC_EnableIRQ>

}
 8003bee:	bf00      	nop
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	40023800 	.word	0x40023800

08003bfc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b088      	sub	sp, #32
 8003c00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c02:	f107 030c 	add.w	r3, r7, #12
 8003c06:	2200      	movs	r2, #0
 8003c08:	601a      	str	r2, [r3, #0]
 8003c0a:	605a      	str	r2, [r3, #4]
 8003c0c:	609a      	str	r2, [r3, #8]
 8003c0e:	60da      	str	r2, [r3, #12]
 8003c10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c12:	4b1a      	ldr	r3, [pc, #104]	; (8003c7c <MX_GPIO_Init+0x80>)
 8003c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c16:	4a19      	ldr	r2, [pc, #100]	; (8003c7c <MX_GPIO_Init+0x80>)
 8003c18:	f043 0308 	orr.w	r3, r3, #8
 8003c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c1e:	4b17      	ldr	r3, [pc, #92]	; (8003c7c <MX_GPIO_Init+0x80>)
 8003c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c22:	f003 0308 	and.w	r3, r3, #8
 8003c26:	60bb      	str	r3, [r7, #8]
 8003c28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c2a:	4b14      	ldr	r3, [pc, #80]	; (8003c7c <MX_GPIO_Init+0x80>)
 8003c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2e:	4a13      	ldr	r2, [pc, #76]	; (8003c7c <MX_GPIO_Init+0x80>)
 8003c30:	f043 0304 	orr.w	r3, r3, #4
 8003c34:	6313      	str	r3, [r2, #48]	; 0x30
 8003c36:	4b11      	ldr	r3, [pc, #68]	; (8003c7c <MX_GPIO_Init+0x80>)
 8003c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3a:	f003 0304 	and.w	r3, r3, #4
 8003c3e:	607b      	str	r3, [r7, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c42:	4b0e      	ldr	r3, [pc, #56]	; (8003c7c <MX_GPIO_Init+0x80>)
 8003c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c46:	4a0d      	ldr	r2, [pc, #52]	; (8003c7c <MX_GPIO_Init+0x80>)
 8003c48:	f043 0302 	orr.w	r3, r3, #2
 8003c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c4e:	4b0b      	ldr	r3, [pc, #44]	; (8003c7c <MX_GPIO_Init+0x80>)
 8003c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	603b      	str	r3, [r7, #0]
 8003c58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003c5a:	2380      	movs	r3, #128	; 0x80
 8003c5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c62:	2300      	movs	r3, #0
 8003c64:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c66:	f107 030c 	add.w	r3, r7, #12
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	4804      	ldr	r0, [pc, #16]	; (8003c80 <MX_GPIO_Init+0x84>)
 8003c6e:	f001 fdf7 	bl	8005860 <HAL_GPIO_Init>

}
 8003c72:	bf00      	nop
 8003c74:	3720      	adds	r7, #32
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	40023800 	.word	0x40023800
 8003c80:	40020800 	.word	0x40020800

08003c84 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003c88:	4b1b      	ldr	r3, [pc, #108]	; (8003cf8 <MX_I2C1_Init+0x74>)
 8003c8a:	4a1c      	ldr	r2, [pc, #112]	; (8003cfc <MX_I2C1_Init+0x78>)
 8003c8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100413;
 8003c8e:	4b1a      	ldr	r3, [pc, #104]	; (8003cf8 <MX_I2C1_Init+0x74>)
 8003c90:	4a1b      	ldr	r2, [pc, #108]	; (8003d00 <MX_I2C1_Init+0x7c>)
 8003c92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003c94:	4b18      	ldr	r3, [pc, #96]	; (8003cf8 <MX_I2C1_Init+0x74>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c9a:	4b17      	ldr	r3, [pc, #92]	; (8003cf8 <MX_I2C1_Init+0x74>)
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ca0:	4b15      	ldr	r3, [pc, #84]	; (8003cf8 <MX_I2C1_Init+0x74>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003ca6:	4b14      	ldr	r3, [pc, #80]	; (8003cf8 <MX_I2C1_Init+0x74>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003cac:	4b12      	ldr	r3, [pc, #72]	; (8003cf8 <MX_I2C1_Init+0x74>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003cb2:	4b11      	ldr	r3, [pc, #68]	; (8003cf8 <MX_I2C1_Init+0x74>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003cb8:	4b0f      	ldr	r3, [pc, #60]	; (8003cf8 <MX_I2C1_Init+0x74>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003cbe:	480e      	ldr	r0, [pc, #56]	; (8003cf8 <MX_I2C1_Init+0x74>)
 8003cc0:	f001 ff7a 	bl	8005bb8 <HAL_I2C_Init>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003cca:	f000 fd8f 	bl	80047ec <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003cce:	2100      	movs	r1, #0
 8003cd0:	4809      	ldr	r0, [pc, #36]	; (8003cf8 <MX_I2C1_Init+0x74>)
 8003cd2:	f003 f841 	bl	8006d58 <HAL_I2CEx_ConfigAnalogFilter>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003cdc:	f000 fd86 	bl	80047ec <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	4805      	ldr	r0, [pc, #20]	; (8003cf8 <MX_I2C1_Init+0x74>)
 8003ce4:	f003 f883 	bl	8006dee <HAL_I2CEx_ConfigDigitalFilter>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003cee:	f000 fd7d 	bl	80047ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003cf2:	bf00      	nop
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	2000021c 	.word	0x2000021c
 8003cfc:	40005400 	.word	0x40005400
 8003d00:	00100413 	.word	0x00100413

08003d04 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b08a      	sub	sp, #40	; 0x28
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d0c:	f107 0314 	add.w	r3, r7, #20
 8003d10:	2200      	movs	r2, #0
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	605a      	str	r2, [r3, #4]
 8003d16:	609a      	str	r2, [r3, #8]
 8003d18:	60da      	str	r2, [r3, #12]
 8003d1a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a17      	ldr	r2, [pc, #92]	; (8003d80 <HAL_I2C_MspInit+0x7c>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d128      	bne.n	8003d78 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d26:	4b17      	ldr	r3, [pc, #92]	; (8003d84 <HAL_I2C_MspInit+0x80>)
 8003d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2a:	4a16      	ldr	r2, [pc, #88]	; (8003d84 <HAL_I2C_MspInit+0x80>)
 8003d2c:	f043 0302 	orr.w	r3, r3, #2
 8003d30:	6313      	str	r3, [r2, #48]	; 0x30
 8003d32:	4b14      	ldr	r3, [pc, #80]	; (8003d84 <HAL_I2C_MspInit+0x80>)
 8003d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	613b      	str	r3, [r7, #16]
 8003d3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003d3e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d44:	2312      	movs	r3, #18
 8003d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003d50:	2304      	movs	r3, #4
 8003d52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d54:	f107 0314 	add.w	r3, r7, #20
 8003d58:	4619      	mov	r1, r3
 8003d5a:	480b      	ldr	r0, [pc, #44]	; (8003d88 <HAL_I2C_MspInit+0x84>)
 8003d5c:	f001 fd80 	bl	8005860 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003d60:	4b08      	ldr	r3, [pc, #32]	; (8003d84 <HAL_I2C_MspInit+0x80>)
 8003d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d64:	4a07      	ldr	r2, [pc, #28]	; (8003d84 <HAL_I2C_MspInit+0x80>)
 8003d66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d6a:	6413      	str	r3, [r2, #64]	; 0x40
 8003d6c:	4b05      	ldr	r3, [pc, #20]	; (8003d84 <HAL_I2C_MspInit+0x80>)
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d74:	60fb      	str	r3, [r7, #12]
 8003d76:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003d78:	bf00      	nop
 8003d7a:	3728      	adds	r7, #40	; 0x28
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	40005400 	.word	0x40005400
 8003d84:	40023800 	.word	0x40023800
 8003d88:	40020400 	.word	0x40020400

08003d8c <mlxInit>:
	float emissivity;

}MLX;
MLX mlx;
int mlxInit()
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
		static uint16_t eeMLX90640[832];
		HAL_Delay(200);
 8003d92:	20c8      	movs	r0, #200	; 0xc8
 8003d94:	f001 f888 	bl	8004ea8 <HAL_Delay>
		MLX90640_SetRefreshRate(MLX90640_ADDR, RefreshRate);
 8003d98:	2104      	movs	r1, #4
 8003d9a:	2033      	movs	r0, #51	; 0x33
 8003d9c:	f7fc ff37 	bl	8000c0e <MLX90640_SetRefreshRate>
	  	MLX90640_SetChessMode(MLX90640_ADDR);
 8003da0:	2033      	movs	r0, #51	; 0x33
 8003da2:	f7fc ff63 	bl	8000c6c <MLX90640_SetChessMode>
	  	mlx.emissivity = 0.95;
 8003da6:	4b10      	ldr	r3, [pc, #64]	; (8003de8 <mlxInit+0x5c>)
 8003da8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003dac:	f603 7304 	addw	r3, r3, #3844	; 0xf04
 8003db0:	4a0e      	ldr	r2, [pc, #56]	; (8003dec <mlxInit+0x60>)
 8003db2:	601a      	str	r2, [r3, #0]
	    int status = MLX90640_DumpEE(MLX90640_ADDR, eeMLX90640);
 8003db4:	490e      	ldr	r1, [pc, #56]	; (8003df0 <mlxInit+0x64>)
 8003db6:	2033      	movs	r0, #51	; 0x33
 8003db8:	f7fc fe20 	bl	80009fc <MLX90640_DumpEE>
 8003dbc:	6078      	str	r0, [r7, #4]
	    if (status != 0) return status;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d001      	beq.n	8003dc8 <mlxInit+0x3c>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	e00a      	b.n	8003dde <mlxInit+0x52>
	    status = MLX90640_ExtractParameters(eeMLX90640, &mlx.mlx90640);
 8003dc8:	490a      	ldr	r1, [pc, #40]	; (8003df4 <mlxInit+0x68>)
 8003dca:	4809      	ldr	r0, [pc, #36]	; (8003df0 <mlxInit+0x64>)
 8003dcc:	f7fc feda 	bl	8000b84 <MLX90640_ExtractParameters>
 8003dd0:	6078      	str	r0, [r7, #4]
	    if (status != 0) return status;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d001      	beq.n	8003ddc <mlxInit+0x50>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	e000      	b.n	8003dde <mlxInit+0x52>

	    return 0;
 8003ddc:	2300      	movs	r3, #0

}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	200008ec 	.word	0x200008ec
 8003dec:	3f733333 	.word	0x3f733333
 8003df0:	200037f4 	.word	0x200037f4
 8003df4:	2000196c 	.word	0x2000196c

08003df8 <mlxGetData>:
int mlxGetData(){
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
	int status = MLX90640_GetFrameData(MLX90640_ADDR, frame);
 8003dfe:	4934      	ldr	r1, [pc, #208]	; (8003ed0 <mlxGetData+0xd8>)
 8003e00:	2033      	movs	r0, #51	; 0x33
 8003e02:	f7fc fe0f 	bl	8000a24 <MLX90640_GetFrameData>
 8003e06:	6078      	str	r0, [r7, #4]
	if (status < 0)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	da04      	bge.n	8003e18 <mlxGetData+0x20>
	{
		printf("Error!\n");
 8003e0e:	4831      	ldr	r0, [pc, #196]	; (8003ed4 <mlxGetData+0xdc>)
 8003e10:	f00a faa8 	bl	800e364 <puts>
		return status;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	e057      	b.n	8003ec8 <mlxGetData+0xd0>
	}

	mlx.vdd = MLX90640_GetVdd(frame, &mlx.mlx90640);
 8003e18:	492f      	ldr	r1, [pc, #188]	; (8003ed8 <mlxGetData+0xe0>)
 8003e1a:	482d      	ldr	r0, [pc, #180]	; (8003ed0 <mlxGetData+0xd8>)
 8003e1c:	f7fd fb8c 	bl	8001538 <MLX90640_GetVdd>
 8003e20:	eef0 7a40 	vmov.f32	s15, s0
 8003e24:	4b2d      	ldr	r3, [pc, #180]	; (8003edc <mlxGetData+0xe4>)
 8003e26:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003e2a:	f503 6370 	add.w	r3, r3, #3840	; 0xf00
 8003e2e:	edc3 7a00 	vstr	s15, [r3]
	mlx.ambientTemp = MLX90640_GetTa(frame, &mlx.mlx90640) - TA_SHIFT;
 8003e32:	4929      	ldr	r1, [pc, #164]	; (8003ed8 <mlxGetData+0xe0>)
 8003e34:	4826      	ldr	r0, [pc, #152]	; (8003ed0 <mlxGetData+0xd8>)
 8003e36:	f7fd fbf9 	bl	800162c <MLX90640_GetTa>
 8003e3a:	eef0 7a40 	vmov.f32	s15, s0
 8003e3e:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8003e42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003e46:	4b25      	ldr	r3, [pc, #148]	; (8003edc <mlxGetData+0xe4>)
 8003e48:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003e4c:	f603 63fc 	addw	r3, r3, #3836	; 0xefc
 8003e50:	edc3 7a00 	vstr	s15, [r3]

	MLX90640_CalculateTo(frame, &mlx.mlx90640, mlx.emissivity , mlx.ambientTemp, mlx.data);
 8003e54:	4b21      	ldr	r3, [pc, #132]	; (8003edc <mlxGetData+0xe4>)
 8003e56:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003e5a:	f603 7304 	addw	r3, r3, #3844	; 0xf04
 8003e5e:	edd3 7a00 	vldr	s15, [r3]
 8003e62:	4b1e      	ldr	r3, [pc, #120]	; (8003edc <mlxGetData+0xe4>)
 8003e64:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003e68:	f603 63fc 	addw	r3, r3, #3836	; 0xefc
 8003e6c:	ed93 7a00 	vldr	s14, [r3]
 8003e70:	4a1b      	ldr	r2, [pc, #108]	; (8003ee0 <mlxGetData+0xe8>)
 8003e72:	eef0 0a47 	vmov.f32	s1, s14
 8003e76:	eeb0 0a67 	vmov.f32	s0, s15
 8003e7a:	4917      	ldr	r1, [pc, #92]	; (8003ed8 <mlxGetData+0xe0>)
 8003e7c:	4814      	ldr	r0, [pc, #80]	; (8003ed0 <mlxGetData+0xd8>)
 8003e7e:	f7fc ff1b 	bl	8000cb8 <MLX90640_CalculateTo>
	status = MLX90640_GetFrameData(MLX90640_ADDR, frame);
 8003e82:	4913      	ldr	r1, [pc, #76]	; (8003ed0 <mlxGetData+0xd8>)
 8003e84:	2033      	movs	r0, #51	; 0x33
 8003e86:	f7fc fdcd 	bl	8000a24 <MLX90640_GetFrameData>
 8003e8a:	6078      	str	r0, [r7, #4]
			if(status < 0)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	da02      	bge.n	8003e98 <mlxGetData+0xa0>
			{
				printf("Error!\n");
 8003e92:	4810      	ldr	r0, [pc, #64]	; (8003ed4 <mlxGetData+0xdc>)
 8003e94:	f00a fa66 	bl	800e364 <puts>
			}
	MLX90640_CalculateTo(frame, &mlx.mlx90640, mlx.emissivity , mlx.ambientTemp, mlx.data);
 8003e98:	4b10      	ldr	r3, [pc, #64]	; (8003edc <mlxGetData+0xe4>)
 8003e9a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003e9e:	f603 7304 	addw	r3, r3, #3844	; 0xf04
 8003ea2:	edd3 7a00 	vldr	s15, [r3]
 8003ea6:	4b0d      	ldr	r3, [pc, #52]	; (8003edc <mlxGetData+0xe4>)
 8003ea8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003eac:	f603 63fc 	addw	r3, r3, #3836	; 0xefc
 8003eb0:	ed93 7a00 	vldr	s14, [r3]
 8003eb4:	4a0a      	ldr	r2, [pc, #40]	; (8003ee0 <mlxGetData+0xe8>)
 8003eb6:	eef0 0a47 	vmov.f32	s1, s14
 8003eba:	eeb0 0a67 	vmov.f32	s0, s15
 8003ebe:	4906      	ldr	r1, [pc, #24]	; (8003ed8 <mlxGetData+0xe0>)
 8003ec0:	4803      	ldr	r0, [pc, #12]	; (8003ed0 <mlxGetData+0xd8>)
 8003ec2:	f7fc fef9 	bl	8000cb8 <MLX90640_CalculateTo>
	return 0;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3708      	adds	r7, #8
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	20000268 	.word	0x20000268
 8003ed4:	08012444 	.word	0x08012444
 8003ed8:	2000196c 	.word	0x2000196c
 8003edc:	200008ec 	.word	0x200008ec
 8003ee0:	20002be8 	.word	0x20002be8
 8003ee4:	00000000 	.word	0x00000000

08003ee8 <imu_9dof_convert>:
	double acc_data_calc[3];
	double gyro_data_calc[3];
};

void imu_9dof_convert(struct imu_9dof * input, struct imu_9dof_calc * output)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
	output->acc_data_calc[0] = (double) input->acc_data[0] / 16384;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ef8:	ee07 3a90 	vmov	s15, r3
 8003efc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003f00:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 8003fc0 <imu_9dof_convert+0xd8>
 8003f04:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	ed83 7b00 	vstr	d7, [r3]
	output->acc_data_calc[1] = (double) input->acc_data[1] / 16384;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003f14:	ee07 3a90 	vmov	s15, r3
 8003f18:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003f1c:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8003fc0 <imu_9dof_convert+0xd8>
 8003f20:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	ed83 7b02 	vstr	d7, [r3, #8]
	output->acc_data_calc[2] = (double) input->acc_data[2] / 16384;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003f30:	ee07 3a90 	vmov	s15, r3
 8003f34:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003f38:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8003fc0 <imu_9dof_convert+0xd8>
 8003f3c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	ed83 7b04 	vstr	d7, [r3, #16]
	output->gyro_data_calc[0] = (double) input->gyro_data[0] * 250 / 32768;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003f4c:	ee07 3a90 	vmov	s15, r3
 8003f50:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003f54:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8003fc8 <imu_9dof_convert+0xe0>
 8003f58:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003f5c:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8003fd0 <imu_9dof_convert+0xe8>
 8003f60:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	ed83 7b06 	vstr	d7, [r3, #24]
	output->gyro_data_calc[1] = (double) input->gyro_data[1] * 250 / 32768;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003f70:	ee07 3a90 	vmov	s15, r3
 8003f74:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003f78:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8003fc8 <imu_9dof_convert+0xe0>
 8003f7c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003f80:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8003fd0 <imu_9dof_convert+0xe8>
 8003f84:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	ed83 7b08 	vstr	d7, [r3, #32]
	output->gyro_data_calc[2] = (double) input->gyro_data[2] * 250 / 32768;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003f94:	ee07 3a90 	vmov	s15, r3
 8003f98:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003f9c:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8003fc8 <imu_9dof_convert+0xe0>
 8003fa0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003fa4:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8003fd0 <imu_9dof_convert+0xe8>
 8003fa8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
}
 8003fb2:	bf00      	nop
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	00000000 	.word	0x00000000
 8003fc4:	40d00000 	.word	0x40d00000
 8003fc8:	00000000 	.word	0x00000000
 8003fcc:	406f4000 	.word	0x406f4000
 8003fd0:	00000000 	.word	0x00000000
 8003fd4:	40e00000 	.word	0x40e00000

08003fd8 <imu_9dof_get_data>:

void imu_9dof_get_data(struct imu_9dof * imu_9dof_data, struct imu_9dof_calc * imu_9dof_calculated)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
    MPU9250_GetData(imu_9dof_data->acc_data, imu_9dof_data->mag_data, imu_9dof_data->gyro_data);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	1d99      	adds	r1, r3, #6
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	330c      	adds	r3, #12
 8003fec:	461a      	mov	r2, r3
 8003fee:	f7ff fced 	bl	80039cc <MPU9250_GetData>
    imu_9dof_convert(imu_9dof_data, imu_9dof_calculated);
 8003ff2:	6839      	ldr	r1, [r7, #0]
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f7ff ff77 	bl	8003ee8 <imu_9dof_convert>
}
 8003ffa:	bf00      	nop
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
	...

08004004 <createHeader>:
int createHeader(FIL * file,char * path)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b08c      	sub	sp, #48	; 0x30
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
	FRESULT fres;
	int bytesWritten = 0;
 800400e:	2300      	movs	r3, #0
 8004010:	627b      	str	r3, [r7, #36]	; 0x24
	fres = f_write(file,"timestamp,",strlen("timestamp,"),&bytesWritten);
 8004012:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004016:	220a      	movs	r2, #10
 8004018:	4939      	ldr	r1, [pc, #228]	; (8004100 <createHeader+0xfc>)
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f008 fff8 	bl	800d010 <f_write>
 8004020:	4603      	mov	r3, r0
 8004022:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	if(fres != FR_OK){
 8004026:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800402a:	2b00      	cmp	r3, #0
 800402c:	d006      	beq.n	800403c <createHeader+0x38>
		printf("Error while creating %s header",path);
 800402e:	6839      	ldr	r1, [r7, #0]
 8004030:	4834      	ldr	r0, [pc, #208]	; (8004104 <createHeader+0x100>)
 8004032:	f00a f911 	bl	800e258 <iprintf>
		return -1;
 8004036:	f04f 33ff 	mov.w	r3, #4294967295
 800403a:	e05d      	b.n	80040f8 <createHeader+0xf4>
	}
	if(strcmp(path,"GYRO.csv") == 0){
 800403c:	4932      	ldr	r1, [pc, #200]	; (8004108 <createHeader+0x104>)
 800403e:	6838      	ldr	r0, [r7, #0]
 8004040:	f7fc f8fe 	bl	8000240 <strcmp>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d114      	bne.n	8004074 <createHeader+0x70>
		fres = f_write(file, "number,gyro_x,gyro_y,gyro_z,acc_x,acc_y,acc_z\r\n", strlen("timestamp,number,gyro_x,gyro_y,gyro_z,acc_x,acc_y,acc_z\r\n"), &bytesWritten);
 800404a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800404e:	2239      	movs	r2, #57	; 0x39
 8004050:	492e      	ldr	r1, [pc, #184]	; (800410c <createHeader+0x108>)
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f008 ffdc 	bl	800d010 <f_write>
 8004058:	4603      	mov	r3, r0
 800405a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		if(fres != FR_OK)
 800405e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004062:	2b00      	cmp	r3, #0
 8004064:	d03d      	beq.n	80040e2 <createHeader+0xde>
		{
			printf("Error while creating %s header\n",path);
 8004066:	6839      	ldr	r1, [r7, #0]
 8004068:	4829      	ldr	r0, [pc, #164]	; (8004110 <createHeader+0x10c>)
 800406a:	f00a f8f5 	bl	800e258 <iprintf>
			return -1;
 800406e:	f04f 33ff 	mov.w	r3, #4294967295
 8004072:	e041      	b.n	80040f8 <createHeader+0xf4>
		}
	}else if(strcmp(path,"MLX.csv") == 0){
 8004074:	4927      	ldr	r1, [pc, #156]	; (8004114 <createHeader+0x110>)
 8004076:	6838      	ldr	r0, [r7, #0]
 8004078:	f7fc f8e2 	bl	8000240 <strcmp>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d12c      	bne.n	80040dc <createHeader+0xd8>
		char headerData[25];

		for(int i=0;i<784;i++){
 8004082:	2300      	movs	r3, #0
 8004084:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004086:	e024      	b.n	80040d2 <createHeader+0xce>
			sprintf(headerData,"float_%d,", i);
 8004088:	f107 0308 	add.w	r3, r7, #8
 800408c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800408e:	4922      	ldr	r1, [pc, #136]	; (8004118 <createHeader+0x114>)
 8004090:	4618      	mov	r0, r3
 8004092:	f00a f975 	bl	800e380 <siprintf>
			fres =  f_write(file, headerData, strlen(headerData), &bytesWritten);
 8004096:	f107 0308 	add.w	r3, r7, #8
 800409a:	4618      	mov	r0, r3
 800409c:	f7fc f8da 	bl	8000254 <strlen>
 80040a0:	4602      	mov	r2, r0
 80040a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040a6:	f107 0108 	add.w	r1, r7, #8
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f008 ffb0 	bl	800d010 <f_write>
 80040b0:	4603      	mov	r3, r0
 80040b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			if(fres != FR_OK){
 80040b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d006      	beq.n	80040cc <createHeader+0xc8>
				printf("Error while creating %s header\n",path);
 80040be:	6839      	ldr	r1, [r7, #0]
 80040c0:	4813      	ldr	r0, [pc, #76]	; (8004110 <createHeader+0x10c>)
 80040c2:	f00a f8c9 	bl	800e258 <iprintf>
				return -1;
 80040c6:	f04f 33ff 	mov.w	r3, #4294967295
 80040ca:	e015      	b.n	80040f8 <createHeader+0xf4>
		for(int i=0;i<784;i++){
 80040cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ce:	3301      	adds	r3, #1
 80040d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d4:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 80040d8:	dbd6      	blt.n	8004088 <createHeader+0x84>
 80040da:	e002      	b.n	80040e2 <createHeader+0xde>
			}
		}

	}else
	{
		return -2;
 80040dc:	f06f 0301 	mvn.w	r3, #1
 80040e0:	e00a      	b.n	80040f8 <createHeader+0xf4>
	}
	fres =  f_write(file, "\n", strlen("\n"), &bytesWritten);
 80040e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040e6:	2201      	movs	r2, #1
 80040e8:	490c      	ldr	r1, [pc, #48]	; (800411c <createHeader+0x118>)
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f008 ff90 	bl	800d010 <f_write>
 80040f0:	4603      	mov	r3, r0
 80040f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	return 1;
 80040f6:	2301      	movs	r3, #1

}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3730      	adds	r7, #48	; 0x30
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	08012458 	.word	0x08012458
 8004104:	08012464 	.word	0x08012464
 8004108:	08012484 	.word	0x08012484
 800410c:	08012490 	.word	0x08012490
 8004110:	080124c0 	.word	0x080124c0
 8004114:	080124e0 	.word	0x080124e0
 8004118:	080124e8 	.word	0x080124e8
 800411c:	080124f4 	.word	0x080124f4

08004120 <openFile>:

void openFile(FIL * file, char * path, BYTE mode)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b08c      	sub	sp, #48	; 0x30
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	4613      	mov	r3, r2
 800412c:	71fb      	strb	r3, [r7, #7]
	FILINFO fInfo;
	FRESULT fres = f_stat(path, &fInfo);
 800412e:	f107 0314 	add.w	r3, r7, #20
 8004132:	4619      	mov	r1, r3
 8004134:	68b8      	ldr	r0, [r7, #8]
 8004136:	f009 f97d 	bl	800d434 <f_stat>
 800413a:	4603      	mov	r3, r0
 800413c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if(fres == FR_OK)
 8004140:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004144:	2b00      	cmp	r3, #0
 8004146:	d111      	bne.n	800416c <openFile+0x4c>
	{
		fres = f_open(file, path, mode);
 8004148:	79fb      	ldrb	r3, [r7, #7]
 800414a:	461a      	mov	r2, r3
 800414c:	68b9      	ldr	r1, [r7, #8]
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f008 fd92 	bl	800cc78 <f_open>
 8004154:	4603      	mov	r3, r0
 8004156:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if(fres == FR_OK)
 800415a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800415e:	2b00      	cmp	r3, #0
 8004160:	d11d      	bne.n	800419e <openFile+0x7e>
		{
			printf("Opening file: %s succeeded\n", path);
 8004162:	68b9      	ldr	r1, [r7, #8]
 8004164:	4811      	ldr	r0, [pc, #68]	; (80041ac <openFile+0x8c>)
 8004166:	f00a f877 	bl	800e258 <iprintf>
 800416a:	e018      	b.n	800419e <openFile+0x7e>
		}
	}else if(fres == FR_NO_FILE)
 800416c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004170:	2b04      	cmp	r3, #4
 8004172:	d114      	bne.n	800419e <openFile+0x7e>
	{
		fres = f_open(file, path, mode);
 8004174:	79fb      	ldrb	r3, [r7, #7]
 8004176:	461a      	mov	r2, r3
 8004178:	68b9      	ldr	r1, [r7, #8]
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f008 fd7c 	bl	800cc78 <f_open>
 8004180:	4603      	mov	r3, r0
 8004182:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if(fres == FR_OK)
 8004186:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800418a:	2b00      	cmp	r3, #0
 800418c:	d107      	bne.n	800419e <openFile+0x7e>
		{
			createHeader(file,path);
 800418e:	68b9      	ldr	r1, [r7, #8]
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f7ff ff37 	bl	8004004 <createHeader>
			printf("No file: %s, created new\n", path);
 8004196:	68b9      	ldr	r1, [r7, #8]
 8004198:	4805      	ldr	r0, [pc, #20]	; (80041b0 <openFile+0x90>)
 800419a:	f00a f85d 	bl	800e258 <iprintf>
		}
	}
	f_sync(file);
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f009 f8ca 	bl	800d338 <f_sync>


}
 80041a4:	bf00      	nop
 80041a6:	3730      	adds	r7, #48	; 0x30
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	080124f8 	.word	0x080124f8
 80041b0:	08012514 	.word	0x08012514

080041b4 <mountFailHandler>:
void mountFailHandler()
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	af00      	add	r7, sp, #0
	printf("SDCard mount failed\n");
 80041b8:	4802      	ldr	r0, [pc, #8]	; (80041c4 <mountFailHandler+0x10>)
 80041ba:	f00a f8d3 	bl	800e364 <puts>
}
 80041be:	bf00      	nop
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	08012530 	.word	0x08012530

080041c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	f5ad 5d48 	sub.w	sp, sp, #12800	; 0x3200
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80041d2:	f000 fe0c 	bl	8004dee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80041d6:	f000 fa75 	bl	80046c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80041da:	f7ff fd0f 	bl	8003bfc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80041de:	f000 fd69 	bl	8004cb4 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 80041e2:	f006 fca3 	bl	800ab2c <MX_FATFS_Init>
  MX_DMA_Init();
 80041e6:	f7ff fce3 	bl	8003bb0 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 80041ea:	f000 fb05 	bl	80047f8 <MX_SDMMC1_SD_Init>
  MX_I2C1_Init();
 80041ee:	f7ff fd49 	bl	8003c84 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  int res = mlxInit();
 80041f2:	f7ff fdcb 	bl	8003d8c <mlxInit>
 80041f6:	f243 13fc 	movw	r3, #12796	; 0x31fc
 80041fa:	443b      	add	r3, r7
 80041fc:	6018      	str	r0, [r3, #0]
  if(res != 0)
 80041fe:	f243 13fc 	movw	r3, #12796	; 0x31fc
 8004202:	443b      	add	r3, r7
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d002      	beq.n	8004210 <main+0x48>
  {
    printf("Error while initializing mlx!\n");
 800420a:	48cb      	ldr	r0, [pc, #812]	; (8004538 <main+0x370>)
 800420c:	f00a f8aa 	bl	800e364 <puts>
  FIL MLXFIL;

  UINT writedBytes;
  struct imu_9dof imu_9dof_data;
  struct imu_9dof_calc imu_9dof_calculated;
  MPU9250_Init();
 8004210:	f7ff fb1e 	bl	8003850 <MPU9250_Init>
  char testdata[255];
  FRESULT fres = 0;
 8004214:	2300      	movs	r3, #0
 8004216:	f243 12fb 	movw	r2, #12795	; 0x31fb
 800421a:	443a      	add	r2, r7
 800421c:	7013      	strb	r3, [r2, #0]

  HAL_Delay(1000);
 800421e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004222:	f000 fe41 	bl	8004ea8 <HAL_Delay>

  if (f_mount(&fileSystem, "", 1) == FR_OK)
 8004226:	4bc5      	ldr	r3, [pc, #788]	; (800453c <main+0x374>)
 8004228:	f503 5348 	add.w	r3, r3, #12800	; 0x3200
 800422c:	f103 0310 	add.w	r3, r3, #16
 8004230:	443b      	add	r3, r7
 8004232:	2201      	movs	r2, #1
 8004234:	49c2      	ldr	r1, [pc, #776]	; (8004540 <main+0x378>)
 8004236:	4618      	mov	r0, r3
 8004238:	f008 fcd8 	bl	800cbec <f_mount>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d119      	bne.n	8004276 <main+0xae>
  {
	  printf("SDCard mounting success!\n");
 8004242:	48c0      	ldr	r0, [pc, #768]	; (8004544 <main+0x37c>)
 8004244:	f00a f88e 	bl	800e364 <puts>
	  openFile(&MLXFIL, "MLX.csv", FILE_DEFAULT_WRITE);
 8004248:	4bbf      	ldr	r3, [pc, #764]	; (8004548 <main+0x380>)
 800424a:	f503 5348 	add.w	r3, r3, #12800	; 0x3200
 800424e:	f103 0310 	add.w	r3, r3, #16
 8004252:	443b      	add	r3, r7
 8004254:	2232      	movs	r2, #50	; 0x32
 8004256:	49bd      	ldr	r1, [pc, #756]	; (800454c <main+0x384>)
 8004258:	4618      	mov	r0, r3
 800425a:	f7ff ff61 	bl	8004120 <openFile>
	  openFile(&gyroFIL, "GYRO.csv", FILE_DEFAULT_WRITE);
 800425e:	4bbc      	ldr	r3, [pc, #752]	; (8004550 <main+0x388>)
 8004260:	f503 5348 	add.w	r3, r3, #12800	; 0x3200
 8004264:	f103 0310 	add.w	r3, r3, #16
 8004268:	443b      	add	r3, r7
 800426a:	2232      	movs	r2, #50	; 0x32
 800426c:	49b9      	ldr	r1, [pc, #740]	; (8004554 <main+0x38c>)
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff ff56 	bl	8004120 <openFile>
 8004274:	e001      	b.n	800427a <main+0xb2>

  }else
  {
	  mountFailHandler();
 8004276:	f7ff ff9d 	bl	80041b4 <mountFailHandler>
  }
  //HAL_UART_Transmit(&huart3, "no filesystem\r\n", 6, HAL_MAX_DELAY);
  int number = 1;
 800427a:	2301      	movs	r3, #1
 800427c:	f243 220c 	movw	r2, #12812	; 0x320c
 8004280:	443a      	add	r2, r7
 8004282:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  char path[] = "GYRO.csv\0";
 8004284:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004288:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800428c:	4ab2      	ldr	r2, [pc, #712]	; (8004558 <main+0x390>)
 800428e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004290:	c303      	stmia	r3!, {r0, r1}
 8004292:	801a      	strh	r2, [r3, #0]
	  char path2[] = "MLX.csv\0";
 8004294:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004298:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800429c:	4aaf      	ldr	r2, [pc, #700]	; (800455c <main+0x394>)
 800429e:	ca07      	ldmia	r2, {r0, r1, r2}
 80042a0:	c303      	stmia	r3!, {r0, r1}
 80042a2:	701a      	strb	r2, [r3, #0]

	  sprintf(testdata, "%d,", HAL_GetTick());
 80042a4:	f000 fdf4 	bl	8004e90 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	4bad      	ldr	r3, [pc, #692]	; (8004560 <main+0x398>)
 80042ac:	f503 5348 	add.w	r3, r3, #12800	; 0x3200
 80042b0:	f103 0310 	add.w	r3, r3, #16
 80042b4:	443b      	add	r3, r7
 80042b6:	49ab      	ldr	r1, [pc, #684]	; (8004564 <main+0x39c>)
 80042b8:	4618      	mov	r0, r3
 80042ba:	f00a f861 	bl	800e380 <siprintf>
	f_write(&gyroFIL, testdata, strlen(testdata), &writedBytes);
 80042be:	4ba8      	ldr	r3, [pc, #672]	; (8004560 <main+0x398>)
 80042c0:	f503 5348 	add.w	r3, r3, #12800	; 0x3200
 80042c4:	f103 0310 	add.w	r3, r3, #16
 80042c8:	443b      	add	r3, r7
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7fb ffc2 	bl	8000254 <strlen>
 80042d0:	4602      	mov	r2, r0
 80042d2:	4ba5      	ldr	r3, [pc, #660]	; (8004568 <main+0x3a0>)
 80042d4:	f503 5348 	add.w	r3, r3, #12800	; 0x3200
 80042d8:	f103 0310 	add.w	r3, r3, #16
 80042dc:	443b      	add	r3, r7
 80042de:	49a0      	ldr	r1, [pc, #640]	; (8004560 <main+0x398>)
 80042e0:	f501 5148 	add.w	r1, r1, #12800	; 0x3200
 80042e4:	f101 0110 	add.w	r1, r1, #16
 80042e8:	4439      	add	r1, r7
 80042ea:	4899      	ldr	r0, [pc, #612]	; (8004550 <main+0x388>)
 80042ec:	f500 5048 	add.w	r0, r0, #12800	; 0x3200
 80042f0:	f100 0010 	add.w	r0, r0, #16
 80042f4:	4438      	add	r0, r7
 80042f6:	f008 fe8b 	bl	800d010 <f_write>
	f_write(&MLXFIL, testdata, strlen(testdata), &writedBytes);
 80042fa:	4b99      	ldr	r3, [pc, #612]	; (8004560 <main+0x398>)
 80042fc:	f503 5348 	add.w	r3, r3, #12800	; 0x3200
 8004300:	f103 0310 	add.w	r3, r3, #16
 8004304:	443b      	add	r3, r7
 8004306:	4618      	mov	r0, r3
 8004308:	f7fb ffa4 	bl	8000254 <strlen>
 800430c:	4602      	mov	r2, r0
 800430e:	4b96      	ldr	r3, [pc, #600]	; (8004568 <main+0x3a0>)
 8004310:	f503 5348 	add.w	r3, r3, #12800	; 0x3200
 8004314:	f103 0310 	add.w	r3, r3, #16
 8004318:	443b      	add	r3, r7
 800431a:	4991      	ldr	r1, [pc, #580]	; (8004560 <main+0x398>)
 800431c:	f501 5148 	add.w	r1, r1, #12800	; 0x3200
 8004320:	f101 0110 	add.w	r1, r1, #16
 8004324:	4439      	add	r1, r7
 8004326:	4888      	ldr	r0, [pc, #544]	; (8004548 <main+0x380>)
 8004328:	f500 5048 	add.w	r0, r0, #12800	; 0x3200
 800432c:	f100 0010 	add.w	r0, r0, #16
 8004330:	4438      	add	r0, r7
 8004332:	f008 fe6d 	bl	800d010 <f_write>

	imu_9dof_get_data(&imu_9dof_data, &imu_9dof_calculated);
 8004336:	4a8d      	ldr	r2, [pc, #564]	; (800456c <main+0x3a4>)
 8004338:	f243 2310 	movw	r3, #12816	; 0x3210
 800433c:	4413      	add	r3, r2
 800433e:	19da      	adds	r2, r3, r7
 8004340:	4b8b      	ldr	r3, [pc, #556]	; (8004570 <main+0x3a8>)
 8004342:	f503 5348 	add.w	r3, r3, #12800	; 0x3200
 8004346:	f103 0310 	add.w	r3, r3, #16
 800434a:	443b      	add	r3, r7
 800434c:	4611      	mov	r1, r2
 800434e:	4618      	mov	r0, r3
 8004350:	f7ff fe42 	bl	8003fd8 <imu_9dof_get_data>
	for (int i = 0; i < 3; i++)
 8004354:	2300      	movs	r3, #0
 8004356:	f243 2208 	movw	r2, #12808	; 0x3208
 800435a:	443a      	add	r2, r7
 800435c:	6013      	str	r3, [r2, #0]
 800435e:	e04b      	b.n	80043f8 <main+0x230>
	{
		sprintf(testdata, "%f,", imu_9dof_calculated.gyro_data_calc[i]);
 8004360:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004364:	461a      	mov	r2, r3
 8004366:	f243 2308 	movw	r3, #12808	; 0x3208
 800436a:	443b      	add	r3, r7
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	3303      	adds	r3, #3
 8004370:	00db      	lsls	r3, r3, #3
 8004372:	4413      	add	r3, r2
 8004374:	3bf8      	subs	r3, #248	; 0xf8
 8004376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437a:	4879      	ldr	r0, [pc, #484]	; (8004560 <main+0x398>)
 800437c:	f243 2110 	movw	r1, #12816	; 0x3210
 8004380:	4401      	add	r1, r0
 8004382:	19c8      	adds	r0, r1, r7
 8004384:	497b      	ldr	r1, [pc, #492]	; (8004574 <main+0x3ac>)
 8004386:	f009 fffb 	bl	800e380 <siprintf>
		  f_write(&gyroFIL, testdata, strlen(testdata), &writedBytes);
 800438a:	4b75      	ldr	r3, [pc, #468]	; (8004560 <main+0x398>)
 800438c:	f503 5348 	add.w	r3, r3, #12800	; 0x3200
 8004390:	f103 0310 	add.w	r3, r3, #16
 8004394:	443b      	add	r3, r7
 8004396:	4618      	mov	r0, r3
 8004398:	f7fb ff5c 	bl	8000254 <strlen>
 800439c:	4602      	mov	r2, r0
 800439e:	4b72      	ldr	r3, [pc, #456]	; (8004568 <main+0x3a0>)
 80043a0:	f503 5348 	add.w	r3, r3, #12800	; 0x3200
 80043a4:	f103 0310 	add.w	r3, r3, #16
 80043a8:	443b      	add	r3, r7
 80043aa:	496d      	ldr	r1, [pc, #436]	; (8004560 <main+0x398>)
 80043ac:	f501 5148 	add.w	r1, r1, #12800	; 0x3200
 80043b0:	f101 0110 	add.w	r1, r1, #16
 80043b4:	4439      	add	r1, r7
 80043b6:	4866      	ldr	r0, [pc, #408]	; (8004550 <main+0x388>)
 80043b8:	f500 5048 	add.w	r0, r0, #12800	; 0x3200
 80043bc:	f100 0010 	add.w	r0, r0, #16
 80043c0:	4438      	add	r0, r7
 80043c2:	f008 fe25 	bl	800d010 <f_write>
		printf("%f ", imu_9dof_calculated.gyro_data_calc[i]);
 80043c6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80043ca:	461a      	mov	r2, r3
 80043cc:	f243 2308 	movw	r3, #12808	; 0x3208
 80043d0:	443b      	add	r3, r7
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	3303      	adds	r3, #3
 80043d6:	00db      	lsls	r3, r3, #3
 80043d8:	4413      	add	r3, r2
 80043da:	3bf8      	subs	r3, #248	; 0xf8
 80043dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e0:	4865      	ldr	r0, [pc, #404]	; (8004578 <main+0x3b0>)
 80043e2:	f009 ff39 	bl	800e258 <iprintf>
	for (int i = 0; i < 3; i++)
 80043e6:	f243 2308 	movw	r3, #12808	; 0x3208
 80043ea:	443b      	add	r3, r7
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	3301      	adds	r3, #1
 80043f0:	f243 2208 	movw	r2, #12808	; 0x3208
 80043f4:	443a      	add	r2, r7
 80043f6:	6013      	str	r3, [r2, #0]
 80043f8:	f243 2308 	movw	r3, #12808	; 0x3208
 80043fc:	443b      	add	r3, r7
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2b02      	cmp	r3, #2
 8004402:	ddad      	ble.n	8004360 <main+0x198>

	}
	for (int i = 0; i < 3; i++)
 8004404:	2300      	movs	r3, #0
 8004406:	f243 2204 	movw	r2, #12804	; 0x3204
 800440a:	443a      	add	r2, r7
 800440c:	6013      	str	r3, [r2, #0]
 800440e:	e04a      	b.n	80044a6 <main+0x2de>
	{
		sprintf(testdata, "%f,", imu_9dof_calculated.gyro_data_calc[i]);
 8004410:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004414:	461a      	mov	r2, r3
 8004416:	f243 2304 	movw	r3, #12804	; 0x3204
 800441a:	443b      	add	r3, r7
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	3303      	adds	r3, #3
 8004420:	00db      	lsls	r3, r3, #3
 8004422:	4413      	add	r3, r2
 8004424:	3bf8      	subs	r3, #248	; 0xf8
 8004426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442a:	484d      	ldr	r0, [pc, #308]	; (8004560 <main+0x398>)
 800442c:	f243 2110 	movw	r1, #12816	; 0x3210
 8004430:	4401      	add	r1, r0
 8004432:	19c8      	adds	r0, r1, r7
 8004434:	494f      	ldr	r1, [pc, #316]	; (8004574 <main+0x3ac>)
 8004436:	f009 ffa3 	bl	800e380 <siprintf>
		  f_write(&gyroFIL, testdata, strlen(testdata), &writedBytes);
 800443a:	4b49      	ldr	r3, [pc, #292]	; (8004560 <main+0x398>)
 800443c:	f503 5348 	add.w	r3, r3, #12800	; 0x3200
 8004440:	f103 0310 	add.w	r3, r3, #16
 8004444:	443b      	add	r3, r7
 8004446:	4618      	mov	r0, r3
 8004448:	f7fb ff04 	bl	8000254 <strlen>
 800444c:	4602      	mov	r2, r0
 800444e:	4b46      	ldr	r3, [pc, #280]	; (8004568 <main+0x3a0>)
 8004450:	f503 5348 	add.w	r3, r3, #12800	; 0x3200
 8004454:	f103 0310 	add.w	r3, r3, #16
 8004458:	443b      	add	r3, r7
 800445a:	4941      	ldr	r1, [pc, #260]	; (8004560 <main+0x398>)
 800445c:	f501 5148 	add.w	r1, r1, #12800	; 0x3200
 8004460:	f101 0110 	add.w	r1, r1, #16
 8004464:	4439      	add	r1, r7
 8004466:	483a      	ldr	r0, [pc, #232]	; (8004550 <main+0x388>)
 8004468:	f500 5048 	add.w	r0, r0, #12800	; 0x3200
 800446c:	f100 0010 	add.w	r0, r0, #16
 8004470:	4438      	add	r0, r7
 8004472:	f008 fdcd 	bl	800d010 <f_write>
		printf("%f ", imu_9dof_calculated.acc_data_calc[i]);
 8004476:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800447a:	461a      	mov	r2, r3
 800447c:	f243 2304 	movw	r3, #12804	; 0x3204
 8004480:	443b      	add	r3, r7
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	4413      	add	r3, r2
 8004488:	3bf8      	subs	r3, #248	; 0xf8
 800448a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448e:	483a      	ldr	r0, [pc, #232]	; (8004578 <main+0x3b0>)
 8004490:	f009 fee2 	bl	800e258 <iprintf>
	for (int i = 0; i < 3; i++)
 8004494:	f243 2304 	movw	r3, #12804	; 0x3204
 8004498:	443b      	add	r3, r7
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	3301      	adds	r3, #1
 800449e:	f243 2204 	movw	r2, #12804	; 0x3204
 80044a2:	443a      	add	r2, r7
 80044a4:	6013      	str	r3, [r2, #0]
 80044a6:	f243 2304 	movw	r3, #12804	; 0x3204
 80044aa:	443b      	add	r3, r7
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	ddae      	ble.n	8004410 <main+0x248>
	}
	sprintf(testdata, "\r\n ");
 80044b2:	4b2b      	ldr	r3, [pc, #172]	; (8004560 <main+0x398>)
 80044b4:	f503 5348 	add.w	r3, r3, #12800	; 0x3200
 80044b8:	f103 0310 	add.w	r3, r3, #16
 80044bc:	443b      	add	r3, r7
 80044be:	492f      	ldr	r1, [pc, #188]	; (800457c <main+0x3b4>)
 80044c0:	4618      	mov	r0, r3
 80044c2:	f009 ff5d 	bl	800e380 <siprintf>
	number++;
 80044c6:	f243 230c 	movw	r3, #12812	; 0x320c
 80044ca:	443b      	add	r3, r7
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	3301      	adds	r3, #1
 80044d0:	f243 220c 	movw	r2, #12812	; 0x320c
 80044d4:	443a      	add	r2, r7
 80044d6:	6013      	str	r3, [r2, #0]
	f_write(&gyroFIL, testdata, strlen(testdata), &writedBytes);
 80044d8:	4b21      	ldr	r3, [pc, #132]	; (8004560 <main+0x398>)
 80044da:	f503 5348 	add.w	r3, r3, #12800	; 0x3200
 80044de:	f103 0310 	add.w	r3, r3, #16
 80044e2:	443b      	add	r3, r7
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7fb feb5 	bl	8000254 <strlen>
 80044ea:	4602      	mov	r2, r0
 80044ec:	4b1e      	ldr	r3, [pc, #120]	; (8004568 <main+0x3a0>)
 80044ee:	f503 5348 	add.w	r3, r3, #12800	; 0x3200
 80044f2:	f103 0310 	add.w	r3, r3, #16
 80044f6:	443b      	add	r3, r7
 80044f8:	4919      	ldr	r1, [pc, #100]	; (8004560 <main+0x398>)
 80044fa:	f501 5148 	add.w	r1, r1, #12800	; 0x3200
 80044fe:	f101 0110 	add.w	r1, r1, #16
 8004502:	4439      	add	r1, r7
 8004504:	4812      	ldr	r0, [pc, #72]	; (8004550 <main+0x388>)
 8004506:	f500 5048 	add.w	r0, r0, #12800	; 0x3200
 800450a:	f100 0010 	add.w	r0, r0, #16
 800450e:	4438      	add	r0, r7
 8004510:	f008 fd7e 	bl	800d010 <f_write>
	printf("\r\n");
 8004514:	481a      	ldr	r0, [pc, #104]	; (8004580 <main+0x3b8>)
 8004516:	f009 ff25 	bl	800e364 <puts>
	mlxGetData();
 800451a:	f7ff fc6d 	bl	8003df8 <mlxGetData>
	printf("start = %d \r\n", HAL_GetTick());
 800451e:	f000 fcb7 	bl	8004e90 <HAL_GetTick>
 8004522:	4603      	mov	r3, r0
 8004524:	4619      	mov	r1, r3
 8004526:	4817      	ldr	r0, [pc, #92]	; (8004584 <main+0x3bc>)
 8004528:	f009 fe96 	bl	800e258 <iprintf>
	for(int i=0;i<784;i++)
 800452c:	2300      	movs	r3, #0
 800452e:	f507 5248 	add.w	r2, r7, #12800	; 0x3200
 8004532:	6013      	str	r3, [r2, #0]
 8004534:	e069      	b.n	800460a <main+0x442>
 8004536:	bf00      	nop
 8004538:	08012544 	.word	0x08012544
 800453c:	ffffefb4 	.word	0xffffefb4
 8004540:	08012564 	.word	0x08012564
 8004544:	08012568 	.word	0x08012568
 8004548:	ffffcf54 	.word	0xffffcf54
 800454c:	080124e0 	.word	0x080124e0
 8004550:	ffffdf84 	.word	0xffffdf84
 8004554:	08012484 	.word	0x08012484
 8004558:	080125b8 	.word	0x080125b8
 800455c:	080125c4 	.word	0x080125c4
 8004560:	ffffce08 	.word	0xffffce08
 8004564:	08012584 	.word	0x08012584
 8004568:	ffffcf50 	.word	0xffffcf50
 800456c:	ffffcf08 	.word	0xffffcf08
 8004570:	ffffcf3c 	.word	0xffffcf3c
 8004574:	08012588 	.word	0x08012588
 8004578:	0801258c 	.word	0x0801258c
 800457c:	08012590 	.word	0x08012590
 8004580:	0801244c 	.word	0x0801244c
 8004584:	08012594 	.word	0x08012594
		  {
			  sprintf(testdata,"%2.2f,", mlx.data[i]);
 8004588:	4a46      	ldr	r2, [pc, #280]	; (80046a4 <main+0x4dc>)
 800458a:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f603 03be 	addw	r3, r3, #2238	; 0x8be
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	4413      	add	r3, r2
 8004598:	3304      	adds	r3, #4
 800459a:	edd3 7a00 	vldr	s15, [r3]
 800459e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80045a2:	4841      	ldr	r0, [pc, #260]	; (80046a8 <main+0x4e0>)
 80045a4:	f243 2310 	movw	r3, #12816	; 0x3210
 80045a8:	4403      	add	r3, r0
 80045aa:	19d8      	adds	r0, r3, r7
 80045ac:	ec53 2b17 	vmov	r2, r3, d7
 80045b0:	493e      	ldr	r1, [pc, #248]	; (80046ac <main+0x4e4>)
 80045b2:	f009 fee5 	bl	800e380 <siprintf>
			  fres =  f_write(&MLXFIL, testdata, strlen(testdata), &writedBytes);
 80045b6:	4b3c      	ldr	r3, [pc, #240]	; (80046a8 <main+0x4e0>)
 80045b8:	f503 5348 	add.w	r3, r3, #12800	; 0x3200
 80045bc:	f103 0310 	add.w	r3, r3, #16
 80045c0:	443b      	add	r3, r7
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7fb fe46 	bl	8000254 <strlen>
 80045c8:	4602      	mov	r2, r0
 80045ca:	4b39      	ldr	r3, [pc, #228]	; (80046b0 <main+0x4e8>)
 80045cc:	f503 5348 	add.w	r3, r3, #12800	; 0x3200
 80045d0:	f103 0310 	add.w	r3, r3, #16
 80045d4:	443b      	add	r3, r7
 80045d6:	4934      	ldr	r1, [pc, #208]	; (80046a8 <main+0x4e0>)
 80045d8:	f501 5148 	add.w	r1, r1, #12800	; 0x3200
 80045dc:	f101 0110 	add.w	r1, r1, #16
 80045e0:	4439      	add	r1, r7
 80045e2:	4834      	ldr	r0, [pc, #208]	; (80046b4 <main+0x4ec>)
 80045e4:	f500 5048 	add.w	r0, r0, #12800	; 0x3200
 80045e8:	f100 0010 	add.w	r0, r0, #16
 80045ec:	4438      	add	r0, r7
 80045ee:	f008 fd0f 	bl	800d010 <f_write>
 80045f2:	4603      	mov	r3, r0
 80045f4:	f243 12fb 	movw	r2, #12795	; 0x31fb
 80045f8:	443a      	add	r2, r7
 80045fa:	7013      	strb	r3, [r2, #0]
	for(int i=0;i<784;i++)
 80045fc:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	3301      	adds	r3, #1
 8004604:	f507 5248 	add.w	r2, r7, #12800	; 0x3200
 8004608:	6013      	str	r3, [r2, #0]
 800460a:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8004614:	dbb8      	blt.n	8004588 <main+0x3c0>
		  }
	printf("end = %d \r\n", HAL_GetTick());
 8004616:	f000 fc3b 	bl	8004e90 <HAL_GetTick>
 800461a:	4603      	mov	r3, r0
 800461c:	4619      	mov	r1, r3
 800461e:	4826      	ldr	r0, [pc, #152]	; (80046b8 <main+0x4f0>)
 8004620:	f009 fe1a 	bl	800e258 <iprintf>

	sprintf(testdata, "\r\n ");
 8004624:	4b20      	ldr	r3, [pc, #128]	; (80046a8 <main+0x4e0>)
 8004626:	f503 5348 	add.w	r3, r3, #12800	; 0x3200
 800462a:	f103 0310 	add.w	r3, r3, #16
 800462e:	443b      	add	r3, r7
 8004630:	4922      	ldr	r1, [pc, #136]	; (80046bc <main+0x4f4>)
 8004632:	4618      	mov	r0, r3
 8004634:	f009 fea4 	bl	800e380 <siprintf>
		f_write(&MLXFIL, testdata, strlen(testdata), &writedBytes);
 8004638:	4b1b      	ldr	r3, [pc, #108]	; (80046a8 <main+0x4e0>)
 800463a:	f503 5348 	add.w	r3, r3, #12800	; 0x3200
 800463e:	f103 0310 	add.w	r3, r3, #16
 8004642:	443b      	add	r3, r7
 8004644:	4618      	mov	r0, r3
 8004646:	f7fb fe05 	bl	8000254 <strlen>
 800464a:	4602      	mov	r2, r0
 800464c:	4b18      	ldr	r3, [pc, #96]	; (80046b0 <main+0x4e8>)
 800464e:	f503 5348 	add.w	r3, r3, #12800	; 0x3200
 8004652:	f103 0310 	add.w	r3, r3, #16
 8004656:	443b      	add	r3, r7
 8004658:	4913      	ldr	r1, [pc, #76]	; (80046a8 <main+0x4e0>)
 800465a:	f501 5148 	add.w	r1, r1, #12800	; 0x3200
 800465e:	f101 0110 	add.w	r1, r1, #16
 8004662:	4439      	add	r1, r7
 8004664:	4813      	ldr	r0, [pc, #76]	; (80046b4 <main+0x4ec>)
 8004666:	f500 5048 	add.w	r0, r0, #12800	; 0x3200
 800466a:	f100 0010 	add.w	r0, r0, #16
 800466e:	4438      	add	r0, r7
 8004670:	f008 fcce 	bl	800d010 <f_write>
		f_sync(&gyroFIL);
 8004674:	4b12      	ldr	r3, [pc, #72]	; (80046c0 <main+0x4f8>)
 8004676:	f503 5348 	add.w	r3, r3, #12800	; 0x3200
 800467a:	f103 0310 	add.w	r3, r3, #16
 800467e:	443b      	add	r3, r7
 8004680:	4618      	mov	r0, r3
 8004682:	f008 fe59 	bl	800d338 <f_sync>
	  f_sync(&MLXFIL);
 8004686:	4b0b      	ldr	r3, [pc, #44]	; (80046b4 <main+0x4ec>)
 8004688:	f503 5348 	add.w	r3, r3, #12800	; 0x3200
 800468c:	f103 0310 	add.w	r3, r3, #16
 8004690:	443b      	add	r3, r7
 8004692:	4618      	mov	r0, r3
 8004694:	f008 fe50 	bl	800d338 <f_sync>
	  HAL_Delay(1000);
 8004698:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800469c:	f000 fc04 	bl	8004ea8 <HAL_Delay>
  {
 80046a0:	e5f0      	b.n	8004284 <main+0xbc>
 80046a2:	bf00      	nop
 80046a4:	200008ec 	.word	0x200008ec
 80046a8:	ffffce08 	.word	0xffffce08
 80046ac:	080125a4 	.word	0x080125a4
 80046b0:	ffffcf50 	.word	0xffffcf50
 80046b4:	ffffcf54 	.word	0xffffcf54
 80046b8:	080125ac 	.word	0x080125ac
 80046bc:	08012590 	.word	0x08012590
 80046c0:	ffffdf84 	.word	0xffffdf84

080046c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b0b8      	sub	sp, #224	; 0xe0
 80046c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80046ca:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80046ce:	2234      	movs	r2, #52	; 0x34
 80046d0:	2100      	movs	r1, #0
 80046d2:	4618      	mov	r0, r3
 80046d4:	f008 ff6e 	bl	800d5b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80046d8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80046dc:	2200      	movs	r2, #0
 80046de:	601a      	str	r2, [r3, #0]
 80046e0:	605a      	str	r2, [r3, #4]
 80046e2:	609a      	str	r2, [r3, #8]
 80046e4:	60da      	str	r2, [r3, #12]
 80046e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80046e8:	f107 0308 	add.w	r3, r7, #8
 80046ec:	2290      	movs	r2, #144	; 0x90
 80046ee:	2100      	movs	r1, #0
 80046f0:	4618      	mov	r0, r3
 80046f2:	f008 ff5f 	bl	800d5b4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80046f6:	4b3a      	ldr	r3, [pc, #232]	; (80047e0 <SystemClock_Config+0x11c>)
 80046f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fa:	4a39      	ldr	r2, [pc, #228]	; (80047e0 <SystemClock_Config+0x11c>)
 80046fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004700:	6413      	str	r3, [r2, #64]	; 0x40
 8004702:	4b37      	ldr	r3, [pc, #220]	; (80047e0 <SystemClock_Config+0x11c>)
 8004704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800470a:	607b      	str	r3, [r7, #4]
 800470c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800470e:	4b35      	ldr	r3, [pc, #212]	; (80047e4 <SystemClock_Config+0x120>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004716:	4a33      	ldr	r2, [pc, #204]	; (80047e4 <SystemClock_Config+0x120>)
 8004718:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800471c:	6013      	str	r3, [r2, #0]
 800471e:	4b31      	ldr	r3, [pc, #196]	; (80047e4 <SystemClock_Config+0x120>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004726:	603b      	str	r3, [r7, #0]
 8004728:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800472a:	2302      	movs	r3, #2
 800472c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004730:	2301      	movs	r3, #1
 8004732:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004736:	2310      	movs	r3, #16
 8004738:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800473c:	2302      	movs	r3, #2
 800473e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004742:	2300      	movs	r3, #0
 8004744:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004748:	2308      	movs	r3, #8
 800474a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 800474e:	2360      	movs	r3, #96	; 0x60
 8004750:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8004754:	2308      	movs	r3, #8
 8004756:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800475a:	2308      	movs	r3, #8
 800475c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004760:	2302      	movs	r3, #2
 8004762:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004766:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800476a:	4618      	mov	r0, r3
 800476c:	f002 fb8c 	bl	8006e88 <HAL_RCC_OscConfig>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8004776:	f000 f839 	bl	80047ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800477a:	230f      	movs	r3, #15
 800477c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004780:	2302      	movs	r3, #2
 8004782:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004786:	2300      	movs	r3, #0
 8004788:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800478c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004790:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004794:	2300      	movs	r3, #0
 8004796:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800479a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800479e:	2100      	movs	r1, #0
 80047a0:	4618      	mov	r0, r3
 80047a2:	f002 fe1f 	bl	80073e4 <HAL_RCC_ClockConfig>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <SystemClock_Config+0xec>
  {
    Error_Handler();
 80047ac:	f000 f81e 	bl	80047ec <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 80047b0:	4b0d      	ldr	r3, [pc, #52]	; (80047e8 <SystemClock_Config+0x124>)
 80047b2:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDMMC1;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80047b4:	2300      	movs	r3, #0
 80047b6:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80047b8:	2300      	movs	r3, #0
 80047ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_SYSCLK;
 80047bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80047c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80047c4:	f107 0308 	add.w	r3, r7, #8
 80047c8:	4618      	mov	r0, r3
 80047ca:	f002 fff1 	bl	80077b0 <HAL_RCCEx_PeriphCLKConfig>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d001      	beq.n	80047d8 <SystemClock_Config+0x114>
  {
    Error_Handler();
 80047d4:	f000 f80a 	bl	80047ec <Error_Handler>
  }
}
 80047d8:	bf00      	nop
 80047da:	37e0      	adds	r7, #224	; 0xe0
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	40023800 	.word	0x40023800
 80047e4:	40007000 	.word	0x40007000
 80047e8:	00804100 	.word	0x00804100

080047ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80047f0:	b672      	cpsid	i
}
 80047f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80047f4:	e7fe      	b.n	80047f4 <Error_Handler+0x8>
	...

080047f8 <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 80047f8:	b480      	push	{r7}
 80047fa:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80047fc:	4b0c      	ldr	r3, [pc, #48]	; (8004830 <MX_SDMMC1_SD_Init+0x38>)
 80047fe:	4a0d      	ldr	r2, [pc, #52]	; (8004834 <MX_SDMMC1_SD_Init+0x3c>)
 8004800:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8004802:	4b0b      	ldr	r3, [pc, #44]	; (8004830 <MX_SDMMC1_SD_Init+0x38>)
 8004804:	2200      	movs	r2, #0
 8004806:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8004808:	4b09      	ldr	r3, [pc, #36]	; (8004830 <MX_SDMMC1_SD_Init+0x38>)
 800480a:	2200      	movs	r2, #0
 800480c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800480e:	4b08      	ldr	r3, [pc, #32]	; (8004830 <MX_SDMMC1_SD_Init+0x38>)
 8004810:	2200      	movs	r2, #0
 8004812:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8004814:	4b06      	ldr	r3, [pc, #24]	; (8004830 <MX_SDMMC1_SD_Init+0x38>)
 8004816:	2200      	movs	r2, #0
 8004818:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800481a:	4b05      	ldr	r3, [pc, #20]	; (8004830 <MX_SDMMC1_SD_Init+0x38>)
 800481c:	2200      	movs	r2, #0
 800481e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8004820:	4b03      	ldr	r3, [pc, #12]	; (8004830 <MX_SDMMC1_SD_Init+0x38>)
 8004822:	2200      	movs	r2, #0
 8004824:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8004826:	bf00      	nop
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr
 8004830:	20003e74 	.word	0x20003e74
 8004834:	40012c00 	.word	0x40012c00

08004838 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b08a      	sub	sp, #40	; 0x28
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004840:	f107 0314 	add.w	r3, r7, #20
 8004844:	2200      	movs	r2, #0
 8004846:	601a      	str	r2, [r3, #0]
 8004848:	605a      	str	r2, [r3, #4]
 800484a:	609a      	str	r2, [r3, #8]
 800484c:	60da      	str	r2, [r3, #12]
 800484e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a6d      	ldr	r2, [pc, #436]	; (8004a0c <HAL_SD_MspInit+0x1d4>)
 8004856:	4293      	cmp	r3, r2
 8004858:	f040 80d4 	bne.w	8004a04 <HAL_SD_MspInit+0x1cc>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800485c:	4b6c      	ldr	r3, [pc, #432]	; (8004a10 <HAL_SD_MspInit+0x1d8>)
 800485e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004860:	4a6b      	ldr	r2, [pc, #428]	; (8004a10 <HAL_SD_MspInit+0x1d8>)
 8004862:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004866:	6453      	str	r3, [r2, #68]	; 0x44
 8004868:	4b69      	ldr	r3, [pc, #420]	; (8004a10 <HAL_SD_MspInit+0x1d8>)
 800486a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004870:	613b      	str	r3, [r7, #16]
 8004872:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004874:	4b66      	ldr	r3, [pc, #408]	; (8004a10 <HAL_SD_MspInit+0x1d8>)
 8004876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004878:	4a65      	ldr	r2, [pc, #404]	; (8004a10 <HAL_SD_MspInit+0x1d8>)
 800487a:	f043 0304 	orr.w	r3, r3, #4
 800487e:	6313      	str	r3, [r2, #48]	; 0x30
 8004880:	4b63      	ldr	r3, [pc, #396]	; (8004a10 <HAL_SD_MspInit+0x1d8>)
 8004882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004884:	f003 0304 	and.w	r3, r3, #4
 8004888:	60fb      	str	r3, [r7, #12]
 800488a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800488c:	4b60      	ldr	r3, [pc, #384]	; (8004a10 <HAL_SD_MspInit+0x1d8>)
 800488e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004890:	4a5f      	ldr	r2, [pc, #380]	; (8004a10 <HAL_SD_MspInit+0x1d8>)
 8004892:	f043 0308 	orr.w	r3, r3, #8
 8004896:	6313      	str	r3, [r2, #48]	; 0x30
 8004898:	4b5d      	ldr	r3, [pc, #372]	; (8004a10 <HAL_SD_MspInit+0x1d8>)
 800489a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489c:	f003 0308 	and.w	r3, r3, #8
 80048a0:	60bb      	str	r3, [r7, #8]
 80048a2:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80048a4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80048a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048aa:	2302      	movs	r3, #2
 80048ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048ae:	2301      	movs	r3, #1
 80048b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048b2:	2303      	movs	r3, #3
 80048b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80048b6:	230c      	movs	r3, #12
 80048b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048ba:	f107 0314 	add.w	r3, r7, #20
 80048be:	4619      	mov	r1, r3
 80048c0:	4854      	ldr	r0, [pc, #336]	; (8004a14 <HAL_SD_MspInit+0x1dc>)
 80048c2:	f000 ffcd 	bl	8005860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80048c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048cc:	2302      	movs	r3, #2
 80048ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048d0:	2300      	movs	r3, #0
 80048d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048d4:	2303      	movs	r3, #3
 80048d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80048d8:	230c      	movs	r3, #12
 80048da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048dc:	f107 0314 	add.w	r3, r7, #20
 80048e0:	4619      	mov	r1, r3
 80048e2:	484c      	ldr	r0, [pc, #304]	; (8004a14 <HAL_SD_MspInit+0x1dc>)
 80048e4:	f000 ffbc 	bl	8005860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80048e8:	2304      	movs	r3, #4
 80048ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ec:	2302      	movs	r3, #2
 80048ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048f0:	2301      	movs	r3, #1
 80048f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048f4:	2303      	movs	r3, #3
 80048f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80048f8:	230c      	movs	r3, #12
 80048fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048fc:	f107 0314 	add.w	r3, r7, #20
 8004900:	4619      	mov	r1, r3
 8004902:	4845      	ldr	r0, [pc, #276]	; (8004a18 <HAL_SD_MspInit+0x1e0>)
 8004904:	f000 ffac 	bl	8005860 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8004908:	4b44      	ldr	r3, [pc, #272]	; (8004a1c <HAL_SD_MspInit+0x1e4>)
 800490a:	4a45      	ldr	r2, [pc, #276]	; (8004a20 <HAL_SD_MspInit+0x1e8>)
 800490c:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 800490e:	4b43      	ldr	r3, [pc, #268]	; (8004a1c <HAL_SD_MspInit+0x1e4>)
 8004910:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004914:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004916:	4b41      	ldr	r3, [pc, #260]	; (8004a1c <HAL_SD_MspInit+0x1e4>)
 8004918:	2200      	movs	r2, #0
 800491a:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800491c:	4b3f      	ldr	r3, [pc, #252]	; (8004a1c <HAL_SD_MspInit+0x1e4>)
 800491e:	2200      	movs	r2, #0
 8004920:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004922:	4b3e      	ldr	r3, [pc, #248]	; (8004a1c <HAL_SD_MspInit+0x1e4>)
 8004924:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004928:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800492a:	4b3c      	ldr	r3, [pc, #240]	; (8004a1c <HAL_SD_MspInit+0x1e4>)
 800492c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004930:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004932:	4b3a      	ldr	r3, [pc, #232]	; (8004a1c <HAL_SD_MspInit+0x1e4>)
 8004934:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004938:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 800493a:	4b38      	ldr	r3, [pc, #224]	; (8004a1c <HAL_SD_MspInit+0x1e4>)
 800493c:	2220      	movs	r2, #32
 800493e:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004940:	4b36      	ldr	r3, [pc, #216]	; (8004a1c <HAL_SD_MspInit+0x1e4>)
 8004942:	2200      	movs	r2, #0
 8004944:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004946:	4b35      	ldr	r3, [pc, #212]	; (8004a1c <HAL_SD_MspInit+0x1e4>)
 8004948:	2204      	movs	r2, #4
 800494a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800494c:	4b33      	ldr	r3, [pc, #204]	; (8004a1c <HAL_SD_MspInit+0x1e4>)
 800494e:	2203      	movs	r2, #3
 8004950:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8004952:	4b32      	ldr	r3, [pc, #200]	; (8004a1c <HAL_SD_MspInit+0x1e4>)
 8004954:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004958:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800495a:	4b30      	ldr	r3, [pc, #192]	; (8004a1c <HAL_SD_MspInit+0x1e4>)
 800495c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004960:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8004962:	482e      	ldr	r0, [pc, #184]	; (8004a1c <HAL_SD_MspInit+0x1e4>)
 8004964:	f000 fbd6 	bl	8005114 <HAL_DMA_Init>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <HAL_SD_MspInit+0x13a>
    {
      Error_Handler();
 800496e:	f7ff ff3d 	bl	80047ec <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a29      	ldr	r2, [pc, #164]	; (8004a1c <HAL_SD_MspInit+0x1e4>)
 8004976:	641a      	str	r2, [r3, #64]	; 0x40
 8004978:	4a28      	ldr	r2, [pc, #160]	; (8004a1c <HAL_SD_MspInit+0x1e4>)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 800497e:	4b29      	ldr	r3, [pc, #164]	; (8004a24 <HAL_SD_MspInit+0x1ec>)
 8004980:	4a29      	ldr	r2, [pc, #164]	; (8004a28 <HAL_SD_MspInit+0x1f0>)
 8004982:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8004984:	4b27      	ldr	r3, [pc, #156]	; (8004a24 <HAL_SD_MspInit+0x1ec>)
 8004986:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800498a:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800498c:	4b25      	ldr	r3, [pc, #148]	; (8004a24 <HAL_SD_MspInit+0x1ec>)
 800498e:	2240      	movs	r2, #64	; 0x40
 8004990:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004992:	4b24      	ldr	r3, [pc, #144]	; (8004a24 <HAL_SD_MspInit+0x1ec>)
 8004994:	2200      	movs	r2, #0
 8004996:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004998:	4b22      	ldr	r3, [pc, #136]	; (8004a24 <HAL_SD_MspInit+0x1ec>)
 800499a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800499e:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80049a0:	4b20      	ldr	r3, [pc, #128]	; (8004a24 <HAL_SD_MspInit+0x1ec>)
 80049a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80049a6:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80049a8:	4b1e      	ldr	r3, [pc, #120]	; (8004a24 <HAL_SD_MspInit+0x1ec>)
 80049aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80049ae:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 80049b0:	4b1c      	ldr	r3, [pc, #112]	; (8004a24 <HAL_SD_MspInit+0x1ec>)
 80049b2:	2220      	movs	r2, #32
 80049b4:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80049b6:	4b1b      	ldr	r3, [pc, #108]	; (8004a24 <HAL_SD_MspInit+0x1ec>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80049bc:	4b19      	ldr	r3, [pc, #100]	; (8004a24 <HAL_SD_MspInit+0x1ec>)
 80049be:	2204      	movs	r2, #4
 80049c0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80049c2:	4b18      	ldr	r3, [pc, #96]	; (8004a24 <HAL_SD_MspInit+0x1ec>)
 80049c4:	2203      	movs	r2, #3
 80049c6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 80049c8:	4b16      	ldr	r3, [pc, #88]	; (8004a24 <HAL_SD_MspInit+0x1ec>)
 80049ca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80049ce:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80049d0:	4b14      	ldr	r3, [pc, #80]	; (8004a24 <HAL_SD_MspInit+0x1ec>)
 80049d2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80049d6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 80049d8:	4812      	ldr	r0, [pc, #72]	; (8004a24 <HAL_SD_MspInit+0x1ec>)
 80049da:	f000 fb9b 	bl	8005114 <HAL_DMA_Init>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <HAL_SD_MspInit+0x1b0>
    {
      Error_Handler();
 80049e4:	f7ff ff02 	bl	80047ec <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a0e      	ldr	r2, [pc, #56]	; (8004a24 <HAL_SD_MspInit+0x1ec>)
 80049ec:	63da      	str	r2, [r3, #60]	; 0x3c
 80049ee:	4a0d      	ldr	r2, [pc, #52]	; (8004a24 <HAL_SD_MspInit+0x1ec>)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80049f4:	2200      	movs	r2, #0
 80049f6:	2100      	movs	r1, #0
 80049f8:	2031      	movs	r0, #49	; 0x31
 80049fa:	f000 fb54 	bl	80050a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80049fe:	2031      	movs	r0, #49	; 0x31
 8004a00:	f000 fb6d 	bl	80050de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8004a04:	bf00      	nop
 8004a06:	3728      	adds	r7, #40	; 0x28
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	40012c00 	.word	0x40012c00
 8004a10:	40023800 	.word	0x40023800
 8004a14:	40020800 	.word	0x40020800
 8004a18:	40020c00 	.word	0x40020c00
 8004a1c:	20003ef8 	.word	0x20003ef8
 8004a20:	40026458 	.word	0x40026458
 8004a24:	20003f58 	.word	0x20003f58
 8004a28:	400264a0 	.word	0x400264a0

08004a2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004a32:	4b0f      	ldr	r3, [pc, #60]	; (8004a70 <HAL_MspInit+0x44>)
 8004a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a36:	4a0e      	ldr	r2, [pc, #56]	; (8004a70 <HAL_MspInit+0x44>)
 8004a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a3e:	4b0c      	ldr	r3, [pc, #48]	; (8004a70 <HAL_MspInit+0x44>)
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a46:	607b      	str	r3, [r7, #4]
 8004a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a4a:	4b09      	ldr	r3, [pc, #36]	; (8004a70 <HAL_MspInit+0x44>)
 8004a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a4e:	4a08      	ldr	r2, [pc, #32]	; (8004a70 <HAL_MspInit+0x44>)
 8004a50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a54:	6453      	str	r3, [r2, #68]	; 0x44
 8004a56:	4b06      	ldr	r3, [pc, #24]	; (8004a70 <HAL_MspInit+0x44>)
 8004a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a5e:	603b      	str	r3, [r7, #0]
 8004a60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a62:	bf00      	nop
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	40023800 	.word	0x40023800

08004a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a74:	b480      	push	{r7}
 8004a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004a78:	e7fe      	b.n	8004a78 <NMI_Handler+0x4>

08004a7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a7e:	e7fe      	b.n	8004a7e <HardFault_Handler+0x4>

08004a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a80:	b480      	push	{r7}
 8004a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a84:	e7fe      	b.n	8004a84 <MemManage_Handler+0x4>

08004a86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a86:	b480      	push	{r7}
 8004a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a8a:	e7fe      	b.n	8004a8a <BusFault_Handler+0x4>

08004a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a90:	e7fe      	b.n	8004a90 <UsageFault_Handler+0x4>

08004a92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a92:	b480      	push	{r7}
 8004a94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a96:	bf00      	nop
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004aa4:	bf00      	nop
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004ab2:	bf00      	nop
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004ac0:	f000 f9d2 	bl	8004e68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004ac4:	bf00      	nop
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8004acc:	4802      	ldr	r0, [pc, #8]	; (8004ad8 <SDMMC1_IRQHandler+0x10>)
 8004ace:	f003 fd17 	bl	8008500 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8004ad2:	bf00      	nop
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	20003e74 	.word	0x20003e74

08004adc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8004ae0:	4802      	ldr	r0, [pc, #8]	; (8004aec <DMA2_Stream3_IRQHandler+0x10>)
 8004ae2:	f000 fc47 	bl	8005374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8004ae6:	bf00      	nop
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	20003ef8 	.word	0x20003ef8

08004af0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8004af4:	4802      	ldr	r0, [pc, #8]	; (8004b00 <DMA2_Stream6_IRQHandler+0x10>)
 8004af6:	f000 fc3d 	bl	8005374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8004afa:	bf00      	nop
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	20003f58 	.word	0x20003f58

08004b04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004b04:	b480      	push	{r7}
 8004b06:	af00      	add	r7, sp, #0
	return 1;
 8004b08:	2301      	movs	r3, #1
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <_kill>:

int _kill(int pid, int sig)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004b1e:	f008 fd1f 	bl	800d560 <__errno>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2216      	movs	r2, #22
 8004b26:	601a      	str	r2, [r3, #0]
	return -1;
 8004b28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3708      	adds	r7, #8
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <_exit>:

void _exit (int status)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f7ff ffe7 	bl	8004b14 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004b46:	e7fe      	b.n	8004b46 <_exit+0x12>

08004b48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b086      	sub	sp, #24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b54:	2300      	movs	r3, #0
 8004b56:	617b      	str	r3, [r7, #20]
 8004b58:	e00a      	b.n	8004b70 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004b5a:	f3af 8000 	nop.w
 8004b5e:	4601      	mov	r1, r0
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	1c5a      	adds	r2, r3, #1
 8004b64:	60ba      	str	r2, [r7, #8]
 8004b66:	b2ca      	uxtb	r2, r1
 8004b68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	617b      	str	r3, [r7, #20]
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	dbf0      	blt.n	8004b5a <_read+0x12>
	}

return len;
 8004b78:	687b      	ldr	r3, [r7, #4]
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3718      	adds	r7, #24
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b086      	sub	sp, #24
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	60f8      	str	r0, [r7, #12]
 8004b8a:	60b9      	str	r1, [r7, #8]
 8004b8c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b8e:	2300      	movs	r3, #0
 8004b90:	617b      	str	r3, [r7, #20]
 8004b92:	e009      	b.n	8004ba8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	1c5a      	adds	r2, r3, #1
 8004b98:	60ba      	str	r2, [r7, #8]
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7fe ffe9 	bl	8003b74 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	617b      	str	r3, [r7, #20]
 8004ba8:	697a      	ldr	r2, [r7, #20]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	dbf1      	blt.n	8004b94 <_write+0x12>
	}
	return len;
 8004bb0:	687b      	ldr	r3, [r7, #4]
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3718      	adds	r7, #24
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <_close>:

int _close(int file)
{
 8004bba:	b480      	push	{r7}
 8004bbc:	b083      	sub	sp, #12
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
	return -1;
 8004bc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr

08004bd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b083      	sub	sp, #12
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
 8004bda:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004be2:	605a      	str	r2, [r3, #4]
	return 0;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <_isatty>:

int _isatty(int file)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b083      	sub	sp, #12
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
	return 1;
 8004bfa:	2301      	movs	r3, #1
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
	return 0;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3714      	adds	r7, #20
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
	...

08004c24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004c2c:	4a14      	ldr	r2, [pc, #80]	; (8004c80 <_sbrk+0x5c>)
 8004c2e:	4b15      	ldr	r3, [pc, #84]	; (8004c84 <_sbrk+0x60>)
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004c38:	4b13      	ldr	r3, [pc, #76]	; (8004c88 <_sbrk+0x64>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d102      	bne.n	8004c46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004c40:	4b11      	ldr	r3, [pc, #68]	; (8004c88 <_sbrk+0x64>)
 8004c42:	4a12      	ldr	r2, [pc, #72]	; (8004c8c <_sbrk+0x68>)
 8004c44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004c46:	4b10      	ldr	r3, [pc, #64]	; (8004c88 <_sbrk+0x64>)
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d207      	bcs.n	8004c64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004c54:	f008 fc84 	bl	800d560 <__errno>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	220c      	movs	r2, #12
 8004c5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c62:	e009      	b.n	8004c78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004c64:	4b08      	ldr	r3, [pc, #32]	; (8004c88 <_sbrk+0x64>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004c6a:	4b07      	ldr	r3, [pc, #28]	; (8004c88 <_sbrk+0x64>)
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4413      	add	r3, r2
 8004c72:	4a05      	ldr	r2, [pc, #20]	; (8004c88 <_sbrk+0x64>)
 8004c74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004c76:	68fb      	ldr	r3, [r7, #12]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3718      	adds	r7, #24
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	20080000 	.word	0x20080000
 8004c84:	00000400 	.word	0x00000400
 8004c88:	20003fb8 	.word	0x20003fb8
 8004c8c:	20004098 	.word	0x20004098

08004c90 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004c90:	b480      	push	{r7}
 8004c92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c94:	4b06      	ldr	r3, [pc, #24]	; (8004cb0 <SystemInit+0x20>)
 8004c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c9a:	4a05      	ldr	r2, [pc, #20]	; (8004cb0 <SystemInit+0x20>)
 8004c9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ca0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ca4:	bf00      	nop
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	e000ed00 	.word	0xe000ed00

08004cb4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004cb8:	4b14      	ldr	r3, [pc, #80]	; (8004d0c <MX_USART3_UART_Init+0x58>)
 8004cba:	4a15      	ldr	r2, [pc, #84]	; (8004d10 <MX_USART3_UART_Init+0x5c>)
 8004cbc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004cbe:	4b13      	ldr	r3, [pc, #76]	; (8004d0c <MX_USART3_UART_Init+0x58>)
 8004cc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004cc4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004cc6:	4b11      	ldr	r3, [pc, #68]	; (8004d0c <MX_USART3_UART_Init+0x58>)
 8004cc8:	2200      	movs	r2, #0
 8004cca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004ccc:	4b0f      	ldr	r3, [pc, #60]	; (8004d0c <MX_USART3_UART_Init+0x58>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004cd2:	4b0e      	ldr	r3, [pc, #56]	; (8004d0c <MX_USART3_UART_Init+0x58>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004cd8:	4b0c      	ldr	r3, [pc, #48]	; (8004d0c <MX_USART3_UART_Init+0x58>)
 8004cda:	220c      	movs	r2, #12
 8004cdc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004cde:	4b0b      	ldr	r3, [pc, #44]	; (8004d0c <MX_USART3_UART_Init+0x58>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ce4:	4b09      	ldr	r3, [pc, #36]	; (8004d0c <MX_USART3_UART_Init+0x58>)
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004cea:	4b08      	ldr	r3, [pc, #32]	; (8004d0c <MX_USART3_UART_Init+0x58>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004cf0:	4b06      	ldr	r3, [pc, #24]	; (8004d0c <MX_USART3_UART_Init+0x58>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004cf6:	4805      	ldr	r0, [pc, #20]	; (8004d0c <MX_USART3_UART_Init+0x58>)
 8004cf8:	f004 fcad 	bl	8009656 <HAL_UART_Init>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d001      	beq.n	8004d06 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8004d02:	f7ff fd73 	bl	80047ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004d06:	bf00      	nop
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	20003fbc 	.word	0x20003fbc
 8004d10:	40004800 	.word	0x40004800

08004d14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b08a      	sub	sp, #40	; 0x28
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d1c:	f107 0314 	add.w	r3, r7, #20
 8004d20:	2200      	movs	r2, #0
 8004d22:	601a      	str	r2, [r3, #0]
 8004d24:	605a      	str	r2, [r3, #4]
 8004d26:	609a      	str	r2, [r3, #8]
 8004d28:	60da      	str	r2, [r3, #12]
 8004d2a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a17      	ldr	r2, [pc, #92]	; (8004d90 <HAL_UART_MspInit+0x7c>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d128      	bne.n	8004d88 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004d36:	4b17      	ldr	r3, [pc, #92]	; (8004d94 <HAL_UART_MspInit+0x80>)
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	4a16      	ldr	r2, [pc, #88]	; (8004d94 <HAL_UART_MspInit+0x80>)
 8004d3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d40:	6413      	str	r3, [r2, #64]	; 0x40
 8004d42:	4b14      	ldr	r3, [pc, #80]	; (8004d94 <HAL_UART_MspInit+0x80>)
 8004d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d4a:	613b      	str	r3, [r7, #16]
 8004d4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004d4e:	4b11      	ldr	r3, [pc, #68]	; (8004d94 <HAL_UART_MspInit+0x80>)
 8004d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d52:	4a10      	ldr	r2, [pc, #64]	; (8004d94 <HAL_UART_MspInit+0x80>)
 8004d54:	f043 0308 	orr.w	r3, r3, #8
 8004d58:	6313      	str	r3, [r2, #48]	; 0x30
 8004d5a:	4b0e      	ldr	r3, [pc, #56]	; (8004d94 <HAL_UART_MspInit+0x80>)
 8004d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5e:	f003 0308 	and.w	r3, r3, #8
 8004d62:	60fb      	str	r3, [r7, #12]
 8004d64:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004d66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004d6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d70:	2300      	movs	r3, #0
 8004d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d74:	2303      	movs	r3, #3
 8004d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004d78:	2307      	movs	r3, #7
 8004d7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004d7c:	f107 0314 	add.w	r3, r7, #20
 8004d80:	4619      	mov	r1, r3
 8004d82:	4805      	ldr	r0, [pc, #20]	; (8004d98 <HAL_UART_MspInit+0x84>)
 8004d84:	f000 fd6c 	bl	8005860 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004d88:	bf00      	nop
 8004d8a:	3728      	adds	r7, #40	; 0x28
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	40004800 	.word	0x40004800
 8004d94:	40023800 	.word	0x40023800
 8004d98:	40020c00 	.word	0x40020c00

08004d9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004d9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004dd4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004da0:	480d      	ldr	r0, [pc, #52]	; (8004dd8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004da2:	490e      	ldr	r1, [pc, #56]	; (8004ddc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004da4:	4a0e      	ldr	r2, [pc, #56]	; (8004de0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004da6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004da8:	e002      	b.n	8004db0 <LoopCopyDataInit>

08004daa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004daa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004dac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004dae:	3304      	adds	r3, #4

08004db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004db0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004db2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004db4:	d3f9      	bcc.n	8004daa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004db6:	4a0b      	ldr	r2, [pc, #44]	; (8004de4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004db8:	4c0b      	ldr	r4, [pc, #44]	; (8004de8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004dba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004dbc:	e001      	b.n	8004dc2 <LoopFillZerobss>

08004dbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004dbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004dc0:	3204      	adds	r2, #4

08004dc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004dc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004dc4:	d3fb      	bcc.n	8004dbe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004dc6:	f7ff ff63 	bl	8004c90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004dca:	f008 fbcf 	bl	800d56c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004dce:	f7ff f9fb 	bl	80041c8 <main>
  bx  lr    
 8004dd2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004dd4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8004dd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ddc:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8004de0:	08014440 	.word	0x08014440
  ldr r2, =_sbss
 8004de4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8004de8:	20004098 	.word	0x20004098

08004dec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004dec:	e7fe      	b.n	8004dec <ADC_IRQHandler>

08004dee <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004df2:	2003      	movs	r0, #3
 8004df4:	f000 f94c 	bl	8005090 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004df8:	200f      	movs	r0, #15
 8004dfa:	f000 f805 	bl	8004e08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004dfe:	f7ff fe15 	bl	8004a2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004e10:	4b12      	ldr	r3, [pc, #72]	; (8004e5c <HAL_InitTick+0x54>)
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	4b12      	ldr	r3, [pc, #72]	; (8004e60 <HAL_InitTick+0x58>)
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	4619      	mov	r1, r3
 8004e1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 f967 	bl	80050fa <HAL_SYSTICK_Config>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e00e      	b.n	8004e54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2b0f      	cmp	r3, #15
 8004e3a:	d80a      	bhi.n	8004e52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	6879      	ldr	r1, [r7, #4]
 8004e40:	f04f 30ff 	mov.w	r0, #4294967295
 8004e44:	f000 f92f 	bl	80050a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004e48:	4a06      	ldr	r2, [pc, #24]	; (8004e64 <HAL_InitTick+0x5c>)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	e000      	b.n	8004e54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3708      	adds	r7, #8
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	20000000 	.word	0x20000000
 8004e60:	20000008 	.word	0x20000008
 8004e64:	20000004 	.word	0x20000004

08004e68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004e6c:	4b06      	ldr	r3, [pc, #24]	; (8004e88 <HAL_IncTick+0x20>)
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	461a      	mov	r2, r3
 8004e72:	4b06      	ldr	r3, [pc, #24]	; (8004e8c <HAL_IncTick+0x24>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4413      	add	r3, r2
 8004e78:	4a04      	ldr	r2, [pc, #16]	; (8004e8c <HAL_IncTick+0x24>)
 8004e7a:	6013      	str	r3, [r2, #0]
}
 8004e7c:	bf00      	nop
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	20000008 	.word	0x20000008
 8004e8c:	20004040 	.word	0x20004040

08004e90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e90:	b480      	push	{r7}
 8004e92:	af00      	add	r7, sp, #0
  return uwTick;
 8004e94:	4b03      	ldr	r3, [pc, #12]	; (8004ea4 <HAL_GetTick+0x14>)
 8004e96:	681b      	ldr	r3, [r3, #0]
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	20004040 	.word	0x20004040

08004ea8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004eb0:	f7ff ffee 	bl	8004e90 <HAL_GetTick>
 8004eb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec0:	d005      	beq.n	8004ece <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004ec2:	4b0a      	ldr	r3, [pc, #40]	; (8004eec <HAL_Delay+0x44>)
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	4413      	add	r3, r2
 8004ecc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004ece:	bf00      	nop
 8004ed0:	f7ff ffde 	bl	8004e90 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d8f7      	bhi.n	8004ed0 <HAL_Delay+0x28>
  {
  }
}
 8004ee0:	bf00      	nop
 8004ee2:	bf00      	nop
 8004ee4:	3710      	adds	r7, #16
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	20000008 	.word	0x20000008

08004ef0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f003 0307 	and.w	r3, r3, #7
 8004efe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f00:	4b0b      	ldr	r3, [pc, #44]	; (8004f30 <__NVIC_SetPriorityGrouping+0x40>)
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004f18:	4b06      	ldr	r3, [pc, #24]	; (8004f34 <__NVIC_SetPriorityGrouping+0x44>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f1e:	4a04      	ldr	r2, [pc, #16]	; (8004f30 <__NVIC_SetPriorityGrouping+0x40>)
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	60d3      	str	r3, [r2, #12]
}
 8004f24:	bf00      	nop
 8004f26:	3714      	adds	r7, #20
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr
 8004f30:	e000ed00 	.word	0xe000ed00
 8004f34:	05fa0000 	.word	0x05fa0000

08004f38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f3c:	4b04      	ldr	r3, [pc, #16]	; (8004f50 <__NVIC_GetPriorityGrouping+0x18>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	0a1b      	lsrs	r3, r3, #8
 8004f42:	f003 0307 	and.w	r3, r3, #7
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr
 8004f50:	e000ed00 	.word	0xe000ed00

08004f54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	db0b      	blt.n	8004f7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f66:	79fb      	ldrb	r3, [r7, #7]
 8004f68:	f003 021f 	and.w	r2, r3, #31
 8004f6c:	4907      	ldr	r1, [pc, #28]	; (8004f8c <__NVIC_EnableIRQ+0x38>)
 8004f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f72:	095b      	lsrs	r3, r3, #5
 8004f74:	2001      	movs	r0, #1
 8004f76:	fa00 f202 	lsl.w	r2, r0, r2
 8004f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004f7e:	bf00      	nop
 8004f80:	370c      	adds	r7, #12
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	e000e100 	.word	0xe000e100

08004f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	4603      	mov	r3, r0
 8004f98:	6039      	str	r1, [r7, #0]
 8004f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	db0a      	blt.n	8004fba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	b2da      	uxtb	r2, r3
 8004fa8:	490c      	ldr	r1, [pc, #48]	; (8004fdc <__NVIC_SetPriority+0x4c>)
 8004faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fae:	0112      	lsls	r2, r2, #4
 8004fb0:	b2d2      	uxtb	r2, r2
 8004fb2:	440b      	add	r3, r1
 8004fb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004fb8:	e00a      	b.n	8004fd0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	b2da      	uxtb	r2, r3
 8004fbe:	4908      	ldr	r1, [pc, #32]	; (8004fe0 <__NVIC_SetPriority+0x50>)
 8004fc0:	79fb      	ldrb	r3, [r7, #7]
 8004fc2:	f003 030f 	and.w	r3, r3, #15
 8004fc6:	3b04      	subs	r3, #4
 8004fc8:	0112      	lsls	r2, r2, #4
 8004fca:	b2d2      	uxtb	r2, r2
 8004fcc:	440b      	add	r3, r1
 8004fce:	761a      	strb	r2, [r3, #24]
}
 8004fd0:	bf00      	nop
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr
 8004fdc:	e000e100 	.word	0xe000e100
 8004fe0:	e000ed00 	.word	0xe000ed00

08004fe4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b089      	sub	sp, #36	; 0x24
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f003 0307 	and.w	r3, r3, #7
 8004ff6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	f1c3 0307 	rsb	r3, r3, #7
 8004ffe:	2b04      	cmp	r3, #4
 8005000:	bf28      	it	cs
 8005002:	2304      	movcs	r3, #4
 8005004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	3304      	adds	r3, #4
 800500a:	2b06      	cmp	r3, #6
 800500c:	d902      	bls.n	8005014 <NVIC_EncodePriority+0x30>
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	3b03      	subs	r3, #3
 8005012:	e000      	b.n	8005016 <NVIC_EncodePriority+0x32>
 8005014:	2300      	movs	r3, #0
 8005016:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005018:	f04f 32ff 	mov.w	r2, #4294967295
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	fa02 f303 	lsl.w	r3, r2, r3
 8005022:	43da      	mvns	r2, r3
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	401a      	ands	r2, r3
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800502c:	f04f 31ff 	mov.w	r1, #4294967295
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	fa01 f303 	lsl.w	r3, r1, r3
 8005036:	43d9      	mvns	r1, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800503c:	4313      	orrs	r3, r2
         );
}
 800503e:	4618      	mov	r0, r3
 8005040:	3724      	adds	r7, #36	; 0x24
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
	...

0800504c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	3b01      	subs	r3, #1
 8005058:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800505c:	d301      	bcc.n	8005062 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800505e:	2301      	movs	r3, #1
 8005060:	e00f      	b.n	8005082 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005062:	4a0a      	ldr	r2, [pc, #40]	; (800508c <SysTick_Config+0x40>)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	3b01      	subs	r3, #1
 8005068:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800506a:	210f      	movs	r1, #15
 800506c:	f04f 30ff 	mov.w	r0, #4294967295
 8005070:	f7ff ff8e 	bl	8004f90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005074:	4b05      	ldr	r3, [pc, #20]	; (800508c <SysTick_Config+0x40>)
 8005076:	2200      	movs	r2, #0
 8005078:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800507a:	4b04      	ldr	r3, [pc, #16]	; (800508c <SysTick_Config+0x40>)
 800507c:	2207      	movs	r2, #7
 800507e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3708      	adds	r7, #8
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	e000e010 	.word	0xe000e010

08005090 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f7ff ff29 	bl	8004ef0 <__NVIC_SetPriorityGrouping>
}
 800509e:	bf00      	nop
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b086      	sub	sp, #24
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	4603      	mov	r3, r0
 80050ae:	60b9      	str	r1, [r7, #8]
 80050b0:	607a      	str	r2, [r7, #4]
 80050b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80050b4:	2300      	movs	r3, #0
 80050b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80050b8:	f7ff ff3e 	bl	8004f38 <__NVIC_GetPriorityGrouping>
 80050bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	68b9      	ldr	r1, [r7, #8]
 80050c2:	6978      	ldr	r0, [r7, #20]
 80050c4:	f7ff ff8e 	bl	8004fe4 <NVIC_EncodePriority>
 80050c8:	4602      	mov	r2, r0
 80050ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050ce:	4611      	mov	r1, r2
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7ff ff5d 	bl	8004f90 <__NVIC_SetPriority>
}
 80050d6:	bf00      	nop
 80050d8:	3718      	adds	r7, #24
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b082      	sub	sp, #8
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	4603      	mov	r3, r0
 80050e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7ff ff31 	bl	8004f54 <__NVIC_EnableIRQ>
}
 80050f2:	bf00      	nop
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b082      	sub	sp, #8
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f7ff ffa2 	bl	800504c <SysTick_Config>
 8005108:	4603      	mov	r3, r0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3708      	adds	r7, #8
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
	...

08005114 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800511c:	2300      	movs	r3, #0
 800511e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005120:	f7ff feb6 	bl	8004e90 <HAL_GetTick>
 8005124:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d101      	bne.n	8005130 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e099      	b.n	8005264 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2202      	movs	r2, #2
 8005134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f022 0201 	bic.w	r2, r2, #1
 800514e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005150:	e00f      	b.n	8005172 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005152:	f7ff fe9d 	bl	8004e90 <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	2b05      	cmp	r3, #5
 800515e:	d908      	bls.n	8005172 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2220      	movs	r2, #32
 8005164:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2203      	movs	r2, #3
 800516a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e078      	b.n	8005264 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1e8      	bne.n	8005152 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	4b38      	ldr	r3, [pc, #224]	; (800526c <HAL_DMA_Init+0x158>)
 800518c:	4013      	ands	r3, r2
 800518e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800519e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c8:	2b04      	cmp	r3, #4
 80051ca:	d107      	bne.n	80051dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d4:	4313      	orrs	r3, r2
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	4313      	orrs	r3, r2
 80051da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	f023 0307 	bic.w	r3, r3, #7
 80051f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005202:	2b04      	cmp	r3, #4
 8005204:	d117      	bne.n	8005236 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	4313      	orrs	r3, r2
 800520e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00e      	beq.n	8005236 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 faa5 	bl	8005768 <DMA_CheckFifoParam>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d008      	beq.n	8005236 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2240      	movs	r2, #64	; 0x40
 8005228:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005232:	2301      	movs	r3, #1
 8005234:	e016      	b.n	8005264 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 fa5c 	bl	80056fc <DMA_CalcBaseAndBitshift>
 8005244:	4603      	mov	r3, r0
 8005246:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800524c:	223f      	movs	r2, #63	; 0x3f
 800524e:	409a      	lsls	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	3718      	adds	r7, #24
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	e010803f 	.word	0xe010803f

08005270 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
 800527c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800527e:	2300      	movs	r3, #0
 8005280:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005286:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800528e:	2b01      	cmp	r3, #1
 8005290:	d101      	bne.n	8005296 <HAL_DMA_Start_IT+0x26>
 8005292:	2302      	movs	r3, #2
 8005294:	e048      	b.n	8005328 <HAL_DMA_Start_IT+0xb8>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d137      	bne.n	800531a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2202      	movs	r2, #2
 80052ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	68b9      	ldr	r1, [r7, #8]
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f000 f9ee 	bl	80056a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052c8:	223f      	movs	r2, #63	; 0x3f
 80052ca:	409a      	lsls	r2, r3
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f042 0216 	orr.w	r2, r2, #22
 80052de:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	695a      	ldr	r2, [r3, #20]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80052ee:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d007      	beq.n	8005308 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f042 0208 	orr.w	r2, r2, #8
 8005306:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f042 0201 	orr.w	r2, r2, #1
 8005316:	601a      	str	r2, [r3, #0]
 8005318:	e005      	b.n	8005326 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005322:	2302      	movs	r3, #2
 8005324:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005326:	7dfb      	ldrb	r3, [r7, #23]
}
 8005328:	4618      	mov	r0, r3
 800532a:	3718      	adds	r7, #24
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b02      	cmp	r3, #2
 8005342:	d004      	beq.n	800534e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2280      	movs	r2, #128	; 0x80
 8005348:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e00c      	b.n	8005368 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2205      	movs	r2, #5
 8005352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f022 0201 	bic.w	r2, r2, #1
 8005364:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b086      	sub	sp, #24
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800537c:	2300      	movs	r3, #0
 800537e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8005380:	4b8e      	ldr	r3, [pc, #568]	; (80055bc <HAL_DMA_IRQHandler+0x248>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a8e      	ldr	r2, [pc, #568]	; (80055c0 <HAL_DMA_IRQHandler+0x24c>)
 8005386:	fba2 2303 	umull	r2, r3, r2, r3
 800538a:	0a9b      	lsrs	r3, r3, #10
 800538c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005392:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800539e:	2208      	movs	r2, #8
 80053a0:	409a      	lsls	r2, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	4013      	ands	r3, r2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d01a      	beq.n	80053e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0304 	and.w	r3, r3, #4
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d013      	beq.n	80053e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f022 0204 	bic.w	r2, r2, #4
 80053c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053cc:	2208      	movs	r2, #8
 80053ce:	409a      	lsls	r2, r3
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d8:	f043 0201 	orr.w	r2, r3, #1
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053e4:	2201      	movs	r2, #1
 80053e6:	409a      	lsls	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	4013      	ands	r3, r2
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d012      	beq.n	8005416 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00b      	beq.n	8005416 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005402:	2201      	movs	r2, #1
 8005404:	409a      	lsls	r2, r3
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800540e:	f043 0202 	orr.w	r2, r3, #2
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800541a:	2204      	movs	r2, #4
 800541c:	409a      	lsls	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	4013      	ands	r3, r2
 8005422:	2b00      	cmp	r3, #0
 8005424:	d012      	beq.n	800544c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0302 	and.w	r3, r3, #2
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00b      	beq.n	800544c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005438:	2204      	movs	r2, #4
 800543a:	409a      	lsls	r2, r3
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005444:	f043 0204 	orr.w	r2, r3, #4
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005450:	2210      	movs	r2, #16
 8005452:	409a      	lsls	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4013      	ands	r3, r2
 8005458:	2b00      	cmp	r3, #0
 800545a:	d043      	beq.n	80054e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0308 	and.w	r3, r3, #8
 8005466:	2b00      	cmp	r3, #0
 8005468:	d03c      	beq.n	80054e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800546e:	2210      	movs	r2, #16
 8005470:	409a      	lsls	r2, r3
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d018      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d108      	bne.n	80054a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005496:	2b00      	cmp	r3, #0
 8005498:	d024      	beq.n	80054e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	4798      	blx	r3
 80054a2:	e01f      	b.n	80054e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d01b      	beq.n	80054e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	4798      	blx	r3
 80054b4:	e016      	b.n	80054e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d107      	bne.n	80054d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f022 0208 	bic.w	r2, r2, #8
 80054d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d003      	beq.n	80054e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054e8:	2220      	movs	r2, #32
 80054ea:	409a      	lsls	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	4013      	ands	r3, r2
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f000 808f 	beq.w	8005614 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0310 	and.w	r3, r3, #16
 8005500:	2b00      	cmp	r3, #0
 8005502:	f000 8087 	beq.w	8005614 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800550a:	2220      	movs	r2, #32
 800550c:	409a      	lsls	r2, r3
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b05      	cmp	r3, #5
 800551c:	d136      	bne.n	800558c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f022 0216 	bic.w	r2, r2, #22
 800552c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	695a      	ldr	r2, [r3, #20]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800553c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005542:	2b00      	cmp	r3, #0
 8005544:	d103      	bne.n	800554e <HAL_DMA_IRQHandler+0x1da>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800554a:	2b00      	cmp	r3, #0
 800554c:	d007      	beq.n	800555e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f022 0208 	bic.w	r2, r2, #8
 800555c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005562:	223f      	movs	r2, #63	; 0x3f
 8005564:	409a      	lsls	r2, r3
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2201      	movs	r2, #1
 800556e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800557e:	2b00      	cmp	r3, #0
 8005580:	d07e      	beq.n	8005680 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	4798      	blx	r3
        }
        return;
 800558a:	e079      	b.n	8005680 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d01d      	beq.n	80055d6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d10d      	bne.n	80055c4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d031      	beq.n	8005614 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	4798      	blx	r3
 80055b8:	e02c      	b.n	8005614 <HAL_DMA_IRQHandler+0x2a0>
 80055ba:	bf00      	nop
 80055bc:	20000000 	.word	0x20000000
 80055c0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d023      	beq.n	8005614 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	4798      	blx	r3
 80055d4:	e01e      	b.n	8005614 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d10f      	bne.n	8005604 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f022 0210 	bic.w	r2, r2, #16
 80055f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005608:	2b00      	cmp	r3, #0
 800560a:	d003      	beq.n	8005614 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005618:	2b00      	cmp	r3, #0
 800561a:	d032      	beq.n	8005682 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005620:	f003 0301 	and.w	r3, r3, #1
 8005624:	2b00      	cmp	r3, #0
 8005626:	d022      	beq.n	800566e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2205      	movs	r2, #5
 800562c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f022 0201 	bic.w	r2, r2, #1
 800563e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	3301      	adds	r3, #1
 8005644:	60bb      	str	r3, [r7, #8]
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	429a      	cmp	r2, r3
 800564a:	d307      	bcc.n	800565c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1f2      	bne.n	8005640 <HAL_DMA_IRQHandler+0x2cc>
 800565a:	e000      	b.n	800565e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800565c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005672:	2b00      	cmp	r3, #0
 8005674:	d005      	beq.n	8005682 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	4798      	blx	r3
 800567e:	e000      	b.n	8005682 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005680:	bf00      	nop
    }
  }
}
 8005682:	3718      	adds	r7, #24
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005694:	4618      	mov	r0, r3
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
 80056ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80056bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	683a      	ldr	r2, [r7, #0]
 80056c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	2b40      	cmp	r3, #64	; 0x40
 80056cc:	d108      	bne.n	80056e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68ba      	ldr	r2, [r7, #8]
 80056dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80056de:	e007      	b.n	80056f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68ba      	ldr	r2, [r7, #8]
 80056e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	60da      	str	r2, [r3, #12]
}
 80056f0:	bf00      	nop
 80056f2:	3714      	adds	r7, #20
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	b2db      	uxtb	r3, r3
 800570a:	3b10      	subs	r3, #16
 800570c:	4a13      	ldr	r2, [pc, #76]	; (800575c <DMA_CalcBaseAndBitshift+0x60>)
 800570e:	fba2 2303 	umull	r2, r3, r2, r3
 8005712:	091b      	lsrs	r3, r3, #4
 8005714:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005716:	4a12      	ldr	r2, [pc, #72]	; (8005760 <DMA_CalcBaseAndBitshift+0x64>)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	4413      	add	r3, r2
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	461a      	mov	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2b03      	cmp	r3, #3
 8005728:	d908      	bls.n	800573c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	461a      	mov	r2, r3
 8005730:	4b0c      	ldr	r3, [pc, #48]	; (8005764 <DMA_CalcBaseAndBitshift+0x68>)
 8005732:	4013      	ands	r3, r2
 8005734:	1d1a      	adds	r2, r3, #4
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	659a      	str	r2, [r3, #88]	; 0x58
 800573a:	e006      	b.n	800574a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	461a      	mov	r2, r3
 8005742:	4b08      	ldr	r3, [pc, #32]	; (8005764 <DMA_CalcBaseAndBitshift+0x68>)
 8005744:	4013      	ands	r3, r2
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800574e:	4618      	mov	r0, r3
 8005750:	3714      	adds	r7, #20
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	aaaaaaab 	.word	0xaaaaaaab
 8005760:	0801262c 	.word	0x0801262c
 8005764:	fffffc00 	.word	0xfffffc00

08005768 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005770:	2300      	movs	r3, #0
 8005772:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005778:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d11f      	bne.n	80057c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	2b03      	cmp	r3, #3
 8005786:	d856      	bhi.n	8005836 <DMA_CheckFifoParam+0xce>
 8005788:	a201      	add	r2, pc, #4	; (adr r2, 8005790 <DMA_CheckFifoParam+0x28>)
 800578a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800578e:	bf00      	nop
 8005790:	080057a1 	.word	0x080057a1
 8005794:	080057b3 	.word	0x080057b3
 8005798:	080057a1 	.word	0x080057a1
 800579c:	08005837 	.word	0x08005837
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d046      	beq.n	800583a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057b0:	e043      	b.n	800583a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80057ba:	d140      	bne.n	800583e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057c0:	e03d      	b.n	800583e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057ca:	d121      	bne.n	8005810 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	2b03      	cmp	r3, #3
 80057d0:	d837      	bhi.n	8005842 <DMA_CheckFifoParam+0xda>
 80057d2:	a201      	add	r2, pc, #4	; (adr r2, 80057d8 <DMA_CheckFifoParam+0x70>)
 80057d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d8:	080057e9 	.word	0x080057e9
 80057dc:	080057ef 	.word	0x080057ef
 80057e0:	080057e9 	.word	0x080057e9
 80057e4:	08005801 	.word	0x08005801
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	73fb      	strb	r3, [r7, #15]
      break;
 80057ec:	e030      	b.n	8005850 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d025      	beq.n	8005846 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057fe:	e022      	b.n	8005846 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005804:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005808:	d11f      	bne.n	800584a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800580e:	e01c      	b.n	800584a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	2b02      	cmp	r3, #2
 8005814:	d903      	bls.n	800581e <DMA_CheckFifoParam+0xb6>
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	2b03      	cmp	r3, #3
 800581a:	d003      	beq.n	8005824 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800581c:	e018      	b.n	8005850 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	73fb      	strb	r3, [r7, #15]
      break;
 8005822:	e015      	b.n	8005850 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005828:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00e      	beq.n	800584e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	73fb      	strb	r3, [r7, #15]
      break;
 8005834:	e00b      	b.n	800584e <DMA_CheckFifoParam+0xe6>
      break;
 8005836:	bf00      	nop
 8005838:	e00a      	b.n	8005850 <DMA_CheckFifoParam+0xe8>
      break;
 800583a:	bf00      	nop
 800583c:	e008      	b.n	8005850 <DMA_CheckFifoParam+0xe8>
      break;
 800583e:	bf00      	nop
 8005840:	e006      	b.n	8005850 <DMA_CheckFifoParam+0xe8>
      break;
 8005842:	bf00      	nop
 8005844:	e004      	b.n	8005850 <DMA_CheckFifoParam+0xe8>
      break;
 8005846:	bf00      	nop
 8005848:	e002      	b.n	8005850 <DMA_CheckFifoParam+0xe8>
      break;   
 800584a:	bf00      	nop
 800584c:	e000      	b.n	8005850 <DMA_CheckFifoParam+0xe8>
      break;
 800584e:	bf00      	nop
    }
  } 
  
  return status; 
 8005850:	7bfb      	ldrb	r3, [r7, #15]
}
 8005852:	4618      	mov	r0, r3
 8005854:	3714      	adds	r7, #20
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop

08005860 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005860:	b480      	push	{r7}
 8005862:	b089      	sub	sp, #36	; 0x24
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800586a:	2300      	movs	r3, #0
 800586c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800586e:	2300      	movs	r3, #0
 8005870:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005872:	2300      	movs	r3, #0
 8005874:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005876:	2300      	movs	r3, #0
 8005878:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800587a:	2300      	movs	r3, #0
 800587c:	61fb      	str	r3, [r7, #28]
 800587e:	e175      	b.n	8005b6c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005880:	2201      	movs	r2, #1
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	fa02 f303 	lsl.w	r3, r2, r3
 8005888:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	4013      	ands	r3, r2
 8005892:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	429a      	cmp	r2, r3
 800589a:	f040 8164 	bne.w	8005b66 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f003 0303 	and.w	r3, r3, #3
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d005      	beq.n	80058b6 <HAL_GPIO_Init+0x56>
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	f003 0303 	and.w	r3, r3, #3
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d130      	bne.n	8005918 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	005b      	lsls	r3, r3, #1
 80058c0:	2203      	movs	r2, #3
 80058c2:	fa02 f303 	lsl.w	r3, r2, r3
 80058c6:	43db      	mvns	r3, r3
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	4013      	ands	r3, r2
 80058cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	68da      	ldr	r2, [r3, #12]
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	005b      	lsls	r3, r3, #1
 80058d6:	fa02 f303 	lsl.w	r3, r2, r3
 80058da:	69ba      	ldr	r2, [r7, #24]
 80058dc:	4313      	orrs	r3, r2
 80058de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	69ba      	ldr	r2, [r7, #24]
 80058e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80058ec:	2201      	movs	r2, #1
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	fa02 f303 	lsl.w	r3, r2, r3
 80058f4:	43db      	mvns	r3, r3
 80058f6:	69ba      	ldr	r2, [r7, #24]
 80058f8:	4013      	ands	r3, r2
 80058fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	091b      	lsrs	r3, r3, #4
 8005902:	f003 0201 	and.w	r2, r3, #1
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	fa02 f303 	lsl.w	r3, r2, r3
 800590c:	69ba      	ldr	r2, [r7, #24]
 800590e:	4313      	orrs	r3, r2
 8005910:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	f003 0303 	and.w	r3, r3, #3
 8005920:	2b03      	cmp	r3, #3
 8005922:	d017      	beq.n	8005954 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	005b      	lsls	r3, r3, #1
 800592e:	2203      	movs	r2, #3
 8005930:	fa02 f303 	lsl.w	r3, r2, r3
 8005934:	43db      	mvns	r3, r3
 8005936:	69ba      	ldr	r2, [r7, #24]
 8005938:	4013      	ands	r3, r2
 800593a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	689a      	ldr	r2, [r3, #8]
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	005b      	lsls	r3, r3, #1
 8005944:	fa02 f303 	lsl.w	r3, r2, r3
 8005948:	69ba      	ldr	r2, [r7, #24]
 800594a:	4313      	orrs	r3, r2
 800594c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	69ba      	ldr	r2, [r7, #24]
 8005952:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f003 0303 	and.w	r3, r3, #3
 800595c:	2b02      	cmp	r3, #2
 800595e:	d123      	bne.n	80059a8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	08da      	lsrs	r2, r3, #3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	3208      	adds	r2, #8
 8005968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800596c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	f003 0307 	and.w	r3, r3, #7
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	220f      	movs	r2, #15
 8005978:	fa02 f303 	lsl.w	r3, r2, r3
 800597c:	43db      	mvns	r3, r3
 800597e:	69ba      	ldr	r2, [r7, #24]
 8005980:	4013      	ands	r3, r2
 8005982:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	691a      	ldr	r2, [r3, #16]
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	f003 0307 	and.w	r3, r3, #7
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	fa02 f303 	lsl.w	r3, r2, r3
 8005994:	69ba      	ldr	r2, [r7, #24]
 8005996:	4313      	orrs	r3, r2
 8005998:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	08da      	lsrs	r2, r3, #3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	3208      	adds	r2, #8
 80059a2:	69b9      	ldr	r1, [r7, #24]
 80059a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	005b      	lsls	r3, r3, #1
 80059b2:	2203      	movs	r2, #3
 80059b4:	fa02 f303 	lsl.w	r3, r2, r3
 80059b8:	43db      	mvns	r3, r3
 80059ba:	69ba      	ldr	r2, [r7, #24]
 80059bc:	4013      	ands	r3, r2
 80059be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f003 0203 	and.w	r2, r3, #3
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	005b      	lsls	r3, r3, #1
 80059cc:	fa02 f303 	lsl.w	r3, r2, r3
 80059d0:	69ba      	ldr	r2, [r7, #24]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	69ba      	ldr	r2, [r7, #24]
 80059da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f000 80be 	beq.w	8005b66 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059ea:	4b66      	ldr	r3, [pc, #408]	; (8005b84 <HAL_GPIO_Init+0x324>)
 80059ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ee:	4a65      	ldr	r2, [pc, #404]	; (8005b84 <HAL_GPIO_Init+0x324>)
 80059f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059f4:	6453      	str	r3, [r2, #68]	; 0x44
 80059f6:	4b63      	ldr	r3, [pc, #396]	; (8005b84 <HAL_GPIO_Init+0x324>)
 80059f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059fe:	60fb      	str	r3, [r7, #12]
 8005a00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005a02:	4a61      	ldr	r2, [pc, #388]	; (8005b88 <HAL_GPIO_Init+0x328>)
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	089b      	lsrs	r3, r3, #2
 8005a08:	3302      	adds	r3, #2
 8005a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	f003 0303 	and.w	r3, r3, #3
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	220f      	movs	r2, #15
 8005a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1e:	43db      	mvns	r3, r3
 8005a20:	69ba      	ldr	r2, [r7, #24]
 8005a22:	4013      	ands	r3, r2
 8005a24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a58      	ldr	r2, [pc, #352]	; (8005b8c <HAL_GPIO_Init+0x32c>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d037      	beq.n	8005a9e <HAL_GPIO_Init+0x23e>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a57      	ldr	r2, [pc, #348]	; (8005b90 <HAL_GPIO_Init+0x330>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d031      	beq.n	8005a9a <HAL_GPIO_Init+0x23a>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a56      	ldr	r2, [pc, #344]	; (8005b94 <HAL_GPIO_Init+0x334>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d02b      	beq.n	8005a96 <HAL_GPIO_Init+0x236>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a55      	ldr	r2, [pc, #340]	; (8005b98 <HAL_GPIO_Init+0x338>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d025      	beq.n	8005a92 <HAL_GPIO_Init+0x232>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a54      	ldr	r2, [pc, #336]	; (8005b9c <HAL_GPIO_Init+0x33c>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d01f      	beq.n	8005a8e <HAL_GPIO_Init+0x22e>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a53      	ldr	r2, [pc, #332]	; (8005ba0 <HAL_GPIO_Init+0x340>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d019      	beq.n	8005a8a <HAL_GPIO_Init+0x22a>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a52      	ldr	r2, [pc, #328]	; (8005ba4 <HAL_GPIO_Init+0x344>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d013      	beq.n	8005a86 <HAL_GPIO_Init+0x226>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a51      	ldr	r2, [pc, #324]	; (8005ba8 <HAL_GPIO_Init+0x348>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d00d      	beq.n	8005a82 <HAL_GPIO_Init+0x222>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a50      	ldr	r2, [pc, #320]	; (8005bac <HAL_GPIO_Init+0x34c>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d007      	beq.n	8005a7e <HAL_GPIO_Init+0x21e>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a4f      	ldr	r2, [pc, #316]	; (8005bb0 <HAL_GPIO_Init+0x350>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d101      	bne.n	8005a7a <HAL_GPIO_Init+0x21a>
 8005a76:	2309      	movs	r3, #9
 8005a78:	e012      	b.n	8005aa0 <HAL_GPIO_Init+0x240>
 8005a7a:	230a      	movs	r3, #10
 8005a7c:	e010      	b.n	8005aa0 <HAL_GPIO_Init+0x240>
 8005a7e:	2308      	movs	r3, #8
 8005a80:	e00e      	b.n	8005aa0 <HAL_GPIO_Init+0x240>
 8005a82:	2307      	movs	r3, #7
 8005a84:	e00c      	b.n	8005aa0 <HAL_GPIO_Init+0x240>
 8005a86:	2306      	movs	r3, #6
 8005a88:	e00a      	b.n	8005aa0 <HAL_GPIO_Init+0x240>
 8005a8a:	2305      	movs	r3, #5
 8005a8c:	e008      	b.n	8005aa0 <HAL_GPIO_Init+0x240>
 8005a8e:	2304      	movs	r3, #4
 8005a90:	e006      	b.n	8005aa0 <HAL_GPIO_Init+0x240>
 8005a92:	2303      	movs	r3, #3
 8005a94:	e004      	b.n	8005aa0 <HAL_GPIO_Init+0x240>
 8005a96:	2302      	movs	r3, #2
 8005a98:	e002      	b.n	8005aa0 <HAL_GPIO_Init+0x240>
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e000      	b.n	8005aa0 <HAL_GPIO_Init+0x240>
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	69fa      	ldr	r2, [r7, #28]
 8005aa2:	f002 0203 	and.w	r2, r2, #3
 8005aa6:	0092      	lsls	r2, r2, #2
 8005aa8:	4093      	lsls	r3, r2
 8005aaa:	69ba      	ldr	r2, [r7, #24]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005ab0:	4935      	ldr	r1, [pc, #212]	; (8005b88 <HAL_GPIO_Init+0x328>)
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	089b      	lsrs	r3, r3, #2
 8005ab6:	3302      	adds	r3, #2
 8005ab8:	69ba      	ldr	r2, [r7, #24]
 8005aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005abe:	4b3d      	ldr	r3, [pc, #244]	; (8005bb4 <HAL_GPIO_Init+0x354>)
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	43db      	mvns	r3, r3
 8005ac8:	69ba      	ldr	r2, [r7, #24]
 8005aca:	4013      	ands	r3, r2
 8005acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005ada:	69ba      	ldr	r2, [r7, #24]
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005ae2:	4a34      	ldr	r2, [pc, #208]	; (8005bb4 <HAL_GPIO_Init+0x354>)
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005ae8:	4b32      	ldr	r3, [pc, #200]	; (8005bb4 <HAL_GPIO_Init+0x354>)
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	43db      	mvns	r3, r3
 8005af2:	69ba      	ldr	r2, [r7, #24]
 8005af4:	4013      	ands	r3, r2
 8005af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d003      	beq.n	8005b0c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005b04:	69ba      	ldr	r2, [r7, #24]
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005b0c:	4a29      	ldr	r2, [pc, #164]	; (8005bb4 <HAL_GPIO_Init+0x354>)
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005b12:	4b28      	ldr	r3, [pc, #160]	; (8005bb4 <HAL_GPIO_Init+0x354>)
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	43db      	mvns	r3, r3
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	4013      	ands	r3, r2
 8005b20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d003      	beq.n	8005b36 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005b2e:	69ba      	ldr	r2, [r7, #24]
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005b36:	4a1f      	ldr	r2, [pc, #124]	; (8005bb4 <HAL_GPIO_Init+0x354>)
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b3c:	4b1d      	ldr	r3, [pc, #116]	; (8005bb4 <HAL_GPIO_Init+0x354>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	43db      	mvns	r3, r3
 8005b46:	69ba      	ldr	r2, [r7, #24]
 8005b48:	4013      	ands	r3, r2
 8005b4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d003      	beq.n	8005b60 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005b58:	69ba      	ldr	r2, [r7, #24]
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005b60:	4a14      	ldr	r2, [pc, #80]	; (8005bb4 <HAL_GPIO_Init+0x354>)
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	61fb      	str	r3, [r7, #28]
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	2b0f      	cmp	r3, #15
 8005b70:	f67f ae86 	bls.w	8005880 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005b74:	bf00      	nop
 8005b76:	bf00      	nop
 8005b78:	3724      	adds	r7, #36	; 0x24
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	40023800 	.word	0x40023800
 8005b88:	40013800 	.word	0x40013800
 8005b8c:	40020000 	.word	0x40020000
 8005b90:	40020400 	.word	0x40020400
 8005b94:	40020800 	.word	0x40020800
 8005b98:	40020c00 	.word	0x40020c00
 8005b9c:	40021000 	.word	0x40021000
 8005ba0:	40021400 	.word	0x40021400
 8005ba4:	40021800 	.word	0x40021800
 8005ba8:	40021c00 	.word	0x40021c00
 8005bac:	40022000 	.word	0x40022000
 8005bb0:	40022400 	.word	0x40022400
 8005bb4:	40013c00 	.word	0x40013c00

08005bb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d101      	bne.n	8005bca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e07f      	b.n	8005cca <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d106      	bne.n	8005be4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f7fe f890 	bl	8003d04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2224      	movs	r2, #36	; 0x24
 8005be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f022 0201 	bic.w	r2, r2, #1
 8005bfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005c08:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	689a      	ldr	r2, [r3, #8]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c18:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d107      	bne.n	8005c32 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	689a      	ldr	r2, [r3, #8]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c2e:	609a      	str	r2, [r3, #8]
 8005c30:	e006      	b.n	8005c40 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	689a      	ldr	r2, [r3, #8]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005c3e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d104      	bne.n	8005c52 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c50:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	6859      	ldr	r1, [r3, #4]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	4b1d      	ldr	r3, [pc, #116]	; (8005cd4 <HAL_I2C_Init+0x11c>)
 8005c5e:	430b      	orrs	r3, r1
 8005c60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68da      	ldr	r2, [r3, #12]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	691a      	ldr	r2, [r3, #16]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	430a      	orrs	r2, r1
 8005c8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	69d9      	ldr	r1, [r3, #28]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a1a      	ldr	r2, [r3, #32]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f042 0201 	orr.w	r2, r2, #1
 8005caa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2220      	movs	r2, #32
 8005cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3708      	adds	r7, #8
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	02008000 	.word	0x02008000

08005cd8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b088      	sub	sp, #32
 8005cdc:	af02      	add	r7, sp, #8
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	607a      	str	r2, [r7, #4]
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	817b      	strh	r3, [r7, #10]
 8005ce8:	4613      	mov	r3, r2
 8005cea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	2b20      	cmp	r3, #32
 8005cf6:	f040 80da 	bne.w	8005eae <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d101      	bne.n	8005d08 <HAL_I2C_Master_Transmit+0x30>
 8005d04:	2302      	movs	r3, #2
 8005d06:	e0d3      	b.n	8005eb0 <HAL_I2C_Master_Transmit+0x1d8>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005d10:	f7ff f8be 	bl	8004e90 <HAL_GetTick>
 8005d14:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	9300      	str	r3, [sp, #0]
 8005d1a:	2319      	movs	r3, #25
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f000 fdc4 	bl	80068b0 <I2C_WaitOnFlagUntilTimeout>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d001      	beq.n	8005d32 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e0be      	b.n	8005eb0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2221      	movs	r2, #33	; 0x21
 8005d36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2210      	movs	r2, #16
 8005d3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	893a      	ldrh	r2, [r7, #8]
 8005d52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	2bff      	cmp	r3, #255	; 0xff
 8005d62:	d90e      	bls.n	8005d82 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	22ff      	movs	r2, #255	; 0xff
 8005d68:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d6e:	b2da      	uxtb	r2, r3
 8005d70:	8979      	ldrh	r1, [r7, #10]
 8005d72:	4b51      	ldr	r3, [pc, #324]	; (8005eb8 <HAL_I2C_Master_Transmit+0x1e0>)
 8005d74:	9300      	str	r3, [sp, #0]
 8005d76:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d7a:	68f8      	ldr	r0, [r7, #12]
 8005d7c:	f000 ffba 	bl	8006cf4 <I2C_TransferConfig>
 8005d80:	e06c      	b.n	8005e5c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d86:	b29a      	uxth	r2, r3
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d90:	b2da      	uxtb	r2, r3
 8005d92:	8979      	ldrh	r1, [r7, #10]
 8005d94:	4b48      	ldr	r3, [pc, #288]	; (8005eb8 <HAL_I2C_Master_Transmit+0x1e0>)
 8005d96:	9300      	str	r3, [sp, #0]
 8005d98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	f000 ffa9 	bl	8006cf4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005da2:	e05b      	b.n	8005e5c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	6a39      	ldr	r1, [r7, #32]
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f000 fdc1 	bl	8006930 <I2C_WaitOnTXISFlagUntilTimeout>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d001      	beq.n	8005db8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e07b      	b.n	8005eb0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbc:	781a      	ldrb	r2, [r3, #0]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc8:	1c5a      	adds	r2, r3, #1
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005de0:	3b01      	subs	r3, #1
 8005de2:	b29a      	uxth	r2, r3
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d034      	beq.n	8005e5c <HAL_I2C_Master_Transmit+0x184>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d130      	bne.n	8005e5c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	9300      	str	r3, [sp, #0]
 8005dfe:	6a3b      	ldr	r3, [r7, #32]
 8005e00:	2200      	movs	r2, #0
 8005e02:	2180      	movs	r1, #128	; 0x80
 8005e04:	68f8      	ldr	r0, [r7, #12]
 8005e06:	f000 fd53 	bl	80068b0 <I2C_WaitOnFlagUntilTimeout>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d001      	beq.n	8005e14 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e04d      	b.n	8005eb0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	2bff      	cmp	r3, #255	; 0xff
 8005e1c:	d90e      	bls.n	8005e3c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	22ff      	movs	r2, #255	; 0xff
 8005e22:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e28:	b2da      	uxtb	r2, r3
 8005e2a:	8979      	ldrh	r1, [r7, #10]
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	9300      	str	r3, [sp, #0]
 8005e30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f000 ff5d 	bl	8006cf4 <I2C_TransferConfig>
 8005e3a:	e00f      	b.n	8005e5c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e4a:	b2da      	uxtb	r2, r3
 8005e4c:	8979      	ldrh	r1, [r7, #10]
 8005e4e:	2300      	movs	r3, #0
 8005e50:	9300      	str	r3, [sp, #0]
 8005e52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e56:	68f8      	ldr	r0, [r7, #12]
 8005e58:	f000 ff4c 	bl	8006cf4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d19e      	bne.n	8005da4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	6a39      	ldr	r1, [r7, #32]
 8005e6a:	68f8      	ldr	r0, [r7, #12]
 8005e6c:	f000 fda0 	bl	80069b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d001      	beq.n	8005e7a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e01a      	b.n	8005eb0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2220      	movs	r2, #32
 8005e80:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	6859      	ldr	r1, [r3, #4]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	4b0b      	ldr	r3, [pc, #44]	; (8005ebc <HAL_I2C_Master_Transmit+0x1e4>)
 8005e8e:	400b      	ands	r3, r1
 8005e90:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2220      	movs	r2, #32
 8005e96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	e000      	b.n	8005eb0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005eae:	2302      	movs	r3, #2
  }
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3718      	adds	r7, #24
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	80002000 	.word	0x80002000
 8005ebc:	fe00e800 	.word	0xfe00e800

08005ec0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b088      	sub	sp, #32
 8005ec4:	af02      	add	r7, sp, #8
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	607a      	str	r2, [r7, #4]
 8005eca:	461a      	mov	r2, r3
 8005ecc:	460b      	mov	r3, r1
 8005ece:	817b      	strh	r3, [r7, #10]
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	2b20      	cmp	r3, #32
 8005ede:	f040 80db 	bne.w	8006098 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d101      	bne.n	8005ef0 <HAL_I2C_Master_Receive+0x30>
 8005eec:	2302      	movs	r3, #2
 8005eee:	e0d4      	b.n	800609a <HAL_I2C_Master_Receive+0x1da>
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005ef8:	f7fe ffca 	bl	8004e90 <HAL_GetTick>
 8005efc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	9300      	str	r3, [sp, #0]
 8005f02:	2319      	movs	r3, #25
 8005f04:	2201      	movs	r2, #1
 8005f06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	f000 fcd0 	bl	80068b0 <I2C_WaitOnFlagUntilTimeout>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d001      	beq.n	8005f1a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e0bf      	b.n	800609a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2222      	movs	r2, #34	; 0x22
 8005f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2210      	movs	r2, #16
 8005f26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	893a      	ldrh	r2, [r7, #8]
 8005f3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	2bff      	cmp	r3, #255	; 0xff
 8005f4a:	d90e      	bls.n	8005f6a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	22ff      	movs	r2, #255	; 0xff
 8005f50:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f56:	b2da      	uxtb	r2, r3
 8005f58:	8979      	ldrh	r1, [r7, #10]
 8005f5a:	4b52      	ldr	r3, [pc, #328]	; (80060a4 <HAL_I2C_Master_Receive+0x1e4>)
 8005f5c:	9300      	str	r3, [sp, #0]
 8005f5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f000 fec6 	bl	8006cf4 <I2C_TransferConfig>
 8005f68:	e06d      	b.n	8006046 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f78:	b2da      	uxtb	r2, r3
 8005f7a:	8979      	ldrh	r1, [r7, #10]
 8005f7c:	4b49      	ldr	r3, [pc, #292]	; (80060a4 <HAL_I2C_Master_Receive+0x1e4>)
 8005f7e:	9300      	str	r3, [sp, #0]
 8005f80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	f000 feb5 	bl	8006cf4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005f8a:	e05c      	b.n	8006046 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f8c:	697a      	ldr	r2, [r7, #20]
 8005f8e:	6a39      	ldr	r1, [r7, #32]
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f000 fd49 	bl	8006a28 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d001      	beq.n	8005fa0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e07c      	b.n	800609a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005faa:	b2d2      	uxtb	r2, r2
 8005fac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb2:	1c5a      	adds	r2, r3, #1
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fbc:	3b01      	subs	r3, #1
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d034      	beq.n	8006046 <HAL_I2C_Master_Receive+0x186>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d130      	bne.n	8006046 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	9300      	str	r3, [sp, #0]
 8005fe8:	6a3b      	ldr	r3, [r7, #32]
 8005fea:	2200      	movs	r2, #0
 8005fec:	2180      	movs	r1, #128	; 0x80
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	f000 fc5e 	bl	80068b0 <I2C_WaitOnFlagUntilTimeout>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d001      	beq.n	8005ffe <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e04d      	b.n	800609a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006002:	b29b      	uxth	r3, r3
 8006004:	2bff      	cmp	r3, #255	; 0xff
 8006006:	d90e      	bls.n	8006026 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	22ff      	movs	r2, #255	; 0xff
 800600c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006012:	b2da      	uxtb	r2, r3
 8006014:	8979      	ldrh	r1, [r7, #10]
 8006016:	2300      	movs	r3, #0
 8006018:	9300      	str	r3, [sp, #0]
 800601a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	f000 fe68 	bl	8006cf4 <I2C_TransferConfig>
 8006024:	e00f      	b.n	8006046 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800602a:	b29a      	uxth	r2, r3
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006034:	b2da      	uxtb	r2, r3
 8006036:	8979      	ldrh	r1, [r7, #10]
 8006038:	2300      	movs	r3, #0
 800603a:	9300      	str	r3, [sp, #0]
 800603c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	f000 fe57 	bl	8006cf4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800604a:	b29b      	uxth	r3, r3
 800604c:	2b00      	cmp	r3, #0
 800604e:	d19d      	bne.n	8005f8c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006050:	697a      	ldr	r2, [r7, #20]
 8006052:	6a39      	ldr	r1, [r7, #32]
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	f000 fcab 	bl	80069b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d001      	beq.n	8006064 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	e01a      	b.n	800609a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2220      	movs	r2, #32
 800606a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	6859      	ldr	r1, [r3, #4]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	4b0c      	ldr	r3, [pc, #48]	; (80060a8 <HAL_I2C_Master_Receive+0x1e8>)
 8006078:	400b      	ands	r3, r1
 800607a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2220      	movs	r2, #32
 8006080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006094:	2300      	movs	r3, #0
 8006096:	e000      	b.n	800609a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006098:	2302      	movs	r3, #2
  }
}
 800609a:	4618      	mov	r0, r3
 800609c:	3718      	adds	r7, #24
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	80002400 	.word	0x80002400
 80060a8:	fe00e800 	.word	0xfe00e800

080060ac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b088      	sub	sp, #32
 80060b0:	af02      	add	r7, sp, #8
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	4608      	mov	r0, r1
 80060b6:	4611      	mov	r1, r2
 80060b8:	461a      	mov	r2, r3
 80060ba:	4603      	mov	r3, r0
 80060bc:	817b      	strh	r3, [r7, #10]
 80060be:	460b      	mov	r3, r1
 80060c0:	813b      	strh	r3, [r7, #8]
 80060c2:	4613      	mov	r3, r2
 80060c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	2b20      	cmp	r3, #32
 80060d0:	f040 80f9 	bne.w	80062c6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80060d4:	6a3b      	ldr	r3, [r7, #32]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d002      	beq.n	80060e0 <HAL_I2C_Mem_Write+0x34>
 80060da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d105      	bne.n	80060ec <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060e6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e0ed      	b.n	80062c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d101      	bne.n	80060fa <HAL_I2C_Mem_Write+0x4e>
 80060f6:	2302      	movs	r3, #2
 80060f8:	e0e6      	b.n	80062c8 <HAL_I2C_Mem_Write+0x21c>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006102:	f7fe fec5 	bl	8004e90 <HAL_GetTick>
 8006106:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	9300      	str	r3, [sp, #0]
 800610c:	2319      	movs	r3, #25
 800610e:	2201      	movs	r2, #1
 8006110:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	f000 fbcb 	bl	80068b0 <I2C_WaitOnFlagUntilTimeout>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d001      	beq.n	8006124 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e0d1      	b.n	80062c8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2221      	movs	r2, #33	; 0x21
 8006128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2240      	movs	r2, #64	; 0x40
 8006130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6a3a      	ldr	r2, [r7, #32]
 800613e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006144:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800614c:	88f8      	ldrh	r0, [r7, #6]
 800614e:	893a      	ldrh	r2, [r7, #8]
 8006150:	8979      	ldrh	r1, [r7, #10]
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	9301      	str	r3, [sp, #4]
 8006156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006158:	9300      	str	r3, [sp, #0]
 800615a:	4603      	mov	r3, r0
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f000 fadb 	bl	8006718 <I2C_RequestMemoryWrite>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d005      	beq.n	8006174 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e0a9      	b.n	80062c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006178:	b29b      	uxth	r3, r3
 800617a:	2bff      	cmp	r3, #255	; 0xff
 800617c:	d90e      	bls.n	800619c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	22ff      	movs	r2, #255	; 0xff
 8006182:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006188:	b2da      	uxtb	r2, r3
 800618a:	8979      	ldrh	r1, [r7, #10]
 800618c:	2300      	movs	r3, #0
 800618e:	9300      	str	r3, [sp, #0]
 8006190:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f000 fdad 	bl	8006cf4 <I2C_TransferConfig>
 800619a:	e00f      	b.n	80061bc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061aa:	b2da      	uxtb	r2, r3
 80061ac:	8979      	ldrh	r1, [r7, #10]
 80061ae:	2300      	movs	r3, #0
 80061b0:	9300      	str	r3, [sp, #0]
 80061b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	f000 fd9c 	bl	8006cf4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061bc:	697a      	ldr	r2, [r7, #20]
 80061be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f000 fbb5 	bl	8006930 <I2C_WaitOnTXISFlagUntilTimeout>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d001      	beq.n	80061d0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e07b      	b.n	80062c8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d4:	781a      	ldrb	r2, [r3, #0]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e0:	1c5a      	adds	r2, r3, #1
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	3b01      	subs	r3, #1
 80061ee:	b29a      	uxth	r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061f8:	3b01      	subs	r3, #1
 80061fa:	b29a      	uxth	r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006204:	b29b      	uxth	r3, r3
 8006206:	2b00      	cmp	r3, #0
 8006208:	d034      	beq.n	8006274 <HAL_I2C_Mem_Write+0x1c8>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800620e:	2b00      	cmp	r3, #0
 8006210:	d130      	bne.n	8006274 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	9300      	str	r3, [sp, #0]
 8006216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006218:	2200      	movs	r2, #0
 800621a:	2180      	movs	r1, #128	; 0x80
 800621c:	68f8      	ldr	r0, [r7, #12]
 800621e:	f000 fb47 	bl	80068b0 <I2C_WaitOnFlagUntilTimeout>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d001      	beq.n	800622c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e04d      	b.n	80062c8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006230:	b29b      	uxth	r3, r3
 8006232:	2bff      	cmp	r3, #255	; 0xff
 8006234:	d90e      	bls.n	8006254 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	22ff      	movs	r2, #255	; 0xff
 800623a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006240:	b2da      	uxtb	r2, r3
 8006242:	8979      	ldrh	r1, [r7, #10]
 8006244:	2300      	movs	r3, #0
 8006246:	9300      	str	r3, [sp, #0]
 8006248:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f000 fd51 	bl	8006cf4 <I2C_TransferConfig>
 8006252:	e00f      	b.n	8006274 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006258:	b29a      	uxth	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006262:	b2da      	uxtb	r2, r3
 8006264:	8979      	ldrh	r1, [r7, #10]
 8006266:	2300      	movs	r3, #0
 8006268:	9300      	str	r3, [sp, #0]
 800626a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	f000 fd40 	bl	8006cf4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006278:	b29b      	uxth	r3, r3
 800627a:	2b00      	cmp	r3, #0
 800627c:	d19e      	bne.n	80061bc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006282:	68f8      	ldr	r0, [r7, #12]
 8006284:	f000 fb94 	bl	80069b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d001      	beq.n	8006292 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e01a      	b.n	80062c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2220      	movs	r2, #32
 8006298:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	6859      	ldr	r1, [r3, #4]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	4b0a      	ldr	r3, [pc, #40]	; (80062d0 <HAL_I2C_Mem_Write+0x224>)
 80062a6:	400b      	ands	r3, r1
 80062a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2220      	movs	r2, #32
 80062ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80062c2:	2300      	movs	r3, #0
 80062c4:	e000      	b.n	80062c8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80062c6:	2302      	movs	r3, #2
  }
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3718      	adds	r7, #24
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	fe00e800 	.word	0xfe00e800

080062d4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b088      	sub	sp, #32
 80062d8:	af02      	add	r7, sp, #8
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	4608      	mov	r0, r1
 80062de:	4611      	mov	r1, r2
 80062e0:	461a      	mov	r2, r3
 80062e2:	4603      	mov	r3, r0
 80062e4:	817b      	strh	r3, [r7, #10]
 80062e6:	460b      	mov	r3, r1
 80062e8:	813b      	strh	r3, [r7, #8]
 80062ea:	4613      	mov	r3, r2
 80062ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	2b20      	cmp	r3, #32
 80062f8:	f040 80fd 	bne.w	80064f6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80062fc:	6a3b      	ldr	r3, [r7, #32]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d002      	beq.n	8006308 <HAL_I2C_Mem_Read+0x34>
 8006302:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006304:	2b00      	cmp	r3, #0
 8006306:	d105      	bne.n	8006314 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800630e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e0f1      	b.n	80064f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800631a:	2b01      	cmp	r3, #1
 800631c:	d101      	bne.n	8006322 <HAL_I2C_Mem_Read+0x4e>
 800631e:	2302      	movs	r3, #2
 8006320:	e0ea      	b.n	80064f8 <HAL_I2C_Mem_Read+0x224>
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2201      	movs	r2, #1
 8006326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800632a:	f7fe fdb1 	bl	8004e90 <HAL_GetTick>
 800632e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	9300      	str	r3, [sp, #0]
 8006334:	2319      	movs	r3, #25
 8006336:	2201      	movs	r2, #1
 8006338:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f000 fab7 	bl	80068b0 <I2C_WaitOnFlagUntilTimeout>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d001      	beq.n	800634c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e0d5      	b.n	80064f8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2222      	movs	r2, #34	; 0x22
 8006350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2240      	movs	r2, #64	; 0x40
 8006358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2200      	movs	r2, #0
 8006360:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6a3a      	ldr	r2, [r7, #32]
 8006366:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800636c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006374:	88f8      	ldrh	r0, [r7, #6]
 8006376:	893a      	ldrh	r2, [r7, #8]
 8006378:	8979      	ldrh	r1, [r7, #10]
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	9301      	str	r3, [sp, #4]
 800637e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006380:	9300      	str	r3, [sp, #0]
 8006382:	4603      	mov	r3, r0
 8006384:	68f8      	ldr	r0, [r7, #12]
 8006386:	f000 fa1b 	bl	80067c0 <I2C_RequestMemoryRead>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d005      	beq.n	800639c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2200      	movs	r2, #0
 8006394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	e0ad      	b.n	80064f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	2bff      	cmp	r3, #255	; 0xff
 80063a4:	d90e      	bls.n	80063c4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	22ff      	movs	r2, #255	; 0xff
 80063aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063b0:	b2da      	uxtb	r2, r3
 80063b2:	8979      	ldrh	r1, [r7, #10]
 80063b4:	4b52      	ldr	r3, [pc, #328]	; (8006500 <HAL_I2C_Mem_Read+0x22c>)
 80063b6:	9300      	str	r3, [sp, #0]
 80063b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80063bc:	68f8      	ldr	r0, [r7, #12]
 80063be:	f000 fc99 	bl	8006cf4 <I2C_TransferConfig>
 80063c2:	e00f      	b.n	80063e4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063c8:	b29a      	uxth	r2, r3
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063d2:	b2da      	uxtb	r2, r3
 80063d4:	8979      	ldrh	r1, [r7, #10]
 80063d6:	4b4a      	ldr	r3, [pc, #296]	; (8006500 <HAL_I2C_Mem_Read+0x22c>)
 80063d8:	9300      	str	r3, [sp, #0]
 80063da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f000 fc88 	bl	8006cf4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	9300      	str	r3, [sp, #0]
 80063e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ea:	2200      	movs	r2, #0
 80063ec:	2104      	movs	r1, #4
 80063ee:	68f8      	ldr	r0, [r7, #12]
 80063f0:	f000 fa5e 	bl	80068b0 <I2C_WaitOnFlagUntilTimeout>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d001      	beq.n	80063fe <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e07c      	b.n	80064f8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006408:	b2d2      	uxtb	r2, r2
 800640a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006410:	1c5a      	adds	r2, r3, #1
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800641a:	3b01      	subs	r3, #1
 800641c:	b29a      	uxth	r2, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006426:	b29b      	uxth	r3, r3
 8006428:	3b01      	subs	r3, #1
 800642a:	b29a      	uxth	r2, r3
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006434:	b29b      	uxth	r3, r3
 8006436:	2b00      	cmp	r3, #0
 8006438:	d034      	beq.n	80064a4 <HAL_I2C_Mem_Read+0x1d0>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800643e:	2b00      	cmp	r3, #0
 8006440:	d130      	bne.n	80064a4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	9300      	str	r3, [sp, #0]
 8006446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006448:	2200      	movs	r2, #0
 800644a:	2180      	movs	r1, #128	; 0x80
 800644c:	68f8      	ldr	r0, [r7, #12]
 800644e:	f000 fa2f 	bl	80068b0 <I2C_WaitOnFlagUntilTimeout>
 8006452:	4603      	mov	r3, r0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d001      	beq.n	800645c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e04d      	b.n	80064f8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006460:	b29b      	uxth	r3, r3
 8006462:	2bff      	cmp	r3, #255	; 0xff
 8006464:	d90e      	bls.n	8006484 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	22ff      	movs	r2, #255	; 0xff
 800646a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006470:	b2da      	uxtb	r2, r3
 8006472:	8979      	ldrh	r1, [r7, #10]
 8006474:	2300      	movs	r3, #0
 8006476:	9300      	str	r3, [sp, #0]
 8006478:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f000 fc39 	bl	8006cf4 <I2C_TransferConfig>
 8006482:	e00f      	b.n	80064a4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006488:	b29a      	uxth	r2, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006492:	b2da      	uxtb	r2, r3
 8006494:	8979      	ldrh	r1, [r7, #10]
 8006496:	2300      	movs	r3, #0
 8006498:	9300      	str	r3, [sp, #0]
 800649a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800649e:	68f8      	ldr	r0, [r7, #12]
 80064a0:	f000 fc28 	bl	8006cf4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d19a      	bne.n	80063e4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064b2:	68f8      	ldr	r0, [r7, #12]
 80064b4:	f000 fa7c 	bl	80069b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d001      	beq.n	80064c2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e01a      	b.n	80064f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2220      	movs	r2, #32
 80064c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	6859      	ldr	r1, [r3, #4]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	4b0b      	ldr	r3, [pc, #44]	; (8006504 <HAL_I2C_Mem_Read+0x230>)
 80064d6:	400b      	ands	r3, r1
 80064d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2220      	movs	r2, #32
 80064de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80064f2:	2300      	movs	r3, #0
 80064f4:	e000      	b.n	80064f8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80064f6:	2302      	movs	r3, #2
  }
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3718      	adds	r7, #24
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	80002400 	.word	0x80002400
 8006504:	fe00e800 	.word	0xfe00e800

08006508 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b08a      	sub	sp, #40	; 0x28
 800650c:	af02      	add	r7, sp, #8
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	607a      	str	r2, [r7, #4]
 8006512:	603b      	str	r3, [r7, #0]
 8006514:	460b      	mov	r3, r1
 8006516:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8006518:	2300      	movs	r3, #0
 800651a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006522:	b2db      	uxtb	r3, r3
 8006524:	2b20      	cmp	r3, #32
 8006526:	f040 80ef 	bne.w	8006708 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	699b      	ldr	r3, [r3, #24]
 8006530:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006534:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006538:	d101      	bne.n	800653e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800653a:	2302      	movs	r3, #2
 800653c:	e0e5      	b.n	800670a <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006544:	2b01      	cmp	r3, #1
 8006546:	d101      	bne.n	800654c <HAL_I2C_IsDeviceReady+0x44>
 8006548:	2302      	movs	r3, #2
 800654a:	e0de      	b.n	800670a <HAL_I2C_IsDeviceReady+0x202>
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2224      	movs	r2, #36	; 0x24
 8006558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	2b01      	cmp	r3, #1
 8006568:	d105      	bne.n	8006576 <HAL_I2C_IsDeviceReady+0x6e>
 800656a:	897b      	ldrh	r3, [r7, #10]
 800656c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006570:	4b68      	ldr	r3, [pc, #416]	; (8006714 <HAL_I2C_IsDeviceReady+0x20c>)
 8006572:	4313      	orrs	r3, r2
 8006574:	e004      	b.n	8006580 <HAL_I2C_IsDeviceReady+0x78>
 8006576:	897b      	ldrh	r3, [r7, #10]
 8006578:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800657c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	6812      	ldr	r2, [r2, #0]
 8006584:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8006586:	f7fe fc83 	bl	8004e90 <HAL_GetTick>
 800658a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	699b      	ldr	r3, [r3, #24]
 8006592:	f003 0320 	and.w	r3, r3, #32
 8006596:	2b20      	cmp	r3, #32
 8006598:	bf0c      	ite	eq
 800659a:	2301      	moveq	r3, #1
 800659c:	2300      	movne	r3, #0
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	699b      	ldr	r3, [r3, #24]
 80065a8:	f003 0310 	and.w	r3, r3, #16
 80065ac:	2b10      	cmp	r3, #16
 80065ae:	bf0c      	ite	eq
 80065b0:	2301      	moveq	r3, #1
 80065b2:	2300      	movne	r3, #0
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80065b8:	e034      	b.n	8006624 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c0:	d01a      	beq.n	80065f8 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80065c2:	f7fe fc65 	bl	8004e90 <HAL_GetTick>
 80065c6:	4602      	mov	r2, r0
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	683a      	ldr	r2, [r7, #0]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d302      	bcc.n	80065d8 <HAL_I2C_IsDeviceReady+0xd0>
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d10f      	bne.n	80065f8 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2220      	movs	r2, #32
 80065dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065e4:	f043 0220 	orr.w	r2, r3, #32
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e088      	b.n	800670a <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	699b      	ldr	r3, [r3, #24]
 80065fe:	f003 0320 	and.w	r3, r3, #32
 8006602:	2b20      	cmp	r3, #32
 8006604:	bf0c      	ite	eq
 8006606:	2301      	moveq	r3, #1
 8006608:	2300      	movne	r3, #0
 800660a:	b2db      	uxtb	r3, r3
 800660c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	699b      	ldr	r3, [r3, #24]
 8006614:	f003 0310 	and.w	r3, r3, #16
 8006618:	2b10      	cmp	r3, #16
 800661a:	bf0c      	ite	eq
 800661c:	2301      	moveq	r3, #1
 800661e:	2300      	movne	r3, #0
 8006620:	b2db      	uxtb	r3, r3
 8006622:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006624:	7ffb      	ldrb	r3, [r7, #31]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d102      	bne.n	8006630 <HAL_I2C_IsDeviceReady+0x128>
 800662a:	7fbb      	ldrb	r3, [r7, #30]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d0c4      	beq.n	80065ba <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	f003 0310 	and.w	r3, r3, #16
 800663a:	2b10      	cmp	r3, #16
 800663c:	d01a      	beq.n	8006674 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	2200      	movs	r2, #0
 8006646:	2120      	movs	r1, #32
 8006648:	68f8      	ldr	r0, [r7, #12]
 800664a:	f000 f931 	bl	80068b0 <I2C_WaitOnFlagUntilTimeout>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d001      	beq.n	8006658 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e058      	b.n	800670a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2220      	movs	r2, #32
 800665e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2220      	movs	r2, #32
 8006664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8006670:	2300      	movs	r3, #0
 8006672:	e04a      	b.n	800670a <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	9300      	str	r3, [sp, #0]
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	2200      	movs	r2, #0
 800667c:	2120      	movs	r1, #32
 800667e:	68f8      	ldr	r0, [r7, #12]
 8006680:	f000 f916 	bl	80068b0 <I2C_WaitOnFlagUntilTimeout>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d001      	beq.n	800668e <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e03d      	b.n	800670a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2210      	movs	r2, #16
 8006694:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2220      	movs	r2, #32
 800669c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d118      	bne.n	80066d8 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	685a      	ldr	r2, [r3, #4]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066b4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	9300      	str	r3, [sp, #0]
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	2200      	movs	r2, #0
 80066be:	2120      	movs	r1, #32
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	f000 f8f5 	bl	80068b0 <I2C_WaitOnFlagUntilTimeout>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d001      	beq.n	80066d0 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e01c      	b.n	800670a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2220      	movs	r2, #32
 80066d6:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	3301      	adds	r3, #1
 80066dc:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	f63f af3d 	bhi.w	8006562 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2220      	movs	r2, #32
 80066ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066f4:	f043 0220 	orr.w	r2, r3, #32
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e000      	b.n	800670a <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8006708:	2302      	movs	r3, #2
  }
}
 800670a:	4618      	mov	r0, r3
 800670c:	3720      	adds	r7, #32
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	02002000 	.word	0x02002000

08006718 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b086      	sub	sp, #24
 800671c:	af02      	add	r7, sp, #8
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	4608      	mov	r0, r1
 8006722:	4611      	mov	r1, r2
 8006724:	461a      	mov	r2, r3
 8006726:	4603      	mov	r3, r0
 8006728:	817b      	strh	r3, [r7, #10]
 800672a:	460b      	mov	r3, r1
 800672c:	813b      	strh	r3, [r7, #8]
 800672e:	4613      	mov	r3, r2
 8006730:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006732:	88fb      	ldrh	r3, [r7, #6]
 8006734:	b2da      	uxtb	r2, r3
 8006736:	8979      	ldrh	r1, [r7, #10]
 8006738:	4b20      	ldr	r3, [pc, #128]	; (80067bc <I2C_RequestMemoryWrite+0xa4>)
 800673a:	9300      	str	r3, [sp, #0]
 800673c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006740:	68f8      	ldr	r0, [r7, #12]
 8006742:	f000 fad7 	bl	8006cf4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006746:	69fa      	ldr	r2, [r7, #28]
 8006748:	69b9      	ldr	r1, [r7, #24]
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f000 f8f0 	bl	8006930 <I2C_WaitOnTXISFlagUntilTimeout>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d001      	beq.n	800675a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e02c      	b.n	80067b4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800675a:	88fb      	ldrh	r3, [r7, #6]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d105      	bne.n	800676c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006760:	893b      	ldrh	r3, [r7, #8]
 8006762:	b2da      	uxtb	r2, r3
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	629a      	str	r2, [r3, #40]	; 0x28
 800676a:	e015      	b.n	8006798 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800676c:	893b      	ldrh	r3, [r7, #8]
 800676e:	0a1b      	lsrs	r3, r3, #8
 8006770:	b29b      	uxth	r3, r3
 8006772:	b2da      	uxtb	r2, r3
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800677a:	69fa      	ldr	r2, [r7, #28]
 800677c:	69b9      	ldr	r1, [r7, #24]
 800677e:	68f8      	ldr	r0, [r7, #12]
 8006780:	f000 f8d6 	bl	8006930 <I2C_WaitOnTXISFlagUntilTimeout>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d001      	beq.n	800678e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e012      	b.n	80067b4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800678e:	893b      	ldrh	r3, [r7, #8]
 8006790:	b2da      	uxtb	r2, r3
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	9300      	str	r3, [sp, #0]
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	2200      	movs	r2, #0
 80067a0:	2180      	movs	r1, #128	; 0x80
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	f000 f884 	bl	80068b0 <I2C_WaitOnFlagUntilTimeout>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d001      	beq.n	80067b2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e000      	b.n	80067b4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3710      	adds	r7, #16
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	80002000 	.word	0x80002000

080067c0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b086      	sub	sp, #24
 80067c4:	af02      	add	r7, sp, #8
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	4608      	mov	r0, r1
 80067ca:	4611      	mov	r1, r2
 80067cc:	461a      	mov	r2, r3
 80067ce:	4603      	mov	r3, r0
 80067d0:	817b      	strh	r3, [r7, #10]
 80067d2:	460b      	mov	r3, r1
 80067d4:	813b      	strh	r3, [r7, #8]
 80067d6:	4613      	mov	r3, r2
 80067d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80067da:	88fb      	ldrh	r3, [r7, #6]
 80067dc:	b2da      	uxtb	r2, r3
 80067de:	8979      	ldrh	r1, [r7, #10]
 80067e0:	4b20      	ldr	r3, [pc, #128]	; (8006864 <I2C_RequestMemoryRead+0xa4>)
 80067e2:	9300      	str	r3, [sp, #0]
 80067e4:	2300      	movs	r3, #0
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f000 fa84 	bl	8006cf4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067ec:	69fa      	ldr	r2, [r7, #28]
 80067ee:	69b9      	ldr	r1, [r7, #24]
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f000 f89d 	bl	8006930 <I2C_WaitOnTXISFlagUntilTimeout>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d001      	beq.n	8006800 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	e02c      	b.n	800685a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006800:	88fb      	ldrh	r3, [r7, #6]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d105      	bne.n	8006812 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006806:	893b      	ldrh	r3, [r7, #8]
 8006808:	b2da      	uxtb	r2, r3
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	629a      	str	r2, [r3, #40]	; 0x28
 8006810:	e015      	b.n	800683e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006812:	893b      	ldrh	r3, [r7, #8]
 8006814:	0a1b      	lsrs	r3, r3, #8
 8006816:	b29b      	uxth	r3, r3
 8006818:	b2da      	uxtb	r2, r3
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006820:	69fa      	ldr	r2, [r7, #28]
 8006822:	69b9      	ldr	r1, [r7, #24]
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	f000 f883 	bl	8006930 <I2C_WaitOnTXISFlagUntilTimeout>
 800682a:	4603      	mov	r3, r0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d001      	beq.n	8006834 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e012      	b.n	800685a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006834:	893b      	ldrh	r3, [r7, #8]
 8006836:	b2da      	uxtb	r2, r3
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	2200      	movs	r2, #0
 8006846:	2140      	movs	r1, #64	; 0x40
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f000 f831 	bl	80068b0 <I2C_WaitOnFlagUntilTimeout>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d001      	beq.n	8006858 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e000      	b.n	800685a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	80002000 	.word	0x80002000

08006868 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	699b      	ldr	r3, [r3, #24]
 8006876:	f003 0302 	and.w	r3, r3, #2
 800687a:	2b02      	cmp	r3, #2
 800687c:	d103      	bne.n	8006886 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	2200      	movs	r2, #0
 8006884:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	f003 0301 	and.w	r3, r3, #1
 8006890:	2b01      	cmp	r3, #1
 8006892:	d007      	beq.n	80068a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	699a      	ldr	r2, [r3, #24]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f042 0201 	orr.w	r2, r2, #1
 80068a2:	619a      	str	r2, [r3, #24]
  }
}
 80068a4:	bf00      	nop
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	603b      	str	r3, [r7, #0]
 80068bc:	4613      	mov	r3, r2
 80068be:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068c0:	e022      	b.n	8006908 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c8:	d01e      	beq.n	8006908 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068ca:	f7fe fae1 	bl	8004e90 <HAL_GetTick>
 80068ce:	4602      	mov	r2, r0
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	1ad3      	subs	r3, r2, r3
 80068d4:	683a      	ldr	r2, [r7, #0]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d302      	bcc.n	80068e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d113      	bne.n	8006908 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068e4:	f043 0220 	orr.w	r2, r3, #32
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2220      	movs	r2, #32
 80068f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	e00f      	b.n	8006928 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	699a      	ldr	r2, [r3, #24]
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	4013      	ands	r3, r2
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	429a      	cmp	r2, r3
 8006916:	bf0c      	ite	eq
 8006918:	2301      	moveq	r3, #1
 800691a:	2300      	movne	r3, #0
 800691c:	b2db      	uxtb	r3, r3
 800691e:	461a      	mov	r2, r3
 8006920:	79fb      	ldrb	r3, [r7, #7]
 8006922:	429a      	cmp	r2, r3
 8006924:	d0cd      	beq.n	80068c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	3710      	adds	r7, #16
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800693c:	e02c      	b.n	8006998 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	68b9      	ldr	r1, [r7, #8]
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f000 f8ea 	bl	8006b1c <I2C_IsErrorOccurred>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d001      	beq.n	8006952 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e02a      	b.n	80069a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006958:	d01e      	beq.n	8006998 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800695a:	f7fe fa99 	bl	8004e90 <HAL_GetTick>
 800695e:	4602      	mov	r2, r0
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	68ba      	ldr	r2, [r7, #8]
 8006966:	429a      	cmp	r2, r3
 8006968:	d302      	bcc.n	8006970 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d113      	bne.n	8006998 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006974:	f043 0220 	orr.w	r2, r3, #32
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2220      	movs	r2, #32
 8006980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2200      	movs	r2, #0
 8006988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	e007      	b.n	80069a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	699b      	ldr	r3, [r3, #24]
 800699e:	f003 0302 	and.w	r3, r3, #2
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d1cb      	bne.n	800693e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3710      	adds	r7, #16
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069bc:	e028      	b.n	8006a10 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	68b9      	ldr	r1, [r7, #8]
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	f000 f8aa 	bl	8006b1c <I2C_IsErrorOccurred>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d001      	beq.n	80069d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e026      	b.n	8006a20 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069d2:	f7fe fa5d 	bl	8004e90 <HAL_GetTick>
 80069d6:	4602      	mov	r2, r0
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	68ba      	ldr	r2, [r7, #8]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d302      	bcc.n	80069e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d113      	bne.n	8006a10 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ec:	f043 0220 	orr.w	r2, r3, #32
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2220      	movs	r2, #32
 80069f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e007      	b.n	8006a20 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	f003 0320 	and.w	r3, r3, #32
 8006a1a:	2b20      	cmp	r3, #32
 8006a1c:	d1cf      	bne.n	80069be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3710      	adds	r7, #16
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a34:	e064      	b.n	8006b00 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	68b9      	ldr	r1, [r7, #8]
 8006a3a:	68f8      	ldr	r0, [r7, #12]
 8006a3c:	f000 f86e 	bl	8006b1c <I2C_IsErrorOccurred>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d001      	beq.n	8006a4a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	e062      	b.n	8006b10 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	699b      	ldr	r3, [r3, #24]
 8006a50:	f003 0320 	and.w	r3, r3, #32
 8006a54:	2b20      	cmp	r3, #32
 8006a56:	d138      	bne.n	8006aca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	699b      	ldr	r3, [r3, #24]
 8006a5e:	f003 0304 	and.w	r3, r3, #4
 8006a62:	2b04      	cmp	r3, #4
 8006a64:	d105      	bne.n	8006a72 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d001      	beq.n	8006a72 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	e04e      	b.n	8006b10 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	699b      	ldr	r3, [r3, #24]
 8006a78:	f003 0310 	and.w	r3, r3, #16
 8006a7c:	2b10      	cmp	r3, #16
 8006a7e:	d107      	bne.n	8006a90 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2210      	movs	r2, #16
 8006a86:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2204      	movs	r2, #4
 8006a8c:	645a      	str	r2, [r3, #68]	; 0x44
 8006a8e:	e002      	b.n	8006a96 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2220      	movs	r2, #32
 8006a9c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	6859      	ldr	r1, [r3, #4]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	4b1b      	ldr	r3, [pc, #108]	; (8006b18 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8006aaa:	400b      	ands	r3, r1
 8006aac:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2220      	movs	r2, #32
 8006ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e022      	b.n	8006b10 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006aca:	f7fe f9e1 	bl	8004e90 <HAL_GetTick>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	1ad3      	subs	r3, r2, r3
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d302      	bcc.n	8006ae0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d10f      	bne.n	8006b00 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ae4:	f043 0220 	orr.w	r2, r3, #32
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2220      	movs	r2, #32
 8006af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	e007      	b.n	8006b10 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	f003 0304 	and.w	r3, r3, #4
 8006b0a:	2b04      	cmp	r3, #4
 8006b0c:	d193      	bne.n	8006a36 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006b0e:	2300      	movs	r3, #0
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3710      	adds	r7, #16
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	fe00e800 	.word	0xfe00e800

08006b1c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b08a      	sub	sp, #40	; 0x28
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	699b      	ldr	r3, [r3, #24]
 8006b34:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006b36:	2300      	movs	r3, #0
 8006b38:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	f003 0310 	and.w	r3, r3, #16
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d075      	beq.n	8006c34 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2210      	movs	r2, #16
 8006b4e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006b50:	e056      	b.n	8006c00 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b58:	d052      	beq.n	8006c00 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006b5a:	f7fe f999 	bl	8004e90 <HAL_GetTick>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	1ad3      	subs	r3, r2, r3
 8006b64:	68ba      	ldr	r2, [r7, #8]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d302      	bcc.n	8006b70 <I2C_IsErrorOccurred+0x54>
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d147      	bne.n	8006c00 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b7a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b82:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	699b      	ldr	r3, [r3, #24]
 8006b8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b92:	d12e      	bne.n	8006bf2 <I2C_IsErrorOccurred+0xd6>
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b9a:	d02a      	beq.n	8006bf2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006b9c:	7cfb      	ldrb	r3, [r7, #19]
 8006b9e:	2b20      	cmp	r3, #32
 8006ba0:	d027      	beq.n	8006bf2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	685a      	ldr	r2, [r3, #4]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006bb0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006bb2:	f7fe f96d 	bl	8004e90 <HAL_GetTick>
 8006bb6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006bb8:	e01b      	b.n	8006bf2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006bba:	f7fe f969 	bl	8004e90 <HAL_GetTick>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	2b19      	cmp	r3, #25
 8006bc6:	d914      	bls.n	8006bf2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bcc:	f043 0220 	orr.w	r2, r3, #32
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2220      	movs	r2, #32
 8006bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	699b      	ldr	r3, [r3, #24]
 8006bf8:	f003 0320 	and.w	r3, r3, #32
 8006bfc:	2b20      	cmp	r3, #32
 8006bfe:	d1dc      	bne.n	8006bba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	699b      	ldr	r3, [r3, #24]
 8006c06:	f003 0320 	and.w	r3, r3, #32
 8006c0a:	2b20      	cmp	r3, #32
 8006c0c:	d003      	beq.n	8006c16 <I2C_IsErrorOccurred+0xfa>
 8006c0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d09d      	beq.n	8006b52 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006c16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d103      	bne.n	8006c26 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2220      	movs	r2, #32
 8006c24:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006c26:	6a3b      	ldr	r3, [r7, #32]
 8006c28:	f043 0304 	orr.w	r3, r3, #4
 8006c2c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	699b      	ldr	r3, [r3, #24]
 8006c3a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00b      	beq.n	8006c5e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006c46:	6a3b      	ldr	r3, [r7, #32]
 8006c48:	f043 0301 	orr.w	r3, r3, #1
 8006c4c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c56:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00b      	beq.n	8006c80 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006c68:	6a3b      	ldr	r3, [r7, #32]
 8006c6a:	f043 0308 	orr.w	r3, r3, #8
 8006c6e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006c78:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00b      	beq.n	8006ca2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006c8a:	6a3b      	ldr	r3, [r7, #32]
 8006c8c:	f043 0302 	orr.w	r3, r3, #2
 8006c90:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c9a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006ca2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d01c      	beq.n	8006ce4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006caa:	68f8      	ldr	r0, [r7, #12]
 8006cac:	f7ff fddc 	bl	8006868 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	6859      	ldr	r1, [r3, #4]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	4b0d      	ldr	r3, [pc, #52]	; (8006cf0 <I2C_IsErrorOccurred+0x1d4>)
 8006cbc:	400b      	ands	r3, r1
 8006cbe:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cc4:	6a3b      	ldr	r3, [r7, #32]
 8006cc6:	431a      	orrs	r2, r3
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2220      	movs	r2, #32
 8006cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006ce4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3728      	adds	r7, #40	; 0x28
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	fe00e800 	.word	0xfe00e800

08006cf4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b087      	sub	sp, #28
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	607b      	str	r3, [r7, #4]
 8006cfe:	460b      	mov	r3, r1
 8006d00:	817b      	strh	r3, [r7, #10]
 8006d02:	4613      	mov	r3, r2
 8006d04:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006d06:	897b      	ldrh	r3, [r7, #10]
 8006d08:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006d0c:	7a7b      	ldrb	r3, [r7, #9]
 8006d0e:	041b      	lsls	r3, r3, #16
 8006d10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006d14:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006d1a:	6a3b      	ldr	r3, [r7, #32]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d22:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	685a      	ldr	r2, [r3, #4]
 8006d2a:	6a3b      	ldr	r3, [r7, #32]
 8006d2c:	0d5b      	lsrs	r3, r3, #21
 8006d2e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006d32:	4b08      	ldr	r3, [pc, #32]	; (8006d54 <I2C_TransferConfig+0x60>)
 8006d34:	430b      	orrs	r3, r1
 8006d36:	43db      	mvns	r3, r3
 8006d38:	ea02 0103 	and.w	r1, r2, r3
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	697a      	ldr	r2, [r7, #20]
 8006d42:	430a      	orrs	r2, r1
 8006d44:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006d46:	bf00      	nop
 8006d48:	371c      	adds	r7, #28
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop
 8006d54:	03ff63ff 	.word	0x03ff63ff

08006d58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	2b20      	cmp	r3, #32
 8006d6c:	d138      	bne.n	8006de0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d101      	bne.n	8006d7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006d78:	2302      	movs	r3, #2
 8006d7a:	e032      	b.n	8006de2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2224      	movs	r2, #36	; 0x24
 8006d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f022 0201 	bic.w	r2, r2, #1
 8006d9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006daa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	6819      	ldr	r1, [r3, #0]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	683a      	ldr	r2, [r7, #0]
 8006db8:	430a      	orrs	r2, r1
 8006dba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f042 0201 	orr.w	r2, r2, #1
 8006dca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2220      	movs	r2, #32
 8006dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	e000      	b.n	8006de2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006de0:	2302      	movs	r3, #2
  }
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	370c      	adds	r7, #12
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr

08006dee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006dee:	b480      	push	{r7}
 8006df0:	b085      	sub	sp, #20
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
 8006df6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	2b20      	cmp	r3, #32
 8006e02:	d139      	bne.n	8006e78 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d101      	bne.n	8006e12 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006e0e:	2302      	movs	r3, #2
 8006e10:	e033      	b.n	8006e7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2201      	movs	r2, #1
 8006e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2224      	movs	r2, #36	; 0x24
 8006e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f022 0201 	bic.w	r2, r2, #1
 8006e30:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006e40:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	021b      	lsls	r3, r3, #8
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f042 0201 	orr.w	r2, r2, #1
 8006e62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2220      	movs	r2, #32
 8006e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006e74:	2300      	movs	r3, #0
 8006e76:	e000      	b.n	8006e7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006e78:	2302      	movs	r3, #2
  }
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3714      	adds	r7, #20
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr
	...

08006e88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b086      	sub	sp, #24
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006e90:	2300      	movs	r3, #0
 8006e92:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d101      	bne.n	8006e9e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e29b      	b.n	80073d6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 0301 	and.w	r3, r3, #1
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	f000 8087 	beq.w	8006fba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006eac:	4b96      	ldr	r3, [pc, #600]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	f003 030c 	and.w	r3, r3, #12
 8006eb4:	2b04      	cmp	r3, #4
 8006eb6:	d00c      	beq.n	8006ed2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006eb8:	4b93      	ldr	r3, [pc, #588]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	f003 030c 	and.w	r3, r3, #12
 8006ec0:	2b08      	cmp	r3, #8
 8006ec2:	d112      	bne.n	8006eea <HAL_RCC_OscConfig+0x62>
 8006ec4:	4b90      	ldr	r3, [pc, #576]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ecc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ed0:	d10b      	bne.n	8006eea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ed2:	4b8d      	ldr	r3, [pc, #564]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d06c      	beq.n	8006fb8 <HAL_RCC_OscConfig+0x130>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d168      	bne.n	8006fb8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e275      	b.n	80073d6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ef2:	d106      	bne.n	8006f02 <HAL_RCC_OscConfig+0x7a>
 8006ef4:	4b84      	ldr	r3, [pc, #528]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a83      	ldr	r2, [pc, #524]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8006efa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006efe:	6013      	str	r3, [r2, #0]
 8006f00:	e02e      	b.n	8006f60 <HAL_RCC_OscConfig+0xd8>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d10c      	bne.n	8006f24 <HAL_RCC_OscConfig+0x9c>
 8006f0a:	4b7f      	ldr	r3, [pc, #508]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a7e      	ldr	r2, [pc, #504]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8006f10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f14:	6013      	str	r3, [r2, #0]
 8006f16:	4b7c      	ldr	r3, [pc, #496]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a7b      	ldr	r2, [pc, #492]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8006f1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f20:	6013      	str	r3, [r2, #0]
 8006f22:	e01d      	b.n	8006f60 <HAL_RCC_OscConfig+0xd8>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f2c:	d10c      	bne.n	8006f48 <HAL_RCC_OscConfig+0xc0>
 8006f2e:	4b76      	ldr	r3, [pc, #472]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a75      	ldr	r2, [pc, #468]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8006f34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f38:	6013      	str	r3, [r2, #0]
 8006f3a:	4b73      	ldr	r3, [pc, #460]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a72      	ldr	r2, [pc, #456]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8006f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f44:	6013      	str	r3, [r2, #0]
 8006f46:	e00b      	b.n	8006f60 <HAL_RCC_OscConfig+0xd8>
 8006f48:	4b6f      	ldr	r3, [pc, #444]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a6e      	ldr	r2, [pc, #440]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8006f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f52:	6013      	str	r3, [r2, #0]
 8006f54:	4b6c      	ldr	r3, [pc, #432]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a6b      	ldr	r2, [pc, #428]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8006f5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d013      	beq.n	8006f90 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f68:	f7fd ff92 	bl	8004e90 <HAL_GetTick>
 8006f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f6e:	e008      	b.n	8006f82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f70:	f7fd ff8e 	bl	8004e90 <HAL_GetTick>
 8006f74:	4602      	mov	r2, r0
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	2b64      	cmp	r3, #100	; 0x64
 8006f7c:	d901      	bls.n	8006f82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	e229      	b.n	80073d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f82:	4b61      	ldr	r3, [pc, #388]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d0f0      	beq.n	8006f70 <HAL_RCC_OscConfig+0xe8>
 8006f8e:	e014      	b.n	8006fba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f90:	f7fd ff7e 	bl	8004e90 <HAL_GetTick>
 8006f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f96:	e008      	b.n	8006faa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f98:	f7fd ff7a 	bl	8004e90 <HAL_GetTick>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	2b64      	cmp	r3, #100	; 0x64
 8006fa4:	d901      	bls.n	8006faa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	e215      	b.n	80073d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006faa:	4b57      	ldr	r3, [pc, #348]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1f0      	bne.n	8006f98 <HAL_RCC_OscConfig+0x110>
 8006fb6:	e000      	b.n	8006fba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 0302 	and.w	r3, r3, #2
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d069      	beq.n	800709a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006fc6:	4b50      	ldr	r3, [pc, #320]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	f003 030c 	and.w	r3, r3, #12
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00b      	beq.n	8006fea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006fd2:	4b4d      	ldr	r3, [pc, #308]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	f003 030c 	and.w	r3, r3, #12
 8006fda:	2b08      	cmp	r3, #8
 8006fdc:	d11c      	bne.n	8007018 <HAL_RCC_OscConfig+0x190>
 8006fde:	4b4a      	ldr	r3, [pc, #296]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d116      	bne.n	8007018 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fea:	4b47      	ldr	r3, [pc, #284]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f003 0302 	and.w	r3, r3, #2
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d005      	beq.n	8007002 <HAL_RCC_OscConfig+0x17a>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d001      	beq.n	8007002 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	e1e9      	b.n	80073d6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007002:	4b41      	ldr	r3, [pc, #260]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	00db      	lsls	r3, r3, #3
 8007010:	493d      	ldr	r1, [pc, #244]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8007012:	4313      	orrs	r3, r2
 8007014:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007016:	e040      	b.n	800709a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d023      	beq.n	8007068 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007020:	4b39      	ldr	r3, [pc, #228]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a38      	ldr	r2, [pc, #224]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8007026:	f043 0301 	orr.w	r3, r3, #1
 800702a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800702c:	f7fd ff30 	bl	8004e90 <HAL_GetTick>
 8007030:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007032:	e008      	b.n	8007046 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007034:	f7fd ff2c 	bl	8004e90 <HAL_GetTick>
 8007038:	4602      	mov	r2, r0
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	1ad3      	subs	r3, r2, r3
 800703e:	2b02      	cmp	r3, #2
 8007040:	d901      	bls.n	8007046 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007042:	2303      	movs	r3, #3
 8007044:	e1c7      	b.n	80073d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007046:	4b30      	ldr	r3, [pc, #192]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 0302 	and.w	r3, r3, #2
 800704e:	2b00      	cmp	r3, #0
 8007050:	d0f0      	beq.n	8007034 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007052:	4b2d      	ldr	r3, [pc, #180]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	00db      	lsls	r3, r3, #3
 8007060:	4929      	ldr	r1, [pc, #164]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8007062:	4313      	orrs	r3, r2
 8007064:	600b      	str	r3, [r1, #0]
 8007066:	e018      	b.n	800709a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007068:	4b27      	ldr	r3, [pc, #156]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a26      	ldr	r2, [pc, #152]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 800706e:	f023 0301 	bic.w	r3, r3, #1
 8007072:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007074:	f7fd ff0c 	bl	8004e90 <HAL_GetTick>
 8007078:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800707a:	e008      	b.n	800708e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800707c:	f7fd ff08 	bl	8004e90 <HAL_GetTick>
 8007080:	4602      	mov	r2, r0
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	2b02      	cmp	r3, #2
 8007088:	d901      	bls.n	800708e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	e1a3      	b.n	80073d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800708e:	4b1e      	ldr	r3, [pc, #120]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 0302 	and.w	r3, r3, #2
 8007096:	2b00      	cmp	r3, #0
 8007098:	d1f0      	bne.n	800707c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 0308 	and.w	r3, r3, #8
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d038      	beq.n	8007118 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	695b      	ldr	r3, [r3, #20]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d019      	beq.n	80070e2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80070ae:	4b16      	ldr	r3, [pc, #88]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 80070b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070b2:	4a15      	ldr	r2, [pc, #84]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 80070b4:	f043 0301 	orr.w	r3, r3, #1
 80070b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070ba:	f7fd fee9 	bl	8004e90 <HAL_GetTick>
 80070be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070c0:	e008      	b.n	80070d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070c2:	f7fd fee5 	bl	8004e90 <HAL_GetTick>
 80070c6:	4602      	mov	r2, r0
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	1ad3      	subs	r3, r2, r3
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	d901      	bls.n	80070d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80070d0:	2303      	movs	r3, #3
 80070d2:	e180      	b.n	80073d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070d4:	4b0c      	ldr	r3, [pc, #48]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 80070d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070d8:	f003 0302 	and.w	r3, r3, #2
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d0f0      	beq.n	80070c2 <HAL_RCC_OscConfig+0x23a>
 80070e0:	e01a      	b.n	8007118 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80070e2:	4b09      	ldr	r3, [pc, #36]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 80070e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070e6:	4a08      	ldr	r2, [pc, #32]	; (8007108 <HAL_RCC_OscConfig+0x280>)
 80070e8:	f023 0301 	bic.w	r3, r3, #1
 80070ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070ee:	f7fd fecf 	bl	8004e90 <HAL_GetTick>
 80070f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070f4:	e00a      	b.n	800710c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070f6:	f7fd fecb 	bl	8004e90 <HAL_GetTick>
 80070fa:	4602      	mov	r2, r0
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	2b02      	cmp	r3, #2
 8007102:	d903      	bls.n	800710c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007104:	2303      	movs	r3, #3
 8007106:	e166      	b.n	80073d6 <HAL_RCC_OscConfig+0x54e>
 8007108:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800710c:	4b92      	ldr	r3, [pc, #584]	; (8007358 <HAL_RCC_OscConfig+0x4d0>)
 800710e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007110:	f003 0302 	and.w	r3, r3, #2
 8007114:	2b00      	cmp	r3, #0
 8007116:	d1ee      	bne.n	80070f6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 0304 	and.w	r3, r3, #4
 8007120:	2b00      	cmp	r3, #0
 8007122:	f000 80a4 	beq.w	800726e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007126:	4b8c      	ldr	r3, [pc, #560]	; (8007358 <HAL_RCC_OscConfig+0x4d0>)
 8007128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800712e:	2b00      	cmp	r3, #0
 8007130:	d10d      	bne.n	800714e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007132:	4b89      	ldr	r3, [pc, #548]	; (8007358 <HAL_RCC_OscConfig+0x4d0>)
 8007134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007136:	4a88      	ldr	r2, [pc, #544]	; (8007358 <HAL_RCC_OscConfig+0x4d0>)
 8007138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800713c:	6413      	str	r3, [r2, #64]	; 0x40
 800713e:	4b86      	ldr	r3, [pc, #536]	; (8007358 <HAL_RCC_OscConfig+0x4d0>)
 8007140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007146:	60bb      	str	r3, [r7, #8]
 8007148:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800714a:	2301      	movs	r3, #1
 800714c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800714e:	4b83      	ldr	r3, [pc, #524]	; (800735c <HAL_RCC_OscConfig+0x4d4>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007156:	2b00      	cmp	r3, #0
 8007158:	d118      	bne.n	800718c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800715a:	4b80      	ldr	r3, [pc, #512]	; (800735c <HAL_RCC_OscConfig+0x4d4>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a7f      	ldr	r2, [pc, #508]	; (800735c <HAL_RCC_OscConfig+0x4d4>)
 8007160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007164:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007166:	f7fd fe93 	bl	8004e90 <HAL_GetTick>
 800716a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800716c:	e008      	b.n	8007180 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800716e:	f7fd fe8f 	bl	8004e90 <HAL_GetTick>
 8007172:	4602      	mov	r2, r0
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	1ad3      	subs	r3, r2, r3
 8007178:	2b64      	cmp	r3, #100	; 0x64
 800717a:	d901      	bls.n	8007180 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800717c:	2303      	movs	r3, #3
 800717e:	e12a      	b.n	80073d6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007180:	4b76      	ldr	r3, [pc, #472]	; (800735c <HAL_RCC_OscConfig+0x4d4>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007188:	2b00      	cmp	r3, #0
 800718a:	d0f0      	beq.n	800716e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	2b01      	cmp	r3, #1
 8007192:	d106      	bne.n	80071a2 <HAL_RCC_OscConfig+0x31a>
 8007194:	4b70      	ldr	r3, [pc, #448]	; (8007358 <HAL_RCC_OscConfig+0x4d0>)
 8007196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007198:	4a6f      	ldr	r2, [pc, #444]	; (8007358 <HAL_RCC_OscConfig+0x4d0>)
 800719a:	f043 0301 	orr.w	r3, r3, #1
 800719e:	6713      	str	r3, [r2, #112]	; 0x70
 80071a0:	e02d      	b.n	80071fe <HAL_RCC_OscConfig+0x376>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d10c      	bne.n	80071c4 <HAL_RCC_OscConfig+0x33c>
 80071aa:	4b6b      	ldr	r3, [pc, #428]	; (8007358 <HAL_RCC_OscConfig+0x4d0>)
 80071ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ae:	4a6a      	ldr	r2, [pc, #424]	; (8007358 <HAL_RCC_OscConfig+0x4d0>)
 80071b0:	f023 0301 	bic.w	r3, r3, #1
 80071b4:	6713      	str	r3, [r2, #112]	; 0x70
 80071b6:	4b68      	ldr	r3, [pc, #416]	; (8007358 <HAL_RCC_OscConfig+0x4d0>)
 80071b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ba:	4a67      	ldr	r2, [pc, #412]	; (8007358 <HAL_RCC_OscConfig+0x4d0>)
 80071bc:	f023 0304 	bic.w	r3, r3, #4
 80071c0:	6713      	str	r3, [r2, #112]	; 0x70
 80071c2:	e01c      	b.n	80071fe <HAL_RCC_OscConfig+0x376>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	2b05      	cmp	r3, #5
 80071ca:	d10c      	bne.n	80071e6 <HAL_RCC_OscConfig+0x35e>
 80071cc:	4b62      	ldr	r3, [pc, #392]	; (8007358 <HAL_RCC_OscConfig+0x4d0>)
 80071ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071d0:	4a61      	ldr	r2, [pc, #388]	; (8007358 <HAL_RCC_OscConfig+0x4d0>)
 80071d2:	f043 0304 	orr.w	r3, r3, #4
 80071d6:	6713      	str	r3, [r2, #112]	; 0x70
 80071d8:	4b5f      	ldr	r3, [pc, #380]	; (8007358 <HAL_RCC_OscConfig+0x4d0>)
 80071da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071dc:	4a5e      	ldr	r2, [pc, #376]	; (8007358 <HAL_RCC_OscConfig+0x4d0>)
 80071de:	f043 0301 	orr.w	r3, r3, #1
 80071e2:	6713      	str	r3, [r2, #112]	; 0x70
 80071e4:	e00b      	b.n	80071fe <HAL_RCC_OscConfig+0x376>
 80071e6:	4b5c      	ldr	r3, [pc, #368]	; (8007358 <HAL_RCC_OscConfig+0x4d0>)
 80071e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ea:	4a5b      	ldr	r2, [pc, #364]	; (8007358 <HAL_RCC_OscConfig+0x4d0>)
 80071ec:	f023 0301 	bic.w	r3, r3, #1
 80071f0:	6713      	str	r3, [r2, #112]	; 0x70
 80071f2:	4b59      	ldr	r3, [pc, #356]	; (8007358 <HAL_RCC_OscConfig+0x4d0>)
 80071f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071f6:	4a58      	ldr	r2, [pc, #352]	; (8007358 <HAL_RCC_OscConfig+0x4d0>)
 80071f8:	f023 0304 	bic.w	r3, r3, #4
 80071fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d015      	beq.n	8007232 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007206:	f7fd fe43 	bl	8004e90 <HAL_GetTick>
 800720a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800720c:	e00a      	b.n	8007224 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800720e:	f7fd fe3f 	bl	8004e90 <HAL_GetTick>
 8007212:	4602      	mov	r2, r0
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	f241 3288 	movw	r2, #5000	; 0x1388
 800721c:	4293      	cmp	r3, r2
 800721e:	d901      	bls.n	8007224 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007220:	2303      	movs	r3, #3
 8007222:	e0d8      	b.n	80073d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007224:	4b4c      	ldr	r3, [pc, #304]	; (8007358 <HAL_RCC_OscConfig+0x4d0>)
 8007226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007228:	f003 0302 	and.w	r3, r3, #2
 800722c:	2b00      	cmp	r3, #0
 800722e:	d0ee      	beq.n	800720e <HAL_RCC_OscConfig+0x386>
 8007230:	e014      	b.n	800725c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007232:	f7fd fe2d 	bl	8004e90 <HAL_GetTick>
 8007236:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007238:	e00a      	b.n	8007250 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800723a:	f7fd fe29 	bl	8004e90 <HAL_GetTick>
 800723e:	4602      	mov	r2, r0
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	1ad3      	subs	r3, r2, r3
 8007244:	f241 3288 	movw	r2, #5000	; 0x1388
 8007248:	4293      	cmp	r3, r2
 800724a:	d901      	bls.n	8007250 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800724c:	2303      	movs	r3, #3
 800724e:	e0c2      	b.n	80073d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007250:	4b41      	ldr	r3, [pc, #260]	; (8007358 <HAL_RCC_OscConfig+0x4d0>)
 8007252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007254:	f003 0302 	and.w	r3, r3, #2
 8007258:	2b00      	cmp	r3, #0
 800725a:	d1ee      	bne.n	800723a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800725c:	7dfb      	ldrb	r3, [r7, #23]
 800725e:	2b01      	cmp	r3, #1
 8007260:	d105      	bne.n	800726e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007262:	4b3d      	ldr	r3, [pc, #244]	; (8007358 <HAL_RCC_OscConfig+0x4d0>)
 8007264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007266:	4a3c      	ldr	r2, [pc, #240]	; (8007358 <HAL_RCC_OscConfig+0x4d0>)
 8007268:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800726c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	699b      	ldr	r3, [r3, #24]
 8007272:	2b00      	cmp	r3, #0
 8007274:	f000 80ae 	beq.w	80073d4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007278:	4b37      	ldr	r3, [pc, #220]	; (8007358 <HAL_RCC_OscConfig+0x4d0>)
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	f003 030c 	and.w	r3, r3, #12
 8007280:	2b08      	cmp	r3, #8
 8007282:	d06d      	beq.n	8007360 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	699b      	ldr	r3, [r3, #24]
 8007288:	2b02      	cmp	r3, #2
 800728a:	d14b      	bne.n	8007324 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800728c:	4b32      	ldr	r3, [pc, #200]	; (8007358 <HAL_RCC_OscConfig+0x4d0>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a31      	ldr	r2, [pc, #196]	; (8007358 <HAL_RCC_OscConfig+0x4d0>)
 8007292:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007296:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007298:	f7fd fdfa 	bl	8004e90 <HAL_GetTick>
 800729c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800729e:	e008      	b.n	80072b2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072a0:	f7fd fdf6 	bl	8004e90 <HAL_GetTick>
 80072a4:	4602      	mov	r2, r0
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	1ad3      	subs	r3, r2, r3
 80072aa:	2b02      	cmp	r3, #2
 80072ac:	d901      	bls.n	80072b2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80072ae:	2303      	movs	r3, #3
 80072b0:	e091      	b.n	80073d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072b2:	4b29      	ldr	r3, [pc, #164]	; (8007358 <HAL_RCC_OscConfig+0x4d0>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d1f0      	bne.n	80072a0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	69da      	ldr	r2, [r3, #28]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a1b      	ldr	r3, [r3, #32]
 80072c6:	431a      	orrs	r2, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072cc:	019b      	lsls	r3, r3, #6
 80072ce:	431a      	orrs	r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d4:	085b      	lsrs	r3, r3, #1
 80072d6:	3b01      	subs	r3, #1
 80072d8:	041b      	lsls	r3, r3, #16
 80072da:	431a      	orrs	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e0:	061b      	lsls	r3, r3, #24
 80072e2:	431a      	orrs	r2, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e8:	071b      	lsls	r3, r3, #28
 80072ea:	491b      	ldr	r1, [pc, #108]	; (8007358 <HAL_RCC_OscConfig+0x4d0>)
 80072ec:	4313      	orrs	r3, r2
 80072ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80072f0:	4b19      	ldr	r3, [pc, #100]	; (8007358 <HAL_RCC_OscConfig+0x4d0>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a18      	ldr	r2, [pc, #96]	; (8007358 <HAL_RCC_OscConfig+0x4d0>)
 80072f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80072fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072fc:	f7fd fdc8 	bl	8004e90 <HAL_GetTick>
 8007300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007302:	e008      	b.n	8007316 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007304:	f7fd fdc4 	bl	8004e90 <HAL_GetTick>
 8007308:	4602      	mov	r2, r0
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	1ad3      	subs	r3, r2, r3
 800730e:	2b02      	cmp	r3, #2
 8007310:	d901      	bls.n	8007316 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8007312:	2303      	movs	r3, #3
 8007314:	e05f      	b.n	80073d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007316:	4b10      	ldr	r3, [pc, #64]	; (8007358 <HAL_RCC_OscConfig+0x4d0>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800731e:	2b00      	cmp	r3, #0
 8007320:	d0f0      	beq.n	8007304 <HAL_RCC_OscConfig+0x47c>
 8007322:	e057      	b.n	80073d4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007324:	4b0c      	ldr	r3, [pc, #48]	; (8007358 <HAL_RCC_OscConfig+0x4d0>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a0b      	ldr	r2, [pc, #44]	; (8007358 <HAL_RCC_OscConfig+0x4d0>)
 800732a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800732e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007330:	f7fd fdae 	bl	8004e90 <HAL_GetTick>
 8007334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007336:	e008      	b.n	800734a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007338:	f7fd fdaa 	bl	8004e90 <HAL_GetTick>
 800733c:	4602      	mov	r2, r0
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	2b02      	cmp	r3, #2
 8007344:	d901      	bls.n	800734a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8007346:	2303      	movs	r3, #3
 8007348:	e045      	b.n	80073d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800734a:	4b03      	ldr	r3, [pc, #12]	; (8007358 <HAL_RCC_OscConfig+0x4d0>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007352:	2b00      	cmp	r3, #0
 8007354:	d1f0      	bne.n	8007338 <HAL_RCC_OscConfig+0x4b0>
 8007356:	e03d      	b.n	80073d4 <HAL_RCC_OscConfig+0x54c>
 8007358:	40023800 	.word	0x40023800
 800735c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007360:	4b1f      	ldr	r3, [pc, #124]	; (80073e0 <HAL_RCC_OscConfig+0x558>)
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	699b      	ldr	r3, [r3, #24]
 800736a:	2b01      	cmp	r3, #1
 800736c:	d030      	beq.n	80073d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007378:	429a      	cmp	r2, r3
 800737a:	d129      	bne.n	80073d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007386:	429a      	cmp	r2, r3
 8007388:	d122      	bne.n	80073d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007390:	4013      	ands	r3, r2
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007396:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007398:	4293      	cmp	r3, r2
 800739a:	d119      	bne.n	80073d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073a6:	085b      	lsrs	r3, r3, #1
 80073a8:	3b01      	subs	r3, #1
 80073aa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d10f      	bne.n	80073d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80073bc:	429a      	cmp	r2, r3
 80073be:	d107      	bne.n	80073d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ca:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d001      	beq.n	80073d4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	e000      	b.n	80073d6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3718      	adds	r7, #24
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	40023800 	.word	0x40023800

080073e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80073ee:	2300      	movs	r3, #0
 80073f0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d101      	bne.n	80073fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	e0d0      	b.n	800759e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80073fc:	4b6a      	ldr	r3, [pc, #424]	; (80075a8 <HAL_RCC_ClockConfig+0x1c4>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f003 030f 	and.w	r3, r3, #15
 8007404:	683a      	ldr	r2, [r7, #0]
 8007406:	429a      	cmp	r2, r3
 8007408:	d910      	bls.n	800742c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800740a:	4b67      	ldr	r3, [pc, #412]	; (80075a8 <HAL_RCC_ClockConfig+0x1c4>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f023 020f 	bic.w	r2, r3, #15
 8007412:	4965      	ldr	r1, [pc, #404]	; (80075a8 <HAL_RCC_ClockConfig+0x1c4>)
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	4313      	orrs	r3, r2
 8007418:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800741a:	4b63      	ldr	r3, [pc, #396]	; (80075a8 <HAL_RCC_ClockConfig+0x1c4>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f003 030f 	and.w	r3, r3, #15
 8007422:	683a      	ldr	r2, [r7, #0]
 8007424:	429a      	cmp	r2, r3
 8007426:	d001      	beq.n	800742c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	e0b8      	b.n	800759e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 0302 	and.w	r3, r3, #2
 8007434:	2b00      	cmp	r3, #0
 8007436:	d020      	beq.n	800747a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f003 0304 	and.w	r3, r3, #4
 8007440:	2b00      	cmp	r3, #0
 8007442:	d005      	beq.n	8007450 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007444:	4b59      	ldr	r3, [pc, #356]	; (80075ac <HAL_RCC_ClockConfig+0x1c8>)
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	4a58      	ldr	r2, [pc, #352]	; (80075ac <HAL_RCC_ClockConfig+0x1c8>)
 800744a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800744e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 0308 	and.w	r3, r3, #8
 8007458:	2b00      	cmp	r3, #0
 800745a:	d005      	beq.n	8007468 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800745c:	4b53      	ldr	r3, [pc, #332]	; (80075ac <HAL_RCC_ClockConfig+0x1c8>)
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	4a52      	ldr	r2, [pc, #328]	; (80075ac <HAL_RCC_ClockConfig+0x1c8>)
 8007462:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007466:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007468:	4b50      	ldr	r3, [pc, #320]	; (80075ac <HAL_RCC_ClockConfig+0x1c8>)
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	494d      	ldr	r1, [pc, #308]	; (80075ac <HAL_RCC_ClockConfig+0x1c8>)
 8007476:	4313      	orrs	r3, r2
 8007478:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 0301 	and.w	r3, r3, #1
 8007482:	2b00      	cmp	r3, #0
 8007484:	d040      	beq.n	8007508 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	2b01      	cmp	r3, #1
 800748c:	d107      	bne.n	800749e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800748e:	4b47      	ldr	r3, [pc, #284]	; (80075ac <HAL_RCC_ClockConfig+0x1c8>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007496:	2b00      	cmp	r3, #0
 8007498:	d115      	bne.n	80074c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	e07f      	b.n	800759e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	2b02      	cmp	r3, #2
 80074a4:	d107      	bne.n	80074b6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074a6:	4b41      	ldr	r3, [pc, #260]	; (80075ac <HAL_RCC_ClockConfig+0x1c8>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d109      	bne.n	80074c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	e073      	b.n	800759e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074b6:	4b3d      	ldr	r3, [pc, #244]	; (80075ac <HAL_RCC_ClockConfig+0x1c8>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f003 0302 	and.w	r3, r3, #2
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d101      	bne.n	80074c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	e06b      	b.n	800759e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80074c6:	4b39      	ldr	r3, [pc, #228]	; (80075ac <HAL_RCC_ClockConfig+0x1c8>)
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	f023 0203 	bic.w	r2, r3, #3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	4936      	ldr	r1, [pc, #216]	; (80075ac <HAL_RCC_ClockConfig+0x1c8>)
 80074d4:	4313      	orrs	r3, r2
 80074d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074d8:	f7fd fcda 	bl	8004e90 <HAL_GetTick>
 80074dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074de:	e00a      	b.n	80074f6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074e0:	f7fd fcd6 	bl	8004e90 <HAL_GetTick>
 80074e4:	4602      	mov	r2, r0
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d901      	bls.n	80074f6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80074f2:	2303      	movs	r3, #3
 80074f4:	e053      	b.n	800759e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074f6:	4b2d      	ldr	r3, [pc, #180]	; (80075ac <HAL_RCC_ClockConfig+0x1c8>)
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	f003 020c 	and.w	r2, r3, #12
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	429a      	cmp	r2, r3
 8007506:	d1eb      	bne.n	80074e0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007508:	4b27      	ldr	r3, [pc, #156]	; (80075a8 <HAL_RCC_ClockConfig+0x1c4>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 030f 	and.w	r3, r3, #15
 8007510:	683a      	ldr	r2, [r7, #0]
 8007512:	429a      	cmp	r2, r3
 8007514:	d210      	bcs.n	8007538 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007516:	4b24      	ldr	r3, [pc, #144]	; (80075a8 <HAL_RCC_ClockConfig+0x1c4>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f023 020f 	bic.w	r2, r3, #15
 800751e:	4922      	ldr	r1, [pc, #136]	; (80075a8 <HAL_RCC_ClockConfig+0x1c4>)
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	4313      	orrs	r3, r2
 8007524:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007526:	4b20      	ldr	r3, [pc, #128]	; (80075a8 <HAL_RCC_ClockConfig+0x1c4>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f003 030f 	and.w	r3, r3, #15
 800752e:	683a      	ldr	r2, [r7, #0]
 8007530:	429a      	cmp	r2, r3
 8007532:	d001      	beq.n	8007538 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	e032      	b.n	800759e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 0304 	and.w	r3, r3, #4
 8007540:	2b00      	cmp	r3, #0
 8007542:	d008      	beq.n	8007556 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007544:	4b19      	ldr	r3, [pc, #100]	; (80075ac <HAL_RCC_ClockConfig+0x1c8>)
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	4916      	ldr	r1, [pc, #88]	; (80075ac <HAL_RCC_ClockConfig+0x1c8>)
 8007552:	4313      	orrs	r3, r2
 8007554:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 0308 	and.w	r3, r3, #8
 800755e:	2b00      	cmp	r3, #0
 8007560:	d009      	beq.n	8007576 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007562:	4b12      	ldr	r3, [pc, #72]	; (80075ac <HAL_RCC_ClockConfig+0x1c8>)
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	00db      	lsls	r3, r3, #3
 8007570:	490e      	ldr	r1, [pc, #56]	; (80075ac <HAL_RCC_ClockConfig+0x1c8>)
 8007572:	4313      	orrs	r3, r2
 8007574:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007576:	f000 f821 	bl	80075bc <HAL_RCC_GetSysClockFreq>
 800757a:	4602      	mov	r2, r0
 800757c:	4b0b      	ldr	r3, [pc, #44]	; (80075ac <HAL_RCC_ClockConfig+0x1c8>)
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	091b      	lsrs	r3, r3, #4
 8007582:	f003 030f 	and.w	r3, r3, #15
 8007586:	490a      	ldr	r1, [pc, #40]	; (80075b0 <HAL_RCC_ClockConfig+0x1cc>)
 8007588:	5ccb      	ldrb	r3, [r1, r3]
 800758a:	fa22 f303 	lsr.w	r3, r2, r3
 800758e:	4a09      	ldr	r2, [pc, #36]	; (80075b4 <HAL_RCC_ClockConfig+0x1d0>)
 8007590:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007592:	4b09      	ldr	r3, [pc, #36]	; (80075b8 <HAL_RCC_ClockConfig+0x1d4>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4618      	mov	r0, r3
 8007598:	f7fd fc36 	bl	8004e08 <HAL_InitTick>

  return HAL_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3710      	adds	r7, #16
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	40023c00 	.word	0x40023c00
 80075ac:	40023800 	.word	0x40023800
 80075b0:	08012614 	.word	0x08012614
 80075b4:	20000000 	.word	0x20000000
 80075b8:	20000004 	.word	0x20000004

080075bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80075bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075c0:	b090      	sub	sp, #64	; 0x40
 80075c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80075c4:	2300      	movs	r3, #0
 80075c6:	637b      	str	r3, [r7, #52]	; 0x34
 80075c8:	2300      	movs	r3, #0
 80075ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075cc:	2300      	movs	r3, #0
 80075ce:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80075d0:	2300      	movs	r3, #0
 80075d2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80075d4:	4b59      	ldr	r3, [pc, #356]	; (800773c <HAL_RCC_GetSysClockFreq+0x180>)
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	f003 030c 	and.w	r3, r3, #12
 80075dc:	2b08      	cmp	r3, #8
 80075de:	d00d      	beq.n	80075fc <HAL_RCC_GetSysClockFreq+0x40>
 80075e0:	2b08      	cmp	r3, #8
 80075e2:	f200 80a1 	bhi.w	8007728 <HAL_RCC_GetSysClockFreq+0x16c>
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d002      	beq.n	80075f0 <HAL_RCC_GetSysClockFreq+0x34>
 80075ea:	2b04      	cmp	r3, #4
 80075ec:	d003      	beq.n	80075f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80075ee:	e09b      	b.n	8007728 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80075f0:	4b53      	ldr	r3, [pc, #332]	; (8007740 <HAL_RCC_GetSysClockFreq+0x184>)
 80075f2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80075f4:	e09b      	b.n	800772e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80075f6:	4b53      	ldr	r3, [pc, #332]	; (8007744 <HAL_RCC_GetSysClockFreq+0x188>)
 80075f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80075fa:	e098      	b.n	800772e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80075fc:	4b4f      	ldr	r3, [pc, #316]	; (800773c <HAL_RCC_GetSysClockFreq+0x180>)
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007604:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007606:	4b4d      	ldr	r3, [pc, #308]	; (800773c <HAL_RCC_GetSysClockFreq+0x180>)
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800760e:	2b00      	cmp	r3, #0
 8007610:	d028      	beq.n	8007664 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007612:	4b4a      	ldr	r3, [pc, #296]	; (800773c <HAL_RCC_GetSysClockFreq+0x180>)
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	099b      	lsrs	r3, r3, #6
 8007618:	2200      	movs	r2, #0
 800761a:	623b      	str	r3, [r7, #32]
 800761c:	627a      	str	r2, [r7, #36]	; 0x24
 800761e:	6a3b      	ldr	r3, [r7, #32]
 8007620:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007624:	2100      	movs	r1, #0
 8007626:	4b47      	ldr	r3, [pc, #284]	; (8007744 <HAL_RCC_GetSysClockFreq+0x188>)
 8007628:	fb03 f201 	mul.w	r2, r3, r1
 800762c:	2300      	movs	r3, #0
 800762e:	fb00 f303 	mul.w	r3, r0, r3
 8007632:	4413      	add	r3, r2
 8007634:	4a43      	ldr	r2, [pc, #268]	; (8007744 <HAL_RCC_GetSysClockFreq+0x188>)
 8007636:	fba0 1202 	umull	r1, r2, r0, r2
 800763a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800763c:	460a      	mov	r2, r1
 800763e:	62ba      	str	r2, [r7, #40]	; 0x28
 8007640:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007642:	4413      	add	r3, r2
 8007644:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007648:	2200      	movs	r2, #0
 800764a:	61bb      	str	r3, [r7, #24]
 800764c:	61fa      	str	r2, [r7, #28]
 800764e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007652:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007656:	f7f9 f817 	bl	8000688 <__aeabi_uldivmod>
 800765a:	4602      	mov	r2, r0
 800765c:	460b      	mov	r3, r1
 800765e:	4613      	mov	r3, r2
 8007660:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007662:	e053      	b.n	800770c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007664:	4b35      	ldr	r3, [pc, #212]	; (800773c <HAL_RCC_GetSysClockFreq+0x180>)
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	099b      	lsrs	r3, r3, #6
 800766a:	2200      	movs	r2, #0
 800766c:	613b      	str	r3, [r7, #16]
 800766e:	617a      	str	r2, [r7, #20]
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007676:	f04f 0b00 	mov.w	fp, #0
 800767a:	4652      	mov	r2, sl
 800767c:	465b      	mov	r3, fp
 800767e:	f04f 0000 	mov.w	r0, #0
 8007682:	f04f 0100 	mov.w	r1, #0
 8007686:	0159      	lsls	r1, r3, #5
 8007688:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800768c:	0150      	lsls	r0, r2, #5
 800768e:	4602      	mov	r2, r0
 8007690:	460b      	mov	r3, r1
 8007692:	ebb2 080a 	subs.w	r8, r2, sl
 8007696:	eb63 090b 	sbc.w	r9, r3, fp
 800769a:	f04f 0200 	mov.w	r2, #0
 800769e:	f04f 0300 	mov.w	r3, #0
 80076a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80076a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80076aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80076ae:	ebb2 0408 	subs.w	r4, r2, r8
 80076b2:	eb63 0509 	sbc.w	r5, r3, r9
 80076b6:	f04f 0200 	mov.w	r2, #0
 80076ba:	f04f 0300 	mov.w	r3, #0
 80076be:	00eb      	lsls	r3, r5, #3
 80076c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80076c4:	00e2      	lsls	r2, r4, #3
 80076c6:	4614      	mov	r4, r2
 80076c8:	461d      	mov	r5, r3
 80076ca:	eb14 030a 	adds.w	r3, r4, sl
 80076ce:	603b      	str	r3, [r7, #0]
 80076d0:	eb45 030b 	adc.w	r3, r5, fp
 80076d4:	607b      	str	r3, [r7, #4]
 80076d6:	f04f 0200 	mov.w	r2, #0
 80076da:	f04f 0300 	mov.w	r3, #0
 80076de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80076e2:	4629      	mov	r1, r5
 80076e4:	028b      	lsls	r3, r1, #10
 80076e6:	4621      	mov	r1, r4
 80076e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80076ec:	4621      	mov	r1, r4
 80076ee:	028a      	lsls	r2, r1, #10
 80076f0:	4610      	mov	r0, r2
 80076f2:	4619      	mov	r1, r3
 80076f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076f6:	2200      	movs	r2, #0
 80076f8:	60bb      	str	r3, [r7, #8]
 80076fa:	60fa      	str	r2, [r7, #12]
 80076fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007700:	f7f8 ffc2 	bl	8000688 <__aeabi_uldivmod>
 8007704:	4602      	mov	r2, r0
 8007706:	460b      	mov	r3, r1
 8007708:	4613      	mov	r3, r2
 800770a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800770c:	4b0b      	ldr	r3, [pc, #44]	; (800773c <HAL_RCC_GetSysClockFreq+0x180>)
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	0c1b      	lsrs	r3, r3, #16
 8007712:	f003 0303 	and.w	r3, r3, #3
 8007716:	3301      	adds	r3, #1
 8007718:	005b      	lsls	r3, r3, #1
 800771a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800771c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800771e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007720:	fbb2 f3f3 	udiv	r3, r2, r3
 8007724:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007726:	e002      	b.n	800772e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007728:	4b05      	ldr	r3, [pc, #20]	; (8007740 <HAL_RCC_GetSysClockFreq+0x184>)
 800772a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800772c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800772e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007730:	4618      	mov	r0, r3
 8007732:	3740      	adds	r7, #64	; 0x40
 8007734:	46bd      	mov	sp, r7
 8007736:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800773a:	bf00      	nop
 800773c:	40023800 	.word	0x40023800
 8007740:	00f42400 	.word	0x00f42400
 8007744:	017d7840 	.word	0x017d7840

08007748 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007748:	b480      	push	{r7}
 800774a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800774c:	4b03      	ldr	r3, [pc, #12]	; (800775c <HAL_RCC_GetHCLKFreq+0x14>)
 800774e:	681b      	ldr	r3, [r3, #0]
}
 8007750:	4618      	mov	r0, r3
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop
 800775c:	20000000 	.word	0x20000000

08007760 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007764:	f7ff fff0 	bl	8007748 <HAL_RCC_GetHCLKFreq>
 8007768:	4602      	mov	r2, r0
 800776a:	4b05      	ldr	r3, [pc, #20]	; (8007780 <HAL_RCC_GetPCLK1Freq+0x20>)
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	0a9b      	lsrs	r3, r3, #10
 8007770:	f003 0307 	and.w	r3, r3, #7
 8007774:	4903      	ldr	r1, [pc, #12]	; (8007784 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007776:	5ccb      	ldrb	r3, [r1, r3]
 8007778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800777c:	4618      	mov	r0, r3
 800777e:	bd80      	pop	{r7, pc}
 8007780:	40023800 	.word	0x40023800
 8007784:	08012624 	.word	0x08012624

08007788 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800778c:	f7ff ffdc 	bl	8007748 <HAL_RCC_GetHCLKFreq>
 8007790:	4602      	mov	r2, r0
 8007792:	4b05      	ldr	r3, [pc, #20]	; (80077a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	0b5b      	lsrs	r3, r3, #13
 8007798:	f003 0307 	and.w	r3, r3, #7
 800779c:	4903      	ldr	r1, [pc, #12]	; (80077ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800779e:	5ccb      	ldrb	r3, [r1, r3]
 80077a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	40023800 	.word	0x40023800
 80077ac:	08012624 	.word	0x08012624

080077b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b088      	sub	sp, #32
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80077b8:	2300      	movs	r3, #0
 80077ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80077bc:	2300      	movs	r3, #0
 80077be:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80077c0:	2300      	movs	r3, #0
 80077c2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80077c4:	2300      	movs	r3, #0
 80077c6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80077c8:	2300      	movs	r3, #0
 80077ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f003 0301 	and.w	r3, r3, #1
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d012      	beq.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80077d8:	4b69      	ldr	r3, [pc, #420]	; (8007980 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	4a68      	ldr	r2, [pc, #416]	; (8007980 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077de:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80077e2:	6093      	str	r3, [r2, #8]
 80077e4:	4b66      	ldr	r3, [pc, #408]	; (8007980 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077e6:	689a      	ldr	r2, [r3, #8]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077ec:	4964      	ldr	r1, [pc, #400]	; (8007980 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077ee:	4313      	orrs	r3, r2
 80077f0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d101      	bne.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80077fa:	2301      	movs	r3, #1
 80077fc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007806:	2b00      	cmp	r3, #0
 8007808:	d017      	beq.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800780a:	4b5d      	ldr	r3, [pc, #372]	; (8007980 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800780c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007810:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007818:	4959      	ldr	r1, [pc, #356]	; (8007980 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800781a:	4313      	orrs	r3, r2
 800781c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007824:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007828:	d101      	bne.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800782a:	2301      	movs	r3, #1
 800782c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007832:	2b00      	cmp	r3, #0
 8007834:	d101      	bne.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007836:	2301      	movs	r3, #1
 8007838:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007842:	2b00      	cmp	r3, #0
 8007844:	d017      	beq.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007846:	4b4e      	ldr	r3, [pc, #312]	; (8007980 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007848:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800784c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007854:	494a      	ldr	r1, [pc, #296]	; (8007980 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007856:	4313      	orrs	r3, r2
 8007858:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007860:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007864:	d101      	bne.n	800786a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007866:	2301      	movs	r3, #1
 8007868:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800786e:	2b00      	cmp	r3, #0
 8007870:	d101      	bne.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007872:	2301      	movs	r3, #1
 8007874:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800787e:	2b00      	cmp	r3, #0
 8007880:	d001      	beq.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007882:	2301      	movs	r3, #1
 8007884:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f003 0320 	and.w	r3, r3, #32
 800788e:	2b00      	cmp	r3, #0
 8007890:	f000 808b 	beq.w	80079aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007894:	4b3a      	ldr	r3, [pc, #232]	; (8007980 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007898:	4a39      	ldr	r2, [pc, #228]	; (8007980 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800789a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800789e:	6413      	str	r3, [r2, #64]	; 0x40
 80078a0:	4b37      	ldr	r3, [pc, #220]	; (8007980 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078a8:	60bb      	str	r3, [r7, #8]
 80078aa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80078ac:	4b35      	ldr	r3, [pc, #212]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a34      	ldr	r2, [pc, #208]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80078b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078b8:	f7fd faea 	bl	8004e90 <HAL_GetTick>
 80078bc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80078be:	e008      	b.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078c0:	f7fd fae6 	bl	8004e90 <HAL_GetTick>
 80078c4:	4602      	mov	r2, r0
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	1ad3      	subs	r3, r2, r3
 80078ca:	2b64      	cmp	r3, #100	; 0x64
 80078cc:	d901      	bls.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80078ce:	2303      	movs	r3, #3
 80078d0:	e38f      	b.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80078d2:	4b2c      	ldr	r3, [pc, #176]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d0f0      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80078de:	4b28      	ldr	r3, [pc, #160]	; (8007980 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078e6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d035      	beq.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078f6:	693a      	ldr	r2, [r7, #16]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d02e      	beq.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80078fc:	4b20      	ldr	r3, [pc, #128]	; (8007980 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007900:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007904:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007906:	4b1e      	ldr	r3, [pc, #120]	; (8007980 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800790a:	4a1d      	ldr	r2, [pc, #116]	; (8007980 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800790c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007910:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007912:	4b1b      	ldr	r3, [pc, #108]	; (8007980 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007916:	4a1a      	ldr	r2, [pc, #104]	; (8007980 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007918:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800791c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800791e:	4a18      	ldr	r2, [pc, #96]	; (8007980 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007924:	4b16      	ldr	r3, [pc, #88]	; (8007980 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007928:	f003 0301 	and.w	r3, r3, #1
 800792c:	2b01      	cmp	r3, #1
 800792e:	d114      	bne.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007930:	f7fd faae 	bl	8004e90 <HAL_GetTick>
 8007934:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007936:	e00a      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007938:	f7fd faaa 	bl	8004e90 <HAL_GetTick>
 800793c:	4602      	mov	r2, r0
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	1ad3      	subs	r3, r2, r3
 8007942:	f241 3288 	movw	r2, #5000	; 0x1388
 8007946:	4293      	cmp	r3, r2
 8007948:	d901      	bls.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800794a:	2303      	movs	r3, #3
 800794c:	e351      	b.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800794e:	4b0c      	ldr	r3, [pc, #48]	; (8007980 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007952:	f003 0302 	and.w	r3, r3, #2
 8007956:	2b00      	cmp	r3, #0
 8007958:	d0ee      	beq.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800795e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007962:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007966:	d111      	bne.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007968:	4b05      	ldr	r3, [pc, #20]	; (8007980 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007974:	4b04      	ldr	r3, [pc, #16]	; (8007988 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007976:	400b      	ands	r3, r1
 8007978:	4901      	ldr	r1, [pc, #4]	; (8007980 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800797a:	4313      	orrs	r3, r2
 800797c:	608b      	str	r3, [r1, #8]
 800797e:	e00b      	b.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007980:	40023800 	.word	0x40023800
 8007984:	40007000 	.word	0x40007000
 8007988:	0ffffcff 	.word	0x0ffffcff
 800798c:	4bac      	ldr	r3, [pc, #688]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	4aab      	ldr	r2, [pc, #684]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007992:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007996:	6093      	str	r3, [r2, #8]
 8007998:	4ba9      	ldr	r3, [pc, #676]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800799a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079a4:	49a6      	ldr	r1, [pc, #664]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80079a6:	4313      	orrs	r3, r2
 80079a8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f003 0310 	and.w	r3, r3, #16
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d010      	beq.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80079b6:	4ba2      	ldr	r3, [pc, #648]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80079b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079bc:	4aa0      	ldr	r2, [pc, #640]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80079be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80079c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80079c6:	4b9e      	ldr	r3, [pc, #632]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80079c8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d0:	499b      	ldr	r1, [pc, #620]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80079d2:	4313      	orrs	r3, r2
 80079d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00a      	beq.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80079e4:	4b96      	ldr	r3, [pc, #600]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80079e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079f2:	4993      	ldr	r1, [pc, #588]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80079f4:	4313      	orrs	r3, r2
 80079f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00a      	beq.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007a06:	4b8e      	ldr	r3, [pc, #568]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a0c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a14:	498a      	ldr	r1, [pc, #552]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a16:	4313      	orrs	r3, r2
 8007a18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d00a      	beq.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007a28:	4b85      	ldr	r3, [pc, #532]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a36:	4982      	ldr	r1, [pc, #520]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00a      	beq.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007a4a:	4b7d      	ldr	r3, [pc, #500]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a50:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a58:	4979      	ldr	r1, [pc, #484]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d00a      	beq.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007a6c:	4b74      	ldr	r3, [pc, #464]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a72:	f023 0203 	bic.w	r2, r3, #3
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a7a:	4971      	ldr	r1, [pc, #452]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00a      	beq.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007a8e:	4b6c      	ldr	r3, [pc, #432]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a94:	f023 020c 	bic.w	r2, r3, #12
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a9c:	4968      	ldr	r1, [pc, #416]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d00a      	beq.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007ab0:	4b63      	ldr	r3, [pc, #396]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ab6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007abe:	4960      	ldr	r1, [pc, #384]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d00a      	beq.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007ad2:	4b5b      	ldr	r3, [pc, #364]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ad8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ae0:	4957      	ldr	r1, [pc, #348]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d00a      	beq.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007af4:	4b52      	ldr	r3, [pc, #328]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007afa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b02:	494f      	ldr	r1, [pc, #316]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b04:	4313      	orrs	r3, r2
 8007b06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d00a      	beq.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007b16:	4b4a      	ldr	r3, [pc, #296]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b1c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b24:	4946      	ldr	r1, [pc, #280]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b26:	4313      	orrs	r3, r2
 8007b28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d00a      	beq.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007b38:	4b41      	ldr	r3, [pc, #260]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b3e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b46:	493e      	ldr	r1, [pc, #248]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d00a      	beq.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007b5a:	4b39      	ldr	r3, [pc, #228]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b60:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b68:	4935      	ldr	r1, [pc, #212]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d00a      	beq.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007b7c:	4b30      	ldr	r3, [pc, #192]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b82:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b8a:	492d      	ldr	r1, [pc, #180]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d011      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007b9e:	4b28      	ldr	r3, [pc, #160]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ba4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bac:	4924      	ldr	r1, [pc, #144]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007bbc:	d101      	bne.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f003 0308 	and.w	r3, r3, #8
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d001      	beq.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00a      	beq.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007bde:	4b18      	ldr	r3, [pc, #96]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007be4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bec:	4914      	ldr	r1, [pc, #80]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d00b      	beq.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007c00:	4b0f      	ldr	r3, [pc, #60]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c06:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c10:	490b      	ldr	r1, [pc, #44]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c12:	4313      	orrs	r3, r2
 8007c14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d00f      	beq.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007c24:	4b06      	ldr	r3, [pc, #24]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c2a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c34:	4902      	ldr	r1, [pc, #8]	; (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c36:	4313      	orrs	r3, r2
 8007c38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007c3c:	e002      	b.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8007c3e:	bf00      	nop
 8007c40:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00b      	beq.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007c50:	4b8a      	ldr	r3, [pc, #552]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007c52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c56:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c60:	4986      	ldr	r1, [pc, #536]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007c62:	4313      	orrs	r3, r2
 8007c64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d00b      	beq.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007c74:	4b81      	ldr	r3, [pc, #516]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007c76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c7a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c84:	497d      	ldr	r1, [pc, #500]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007c86:	4313      	orrs	r3, r2
 8007c88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007c8c:	69fb      	ldr	r3, [r7, #28]
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d006      	beq.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	f000 80d6 	beq.w	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007ca0:	4b76      	ldr	r3, [pc, #472]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a75      	ldr	r2, [pc, #468]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ca6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007caa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cac:	f7fd f8f0 	bl	8004e90 <HAL_GetTick>
 8007cb0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007cb2:	e008      	b.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007cb4:	f7fd f8ec 	bl	8004e90 <HAL_GetTick>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	1ad3      	subs	r3, r2, r3
 8007cbe:	2b64      	cmp	r3, #100	; 0x64
 8007cc0:	d901      	bls.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	e195      	b.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007cc6:	4b6d      	ldr	r3, [pc, #436]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d1f0      	bne.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f003 0301 	and.w	r3, r3, #1
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d021      	beq.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d11d      	bne.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007ce6:	4b65      	ldr	r3, [pc, #404]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ce8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cec:	0c1b      	lsrs	r3, r3, #16
 8007cee:	f003 0303 	and.w	r3, r3, #3
 8007cf2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007cf4:	4b61      	ldr	r3, [pc, #388]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007cf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cfa:	0e1b      	lsrs	r3, r3, #24
 8007cfc:	f003 030f 	and.w	r3, r3, #15
 8007d00:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	019a      	lsls	r2, r3, #6
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	041b      	lsls	r3, r3, #16
 8007d0c:	431a      	orrs	r2, r3
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	061b      	lsls	r3, r3, #24
 8007d12:	431a      	orrs	r2, r3
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	071b      	lsls	r3, r3, #28
 8007d1a:	4958      	ldr	r1, [pc, #352]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d004      	beq.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d36:	d00a      	beq.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d02e      	beq.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d4c:	d129      	bne.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007d4e:	4b4b      	ldr	r3, [pc, #300]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d54:	0c1b      	lsrs	r3, r3, #16
 8007d56:	f003 0303 	and.w	r3, r3, #3
 8007d5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007d5c:	4b47      	ldr	r3, [pc, #284]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d62:	0f1b      	lsrs	r3, r3, #28
 8007d64:	f003 0307 	and.w	r3, r3, #7
 8007d68:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	019a      	lsls	r2, r3, #6
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	041b      	lsls	r3, r3, #16
 8007d74:	431a      	orrs	r2, r3
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	061b      	lsls	r3, r3, #24
 8007d7c:	431a      	orrs	r2, r3
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	071b      	lsls	r3, r3, #28
 8007d82:	493e      	ldr	r1, [pc, #248]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d84:	4313      	orrs	r3, r2
 8007d86:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007d8a:	4b3c      	ldr	r3, [pc, #240]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d90:	f023 021f 	bic.w	r2, r3, #31
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d98:	3b01      	subs	r3, #1
 8007d9a:	4938      	ldr	r1, [pc, #224]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d01d      	beq.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007dae:	4b33      	ldr	r3, [pc, #204]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007db0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007db4:	0e1b      	lsrs	r3, r3, #24
 8007db6:	f003 030f 	and.w	r3, r3, #15
 8007dba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007dbc:	4b2f      	ldr	r3, [pc, #188]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007dbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dc2:	0f1b      	lsrs	r3, r3, #28
 8007dc4:	f003 0307 	and.w	r3, r3, #7
 8007dc8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	019a      	lsls	r2, r3, #6
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	691b      	ldr	r3, [r3, #16]
 8007dd4:	041b      	lsls	r3, r3, #16
 8007dd6:	431a      	orrs	r2, r3
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	061b      	lsls	r3, r3, #24
 8007ddc:	431a      	orrs	r2, r3
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	071b      	lsls	r3, r3, #28
 8007de2:	4926      	ldr	r1, [pc, #152]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007de4:	4313      	orrs	r3, r2
 8007de6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d011      	beq.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	019a      	lsls	r2, r3, #6
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	691b      	ldr	r3, [r3, #16]
 8007e00:	041b      	lsls	r3, r3, #16
 8007e02:	431a      	orrs	r2, r3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	061b      	lsls	r3, r3, #24
 8007e0a:	431a      	orrs	r2, r3
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	071b      	lsls	r3, r3, #28
 8007e12:	491a      	ldr	r1, [pc, #104]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e14:	4313      	orrs	r3, r2
 8007e16:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007e1a:	4b18      	ldr	r3, [pc, #96]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a17      	ldr	r2, [pc, #92]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e26:	f7fd f833 	bl	8004e90 <HAL_GetTick>
 8007e2a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007e2c:	e008      	b.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007e2e:	f7fd f82f 	bl	8004e90 <HAL_GetTick>
 8007e32:	4602      	mov	r2, r0
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	1ad3      	subs	r3, r2, r3
 8007e38:	2b64      	cmp	r3, #100	; 0x64
 8007e3a:	d901      	bls.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	e0d8      	b.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007e40:	4b0e      	ldr	r3, [pc, #56]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d0f0      	beq.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007e4c:	69bb      	ldr	r3, [r7, #24]
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	f040 80ce 	bne.w	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007e54:	4b09      	ldr	r3, [pc, #36]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a08      	ldr	r2, [pc, #32]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e60:	f7fd f816 	bl	8004e90 <HAL_GetTick>
 8007e64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007e66:	e00b      	b.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007e68:	f7fd f812 	bl	8004e90 <HAL_GetTick>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	1ad3      	subs	r3, r2, r3
 8007e72:	2b64      	cmp	r3, #100	; 0x64
 8007e74:	d904      	bls.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e76:	2303      	movs	r3, #3
 8007e78:	e0bb      	b.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007e7a:	bf00      	nop
 8007e7c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007e80:	4b5e      	ldr	r3, [pc, #376]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e8c:	d0ec      	beq.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d003      	beq.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d009      	beq.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d02e      	beq.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d12a      	bne.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007eb6:	4b51      	ldr	r3, [pc, #324]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ebc:	0c1b      	lsrs	r3, r3, #16
 8007ebe:	f003 0303 	and.w	r3, r3, #3
 8007ec2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007ec4:	4b4d      	ldr	r3, [pc, #308]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eca:	0f1b      	lsrs	r3, r3, #28
 8007ecc:	f003 0307 	and.w	r3, r3, #7
 8007ed0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	695b      	ldr	r3, [r3, #20]
 8007ed6:	019a      	lsls	r2, r3, #6
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	041b      	lsls	r3, r3, #16
 8007edc:	431a      	orrs	r2, r3
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	699b      	ldr	r3, [r3, #24]
 8007ee2:	061b      	lsls	r3, r3, #24
 8007ee4:	431a      	orrs	r2, r3
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	071b      	lsls	r3, r3, #28
 8007eea:	4944      	ldr	r1, [pc, #272]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007eec:	4313      	orrs	r3, r2
 8007eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007ef2:	4b42      	ldr	r3, [pc, #264]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007ef4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ef8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f00:	3b01      	subs	r3, #1
 8007f02:	021b      	lsls	r3, r3, #8
 8007f04:	493d      	ldr	r1, [pc, #244]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007f06:	4313      	orrs	r3, r2
 8007f08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d022      	beq.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f20:	d11d      	bne.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007f22:	4b36      	ldr	r3, [pc, #216]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f28:	0e1b      	lsrs	r3, r3, #24
 8007f2a:	f003 030f 	and.w	r3, r3, #15
 8007f2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007f30:	4b32      	ldr	r3, [pc, #200]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f36:	0f1b      	lsrs	r3, r3, #28
 8007f38:	f003 0307 	and.w	r3, r3, #7
 8007f3c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	695b      	ldr	r3, [r3, #20]
 8007f42:	019a      	lsls	r2, r3, #6
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6a1b      	ldr	r3, [r3, #32]
 8007f48:	041b      	lsls	r3, r3, #16
 8007f4a:	431a      	orrs	r2, r3
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	061b      	lsls	r3, r3, #24
 8007f50:	431a      	orrs	r2, r3
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	071b      	lsls	r3, r3, #28
 8007f56:	4929      	ldr	r1, [pc, #164]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f003 0308 	and.w	r3, r3, #8
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d028      	beq.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007f6a:	4b24      	ldr	r3, [pc, #144]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f70:	0e1b      	lsrs	r3, r3, #24
 8007f72:	f003 030f 	and.w	r3, r3, #15
 8007f76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007f78:	4b20      	ldr	r3, [pc, #128]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f7e:	0c1b      	lsrs	r3, r3, #16
 8007f80:	f003 0303 	and.w	r3, r3, #3
 8007f84:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	695b      	ldr	r3, [r3, #20]
 8007f8a:	019a      	lsls	r2, r3, #6
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	041b      	lsls	r3, r3, #16
 8007f90:	431a      	orrs	r2, r3
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	061b      	lsls	r3, r3, #24
 8007f96:	431a      	orrs	r2, r3
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	69db      	ldr	r3, [r3, #28]
 8007f9c:	071b      	lsls	r3, r3, #28
 8007f9e:	4917      	ldr	r1, [pc, #92]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007fa6:	4b15      	ldr	r3, [pc, #84]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007fa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb4:	4911      	ldr	r1, [pc, #68]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007fbc:	4b0f      	ldr	r3, [pc, #60]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a0e      	ldr	r2, [pc, #56]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007fc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fc8:	f7fc ff62 	bl	8004e90 <HAL_GetTick>
 8007fcc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007fce:	e008      	b.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007fd0:	f7fc ff5e 	bl	8004e90 <HAL_GetTick>
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	1ad3      	subs	r3, r2, r3
 8007fda:	2b64      	cmp	r3, #100	; 0x64
 8007fdc:	d901      	bls.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007fde:	2303      	movs	r3, #3
 8007fe0:	e007      	b.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007fe2:	4b06      	ldr	r3, [pc, #24]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fee:	d1ef      	bne.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8007ff0:	2300      	movs	r3, #0
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3720      	adds	r7, #32
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	40023800 	.word	0x40023800

08008000 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d101      	bne.n	8008012 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	e022      	b.n	8008058 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008018:	b2db      	uxtb	r3, r3
 800801a:	2b00      	cmp	r3, #0
 800801c:	d105      	bne.n	800802a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f7fc fc07 	bl	8004838 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2203      	movs	r2, #3
 800802e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 f814 	bl	8008060 <HAL_SD_InitCard>
 8008038:	4603      	mov	r3, r0
 800803a:	2b00      	cmp	r3, #0
 800803c:	d001      	beq.n	8008042 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800803e:	2301      	movs	r3, #1
 8008040:	e00a      	b.n	8008058 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2200      	movs	r2, #0
 800804c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2201      	movs	r2, #1
 8008052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008056:	2300      	movs	r3, #0
}
 8008058:	4618      	mov	r0, r3
 800805a:	3708      	adds	r7, #8
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008060:	b5b0      	push	{r4, r5, r7, lr}
 8008062:	b08e      	sub	sp, #56	; 0x38
 8008064:	af04      	add	r7, sp, #16
 8008066:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008068:	2300      	movs	r3, #0
 800806a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800806c:	2300      	movs	r3, #0
 800806e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008070:	2300      	movs	r3, #0
 8008072:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008074:	2300      	movs	r3, #0
 8008076:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008078:	2300      	movs	r3, #0
 800807a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800807c:	2376      	movs	r3, #118	; 0x76
 800807e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681d      	ldr	r5, [r3, #0]
 8008084:	466c      	mov	r4, sp
 8008086:	f107 0314 	add.w	r3, r7, #20
 800808a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800808e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008092:	f107 0308 	add.w	r3, r7, #8
 8008096:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008098:	4628      	mov	r0, r5
 800809a:	f001 ffd1 	bl	800a040 <SDMMC_Init>
 800809e:	4603      	mov	r3, r0
 80080a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80080a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d001      	beq.n	80080b0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80080ac:	2301      	movs	r3, #1
 80080ae:	e059      	b.n	8008164 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	685a      	ldr	r2, [r3, #4]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80080be:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4618      	mov	r0, r3
 80080c6:	f002 f805 	bl	800a0d4 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	685a      	ldr	r2, [r3, #4]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080d8:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80080da:	2002      	movs	r0, #2
 80080dc:	f7fc fee4 	bl	8004ea8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 fff3 	bl	80090cc <SD_PowerON>
 80080e6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80080e8:	6a3b      	ldr	r3, [r7, #32]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00b      	beq.n	8008106 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2201      	movs	r2, #1
 80080f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080fa:	6a3b      	ldr	r3, [r7, #32]
 80080fc:	431a      	orrs	r2, r3
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008102:	2301      	movs	r3, #1
 8008104:	e02e      	b.n	8008164 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 ff12 	bl	8008f30 <SD_InitCard>
 800810c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800810e:	6a3b      	ldr	r3, [r7, #32]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d00b      	beq.n	800812c <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008120:	6a3b      	ldr	r3, [r7, #32]
 8008122:	431a      	orrs	r2, r3
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008128:	2301      	movs	r3, #1
 800812a:	e01b      	b.n	8008164 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008134:	4618      	mov	r0, r3
 8008136:	f002 f85f 	bl	800a1f8 <SDMMC_CmdBlockLength>
 800813a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800813c:	6a3b      	ldr	r3, [r7, #32]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d00f      	beq.n	8008162 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a09      	ldr	r2, [pc, #36]	; (800816c <HAL_SD_InitCard+0x10c>)
 8008148:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800814e:	6a3b      	ldr	r3, [r7, #32]
 8008150:	431a      	orrs	r2, r3
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2201      	movs	r2, #1
 800815a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800815e:	2301      	movs	r3, #1
 8008160:	e000      	b.n	8008164 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8008162:	2300      	movs	r3, #0
}
 8008164:	4618      	mov	r0, r3
 8008166:	3728      	adds	r7, #40	; 0x28
 8008168:	46bd      	mov	sp, r7
 800816a:	bdb0      	pop	{r4, r5, r7, pc}
 800816c:	004005ff 	.word	0x004005ff

08008170 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b08c      	sub	sp, #48	; 0x30
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	607a      	str	r2, [r7, #4]
 800817c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d107      	bne.n	8008198 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800818c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	e0c3      	b.n	8008320 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	f040 80bc 	bne.w	800831e <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2200      	movs	r2, #0
 80081aa:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80081ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	441a      	add	r2, r3
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d907      	bls.n	80081ca <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081be:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	e0aa      	b.n	8008320 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2203      	movs	r2, #3
 80081ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2200      	movs	r2, #0
 80081d8:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80081e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ee:	4a4e      	ldr	r2, [pc, #312]	; (8008328 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80081f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f6:	4a4d      	ldr	r2, [pc, #308]	; (800832c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80081f8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081fe:	2200      	movs	r2, #0
 8008200:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008206:	2200      	movs	r2, #0
 8008208:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821a:	689a      	ldr	r2, [r3, #8]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	430a      	orrs	r2, r1
 8008224:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	3380      	adds	r3, #128	; 0x80
 8008230:	4619      	mov	r1, r3
 8008232:	68ba      	ldr	r2, [r7, #8]
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	025b      	lsls	r3, r3, #9
 8008238:	089b      	lsrs	r3, r3, #2
 800823a:	f7fd f819 	bl	8005270 <HAL_DMA_Start_IT>
 800823e:	4603      	mov	r3, r0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d017      	beq.n	8008274 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8008252:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a35      	ldr	r2, [pc, #212]	; (8008330 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800825a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008260:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2201      	movs	r2, #1
 800826c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008270:	2301      	movs	r3, #1
 8008272:	e055      	b.n	8008320 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f042 0208 	orr.w	r2, r2, #8
 8008282:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008288:	2b01      	cmp	r3, #1
 800828a:	d002      	beq.n	8008292 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800828c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828e:	025b      	lsls	r3, r3, #9
 8008290:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008292:	f04f 33ff 	mov.w	r3, #4294967295
 8008296:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	025b      	lsls	r3, r3, #9
 800829c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800829e:	2390      	movs	r3, #144	; 0x90
 80082a0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80082a2:	2302      	movs	r3, #2
 80082a4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80082a6:	2300      	movs	r3, #0
 80082a8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80082aa:	2301      	movs	r3, #1
 80082ac:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f107 0210 	add.w	r2, r7, #16
 80082b6:	4611      	mov	r1, r2
 80082b8:	4618      	mov	r0, r3
 80082ba:	f001 ff71 	bl	800a1a0 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d90a      	bls.n	80082da <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2282      	movs	r2, #130	; 0x82
 80082c8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80082d0:	4618      	mov	r0, r3
 80082d2:	f001 ffd5 	bl	800a280 <SDMMC_CmdReadMultiBlock>
 80082d6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80082d8:	e009      	b.n	80082ee <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2281      	movs	r2, #129	; 0x81
 80082de:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80082e6:	4618      	mov	r0, r3
 80082e8:	f001 ffa8 	bl	800a23c <SDMMC_CmdReadSingleBlock>
 80082ec:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80082ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d012      	beq.n	800831a <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a0d      	ldr	r2, [pc, #52]	; (8008330 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80082fa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008302:	431a      	orrs	r2, r3
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2201      	movs	r2, #1
 800830c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2200      	movs	r2, #0
 8008314:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	e002      	b.n	8008320 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800831a:	2300      	movs	r3, #0
 800831c:	e000      	b.n	8008320 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800831e:	2302      	movs	r3, #2
  }
}
 8008320:	4618      	mov	r0, r3
 8008322:	3730      	adds	r7, #48	; 0x30
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}
 8008328:	08008d3f 	.word	0x08008d3f
 800832c:	08008db1 	.word	0x08008db1
 8008330:	004005ff 	.word	0x004005ff

08008334 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b08c      	sub	sp, #48	; 0x30
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	607a      	str	r2, [r7, #4]
 8008340:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d107      	bne.n	800835c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008350:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008358:	2301      	movs	r3, #1
 800835a:	e0c6      	b.n	80084ea <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008362:	b2db      	uxtb	r3, r3
 8008364:	2b01      	cmp	r3, #1
 8008366:	f040 80bf 	bne.w	80084e8 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2200      	movs	r2, #0
 800836e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008370:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	441a      	add	r2, r3
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800837a:	429a      	cmp	r2, r3
 800837c:	d907      	bls.n	800838e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008382:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	e0ad      	b.n	80084ea <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2203      	movs	r2, #3
 8008392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2200      	movs	r2, #0
 800839c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f042 021a 	orr.w	r2, r2, #26
 80083ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083b2:	4a50      	ldr	r2, [pc, #320]	; (80084f4 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80083b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083ba:	4a4f      	ldr	r2, [pc, #316]	; (80084f8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80083bc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083c2:	2200      	movs	r2, #0
 80083c4:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d002      	beq.n	80083d4 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80083ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d0:	025b      	lsls	r3, r3, #9
 80083d2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d90a      	bls.n	80083f0 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	22a0      	movs	r2, #160	; 0xa0
 80083de:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083e6:	4618      	mov	r0, r3
 80083e8:	f001 ff8e 	bl	800a308 <SDMMC_CmdWriteMultiBlock>
 80083ec:	62f8      	str	r0, [r7, #44]	; 0x2c
 80083ee:	e009      	b.n	8008404 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2290      	movs	r2, #144	; 0x90
 80083f4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083fc:	4618      	mov	r0, r3
 80083fe:	f001 ff61 	bl	800a2c4 <SDMMC_CmdWriteSingleBlock>
 8008402:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008406:	2b00      	cmp	r3, #0
 8008408:	d012      	beq.n	8008430 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a3b      	ldr	r2, [pc, #236]	; (80084fc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8008410:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008418:	431a      	orrs	r2, r3
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2201      	movs	r2, #1
 8008422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2200      	movs	r2, #0
 800842a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800842c:	2301      	movs	r3, #1
 800842e:	e05c      	b.n	80084ea <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f042 0208 	orr.w	r2, r2, #8
 800843e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008444:	2240      	movs	r2, #64	; 0x40
 8008446:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008458:	689a      	ldr	r2, [r3, #8]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	430a      	orrs	r2, r1
 8008462:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008468:	68b9      	ldr	r1, [r7, #8]
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	3380      	adds	r3, #128	; 0x80
 8008470:	461a      	mov	r2, r3
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	025b      	lsls	r3, r3, #9
 8008476:	089b      	lsrs	r3, r3, #2
 8008478:	f7fc fefa 	bl	8005270 <HAL_DMA_Start_IT>
 800847c:	4603      	mov	r3, r0
 800847e:	2b00      	cmp	r3, #0
 8008480:	d01a      	beq.n	80084b8 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f022 021a 	bic.w	r2, r2, #26
 8008490:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a19      	ldr	r2, [pc, #100]	; (80084fc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8008498:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800849e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2201      	movs	r2, #1
 80084aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2200      	movs	r2, #0
 80084b2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
 80084b6:	e018      	b.n	80084ea <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80084b8:	f04f 33ff 	mov.w	r3, #4294967295
 80084bc:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	025b      	lsls	r3, r3, #9
 80084c2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80084c4:	2390      	movs	r3, #144	; 0x90
 80084c6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80084c8:	2300      	movs	r3, #0
 80084ca:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80084cc:	2300      	movs	r3, #0
 80084ce:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80084d0:	2301      	movs	r3, #1
 80084d2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f107 0210 	add.w	r2, r7, #16
 80084dc:	4611      	mov	r1, r2
 80084de:	4618      	mov	r0, r3
 80084e0:	f001 fe5e 	bl	800a1a0 <SDMMC_ConfigData>

      return HAL_OK;
 80084e4:	2300      	movs	r3, #0
 80084e6:	e000      	b.n	80084ea <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 80084e8:	2302      	movs	r3, #2
  }
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3730      	adds	r7, #48	; 0x30
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	08008d15 	.word	0x08008d15
 80084f8:	08008db1 	.word	0x08008db1
 80084fc:	004005ff 	.word	0x004005ff

08008500 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800850c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008514:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008518:	2b00      	cmp	r3, #0
 800851a:	d008      	beq.n	800852e <HAL_SD_IRQHandler+0x2e>
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f003 0308 	and.w	r3, r3, #8
 8008522:	2b00      	cmp	r3, #0
 8008524:	d003      	beq.n	800852e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 ffef 	bl	800950a <SD_Read_IT>
 800852c:	e15a      	b.n	80087e4 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008538:	2b00      	cmp	r3, #0
 800853a:	f000 808d 	beq.w	8008658 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008546:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	4b9a      	ldr	r3, [pc, #616]	; (80087bc <HAL_SD_IRQHandler+0x2bc>)
 8008554:	400b      	ands	r3, r1
 8008556:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f022 0201 	bic.w	r2, r2, #1
 8008566:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f003 0308 	and.w	r3, r3, #8
 800856e:	2b00      	cmp	r3, #0
 8008570:	d039      	beq.n	80085e6 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f003 0302 	and.w	r3, r3, #2
 8008578:	2b00      	cmp	r3, #0
 800857a:	d104      	bne.n	8008586 <HAL_SD_IRQHandler+0x86>
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f003 0320 	and.w	r3, r3, #32
 8008582:	2b00      	cmp	r3, #0
 8008584:	d011      	beq.n	80085aa <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4618      	mov	r0, r3
 800858c:	f001 fede 	bl	800a34c <SDMMC_CmdStopTransfer>
 8008590:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d008      	beq.n	80085aa <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	431a      	orrs	r2, r3
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 f921 	bl	80087ec <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f240 523a 	movw	r2, #1338	; 0x53a
 80085b2:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2201      	movs	r2, #1
 80085b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2200      	movs	r2, #0
 80085c0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f003 0301 	and.w	r3, r3, #1
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d104      	bne.n	80085d6 <HAL_SD_IRQHandler+0xd6>
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f003 0302 	and.w	r3, r3, #2
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d003      	beq.n	80085de <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f002 fb4e 	bl	800ac78 <HAL_SD_RxCpltCallback>
 80085dc:	e102      	b.n	80087e4 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f002 fb40 	bl	800ac64 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80085e4:	e0fe      	b.n	80087e4 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f000 80f9 	beq.w	80087e4 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f003 0320 	and.w	r3, r3, #32
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d011      	beq.n	8008620 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4618      	mov	r0, r3
 8008602:	f001 fea3 	bl	800a34c <SDMMC_CmdStopTransfer>
 8008606:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d008      	beq.n	8008620 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	431a      	orrs	r2, r3
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 f8e6 	bl	80087ec <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f003 0301 	and.w	r3, r3, #1
 8008626:	2b00      	cmp	r3, #0
 8008628:	f040 80dc 	bne.w	80087e4 <HAL_SD_IRQHandler+0x2e4>
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f003 0302 	and.w	r3, r3, #2
 8008632:	2b00      	cmp	r3, #0
 8008634:	f040 80d6 	bne.w	80087e4 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f022 0208 	bic.w	r2, r2, #8
 8008646:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2201      	movs	r2, #1
 800864c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f002 fb07 	bl	800ac64 <HAL_SD_TxCpltCallback>
}
 8008656:	e0c5      	b.n	80087e4 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800865e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008662:	2b00      	cmp	r3, #0
 8008664:	d008      	beq.n	8008678 <HAL_SD_IRQHandler+0x178>
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f003 0308 	and.w	r3, r3, #8
 800866c:	2b00      	cmp	r3, #0
 800866e:	d003      	beq.n	8008678 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 ff9b 	bl	80095ac <SD_Write_IT>
 8008676:	e0b5      	b.n	80087e4 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800867e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8008682:	2b00      	cmp	r3, #0
 8008684:	f000 80ae 	beq.w	80087e4 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800868e:	f003 0302 	and.w	r3, r3, #2
 8008692:	2b00      	cmp	r3, #0
 8008694:	d005      	beq.n	80086a2 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800869a:	f043 0202 	orr.w	r2, r3, #2
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086a8:	f003 0308 	and.w	r3, r3, #8
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d005      	beq.n	80086bc <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b4:	f043 0208 	orr.w	r2, r3, #8
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086c2:	f003 0320 	and.w	r3, r3, #32
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d005      	beq.n	80086d6 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ce:	f043 0220 	orr.w	r2, r3, #32
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086dc:	f003 0310 	and.w	r3, r3, #16
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d005      	beq.n	80086f0 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e8:	f043 0210 	orr.w	r2, r3, #16
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f240 523a 	movw	r2, #1338	; 0x53a
 80086f8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008708:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4618      	mov	r0, r3
 8008710:	f001 fe1c 	bl	800a34c <SDMMC_CmdStopTransfer>
 8008714:	4602      	mov	r2, r0
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800871a:	431a      	orrs	r2, r3
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f003 0308 	and.w	r3, r3, #8
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00a      	beq.n	8008740 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2201      	movs	r2, #1
 800872e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2200      	movs	r2, #0
 8008736:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f000 f857 	bl	80087ec <HAL_SD_ErrorCallback>
}
 800873e:	e051      	b.n	80087e4 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008746:	2b00      	cmp	r3, #0
 8008748:	d04c      	beq.n	80087e4 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f003 0310 	and.w	r3, r3, #16
 8008750:	2b00      	cmp	r3, #0
 8008752:	d104      	bne.n	800875e <HAL_SD_IRQHandler+0x25e>
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f003 0320 	and.w	r3, r3, #32
 800875a:	2b00      	cmp	r3, #0
 800875c:	d011      	beq.n	8008782 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008762:	4a17      	ldr	r2, [pc, #92]	; (80087c0 <HAL_SD_IRQHandler+0x2c0>)
 8008764:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800876a:	4618      	mov	r0, r3
 800876c:	f7fc fde0 	bl	8005330 <HAL_DMA_Abort_IT>
 8008770:	4603      	mov	r3, r0
 8008772:	2b00      	cmp	r3, #0
 8008774:	d036      	beq.n	80087e4 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800877a:	4618      	mov	r0, r3
 800877c:	f000 fb6a 	bl	8008e54 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008780:	e030      	b.n	80087e4 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f003 0301 	and.w	r3, r3, #1
 8008788:	2b00      	cmp	r3, #0
 800878a:	d104      	bne.n	8008796 <HAL_SD_IRQHandler+0x296>
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f003 0302 	and.w	r3, r3, #2
 8008792:	2b00      	cmp	r3, #0
 8008794:	d018      	beq.n	80087c8 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800879a:	4a0a      	ldr	r2, [pc, #40]	; (80087c4 <HAL_SD_IRQHandler+0x2c4>)
 800879c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a2:	4618      	mov	r0, r3
 80087a4:	f7fc fdc4 	bl	8005330 <HAL_DMA_Abort_IT>
 80087a8:	4603      	mov	r3, r0
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d01a      	beq.n	80087e4 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b2:	4618      	mov	r0, r3
 80087b4:	f000 fb85 	bl	8008ec2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80087b8:	e014      	b.n	80087e4 <HAL_SD_IRQHandler+0x2e4>
 80087ba:	bf00      	nop
 80087bc:	ffff3ec5 	.word	0xffff3ec5
 80087c0:	08008e55 	.word	0x08008e55
 80087c4:	08008ec3 	.word	0x08008ec3
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2200      	movs	r2, #0
 80087cc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2201      	movs	r2, #1
 80087d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f002 fa37 	bl	800ac50 <HAL_SD_AbortCallback>
}
 80087e2:	e7ff      	b.n	80087e4 <HAL_SD_IRQHandler+0x2e4>
 80087e4:	bf00      	nop
 80087e6:	3710      	adds	r7, #16
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80087f4:	bf00      	nop
 80087f6:	370c      	adds	r7, #12
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800880e:	0f9b      	lsrs	r3, r3, #30
 8008810:	b2da      	uxtb	r2, r3
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800881a:	0e9b      	lsrs	r3, r3, #26
 800881c:	b2db      	uxtb	r3, r3
 800881e:	f003 030f 	and.w	r3, r3, #15
 8008822:	b2da      	uxtb	r2, r3
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800882c:	0e1b      	lsrs	r3, r3, #24
 800882e:	b2db      	uxtb	r3, r3
 8008830:	f003 0303 	and.w	r3, r3, #3
 8008834:	b2da      	uxtb	r2, r3
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800883e:	0c1b      	lsrs	r3, r3, #16
 8008840:	b2da      	uxtb	r2, r3
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800884a:	0a1b      	lsrs	r3, r3, #8
 800884c:	b2da      	uxtb	r2, r3
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008856:	b2da      	uxtb	r2, r3
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008860:	0d1b      	lsrs	r3, r3, #20
 8008862:	b29a      	uxth	r2, r3
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800886c:	0c1b      	lsrs	r3, r3, #16
 800886e:	b2db      	uxtb	r3, r3
 8008870:	f003 030f 	and.w	r3, r3, #15
 8008874:	b2da      	uxtb	r2, r3
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800887e:	0bdb      	lsrs	r3, r3, #15
 8008880:	b2db      	uxtb	r3, r3
 8008882:	f003 0301 	and.w	r3, r3, #1
 8008886:	b2da      	uxtb	r2, r3
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008890:	0b9b      	lsrs	r3, r3, #14
 8008892:	b2db      	uxtb	r3, r3
 8008894:	f003 0301 	and.w	r3, r3, #1
 8008898:	b2da      	uxtb	r2, r3
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088a2:	0b5b      	lsrs	r3, r3, #13
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	f003 0301 	and.w	r3, r3, #1
 80088aa:	b2da      	uxtb	r2, r3
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088b4:	0b1b      	lsrs	r3, r3, #12
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	f003 0301 	and.w	r3, r3, #1
 80088bc:	b2da      	uxtb	r2, r3
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	2200      	movs	r2, #0
 80088c6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d163      	bne.n	8008998 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088d4:	009a      	lsls	r2, r3, #2
 80088d6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80088da:	4013      	ands	r3, r2
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80088e0:	0f92      	lsrs	r2, r2, #30
 80088e2:	431a      	orrs	r2, r3
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088ec:	0edb      	lsrs	r3, r3, #27
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	f003 0307 	and.w	r3, r3, #7
 80088f4:	b2da      	uxtb	r2, r3
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088fe:	0e1b      	lsrs	r3, r3, #24
 8008900:	b2db      	uxtb	r3, r3
 8008902:	f003 0307 	and.w	r3, r3, #7
 8008906:	b2da      	uxtb	r2, r3
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008910:	0d5b      	lsrs	r3, r3, #21
 8008912:	b2db      	uxtb	r3, r3
 8008914:	f003 0307 	and.w	r3, r3, #7
 8008918:	b2da      	uxtb	r2, r3
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008922:	0c9b      	lsrs	r3, r3, #18
 8008924:	b2db      	uxtb	r3, r3
 8008926:	f003 0307 	and.w	r3, r3, #7
 800892a:	b2da      	uxtb	r2, r3
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008934:	0bdb      	lsrs	r3, r3, #15
 8008936:	b2db      	uxtb	r3, r3
 8008938:	f003 0307 	and.w	r3, r3, #7
 800893c:	b2da      	uxtb	r2, r3
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	691b      	ldr	r3, [r3, #16]
 8008946:	1c5a      	adds	r2, r3, #1
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	7e1b      	ldrb	r3, [r3, #24]
 8008950:	b2db      	uxtb	r3, r3
 8008952:	f003 0307 	and.w	r3, r3, #7
 8008956:	3302      	adds	r3, #2
 8008958:	2201      	movs	r2, #1
 800895a:	fa02 f303 	lsl.w	r3, r2, r3
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008962:	fb03 f202 	mul.w	r2, r3, r2
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	7a1b      	ldrb	r3, [r3, #8]
 800896e:	b2db      	uxtb	r3, r3
 8008970:	f003 030f 	and.w	r3, r3, #15
 8008974:	2201      	movs	r2, #1
 8008976:	409a      	lsls	r2, r3
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008984:	0a52      	lsrs	r2, r2, #9
 8008986:	fb03 f202 	mul.w	r2, r3, r2
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008994:	661a      	str	r2, [r3, #96]	; 0x60
 8008996:	e031      	b.n	80089fc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800899c:	2b01      	cmp	r3, #1
 800899e:	d11d      	bne.n	80089dc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089a4:	041b      	lsls	r3, r3, #16
 80089a6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089ae:	0c1b      	lsrs	r3, r3, #16
 80089b0:	431a      	orrs	r2, r3
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	691b      	ldr	r3, [r3, #16]
 80089ba:	3301      	adds	r3, #1
 80089bc:	029a      	lsls	r2, r3, #10
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80089d0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	661a      	str	r2, [r3, #96]	; 0x60
 80089da:	e00f      	b.n	80089fc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a58      	ldr	r2, [pc, #352]	; (8008b44 <HAL_SD_GetCardCSD+0x344>)
 80089e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2201      	movs	r2, #1
 80089f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80089f8:	2301      	movs	r3, #1
 80089fa:	e09d      	b.n	8008b38 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a00:	0b9b      	lsrs	r3, r3, #14
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	f003 0301 	and.w	r3, r3, #1
 8008a08:	b2da      	uxtb	r2, r3
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a12:	09db      	lsrs	r3, r3, #7
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a1a:	b2da      	uxtb	r2, r3
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a2a:	b2da      	uxtb	r2, r3
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a34:	0fdb      	lsrs	r3, r3, #31
 8008a36:	b2da      	uxtb	r2, r3
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a40:	0f5b      	lsrs	r3, r3, #29
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	f003 0303 	and.w	r3, r3, #3
 8008a48:	b2da      	uxtb	r2, r3
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a52:	0e9b      	lsrs	r3, r3, #26
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	f003 0307 	and.w	r3, r3, #7
 8008a5a:	b2da      	uxtb	r2, r3
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a64:	0d9b      	lsrs	r3, r3, #22
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	f003 030f 	and.w	r3, r3, #15
 8008a6c:	b2da      	uxtb	r2, r3
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a76:	0d5b      	lsrs	r3, r3, #21
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	f003 0301 	and.w	r3, r3, #1
 8008a7e:	b2da      	uxtb	r2, r3
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a92:	0c1b      	lsrs	r3, r3, #16
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	f003 0301 	and.w	r3, r3, #1
 8008a9a:	b2da      	uxtb	r2, r3
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aa6:	0bdb      	lsrs	r3, r3, #15
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	f003 0301 	and.w	r3, r3, #1
 8008aae:	b2da      	uxtb	r2, r3
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aba:	0b9b      	lsrs	r3, r3, #14
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	f003 0301 	and.w	r3, r3, #1
 8008ac2:	b2da      	uxtb	r2, r3
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ace:	0b5b      	lsrs	r3, r3, #13
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	f003 0301 	and.w	r3, r3, #1
 8008ad6:	b2da      	uxtb	r2, r3
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ae2:	0b1b      	lsrs	r3, r3, #12
 8008ae4:	b2db      	uxtb	r3, r3
 8008ae6:	f003 0301 	and.w	r3, r3, #1
 8008aea:	b2da      	uxtb	r2, r3
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008af6:	0a9b      	lsrs	r3, r3, #10
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	f003 0303 	and.w	r3, r3, #3
 8008afe:	b2da      	uxtb	r2, r3
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b0a:	0a1b      	lsrs	r3, r3, #8
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	f003 0303 	and.w	r3, r3, #3
 8008b12:	b2da      	uxtb	r2, r3
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b1e:	085b      	lsrs	r3, r3, #1
 8008b20:	b2db      	uxtb	r3, r3
 8008b22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b26:	b2da      	uxtb	r2, r3
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	2201      	movs	r2, #1
 8008b32:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008b36:	2300      	movs	r3, #0
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	370c      	adds	r7, #12
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr
 8008b44:	004005ff 	.word	0x004005ff

08008b48 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008b92:	2300      	movs	r3, #0
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	370c      	adds	r7, #12
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr

08008ba0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008ba0:	b5b0      	push	{r4, r5, r7, lr}
 8008ba2:	b08e      	sub	sp, #56	; 0x38
 8008ba4:	af04      	add	r7, sp, #16
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008baa:	2300      	movs	r3, #0
 8008bac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2203      	movs	r2, #3
 8008bb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bbc:	2b03      	cmp	r3, #3
 8008bbe:	d02e      	beq.n	8008c1e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bc6:	d106      	bne.n	8008bd6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bcc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	639a      	str	r2, [r3, #56]	; 0x38
 8008bd4:	e029      	b.n	8008c2a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bdc:	d10a      	bne.n	8008bf4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 fb2a 	bl	8009238 <SD_WideBus_Enable>
 8008be4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bea:	6a3b      	ldr	r3, [r7, #32]
 8008bec:	431a      	orrs	r2, r3
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	639a      	str	r2, [r3, #56]	; 0x38
 8008bf2:	e01a      	b.n	8008c2a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d10a      	bne.n	8008c10 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 fb67 	bl	80092ce <SD_WideBus_Disable>
 8008c00:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c06:	6a3b      	ldr	r3, [r7, #32]
 8008c08:	431a      	orrs	r2, r3
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	639a      	str	r2, [r3, #56]	; 0x38
 8008c0e:	e00c      	b.n	8008c2a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c14:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	639a      	str	r2, [r3, #56]	; 0x38
 8008c1c:	e005      	b.n	8008c2a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c22:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d00b      	beq.n	8008c4a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a26      	ldr	r2, [pc, #152]	; (8008cd0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8008c38:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008c48:	e01f      	b.n	8008c8a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	68db      	ldr	r3, [r3, #12]
 8008c5a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	695b      	ldr	r3, [r3, #20]
 8008c64:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	699b      	ldr	r3, [r3, #24]
 8008c6a:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681d      	ldr	r5, [r3, #0]
 8008c70:	466c      	mov	r4, sp
 8008c72:	f107 0314 	add.w	r3, r7, #20
 8008c76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008c7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008c7e:	f107 0308 	add.w	r3, r7, #8
 8008c82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008c84:	4628      	mov	r0, r5
 8008c86:	f001 f9db 	bl	800a040 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008c92:	4618      	mov	r0, r3
 8008c94:	f001 fab0 	bl	800a1f8 <SDMMC_CmdBlockLength>
 8008c98:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c9a:	6a3b      	ldr	r3, [r7, #32]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d00c      	beq.n	8008cba <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a0a      	ldr	r2, [pc, #40]	; (8008cd0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8008ca6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cac:	6a3b      	ldr	r3, [r7, #32]
 8008cae:	431a      	orrs	r2, r3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8008cc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3728      	adds	r7, #40	; 0x28
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bdb0      	pop	{r4, r5, r7, pc}
 8008cce:	bf00      	nop
 8008cd0:	004005ff 	.word	0x004005ff

08008cd4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b086      	sub	sp, #24
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008ce0:	f107 030c 	add.w	r3, r7, #12
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 fa7e 	bl	80091e8 <SD_SendStatus>
 8008cec:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d005      	beq.n	8008d00 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	431a      	orrs	r2, r3
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	0a5b      	lsrs	r3, r3, #9
 8008d04:	f003 030f 	and.w	r3, r3, #15
 8008d08:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008d0a:	693b      	ldr	r3, [r7, #16]
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3718      	adds	r7, #24
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b085      	sub	sp, #20
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d20:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d30:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008d32:	bf00      	nop
 8008d34:	3714      	adds	r7, #20
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr

08008d3e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008d3e:	b580      	push	{r7, lr}
 8008d40:	b084      	sub	sp, #16
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d4a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d50:	2b82      	cmp	r3, #130	; 0x82
 8008d52:	d111      	bne.n	8008d78 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f001 faf7 	bl	800a34c <SDMMC_CmdStopTransfer>
 8008d5e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d008      	beq.n	8008d78 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	431a      	orrs	r2, r3
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008d72:	68f8      	ldr	r0, [r7, #12]
 8008d74:	f7ff fd3a 	bl	80087ec <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f022 0208 	bic.w	r2, r2, #8
 8008d86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f240 523a 	movw	r2, #1338	; 0x53a
 8008d90:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2201      	movs	r2, #1
 8008d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008da0:	68f8      	ldr	r0, [r7, #12]
 8008da2:	f001 ff69 	bl	800ac78 <HAL_SD_RxCpltCallback>
#endif
}
 8008da6:	bf00      	nop
 8008da8:	3710      	adds	r7, #16
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
	...

08008db0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b086      	sub	sp, #24
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dbc:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f7fc fc62 	bl	8005688 <HAL_DMA_GetError>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b02      	cmp	r3, #2
 8008dc8:	d03e      	beq.n	8008e48 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dd0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dd8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d002      	beq.n	8008de6 <SD_DMAError+0x36>
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d12d      	bne.n	8008e42 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a19      	ldr	r2, [pc, #100]	; (8008e50 <SD_DMAError+0xa0>)
 8008dec:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008dfc:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e02:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008e0a:	6978      	ldr	r0, [r7, #20]
 8008e0c:	f7ff ff62 	bl	8008cd4 <HAL_SD_GetCardState>
 8008e10:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	2b06      	cmp	r3, #6
 8008e16:	d002      	beq.n	8008e1e <SD_DMAError+0x6e>
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	2b05      	cmp	r3, #5
 8008e1c:	d10a      	bne.n	8008e34 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4618      	mov	r0, r3
 8008e24:	f001 fa92 	bl	800a34c <SDMMC_CmdStopTransfer>
 8008e28:	4602      	mov	r2, r0
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e2e:	431a      	orrs	r2, r3
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	2201      	movs	r2, #1
 8008e38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008e42:	6978      	ldr	r0, [r7, #20]
 8008e44:	f7ff fcd2 	bl	80087ec <HAL_SD_ErrorCallback>
#endif
  }
}
 8008e48:	bf00      	nop
 8008e4a:	3718      	adds	r7, #24
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	004005ff 	.word	0x004005ff

08008e54 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e60:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f240 523a 	movw	r2, #1338	; 0x53a
 8008e6a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008e6c:	68f8      	ldr	r0, [r7, #12]
 8008e6e:	f7ff ff31 	bl	8008cd4 <HAL_SD_GetCardState>
 8008e72:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2201      	movs	r2, #1
 8008e78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	2b06      	cmp	r3, #6
 8008e86:	d002      	beq.n	8008e8e <SD_DMATxAbort+0x3a>
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	2b05      	cmp	r3, #5
 8008e8c:	d10a      	bne.n	8008ea4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4618      	mov	r0, r3
 8008e94:	f001 fa5a 	bl	800a34c <SDMMC_CmdStopTransfer>
 8008e98:	4602      	mov	r2, r0
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e9e:	431a      	orrs	r2, r3
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d103      	bne.n	8008eb4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008eac:	68f8      	ldr	r0, [r7, #12]
 8008eae:	f001 fecf 	bl	800ac50 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008eb2:	e002      	b.n	8008eba <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008eb4:	68f8      	ldr	r0, [r7, #12]
 8008eb6:	f7ff fc99 	bl	80087ec <HAL_SD_ErrorCallback>
}
 8008eba:	bf00      	nop
 8008ebc:	3710      	adds	r7, #16
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}

08008ec2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8008ec2:	b580      	push	{r7, lr}
 8008ec4:	b084      	sub	sp, #16
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ece:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f240 523a 	movw	r2, #1338	; 0x53a
 8008ed8:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008eda:	68f8      	ldr	r0, [r7, #12]
 8008edc:	f7ff fefa 	bl	8008cd4 <HAL_SD_GetCardState>
 8008ee0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2200      	movs	r2, #0
 8008eee:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	2b06      	cmp	r3, #6
 8008ef4:	d002      	beq.n	8008efc <SD_DMARxAbort+0x3a>
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	2b05      	cmp	r3, #5
 8008efa:	d10a      	bne.n	8008f12 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4618      	mov	r0, r3
 8008f02:	f001 fa23 	bl	800a34c <SDMMC_CmdStopTransfer>
 8008f06:	4602      	mov	r2, r0
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f0c:	431a      	orrs	r2, r3
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d103      	bne.n	8008f22 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008f1a:	68f8      	ldr	r0, [r7, #12]
 8008f1c:	f001 fe98 	bl	800ac50 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008f20:	e002      	b.n	8008f28 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008f22:	68f8      	ldr	r0, [r7, #12]
 8008f24:	f7ff fc62 	bl	80087ec <HAL_SD_ErrorCallback>
}
 8008f28:	bf00      	nop
 8008f2a:	3710      	adds	r7, #16
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008f30:	b5b0      	push	{r4, r5, r7, lr}
 8008f32:	b094      	sub	sp, #80	; 0x50
 8008f34:	af04      	add	r7, sp, #16
 8008f36:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4618      	mov	r0, r3
 8008f42:	f001 f8d5 	bl	800a0f0 <SDMMC_GetPowerState>
 8008f46:	4603      	mov	r3, r0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d102      	bne.n	8008f52 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008f4c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008f50:	e0b8      	b.n	80090c4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f56:	2b03      	cmp	r3, #3
 8008f58:	d02f      	beq.n	8008fba <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f001 faff 	bl	800a562 <SDMMC_CmdSendCID>
 8008f64:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d001      	beq.n	8008f70 <SD_InitCard+0x40>
    {
      return errorstate;
 8008f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f6e:	e0a9      	b.n	80090c4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	2100      	movs	r1, #0
 8008f76:	4618      	mov	r0, r3
 8008f78:	f001 f8ff 	bl	800a17a <SDMMC_GetResponse>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	2104      	movs	r1, #4
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f001 f8f6 	bl	800a17a <SDMMC_GetResponse>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	2108      	movs	r1, #8
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f001 f8ed 	bl	800a17a <SDMMC_GetResponse>
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	210c      	movs	r1, #12
 8008fac:	4618      	mov	r0, r3
 8008fae:	f001 f8e4 	bl	800a17a <SDMMC_GetResponse>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fbe:	2b03      	cmp	r3, #3
 8008fc0:	d00d      	beq.n	8008fde <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f107 020e 	add.w	r2, r7, #14
 8008fca:	4611      	mov	r1, r2
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f001 fb05 	bl	800a5dc <SDMMC_CmdSetRelAdd>
 8008fd2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d001      	beq.n	8008fde <SD_InitCard+0xae>
    {
      return errorstate;
 8008fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fdc:	e072      	b.n	80090c4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fe2:	2b03      	cmp	r3, #3
 8008fe4:	d036      	beq.n	8009054 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008fe6:	89fb      	ldrh	r3, [r7, #14]
 8008fe8:	461a      	mov	r2, r3
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681a      	ldr	r2, [r3, #0]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ff6:	041b      	lsls	r3, r3, #16
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	4610      	mov	r0, r2
 8008ffc:	f001 facf 	bl	800a59e <SDMMC_CmdSendCSD>
 8009000:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009004:	2b00      	cmp	r3, #0
 8009006:	d001      	beq.n	800900c <SD_InitCard+0xdc>
    {
      return errorstate;
 8009008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800900a:	e05b      	b.n	80090c4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2100      	movs	r1, #0
 8009012:	4618      	mov	r0, r3
 8009014:	f001 f8b1 	bl	800a17a <SDMMC_GetResponse>
 8009018:	4602      	mov	r2, r0
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	2104      	movs	r1, #4
 8009024:	4618      	mov	r0, r3
 8009026:	f001 f8a8 	bl	800a17a <SDMMC_GetResponse>
 800902a:	4602      	mov	r2, r0
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	2108      	movs	r1, #8
 8009036:	4618      	mov	r0, r3
 8009038:	f001 f89f 	bl	800a17a <SDMMC_GetResponse>
 800903c:	4602      	mov	r2, r0
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	210c      	movs	r1, #12
 8009048:	4618      	mov	r0, r3
 800904a:	f001 f896 	bl	800a17a <SDMMC_GetResponse>
 800904e:	4602      	mov	r2, r0
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	2104      	movs	r1, #4
 800905a:	4618      	mov	r0, r3
 800905c:	f001 f88d 	bl	800a17a <SDMMC_GetResponse>
 8009060:	4603      	mov	r3, r0
 8009062:	0d1a      	lsrs	r2, r3, #20
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009068:	f107 0310 	add.w	r3, r7, #16
 800906c:	4619      	mov	r1, r3
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f7ff fbc6 	bl	8008800 <HAL_SD_GetCardCSD>
 8009074:	4603      	mov	r3, r0
 8009076:	2b00      	cmp	r3, #0
 8009078:	d002      	beq.n	8009080 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800907a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800907e:	e021      	b.n	80090c4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6819      	ldr	r1, [r3, #0]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009088:	041b      	lsls	r3, r3, #16
 800908a:	2200      	movs	r2, #0
 800908c:	461c      	mov	r4, r3
 800908e:	4615      	mov	r5, r2
 8009090:	4622      	mov	r2, r4
 8009092:	462b      	mov	r3, r5
 8009094:	4608      	mov	r0, r1
 8009096:	f001 f97b 	bl	800a390 <SDMMC_CmdSelDesel>
 800909a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800909c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d001      	beq.n	80090a6 <SD_InitCard+0x176>
  {
    return errorstate;
 80090a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090a4:	e00e      	b.n	80090c4 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681d      	ldr	r5, [r3, #0]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	466c      	mov	r4, sp
 80090ae:	f103 0210 	add.w	r2, r3, #16
 80090b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80090b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80090b8:	3304      	adds	r3, #4
 80090ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80090bc:	4628      	mov	r0, r5
 80090be:	f000 ffbf 	bl	800a040 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80090c2:	2300      	movs	r3, #0
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3740      	adds	r7, #64	; 0x40
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bdb0      	pop	{r4, r5, r7, pc}

080090cc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b086      	sub	sp, #24
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80090d4:	2300      	movs	r3, #0
 80090d6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80090d8:	2300      	movs	r3, #0
 80090da:	617b      	str	r3, [r7, #20]
 80090dc:	2300      	movs	r3, #0
 80090de:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4618      	mov	r0, r3
 80090e6:	f001 f976 	bl	800a3d6 <SDMMC_CmdGoIdleState>
 80090ea:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d001      	beq.n	80090f6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	e072      	b.n	80091dc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4618      	mov	r0, r3
 80090fc:	f001 f989 	bl	800a412 <SDMMC_CmdOperCond>
 8009100:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d00d      	beq.n	8009124 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2200      	movs	r2, #0
 800910c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4618      	mov	r0, r3
 8009114:	f001 f95f 	bl	800a3d6 <SDMMC_CmdGoIdleState>
 8009118:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d004      	beq.n	800912a <SD_PowerON+0x5e>
    {
      return errorstate;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	e05b      	b.n	80091dc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2201      	movs	r2, #1
 8009128:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800912e:	2b01      	cmp	r3, #1
 8009130:	d137      	bne.n	80091a2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	2100      	movs	r1, #0
 8009138:	4618      	mov	r0, r3
 800913a:	f001 f989 	bl	800a450 <SDMMC_CmdAppCommand>
 800913e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d02d      	beq.n	80091a2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009146:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800914a:	e047      	b.n	80091dc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	2100      	movs	r1, #0
 8009152:	4618      	mov	r0, r3
 8009154:	f001 f97c 	bl	800a450 <SDMMC_CmdAppCommand>
 8009158:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d001      	beq.n	8009164 <SD_PowerON+0x98>
    {
      return errorstate;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	e03b      	b.n	80091dc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	491e      	ldr	r1, [pc, #120]	; (80091e4 <SD_PowerON+0x118>)
 800916a:	4618      	mov	r0, r3
 800916c:	f001 f992 	bl	800a494 <SDMMC_CmdAppOperCommand>
 8009170:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d002      	beq.n	800917e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009178:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800917c:	e02e      	b.n	80091dc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	2100      	movs	r1, #0
 8009184:	4618      	mov	r0, r3
 8009186:	f000 fff8 	bl	800a17a <SDMMC_GetResponse>
 800918a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	0fdb      	lsrs	r3, r3, #31
 8009190:	2b01      	cmp	r3, #1
 8009192:	d101      	bne.n	8009198 <SD_PowerON+0xcc>
 8009194:	2301      	movs	r3, #1
 8009196:	e000      	b.n	800919a <SD_PowerON+0xce>
 8009198:	2300      	movs	r3, #0
 800919a:	613b      	str	r3, [r7, #16]

    count++;
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	3301      	adds	r3, #1
 80091a0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d802      	bhi.n	80091b2 <SD_PowerON+0xe6>
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d0cc      	beq.n	800914c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d902      	bls.n	80091c2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80091bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80091c0:	e00c      	b.n	80091dc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d003      	beq.n	80091d4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2201      	movs	r2, #1
 80091d0:	645a      	str	r2, [r3, #68]	; 0x44
 80091d2:	e002      	b.n	80091da <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80091da:	2300      	movs	r3, #0
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3718      	adds	r7, #24
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}
 80091e4:	c1100000 	.word	0xc1100000

080091e8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d102      	bne.n	80091fe <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80091f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80091fc:	e018      	b.n	8009230 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009206:	041b      	lsls	r3, r3, #16
 8009208:	4619      	mov	r1, r3
 800920a:	4610      	mov	r0, r2
 800920c:	f001 fa07 	bl	800a61e <SDMMC_CmdSendStatus>
 8009210:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d001      	beq.n	800921c <SD_SendStatus+0x34>
  {
    return errorstate;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	e009      	b.n	8009230 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	2100      	movs	r1, #0
 8009222:	4618      	mov	r0, r3
 8009224:	f000 ffa9 	bl	800a17a <SDMMC_GetResponse>
 8009228:	4602      	mov	r2, r0
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800922e:	2300      	movs	r3, #0
}
 8009230:	4618      	mov	r0, r3
 8009232:	3710      	adds	r7, #16
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b086      	sub	sp, #24
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009240:	2300      	movs	r3, #0
 8009242:	60fb      	str	r3, [r7, #12]
 8009244:	2300      	movs	r3, #0
 8009246:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	2100      	movs	r1, #0
 800924e:	4618      	mov	r0, r3
 8009250:	f000 ff93 	bl	800a17a <SDMMC_GetResponse>
 8009254:	4603      	mov	r3, r0
 8009256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800925a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800925e:	d102      	bne.n	8009266 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009260:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009264:	e02f      	b.n	80092c6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009266:	f107 030c 	add.w	r3, r7, #12
 800926a:	4619      	mov	r1, r3
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 f879 	bl	8009364 <SD_FindSCR>
 8009272:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d001      	beq.n	800927e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	e023      	b.n	80092c6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009284:	2b00      	cmp	r3, #0
 8009286:	d01c      	beq.n	80092c2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009290:	041b      	lsls	r3, r3, #16
 8009292:	4619      	mov	r1, r3
 8009294:	4610      	mov	r0, r2
 8009296:	f001 f8db 	bl	800a450 <SDMMC_CmdAppCommand>
 800929a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d001      	beq.n	80092a6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	e00f      	b.n	80092c6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	2102      	movs	r1, #2
 80092ac:	4618      	mov	r0, r3
 80092ae:	f001 f915 	bl	800a4dc <SDMMC_CmdBusWidth>
 80092b2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d001      	beq.n	80092be <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	e003      	b.n	80092c6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80092be:	2300      	movs	r3, #0
 80092c0:	e001      	b.n	80092c6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80092c2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3718      	adds	r7, #24
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80092ce:	b580      	push	{r7, lr}
 80092d0:	b086      	sub	sp, #24
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80092d6:	2300      	movs	r3, #0
 80092d8:	60fb      	str	r3, [r7, #12]
 80092da:	2300      	movs	r3, #0
 80092dc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	2100      	movs	r1, #0
 80092e4:	4618      	mov	r0, r3
 80092e6:	f000 ff48 	bl	800a17a <SDMMC_GetResponse>
 80092ea:	4603      	mov	r3, r0
 80092ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092f4:	d102      	bne.n	80092fc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80092f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80092fa:	e02f      	b.n	800935c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80092fc:	f107 030c 	add.w	r3, r7, #12
 8009300:	4619      	mov	r1, r3
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 f82e 	bl	8009364 <SD_FindSCR>
 8009308:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d001      	beq.n	8009314 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	e023      	b.n	800935c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800931a:	2b00      	cmp	r3, #0
 800931c:	d01c      	beq.n	8009358 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009326:	041b      	lsls	r3, r3, #16
 8009328:	4619      	mov	r1, r3
 800932a:	4610      	mov	r0, r2
 800932c:	f001 f890 	bl	800a450 <SDMMC_CmdAppCommand>
 8009330:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d001      	beq.n	800933c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	e00f      	b.n	800935c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	2100      	movs	r1, #0
 8009342:	4618      	mov	r0, r3
 8009344:	f001 f8ca 	bl	800a4dc <SDMMC_CmdBusWidth>
 8009348:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d001      	beq.n	8009354 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	e003      	b.n	800935c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009354:	2300      	movs	r3, #0
 8009356:	e001      	b.n	800935c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009358:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800935c:	4618      	mov	r0, r3
 800935e:	3718      	adds	r7, #24
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}

08009364 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009364:	b590      	push	{r4, r7, lr}
 8009366:	b08f      	sub	sp, #60	; 0x3c
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800936e:	f7fb fd8f 	bl	8004e90 <HAL_GetTick>
 8009372:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009374:	2300      	movs	r3, #0
 8009376:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009378:	2300      	movs	r3, #0
 800937a:	60bb      	str	r3, [r7, #8]
 800937c:	2300      	movs	r3, #0
 800937e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	2108      	movs	r1, #8
 800938a:	4618      	mov	r0, r3
 800938c:	f000 ff34 	bl	800a1f8 <SDMMC_CmdBlockLength>
 8009390:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009394:	2b00      	cmp	r3, #0
 8009396:	d001      	beq.n	800939c <SD_FindSCR+0x38>
  {
    return errorstate;
 8009398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800939a:	e0b2      	b.n	8009502 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681a      	ldr	r2, [r3, #0]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093a4:	041b      	lsls	r3, r3, #16
 80093a6:	4619      	mov	r1, r3
 80093a8:	4610      	mov	r0, r2
 80093aa:	f001 f851 	bl	800a450 <SDMMC_CmdAppCommand>
 80093ae:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80093b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d001      	beq.n	80093ba <SD_FindSCR+0x56>
  {
    return errorstate;
 80093b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b8:	e0a3      	b.n	8009502 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80093ba:	f04f 33ff 	mov.w	r3, #4294967295
 80093be:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80093c0:	2308      	movs	r3, #8
 80093c2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80093c4:	2330      	movs	r3, #48	; 0x30
 80093c6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80093c8:	2302      	movs	r3, #2
 80093ca:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80093cc:	2300      	movs	r3, #0
 80093ce:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80093d0:	2301      	movs	r3, #1
 80093d2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f107 0210 	add.w	r2, r7, #16
 80093dc:	4611      	mov	r1, r2
 80093de:	4618      	mov	r0, r3
 80093e0:	f000 fede 	bl	800a1a0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4618      	mov	r0, r3
 80093ea:	f001 f899 	bl	800a520 <SDMMC_CmdSendSCR>
 80093ee:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80093f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d02a      	beq.n	800944c <SD_FindSCR+0xe8>
  {
    return errorstate;
 80093f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f8:	e083      	b.n	8009502 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009400:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009404:	2b00      	cmp	r3, #0
 8009406:	d00f      	beq.n	8009428 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6819      	ldr	r1, [r3, #0]
 800940c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	f107 0208 	add.w	r2, r7, #8
 8009414:	18d4      	adds	r4, r2, r3
 8009416:	4608      	mov	r0, r1
 8009418:	f000 fe3e 	bl	800a098 <SDMMC_ReadFIFO>
 800941c:	4603      	mov	r3, r0
 800941e:	6023      	str	r3, [r4, #0]
      index++;
 8009420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009422:	3301      	adds	r3, #1
 8009424:	637b      	str	r3, [r7, #52]	; 0x34
 8009426:	e006      	b.n	8009436 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800942e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009432:	2b00      	cmp	r3, #0
 8009434:	d012      	beq.n	800945c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009436:	f7fb fd2b 	bl	8004e90 <HAL_GetTick>
 800943a:	4602      	mov	r2, r0
 800943c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800943e:	1ad3      	subs	r3, r2, r3
 8009440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009444:	d102      	bne.n	800944c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009446:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800944a:	e05a      	b.n	8009502 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009452:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8009456:	2b00      	cmp	r3, #0
 8009458:	d0cf      	beq.n	80093fa <SD_FindSCR+0x96>
 800945a:	e000      	b.n	800945e <SD_FindSCR+0xfa>
      break;
 800945c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009464:	f003 0308 	and.w	r3, r3, #8
 8009468:	2b00      	cmp	r3, #0
 800946a:	d005      	beq.n	8009478 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	2208      	movs	r2, #8
 8009472:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009474:	2308      	movs	r3, #8
 8009476:	e044      	b.n	8009502 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800947e:	f003 0302 	and.w	r3, r3, #2
 8009482:	2b00      	cmp	r3, #0
 8009484:	d005      	beq.n	8009492 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	2202      	movs	r2, #2
 800948c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800948e:	2302      	movs	r3, #2
 8009490:	e037      	b.n	8009502 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009498:	f003 0320 	and.w	r3, r3, #32
 800949c:	2b00      	cmp	r3, #0
 800949e:	d005      	beq.n	80094ac <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	2220      	movs	r2, #32
 80094a6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80094a8:	2320      	movs	r3, #32
 80094aa:	e02a      	b.n	8009502 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f240 523a 	movw	r2, #1338	; 0x53a
 80094b4:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	061a      	lsls	r2, r3, #24
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	021b      	lsls	r3, r3, #8
 80094be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80094c2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	0a1b      	lsrs	r3, r3, #8
 80094c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80094cc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	0e1b      	lsrs	r3, r3, #24
 80094d2:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80094d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094d6:	601a      	str	r2, [r3, #0]
    scr++;
 80094d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094da:	3304      	adds	r3, #4
 80094dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	061a      	lsls	r2, r3, #24
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	021b      	lsls	r3, r3, #8
 80094e6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80094ea:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	0a1b      	lsrs	r3, r3, #8
 80094f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80094f4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	0e1b      	lsrs	r3, r3, #24
 80094fa:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80094fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094fe:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009500:	2300      	movs	r3, #0
}
 8009502:	4618      	mov	r0, r3
 8009504:	373c      	adds	r7, #60	; 0x3c
 8009506:	46bd      	mov	sp, r7
 8009508:	bd90      	pop	{r4, r7, pc}

0800950a <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800950a:	b580      	push	{r7, lr}
 800950c:	b086      	sub	sp, #24
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009516:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800951c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d03f      	beq.n	80095a4 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8009524:	2300      	movs	r3, #0
 8009526:	617b      	str	r3, [r7, #20]
 8009528:	e033      	b.n	8009592 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4618      	mov	r0, r3
 8009530:	f000 fdb2 	bl	800a098 <SDMMC_ReadFIFO>
 8009534:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	b2da      	uxtb	r2, r3
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	3301      	adds	r3, #1
 8009542:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	3b01      	subs	r3, #1
 8009548:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	0a1b      	lsrs	r3, r3, #8
 800954e:	b2da      	uxtb	r2, r3
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	3301      	adds	r3, #1
 8009558:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	3b01      	subs	r3, #1
 800955e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	0c1b      	lsrs	r3, r3, #16
 8009564:	b2da      	uxtb	r2, r3
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	701a      	strb	r2, [r3, #0]
      tmp++;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	3301      	adds	r3, #1
 800956e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009570:	693b      	ldr	r3, [r7, #16]
 8009572:	3b01      	subs	r3, #1
 8009574:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	0e1b      	lsrs	r3, r3, #24
 800957a:	b2da      	uxtb	r2, r3
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	3301      	adds	r3, #1
 8009584:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	3b01      	subs	r3, #1
 800958a:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	3301      	adds	r3, #1
 8009590:	617b      	str	r3, [r7, #20]
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	2b07      	cmp	r3, #7
 8009596:	d9c8      	bls.n	800952a <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	68fa      	ldr	r2, [r7, #12]
 800959c:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	693a      	ldr	r2, [r7, #16]
 80095a2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80095a4:	bf00      	nop
 80095a6:	3718      	adds	r7, #24
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b086      	sub	sp, #24
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6a1b      	ldr	r3, [r3, #32]
 80095b8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095be:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d043      	beq.n	800964e <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80095c6:	2300      	movs	r3, #0
 80095c8:	617b      	str	r3, [r7, #20]
 80095ca:	e037      	b.n	800963c <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	60bb      	str	r3, [r7, #8]
      tmp++;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	3301      	adds	r3, #1
 80095d6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	3b01      	subs	r3, #1
 80095dc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	781b      	ldrb	r3, [r3, #0]
 80095e2:	021a      	lsls	r2, r3, #8
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	4313      	orrs	r3, r2
 80095e8:	60bb      	str	r3, [r7, #8]
      tmp++;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	3301      	adds	r3, #1
 80095ee:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	3b01      	subs	r3, #1
 80095f4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	781b      	ldrb	r3, [r3, #0]
 80095fa:	041a      	lsls	r2, r3, #16
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	4313      	orrs	r3, r2
 8009600:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	3301      	adds	r3, #1
 8009606:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	3b01      	subs	r3, #1
 800960c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	061a      	lsls	r2, r3, #24
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	4313      	orrs	r3, r2
 8009618:	60bb      	str	r3, [r7, #8]
      tmp++;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	3301      	adds	r3, #1
 800961e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	3b01      	subs	r3, #1
 8009624:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f107 0208 	add.w	r2, r7, #8
 800962e:	4611      	mov	r1, r2
 8009630:	4618      	mov	r0, r3
 8009632:	f000 fd3e 	bl	800a0b2 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	3301      	adds	r3, #1
 800963a:	617b      	str	r3, [r7, #20]
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	2b07      	cmp	r3, #7
 8009640:	d9c4      	bls.n	80095cc <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	68fa      	ldr	r2, [r7, #12]
 8009646:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	693a      	ldr	r2, [r7, #16]
 800964c:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800964e:	bf00      	nop
 8009650:	3718      	adds	r7, #24
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}

08009656 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009656:	b580      	push	{r7, lr}
 8009658:	b082      	sub	sp, #8
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d101      	bne.n	8009668 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009664:	2301      	movs	r3, #1
 8009666:	e040      	b.n	80096ea <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800966c:	2b00      	cmp	r3, #0
 800966e:	d106      	bne.n	800967e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2200      	movs	r2, #0
 8009674:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f7fb fb4b 	bl	8004d14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2224      	movs	r2, #36	; 0x24
 8009682:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	681a      	ldr	r2, [r3, #0]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f022 0201 	bic.w	r2, r2, #1
 8009692:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 f8bf 	bl	8009818 <UART_SetConfig>
 800969a:	4603      	mov	r3, r0
 800969c:	2b01      	cmp	r3, #1
 800969e:	d101      	bne.n	80096a4 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80096a0:	2301      	movs	r3, #1
 80096a2:	e022      	b.n	80096ea <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d002      	beq.n	80096b2 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f000 fb17 	bl	8009ce0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	685a      	ldr	r2, [r3, #4]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80096c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	689a      	ldr	r2, [r3, #8]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80096d0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	681a      	ldr	r2, [r3, #0]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f042 0201 	orr.w	r2, r2, #1
 80096e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 fb9e 	bl	8009e24 <UART_CheckIdleState>
 80096e8:	4603      	mov	r3, r0
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3708      	adds	r7, #8
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}

080096f2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80096f2:	b580      	push	{r7, lr}
 80096f4:	b08a      	sub	sp, #40	; 0x28
 80096f6:	af02      	add	r7, sp, #8
 80096f8:	60f8      	str	r0, [r7, #12]
 80096fa:	60b9      	str	r1, [r7, #8]
 80096fc:	603b      	str	r3, [r7, #0]
 80096fe:	4613      	mov	r3, r2
 8009700:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009706:	2b20      	cmp	r3, #32
 8009708:	f040 8081 	bne.w	800980e <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d002      	beq.n	8009718 <HAL_UART_Transmit+0x26>
 8009712:	88fb      	ldrh	r3, [r7, #6]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d101      	bne.n	800971c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	e079      	b.n	8009810 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009722:	2b01      	cmp	r3, #1
 8009724:	d101      	bne.n	800972a <HAL_UART_Transmit+0x38>
 8009726:	2302      	movs	r3, #2
 8009728:	e072      	b.n	8009810 <HAL_UART_Transmit+0x11e>
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2201      	movs	r2, #1
 800972e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2200      	movs	r2, #0
 8009736:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2221      	movs	r2, #33	; 0x21
 800973e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009740:	f7fb fba6 	bl	8004e90 <HAL_GetTick>
 8009744:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	88fa      	ldrh	r2, [r7, #6]
 800974a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	88fa      	ldrh	r2, [r7, #6]
 8009752:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800975e:	d108      	bne.n	8009772 <HAL_UART_Transmit+0x80>
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	691b      	ldr	r3, [r3, #16]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d104      	bne.n	8009772 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8009768:	2300      	movs	r3, #0
 800976a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	61bb      	str	r3, [r7, #24]
 8009770:	e003      	b.n	800977a <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009776:	2300      	movs	r3, #0
 8009778:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2200      	movs	r2, #0
 800977e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8009782:	e02c      	b.n	80097de <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	9300      	str	r3, [sp, #0]
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	2200      	movs	r2, #0
 800978c:	2180      	movs	r1, #128	; 0x80
 800978e:	68f8      	ldr	r0, [r7, #12]
 8009790:	f000 fb91 	bl	8009eb6 <UART_WaitOnFlagUntilTimeout>
 8009794:	4603      	mov	r3, r0
 8009796:	2b00      	cmp	r3, #0
 8009798:	d001      	beq.n	800979e <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800979a:	2303      	movs	r3, #3
 800979c:	e038      	b.n	8009810 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800979e:	69fb      	ldr	r3, [r7, #28]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d10b      	bne.n	80097bc <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80097a4:	69bb      	ldr	r3, [r7, #24]
 80097a6:	881b      	ldrh	r3, [r3, #0]
 80097a8:	461a      	mov	r2, r3
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80097b2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80097b4:	69bb      	ldr	r3, [r7, #24]
 80097b6:	3302      	adds	r3, #2
 80097b8:	61bb      	str	r3, [r7, #24]
 80097ba:	e007      	b.n	80097cc <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80097bc:	69fb      	ldr	r3, [r7, #28]
 80097be:	781a      	ldrb	r2, [r3, #0]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80097c6:	69fb      	ldr	r3, [r7, #28]
 80097c8:	3301      	adds	r3, #1
 80097ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	3b01      	subs	r3, #1
 80097d6:	b29a      	uxth	r2, r3
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d1cc      	bne.n	8009784 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	9300      	str	r3, [sp, #0]
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	2200      	movs	r2, #0
 80097f2:	2140      	movs	r1, #64	; 0x40
 80097f4:	68f8      	ldr	r0, [r7, #12]
 80097f6:	f000 fb5e 	bl	8009eb6 <UART_WaitOnFlagUntilTimeout>
 80097fa:	4603      	mov	r3, r0
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d001      	beq.n	8009804 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8009800:	2303      	movs	r3, #3
 8009802:	e005      	b.n	8009810 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2220      	movs	r2, #32
 8009808:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800980a:	2300      	movs	r3, #0
 800980c:	e000      	b.n	8009810 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800980e:	2302      	movs	r3, #2
  }
}
 8009810:	4618      	mov	r0, r3
 8009812:	3720      	adds	r7, #32
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b088      	sub	sp, #32
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009820:	2300      	movs	r3, #0
 8009822:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	689a      	ldr	r2, [r3, #8]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	691b      	ldr	r3, [r3, #16]
 800982c:	431a      	orrs	r2, r3
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	695b      	ldr	r3, [r3, #20]
 8009832:	431a      	orrs	r2, r3
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	69db      	ldr	r3, [r3, #28]
 8009838:	4313      	orrs	r3, r2
 800983a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	681a      	ldr	r2, [r3, #0]
 8009842:	4ba6      	ldr	r3, [pc, #664]	; (8009adc <UART_SetConfig+0x2c4>)
 8009844:	4013      	ands	r3, r2
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	6812      	ldr	r2, [r2, #0]
 800984a:	6979      	ldr	r1, [r7, #20]
 800984c:	430b      	orrs	r3, r1
 800984e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	68da      	ldr	r2, [r3, #12]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	430a      	orrs	r2, r1
 8009864:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	699b      	ldr	r3, [r3, #24]
 800986a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6a1b      	ldr	r3, [r3, #32]
 8009870:	697a      	ldr	r2, [r7, #20]
 8009872:	4313      	orrs	r3, r2
 8009874:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	689b      	ldr	r3, [r3, #8]
 800987c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	697a      	ldr	r2, [r7, #20]
 8009886:	430a      	orrs	r2, r1
 8009888:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4a94      	ldr	r2, [pc, #592]	; (8009ae0 <UART_SetConfig+0x2c8>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d120      	bne.n	80098d6 <UART_SetConfig+0xbe>
 8009894:	4b93      	ldr	r3, [pc, #588]	; (8009ae4 <UART_SetConfig+0x2cc>)
 8009896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800989a:	f003 0303 	and.w	r3, r3, #3
 800989e:	2b03      	cmp	r3, #3
 80098a0:	d816      	bhi.n	80098d0 <UART_SetConfig+0xb8>
 80098a2:	a201      	add	r2, pc, #4	; (adr r2, 80098a8 <UART_SetConfig+0x90>)
 80098a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098a8:	080098b9 	.word	0x080098b9
 80098ac:	080098c5 	.word	0x080098c5
 80098b0:	080098bf 	.word	0x080098bf
 80098b4:	080098cb 	.word	0x080098cb
 80098b8:	2301      	movs	r3, #1
 80098ba:	77fb      	strb	r3, [r7, #31]
 80098bc:	e150      	b.n	8009b60 <UART_SetConfig+0x348>
 80098be:	2302      	movs	r3, #2
 80098c0:	77fb      	strb	r3, [r7, #31]
 80098c2:	e14d      	b.n	8009b60 <UART_SetConfig+0x348>
 80098c4:	2304      	movs	r3, #4
 80098c6:	77fb      	strb	r3, [r7, #31]
 80098c8:	e14a      	b.n	8009b60 <UART_SetConfig+0x348>
 80098ca:	2308      	movs	r3, #8
 80098cc:	77fb      	strb	r3, [r7, #31]
 80098ce:	e147      	b.n	8009b60 <UART_SetConfig+0x348>
 80098d0:	2310      	movs	r3, #16
 80098d2:	77fb      	strb	r3, [r7, #31]
 80098d4:	e144      	b.n	8009b60 <UART_SetConfig+0x348>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4a83      	ldr	r2, [pc, #524]	; (8009ae8 <UART_SetConfig+0x2d0>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d132      	bne.n	8009946 <UART_SetConfig+0x12e>
 80098e0:	4b80      	ldr	r3, [pc, #512]	; (8009ae4 <UART_SetConfig+0x2cc>)
 80098e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098e6:	f003 030c 	and.w	r3, r3, #12
 80098ea:	2b0c      	cmp	r3, #12
 80098ec:	d828      	bhi.n	8009940 <UART_SetConfig+0x128>
 80098ee:	a201      	add	r2, pc, #4	; (adr r2, 80098f4 <UART_SetConfig+0xdc>)
 80098f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f4:	08009929 	.word	0x08009929
 80098f8:	08009941 	.word	0x08009941
 80098fc:	08009941 	.word	0x08009941
 8009900:	08009941 	.word	0x08009941
 8009904:	08009935 	.word	0x08009935
 8009908:	08009941 	.word	0x08009941
 800990c:	08009941 	.word	0x08009941
 8009910:	08009941 	.word	0x08009941
 8009914:	0800992f 	.word	0x0800992f
 8009918:	08009941 	.word	0x08009941
 800991c:	08009941 	.word	0x08009941
 8009920:	08009941 	.word	0x08009941
 8009924:	0800993b 	.word	0x0800993b
 8009928:	2300      	movs	r3, #0
 800992a:	77fb      	strb	r3, [r7, #31]
 800992c:	e118      	b.n	8009b60 <UART_SetConfig+0x348>
 800992e:	2302      	movs	r3, #2
 8009930:	77fb      	strb	r3, [r7, #31]
 8009932:	e115      	b.n	8009b60 <UART_SetConfig+0x348>
 8009934:	2304      	movs	r3, #4
 8009936:	77fb      	strb	r3, [r7, #31]
 8009938:	e112      	b.n	8009b60 <UART_SetConfig+0x348>
 800993a:	2308      	movs	r3, #8
 800993c:	77fb      	strb	r3, [r7, #31]
 800993e:	e10f      	b.n	8009b60 <UART_SetConfig+0x348>
 8009940:	2310      	movs	r3, #16
 8009942:	77fb      	strb	r3, [r7, #31]
 8009944:	e10c      	b.n	8009b60 <UART_SetConfig+0x348>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	4a68      	ldr	r2, [pc, #416]	; (8009aec <UART_SetConfig+0x2d4>)
 800994c:	4293      	cmp	r3, r2
 800994e:	d120      	bne.n	8009992 <UART_SetConfig+0x17a>
 8009950:	4b64      	ldr	r3, [pc, #400]	; (8009ae4 <UART_SetConfig+0x2cc>)
 8009952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009956:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800995a:	2b30      	cmp	r3, #48	; 0x30
 800995c:	d013      	beq.n	8009986 <UART_SetConfig+0x16e>
 800995e:	2b30      	cmp	r3, #48	; 0x30
 8009960:	d814      	bhi.n	800998c <UART_SetConfig+0x174>
 8009962:	2b20      	cmp	r3, #32
 8009964:	d009      	beq.n	800997a <UART_SetConfig+0x162>
 8009966:	2b20      	cmp	r3, #32
 8009968:	d810      	bhi.n	800998c <UART_SetConfig+0x174>
 800996a:	2b00      	cmp	r3, #0
 800996c:	d002      	beq.n	8009974 <UART_SetConfig+0x15c>
 800996e:	2b10      	cmp	r3, #16
 8009970:	d006      	beq.n	8009980 <UART_SetConfig+0x168>
 8009972:	e00b      	b.n	800998c <UART_SetConfig+0x174>
 8009974:	2300      	movs	r3, #0
 8009976:	77fb      	strb	r3, [r7, #31]
 8009978:	e0f2      	b.n	8009b60 <UART_SetConfig+0x348>
 800997a:	2302      	movs	r3, #2
 800997c:	77fb      	strb	r3, [r7, #31]
 800997e:	e0ef      	b.n	8009b60 <UART_SetConfig+0x348>
 8009980:	2304      	movs	r3, #4
 8009982:	77fb      	strb	r3, [r7, #31]
 8009984:	e0ec      	b.n	8009b60 <UART_SetConfig+0x348>
 8009986:	2308      	movs	r3, #8
 8009988:	77fb      	strb	r3, [r7, #31]
 800998a:	e0e9      	b.n	8009b60 <UART_SetConfig+0x348>
 800998c:	2310      	movs	r3, #16
 800998e:	77fb      	strb	r3, [r7, #31]
 8009990:	e0e6      	b.n	8009b60 <UART_SetConfig+0x348>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a56      	ldr	r2, [pc, #344]	; (8009af0 <UART_SetConfig+0x2d8>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d120      	bne.n	80099de <UART_SetConfig+0x1c6>
 800999c:	4b51      	ldr	r3, [pc, #324]	; (8009ae4 <UART_SetConfig+0x2cc>)
 800999e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80099a6:	2bc0      	cmp	r3, #192	; 0xc0
 80099a8:	d013      	beq.n	80099d2 <UART_SetConfig+0x1ba>
 80099aa:	2bc0      	cmp	r3, #192	; 0xc0
 80099ac:	d814      	bhi.n	80099d8 <UART_SetConfig+0x1c0>
 80099ae:	2b80      	cmp	r3, #128	; 0x80
 80099b0:	d009      	beq.n	80099c6 <UART_SetConfig+0x1ae>
 80099b2:	2b80      	cmp	r3, #128	; 0x80
 80099b4:	d810      	bhi.n	80099d8 <UART_SetConfig+0x1c0>
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d002      	beq.n	80099c0 <UART_SetConfig+0x1a8>
 80099ba:	2b40      	cmp	r3, #64	; 0x40
 80099bc:	d006      	beq.n	80099cc <UART_SetConfig+0x1b4>
 80099be:	e00b      	b.n	80099d8 <UART_SetConfig+0x1c0>
 80099c0:	2300      	movs	r3, #0
 80099c2:	77fb      	strb	r3, [r7, #31]
 80099c4:	e0cc      	b.n	8009b60 <UART_SetConfig+0x348>
 80099c6:	2302      	movs	r3, #2
 80099c8:	77fb      	strb	r3, [r7, #31]
 80099ca:	e0c9      	b.n	8009b60 <UART_SetConfig+0x348>
 80099cc:	2304      	movs	r3, #4
 80099ce:	77fb      	strb	r3, [r7, #31]
 80099d0:	e0c6      	b.n	8009b60 <UART_SetConfig+0x348>
 80099d2:	2308      	movs	r3, #8
 80099d4:	77fb      	strb	r3, [r7, #31]
 80099d6:	e0c3      	b.n	8009b60 <UART_SetConfig+0x348>
 80099d8:	2310      	movs	r3, #16
 80099da:	77fb      	strb	r3, [r7, #31]
 80099dc:	e0c0      	b.n	8009b60 <UART_SetConfig+0x348>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4a44      	ldr	r2, [pc, #272]	; (8009af4 <UART_SetConfig+0x2dc>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d125      	bne.n	8009a34 <UART_SetConfig+0x21c>
 80099e8:	4b3e      	ldr	r3, [pc, #248]	; (8009ae4 <UART_SetConfig+0x2cc>)
 80099ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099f6:	d017      	beq.n	8009a28 <UART_SetConfig+0x210>
 80099f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099fc:	d817      	bhi.n	8009a2e <UART_SetConfig+0x216>
 80099fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a02:	d00b      	beq.n	8009a1c <UART_SetConfig+0x204>
 8009a04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a08:	d811      	bhi.n	8009a2e <UART_SetConfig+0x216>
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d003      	beq.n	8009a16 <UART_SetConfig+0x1fe>
 8009a0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a12:	d006      	beq.n	8009a22 <UART_SetConfig+0x20a>
 8009a14:	e00b      	b.n	8009a2e <UART_SetConfig+0x216>
 8009a16:	2300      	movs	r3, #0
 8009a18:	77fb      	strb	r3, [r7, #31]
 8009a1a:	e0a1      	b.n	8009b60 <UART_SetConfig+0x348>
 8009a1c:	2302      	movs	r3, #2
 8009a1e:	77fb      	strb	r3, [r7, #31]
 8009a20:	e09e      	b.n	8009b60 <UART_SetConfig+0x348>
 8009a22:	2304      	movs	r3, #4
 8009a24:	77fb      	strb	r3, [r7, #31]
 8009a26:	e09b      	b.n	8009b60 <UART_SetConfig+0x348>
 8009a28:	2308      	movs	r3, #8
 8009a2a:	77fb      	strb	r3, [r7, #31]
 8009a2c:	e098      	b.n	8009b60 <UART_SetConfig+0x348>
 8009a2e:	2310      	movs	r3, #16
 8009a30:	77fb      	strb	r3, [r7, #31]
 8009a32:	e095      	b.n	8009b60 <UART_SetConfig+0x348>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4a2f      	ldr	r2, [pc, #188]	; (8009af8 <UART_SetConfig+0x2e0>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d125      	bne.n	8009a8a <UART_SetConfig+0x272>
 8009a3e:	4b29      	ldr	r3, [pc, #164]	; (8009ae4 <UART_SetConfig+0x2cc>)
 8009a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009a48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a4c:	d017      	beq.n	8009a7e <UART_SetConfig+0x266>
 8009a4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a52:	d817      	bhi.n	8009a84 <UART_SetConfig+0x26c>
 8009a54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a58:	d00b      	beq.n	8009a72 <UART_SetConfig+0x25a>
 8009a5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a5e:	d811      	bhi.n	8009a84 <UART_SetConfig+0x26c>
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d003      	beq.n	8009a6c <UART_SetConfig+0x254>
 8009a64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a68:	d006      	beq.n	8009a78 <UART_SetConfig+0x260>
 8009a6a:	e00b      	b.n	8009a84 <UART_SetConfig+0x26c>
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	77fb      	strb	r3, [r7, #31]
 8009a70:	e076      	b.n	8009b60 <UART_SetConfig+0x348>
 8009a72:	2302      	movs	r3, #2
 8009a74:	77fb      	strb	r3, [r7, #31]
 8009a76:	e073      	b.n	8009b60 <UART_SetConfig+0x348>
 8009a78:	2304      	movs	r3, #4
 8009a7a:	77fb      	strb	r3, [r7, #31]
 8009a7c:	e070      	b.n	8009b60 <UART_SetConfig+0x348>
 8009a7e:	2308      	movs	r3, #8
 8009a80:	77fb      	strb	r3, [r7, #31]
 8009a82:	e06d      	b.n	8009b60 <UART_SetConfig+0x348>
 8009a84:	2310      	movs	r3, #16
 8009a86:	77fb      	strb	r3, [r7, #31]
 8009a88:	e06a      	b.n	8009b60 <UART_SetConfig+0x348>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a1b      	ldr	r2, [pc, #108]	; (8009afc <UART_SetConfig+0x2e4>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d138      	bne.n	8009b06 <UART_SetConfig+0x2ee>
 8009a94:	4b13      	ldr	r3, [pc, #76]	; (8009ae4 <UART_SetConfig+0x2cc>)
 8009a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a9a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009a9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009aa2:	d017      	beq.n	8009ad4 <UART_SetConfig+0x2bc>
 8009aa4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009aa8:	d82a      	bhi.n	8009b00 <UART_SetConfig+0x2e8>
 8009aaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009aae:	d00b      	beq.n	8009ac8 <UART_SetConfig+0x2b0>
 8009ab0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ab4:	d824      	bhi.n	8009b00 <UART_SetConfig+0x2e8>
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d003      	beq.n	8009ac2 <UART_SetConfig+0x2aa>
 8009aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009abe:	d006      	beq.n	8009ace <UART_SetConfig+0x2b6>
 8009ac0:	e01e      	b.n	8009b00 <UART_SetConfig+0x2e8>
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	77fb      	strb	r3, [r7, #31]
 8009ac6:	e04b      	b.n	8009b60 <UART_SetConfig+0x348>
 8009ac8:	2302      	movs	r3, #2
 8009aca:	77fb      	strb	r3, [r7, #31]
 8009acc:	e048      	b.n	8009b60 <UART_SetConfig+0x348>
 8009ace:	2304      	movs	r3, #4
 8009ad0:	77fb      	strb	r3, [r7, #31]
 8009ad2:	e045      	b.n	8009b60 <UART_SetConfig+0x348>
 8009ad4:	2308      	movs	r3, #8
 8009ad6:	77fb      	strb	r3, [r7, #31]
 8009ad8:	e042      	b.n	8009b60 <UART_SetConfig+0x348>
 8009ada:	bf00      	nop
 8009adc:	efff69f3 	.word	0xefff69f3
 8009ae0:	40011000 	.word	0x40011000
 8009ae4:	40023800 	.word	0x40023800
 8009ae8:	40004400 	.word	0x40004400
 8009aec:	40004800 	.word	0x40004800
 8009af0:	40004c00 	.word	0x40004c00
 8009af4:	40005000 	.word	0x40005000
 8009af8:	40011400 	.word	0x40011400
 8009afc:	40007800 	.word	0x40007800
 8009b00:	2310      	movs	r3, #16
 8009b02:	77fb      	strb	r3, [r7, #31]
 8009b04:	e02c      	b.n	8009b60 <UART_SetConfig+0x348>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4a72      	ldr	r2, [pc, #456]	; (8009cd4 <UART_SetConfig+0x4bc>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d125      	bne.n	8009b5c <UART_SetConfig+0x344>
 8009b10:	4b71      	ldr	r3, [pc, #452]	; (8009cd8 <UART_SetConfig+0x4c0>)
 8009b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b16:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009b1a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009b1e:	d017      	beq.n	8009b50 <UART_SetConfig+0x338>
 8009b20:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009b24:	d817      	bhi.n	8009b56 <UART_SetConfig+0x33e>
 8009b26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b2a:	d00b      	beq.n	8009b44 <UART_SetConfig+0x32c>
 8009b2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b30:	d811      	bhi.n	8009b56 <UART_SetConfig+0x33e>
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d003      	beq.n	8009b3e <UART_SetConfig+0x326>
 8009b36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b3a:	d006      	beq.n	8009b4a <UART_SetConfig+0x332>
 8009b3c:	e00b      	b.n	8009b56 <UART_SetConfig+0x33e>
 8009b3e:	2300      	movs	r3, #0
 8009b40:	77fb      	strb	r3, [r7, #31]
 8009b42:	e00d      	b.n	8009b60 <UART_SetConfig+0x348>
 8009b44:	2302      	movs	r3, #2
 8009b46:	77fb      	strb	r3, [r7, #31]
 8009b48:	e00a      	b.n	8009b60 <UART_SetConfig+0x348>
 8009b4a:	2304      	movs	r3, #4
 8009b4c:	77fb      	strb	r3, [r7, #31]
 8009b4e:	e007      	b.n	8009b60 <UART_SetConfig+0x348>
 8009b50:	2308      	movs	r3, #8
 8009b52:	77fb      	strb	r3, [r7, #31]
 8009b54:	e004      	b.n	8009b60 <UART_SetConfig+0x348>
 8009b56:	2310      	movs	r3, #16
 8009b58:	77fb      	strb	r3, [r7, #31]
 8009b5a:	e001      	b.n	8009b60 <UART_SetConfig+0x348>
 8009b5c:	2310      	movs	r3, #16
 8009b5e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	69db      	ldr	r3, [r3, #28]
 8009b64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b68:	d15b      	bne.n	8009c22 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009b6a:	7ffb      	ldrb	r3, [r7, #31]
 8009b6c:	2b08      	cmp	r3, #8
 8009b6e:	d828      	bhi.n	8009bc2 <UART_SetConfig+0x3aa>
 8009b70:	a201      	add	r2, pc, #4	; (adr r2, 8009b78 <UART_SetConfig+0x360>)
 8009b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b76:	bf00      	nop
 8009b78:	08009b9d 	.word	0x08009b9d
 8009b7c:	08009ba5 	.word	0x08009ba5
 8009b80:	08009bad 	.word	0x08009bad
 8009b84:	08009bc3 	.word	0x08009bc3
 8009b88:	08009bb3 	.word	0x08009bb3
 8009b8c:	08009bc3 	.word	0x08009bc3
 8009b90:	08009bc3 	.word	0x08009bc3
 8009b94:	08009bc3 	.word	0x08009bc3
 8009b98:	08009bbb 	.word	0x08009bbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b9c:	f7fd fde0 	bl	8007760 <HAL_RCC_GetPCLK1Freq>
 8009ba0:	61b8      	str	r0, [r7, #24]
        break;
 8009ba2:	e013      	b.n	8009bcc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ba4:	f7fd fdf0 	bl	8007788 <HAL_RCC_GetPCLK2Freq>
 8009ba8:	61b8      	str	r0, [r7, #24]
        break;
 8009baa:	e00f      	b.n	8009bcc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009bac:	4b4b      	ldr	r3, [pc, #300]	; (8009cdc <UART_SetConfig+0x4c4>)
 8009bae:	61bb      	str	r3, [r7, #24]
        break;
 8009bb0:	e00c      	b.n	8009bcc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009bb2:	f7fd fd03 	bl	80075bc <HAL_RCC_GetSysClockFreq>
 8009bb6:	61b8      	str	r0, [r7, #24]
        break;
 8009bb8:	e008      	b.n	8009bcc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009bbe:	61bb      	str	r3, [r7, #24]
        break;
 8009bc0:	e004      	b.n	8009bcc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	77bb      	strb	r3, [r7, #30]
        break;
 8009bca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009bcc:	69bb      	ldr	r3, [r7, #24]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d074      	beq.n	8009cbc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009bd2:	69bb      	ldr	r3, [r7, #24]
 8009bd4:	005a      	lsls	r2, r3, #1
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	085b      	lsrs	r3, r3, #1
 8009bdc:	441a      	add	r2, r3
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009be6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	2b0f      	cmp	r3, #15
 8009bec:	d916      	bls.n	8009c1c <UART_SetConfig+0x404>
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bf4:	d212      	bcs.n	8009c1c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	b29b      	uxth	r3, r3
 8009bfa:	f023 030f 	bic.w	r3, r3, #15
 8009bfe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c00:	693b      	ldr	r3, [r7, #16]
 8009c02:	085b      	lsrs	r3, r3, #1
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	f003 0307 	and.w	r3, r3, #7
 8009c0a:	b29a      	uxth	r2, r3
 8009c0c:	89fb      	ldrh	r3, [r7, #14]
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	89fa      	ldrh	r2, [r7, #14]
 8009c18:	60da      	str	r2, [r3, #12]
 8009c1a:	e04f      	b.n	8009cbc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	77bb      	strb	r3, [r7, #30]
 8009c20:	e04c      	b.n	8009cbc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009c22:	7ffb      	ldrb	r3, [r7, #31]
 8009c24:	2b08      	cmp	r3, #8
 8009c26:	d828      	bhi.n	8009c7a <UART_SetConfig+0x462>
 8009c28:	a201      	add	r2, pc, #4	; (adr r2, 8009c30 <UART_SetConfig+0x418>)
 8009c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c2e:	bf00      	nop
 8009c30:	08009c55 	.word	0x08009c55
 8009c34:	08009c5d 	.word	0x08009c5d
 8009c38:	08009c65 	.word	0x08009c65
 8009c3c:	08009c7b 	.word	0x08009c7b
 8009c40:	08009c6b 	.word	0x08009c6b
 8009c44:	08009c7b 	.word	0x08009c7b
 8009c48:	08009c7b 	.word	0x08009c7b
 8009c4c:	08009c7b 	.word	0x08009c7b
 8009c50:	08009c73 	.word	0x08009c73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c54:	f7fd fd84 	bl	8007760 <HAL_RCC_GetPCLK1Freq>
 8009c58:	61b8      	str	r0, [r7, #24]
        break;
 8009c5a:	e013      	b.n	8009c84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c5c:	f7fd fd94 	bl	8007788 <HAL_RCC_GetPCLK2Freq>
 8009c60:	61b8      	str	r0, [r7, #24]
        break;
 8009c62:	e00f      	b.n	8009c84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c64:	4b1d      	ldr	r3, [pc, #116]	; (8009cdc <UART_SetConfig+0x4c4>)
 8009c66:	61bb      	str	r3, [r7, #24]
        break;
 8009c68:	e00c      	b.n	8009c84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c6a:	f7fd fca7 	bl	80075bc <HAL_RCC_GetSysClockFreq>
 8009c6e:	61b8      	str	r0, [r7, #24]
        break;
 8009c70:	e008      	b.n	8009c84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c76:	61bb      	str	r3, [r7, #24]
        break;
 8009c78:	e004      	b.n	8009c84 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009c7e:	2301      	movs	r3, #1
 8009c80:	77bb      	strb	r3, [r7, #30]
        break;
 8009c82:	bf00      	nop
    }

    if (pclk != 0U)
 8009c84:	69bb      	ldr	r3, [r7, #24]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d018      	beq.n	8009cbc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	085a      	lsrs	r2, r3, #1
 8009c90:	69bb      	ldr	r3, [r7, #24]
 8009c92:	441a      	add	r2, r3
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c9c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	2b0f      	cmp	r3, #15
 8009ca2:	d909      	bls.n	8009cb8 <UART_SetConfig+0x4a0>
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009caa:	d205      	bcs.n	8009cb8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	b29a      	uxth	r2, r3
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	60da      	str	r2, [r3, #12]
 8009cb6:	e001      	b.n	8009cbc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009cc8:	7fbb      	ldrb	r3, [r7, #30]
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3720      	adds	r7, #32
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}
 8009cd2:	bf00      	nop
 8009cd4:	40007c00 	.word	0x40007c00
 8009cd8:	40023800 	.word	0x40023800
 8009cdc:	00f42400 	.word	0x00f42400

08009ce0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b083      	sub	sp, #12
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cec:	f003 0301 	and.w	r3, r3, #1
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d00a      	beq.n	8009d0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	430a      	orrs	r2, r1
 8009d08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d0e:	f003 0302 	and.w	r3, r3, #2
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d00a      	beq.n	8009d2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	430a      	orrs	r2, r1
 8009d2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d30:	f003 0304 	and.w	r3, r3, #4
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d00a      	beq.n	8009d4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	430a      	orrs	r2, r1
 8009d4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d52:	f003 0308 	and.w	r3, r3, #8
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d00a      	beq.n	8009d70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	430a      	orrs	r2, r1
 8009d6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d74:	f003 0310 	and.w	r3, r3, #16
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d00a      	beq.n	8009d92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	689b      	ldr	r3, [r3, #8]
 8009d82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	430a      	orrs	r2, r1
 8009d90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d96:	f003 0320 	and.w	r3, r3, #32
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d00a      	beq.n	8009db4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	689b      	ldr	r3, [r3, #8]
 8009da4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	430a      	orrs	r2, r1
 8009db2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d01a      	beq.n	8009df6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	685b      	ldr	r3, [r3, #4]
 8009dc6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	430a      	orrs	r2, r1
 8009dd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009dde:	d10a      	bne.n	8009df6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	430a      	orrs	r2, r1
 8009df4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d00a      	beq.n	8009e18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	430a      	orrs	r2, r1
 8009e16:	605a      	str	r2, [r3, #4]
  }
}
 8009e18:	bf00      	nop
 8009e1a:	370c      	adds	r7, #12
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e22:	4770      	bx	lr

08009e24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b086      	sub	sp, #24
 8009e28:	af02      	add	r7, sp, #8
 8009e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009e34:	f7fb f82c 	bl	8004e90 <HAL_GetTick>
 8009e38:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f003 0308 	and.w	r3, r3, #8
 8009e44:	2b08      	cmp	r3, #8
 8009e46:	d10e      	bne.n	8009e66 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009e4c:	9300      	str	r3, [sp, #0]
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	2200      	movs	r2, #0
 8009e52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f000 f82d 	bl	8009eb6 <UART_WaitOnFlagUntilTimeout>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d001      	beq.n	8009e66 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e62:	2303      	movs	r3, #3
 8009e64:	e023      	b.n	8009eae <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f003 0304 	and.w	r3, r3, #4
 8009e70:	2b04      	cmp	r3, #4
 8009e72:	d10e      	bne.n	8009e92 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009e78:	9300      	str	r3, [sp, #0]
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 f817 	bl	8009eb6 <UART_WaitOnFlagUntilTimeout>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d001      	beq.n	8009e92 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e8e:	2303      	movs	r3, #3
 8009e90:	e00d      	b.n	8009eae <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2220      	movs	r2, #32
 8009e96:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2220      	movs	r2, #32
 8009e9c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009eac:	2300      	movs	r3, #0
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3710      	adds	r7, #16
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}

08009eb6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009eb6:	b580      	push	{r7, lr}
 8009eb8:	b09c      	sub	sp, #112	; 0x70
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	60f8      	str	r0, [r7, #12]
 8009ebe:	60b9      	str	r1, [r7, #8]
 8009ec0:	603b      	str	r3, [r7, #0]
 8009ec2:	4613      	mov	r3, r2
 8009ec4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ec6:	e0a5      	b.n	800a014 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ec8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ece:	f000 80a1 	beq.w	800a014 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ed2:	f7fa ffdd 	bl	8004e90 <HAL_GetTick>
 8009ed6:	4602      	mov	r2, r0
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	1ad3      	subs	r3, r2, r3
 8009edc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	d302      	bcc.n	8009ee8 <UART_WaitOnFlagUntilTimeout+0x32>
 8009ee2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d13e      	bne.n	8009f66 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ef0:	e853 3f00 	ldrex	r3, [r3]
 8009ef4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ef8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009efc:	667b      	str	r3, [r7, #100]	; 0x64
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	461a      	mov	r2, r3
 8009f04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009f08:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f0a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009f0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009f0e:	e841 2300 	strex	r3, r2, [r1]
 8009f12:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009f14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d1e6      	bne.n	8009ee8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	3308      	adds	r3, #8
 8009f20:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f24:	e853 3f00 	ldrex	r3, [r3]
 8009f28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f2c:	f023 0301 	bic.w	r3, r3, #1
 8009f30:	663b      	str	r3, [r7, #96]	; 0x60
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	3308      	adds	r3, #8
 8009f38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009f3a:	64ba      	str	r2, [r7, #72]	; 0x48
 8009f3c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009f40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f42:	e841 2300 	strex	r3, r2, [r1]
 8009f46:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009f48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d1e5      	bne.n	8009f1a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2220      	movs	r2, #32
 8009f52:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2220      	movs	r2, #32
 8009f58:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009f62:	2303      	movs	r3, #3
 8009f64:	e067      	b.n	800a036 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f003 0304 	and.w	r3, r3, #4
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d04f      	beq.n	800a014 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	69db      	ldr	r3, [r3, #28]
 8009f7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f82:	d147      	bne.n	800a014 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009f8c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f96:	e853 3f00 	ldrex	r3, [r3]
 8009f9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f9e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009fa2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	461a      	mov	r2, r3
 8009faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fac:	637b      	str	r3, [r7, #52]	; 0x34
 8009fae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009fb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009fb4:	e841 2300 	strex	r3, r2, [r1]
 8009fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d1e6      	bne.n	8009f8e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	3308      	adds	r3, #8
 8009fc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	e853 3f00 	ldrex	r3, [r3]
 8009fce:	613b      	str	r3, [r7, #16]
   return(result);
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	f023 0301 	bic.w	r3, r3, #1
 8009fd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	3308      	adds	r3, #8
 8009fde:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009fe0:	623a      	str	r2, [r7, #32]
 8009fe2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fe4:	69f9      	ldr	r1, [r7, #28]
 8009fe6:	6a3a      	ldr	r2, [r7, #32]
 8009fe8:	e841 2300 	strex	r3, r2, [r1]
 8009fec:	61bb      	str	r3, [r7, #24]
   return(result);
 8009fee:	69bb      	ldr	r3, [r7, #24]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d1e5      	bne.n	8009fc0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2220      	movs	r2, #32
 8009ff8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2220      	movs	r2, #32
 8009ffe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	2220      	movs	r2, #32
 800a004:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2200      	movs	r2, #0
 800a00c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a010:	2303      	movs	r3, #3
 800a012:	e010      	b.n	800a036 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	69da      	ldr	r2, [r3, #28]
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	4013      	ands	r3, r2
 800a01e:	68ba      	ldr	r2, [r7, #8]
 800a020:	429a      	cmp	r2, r3
 800a022:	bf0c      	ite	eq
 800a024:	2301      	moveq	r3, #1
 800a026:	2300      	movne	r3, #0
 800a028:	b2db      	uxtb	r3, r3
 800a02a:	461a      	mov	r2, r3
 800a02c:	79fb      	ldrb	r3, [r7, #7]
 800a02e:	429a      	cmp	r2, r3
 800a030:	f43f af4a 	beq.w	8009ec8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a034:	2300      	movs	r3, #0
}
 800a036:	4618      	mov	r0, r3
 800a038:	3770      	adds	r7, #112	; 0x70
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
	...

0800a040 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a040:	b084      	sub	sp, #16
 800a042:	b480      	push	{r7}
 800a044:	b085      	sub	sp, #20
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
 800a04a:	f107 001c 	add.w	r0, r7, #28
 800a04e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a052:	2300      	movs	r3, #0
 800a054:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a056:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a058:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a05a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800a05e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a060:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a062:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a066:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a06a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a06c:	68fa      	ldr	r2, [r7, #12]
 800a06e:	4313      	orrs	r3, r2
 800a070:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	685a      	ldr	r2, [r3, #4]
 800a076:	4b07      	ldr	r3, [pc, #28]	; (800a094 <SDMMC_Init+0x54>)
 800a078:	4013      	ands	r3, r2
 800a07a:	68fa      	ldr	r2, [r7, #12]
 800a07c:	431a      	orrs	r2, r3
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a082:	2300      	movs	r3, #0
}
 800a084:	4618      	mov	r0, r3
 800a086:	3714      	adds	r7, #20
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	b004      	add	sp, #16
 800a090:	4770      	bx	lr
 800a092:	bf00      	nop
 800a094:	ffff8100 	.word	0xffff8100

0800a098 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a098:	b480      	push	{r7}
 800a09a:	b083      	sub	sp, #12
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	370c      	adds	r7, #12
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b0:	4770      	bx	lr

0800a0b2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800a0b2:	b480      	push	{r7}
 800a0b4:	b083      	sub	sp, #12
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	6078      	str	r0, [r7, #4]
 800a0ba:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	681a      	ldr	r2, [r3, #0]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a0c6:	2300      	movs	r3, #0
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	370c      	adds	r7, #12
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d2:	4770      	bx	lr

0800a0d4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800a0d4:	b480      	push	{r7}
 800a0d6:	b083      	sub	sp, #12
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2203      	movs	r2, #3
 800a0e0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a0e2:	2300      	movs	r3, #0
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	370c      	adds	r7, #12
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr

0800a0f0 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b083      	sub	sp, #12
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f003 0303 	and.w	r3, r3, #3
}
 800a100:	4618      	mov	r0, r3
 800a102:	370c      	adds	r7, #12
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr

0800a10c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b085      	sub	sp, #20
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a116:	2300      	movs	r3, #0
 800a118:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	681a      	ldr	r2, [r3, #0]
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a12a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a130:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a136:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a138:	68fa      	ldr	r2, [r7, #12]
 800a13a:	4313      	orrs	r3, r2
 800a13c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	68da      	ldr	r2, [r3, #12]
 800a142:	4b06      	ldr	r3, [pc, #24]	; (800a15c <SDMMC_SendCommand+0x50>)
 800a144:	4013      	ands	r3, r2
 800a146:	68fa      	ldr	r2, [r7, #12]
 800a148:	431a      	orrs	r2, r3
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a14e:	2300      	movs	r3, #0
}
 800a150:	4618      	mov	r0, r3
 800a152:	3714      	adds	r7, #20
 800a154:	46bd      	mov	sp, r7
 800a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15a:	4770      	bx	lr
 800a15c:	fffff000 	.word	0xfffff000

0800a160 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a160:	b480      	push	{r7}
 800a162:	b083      	sub	sp, #12
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	691b      	ldr	r3, [r3, #16]
 800a16c:	b2db      	uxtb	r3, r3
}
 800a16e:	4618      	mov	r0, r3
 800a170:	370c      	adds	r7, #12
 800a172:	46bd      	mov	sp, r7
 800a174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a178:	4770      	bx	lr

0800a17a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a17a:	b480      	push	{r7}
 800a17c:	b085      	sub	sp, #20
 800a17e:	af00      	add	r7, sp, #0
 800a180:	6078      	str	r0, [r7, #4]
 800a182:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	3314      	adds	r3, #20
 800a188:	461a      	mov	r2, r3
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	4413      	add	r3, r2
 800a18e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
}  
 800a194:	4618      	mov	r0, r3
 800a196:	3714      	adds	r7, #20
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr

0800a1a0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b085      	sub	sp, #20
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
 800a1a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	681a      	ldr	r2, [r3, #0]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	685a      	ldr	r2, [r3, #4]
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a1c6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a1cc:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a1d2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a1d4:	68fa      	ldr	r2, [r7, #12]
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1de:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	431a      	orrs	r2, r3
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a1ea:	2300      	movs	r3, #0

}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3714      	adds	r7, #20
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr

0800a1f8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b088      	sub	sp, #32
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a206:	2310      	movs	r3, #16
 800a208:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a20a:	2340      	movs	r3, #64	; 0x40
 800a20c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a20e:	2300      	movs	r3, #0
 800a210:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a212:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a216:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a218:	f107 0308 	add.w	r3, r7, #8
 800a21c:	4619      	mov	r1, r3
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f7ff ff74 	bl	800a10c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a224:	f241 3288 	movw	r2, #5000	; 0x1388
 800a228:	2110      	movs	r1, #16
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f000 fa1a 	bl	800a664 <SDMMC_GetCmdResp1>
 800a230:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a232:	69fb      	ldr	r3, [r7, #28]
}
 800a234:	4618      	mov	r0, r3
 800a236:	3720      	adds	r7, #32
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b088      	sub	sp, #32
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
 800a244:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a24a:	2311      	movs	r3, #17
 800a24c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a24e:	2340      	movs	r3, #64	; 0x40
 800a250:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a252:	2300      	movs	r3, #0
 800a254:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a256:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a25a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a25c:	f107 0308 	add.w	r3, r7, #8
 800a260:	4619      	mov	r1, r3
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f7ff ff52 	bl	800a10c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a268:	f241 3288 	movw	r2, #5000	; 0x1388
 800a26c:	2111      	movs	r1, #17
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f000 f9f8 	bl	800a664 <SDMMC_GetCmdResp1>
 800a274:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a276:	69fb      	ldr	r3, [r7, #28]
}
 800a278:	4618      	mov	r0, r3
 800a27a:	3720      	adds	r7, #32
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}

0800a280 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b088      	sub	sp, #32
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a28e:	2312      	movs	r3, #18
 800a290:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a292:	2340      	movs	r3, #64	; 0x40
 800a294:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a296:	2300      	movs	r3, #0
 800a298:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a29a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a29e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a2a0:	f107 0308 	add.w	r3, r7, #8
 800a2a4:	4619      	mov	r1, r3
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f7ff ff30 	bl	800a10c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a2ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2b0:	2112      	movs	r1, #18
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f000 f9d6 	bl	800a664 <SDMMC_GetCmdResp1>
 800a2b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2ba:	69fb      	ldr	r3, [r7, #28]
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	3720      	adds	r7, #32
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}

0800a2c4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b088      	sub	sp, #32
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
 800a2cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a2d2:	2318      	movs	r3, #24
 800a2d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a2d6:	2340      	movs	r3, #64	; 0x40
 800a2d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a2de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a2e4:	f107 0308 	add.w	r3, r7, #8
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f7ff ff0e 	bl	800a10c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a2f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2f4:	2118      	movs	r1, #24
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 f9b4 	bl	800a664 <SDMMC_GetCmdResp1>
 800a2fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2fe:	69fb      	ldr	r3, [r7, #28]
}
 800a300:	4618      	mov	r0, r3
 800a302:	3720      	adds	r7, #32
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}

0800a308 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b088      	sub	sp, #32
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a316:	2319      	movs	r3, #25
 800a318:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a31a:	2340      	movs	r3, #64	; 0x40
 800a31c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a31e:	2300      	movs	r3, #0
 800a320:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a322:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a326:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a328:	f107 0308 	add.w	r3, r7, #8
 800a32c:	4619      	mov	r1, r3
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f7ff feec 	bl	800a10c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a334:	f241 3288 	movw	r2, #5000	; 0x1388
 800a338:	2119      	movs	r1, #25
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f000 f992 	bl	800a664 <SDMMC_GetCmdResp1>
 800a340:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a342:	69fb      	ldr	r3, [r7, #28]
}
 800a344:	4618      	mov	r0, r3
 800a346:	3720      	adds	r7, #32
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}

0800a34c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b088      	sub	sp, #32
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a354:	2300      	movs	r3, #0
 800a356:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a358:	230c      	movs	r3, #12
 800a35a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a35c:	2340      	movs	r3, #64	; 0x40
 800a35e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a360:	2300      	movs	r3, #0
 800a362:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a364:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a368:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a36a:	f107 0308 	add.w	r3, r7, #8
 800a36e:	4619      	mov	r1, r3
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f7ff fecb 	bl	800a10c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800a376:	4a05      	ldr	r2, [pc, #20]	; (800a38c <SDMMC_CmdStopTransfer+0x40>)
 800a378:	210c      	movs	r1, #12
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f000 f972 	bl	800a664 <SDMMC_GetCmdResp1>
 800a380:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a382:	69fb      	ldr	r3, [r7, #28]
}
 800a384:	4618      	mov	r0, r3
 800a386:	3720      	adds	r7, #32
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}
 800a38c:	05f5e100 	.word	0x05f5e100

0800a390 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b08a      	sub	sp, #40	; 0x28
 800a394:	af00      	add	r7, sp, #0
 800a396:	60f8      	str	r0, [r7, #12]
 800a398:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a3a0:	2307      	movs	r3, #7
 800a3a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a3a4:	2340      	movs	r3, #64	; 0x40
 800a3a6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a3ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3b0:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a3b2:	f107 0310 	add.w	r3, r7, #16
 800a3b6:	4619      	mov	r1, r3
 800a3b8:	68f8      	ldr	r0, [r7, #12]
 800a3ba:	f7ff fea7 	bl	800a10c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a3be:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3c2:	2107      	movs	r1, #7
 800a3c4:	68f8      	ldr	r0, [r7, #12]
 800a3c6:	f000 f94d 	bl	800a664 <SDMMC_GetCmdResp1>
 800a3ca:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	3728      	adds	r7, #40	; 0x28
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}

0800a3d6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a3d6:	b580      	push	{r7, lr}
 800a3d8:	b088      	sub	sp, #32
 800a3da:	af00      	add	r7, sp, #0
 800a3dc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a3ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a3f4:	f107 0308 	add.w	r3, r7, #8
 800a3f8:	4619      	mov	r1, r3
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f7ff fe86 	bl	800a10c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f000 fb67 	bl	800aad4 <SDMMC_GetCmdError>
 800a406:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a408:	69fb      	ldr	r3, [r7, #28]
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3720      	adds	r7, #32
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}

0800a412 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800a412:	b580      	push	{r7, lr}
 800a414:	b088      	sub	sp, #32
 800a416:	af00      	add	r7, sp, #0
 800a418:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a41a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a41e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a420:	2308      	movs	r3, #8
 800a422:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a424:	2340      	movs	r3, #64	; 0x40
 800a426:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a428:	2300      	movs	r3, #0
 800a42a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a42c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a430:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a432:	f107 0308 	add.w	r3, r7, #8
 800a436:	4619      	mov	r1, r3
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f7ff fe67 	bl	800a10c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f000 fafa 	bl	800aa38 <SDMMC_GetCmdResp7>
 800a444:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a446:	69fb      	ldr	r3, [r7, #28]
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3720      	adds	r7, #32
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}

0800a450 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b088      	sub	sp, #32
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a45e:	2337      	movs	r3, #55	; 0x37
 800a460:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a462:	2340      	movs	r3, #64	; 0x40
 800a464:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a466:	2300      	movs	r3, #0
 800a468:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a46a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a46e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a470:	f107 0308 	add.w	r3, r7, #8
 800a474:	4619      	mov	r1, r3
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f7ff fe48 	bl	800a10c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a47c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a480:	2137      	movs	r1, #55	; 0x37
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f000 f8ee 	bl	800a664 <SDMMC_GetCmdResp1>
 800a488:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a48a:	69fb      	ldr	r3, [r7, #28]
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	3720      	adds	r7, #32
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}

0800a494 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b088      	sub	sp, #32
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
 800a49c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a49e:	683a      	ldr	r2, [r7, #0]
 800a4a0:	4b0d      	ldr	r3, [pc, #52]	; (800a4d8 <SDMMC_CmdAppOperCommand+0x44>)
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a4a6:	2329      	movs	r3, #41	; 0x29
 800a4a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a4aa:	2340      	movs	r3, #64	; 0x40
 800a4ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a4b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a4b8:	f107 0308 	add.w	r3, r7, #8
 800a4bc:	4619      	mov	r1, r3
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f7ff fe24 	bl	800a10c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f000 fa03 	bl	800a8d0 <SDMMC_GetCmdResp3>
 800a4ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4cc:	69fb      	ldr	r3, [r7, #28]
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3720      	adds	r7, #32
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}
 800a4d6:	bf00      	nop
 800a4d8:	80100000 	.word	0x80100000

0800a4dc <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b088      	sub	sp, #32
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a4ea:	2306      	movs	r3, #6
 800a4ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a4ee:	2340      	movs	r3, #64	; 0x40
 800a4f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a4f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a4fc:	f107 0308 	add.w	r3, r7, #8
 800a500:	4619      	mov	r1, r3
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f7ff fe02 	bl	800a10c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800a508:	f241 3288 	movw	r2, #5000	; 0x1388
 800a50c:	2106      	movs	r1, #6
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f000 f8a8 	bl	800a664 <SDMMC_GetCmdResp1>
 800a514:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a516:	69fb      	ldr	r3, [r7, #28]
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3720      	adds	r7, #32
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}

0800a520 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b088      	sub	sp, #32
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a528:	2300      	movs	r3, #0
 800a52a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a52c:	2333      	movs	r3, #51	; 0x33
 800a52e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a530:	2340      	movs	r3, #64	; 0x40
 800a532:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a534:	2300      	movs	r3, #0
 800a536:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a538:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a53c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a53e:	f107 0308 	add.w	r3, r7, #8
 800a542:	4619      	mov	r1, r3
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f7ff fde1 	bl	800a10c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800a54a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a54e:	2133      	movs	r1, #51	; 0x33
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f000 f887 	bl	800a664 <SDMMC_GetCmdResp1>
 800a556:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a558:	69fb      	ldr	r3, [r7, #28]
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3720      	adds	r7, #32
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}

0800a562 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a562:	b580      	push	{r7, lr}
 800a564:	b088      	sub	sp, #32
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a56a:	2300      	movs	r3, #0
 800a56c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a56e:	2302      	movs	r3, #2
 800a570:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a572:	23c0      	movs	r3, #192	; 0xc0
 800a574:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a576:	2300      	movs	r3, #0
 800a578:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a57a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a57e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a580:	f107 0308 	add.w	r3, r7, #8
 800a584:	4619      	mov	r1, r3
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f7ff fdc0 	bl	800a10c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f000 f957 	bl	800a840 <SDMMC_GetCmdResp2>
 800a592:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a594:	69fb      	ldr	r3, [r7, #28]
}
 800a596:	4618      	mov	r0, r3
 800a598:	3720      	adds	r7, #32
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}

0800a59e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a59e:	b580      	push	{r7, lr}
 800a5a0:	b088      	sub	sp, #32
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	6078      	str	r0, [r7, #4]
 800a5a6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a5ac:	2309      	movs	r3, #9
 800a5ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a5b0:	23c0      	movs	r3, #192	; 0xc0
 800a5b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a5b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a5be:	f107 0308 	add.w	r3, r7, #8
 800a5c2:	4619      	mov	r1, r3
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f7ff fda1 	bl	800a10c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f000 f938 	bl	800a840 <SDMMC_GetCmdResp2>
 800a5d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a5d2:	69fb      	ldr	r3, [r7, #28]
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3720      	adds	r7, #32
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b088      	sub	sp, #32
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a5ea:	2303      	movs	r3, #3
 800a5ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a5ee:	2340      	movs	r3, #64	; 0x40
 800a5f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a5f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a5fc:	f107 0308 	add.w	r3, r7, #8
 800a600:	4619      	mov	r1, r3
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f7ff fd82 	bl	800a10c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a608:	683a      	ldr	r2, [r7, #0]
 800a60a:	2103      	movs	r1, #3
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 f99d 	bl	800a94c <SDMMC_GetCmdResp6>
 800a612:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a614:	69fb      	ldr	r3, [r7, #28]
}
 800a616:	4618      	mov	r0, r3
 800a618:	3720      	adds	r7, #32
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}

0800a61e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a61e:	b580      	push	{r7, lr}
 800a620:	b088      	sub	sp, #32
 800a622:	af00      	add	r7, sp, #0
 800a624:	6078      	str	r0, [r7, #4]
 800a626:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a62c:	230d      	movs	r3, #13
 800a62e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a630:	2340      	movs	r3, #64	; 0x40
 800a632:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a634:	2300      	movs	r3, #0
 800a636:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a638:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a63c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a63e:	f107 0308 	add.w	r3, r7, #8
 800a642:	4619      	mov	r1, r3
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f7ff fd61 	bl	800a10c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800a64a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a64e:	210d      	movs	r1, #13
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f000 f807 	bl	800a664 <SDMMC_GetCmdResp1>
 800a656:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a658:	69fb      	ldr	r3, [r7, #28]
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3720      	adds	r7, #32
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}
	...

0800a664 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b088      	sub	sp, #32
 800a668:	af00      	add	r7, sp, #0
 800a66a:	60f8      	str	r0, [r7, #12]
 800a66c:	460b      	mov	r3, r1
 800a66e:	607a      	str	r2, [r7, #4]
 800a670:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a672:	4b70      	ldr	r3, [pc, #448]	; (800a834 <SDMMC_GetCmdResp1+0x1d0>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	4a70      	ldr	r2, [pc, #448]	; (800a838 <SDMMC_GetCmdResp1+0x1d4>)
 800a678:	fba2 2303 	umull	r2, r3, r2, r3
 800a67c:	0a5a      	lsrs	r2, r3, #9
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	fb02 f303 	mul.w	r3, r2, r3
 800a684:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a686:	69fb      	ldr	r3, [r7, #28]
 800a688:	1e5a      	subs	r2, r3, #1
 800a68a:	61fa      	str	r2, [r7, #28]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d102      	bne.n	800a696 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a690:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a694:	e0c9      	b.n	800a82a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a69a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a69c:	69bb      	ldr	r3, [r7, #24]
 800a69e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d0ef      	beq.n	800a686 <SDMMC_GetCmdResp1+0x22>
 800a6a6:	69bb      	ldr	r3, [r7, #24]
 800a6a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d1ea      	bne.n	800a686 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6b4:	f003 0304 	and.w	r3, r3, #4
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d004      	beq.n	800a6c6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	2204      	movs	r2, #4
 800a6c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a6c2:	2304      	movs	r3, #4
 800a6c4:	e0b1      	b.n	800a82a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6ca:	f003 0301 	and.w	r3, r3, #1
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d004      	beq.n	800a6dc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	2201      	movs	r2, #1
 800a6d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a6d8:	2301      	movs	r3, #1
 800a6da:	e0a6      	b.n	800a82a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	22c5      	movs	r2, #197	; 0xc5
 800a6e0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a6e2:	68f8      	ldr	r0, [r7, #12]
 800a6e4:	f7ff fd3c 	bl	800a160 <SDMMC_GetCommandResponse>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	461a      	mov	r2, r3
 800a6ec:	7afb      	ldrb	r3, [r7, #11]
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d001      	beq.n	800a6f6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	e099      	b.n	800a82a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a6f6:	2100      	movs	r1, #0
 800a6f8:	68f8      	ldr	r0, [r7, #12]
 800a6fa:	f7ff fd3e 	bl	800a17a <SDMMC_GetResponse>
 800a6fe:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a700:	697a      	ldr	r2, [r7, #20]
 800a702:	4b4e      	ldr	r3, [pc, #312]	; (800a83c <SDMMC_GetCmdResp1+0x1d8>)
 800a704:	4013      	ands	r3, r2
 800a706:	2b00      	cmp	r3, #0
 800a708:	d101      	bne.n	800a70e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a70a:	2300      	movs	r3, #0
 800a70c:	e08d      	b.n	800a82a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	2b00      	cmp	r3, #0
 800a712:	da02      	bge.n	800a71a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a714:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a718:	e087      	b.n	800a82a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a720:	2b00      	cmp	r3, #0
 800a722:	d001      	beq.n	800a728 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a724:	2340      	movs	r3, #64	; 0x40
 800a726:	e080      	b.n	800a82a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d001      	beq.n	800a736 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a732:	2380      	movs	r3, #128	; 0x80
 800a734:	e079      	b.n	800a82a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d002      	beq.n	800a746 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a740:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a744:	e071      	b.n	800a82a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d002      	beq.n	800a756 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a750:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a754:	e069      	b.n	800a82a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d002      	beq.n	800a766 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a760:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a764:	e061      	b.n	800a82a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d002      	beq.n	800a776 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a770:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a774:	e059      	b.n	800a82a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d002      	beq.n	800a786 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a784:	e051      	b.n	800a82a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d002      	beq.n	800a796 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a790:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a794:	e049      	b.n	800a82a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d002      	beq.n	800a7a6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a7a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a7a4:	e041      	b.n	800a82a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d002      	beq.n	800a7b6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a7b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7b4:	e039      	b.n	800a82a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d002      	beq.n	800a7c6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a7c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a7c4:	e031      	b.n	800a82a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d002      	beq.n	800a7d6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a7d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a7d4:	e029      	b.n	800a82a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d002      	beq.n	800a7e6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a7e0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a7e4:	e021      	b.n	800a82a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d002      	beq.n	800a7f6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a7f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a7f4:	e019      	b.n	800a82a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d002      	beq.n	800a806 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a800:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a804:	e011      	b.n	800a82a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d002      	beq.n	800a816 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a810:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a814:	e009      	b.n	800a82a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	f003 0308 	and.w	r3, r3, #8
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d002      	beq.n	800a826 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a820:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a824:	e001      	b.n	800a82a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a826:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3720      	adds	r7, #32
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
 800a832:	bf00      	nop
 800a834:	20000000 	.word	0x20000000
 800a838:	10624dd3 	.word	0x10624dd3
 800a83c:	fdffe008 	.word	0xfdffe008

0800a840 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a840:	b480      	push	{r7}
 800a842:	b085      	sub	sp, #20
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a848:	4b1f      	ldr	r3, [pc, #124]	; (800a8c8 <SDMMC_GetCmdResp2+0x88>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	4a1f      	ldr	r2, [pc, #124]	; (800a8cc <SDMMC_GetCmdResp2+0x8c>)
 800a84e:	fba2 2303 	umull	r2, r3, r2, r3
 800a852:	0a5b      	lsrs	r3, r3, #9
 800a854:	f241 3288 	movw	r2, #5000	; 0x1388
 800a858:	fb02 f303 	mul.w	r3, r2, r3
 800a85c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	1e5a      	subs	r2, r3, #1
 800a862:	60fa      	str	r2, [r7, #12]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d102      	bne.n	800a86e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a868:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a86c:	e026      	b.n	800a8bc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a872:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d0ef      	beq.n	800a85e <SDMMC_GetCmdResp2+0x1e>
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a884:	2b00      	cmp	r3, #0
 800a886:	d1ea      	bne.n	800a85e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a88c:	f003 0304 	and.w	r3, r3, #4
 800a890:	2b00      	cmp	r3, #0
 800a892:	d004      	beq.n	800a89e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2204      	movs	r2, #4
 800a898:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a89a:	2304      	movs	r3, #4
 800a89c:	e00e      	b.n	800a8bc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8a2:	f003 0301 	and.w	r3, r3, #1
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d004      	beq.n	800a8b4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	e003      	b.n	800a8bc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	22c5      	movs	r2, #197	; 0xc5
 800a8b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a8ba:	2300      	movs	r3, #0
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3714      	adds	r7, #20
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c6:	4770      	bx	lr
 800a8c8:	20000000 	.word	0x20000000
 800a8cc:	10624dd3 	.word	0x10624dd3

0800a8d0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b085      	sub	sp, #20
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a8d8:	4b1a      	ldr	r3, [pc, #104]	; (800a944 <SDMMC_GetCmdResp3+0x74>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	4a1a      	ldr	r2, [pc, #104]	; (800a948 <SDMMC_GetCmdResp3+0x78>)
 800a8de:	fba2 2303 	umull	r2, r3, r2, r3
 800a8e2:	0a5b      	lsrs	r3, r3, #9
 800a8e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8e8:	fb02 f303 	mul.w	r3, r2, r3
 800a8ec:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	1e5a      	subs	r2, r3, #1
 800a8f2:	60fa      	str	r2, [r7, #12]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d102      	bne.n	800a8fe <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a8f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a8fc:	e01b      	b.n	800a936 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a902:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d0ef      	beq.n	800a8ee <SDMMC_GetCmdResp3+0x1e>
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a914:	2b00      	cmp	r3, #0
 800a916:	d1ea      	bne.n	800a8ee <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a91c:	f003 0304 	and.w	r3, r3, #4
 800a920:	2b00      	cmp	r3, #0
 800a922:	d004      	beq.n	800a92e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2204      	movs	r2, #4
 800a928:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a92a:	2304      	movs	r3, #4
 800a92c:	e003      	b.n	800a936 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	22c5      	movs	r2, #197	; 0xc5
 800a932:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a934:	2300      	movs	r3, #0
}
 800a936:	4618      	mov	r0, r3
 800a938:	3714      	adds	r7, #20
 800a93a:	46bd      	mov	sp, r7
 800a93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a940:	4770      	bx	lr
 800a942:	bf00      	nop
 800a944:	20000000 	.word	0x20000000
 800a948:	10624dd3 	.word	0x10624dd3

0800a94c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b088      	sub	sp, #32
 800a950:	af00      	add	r7, sp, #0
 800a952:	60f8      	str	r0, [r7, #12]
 800a954:	460b      	mov	r3, r1
 800a956:	607a      	str	r2, [r7, #4]
 800a958:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a95a:	4b35      	ldr	r3, [pc, #212]	; (800aa30 <SDMMC_GetCmdResp6+0xe4>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	4a35      	ldr	r2, [pc, #212]	; (800aa34 <SDMMC_GetCmdResp6+0xe8>)
 800a960:	fba2 2303 	umull	r2, r3, r2, r3
 800a964:	0a5b      	lsrs	r3, r3, #9
 800a966:	f241 3288 	movw	r2, #5000	; 0x1388
 800a96a:	fb02 f303 	mul.w	r3, r2, r3
 800a96e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a970:	69fb      	ldr	r3, [r7, #28]
 800a972:	1e5a      	subs	r2, r3, #1
 800a974:	61fa      	str	r2, [r7, #28]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d102      	bne.n	800a980 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a97a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a97e:	e052      	b.n	800aa26 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a984:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a986:	69bb      	ldr	r3, [r7, #24]
 800a988:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d0ef      	beq.n	800a970 <SDMMC_GetCmdResp6+0x24>
 800a990:	69bb      	ldr	r3, [r7, #24]
 800a992:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a996:	2b00      	cmp	r3, #0
 800a998:	d1ea      	bne.n	800a970 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a99e:	f003 0304 	and.w	r3, r3, #4
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d004      	beq.n	800a9b0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	2204      	movs	r2, #4
 800a9aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a9ac:	2304      	movs	r3, #4
 800a9ae:	e03a      	b.n	800aa26 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9b4:	f003 0301 	and.w	r3, r3, #1
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d004      	beq.n	800a9c6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	2201      	movs	r2, #1
 800a9c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	e02f      	b.n	800aa26 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a9c6:	68f8      	ldr	r0, [r7, #12]
 800a9c8:	f7ff fbca 	bl	800a160 <SDMMC_GetCommandResponse>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	461a      	mov	r2, r3
 800a9d0:	7afb      	ldrb	r3, [r7, #11]
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d001      	beq.n	800a9da <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	e025      	b.n	800aa26 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	22c5      	movs	r2, #197	; 0xc5
 800a9de:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a9e0:	2100      	movs	r1, #0
 800a9e2:	68f8      	ldr	r0, [r7, #12]
 800a9e4:	f7ff fbc9 	bl	800a17a <SDMMC_GetResponse>
 800a9e8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d106      	bne.n	800aa02 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	0c1b      	lsrs	r3, r3, #16
 800a9f8:	b29a      	uxth	r2, r3
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	e011      	b.n	800aa26 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d002      	beq.n	800aa12 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800aa0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aa10:	e009      	b.n	800aa26 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d002      	beq.n	800aa22 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800aa1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa20:	e001      	b.n	800aa26 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800aa22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3720      	adds	r7, #32
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}
 800aa2e:	bf00      	nop
 800aa30:	20000000 	.word	0x20000000
 800aa34:	10624dd3 	.word	0x10624dd3

0800aa38 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b085      	sub	sp, #20
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aa40:	4b22      	ldr	r3, [pc, #136]	; (800aacc <SDMMC_GetCmdResp7+0x94>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	4a22      	ldr	r2, [pc, #136]	; (800aad0 <SDMMC_GetCmdResp7+0x98>)
 800aa46:	fba2 2303 	umull	r2, r3, r2, r3
 800aa4a:	0a5b      	lsrs	r3, r3, #9
 800aa4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa50:	fb02 f303 	mul.w	r3, r2, r3
 800aa54:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	1e5a      	subs	r2, r3, #1
 800aa5a:	60fa      	str	r2, [r7, #12]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d102      	bne.n	800aa66 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aa60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aa64:	e02c      	b.n	800aac0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa6a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d0ef      	beq.n	800aa56 <SDMMC_GetCmdResp7+0x1e>
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d1ea      	bne.n	800aa56 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa84:	f003 0304 	and.w	r3, r3, #4
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d004      	beq.n	800aa96 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2204      	movs	r2, #4
 800aa90:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aa92:	2304      	movs	r3, #4
 800aa94:	e014      	b.n	800aac0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa9a:	f003 0301 	and.w	r3, r3, #1
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d004      	beq.n	800aaac <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2201      	movs	r2, #1
 800aaa6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	e009      	b.n	800aac0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d002      	beq.n	800aabe <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2240      	movs	r2, #64	; 0x40
 800aabc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800aabe:	2300      	movs	r3, #0
  
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3714      	adds	r7, #20
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	4770      	bx	lr
 800aacc:	20000000 	.word	0x20000000
 800aad0:	10624dd3 	.word	0x10624dd3

0800aad4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b085      	sub	sp, #20
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aadc:	4b11      	ldr	r3, [pc, #68]	; (800ab24 <SDMMC_GetCmdError+0x50>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4a11      	ldr	r2, [pc, #68]	; (800ab28 <SDMMC_GetCmdError+0x54>)
 800aae2:	fba2 2303 	umull	r2, r3, r2, r3
 800aae6:	0a5b      	lsrs	r3, r3, #9
 800aae8:	f241 3288 	movw	r2, #5000	; 0x1388
 800aaec:	fb02 f303 	mul.w	r3, r2, r3
 800aaf0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	1e5a      	subs	r2, r3, #1
 800aaf6:	60fa      	str	r2, [r7, #12]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d102      	bne.n	800ab02 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aafc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ab00:	e009      	b.n	800ab16 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d0f1      	beq.n	800aaf2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	22c5      	movs	r2, #197	; 0xc5
 800ab12:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800ab14:	2300      	movs	r3, #0
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3714      	adds	r7, #20
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr
 800ab22:	bf00      	nop
 800ab24:	20000000 	.word	0x20000000
 800ab28:	10624dd3 	.word	0x10624dd3

0800ab2c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ab30:	4904      	ldr	r1, [pc, #16]	; (800ab44 <MX_FATFS_Init+0x18>)
 800ab32:	4805      	ldr	r0, [pc, #20]	; (800ab48 <MX_FATFS_Init+0x1c>)
 800ab34:	f002 fd04 	bl	800d540 <FATFS_LinkDriver>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	461a      	mov	r2, r3
 800ab3c:	4b03      	ldr	r3, [pc, #12]	; (800ab4c <MX_FATFS_Init+0x20>)
 800ab3e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ab40:	bf00      	nop
 800ab42:	bd80      	pop	{r7, pc}
 800ab44:	20004048 	.word	0x20004048
 800ab48:	08012634 	.word	0x08012634
 800ab4c:	20004044 	.word	0x20004044

0800ab50 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ab50:	b480      	push	{r7}
 800ab52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ab54:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr

0800ab60 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b082      	sub	sp, #8
 800ab64:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ab66:	2300      	movs	r3, #0
 800ab68:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ab6a:	f000 f896 	bl	800ac9a <BSP_SD_IsDetected>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	2b01      	cmp	r3, #1
 800ab72:	d001      	beq.n	800ab78 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800ab74:	2302      	movs	r3, #2
 800ab76:	e012      	b.n	800ab9e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800ab78:	480b      	ldr	r0, [pc, #44]	; (800aba8 <BSP_SD_Init+0x48>)
 800ab7a:	f7fd fa41 	bl	8008000 <HAL_SD_Init>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ab82:	79fb      	ldrb	r3, [r7, #7]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d109      	bne.n	800ab9c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800ab88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ab8c:	4806      	ldr	r0, [pc, #24]	; (800aba8 <BSP_SD_Init+0x48>)
 800ab8e:	f7fe f807 	bl	8008ba0 <HAL_SD_ConfigWideBusOperation>
 800ab92:	4603      	mov	r3, r0
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d001      	beq.n	800ab9c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ab98:	2301      	movs	r3, #1
 800ab9a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ab9c:	79fb      	ldrb	r3, [r7, #7]
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3708      	adds	r7, #8
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
 800aba6:	bf00      	nop
 800aba8:	20003e74 	.word	0x20003e74

0800abac <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b086      	sub	sp, #24
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	60f8      	str	r0, [r7, #12]
 800abb4:	60b9      	str	r1, [r7, #8]
 800abb6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800abb8:	2300      	movs	r3, #0
 800abba:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	68ba      	ldr	r2, [r7, #8]
 800abc0:	68f9      	ldr	r1, [r7, #12]
 800abc2:	4806      	ldr	r0, [pc, #24]	; (800abdc <BSP_SD_ReadBlocks_DMA+0x30>)
 800abc4:	f7fd fad4 	bl	8008170 <HAL_SD_ReadBlocks_DMA>
 800abc8:	4603      	mov	r3, r0
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d001      	beq.n	800abd2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800abce:	2301      	movs	r3, #1
 800abd0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800abd2:	7dfb      	ldrb	r3, [r7, #23]
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3718      	adds	r7, #24
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}
 800abdc:	20003e74 	.word	0x20003e74

0800abe0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b086      	sub	sp, #24
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	60f8      	str	r0, [r7, #12]
 800abe8:	60b9      	str	r1, [r7, #8]
 800abea:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800abec:	2300      	movs	r3, #0
 800abee:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	68ba      	ldr	r2, [r7, #8]
 800abf4:	68f9      	ldr	r1, [r7, #12]
 800abf6:	4806      	ldr	r0, [pc, #24]	; (800ac10 <BSP_SD_WriteBlocks_DMA+0x30>)
 800abf8:	f7fd fb9c 	bl	8008334 <HAL_SD_WriteBlocks_DMA>
 800abfc:	4603      	mov	r3, r0
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d001      	beq.n	800ac06 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ac02:	2301      	movs	r3, #1
 800ac04:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ac06:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	3718      	adds	r7, #24
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}
 800ac10:	20003e74 	.word	0x20003e74

0800ac14 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ac18:	4805      	ldr	r0, [pc, #20]	; (800ac30 <BSP_SD_GetCardState+0x1c>)
 800ac1a:	f7fe f85b 	bl	8008cd4 <HAL_SD_GetCardState>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	2b04      	cmp	r3, #4
 800ac22:	bf14      	ite	ne
 800ac24:	2301      	movne	r3, #1
 800ac26:	2300      	moveq	r3, #0
 800ac28:	b2db      	uxtb	r3, r3
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	bd80      	pop	{r7, pc}
 800ac2e:	bf00      	nop
 800ac30:	20003e74 	.word	0x20003e74

0800ac34 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b082      	sub	sp, #8
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800ac3c:	6879      	ldr	r1, [r7, #4]
 800ac3e:	4803      	ldr	r0, [pc, #12]	; (800ac4c <BSP_SD_GetCardInfo+0x18>)
 800ac40:	f7fd ff82 	bl	8008b48 <HAL_SD_GetCardInfo>
}
 800ac44:	bf00      	nop
 800ac46:	3708      	adds	r7, #8
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}
 800ac4c:	20003e74 	.word	0x20003e74

0800ac50 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b082      	sub	sp, #8
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800ac58:	f000 f818 	bl	800ac8c <BSP_SD_AbortCallback>
}
 800ac5c:	bf00      	nop
 800ac5e:	3708      	adds	r7, #8
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}

0800ac64 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b082      	sub	sp, #8
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800ac6c:	f000 f98c 	bl	800af88 <BSP_SD_WriteCpltCallback>
}
 800ac70:	bf00      	nop
 800ac72:	3708      	adds	r7, #8
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}

0800ac78 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b082      	sub	sp, #8
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800ac80:	f000 f98e 	bl	800afa0 <BSP_SD_ReadCpltCallback>
}
 800ac84:	bf00      	nop
 800ac86:	3708      	adds	r7, #8
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	af00      	add	r7, sp, #0

}
 800ac90:	bf00      	nop
 800ac92:	46bd      	mov	sp, r7
 800ac94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac98:	4770      	bx	lr

0800ac9a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ac9a:	b480      	push	{r7}
 800ac9c:	b083      	sub	sp, #12
 800ac9e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800aca0:	2301      	movs	r3, #1
 800aca2:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800aca4:	79fb      	ldrb	r3, [r7, #7]
 800aca6:	b2db      	uxtb	r3, r3
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	370c      	adds	r7, #12
 800acac:	46bd      	mov	sp, r7
 800acae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb2:	4770      	bx	lr

0800acb4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b084      	sub	sp, #16
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800acbc:	f7fa f8e8 	bl	8004e90 <HAL_GetTick>
 800acc0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800acc2:	e006      	b.n	800acd2 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800acc4:	f7ff ffa6 	bl	800ac14 <BSP_SD_GetCardState>
 800acc8:	4603      	mov	r3, r0
 800acca:	2b00      	cmp	r3, #0
 800accc:	d101      	bne.n	800acd2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800acce:	2300      	movs	r3, #0
 800acd0:	e009      	b.n	800ace6 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800acd2:	f7fa f8dd 	bl	8004e90 <HAL_GetTick>
 800acd6:	4602      	mov	r2, r0
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	1ad3      	subs	r3, r2, r3
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	429a      	cmp	r2, r3
 800ace0:	d8f0      	bhi.n	800acc4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800ace2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3710      	adds	r7, #16
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}
	...

0800acf0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b082      	sub	sp, #8
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	4603      	mov	r3, r0
 800acf8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800acfa:	4b0b      	ldr	r3, [pc, #44]	; (800ad28 <SD_CheckStatus+0x38>)
 800acfc:	2201      	movs	r2, #1
 800acfe:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800ad00:	f7ff ff88 	bl	800ac14 <BSP_SD_GetCardState>
 800ad04:	4603      	mov	r3, r0
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d107      	bne.n	800ad1a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ad0a:	4b07      	ldr	r3, [pc, #28]	; (800ad28 <SD_CheckStatus+0x38>)
 800ad0c:	781b      	ldrb	r3, [r3, #0]
 800ad0e:	b2db      	uxtb	r3, r3
 800ad10:	f023 0301 	bic.w	r3, r3, #1
 800ad14:	b2da      	uxtb	r2, r3
 800ad16:	4b04      	ldr	r3, [pc, #16]	; (800ad28 <SD_CheckStatus+0x38>)
 800ad18:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ad1a:	4b03      	ldr	r3, [pc, #12]	; (800ad28 <SD_CheckStatus+0x38>)
 800ad1c:	781b      	ldrb	r3, [r3, #0]
 800ad1e:	b2db      	uxtb	r3, r3
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3708      	adds	r7, #8
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}
 800ad28:	20000009 	.word	0x20000009

0800ad2c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b082      	sub	sp, #8
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	4603      	mov	r3, r0
 800ad34:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800ad36:	f7ff ff13 	bl	800ab60 <BSP_SD_Init>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d107      	bne.n	800ad50 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800ad40:	79fb      	ldrb	r3, [r7, #7]
 800ad42:	4618      	mov	r0, r3
 800ad44:	f7ff ffd4 	bl	800acf0 <SD_CheckStatus>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	4b04      	ldr	r3, [pc, #16]	; (800ad60 <SD_initialize+0x34>)
 800ad4e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800ad50:	4b03      	ldr	r3, [pc, #12]	; (800ad60 <SD_initialize+0x34>)
 800ad52:	781b      	ldrb	r3, [r3, #0]
 800ad54:	b2db      	uxtb	r3, r3
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3708      	adds	r7, #8
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}
 800ad5e:	bf00      	nop
 800ad60:	20000009 	.word	0x20000009

0800ad64 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b082      	sub	sp, #8
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ad6e:	79fb      	ldrb	r3, [r7, #7]
 800ad70:	4618      	mov	r0, r3
 800ad72:	f7ff ffbd 	bl	800acf0 <SD_CheckStatus>
 800ad76:	4603      	mov	r3, r0
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3708      	adds	r7, #8
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}

0800ad80 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b086      	sub	sp, #24
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	60b9      	str	r1, [r7, #8]
 800ad88:	607a      	str	r2, [r7, #4]
 800ad8a:	603b      	str	r3, [r7, #0]
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ad90:	2301      	movs	r3, #1
 800ad92:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ad94:	f247 5030 	movw	r0, #30000	; 0x7530
 800ad98:	f7ff ff8c 	bl	800acb4 <SD_CheckStatusWithTimeout>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	da01      	bge.n	800ada6 <SD_read+0x26>
  {
    return res;
 800ada2:	7dfb      	ldrb	r3, [r7, #23]
 800ada4:	e03b      	b.n	800ae1e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800ada6:	683a      	ldr	r2, [r7, #0]
 800ada8:	6879      	ldr	r1, [r7, #4]
 800adaa:	68b8      	ldr	r0, [r7, #8]
 800adac:	f7ff fefe 	bl	800abac <BSP_SD_ReadBlocks_DMA>
 800adb0:	4603      	mov	r3, r0
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d132      	bne.n	800ae1c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800adb6:	4b1c      	ldr	r3, [pc, #112]	; (800ae28 <SD_read+0xa8>)
 800adb8:	2200      	movs	r2, #0
 800adba:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800adbc:	f7fa f868 	bl	8004e90 <HAL_GetTick>
 800adc0:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800adc2:	bf00      	nop
 800adc4:	4b18      	ldr	r3, [pc, #96]	; (800ae28 <SD_read+0xa8>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d108      	bne.n	800adde <SD_read+0x5e>
 800adcc:	f7fa f860 	bl	8004e90 <HAL_GetTick>
 800add0:	4602      	mov	r2, r0
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	1ad3      	subs	r3, r2, r3
 800add6:	f247 522f 	movw	r2, #29999	; 0x752f
 800adda:	4293      	cmp	r3, r2
 800addc:	d9f2      	bls.n	800adc4 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800adde:	4b12      	ldr	r3, [pc, #72]	; (800ae28 <SD_read+0xa8>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d102      	bne.n	800adec <SD_read+0x6c>
      {
        res = RES_ERROR;
 800ade6:	2301      	movs	r3, #1
 800ade8:	75fb      	strb	r3, [r7, #23]
 800adea:	e017      	b.n	800ae1c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800adec:	4b0e      	ldr	r3, [pc, #56]	; (800ae28 <SD_read+0xa8>)
 800adee:	2200      	movs	r2, #0
 800adf0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800adf2:	f7fa f84d 	bl	8004e90 <HAL_GetTick>
 800adf6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800adf8:	e007      	b.n	800ae0a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800adfa:	f7ff ff0b 	bl	800ac14 <BSP_SD_GetCardState>
 800adfe:	4603      	mov	r3, r0
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d102      	bne.n	800ae0a <SD_read+0x8a>
          {
            res = RES_OK;
 800ae04:	2300      	movs	r3, #0
 800ae06:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800ae08:	e008      	b.n	800ae1c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ae0a:	f7fa f841 	bl	8004e90 <HAL_GetTick>
 800ae0e:	4602      	mov	r2, r0
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	1ad3      	subs	r3, r2, r3
 800ae14:	f247 522f 	movw	r2, #29999	; 0x752f
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	d9ee      	bls.n	800adfa <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800ae1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3718      	adds	r7, #24
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}
 800ae26:	bf00      	nop
 800ae28:	20004050 	.word	0x20004050

0800ae2c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b086      	sub	sp, #24
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	60b9      	str	r1, [r7, #8]
 800ae34:	607a      	str	r2, [r7, #4]
 800ae36:	603b      	str	r3, [r7, #0]
 800ae38:	4603      	mov	r3, r0
 800ae3a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800ae40:	4b24      	ldr	r3, [pc, #144]	; (800aed4 <SD_write+0xa8>)
 800ae42:	2200      	movs	r2, #0
 800ae44:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ae46:	f247 5030 	movw	r0, #30000	; 0x7530
 800ae4a:	f7ff ff33 	bl	800acb4 <SD_CheckStatusWithTimeout>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	da01      	bge.n	800ae58 <SD_write+0x2c>
  {
    return res;
 800ae54:	7dfb      	ldrb	r3, [r7, #23]
 800ae56:	e038      	b.n	800aeca <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800ae58:	683a      	ldr	r2, [r7, #0]
 800ae5a:	6879      	ldr	r1, [r7, #4]
 800ae5c:	68b8      	ldr	r0, [r7, #8]
 800ae5e:	f7ff febf 	bl	800abe0 <BSP_SD_WriteBlocks_DMA>
 800ae62:	4603      	mov	r3, r0
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d12f      	bne.n	800aec8 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800ae68:	f7fa f812 	bl	8004e90 <HAL_GetTick>
 800ae6c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800ae6e:	bf00      	nop
 800ae70:	4b18      	ldr	r3, [pc, #96]	; (800aed4 <SD_write+0xa8>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d108      	bne.n	800ae8a <SD_write+0x5e>
 800ae78:	f7fa f80a 	bl	8004e90 <HAL_GetTick>
 800ae7c:	4602      	mov	r2, r0
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	1ad3      	subs	r3, r2, r3
 800ae82:	f247 522f 	movw	r2, #29999	; 0x752f
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d9f2      	bls.n	800ae70 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800ae8a:	4b12      	ldr	r3, [pc, #72]	; (800aed4 <SD_write+0xa8>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d102      	bne.n	800ae98 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800ae92:	2301      	movs	r3, #1
 800ae94:	75fb      	strb	r3, [r7, #23]
 800ae96:	e017      	b.n	800aec8 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800ae98:	4b0e      	ldr	r3, [pc, #56]	; (800aed4 <SD_write+0xa8>)
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800ae9e:	f7f9 fff7 	bl	8004e90 <HAL_GetTick>
 800aea2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800aea4:	e007      	b.n	800aeb6 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800aea6:	f7ff feb5 	bl	800ac14 <BSP_SD_GetCardState>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d102      	bne.n	800aeb6 <SD_write+0x8a>
          {
            res = RES_OK;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	75fb      	strb	r3, [r7, #23]
            break;
 800aeb4:	e008      	b.n	800aec8 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800aeb6:	f7f9 ffeb 	bl	8004e90 <HAL_GetTick>
 800aeba:	4602      	mov	r2, r0
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	1ad3      	subs	r3, r2, r3
 800aec0:	f247 522f 	movw	r2, #29999	; 0x752f
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d9ee      	bls.n	800aea6 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800aec8:	7dfb      	ldrb	r3, [r7, #23]
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3718      	adds	r7, #24
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}
 800aed2:	bf00      	nop
 800aed4:	2000404c 	.word	0x2000404c

0800aed8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b08c      	sub	sp, #48	; 0x30
 800aedc:	af00      	add	r7, sp, #0
 800aede:	4603      	mov	r3, r0
 800aee0:	603a      	str	r2, [r7, #0]
 800aee2:	71fb      	strb	r3, [r7, #7]
 800aee4:	460b      	mov	r3, r1
 800aee6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800aee8:	2301      	movs	r3, #1
 800aeea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800aeee:	4b25      	ldr	r3, [pc, #148]	; (800af84 <SD_ioctl+0xac>)
 800aef0:	781b      	ldrb	r3, [r3, #0]
 800aef2:	b2db      	uxtb	r3, r3
 800aef4:	f003 0301 	and.w	r3, r3, #1
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d001      	beq.n	800af00 <SD_ioctl+0x28>
 800aefc:	2303      	movs	r3, #3
 800aefe:	e03c      	b.n	800af7a <SD_ioctl+0xa2>

  switch (cmd)
 800af00:	79bb      	ldrb	r3, [r7, #6]
 800af02:	2b03      	cmp	r3, #3
 800af04:	d834      	bhi.n	800af70 <SD_ioctl+0x98>
 800af06:	a201      	add	r2, pc, #4	; (adr r2, 800af0c <SD_ioctl+0x34>)
 800af08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af0c:	0800af1d 	.word	0x0800af1d
 800af10:	0800af25 	.word	0x0800af25
 800af14:	0800af3d 	.word	0x0800af3d
 800af18:	0800af57 	.word	0x0800af57
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800af1c:	2300      	movs	r3, #0
 800af1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800af22:	e028      	b.n	800af76 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800af24:	f107 030c 	add.w	r3, r7, #12
 800af28:	4618      	mov	r0, r3
 800af2a:	f7ff fe83 	bl	800ac34 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800af2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800af34:	2300      	movs	r3, #0
 800af36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800af3a:	e01c      	b.n	800af76 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800af3c:	f107 030c 	add.w	r3, r7, #12
 800af40:	4618      	mov	r0, r3
 800af42:	f7ff fe77 	bl	800ac34 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800af46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af48:	b29a      	uxth	r2, r3
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800af4e:	2300      	movs	r3, #0
 800af50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800af54:	e00f      	b.n	800af76 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800af56:	f107 030c 	add.w	r3, r7, #12
 800af5a:	4618      	mov	r0, r3
 800af5c:	f7ff fe6a 	bl	800ac34 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800af60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af62:	0a5a      	lsrs	r2, r3, #9
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800af68:	2300      	movs	r3, #0
 800af6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800af6e:	e002      	b.n	800af76 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800af70:	2304      	movs	r3, #4
 800af72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800af76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3730      	adds	r7, #48	; 0x30
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}
 800af82:	bf00      	nop
 800af84:	20000009 	.word	0x20000009

0800af88 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800af88:	b480      	push	{r7}
 800af8a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800af8c:	4b03      	ldr	r3, [pc, #12]	; (800af9c <BSP_SD_WriteCpltCallback+0x14>)
 800af8e:	2201      	movs	r2, #1
 800af90:	601a      	str	r2, [r3, #0]
}
 800af92:	bf00      	nop
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr
 800af9c:	2000404c 	.word	0x2000404c

0800afa0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800afa0:	b480      	push	{r7}
 800afa2:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800afa4:	4b03      	ldr	r3, [pc, #12]	; (800afb4 <BSP_SD_ReadCpltCallback+0x14>)
 800afa6:	2201      	movs	r2, #1
 800afa8:	601a      	str	r2, [r3, #0]
}
 800afaa:	bf00      	nop
 800afac:	46bd      	mov	sp, r7
 800afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb2:	4770      	bx	lr
 800afb4:	20004050 	.word	0x20004050

0800afb8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b084      	sub	sp, #16
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	4603      	mov	r3, r0
 800afc0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800afc2:	79fb      	ldrb	r3, [r7, #7]
 800afc4:	4a08      	ldr	r2, [pc, #32]	; (800afe8 <disk_status+0x30>)
 800afc6:	009b      	lsls	r3, r3, #2
 800afc8:	4413      	add	r3, r2
 800afca:	685b      	ldr	r3, [r3, #4]
 800afcc:	685b      	ldr	r3, [r3, #4]
 800afce:	79fa      	ldrb	r2, [r7, #7]
 800afd0:	4905      	ldr	r1, [pc, #20]	; (800afe8 <disk_status+0x30>)
 800afd2:	440a      	add	r2, r1
 800afd4:	7a12      	ldrb	r2, [r2, #8]
 800afd6:	4610      	mov	r0, r2
 800afd8:	4798      	blx	r3
 800afda:	4603      	mov	r3, r0
 800afdc:	73fb      	strb	r3, [r7, #15]
  return stat;
 800afde:	7bfb      	ldrb	r3, [r7, #15]
}
 800afe0:	4618      	mov	r0, r3
 800afe2:	3710      	adds	r7, #16
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}
 800afe8:	2000407c 	.word	0x2000407c

0800afec <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b084      	sub	sp, #16
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	4603      	mov	r3, r0
 800aff4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800aff6:	2300      	movs	r3, #0
 800aff8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800affa:	79fb      	ldrb	r3, [r7, #7]
 800affc:	4a0d      	ldr	r2, [pc, #52]	; (800b034 <disk_initialize+0x48>)
 800affe:	5cd3      	ldrb	r3, [r2, r3]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d111      	bne.n	800b028 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b004:	79fb      	ldrb	r3, [r7, #7]
 800b006:	4a0b      	ldr	r2, [pc, #44]	; (800b034 <disk_initialize+0x48>)
 800b008:	2101      	movs	r1, #1
 800b00a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b00c:	79fb      	ldrb	r3, [r7, #7]
 800b00e:	4a09      	ldr	r2, [pc, #36]	; (800b034 <disk_initialize+0x48>)
 800b010:	009b      	lsls	r3, r3, #2
 800b012:	4413      	add	r3, r2
 800b014:	685b      	ldr	r3, [r3, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	79fa      	ldrb	r2, [r7, #7]
 800b01a:	4906      	ldr	r1, [pc, #24]	; (800b034 <disk_initialize+0x48>)
 800b01c:	440a      	add	r2, r1
 800b01e:	7a12      	ldrb	r2, [r2, #8]
 800b020:	4610      	mov	r0, r2
 800b022:	4798      	blx	r3
 800b024:	4603      	mov	r3, r0
 800b026:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b028:	7bfb      	ldrb	r3, [r7, #15]
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3710      	adds	r7, #16
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}
 800b032:	bf00      	nop
 800b034:	2000407c 	.word	0x2000407c

0800b038 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b038:	b590      	push	{r4, r7, lr}
 800b03a:	b087      	sub	sp, #28
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	60b9      	str	r1, [r7, #8]
 800b040:	607a      	str	r2, [r7, #4]
 800b042:	603b      	str	r3, [r7, #0]
 800b044:	4603      	mov	r3, r0
 800b046:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b048:	7bfb      	ldrb	r3, [r7, #15]
 800b04a:	4a0a      	ldr	r2, [pc, #40]	; (800b074 <disk_read+0x3c>)
 800b04c:	009b      	lsls	r3, r3, #2
 800b04e:	4413      	add	r3, r2
 800b050:	685b      	ldr	r3, [r3, #4]
 800b052:	689c      	ldr	r4, [r3, #8]
 800b054:	7bfb      	ldrb	r3, [r7, #15]
 800b056:	4a07      	ldr	r2, [pc, #28]	; (800b074 <disk_read+0x3c>)
 800b058:	4413      	add	r3, r2
 800b05a:	7a18      	ldrb	r0, [r3, #8]
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	687a      	ldr	r2, [r7, #4]
 800b060:	68b9      	ldr	r1, [r7, #8]
 800b062:	47a0      	blx	r4
 800b064:	4603      	mov	r3, r0
 800b066:	75fb      	strb	r3, [r7, #23]
  return res;
 800b068:	7dfb      	ldrb	r3, [r7, #23]
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	371c      	adds	r7, #28
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd90      	pop	{r4, r7, pc}
 800b072:	bf00      	nop
 800b074:	2000407c 	.word	0x2000407c

0800b078 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b078:	b590      	push	{r4, r7, lr}
 800b07a:	b087      	sub	sp, #28
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	60b9      	str	r1, [r7, #8]
 800b080:	607a      	str	r2, [r7, #4]
 800b082:	603b      	str	r3, [r7, #0]
 800b084:	4603      	mov	r3, r0
 800b086:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b088:	7bfb      	ldrb	r3, [r7, #15]
 800b08a:	4a0a      	ldr	r2, [pc, #40]	; (800b0b4 <disk_write+0x3c>)
 800b08c:	009b      	lsls	r3, r3, #2
 800b08e:	4413      	add	r3, r2
 800b090:	685b      	ldr	r3, [r3, #4]
 800b092:	68dc      	ldr	r4, [r3, #12]
 800b094:	7bfb      	ldrb	r3, [r7, #15]
 800b096:	4a07      	ldr	r2, [pc, #28]	; (800b0b4 <disk_write+0x3c>)
 800b098:	4413      	add	r3, r2
 800b09a:	7a18      	ldrb	r0, [r3, #8]
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	687a      	ldr	r2, [r7, #4]
 800b0a0:	68b9      	ldr	r1, [r7, #8]
 800b0a2:	47a0      	blx	r4
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	75fb      	strb	r3, [r7, #23]
  return res;
 800b0a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	371c      	adds	r7, #28
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd90      	pop	{r4, r7, pc}
 800b0b2:	bf00      	nop
 800b0b4:	2000407c 	.word	0x2000407c

0800b0b8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b084      	sub	sp, #16
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	4603      	mov	r3, r0
 800b0c0:	603a      	str	r2, [r7, #0]
 800b0c2:	71fb      	strb	r3, [r7, #7]
 800b0c4:	460b      	mov	r3, r1
 800b0c6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b0c8:	79fb      	ldrb	r3, [r7, #7]
 800b0ca:	4a09      	ldr	r2, [pc, #36]	; (800b0f0 <disk_ioctl+0x38>)
 800b0cc:	009b      	lsls	r3, r3, #2
 800b0ce:	4413      	add	r3, r2
 800b0d0:	685b      	ldr	r3, [r3, #4]
 800b0d2:	691b      	ldr	r3, [r3, #16]
 800b0d4:	79fa      	ldrb	r2, [r7, #7]
 800b0d6:	4906      	ldr	r1, [pc, #24]	; (800b0f0 <disk_ioctl+0x38>)
 800b0d8:	440a      	add	r2, r1
 800b0da:	7a10      	ldrb	r0, [r2, #8]
 800b0dc:	79b9      	ldrb	r1, [r7, #6]
 800b0de:	683a      	ldr	r2, [r7, #0]
 800b0e0:	4798      	blx	r3
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	73fb      	strb	r3, [r7, #15]
  return res;
 800b0e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3710      	adds	r7, #16
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}
 800b0f0:	2000407c 	.word	0x2000407c

0800b0f4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b085      	sub	sp, #20
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	3301      	adds	r3, #1
 800b100:	781b      	ldrb	r3, [r3, #0]
 800b102:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b104:	89fb      	ldrh	r3, [r7, #14]
 800b106:	021b      	lsls	r3, r3, #8
 800b108:	b21a      	sxth	r2, r3
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	781b      	ldrb	r3, [r3, #0]
 800b10e:	b21b      	sxth	r3, r3
 800b110:	4313      	orrs	r3, r2
 800b112:	b21b      	sxth	r3, r3
 800b114:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b116:	89fb      	ldrh	r3, [r7, #14]
}
 800b118:	4618      	mov	r0, r3
 800b11a:	3714      	adds	r7, #20
 800b11c:	46bd      	mov	sp, r7
 800b11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b122:	4770      	bx	lr

0800b124 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b124:	b480      	push	{r7}
 800b126:	b085      	sub	sp, #20
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	3303      	adds	r3, #3
 800b130:	781b      	ldrb	r3, [r3, #0]
 800b132:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	021b      	lsls	r3, r3, #8
 800b138:	687a      	ldr	r2, [r7, #4]
 800b13a:	3202      	adds	r2, #2
 800b13c:	7812      	ldrb	r2, [r2, #0]
 800b13e:	4313      	orrs	r3, r2
 800b140:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	021b      	lsls	r3, r3, #8
 800b146:	687a      	ldr	r2, [r7, #4]
 800b148:	3201      	adds	r2, #1
 800b14a:	7812      	ldrb	r2, [r2, #0]
 800b14c:	4313      	orrs	r3, r2
 800b14e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	021b      	lsls	r3, r3, #8
 800b154:	687a      	ldr	r2, [r7, #4]
 800b156:	7812      	ldrb	r2, [r2, #0]
 800b158:	4313      	orrs	r3, r2
 800b15a:	60fb      	str	r3, [r7, #12]
	return rv;
 800b15c:	68fb      	ldr	r3, [r7, #12]
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3714      	adds	r7, #20
 800b162:	46bd      	mov	sp, r7
 800b164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b168:	4770      	bx	lr

0800b16a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b16a:	b480      	push	{r7}
 800b16c:	b083      	sub	sp, #12
 800b16e:	af00      	add	r7, sp, #0
 800b170:	6078      	str	r0, [r7, #4]
 800b172:	460b      	mov	r3, r1
 800b174:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	1c5a      	adds	r2, r3, #1
 800b17a:	607a      	str	r2, [r7, #4]
 800b17c:	887a      	ldrh	r2, [r7, #2]
 800b17e:	b2d2      	uxtb	r2, r2
 800b180:	701a      	strb	r2, [r3, #0]
 800b182:	887b      	ldrh	r3, [r7, #2]
 800b184:	0a1b      	lsrs	r3, r3, #8
 800b186:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	1c5a      	adds	r2, r3, #1
 800b18c:	607a      	str	r2, [r7, #4]
 800b18e:	887a      	ldrh	r2, [r7, #2]
 800b190:	b2d2      	uxtb	r2, r2
 800b192:	701a      	strb	r2, [r3, #0]
}
 800b194:	bf00      	nop
 800b196:	370c      	adds	r7, #12
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr

0800b1a0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	b083      	sub	sp, #12
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
 800b1a8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	1c5a      	adds	r2, r3, #1
 800b1ae:	607a      	str	r2, [r7, #4]
 800b1b0:	683a      	ldr	r2, [r7, #0]
 800b1b2:	b2d2      	uxtb	r2, r2
 800b1b4:	701a      	strb	r2, [r3, #0]
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	0a1b      	lsrs	r3, r3, #8
 800b1ba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	1c5a      	adds	r2, r3, #1
 800b1c0:	607a      	str	r2, [r7, #4]
 800b1c2:	683a      	ldr	r2, [r7, #0]
 800b1c4:	b2d2      	uxtb	r2, r2
 800b1c6:	701a      	strb	r2, [r3, #0]
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	0a1b      	lsrs	r3, r3, #8
 800b1cc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	1c5a      	adds	r2, r3, #1
 800b1d2:	607a      	str	r2, [r7, #4]
 800b1d4:	683a      	ldr	r2, [r7, #0]
 800b1d6:	b2d2      	uxtb	r2, r2
 800b1d8:	701a      	strb	r2, [r3, #0]
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	0a1b      	lsrs	r3, r3, #8
 800b1de:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	1c5a      	adds	r2, r3, #1
 800b1e4:	607a      	str	r2, [r7, #4]
 800b1e6:	683a      	ldr	r2, [r7, #0]
 800b1e8:	b2d2      	uxtb	r2, r2
 800b1ea:	701a      	strb	r2, [r3, #0]
}
 800b1ec:	bf00      	nop
 800b1ee:	370c      	adds	r7, #12
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f6:	4770      	bx	lr

0800b1f8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b1f8:	b480      	push	{r7}
 800b1fa:	b087      	sub	sp, #28
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	60f8      	str	r0, [r7, #12]
 800b200:	60b9      	str	r1, [r7, #8]
 800b202:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d00d      	beq.n	800b22e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b212:	693a      	ldr	r2, [r7, #16]
 800b214:	1c53      	adds	r3, r2, #1
 800b216:	613b      	str	r3, [r7, #16]
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	1c59      	adds	r1, r3, #1
 800b21c:	6179      	str	r1, [r7, #20]
 800b21e:	7812      	ldrb	r2, [r2, #0]
 800b220:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	3b01      	subs	r3, #1
 800b226:	607b      	str	r3, [r7, #4]
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d1f1      	bne.n	800b212 <mem_cpy+0x1a>
	}
}
 800b22e:	bf00      	nop
 800b230:	371c      	adds	r7, #28
 800b232:	46bd      	mov	sp, r7
 800b234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b238:	4770      	bx	lr

0800b23a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b23a:	b480      	push	{r7}
 800b23c:	b087      	sub	sp, #28
 800b23e:	af00      	add	r7, sp, #0
 800b240:	60f8      	str	r0, [r7, #12]
 800b242:	60b9      	str	r1, [r7, #8]
 800b244:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	1c5a      	adds	r2, r3, #1
 800b24e:	617a      	str	r2, [r7, #20]
 800b250:	68ba      	ldr	r2, [r7, #8]
 800b252:	b2d2      	uxtb	r2, r2
 800b254:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	3b01      	subs	r3, #1
 800b25a:	607b      	str	r3, [r7, #4]
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d1f3      	bne.n	800b24a <mem_set+0x10>
}
 800b262:	bf00      	nop
 800b264:	bf00      	nop
 800b266:	371c      	adds	r7, #28
 800b268:	46bd      	mov	sp, r7
 800b26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26e:	4770      	bx	lr

0800b270 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b270:	b480      	push	{r7}
 800b272:	b089      	sub	sp, #36	; 0x24
 800b274:	af00      	add	r7, sp, #0
 800b276:	60f8      	str	r0, [r7, #12]
 800b278:	60b9      	str	r1, [r7, #8]
 800b27a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	61fb      	str	r3, [r7, #28]
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b284:	2300      	movs	r3, #0
 800b286:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b288:	69fb      	ldr	r3, [r7, #28]
 800b28a:	1c5a      	adds	r2, r3, #1
 800b28c:	61fa      	str	r2, [r7, #28]
 800b28e:	781b      	ldrb	r3, [r3, #0]
 800b290:	4619      	mov	r1, r3
 800b292:	69bb      	ldr	r3, [r7, #24]
 800b294:	1c5a      	adds	r2, r3, #1
 800b296:	61ba      	str	r2, [r7, #24]
 800b298:	781b      	ldrb	r3, [r3, #0]
 800b29a:	1acb      	subs	r3, r1, r3
 800b29c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	3b01      	subs	r3, #1
 800b2a2:	607b      	str	r3, [r7, #4]
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d002      	beq.n	800b2b0 <mem_cmp+0x40>
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d0eb      	beq.n	800b288 <mem_cmp+0x18>

	return r;
 800b2b0:	697b      	ldr	r3, [r7, #20]
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3724      	adds	r7, #36	; 0x24
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2bc:	4770      	bx	lr

0800b2be <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b2be:	b480      	push	{r7}
 800b2c0:	b083      	sub	sp, #12
 800b2c2:	af00      	add	r7, sp, #0
 800b2c4:	6078      	str	r0, [r7, #4]
 800b2c6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b2c8:	e002      	b.n	800b2d0 <chk_chr+0x12>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	3301      	adds	r3, #1
 800b2ce:	607b      	str	r3, [r7, #4]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d005      	beq.n	800b2e4 <chk_chr+0x26>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	781b      	ldrb	r3, [r3, #0]
 800b2dc:	461a      	mov	r2, r3
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	4293      	cmp	r3, r2
 800b2e2:	d1f2      	bne.n	800b2ca <chk_chr+0xc>
	return *str;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	781b      	ldrb	r3, [r3, #0]
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	370c      	adds	r7, #12
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f2:	4770      	bx	lr

0800b2f4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b085      	sub	sp, #20
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
 800b2fc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b2fe:	2300      	movs	r3, #0
 800b300:	60bb      	str	r3, [r7, #8]
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	60fb      	str	r3, [r7, #12]
 800b306:	e029      	b.n	800b35c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b308:	4a27      	ldr	r2, [pc, #156]	; (800b3a8 <chk_lock+0xb4>)
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	011b      	lsls	r3, r3, #4
 800b30e:	4413      	add	r3, r2
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d01d      	beq.n	800b352 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b316:	4a24      	ldr	r2, [pc, #144]	; (800b3a8 <chk_lock+0xb4>)
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	011b      	lsls	r3, r3, #4
 800b31c:	4413      	add	r3, r2
 800b31e:	681a      	ldr	r2, [r3, #0]
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	429a      	cmp	r2, r3
 800b326:	d116      	bne.n	800b356 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b328:	4a1f      	ldr	r2, [pc, #124]	; (800b3a8 <chk_lock+0xb4>)
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	011b      	lsls	r3, r3, #4
 800b32e:	4413      	add	r3, r2
 800b330:	3304      	adds	r3, #4
 800b332:	681a      	ldr	r2, [r3, #0]
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b338:	429a      	cmp	r2, r3
 800b33a:	d10c      	bne.n	800b356 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b33c:	4a1a      	ldr	r2, [pc, #104]	; (800b3a8 <chk_lock+0xb4>)
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	011b      	lsls	r3, r3, #4
 800b342:	4413      	add	r3, r2
 800b344:	3308      	adds	r3, #8
 800b346:	681a      	ldr	r2, [r3, #0]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b34c:	429a      	cmp	r2, r3
 800b34e:	d102      	bne.n	800b356 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b350:	e007      	b.n	800b362 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b352:	2301      	movs	r3, #1
 800b354:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	3301      	adds	r3, #1
 800b35a:	60fb      	str	r3, [r7, #12]
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	2b01      	cmp	r3, #1
 800b360:	d9d2      	bls.n	800b308 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	2b02      	cmp	r3, #2
 800b366:	d109      	bne.n	800b37c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d102      	bne.n	800b374 <chk_lock+0x80>
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	2b02      	cmp	r3, #2
 800b372:	d101      	bne.n	800b378 <chk_lock+0x84>
 800b374:	2300      	movs	r3, #0
 800b376:	e010      	b.n	800b39a <chk_lock+0xa6>
 800b378:	2312      	movs	r3, #18
 800b37a:	e00e      	b.n	800b39a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d108      	bne.n	800b394 <chk_lock+0xa0>
 800b382:	4a09      	ldr	r2, [pc, #36]	; (800b3a8 <chk_lock+0xb4>)
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	011b      	lsls	r3, r3, #4
 800b388:	4413      	add	r3, r2
 800b38a:	330c      	adds	r3, #12
 800b38c:	881b      	ldrh	r3, [r3, #0]
 800b38e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b392:	d101      	bne.n	800b398 <chk_lock+0xa4>
 800b394:	2310      	movs	r3, #16
 800b396:	e000      	b.n	800b39a <chk_lock+0xa6>
 800b398:	2300      	movs	r3, #0
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3714      	adds	r7, #20
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a4:	4770      	bx	lr
 800b3a6:	bf00      	nop
 800b3a8:	2000405c 	.word	0x2000405c

0800b3ac <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b083      	sub	sp, #12
 800b3b0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	607b      	str	r3, [r7, #4]
 800b3b6:	e002      	b.n	800b3be <enq_lock+0x12>
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	3301      	adds	r3, #1
 800b3bc:	607b      	str	r3, [r7, #4]
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2b01      	cmp	r3, #1
 800b3c2:	d806      	bhi.n	800b3d2 <enq_lock+0x26>
 800b3c4:	4a09      	ldr	r2, [pc, #36]	; (800b3ec <enq_lock+0x40>)
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	011b      	lsls	r3, r3, #4
 800b3ca:	4413      	add	r3, r2
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d1f2      	bne.n	800b3b8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2b02      	cmp	r3, #2
 800b3d6:	bf14      	ite	ne
 800b3d8:	2301      	movne	r3, #1
 800b3da:	2300      	moveq	r3, #0
 800b3dc:	b2db      	uxtb	r3, r3
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	370c      	adds	r7, #12
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e8:	4770      	bx	lr
 800b3ea:	bf00      	nop
 800b3ec:	2000405c 	.word	0x2000405c

0800b3f0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b085      	sub	sp, #20
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
 800b3f8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	60fb      	str	r3, [r7, #12]
 800b3fe:	e01f      	b.n	800b440 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b400:	4a41      	ldr	r2, [pc, #260]	; (800b508 <inc_lock+0x118>)
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	011b      	lsls	r3, r3, #4
 800b406:	4413      	add	r3, r2
 800b408:	681a      	ldr	r2, [r3, #0]
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	429a      	cmp	r2, r3
 800b410:	d113      	bne.n	800b43a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b412:	4a3d      	ldr	r2, [pc, #244]	; (800b508 <inc_lock+0x118>)
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	011b      	lsls	r3, r3, #4
 800b418:	4413      	add	r3, r2
 800b41a:	3304      	adds	r3, #4
 800b41c:	681a      	ldr	r2, [r3, #0]
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b422:	429a      	cmp	r2, r3
 800b424:	d109      	bne.n	800b43a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b426:	4a38      	ldr	r2, [pc, #224]	; (800b508 <inc_lock+0x118>)
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	011b      	lsls	r3, r3, #4
 800b42c:	4413      	add	r3, r2
 800b42e:	3308      	adds	r3, #8
 800b430:	681a      	ldr	r2, [r3, #0]
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b436:	429a      	cmp	r2, r3
 800b438:	d006      	beq.n	800b448 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	3301      	adds	r3, #1
 800b43e:	60fb      	str	r3, [r7, #12]
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	2b01      	cmp	r3, #1
 800b444:	d9dc      	bls.n	800b400 <inc_lock+0x10>
 800b446:	e000      	b.n	800b44a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b448:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	2b02      	cmp	r3, #2
 800b44e:	d132      	bne.n	800b4b6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b450:	2300      	movs	r3, #0
 800b452:	60fb      	str	r3, [r7, #12]
 800b454:	e002      	b.n	800b45c <inc_lock+0x6c>
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	3301      	adds	r3, #1
 800b45a:	60fb      	str	r3, [r7, #12]
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	2b01      	cmp	r3, #1
 800b460:	d806      	bhi.n	800b470 <inc_lock+0x80>
 800b462:	4a29      	ldr	r2, [pc, #164]	; (800b508 <inc_lock+0x118>)
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	011b      	lsls	r3, r3, #4
 800b468:	4413      	add	r3, r2
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d1f2      	bne.n	800b456 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	2b02      	cmp	r3, #2
 800b474:	d101      	bne.n	800b47a <inc_lock+0x8a>
 800b476:	2300      	movs	r3, #0
 800b478:	e040      	b.n	800b4fc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681a      	ldr	r2, [r3, #0]
 800b47e:	4922      	ldr	r1, [pc, #136]	; (800b508 <inc_lock+0x118>)
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	011b      	lsls	r3, r3, #4
 800b484:	440b      	add	r3, r1
 800b486:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	689a      	ldr	r2, [r3, #8]
 800b48c:	491e      	ldr	r1, [pc, #120]	; (800b508 <inc_lock+0x118>)
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	011b      	lsls	r3, r3, #4
 800b492:	440b      	add	r3, r1
 800b494:	3304      	adds	r3, #4
 800b496:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	695a      	ldr	r2, [r3, #20]
 800b49c:	491a      	ldr	r1, [pc, #104]	; (800b508 <inc_lock+0x118>)
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	011b      	lsls	r3, r3, #4
 800b4a2:	440b      	add	r3, r1
 800b4a4:	3308      	adds	r3, #8
 800b4a6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b4a8:	4a17      	ldr	r2, [pc, #92]	; (800b508 <inc_lock+0x118>)
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	011b      	lsls	r3, r3, #4
 800b4ae:	4413      	add	r3, r2
 800b4b0:	330c      	adds	r3, #12
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d009      	beq.n	800b4d0 <inc_lock+0xe0>
 800b4bc:	4a12      	ldr	r2, [pc, #72]	; (800b508 <inc_lock+0x118>)
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	011b      	lsls	r3, r3, #4
 800b4c2:	4413      	add	r3, r2
 800b4c4:	330c      	adds	r3, #12
 800b4c6:	881b      	ldrh	r3, [r3, #0]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d001      	beq.n	800b4d0 <inc_lock+0xe0>
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	e015      	b.n	800b4fc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d108      	bne.n	800b4e8 <inc_lock+0xf8>
 800b4d6:	4a0c      	ldr	r2, [pc, #48]	; (800b508 <inc_lock+0x118>)
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	011b      	lsls	r3, r3, #4
 800b4dc:	4413      	add	r3, r2
 800b4de:	330c      	adds	r3, #12
 800b4e0:	881b      	ldrh	r3, [r3, #0]
 800b4e2:	3301      	adds	r3, #1
 800b4e4:	b29a      	uxth	r2, r3
 800b4e6:	e001      	b.n	800b4ec <inc_lock+0xfc>
 800b4e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b4ec:	4906      	ldr	r1, [pc, #24]	; (800b508 <inc_lock+0x118>)
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	011b      	lsls	r3, r3, #4
 800b4f2:	440b      	add	r3, r1
 800b4f4:	330c      	adds	r3, #12
 800b4f6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	3301      	adds	r3, #1
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3714      	adds	r7, #20
 800b500:	46bd      	mov	sp, r7
 800b502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b506:	4770      	bx	lr
 800b508:	2000405c 	.word	0x2000405c

0800b50c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b085      	sub	sp, #20
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b514:	2300      	movs	r3, #0
 800b516:	60fb      	str	r3, [r7, #12]
 800b518:	e010      	b.n	800b53c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b51a:	4a0d      	ldr	r2, [pc, #52]	; (800b550 <clear_lock+0x44>)
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	011b      	lsls	r3, r3, #4
 800b520:	4413      	add	r3, r2
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	687a      	ldr	r2, [r7, #4]
 800b526:	429a      	cmp	r2, r3
 800b528:	d105      	bne.n	800b536 <clear_lock+0x2a>
 800b52a:	4a09      	ldr	r2, [pc, #36]	; (800b550 <clear_lock+0x44>)
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	011b      	lsls	r3, r3, #4
 800b530:	4413      	add	r3, r2
 800b532:	2200      	movs	r2, #0
 800b534:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	3301      	adds	r3, #1
 800b53a:	60fb      	str	r3, [r7, #12]
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	2b01      	cmp	r3, #1
 800b540:	d9eb      	bls.n	800b51a <clear_lock+0xe>
	}
}
 800b542:	bf00      	nop
 800b544:	bf00      	nop
 800b546:	3714      	adds	r7, #20
 800b548:	46bd      	mov	sp, r7
 800b54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54e:	4770      	bx	lr
 800b550:	2000405c 	.word	0x2000405c

0800b554 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b086      	sub	sp, #24
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b55c:	2300      	movs	r3, #0
 800b55e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	78db      	ldrb	r3, [r3, #3]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d034      	beq.n	800b5d2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b56c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	7858      	ldrb	r0, [r3, #1]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b578:	2301      	movs	r3, #1
 800b57a:	697a      	ldr	r2, [r7, #20]
 800b57c:	f7ff fd7c 	bl	800b078 <disk_write>
 800b580:	4603      	mov	r3, r0
 800b582:	2b00      	cmp	r3, #0
 800b584:	d002      	beq.n	800b58c <sync_window+0x38>
			res = FR_DISK_ERR;
 800b586:	2301      	movs	r3, #1
 800b588:	73fb      	strb	r3, [r7, #15]
 800b58a:	e022      	b.n	800b5d2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2200      	movs	r2, #0
 800b590:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b596:	697a      	ldr	r2, [r7, #20]
 800b598:	1ad2      	subs	r2, r2, r3
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	69db      	ldr	r3, [r3, #28]
 800b59e:	429a      	cmp	r2, r3
 800b5a0:	d217      	bcs.n	800b5d2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	789b      	ldrb	r3, [r3, #2]
 800b5a6:	613b      	str	r3, [r7, #16]
 800b5a8:	e010      	b.n	800b5cc <sync_window+0x78>
					wsect += fs->fsize;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	69db      	ldr	r3, [r3, #28]
 800b5ae:	697a      	ldr	r2, [r7, #20]
 800b5b0:	4413      	add	r3, r2
 800b5b2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	7858      	ldrb	r0, [r3, #1]
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b5be:	2301      	movs	r3, #1
 800b5c0:	697a      	ldr	r2, [r7, #20]
 800b5c2:	f7ff fd59 	bl	800b078 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b5c6:	693b      	ldr	r3, [r7, #16]
 800b5c8:	3b01      	subs	r3, #1
 800b5ca:	613b      	str	r3, [r7, #16]
 800b5cc:	693b      	ldr	r3, [r7, #16]
 800b5ce:	2b01      	cmp	r3, #1
 800b5d0:	d8eb      	bhi.n	800b5aa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b5d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3718      	adds	r7, #24
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}

0800b5dc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b084      	sub	sp, #16
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
 800b5e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5ee:	683a      	ldr	r2, [r7, #0]
 800b5f0:	429a      	cmp	r2, r3
 800b5f2:	d01b      	beq.n	800b62c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f7ff ffad 	bl	800b554 <sync_window>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b5fe:	7bfb      	ldrb	r3, [r7, #15]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d113      	bne.n	800b62c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	7858      	ldrb	r0, [r3, #1]
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b60e:	2301      	movs	r3, #1
 800b610:	683a      	ldr	r2, [r7, #0]
 800b612:	f7ff fd11 	bl	800b038 <disk_read>
 800b616:	4603      	mov	r3, r0
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d004      	beq.n	800b626 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b61c:	f04f 33ff 	mov.w	r3, #4294967295
 800b620:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b622:	2301      	movs	r3, #1
 800b624:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	683a      	ldr	r2, [r7, #0]
 800b62a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800b62c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b62e:	4618      	mov	r0, r3
 800b630:	3710      	adds	r7, #16
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}
	...

0800b638 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b084      	sub	sp, #16
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f7ff ff87 	bl	800b554 <sync_window>
 800b646:	4603      	mov	r3, r0
 800b648:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b64a:	7bfb      	ldrb	r3, [r7, #15]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d159      	bne.n	800b704 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	781b      	ldrb	r3, [r3, #0]
 800b654:	2b03      	cmp	r3, #3
 800b656:	d149      	bne.n	800b6ec <sync_fs+0xb4>
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	791b      	ldrb	r3, [r3, #4]
 800b65c:	2b01      	cmp	r3, #1
 800b65e:	d145      	bne.n	800b6ec <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	899b      	ldrh	r3, [r3, #12]
 800b66a:	461a      	mov	r2, r3
 800b66c:	2100      	movs	r1, #0
 800b66e:	f7ff fde4 	bl	800b23a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	3334      	adds	r3, #52	; 0x34
 800b676:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b67a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b67e:	4618      	mov	r0, r3
 800b680:	f7ff fd73 	bl	800b16a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	3334      	adds	r3, #52	; 0x34
 800b688:	4921      	ldr	r1, [pc, #132]	; (800b710 <sync_fs+0xd8>)
 800b68a:	4618      	mov	r0, r3
 800b68c:	f7ff fd88 	bl	800b1a0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	3334      	adds	r3, #52	; 0x34
 800b694:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b698:	491e      	ldr	r1, [pc, #120]	; (800b714 <sync_fs+0xdc>)
 800b69a:	4618      	mov	r0, r3
 800b69c:	f7ff fd80 	bl	800b1a0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	3334      	adds	r3, #52	; 0x34
 800b6a4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	695b      	ldr	r3, [r3, #20]
 800b6ac:	4619      	mov	r1, r3
 800b6ae:	4610      	mov	r0, r2
 800b6b0:	f7ff fd76 	bl	800b1a0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	3334      	adds	r3, #52	; 0x34
 800b6b8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	691b      	ldr	r3, [r3, #16]
 800b6c0:	4619      	mov	r1, r3
 800b6c2:	4610      	mov	r0, r2
 800b6c4:	f7ff fd6c 	bl	800b1a0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6a1b      	ldr	r3, [r3, #32]
 800b6cc:	1c5a      	adds	r2, r3, #1
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	7858      	ldrb	r0, [r3, #1]
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	f7ff fcc9 	bl	800b078 <disk_write>
			fs->fsi_flag = 0;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	785b      	ldrb	r3, [r3, #1]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	2100      	movs	r1, #0
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f7ff fcdf 	bl	800b0b8 <disk_ioctl>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d001      	beq.n	800b704 <sync_fs+0xcc>
 800b700:	2301      	movs	r3, #1
 800b702:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b704:	7bfb      	ldrb	r3, [r7, #15]
}
 800b706:	4618      	mov	r0, r3
 800b708:	3710      	adds	r7, #16
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}
 800b70e:	bf00      	nop
 800b710:	41615252 	.word	0x41615252
 800b714:	61417272 	.word	0x61417272

0800b718 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b718:	b480      	push	{r7}
 800b71a:	b083      	sub	sp, #12
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	3b02      	subs	r3, #2
 800b726:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	699b      	ldr	r3, [r3, #24]
 800b72c:	3b02      	subs	r3, #2
 800b72e:	683a      	ldr	r2, [r7, #0]
 800b730:	429a      	cmp	r2, r3
 800b732:	d301      	bcc.n	800b738 <clust2sect+0x20>
 800b734:	2300      	movs	r3, #0
 800b736:	e008      	b.n	800b74a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	895b      	ldrh	r3, [r3, #10]
 800b73c:	461a      	mov	r2, r3
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	fb03 f202 	mul.w	r2, r3, r2
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b748:	4413      	add	r3, r2
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	370c      	adds	r7, #12
 800b74e:	46bd      	mov	sp, r7
 800b750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b754:	4770      	bx	lr

0800b756 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b756:	b580      	push	{r7, lr}
 800b758:	b086      	sub	sp, #24
 800b75a:	af00      	add	r7, sp, #0
 800b75c:	6078      	str	r0, [r7, #4]
 800b75e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	2b01      	cmp	r3, #1
 800b76a:	d904      	bls.n	800b776 <get_fat+0x20>
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	699b      	ldr	r3, [r3, #24]
 800b770:	683a      	ldr	r2, [r7, #0]
 800b772:	429a      	cmp	r2, r3
 800b774:	d302      	bcc.n	800b77c <get_fat+0x26>
		val = 1;	/* Internal error */
 800b776:	2301      	movs	r3, #1
 800b778:	617b      	str	r3, [r7, #20]
 800b77a:	e0bb      	b.n	800b8f4 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b77c:	f04f 33ff 	mov.w	r3, #4294967295
 800b780:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	781b      	ldrb	r3, [r3, #0]
 800b786:	2b03      	cmp	r3, #3
 800b788:	f000 8083 	beq.w	800b892 <get_fat+0x13c>
 800b78c:	2b03      	cmp	r3, #3
 800b78e:	f300 80a7 	bgt.w	800b8e0 <get_fat+0x18a>
 800b792:	2b01      	cmp	r3, #1
 800b794:	d002      	beq.n	800b79c <get_fat+0x46>
 800b796:	2b02      	cmp	r3, #2
 800b798:	d056      	beq.n	800b848 <get_fat+0xf2>
 800b79a:	e0a1      	b.n	800b8e0 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	60fb      	str	r3, [r7, #12]
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	085b      	lsrs	r3, r3, #1
 800b7a4:	68fa      	ldr	r2, [r7, #12]
 800b7a6:	4413      	add	r3, r2
 800b7a8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	899b      	ldrh	r3, [r3, #12]
 800b7b2:	4619      	mov	r1, r3
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	fbb3 f3f1 	udiv	r3, r3, r1
 800b7ba:	4413      	add	r3, r2
 800b7bc:	4619      	mov	r1, r3
 800b7be:	6938      	ldr	r0, [r7, #16]
 800b7c0:	f7ff ff0c 	bl	800b5dc <move_window>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	f040 808d 	bne.w	800b8e6 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	1c5a      	adds	r2, r3, #1
 800b7d0:	60fa      	str	r2, [r7, #12]
 800b7d2:	693a      	ldr	r2, [r7, #16]
 800b7d4:	8992      	ldrh	r2, [r2, #12]
 800b7d6:	fbb3 f1f2 	udiv	r1, r3, r2
 800b7da:	fb01 f202 	mul.w	r2, r1, r2
 800b7de:	1a9b      	subs	r3, r3, r2
 800b7e0:	693a      	ldr	r2, [r7, #16]
 800b7e2:	4413      	add	r3, r2
 800b7e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b7e8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b7ea:	693b      	ldr	r3, [r7, #16]
 800b7ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	899b      	ldrh	r3, [r3, #12]
 800b7f2:	4619      	mov	r1, r3
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	fbb3 f3f1 	udiv	r3, r3, r1
 800b7fa:	4413      	add	r3, r2
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	6938      	ldr	r0, [r7, #16]
 800b800:	f7ff feec 	bl	800b5dc <move_window>
 800b804:	4603      	mov	r3, r0
 800b806:	2b00      	cmp	r3, #0
 800b808:	d16f      	bne.n	800b8ea <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b80a:	693b      	ldr	r3, [r7, #16]
 800b80c:	899b      	ldrh	r3, [r3, #12]
 800b80e:	461a      	mov	r2, r3
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	fbb3 f1f2 	udiv	r1, r3, r2
 800b816:	fb01 f202 	mul.w	r2, r1, r2
 800b81a:	1a9b      	subs	r3, r3, r2
 800b81c:	693a      	ldr	r2, [r7, #16]
 800b81e:	4413      	add	r3, r2
 800b820:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b824:	021b      	lsls	r3, r3, #8
 800b826:	461a      	mov	r2, r3
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	4313      	orrs	r3, r2
 800b82c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	f003 0301 	and.w	r3, r3, #1
 800b834:	2b00      	cmp	r3, #0
 800b836:	d002      	beq.n	800b83e <get_fat+0xe8>
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	091b      	lsrs	r3, r3, #4
 800b83c:	e002      	b.n	800b844 <get_fat+0xee>
 800b83e:	68bb      	ldr	r3, [r7, #8]
 800b840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b844:	617b      	str	r3, [r7, #20]
			break;
 800b846:	e055      	b.n	800b8f4 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b84c:	693b      	ldr	r3, [r7, #16]
 800b84e:	899b      	ldrh	r3, [r3, #12]
 800b850:	085b      	lsrs	r3, r3, #1
 800b852:	b29b      	uxth	r3, r3
 800b854:	4619      	mov	r1, r3
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	fbb3 f3f1 	udiv	r3, r3, r1
 800b85c:	4413      	add	r3, r2
 800b85e:	4619      	mov	r1, r3
 800b860:	6938      	ldr	r0, [r7, #16]
 800b862:	f7ff febb 	bl	800b5dc <move_window>
 800b866:	4603      	mov	r3, r0
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d140      	bne.n	800b8ee <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b86c:	693b      	ldr	r3, [r7, #16]
 800b86e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	005b      	lsls	r3, r3, #1
 800b876:	693a      	ldr	r2, [r7, #16]
 800b878:	8992      	ldrh	r2, [r2, #12]
 800b87a:	fbb3 f0f2 	udiv	r0, r3, r2
 800b87e:	fb00 f202 	mul.w	r2, r0, r2
 800b882:	1a9b      	subs	r3, r3, r2
 800b884:	440b      	add	r3, r1
 800b886:	4618      	mov	r0, r3
 800b888:	f7ff fc34 	bl	800b0f4 <ld_word>
 800b88c:	4603      	mov	r3, r0
 800b88e:	617b      	str	r3, [r7, #20]
			break;
 800b890:	e030      	b.n	800b8f4 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b892:	693b      	ldr	r3, [r7, #16]
 800b894:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	899b      	ldrh	r3, [r3, #12]
 800b89a:	089b      	lsrs	r3, r3, #2
 800b89c:	b29b      	uxth	r3, r3
 800b89e:	4619      	mov	r1, r3
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	fbb3 f3f1 	udiv	r3, r3, r1
 800b8a6:	4413      	add	r3, r2
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	6938      	ldr	r0, [r7, #16]
 800b8ac:	f7ff fe96 	bl	800b5dc <move_window>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d11d      	bne.n	800b8f2 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	009b      	lsls	r3, r3, #2
 800b8c0:	693a      	ldr	r2, [r7, #16]
 800b8c2:	8992      	ldrh	r2, [r2, #12]
 800b8c4:	fbb3 f0f2 	udiv	r0, r3, r2
 800b8c8:	fb00 f202 	mul.w	r2, r0, r2
 800b8cc:	1a9b      	subs	r3, r3, r2
 800b8ce:	440b      	add	r3, r1
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f7ff fc27 	bl	800b124 <ld_dword>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b8dc:	617b      	str	r3, [r7, #20]
			break;
 800b8de:	e009      	b.n	800b8f4 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	617b      	str	r3, [r7, #20]
 800b8e4:	e006      	b.n	800b8f4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b8e6:	bf00      	nop
 800b8e8:	e004      	b.n	800b8f4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b8ea:	bf00      	nop
 800b8ec:	e002      	b.n	800b8f4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b8ee:	bf00      	nop
 800b8f0:	e000      	b.n	800b8f4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b8f2:	bf00      	nop
		}
	}

	return val;
 800b8f4:	697b      	ldr	r3, [r7, #20]
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3718      	adds	r7, #24
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}

0800b8fe <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b8fe:	b590      	push	{r4, r7, lr}
 800b900:	b089      	sub	sp, #36	; 0x24
 800b902:	af00      	add	r7, sp, #0
 800b904:	60f8      	str	r0, [r7, #12]
 800b906:	60b9      	str	r1, [r7, #8]
 800b908:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b90a:	2302      	movs	r3, #2
 800b90c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	2b01      	cmp	r3, #1
 800b912:	f240 8102 	bls.w	800bb1a <put_fat+0x21c>
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	699b      	ldr	r3, [r3, #24]
 800b91a:	68ba      	ldr	r2, [r7, #8]
 800b91c:	429a      	cmp	r2, r3
 800b91e:	f080 80fc 	bcs.w	800bb1a <put_fat+0x21c>
		switch (fs->fs_type) {
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	781b      	ldrb	r3, [r3, #0]
 800b926:	2b03      	cmp	r3, #3
 800b928:	f000 80b6 	beq.w	800ba98 <put_fat+0x19a>
 800b92c:	2b03      	cmp	r3, #3
 800b92e:	f300 80fd 	bgt.w	800bb2c <put_fat+0x22e>
 800b932:	2b01      	cmp	r3, #1
 800b934:	d003      	beq.n	800b93e <put_fat+0x40>
 800b936:	2b02      	cmp	r3, #2
 800b938:	f000 8083 	beq.w	800ba42 <put_fat+0x144>
 800b93c:	e0f6      	b.n	800bb2c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	61bb      	str	r3, [r7, #24]
 800b942:	69bb      	ldr	r3, [r7, #24]
 800b944:	085b      	lsrs	r3, r3, #1
 800b946:	69ba      	ldr	r2, [r7, #24]
 800b948:	4413      	add	r3, r2
 800b94a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	899b      	ldrh	r3, [r3, #12]
 800b954:	4619      	mov	r1, r3
 800b956:	69bb      	ldr	r3, [r7, #24]
 800b958:	fbb3 f3f1 	udiv	r3, r3, r1
 800b95c:	4413      	add	r3, r2
 800b95e:	4619      	mov	r1, r3
 800b960:	68f8      	ldr	r0, [r7, #12]
 800b962:	f7ff fe3b 	bl	800b5dc <move_window>
 800b966:	4603      	mov	r3, r0
 800b968:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b96a:	7ffb      	ldrb	r3, [r7, #31]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	f040 80d6 	bne.w	800bb1e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b978:	69bb      	ldr	r3, [r7, #24]
 800b97a:	1c5a      	adds	r2, r3, #1
 800b97c:	61ba      	str	r2, [r7, #24]
 800b97e:	68fa      	ldr	r2, [r7, #12]
 800b980:	8992      	ldrh	r2, [r2, #12]
 800b982:	fbb3 f0f2 	udiv	r0, r3, r2
 800b986:	fb00 f202 	mul.w	r2, r0, r2
 800b98a:	1a9b      	subs	r3, r3, r2
 800b98c:	440b      	add	r3, r1
 800b98e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	f003 0301 	and.w	r3, r3, #1
 800b996:	2b00      	cmp	r3, #0
 800b998:	d00d      	beq.n	800b9b6 <put_fat+0xb8>
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	781b      	ldrb	r3, [r3, #0]
 800b99e:	b25b      	sxtb	r3, r3
 800b9a0:	f003 030f 	and.w	r3, r3, #15
 800b9a4:	b25a      	sxtb	r2, r3
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	b2db      	uxtb	r3, r3
 800b9aa:	011b      	lsls	r3, r3, #4
 800b9ac:	b25b      	sxtb	r3, r3
 800b9ae:	4313      	orrs	r3, r2
 800b9b0:	b25b      	sxtb	r3, r3
 800b9b2:	b2db      	uxtb	r3, r3
 800b9b4:	e001      	b.n	800b9ba <put_fat+0xbc>
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	b2db      	uxtb	r3, r3
 800b9ba:	697a      	ldr	r2, [r7, #20]
 800b9bc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	2201      	movs	r2, #1
 800b9c2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	899b      	ldrh	r3, [r3, #12]
 800b9cc:	4619      	mov	r1, r3
 800b9ce:	69bb      	ldr	r3, [r7, #24]
 800b9d0:	fbb3 f3f1 	udiv	r3, r3, r1
 800b9d4:	4413      	add	r3, r2
 800b9d6:	4619      	mov	r1, r3
 800b9d8:	68f8      	ldr	r0, [r7, #12]
 800b9da:	f7ff fdff 	bl	800b5dc <move_window>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b9e2:	7ffb      	ldrb	r3, [r7, #31]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	f040 809c 	bne.w	800bb22 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	899b      	ldrh	r3, [r3, #12]
 800b9f4:	461a      	mov	r2, r3
 800b9f6:	69bb      	ldr	r3, [r7, #24]
 800b9f8:	fbb3 f0f2 	udiv	r0, r3, r2
 800b9fc:	fb00 f202 	mul.w	r2, r0, r2
 800ba00:	1a9b      	subs	r3, r3, r2
 800ba02:	440b      	add	r3, r1
 800ba04:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	f003 0301 	and.w	r3, r3, #1
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d003      	beq.n	800ba18 <put_fat+0x11a>
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	091b      	lsrs	r3, r3, #4
 800ba14:	b2db      	uxtb	r3, r3
 800ba16:	e00e      	b.n	800ba36 <put_fat+0x138>
 800ba18:	697b      	ldr	r3, [r7, #20]
 800ba1a:	781b      	ldrb	r3, [r3, #0]
 800ba1c:	b25b      	sxtb	r3, r3
 800ba1e:	f023 030f 	bic.w	r3, r3, #15
 800ba22:	b25a      	sxtb	r2, r3
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	0a1b      	lsrs	r3, r3, #8
 800ba28:	b25b      	sxtb	r3, r3
 800ba2a:	f003 030f 	and.w	r3, r3, #15
 800ba2e:	b25b      	sxtb	r3, r3
 800ba30:	4313      	orrs	r3, r2
 800ba32:	b25b      	sxtb	r3, r3
 800ba34:	b2db      	uxtb	r3, r3
 800ba36:	697a      	ldr	r2, [r7, #20]
 800ba38:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	2201      	movs	r2, #1
 800ba3e:	70da      	strb	r2, [r3, #3]
			break;
 800ba40:	e074      	b.n	800bb2c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	899b      	ldrh	r3, [r3, #12]
 800ba4a:	085b      	lsrs	r3, r3, #1
 800ba4c:	b29b      	uxth	r3, r3
 800ba4e:	4619      	mov	r1, r3
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	fbb3 f3f1 	udiv	r3, r3, r1
 800ba56:	4413      	add	r3, r2
 800ba58:	4619      	mov	r1, r3
 800ba5a:	68f8      	ldr	r0, [r7, #12]
 800ba5c:	f7ff fdbe 	bl	800b5dc <move_window>
 800ba60:	4603      	mov	r3, r0
 800ba62:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ba64:	7ffb      	ldrb	r3, [r7, #31]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d15d      	bne.n	800bb26 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	005b      	lsls	r3, r3, #1
 800ba74:	68fa      	ldr	r2, [r7, #12]
 800ba76:	8992      	ldrh	r2, [r2, #12]
 800ba78:	fbb3 f0f2 	udiv	r0, r3, r2
 800ba7c:	fb00 f202 	mul.w	r2, r0, r2
 800ba80:	1a9b      	subs	r3, r3, r2
 800ba82:	440b      	add	r3, r1
 800ba84:	687a      	ldr	r2, [r7, #4]
 800ba86:	b292      	uxth	r2, r2
 800ba88:	4611      	mov	r1, r2
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f7ff fb6d 	bl	800b16a <st_word>
			fs->wflag = 1;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	2201      	movs	r2, #1
 800ba94:	70da      	strb	r2, [r3, #3]
			break;
 800ba96:	e049      	b.n	800bb2c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	899b      	ldrh	r3, [r3, #12]
 800baa0:	089b      	lsrs	r3, r3, #2
 800baa2:	b29b      	uxth	r3, r3
 800baa4:	4619      	mov	r1, r3
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	fbb3 f3f1 	udiv	r3, r3, r1
 800baac:	4413      	add	r3, r2
 800baae:	4619      	mov	r1, r3
 800bab0:	68f8      	ldr	r0, [r7, #12]
 800bab2:	f7ff fd93 	bl	800b5dc <move_window>
 800bab6:	4603      	mov	r3, r0
 800bab8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800baba:	7ffb      	ldrb	r3, [r7, #31]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d134      	bne.n	800bb2a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	009b      	lsls	r3, r3, #2
 800bad0:	68fa      	ldr	r2, [r7, #12]
 800bad2:	8992      	ldrh	r2, [r2, #12]
 800bad4:	fbb3 f0f2 	udiv	r0, r3, r2
 800bad8:	fb00 f202 	mul.w	r2, r0, r2
 800badc:	1a9b      	subs	r3, r3, r2
 800bade:	440b      	add	r3, r1
 800bae0:	4618      	mov	r0, r3
 800bae2:	f7ff fb1f 	bl	800b124 <ld_dword>
 800bae6:	4603      	mov	r3, r0
 800bae8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800baec:	4323      	orrs	r3, r4
 800baee:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	009b      	lsls	r3, r3, #2
 800bafa:	68fa      	ldr	r2, [r7, #12]
 800bafc:	8992      	ldrh	r2, [r2, #12]
 800bafe:	fbb3 f0f2 	udiv	r0, r3, r2
 800bb02:	fb00 f202 	mul.w	r2, r0, r2
 800bb06:	1a9b      	subs	r3, r3, r2
 800bb08:	440b      	add	r3, r1
 800bb0a:	6879      	ldr	r1, [r7, #4]
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f7ff fb47 	bl	800b1a0 <st_dword>
			fs->wflag = 1;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	2201      	movs	r2, #1
 800bb16:	70da      	strb	r2, [r3, #3]
			break;
 800bb18:	e008      	b.n	800bb2c <put_fat+0x22e>
		}
	}
 800bb1a:	bf00      	nop
 800bb1c:	e006      	b.n	800bb2c <put_fat+0x22e>
			if (res != FR_OK) break;
 800bb1e:	bf00      	nop
 800bb20:	e004      	b.n	800bb2c <put_fat+0x22e>
			if (res != FR_OK) break;
 800bb22:	bf00      	nop
 800bb24:	e002      	b.n	800bb2c <put_fat+0x22e>
			if (res != FR_OK) break;
 800bb26:	bf00      	nop
 800bb28:	e000      	b.n	800bb2c <put_fat+0x22e>
			if (res != FR_OK) break;
 800bb2a:	bf00      	nop
	return res;
 800bb2c:	7ffb      	ldrb	r3, [r7, #31]
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	3724      	adds	r7, #36	; 0x24
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd90      	pop	{r4, r7, pc}

0800bb36 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800bb36:	b580      	push	{r7, lr}
 800bb38:	b088      	sub	sp, #32
 800bb3a:	af00      	add	r7, sp, #0
 800bb3c:	60f8      	str	r0, [r7, #12]
 800bb3e:	60b9      	str	r1, [r7, #8]
 800bb40:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800bb42:	2300      	movs	r3, #0
 800bb44:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	2b01      	cmp	r3, #1
 800bb50:	d904      	bls.n	800bb5c <remove_chain+0x26>
 800bb52:	69bb      	ldr	r3, [r7, #24]
 800bb54:	699b      	ldr	r3, [r3, #24]
 800bb56:	68ba      	ldr	r2, [r7, #8]
 800bb58:	429a      	cmp	r2, r3
 800bb5a:	d301      	bcc.n	800bb60 <remove_chain+0x2a>
 800bb5c:	2302      	movs	r3, #2
 800bb5e:	e04b      	b.n	800bbf8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d00c      	beq.n	800bb80 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800bb66:	f04f 32ff 	mov.w	r2, #4294967295
 800bb6a:	6879      	ldr	r1, [r7, #4]
 800bb6c:	69b8      	ldr	r0, [r7, #24]
 800bb6e:	f7ff fec6 	bl	800b8fe <put_fat>
 800bb72:	4603      	mov	r3, r0
 800bb74:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800bb76:	7ffb      	ldrb	r3, [r7, #31]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d001      	beq.n	800bb80 <remove_chain+0x4a>
 800bb7c:	7ffb      	ldrb	r3, [r7, #31]
 800bb7e:	e03b      	b.n	800bbf8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800bb80:	68b9      	ldr	r1, [r7, #8]
 800bb82:	68f8      	ldr	r0, [r7, #12]
 800bb84:	f7ff fde7 	bl	800b756 <get_fat>
 800bb88:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d031      	beq.n	800bbf4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	2b01      	cmp	r3, #1
 800bb94:	d101      	bne.n	800bb9a <remove_chain+0x64>
 800bb96:	2302      	movs	r3, #2
 800bb98:	e02e      	b.n	800bbf8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bba0:	d101      	bne.n	800bba6 <remove_chain+0x70>
 800bba2:	2301      	movs	r3, #1
 800bba4:	e028      	b.n	800bbf8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800bba6:	2200      	movs	r2, #0
 800bba8:	68b9      	ldr	r1, [r7, #8]
 800bbaa:	69b8      	ldr	r0, [r7, #24]
 800bbac:	f7ff fea7 	bl	800b8fe <put_fat>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800bbb4:	7ffb      	ldrb	r3, [r7, #31]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d001      	beq.n	800bbbe <remove_chain+0x88>
 800bbba:	7ffb      	ldrb	r3, [r7, #31]
 800bbbc:	e01c      	b.n	800bbf8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800bbbe:	69bb      	ldr	r3, [r7, #24]
 800bbc0:	695a      	ldr	r2, [r3, #20]
 800bbc2:	69bb      	ldr	r3, [r7, #24]
 800bbc4:	699b      	ldr	r3, [r3, #24]
 800bbc6:	3b02      	subs	r3, #2
 800bbc8:	429a      	cmp	r2, r3
 800bbca:	d20b      	bcs.n	800bbe4 <remove_chain+0xae>
			fs->free_clst++;
 800bbcc:	69bb      	ldr	r3, [r7, #24]
 800bbce:	695b      	ldr	r3, [r3, #20]
 800bbd0:	1c5a      	adds	r2, r3, #1
 800bbd2:	69bb      	ldr	r3, [r7, #24]
 800bbd4:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800bbd6:	69bb      	ldr	r3, [r7, #24]
 800bbd8:	791b      	ldrb	r3, [r3, #4]
 800bbda:	f043 0301 	orr.w	r3, r3, #1
 800bbde:	b2da      	uxtb	r2, r3
 800bbe0:	69bb      	ldr	r3, [r7, #24]
 800bbe2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800bbe4:	697b      	ldr	r3, [r7, #20]
 800bbe6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800bbe8:	69bb      	ldr	r3, [r7, #24]
 800bbea:	699b      	ldr	r3, [r3, #24]
 800bbec:	68ba      	ldr	r2, [r7, #8]
 800bbee:	429a      	cmp	r2, r3
 800bbf0:	d3c6      	bcc.n	800bb80 <remove_chain+0x4a>
 800bbf2:	e000      	b.n	800bbf6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800bbf4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800bbf6:	2300      	movs	r3, #0
}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	3720      	adds	r7, #32
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}

0800bc00 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b088      	sub	sp, #32
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
 800bc08:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d10d      	bne.n	800bc32 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	691b      	ldr	r3, [r3, #16]
 800bc1a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800bc1c:	69bb      	ldr	r3, [r7, #24]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d004      	beq.n	800bc2c <create_chain+0x2c>
 800bc22:	693b      	ldr	r3, [r7, #16]
 800bc24:	699b      	ldr	r3, [r3, #24]
 800bc26:	69ba      	ldr	r2, [r7, #24]
 800bc28:	429a      	cmp	r2, r3
 800bc2a:	d31b      	bcc.n	800bc64 <create_chain+0x64>
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	61bb      	str	r3, [r7, #24]
 800bc30:	e018      	b.n	800bc64 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800bc32:	6839      	ldr	r1, [r7, #0]
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f7ff fd8e 	bl	800b756 <get_fat>
 800bc3a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	2b01      	cmp	r3, #1
 800bc40:	d801      	bhi.n	800bc46 <create_chain+0x46>
 800bc42:	2301      	movs	r3, #1
 800bc44:	e070      	b.n	800bd28 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc4c:	d101      	bne.n	800bc52 <create_chain+0x52>
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	e06a      	b.n	800bd28 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	699b      	ldr	r3, [r3, #24]
 800bc56:	68fa      	ldr	r2, [r7, #12]
 800bc58:	429a      	cmp	r2, r3
 800bc5a:	d201      	bcs.n	800bc60 <create_chain+0x60>
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	e063      	b.n	800bd28 <create_chain+0x128>
		scl = clst;
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800bc64:	69bb      	ldr	r3, [r7, #24]
 800bc66:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800bc68:	69fb      	ldr	r3, [r7, #28]
 800bc6a:	3301      	adds	r3, #1
 800bc6c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800bc6e:	693b      	ldr	r3, [r7, #16]
 800bc70:	699b      	ldr	r3, [r3, #24]
 800bc72:	69fa      	ldr	r2, [r7, #28]
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d307      	bcc.n	800bc88 <create_chain+0x88>
				ncl = 2;
 800bc78:	2302      	movs	r3, #2
 800bc7a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800bc7c:	69fa      	ldr	r2, [r7, #28]
 800bc7e:	69bb      	ldr	r3, [r7, #24]
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d901      	bls.n	800bc88 <create_chain+0x88>
 800bc84:	2300      	movs	r3, #0
 800bc86:	e04f      	b.n	800bd28 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800bc88:	69f9      	ldr	r1, [r7, #28]
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	f7ff fd63 	bl	800b756 <get_fat>
 800bc90:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d00e      	beq.n	800bcb6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	2b01      	cmp	r3, #1
 800bc9c:	d003      	beq.n	800bca6 <create_chain+0xa6>
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bca4:	d101      	bne.n	800bcaa <create_chain+0xaa>
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	e03e      	b.n	800bd28 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800bcaa:	69fa      	ldr	r2, [r7, #28]
 800bcac:	69bb      	ldr	r3, [r7, #24]
 800bcae:	429a      	cmp	r2, r3
 800bcb0:	d1da      	bne.n	800bc68 <create_chain+0x68>
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	e038      	b.n	800bd28 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800bcb6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800bcb8:	f04f 32ff 	mov.w	r2, #4294967295
 800bcbc:	69f9      	ldr	r1, [r7, #28]
 800bcbe:	6938      	ldr	r0, [r7, #16]
 800bcc0:	f7ff fe1d 	bl	800b8fe <put_fat>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800bcc8:	7dfb      	ldrb	r3, [r7, #23]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d109      	bne.n	800bce2 <create_chain+0xe2>
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d006      	beq.n	800bce2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800bcd4:	69fa      	ldr	r2, [r7, #28]
 800bcd6:	6839      	ldr	r1, [r7, #0]
 800bcd8:	6938      	ldr	r0, [r7, #16]
 800bcda:	f7ff fe10 	bl	800b8fe <put_fat>
 800bcde:	4603      	mov	r3, r0
 800bce0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800bce2:	7dfb      	ldrb	r3, [r7, #23]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d116      	bne.n	800bd16 <create_chain+0x116>
		fs->last_clst = ncl;
 800bce8:	693b      	ldr	r3, [r7, #16]
 800bcea:	69fa      	ldr	r2, [r7, #28]
 800bcec:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	695a      	ldr	r2, [r3, #20]
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	699b      	ldr	r3, [r3, #24]
 800bcf6:	3b02      	subs	r3, #2
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	d804      	bhi.n	800bd06 <create_chain+0x106>
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	695b      	ldr	r3, [r3, #20]
 800bd00:	1e5a      	subs	r2, r3, #1
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800bd06:	693b      	ldr	r3, [r7, #16]
 800bd08:	791b      	ldrb	r3, [r3, #4]
 800bd0a:	f043 0301 	orr.w	r3, r3, #1
 800bd0e:	b2da      	uxtb	r2, r3
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	711a      	strb	r2, [r3, #4]
 800bd14:	e007      	b.n	800bd26 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800bd16:	7dfb      	ldrb	r3, [r7, #23]
 800bd18:	2b01      	cmp	r3, #1
 800bd1a:	d102      	bne.n	800bd22 <create_chain+0x122>
 800bd1c:	f04f 33ff 	mov.w	r3, #4294967295
 800bd20:	e000      	b.n	800bd24 <create_chain+0x124>
 800bd22:	2301      	movs	r3, #1
 800bd24:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800bd26:	69fb      	ldr	r3, [r7, #28]
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3720      	adds	r7, #32
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}

0800bd30 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800bd30:	b480      	push	{r7}
 800bd32:	b087      	sub	sp, #28
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
 800bd38:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd44:	3304      	adds	r3, #4
 800bd46:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	899b      	ldrh	r3, [r3, #12]
 800bd4c:	461a      	mov	r2, r3
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd54:	68fa      	ldr	r2, [r7, #12]
 800bd56:	8952      	ldrh	r2, [r2, #10]
 800bd58:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd5c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bd5e:	693b      	ldr	r3, [r7, #16]
 800bd60:	1d1a      	adds	r2, r3, #4
 800bd62:	613a      	str	r2, [r7, #16]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800bd68:	68bb      	ldr	r3, [r7, #8]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d101      	bne.n	800bd72 <clmt_clust+0x42>
 800bd6e:	2300      	movs	r3, #0
 800bd70:	e010      	b.n	800bd94 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800bd72:	697a      	ldr	r2, [r7, #20]
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d307      	bcc.n	800bd8a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800bd7a:	697a      	ldr	r2, [r7, #20]
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	1ad3      	subs	r3, r2, r3
 800bd80:	617b      	str	r3, [r7, #20]
 800bd82:	693b      	ldr	r3, [r7, #16]
 800bd84:	3304      	adds	r3, #4
 800bd86:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bd88:	e7e9      	b.n	800bd5e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800bd8a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800bd8c:	693b      	ldr	r3, [r7, #16]
 800bd8e:	681a      	ldr	r2, [r3, #0]
 800bd90:	697b      	ldr	r3, [r7, #20]
 800bd92:	4413      	add	r3, r2
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	371c      	adds	r7, #28
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr

0800bda0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b086      	sub	sp, #24
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bdb6:	d204      	bcs.n	800bdc2 <dir_sdi+0x22>
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	f003 031f 	and.w	r3, r3, #31
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d001      	beq.n	800bdc6 <dir_sdi+0x26>
		return FR_INT_ERR;
 800bdc2:	2302      	movs	r3, #2
 800bdc4:	e071      	b.n	800beaa <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	683a      	ldr	r2, [r7, #0]
 800bdca:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	689b      	ldr	r3, [r3, #8]
 800bdd0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800bdd2:	697b      	ldr	r3, [r7, #20]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d106      	bne.n	800bde6 <dir_sdi+0x46>
 800bdd8:	693b      	ldr	r3, [r7, #16]
 800bdda:	781b      	ldrb	r3, [r3, #0]
 800bddc:	2b02      	cmp	r3, #2
 800bdde:	d902      	bls.n	800bde6 <dir_sdi+0x46>
		clst = fs->dirbase;
 800bde0:	693b      	ldr	r3, [r7, #16]
 800bde2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bde4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800bde6:	697b      	ldr	r3, [r7, #20]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d10c      	bne.n	800be06 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	095b      	lsrs	r3, r3, #5
 800bdf0:	693a      	ldr	r2, [r7, #16]
 800bdf2:	8912      	ldrh	r2, [r2, #8]
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d301      	bcc.n	800bdfc <dir_sdi+0x5c>
 800bdf8:	2302      	movs	r3, #2
 800bdfa:	e056      	b.n	800beaa <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	61da      	str	r2, [r3, #28]
 800be04:	e02d      	b.n	800be62 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800be06:	693b      	ldr	r3, [r7, #16]
 800be08:	895b      	ldrh	r3, [r3, #10]
 800be0a:	461a      	mov	r2, r3
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	899b      	ldrh	r3, [r3, #12]
 800be10:	fb02 f303 	mul.w	r3, r2, r3
 800be14:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800be16:	e019      	b.n	800be4c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6979      	ldr	r1, [r7, #20]
 800be1c:	4618      	mov	r0, r3
 800be1e:	f7ff fc9a 	bl	800b756 <get_fat>
 800be22:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800be24:	697b      	ldr	r3, [r7, #20]
 800be26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be2a:	d101      	bne.n	800be30 <dir_sdi+0x90>
 800be2c:	2301      	movs	r3, #1
 800be2e:	e03c      	b.n	800beaa <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	2b01      	cmp	r3, #1
 800be34:	d904      	bls.n	800be40 <dir_sdi+0xa0>
 800be36:	693b      	ldr	r3, [r7, #16]
 800be38:	699b      	ldr	r3, [r3, #24]
 800be3a:	697a      	ldr	r2, [r7, #20]
 800be3c:	429a      	cmp	r2, r3
 800be3e:	d301      	bcc.n	800be44 <dir_sdi+0xa4>
 800be40:	2302      	movs	r3, #2
 800be42:	e032      	b.n	800beaa <dir_sdi+0x10a>
			ofs -= csz;
 800be44:	683a      	ldr	r2, [r7, #0]
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	1ad3      	subs	r3, r2, r3
 800be4a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800be4c:	683a      	ldr	r2, [r7, #0]
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	429a      	cmp	r2, r3
 800be52:	d2e1      	bcs.n	800be18 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800be54:	6979      	ldr	r1, [r7, #20]
 800be56:	6938      	ldr	r0, [r7, #16]
 800be58:	f7ff fc5e 	bl	800b718 <clust2sect>
 800be5c:	4602      	mov	r2, r0
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	697a      	ldr	r2, [r7, #20]
 800be66:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	69db      	ldr	r3, [r3, #28]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d101      	bne.n	800be74 <dir_sdi+0xd4>
 800be70:	2302      	movs	r3, #2
 800be72:	e01a      	b.n	800beaa <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	69da      	ldr	r2, [r3, #28]
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	899b      	ldrh	r3, [r3, #12]
 800be7c:	4619      	mov	r1, r3
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	fbb3 f3f1 	udiv	r3, r3, r1
 800be84:	441a      	add	r2, r3
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	899b      	ldrh	r3, [r3, #12]
 800be94:	461a      	mov	r2, r3
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	fbb3 f0f2 	udiv	r0, r3, r2
 800be9c:	fb00 f202 	mul.w	r2, r0, r2
 800bea0:	1a9b      	subs	r3, r3, r2
 800bea2:	18ca      	adds	r2, r1, r3
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bea8:	2300      	movs	r3, #0
}
 800beaa:	4618      	mov	r0, r3
 800beac:	3718      	adds	r7, #24
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd80      	pop	{r7, pc}

0800beb2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800beb2:	b580      	push	{r7, lr}
 800beb4:	b086      	sub	sp, #24
 800beb6:	af00      	add	r7, sp, #0
 800beb8:	6078      	str	r0, [r7, #4]
 800beba:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	695b      	ldr	r3, [r3, #20]
 800bec6:	3320      	adds	r3, #32
 800bec8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	69db      	ldr	r3, [r3, #28]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d003      	beq.n	800beda <dir_next+0x28>
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bed8:	d301      	bcc.n	800bede <dir_next+0x2c>
 800beda:	2304      	movs	r3, #4
 800bedc:	e0bb      	b.n	800c056 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	899b      	ldrh	r3, [r3, #12]
 800bee2:	461a      	mov	r2, r3
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	fbb3 f1f2 	udiv	r1, r3, r2
 800beea:	fb01 f202 	mul.w	r2, r1, r2
 800beee:	1a9b      	subs	r3, r3, r2
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	f040 809d 	bne.w	800c030 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	69db      	ldr	r3, [r3, #28]
 800befa:	1c5a      	adds	r2, r3, #1
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	699b      	ldr	r3, [r3, #24]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d10b      	bne.n	800bf20 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	095b      	lsrs	r3, r3, #5
 800bf0c:	68fa      	ldr	r2, [r7, #12]
 800bf0e:	8912      	ldrh	r2, [r2, #8]
 800bf10:	4293      	cmp	r3, r2
 800bf12:	f0c0 808d 	bcc.w	800c030 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2200      	movs	r2, #0
 800bf1a:	61da      	str	r2, [r3, #28]
 800bf1c:	2304      	movs	r3, #4
 800bf1e:	e09a      	b.n	800c056 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	899b      	ldrh	r3, [r3, #12]
 800bf24:	461a      	mov	r2, r3
 800bf26:	68bb      	ldr	r3, [r7, #8]
 800bf28:	fbb3 f3f2 	udiv	r3, r3, r2
 800bf2c:	68fa      	ldr	r2, [r7, #12]
 800bf2e:	8952      	ldrh	r2, [r2, #10]
 800bf30:	3a01      	subs	r2, #1
 800bf32:	4013      	ands	r3, r2
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d17b      	bne.n	800c030 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800bf38:	687a      	ldr	r2, [r7, #4]
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	699b      	ldr	r3, [r3, #24]
 800bf3e:	4619      	mov	r1, r3
 800bf40:	4610      	mov	r0, r2
 800bf42:	f7ff fc08 	bl	800b756 <get_fat>
 800bf46:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800bf48:	697b      	ldr	r3, [r7, #20]
 800bf4a:	2b01      	cmp	r3, #1
 800bf4c:	d801      	bhi.n	800bf52 <dir_next+0xa0>
 800bf4e:	2302      	movs	r3, #2
 800bf50:	e081      	b.n	800c056 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf58:	d101      	bne.n	800bf5e <dir_next+0xac>
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	e07b      	b.n	800c056 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	699b      	ldr	r3, [r3, #24]
 800bf62:	697a      	ldr	r2, [r7, #20]
 800bf64:	429a      	cmp	r2, r3
 800bf66:	d359      	bcc.n	800c01c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d104      	bne.n	800bf78 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2200      	movs	r2, #0
 800bf72:	61da      	str	r2, [r3, #28]
 800bf74:	2304      	movs	r3, #4
 800bf76:	e06e      	b.n	800c056 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800bf78:	687a      	ldr	r2, [r7, #4]
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	699b      	ldr	r3, [r3, #24]
 800bf7e:	4619      	mov	r1, r3
 800bf80:	4610      	mov	r0, r2
 800bf82:	f7ff fe3d 	bl	800bc00 <create_chain>
 800bf86:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800bf88:	697b      	ldr	r3, [r7, #20]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d101      	bne.n	800bf92 <dir_next+0xe0>
 800bf8e:	2307      	movs	r3, #7
 800bf90:	e061      	b.n	800c056 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800bf92:	697b      	ldr	r3, [r7, #20]
 800bf94:	2b01      	cmp	r3, #1
 800bf96:	d101      	bne.n	800bf9c <dir_next+0xea>
 800bf98:	2302      	movs	r3, #2
 800bf9a:	e05c      	b.n	800c056 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bf9c:	697b      	ldr	r3, [r7, #20]
 800bf9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfa2:	d101      	bne.n	800bfa8 <dir_next+0xf6>
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	e056      	b.n	800c056 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800bfa8:	68f8      	ldr	r0, [r7, #12]
 800bfaa:	f7ff fad3 	bl	800b554 <sync_window>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d001      	beq.n	800bfb8 <dir_next+0x106>
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	e04e      	b.n	800c056 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	899b      	ldrh	r3, [r3, #12]
 800bfc2:	461a      	mov	r2, r3
 800bfc4:	2100      	movs	r1, #0
 800bfc6:	f7ff f938 	bl	800b23a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bfca:	2300      	movs	r3, #0
 800bfcc:	613b      	str	r3, [r7, #16]
 800bfce:	6979      	ldr	r1, [r7, #20]
 800bfd0:	68f8      	ldr	r0, [r7, #12]
 800bfd2:	f7ff fba1 	bl	800b718 <clust2sect>
 800bfd6:	4602      	mov	r2, r0
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	631a      	str	r2, [r3, #48]	; 0x30
 800bfdc:	e012      	b.n	800c004 <dir_next+0x152>
						fs->wflag = 1;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	2201      	movs	r2, #1
 800bfe2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800bfe4:	68f8      	ldr	r0, [r7, #12]
 800bfe6:	f7ff fab5 	bl	800b554 <sync_window>
 800bfea:	4603      	mov	r3, r0
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d001      	beq.n	800bff4 <dir_next+0x142>
 800bff0:	2301      	movs	r3, #1
 800bff2:	e030      	b.n	800c056 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bff4:	693b      	ldr	r3, [r7, #16]
 800bff6:	3301      	adds	r3, #1
 800bff8:	613b      	str	r3, [r7, #16]
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bffe:	1c5a      	adds	r2, r3, #1
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	631a      	str	r2, [r3, #48]	; 0x30
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	895b      	ldrh	r3, [r3, #10]
 800c008:	461a      	mov	r2, r3
 800c00a:	693b      	ldr	r3, [r7, #16]
 800c00c:	4293      	cmp	r3, r2
 800c00e:	d3e6      	bcc.n	800bfde <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c014:	693b      	ldr	r3, [r7, #16]
 800c016:	1ad2      	subs	r2, r2, r3
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	697a      	ldr	r2, [r7, #20]
 800c020:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c022:	6979      	ldr	r1, [r7, #20]
 800c024:	68f8      	ldr	r0, [r7, #12]
 800c026:	f7ff fb77 	bl	800b718 <clust2sect>
 800c02a:	4602      	mov	r2, r0
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	68ba      	ldr	r2, [r7, #8]
 800c034:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	899b      	ldrh	r3, [r3, #12]
 800c040:	461a      	mov	r2, r3
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	fbb3 f0f2 	udiv	r0, r3, r2
 800c048:	fb00 f202 	mul.w	r2, r0, r2
 800c04c:	1a9b      	subs	r3, r3, r2
 800c04e:	18ca      	adds	r2, r1, r3
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c054:	2300      	movs	r3, #0
}
 800c056:	4618      	mov	r0, r3
 800c058:	3718      	adds	r7, #24
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}

0800c05e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c05e:	b580      	push	{r7, lr}
 800c060:	b086      	sub	sp, #24
 800c062:	af00      	add	r7, sp, #0
 800c064:	6078      	str	r0, [r7, #4]
 800c066:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c06e:	2100      	movs	r1, #0
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f7ff fe95 	bl	800bda0 <dir_sdi>
 800c076:	4603      	mov	r3, r0
 800c078:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c07a:	7dfb      	ldrb	r3, [r7, #23]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d12b      	bne.n	800c0d8 <dir_alloc+0x7a>
		n = 0;
 800c080:	2300      	movs	r3, #0
 800c082:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	69db      	ldr	r3, [r3, #28]
 800c088:	4619      	mov	r1, r3
 800c08a:	68f8      	ldr	r0, [r7, #12]
 800c08c:	f7ff faa6 	bl	800b5dc <move_window>
 800c090:	4603      	mov	r3, r0
 800c092:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c094:	7dfb      	ldrb	r3, [r7, #23]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d11d      	bne.n	800c0d6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6a1b      	ldr	r3, [r3, #32]
 800c09e:	781b      	ldrb	r3, [r3, #0]
 800c0a0:	2be5      	cmp	r3, #229	; 0xe5
 800c0a2:	d004      	beq.n	800c0ae <dir_alloc+0x50>
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	6a1b      	ldr	r3, [r3, #32]
 800c0a8:	781b      	ldrb	r3, [r3, #0]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d107      	bne.n	800c0be <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c0ae:	693b      	ldr	r3, [r7, #16]
 800c0b0:	3301      	adds	r3, #1
 800c0b2:	613b      	str	r3, [r7, #16]
 800c0b4:	693a      	ldr	r2, [r7, #16]
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	d102      	bne.n	800c0c2 <dir_alloc+0x64>
 800c0bc:	e00c      	b.n	800c0d8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c0be:	2300      	movs	r3, #0
 800c0c0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c0c2:	2101      	movs	r1, #1
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f7ff fef4 	bl	800beb2 <dir_next>
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c0ce:	7dfb      	ldrb	r3, [r7, #23]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d0d7      	beq.n	800c084 <dir_alloc+0x26>
 800c0d4:	e000      	b.n	800c0d8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c0d6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c0d8:	7dfb      	ldrb	r3, [r7, #23]
 800c0da:	2b04      	cmp	r3, #4
 800c0dc:	d101      	bne.n	800c0e2 <dir_alloc+0x84>
 800c0de:	2307      	movs	r3, #7
 800c0e0:	75fb      	strb	r3, [r7, #23]
	return res;
 800c0e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	3718      	adds	r7, #24
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}

0800c0ec <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b084      	sub	sp, #16
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
 800c0f4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	331a      	adds	r3, #26
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	f7fe fffa 	bl	800b0f4 <ld_word>
 800c100:	4603      	mov	r3, r0
 800c102:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	781b      	ldrb	r3, [r3, #0]
 800c108:	2b03      	cmp	r3, #3
 800c10a:	d109      	bne.n	800c120 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	3314      	adds	r3, #20
 800c110:	4618      	mov	r0, r3
 800c112:	f7fe ffef 	bl	800b0f4 <ld_word>
 800c116:	4603      	mov	r3, r0
 800c118:	041b      	lsls	r3, r3, #16
 800c11a:	68fa      	ldr	r2, [r7, #12]
 800c11c:	4313      	orrs	r3, r2
 800c11e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c120:	68fb      	ldr	r3, [r7, #12]
}
 800c122:	4618      	mov	r0, r3
 800c124:	3710      	adds	r7, #16
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}

0800c12a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c12a:	b580      	push	{r7, lr}
 800c12c:	b084      	sub	sp, #16
 800c12e:	af00      	add	r7, sp, #0
 800c130:	60f8      	str	r0, [r7, #12]
 800c132:	60b9      	str	r1, [r7, #8]
 800c134:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	331a      	adds	r3, #26
 800c13a:	687a      	ldr	r2, [r7, #4]
 800c13c:	b292      	uxth	r2, r2
 800c13e:	4611      	mov	r1, r2
 800c140:	4618      	mov	r0, r3
 800c142:	f7ff f812 	bl	800b16a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	781b      	ldrb	r3, [r3, #0]
 800c14a:	2b03      	cmp	r3, #3
 800c14c:	d109      	bne.n	800c162 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	f103 0214 	add.w	r2, r3, #20
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	0c1b      	lsrs	r3, r3, #16
 800c158:	b29b      	uxth	r3, r3
 800c15a:	4619      	mov	r1, r3
 800c15c:	4610      	mov	r0, r2
 800c15e:	f7ff f804 	bl	800b16a <st_word>
	}
}
 800c162:	bf00      	nop
 800c164:	3710      	adds	r7, #16
 800c166:	46bd      	mov	sp, r7
 800c168:	bd80      	pop	{r7, pc}

0800c16a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c16a:	b580      	push	{r7, lr}
 800c16c:	b086      	sub	sp, #24
 800c16e:	af00      	add	r7, sp, #0
 800c170:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c178:	2100      	movs	r1, #0
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f7ff fe10 	bl	800bda0 <dir_sdi>
 800c180:	4603      	mov	r3, r0
 800c182:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c184:	7dfb      	ldrb	r3, [r7, #23]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d001      	beq.n	800c18e <dir_find+0x24>
 800c18a:	7dfb      	ldrb	r3, [r7, #23]
 800c18c:	e03e      	b.n	800c20c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	69db      	ldr	r3, [r3, #28]
 800c192:	4619      	mov	r1, r3
 800c194:	6938      	ldr	r0, [r7, #16]
 800c196:	f7ff fa21 	bl	800b5dc <move_window>
 800c19a:	4603      	mov	r3, r0
 800c19c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c19e:	7dfb      	ldrb	r3, [r7, #23]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d12f      	bne.n	800c204 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	6a1b      	ldr	r3, [r3, #32]
 800c1a8:	781b      	ldrb	r3, [r3, #0]
 800c1aa:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c1ac:	7bfb      	ldrb	r3, [r7, #15]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d102      	bne.n	800c1b8 <dir_find+0x4e>
 800c1b2:	2304      	movs	r3, #4
 800c1b4:	75fb      	strb	r3, [r7, #23]
 800c1b6:	e028      	b.n	800c20a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	6a1b      	ldr	r3, [r3, #32]
 800c1bc:	330b      	adds	r3, #11
 800c1be:	781b      	ldrb	r3, [r3, #0]
 800c1c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c1c4:	b2da      	uxtb	r2, r3
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	6a1b      	ldr	r3, [r3, #32]
 800c1ce:	330b      	adds	r3, #11
 800c1d0:	781b      	ldrb	r3, [r3, #0]
 800c1d2:	f003 0308 	and.w	r3, r3, #8
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d10a      	bne.n	800c1f0 <dir_find+0x86>
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6a18      	ldr	r0, [r3, #32]
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	3324      	adds	r3, #36	; 0x24
 800c1e2:	220b      	movs	r2, #11
 800c1e4:	4619      	mov	r1, r3
 800c1e6:	f7ff f843 	bl	800b270 <mem_cmp>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d00b      	beq.n	800c208 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c1f0:	2100      	movs	r1, #0
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f7ff fe5d 	bl	800beb2 <dir_next>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c1fc:	7dfb      	ldrb	r3, [r7, #23]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d0c5      	beq.n	800c18e <dir_find+0x24>
 800c202:	e002      	b.n	800c20a <dir_find+0xa0>
		if (res != FR_OK) break;
 800c204:	bf00      	nop
 800c206:	e000      	b.n	800c20a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c208:	bf00      	nop

	return res;
 800c20a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	3718      	adds	r7, #24
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}

0800c214 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b084      	sub	sp, #16
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c222:	2101      	movs	r1, #1
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f7ff ff1a 	bl	800c05e <dir_alloc>
 800c22a:	4603      	mov	r3, r0
 800c22c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c22e:	7bfb      	ldrb	r3, [r7, #15]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d11c      	bne.n	800c26e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	69db      	ldr	r3, [r3, #28]
 800c238:	4619      	mov	r1, r3
 800c23a:	68b8      	ldr	r0, [r7, #8]
 800c23c:	f7ff f9ce 	bl	800b5dc <move_window>
 800c240:	4603      	mov	r3, r0
 800c242:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c244:	7bfb      	ldrb	r3, [r7, #15]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d111      	bne.n	800c26e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6a1b      	ldr	r3, [r3, #32]
 800c24e:	2220      	movs	r2, #32
 800c250:	2100      	movs	r1, #0
 800c252:	4618      	mov	r0, r3
 800c254:	f7fe fff1 	bl	800b23a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6a18      	ldr	r0, [r3, #32]
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	3324      	adds	r3, #36	; 0x24
 800c260:	220b      	movs	r2, #11
 800c262:	4619      	mov	r1, r3
 800c264:	f7fe ffc8 	bl	800b1f8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c268:	68bb      	ldr	r3, [r7, #8]
 800c26a:	2201      	movs	r2, #1
 800c26c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c26e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c270:	4618      	mov	r0, r3
 800c272:	3710      	adds	r7, #16
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}

0800c278 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b086      	sub	sp, #24
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
 800c280:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	2200      	movs	r2, #0
 800c286:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	69db      	ldr	r3, [r3, #28]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d04e      	beq.n	800c32e <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800c290:	2300      	movs	r3, #0
 800c292:	613b      	str	r3, [r7, #16]
 800c294:	693b      	ldr	r3, [r7, #16]
 800c296:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800c298:	e021      	b.n	800c2de <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	6a1a      	ldr	r2, [r3, #32]
 800c29e:	697b      	ldr	r3, [r7, #20]
 800c2a0:	1c59      	adds	r1, r3, #1
 800c2a2:	6179      	str	r1, [r7, #20]
 800c2a4:	4413      	add	r3, r2
 800c2a6:	781b      	ldrb	r3, [r3, #0]
 800c2a8:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800c2aa:	7bfb      	ldrb	r3, [r7, #15]
 800c2ac:	2b20      	cmp	r3, #32
 800c2ae:	d100      	bne.n	800c2b2 <get_fileinfo+0x3a>
 800c2b0:	e015      	b.n	800c2de <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800c2b2:	7bfb      	ldrb	r3, [r7, #15]
 800c2b4:	2b05      	cmp	r3, #5
 800c2b6:	d101      	bne.n	800c2bc <get_fileinfo+0x44>
 800c2b8:	23e5      	movs	r3, #229	; 0xe5
 800c2ba:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800c2bc:	697b      	ldr	r3, [r7, #20]
 800c2be:	2b09      	cmp	r3, #9
 800c2c0:	d106      	bne.n	800c2d0 <get_fileinfo+0x58>
 800c2c2:	693b      	ldr	r3, [r7, #16]
 800c2c4:	1c5a      	adds	r2, r3, #1
 800c2c6:	613a      	str	r2, [r7, #16]
 800c2c8:	683a      	ldr	r2, [r7, #0]
 800c2ca:	4413      	add	r3, r2
 800c2cc:	222e      	movs	r2, #46	; 0x2e
 800c2ce:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	1c5a      	adds	r2, r3, #1
 800c2d4:	613a      	str	r2, [r7, #16]
 800c2d6:	683a      	ldr	r2, [r7, #0]
 800c2d8:	4413      	add	r3, r2
 800c2da:	7bfa      	ldrb	r2, [r7, #15]
 800c2dc:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800c2de:	697b      	ldr	r3, [r7, #20]
 800c2e0:	2b0a      	cmp	r3, #10
 800c2e2:	d9da      	bls.n	800c29a <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800c2e4:	683a      	ldr	r2, [r7, #0]
 800c2e6:	693b      	ldr	r3, [r7, #16]
 800c2e8:	4413      	add	r3, r2
 800c2ea:	3309      	adds	r3, #9
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	6a1b      	ldr	r3, [r3, #32]
 800c2f4:	7ada      	ldrb	r2, [r3, #11]
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6a1b      	ldr	r3, [r3, #32]
 800c2fe:	331c      	adds	r3, #28
 800c300:	4618      	mov	r0, r3
 800c302:	f7fe ff0f 	bl	800b124 <ld_dword>
 800c306:	4602      	mov	r2, r0
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	6a1b      	ldr	r3, [r3, #32]
 800c310:	3316      	adds	r3, #22
 800c312:	4618      	mov	r0, r3
 800c314:	f7fe ff06 	bl	800b124 <ld_dword>
 800c318:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	b29a      	uxth	r2, r3
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	80da      	strh	r2, [r3, #6]
 800c322:	68bb      	ldr	r3, [r7, #8]
 800c324:	0c1b      	lsrs	r3, r3, #16
 800c326:	b29a      	uxth	r2, r3
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	809a      	strh	r2, [r3, #4]
 800c32c:	e000      	b.n	800c330 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c32e:	bf00      	nop
}
 800c330:	3718      	adds	r7, #24
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}
	...

0800c338 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b088      	sub	sp, #32
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
 800c340:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	60fb      	str	r3, [r7, #12]
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	3324      	adds	r3, #36	; 0x24
 800c34c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c34e:	220b      	movs	r2, #11
 800c350:	2120      	movs	r1, #32
 800c352:	68b8      	ldr	r0, [r7, #8]
 800c354:	f7fe ff71 	bl	800b23a <mem_set>
	si = i = 0; ni = 8;
 800c358:	2300      	movs	r3, #0
 800c35a:	613b      	str	r3, [r7, #16]
 800c35c:	693b      	ldr	r3, [r7, #16]
 800c35e:	61fb      	str	r3, [r7, #28]
 800c360:	2308      	movs	r3, #8
 800c362:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c364:	69fb      	ldr	r3, [r7, #28]
 800c366:	1c5a      	adds	r2, r3, #1
 800c368:	61fa      	str	r2, [r7, #28]
 800c36a:	68fa      	ldr	r2, [r7, #12]
 800c36c:	4413      	add	r3, r2
 800c36e:	781b      	ldrb	r3, [r3, #0]
 800c370:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c372:	7efb      	ldrb	r3, [r7, #27]
 800c374:	2b20      	cmp	r3, #32
 800c376:	d94e      	bls.n	800c416 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c378:	7efb      	ldrb	r3, [r7, #27]
 800c37a:	2b2f      	cmp	r3, #47	; 0x2f
 800c37c:	d006      	beq.n	800c38c <create_name+0x54>
 800c37e:	7efb      	ldrb	r3, [r7, #27]
 800c380:	2b5c      	cmp	r3, #92	; 0x5c
 800c382:	d110      	bne.n	800c3a6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c384:	e002      	b.n	800c38c <create_name+0x54>
 800c386:	69fb      	ldr	r3, [r7, #28]
 800c388:	3301      	adds	r3, #1
 800c38a:	61fb      	str	r3, [r7, #28]
 800c38c:	68fa      	ldr	r2, [r7, #12]
 800c38e:	69fb      	ldr	r3, [r7, #28]
 800c390:	4413      	add	r3, r2
 800c392:	781b      	ldrb	r3, [r3, #0]
 800c394:	2b2f      	cmp	r3, #47	; 0x2f
 800c396:	d0f6      	beq.n	800c386 <create_name+0x4e>
 800c398:	68fa      	ldr	r2, [r7, #12]
 800c39a:	69fb      	ldr	r3, [r7, #28]
 800c39c:	4413      	add	r3, r2
 800c39e:	781b      	ldrb	r3, [r3, #0]
 800c3a0:	2b5c      	cmp	r3, #92	; 0x5c
 800c3a2:	d0f0      	beq.n	800c386 <create_name+0x4e>
			break;
 800c3a4:	e038      	b.n	800c418 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c3a6:	7efb      	ldrb	r3, [r7, #27]
 800c3a8:	2b2e      	cmp	r3, #46	; 0x2e
 800c3aa:	d003      	beq.n	800c3b4 <create_name+0x7c>
 800c3ac:	693a      	ldr	r2, [r7, #16]
 800c3ae:	697b      	ldr	r3, [r7, #20]
 800c3b0:	429a      	cmp	r2, r3
 800c3b2:	d30c      	bcc.n	800c3ce <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c3b4:	697b      	ldr	r3, [r7, #20]
 800c3b6:	2b0b      	cmp	r3, #11
 800c3b8:	d002      	beq.n	800c3c0 <create_name+0x88>
 800c3ba:	7efb      	ldrb	r3, [r7, #27]
 800c3bc:	2b2e      	cmp	r3, #46	; 0x2e
 800c3be:	d001      	beq.n	800c3c4 <create_name+0x8c>
 800c3c0:	2306      	movs	r3, #6
 800c3c2:	e044      	b.n	800c44e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c3c4:	2308      	movs	r3, #8
 800c3c6:	613b      	str	r3, [r7, #16]
 800c3c8:	230b      	movs	r3, #11
 800c3ca:	617b      	str	r3, [r7, #20]
			continue;
 800c3cc:	e022      	b.n	800c414 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c3ce:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	da04      	bge.n	800c3e0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c3d6:	7efb      	ldrb	r3, [r7, #27]
 800c3d8:	3b80      	subs	r3, #128	; 0x80
 800c3da:	4a1f      	ldr	r2, [pc, #124]	; (800c458 <create_name+0x120>)
 800c3dc:	5cd3      	ldrb	r3, [r2, r3]
 800c3de:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c3e0:	7efb      	ldrb	r3, [r7, #27]
 800c3e2:	4619      	mov	r1, r3
 800c3e4:	481d      	ldr	r0, [pc, #116]	; (800c45c <create_name+0x124>)
 800c3e6:	f7fe ff6a 	bl	800b2be <chk_chr>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d001      	beq.n	800c3f4 <create_name+0xbc>
 800c3f0:	2306      	movs	r3, #6
 800c3f2:	e02c      	b.n	800c44e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c3f4:	7efb      	ldrb	r3, [r7, #27]
 800c3f6:	2b60      	cmp	r3, #96	; 0x60
 800c3f8:	d905      	bls.n	800c406 <create_name+0xce>
 800c3fa:	7efb      	ldrb	r3, [r7, #27]
 800c3fc:	2b7a      	cmp	r3, #122	; 0x7a
 800c3fe:	d802      	bhi.n	800c406 <create_name+0xce>
 800c400:	7efb      	ldrb	r3, [r7, #27]
 800c402:	3b20      	subs	r3, #32
 800c404:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800c406:	693b      	ldr	r3, [r7, #16]
 800c408:	1c5a      	adds	r2, r3, #1
 800c40a:	613a      	str	r2, [r7, #16]
 800c40c:	68ba      	ldr	r2, [r7, #8]
 800c40e:	4413      	add	r3, r2
 800c410:	7efa      	ldrb	r2, [r7, #27]
 800c412:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c414:	e7a6      	b.n	800c364 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c416:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c418:	68fa      	ldr	r2, [r7, #12]
 800c41a:	69fb      	ldr	r3, [r7, #28]
 800c41c:	441a      	add	r2, r3
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c422:	693b      	ldr	r3, [r7, #16]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d101      	bne.n	800c42c <create_name+0xf4>
 800c428:	2306      	movs	r3, #6
 800c42a:	e010      	b.n	800c44e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	781b      	ldrb	r3, [r3, #0]
 800c430:	2be5      	cmp	r3, #229	; 0xe5
 800c432:	d102      	bne.n	800c43a <create_name+0x102>
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	2205      	movs	r2, #5
 800c438:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c43a:	7efb      	ldrb	r3, [r7, #27]
 800c43c:	2b20      	cmp	r3, #32
 800c43e:	d801      	bhi.n	800c444 <create_name+0x10c>
 800c440:	2204      	movs	r2, #4
 800c442:	e000      	b.n	800c446 <create_name+0x10e>
 800c444:	2200      	movs	r2, #0
 800c446:	68bb      	ldr	r3, [r7, #8]
 800c448:	330b      	adds	r3, #11
 800c44a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c44c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c44e:	4618      	mov	r0, r3
 800c450:	3720      	adds	r7, #32
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}
 800c456:	bf00      	nop
 800c458:	08012648 	.word	0x08012648
 800c45c:	080125d0 	.word	0x080125d0

0800c460 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b086      	sub	sp, #24
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
 800c468:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c46e:	693b      	ldr	r3, [r7, #16]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c474:	e002      	b.n	800c47c <follow_path+0x1c>
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	3301      	adds	r3, #1
 800c47a:	603b      	str	r3, [r7, #0]
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	781b      	ldrb	r3, [r3, #0]
 800c480:	2b2f      	cmp	r3, #47	; 0x2f
 800c482:	d0f8      	beq.n	800c476 <follow_path+0x16>
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	781b      	ldrb	r3, [r3, #0]
 800c488:	2b5c      	cmp	r3, #92	; 0x5c
 800c48a:	d0f4      	beq.n	800c476 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c48c:	693b      	ldr	r3, [r7, #16]
 800c48e:	2200      	movs	r2, #0
 800c490:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	781b      	ldrb	r3, [r3, #0]
 800c496:	2b1f      	cmp	r3, #31
 800c498:	d80a      	bhi.n	800c4b0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	2280      	movs	r2, #128	; 0x80
 800c49e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c4a2:	2100      	movs	r1, #0
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f7ff fc7b 	bl	800bda0 <dir_sdi>
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	75fb      	strb	r3, [r7, #23]
 800c4ae:	e048      	b.n	800c542 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c4b0:	463b      	mov	r3, r7
 800c4b2:	4619      	mov	r1, r3
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	f7ff ff3f 	bl	800c338 <create_name>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c4be:	7dfb      	ldrb	r3, [r7, #23]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d139      	bne.n	800c538 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c4c4:	6878      	ldr	r0, [r7, #4]
 800c4c6:	f7ff fe50 	bl	800c16a <dir_find>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c4d4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c4d6:	7dfb      	ldrb	r3, [r7, #23]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d00a      	beq.n	800c4f2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c4dc:	7dfb      	ldrb	r3, [r7, #23]
 800c4de:	2b04      	cmp	r3, #4
 800c4e0:	d12c      	bne.n	800c53c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c4e2:	7afb      	ldrb	r3, [r7, #11]
 800c4e4:	f003 0304 	and.w	r3, r3, #4
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d127      	bne.n	800c53c <follow_path+0xdc>
 800c4ec:	2305      	movs	r3, #5
 800c4ee:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c4f0:	e024      	b.n	800c53c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c4f2:	7afb      	ldrb	r3, [r7, #11]
 800c4f4:	f003 0304 	and.w	r3, r3, #4
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d121      	bne.n	800c540 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c4fc:	693b      	ldr	r3, [r7, #16]
 800c4fe:	799b      	ldrb	r3, [r3, #6]
 800c500:	f003 0310 	and.w	r3, r3, #16
 800c504:	2b00      	cmp	r3, #0
 800c506:	d102      	bne.n	800c50e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c508:	2305      	movs	r3, #5
 800c50a:	75fb      	strb	r3, [r7, #23]
 800c50c:	e019      	b.n	800c542 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	695b      	ldr	r3, [r3, #20]
 800c518:	68fa      	ldr	r2, [r7, #12]
 800c51a:	8992      	ldrh	r2, [r2, #12]
 800c51c:	fbb3 f0f2 	udiv	r0, r3, r2
 800c520:	fb00 f202 	mul.w	r2, r0, r2
 800c524:	1a9b      	subs	r3, r3, r2
 800c526:	440b      	add	r3, r1
 800c528:	4619      	mov	r1, r3
 800c52a:	68f8      	ldr	r0, [r7, #12]
 800c52c:	f7ff fdde 	bl	800c0ec <ld_clust>
 800c530:	4602      	mov	r2, r0
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c536:	e7bb      	b.n	800c4b0 <follow_path+0x50>
			if (res != FR_OK) break;
 800c538:	bf00      	nop
 800c53a:	e002      	b.n	800c542 <follow_path+0xe2>
				break;
 800c53c:	bf00      	nop
 800c53e:	e000      	b.n	800c542 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c540:	bf00      	nop
			}
		}
	}

	return res;
 800c542:	7dfb      	ldrb	r3, [r7, #23]
}
 800c544:	4618      	mov	r0, r3
 800c546:	3718      	adds	r7, #24
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}

0800c54c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c54c:	b480      	push	{r7}
 800c54e:	b087      	sub	sp, #28
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c554:	f04f 33ff 	mov.w	r3, #4294967295
 800c558:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d031      	beq.n	800c5c6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	617b      	str	r3, [r7, #20]
 800c568:	e002      	b.n	800c570 <get_ldnumber+0x24>
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	3301      	adds	r3, #1
 800c56e:	617b      	str	r3, [r7, #20]
 800c570:	697b      	ldr	r3, [r7, #20]
 800c572:	781b      	ldrb	r3, [r3, #0]
 800c574:	2b20      	cmp	r3, #32
 800c576:	d903      	bls.n	800c580 <get_ldnumber+0x34>
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	781b      	ldrb	r3, [r3, #0]
 800c57c:	2b3a      	cmp	r3, #58	; 0x3a
 800c57e:	d1f4      	bne.n	800c56a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c580:	697b      	ldr	r3, [r7, #20]
 800c582:	781b      	ldrb	r3, [r3, #0]
 800c584:	2b3a      	cmp	r3, #58	; 0x3a
 800c586:	d11c      	bne.n	800c5c2 <get_ldnumber+0x76>
			tp = *path;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	1c5a      	adds	r2, r3, #1
 800c592:	60fa      	str	r2, [r7, #12]
 800c594:	781b      	ldrb	r3, [r3, #0]
 800c596:	3b30      	subs	r3, #48	; 0x30
 800c598:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	2b09      	cmp	r3, #9
 800c59e:	d80e      	bhi.n	800c5be <get_ldnumber+0x72>
 800c5a0:	68fa      	ldr	r2, [r7, #12]
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	d10a      	bne.n	800c5be <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d107      	bne.n	800c5be <get_ldnumber+0x72>
					vol = (int)i;
 800c5ae:	68bb      	ldr	r3, [r7, #8]
 800c5b0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	3301      	adds	r3, #1
 800c5b6:	617b      	str	r3, [r7, #20]
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	697a      	ldr	r2, [r7, #20]
 800c5bc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c5be:	693b      	ldr	r3, [r7, #16]
 800c5c0:	e002      	b.n	800c5c8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c5c6:	693b      	ldr	r3, [r7, #16]
}
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	371c      	adds	r7, #28
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d2:	4770      	bx	lr

0800c5d4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b082      	sub	sp, #8
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
 800c5dc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	70da      	strb	r2, [r3, #3]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f04f 32ff 	mov.w	r2, #4294967295
 800c5ea:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c5ec:	6839      	ldr	r1, [r7, #0]
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f7fe fff4 	bl	800b5dc <move_window>
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d001      	beq.n	800c5fe <check_fs+0x2a>
 800c5fa:	2304      	movs	r3, #4
 800c5fc:	e038      	b.n	800c670 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	3334      	adds	r3, #52	; 0x34
 800c602:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c606:	4618      	mov	r0, r3
 800c608:	f7fe fd74 	bl	800b0f4 <ld_word>
 800c60c:	4603      	mov	r3, r0
 800c60e:	461a      	mov	r2, r3
 800c610:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c614:	429a      	cmp	r2, r3
 800c616:	d001      	beq.n	800c61c <check_fs+0x48>
 800c618:	2303      	movs	r3, #3
 800c61a:	e029      	b.n	800c670 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c622:	2be9      	cmp	r3, #233	; 0xe9
 800c624:	d009      	beq.n	800c63a <check_fs+0x66>
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c62c:	2beb      	cmp	r3, #235	; 0xeb
 800c62e:	d11e      	bne.n	800c66e <check_fs+0x9a>
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800c636:	2b90      	cmp	r3, #144	; 0x90
 800c638:	d119      	bne.n	800c66e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	3334      	adds	r3, #52	; 0x34
 800c63e:	3336      	adds	r3, #54	; 0x36
 800c640:	4618      	mov	r0, r3
 800c642:	f7fe fd6f 	bl	800b124 <ld_dword>
 800c646:	4603      	mov	r3, r0
 800c648:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c64c:	4a0a      	ldr	r2, [pc, #40]	; (800c678 <check_fs+0xa4>)
 800c64e:	4293      	cmp	r3, r2
 800c650:	d101      	bne.n	800c656 <check_fs+0x82>
 800c652:	2300      	movs	r3, #0
 800c654:	e00c      	b.n	800c670 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	3334      	adds	r3, #52	; 0x34
 800c65a:	3352      	adds	r3, #82	; 0x52
 800c65c:	4618      	mov	r0, r3
 800c65e:	f7fe fd61 	bl	800b124 <ld_dword>
 800c662:	4603      	mov	r3, r0
 800c664:	4a05      	ldr	r2, [pc, #20]	; (800c67c <check_fs+0xa8>)
 800c666:	4293      	cmp	r3, r2
 800c668:	d101      	bne.n	800c66e <check_fs+0x9a>
 800c66a:	2300      	movs	r3, #0
 800c66c:	e000      	b.n	800c670 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c66e:	2302      	movs	r3, #2
}
 800c670:	4618      	mov	r0, r3
 800c672:	3708      	adds	r7, #8
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}
 800c678:	00544146 	.word	0x00544146
 800c67c:	33544146 	.word	0x33544146

0800c680 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b096      	sub	sp, #88	; 0x58
 800c684:	af00      	add	r7, sp, #0
 800c686:	60f8      	str	r0, [r7, #12]
 800c688:	60b9      	str	r1, [r7, #8]
 800c68a:	4613      	mov	r3, r2
 800c68c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c68e:	68bb      	ldr	r3, [r7, #8]
 800c690:	2200      	movs	r2, #0
 800c692:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c694:	68f8      	ldr	r0, [r7, #12]
 800c696:	f7ff ff59 	bl	800c54c <get_ldnumber>
 800c69a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c69c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	da01      	bge.n	800c6a6 <find_volume+0x26>
 800c6a2:	230b      	movs	r3, #11
 800c6a4:	e262      	b.n	800cb6c <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c6a6:	4a9f      	ldr	r2, [pc, #636]	; (800c924 <find_volume+0x2a4>)
 800c6a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6ae:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d101      	bne.n	800c6ba <find_volume+0x3a>
 800c6b6:	230c      	movs	r3, #12
 800c6b8:	e258      	b.n	800cb6c <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c6ba:	68bb      	ldr	r3, [r7, #8]
 800c6bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6be:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c6c0:	79fb      	ldrb	r3, [r7, #7]
 800c6c2:	f023 0301 	bic.w	r3, r3, #1
 800c6c6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ca:	781b      	ldrb	r3, [r3, #0]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d01a      	beq.n	800c706 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6d2:	785b      	ldrb	r3, [r3, #1]
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	f7fe fc6f 	bl	800afb8 <disk_status>
 800c6da:	4603      	mov	r3, r0
 800c6dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c6e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c6e4:	f003 0301 	and.w	r3, r3, #1
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d10c      	bne.n	800c706 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c6ec:	79fb      	ldrb	r3, [r7, #7]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d007      	beq.n	800c702 <find_volume+0x82>
 800c6f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c6f6:	f003 0304 	and.w	r3, r3, #4
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d001      	beq.n	800c702 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c6fe:	230a      	movs	r3, #10
 800c700:	e234      	b.n	800cb6c <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800c702:	2300      	movs	r3, #0
 800c704:	e232      	b.n	800cb6c <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c708:	2200      	movs	r2, #0
 800c70a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c70c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c70e:	b2da      	uxtb	r2, r3
 800c710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c712:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c716:	785b      	ldrb	r3, [r3, #1]
 800c718:	4618      	mov	r0, r3
 800c71a:	f7fe fc67 	bl	800afec <disk_initialize>
 800c71e:	4603      	mov	r3, r0
 800c720:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c724:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c728:	f003 0301 	and.w	r3, r3, #1
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d001      	beq.n	800c734 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c730:	2303      	movs	r3, #3
 800c732:	e21b      	b.n	800cb6c <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c734:	79fb      	ldrb	r3, [r7, #7]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d007      	beq.n	800c74a <find_volume+0xca>
 800c73a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c73e:	f003 0304 	and.w	r3, r3, #4
 800c742:	2b00      	cmp	r3, #0
 800c744:	d001      	beq.n	800c74a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c746:	230a      	movs	r3, #10
 800c748:	e210      	b.n	800cb6c <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800c74a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c74c:	7858      	ldrb	r0, [r3, #1]
 800c74e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c750:	330c      	adds	r3, #12
 800c752:	461a      	mov	r2, r3
 800c754:	2102      	movs	r1, #2
 800c756:	f7fe fcaf 	bl	800b0b8 <disk_ioctl>
 800c75a:	4603      	mov	r3, r0
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d001      	beq.n	800c764 <find_volume+0xe4>
 800c760:	2301      	movs	r3, #1
 800c762:	e203      	b.n	800cb6c <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800c764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c766:	899b      	ldrh	r3, [r3, #12]
 800c768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c76c:	d80d      	bhi.n	800c78a <find_volume+0x10a>
 800c76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c770:	899b      	ldrh	r3, [r3, #12]
 800c772:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c776:	d308      	bcc.n	800c78a <find_volume+0x10a>
 800c778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c77a:	899b      	ldrh	r3, [r3, #12]
 800c77c:	461a      	mov	r2, r3
 800c77e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c780:	899b      	ldrh	r3, [r3, #12]
 800c782:	3b01      	subs	r3, #1
 800c784:	4013      	ands	r3, r2
 800c786:	2b00      	cmp	r3, #0
 800c788:	d001      	beq.n	800c78e <find_volume+0x10e>
 800c78a:	2301      	movs	r3, #1
 800c78c:	e1ee      	b.n	800cb6c <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c78e:	2300      	movs	r3, #0
 800c790:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c792:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c794:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c796:	f7ff ff1d 	bl	800c5d4 <check_fs>
 800c79a:	4603      	mov	r3, r0
 800c79c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c7a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c7a4:	2b02      	cmp	r3, #2
 800c7a6:	d149      	bne.n	800c83c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	643b      	str	r3, [r7, #64]	; 0x40
 800c7ac:	e01e      	b.n	800c7ec <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c7b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7b6:	011b      	lsls	r3, r3, #4
 800c7b8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c7bc:	4413      	add	r3, r2
 800c7be:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c2:	3304      	adds	r3, #4
 800c7c4:	781b      	ldrb	r3, [r3, #0]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d006      	beq.n	800c7d8 <find_volume+0x158>
 800c7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7cc:	3308      	adds	r3, #8
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f7fe fca8 	bl	800b124 <ld_dword>
 800c7d4:	4602      	mov	r2, r0
 800c7d6:	e000      	b.n	800c7da <find_volume+0x15a>
 800c7d8:	2200      	movs	r2, #0
 800c7da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7dc:	009b      	lsls	r3, r3, #2
 800c7de:	3358      	adds	r3, #88	; 0x58
 800c7e0:	443b      	add	r3, r7
 800c7e2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c7e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7e8:	3301      	adds	r3, #1
 800c7ea:	643b      	str	r3, [r7, #64]	; 0x40
 800c7ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7ee:	2b03      	cmp	r3, #3
 800c7f0:	d9dd      	bls.n	800c7ae <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c7f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d002      	beq.n	800c802 <find_volume+0x182>
 800c7fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7fe:	3b01      	subs	r3, #1
 800c800:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c804:	009b      	lsls	r3, r3, #2
 800c806:	3358      	adds	r3, #88	; 0x58
 800c808:	443b      	add	r3, r7
 800c80a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c80e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c810:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c812:	2b00      	cmp	r3, #0
 800c814:	d005      	beq.n	800c822 <find_volume+0x1a2>
 800c816:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c818:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c81a:	f7ff fedb 	bl	800c5d4 <check_fs>
 800c81e:	4603      	mov	r3, r0
 800c820:	e000      	b.n	800c824 <find_volume+0x1a4>
 800c822:	2303      	movs	r3, #3
 800c824:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c828:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c82c:	2b01      	cmp	r3, #1
 800c82e:	d905      	bls.n	800c83c <find_volume+0x1bc>
 800c830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c832:	3301      	adds	r3, #1
 800c834:	643b      	str	r3, [r7, #64]	; 0x40
 800c836:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c838:	2b03      	cmp	r3, #3
 800c83a:	d9e2      	bls.n	800c802 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c83c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c840:	2b04      	cmp	r3, #4
 800c842:	d101      	bne.n	800c848 <find_volume+0x1c8>
 800c844:	2301      	movs	r3, #1
 800c846:	e191      	b.n	800cb6c <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c848:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c84c:	2b01      	cmp	r3, #1
 800c84e:	d901      	bls.n	800c854 <find_volume+0x1d4>
 800c850:	230d      	movs	r3, #13
 800c852:	e18b      	b.n	800cb6c <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c856:	3334      	adds	r3, #52	; 0x34
 800c858:	330b      	adds	r3, #11
 800c85a:	4618      	mov	r0, r3
 800c85c:	f7fe fc4a 	bl	800b0f4 <ld_word>
 800c860:	4603      	mov	r3, r0
 800c862:	461a      	mov	r2, r3
 800c864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c866:	899b      	ldrh	r3, [r3, #12]
 800c868:	429a      	cmp	r2, r3
 800c86a:	d001      	beq.n	800c870 <find_volume+0x1f0>
 800c86c:	230d      	movs	r3, #13
 800c86e:	e17d      	b.n	800cb6c <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c872:	3334      	adds	r3, #52	; 0x34
 800c874:	3316      	adds	r3, #22
 800c876:	4618      	mov	r0, r3
 800c878:	f7fe fc3c 	bl	800b0f4 <ld_word>
 800c87c:	4603      	mov	r3, r0
 800c87e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c882:	2b00      	cmp	r3, #0
 800c884:	d106      	bne.n	800c894 <find_volume+0x214>
 800c886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c888:	3334      	adds	r3, #52	; 0x34
 800c88a:	3324      	adds	r3, #36	; 0x24
 800c88c:	4618      	mov	r0, r3
 800c88e:	f7fe fc49 	bl	800b124 <ld_dword>
 800c892:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c896:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c898:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c89a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c89c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800c8a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8a2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c8a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8a6:	789b      	ldrb	r3, [r3, #2]
 800c8a8:	2b01      	cmp	r3, #1
 800c8aa:	d005      	beq.n	800c8b8 <find_volume+0x238>
 800c8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ae:	789b      	ldrb	r3, [r3, #2]
 800c8b0:	2b02      	cmp	r3, #2
 800c8b2:	d001      	beq.n	800c8b8 <find_volume+0x238>
 800c8b4:	230d      	movs	r3, #13
 800c8b6:	e159      	b.n	800cb6c <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ba:	789b      	ldrb	r3, [r3, #2]
 800c8bc:	461a      	mov	r2, r3
 800c8be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8c0:	fb02 f303 	mul.w	r3, r2, r3
 800c8c4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c8c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c8cc:	b29a      	uxth	r2, r3
 800c8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c8d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d4:	895b      	ldrh	r3, [r3, #10]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d008      	beq.n	800c8ec <find_volume+0x26c>
 800c8da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8dc:	895b      	ldrh	r3, [r3, #10]
 800c8de:	461a      	mov	r2, r3
 800c8e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8e2:	895b      	ldrh	r3, [r3, #10]
 800c8e4:	3b01      	subs	r3, #1
 800c8e6:	4013      	ands	r3, r2
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d001      	beq.n	800c8f0 <find_volume+0x270>
 800c8ec:	230d      	movs	r3, #13
 800c8ee:	e13d      	b.n	800cb6c <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8f2:	3334      	adds	r3, #52	; 0x34
 800c8f4:	3311      	adds	r3, #17
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f7fe fbfc 	bl	800b0f4 <ld_word>
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	461a      	mov	r2, r3
 800c900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c902:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c906:	891b      	ldrh	r3, [r3, #8]
 800c908:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c90a:	8992      	ldrh	r2, [r2, #12]
 800c90c:	0952      	lsrs	r2, r2, #5
 800c90e:	b292      	uxth	r2, r2
 800c910:	fbb3 f1f2 	udiv	r1, r3, r2
 800c914:	fb01 f202 	mul.w	r2, r1, r2
 800c918:	1a9b      	subs	r3, r3, r2
 800c91a:	b29b      	uxth	r3, r3
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d003      	beq.n	800c928 <find_volume+0x2a8>
 800c920:	230d      	movs	r3, #13
 800c922:	e123      	b.n	800cb6c <find_volume+0x4ec>
 800c924:	20004054 	.word	0x20004054

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c92a:	3334      	adds	r3, #52	; 0x34
 800c92c:	3313      	adds	r3, #19
 800c92e:	4618      	mov	r0, r3
 800c930:	f7fe fbe0 	bl	800b0f4 <ld_word>
 800c934:	4603      	mov	r3, r0
 800c936:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c938:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d106      	bne.n	800c94c <find_volume+0x2cc>
 800c93e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c940:	3334      	adds	r3, #52	; 0x34
 800c942:	3320      	adds	r3, #32
 800c944:	4618      	mov	r0, r3
 800c946:	f7fe fbed 	bl	800b124 <ld_dword>
 800c94a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c94e:	3334      	adds	r3, #52	; 0x34
 800c950:	330e      	adds	r3, #14
 800c952:	4618      	mov	r0, r3
 800c954:	f7fe fbce 	bl	800b0f4 <ld_word>
 800c958:	4603      	mov	r3, r0
 800c95a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c95c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d101      	bne.n	800c966 <find_volume+0x2e6>
 800c962:	230d      	movs	r3, #13
 800c964:	e102      	b.n	800cb6c <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c966:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c96a:	4413      	add	r3, r2
 800c96c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c96e:	8911      	ldrh	r1, [r2, #8]
 800c970:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c972:	8992      	ldrh	r2, [r2, #12]
 800c974:	0952      	lsrs	r2, r2, #5
 800c976:	b292      	uxth	r2, r2
 800c978:	fbb1 f2f2 	udiv	r2, r1, r2
 800c97c:	b292      	uxth	r2, r2
 800c97e:	4413      	add	r3, r2
 800c980:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c982:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c986:	429a      	cmp	r2, r3
 800c988:	d201      	bcs.n	800c98e <find_volume+0x30e>
 800c98a:	230d      	movs	r3, #13
 800c98c:	e0ee      	b.n	800cb6c <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c98e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c992:	1ad3      	subs	r3, r2, r3
 800c994:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c996:	8952      	ldrh	r2, [r2, #10]
 800c998:	fbb3 f3f2 	udiv	r3, r3, r2
 800c99c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d101      	bne.n	800c9a8 <find_volume+0x328>
 800c9a4:	230d      	movs	r3, #13
 800c9a6:	e0e1      	b.n	800cb6c <find_volume+0x4ec>
		fmt = FS_FAT32;
 800c9a8:	2303      	movs	r3, #3
 800c9aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c9b4:	4293      	cmp	r3, r2
 800c9b6:	d802      	bhi.n	800c9be <find_volume+0x33e>
 800c9b8:	2302      	movs	r3, #2
 800c9ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9c0:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c9c4:	4293      	cmp	r3, r2
 800c9c6:	d802      	bhi.n	800c9ce <find_volume+0x34e>
 800c9c8:	2301      	movs	r3, #1
 800c9ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d0:	1c9a      	adds	r2, r3, #2
 800c9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9d4:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800c9d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c9da:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c9dc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c9de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9e0:	441a      	add	r2, r3
 800c9e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9e4:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800c9e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ea:	441a      	add	r2, r3
 800c9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ee:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800c9f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c9f4:	2b03      	cmp	r3, #3
 800c9f6:	d11e      	bne.n	800ca36 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9fa:	3334      	adds	r3, #52	; 0x34
 800c9fc:	332a      	adds	r3, #42	; 0x2a
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f7fe fb78 	bl	800b0f4 <ld_word>
 800ca04:	4603      	mov	r3, r0
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d001      	beq.n	800ca0e <find_volume+0x38e>
 800ca0a:	230d      	movs	r3, #13
 800ca0c:	e0ae      	b.n	800cb6c <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ca0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca10:	891b      	ldrh	r3, [r3, #8]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d001      	beq.n	800ca1a <find_volume+0x39a>
 800ca16:	230d      	movs	r3, #13
 800ca18:	e0a8      	b.n	800cb6c <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ca1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca1c:	3334      	adds	r3, #52	; 0x34
 800ca1e:	332c      	adds	r3, #44	; 0x2c
 800ca20:	4618      	mov	r0, r3
 800ca22:	f7fe fb7f 	bl	800b124 <ld_dword>
 800ca26:	4602      	mov	r2, r0
 800ca28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca2a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ca2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca2e:	699b      	ldr	r3, [r3, #24]
 800ca30:	009b      	lsls	r3, r3, #2
 800ca32:	647b      	str	r3, [r7, #68]	; 0x44
 800ca34:	e01f      	b.n	800ca76 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ca36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca38:	891b      	ldrh	r3, [r3, #8]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d101      	bne.n	800ca42 <find_volume+0x3c2>
 800ca3e:	230d      	movs	r3, #13
 800ca40:	e094      	b.n	800cb6c <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ca42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ca46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca48:	441a      	add	r2, r3
 800ca4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca4c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ca4e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ca52:	2b02      	cmp	r3, #2
 800ca54:	d103      	bne.n	800ca5e <find_volume+0x3de>
 800ca56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca58:	699b      	ldr	r3, [r3, #24]
 800ca5a:	005b      	lsls	r3, r3, #1
 800ca5c:	e00a      	b.n	800ca74 <find_volume+0x3f4>
 800ca5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca60:	699a      	ldr	r2, [r3, #24]
 800ca62:	4613      	mov	r3, r2
 800ca64:	005b      	lsls	r3, r3, #1
 800ca66:	4413      	add	r3, r2
 800ca68:	085a      	lsrs	r2, r3, #1
 800ca6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca6c:	699b      	ldr	r3, [r3, #24]
 800ca6e:	f003 0301 	and.w	r3, r3, #1
 800ca72:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ca74:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ca76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca78:	69da      	ldr	r2, [r3, #28]
 800ca7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca7c:	899b      	ldrh	r3, [r3, #12]
 800ca7e:	4619      	mov	r1, r3
 800ca80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca82:	440b      	add	r3, r1
 800ca84:	3b01      	subs	r3, #1
 800ca86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ca88:	8989      	ldrh	r1, [r1, #12]
 800ca8a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ca8e:	429a      	cmp	r2, r3
 800ca90:	d201      	bcs.n	800ca96 <find_volume+0x416>
 800ca92:	230d      	movs	r3, #13
 800ca94:	e06a      	b.n	800cb6c <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ca96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca98:	f04f 32ff 	mov.w	r2, #4294967295
 800ca9c:	615a      	str	r2, [r3, #20]
 800ca9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caa0:	695a      	ldr	r2, [r3, #20]
 800caa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caa4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800caa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caa8:	2280      	movs	r2, #128	; 0x80
 800caaa:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800caac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cab0:	2b03      	cmp	r3, #3
 800cab2:	d149      	bne.n	800cb48 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cab6:	3334      	adds	r3, #52	; 0x34
 800cab8:	3330      	adds	r3, #48	; 0x30
 800caba:	4618      	mov	r0, r3
 800cabc:	f7fe fb1a 	bl	800b0f4 <ld_word>
 800cac0:	4603      	mov	r3, r0
 800cac2:	2b01      	cmp	r3, #1
 800cac4:	d140      	bne.n	800cb48 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cac8:	3301      	adds	r3, #1
 800caca:	4619      	mov	r1, r3
 800cacc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cace:	f7fe fd85 	bl	800b5dc <move_window>
 800cad2:	4603      	mov	r3, r0
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d137      	bne.n	800cb48 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800cad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cada:	2200      	movs	r2, #0
 800cadc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cae0:	3334      	adds	r3, #52	; 0x34
 800cae2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cae6:	4618      	mov	r0, r3
 800cae8:	f7fe fb04 	bl	800b0f4 <ld_word>
 800caec:	4603      	mov	r3, r0
 800caee:	461a      	mov	r2, r3
 800caf0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800caf4:	429a      	cmp	r2, r3
 800caf6:	d127      	bne.n	800cb48 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800caf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cafa:	3334      	adds	r3, #52	; 0x34
 800cafc:	4618      	mov	r0, r3
 800cafe:	f7fe fb11 	bl	800b124 <ld_dword>
 800cb02:	4603      	mov	r3, r0
 800cb04:	4a1b      	ldr	r2, [pc, #108]	; (800cb74 <find_volume+0x4f4>)
 800cb06:	4293      	cmp	r3, r2
 800cb08:	d11e      	bne.n	800cb48 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cb0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb0c:	3334      	adds	r3, #52	; 0x34
 800cb0e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cb12:	4618      	mov	r0, r3
 800cb14:	f7fe fb06 	bl	800b124 <ld_dword>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	4a17      	ldr	r2, [pc, #92]	; (800cb78 <find_volume+0x4f8>)
 800cb1c:	4293      	cmp	r3, r2
 800cb1e:	d113      	bne.n	800cb48 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cb20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb22:	3334      	adds	r3, #52	; 0x34
 800cb24:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800cb28:	4618      	mov	r0, r3
 800cb2a:	f7fe fafb 	bl	800b124 <ld_dword>
 800cb2e:	4602      	mov	r2, r0
 800cb30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb32:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cb34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb36:	3334      	adds	r3, #52	; 0x34
 800cb38:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	f7fe faf1 	bl	800b124 <ld_dword>
 800cb42:	4602      	mov	r2, r0
 800cb44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb46:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800cb48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb4a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800cb4e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800cb50:	4b0a      	ldr	r3, [pc, #40]	; (800cb7c <find_volume+0x4fc>)
 800cb52:	881b      	ldrh	r3, [r3, #0]
 800cb54:	3301      	adds	r3, #1
 800cb56:	b29a      	uxth	r2, r3
 800cb58:	4b08      	ldr	r3, [pc, #32]	; (800cb7c <find_volume+0x4fc>)
 800cb5a:	801a      	strh	r2, [r3, #0]
 800cb5c:	4b07      	ldr	r3, [pc, #28]	; (800cb7c <find_volume+0x4fc>)
 800cb5e:	881a      	ldrh	r2, [r3, #0]
 800cb60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb62:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800cb64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cb66:	f7fe fcd1 	bl	800b50c <clear_lock>
#endif
	return FR_OK;
 800cb6a:	2300      	movs	r3, #0
}
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	3758      	adds	r7, #88	; 0x58
 800cb70:	46bd      	mov	sp, r7
 800cb72:	bd80      	pop	{r7, pc}
 800cb74:	41615252 	.word	0x41615252
 800cb78:	61417272 	.word	0x61417272
 800cb7c:	20004058 	.word	0x20004058

0800cb80 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b084      	sub	sp, #16
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
 800cb88:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800cb8a:	2309      	movs	r3, #9
 800cb8c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d01c      	beq.n	800cbce <validate+0x4e>
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d018      	beq.n	800cbce <validate+0x4e>
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	781b      	ldrb	r3, [r3, #0]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d013      	beq.n	800cbce <validate+0x4e>
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	889a      	ldrh	r2, [r3, #4]
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	88db      	ldrh	r3, [r3, #6]
 800cbb0:	429a      	cmp	r2, r3
 800cbb2:	d10c      	bne.n	800cbce <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	785b      	ldrb	r3, [r3, #1]
 800cbba:	4618      	mov	r0, r3
 800cbbc:	f7fe f9fc 	bl	800afb8 <disk_status>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	f003 0301 	and.w	r3, r3, #1
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d101      	bne.n	800cbce <validate+0x4e>
			res = FR_OK;
 800cbca:	2300      	movs	r3, #0
 800cbcc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800cbce:	7bfb      	ldrb	r3, [r7, #15]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d102      	bne.n	800cbda <validate+0x5a>
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	e000      	b.n	800cbdc <validate+0x5c>
 800cbda:	2300      	movs	r3, #0
 800cbdc:	683a      	ldr	r2, [r7, #0]
 800cbde:	6013      	str	r3, [r2, #0]
	return res;
 800cbe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	3710      	adds	r7, #16
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}
	...

0800cbec <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b088      	sub	sp, #32
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	60f8      	str	r0, [r7, #12]
 800cbf4:	60b9      	str	r1, [r7, #8]
 800cbf6:	4613      	mov	r3, r2
 800cbf8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800cbfe:	f107 0310 	add.w	r3, r7, #16
 800cc02:	4618      	mov	r0, r3
 800cc04:	f7ff fca2 	bl	800c54c <get_ldnumber>
 800cc08:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800cc0a:	69fb      	ldr	r3, [r7, #28]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	da01      	bge.n	800cc14 <f_mount+0x28>
 800cc10:	230b      	movs	r3, #11
 800cc12:	e02b      	b.n	800cc6c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cc14:	4a17      	ldr	r2, [pc, #92]	; (800cc74 <f_mount+0x88>)
 800cc16:	69fb      	ldr	r3, [r7, #28]
 800cc18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc1c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800cc1e:	69bb      	ldr	r3, [r7, #24]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d005      	beq.n	800cc30 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cc24:	69b8      	ldr	r0, [r7, #24]
 800cc26:	f7fe fc71 	bl	800b50c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cc2a:	69bb      	ldr	r3, [r7, #24]
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d002      	beq.n	800cc3c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	2200      	movs	r2, #0
 800cc3a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cc3c:	68fa      	ldr	r2, [r7, #12]
 800cc3e:	490d      	ldr	r1, [pc, #52]	; (800cc74 <f_mount+0x88>)
 800cc40:	69fb      	ldr	r3, [r7, #28]
 800cc42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d002      	beq.n	800cc52 <f_mount+0x66>
 800cc4c:	79fb      	ldrb	r3, [r7, #7]
 800cc4e:	2b01      	cmp	r3, #1
 800cc50:	d001      	beq.n	800cc56 <f_mount+0x6a>
 800cc52:	2300      	movs	r3, #0
 800cc54:	e00a      	b.n	800cc6c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cc56:	f107 010c 	add.w	r1, r7, #12
 800cc5a:	f107 0308 	add.w	r3, r7, #8
 800cc5e:	2200      	movs	r2, #0
 800cc60:	4618      	mov	r0, r3
 800cc62:	f7ff fd0d 	bl	800c680 <find_volume>
 800cc66:	4603      	mov	r3, r0
 800cc68:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cc6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	3720      	adds	r7, #32
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}
 800cc74:	20004054 	.word	0x20004054

0800cc78 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b098      	sub	sp, #96	; 0x60
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	60f8      	str	r0, [r7, #12]
 800cc80:	60b9      	str	r1, [r7, #8]
 800cc82:	4613      	mov	r3, r2
 800cc84:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d101      	bne.n	800cc90 <f_open+0x18>
 800cc8c:	2309      	movs	r3, #9
 800cc8e:	e1bb      	b.n	800d008 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800cc90:	79fb      	ldrb	r3, [r7, #7]
 800cc92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc96:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800cc98:	79fa      	ldrb	r2, [r7, #7]
 800cc9a:	f107 0110 	add.w	r1, r7, #16
 800cc9e:	f107 0308 	add.w	r3, r7, #8
 800cca2:	4618      	mov	r0, r3
 800cca4:	f7ff fcec 	bl	800c680 <find_volume>
 800cca8:	4603      	mov	r3, r0
 800ccaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800ccae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	f040 819f 	bne.w	800cff6 <f_open+0x37e>
		dj.obj.fs = fs;
 800ccb8:	693b      	ldr	r3, [r7, #16]
 800ccba:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ccbc:	68ba      	ldr	r2, [r7, #8]
 800ccbe:	f107 0314 	add.w	r3, r7, #20
 800ccc2:	4611      	mov	r1, r2
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f7ff fbcb 	bl	800c460 <follow_path>
 800ccca:	4603      	mov	r3, r0
 800cccc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ccd0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d11a      	bne.n	800cd0e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ccd8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ccdc:	b25b      	sxtb	r3, r3
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	da03      	bge.n	800ccea <f_open+0x72>
				res = FR_INVALID_NAME;
 800cce2:	2306      	movs	r3, #6
 800cce4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800cce8:	e011      	b.n	800cd0e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ccea:	79fb      	ldrb	r3, [r7, #7]
 800ccec:	f023 0301 	bic.w	r3, r3, #1
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	bf14      	ite	ne
 800ccf4:	2301      	movne	r3, #1
 800ccf6:	2300      	moveq	r3, #0
 800ccf8:	b2db      	uxtb	r3, r3
 800ccfa:	461a      	mov	r2, r3
 800ccfc:	f107 0314 	add.w	r3, r7, #20
 800cd00:	4611      	mov	r1, r2
 800cd02:	4618      	mov	r0, r3
 800cd04:	f7fe faf6 	bl	800b2f4 <chk_lock>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800cd0e:	79fb      	ldrb	r3, [r7, #7]
 800cd10:	f003 031c 	and.w	r3, r3, #28
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d07f      	beq.n	800ce18 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800cd18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d017      	beq.n	800cd50 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800cd20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cd24:	2b04      	cmp	r3, #4
 800cd26:	d10e      	bne.n	800cd46 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800cd28:	f7fe fb40 	bl	800b3ac <enq_lock>
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d006      	beq.n	800cd40 <f_open+0xc8>
 800cd32:	f107 0314 	add.w	r3, r7, #20
 800cd36:	4618      	mov	r0, r3
 800cd38:	f7ff fa6c 	bl	800c214 <dir_register>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	e000      	b.n	800cd42 <f_open+0xca>
 800cd40:	2312      	movs	r3, #18
 800cd42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800cd46:	79fb      	ldrb	r3, [r7, #7]
 800cd48:	f043 0308 	orr.w	r3, r3, #8
 800cd4c:	71fb      	strb	r3, [r7, #7]
 800cd4e:	e010      	b.n	800cd72 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800cd50:	7ebb      	ldrb	r3, [r7, #26]
 800cd52:	f003 0311 	and.w	r3, r3, #17
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d003      	beq.n	800cd62 <f_open+0xea>
					res = FR_DENIED;
 800cd5a:	2307      	movs	r3, #7
 800cd5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800cd60:	e007      	b.n	800cd72 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800cd62:	79fb      	ldrb	r3, [r7, #7]
 800cd64:	f003 0304 	and.w	r3, r3, #4
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d002      	beq.n	800cd72 <f_open+0xfa>
 800cd6c:	2308      	movs	r3, #8
 800cd6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800cd72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d168      	bne.n	800ce4c <f_open+0x1d4>
 800cd7a:	79fb      	ldrb	r3, [r7, #7]
 800cd7c:	f003 0308 	and.w	r3, r3, #8
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d063      	beq.n	800ce4c <f_open+0x1d4>
				dw = GET_FATTIME();
 800cd84:	f7fd fee4 	bl	800ab50 <get_fattime>
 800cd88:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800cd8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd8c:	330e      	adds	r3, #14
 800cd8e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cd90:	4618      	mov	r0, r3
 800cd92:	f7fe fa05 	bl	800b1a0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800cd96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd98:	3316      	adds	r3, #22
 800cd9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f7fe f9ff 	bl	800b1a0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800cda2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cda4:	330b      	adds	r3, #11
 800cda6:	2220      	movs	r2, #32
 800cda8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800cdaa:	693b      	ldr	r3, [r7, #16]
 800cdac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cdae:	4611      	mov	r1, r2
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	f7ff f99b 	bl	800c0ec <ld_clust>
 800cdb6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800cdb8:	693b      	ldr	r3, [r7, #16]
 800cdba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	f7ff f9b3 	bl	800c12a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800cdc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdc6:	331c      	adds	r3, #28
 800cdc8:	2100      	movs	r1, #0
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f7fe f9e8 	bl	800b1a0 <st_dword>
					fs->wflag = 1;
 800cdd0:	693b      	ldr	r3, [r7, #16]
 800cdd2:	2201      	movs	r2, #1
 800cdd4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800cdd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d037      	beq.n	800ce4c <f_open+0x1d4>
						dw = fs->winsect;
 800cddc:	693b      	ldr	r3, [r7, #16]
 800cdde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cde0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800cde2:	f107 0314 	add.w	r3, r7, #20
 800cde6:	2200      	movs	r2, #0
 800cde8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800cdea:	4618      	mov	r0, r3
 800cdec:	f7fe fea3 	bl	800bb36 <remove_chain>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800cdf6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d126      	bne.n	800ce4c <f_open+0x1d4>
							res = move_window(fs, dw);
 800cdfe:	693b      	ldr	r3, [r7, #16]
 800ce00:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ce02:	4618      	mov	r0, r3
 800ce04:	f7fe fbea 	bl	800b5dc <move_window>
 800ce08:	4603      	mov	r3, r0
 800ce0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ce12:	3a01      	subs	r2, #1
 800ce14:	611a      	str	r2, [r3, #16]
 800ce16:	e019      	b.n	800ce4c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ce18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d115      	bne.n	800ce4c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ce20:	7ebb      	ldrb	r3, [r7, #26]
 800ce22:	f003 0310 	and.w	r3, r3, #16
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d003      	beq.n	800ce32 <f_open+0x1ba>
					res = FR_NO_FILE;
 800ce2a:	2304      	movs	r3, #4
 800ce2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ce30:	e00c      	b.n	800ce4c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ce32:	79fb      	ldrb	r3, [r7, #7]
 800ce34:	f003 0302 	and.w	r3, r3, #2
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d007      	beq.n	800ce4c <f_open+0x1d4>
 800ce3c:	7ebb      	ldrb	r3, [r7, #26]
 800ce3e:	f003 0301 	and.w	r3, r3, #1
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d002      	beq.n	800ce4c <f_open+0x1d4>
						res = FR_DENIED;
 800ce46:	2307      	movs	r3, #7
 800ce48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800ce4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d128      	bne.n	800cea6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ce54:	79fb      	ldrb	r3, [r7, #7]
 800ce56:	f003 0308 	and.w	r3, r3, #8
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d003      	beq.n	800ce66 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800ce5e:	79fb      	ldrb	r3, [r7, #7]
 800ce60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce64:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ce66:	693b      	ldr	r3, [r7, #16]
 800ce68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ce6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ce74:	79fb      	ldrb	r3, [r7, #7]
 800ce76:	f023 0301 	bic.w	r3, r3, #1
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	bf14      	ite	ne
 800ce7e:	2301      	movne	r3, #1
 800ce80:	2300      	moveq	r3, #0
 800ce82:	b2db      	uxtb	r3, r3
 800ce84:	461a      	mov	r2, r3
 800ce86:	f107 0314 	add.w	r3, r7, #20
 800ce8a:	4611      	mov	r1, r2
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f7fe faaf 	bl	800b3f0 <inc_lock>
 800ce92:	4602      	mov	r2, r0
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	691b      	ldr	r3, [r3, #16]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d102      	bne.n	800cea6 <f_open+0x22e>
 800cea0:	2302      	movs	r3, #2
 800cea2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800cea6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	f040 80a3 	bne.w	800cff6 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ceb0:	693b      	ldr	r3, [r7, #16]
 800ceb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ceb4:	4611      	mov	r1, r2
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	f7ff f918 	bl	800c0ec <ld_clust>
 800cebc:	4602      	mov	r2, r0
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800cec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cec4:	331c      	adds	r3, #28
 800cec6:	4618      	mov	r0, r3
 800cec8:	f7fe f92c 	bl	800b124 <ld_dword>
 800cecc:	4602      	mov	r2, r0
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	2200      	movs	r2, #0
 800ced6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ced8:	693a      	ldr	r2, [r7, #16]
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800cede:	693b      	ldr	r3, [r7, #16]
 800cee0:	88da      	ldrh	r2, [r3, #6]
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	79fa      	ldrb	r2, [r7, #7]
 800ceea:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	2200      	movs	r2, #0
 800cef0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	2200      	movs	r2, #0
 800cef6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	2200      	movs	r2, #0
 800cefc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	3330      	adds	r3, #48	; 0x30
 800cf02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800cf06:	2100      	movs	r1, #0
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f7fe f996 	bl	800b23a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800cf0e:	79fb      	ldrb	r3, [r7, #7]
 800cf10:	f003 0320 	and.w	r3, r3, #32
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d06e      	beq.n	800cff6 <f_open+0x37e>
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	68db      	ldr	r3, [r3, #12]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d06a      	beq.n	800cff6 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	68da      	ldr	r2, [r3, #12]
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800cf28:	693b      	ldr	r3, [r7, #16]
 800cf2a:	895b      	ldrh	r3, [r3, #10]
 800cf2c:	461a      	mov	r2, r3
 800cf2e:	693b      	ldr	r3, [r7, #16]
 800cf30:	899b      	ldrh	r3, [r3, #12]
 800cf32:	fb02 f303 	mul.w	r3, r2, r3
 800cf36:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	689b      	ldr	r3, [r3, #8]
 800cf3c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	68db      	ldr	r3, [r3, #12]
 800cf42:	657b      	str	r3, [r7, #84]	; 0x54
 800cf44:	e016      	b.n	800cf74 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f7fe fc03 	bl	800b756 <get_fat>
 800cf50:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800cf52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf54:	2b01      	cmp	r3, #1
 800cf56:	d802      	bhi.n	800cf5e <f_open+0x2e6>
 800cf58:	2302      	movs	r3, #2
 800cf5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800cf5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf64:	d102      	bne.n	800cf6c <f_open+0x2f4>
 800cf66:	2301      	movs	r3, #1
 800cf68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cf6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cf6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf70:	1ad3      	subs	r3, r2, r3
 800cf72:	657b      	str	r3, [r7, #84]	; 0x54
 800cf74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d103      	bne.n	800cf84 <f_open+0x30c>
 800cf7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cf7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf80:	429a      	cmp	r2, r3
 800cf82:	d8e0      	bhi.n	800cf46 <f_open+0x2ce>
				}
				fp->clust = clst;
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cf88:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800cf8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d131      	bne.n	800cff6 <f_open+0x37e>
 800cf92:	693b      	ldr	r3, [r7, #16]
 800cf94:	899b      	ldrh	r3, [r3, #12]
 800cf96:	461a      	mov	r2, r3
 800cf98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf9a:	fbb3 f1f2 	udiv	r1, r3, r2
 800cf9e:	fb01 f202 	mul.w	r2, r1, r2
 800cfa2:	1a9b      	subs	r3, r3, r2
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d026      	beq.n	800cff6 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800cfa8:	693b      	ldr	r3, [r7, #16]
 800cfaa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cfac:	4618      	mov	r0, r3
 800cfae:	f7fe fbb3 	bl	800b718 <clust2sect>
 800cfb2:	6478      	str	r0, [r7, #68]	; 0x44
 800cfb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d103      	bne.n	800cfc2 <f_open+0x34a>
						res = FR_INT_ERR;
 800cfba:	2302      	movs	r3, #2
 800cfbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800cfc0:	e019      	b.n	800cff6 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800cfc2:	693b      	ldr	r3, [r7, #16]
 800cfc4:	899b      	ldrh	r3, [r3, #12]
 800cfc6:	461a      	mov	r2, r3
 800cfc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cfca:	fbb3 f2f2 	udiv	r2, r3, r2
 800cfce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cfd0:	441a      	add	r2, r3
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800cfd6:	693b      	ldr	r3, [r7, #16]
 800cfd8:	7858      	ldrb	r0, [r3, #1]
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	6a1a      	ldr	r2, [r3, #32]
 800cfe4:	2301      	movs	r3, #1
 800cfe6:	f7fe f827 	bl	800b038 <disk_read>
 800cfea:	4603      	mov	r3, r0
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d002      	beq.n	800cff6 <f_open+0x37e>
 800cff0:	2301      	movs	r3, #1
 800cff2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800cff6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d002      	beq.n	800d004 <f_open+0x38c>
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	2200      	movs	r2, #0
 800d002:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d004:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800d008:	4618      	mov	r0, r3
 800d00a:	3760      	adds	r7, #96	; 0x60
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}

0800d010 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b08c      	sub	sp, #48	; 0x30
 800d014:	af00      	add	r7, sp, #0
 800d016:	60f8      	str	r0, [r7, #12]
 800d018:	60b9      	str	r1, [r7, #8]
 800d01a:	607a      	str	r2, [r7, #4]
 800d01c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d01e:	68bb      	ldr	r3, [r7, #8]
 800d020:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d022:	683b      	ldr	r3, [r7, #0]
 800d024:	2200      	movs	r2, #0
 800d026:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	f107 0210 	add.w	r2, r7, #16
 800d02e:	4611      	mov	r1, r2
 800d030:	4618      	mov	r0, r3
 800d032:	f7ff fda5 	bl	800cb80 <validate>
 800d036:	4603      	mov	r3, r0
 800d038:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d03c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d040:	2b00      	cmp	r3, #0
 800d042:	d107      	bne.n	800d054 <f_write+0x44>
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	7d5b      	ldrb	r3, [r3, #21]
 800d048:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d04c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d050:	2b00      	cmp	r3, #0
 800d052:	d002      	beq.n	800d05a <f_write+0x4a>
 800d054:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d058:	e16a      	b.n	800d330 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	7d1b      	ldrb	r3, [r3, #20]
 800d05e:	f003 0302 	and.w	r3, r3, #2
 800d062:	2b00      	cmp	r3, #0
 800d064:	d101      	bne.n	800d06a <f_write+0x5a>
 800d066:	2307      	movs	r3, #7
 800d068:	e162      	b.n	800d330 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	699a      	ldr	r2, [r3, #24]
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	441a      	add	r2, r3
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	699b      	ldr	r3, [r3, #24]
 800d076:	429a      	cmp	r2, r3
 800d078:	f080 814c 	bcs.w	800d314 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	699b      	ldr	r3, [r3, #24]
 800d080:	43db      	mvns	r3, r3
 800d082:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d084:	e146      	b.n	800d314 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	699b      	ldr	r3, [r3, #24]
 800d08a:	693a      	ldr	r2, [r7, #16]
 800d08c:	8992      	ldrh	r2, [r2, #12]
 800d08e:	fbb3 f1f2 	udiv	r1, r3, r2
 800d092:	fb01 f202 	mul.w	r2, r1, r2
 800d096:	1a9b      	subs	r3, r3, r2
 800d098:	2b00      	cmp	r3, #0
 800d09a:	f040 80f1 	bne.w	800d280 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	699b      	ldr	r3, [r3, #24]
 800d0a2:	693a      	ldr	r2, [r7, #16]
 800d0a4:	8992      	ldrh	r2, [r2, #12]
 800d0a6:	fbb3 f3f2 	udiv	r3, r3, r2
 800d0aa:	693a      	ldr	r2, [r7, #16]
 800d0ac:	8952      	ldrh	r2, [r2, #10]
 800d0ae:	3a01      	subs	r2, #1
 800d0b0:	4013      	ands	r3, r2
 800d0b2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d0b4:	69bb      	ldr	r3, [r7, #24]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d143      	bne.n	800d142 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	699b      	ldr	r3, [r3, #24]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d10c      	bne.n	800d0dc <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	689b      	ldr	r3, [r3, #8]
 800d0c6:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d11a      	bne.n	800d104 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	2100      	movs	r1, #0
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	f7fe fd94 	bl	800bc00 <create_chain>
 800d0d8:	62b8      	str	r0, [r7, #40]	; 0x28
 800d0da:	e013      	b.n	800d104 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d007      	beq.n	800d0f4 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	699b      	ldr	r3, [r3, #24]
 800d0e8:	4619      	mov	r1, r3
 800d0ea:	68f8      	ldr	r0, [r7, #12]
 800d0ec:	f7fe fe20 	bl	800bd30 <clmt_clust>
 800d0f0:	62b8      	str	r0, [r7, #40]	; 0x28
 800d0f2:	e007      	b.n	800d104 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d0f4:	68fa      	ldr	r2, [r7, #12]
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	69db      	ldr	r3, [r3, #28]
 800d0fa:	4619      	mov	r1, r3
 800d0fc:	4610      	mov	r0, r2
 800d0fe:	f7fe fd7f 	bl	800bc00 <create_chain>
 800d102:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d106:	2b00      	cmp	r3, #0
 800d108:	f000 8109 	beq.w	800d31e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d10e:	2b01      	cmp	r3, #1
 800d110:	d104      	bne.n	800d11c <f_write+0x10c>
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	2202      	movs	r2, #2
 800d116:	755a      	strb	r2, [r3, #21]
 800d118:	2302      	movs	r3, #2
 800d11a:	e109      	b.n	800d330 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d11e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d122:	d104      	bne.n	800d12e <f_write+0x11e>
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	2201      	movs	r2, #1
 800d128:	755a      	strb	r2, [r3, #21]
 800d12a:	2301      	movs	r3, #1
 800d12c:	e100      	b.n	800d330 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d132:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	689b      	ldr	r3, [r3, #8]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d102      	bne.n	800d142 <f_write+0x132>
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d140:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	7d1b      	ldrb	r3, [r3, #20]
 800d146:	b25b      	sxtb	r3, r3
 800d148:	2b00      	cmp	r3, #0
 800d14a:	da18      	bge.n	800d17e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d14c:	693b      	ldr	r3, [r7, #16]
 800d14e:	7858      	ldrb	r0, [r3, #1]
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	6a1a      	ldr	r2, [r3, #32]
 800d15a:	2301      	movs	r3, #1
 800d15c:	f7fd ff8c 	bl	800b078 <disk_write>
 800d160:	4603      	mov	r3, r0
 800d162:	2b00      	cmp	r3, #0
 800d164:	d004      	beq.n	800d170 <f_write+0x160>
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	2201      	movs	r2, #1
 800d16a:	755a      	strb	r2, [r3, #21]
 800d16c:	2301      	movs	r3, #1
 800d16e:	e0df      	b.n	800d330 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	7d1b      	ldrb	r3, [r3, #20]
 800d174:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d178:	b2da      	uxtb	r2, r3
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d17e:	693a      	ldr	r2, [r7, #16]
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	69db      	ldr	r3, [r3, #28]
 800d184:	4619      	mov	r1, r3
 800d186:	4610      	mov	r0, r2
 800d188:	f7fe fac6 	bl	800b718 <clust2sect>
 800d18c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d18e:	697b      	ldr	r3, [r7, #20]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d104      	bne.n	800d19e <f_write+0x18e>
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	2202      	movs	r2, #2
 800d198:	755a      	strb	r2, [r3, #21]
 800d19a:	2302      	movs	r3, #2
 800d19c:	e0c8      	b.n	800d330 <f_write+0x320>
			sect += csect;
 800d19e:	697a      	ldr	r2, [r7, #20]
 800d1a0:	69bb      	ldr	r3, [r7, #24]
 800d1a2:	4413      	add	r3, r2
 800d1a4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d1a6:	693b      	ldr	r3, [r7, #16]
 800d1a8:	899b      	ldrh	r3, [r3, #12]
 800d1aa:	461a      	mov	r2, r3
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	fbb3 f3f2 	udiv	r3, r3, r2
 800d1b2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d1b4:	6a3b      	ldr	r3, [r7, #32]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d043      	beq.n	800d242 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d1ba:	69ba      	ldr	r2, [r7, #24]
 800d1bc:	6a3b      	ldr	r3, [r7, #32]
 800d1be:	4413      	add	r3, r2
 800d1c0:	693a      	ldr	r2, [r7, #16]
 800d1c2:	8952      	ldrh	r2, [r2, #10]
 800d1c4:	4293      	cmp	r3, r2
 800d1c6:	d905      	bls.n	800d1d4 <f_write+0x1c4>
					cc = fs->csize - csect;
 800d1c8:	693b      	ldr	r3, [r7, #16]
 800d1ca:	895b      	ldrh	r3, [r3, #10]
 800d1cc:	461a      	mov	r2, r3
 800d1ce:	69bb      	ldr	r3, [r7, #24]
 800d1d0:	1ad3      	subs	r3, r2, r3
 800d1d2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d1d4:	693b      	ldr	r3, [r7, #16]
 800d1d6:	7858      	ldrb	r0, [r3, #1]
 800d1d8:	6a3b      	ldr	r3, [r7, #32]
 800d1da:	697a      	ldr	r2, [r7, #20]
 800d1dc:	69f9      	ldr	r1, [r7, #28]
 800d1de:	f7fd ff4b 	bl	800b078 <disk_write>
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d004      	beq.n	800d1f2 <f_write+0x1e2>
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	2201      	movs	r2, #1
 800d1ec:	755a      	strb	r2, [r3, #21]
 800d1ee:	2301      	movs	r3, #1
 800d1f0:	e09e      	b.n	800d330 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	6a1a      	ldr	r2, [r3, #32]
 800d1f6:	697b      	ldr	r3, [r7, #20]
 800d1f8:	1ad3      	subs	r3, r2, r3
 800d1fa:	6a3a      	ldr	r2, [r7, #32]
 800d1fc:	429a      	cmp	r2, r3
 800d1fe:	d918      	bls.n	800d232 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	6a1a      	ldr	r2, [r3, #32]
 800d20a:	697b      	ldr	r3, [r7, #20]
 800d20c:	1ad3      	subs	r3, r2, r3
 800d20e:	693a      	ldr	r2, [r7, #16]
 800d210:	8992      	ldrh	r2, [r2, #12]
 800d212:	fb02 f303 	mul.w	r3, r2, r3
 800d216:	69fa      	ldr	r2, [r7, #28]
 800d218:	18d1      	adds	r1, r2, r3
 800d21a:	693b      	ldr	r3, [r7, #16]
 800d21c:	899b      	ldrh	r3, [r3, #12]
 800d21e:	461a      	mov	r2, r3
 800d220:	f7fd ffea 	bl	800b1f8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	7d1b      	ldrb	r3, [r3, #20]
 800d228:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d22c:	b2da      	uxtb	r2, r3
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d232:	693b      	ldr	r3, [r7, #16]
 800d234:	899b      	ldrh	r3, [r3, #12]
 800d236:	461a      	mov	r2, r3
 800d238:	6a3b      	ldr	r3, [r7, #32]
 800d23a:	fb02 f303 	mul.w	r3, r2, r3
 800d23e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800d240:	e04b      	b.n	800d2da <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	6a1b      	ldr	r3, [r3, #32]
 800d246:	697a      	ldr	r2, [r7, #20]
 800d248:	429a      	cmp	r2, r3
 800d24a:	d016      	beq.n	800d27a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	699a      	ldr	r2, [r3, #24]
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d254:	429a      	cmp	r2, r3
 800d256:	d210      	bcs.n	800d27a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d258:	693b      	ldr	r3, [r7, #16]
 800d25a:	7858      	ldrb	r0, [r3, #1]
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d262:	2301      	movs	r3, #1
 800d264:	697a      	ldr	r2, [r7, #20]
 800d266:	f7fd fee7 	bl	800b038 <disk_read>
 800d26a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d004      	beq.n	800d27a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	2201      	movs	r2, #1
 800d274:	755a      	strb	r2, [r3, #21]
 800d276:	2301      	movs	r3, #1
 800d278:	e05a      	b.n	800d330 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	697a      	ldr	r2, [r7, #20]
 800d27e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d280:	693b      	ldr	r3, [r7, #16]
 800d282:	899b      	ldrh	r3, [r3, #12]
 800d284:	4618      	mov	r0, r3
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	699b      	ldr	r3, [r3, #24]
 800d28a:	693a      	ldr	r2, [r7, #16]
 800d28c:	8992      	ldrh	r2, [r2, #12]
 800d28e:	fbb3 f1f2 	udiv	r1, r3, r2
 800d292:	fb01 f202 	mul.w	r2, r1, r2
 800d296:	1a9b      	subs	r3, r3, r2
 800d298:	1ac3      	subs	r3, r0, r3
 800d29a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d29c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	429a      	cmp	r2, r3
 800d2a2:	d901      	bls.n	800d2a8 <f_write+0x298>
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	699b      	ldr	r3, [r3, #24]
 800d2b2:	693a      	ldr	r2, [r7, #16]
 800d2b4:	8992      	ldrh	r2, [r2, #12]
 800d2b6:	fbb3 f0f2 	udiv	r0, r3, r2
 800d2ba:	fb00 f202 	mul.w	r2, r0, r2
 800d2be:	1a9b      	subs	r3, r3, r2
 800d2c0:	440b      	add	r3, r1
 800d2c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2c4:	69f9      	ldr	r1, [r7, #28]
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	f7fd ff96 	bl	800b1f8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	7d1b      	ldrb	r3, [r3, #20]
 800d2d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d2d4:	b2da      	uxtb	r2, r3
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d2da:	69fa      	ldr	r2, [r7, #28]
 800d2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2de:	4413      	add	r3, r2
 800d2e0:	61fb      	str	r3, [r7, #28]
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	699a      	ldr	r2, [r3, #24]
 800d2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2e8:	441a      	add	r2, r3
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	619a      	str	r2, [r3, #24]
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	68da      	ldr	r2, [r3, #12]
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	699b      	ldr	r3, [r3, #24]
 800d2f6:	429a      	cmp	r2, r3
 800d2f8:	bf38      	it	cc
 800d2fa:	461a      	movcc	r2, r3
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	60da      	str	r2, [r3, #12]
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	681a      	ldr	r2, [r3, #0]
 800d304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d306:	441a      	add	r2, r3
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	601a      	str	r2, [r3, #0]
 800d30c:	687a      	ldr	r2, [r7, #4]
 800d30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d310:	1ad3      	subs	r3, r2, r3
 800d312:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2b00      	cmp	r3, #0
 800d318:	f47f aeb5 	bne.w	800d086 <f_write+0x76>
 800d31c:	e000      	b.n	800d320 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d31e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	7d1b      	ldrb	r3, [r3, #20]
 800d324:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d328:	b2da      	uxtb	r2, r3
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d32e:	2300      	movs	r3, #0
}
 800d330:	4618      	mov	r0, r3
 800d332:	3730      	adds	r7, #48	; 0x30
 800d334:	46bd      	mov	sp, r7
 800d336:	bd80      	pop	{r7, pc}

0800d338 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b086      	sub	sp, #24
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	f107 0208 	add.w	r2, r7, #8
 800d346:	4611      	mov	r1, r2
 800d348:	4618      	mov	r0, r3
 800d34a:	f7ff fc19 	bl	800cb80 <validate>
 800d34e:	4603      	mov	r3, r0
 800d350:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d352:	7dfb      	ldrb	r3, [r7, #23]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d168      	bne.n	800d42a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	7d1b      	ldrb	r3, [r3, #20]
 800d35c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d360:	2b00      	cmp	r3, #0
 800d362:	d062      	beq.n	800d42a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	7d1b      	ldrb	r3, [r3, #20]
 800d368:	b25b      	sxtb	r3, r3
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	da15      	bge.n	800d39a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d36e:	68bb      	ldr	r3, [r7, #8]
 800d370:	7858      	ldrb	r0, [r3, #1]
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	6a1a      	ldr	r2, [r3, #32]
 800d37c:	2301      	movs	r3, #1
 800d37e:	f7fd fe7b 	bl	800b078 <disk_write>
 800d382:	4603      	mov	r3, r0
 800d384:	2b00      	cmp	r3, #0
 800d386:	d001      	beq.n	800d38c <f_sync+0x54>
 800d388:	2301      	movs	r3, #1
 800d38a:	e04f      	b.n	800d42c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	7d1b      	ldrb	r3, [r3, #20]
 800d390:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d394:	b2da      	uxtb	r2, r3
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d39a:	f7fd fbd9 	bl	800ab50 <get_fattime>
 800d39e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d3a0:	68ba      	ldr	r2, [r7, #8]
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3a6:	4619      	mov	r1, r3
 800d3a8:	4610      	mov	r0, r2
 800d3aa:	f7fe f917 	bl	800b5dc <move_window>
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d3b2:	7dfb      	ldrb	r3, [r7, #23]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d138      	bne.n	800d42a <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3bc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	330b      	adds	r3, #11
 800d3c2:	781a      	ldrb	r2, [r3, #0]
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	330b      	adds	r3, #11
 800d3c8:	f042 0220 	orr.w	r2, r2, #32
 800d3cc:	b2d2      	uxtb	r2, r2
 800d3ce:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	6818      	ldr	r0, [r3, #0]
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	689b      	ldr	r3, [r3, #8]
 800d3d8:	461a      	mov	r2, r3
 800d3da:	68f9      	ldr	r1, [r7, #12]
 800d3dc:	f7fe fea5 	bl	800c12a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	f103 021c 	add.w	r2, r3, #28
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	68db      	ldr	r3, [r3, #12]
 800d3ea:	4619      	mov	r1, r3
 800d3ec:	4610      	mov	r0, r2
 800d3ee:	f7fd fed7 	bl	800b1a0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	3316      	adds	r3, #22
 800d3f6:	6939      	ldr	r1, [r7, #16]
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f7fd fed1 	bl	800b1a0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	3312      	adds	r3, #18
 800d402:	2100      	movs	r1, #0
 800d404:	4618      	mov	r0, r3
 800d406:	f7fd feb0 	bl	800b16a <st_word>
					fs->wflag = 1;
 800d40a:	68bb      	ldr	r3, [r7, #8]
 800d40c:	2201      	movs	r2, #1
 800d40e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d410:	68bb      	ldr	r3, [r7, #8]
 800d412:	4618      	mov	r0, r3
 800d414:	f7fe f910 	bl	800b638 <sync_fs>
 800d418:	4603      	mov	r3, r0
 800d41a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	7d1b      	ldrb	r3, [r3, #20]
 800d420:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d424:	b2da      	uxtb	r2, r3
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d42a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	3718      	adds	r7, #24
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}

0800d434 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b090      	sub	sp, #64	; 0x40
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
 800d43c:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800d43e:	f107 010c 	add.w	r1, r7, #12
 800d442:	1d3b      	adds	r3, r7, #4
 800d444:	2200      	movs	r2, #0
 800d446:	4618      	mov	r0, r3
 800d448:	f7ff f91a 	bl	800c680 <find_volume>
 800d44c:	4603      	mov	r3, r0
 800d44e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800d452:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d456:	2b00      	cmp	r3, #0
 800d458:	d11f      	bne.n	800d49a <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d45a:	687a      	ldr	r2, [r7, #4]
 800d45c:	f107 030c 	add.w	r3, r7, #12
 800d460:	4611      	mov	r1, r2
 800d462:	4618      	mov	r0, r3
 800d464:	f7fe fffc 	bl	800c460 <follow_path>
 800d468:	4603      	mov	r3, r0
 800d46a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800d46e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d472:	2b00      	cmp	r3, #0
 800d474:	d111      	bne.n	800d49a <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800d476:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d47a:	b25b      	sxtb	r3, r3
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	da03      	bge.n	800d488 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800d480:	2306      	movs	r3, #6
 800d482:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d486:	e008      	b.n	800d49a <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d005      	beq.n	800d49a <f_stat+0x66>
 800d48e:	f107 030c 	add.w	r3, r7, #12
 800d492:	6839      	ldr	r1, [r7, #0]
 800d494:	4618      	mov	r0, r3
 800d496:	f7fe feef 	bl	800c278 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800d49a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800d49e:	4618      	mov	r0, r3
 800d4a0:	3740      	adds	r7, #64	; 0x40
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}
	...

0800d4a8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d4a8:	b480      	push	{r7}
 800d4aa:	b087      	sub	sp, #28
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	60f8      	str	r0, [r7, #12]
 800d4b0:	60b9      	str	r1, [r7, #8]
 800d4b2:	4613      	mov	r3, r2
 800d4b4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d4b6:	2301      	movs	r3, #1
 800d4b8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d4be:	4b1f      	ldr	r3, [pc, #124]	; (800d53c <FATFS_LinkDriverEx+0x94>)
 800d4c0:	7a5b      	ldrb	r3, [r3, #9]
 800d4c2:	b2db      	uxtb	r3, r3
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d131      	bne.n	800d52c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d4c8:	4b1c      	ldr	r3, [pc, #112]	; (800d53c <FATFS_LinkDriverEx+0x94>)
 800d4ca:	7a5b      	ldrb	r3, [r3, #9]
 800d4cc:	b2db      	uxtb	r3, r3
 800d4ce:	461a      	mov	r2, r3
 800d4d0:	4b1a      	ldr	r3, [pc, #104]	; (800d53c <FATFS_LinkDriverEx+0x94>)
 800d4d2:	2100      	movs	r1, #0
 800d4d4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d4d6:	4b19      	ldr	r3, [pc, #100]	; (800d53c <FATFS_LinkDriverEx+0x94>)
 800d4d8:	7a5b      	ldrb	r3, [r3, #9]
 800d4da:	b2db      	uxtb	r3, r3
 800d4dc:	4a17      	ldr	r2, [pc, #92]	; (800d53c <FATFS_LinkDriverEx+0x94>)
 800d4de:	009b      	lsls	r3, r3, #2
 800d4e0:	4413      	add	r3, r2
 800d4e2:	68fa      	ldr	r2, [r7, #12]
 800d4e4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d4e6:	4b15      	ldr	r3, [pc, #84]	; (800d53c <FATFS_LinkDriverEx+0x94>)
 800d4e8:	7a5b      	ldrb	r3, [r3, #9]
 800d4ea:	b2db      	uxtb	r3, r3
 800d4ec:	461a      	mov	r2, r3
 800d4ee:	4b13      	ldr	r3, [pc, #76]	; (800d53c <FATFS_LinkDriverEx+0x94>)
 800d4f0:	4413      	add	r3, r2
 800d4f2:	79fa      	ldrb	r2, [r7, #7]
 800d4f4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d4f6:	4b11      	ldr	r3, [pc, #68]	; (800d53c <FATFS_LinkDriverEx+0x94>)
 800d4f8:	7a5b      	ldrb	r3, [r3, #9]
 800d4fa:	b2db      	uxtb	r3, r3
 800d4fc:	1c5a      	adds	r2, r3, #1
 800d4fe:	b2d1      	uxtb	r1, r2
 800d500:	4a0e      	ldr	r2, [pc, #56]	; (800d53c <FATFS_LinkDriverEx+0x94>)
 800d502:	7251      	strb	r1, [r2, #9]
 800d504:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d506:	7dbb      	ldrb	r3, [r7, #22]
 800d508:	3330      	adds	r3, #48	; 0x30
 800d50a:	b2da      	uxtb	r2, r3
 800d50c:	68bb      	ldr	r3, [r7, #8]
 800d50e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d510:	68bb      	ldr	r3, [r7, #8]
 800d512:	3301      	adds	r3, #1
 800d514:	223a      	movs	r2, #58	; 0x3a
 800d516:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d518:	68bb      	ldr	r3, [r7, #8]
 800d51a:	3302      	adds	r3, #2
 800d51c:	222f      	movs	r2, #47	; 0x2f
 800d51e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	3303      	adds	r3, #3
 800d524:	2200      	movs	r2, #0
 800d526:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d528:	2300      	movs	r3, #0
 800d52a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d52c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d52e:	4618      	mov	r0, r3
 800d530:	371c      	adds	r7, #28
 800d532:	46bd      	mov	sp, r7
 800d534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d538:	4770      	bx	lr
 800d53a:	bf00      	nop
 800d53c:	2000407c 	.word	0x2000407c

0800d540 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b082      	sub	sp, #8
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
 800d548:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d54a:	2200      	movs	r2, #0
 800d54c:	6839      	ldr	r1, [r7, #0]
 800d54e:	6878      	ldr	r0, [r7, #4]
 800d550:	f7ff ffaa 	bl	800d4a8 <FATFS_LinkDriverEx>
 800d554:	4603      	mov	r3, r0
}
 800d556:	4618      	mov	r0, r3
 800d558:	3708      	adds	r7, #8
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bd80      	pop	{r7, pc}
	...

0800d560 <__errno>:
 800d560:	4b01      	ldr	r3, [pc, #4]	; (800d568 <__errno+0x8>)
 800d562:	6818      	ldr	r0, [r3, #0]
 800d564:	4770      	bx	lr
 800d566:	bf00      	nop
 800d568:	2000000c 	.word	0x2000000c

0800d56c <__libc_init_array>:
 800d56c:	b570      	push	{r4, r5, r6, lr}
 800d56e:	4d0d      	ldr	r5, [pc, #52]	; (800d5a4 <__libc_init_array+0x38>)
 800d570:	4c0d      	ldr	r4, [pc, #52]	; (800d5a8 <__libc_init_array+0x3c>)
 800d572:	1b64      	subs	r4, r4, r5
 800d574:	10a4      	asrs	r4, r4, #2
 800d576:	2600      	movs	r6, #0
 800d578:	42a6      	cmp	r6, r4
 800d57a:	d109      	bne.n	800d590 <__libc_init_array+0x24>
 800d57c:	4d0b      	ldr	r5, [pc, #44]	; (800d5ac <__libc_init_array+0x40>)
 800d57e:	4c0c      	ldr	r4, [pc, #48]	; (800d5b0 <__libc_init_array+0x44>)
 800d580:	f004 ff36 	bl	80123f0 <_init>
 800d584:	1b64      	subs	r4, r4, r5
 800d586:	10a4      	asrs	r4, r4, #2
 800d588:	2600      	movs	r6, #0
 800d58a:	42a6      	cmp	r6, r4
 800d58c:	d105      	bne.n	800d59a <__libc_init_array+0x2e>
 800d58e:	bd70      	pop	{r4, r5, r6, pc}
 800d590:	f855 3b04 	ldr.w	r3, [r5], #4
 800d594:	4798      	blx	r3
 800d596:	3601      	adds	r6, #1
 800d598:	e7ee      	b.n	800d578 <__libc_init_array+0xc>
 800d59a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d59e:	4798      	blx	r3
 800d5a0:	3601      	adds	r6, #1
 800d5a2:	e7f2      	b.n	800d58a <__libc_init_array+0x1e>
 800d5a4:	08014438 	.word	0x08014438
 800d5a8:	08014438 	.word	0x08014438
 800d5ac:	08014438 	.word	0x08014438
 800d5b0:	0801443c 	.word	0x0801443c

0800d5b4 <memset>:
 800d5b4:	4402      	add	r2, r0
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	4293      	cmp	r3, r2
 800d5ba:	d100      	bne.n	800d5be <memset+0xa>
 800d5bc:	4770      	bx	lr
 800d5be:	f803 1b01 	strb.w	r1, [r3], #1
 800d5c2:	e7f9      	b.n	800d5b8 <memset+0x4>

0800d5c4 <__cvt>:
 800d5c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5c6:	ed2d 8b02 	vpush	{d8}
 800d5ca:	eeb0 8b40 	vmov.f64	d8, d0
 800d5ce:	b085      	sub	sp, #20
 800d5d0:	4617      	mov	r7, r2
 800d5d2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800d5d4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d5d6:	ee18 2a90 	vmov	r2, s17
 800d5da:	f025 0520 	bic.w	r5, r5, #32
 800d5de:	2a00      	cmp	r2, #0
 800d5e0:	bfb6      	itet	lt
 800d5e2:	222d      	movlt	r2, #45	; 0x2d
 800d5e4:	2200      	movge	r2, #0
 800d5e6:	eeb1 8b40 	vneglt.f64	d8, d0
 800d5ea:	2d46      	cmp	r5, #70	; 0x46
 800d5ec:	460c      	mov	r4, r1
 800d5ee:	701a      	strb	r2, [r3, #0]
 800d5f0:	d004      	beq.n	800d5fc <__cvt+0x38>
 800d5f2:	2d45      	cmp	r5, #69	; 0x45
 800d5f4:	d100      	bne.n	800d5f8 <__cvt+0x34>
 800d5f6:	3401      	adds	r4, #1
 800d5f8:	2102      	movs	r1, #2
 800d5fa:	e000      	b.n	800d5fe <__cvt+0x3a>
 800d5fc:	2103      	movs	r1, #3
 800d5fe:	ab03      	add	r3, sp, #12
 800d600:	9301      	str	r3, [sp, #4]
 800d602:	ab02      	add	r3, sp, #8
 800d604:	9300      	str	r3, [sp, #0]
 800d606:	4622      	mov	r2, r4
 800d608:	4633      	mov	r3, r6
 800d60a:	eeb0 0b48 	vmov.f64	d0, d8
 800d60e:	f001 fe7f 	bl	800f310 <_dtoa_r>
 800d612:	2d47      	cmp	r5, #71	; 0x47
 800d614:	d101      	bne.n	800d61a <__cvt+0x56>
 800d616:	07fb      	lsls	r3, r7, #31
 800d618:	d51a      	bpl.n	800d650 <__cvt+0x8c>
 800d61a:	2d46      	cmp	r5, #70	; 0x46
 800d61c:	eb00 0204 	add.w	r2, r0, r4
 800d620:	d10c      	bne.n	800d63c <__cvt+0x78>
 800d622:	7803      	ldrb	r3, [r0, #0]
 800d624:	2b30      	cmp	r3, #48	; 0x30
 800d626:	d107      	bne.n	800d638 <__cvt+0x74>
 800d628:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d62c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d630:	bf1c      	itt	ne
 800d632:	f1c4 0401 	rsbne	r4, r4, #1
 800d636:	6034      	strne	r4, [r6, #0]
 800d638:	6833      	ldr	r3, [r6, #0]
 800d63a:	441a      	add	r2, r3
 800d63c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d644:	bf08      	it	eq
 800d646:	9203      	streq	r2, [sp, #12]
 800d648:	2130      	movs	r1, #48	; 0x30
 800d64a:	9b03      	ldr	r3, [sp, #12]
 800d64c:	4293      	cmp	r3, r2
 800d64e:	d307      	bcc.n	800d660 <__cvt+0x9c>
 800d650:	9b03      	ldr	r3, [sp, #12]
 800d652:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d654:	1a1b      	subs	r3, r3, r0
 800d656:	6013      	str	r3, [r2, #0]
 800d658:	b005      	add	sp, #20
 800d65a:	ecbd 8b02 	vpop	{d8}
 800d65e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d660:	1c5c      	adds	r4, r3, #1
 800d662:	9403      	str	r4, [sp, #12]
 800d664:	7019      	strb	r1, [r3, #0]
 800d666:	e7f0      	b.n	800d64a <__cvt+0x86>

0800d668 <__exponent>:
 800d668:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d66a:	4603      	mov	r3, r0
 800d66c:	2900      	cmp	r1, #0
 800d66e:	bfb8      	it	lt
 800d670:	4249      	neglt	r1, r1
 800d672:	f803 2b02 	strb.w	r2, [r3], #2
 800d676:	bfb4      	ite	lt
 800d678:	222d      	movlt	r2, #45	; 0x2d
 800d67a:	222b      	movge	r2, #43	; 0x2b
 800d67c:	2909      	cmp	r1, #9
 800d67e:	7042      	strb	r2, [r0, #1]
 800d680:	dd2a      	ble.n	800d6d8 <__exponent+0x70>
 800d682:	f10d 0407 	add.w	r4, sp, #7
 800d686:	46a4      	mov	ip, r4
 800d688:	270a      	movs	r7, #10
 800d68a:	46a6      	mov	lr, r4
 800d68c:	460a      	mov	r2, r1
 800d68e:	fb91 f6f7 	sdiv	r6, r1, r7
 800d692:	fb07 1516 	mls	r5, r7, r6, r1
 800d696:	3530      	adds	r5, #48	; 0x30
 800d698:	2a63      	cmp	r2, #99	; 0x63
 800d69a:	f104 34ff 	add.w	r4, r4, #4294967295
 800d69e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d6a2:	4631      	mov	r1, r6
 800d6a4:	dcf1      	bgt.n	800d68a <__exponent+0x22>
 800d6a6:	3130      	adds	r1, #48	; 0x30
 800d6a8:	f1ae 0502 	sub.w	r5, lr, #2
 800d6ac:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d6b0:	1c44      	adds	r4, r0, #1
 800d6b2:	4629      	mov	r1, r5
 800d6b4:	4561      	cmp	r1, ip
 800d6b6:	d30a      	bcc.n	800d6ce <__exponent+0x66>
 800d6b8:	f10d 0209 	add.w	r2, sp, #9
 800d6bc:	eba2 020e 	sub.w	r2, r2, lr
 800d6c0:	4565      	cmp	r5, ip
 800d6c2:	bf88      	it	hi
 800d6c4:	2200      	movhi	r2, #0
 800d6c6:	4413      	add	r3, r2
 800d6c8:	1a18      	subs	r0, r3, r0
 800d6ca:	b003      	add	sp, #12
 800d6cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d6d2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d6d6:	e7ed      	b.n	800d6b4 <__exponent+0x4c>
 800d6d8:	2330      	movs	r3, #48	; 0x30
 800d6da:	3130      	adds	r1, #48	; 0x30
 800d6dc:	7083      	strb	r3, [r0, #2]
 800d6de:	70c1      	strb	r1, [r0, #3]
 800d6e0:	1d03      	adds	r3, r0, #4
 800d6e2:	e7f1      	b.n	800d6c8 <__exponent+0x60>
 800d6e4:	0000      	movs	r0, r0
	...

0800d6e8 <_printf_float>:
 800d6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6ec:	b08b      	sub	sp, #44	; 0x2c
 800d6ee:	460c      	mov	r4, r1
 800d6f0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800d6f4:	4616      	mov	r6, r2
 800d6f6:	461f      	mov	r7, r3
 800d6f8:	4605      	mov	r5, r0
 800d6fa:	f003 f89d 	bl	8010838 <_localeconv_r>
 800d6fe:	f8d0 b000 	ldr.w	fp, [r0]
 800d702:	4658      	mov	r0, fp
 800d704:	f7f2 fda6 	bl	8000254 <strlen>
 800d708:	2300      	movs	r3, #0
 800d70a:	9308      	str	r3, [sp, #32]
 800d70c:	f8d8 3000 	ldr.w	r3, [r8]
 800d710:	f894 9018 	ldrb.w	r9, [r4, #24]
 800d714:	6822      	ldr	r2, [r4, #0]
 800d716:	3307      	adds	r3, #7
 800d718:	f023 0307 	bic.w	r3, r3, #7
 800d71c:	f103 0108 	add.w	r1, r3, #8
 800d720:	f8c8 1000 	str.w	r1, [r8]
 800d724:	4682      	mov	sl, r0
 800d726:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d72a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800d72e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800d990 <_printf_float+0x2a8>
 800d732:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800d736:	eeb0 6bc0 	vabs.f64	d6, d0
 800d73a:	eeb4 6b47 	vcmp.f64	d6, d7
 800d73e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d742:	dd24      	ble.n	800d78e <_printf_float+0xa6>
 800d744:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d74c:	d502      	bpl.n	800d754 <_printf_float+0x6c>
 800d74e:	232d      	movs	r3, #45	; 0x2d
 800d750:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d754:	4b90      	ldr	r3, [pc, #576]	; (800d998 <_printf_float+0x2b0>)
 800d756:	4891      	ldr	r0, [pc, #580]	; (800d99c <_printf_float+0x2b4>)
 800d758:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800d75c:	bf94      	ite	ls
 800d75e:	4698      	movls	r8, r3
 800d760:	4680      	movhi	r8, r0
 800d762:	2303      	movs	r3, #3
 800d764:	6123      	str	r3, [r4, #16]
 800d766:	f022 0204 	bic.w	r2, r2, #4
 800d76a:	2300      	movs	r3, #0
 800d76c:	6022      	str	r2, [r4, #0]
 800d76e:	9304      	str	r3, [sp, #16]
 800d770:	9700      	str	r7, [sp, #0]
 800d772:	4633      	mov	r3, r6
 800d774:	aa09      	add	r2, sp, #36	; 0x24
 800d776:	4621      	mov	r1, r4
 800d778:	4628      	mov	r0, r5
 800d77a:	f000 f9d3 	bl	800db24 <_printf_common>
 800d77e:	3001      	adds	r0, #1
 800d780:	f040 808a 	bne.w	800d898 <_printf_float+0x1b0>
 800d784:	f04f 30ff 	mov.w	r0, #4294967295
 800d788:	b00b      	add	sp, #44	; 0x2c
 800d78a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d78e:	eeb4 0b40 	vcmp.f64	d0, d0
 800d792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d796:	d709      	bvc.n	800d7ac <_printf_float+0xc4>
 800d798:	ee10 3a90 	vmov	r3, s1
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	bfbc      	itt	lt
 800d7a0:	232d      	movlt	r3, #45	; 0x2d
 800d7a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d7a6:	487e      	ldr	r0, [pc, #504]	; (800d9a0 <_printf_float+0x2b8>)
 800d7a8:	4b7e      	ldr	r3, [pc, #504]	; (800d9a4 <_printf_float+0x2bc>)
 800d7aa:	e7d5      	b.n	800d758 <_printf_float+0x70>
 800d7ac:	6863      	ldr	r3, [r4, #4]
 800d7ae:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800d7b2:	9104      	str	r1, [sp, #16]
 800d7b4:	1c59      	adds	r1, r3, #1
 800d7b6:	d13c      	bne.n	800d832 <_printf_float+0x14a>
 800d7b8:	2306      	movs	r3, #6
 800d7ba:	6063      	str	r3, [r4, #4]
 800d7bc:	2300      	movs	r3, #0
 800d7be:	9303      	str	r3, [sp, #12]
 800d7c0:	ab08      	add	r3, sp, #32
 800d7c2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800d7c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d7ca:	ab07      	add	r3, sp, #28
 800d7cc:	6861      	ldr	r1, [r4, #4]
 800d7ce:	9300      	str	r3, [sp, #0]
 800d7d0:	6022      	str	r2, [r4, #0]
 800d7d2:	f10d 031b 	add.w	r3, sp, #27
 800d7d6:	4628      	mov	r0, r5
 800d7d8:	f7ff fef4 	bl	800d5c4 <__cvt>
 800d7dc:	9b04      	ldr	r3, [sp, #16]
 800d7de:	9907      	ldr	r1, [sp, #28]
 800d7e0:	2b47      	cmp	r3, #71	; 0x47
 800d7e2:	4680      	mov	r8, r0
 800d7e4:	d108      	bne.n	800d7f8 <_printf_float+0x110>
 800d7e6:	1cc8      	adds	r0, r1, #3
 800d7e8:	db02      	blt.n	800d7f0 <_printf_float+0x108>
 800d7ea:	6863      	ldr	r3, [r4, #4]
 800d7ec:	4299      	cmp	r1, r3
 800d7ee:	dd41      	ble.n	800d874 <_printf_float+0x18c>
 800d7f0:	f1a9 0902 	sub.w	r9, r9, #2
 800d7f4:	fa5f f989 	uxtb.w	r9, r9
 800d7f8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d7fc:	d820      	bhi.n	800d840 <_printf_float+0x158>
 800d7fe:	3901      	subs	r1, #1
 800d800:	464a      	mov	r2, r9
 800d802:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d806:	9107      	str	r1, [sp, #28]
 800d808:	f7ff ff2e 	bl	800d668 <__exponent>
 800d80c:	9a08      	ldr	r2, [sp, #32]
 800d80e:	9004      	str	r0, [sp, #16]
 800d810:	1813      	adds	r3, r2, r0
 800d812:	2a01      	cmp	r2, #1
 800d814:	6123      	str	r3, [r4, #16]
 800d816:	dc02      	bgt.n	800d81e <_printf_float+0x136>
 800d818:	6822      	ldr	r2, [r4, #0]
 800d81a:	07d2      	lsls	r2, r2, #31
 800d81c:	d501      	bpl.n	800d822 <_printf_float+0x13a>
 800d81e:	3301      	adds	r3, #1
 800d820:	6123      	str	r3, [r4, #16]
 800d822:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d0a2      	beq.n	800d770 <_printf_float+0x88>
 800d82a:	232d      	movs	r3, #45	; 0x2d
 800d82c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d830:	e79e      	b.n	800d770 <_printf_float+0x88>
 800d832:	9904      	ldr	r1, [sp, #16]
 800d834:	2947      	cmp	r1, #71	; 0x47
 800d836:	d1c1      	bne.n	800d7bc <_printf_float+0xd4>
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d1bf      	bne.n	800d7bc <_printf_float+0xd4>
 800d83c:	2301      	movs	r3, #1
 800d83e:	e7bc      	b.n	800d7ba <_printf_float+0xd2>
 800d840:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800d844:	d118      	bne.n	800d878 <_printf_float+0x190>
 800d846:	2900      	cmp	r1, #0
 800d848:	6863      	ldr	r3, [r4, #4]
 800d84a:	dd0b      	ble.n	800d864 <_printf_float+0x17c>
 800d84c:	6121      	str	r1, [r4, #16]
 800d84e:	b913      	cbnz	r3, 800d856 <_printf_float+0x16e>
 800d850:	6822      	ldr	r2, [r4, #0]
 800d852:	07d0      	lsls	r0, r2, #31
 800d854:	d502      	bpl.n	800d85c <_printf_float+0x174>
 800d856:	3301      	adds	r3, #1
 800d858:	440b      	add	r3, r1
 800d85a:	6123      	str	r3, [r4, #16]
 800d85c:	2300      	movs	r3, #0
 800d85e:	65a1      	str	r1, [r4, #88]	; 0x58
 800d860:	9304      	str	r3, [sp, #16]
 800d862:	e7de      	b.n	800d822 <_printf_float+0x13a>
 800d864:	b913      	cbnz	r3, 800d86c <_printf_float+0x184>
 800d866:	6822      	ldr	r2, [r4, #0]
 800d868:	07d2      	lsls	r2, r2, #31
 800d86a:	d501      	bpl.n	800d870 <_printf_float+0x188>
 800d86c:	3302      	adds	r3, #2
 800d86e:	e7f4      	b.n	800d85a <_printf_float+0x172>
 800d870:	2301      	movs	r3, #1
 800d872:	e7f2      	b.n	800d85a <_printf_float+0x172>
 800d874:	f04f 0967 	mov.w	r9, #103	; 0x67
 800d878:	9b08      	ldr	r3, [sp, #32]
 800d87a:	4299      	cmp	r1, r3
 800d87c:	db05      	blt.n	800d88a <_printf_float+0x1a2>
 800d87e:	6823      	ldr	r3, [r4, #0]
 800d880:	6121      	str	r1, [r4, #16]
 800d882:	07d8      	lsls	r0, r3, #31
 800d884:	d5ea      	bpl.n	800d85c <_printf_float+0x174>
 800d886:	1c4b      	adds	r3, r1, #1
 800d888:	e7e7      	b.n	800d85a <_printf_float+0x172>
 800d88a:	2900      	cmp	r1, #0
 800d88c:	bfd4      	ite	le
 800d88e:	f1c1 0202 	rsble	r2, r1, #2
 800d892:	2201      	movgt	r2, #1
 800d894:	4413      	add	r3, r2
 800d896:	e7e0      	b.n	800d85a <_printf_float+0x172>
 800d898:	6823      	ldr	r3, [r4, #0]
 800d89a:	055a      	lsls	r2, r3, #21
 800d89c:	d407      	bmi.n	800d8ae <_printf_float+0x1c6>
 800d89e:	6923      	ldr	r3, [r4, #16]
 800d8a0:	4642      	mov	r2, r8
 800d8a2:	4631      	mov	r1, r6
 800d8a4:	4628      	mov	r0, r5
 800d8a6:	47b8      	blx	r7
 800d8a8:	3001      	adds	r0, #1
 800d8aa:	d12a      	bne.n	800d902 <_printf_float+0x21a>
 800d8ac:	e76a      	b.n	800d784 <_printf_float+0x9c>
 800d8ae:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d8b2:	f240 80e2 	bls.w	800da7a <_printf_float+0x392>
 800d8b6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d8ba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d8be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8c2:	d133      	bne.n	800d92c <_printf_float+0x244>
 800d8c4:	4a38      	ldr	r2, [pc, #224]	; (800d9a8 <_printf_float+0x2c0>)
 800d8c6:	2301      	movs	r3, #1
 800d8c8:	4631      	mov	r1, r6
 800d8ca:	4628      	mov	r0, r5
 800d8cc:	47b8      	blx	r7
 800d8ce:	3001      	adds	r0, #1
 800d8d0:	f43f af58 	beq.w	800d784 <_printf_float+0x9c>
 800d8d4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d8d8:	429a      	cmp	r2, r3
 800d8da:	db02      	blt.n	800d8e2 <_printf_float+0x1fa>
 800d8dc:	6823      	ldr	r3, [r4, #0]
 800d8de:	07d8      	lsls	r0, r3, #31
 800d8e0:	d50f      	bpl.n	800d902 <_printf_float+0x21a>
 800d8e2:	4653      	mov	r3, sl
 800d8e4:	465a      	mov	r2, fp
 800d8e6:	4631      	mov	r1, r6
 800d8e8:	4628      	mov	r0, r5
 800d8ea:	47b8      	blx	r7
 800d8ec:	3001      	adds	r0, #1
 800d8ee:	f43f af49 	beq.w	800d784 <_printf_float+0x9c>
 800d8f2:	f04f 0800 	mov.w	r8, #0
 800d8f6:	f104 091a 	add.w	r9, r4, #26
 800d8fa:	9b08      	ldr	r3, [sp, #32]
 800d8fc:	3b01      	subs	r3, #1
 800d8fe:	4543      	cmp	r3, r8
 800d900:	dc09      	bgt.n	800d916 <_printf_float+0x22e>
 800d902:	6823      	ldr	r3, [r4, #0]
 800d904:	079b      	lsls	r3, r3, #30
 800d906:	f100 8108 	bmi.w	800db1a <_printf_float+0x432>
 800d90a:	68e0      	ldr	r0, [r4, #12]
 800d90c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d90e:	4298      	cmp	r0, r3
 800d910:	bfb8      	it	lt
 800d912:	4618      	movlt	r0, r3
 800d914:	e738      	b.n	800d788 <_printf_float+0xa0>
 800d916:	2301      	movs	r3, #1
 800d918:	464a      	mov	r2, r9
 800d91a:	4631      	mov	r1, r6
 800d91c:	4628      	mov	r0, r5
 800d91e:	47b8      	blx	r7
 800d920:	3001      	adds	r0, #1
 800d922:	f43f af2f 	beq.w	800d784 <_printf_float+0x9c>
 800d926:	f108 0801 	add.w	r8, r8, #1
 800d92a:	e7e6      	b.n	800d8fa <_printf_float+0x212>
 800d92c:	9b07      	ldr	r3, [sp, #28]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	dc3c      	bgt.n	800d9ac <_printf_float+0x2c4>
 800d932:	4a1d      	ldr	r2, [pc, #116]	; (800d9a8 <_printf_float+0x2c0>)
 800d934:	2301      	movs	r3, #1
 800d936:	4631      	mov	r1, r6
 800d938:	4628      	mov	r0, r5
 800d93a:	47b8      	blx	r7
 800d93c:	3001      	adds	r0, #1
 800d93e:	f43f af21 	beq.w	800d784 <_printf_float+0x9c>
 800d942:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d946:	4313      	orrs	r3, r2
 800d948:	d102      	bne.n	800d950 <_printf_float+0x268>
 800d94a:	6823      	ldr	r3, [r4, #0]
 800d94c:	07d9      	lsls	r1, r3, #31
 800d94e:	d5d8      	bpl.n	800d902 <_printf_float+0x21a>
 800d950:	4653      	mov	r3, sl
 800d952:	465a      	mov	r2, fp
 800d954:	4631      	mov	r1, r6
 800d956:	4628      	mov	r0, r5
 800d958:	47b8      	blx	r7
 800d95a:	3001      	adds	r0, #1
 800d95c:	f43f af12 	beq.w	800d784 <_printf_float+0x9c>
 800d960:	f04f 0900 	mov.w	r9, #0
 800d964:	f104 0a1a 	add.w	sl, r4, #26
 800d968:	9b07      	ldr	r3, [sp, #28]
 800d96a:	425b      	negs	r3, r3
 800d96c:	454b      	cmp	r3, r9
 800d96e:	dc01      	bgt.n	800d974 <_printf_float+0x28c>
 800d970:	9b08      	ldr	r3, [sp, #32]
 800d972:	e795      	b.n	800d8a0 <_printf_float+0x1b8>
 800d974:	2301      	movs	r3, #1
 800d976:	4652      	mov	r2, sl
 800d978:	4631      	mov	r1, r6
 800d97a:	4628      	mov	r0, r5
 800d97c:	47b8      	blx	r7
 800d97e:	3001      	adds	r0, #1
 800d980:	f43f af00 	beq.w	800d784 <_printf_float+0x9c>
 800d984:	f109 0901 	add.w	r9, r9, #1
 800d988:	e7ee      	b.n	800d968 <_printf_float+0x280>
 800d98a:	bf00      	nop
 800d98c:	f3af 8000 	nop.w
 800d990:	ffffffff 	.word	0xffffffff
 800d994:	7fefffff 	.word	0x7fefffff
 800d998:	080126cc 	.word	0x080126cc
 800d99c:	080126d0 	.word	0x080126d0
 800d9a0:	080126d8 	.word	0x080126d8
 800d9a4:	080126d4 	.word	0x080126d4
 800d9a8:	080126dc 	.word	0x080126dc
 800d9ac:	9a08      	ldr	r2, [sp, #32]
 800d9ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d9b0:	429a      	cmp	r2, r3
 800d9b2:	bfa8      	it	ge
 800d9b4:	461a      	movge	r2, r3
 800d9b6:	2a00      	cmp	r2, #0
 800d9b8:	4691      	mov	r9, r2
 800d9ba:	dc38      	bgt.n	800da2e <_printf_float+0x346>
 800d9bc:	2300      	movs	r3, #0
 800d9be:	9305      	str	r3, [sp, #20]
 800d9c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d9c4:	f104 021a 	add.w	r2, r4, #26
 800d9c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d9ca:	9905      	ldr	r1, [sp, #20]
 800d9cc:	9304      	str	r3, [sp, #16]
 800d9ce:	eba3 0309 	sub.w	r3, r3, r9
 800d9d2:	428b      	cmp	r3, r1
 800d9d4:	dc33      	bgt.n	800da3e <_printf_float+0x356>
 800d9d6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d9da:	429a      	cmp	r2, r3
 800d9dc:	db3c      	blt.n	800da58 <_printf_float+0x370>
 800d9de:	6823      	ldr	r3, [r4, #0]
 800d9e0:	07da      	lsls	r2, r3, #31
 800d9e2:	d439      	bmi.n	800da58 <_printf_float+0x370>
 800d9e4:	9b08      	ldr	r3, [sp, #32]
 800d9e6:	9a04      	ldr	r2, [sp, #16]
 800d9e8:	9907      	ldr	r1, [sp, #28]
 800d9ea:	1a9a      	subs	r2, r3, r2
 800d9ec:	eba3 0901 	sub.w	r9, r3, r1
 800d9f0:	4591      	cmp	r9, r2
 800d9f2:	bfa8      	it	ge
 800d9f4:	4691      	movge	r9, r2
 800d9f6:	f1b9 0f00 	cmp.w	r9, #0
 800d9fa:	dc35      	bgt.n	800da68 <_printf_float+0x380>
 800d9fc:	f04f 0800 	mov.w	r8, #0
 800da00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800da04:	f104 0a1a 	add.w	sl, r4, #26
 800da08:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800da0c:	1a9b      	subs	r3, r3, r2
 800da0e:	eba3 0309 	sub.w	r3, r3, r9
 800da12:	4543      	cmp	r3, r8
 800da14:	f77f af75 	ble.w	800d902 <_printf_float+0x21a>
 800da18:	2301      	movs	r3, #1
 800da1a:	4652      	mov	r2, sl
 800da1c:	4631      	mov	r1, r6
 800da1e:	4628      	mov	r0, r5
 800da20:	47b8      	blx	r7
 800da22:	3001      	adds	r0, #1
 800da24:	f43f aeae 	beq.w	800d784 <_printf_float+0x9c>
 800da28:	f108 0801 	add.w	r8, r8, #1
 800da2c:	e7ec      	b.n	800da08 <_printf_float+0x320>
 800da2e:	4613      	mov	r3, r2
 800da30:	4631      	mov	r1, r6
 800da32:	4642      	mov	r2, r8
 800da34:	4628      	mov	r0, r5
 800da36:	47b8      	blx	r7
 800da38:	3001      	adds	r0, #1
 800da3a:	d1bf      	bne.n	800d9bc <_printf_float+0x2d4>
 800da3c:	e6a2      	b.n	800d784 <_printf_float+0x9c>
 800da3e:	2301      	movs	r3, #1
 800da40:	4631      	mov	r1, r6
 800da42:	4628      	mov	r0, r5
 800da44:	9204      	str	r2, [sp, #16]
 800da46:	47b8      	blx	r7
 800da48:	3001      	adds	r0, #1
 800da4a:	f43f ae9b 	beq.w	800d784 <_printf_float+0x9c>
 800da4e:	9b05      	ldr	r3, [sp, #20]
 800da50:	9a04      	ldr	r2, [sp, #16]
 800da52:	3301      	adds	r3, #1
 800da54:	9305      	str	r3, [sp, #20]
 800da56:	e7b7      	b.n	800d9c8 <_printf_float+0x2e0>
 800da58:	4653      	mov	r3, sl
 800da5a:	465a      	mov	r2, fp
 800da5c:	4631      	mov	r1, r6
 800da5e:	4628      	mov	r0, r5
 800da60:	47b8      	blx	r7
 800da62:	3001      	adds	r0, #1
 800da64:	d1be      	bne.n	800d9e4 <_printf_float+0x2fc>
 800da66:	e68d      	b.n	800d784 <_printf_float+0x9c>
 800da68:	9a04      	ldr	r2, [sp, #16]
 800da6a:	464b      	mov	r3, r9
 800da6c:	4442      	add	r2, r8
 800da6e:	4631      	mov	r1, r6
 800da70:	4628      	mov	r0, r5
 800da72:	47b8      	blx	r7
 800da74:	3001      	adds	r0, #1
 800da76:	d1c1      	bne.n	800d9fc <_printf_float+0x314>
 800da78:	e684      	b.n	800d784 <_printf_float+0x9c>
 800da7a:	9a08      	ldr	r2, [sp, #32]
 800da7c:	2a01      	cmp	r2, #1
 800da7e:	dc01      	bgt.n	800da84 <_printf_float+0x39c>
 800da80:	07db      	lsls	r3, r3, #31
 800da82:	d537      	bpl.n	800daf4 <_printf_float+0x40c>
 800da84:	2301      	movs	r3, #1
 800da86:	4642      	mov	r2, r8
 800da88:	4631      	mov	r1, r6
 800da8a:	4628      	mov	r0, r5
 800da8c:	47b8      	blx	r7
 800da8e:	3001      	adds	r0, #1
 800da90:	f43f ae78 	beq.w	800d784 <_printf_float+0x9c>
 800da94:	4653      	mov	r3, sl
 800da96:	465a      	mov	r2, fp
 800da98:	4631      	mov	r1, r6
 800da9a:	4628      	mov	r0, r5
 800da9c:	47b8      	blx	r7
 800da9e:	3001      	adds	r0, #1
 800daa0:	f43f ae70 	beq.w	800d784 <_printf_float+0x9c>
 800daa4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800daa8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800daac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dab0:	d01b      	beq.n	800daea <_printf_float+0x402>
 800dab2:	9b08      	ldr	r3, [sp, #32]
 800dab4:	f108 0201 	add.w	r2, r8, #1
 800dab8:	3b01      	subs	r3, #1
 800daba:	4631      	mov	r1, r6
 800dabc:	4628      	mov	r0, r5
 800dabe:	47b8      	blx	r7
 800dac0:	3001      	adds	r0, #1
 800dac2:	d10e      	bne.n	800dae2 <_printf_float+0x3fa>
 800dac4:	e65e      	b.n	800d784 <_printf_float+0x9c>
 800dac6:	2301      	movs	r3, #1
 800dac8:	464a      	mov	r2, r9
 800daca:	4631      	mov	r1, r6
 800dacc:	4628      	mov	r0, r5
 800dace:	47b8      	blx	r7
 800dad0:	3001      	adds	r0, #1
 800dad2:	f43f ae57 	beq.w	800d784 <_printf_float+0x9c>
 800dad6:	f108 0801 	add.w	r8, r8, #1
 800dada:	9b08      	ldr	r3, [sp, #32]
 800dadc:	3b01      	subs	r3, #1
 800dade:	4543      	cmp	r3, r8
 800dae0:	dcf1      	bgt.n	800dac6 <_printf_float+0x3de>
 800dae2:	9b04      	ldr	r3, [sp, #16]
 800dae4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800dae8:	e6db      	b.n	800d8a2 <_printf_float+0x1ba>
 800daea:	f04f 0800 	mov.w	r8, #0
 800daee:	f104 091a 	add.w	r9, r4, #26
 800daf2:	e7f2      	b.n	800dada <_printf_float+0x3f2>
 800daf4:	2301      	movs	r3, #1
 800daf6:	4642      	mov	r2, r8
 800daf8:	e7df      	b.n	800daba <_printf_float+0x3d2>
 800dafa:	2301      	movs	r3, #1
 800dafc:	464a      	mov	r2, r9
 800dafe:	4631      	mov	r1, r6
 800db00:	4628      	mov	r0, r5
 800db02:	47b8      	blx	r7
 800db04:	3001      	adds	r0, #1
 800db06:	f43f ae3d 	beq.w	800d784 <_printf_float+0x9c>
 800db0a:	f108 0801 	add.w	r8, r8, #1
 800db0e:	68e3      	ldr	r3, [r4, #12]
 800db10:	9909      	ldr	r1, [sp, #36]	; 0x24
 800db12:	1a5b      	subs	r3, r3, r1
 800db14:	4543      	cmp	r3, r8
 800db16:	dcf0      	bgt.n	800dafa <_printf_float+0x412>
 800db18:	e6f7      	b.n	800d90a <_printf_float+0x222>
 800db1a:	f04f 0800 	mov.w	r8, #0
 800db1e:	f104 0919 	add.w	r9, r4, #25
 800db22:	e7f4      	b.n	800db0e <_printf_float+0x426>

0800db24 <_printf_common>:
 800db24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db28:	4616      	mov	r6, r2
 800db2a:	4699      	mov	r9, r3
 800db2c:	688a      	ldr	r2, [r1, #8]
 800db2e:	690b      	ldr	r3, [r1, #16]
 800db30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800db34:	4293      	cmp	r3, r2
 800db36:	bfb8      	it	lt
 800db38:	4613      	movlt	r3, r2
 800db3a:	6033      	str	r3, [r6, #0]
 800db3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800db40:	4607      	mov	r7, r0
 800db42:	460c      	mov	r4, r1
 800db44:	b10a      	cbz	r2, 800db4a <_printf_common+0x26>
 800db46:	3301      	adds	r3, #1
 800db48:	6033      	str	r3, [r6, #0]
 800db4a:	6823      	ldr	r3, [r4, #0]
 800db4c:	0699      	lsls	r1, r3, #26
 800db4e:	bf42      	ittt	mi
 800db50:	6833      	ldrmi	r3, [r6, #0]
 800db52:	3302      	addmi	r3, #2
 800db54:	6033      	strmi	r3, [r6, #0]
 800db56:	6825      	ldr	r5, [r4, #0]
 800db58:	f015 0506 	ands.w	r5, r5, #6
 800db5c:	d106      	bne.n	800db6c <_printf_common+0x48>
 800db5e:	f104 0a19 	add.w	sl, r4, #25
 800db62:	68e3      	ldr	r3, [r4, #12]
 800db64:	6832      	ldr	r2, [r6, #0]
 800db66:	1a9b      	subs	r3, r3, r2
 800db68:	42ab      	cmp	r3, r5
 800db6a:	dc26      	bgt.n	800dbba <_printf_common+0x96>
 800db6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800db70:	1e13      	subs	r3, r2, #0
 800db72:	6822      	ldr	r2, [r4, #0]
 800db74:	bf18      	it	ne
 800db76:	2301      	movne	r3, #1
 800db78:	0692      	lsls	r2, r2, #26
 800db7a:	d42b      	bmi.n	800dbd4 <_printf_common+0xb0>
 800db7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800db80:	4649      	mov	r1, r9
 800db82:	4638      	mov	r0, r7
 800db84:	47c0      	blx	r8
 800db86:	3001      	adds	r0, #1
 800db88:	d01e      	beq.n	800dbc8 <_printf_common+0xa4>
 800db8a:	6823      	ldr	r3, [r4, #0]
 800db8c:	68e5      	ldr	r5, [r4, #12]
 800db8e:	6832      	ldr	r2, [r6, #0]
 800db90:	f003 0306 	and.w	r3, r3, #6
 800db94:	2b04      	cmp	r3, #4
 800db96:	bf08      	it	eq
 800db98:	1aad      	subeq	r5, r5, r2
 800db9a:	68a3      	ldr	r3, [r4, #8]
 800db9c:	6922      	ldr	r2, [r4, #16]
 800db9e:	bf0c      	ite	eq
 800dba0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dba4:	2500      	movne	r5, #0
 800dba6:	4293      	cmp	r3, r2
 800dba8:	bfc4      	itt	gt
 800dbaa:	1a9b      	subgt	r3, r3, r2
 800dbac:	18ed      	addgt	r5, r5, r3
 800dbae:	2600      	movs	r6, #0
 800dbb0:	341a      	adds	r4, #26
 800dbb2:	42b5      	cmp	r5, r6
 800dbb4:	d11a      	bne.n	800dbec <_printf_common+0xc8>
 800dbb6:	2000      	movs	r0, #0
 800dbb8:	e008      	b.n	800dbcc <_printf_common+0xa8>
 800dbba:	2301      	movs	r3, #1
 800dbbc:	4652      	mov	r2, sl
 800dbbe:	4649      	mov	r1, r9
 800dbc0:	4638      	mov	r0, r7
 800dbc2:	47c0      	blx	r8
 800dbc4:	3001      	adds	r0, #1
 800dbc6:	d103      	bne.n	800dbd0 <_printf_common+0xac>
 800dbc8:	f04f 30ff 	mov.w	r0, #4294967295
 800dbcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbd0:	3501      	adds	r5, #1
 800dbd2:	e7c6      	b.n	800db62 <_printf_common+0x3e>
 800dbd4:	18e1      	adds	r1, r4, r3
 800dbd6:	1c5a      	adds	r2, r3, #1
 800dbd8:	2030      	movs	r0, #48	; 0x30
 800dbda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dbde:	4422      	add	r2, r4
 800dbe0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dbe4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dbe8:	3302      	adds	r3, #2
 800dbea:	e7c7      	b.n	800db7c <_printf_common+0x58>
 800dbec:	2301      	movs	r3, #1
 800dbee:	4622      	mov	r2, r4
 800dbf0:	4649      	mov	r1, r9
 800dbf2:	4638      	mov	r0, r7
 800dbf4:	47c0      	blx	r8
 800dbf6:	3001      	adds	r0, #1
 800dbf8:	d0e6      	beq.n	800dbc8 <_printf_common+0xa4>
 800dbfa:	3601      	adds	r6, #1
 800dbfc:	e7d9      	b.n	800dbb2 <_printf_common+0x8e>
	...

0800dc00 <_printf_i>:
 800dc00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dc04:	7e0f      	ldrb	r7, [r1, #24]
 800dc06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dc08:	2f78      	cmp	r7, #120	; 0x78
 800dc0a:	4691      	mov	r9, r2
 800dc0c:	4680      	mov	r8, r0
 800dc0e:	460c      	mov	r4, r1
 800dc10:	469a      	mov	sl, r3
 800dc12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dc16:	d807      	bhi.n	800dc28 <_printf_i+0x28>
 800dc18:	2f62      	cmp	r7, #98	; 0x62
 800dc1a:	d80a      	bhi.n	800dc32 <_printf_i+0x32>
 800dc1c:	2f00      	cmp	r7, #0
 800dc1e:	f000 80d8 	beq.w	800ddd2 <_printf_i+0x1d2>
 800dc22:	2f58      	cmp	r7, #88	; 0x58
 800dc24:	f000 80a3 	beq.w	800dd6e <_printf_i+0x16e>
 800dc28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dc2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dc30:	e03a      	b.n	800dca8 <_printf_i+0xa8>
 800dc32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dc36:	2b15      	cmp	r3, #21
 800dc38:	d8f6      	bhi.n	800dc28 <_printf_i+0x28>
 800dc3a:	a101      	add	r1, pc, #4	; (adr r1, 800dc40 <_printf_i+0x40>)
 800dc3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dc40:	0800dc99 	.word	0x0800dc99
 800dc44:	0800dcad 	.word	0x0800dcad
 800dc48:	0800dc29 	.word	0x0800dc29
 800dc4c:	0800dc29 	.word	0x0800dc29
 800dc50:	0800dc29 	.word	0x0800dc29
 800dc54:	0800dc29 	.word	0x0800dc29
 800dc58:	0800dcad 	.word	0x0800dcad
 800dc5c:	0800dc29 	.word	0x0800dc29
 800dc60:	0800dc29 	.word	0x0800dc29
 800dc64:	0800dc29 	.word	0x0800dc29
 800dc68:	0800dc29 	.word	0x0800dc29
 800dc6c:	0800ddb9 	.word	0x0800ddb9
 800dc70:	0800dcdd 	.word	0x0800dcdd
 800dc74:	0800dd9b 	.word	0x0800dd9b
 800dc78:	0800dc29 	.word	0x0800dc29
 800dc7c:	0800dc29 	.word	0x0800dc29
 800dc80:	0800dddb 	.word	0x0800dddb
 800dc84:	0800dc29 	.word	0x0800dc29
 800dc88:	0800dcdd 	.word	0x0800dcdd
 800dc8c:	0800dc29 	.word	0x0800dc29
 800dc90:	0800dc29 	.word	0x0800dc29
 800dc94:	0800dda3 	.word	0x0800dda3
 800dc98:	682b      	ldr	r3, [r5, #0]
 800dc9a:	1d1a      	adds	r2, r3, #4
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	602a      	str	r2, [r5, #0]
 800dca0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dca4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dca8:	2301      	movs	r3, #1
 800dcaa:	e0a3      	b.n	800ddf4 <_printf_i+0x1f4>
 800dcac:	6820      	ldr	r0, [r4, #0]
 800dcae:	6829      	ldr	r1, [r5, #0]
 800dcb0:	0606      	lsls	r6, r0, #24
 800dcb2:	f101 0304 	add.w	r3, r1, #4
 800dcb6:	d50a      	bpl.n	800dcce <_printf_i+0xce>
 800dcb8:	680e      	ldr	r6, [r1, #0]
 800dcba:	602b      	str	r3, [r5, #0]
 800dcbc:	2e00      	cmp	r6, #0
 800dcbe:	da03      	bge.n	800dcc8 <_printf_i+0xc8>
 800dcc0:	232d      	movs	r3, #45	; 0x2d
 800dcc2:	4276      	negs	r6, r6
 800dcc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dcc8:	485e      	ldr	r0, [pc, #376]	; (800de44 <_printf_i+0x244>)
 800dcca:	230a      	movs	r3, #10
 800dccc:	e019      	b.n	800dd02 <_printf_i+0x102>
 800dcce:	680e      	ldr	r6, [r1, #0]
 800dcd0:	602b      	str	r3, [r5, #0]
 800dcd2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dcd6:	bf18      	it	ne
 800dcd8:	b236      	sxthne	r6, r6
 800dcda:	e7ef      	b.n	800dcbc <_printf_i+0xbc>
 800dcdc:	682b      	ldr	r3, [r5, #0]
 800dcde:	6820      	ldr	r0, [r4, #0]
 800dce0:	1d19      	adds	r1, r3, #4
 800dce2:	6029      	str	r1, [r5, #0]
 800dce4:	0601      	lsls	r1, r0, #24
 800dce6:	d501      	bpl.n	800dcec <_printf_i+0xec>
 800dce8:	681e      	ldr	r6, [r3, #0]
 800dcea:	e002      	b.n	800dcf2 <_printf_i+0xf2>
 800dcec:	0646      	lsls	r6, r0, #25
 800dcee:	d5fb      	bpl.n	800dce8 <_printf_i+0xe8>
 800dcf0:	881e      	ldrh	r6, [r3, #0]
 800dcf2:	4854      	ldr	r0, [pc, #336]	; (800de44 <_printf_i+0x244>)
 800dcf4:	2f6f      	cmp	r7, #111	; 0x6f
 800dcf6:	bf0c      	ite	eq
 800dcf8:	2308      	moveq	r3, #8
 800dcfa:	230a      	movne	r3, #10
 800dcfc:	2100      	movs	r1, #0
 800dcfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dd02:	6865      	ldr	r5, [r4, #4]
 800dd04:	60a5      	str	r5, [r4, #8]
 800dd06:	2d00      	cmp	r5, #0
 800dd08:	bfa2      	ittt	ge
 800dd0a:	6821      	ldrge	r1, [r4, #0]
 800dd0c:	f021 0104 	bicge.w	r1, r1, #4
 800dd10:	6021      	strge	r1, [r4, #0]
 800dd12:	b90e      	cbnz	r6, 800dd18 <_printf_i+0x118>
 800dd14:	2d00      	cmp	r5, #0
 800dd16:	d04d      	beq.n	800ddb4 <_printf_i+0x1b4>
 800dd18:	4615      	mov	r5, r2
 800dd1a:	fbb6 f1f3 	udiv	r1, r6, r3
 800dd1e:	fb03 6711 	mls	r7, r3, r1, r6
 800dd22:	5dc7      	ldrb	r7, [r0, r7]
 800dd24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dd28:	4637      	mov	r7, r6
 800dd2a:	42bb      	cmp	r3, r7
 800dd2c:	460e      	mov	r6, r1
 800dd2e:	d9f4      	bls.n	800dd1a <_printf_i+0x11a>
 800dd30:	2b08      	cmp	r3, #8
 800dd32:	d10b      	bne.n	800dd4c <_printf_i+0x14c>
 800dd34:	6823      	ldr	r3, [r4, #0]
 800dd36:	07de      	lsls	r6, r3, #31
 800dd38:	d508      	bpl.n	800dd4c <_printf_i+0x14c>
 800dd3a:	6923      	ldr	r3, [r4, #16]
 800dd3c:	6861      	ldr	r1, [r4, #4]
 800dd3e:	4299      	cmp	r1, r3
 800dd40:	bfde      	ittt	le
 800dd42:	2330      	movle	r3, #48	; 0x30
 800dd44:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dd48:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dd4c:	1b52      	subs	r2, r2, r5
 800dd4e:	6122      	str	r2, [r4, #16]
 800dd50:	f8cd a000 	str.w	sl, [sp]
 800dd54:	464b      	mov	r3, r9
 800dd56:	aa03      	add	r2, sp, #12
 800dd58:	4621      	mov	r1, r4
 800dd5a:	4640      	mov	r0, r8
 800dd5c:	f7ff fee2 	bl	800db24 <_printf_common>
 800dd60:	3001      	adds	r0, #1
 800dd62:	d14c      	bne.n	800ddfe <_printf_i+0x1fe>
 800dd64:	f04f 30ff 	mov.w	r0, #4294967295
 800dd68:	b004      	add	sp, #16
 800dd6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd6e:	4835      	ldr	r0, [pc, #212]	; (800de44 <_printf_i+0x244>)
 800dd70:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800dd74:	6829      	ldr	r1, [r5, #0]
 800dd76:	6823      	ldr	r3, [r4, #0]
 800dd78:	f851 6b04 	ldr.w	r6, [r1], #4
 800dd7c:	6029      	str	r1, [r5, #0]
 800dd7e:	061d      	lsls	r5, r3, #24
 800dd80:	d514      	bpl.n	800ddac <_printf_i+0x1ac>
 800dd82:	07df      	lsls	r7, r3, #31
 800dd84:	bf44      	itt	mi
 800dd86:	f043 0320 	orrmi.w	r3, r3, #32
 800dd8a:	6023      	strmi	r3, [r4, #0]
 800dd8c:	b91e      	cbnz	r6, 800dd96 <_printf_i+0x196>
 800dd8e:	6823      	ldr	r3, [r4, #0]
 800dd90:	f023 0320 	bic.w	r3, r3, #32
 800dd94:	6023      	str	r3, [r4, #0]
 800dd96:	2310      	movs	r3, #16
 800dd98:	e7b0      	b.n	800dcfc <_printf_i+0xfc>
 800dd9a:	6823      	ldr	r3, [r4, #0]
 800dd9c:	f043 0320 	orr.w	r3, r3, #32
 800dda0:	6023      	str	r3, [r4, #0]
 800dda2:	2378      	movs	r3, #120	; 0x78
 800dda4:	4828      	ldr	r0, [pc, #160]	; (800de48 <_printf_i+0x248>)
 800dda6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ddaa:	e7e3      	b.n	800dd74 <_printf_i+0x174>
 800ddac:	0659      	lsls	r1, r3, #25
 800ddae:	bf48      	it	mi
 800ddb0:	b2b6      	uxthmi	r6, r6
 800ddb2:	e7e6      	b.n	800dd82 <_printf_i+0x182>
 800ddb4:	4615      	mov	r5, r2
 800ddb6:	e7bb      	b.n	800dd30 <_printf_i+0x130>
 800ddb8:	682b      	ldr	r3, [r5, #0]
 800ddba:	6826      	ldr	r6, [r4, #0]
 800ddbc:	6961      	ldr	r1, [r4, #20]
 800ddbe:	1d18      	adds	r0, r3, #4
 800ddc0:	6028      	str	r0, [r5, #0]
 800ddc2:	0635      	lsls	r5, r6, #24
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	d501      	bpl.n	800ddcc <_printf_i+0x1cc>
 800ddc8:	6019      	str	r1, [r3, #0]
 800ddca:	e002      	b.n	800ddd2 <_printf_i+0x1d2>
 800ddcc:	0670      	lsls	r0, r6, #25
 800ddce:	d5fb      	bpl.n	800ddc8 <_printf_i+0x1c8>
 800ddd0:	8019      	strh	r1, [r3, #0]
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	6123      	str	r3, [r4, #16]
 800ddd6:	4615      	mov	r5, r2
 800ddd8:	e7ba      	b.n	800dd50 <_printf_i+0x150>
 800ddda:	682b      	ldr	r3, [r5, #0]
 800dddc:	1d1a      	adds	r2, r3, #4
 800ddde:	602a      	str	r2, [r5, #0]
 800dde0:	681d      	ldr	r5, [r3, #0]
 800dde2:	6862      	ldr	r2, [r4, #4]
 800dde4:	2100      	movs	r1, #0
 800dde6:	4628      	mov	r0, r5
 800dde8:	f7f2 fa42 	bl	8000270 <memchr>
 800ddec:	b108      	cbz	r0, 800ddf2 <_printf_i+0x1f2>
 800ddee:	1b40      	subs	r0, r0, r5
 800ddf0:	6060      	str	r0, [r4, #4]
 800ddf2:	6863      	ldr	r3, [r4, #4]
 800ddf4:	6123      	str	r3, [r4, #16]
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ddfc:	e7a8      	b.n	800dd50 <_printf_i+0x150>
 800ddfe:	6923      	ldr	r3, [r4, #16]
 800de00:	462a      	mov	r2, r5
 800de02:	4649      	mov	r1, r9
 800de04:	4640      	mov	r0, r8
 800de06:	47d0      	blx	sl
 800de08:	3001      	adds	r0, #1
 800de0a:	d0ab      	beq.n	800dd64 <_printf_i+0x164>
 800de0c:	6823      	ldr	r3, [r4, #0]
 800de0e:	079b      	lsls	r3, r3, #30
 800de10:	d413      	bmi.n	800de3a <_printf_i+0x23a>
 800de12:	68e0      	ldr	r0, [r4, #12]
 800de14:	9b03      	ldr	r3, [sp, #12]
 800de16:	4298      	cmp	r0, r3
 800de18:	bfb8      	it	lt
 800de1a:	4618      	movlt	r0, r3
 800de1c:	e7a4      	b.n	800dd68 <_printf_i+0x168>
 800de1e:	2301      	movs	r3, #1
 800de20:	4632      	mov	r2, r6
 800de22:	4649      	mov	r1, r9
 800de24:	4640      	mov	r0, r8
 800de26:	47d0      	blx	sl
 800de28:	3001      	adds	r0, #1
 800de2a:	d09b      	beq.n	800dd64 <_printf_i+0x164>
 800de2c:	3501      	adds	r5, #1
 800de2e:	68e3      	ldr	r3, [r4, #12]
 800de30:	9903      	ldr	r1, [sp, #12]
 800de32:	1a5b      	subs	r3, r3, r1
 800de34:	42ab      	cmp	r3, r5
 800de36:	dcf2      	bgt.n	800de1e <_printf_i+0x21e>
 800de38:	e7eb      	b.n	800de12 <_printf_i+0x212>
 800de3a:	2500      	movs	r5, #0
 800de3c:	f104 0619 	add.w	r6, r4, #25
 800de40:	e7f5      	b.n	800de2e <_printf_i+0x22e>
 800de42:	bf00      	nop
 800de44:	080126de 	.word	0x080126de
 800de48:	080126ef 	.word	0x080126ef

0800de4c <_scanf_float>:
 800de4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de50:	b087      	sub	sp, #28
 800de52:	4617      	mov	r7, r2
 800de54:	9303      	str	r3, [sp, #12]
 800de56:	688b      	ldr	r3, [r1, #8]
 800de58:	1e5a      	subs	r2, r3, #1
 800de5a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800de5e:	bf83      	ittte	hi
 800de60:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800de64:	195b      	addhi	r3, r3, r5
 800de66:	9302      	strhi	r3, [sp, #8]
 800de68:	2300      	movls	r3, #0
 800de6a:	bf86      	itte	hi
 800de6c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800de70:	608b      	strhi	r3, [r1, #8]
 800de72:	9302      	strls	r3, [sp, #8]
 800de74:	680b      	ldr	r3, [r1, #0]
 800de76:	468b      	mov	fp, r1
 800de78:	2500      	movs	r5, #0
 800de7a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800de7e:	f84b 3b1c 	str.w	r3, [fp], #28
 800de82:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800de86:	4680      	mov	r8, r0
 800de88:	460c      	mov	r4, r1
 800de8a:	465e      	mov	r6, fp
 800de8c:	46aa      	mov	sl, r5
 800de8e:	46a9      	mov	r9, r5
 800de90:	9501      	str	r5, [sp, #4]
 800de92:	68a2      	ldr	r2, [r4, #8]
 800de94:	b152      	cbz	r2, 800deac <_scanf_float+0x60>
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	781b      	ldrb	r3, [r3, #0]
 800de9a:	2b4e      	cmp	r3, #78	; 0x4e
 800de9c:	d864      	bhi.n	800df68 <_scanf_float+0x11c>
 800de9e:	2b40      	cmp	r3, #64	; 0x40
 800dea0:	d83c      	bhi.n	800df1c <_scanf_float+0xd0>
 800dea2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800dea6:	b2c8      	uxtb	r0, r1
 800dea8:	280e      	cmp	r0, #14
 800deaa:	d93a      	bls.n	800df22 <_scanf_float+0xd6>
 800deac:	f1b9 0f00 	cmp.w	r9, #0
 800deb0:	d003      	beq.n	800deba <_scanf_float+0x6e>
 800deb2:	6823      	ldr	r3, [r4, #0]
 800deb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800deb8:	6023      	str	r3, [r4, #0]
 800deba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800debe:	f1ba 0f01 	cmp.w	sl, #1
 800dec2:	f200 8113 	bhi.w	800e0ec <_scanf_float+0x2a0>
 800dec6:	455e      	cmp	r6, fp
 800dec8:	f200 8105 	bhi.w	800e0d6 <_scanf_float+0x28a>
 800decc:	2501      	movs	r5, #1
 800dece:	4628      	mov	r0, r5
 800ded0:	b007      	add	sp, #28
 800ded2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ded6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800deda:	2a0d      	cmp	r2, #13
 800dedc:	d8e6      	bhi.n	800deac <_scanf_float+0x60>
 800dede:	a101      	add	r1, pc, #4	; (adr r1, 800dee4 <_scanf_float+0x98>)
 800dee0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800dee4:	0800e023 	.word	0x0800e023
 800dee8:	0800dead 	.word	0x0800dead
 800deec:	0800dead 	.word	0x0800dead
 800def0:	0800dead 	.word	0x0800dead
 800def4:	0800e083 	.word	0x0800e083
 800def8:	0800e05b 	.word	0x0800e05b
 800defc:	0800dead 	.word	0x0800dead
 800df00:	0800dead 	.word	0x0800dead
 800df04:	0800e031 	.word	0x0800e031
 800df08:	0800dead 	.word	0x0800dead
 800df0c:	0800dead 	.word	0x0800dead
 800df10:	0800dead 	.word	0x0800dead
 800df14:	0800dead 	.word	0x0800dead
 800df18:	0800dfe9 	.word	0x0800dfe9
 800df1c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800df20:	e7db      	b.n	800deda <_scanf_float+0x8e>
 800df22:	290e      	cmp	r1, #14
 800df24:	d8c2      	bhi.n	800deac <_scanf_float+0x60>
 800df26:	a001      	add	r0, pc, #4	; (adr r0, 800df2c <_scanf_float+0xe0>)
 800df28:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800df2c:	0800dfdb 	.word	0x0800dfdb
 800df30:	0800dead 	.word	0x0800dead
 800df34:	0800dfdb 	.word	0x0800dfdb
 800df38:	0800e06f 	.word	0x0800e06f
 800df3c:	0800dead 	.word	0x0800dead
 800df40:	0800df89 	.word	0x0800df89
 800df44:	0800dfc5 	.word	0x0800dfc5
 800df48:	0800dfc5 	.word	0x0800dfc5
 800df4c:	0800dfc5 	.word	0x0800dfc5
 800df50:	0800dfc5 	.word	0x0800dfc5
 800df54:	0800dfc5 	.word	0x0800dfc5
 800df58:	0800dfc5 	.word	0x0800dfc5
 800df5c:	0800dfc5 	.word	0x0800dfc5
 800df60:	0800dfc5 	.word	0x0800dfc5
 800df64:	0800dfc5 	.word	0x0800dfc5
 800df68:	2b6e      	cmp	r3, #110	; 0x6e
 800df6a:	d809      	bhi.n	800df80 <_scanf_float+0x134>
 800df6c:	2b60      	cmp	r3, #96	; 0x60
 800df6e:	d8b2      	bhi.n	800ded6 <_scanf_float+0x8a>
 800df70:	2b54      	cmp	r3, #84	; 0x54
 800df72:	d077      	beq.n	800e064 <_scanf_float+0x218>
 800df74:	2b59      	cmp	r3, #89	; 0x59
 800df76:	d199      	bne.n	800deac <_scanf_float+0x60>
 800df78:	2d07      	cmp	r5, #7
 800df7a:	d197      	bne.n	800deac <_scanf_float+0x60>
 800df7c:	2508      	movs	r5, #8
 800df7e:	e029      	b.n	800dfd4 <_scanf_float+0x188>
 800df80:	2b74      	cmp	r3, #116	; 0x74
 800df82:	d06f      	beq.n	800e064 <_scanf_float+0x218>
 800df84:	2b79      	cmp	r3, #121	; 0x79
 800df86:	e7f6      	b.n	800df76 <_scanf_float+0x12a>
 800df88:	6821      	ldr	r1, [r4, #0]
 800df8a:	05c8      	lsls	r0, r1, #23
 800df8c:	d51a      	bpl.n	800dfc4 <_scanf_float+0x178>
 800df8e:	9b02      	ldr	r3, [sp, #8]
 800df90:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800df94:	6021      	str	r1, [r4, #0]
 800df96:	f109 0901 	add.w	r9, r9, #1
 800df9a:	b11b      	cbz	r3, 800dfa4 <_scanf_float+0x158>
 800df9c:	3b01      	subs	r3, #1
 800df9e:	3201      	adds	r2, #1
 800dfa0:	9302      	str	r3, [sp, #8]
 800dfa2:	60a2      	str	r2, [r4, #8]
 800dfa4:	68a3      	ldr	r3, [r4, #8]
 800dfa6:	3b01      	subs	r3, #1
 800dfa8:	60a3      	str	r3, [r4, #8]
 800dfaa:	6923      	ldr	r3, [r4, #16]
 800dfac:	3301      	adds	r3, #1
 800dfae:	6123      	str	r3, [r4, #16]
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	3b01      	subs	r3, #1
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	607b      	str	r3, [r7, #4]
 800dfb8:	f340 8084 	ble.w	800e0c4 <_scanf_float+0x278>
 800dfbc:	683b      	ldr	r3, [r7, #0]
 800dfbe:	3301      	adds	r3, #1
 800dfc0:	603b      	str	r3, [r7, #0]
 800dfc2:	e766      	b.n	800de92 <_scanf_float+0x46>
 800dfc4:	eb1a 0f05 	cmn.w	sl, r5
 800dfc8:	f47f af70 	bne.w	800deac <_scanf_float+0x60>
 800dfcc:	6822      	ldr	r2, [r4, #0]
 800dfce:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800dfd2:	6022      	str	r2, [r4, #0]
 800dfd4:	f806 3b01 	strb.w	r3, [r6], #1
 800dfd8:	e7e4      	b.n	800dfa4 <_scanf_float+0x158>
 800dfda:	6822      	ldr	r2, [r4, #0]
 800dfdc:	0610      	lsls	r0, r2, #24
 800dfde:	f57f af65 	bpl.w	800deac <_scanf_float+0x60>
 800dfe2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dfe6:	e7f4      	b.n	800dfd2 <_scanf_float+0x186>
 800dfe8:	f1ba 0f00 	cmp.w	sl, #0
 800dfec:	d10e      	bne.n	800e00c <_scanf_float+0x1c0>
 800dfee:	f1b9 0f00 	cmp.w	r9, #0
 800dff2:	d10e      	bne.n	800e012 <_scanf_float+0x1c6>
 800dff4:	6822      	ldr	r2, [r4, #0]
 800dff6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800dffa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800dffe:	d108      	bne.n	800e012 <_scanf_float+0x1c6>
 800e000:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e004:	6022      	str	r2, [r4, #0]
 800e006:	f04f 0a01 	mov.w	sl, #1
 800e00a:	e7e3      	b.n	800dfd4 <_scanf_float+0x188>
 800e00c:	f1ba 0f02 	cmp.w	sl, #2
 800e010:	d055      	beq.n	800e0be <_scanf_float+0x272>
 800e012:	2d01      	cmp	r5, #1
 800e014:	d002      	beq.n	800e01c <_scanf_float+0x1d0>
 800e016:	2d04      	cmp	r5, #4
 800e018:	f47f af48 	bne.w	800deac <_scanf_float+0x60>
 800e01c:	3501      	adds	r5, #1
 800e01e:	b2ed      	uxtb	r5, r5
 800e020:	e7d8      	b.n	800dfd4 <_scanf_float+0x188>
 800e022:	f1ba 0f01 	cmp.w	sl, #1
 800e026:	f47f af41 	bne.w	800deac <_scanf_float+0x60>
 800e02a:	f04f 0a02 	mov.w	sl, #2
 800e02e:	e7d1      	b.n	800dfd4 <_scanf_float+0x188>
 800e030:	b97d      	cbnz	r5, 800e052 <_scanf_float+0x206>
 800e032:	f1b9 0f00 	cmp.w	r9, #0
 800e036:	f47f af3c 	bne.w	800deb2 <_scanf_float+0x66>
 800e03a:	6822      	ldr	r2, [r4, #0]
 800e03c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e040:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e044:	f47f af39 	bne.w	800deba <_scanf_float+0x6e>
 800e048:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e04c:	6022      	str	r2, [r4, #0]
 800e04e:	2501      	movs	r5, #1
 800e050:	e7c0      	b.n	800dfd4 <_scanf_float+0x188>
 800e052:	2d03      	cmp	r5, #3
 800e054:	d0e2      	beq.n	800e01c <_scanf_float+0x1d0>
 800e056:	2d05      	cmp	r5, #5
 800e058:	e7de      	b.n	800e018 <_scanf_float+0x1cc>
 800e05a:	2d02      	cmp	r5, #2
 800e05c:	f47f af26 	bne.w	800deac <_scanf_float+0x60>
 800e060:	2503      	movs	r5, #3
 800e062:	e7b7      	b.n	800dfd4 <_scanf_float+0x188>
 800e064:	2d06      	cmp	r5, #6
 800e066:	f47f af21 	bne.w	800deac <_scanf_float+0x60>
 800e06a:	2507      	movs	r5, #7
 800e06c:	e7b2      	b.n	800dfd4 <_scanf_float+0x188>
 800e06e:	6822      	ldr	r2, [r4, #0]
 800e070:	0591      	lsls	r1, r2, #22
 800e072:	f57f af1b 	bpl.w	800deac <_scanf_float+0x60>
 800e076:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800e07a:	6022      	str	r2, [r4, #0]
 800e07c:	f8cd 9004 	str.w	r9, [sp, #4]
 800e080:	e7a8      	b.n	800dfd4 <_scanf_float+0x188>
 800e082:	6822      	ldr	r2, [r4, #0]
 800e084:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800e088:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800e08c:	d006      	beq.n	800e09c <_scanf_float+0x250>
 800e08e:	0550      	lsls	r0, r2, #21
 800e090:	f57f af0c 	bpl.w	800deac <_scanf_float+0x60>
 800e094:	f1b9 0f00 	cmp.w	r9, #0
 800e098:	f43f af0f 	beq.w	800deba <_scanf_float+0x6e>
 800e09c:	0591      	lsls	r1, r2, #22
 800e09e:	bf58      	it	pl
 800e0a0:	9901      	ldrpl	r1, [sp, #4]
 800e0a2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e0a6:	bf58      	it	pl
 800e0a8:	eba9 0101 	subpl.w	r1, r9, r1
 800e0ac:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800e0b0:	bf58      	it	pl
 800e0b2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e0b6:	6022      	str	r2, [r4, #0]
 800e0b8:	f04f 0900 	mov.w	r9, #0
 800e0bc:	e78a      	b.n	800dfd4 <_scanf_float+0x188>
 800e0be:	f04f 0a03 	mov.w	sl, #3
 800e0c2:	e787      	b.n	800dfd4 <_scanf_float+0x188>
 800e0c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e0c8:	4639      	mov	r1, r7
 800e0ca:	4640      	mov	r0, r8
 800e0cc:	4798      	blx	r3
 800e0ce:	2800      	cmp	r0, #0
 800e0d0:	f43f aedf 	beq.w	800de92 <_scanf_float+0x46>
 800e0d4:	e6ea      	b.n	800deac <_scanf_float+0x60>
 800e0d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e0da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e0de:	463a      	mov	r2, r7
 800e0e0:	4640      	mov	r0, r8
 800e0e2:	4798      	blx	r3
 800e0e4:	6923      	ldr	r3, [r4, #16]
 800e0e6:	3b01      	subs	r3, #1
 800e0e8:	6123      	str	r3, [r4, #16]
 800e0ea:	e6ec      	b.n	800dec6 <_scanf_float+0x7a>
 800e0ec:	1e6b      	subs	r3, r5, #1
 800e0ee:	2b06      	cmp	r3, #6
 800e0f0:	d825      	bhi.n	800e13e <_scanf_float+0x2f2>
 800e0f2:	2d02      	cmp	r5, #2
 800e0f4:	d836      	bhi.n	800e164 <_scanf_float+0x318>
 800e0f6:	455e      	cmp	r6, fp
 800e0f8:	f67f aee8 	bls.w	800decc <_scanf_float+0x80>
 800e0fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e100:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e104:	463a      	mov	r2, r7
 800e106:	4640      	mov	r0, r8
 800e108:	4798      	blx	r3
 800e10a:	6923      	ldr	r3, [r4, #16]
 800e10c:	3b01      	subs	r3, #1
 800e10e:	6123      	str	r3, [r4, #16]
 800e110:	e7f1      	b.n	800e0f6 <_scanf_float+0x2aa>
 800e112:	9802      	ldr	r0, [sp, #8]
 800e114:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e118:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800e11c:	9002      	str	r0, [sp, #8]
 800e11e:	463a      	mov	r2, r7
 800e120:	4640      	mov	r0, r8
 800e122:	4798      	blx	r3
 800e124:	6923      	ldr	r3, [r4, #16]
 800e126:	3b01      	subs	r3, #1
 800e128:	6123      	str	r3, [r4, #16]
 800e12a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e12e:	fa5f fa8a 	uxtb.w	sl, sl
 800e132:	f1ba 0f02 	cmp.w	sl, #2
 800e136:	d1ec      	bne.n	800e112 <_scanf_float+0x2c6>
 800e138:	3d03      	subs	r5, #3
 800e13a:	b2ed      	uxtb	r5, r5
 800e13c:	1b76      	subs	r6, r6, r5
 800e13e:	6823      	ldr	r3, [r4, #0]
 800e140:	05da      	lsls	r2, r3, #23
 800e142:	d52f      	bpl.n	800e1a4 <_scanf_float+0x358>
 800e144:	055b      	lsls	r3, r3, #21
 800e146:	d510      	bpl.n	800e16a <_scanf_float+0x31e>
 800e148:	455e      	cmp	r6, fp
 800e14a:	f67f aebf 	bls.w	800decc <_scanf_float+0x80>
 800e14e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e152:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e156:	463a      	mov	r2, r7
 800e158:	4640      	mov	r0, r8
 800e15a:	4798      	blx	r3
 800e15c:	6923      	ldr	r3, [r4, #16]
 800e15e:	3b01      	subs	r3, #1
 800e160:	6123      	str	r3, [r4, #16]
 800e162:	e7f1      	b.n	800e148 <_scanf_float+0x2fc>
 800e164:	46aa      	mov	sl, r5
 800e166:	9602      	str	r6, [sp, #8]
 800e168:	e7df      	b.n	800e12a <_scanf_float+0x2de>
 800e16a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e16e:	6923      	ldr	r3, [r4, #16]
 800e170:	2965      	cmp	r1, #101	; 0x65
 800e172:	f103 33ff 	add.w	r3, r3, #4294967295
 800e176:	f106 35ff 	add.w	r5, r6, #4294967295
 800e17a:	6123      	str	r3, [r4, #16]
 800e17c:	d00c      	beq.n	800e198 <_scanf_float+0x34c>
 800e17e:	2945      	cmp	r1, #69	; 0x45
 800e180:	d00a      	beq.n	800e198 <_scanf_float+0x34c>
 800e182:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e186:	463a      	mov	r2, r7
 800e188:	4640      	mov	r0, r8
 800e18a:	4798      	blx	r3
 800e18c:	6923      	ldr	r3, [r4, #16]
 800e18e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e192:	3b01      	subs	r3, #1
 800e194:	1eb5      	subs	r5, r6, #2
 800e196:	6123      	str	r3, [r4, #16]
 800e198:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e19c:	463a      	mov	r2, r7
 800e19e:	4640      	mov	r0, r8
 800e1a0:	4798      	blx	r3
 800e1a2:	462e      	mov	r6, r5
 800e1a4:	6825      	ldr	r5, [r4, #0]
 800e1a6:	f015 0510 	ands.w	r5, r5, #16
 800e1aa:	d14e      	bne.n	800e24a <_scanf_float+0x3fe>
 800e1ac:	7035      	strb	r5, [r6, #0]
 800e1ae:	6823      	ldr	r3, [r4, #0]
 800e1b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e1b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e1b8:	d119      	bne.n	800e1ee <_scanf_float+0x3a2>
 800e1ba:	9b01      	ldr	r3, [sp, #4]
 800e1bc:	454b      	cmp	r3, r9
 800e1be:	eba3 0209 	sub.w	r2, r3, r9
 800e1c2:	d121      	bne.n	800e208 <_scanf_float+0x3bc>
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	4659      	mov	r1, fp
 800e1c8:	4640      	mov	r0, r8
 800e1ca:	f000 fecb 	bl	800ef64 <_strtod_r>
 800e1ce:	6822      	ldr	r2, [r4, #0]
 800e1d0:	9b03      	ldr	r3, [sp, #12]
 800e1d2:	f012 0f02 	tst.w	r2, #2
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	d021      	beq.n	800e21e <_scanf_float+0x3d2>
 800e1da:	9903      	ldr	r1, [sp, #12]
 800e1dc:	1d1a      	adds	r2, r3, #4
 800e1de:	600a      	str	r2, [r1, #0]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	ed83 0b00 	vstr	d0, [r3]
 800e1e6:	68e3      	ldr	r3, [r4, #12]
 800e1e8:	3301      	adds	r3, #1
 800e1ea:	60e3      	str	r3, [r4, #12]
 800e1ec:	e66f      	b.n	800dece <_scanf_float+0x82>
 800e1ee:	9b04      	ldr	r3, [sp, #16]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d0e7      	beq.n	800e1c4 <_scanf_float+0x378>
 800e1f4:	9905      	ldr	r1, [sp, #20]
 800e1f6:	230a      	movs	r3, #10
 800e1f8:	462a      	mov	r2, r5
 800e1fa:	3101      	adds	r1, #1
 800e1fc:	4640      	mov	r0, r8
 800e1fe:	f000 ff39 	bl	800f074 <_strtol_r>
 800e202:	9b04      	ldr	r3, [sp, #16]
 800e204:	9e05      	ldr	r6, [sp, #20]
 800e206:	1ac2      	subs	r2, r0, r3
 800e208:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800e20c:	429e      	cmp	r6, r3
 800e20e:	bf28      	it	cs
 800e210:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800e214:	490e      	ldr	r1, [pc, #56]	; (800e250 <_scanf_float+0x404>)
 800e216:	4630      	mov	r0, r6
 800e218:	f000 f8b2 	bl	800e380 <siprintf>
 800e21c:	e7d2      	b.n	800e1c4 <_scanf_float+0x378>
 800e21e:	9903      	ldr	r1, [sp, #12]
 800e220:	f012 0f04 	tst.w	r2, #4
 800e224:	f103 0204 	add.w	r2, r3, #4
 800e228:	600a      	str	r2, [r1, #0]
 800e22a:	d1d9      	bne.n	800e1e0 <_scanf_float+0x394>
 800e22c:	eeb4 0b40 	vcmp.f64	d0, d0
 800e230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e234:	681e      	ldr	r6, [r3, #0]
 800e236:	d705      	bvc.n	800e244 <_scanf_float+0x3f8>
 800e238:	4806      	ldr	r0, [pc, #24]	; (800e254 <_scanf_float+0x408>)
 800e23a:	f000 f89b 	bl	800e374 <nanf>
 800e23e:	ed86 0a00 	vstr	s0, [r6]
 800e242:	e7d0      	b.n	800e1e6 <_scanf_float+0x39a>
 800e244:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800e248:	e7f9      	b.n	800e23e <_scanf_float+0x3f2>
 800e24a:	2500      	movs	r5, #0
 800e24c:	e63f      	b.n	800dece <_scanf_float+0x82>
 800e24e:	bf00      	nop
 800e250:	08012700 	.word	0x08012700
 800e254:	08012b70 	.word	0x08012b70

0800e258 <iprintf>:
 800e258:	b40f      	push	{r0, r1, r2, r3}
 800e25a:	4b0a      	ldr	r3, [pc, #40]	; (800e284 <iprintf+0x2c>)
 800e25c:	b513      	push	{r0, r1, r4, lr}
 800e25e:	681c      	ldr	r4, [r3, #0]
 800e260:	b124      	cbz	r4, 800e26c <iprintf+0x14>
 800e262:	69a3      	ldr	r3, [r4, #24]
 800e264:	b913      	cbnz	r3, 800e26c <iprintf+0x14>
 800e266:	4620      	mov	r0, r4
 800e268:	f001 feda 	bl	8010020 <__sinit>
 800e26c:	ab05      	add	r3, sp, #20
 800e26e:	9a04      	ldr	r2, [sp, #16]
 800e270:	68a1      	ldr	r1, [r4, #8]
 800e272:	9301      	str	r3, [sp, #4]
 800e274:	4620      	mov	r0, r4
 800e276:	f003 faad 	bl	80117d4 <_vfiprintf_r>
 800e27a:	b002      	add	sp, #8
 800e27c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e280:	b004      	add	sp, #16
 800e282:	4770      	bx	lr
 800e284:	2000000c 	.word	0x2000000c

0800e288 <_puts_r>:
 800e288:	b570      	push	{r4, r5, r6, lr}
 800e28a:	460e      	mov	r6, r1
 800e28c:	4605      	mov	r5, r0
 800e28e:	b118      	cbz	r0, 800e298 <_puts_r+0x10>
 800e290:	6983      	ldr	r3, [r0, #24]
 800e292:	b90b      	cbnz	r3, 800e298 <_puts_r+0x10>
 800e294:	f001 fec4 	bl	8010020 <__sinit>
 800e298:	69ab      	ldr	r3, [r5, #24]
 800e29a:	68ac      	ldr	r4, [r5, #8]
 800e29c:	b913      	cbnz	r3, 800e2a4 <_puts_r+0x1c>
 800e29e:	4628      	mov	r0, r5
 800e2a0:	f001 febe 	bl	8010020 <__sinit>
 800e2a4:	4b2c      	ldr	r3, [pc, #176]	; (800e358 <_puts_r+0xd0>)
 800e2a6:	429c      	cmp	r4, r3
 800e2a8:	d120      	bne.n	800e2ec <_puts_r+0x64>
 800e2aa:	686c      	ldr	r4, [r5, #4]
 800e2ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e2ae:	07db      	lsls	r3, r3, #31
 800e2b0:	d405      	bmi.n	800e2be <_puts_r+0x36>
 800e2b2:	89a3      	ldrh	r3, [r4, #12]
 800e2b4:	0598      	lsls	r0, r3, #22
 800e2b6:	d402      	bmi.n	800e2be <_puts_r+0x36>
 800e2b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e2ba:	f002 fac2 	bl	8010842 <__retarget_lock_acquire_recursive>
 800e2be:	89a3      	ldrh	r3, [r4, #12]
 800e2c0:	0719      	lsls	r1, r3, #28
 800e2c2:	d51d      	bpl.n	800e300 <_puts_r+0x78>
 800e2c4:	6923      	ldr	r3, [r4, #16]
 800e2c6:	b1db      	cbz	r3, 800e300 <_puts_r+0x78>
 800e2c8:	3e01      	subs	r6, #1
 800e2ca:	68a3      	ldr	r3, [r4, #8]
 800e2cc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e2d0:	3b01      	subs	r3, #1
 800e2d2:	60a3      	str	r3, [r4, #8]
 800e2d4:	bb39      	cbnz	r1, 800e326 <_puts_r+0x9e>
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	da38      	bge.n	800e34c <_puts_r+0xc4>
 800e2da:	4622      	mov	r2, r4
 800e2dc:	210a      	movs	r1, #10
 800e2de:	4628      	mov	r0, r5
 800e2e0:	f000 feca 	bl	800f078 <__swbuf_r>
 800e2e4:	3001      	adds	r0, #1
 800e2e6:	d011      	beq.n	800e30c <_puts_r+0x84>
 800e2e8:	250a      	movs	r5, #10
 800e2ea:	e011      	b.n	800e310 <_puts_r+0x88>
 800e2ec:	4b1b      	ldr	r3, [pc, #108]	; (800e35c <_puts_r+0xd4>)
 800e2ee:	429c      	cmp	r4, r3
 800e2f0:	d101      	bne.n	800e2f6 <_puts_r+0x6e>
 800e2f2:	68ac      	ldr	r4, [r5, #8]
 800e2f4:	e7da      	b.n	800e2ac <_puts_r+0x24>
 800e2f6:	4b1a      	ldr	r3, [pc, #104]	; (800e360 <_puts_r+0xd8>)
 800e2f8:	429c      	cmp	r4, r3
 800e2fa:	bf08      	it	eq
 800e2fc:	68ec      	ldreq	r4, [r5, #12]
 800e2fe:	e7d5      	b.n	800e2ac <_puts_r+0x24>
 800e300:	4621      	mov	r1, r4
 800e302:	4628      	mov	r0, r5
 800e304:	f000 ff0a 	bl	800f11c <__swsetup_r>
 800e308:	2800      	cmp	r0, #0
 800e30a:	d0dd      	beq.n	800e2c8 <_puts_r+0x40>
 800e30c:	f04f 35ff 	mov.w	r5, #4294967295
 800e310:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e312:	07da      	lsls	r2, r3, #31
 800e314:	d405      	bmi.n	800e322 <_puts_r+0x9a>
 800e316:	89a3      	ldrh	r3, [r4, #12]
 800e318:	059b      	lsls	r3, r3, #22
 800e31a:	d402      	bmi.n	800e322 <_puts_r+0x9a>
 800e31c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e31e:	f002 fa91 	bl	8010844 <__retarget_lock_release_recursive>
 800e322:	4628      	mov	r0, r5
 800e324:	bd70      	pop	{r4, r5, r6, pc}
 800e326:	2b00      	cmp	r3, #0
 800e328:	da04      	bge.n	800e334 <_puts_r+0xac>
 800e32a:	69a2      	ldr	r2, [r4, #24]
 800e32c:	429a      	cmp	r2, r3
 800e32e:	dc06      	bgt.n	800e33e <_puts_r+0xb6>
 800e330:	290a      	cmp	r1, #10
 800e332:	d004      	beq.n	800e33e <_puts_r+0xb6>
 800e334:	6823      	ldr	r3, [r4, #0]
 800e336:	1c5a      	adds	r2, r3, #1
 800e338:	6022      	str	r2, [r4, #0]
 800e33a:	7019      	strb	r1, [r3, #0]
 800e33c:	e7c5      	b.n	800e2ca <_puts_r+0x42>
 800e33e:	4622      	mov	r2, r4
 800e340:	4628      	mov	r0, r5
 800e342:	f000 fe99 	bl	800f078 <__swbuf_r>
 800e346:	3001      	adds	r0, #1
 800e348:	d1bf      	bne.n	800e2ca <_puts_r+0x42>
 800e34a:	e7df      	b.n	800e30c <_puts_r+0x84>
 800e34c:	6823      	ldr	r3, [r4, #0]
 800e34e:	250a      	movs	r5, #10
 800e350:	1c5a      	adds	r2, r3, #1
 800e352:	6022      	str	r2, [r4, #0]
 800e354:	701d      	strb	r5, [r3, #0]
 800e356:	e7db      	b.n	800e310 <_puts_r+0x88>
 800e358:	0801290c 	.word	0x0801290c
 800e35c:	0801292c 	.word	0x0801292c
 800e360:	080128ec 	.word	0x080128ec

0800e364 <puts>:
 800e364:	4b02      	ldr	r3, [pc, #8]	; (800e370 <puts+0xc>)
 800e366:	4601      	mov	r1, r0
 800e368:	6818      	ldr	r0, [r3, #0]
 800e36a:	f7ff bf8d 	b.w	800e288 <_puts_r>
 800e36e:	bf00      	nop
 800e370:	2000000c 	.word	0x2000000c

0800e374 <nanf>:
 800e374:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e37c <nanf+0x8>
 800e378:	4770      	bx	lr
 800e37a:	bf00      	nop
 800e37c:	7fc00000 	.word	0x7fc00000

0800e380 <siprintf>:
 800e380:	b40e      	push	{r1, r2, r3}
 800e382:	b500      	push	{lr}
 800e384:	b09c      	sub	sp, #112	; 0x70
 800e386:	ab1d      	add	r3, sp, #116	; 0x74
 800e388:	9002      	str	r0, [sp, #8]
 800e38a:	9006      	str	r0, [sp, #24]
 800e38c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e390:	4809      	ldr	r0, [pc, #36]	; (800e3b8 <siprintf+0x38>)
 800e392:	9107      	str	r1, [sp, #28]
 800e394:	9104      	str	r1, [sp, #16]
 800e396:	4909      	ldr	r1, [pc, #36]	; (800e3bc <siprintf+0x3c>)
 800e398:	f853 2b04 	ldr.w	r2, [r3], #4
 800e39c:	9105      	str	r1, [sp, #20]
 800e39e:	6800      	ldr	r0, [r0, #0]
 800e3a0:	9301      	str	r3, [sp, #4]
 800e3a2:	a902      	add	r1, sp, #8
 800e3a4:	f003 f8ec 	bl	8011580 <_svfiprintf_r>
 800e3a8:	9b02      	ldr	r3, [sp, #8]
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	701a      	strb	r2, [r3, #0]
 800e3ae:	b01c      	add	sp, #112	; 0x70
 800e3b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e3b4:	b003      	add	sp, #12
 800e3b6:	4770      	bx	lr
 800e3b8:	2000000c 	.word	0x2000000c
 800e3bc:	ffff0208 	.word	0xffff0208

0800e3c0 <sulp>:
 800e3c0:	b570      	push	{r4, r5, r6, lr}
 800e3c2:	4604      	mov	r4, r0
 800e3c4:	460d      	mov	r5, r1
 800e3c6:	4616      	mov	r6, r2
 800e3c8:	ec45 4b10 	vmov	d0, r4, r5
 800e3cc:	f002 fe3a 	bl	8011044 <__ulp>
 800e3d0:	b17e      	cbz	r6, 800e3f2 <sulp+0x32>
 800e3d2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e3d6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	dd09      	ble.n	800e3f2 <sulp+0x32>
 800e3de:	051b      	lsls	r3, r3, #20
 800e3e0:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800e3e4:	2000      	movs	r0, #0
 800e3e6:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800e3ea:	ec41 0b17 	vmov	d7, r0, r1
 800e3ee:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e3f2:	bd70      	pop	{r4, r5, r6, pc}
 800e3f4:	0000      	movs	r0, r0
	...

0800e3f8 <_strtod_l>:
 800e3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3fc:	ed2d 8b0e 	vpush	{d8-d14}
 800e400:	b097      	sub	sp, #92	; 0x5c
 800e402:	461f      	mov	r7, r3
 800e404:	2300      	movs	r3, #0
 800e406:	9312      	str	r3, [sp, #72]	; 0x48
 800e408:	4ba1      	ldr	r3, [pc, #644]	; (800e690 <_strtod_l+0x298>)
 800e40a:	920d      	str	r2, [sp, #52]	; 0x34
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	9307      	str	r3, [sp, #28]
 800e410:	4604      	mov	r4, r0
 800e412:	4618      	mov	r0, r3
 800e414:	468b      	mov	fp, r1
 800e416:	f7f1 ff1d 	bl	8000254 <strlen>
 800e41a:	f04f 0800 	mov.w	r8, #0
 800e41e:	4605      	mov	r5, r0
 800e420:	f04f 0900 	mov.w	r9, #0
 800e424:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800e428:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e42a:	7813      	ldrb	r3, [r2, #0]
 800e42c:	2b2b      	cmp	r3, #43	; 0x2b
 800e42e:	d04d      	beq.n	800e4cc <_strtod_l+0xd4>
 800e430:	d83a      	bhi.n	800e4a8 <_strtod_l+0xb0>
 800e432:	2b0d      	cmp	r3, #13
 800e434:	d833      	bhi.n	800e49e <_strtod_l+0xa6>
 800e436:	2b08      	cmp	r3, #8
 800e438:	d833      	bhi.n	800e4a2 <_strtod_l+0xaa>
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d03d      	beq.n	800e4ba <_strtod_l+0xc2>
 800e43e:	2300      	movs	r3, #0
 800e440:	9308      	str	r3, [sp, #32]
 800e442:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800e444:	7833      	ldrb	r3, [r6, #0]
 800e446:	2b30      	cmp	r3, #48	; 0x30
 800e448:	f040 80b0 	bne.w	800e5ac <_strtod_l+0x1b4>
 800e44c:	7873      	ldrb	r3, [r6, #1]
 800e44e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e452:	2b58      	cmp	r3, #88	; 0x58
 800e454:	d167      	bne.n	800e526 <_strtod_l+0x12e>
 800e456:	9b08      	ldr	r3, [sp, #32]
 800e458:	9301      	str	r3, [sp, #4]
 800e45a:	ab12      	add	r3, sp, #72	; 0x48
 800e45c:	9702      	str	r7, [sp, #8]
 800e45e:	9300      	str	r3, [sp, #0]
 800e460:	4a8c      	ldr	r2, [pc, #560]	; (800e694 <_strtod_l+0x29c>)
 800e462:	ab13      	add	r3, sp, #76	; 0x4c
 800e464:	a911      	add	r1, sp, #68	; 0x44
 800e466:	4620      	mov	r0, r4
 800e468:	f001 fede 	bl	8010228 <__gethex>
 800e46c:	f010 0507 	ands.w	r5, r0, #7
 800e470:	4607      	mov	r7, r0
 800e472:	d005      	beq.n	800e480 <_strtod_l+0x88>
 800e474:	2d06      	cmp	r5, #6
 800e476:	d12b      	bne.n	800e4d0 <_strtod_l+0xd8>
 800e478:	3601      	adds	r6, #1
 800e47a:	2300      	movs	r3, #0
 800e47c:	9611      	str	r6, [sp, #68]	; 0x44
 800e47e:	9308      	str	r3, [sp, #32]
 800e480:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e482:	2b00      	cmp	r3, #0
 800e484:	f040 854e 	bne.w	800ef24 <_strtod_l+0xb2c>
 800e488:	9b08      	ldr	r3, [sp, #32]
 800e48a:	b1e3      	cbz	r3, 800e4c6 <_strtod_l+0xce>
 800e48c:	ec49 8b17 	vmov	d7, r8, r9
 800e490:	eeb1 0b47 	vneg.f64	d0, d7
 800e494:	b017      	add	sp, #92	; 0x5c
 800e496:	ecbd 8b0e 	vpop	{d8-d14}
 800e49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e49e:	2b20      	cmp	r3, #32
 800e4a0:	d1cd      	bne.n	800e43e <_strtod_l+0x46>
 800e4a2:	3201      	adds	r2, #1
 800e4a4:	9211      	str	r2, [sp, #68]	; 0x44
 800e4a6:	e7bf      	b.n	800e428 <_strtod_l+0x30>
 800e4a8:	2b2d      	cmp	r3, #45	; 0x2d
 800e4aa:	d1c8      	bne.n	800e43e <_strtod_l+0x46>
 800e4ac:	2301      	movs	r3, #1
 800e4ae:	9308      	str	r3, [sp, #32]
 800e4b0:	1c53      	adds	r3, r2, #1
 800e4b2:	9311      	str	r3, [sp, #68]	; 0x44
 800e4b4:	7853      	ldrb	r3, [r2, #1]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d1c3      	bne.n	800e442 <_strtod_l+0x4a>
 800e4ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e4bc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	f040 852d 	bne.w	800ef20 <_strtod_l+0xb28>
 800e4c6:	ec49 8b10 	vmov	d0, r8, r9
 800e4ca:	e7e3      	b.n	800e494 <_strtod_l+0x9c>
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	e7ee      	b.n	800e4ae <_strtod_l+0xb6>
 800e4d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e4d2:	b13a      	cbz	r2, 800e4e4 <_strtod_l+0xec>
 800e4d4:	2135      	movs	r1, #53	; 0x35
 800e4d6:	a814      	add	r0, sp, #80	; 0x50
 800e4d8:	f002 febc 	bl	8011254 <__copybits>
 800e4dc:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e4de:	4620      	mov	r0, r4
 800e4e0:	f002 fa7e 	bl	80109e0 <_Bfree>
 800e4e4:	3d01      	subs	r5, #1
 800e4e6:	2d04      	cmp	r5, #4
 800e4e8:	d806      	bhi.n	800e4f8 <_strtod_l+0x100>
 800e4ea:	e8df f005 	tbb	[pc, r5]
 800e4ee:	030a      	.short	0x030a
 800e4f0:	1714      	.short	0x1714
 800e4f2:	0a          	.byte	0x0a
 800e4f3:	00          	.byte	0x00
 800e4f4:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800e4f8:	073f      	lsls	r7, r7, #28
 800e4fa:	d5c1      	bpl.n	800e480 <_strtod_l+0x88>
 800e4fc:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800e500:	e7be      	b.n	800e480 <_strtod_l+0x88>
 800e502:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800e506:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e508:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e50c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e510:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800e514:	e7f0      	b.n	800e4f8 <_strtod_l+0x100>
 800e516:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800e698 <_strtod_l+0x2a0>
 800e51a:	e7ed      	b.n	800e4f8 <_strtod_l+0x100>
 800e51c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800e520:	f04f 38ff 	mov.w	r8, #4294967295
 800e524:	e7e8      	b.n	800e4f8 <_strtod_l+0x100>
 800e526:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e528:	1c5a      	adds	r2, r3, #1
 800e52a:	9211      	str	r2, [sp, #68]	; 0x44
 800e52c:	785b      	ldrb	r3, [r3, #1]
 800e52e:	2b30      	cmp	r3, #48	; 0x30
 800e530:	d0f9      	beq.n	800e526 <_strtod_l+0x12e>
 800e532:	2b00      	cmp	r3, #0
 800e534:	d0a4      	beq.n	800e480 <_strtod_l+0x88>
 800e536:	2301      	movs	r3, #1
 800e538:	f04f 0a00 	mov.w	sl, #0
 800e53c:	9304      	str	r3, [sp, #16]
 800e53e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e540:	930a      	str	r3, [sp, #40]	; 0x28
 800e542:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800e546:	f8cd a018 	str.w	sl, [sp, #24]
 800e54a:	220a      	movs	r2, #10
 800e54c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800e54e:	7807      	ldrb	r7, [r0, #0]
 800e550:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800e554:	b2d9      	uxtb	r1, r3
 800e556:	2909      	cmp	r1, #9
 800e558:	d92a      	bls.n	800e5b0 <_strtod_l+0x1b8>
 800e55a:	9907      	ldr	r1, [sp, #28]
 800e55c:	462a      	mov	r2, r5
 800e55e:	f003 fac6 	bl	8011aee <strncmp>
 800e562:	2800      	cmp	r0, #0
 800e564:	d033      	beq.n	800e5ce <_strtod_l+0x1d6>
 800e566:	2000      	movs	r0, #0
 800e568:	9b06      	ldr	r3, [sp, #24]
 800e56a:	463a      	mov	r2, r7
 800e56c:	4601      	mov	r1, r0
 800e56e:	4607      	mov	r7, r0
 800e570:	2a65      	cmp	r2, #101	; 0x65
 800e572:	d001      	beq.n	800e578 <_strtod_l+0x180>
 800e574:	2a45      	cmp	r2, #69	; 0x45
 800e576:	d117      	bne.n	800e5a8 <_strtod_l+0x1b0>
 800e578:	b91b      	cbnz	r3, 800e582 <_strtod_l+0x18a>
 800e57a:	9b04      	ldr	r3, [sp, #16]
 800e57c:	4303      	orrs	r3, r0
 800e57e:	d09c      	beq.n	800e4ba <_strtod_l+0xc2>
 800e580:	2300      	movs	r3, #0
 800e582:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800e586:	f10b 0201 	add.w	r2, fp, #1
 800e58a:	9211      	str	r2, [sp, #68]	; 0x44
 800e58c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800e590:	2a2b      	cmp	r2, #43	; 0x2b
 800e592:	d071      	beq.n	800e678 <_strtod_l+0x280>
 800e594:	2a2d      	cmp	r2, #45	; 0x2d
 800e596:	d077      	beq.n	800e688 <_strtod_l+0x290>
 800e598:	f04f 0e00 	mov.w	lr, #0
 800e59c:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800e5a0:	2d09      	cmp	r5, #9
 800e5a2:	d97f      	bls.n	800e6a4 <_strtod_l+0x2ac>
 800e5a4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800e5a8:	2500      	movs	r5, #0
 800e5aa:	e09b      	b.n	800e6e4 <_strtod_l+0x2ec>
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	e7c3      	b.n	800e538 <_strtod_l+0x140>
 800e5b0:	9906      	ldr	r1, [sp, #24]
 800e5b2:	2908      	cmp	r1, #8
 800e5b4:	bfdd      	ittte	le
 800e5b6:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800e5b8:	fb02 3301 	mlale	r3, r2, r1, r3
 800e5bc:	9309      	strle	r3, [sp, #36]	; 0x24
 800e5be:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800e5c2:	9b06      	ldr	r3, [sp, #24]
 800e5c4:	3001      	adds	r0, #1
 800e5c6:	3301      	adds	r3, #1
 800e5c8:	9306      	str	r3, [sp, #24]
 800e5ca:	9011      	str	r0, [sp, #68]	; 0x44
 800e5cc:	e7be      	b.n	800e54c <_strtod_l+0x154>
 800e5ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e5d0:	195a      	adds	r2, r3, r5
 800e5d2:	9211      	str	r2, [sp, #68]	; 0x44
 800e5d4:	5d5a      	ldrb	r2, [r3, r5]
 800e5d6:	9b06      	ldr	r3, [sp, #24]
 800e5d8:	b3a3      	cbz	r3, 800e644 <_strtod_l+0x24c>
 800e5da:	4607      	mov	r7, r0
 800e5dc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800e5e0:	2909      	cmp	r1, #9
 800e5e2:	d912      	bls.n	800e60a <_strtod_l+0x212>
 800e5e4:	2101      	movs	r1, #1
 800e5e6:	e7c3      	b.n	800e570 <_strtod_l+0x178>
 800e5e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e5ea:	1c5a      	adds	r2, r3, #1
 800e5ec:	9211      	str	r2, [sp, #68]	; 0x44
 800e5ee:	785a      	ldrb	r2, [r3, #1]
 800e5f0:	3001      	adds	r0, #1
 800e5f2:	2a30      	cmp	r2, #48	; 0x30
 800e5f4:	d0f8      	beq.n	800e5e8 <_strtod_l+0x1f0>
 800e5f6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800e5fa:	2b08      	cmp	r3, #8
 800e5fc:	f200 8497 	bhi.w	800ef2e <_strtod_l+0xb36>
 800e600:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e602:	930a      	str	r3, [sp, #40]	; 0x28
 800e604:	4607      	mov	r7, r0
 800e606:	2000      	movs	r0, #0
 800e608:	4603      	mov	r3, r0
 800e60a:	3a30      	subs	r2, #48	; 0x30
 800e60c:	f100 0101 	add.w	r1, r0, #1
 800e610:	d012      	beq.n	800e638 <_strtod_l+0x240>
 800e612:	440f      	add	r7, r1
 800e614:	eb00 0c03 	add.w	ip, r0, r3
 800e618:	4619      	mov	r1, r3
 800e61a:	250a      	movs	r5, #10
 800e61c:	4561      	cmp	r1, ip
 800e61e:	d113      	bne.n	800e648 <_strtod_l+0x250>
 800e620:	1819      	adds	r1, r3, r0
 800e622:	2908      	cmp	r1, #8
 800e624:	f103 0301 	add.w	r3, r3, #1
 800e628:	4403      	add	r3, r0
 800e62a:	dc1c      	bgt.n	800e666 <_strtod_l+0x26e>
 800e62c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e62e:	210a      	movs	r1, #10
 800e630:	fb01 2200 	mla	r2, r1, r0, r2
 800e634:	9209      	str	r2, [sp, #36]	; 0x24
 800e636:	2100      	movs	r1, #0
 800e638:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e63a:	1c50      	adds	r0, r2, #1
 800e63c:	9011      	str	r0, [sp, #68]	; 0x44
 800e63e:	7852      	ldrb	r2, [r2, #1]
 800e640:	4608      	mov	r0, r1
 800e642:	e7cb      	b.n	800e5dc <_strtod_l+0x1e4>
 800e644:	9806      	ldr	r0, [sp, #24]
 800e646:	e7d4      	b.n	800e5f2 <_strtod_l+0x1fa>
 800e648:	2908      	cmp	r1, #8
 800e64a:	dc04      	bgt.n	800e656 <_strtod_l+0x25e>
 800e64c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e64e:	436e      	muls	r6, r5
 800e650:	9609      	str	r6, [sp, #36]	; 0x24
 800e652:	3101      	adds	r1, #1
 800e654:	e7e2      	b.n	800e61c <_strtod_l+0x224>
 800e656:	f101 0e01 	add.w	lr, r1, #1
 800e65a:	f1be 0f10 	cmp.w	lr, #16
 800e65e:	bfd8      	it	le
 800e660:	fb05 fa0a 	mulle.w	sl, r5, sl
 800e664:	e7f5      	b.n	800e652 <_strtod_l+0x25a>
 800e666:	2b10      	cmp	r3, #16
 800e668:	bfdc      	itt	le
 800e66a:	210a      	movle	r1, #10
 800e66c:	fb01 2a0a 	mlale	sl, r1, sl, r2
 800e670:	e7e1      	b.n	800e636 <_strtod_l+0x23e>
 800e672:	2700      	movs	r7, #0
 800e674:	2101      	movs	r1, #1
 800e676:	e780      	b.n	800e57a <_strtod_l+0x182>
 800e678:	f04f 0e00 	mov.w	lr, #0
 800e67c:	f10b 0202 	add.w	r2, fp, #2
 800e680:	9211      	str	r2, [sp, #68]	; 0x44
 800e682:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800e686:	e789      	b.n	800e59c <_strtod_l+0x1a4>
 800e688:	f04f 0e01 	mov.w	lr, #1
 800e68c:	e7f6      	b.n	800e67c <_strtod_l+0x284>
 800e68e:	bf00      	nop
 800e690:	080129b4 	.word	0x080129b4
 800e694:	08012708 	.word	0x08012708
 800e698:	7ff00000 	.word	0x7ff00000
 800e69c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e69e:	1c55      	adds	r5, r2, #1
 800e6a0:	9511      	str	r5, [sp, #68]	; 0x44
 800e6a2:	7852      	ldrb	r2, [r2, #1]
 800e6a4:	2a30      	cmp	r2, #48	; 0x30
 800e6a6:	d0f9      	beq.n	800e69c <_strtod_l+0x2a4>
 800e6a8:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800e6ac:	2d08      	cmp	r5, #8
 800e6ae:	f63f af7b 	bhi.w	800e5a8 <_strtod_l+0x1b0>
 800e6b2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800e6b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e6b8:	9207      	str	r2, [sp, #28]
 800e6ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e6bc:	1c55      	adds	r5, r2, #1
 800e6be:	9511      	str	r5, [sp, #68]	; 0x44
 800e6c0:	7852      	ldrb	r2, [r2, #1]
 800e6c2:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800e6c6:	2e09      	cmp	r6, #9
 800e6c8:	d937      	bls.n	800e73a <_strtod_l+0x342>
 800e6ca:	9e07      	ldr	r6, [sp, #28]
 800e6cc:	1bad      	subs	r5, r5, r6
 800e6ce:	2d08      	cmp	r5, #8
 800e6d0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800e6d4:	dc02      	bgt.n	800e6dc <_strtod_l+0x2e4>
 800e6d6:	4565      	cmp	r5, ip
 800e6d8:	bfa8      	it	ge
 800e6da:	4665      	movge	r5, ip
 800e6dc:	f1be 0f00 	cmp.w	lr, #0
 800e6e0:	d000      	beq.n	800e6e4 <_strtod_l+0x2ec>
 800e6e2:	426d      	negs	r5, r5
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d14d      	bne.n	800e784 <_strtod_l+0x38c>
 800e6e8:	9b04      	ldr	r3, [sp, #16]
 800e6ea:	4303      	orrs	r3, r0
 800e6ec:	f47f aec8 	bne.w	800e480 <_strtod_l+0x88>
 800e6f0:	2900      	cmp	r1, #0
 800e6f2:	f47f aee2 	bne.w	800e4ba <_strtod_l+0xc2>
 800e6f6:	2a69      	cmp	r2, #105	; 0x69
 800e6f8:	d027      	beq.n	800e74a <_strtod_l+0x352>
 800e6fa:	dc24      	bgt.n	800e746 <_strtod_l+0x34e>
 800e6fc:	2a49      	cmp	r2, #73	; 0x49
 800e6fe:	d024      	beq.n	800e74a <_strtod_l+0x352>
 800e700:	2a4e      	cmp	r2, #78	; 0x4e
 800e702:	f47f aeda 	bne.w	800e4ba <_strtod_l+0xc2>
 800e706:	4996      	ldr	r1, [pc, #600]	; (800e960 <_strtod_l+0x568>)
 800e708:	a811      	add	r0, sp, #68	; 0x44
 800e70a:	f001 ffe5 	bl	80106d8 <__match>
 800e70e:	2800      	cmp	r0, #0
 800e710:	f43f aed3 	beq.w	800e4ba <_strtod_l+0xc2>
 800e714:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e716:	781b      	ldrb	r3, [r3, #0]
 800e718:	2b28      	cmp	r3, #40	; 0x28
 800e71a:	d12d      	bne.n	800e778 <_strtod_l+0x380>
 800e71c:	4991      	ldr	r1, [pc, #580]	; (800e964 <_strtod_l+0x56c>)
 800e71e:	aa14      	add	r2, sp, #80	; 0x50
 800e720:	a811      	add	r0, sp, #68	; 0x44
 800e722:	f001 ffed 	bl	8010700 <__hexnan>
 800e726:	2805      	cmp	r0, #5
 800e728:	d126      	bne.n	800e778 <_strtod_l+0x380>
 800e72a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e72c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800e730:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800e734:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800e738:	e6a2      	b.n	800e480 <_strtod_l+0x88>
 800e73a:	250a      	movs	r5, #10
 800e73c:	fb05 250c 	mla	r5, r5, ip, r2
 800e740:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800e744:	e7b9      	b.n	800e6ba <_strtod_l+0x2c2>
 800e746:	2a6e      	cmp	r2, #110	; 0x6e
 800e748:	e7db      	b.n	800e702 <_strtod_l+0x30a>
 800e74a:	4987      	ldr	r1, [pc, #540]	; (800e968 <_strtod_l+0x570>)
 800e74c:	a811      	add	r0, sp, #68	; 0x44
 800e74e:	f001 ffc3 	bl	80106d8 <__match>
 800e752:	2800      	cmp	r0, #0
 800e754:	f43f aeb1 	beq.w	800e4ba <_strtod_l+0xc2>
 800e758:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e75a:	4984      	ldr	r1, [pc, #528]	; (800e96c <_strtod_l+0x574>)
 800e75c:	3b01      	subs	r3, #1
 800e75e:	a811      	add	r0, sp, #68	; 0x44
 800e760:	9311      	str	r3, [sp, #68]	; 0x44
 800e762:	f001 ffb9 	bl	80106d8 <__match>
 800e766:	b910      	cbnz	r0, 800e76e <_strtod_l+0x376>
 800e768:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e76a:	3301      	adds	r3, #1
 800e76c:	9311      	str	r3, [sp, #68]	; 0x44
 800e76e:	f8df 9210 	ldr.w	r9, [pc, #528]	; 800e980 <_strtod_l+0x588>
 800e772:	f04f 0800 	mov.w	r8, #0
 800e776:	e683      	b.n	800e480 <_strtod_l+0x88>
 800e778:	487d      	ldr	r0, [pc, #500]	; (800e970 <_strtod_l+0x578>)
 800e77a:	f003 f95d 	bl	8011a38 <nan>
 800e77e:	ec59 8b10 	vmov	r8, r9, d0
 800e782:	e67d      	b.n	800e480 <_strtod_l+0x88>
 800e784:	1bea      	subs	r2, r5, r7
 800e786:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800e78a:	9207      	str	r2, [sp, #28]
 800e78c:	9a06      	ldr	r2, [sp, #24]
 800e78e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e792:	2a00      	cmp	r2, #0
 800e794:	bf08      	it	eq
 800e796:	461a      	moveq	r2, r3
 800e798:	2b10      	cmp	r3, #16
 800e79a:	9206      	str	r2, [sp, #24]
 800e79c:	461a      	mov	r2, r3
 800e79e:	bfa8      	it	ge
 800e7a0:	2210      	movge	r2, #16
 800e7a2:	2b09      	cmp	r3, #9
 800e7a4:	ec59 8b17 	vmov	r8, r9, d7
 800e7a8:	dd0c      	ble.n	800e7c4 <_strtod_l+0x3cc>
 800e7aa:	4972      	ldr	r1, [pc, #456]	; (800e974 <_strtod_l+0x57c>)
 800e7ac:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800e7b0:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800e7b4:	ee06 aa90 	vmov	s13, sl
 800e7b8:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800e7bc:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e7c0:	ec59 8b16 	vmov	r8, r9, d6
 800e7c4:	2b0f      	cmp	r3, #15
 800e7c6:	dc36      	bgt.n	800e836 <_strtod_l+0x43e>
 800e7c8:	9907      	ldr	r1, [sp, #28]
 800e7ca:	2900      	cmp	r1, #0
 800e7cc:	f43f ae58 	beq.w	800e480 <_strtod_l+0x88>
 800e7d0:	dd23      	ble.n	800e81a <_strtod_l+0x422>
 800e7d2:	2916      	cmp	r1, #22
 800e7d4:	dc0b      	bgt.n	800e7ee <_strtod_l+0x3f6>
 800e7d6:	4b67      	ldr	r3, [pc, #412]	; (800e974 <_strtod_l+0x57c>)
 800e7d8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800e7dc:	ed93 7b00 	vldr	d7, [r3]
 800e7e0:	ec49 8b16 	vmov	d6, r8, r9
 800e7e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e7e8:	ec59 8b17 	vmov	r8, r9, d7
 800e7ec:	e648      	b.n	800e480 <_strtod_l+0x88>
 800e7ee:	9807      	ldr	r0, [sp, #28]
 800e7f0:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800e7f4:	4281      	cmp	r1, r0
 800e7f6:	db1e      	blt.n	800e836 <_strtod_l+0x43e>
 800e7f8:	4a5e      	ldr	r2, [pc, #376]	; (800e974 <_strtod_l+0x57c>)
 800e7fa:	f1c3 030f 	rsb	r3, r3, #15
 800e7fe:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800e802:	ed91 7b00 	vldr	d7, [r1]
 800e806:	ec49 8b16 	vmov	d6, r8, r9
 800e80a:	1ac3      	subs	r3, r0, r3
 800e80c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800e810:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e814:	ed92 6b00 	vldr	d6, [r2]
 800e818:	e7e4      	b.n	800e7e4 <_strtod_l+0x3ec>
 800e81a:	9907      	ldr	r1, [sp, #28]
 800e81c:	3116      	adds	r1, #22
 800e81e:	db0a      	blt.n	800e836 <_strtod_l+0x43e>
 800e820:	4b54      	ldr	r3, [pc, #336]	; (800e974 <_strtod_l+0x57c>)
 800e822:	1b7d      	subs	r5, r7, r5
 800e824:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800e828:	ed95 7b00 	vldr	d7, [r5]
 800e82c:	ec49 8b16 	vmov	d6, r8, r9
 800e830:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e834:	e7d8      	b.n	800e7e8 <_strtod_l+0x3f0>
 800e836:	9907      	ldr	r1, [sp, #28]
 800e838:	1a9a      	subs	r2, r3, r2
 800e83a:	440a      	add	r2, r1
 800e83c:	2a00      	cmp	r2, #0
 800e83e:	dd6f      	ble.n	800e920 <_strtod_l+0x528>
 800e840:	f012 000f 	ands.w	r0, r2, #15
 800e844:	d00a      	beq.n	800e85c <_strtod_l+0x464>
 800e846:	494b      	ldr	r1, [pc, #300]	; (800e974 <_strtod_l+0x57c>)
 800e848:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e84c:	ed91 7b00 	vldr	d7, [r1]
 800e850:	ec49 8b16 	vmov	d6, r8, r9
 800e854:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e858:	ec59 8b17 	vmov	r8, r9, d7
 800e85c:	f032 020f 	bics.w	r2, r2, #15
 800e860:	d04f      	beq.n	800e902 <_strtod_l+0x50a>
 800e862:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800e866:	dd22      	ble.n	800e8ae <_strtod_l+0x4b6>
 800e868:	2500      	movs	r5, #0
 800e86a:	462e      	mov	r6, r5
 800e86c:	9506      	str	r5, [sp, #24]
 800e86e:	462f      	mov	r7, r5
 800e870:	2322      	movs	r3, #34	; 0x22
 800e872:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800e980 <_strtod_l+0x588>
 800e876:	6023      	str	r3, [r4, #0]
 800e878:	f04f 0800 	mov.w	r8, #0
 800e87c:	9b06      	ldr	r3, [sp, #24]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	f43f adfe 	beq.w	800e480 <_strtod_l+0x88>
 800e884:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e886:	4620      	mov	r0, r4
 800e888:	f002 f8aa 	bl	80109e0 <_Bfree>
 800e88c:	4639      	mov	r1, r7
 800e88e:	4620      	mov	r0, r4
 800e890:	f002 f8a6 	bl	80109e0 <_Bfree>
 800e894:	4631      	mov	r1, r6
 800e896:	4620      	mov	r0, r4
 800e898:	f002 f8a2 	bl	80109e0 <_Bfree>
 800e89c:	9906      	ldr	r1, [sp, #24]
 800e89e:	4620      	mov	r0, r4
 800e8a0:	f002 f89e 	bl	80109e0 <_Bfree>
 800e8a4:	4629      	mov	r1, r5
 800e8a6:	4620      	mov	r0, r4
 800e8a8:	f002 f89a 	bl	80109e0 <_Bfree>
 800e8ac:	e5e8      	b.n	800e480 <_strtod_l+0x88>
 800e8ae:	2000      	movs	r0, #0
 800e8b0:	ec49 8b17 	vmov	d7, r8, r9
 800e8b4:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800e978 <_strtod_l+0x580>
 800e8b8:	1112      	asrs	r2, r2, #4
 800e8ba:	4601      	mov	r1, r0
 800e8bc:	2a01      	cmp	r2, #1
 800e8be:	dc23      	bgt.n	800e908 <_strtod_l+0x510>
 800e8c0:	b108      	cbz	r0, 800e8c6 <_strtod_l+0x4ce>
 800e8c2:	ec59 8b17 	vmov	r8, r9, d7
 800e8c6:	4a2c      	ldr	r2, [pc, #176]	; (800e978 <_strtod_l+0x580>)
 800e8c8:	482c      	ldr	r0, [pc, #176]	; (800e97c <_strtod_l+0x584>)
 800e8ca:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800e8ce:	ed92 7b00 	vldr	d7, [r2]
 800e8d2:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800e8d6:	ec49 8b16 	vmov	d6, r8, r9
 800e8da:	4a29      	ldr	r2, [pc, #164]	; (800e980 <_strtod_l+0x588>)
 800e8dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e8e0:	ee17 1a90 	vmov	r1, s15
 800e8e4:	400a      	ands	r2, r1
 800e8e6:	4282      	cmp	r2, r0
 800e8e8:	ec59 8b17 	vmov	r8, r9, d7
 800e8ec:	d8bc      	bhi.n	800e868 <_strtod_l+0x470>
 800e8ee:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800e8f2:	4282      	cmp	r2, r0
 800e8f4:	bf86      	itte	hi
 800e8f6:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800e984 <_strtod_l+0x58c>
 800e8fa:	f04f 38ff 	movhi.w	r8, #4294967295
 800e8fe:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800e902:	2200      	movs	r2, #0
 800e904:	9204      	str	r2, [sp, #16]
 800e906:	e078      	b.n	800e9fa <_strtod_l+0x602>
 800e908:	07d6      	lsls	r6, r2, #31
 800e90a:	d504      	bpl.n	800e916 <_strtod_l+0x51e>
 800e90c:	ed9c 6b00 	vldr	d6, [ip]
 800e910:	2001      	movs	r0, #1
 800e912:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e916:	3101      	adds	r1, #1
 800e918:	1052      	asrs	r2, r2, #1
 800e91a:	f10c 0c08 	add.w	ip, ip, #8
 800e91e:	e7cd      	b.n	800e8bc <_strtod_l+0x4c4>
 800e920:	d0ef      	beq.n	800e902 <_strtod_l+0x50a>
 800e922:	4252      	negs	r2, r2
 800e924:	f012 000f 	ands.w	r0, r2, #15
 800e928:	d00a      	beq.n	800e940 <_strtod_l+0x548>
 800e92a:	4912      	ldr	r1, [pc, #72]	; (800e974 <_strtod_l+0x57c>)
 800e92c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e930:	ed91 7b00 	vldr	d7, [r1]
 800e934:	ec49 8b16 	vmov	d6, r8, r9
 800e938:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e93c:	ec59 8b17 	vmov	r8, r9, d7
 800e940:	1112      	asrs	r2, r2, #4
 800e942:	d0de      	beq.n	800e902 <_strtod_l+0x50a>
 800e944:	2a1f      	cmp	r2, #31
 800e946:	dd1f      	ble.n	800e988 <_strtod_l+0x590>
 800e948:	2500      	movs	r5, #0
 800e94a:	462e      	mov	r6, r5
 800e94c:	9506      	str	r5, [sp, #24]
 800e94e:	462f      	mov	r7, r5
 800e950:	2322      	movs	r3, #34	; 0x22
 800e952:	f04f 0800 	mov.w	r8, #0
 800e956:	f04f 0900 	mov.w	r9, #0
 800e95a:	6023      	str	r3, [r4, #0]
 800e95c:	e78e      	b.n	800e87c <_strtod_l+0x484>
 800e95e:	bf00      	nop
 800e960:	080126d9 	.word	0x080126d9
 800e964:	0801271c 	.word	0x0801271c
 800e968:	080126d1 	.word	0x080126d1
 800e96c:	0801285c 	.word	0x0801285c
 800e970:	08012b70 	.word	0x08012b70
 800e974:	08012a50 	.word	0x08012a50
 800e978:	08012a28 	.word	0x08012a28
 800e97c:	7ca00000 	.word	0x7ca00000
 800e980:	7ff00000 	.word	0x7ff00000
 800e984:	7fefffff 	.word	0x7fefffff
 800e988:	f012 0110 	ands.w	r1, r2, #16
 800e98c:	bf18      	it	ne
 800e98e:	216a      	movne	r1, #106	; 0x6a
 800e990:	9104      	str	r1, [sp, #16]
 800e992:	ec49 8b17 	vmov	d7, r8, r9
 800e996:	49be      	ldr	r1, [pc, #760]	; (800ec90 <_strtod_l+0x898>)
 800e998:	2000      	movs	r0, #0
 800e99a:	07d6      	lsls	r6, r2, #31
 800e99c:	d504      	bpl.n	800e9a8 <_strtod_l+0x5b0>
 800e99e:	ed91 6b00 	vldr	d6, [r1]
 800e9a2:	2001      	movs	r0, #1
 800e9a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e9a8:	1052      	asrs	r2, r2, #1
 800e9aa:	f101 0108 	add.w	r1, r1, #8
 800e9ae:	d1f4      	bne.n	800e99a <_strtod_l+0x5a2>
 800e9b0:	b108      	cbz	r0, 800e9b6 <_strtod_l+0x5be>
 800e9b2:	ec59 8b17 	vmov	r8, r9, d7
 800e9b6:	9a04      	ldr	r2, [sp, #16]
 800e9b8:	b1c2      	cbz	r2, 800e9ec <_strtod_l+0x5f4>
 800e9ba:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800e9be:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800e9c2:	2a00      	cmp	r2, #0
 800e9c4:	4648      	mov	r0, r9
 800e9c6:	dd11      	ble.n	800e9ec <_strtod_l+0x5f4>
 800e9c8:	2a1f      	cmp	r2, #31
 800e9ca:	f340 812e 	ble.w	800ec2a <_strtod_l+0x832>
 800e9ce:	2a34      	cmp	r2, #52	; 0x34
 800e9d0:	bfde      	ittt	le
 800e9d2:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800e9d6:	f04f 32ff 	movle.w	r2, #4294967295
 800e9da:	fa02 f101 	lslle.w	r1, r2, r1
 800e9de:	f04f 0800 	mov.w	r8, #0
 800e9e2:	bfcc      	ite	gt
 800e9e4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800e9e8:	ea01 0900 	andle.w	r9, r1, r0
 800e9ec:	ec49 8b17 	vmov	d7, r8, r9
 800e9f0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e9f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9f8:	d0a6      	beq.n	800e948 <_strtod_l+0x550>
 800e9fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e9fc:	9200      	str	r2, [sp, #0]
 800e9fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ea00:	9a06      	ldr	r2, [sp, #24]
 800ea02:	4620      	mov	r0, r4
 800ea04:	f002 f854 	bl	8010ab0 <__s2b>
 800ea08:	9006      	str	r0, [sp, #24]
 800ea0a:	2800      	cmp	r0, #0
 800ea0c:	f43f af2c 	beq.w	800e868 <_strtod_l+0x470>
 800ea10:	9b07      	ldr	r3, [sp, #28]
 800ea12:	1b7d      	subs	r5, r7, r5
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	bfb4      	ite	lt
 800ea18:	462b      	movlt	r3, r5
 800ea1a:	2300      	movge	r3, #0
 800ea1c:	9309      	str	r3, [sp, #36]	; 0x24
 800ea1e:	9b07      	ldr	r3, [sp, #28]
 800ea20:	ed9f 9b93 	vldr	d9, [pc, #588]	; 800ec70 <_strtod_l+0x878>
 800ea24:	ed9f ab94 	vldr	d10, [pc, #592]	; 800ec78 <_strtod_l+0x880>
 800ea28:	ed9f bb95 	vldr	d11, [pc, #596]	; 800ec80 <_strtod_l+0x888>
 800ea2c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ea30:	2500      	movs	r5, #0
 800ea32:	930c      	str	r3, [sp, #48]	; 0x30
 800ea34:	462e      	mov	r6, r5
 800ea36:	9b06      	ldr	r3, [sp, #24]
 800ea38:	4620      	mov	r0, r4
 800ea3a:	6859      	ldr	r1, [r3, #4]
 800ea3c:	f001 ff90 	bl	8010960 <_Balloc>
 800ea40:	4607      	mov	r7, r0
 800ea42:	2800      	cmp	r0, #0
 800ea44:	f43f af14 	beq.w	800e870 <_strtod_l+0x478>
 800ea48:	9b06      	ldr	r3, [sp, #24]
 800ea4a:	691a      	ldr	r2, [r3, #16]
 800ea4c:	3202      	adds	r2, #2
 800ea4e:	f103 010c 	add.w	r1, r3, #12
 800ea52:	0092      	lsls	r2, r2, #2
 800ea54:	300c      	adds	r0, #12
 800ea56:	f001 ff75 	bl	8010944 <memcpy>
 800ea5a:	ec49 8b10 	vmov	d0, r8, r9
 800ea5e:	aa14      	add	r2, sp, #80	; 0x50
 800ea60:	a913      	add	r1, sp, #76	; 0x4c
 800ea62:	4620      	mov	r0, r4
 800ea64:	f002 fb6a 	bl	801113c <__d2b>
 800ea68:	ec49 8b18 	vmov	d8, r8, r9
 800ea6c:	9012      	str	r0, [sp, #72]	; 0x48
 800ea6e:	2800      	cmp	r0, #0
 800ea70:	f43f aefe 	beq.w	800e870 <_strtod_l+0x478>
 800ea74:	2101      	movs	r1, #1
 800ea76:	4620      	mov	r0, r4
 800ea78:	f002 f8b4 	bl	8010be4 <__i2b>
 800ea7c:	4606      	mov	r6, r0
 800ea7e:	2800      	cmp	r0, #0
 800ea80:	f43f aef6 	beq.w	800e870 <_strtod_l+0x478>
 800ea84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ea86:	9914      	ldr	r1, [sp, #80]	; 0x50
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	bfab      	itete	ge
 800ea8c:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800ea8e:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800ea90:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800ea94:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800ea98:	bfac      	ite	ge
 800ea9a:	eb03 0b02 	addge.w	fp, r3, r2
 800ea9e:	eba2 0a03 	sublt.w	sl, r2, r3
 800eaa2:	9a04      	ldr	r2, [sp, #16]
 800eaa4:	1a9b      	subs	r3, r3, r2
 800eaa6:	440b      	add	r3, r1
 800eaa8:	4a7a      	ldr	r2, [pc, #488]	; (800ec94 <_strtod_l+0x89c>)
 800eaaa:	3b01      	subs	r3, #1
 800eaac:	4293      	cmp	r3, r2
 800eaae:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800eab2:	f280 80cd 	bge.w	800ec50 <_strtod_l+0x858>
 800eab6:	1ad2      	subs	r2, r2, r3
 800eab8:	2a1f      	cmp	r2, #31
 800eaba:	eba1 0102 	sub.w	r1, r1, r2
 800eabe:	f04f 0001 	mov.w	r0, #1
 800eac2:	f300 80b9 	bgt.w	800ec38 <_strtod_l+0x840>
 800eac6:	fa00 f302 	lsl.w	r3, r0, r2
 800eaca:	930b      	str	r3, [sp, #44]	; 0x2c
 800eacc:	2300      	movs	r3, #0
 800eace:	930a      	str	r3, [sp, #40]	; 0x28
 800ead0:	eb0b 0301 	add.w	r3, fp, r1
 800ead4:	9a04      	ldr	r2, [sp, #16]
 800ead6:	459b      	cmp	fp, r3
 800ead8:	448a      	add	sl, r1
 800eada:	4492      	add	sl, r2
 800eadc:	465a      	mov	r2, fp
 800eade:	bfa8      	it	ge
 800eae0:	461a      	movge	r2, r3
 800eae2:	4552      	cmp	r2, sl
 800eae4:	bfa8      	it	ge
 800eae6:	4652      	movge	r2, sl
 800eae8:	2a00      	cmp	r2, #0
 800eaea:	bfc2      	ittt	gt
 800eaec:	1a9b      	subgt	r3, r3, r2
 800eaee:	ebaa 0a02 	subgt.w	sl, sl, r2
 800eaf2:	ebab 0b02 	subgt.w	fp, fp, r2
 800eaf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eaf8:	2a00      	cmp	r2, #0
 800eafa:	dd18      	ble.n	800eb2e <_strtod_l+0x736>
 800eafc:	4631      	mov	r1, r6
 800eafe:	4620      	mov	r0, r4
 800eb00:	930f      	str	r3, [sp, #60]	; 0x3c
 800eb02:	f002 f92f 	bl	8010d64 <__pow5mult>
 800eb06:	4606      	mov	r6, r0
 800eb08:	2800      	cmp	r0, #0
 800eb0a:	f43f aeb1 	beq.w	800e870 <_strtod_l+0x478>
 800eb0e:	4601      	mov	r1, r0
 800eb10:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800eb12:	4620      	mov	r0, r4
 800eb14:	f002 f87c 	bl	8010c10 <__multiply>
 800eb18:	900e      	str	r0, [sp, #56]	; 0x38
 800eb1a:	2800      	cmp	r0, #0
 800eb1c:	f43f aea8 	beq.w	800e870 <_strtod_l+0x478>
 800eb20:	9912      	ldr	r1, [sp, #72]	; 0x48
 800eb22:	4620      	mov	r0, r4
 800eb24:	f001 ff5c 	bl	80109e0 <_Bfree>
 800eb28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eb2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eb2c:	9212      	str	r2, [sp, #72]	; 0x48
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	f300 8093 	bgt.w	800ec5a <_strtod_l+0x862>
 800eb34:	9b07      	ldr	r3, [sp, #28]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	dd08      	ble.n	800eb4c <_strtod_l+0x754>
 800eb3a:	4639      	mov	r1, r7
 800eb3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800eb3e:	4620      	mov	r0, r4
 800eb40:	f002 f910 	bl	8010d64 <__pow5mult>
 800eb44:	4607      	mov	r7, r0
 800eb46:	2800      	cmp	r0, #0
 800eb48:	f43f ae92 	beq.w	800e870 <_strtod_l+0x478>
 800eb4c:	f1ba 0f00 	cmp.w	sl, #0
 800eb50:	dd08      	ble.n	800eb64 <_strtod_l+0x76c>
 800eb52:	4639      	mov	r1, r7
 800eb54:	4652      	mov	r2, sl
 800eb56:	4620      	mov	r0, r4
 800eb58:	f002 f95e 	bl	8010e18 <__lshift>
 800eb5c:	4607      	mov	r7, r0
 800eb5e:	2800      	cmp	r0, #0
 800eb60:	f43f ae86 	beq.w	800e870 <_strtod_l+0x478>
 800eb64:	f1bb 0f00 	cmp.w	fp, #0
 800eb68:	dd08      	ble.n	800eb7c <_strtod_l+0x784>
 800eb6a:	4631      	mov	r1, r6
 800eb6c:	465a      	mov	r2, fp
 800eb6e:	4620      	mov	r0, r4
 800eb70:	f002 f952 	bl	8010e18 <__lshift>
 800eb74:	4606      	mov	r6, r0
 800eb76:	2800      	cmp	r0, #0
 800eb78:	f43f ae7a 	beq.w	800e870 <_strtod_l+0x478>
 800eb7c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800eb7e:	463a      	mov	r2, r7
 800eb80:	4620      	mov	r0, r4
 800eb82:	f002 f9d5 	bl	8010f30 <__mdiff>
 800eb86:	4605      	mov	r5, r0
 800eb88:	2800      	cmp	r0, #0
 800eb8a:	f43f ae71 	beq.w	800e870 <_strtod_l+0x478>
 800eb8e:	2300      	movs	r3, #0
 800eb90:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800eb94:	60c3      	str	r3, [r0, #12]
 800eb96:	4631      	mov	r1, r6
 800eb98:	f002 f9ae 	bl	8010ef8 <__mcmp>
 800eb9c:	2800      	cmp	r0, #0
 800eb9e:	da7d      	bge.n	800ec9c <_strtod_l+0x8a4>
 800eba0:	ea5a 0308 	orrs.w	r3, sl, r8
 800eba4:	f040 80a3 	bne.w	800ecee <_strtod_l+0x8f6>
 800eba8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	f040 809e 	bne.w	800ecee <_strtod_l+0x8f6>
 800ebb2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ebb6:	0d1b      	lsrs	r3, r3, #20
 800ebb8:	051b      	lsls	r3, r3, #20
 800ebba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ebbe:	f240 8096 	bls.w	800ecee <_strtod_l+0x8f6>
 800ebc2:	696b      	ldr	r3, [r5, #20]
 800ebc4:	b91b      	cbnz	r3, 800ebce <_strtod_l+0x7d6>
 800ebc6:	692b      	ldr	r3, [r5, #16]
 800ebc8:	2b01      	cmp	r3, #1
 800ebca:	f340 8090 	ble.w	800ecee <_strtod_l+0x8f6>
 800ebce:	4629      	mov	r1, r5
 800ebd0:	2201      	movs	r2, #1
 800ebd2:	4620      	mov	r0, r4
 800ebd4:	f002 f920 	bl	8010e18 <__lshift>
 800ebd8:	4631      	mov	r1, r6
 800ebda:	4605      	mov	r5, r0
 800ebdc:	f002 f98c 	bl	8010ef8 <__mcmp>
 800ebe0:	2800      	cmp	r0, #0
 800ebe2:	f340 8084 	ble.w	800ecee <_strtod_l+0x8f6>
 800ebe6:	9904      	ldr	r1, [sp, #16]
 800ebe8:	4a2b      	ldr	r2, [pc, #172]	; (800ec98 <_strtod_l+0x8a0>)
 800ebea:	464b      	mov	r3, r9
 800ebec:	2900      	cmp	r1, #0
 800ebee:	f000 809d 	beq.w	800ed2c <_strtod_l+0x934>
 800ebf2:	ea02 0109 	and.w	r1, r2, r9
 800ebf6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ebfa:	f300 8097 	bgt.w	800ed2c <_strtod_l+0x934>
 800ebfe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ec02:	f77f aea5 	ble.w	800e950 <_strtod_l+0x558>
 800ec06:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800ec88 <_strtod_l+0x890>
 800ec0a:	ec49 8b16 	vmov	d6, r8, r9
 800ec0e:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ec12:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ec16:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800ec1a:	4313      	orrs	r3, r2
 800ec1c:	bf08      	it	eq
 800ec1e:	2322      	moveq	r3, #34	; 0x22
 800ec20:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ec24:	bf08      	it	eq
 800ec26:	6023      	streq	r3, [r4, #0]
 800ec28:	e62c      	b.n	800e884 <_strtod_l+0x48c>
 800ec2a:	f04f 31ff 	mov.w	r1, #4294967295
 800ec2e:	fa01 f202 	lsl.w	r2, r1, r2
 800ec32:	ea02 0808 	and.w	r8, r2, r8
 800ec36:	e6d9      	b.n	800e9ec <_strtod_l+0x5f4>
 800ec38:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800ec3c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800ec40:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800ec44:	33e2      	adds	r3, #226	; 0xe2
 800ec46:	fa00 f303 	lsl.w	r3, r0, r3
 800ec4a:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800ec4e:	e73f      	b.n	800ead0 <_strtod_l+0x6d8>
 800ec50:	2200      	movs	r2, #0
 800ec52:	2301      	movs	r3, #1
 800ec54:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ec58:	e73a      	b.n	800ead0 <_strtod_l+0x6d8>
 800ec5a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ec5c:	461a      	mov	r2, r3
 800ec5e:	4620      	mov	r0, r4
 800ec60:	f002 f8da 	bl	8010e18 <__lshift>
 800ec64:	9012      	str	r0, [sp, #72]	; 0x48
 800ec66:	2800      	cmp	r0, #0
 800ec68:	f47f af64 	bne.w	800eb34 <_strtod_l+0x73c>
 800ec6c:	e600      	b.n	800e870 <_strtod_l+0x478>
 800ec6e:	bf00      	nop
 800ec70:	94a03595 	.word	0x94a03595
 800ec74:	3fcfffff 	.word	0x3fcfffff
 800ec78:	94a03595 	.word	0x94a03595
 800ec7c:	3fdfffff 	.word	0x3fdfffff
 800ec80:	35afe535 	.word	0x35afe535
 800ec84:	3fe00000 	.word	0x3fe00000
 800ec88:	00000000 	.word	0x00000000
 800ec8c:	39500000 	.word	0x39500000
 800ec90:	08012730 	.word	0x08012730
 800ec94:	fffffc02 	.word	0xfffffc02
 800ec98:	7ff00000 	.word	0x7ff00000
 800ec9c:	46cb      	mov	fp, r9
 800ec9e:	d15f      	bne.n	800ed60 <_strtod_l+0x968>
 800eca0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800eca4:	f1ba 0f00 	cmp.w	sl, #0
 800eca8:	d02a      	beq.n	800ed00 <_strtod_l+0x908>
 800ecaa:	4aa7      	ldr	r2, [pc, #668]	; (800ef48 <_strtod_l+0xb50>)
 800ecac:	4293      	cmp	r3, r2
 800ecae:	d12b      	bne.n	800ed08 <_strtod_l+0x910>
 800ecb0:	9b04      	ldr	r3, [sp, #16]
 800ecb2:	4642      	mov	r2, r8
 800ecb4:	b1fb      	cbz	r3, 800ecf6 <_strtod_l+0x8fe>
 800ecb6:	4ba5      	ldr	r3, [pc, #660]	; (800ef4c <_strtod_l+0xb54>)
 800ecb8:	ea09 0303 	and.w	r3, r9, r3
 800ecbc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ecc0:	f04f 31ff 	mov.w	r1, #4294967295
 800ecc4:	d81a      	bhi.n	800ecfc <_strtod_l+0x904>
 800ecc6:	0d1b      	lsrs	r3, r3, #20
 800ecc8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800eccc:	fa01 f303 	lsl.w	r3, r1, r3
 800ecd0:	429a      	cmp	r2, r3
 800ecd2:	d119      	bne.n	800ed08 <_strtod_l+0x910>
 800ecd4:	4b9e      	ldr	r3, [pc, #632]	; (800ef50 <_strtod_l+0xb58>)
 800ecd6:	459b      	cmp	fp, r3
 800ecd8:	d102      	bne.n	800ece0 <_strtod_l+0x8e8>
 800ecda:	3201      	adds	r2, #1
 800ecdc:	f43f adc8 	beq.w	800e870 <_strtod_l+0x478>
 800ece0:	4b9a      	ldr	r3, [pc, #616]	; (800ef4c <_strtod_l+0xb54>)
 800ece2:	ea0b 0303 	and.w	r3, fp, r3
 800ece6:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800ecea:	f04f 0800 	mov.w	r8, #0
 800ecee:	9b04      	ldr	r3, [sp, #16]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d188      	bne.n	800ec06 <_strtod_l+0x80e>
 800ecf4:	e5c6      	b.n	800e884 <_strtod_l+0x48c>
 800ecf6:	f04f 33ff 	mov.w	r3, #4294967295
 800ecfa:	e7e9      	b.n	800ecd0 <_strtod_l+0x8d8>
 800ecfc:	460b      	mov	r3, r1
 800ecfe:	e7e7      	b.n	800ecd0 <_strtod_l+0x8d8>
 800ed00:	ea53 0308 	orrs.w	r3, r3, r8
 800ed04:	f43f af6f 	beq.w	800ebe6 <_strtod_l+0x7ee>
 800ed08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed0a:	b1cb      	cbz	r3, 800ed40 <_strtod_l+0x948>
 800ed0c:	ea13 0f0b 	tst.w	r3, fp
 800ed10:	d0ed      	beq.n	800ecee <_strtod_l+0x8f6>
 800ed12:	9a04      	ldr	r2, [sp, #16]
 800ed14:	4640      	mov	r0, r8
 800ed16:	4649      	mov	r1, r9
 800ed18:	f1ba 0f00 	cmp.w	sl, #0
 800ed1c:	d014      	beq.n	800ed48 <_strtod_l+0x950>
 800ed1e:	f7ff fb4f 	bl	800e3c0 <sulp>
 800ed22:	ee38 7b00 	vadd.f64	d7, d8, d0
 800ed26:	ec59 8b17 	vmov	r8, r9, d7
 800ed2a:	e7e0      	b.n	800ecee <_strtod_l+0x8f6>
 800ed2c:	4013      	ands	r3, r2
 800ed2e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ed32:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800ed36:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800ed3a:	f04f 38ff 	mov.w	r8, #4294967295
 800ed3e:	e7d6      	b.n	800ecee <_strtod_l+0x8f6>
 800ed40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed42:	ea13 0f08 	tst.w	r3, r8
 800ed46:	e7e3      	b.n	800ed10 <_strtod_l+0x918>
 800ed48:	f7ff fb3a 	bl	800e3c0 <sulp>
 800ed4c:	ee38 0b40 	vsub.f64	d0, d8, d0
 800ed50:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800ed54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed58:	ec59 8b10 	vmov	r8, r9, d0
 800ed5c:	d1c7      	bne.n	800ecee <_strtod_l+0x8f6>
 800ed5e:	e5f7      	b.n	800e950 <_strtod_l+0x558>
 800ed60:	4631      	mov	r1, r6
 800ed62:	4628      	mov	r0, r5
 800ed64:	f002 fa46 	bl	80111f4 <__ratio>
 800ed68:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800ed6c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ed70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed74:	d865      	bhi.n	800ee42 <_strtod_l+0xa4a>
 800ed76:	f1ba 0f00 	cmp.w	sl, #0
 800ed7a:	d042      	beq.n	800ee02 <_strtod_l+0xa0a>
 800ed7c:	4b75      	ldr	r3, [pc, #468]	; (800ef54 <_strtod_l+0xb5c>)
 800ed7e:	2200      	movs	r2, #0
 800ed80:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800ed84:	4871      	ldr	r0, [pc, #452]	; (800ef4c <_strtod_l+0xb54>)
 800ed86:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800ef60 <_strtod_l+0xb68>
 800ed8a:	ea0b 0100 	and.w	r1, fp, r0
 800ed8e:	4561      	cmp	r1, ip
 800ed90:	f040 808e 	bne.w	800eeb0 <_strtod_l+0xab8>
 800ed94:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800ed98:	ec49 8b10 	vmov	d0, r8, r9
 800ed9c:	ec43 2b1c 	vmov	d12, r2, r3
 800eda0:	910a      	str	r1, [sp, #40]	; 0x28
 800eda2:	f002 f94f 	bl	8011044 <__ulp>
 800eda6:	ec49 8b1e 	vmov	d14, r8, r9
 800edaa:	4868      	ldr	r0, [pc, #416]	; (800ef4c <_strtod_l+0xb54>)
 800edac:	eeac eb00 	vfma.f64	d14, d12, d0
 800edb0:	ee1e 3a90 	vmov	r3, s29
 800edb4:	4a68      	ldr	r2, [pc, #416]	; (800ef58 <_strtod_l+0xb60>)
 800edb6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800edb8:	4018      	ands	r0, r3
 800edba:	4290      	cmp	r0, r2
 800edbc:	ec59 8b1e 	vmov	r8, r9, d14
 800edc0:	d94e      	bls.n	800ee60 <_strtod_l+0xa68>
 800edc2:	ee18 3a90 	vmov	r3, s17
 800edc6:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800edca:	4293      	cmp	r3, r2
 800edcc:	d104      	bne.n	800edd8 <_strtod_l+0x9e0>
 800edce:	ee18 3a10 	vmov	r3, s16
 800edd2:	3301      	adds	r3, #1
 800edd4:	f43f ad4c 	beq.w	800e870 <_strtod_l+0x478>
 800edd8:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800ef50 <_strtod_l+0xb58>
 800eddc:	f04f 38ff 	mov.w	r8, #4294967295
 800ede0:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ede2:	4620      	mov	r0, r4
 800ede4:	f001 fdfc 	bl	80109e0 <_Bfree>
 800ede8:	4639      	mov	r1, r7
 800edea:	4620      	mov	r0, r4
 800edec:	f001 fdf8 	bl	80109e0 <_Bfree>
 800edf0:	4631      	mov	r1, r6
 800edf2:	4620      	mov	r0, r4
 800edf4:	f001 fdf4 	bl	80109e0 <_Bfree>
 800edf8:	4629      	mov	r1, r5
 800edfa:	4620      	mov	r0, r4
 800edfc:	f001 fdf0 	bl	80109e0 <_Bfree>
 800ee00:	e619      	b.n	800ea36 <_strtod_l+0x63e>
 800ee02:	f1b8 0f00 	cmp.w	r8, #0
 800ee06:	d112      	bne.n	800ee2e <_strtod_l+0xa36>
 800ee08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ee0c:	b9b3      	cbnz	r3, 800ee3c <_strtod_l+0xa44>
 800ee0e:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800ee12:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ee16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee1a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800ee1e:	bf58      	it	pl
 800ee20:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800ee24:	eeb1 7b4d 	vneg.f64	d7, d13
 800ee28:	ec53 2b17 	vmov	r2, r3, d7
 800ee2c:	e7aa      	b.n	800ed84 <_strtod_l+0x98c>
 800ee2e:	f1b8 0f01 	cmp.w	r8, #1
 800ee32:	d103      	bne.n	800ee3c <_strtod_l+0xa44>
 800ee34:	f1b9 0f00 	cmp.w	r9, #0
 800ee38:	f43f ad8a 	beq.w	800e950 <_strtod_l+0x558>
 800ee3c:	4b47      	ldr	r3, [pc, #284]	; (800ef5c <_strtod_l+0xb64>)
 800ee3e:	2200      	movs	r2, #0
 800ee40:	e79e      	b.n	800ed80 <_strtod_l+0x988>
 800ee42:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800ee46:	ee20 db0d 	vmul.f64	d13, d0, d13
 800ee4a:	f1ba 0f00 	cmp.w	sl, #0
 800ee4e:	d104      	bne.n	800ee5a <_strtod_l+0xa62>
 800ee50:	eeb1 7b4d 	vneg.f64	d7, d13
 800ee54:	ec53 2b17 	vmov	r2, r3, d7
 800ee58:	e794      	b.n	800ed84 <_strtod_l+0x98c>
 800ee5a:	eeb0 7b4d 	vmov.f64	d7, d13
 800ee5e:	e7f9      	b.n	800ee54 <_strtod_l+0xa5c>
 800ee60:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800ee64:	9b04      	ldr	r3, [sp, #16]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d1ba      	bne.n	800ede0 <_strtod_l+0x9e8>
 800ee6a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ee6e:	0d1b      	lsrs	r3, r3, #20
 800ee70:	051b      	lsls	r3, r3, #20
 800ee72:	4299      	cmp	r1, r3
 800ee74:	d1b4      	bne.n	800ede0 <_strtod_l+0x9e8>
 800ee76:	ec51 0b1d 	vmov	r0, r1, d13
 800ee7a:	f7f1 fc1d 	bl	80006b8 <__aeabi_d2lz>
 800ee7e:	f7f1 fbd5 	bl	800062c <__aeabi_l2d>
 800ee82:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ee86:	ec41 0b17 	vmov	d7, r0, r1
 800ee8a:	ea43 0308 	orr.w	r3, r3, r8
 800ee8e:	ea53 030a 	orrs.w	r3, r3, sl
 800ee92:	ee3d db47 	vsub.f64	d13, d13, d7
 800ee96:	d03c      	beq.n	800ef12 <_strtod_l+0xb1a>
 800ee98:	eeb4 dbca 	vcmpe.f64	d13, d10
 800ee9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eea0:	f53f acf0 	bmi.w	800e884 <_strtod_l+0x48c>
 800eea4:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800eea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeac:	dd98      	ble.n	800ede0 <_strtod_l+0x9e8>
 800eeae:	e4e9      	b.n	800e884 <_strtod_l+0x48c>
 800eeb0:	9804      	ldr	r0, [sp, #16]
 800eeb2:	b1f0      	cbz	r0, 800eef2 <_strtod_l+0xafa>
 800eeb4:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800eeb8:	d81b      	bhi.n	800eef2 <_strtod_l+0xafa>
 800eeba:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800ef40 <_strtod_l+0xb48>
 800eebe:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800eec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eec6:	d811      	bhi.n	800eeec <_strtod_l+0xaf4>
 800eec8:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800eecc:	ee1d 3a10 	vmov	r3, s26
 800eed0:	2b01      	cmp	r3, #1
 800eed2:	bf38      	it	cc
 800eed4:	2301      	movcc	r3, #1
 800eed6:	ee0d 3a10 	vmov	s26, r3
 800eeda:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800eede:	f1ba 0f00 	cmp.w	sl, #0
 800eee2:	d113      	bne.n	800ef0c <_strtod_l+0xb14>
 800eee4:	eeb1 7b4d 	vneg.f64	d7, d13
 800eee8:	ec53 2b17 	vmov	r2, r3, d7
 800eeec:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800eef0:	1a43      	subs	r3, r0, r1
 800eef2:	eeb0 0b48 	vmov.f64	d0, d8
 800eef6:	ec43 2b1c 	vmov	d12, r2, r3
 800eefa:	910a      	str	r1, [sp, #40]	; 0x28
 800eefc:	f002 f8a2 	bl	8011044 <__ulp>
 800ef00:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ef02:	eeac 8b00 	vfma.f64	d8, d12, d0
 800ef06:	ec59 8b18 	vmov	r8, r9, d8
 800ef0a:	e7ab      	b.n	800ee64 <_strtod_l+0xa6c>
 800ef0c:	eeb0 7b4d 	vmov.f64	d7, d13
 800ef10:	e7ea      	b.n	800eee8 <_strtod_l+0xaf0>
 800ef12:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800ef16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef1a:	f57f af61 	bpl.w	800ede0 <_strtod_l+0x9e8>
 800ef1e:	e4b1      	b.n	800e884 <_strtod_l+0x48c>
 800ef20:	2300      	movs	r3, #0
 800ef22:	9308      	str	r3, [sp, #32]
 800ef24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ef26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ef28:	6013      	str	r3, [r2, #0]
 800ef2a:	f7ff baad 	b.w	800e488 <_strtod_l+0x90>
 800ef2e:	2a65      	cmp	r2, #101	; 0x65
 800ef30:	f43f ab9f 	beq.w	800e672 <_strtod_l+0x27a>
 800ef34:	2a45      	cmp	r2, #69	; 0x45
 800ef36:	f43f ab9c 	beq.w	800e672 <_strtod_l+0x27a>
 800ef3a:	2101      	movs	r1, #1
 800ef3c:	f7ff bbd4 	b.w	800e6e8 <_strtod_l+0x2f0>
 800ef40:	ffc00000 	.word	0xffc00000
 800ef44:	41dfffff 	.word	0x41dfffff
 800ef48:	000fffff 	.word	0x000fffff
 800ef4c:	7ff00000 	.word	0x7ff00000
 800ef50:	7fefffff 	.word	0x7fefffff
 800ef54:	3ff00000 	.word	0x3ff00000
 800ef58:	7c9fffff 	.word	0x7c9fffff
 800ef5c:	bff00000 	.word	0xbff00000
 800ef60:	7fe00000 	.word	0x7fe00000

0800ef64 <_strtod_r>:
 800ef64:	4b01      	ldr	r3, [pc, #4]	; (800ef6c <_strtod_r+0x8>)
 800ef66:	f7ff ba47 	b.w	800e3f8 <_strtod_l>
 800ef6a:	bf00      	nop
 800ef6c:	20000074 	.word	0x20000074

0800ef70 <_strtol_l.constprop.0>:
 800ef70:	2b01      	cmp	r3, #1
 800ef72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef76:	d001      	beq.n	800ef7c <_strtol_l.constprop.0+0xc>
 800ef78:	2b24      	cmp	r3, #36	; 0x24
 800ef7a:	d906      	bls.n	800ef8a <_strtol_l.constprop.0+0x1a>
 800ef7c:	f7fe faf0 	bl	800d560 <__errno>
 800ef80:	2316      	movs	r3, #22
 800ef82:	6003      	str	r3, [r0, #0]
 800ef84:	2000      	movs	r0, #0
 800ef86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef8a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800f070 <_strtol_l.constprop.0+0x100>
 800ef8e:	460d      	mov	r5, r1
 800ef90:	462e      	mov	r6, r5
 800ef92:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ef96:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ef9a:	f017 0708 	ands.w	r7, r7, #8
 800ef9e:	d1f7      	bne.n	800ef90 <_strtol_l.constprop.0+0x20>
 800efa0:	2c2d      	cmp	r4, #45	; 0x2d
 800efa2:	d132      	bne.n	800f00a <_strtol_l.constprop.0+0x9a>
 800efa4:	782c      	ldrb	r4, [r5, #0]
 800efa6:	2701      	movs	r7, #1
 800efa8:	1cb5      	adds	r5, r6, #2
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d05b      	beq.n	800f066 <_strtol_l.constprop.0+0xf6>
 800efae:	2b10      	cmp	r3, #16
 800efb0:	d109      	bne.n	800efc6 <_strtol_l.constprop.0+0x56>
 800efb2:	2c30      	cmp	r4, #48	; 0x30
 800efb4:	d107      	bne.n	800efc6 <_strtol_l.constprop.0+0x56>
 800efb6:	782c      	ldrb	r4, [r5, #0]
 800efb8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800efbc:	2c58      	cmp	r4, #88	; 0x58
 800efbe:	d14d      	bne.n	800f05c <_strtol_l.constprop.0+0xec>
 800efc0:	786c      	ldrb	r4, [r5, #1]
 800efc2:	2310      	movs	r3, #16
 800efc4:	3502      	adds	r5, #2
 800efc6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800efca:	f108 38ff 	add.w	r8, r8, #4294967295
 800efce:	f04f 0c00 	mov.w	ip, #0
 800efd2:	fbb8 f9f3 	udiv	r9, r8, r3
 800efd6:	4666      	mov	r6, ip
 800efd8:	fb03 8a19 	mls	sl, r3, r9, r8
 800efdc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800efe0:	f1be 0f09 	cmp.w	lr, #9
 800efe4:	d816      	bhi.n	800f014 <_strtol_l.constprop.0+0xa4>
 800efe6:	4674      	mov	r4, lr
 800efe8:	42a3      	cmp	r3, r4
 800efea:	dd24      	ble.n	800f036 <_strtol_l.constprop.0+0xc6>
 800efec:	f1bc 0f00 	cmp.w	ip, #0
 800eff0:	db1e      	blt.n	800f030 <_strtol_l.constprop.0+0xc0>
 800eff2:	45b1      	cmp	r9, r6
 800eff4:	d31c      	bcc.n	800f030 <_strtol_l.constprop.0+0xc0>
 800eff6:	d101      	bne.n	800effc <_strtol_l.constprop.0+0x8c>
 800eff8:	45a2      	cmp	sl, r4
 800effa:	db19      	blt.n	800f030 <_strtol_l.constprop.0+0xc0>
 800effc:	fb06 4603 	mla	r6, r6, r3, r4
 800f000:	f04f 0c01 	mov.w	ip, #1
 800f004:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f008:	e7e8      	b.n	800efdc <_strtol_l.constprop.0+0x6c>
 800f00a:	2c2b      	cmp	r4, #43	; 0x2b
 800f00c:	bf04      	itt	eq
 800f00e:	782c      	ldrbeq	r4, [r5, #0]
 800f010:	1cb5      	addeq	r5, r6, #2
 800f012:	e7ca      	b.n	800efaa <_strtol_l.constprop.0+0x3a>
 800f014:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800f018:	f1be 0f19 	cmp.w	lr, #25
 800f01c:	d801      	bhi.n	800f022 <_strtol_l.constprop.0+0xb2>
 800f01e:	3c37      	subs	r4, #55	; 0x37
 800f020:	e7e2      	b.n	800efe8 <_strtol_l.constprop.0+0x78>
 800f022:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800f026:	f1be 0f19 	cmp.w	lr, #25
 800f02a:	d804      	bhi.n	800f036 <_strtol_l.constprop.0+0xc6>
 800f02c:	3c57      	subs	r4, #87	; 0x57
 800f02e:	e7db      	b.n	800efe8 <_strtol_l.constprop.0+0x78>
 800f030:	f04f 3cff 	mov.w	ip, #4294967295
 800f034:	e7e6      	b.n	800f004 <_strtol_l.constprop.0+0x94>
 800f036:	f1bc 0f00 	cmp.w	ip, #0
 800f03a:	da05      	bge.n	800f048 <_strtol_l.constprop.0+0xd8>
 800f03c:	2322      	movs	r3, #34	; 0x22
 800f03e:	6003      	str	r3, [r0, #0]
 800f040:	4646      	mov	r6, r8
 800f042:	b942      	cbnz	r2, 800f056 <_strtol_l.constprop.0+0xe6>
 800f044:	4630      	mov	r0, r6
 800f046:	e79e      	b.n	800ef86 <_strtol_l.constprop.0+0x16>
 800f048:	b107      	cbz	r7, 800f04c <_strtol_l.constprop.0+0xdc>
 800f04a:	4276      	negs	r6, r6
 800f04c:	2a00      	cmp	r2, #0
 800f04e:	d0f9      	beq.n	800f044 <_strtol_l.constprop.0+0xd4>
 800f050:	f1bc 0f00 	cmp.w	ip, #0
 800f054:	d000      	beq.n	800f058 <_strtol_l.constprop.0+0xe8>
 800f056:	1e69      	subs	r1, r5, #1
 800f058:	6011      	str	r1, [r2, #0]
 800f05a:	e7f3      	b.n	800f044 <_strtol_l.constprop.0+0xd4>
 800f05c:	2430      	movs	r4, #48	; 0x30
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d1b1      	bne.n	800efc6 <_strtol_l.constprop.0+0x56>
 800f062:	2308      	movs	r3, #8
 800f064:	e7af      	b.n	800efc6 <_strtol_l.constprop.0+0x56>
 800f066:	2c30      	cmp	r4, #48	; 0x30
 800f068:	d0a5      	beq.n	800efb6 <_strtol_l.constprop.0+0x46>
 800f06a:	230a      	movs	r3, #10
 800f06c:	e7ab      	b.n	800efc6 <_strtol_l.constprop.0+0x56>
 800f06e:	bf00      	nop
 800f070:	08012759 	.word	0x08012759

0800f074 <_strtol_r>:
 800f074:	f7ff bf7c 	b.w	800ef70 <_strtol_l.constprop.0>

0800f078 <__swbuf_r>:
 800f078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f07a:	460e      	mov	r6, r1
 800f07c:	4614      	mov	r4, r2
 800f07e:	4605      	mov	r5, r0
 800f080:	b118      	cbz	r0, 800f08a <__swbuf_r+0x12>
 800f082:	6983      	ldr	r3, [r0, #24]
 800f084:	b90b      	cbnz	r3, 800f08a <__swbuf_r+0x12>
 800f086:	f000 ffcb 	bl	8010020 <__sinit>
 800f08a:	4b21      	ldr	r3, [pc, #132]	; (800f110 <__swbuf_r+0x98>)
 800f08c:	429c      	cmp	r4, r3
 800f08e:	d12b      	bne.n	800f0e8 <__swbuf_r+0x70>
 800f090:	686c      	ldr	r4, [r5, #4]
 800f092:	69a3      	ldr	r3, [r4, #24]
 800f094:	60a3      	str	r3, [r4, #8]
 800f096:	89a3      	ldrh	r3, [r4, #12]
 800f098:	071a      	lsls	r2, r3, #28
 800f09a:	d52f      	bpl.n	800f0fc <__swbuf_r+0x84>
 800f09c:	6923      	ldr	r3, [r4, #16]
 800f09e:	b36b      	cbz	r3, 800f0fc <__swbuf_r+0x84>
 800f0a0:	6923      	ldr	r3, [r4, #16]
 800f0a2:	6820      	ldr	r0, [r4, #0]
 800f0a4:	1ac0      	subs	r0, r0, r3
 800f0a6:	6963      	ldr	r3, [r4, #20]
 800f0a8:	b2f6      	uxtb	r6, r6
 800f0aa:	4283      	cmp	r3, r0
 800f0ac:	4637      	mov	r7, r6
 800f0ae:	dc04      	bgt.n	800f0ba <__swbuf_r+0x42>
 800f0b0:	4621      	mov	r1, r4
 800f0b2:	4628      	mov	r0, r5
 800f0b4:	f000 ff20 	bl	800fef8 <_fflush_r>
 800f0b8:	bb30      	cbnz	r0, 800f108 <__swbuf_r+0x90>
 800f0ba:	68a3      	ldr	r3, [r4, #8]
 800f0bc:	3b01      	subs	r3, #1
 800f0be:	60a3      	str	r3, [r4, #8]
 800f0c0:	6823      	ldr	r3, [r4, #0]
 800f0c2:	1c5a      	adds	r2, r3, #1
 800f0c4:	6022      	str	r2, [r4, #0]
 800f0c6:	701e      	strb	r6, [r3, #0]
 800f0c8:	6963      	ldr	r3, [r4, #20]
 800f0ca:	3001      	adds	r0, #1
 800f0cc:	4283      	cmp	r3, r0
 800f0ce:	d004      	beq.n	800f0da <__swbuf_r+0x62>
 800f0d0:	89a3      	ldrh	r3, [r4, #12]
 800f0d2:	07db      	lsls	r3, r3, #31
 800f0d4:	d506      	bpl.n	800f0e4 <__swbuf_r+0x6c>
 800f0d6:	2e0a      	cmp	r6, #10
 800f0d8:	d104      	bne.n	800f0e4 <__swbuf_r+0x6c>
 800f0da:	4621      	mov	r1, r4
 800f0dc:	4628      	mov	r0, r5
 800f0de:	f000 ff0b 	bl	800fef8 <_fflush_r>
 800f0e2:	b988      	cbnz	r0, 800f108 <__swbuf_r+0x90>
 800f0e4:	4638      	mov	r0, r7
 800f0e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0e8:	4b0a      	ldr	r3, [pc, #40]	; (800f114 <__swbuf_r+0x9c>)
 800f0ea:	429c      	cmp	r4, r3
 800f0ec:	d101      	bne.n	800f0f2 <__swbuf_r+0x7a>
 800f0ee:	68ac      	ldr	r4, [r5, #8]
 800f0f0:	e7cf      	b.n	800f092 <__swbuf_r+0x1a>
 800f0f2:	4b09      	ldr	r3, [pc, #36]	; (800f118 <__swbuf_r+0xa0>)
 800f0f4:	429c      	cmp	r4, r3
 800f0f6:	bf08      	it	eq
 800f0f8:	68ec      	ldreq	r4, [r5, #12]
 800f0fa:	e7ca      	b.n	800f092 <__swbuf_r+0x1a>
 800f0fc:	4621      	mov	r1, r4
 800f0fe:	4628      	mov	r0, r5
 800f100:	f000 f80c 	bl	800f11c <__swsetup_r>
 800f104:	2800      	cmp	r0, #0
 800f106:	d0cb      	beq.n	800f0a0 <__swbuf_r+0x28>
 800f108:	f04f 37ff 	mov.w	r7, #4294967295
 800f10c:	e7ea      	b.n	800f0e4 <__swbuf_r+0x6c>
 800f10e:	bf00      	nop
 800f110:	0801290c 	.word	0x0801290c
 800f114:	0801292c 	.word	0x0801292c
 800f118:	080128ec 	.word	0x080128ec

0800f11c <__swsetup_r>:
 800f11c:	4b32      	ldr	r3, [pc, #200]	; (800f1e8 <__swsetup_r+0xcc>)
 800f11e:	b570      	push	{r4, r5, r6, lr}
 800f120:	681d      	ldr	r5, [r3, #0]
 800f122:	4606      	mov	r6, r0
 800f124:	460c      	mov	r4, r1
 800f126:	b125      	cbz	r5, 800f132 <__swsetup_r+0x16>
 800f128:	69ab      	ldr	r3, [r5, #24]
 800f12a:	b913      	cbnz	r3, 800f132 <__swsetup_r+0x16>
 800f12c:	4628      	mov	r0, r5
 800f12e:	f000 ff77 	bl	8010020 <__sinit>
 800f132:	4b2e      	ldr	r3, [pc, #184]	; (800f1ec <__swsetup_r+0xd0>)
 800f134:	429c      	cmp	r4, r3
 800f136:	d10f      	bne.n	800f158 <__swsetup_r+0x3c>
 800f138:	686c      	ldr	r4, [r5, #4]
 800f13a:	89a3      	ldrh	r3, [r4, #12]
 800f13c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f140:	0719      	lsls	r1, r3, #28
 800f142:	d42c      	bmi.n	800f19e <__swsetup_r+0x82>
 800f144:	06dd      	lsls	r5, r3, #27
 800f146:	d411      	bmi.n	800f16c <__swsetup_r+0x50>
 800f148:	2309      	movs	r3, #9
 800f14a:	6033      	str	r3, [r6, #0]
 800f14c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f150:	81a3      	strh	r3, [r4, #12]
 800f152:	f04f 30ff 	mov.w	r0, #4294967295
 800f156:	e03e      	b.n	800f1d6 <__swsetup_r+0xba>
 800f158:	4b25      	ldr	r3, [pc, #148]	; (800f1f0 <__swsetup_r+0xd4>)
 800f15a:	429c      	cmp	r4, r3
 800f15c:	d101      	bne.n	800f162 <__swsetup_r+0x46>
 800f15e:	68ac      	ldr	r4, [r5, #8]
 800f160:	e7eb      	b.n	800f13a <__swsetup_r+0x1e>
 800f162:	4b24      	ldr	r3, [pc, #144]	; (800f1f4 <__swsetup_r+0xd8>)
 800f164:	429c      	cmp	r4, r3
 800f166:	bf08      	it	eq
 800f168:	68ec      	ldreq	r4, [r5, #12]
 800f16a:	e7e6      	b.n	800f13a <__swsetup_r+0x1e>
 800f16c:	0758      	lsls	r0, r3, #29
 800f16e:	d512      	bpl.n	800f196 <__swsetup_r+0x7a>
 800f170:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f172:	b141      	cbz	r1, 800f186 <__swsetup_r+0x6a>
 800f174:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f178:	4299      	cmp	r1, r3
 800f17a:	d002      	beq.n	800f182 <__swsetup_r+0x66>
 800f17c:	4630      	mov	r0, r6
 800f17e:	f002 f8c3 	bl	8011308 <_free_r>
 800f182:	2300      	movs	r3, #0
 800f184:	6363      	str	r3, [r4, #52]	; 0x34
 800f186:	89a3      	ldrh	r3, [r4, #12]
 800f188:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f18c:	81a3      	strh	r3, [r4, #12]
 800f18e:	2300      	movs	r3, #0
 800f190:	6063      	str	r3, [r4, #4]
 800f192:	6923      	ldr	r3, [r4, #16]
 800f194:	6023      	str	r3, [r4, #0]
 800f196:	89a3      	ldrh	r3, [r4, #12]
 800f198:	f043 0308 	orr.w	r3, r3, #8
 800f19c:	81a3      	strh	r3, [r4, #12]
 800f19e:	6923      	ldr	r3, [r4, #16]
 800f1a0:	b94b      	cbnz	r3, 800f1b6 <__swsetup_r+0x9a>
 800f1a2:	89a3      	ldrh	r3, [r4, #12]
 800f1a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f1a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f1ac:	d003      	beq.n	800f1b6 <__swsetup_r+0x9a>
 800f1ae:	4621      	mov	r1, r4
 800f1b0:	4630      	mov	r0, r6
 800f1b2:	f001 fb6d 	bl	8010890 <__smakebuf_r>
 800f1b6:	89a0      	ldrh	r0, [r4, #12]
 800f1b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f1bc:	f010 0301 	ands.w	r3, r0, #1
 800f1c0:	d00a      	beq.n	800f1d8 <__swsetup_r+0xbc>
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	60a3      	str	r3, [r4, #8]
 800f1c6:	6963      	ldr	r3, [r4, #20]
 800f1c8:	425b      	negs	r3, r3
 800f1ca:	61a3      	str	r3, [r4, #24]
 800f1cc:	6923      	ldr	r3, [r4, #16]
 800f1ce:	b943      	cbnz	r3, 800f1e2 <__swsetup_r+0xc6>
 800f1d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f1d4:	d1ba      	bne.n	800f14c <__swsetup_r+0x30>
 800f1d6:	bd70      	pop	{r4, r5, r6, pc}
 800f1d8:	0781      	lsls	r1, r0, #30
 800f1da:	bf58      	it	pl
 800f1dc:	6963      	ldrpl	r3, [r4, #20]
 800f1de:	60a3      	str	r3, [r4, #8]
 800f1e0:	e7f4      	b.n	800f1cc <__swsetup_r+0xb0>
 800f1e2:	2000      	movs	r0, #0
 800f1e4:	e7f7      	b.n	800f1d6 <__swsetup_r+0xba>
 800f1e6:	bf00      	nop
 800f1e8:	2000000c 	.word	0x2000000c
 800f1ec:	0801290c 	.word	0x0801290c
 800f1f0:	0801292c 	.word	0x0801292c
 800f1f4:	080128ec 	.word	0x080128ec

0800f1f8 <quorem>:
 800f1f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1fc:	6903      	ldr	r3, [r0, #16]
 800f1fe:	690c      	ldr	r4, [r1, #16]
 800f200:	42a3      	cmp	r3, r4
 800f202:	4607      	mov	r7, r0
 800f204:	f2c0 8081 	blt.w	800f30a <quorem+0x112>
 800f208:	3c01      	subs	r4, #1
 800f20a:	f101 0814 	add.w	r8, r1, #20
 800f20e:	f100 0514 	add.w	r5, r0, #20
 800f212:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f216:	9301      	str	r3, [sp, #4]
 800f218:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f21c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f220:	3301      	adds	r3, #1
 800f222:	429a      	cmp	r2, r3
 800f224:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f228:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f22c:	fbb2 f6f3 	udiv	r6, r2, r3
 800f230:	d331      	bcc.n	800f296 <quorem+0x9e>
 800f232:	f04f 0e00 	mov.w	lr, #0
 800f236:	4640      	mov	r0, r8
 800f238:	46ac      	mov	ip, r5
 800f23a:	46f2      	mov	sl, lr
 800f23c:	f850 2b04 	ldr.w	r2, [r0], #4
 800f240:	b293      	uxth	r3, r2
 800f242:	fb06 e303 	mla	r3, r6, r3, lr
 800f246:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f24a:	b29b      	uxth	r3, r3
 800f24c:	ebaa 0303 	sub.w	r3, sl, r3
 800f250:	f8dc a000 	ldr.w	sl, [ip]
 800f254:	0c12      	lsrs	r2, r2, #16
 800f256:	fa13 f38a 	uxtah	r3, r3, sl
 800f25a:	fb06 e202 	mla	r2, r6, r2, lr
 800f25e:	9300      	str	r3, [sp, #0]
 800f260:	9b00      	ldr	r3, [sp, #0]
 800f262:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f266:	b292      	uxth	r2, r2
 800f268:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f26c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f270:	f8bd 3000 	ldrh.w	r3, [sp]
 800f274:	4581      	cmp	r9, r0
 800f276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f27a:	f84c 3b04 	str.w	r3, [ip], #4
 800f27e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f282:	d2db      	bcs.n	800f23c <quorem+0x44>
 800f284:	f855 300b 	ldr.w	r3, [r5, fp]
 800f288:	b92b      	cbnz	r3, 800f296 <quorem+0x9e>
 800f28a:	9b01      	ldr	r3, [sp, #4]
 800f28c:	3b04      	subs	r3, #4
 800f28e:	429d      	cmp	r5, r3
 800f290:	461a      	mov	r2, r3
 800f292:	d32e      	bcc.n	800f2f2 <quorem+0xfa>
 800f294:	613c      	str	r4, [r7, #16]
 800f296:	4638      	mov	r0, r7
 800f298:	f001 fe2e 	bl	8010ef8 <__mcmp>
 800f29c:	2800      	cmp	r0, #0
 800f29e:	db24      	blt.n	800f2ea <quorem+0xf2>
 800f2a0:	3601      	adds	r6, #1
 800f2a2:	4628      	mov	r0, r5
 800f2a4:	f04f 0c00 	mov.w	ip, #0
 800f2a8:	f858 2b04 	ldr.w	r2, [r8], #4
 800f2ac:	f8d0 e000 	ldr.w	lr, [r0]
 800f2b0:	b293      	uxth	r3, r2
 800f2b2:	ebac 0303 	sub.w	r3, ip, r3
 800f2b6:	0c12      	lsrs	r2, r2, #16
 800f2b8:	fa13 f38e 	uxtah	r3, r3, lr
 800f2bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f2c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f2c4:	b29b      	uxth	r3, r3
 800f2c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f2ca:	45c1      	cmp	r9, r8
 800f2cc:	f840 3b04 	str.w	r3, [r0], #4
 800f2d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f2d4:	d2e8      	bcs.n	800f2a8 <quorem+0xb0>
 800f2d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f2da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f2de:	b922      	cbnz	r2, 800f2ea <quorem+0xf2>
 800f2e0:	3b04      	subs	r3, #4
 800f2e2:	429d      	cmp	r5, r3
 800f2e4:	461a      	mov	r2, r3
 800f2e6:	d30a      	bcc.n	800f2fe <quorem+0x106>
 800f2e8:	613c      	str	r4, [r7, #16]
 800f2ea:	4630      	mov	r0, r6
 800f2ec:	b003      	add	sp, #12
 800f2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2f2:	6812      	ldr	r2, [r2, #0]
 800f2f4:	3b04      	subs	r3, #4
 800f2f6:	2a00      	cmp	r2, #0
 800f2f8:	d1cc      	bne.n	800f294 <quorem+0x9c>
 800f2fa:	3c01      	subs	r4, #1
 800f2fc:	e7c7      	b.n	800f28e <quorem+0x96>
 800f2fe:	6812      	ldr	r2, [r2, #0]
 800f300:	3b04      	subs	r3, #4
 800f302:	2a00      	cmp	r2, #0
 800f304:	d1f0      	bne.n	800f2e8 <quorem+0xf0>
 800f306:	3c01      	subs	r4, #1
 800f308:	e7eb      	b.n	800f2e2 <quorem+0xea>
 800f30a:	2000      	movs	r0, #0
 800f30c:	e7ee      	b.n	800f2ec <quorem+0xf4>
	...

0800f310 <_dtoa_r>:
 800f310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f314:	ed2d 8b02 	vpush	{d8}
 800f318:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f31a:	b091      	sub	sp, #68	; 0x44
 800f31c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f320:	ec59 8b10 	vmov	r8, r9, d0
 800f324:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800f326:	9106      	str	r1, [sp, #24]
 800f328:	4606      	mov	r6, r0
 800f32a:	9208      	str	r2, [sp, #32]
 800f32c:	930c      	str	r3, [sp, #48]	; 0x30
 800f32e:	b975      	cbnz	r5, 800f34e <_dtoa_r+0x3e>
 800f330:	2010      	movs	r0, #16
 800f332:	f001 faed 	bl	8010910 <malloc>
 800f336:	4602      	mov	r2, r0
 800f338:	6270      	str	r0, [r6, #36]	; 0x24
 800f33a:	b920      	cbnz	r0, 800f346 <_dtoa_r+0x36>
 800f33c:	4baa      	ldr	r3, [pc, #680]	; (800f5e8 <_dtoa_r+0x2d8>)
 800f33e:	21ea      	movs	r1, #234	; 0xea
 800f340:	48aa      	ldr	r0, [pc, #680]	; (800f5ec <_dtoa_r+0x2dc>)
 800f342:	f002 fc07 	bl	8011b54 <__assert_func>
 800f346:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f34a:	6005      	str	r5, [r0, #0]
 800f34c:	60c5      	str	r5, [r0, #12]
 800f34e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f350:	6819      	ldr	r1, [r3, #0]
 800f352:	b151      	cbz	r1, 800f36a <_dtoa_r+0x5a>
 800f354:	685a      	ldr	r2, [r3, #4]
 800f356:	604a      	str	r2, [r1, #4]
 800f358:	2301      	movs	r3, #1
 800f35a:	4093      	lsls	r3, r2
 800f35c:	608b      	str	r3, [r1, #8]
 800f35e:	4630      	mov	r0, r6
 800f360:	f001 fb3e 	bl	80109e0 <_Bfree>
 800f364:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f366:	2200      	movs	r2, #0
 800f368:	601a      	str	r2, [r3, #0]
 800f36a:	f1b9 0300 	subs.w	r3, r9, #0
 800f36e:	bfbb      	ittet	lt
 800f370:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f374:	9303      	strlt	r3, [sp, #12]
 800f376:	2300      	movge	r3, #0
 800f378:	2201      	movlt	r2, #1
 800f37a:	bfac      	ite	ge
 800f37c:	6023      	strge	r3, [r4, #0]
 800f37e:	6022      	strlt	r2, [r4, #0]
 800f380:	4b9b      	ldr	r3, [pc, #620]	; (800f5f0 <_dtoa_r+0x2e0>)
 800f382:	9c03      	ldr	r4, [sp, #12]
 800f384:	43a3      	bics	r3, r4
 800f386:	d11c      	bne.n	800f3c2 <_dtoa_r+0xb2>
 800f388:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f38a:	f242 730f 	movw	r3, #9999	; 0x270f
 800f38e:	6013      	str	r3, [r2, #0]
 800f390:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800f394:	ea53 0308 	orrs.w	r3, r3, r8
 800f398:	f000 84fd 	beq.w	800fd96 <_dtoa_r+0xa86>
 800f39c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f39e:	b963      	cbnz	r3, 800f3ba <_dtoa_r+0xaa>
 800f3a0:	4b94      	ldr	r3, [pc, #592]	; (800f5f4 <_dtoa_r+0x2e4>)
 800f3a2:	e01f      	b.n	800f3e4 <_dtoa_r+0xd4>
 800f3a4:	4b94      	ldr	r3, [pc, #592]	; (800f5f8 <_dtoa_r+0x2e8>)
 800f3a6:	9301      	str	r3, [sp, #4]
 800f3a8:	3308      	adds	r3, #8
 800f3aa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800f3ac:	6013      	str	r3, [r2, #0]
 800f3ae:	9801      	ldr	r0, [sp, #4]
 800f3b0:	b011      	add	sp, #68	; 0x44
 800f3b2:	ecbd 8b02 	vpop	{d8}
 800f3b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3ba:	4b8e      	ldr	r3, [pc, #568]	; (800f5f4 <_dtoa_r+0x2e4>)
 800f3bc:	9301      	str	r3, [sp, #4]
 800f3be:	3303      	adds	r3, #3
 800f3c0:	e7f3      	b.n	800f3aa <_dtoa_r+0x9a>
 800f3c2:	ed9d 8b02 	vldr	d8, [sp, #8]
 800f3c6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f3ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3ce:	d10b      	bne.n	800f3e8 <_dtoa_r+0xd8>
 800f3d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f3d2:	2301      	movs	r3, #1
 800f3d4:	6013      	str	r3, [r2, #0]
 800f3d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	f000 84d9 	beq.w	800fd90 <_dtoa_r+0xa80>
 800f3de:	4887      	ldr	r0, [pc, #540]	; (800f5fc <_dtoa_r+0x2ec>)
 800f3e0:	6018      	str	r0, [r3, #0]
 800f3e2:	1e43      	subs	r3, r0, #1
 800f3e4:	9301      	str	r3, [sp, #4]
 800f3e6:	e7e2      	b.n	800f3ae <_dtoa_r+0x9e>
 800f3e8:	a90f      	add	r1, sp, #60	; 0x3c
 800f3ea:	aa0e      	add	r2, sp, #56	; 0x38
 800f3ec:	4630      	mov	r0, r6
 800f3ee:	eeb0 0b48 	vmov.f64	d0, d8
 800f3f2:	f001 fea3 	bl	801113c <__d2b>
 800f3f6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800f3fa:	4605      	mov	r5, r0
 800f3fc:	980e      	ldr	r0, [sp, #56]	; 0x38
 800f3fe:	2900      	cmp	r1, #0
 800f400:	d046      	beq.n	800f490 <_dtoa_r+0x180>
 800f402:	ee18 4a90 	vmov	r4, s17
 800f406:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800f40a:	ec53 2b18 	vmov	r2, r3, d8
 800f40e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800f412:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f416:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800f41a:	2400      	movs	r4, #0
 800f41c:	ec43 2b16 	vmov	d6, r2, r3
 800f420:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800f424:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800f5d0 <_dtoa_r+0x2c0>
 800f428:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f42c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800f5d8 <_dtoa_r+0x2c8>
 800f430:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f434:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800f5e0 <_dtoa_r+0x2d0>
 800f438:	ee07 1a90 	vmov	s15, r1
 800f43c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800f440:	eeb0 7b46 	vmov.f64	d7, d6
 800f444:	eea4 7b05 	vfma.f64	d7, d4, d5
 800f448:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800f44c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800f450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f454:	ee16 ba90 	vmov	fp, s13
 800f458:	940a      	str	r4, [sp, #40]	; 0x28
 800f45a:	d508      	bpl.n	800f46e <_dtoa_r+0x15e>
 800f45c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800f460:	eeb4 6b47 	vcmp.f64	d6, d7
 800f464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f468:	bf18      	it	ne
 800f46a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800f46e:	f1bb 0f16 	cmp.w	fp, #22
 800f472:	d82f      	bhi.n	800f4d4 <_dtoa_r+0x1c4>
 800f474:	4b62      	ldr	r3, [pc, #392]	; (800f600 <_dtoa_r+0x2f0>)
 800f476:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f47a:	ed93 7b00 	vldr	d7, [r3]
 800f47e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f486:	d501      	bpl.n	800f48c <_dtoa_r+0x17c>
 800f488:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f48c:	2300      	movs	r3, #0
 800f48e:	e022      	b.n	800f4d6 <_dtoa_r+0x1c6>
 800f490:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f492:	4401      	add	r1, r0
 800f494:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800f498:	2b20      	cmp	r3, #32
 800f49a:	bfc1      	itttt	gt
 800f49c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f4a0:	fa04 f303 	lslgt.w	r3, r4, r3
 800f4a4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800f4a8:	fa28 f804 	lsrgt.w	r8, r8, r4
 800f4ac:	bfd6      	itet	le
 800f4ae:	f1c3 0320 	rsble	r3, r3, #32
 800f4b2:	ea43 0808 	orrgt.w	r8, r3, r8
 800f4b6:	fa08 f803 	lslle.w	r8, r8, r3
 800f4ba:	ee07 8a90 	vmov	s15, r8
 800f4be:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f4c2:	3901      	subs	r1, #1
 800f4c4:	ee17 4a90 	vmov	r4, s15
 800f4c8:	ec53 2b17 	vmov	r2, r3, d7
 800f4cc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800f4d0:	2401      	movs	r4, #1
 800f4d2:	e7a3      	b.n	800f41c <_dtoa_r+0x10c>
 800f4d4:	2301      	movs	r3, #1
 800f4d6:	930b      	str	r3, [sp, #44]	; 0x2c
 800f4d8:	1a43      	subs	r3, r0, r1
 800f4da:	1e5a      	subs	r2, r3, #1
 800f4dc:	bf45      	ittet	mi
 800f4de:	f1c3 0301 	rsbmi	r3, r3, #1
 800f4e2:	9304      	strmi	r3, [sp, #16]
 800f4e4:	2300      	movpl	r3, #0
 800f4e6:	2300      	movmi	r3, #0
 800f4e8:	9205      	str	r2, [sp, #20]
 800f4ea:	bf54      	ite	pl
 800f4ec:	9304      	strpl	r3, [sp, #16]
 800f4ee:	9305      	strmi	r3, [sp, #20]
 800f4f0:	f1bb 0f00 	cmp.w	fp, #0
 800f4f4:	db18      	blt.n	800f528 <_dtoa_r+0x218>
 800f4f6:	9b05      	ldr	r3, [sp, #20]
 800f4f8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800f4fc:	445b      	add	r3, fp
 800f4fe:	9305      	str	r3, [sp, #20]
 800f500:	2300      	movs	r3, #0
 800f502:	9a06      	ldr	r2, [sp, #24]
 800f504:	2a09      	cmp	r2, #9
 800f506:	d849      	bhi.n	800f59c <_dtoa_r+0x28c>
 800f508:	2a05      	cmp	r2, #5
 800f50a:	bfc4      	itt	gt
 800f50c:	3a04      	subgt	r2, #4
 800f50e:	9206      	strgt	r2, [sp, #24]
 800f510:	9a06      	ldr	r2, [sp, #24]
 800f512:	f1a2 0202 	sub.w	r2, r2, #2
 800f516:	bfcc      	ite	gt
 800f518:	2400      	movgt	r4, #0
 800f51a:	2401      	movle	r4, #1
 800f51c:	2a03      	cmp	r2, #3
 800f51e:	d848      	bhi.n	800f5b2 <_dtoa_r+0x2a2>
 800f520:	e8df f002 	tbb	[pc, r2]
 800f524:	3a2c2e0b 	.word	0x3a2c2e0b
 800f528:	9b04      	ldr	r3, [sp, #16]
 800f52a:	2200      	movs	r2, #0
 800f52c:	eba3 030b 	sub.w	r3, r3, fp
 800f530:	9304      	str	r3, [sp, #16]
 800f532:	9209      	str	r2, [sp, #36]	; 0x24
 800f534:	f1cb 0300 	rsb	r3, fp, #0
 800f538:	e7e3      	b.n	800f502 <_dtoa_r+0x1f2>
 800f53a:	2200      	movs	r2, #0
 800f53c:	9207      	str	r2, [sp, #28]
 800f53e:	9a08      	ldr	r2, [sp, #32]
 800f540:	2a00      	cmp	r2, #0
 800f542:	dc39      	bgt.n	800f5b8 <_dtoa_r+0x2a8>
 800f544:	f04f 0a01 	mov.w	sl, #1
 800f548:	46d1      	mov	r9, sl
 800f54a:	4652      	mov	r2, sl
 800f54c:	f8cd a020 	str.w	sl, [sp, #32]
 800f550:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800f552:	2100      	movs	r1, #0
 800f554:	6079      	str	r1, [r7, #4]
 800f556:	2004      	movs	r0, #4
 800f558:	f100 0c14 	add.w	ip, r0, #20
 800f55c:	4594      	cmp	ip, r2
 800f55e:	6879      	ldr	r1, [r7, #4]
 800f560:	d92f      	bls.n	800f5c2 <_dtoa_r+0x2b2>
 800f562:	4630      	mov	r0, r6
 800f564:	930d      	str	r3, [sp, #52]	; 0x34
 800f566:	f001 f9fb 	bl	8010960 <_Balloc>
 800f56a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f56c:	9001      	str	r0, [sp, #4]
 800f56e:	4602      	mov	r2, r0
 800f570:	2800      	cmp	r0, #0
 800f572:	d149      	bne.n	800f608 <_dtoa_r+0x2f8>
 800f574:	4b23      	ldr	r3, [pc, #140]	; (800f604 <_dtoa_r+0x2f4>)
 800f576:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f57a:	e6e1      	b.n	800f340 <_dtoa_r+0x30>
 800f57c:	2201      	movs	r2, #1
 800f57e:	e7dd      	b.n	800f53c <_dtoa_r+0x22c>
 800f580:	2200      	movs	r2, #0
 800f582:	9207      	str	r2, [sp, #28]
 800f584:	9a08      	ldr	r2, [sp, #32]
 800f586:	eb0b 0a02 	add.w	sl, fp, r2
 800f58a:	f10a 0901 	add.w	r9, sl, #1
 800f58e:	464a      	mov	r2, r9
 800f590:	2a01      	cmp	r2, #1
 800f592:	bfb8      	it	lt
 800f594:	2201      	movlt	r2, #1
 800f596:	e7db      	b.n	800f550 <_dtoa_r+0x240>
 800f598:	2201      	movs	r2, #1
 800f59a:	e7f2      	b.n	800f582 <_dtoa_r+0x272>
 800f59c:	2401      	movs	r4, #1
 800f59e:	2200      	movs	r2, #0
 800f5a0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800f5a4:	f04f 3aff 	mov.w	sl, #4294967295
 800f5a8:	2100      	movs	r1, #0
 800f5aa:	46d1      	mov	r9, sl
 800f5ac:	2212      	movs	r2, #18
 800f5ae:	9108      	str	r1, [sp, #32]
 800f5b0:	e7ce      	b.n	800f550 <_dtoa_r+0x240>
 800f5b2:	2201      	movs	r2, #1
 800f5b4:	9207      	str	r2, [sp, #28]
 800f5b6:	e7f5      	b.n	800f5a4 <_dtoa_r+0x294>
 800f5b8:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f5bc:	46d1      	mov	r9, sl
 800f5be:	4652      	mov	r2, sl
 800f5c0:	e7c6      	b.n	800f550 <_dtoa_r+0x240>
 800f5c2:	3101      	adds	r1, #1
 800f5c4:	6079      	str	r1, [r7, #4]
 800f5c6:	0040      	lsls	r0, r0, #1
 800f5c8:	e7c6      	b.n	800f558 <_dtoa_r+0x248>
 800f5ca:	bf00      	nop
 800f5cc:	f3af 8000 	nop.w
 800f5d0:	636f4361 	.word	0x636f4361
 800f5d4:	3fd287a7 	.word	0x3fd287a7
 800f5d8:	8b60c8b3 	.word	0x8b60c8b3
 800f5dc:	3fc68a28 	.word	0x3fc68a28
 800f5e0:	509f79fb 	.word	0x509f79fb
 800f5e4:	3fd34413 	.word	0x3fd34413
 800f5e8:	08012866 	.word	0x08012866
 800f5ec:	0801287d 	.word	0x0801287d
 800f5f0:	7ff00000 	.word	0x7ff00000
 800f5f4:	08012862 	.word	0x08012862
 800f5f8:	08012859 	.word	0x08012859
 800f5fc:	080126dd 	.word	0x080126dd
 800f600:	08012a50 	.word	0x08012a50
 800f604:	080128d8 	.word	0x080128d8
 800f608:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800f60a:	9901      	ldr	r1, [sp, #4]
 800f60c:	6011      	str	r1, [r2, #0]
 800f60e:	f1b9 0f0e 	cmp.w	r9, #14
 800f612:	d86c      	bhi.n	800f6ee <_dtoa_r+0x3de>
 800f614:	2c00      	cmp	r4, #0
 800f616:	d06a      	beq.n	800f6ee <_dtoa_r+0x3de>
 800f618:	f1bb 0f00 	cmp.w	fp, #0
 800f61c:	f340 80a0 	ble.w	800f760 <_dtoa_r+0x450>
 800f620:	49c1      	ldr	r1, [pc, #772]	; (800f928 <_dtoa_r+0x618>)
 800f622:	f00b 020f 	and.w	r2, fp, #15
 800f626:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800f62a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800f62e:	ed92 7b00 	vldr	d7, [r2]
 800f632:	ea4f 112b 	mov.w	r1, fp, asr #4
 800f636:	f000 8087 	beq.w	800f748 <_dtoa_r+0x438>
 800f63a:	4abc      	ldr	r2, [pc, #752]	; (800f92c <_dtoa_r+0x61c>)
 800f63c:	ed92 6b08 	vldr	d6, [r2, #32]
 800f640:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800f644:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f648:	f001 010f 	and.w	r1, r1, #15
 800f64c:	2203      	movs	r2, #3
 800f64e:	48b7      	ldr	r0, [pc, #732]	; (800f92c <_dtoa_r+0x61c>)
 800f650:	2900      	cmp	r1, #0
 800f652:	d17b      	bne.n	800f74c <_dtoa_r+0x43c>
 800f654:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f658:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f65c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f660:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f662:	2900      	cmp	r1, #0
 800f664:	f000 80a2 	beq.w	800f7ac <_dtoa_r+0x49c>
 800f668:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800f66c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f670:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f678:	f140 8098 	bpl.w	800f7ac <_dtoa_r+0x49c>
 800f67c:	f1b9 0f00 	cmp.w	r9, #0
 800f680:	f000 8094 	beq.w	800f7ac <_dtoa_r+0x49c>
 800f684:	f1ba 0f00 	cmp.w	sl, #0
 800f688:	dd2f      	ble.n	800f6ea <_dtoa_r+0x3da>
 800f68a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800f68e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f692:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f696:	f10b 37ff 	add.w	r7, fp, #4294967295
 800f69a:	3201      	adds	r2, #1
 800f69c:	4650      	mov	r0, sl
 800f69e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f6a2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800f6a6:	ee07 2a90 	vmov	s15, r2
 800f6aa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f6ae:	eea7 5b06 	vfma.f64	d5, d7, d6
 800f6b2:	ee15 4a90 	vmov	r4, s11
 800f6b6:	ec52 1b15 	vmov	r1, r2, d5
 800f6ba:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800f6be:	2800      	cmp	r0, #0
 800f6c0:	d177      	bne.n	800f7b2 <_dtoa_r+0x4a2>
 800f6c2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800f6c6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f6ca:	ec42 1b17 	vmov	d7, r1, r2
 800f6ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f6d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6d6:	f300 8263 	bgt.w	800fba0 <_dtoa_r+0x890>
 800f6da:	eeb1 7b47 	vneg.f64	d7, d7
 800f6de:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f6e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6e6:	f100 8258 	bmi.w	800fb9a <_dtoa_r+0x88a>
 800f6ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f6ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f6f0:	2a00      	cmp	r2, #0
 800f6f2:	f2c0 811d 	blt.w	800f930 <_dtoa_r+0x620>
 800f6f6:	f1bb 0f0e 	cmp.w	fp, #14
 800f6fa:	f300 8119 	bgt.w	800f930 <_dtoa_r+0x620>
 800f6fe:	4b8a      	ldr	r3, [pc, #552]	; (800f928 <_dtoa_r+0x618>)
 800f700:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f704:	ed93 6b00 	vldr	d6, [r3]
 800f708:	9b08      	ldr	r3, [sp, #32]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	f280 80b7 	bge.w	800f87e <_dtoa_r+0x56e>
 800f710:	f1b9 0f00 	cmp.w	r9, #0
 800f714:	f300 80b3 	bgt.w	800f87e <_dtoa_r+0x56e>
 800f718:	f040 823f 	bne.w	800fb9a <_dtoa_r+0x88a>
 800f71c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800f720:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f724:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f728:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f72c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f730:	464c      	mov	r4, r9
 800f732:	464f      	mov	r7, r9
 800f734:	f280 8215 	bge.w	800fb62 <_dtoa_r+0x852>
 800f738:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f73c:	2331      	movs	r3, #49	; 0x31
 800f73e:	f808 3b01 	strb.w	r3, [r8], #1
 800f742:	f10b 0b01 	add.w	fp, fp, #1
 800f746:	e211      	b.n	800fb6c <_dtoa_r+0x85c>
 800f748:	2202      	movs	r2, #2
 800f74a:	e780      	b.n	800f64e <_dtoa_r+0x33e>
 800f74c:	07cc      	lsls	r4, r1, #31
 800f74e:	d504      	bpl.n	800f75a <_dtoa_r+0x44a>
 800f750:	ed90 6b00 	vldr	d6, [r0]
 800f754:	3201      	adds	r2, #1
 800f756:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f75a:	1049      	asrs	r1, r1, #1
 800f75c:	3008      	adds	r0, #8
 800f75e:	e777      	b.n	800f650 <_dtoa_r+0x340>
 800f760:	d022      	beq.n	800f7a8 <_dtoa_r+0x498>
 800f762:	f1cb 0100 	rsb	r1, fp, #0
 800f766:	4a70      	ldr	r2, [pc, #448]	; (800f928 <_dtoa_r+0x618>)
 800f768:	f001 000f 	and.w	r0, r1, #15
 800f76c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f770:	ed92 7b00 	vldr	d7, [r2]
 800f774:	ee28 7b07 	vmul.f64	d7, d8, d7
 800f778:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f77c:	486b      	ldr	r0, [pc, #428]	; (800f92c <_dtoa_r+0x61c>)
 800f77e:	1109      	asrs	r1, r1, #4
 800f780:	2400      	movs	r4, #0
 800f782:	2202      	movs	r2, #2
 800f784:	b929      	cbnz	r1, 800f792 <_dtoa_r+0x482>
 800f786:	2c00      	cmp	r4, #0
 800f788:	f43f af6a 	beq.w	800f660 <_dtoa_r+0x350>
 800f78c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f790:	e766      	b.n	800f660 <_dtoa_r+0x350>
 800f792:	07cf      	lsls	r7, r1, #31
 800f794:	d505      	bpl.n	800f7a2 <_dtoa_r+0x492>
 800f796:	ed90 6b00 	vldr	d6, [r0]
 800f79a:	3201      	adds	r2, #1
 800f79c:	2401      	movs	r4, #1
 800f79e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f7a2:	1049      	asrs	r1, r1, #1
 800f7a4:	3008      	adds	r0, #8
 800f7a6:	e7ed      	b.n	800f784 <_dtoa_r+0x474>
 800f7a8:	2202      	movs	r2, #2
 800f7aa:	e759      	b.n	800f660 <_dtoa_r+0x350>
 800f7ac:	465f      	mov	r7, fp
 800f7ae:	4648      	mov	r0, r9
 800f7b0:	e775      	b.n	800f69e <_dtoa_r+0x38e>
 800f7b2:	ec42 1b17 	vmov	d7, r1, r2
 800f7b6:	4a5c      	ldr	r2, [pc, #368]	; (800f928 <_dtoa_r+0x618>)
 800f7b8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f7bc:	ed12 4b02 	vldr	d4, [r2, #-8]
 800f7c0:	9a01      	ldr	r2, [sp, #4]
 800f7c2:	1814      	adds	r4, r2, r0
 800f7c4:	9a07      	ldr	r2, [sp, #28]
 800f7c6:	b352      	cbz	r2, 800f81e <_dtoa_r+0x50e>
 800f7c8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800f7cc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800f7d0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f7d4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800f7d8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800f7dc:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f7e0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f7e4:	ee14 2a90 	vmov	r2, s9
 800f7e8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f7ec:	3230      	adds	r2, #48	; 0x30
 800f7ee:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f7f2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f7f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7fa:	f808 2b01 	strb.w	r2, [r8], #1
 800f7fe:	d439      	bmi.n	800f874 <_dtoa_r+0x564>
 800f800:	ee32 5b46 	vsub.f64	d5, d2, d6
 800f804:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800f808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f80c:	d472      	bmi.n	800f8f4 <_dtoa_r+0x5e4>
 800f80e:	45a0      	cmp	r8, r4
 800f810:	f43f af6b 	beq.w	800f6ea <_dtoa_r+0x3da>
 800f814:	ee27 7b03 	vmul.f64	d7, d7, d3
 800f818:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f81c:	e7e0      	b.n	800f7e0 <_dtoa_r+0x4d0>
 800f81e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f822:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f826:	4621      	mov	r1, r4
 800f828:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800f82c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f830:	ee14 2a90 	vmov	r2, s9
 800f834:	3230      	adds	r2, #48	; 0x30
 800f836:	f808 2b01 	strb.w	r2, [r8], #1
 800f83a:	45a0      	cmp	r8, r4
 800f83c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f840:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f844:	d118      	bne.n	800f878 <_dtoa_r+0x568>
 800f846:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800f84a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800f84e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800f852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f856:	dc4d      	bgt.n	800f8f4 <_dtoa_r+0x5e4>
 800f858:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f85c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f864:	f57f af41 	bpl.w	800f6ea <_dtoa_r+0x3da>
 800f868:	4688      	mov	r8, r1
 800f86a:	3901      	subs	r1, #1
 800f86c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800f870:	2b30      	cmp	r3, #48	; 0x30
 800f872:	d0f9      	beq.n	800f868 <_dtoa_r+0x558>
 800f874:	46bb      	mov	fp, r7
 800f876:	e02a      	b.n	800f8ce <_dtoa_r+0x5be>
 800f878:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f87c:	e7d6      	b.n	800f82c <_dtoa_r+0x51c>
 800f87e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f882:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800f886:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f88a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800f88e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800f892:	ee15 3a10 	vmov	r3, s10
 800f896:	3330      	adds	r3, #48	; 0x30
 800f898:	f808 3b01 	strb.w	r3, [r8], #1
 800f89c:	9b01      	ldr	r3, [sp, #4]
 800f89e:	eba8 0303 	sub.w	r3, r8, r3
 800f8a2:	4599      	cmp	r9, r3
 800f8a4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800f8a8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800f8ac:	d133      	bne.n	800f916 <_dtoa_r+0x606>
 800f8ae:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f8b2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f8b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8ba:	dc1a      	bgt.n	800f8f2 <_dtoa_r+0x5e2>
 800f8bc:	eeb4 7b46 	vcmp.f64	d7, d6
 800f8c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8c4:	d103      	bne.n	800f8ce <_dtoa_r+0x5be>
 800f8c6:	ee15 3a10 	vmov	r3, s10
 800f8ca:	07d9      	lsls	r1, r3, #31
 800f8cc:	d411      	bmi.n	800f8f2 <_dtoa_r+0x5e2>
 800f8ce:	4629      	mov	r1, r5
 800f8d0:	4630      	mov	r0, r6
 800f8d2:	f001 f885 	bl	80109e0 <_Bfree>
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f8da:	f888 3000 	strb.w	r3, [r8]
 800f8de:	f10b 0301 	add.w	r3, fp, #1
 800f8e2:	6013      	str	r3, [r2, #0]
 800f8e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	f43f ad61 	beq.w	800f3ae <_dtoa_r+0x9e>
 800f8ec:	f8c3 8000 	str.w	r8, [r3]
 800f8f0:	e55d      	b.n	800f3ae <_dtoa_r+0x9e>
 800f8f2:	465f      	mov	r7, fp
 800f8f4:	4643      	mov	r3, r8
 800f8f6:	4698      	mov	r8, r3
 800f8f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f8fc:	2a39      	cmp	r2, #57	; 0x39
 800f8fe:	d106      	bne.n	800f90e <_dtoa_r+0x5fe>
 800f900:	9a01      	ldr	r2, [sp, #4]
 800f902:	429a      	cmp	r2, r3
 800f904:	d1f7      	bne.n	800f8f6 <_dtoa_r+0x5e6>
 800f906:	9901      	ldr	r1, [sp, #4]
 800f908:	2230      	movs	r2, #48	; 0x30
 800f90a:	3701      	adds	r7, #1
 800f90c:	700a      	strb	r2, [r1, #0]
 800f90e:	781a      	ldrb	r2, [r3, #0]
 800f910:	3201      	adds	r2, #1
 800f912:	701a      	strb	r2, [r3, #0]
 800f914:	e7ae      	b.n	800f874 <_dtoa_r+0x564>
 800f916:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f91a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f91e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f922:	d1b2      	bne.n	800f88a <_dtoa_r+0x57a>
 800f924:	e7d3      	b.n	800f8ce <_dtoa_r+0x5be>
 800f926:	bf00      	nop
 800f928:	08012a50 	.word	0x08012a50
 800f92c:	08012a28 	.word	0x08012a28
 800f930:	9907      	ldr	r1, [sp, #28]
 800f932:	2900      	cmp	r1, #0
 800f934:	f000 80d0 	beq.w	800fad8 <_dtoa_r+0x7c8>
 800f938:	9906      	ldr	r1, [sp, #24]
 800f93a:	2901      	cmp	r1, #1
 800f93c:	f300 80b4 	bgt.w	800faa8 <_dtoa_r+0x798>
 800f940:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f942:	2900      	cmp	r1, #0
 800f944:	f000 80ac 	beq.w	800faa0 <_dtoa_r+0x790>
 800f948:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f94c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800f950:	461c      	mov	r4, r3
 800f952:	930a      	str	r3, [sp, #40]	; 0x28
 800f954:	9b04      	ldr	r3, [sp, #16]
 800f956:	4413      	add	r3, r2
 800f958:	9304      	str	r3, [sp, #16]
 800f95a:	9b05      	ldr	r3, [sp, #20]
 800f95c:	2101      	movs	r1, #1
 800f95e:	4413      	add	r3, r2
 800f960:	4630      	mov	r0, r6
 800f962:	9305      	str	r3, [sp, #20]
 800f964:	f001 f93e 	bl	8010be4 <__i2b>
 800f968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f96a:	4607      	mov	r7, r0
 800f96c:	f1b8 0f00 	cmp.w	r8, #0
 800f970:	dd0d      	ble.n	800f98e <_dtoa_r+0x67e>
 800f972:	9a05      	ldr	r2, [sp, #20]
 800f974:	2a00      	cmp	r2, #0
 800f976:	dd0a      	ble.n	800f98e <_dtoa_r+0x67e>
 800f978:	4542      	cmp	r2, r8
 800f97a:	9904      	ldr	r1, [sp, #16]
 800f97c:	bfa8      	it	ge
 800f97e:	4642      	movge	r2, r8
 800f980:	1a89      	subs	r1, r1, r2
 800f982:	9104      	str	r1, [sp, #16]
 800f984:	9905      	ldr	r1, [sp, #20]
 800f986:	eba8 0802 	sub.w	r8, r8, r2
 800f98a:	1a8a      	subs	r2, r1, r2
 800f98c:	9205      	str	r2, [sp, #20]
 800f98e:	b303      	cbz	r3, 800f9d2 <_dtoa_r+0x6c2>
 800f990:	9a07      	ldr	r2, [sp, #28]
 800f992:	2a00      	cmp	r2, #0
 800f994:	f000 80a5 	beq.w	800fae2 <_dtoa_r+0x7d2>
 800f998:	2c00      	cmp	r4, #0
 800f99a:	dd13      	ble.n	800f9c4 <_dtoa_r+0x6b4>
 800f99c:	4639      	mov	r1, r7
 800f99e:	4622      	mov	r2, r4
 800f9a0:	4630      	mov	r0, r6
 800f9a2:	930d      	str	r3, [sp, #52]	; 0x34
 800f9a4:	f001 f9de 	bl	8010d64 <__pow5mult>
 800f9a8:	462a      	mov	r2, r5
 800f9aa:	4601      	mov	r1, r0
 800f9ac:	4607      	mov	r7, r0
 800f9ae:	4630      	mov	r0, r6
 800f9b0:	f001 f92e 	bl	8010c10 <__multiply>
 800f9b4:	4629      	mov	r1, r5
 800f9b6:	900a      	str	r0, [sp, #40]	; 0x28
 800f9b8:	4630      	mov	r0, r6
 800f9ba:	f001 f811 	bl	80109e0 <_Bfree>
 800f9be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f9c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f9c2:	4615      	mov	r5, r2
 800f9c4:	1b1a      	subs	r2, r3, r4
 800f9c6:	d004      	beq.n	800f9d2 <_dtoa_r+0x6c2>
 800f9c8:	4629      	mov	r1, r5
 800f9ca:	4630      	mov	r0, r6
 800f9cc:	f001 f9ca 	bl	8010d64 <__pow5mult>
 800f9d0:	4605      	mov	r5, r0
 800f9d2:	2101      	movs	r1, #1
 800f9d4:	4630      	mov	r0, r6
 800f9d6:	f001 f905 	bl	8010be4 <__i2b>
 800f9da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	4604      	mov	r4, r0
 800f9e0:	f340 8081 	ble.w	800fae6 <_dtoa_r+0x7d6>
 800f9e4:	461a      	mov	r2, r3
 800f9e6:	4601      	mov	r1, r0
 800f9e8:	4630      	mov	r0, r6
 800f9ea:	f001 f9bb 	bl	8010d64 <__pow5mult>
 800f9ee:	9b06      	ldr	r3, [sp, #24]
 800f9f0:	2b01      	cmp	r3, #1
 800f9f2:	4604      	mov	r4, r0
 800f9f4:	dd7a      	ble.n	800faec <_dtoa_r+0x7dc>
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	930a      	str	r3, [sp, #40]	; 0x28
 800f9fa:	6922      	ldr	r2, [r4, #16]
 800f9fc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800fa00:	6910      	ldr	r0, [r2, #16]
 800fa02:	f001 f89f 	bl	8010b44 <__hi0bits>
 800fa06:	f1c0 0020 	rsb	r0, r0, #32
 800fa0a:	9b05      	ldr	r3, [sp, #20]
 800fa0c:	4418      	add	r0, r3
 800fa0e:	f010 001f 	ands.w	r0, r0, #31
 800fa12:	f000 808c 	beq.w	800fb2e <_dtoa_r+0x81e>
 800fa16:	f1c0 0220 	rsb	r2, r0, #32
 800fa1a:	2a04      	cmp	r2, #4
 800fa1c:	f340 8085 	ble.w	800fb2a <_dtoa_r+0x81a>
 800fa20:	f1c0 001c 	rsb	r0, r0, #28
 800fa24:	9b04      	ldr	r3, [sp, #16]
 800fa26:	4403      	add	r3, r0
 800fa28:	9304      	str	r3, [sp, #16]
 800fa2a:	9b05      	ldr	r3, [sp, #20]
 800fa2c:	4403      	add	r3, r0
 800fa2e:	4480      	add	r8, r0
 800fa30:	9305      	str	r3, [sp, #20]
 800fa32:	9b04      	ldr	r3, [sp, #16]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	dd05      	ble.n	800fa44 <_dtoa_r+0x734>
 800fa38:	4629      	mov	r1, r5
 800fa3a:	461a      	mov	r2, r3
 800fa3c:	4630      	mov	r0, r6
 800fa3e:	f001 f9eb 	bl	8010e18 <__lshift>
 800fa42:	4605      	mov	r5, r0
 800fa44:	9b05      	ldr	r3, [sp, #20]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	dd05      	ble.n	800fa56 <_dtoa_r+0x746>
 800fa4a:	4621      	mov	r1, r4
 800fa4c:	461a      	mov	r2, r3
 800fa4e:	4630      	mov	r0, r6
 800fa50:	f001 f9e2 	bl	8010e18 <__lshift>
 800fa54:	4604      	mov	r4, r0
 800fa56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d06a      	beq.n	800fb32 <_dtoa_r+0x822>
 800fa5c:	4621      	mov	r1, r4
 800fa5e:	4628      	mov	r0, r5
 800fa60:	f001 fa4a 	bl	8010ef8 <__mcmp>
 800fa64:	2800      	cmp	r0, #0
 800fa66:	da64      	bge.n	800fb32 <_dtoa_r+0x822>
 800fa68:	2300      	movs	r3, #0
 800fa6a:	4629      	mov	r1, r5
 800fa6c:	220a      	movs	r2, #10
 800fa6e:	4630      	mov	r0, r6
 800fa70:	f000 ffd8 	bl	8010a24 <__multadd>
 800fa74:	9b07      	ldr	r3, [sp, #28]
 800fa76:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fa7a:	4605      	mov	r5, r0
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	f000 8191 	beq.w	800fda4 <_dtoa_r+0xa94>
 800fa82:	4639      	mov	r1, r7
 800fa84:	2300      	movs	r3, #0
 800fa86:	220a      	movs	r2, #10
 800fa88:	4630      	mov	r0, r6
 800fa8a:	f000 ffcb 	bl	8010a24 <__multadd>
 800fa8e:	f1ba 0f00 	cmp.w	sl, #0
 800fa92:	4607      	mov	r7, r0
 800fa94:	f300 808d 	bgt.w	800fbb2 <_dtoa_r+0x8a2>
 800fa98:	9b06      	ldr	r3, [sp, #24]
 800fa9a:	2b02      	cmp	r3, #2
 800fa9c:	dc50      	bgt.n	800fb40 <_dtoa_r+0x830>
 800fa9e:	e088      	b.n	800fbb2 <_dtoa_r+0x8a2>
 800faa0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800faa2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800faa6:	e751      	b.n	800f94c <_dtoa_r+0x63c>
 800faa8:	f109 34ff 	add.w	r4, r9, #4294967295
 800faac:	42a3      	cmp	r3, r4
 800faae:	bfbf      	itttt	lt
 800fab0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800fab2:	1ae3      	sublt	r3, r4, r3
 800fab4:	18d2      	addlt	r2, r2, r3
 800fab6:	9209      	strlt	r2, [sp, #36]	; 0x24
 800fab8:	bfb6      	itet	lt
 800faba:	4623      	movlt	r3, r4
 800fabc:	1b1c      	subge	r4, r3, r4
 800fabe:	2400      	movlt	r4, #0
 800fac0:	f1b9 0f00 	cmp.w	r9, #0
 800fac4:	bfb5      	itete	lt
 800fac6:	9a04      	ldrlt	r2, [sp, #16]
 800fac8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800facc:	eba2 0809 	sublt.w	r8, r2, r9
 800fad0:	464a      	movge	r2, r9
 800fad2:	bfb8      	it	lt
 800fad4:	2200      	movlt	r2, #0
 800fad6:	e73c      	b.n	800f952 <_dtoa_r+0x642>
 800fad8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800fadc:	9f07      	ldr	r7, [sp, #28]
 800fade:	461c      	mov	r4, r3
 800fae0:	e744      	b.n	800f96c <_dtoa_r+0x65c>
 800fae2:	461a      	mov	r2, r3
 800fae4:	e770      	b.n	800f9c8 <_dtoa_r+0x6b8>
 800fae6:	9b06      	ldr	r3, [sp, #24]
 800fae8:	2b01      	cmp	r3, #1
 800faea:	dc18      	bgt.n	800fb1e <_dtoa_r+0x80e>
 800faec:	9b02      	ldr	r3, [sp, #8]
 800faee:	b9b3      	cbnz	r3, 800fb1e <_dtoa_r+0x80e>
 800faf0:	9b03      	ldr	r3, [sp, #12]
 800faf2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800faf6:	b9a2      	cbnz	r2, 800fb22 <_dtoa_r+0x812>
 800faf8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800fafc:	0d12      	lsrs	r2, r2, #20
 800fafe:	0512      	lsls	r2, r2, #20
 800fb00:	b18a      	cbz	r2, 800fb26 <_dtoa_r+0x816>
 800fb02:	9b04      	ldr	r3, [sp, #16]
 800fb04:	3301      	adds	r3, #1
 800fb06:	9304      	str	r3, [sp, #16]
 800fb08:	9b05      	ldr	r3, [sp, #20]
 800fb0a:	3301      	adds	r3, #1
 800fb0c:	9305      	str	r3, [sp, #20]
 800fb0e:	2301      	movs	r3, #1
 800fb10:	930a      	str	r3, [sp, #40]	; 0x28
 800fb12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	f47f af70 	bne.w	800f9fa <_dtoa_r+0x6ea>
 800fb1a:	2001      	movs	r0, #1
 800fb1c:	e775      	b.n	800fa0a <_dtoa_r+0x6fa>
 800fb1e:	2300      	movs	r3, #0
 800fb20:	e7f6      	b.n	800fb10 <_dtoa_r+0x800>
 800fb22:	9b02      	ldr	r3, [sp, #8]
 800fb24:	e7f4      	b.n	800fb10 <_dtoa_r+0x800>
 800fb26:	920a      	str	r2, [sp, #40]	; 0x28
 800fb28:	e7f3      	b.n	800fb12 <_dtoa_r+0x802>
 800fb2a:	d082      	beq.n	800fa32 <_dtoa_r+0x722>
 800fb2c:	4610      	mov	r0, r2
 800fb2e:	301c      	adds	r0, #28
 800fb30:	e778      	b.n	800fa24 <_dtoa_r+0x714>
 800fb32:	f1b9 0f00 	cmp.w	r9, #0
 800fb36:	dc37      	bgt.n	800fba8 <_dtoa_r+0x898>
 800fb38:	9b06      	ldr	r3, [sp, #24]
 800fb3a:	2b02      	cmp	r3, #2
 800fb3c:	dd34      	ble.n	800fba8 <_dtoa_r+0x898>
 800fb3e:	46ca      	mov	sl, r9
 800fb40:	f1ba 0f00 	cmp.w	sl, #0
 800fb44:	d10d      	bne.n	800fb62 <_dtoa_r+0x852>
 800fb46:	4621      	mov	r1, r4
 800fb48:	4653      	mov	r3, sl
 800fb4a:	2205      	movs	r2, #5
 800fb4c:	4630      	mov	r0, r6
 800fb4e:	f000 ff69 	bl	8010a24 <__multadd>
 800fb52:	4601      	mov	r1, r0
 800fb54:	4604      	mov	r4, r0
 800fb56:	4628      	mov	r0, r5
 800fb58:	f001 f9ce 	bl	8010ef8 <__mcmp>
 800fb5c:	2800      	cmp	r0, #0
 800fb5e:	f73f adeb 	bgt.w	800f738 <_dtoa_r+0x428>
 800fb62:	9b08      	ldr	r3, [sp, #32]
 800fb64:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fb68:	ea6f 0b03 	mvn.w	fp, r3
 800fb6c:	f04f 0900 	mov.w	r9, #0
 800fb70:	4621      	mov	r1, r4
 800fb72:	4630      	mov	r0, r6
 800fb74:	f000 ff34 	bl	80109e0 <_Bfree>
 800fb78:	2f00      	cmp	r7, #0
 800fb7a:	f43f aea8 	beq.w	800f8ce <_dtoa_r+0x5be>
 800fb7e:	f1b9 0f00 	cmp.w	r9, #0
 800fb82:	d005      	beq.n	800fb90 <_dtoa_r+0x880>
 800fb84:	45b9      	cmp	r9, r7
 800fb86:	d003      	beq.n	800fb90 <_dtoa_r+0x880>
 800fb88:	4649      	mov	r1, r9
 800fb8a:	4630      	mov	r0, r6
 800fb8c:	f000 ff28 	bl	80109e0 <_Bfree>
 800fb90:	4639      	mov	r1, r7
 800fb92:	4630      	mov	r0, r6
 800fb94:	f000 ff24 	bl	80109e0 <_Bfree>
 800fb98:	e699      	b.n	800f8ce <_dtoa_r+0x5be>
 800fb9a:	2400      	movs	r4, #0
 800fb9c:	4627      	mov	r7, r4
 800fb9e:	e7e0      	b.n	800fb62 <_dtoa_r+0x852>
 800fba0:	46bb      	mov	fp, r7
 800fba2:	4604      	mov	r4, r0
 800fba4:	4607      	mov	r7, r0
 800fba6:	e5c7      	b.n	800f738 <_dtoa_r+0x428>
 800fba8:	9b07      	ldr	r3, [sp, #28]
 800fbaa:	46ca      	mov	sl, r9
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	f000 8100 	beq.w	800fdb2 <_dtoa_r+0xaa2>
 800fbb2:	f1b8 0f00 	cmp.w	r8, #0
 800fbb6:	dd05      	ble.n	800fbc4 <_dtoa_r+0x8b4>
 800fbb8:	4639      	mov	r1, r7
 800fbba:	4642      	mov	r2, r8
 800fbbc:	4630      	mov	r0, r6
 800fbbe:	f001 f92b 	bl	8010e18 <__lshift>
 800fbc2:	4607      	mov	r7, r0
 800fbc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d05d      	beq.n	800fc86 <_dtoa_r+0x976>
 800fbca:	6879      	ldr	r1, [r7, #4]
 800fbcc:	4630      	mov	r0, r6
 800fbce:	f000 fec7 	bl	8010960 <_Balloc>
 800fbd2:	4680      	mov	r8, r0
 800fbd4:	b928      	cbnz	r0, 800fbe2 <_dtoa_r+0x8d2>
 800fbd6:	4b82      	ldr	r3, [pc, #520]	; (800fde0 <_dtoa_r+0xad0>)
 800fbd8:	4602      	mov	r2, r0
 800fbda:	f240 21ea 	movw	r1, #746	; 0x2ea
 800fbde:	f7ff bbaf 	b.w	800f340 <_dtoa_r+0x30>
 800fbe2:	693a      	ldr	r2, [r7, #16]
 800fbe4:	3202      	adds	r2, #2
 800fbe6:	0092      	lsls	r2, r2, #2
 800fbe8:	f107 010c 	add.w	r1, r7, #12
 800fbec:	300c      	adds	r0, #12
 800fbee:	f000 fea9 	bl	8010944 <memcpy>
 800fbf2:	2201      	movs	r2, #1
 800fbf4:	4641      	mov	r1, r8
 800fbf6:	4630      	mov	r0, r6
 800fbf8:	f001 f90e 	bl	8010e18 <__lshift>
 800fbfc:	9b01      	ldr	r3, [sp, #4]
 800fbfe:	3301      	adds	r3, #1
 800fc00:	9304      	str	r3, [sp, #16]
 800fc02:	9b01      	ldr	r3, [sp, #4]
 800fc04:	4453      	add	r3, sl
 800fc06:	9308      	str	r3, [sp, #32]
 800fc08:	9b02      	ldr	r3, [sp, #8]
 800fc0a:	f003 0301 	and.w	r3, r3, #1
 800fc0e:	46b9      	mov	r9, r7
 800fc10:	9307      	str	r3, [sp, #28]
 800fc12:	4607      	mov	r7, r0
 800fc14:	9b04      	ldr	r3, [sp, #16]
 800fc16:	4621      	mov	r1, r4
 800fc18:	3b01      	subs	r3, #1
 800fc1a:	4628      	mov	r0, r5
 800fc1c:	9302      	str	r3, [sp, #8]
 800fc1e:	f7ff faeb 	bl	800f1f8 <quorem>
 800fc22:	4603      	mov	r3, r0
 800fc24:	3330      	adds	r3, #48	; 0x30
 800fc26:	9005      	str	r0, [sp, #20]
 800fc28:	4649      	mov	r1, r9
 800fc2a:	4628      	mov	r0, r5
 800fc2c:	9309      	str	r3, [sp, #36]	; 0x24
 800fc2e:	f001 f963 	bl	8010ef8 <__mcmp>
 800fc32:	463a      	mov	r2, r7
 800fc34:	4682      	mov	sl, r0
 800fc36:	4621      	mov	r1, r4
 800fc38:	4630      	mov	r0, r6
 800fc3a:	f001 f979 	bl	8010f30 <__mdiff>
 800fc3e:	68c2      	ldr	r2, [r0, #12]
 800fc40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc42:	4680      	mov	r8, r0
 800fc44:	bb0a      	cbnz	r2, 800fc8a <_dtoa_r+0x97a>
 800fc46:	4601      	mov	r1, r0
 800fc48:	4628      	mov	r0, r5
 800fc4a:	f001 f955 	bl	8010ef8 <__mcmp>
 800fc4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc50:	4602      	mov	r2, r0
 800fc52:	4641      	mov	r1, r8
 800fc54:	4630      	mov	r0, r6
 800fc56:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800fc5a:	f000 fec1 	bl	80109e0 <_Bfree>
 800fc5e:	9b06      	ldr	r3, [sp, #24]
 800fc60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fc62:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800fc66:	ea43 0102 	orr.w	r1, r3, r2
 800fc6a:	9b07      	ldr	r3, [sp, #28]
 800fc6c:	430b      	orrs	r3, r1
 800fc6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc70:	d10d      	bne.n	800fc8e <_dtoa_r+0x97e>
 800fc72:	2b39      	cmp	r3, #57	; 0x39
 800fc74:	d029      	beq.n	800fcca <_dtoa_r+0x9ba>
 800fc76:	f1ba 0f00 	cmp.w	sl, #0
 800fc7a:	dd01      	ble.n	800fc80 <_dtoa_r+0x970>
 800fc7c:	9b05      	ldr	r3, [sp, #20]
 800fc7e:	3331      	adds	r3, #49	; 0x31
 800fc80:	9a02      	ldr	r2, [sp, #8]
 800fc82:	7013      	strb	r3, [r2, #0]
 800fc84:	e774      	b.n	800fb70 <_dtoa_r+0x860>
 800fc86:	4638      	mov	r0, r7
 800fc88:	e7b8      	b.n	800fbfc <_dtoa_r+0x8ec>
 800fc8a:	2201      	movs	r2, #1
 800fc8c:	e7e1      	b.n	800fc52 <_dtoa_r+0x942>
 800fc8e:	f1ba 0f00 	cmp.w	sl, #0
 800fc92:	db06      	blt.n	800fca2 <_dtoa_r+0x992>
 800fc94:	9906      	ldr	r1, [sp, #24]
 800fc96:	ea41 0a0a 	orr.w	sl, r1, sl
 800fc9a:	9907      	ldr	r1, [sp, #28]
 800fc9c:	ea5a 0101 	orrs.w	r1, sl, r1
 800fca0:	d120      	bne.n	800fce4 <_dtoa_r+0x9d4>
 800fca2:	2a00      	cmp	r2, #0
 800fca4:	ddec      	ble.n	800fc80 <_dtoa_r+0x970>
 800fca6:	4629      	mov	r1, r5
 800fca8:	2201      	movs	r2, #1
 800fcaa:	4630      	mov	r0, r6
 800fcac:	9304      	str	r3, [sp, #16]
 800fcae:	f001 f8b3 	bl	8010e18 <__lshift>
 800fcb2:	4621      	mov	r1, r4
 800fcb4:	4605      	mov	r5, r0
 800fcb6:	f001 f91f 	bl	8010ef8 <__mcmp>
 800fcba:	2800      	cmp	r0, #0
 800fcbc:	9b04      	ldr	r3, [sp, #16]
 800fcbe:	dc02      	bgt.n	800fcc6 <_dtoa_r+0x9b6>
 800fcc0:	d1de      	bne.n	800fc80 <_dtoa_r+0x970>
 800fcc2:	07da      	lsls	r2, r3, #31
 800fcc4:	d5dc      	bpl.n	800fc80 <_dtoa_r+0x970>
 800fcc6:	2b39      	cmp	r3, #57	; 0x39
 800fcc8:	d1d8      	bne.n	800fc7c <_dtoa_r+0x96c>
 800fcca:	9a02      	ldr	r2, [sp, #8]
 800fccc:	2339      	movs	r3, #57	; 0x39
 800fcce:	7013      	strb	r3, [r2, #0]
 800fcd0:	4643      	mov	r3, r8
 800fcd2:	4698      	mov	r8, r3
 800fcd4:	3b01      	subs	r3, #1
 800fcd6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800fcda:	2a39      	cmp	r2, #57	; 0x39
 800fcdc:	d051      	beq.n	800fd82 <_dtoa_r+0xa72>
 800fcde:	3201      	adds	r2, #1
 800fce0:	701a      	strb	r2, [r3, #0]
 800fce2:	e745      	b.n	800fb70 <_dtoa_r+0x860>
 800fce4:	2a00      	cmp	r2, #0
 800fce6:	dd03      	ble.n	800fcf0 <_dtoa_r+0x9e0>
 800fce8:	2b39      	cmp	r3, #57	; 0x39
 800fcea:	d0ee      	beq.n	800fcca <_dtoa_r+0x9ba>
 800fcec:	3301      	adds	r3, #1
 800fcee:	e7c7      	b.n	800fc80 <_dtoa_r+0x970>
 800fcf0:	9a04      	ldr	r2, [sp, #16]
 800fcf2:	9908      	ldr	r1, [sp, #32]
 800fcf4:	f802 3c01 	strb.w	r3, [r2, #-1]
 800fcf8:	428a      	cmp	r2, r1
 800fcfa:	d02b      	beq.n	800fd54 <_dtoa_r+0xa44>
 800fcfc:	4629      	mov	r1, r5
 800fcfe:	2300      	movs	r3, #0
 800fd00:	220a      	movs	r2, #10
 800fd02:	4630      	mov	r0, r6
 800fd04:	f000 fe8e 	bl	8010a24 <__multadd>
 800fd08:	45b9      	cmp	r9, r7
 800fd0a:	4605      	mov	r5, r0
 800fd0c:	f04f 0300 	mov.w	r3, #0
 800fd10:	f04f 020a 	mov.w	r2, #10
 800fd14:	4649      	mov	r1, r9
 800fd16:	4630      	mov	r0, r6
 800fd18:	d107      	bne.n	800fd2a <_dtoa_r+0xa1a>
 800fd1a:	f000 fe83 	bl	8010a24 <__multadd>
 800fd1e:	4681      	mov	r9, r0
 800fd20:	4607      	mov	r7, r0
 800fd22:	9b04      	ldr	r3, [sp, #16]
 800fd24:	3301      	adds	r3, #1
 800fd26:	9304      	str	r3, [sp, #16]
 800fd28:	e774      	b.n	800fc14 <_dtoa_r+0x904>
 800fd2a:	f000 fe7b 	bl	8010a24 <__multadd>
 800fd2e:	4639      	mov	r1, r7
 800fd30:	4681      	mov	r9, r0
 800fd32:	2300      	movs	r3, #0
 800fd34:	220a      	movs	r2, #10
 800fd36:	4630      	mov	r0, r6
 800fd38:	f000 fe74 	bl	8010a24 <__multadd>
 800fd3c:	4607      	mov	r7, r0
 800fd3e:	e7f0      	b.n	800fd22 <_dtoa_r+0xa12>
 800fd40:	f1ba 0f00 	cmp.w	sl, #0
 800fd44:	9a01      	ldr	r2, [sp, #4]
 800fd46:	bfcc      	ite	gt
 800fd48:	46d0      	movgt	r8, sl
 800fd4a:	f04f 0801 	movle.w	r8, #1
 800fd4e:	4490      	add	r8, r2
 800fd50:	f04f 0900 	mov.w	r9, #0
 800fd54:	4629      	mov	r1, r5
 800fd56:	2201      	movs	r2, #1
 800fd58:	4630      	mov	r0, r6
 800fd5a:	9302      	str	r3, [sp, #8]
 800fd5c:	f001 f85c 	bl	8010e18 <__lshift>
 800fd60:	4621      	mov	r1, r4
 800fd62:	4605      	mov	r5, r0
 800fd64:	f001 f8c8 	bl	8010ef8 <__mcmp>
 800fd68:	2800      	cmp	r0, #0
 800fd6a:	dcb1      	bgt.n	800fcd0 <_dtoa_r+0x9c0>
 800fd6c:	d102      	bne.n	800fd74 <_dtoa_r+0xa64>
 800fd6e:	9b02      	ldr	r3, [sp, #8]
 800fd70:	07db      	lsls	r3, r3, #31
 800fd72:	d4ad      	bmi.n	800fcd0 <_dtoa_r+0x9c0>
 800fd74:	4643      	mov	r3, r8
 800fd76:	4698      	mov	r8, r3
 800fd78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fd7c:	2a30      	cmp	r2, #48	; 0x30
 800fd7e:	d0fa      	beq.n	800fd76 <_dtoa_r+0xa66>
 800fd80:	e6f6      	b.n	800fb70 <_dtoa_r+0x860>
 800fd82:	9a01      	ldr	r2, [sp, #4]
 800fd84:	429a      	cmp	r2, r3
 800fd86:	d1a4      	bne.n	800fcd2 <_dtoa_r+0x9c2>
 800fd88:	f10b 0b01 	add.w	fp, fp, #1
 800fd8c:	2331      	movs	r3, #49	; 0x31
 800fd8e:	e778      	b.n	800fc82 <_dtoa_r+0x972>
 800fd90:	4b14      	ldr	r3, [pc, #80]	; (800fde4 <_dtoa_r+0xad4>)
 800fd92:	f7ff bb27 	b.w	800f3e4 <_dtoa_r+0xd4>
 800fd96:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	f47f ab03 	bne.w	800f3a4 <_dtoa_r+0x94>
 800fd9e:	4b12      	ldr	r3, [pc, #72]	; (800fde8 <_dtoa_r+0xad8>)
 800fda0:	f7ff bb20 	b.w	800f3e4 <_dtoa_r+0xd4>
 800fda4:	f1ba 0f00 	cmp.w	sl, #0
 800fda8:	dc03      	bgt.n	800fdb2 <_dtoa_r+0xaa2>
 800fdaa:	9b06      	ldr	r3, [sp, #24]
 800fdac:	2b02      	cmp	r3, #2
 800fdae:	f73f aec7 	bgt.w	800fb40 <_dtoa_r+0x830>
 800fdb2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fdb6:	4621      	mov	r1, r4
 800fdb8:	4628      	mov	r0, r5
 800fdba:	f7ff fa1d 	bl	800f1f8 <quorem>
 800fdbe:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800fdc2:	f808 3b01 	strb.w	r3, [r8], #1
 800fdc6:	9a01      	ldr	r2, [sp, #4]
 800fdc8:	eba8 0202 	sub.w	r2, r8, r2
 800fdcc:	4592      	cmp	sl, r2
 800fdce:	ddb7      	ble.n	800fd40 <_dtoa_r+0xa30>
 800fdd0:	4629      	mov	r1, r5
 800fdd2:	2300      	movs	r3, #0
 800fdd4:	220a      	movs	r2, #10
 800fdd6:	4630      	mov	r0, r6
 800fdd8:	f000 fe24 	bl	8010a24 <__multadd>
 800fddc:	4605      	mov	r5, r0
 800fdde:	e7ea      	b.n	800fdb6 <_dtoa_r+0xaa6>
 800fde0:	080128d8 	.word	0x080128d8
 800fde4:	080126dc 	.word	0x080126dc
 800fde8:	08012859 	.word	0x08012859

0800fdec <__sflush_r>:
 800fdec:	898a      	ldrh	r2, [r1, #12]
 800fdee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdf2:	4605      	mov	r5, r0
 800fdf4:	0710      	lsls	r0, r2, #28
 800fdf6:	460c      	mov	r4, r1
 800fdf8:	d458      	bmi.n	800feac <__sflush_r+0xc0>
 800fdfa:	684b      	ldr	r3, [r1, #4]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	dc05      	bgt.n	800fe0c <__sflush_r+0x20>
 800fe00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	dc02      	bgt.n	800fe0c <__sflush_r+0x20>
 800fe06:	2000      	movs	r0, #0
 800fe08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fe0e:	2e00      	cmp	r6, #0
 800fe10:	d0f9      	beq.n	800fe06 <__sflush_r+0x1a>
 800fe12:	2300      	movs	r3, #0
 800fe14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fe18:	682f      	ldr	r7, [r5, #0]
 800fe1a:	602b      	str	r3, [r5, #0]
 800fe1c:	d032      	beq.n	800fe84 <__sflush_r+0x98>
 800fe1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fe20:	89a3      	ldrh	r3, [r4, #12]
 800fe22:	075a      	lsls	r2, r3, #29
 800fe24:	d505      	bpl.n	800fe32 <__sflush_r+0x46>
 800fe26:	6863      	ldr	r3, [r4, #4]
 800fe28:	1ac0      	subs	r0, r0, r3
 800fe2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fe2c:	b10b      	cbz	r3, 800fe32 <__sflush_r+0x46>
 800fe2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fe30:	1ac0      	subs	r0, r0, r3
 800fe32:	2300      	movs	r3, #0
 800fe34:	4602      	mov	r2, r0
 800fe36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fe38:	6a21      	ldr	r1, [r4, #32]
 800fe3a:	4628      	mov	r0, r5
 800fe3c:	47b0      	blx	r6
 800fe3e:	1c43      	adds	r3, r0, #1
 800fe40:	89a3      	ldrh	r3, [r4, #12]
 800fe42:	d106      	bne.n	800fe52 <__sflush_r+0x66>
 800fe44:	6829      	ldr	r1, [r5, #0]
 800fe46:	291d      	cmp	r1, #29
 800fe48:	d82c      	bhi.n	800fea4 <__sflush_r+0xb8>
 800fe4a:	4a2a      	ldr	r2, [pc, #168]	; (800fef4 <__sflush_r+0x108>)
 800fe4c:	40ca      	lsrs	r2, r1
 800fe4e:	07d6      	lsls	r6, r2, #31
 800fe50:	d528      	bpl.n	800fea4 <__sflush_r+0xb8>
 800fe52:	2200      	movs	r2, #0
 800fe54:	6062      	str	r2, [r4, #4]
 800fe56:	04d9      	lsls	r1, r3, #19
 800fe58:	6922      	ldr	r2, [r4, #16]
 800fe5a:	6022      	str	r2, [r4, #0]
 800fe5c:	d504      	bpl.n	800fe68 <__sflush_r+0x7c>
 800fe5e:	1c42      	adds	r2, r0, #1
 800fe60:	d101      	bne.n	800fe66 <__sflush_r+0x7a>
 800fe62:	682b      	ldr	r3, [r5, #0]
 800fe64:	b903      	cbnz	r3, 800fe68 <__sflush_r+0x7c>
 800fe66:	6560      	str	r0, [r4, #84]	; 0x54
 800fe68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fe6a:	602f      	str	r7, [r5, #0]
 800fe6c:	2900      	cmp	r1, #0
 800fe6e:	d0ca      	beq.n	800fe06 <__sflush_r+0x1a>
 800fe70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fe74:	4299      	cmp	r1, r3
 800fe76:	d002      	beq.n	800fe7e <__sflush_r+0x92>
 800fe78:	4628      	mov	r0, r5
 800fe7a:	f001 fa45 	bl	8011308 <_free_r>
 800fe7e:	2000      	movs	r0, #0
 800fe80:	6360      	str	r0, [r4, #52]	; 0x34
 800fe82:	e7c1      	b.n	800fe08 <__sflush_r+0x1c>
 800fe84:	6a21      	ldr	r1, [r4, #32]
 800fe86:	2301      	movs	r3, #1
 800fe88:	4628      	mov	r0, r5
 800fe8a:	47b0      	blx	r6
 800fe8c:	1c41      	adds	r1, r0, #1
 800fe8e:	d1c7      	bne.n	800fe20 <__sflush_r+0x34>
 800fe90:	682b      	ldr	r3, [r5, #0]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d0c4      	beq.n	800fe20 <__sflush_r+0x34>
 800fe96:	2b1d      	cmp	r3, #29
 800fe98:	d001      	beq.n	800fe9e <__sflush_r+0xb2>
 800fe9a:	2b16      	cmp	r3, #22
 800fe9c:	d101      	bne.n	800fea2 <__sflush_r+0xb6>
 800fe9e:	602f      	str	r7, [r5, #0]
 800fea0:	e7b1      	b.n	800fe06 <__sflush_r+0x1a>
 800fea2:	89a3      	ldrh	r3, [r4, #12]
 800fea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fea8:	81a3      	strh	r3, [r4, #12]
 800feaa:	e7ad      	b.n	800fe08 <__sflush_r+0x1c>
 800feac:	690f      	ldr	r7, [r1, #16]
 800feae:	2f00      	cmp	r7, #0
 800feb0:	d0a9      	beq.n	800fe06 <__sflush_r+0x1a>
 800feb2:	0793      	lsls	r3, r2, #30
 800feb4:	680e      	ldr	r6, [r1, #0]
 800feb6:	bf08      	it	eq
 800feb8:	694b      	ldreq	r3, [r1, #20]
 800feba:	600f      	str	r7, [r1, #0]
 800febc:	bf18      	it	ne
 800febe:	2300      	movne	r3, #0
 800fec0:	eba6 0807 	sub.w	r8, r6, r7
 800fec4:	608b      	str	r3, [r1, #8]
 800fec6:	f1b8 0f00 	cmp.w	r8, #0
 800feca:	dd9c      	ble.n	800fe06 <__sflush_r+0x1a>
 800fecc:	6a21      	ldr	r1, [r4, #32]
 800fece:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fed0:	4643      	mov	r3, r8
 800fed2:	463a      	mov	r2, r7
 800fed4:	4628      	mov	r0, r5
 800fed6:	47b0      	blx	r6
 800fed8:	2800      	cmp	r0, #0
 800feda:	dc06      	bgt.n	800feea <__sflush_r+0xfe>
 800fedc:	89a3      	ldrh	r3, [r4, #12]
 800fede:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fee2:	81a3      	strh	r3, [r4, #12]
 800fee4:	f04f 30ff 	mov.w	r0, #4294967295
 800fee8:	e78e      	b.n	800fe08 <__sflush_r+0x1c>
 800feea:	4407      	add	r7, r0
 800feec:	eba8 0800 	sub.w	r8, r8, r0
 800fef0:	e7e9      	b.n	800fec6 <__sflush_r+0xda>
 800fef2:	bf00      	nop
 800fef4:	20400001 	.word	0x20400001

0800fef8 <_fflush_r>:
 800fef8:	b538      	push	{r3, r4, r5, lr}
 800fefa:	690b      	ldr	r3, [r1, #16]
 800fefc:	4605      	mov	r5, r0
 800fefe:	460c      	mov	r4, r1
 800ff00:	b913      	cbnz	r3, 800ff08 <_fflush_r+0x10>
 800ff02:	2500      	movs	r5, #0
 800ff04:	4628      	mov	r0, r5
 800ff06:	bd38      	pop	{r3, r4, r5, pc}
 800ff08:	b118      	cbz	r0, 800ff12 <_fflush_r+0x1a>
 800ff0a:	6983      	ldr	r3, [r0, #24]
 800ff0c:	b90b      	cbnz	r3, 800ff12 <_fflush_r+0x1a>
 800ff0e:	f000 f887 	bl	8010020 <__sinit>
 800ff12:	4b14      	ldr	r3, [pc, #80]	; (800ff64 <_fflush_r+0x6c>)
 800ff14:	429c      	cmp	r4, r3
 800ff16:	d11b      	bne.n	800ff50 <_fflush_r+0x58>
 800ff18:	686c      	ldr	r4, [r5, #4]
 800ff1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d0ef      	beq.n	800ff02 <_fflush_r+0xa>
 800ff22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ff24:	07d0      	lsls	r0, r2, #31
 800ff26:	d404      	bmi.n	800ff32 <_fflush_r+0x3a>
 800ff28:	0599      	lsls	r1, r3, #22
 800ff2a:	d402      	bmi.n	800ff32 <_fflush_r+0x3a>
 800ff2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff2e:	f000 fc88 	bl	8010842 <__retarget_lock_acquire_recursive>
 800ff32:	4628      	mov	r0, r5
 800ff34:	4621      	mov	r1, r4
 800ff36:	f7ff ff59 	bl	800fdec <__sflush_r>
 800ff3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ff3c:	07da      	lsls	r2, r3, #31
 800ff3e:	4605      	mov	r5, r0
 800ff40:	d4e0      	bmi.n	800ff04 <_fflush_r+0xc>
 800ff42:	89a3      	ldrh	r3, [r4, #12]
 800ff44:	059b      	lsls	r3, r3, #22
 800ff46:	d4dd      	bmi.n	800ff04 <_fflush_r+0xc>
 800ff48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff4a:	f000 fc7b 	bl	8010844 <__retarget_lock_release_recursive>
 800ff4e:	e7d9      	b.n	800ff04 <_fflush_r+0xc>
 800ff50:	4b05      	ldr	r3, [pc, #20]	; (800ff68 <_fflush_r+0x70>)
 800ff52:	429c      	cmp	r4, r3
 800ff54:	d101      	bne.n	800ff5a <_fflush_r+0x62>
 800ff56:	68ac      	ldr	r4, [r5, #8]
 800ff58:	e7df      	b.n	800ff1a <_fflush_r+0x22>
 800ff5a:	4b04      	ldr	r3, [pc, #16]	; (800ff6c <_fflush_r+0x74>)
 800ff5c:	429c      	cmp	r4, r3
 800ff5e:	bf08      	it	eq
 800ff60:	68ec      	ldreq	r4, [r5, #12]
 800ff62:	e7da      	b.n	800ff1a <_fflush_r+0x22>
 800ff64:	0801290c 	.word	0x0801290c
 800ff68:	0801292c 	.word	0x0801292c
 800ff6c:	080128ec 	.word	0x080128ec

0800ff70 <std>:
 800ff70:	2300      	movs	r3, #0
 800ff72:	b510      	push	{r4, lr}
 800ff74:	4604      	mov	r4, r0
 800ff76:	e9c0 3300 	strd	r3, r3, [r0]
 800ff7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ff7e:	6083      	str	r3, [r0, #8]
 800ff80:	8181      	strh	r1, [r0, #12]
 800ff82:	6643      	str	r3, [r0, #100]	; 0x64
 800ff84:	81c2      	strh	r2, [r0, #14]
 800ff86:	6183      	str	r3, [r0, #24]
 800ff88:	4619      	mov	r1, r3
 800ff8a:	2208      	movs	r2, #8
 800ff8c:	305c      	adds	r0, #92	; 0x5c
 800ff8e:	f7fd fb11 	bl	800d5b4 <memset>
 800ff92:	4b05      	ldr	r3, [pc, #20]	; (800ffa8 <std+0x38>)
 800ff94:	6263      	str	r3, [r4, #36]	; 0x24
 800ff96:	4b05      	ldr	r3, [pc, #20]	; (800ffac <std+0x3c>)
 800ff98:	62a3      	str	r3, [r4, #40]	; 0x28
 800ff9a:	4b05      	ldr	r3, [pc, #20]	; (800ffb0 <std+0x40>)
 800ff9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ff9e:	4b05      	ldr	r3, [pc, #20]	; (800ffb4 <std+0x44>)
 800ffa0:	6224      	str	r4, [r4, #32]
 800ffa2:	6323      	str	r3, [r4, #48]	; 0x30
 800ffa4:	bd10      	pop	{r4, pc}
 800ffa6:	bf00      	nop
 800ffa8:	08011a69 	.word	0x08011a69
 800ffac:	08011a8b 	.word	0x08011a8b
 800ffb0:	08011ac3 	.word	0x08011ac3
 800ffb4:	08011ae7 	.word	0x08011ae7

0800ffb8 <_cleanup_r>:
 800ffb8:	4901      	ldr	r1, [pc, #4]	; (800ffc0 <_cleanup_r+0x8>)
 800ffba:	f000 b8af 	b.w	801011c <_fwalk_reent>
 800ffbe:	bf00      	nop
 800ffc0:	0800fef9 	.word	0x0800fef9

0800ffc4 <__sfmoreglue>:
 800ffc4:	b570      	push	{r4, r5, r6, lr}
 800ffc6:	2268      	movs	r2, #104	; 0x68
 800ffc8:	1e4d      	subs	r5, r1, #1
 800ffca:	4355      	muls	r5, r2
 800ffcc:	460e      	mov	r6, r1
 800ffce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ffd2:	f001 fa05 	bl	80113e0 <_malloc_r>
 800ffd6:	4604      	mov	r4, r0
 800ffd8:	b140      	cbz	r0, 800ffec <__sfmoreglue+0x28>
 800ffda:	2100      	movs	r1, #0
 800ffdc:	e9c0 1600 	strd	r1, r6, [r0]
 800ffe0:	300c      	adds	r0, #12
 800ffe2:	60a0      	str	r0, [r4, #8]
 800ffe4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ffe8:	f7fd fae4 	bl	800d5b4 <memset>
 800ffec:	4620      	mov	r0, r4
 800ffee:	bd70      	pop	{r4, r5, r6, pc}

0800fff0 <__sfp_lock_acquire>:
 800fff0:	4801      	ldr	r0, [pc, #4]	; (800fff8 <__sfp_lock_acquire+0x8>)
 800fff2:	f000 bc26 	b.w	8010842 <__retarget_lock_acquire_recursive>
 800fff6:	bf00      	nop
 800fff8:	20004089 	.word	0x20004089

0800fffc <__sfp_lock_release>:
 800fffc:	4801      	ldr	r0, [pc, #4]	; (8010004 <__sfp_lock_release+0x8>)
 800fffe:	f000 bc21 	b.w	8010844 <__retarget_lock_release_recursive>
 8010002:	bf00      	nop
 8010004:	20004089 	.word	0x20004089

08010008 <__sinit_lock_acquire>:
 8010008:	4801      	ldr	r0, [pc, #4]	; (8010010 <__sinit_lock_acquire+0x8>)
 801000a:	f000 bc1a 	b.w	8010842 <__retarget_lock_acquire_recursive>
 801000e:	bf00      	nop
 8010010:	2000408a 	.word	0x2000408a

08010014 <__sinit_lock_release>:
 8010014:	4801      	ldr	r0, [pc, #4]	; (801001c <__sinit_lock_release+0x8>)
 8010016:	f000 bc15 	b.w	8010844 <__retarget_lock_release_recursive>
 801001a:	bf00      	nop
 801001c:	2000408a 	.word	0x2000408a

08010020 <__sinit>:
 8010020:	b510      	push	{r4, lr}
 8010022:	4604      	mov	r4, r0
 8010024:	f7ff fff0 	bl	8010008 <__sinit_lock_acquire>
 8010028:	69a3      	ldr	r3, [r4, #24]
 801002a:	b11b      	cbz	r3, 8010034 <__sinit+0x14>
 801002c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010030:	f7ff bff0 	b.w	8010014 <__sinit_lock_release>
 8010034:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010038:	6523      	str	r3, [r4, #80]	; 0x50
 801003a:	4b13      	ldr	r3, [pc, #76]	; (8010088 <__sinit+0x68>)
 801003c:	4a13      	ldr	r2, [pc, #76]	; (801008c <__sinit+0x6c>)
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	62a2      	str	r2, [r4, #40]	; 0x28
 8010042:	42a3      	cmp	r3, r4
 8010044:	bf04      	itt	eq
 8010046:	2301      	moveq	r3, #1
 8010048:	61a3      	streq	r3, [r4, #24]
 801004a:	4620      	mov	r0, r4
 801004c:	f000 f820 	bl	8010090 <__sfp>
 8010050:	6060      	str	r0, [r4, #4]
 8010052:	4620      	mov	r0, r4
 8010054:	f000 f81c 	bl	8010090 <__sfp>
 8010058:	60a0      	str	r0, [r4, #8]
 801005a:	4620      	mov	r0, r4
 801005c:	f000 f818 	bl	8010090 <__sfp>
 8010060:	2200      	movs	r2, #0
 8010062:	60e0      	str	r0, [r4, #12]
 8010064:	2104      	movs	r1, #4
 8010066:	6860      	ldr	r0, [r4, #4]
 8010068:	f7ff ff82 	bl	800ff70 <std>
 801006c:	68a0      	ldr	r0, [r4, #8]
 801006e:	2201      	movs	r2, #1
 8010070:	2109      	movs	r1, #9
 8010072:	f7ff ff7d 	bl	800ff70 <std>
 8010076:	68e0      	ldr	r0, [r4, #12]
 8010078:	2202      	movs	r2, #2
 801007a:	2112      	movs	r1, #18
 801007c:	f7ff ff78 	bl	800ff70 <std>
 8010080:	2301      	movs	r3, #1
 8010082:	61a3      	str	r3, [r4, #24]
 8010084:	e7d2      	b.n	801002c <__sinit+0xc>
 8010086:	bf00      	nop
 8010088:	080126c8 	.word	0x080126c8
 801008c:	0800ffb9 	.word	0x0800ffb9

08010090 <__sfp>:
 8010090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010092:	4607      	mov	r7, r0
 8010094:	f7ff ffac 	bl	800fff0 <__sfp_lock_acquire>
 8010098:	4b1e      	ldr	r3, [pc, #120]	; (8010114 <__sfp+0x84>)
 801009a:	681e      	ldr	r6, [r3, #0]
 801009c:	69b3      	ldr	r3, [r6, #24]
 801009e:	b913      	cbnz	r3, 80100a6 <__sfp+0x16>
 80100a0:	4630      	mov	r0, r6
 80100a2:	f7ff ffbd 	bl	8010020 <__sinit>
 80100a6:	3648      	adds	r6, #72	; 0x48
 80100a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80100ac:	3b01      	subs	r3, #1
 80100ae:	d503      	bpl.n	80100b8 <__sfp+0x28>
 80100b0:	6833      	ldr	r3, [r6, #0]
 80100b2:	b30b      	cbz	r3, 80100f8 <__sfp+0x68>
 80100b4:	6836      	ldr	r6, [r6, #0]
 80100b6:	e7f7      	b.n	80100a8 <__sfp+0x18>
 80100b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80100bc:	b9d5      	cbnz	r5, 80100f4 <__sfp+0x64>
 80100be:	4b16      	ldr	r3, [pc, #88]	; (8010118 <__sfp+0x88>)
 80100c0:	60e3      	str	r3, [r4, #12]
 80100c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80100c6:	6665      	str	r5, [r4, #100]	; 0x64
 80100c8:	f000 fbba 	bl	8010840 <__retarget_lock_init_recursive>
 80100cc:	f7ff ff96 	bl	800fffc <__sfp_lock_release>
 80100d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80100d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80100d8:	6025      	str	r5, [r4, #0]
 80100da:	61a5      	str	r5, [r4, #24]
 80100dc:	2208      	movs	r2, #8
 80100de:	4629      	mov	r1, r5
 80100e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80100e4:	f7fd fa66 	bl	800d5b4 <memset>
 80100e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80100ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80100f0:	4620      	mov	r0, r4
 80100f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80100f4:	3468      	adds	r4, #104	; 0x68
 80100f6:	e7d9      	b.n	80100ac <__sfp+0x1c>
 80100f8:	2104      	movs	r1, #4
 80100fa:	4638      	mov	r0, r7
 80100fc:	f7ff ff62 	bl	800ffc4 <__sfmoreglue>
 8010100:	4604      	mov	r4, r0
 8010102:	6030      	str	r0, [r6, #0]
 8010104:	2800      	cmp	r0, #0
 8010106:	d1d5      	bne.n	80100b4 <__sfp+0x24>
 8010108:	f7ff ff78 	bl	800fffc <__sfp_lock_release>
 801010c:	230c      	movs	r3, #12
 801010e:	603b      	str	r3, [r7, #0]
 8010110:	e7ee      	b.n	80100f0 <__sfp+0x60>
 8010112:	bf00      	nop
 8010114:	080126c8 	.word	0x080126c8
 8010118:	ffff0001 	.word	0xffff0001

0801011c <_fwalk_reent>:
 801011c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010120:	4606      	mov	r6, r0
 8010122:	4688      	mov	r8, r1
 8010124:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010128:	2700      	movs	r7, #0
 801012a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801012e:	f1b9 0901 	subs.w	r9, r9, #1
 8010132:	d505      	bpl.n	8010140 <_fwalk_reent+0x24>
 8010134:	6824      	ldr	r4, [r4, #0]
 8010136:	2c00      	cmp	r4, #0
 8010138:	d1f7      	bne.n	801012a <_fwalk_reent+0xe>
 801013a:	4638      	mov	r0, r7
 801013c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010140:	89ab      	ldrh	r3, [r5, #12]
 8010142:	2b01      	cmp	r3, #1
 8010144:	d907      	bls.n	8010156 <_fwalk_reent+0x3a>
 8010146:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801014a:	3301      	adds	r3, #1
 801014c:	d003      	beq.n	8010156 <_fwalk_reent+0x3a>
 801014e:	4629      	mov	r1, r5
 8010150:	4630      	mov	r0, r6
 8010152:	47c0      	blx	r8
 8010154:	4307      	orrs	r7, r0
 8010156:	3568      	adds	r5, #104	; 0x68
 8010158:	e7e9      	b.n	801012e <_fwalk_reent+0x12>

0801015a <rshift>:
 801015a:	6903      	ldr	r3, [r0, #16]
 801015c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010164:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010168:	f100 0414 	add.w	r4, r0, #20
 801016c:	dd45      	ble.n	80101fa <rshift+0xa0>
 801016e:	f011 011f 	ands.w	r1, r1, #31
 8010172:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010176:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801017a:	d10c      	bne.n	8010196 <rshift+0x3c>
 801017c:	f100 0710 	add.w	r7, r0, #16
 8010180:	4629      	mov	r1, r5
 8010182:	42b1      	cmp	r1, r6
 8010184:	d334      	bcc.n	80101f0 <rshift+0x96>
 8010186:	1a9b      	subs	r3, r3, r2
 8010188:	009b      	lsls	r3, r3, #2
 801018a:	1eea      	subs	r2, r5, #3
 801018c:	4296      	cmp	r6, r2
 801018e:	bf38      	it	cc
 8010190:	2300      	movcc	r3, #0
 8010192:	4423      	add	r3, r4
 8010194:	e015      	b.n	80101c2 <rshift+0x68>
 8010196:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801019a:	f1c1 0820 	rsb	r8, r1, #32
 801019e:	40cf      	lsrs	r7, r1
 80101a0:	f105 0e04 	add.w	lr, r5, #4
 80101a4:	46a1      	mov	r9, r4
 80101a6:	4576      	cmp	r6, lr
 80101a8:	46f4      	mov	ip, lr
 80101aa:	d815      	bhi.n	80101d8 <rshift+0x7e>
 80101ac:	1a9a      	subs	r2, r3, r2
 80101ae:	0092      	lsls	r2, r2, #2
 80101b0:	3a04      	subs	r2, #4
 80101b2:	3501      	adds	r5, #1
 80101b4:	42ae      	cmp	r6, r5
 80101b6:	bf38      	it	cc
 80101b8:	2200      	movcc	r2, #0
 80101ba:	18a3      	adds	r3, r4, r2
 80101bc:	50a7      	str	r7, [r4, r2]
 80101be:	b107      	cbz	r7, 80101c2 <rshift+0x68>
 80101c0:	3304      	adds	r3, #4
 80101c2:	1b1a      	subs	r2, r3, r4
 80101c4:	42a3      	cmp	r3, r4
 80101c6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80101ca:	bf08      	it	eq
 80101cc:	2300      	moveq	r3, #0
 80101ce:	6102      	str	r2, [r0, #16]
 80101d0:	bf08      	it	eq
 80101d2:	6143      	streq	r3, [r0, #20]
 80101d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80101d8:	f8dc c000 	ldr.w	ip, [ip]
 80101dc:	fa0c fc08 	lsl.w	ip, ip, r8
 80101e0:	ea4c 0707 	orr.w	r7, ip, r7
 80101e4:	f849 7b04 	str.w	r7, [r9], #4
 80101e8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80101ec:	40cf      	lsrs	r7, r1
 80101ee:	e7da      	b.n	80101a6 <rshift+0x4c>
 80101f0:	f851 cb04 	ldr.w	ip, [r1], #4
 80101f4:	f847 cf04 	str.w	ip, [r7, #4]!
 80101f8:	e7c3      	b.n	8010182 <rshift+0x28>
 80101fa:	4623      	mov	r3, r4
 80101fc:	e7e1      	b.n	80101c2 <rshift+0x68>

080101fe <__hexdig_fun>:
 80101fe:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010202:	2b09      	cmp	r3, #9
 8010204:	d802      	bhi.n	801020c <__hexdig_fun+0xe>
 8010206:	3820      	subs	r0, #32
 8010208:	b2c0      	uxtb	r0, r0
 801020a:	4770      	bx	lr
 801020c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010210:	2b05      	cmp	r3, #5
 8010212:	d801      	bhi.n	8010218 <__hexdig_fun+0x1a>
 8010214:	3847      	subs	r0, #71	; 0x47
 8010216:	e7f7      	b.n	8010208 <__hexdig_fun+0xa>
 8010218:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801021c:	2b05      	cmp	r3, #5
 801021e:	d801      	bhi.n	8010224 <__hexdig_fun+0x26>
 8010220:	3827      	subs	r0, #39	; 0x27
 8010222:	e7f1      	b.n	8010208 <__hexdig_fun+0xa>
 8010224:	2000      	movs	r0, #0
 8010226:	4770      	bx	lr

08010228 <__gethex>:
 8010228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801022c:	ed2d 8b02 	vpush	{d8}
 8010230:	b089      	sub	sp, #36	; 0x24
 8010232:	ee08 0a10 	vmov	s16, r0
 8010236:	9304      	str	r3, [sp, #16]
 8010238:	4bb4      	ldr	r3, [pc, #720]	; (801050c <__gethex+0x2e4>)
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	9301      	str	r3, [sp, #4]
 801023e:	4618      	mov	r0, r3
 8010240:	468b      	mov	fp, r1
 8010242:	4690      	mov	r8, r2
 8010244:	f7f0 f806 	bl	8000254 <strlen>
 8010248:	9b01      	ldr	r3, [sp, #4]
 801024a:	f8db 2000 	ldr.w	r2, [fp]
 801024e:	4403      	add	r3, r0
 8010250:	4682      	mov	sl, r0
 8010252:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010256:	9305      	str	r3, [sp, #20]
 8010258:	1c93      	adds	r3, r2, #2
 801025a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801025e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8010262:	32fe      	adds	r2, #254	; 0xfe
 8010264:	18d1      	adds	r1, r2, r3
 8010266:	461f      	mov	r7, r3
 8010268:	f813 0b01 	ldrb.w	r0, [r3], #1
 801026c:	9100      	str	r1, [sp, #0]
 801026e:	2830      	cmp	r0, #48	; 0x30
 8010270:	d0f8      	beq.n	8010264 <__gethex+0x3c>
 8010272:	f7ff ffc4 	bl	80101fe <__hexdig_fun>
 8010276:	4604      	mov	r4, r0
 8010278:	2800      	cmp	r0, #0
 801027a:	d13a      	bne.n	80102f2 <__gethex+0xca>
 801027c:	9901      	ldr	r1, [sp, #4]
 801027e:	4652      	mov	r2, sl
 8010280:	4638      	mov	r0, r7
 8010282:	f001 fc34 	bl	8011aee <strncmp>
 8010286:	4605      	mov	r5, r0
 8010288:	2800      	cmp	r0, #0
 801028a:	d168      	bne.n	801035e <__gethex+0x136>
 801028c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8010290:	eb07 060a 	add.w	r6, r7, sl
 8010294:	f7ff ffb3 	bl	80101fe <__hexdig_fun>
 8010298:	2800      	cmp	r0, #0
 801029a:	d062      	beq.n	8010362 <__gethex+0x13a>
 801029c:	4633      	mov	r3, r6
 801029e:	7818      	ldrb	r0, [r3, #0]
 80102a0:	2830      	cmp	r0, #48	; 0x30
 80102a2:	461f      	mov	r7, r3
 80102a4:	f103 0301 	add.w	r3, r3, #1
 80102a8:	d0f9      	beq.n	801029e <__gethex+0x76>
 80102aa:	f7ff ffa8 	bl	80101fe <__hexdig_fun>
 80102ae:	2301      	movs	r3, #1
 80102b0:	fab0 f480 	clz	r4, r0
 80102b4:	0964      	lsrs	r4, r4, #5
 80102b6:	4635      	mov	r5, r6
 80102b8:	9300      	str	r3, [sp, #0]
 80102ba:	463a      	mov	r2, r7
 80102bc:	4616      	mov	r6, r2
 80102be:	3201      	adds	r2, #1
 80102c0:	7830      	ldrb	r0, [r6, #0]
 80102c2:	f7ff ff9c 	bl	80101fe <__hexdig_fun>
 80102c6:	2800      	cmp	r0, #0
 80102c8:	d1f8      	bne.n	80102bc <__gethex+0x94>
 80102ca:	9901      	ldr	r1, [sp, #4]
 80102cc:	4652      	mov	r2, sl
 80102ce:	4630      	mov	r0, r6
 80102d0:	f001 fc0d 	bl	8011aee <strncmp>
 80102d4:	b980      	cbnz	r0, 80102f8 <__gethex+0xd0>
 80102d6:	b94d      	cbnz	r5, 80102ec <__gethex+0xc4>
 80102d8:	eb06 050a 	add.w	r5, r6, sl
 80102dc:	462a      	mov	r2, r5
 80102de:	4616      	mov	r6, r2
 80102e0:	3201      	adds	r2, #1
 80102e2:	7830      	ldrb	r0, [r6, #0]
 80102e4:	f7ff ff8b 	bl	80101fe <__hexdig_fun>
 80102e8:	2800      	cmp	r0, #0
 80102ea:	d1f8      	bne.n	80102de <__gethex+0xb6>
 80102ec:	1bad      	subs	r5, r5, r6
 80102ee:	00ad      	lsls	r5, r5, #2
 80102f0:	e004      	b.n	80102fc <__gethex+0xd4>
 80102f2:	2400      	movs	r4, #0
 80102f4:	4625      	mov	r5, r4
 80102f6:	e7e0      	b.n	80102ba <__gethex+0x92>
 80102f8:	2d00      	cmp	r5, #0
 80102fa:	d1f7      	bne.n	80102ec <__gethex+0xc4>
 80102fc:	7833      	ldrb	r3, [r6, #0]
 80102fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010302:	2b50      	cmp	r3, #80	; 0x50
 8010304:	d13b      	bne.n	801037e <__gethex+0x156>
 8010306:	7873      	ldrb	r3, [r6, #1]
 8010308:	2b2b      	cmp	r3, #43	; 0x2b
 801030a:	d02c      	beq.n	8010366 <__gethex+0x13e>
 801030c:	2b2d      	cmp	r3, #45	; 0x2d
 801030e:	d02e      	beq.n	801036e <__gethex+0x146>
 8010310:	1c71      	adds	r1, r6, #1
 8010312:	f04f 0900 	mov.w	r9, #0
 8010316:	7808      	ldrb	r0, [r1, #0]
 8010318:	f7ff ff71 	bl	80101fe <__hexdig_fun>
 801031c:	1e43      	subs	r3, r0, #1
 801031e:	b2db      	uxtb	r3, r3
 8010320:	2b18      	cmp	r3, #24
 8010322:	d82c      	bhi.n	801037e <__gethex+0x156>
 8010324:	f1a0 0210 	sub.w	r2, r0, #16
 8010328:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801032c:	f7ff ff67 	bl	80101fe <__hexdig_fun>
 8010330:	1e43      	subs	r3, r0, #1
 8010332:	b2db      	uxtb	r3, r3
 8010334:	2b18      	cmp	r3, #24
 8010336:	d91d      	bls.n	8010374 <__gethex+0x14c>
 8010338:	f1b9 0f00 	cmp.w	r9, #0
 801033c:	d000      	beq.n	8010340 <__gethex+0x118>
 801033e:	4252      	negs	r2, r2
 8010340:	4415      	add	r5, r2
 8010342:	f8cb 1000 	str.w	r1, [fp]
 8010346:	b1e4      	cbz	r4, 8010382 <__gethex+0x15a>
 8010348:	9b00      	ldr	r3, [sp, #0]
 801034a:	2b00      	cmp	r3, #0
 801034c:	bf14      	ite	ne
 801034e:	2700      	movne	r7, #0
 8010350:	2706      	moveq	r7, #6
 8010352:	4638      	mov	r0, r7
 8010354:	b009      	add	sp, #36	; 0x24
 8010356:	ecbd 8b02 	vpop	{d8}
 801035a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801035e:	463e      	mov	r6, r7
 8010360:	4625      	mov	r5, r4
 8010362:	2401      	movs	r4, #1
 8010364:	e7ca      	b.n	80102fc <__gethex+0xd4>
 8010366:	f04f 0900 	mov.w	r9, #0
 801036a:	1cb1      	adds	r1, r6, #2
 801036c:	e7d3      	b.n	8010316 <__gethex+0xee>
 801036e:	f04f 0901 	mov.w	r9, #1
 8010372:	e7fa      	b.n	801036a <__gethex+0x142>
 8010374:	230a      	movs	r3, #10
 8010376:	fb03 0202 	mla	r2, r3, r2, r0
 801037a:	3a10      	subs	r2, #16
 801037c:	e7d4      	b.n	8010328 <__gethex+0x100>
 801037e:	4631      	mov	r1, r6
 8010380:	e7df      	b.n	8010342 <__gethex+0x11a>
 8010382:	1bf3      	subs	r3, r6, r7
 8010384:	3b01      	subs	r3, #1
 8010386:	4621      	mov	r1, r4
 8010388:	2b07      	cmp	r3, #7
 801038a:	dc0b      	bgt.n	80103a4 <__gethex+0x17c>
 801038c:	ee18 0a10 	vmov	r0, s16
 8010390:	f000 fae6 	bl	8010960 <_Balloc>
 8010394:	4604      	mov	r4, r0
 8010396:	b940      	cbnz	r0, 80103aa <__gethex+0x182>
 8010398:	4b5d      	ldr	r3, [pc, #372]	; (8010510 <__gethex+0x2e8>)
 801039a:	4602      	mov	r2, r0
 801039c:	21de      	movs	r1, #222	; 0xde
 801039e:	485d      	ldr	r0, [pc, #372]	; (8010514 <__gethex+0x2ec>)
 80103a0:	f001 fbd8 	bl	8011b54 <__assert_func>
 80103a4:	3101      	adds	r1, #1
 80103a6:	105b      	asrs	r3, r3, #1
 80103a8:	e7ee      	b.n	8010388 <__gethex+0x160>
 80103aa:	f100 0914 	add.w	r9, r0, #20
 80103ae:	f04f 0b00 	mov.w	fp, #0
 80103b2:	f1ca 0301 	rsb	r3, sl, #1
 80103b6:	f8cd 9008 	str.w	r9, [sp, #8]
 80103ba:	f8cd b000 	str.w	fp, [sp]
 80103be:	9306      	str	r3, [sp, #24]
 80103c0:	42b7      	cmp	r7, r6
 80103c2:	d340      	bcc.n	8010446 <__gethex+0x21e>
 80103c4:	9802      	ldr	r0, [sp, #8]
 80103c6:	9b00      	ldr	r3, [sp, #0]
 80103c8:	f840 3b04 	str.w	r3, [r0], #4
 80103cc:	eba0 0009 	sub.w	r0, r0, r9
 80103d0:	1080      	asrs	r0, r0, #2
 80103d2:	0146      	lsls	r6, r0, #5
 80103d4:	6120      	str	r0, [r4, #16]
 80103d6:	4618      	mov	r0, r3
 80103d8:	f000 fbb4 	bl	8010b44 <__hi0bits>
 80103dc:	1a30      	subs	r0, r6, r0
 80103de:	f8d8 6000 	ldr.w	r6, [r8]
 80103e2:	42b0      	cmp	r0, r6
 80103e4:	dd63      	ble.n	80104ae <__gethex+0x286>
 80103e6:	1b87      	subs	r7, r0, r6
 80103e8:	4639      	mov	r1, r7
 80103ea:	4620      	mov	r0, r4
 80103ec:	f000 ff55 	bl	801129a <__any_on>
 80103f0:	4682      	mov	sl, r0
 80103f2:	b1a8      	cbz	r0, 8010420 <__gethex+0x1f8>
 80103f4:	1e7b      	subs	r3, r7, #1
 80103f6:	1159      	asrs	r1, r3, #5
 80103f8:	f003 021f 	and.w	r2, r3, #31
 80103fc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010400:	f04f 0a01 	mov.w	sl, #1
 8010404:	fa0a f202 	lsl.w	r2, sl, r2
 8010408:	420a      	tst	r2, r1
 801040a:	d009      	beq.n	8010420 <__gethex+0x1f8>
 801040c:	4553      	cmp	r3, sl
 801040e:	dd05      	ble.n	801041c <__gethex+0x1f4>
 8010410:	1eb9      	subs	r1, r7, #2
 8010412:	4620      	mov	r0, r4
 8010414:	f000 ff41 	bl	801129a <__any_on>
 8010418:	2800      	cmp	r0, #0
 801041a:	d145      	bne.n	80104a8 <__gethex+0x280>
 801041c:	f04f 0a02 	mov.w	sl, #2
 8010420:	4639      	mov	r1, r7
 8010422:	4620      	mov	r0, r4
 8010424:	f7ff fe99 	bl	801015a <rshift>
 8010428:	443d      	add	r5, r7
 801042a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801042e:	42ab      	cmp	r3, r5
 8010430:	da4c      	bge.n	80104cc <__gethex+0x2a4>
 8010432:	ee18 0a10 	vmov	r0, s16
 8010436:	4621      	mov	r1, r4
 8010438:	f000 fad2 	bl	80109e0 <_Bfree>
 801043c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801043e:	2300      	movs	r3, #0
 8010440:	6013      	str	r3, [r2, #0]
 8010442:	27a3      	movs	r7, #163	; 0xa3
 8010444:	e785      	b.n	8010352 <__gethex+0x12a>
 8010446:	1e73      	subs	r3, r6, #1
 8010448:	9a05      	ldr	r2, [sp, #20]
 801044a:	9303      	str	r3, [sp, #12]
 801044c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010450:	4293      	cmp	r3, r2
 8010452:	d019      	beq.n	8010488 <__gethex+0x260>
 8010454:	f1bb 0f20 	cmp.w	fp, #32
 8010458:	d107      	bne.n	801046a <__gethex+0x242>
 801045a:	9b02      	ldr	r3, [sp, #8]
 801045c:	9a00      	ldr	r2, [sp, #0]
 801045e:	f843 2b04 	str.w	r2, [r3], #4
 8010462:	9302      	str	r3, [sp, #8]
 8010464:	2300      	movs	r3, #0
 8010466:	9300      	str	r3, [sp, #0]
 8010468:	469b      	mov	fp, r3
 801046a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801046e:	f7ff fec6 	bl	80101fe <__hexdig_fun>
 8010472:	9b00      	ldr	r3, [sp, #0]
 8010474:	f000 000f 	and.w	r0, r0, #15
 8010478:	fa00 f00b 	lsl.w	r0, r0, fp
 801047c:	4303      	orrs	r3, r0
 801047e:	9300      	str	r3, [sp, #0]
 8010480:	f10b 0b04 	add.w	fp, fp, #4
 8010484:	9b03      	ldr	r3, [sp, #12]
 8010486:	e00d      	b.n	80104a4 <__gethex+0x27c>
 8010488:	9b03      	ldr	r3, [sp, #12]
 801048a:	9a06      	ldr	r2, [sp, #24]
 801048c:	4413      	add	r3, r2
 801048e:	42bb      	cmp	r3, r7
 8010490:	d3e0      	bcc.n	8010454 <__gethex+0x22c>
 8010492:	4618      	mov	r0, r3
 8010494:	9901      	ldr	r1, [sp, #4]
 8010496:	9307      	str	r3, [sp, #28]
 8010498:	4652      	mov	r2, sl
 801049a:	f001 fb28 	bl	8011aee <strncmp>
 801049e:	9b07      	ldr	r3, [sp, #28]
 80104a0:	2800      	cmp	r0, #0
 80104a2:	d1d7      	bne.n	8010454 <__gethex+0x22c>
 80104a4:	461e      	mov	r6, r3
 80104a6:	e78b      	b.n	80103c0 <__gethex+0x198>
 80104a8:	f04f 0a03 	mov.w	sl, #3
 80104ac:	e7b8      	b.n	8010420 <__gethex+0x1f8>
 80104ae:	da0a      	bge.n	80104c6 <__gethex+0x29e>
 80104b0:	1a37      	subs	r7, r6, r0
 80104b2:	4621      	mov	r1, r4
 80104b4:	ee18 0a10 	vmov	r0, s16
 80104b8:	463a      	mov	r2, r7
 80104ba:	f000 fcad 	bl	8010e18 <__lshift>
 80104be:	1bed      	subs	r5, r5, r7
 80104c0:	4604      	mov	r4, r0
 80104c2:	f100 0914 	add.w	r9, r0, #20
 80104c6:	f04f 0a00 	mov.w	sl, #0
 80104ca:	e7ae      	b.n	801042a <__gethex+0x202>
 80104cc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80104d0:	42a8      	cmp	r0, r5
 80104d2:	dd72      	ble.n	80105ba <__gethex+0x392>
 80104d4:	1b45      	subs	r5, r0, r5
 80104d6:	42ae      	cmp	r6, r5
 80104d8:	dc36      	bgt.n	8010548 <__gethex+0x320>
 80104da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80104de:	2b02      	cmp	r3, #2
 80104e0:	d02a      	beq.n	8010538 <__gethex+0x310>
 80104e2:	2b03      	cmp	r3, #3
 80104e4:	d02c      	beq.n	8010540 <__gethex+0x318>
 80104e6:	2b01      	cmp	r3, #1
 80104e8:	d11c      	bne.n	8010524 <__gethex+0x2fc>
 80104ea:	42ae      	cmp	r6, r5
 80104ec:	d11a      	bne.n	8010524 <__gethex+0x2fc>
 80104ee:	2e01      	cmp	r6, #1
 80104f0:	d112      	bne.n	8010518 <__gethex+0x2f0>
 80104f2:	9a04      	ldr	r2, [sp, #16]
 80104f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80104f8:	6013      	str	r3, [r2, #0]
 80104fa:	2301      	movs	r3, #1
 80104fc:	6123      	str	r3, [r4, #16]
 80104fe:	f8c9 3000 	str.w	r3, [r9]
 8010502:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010504:	2762      	movs	r7, #98	; 0x62
 8010506:	601c      	str	r4, [r3, #0]
 8010508:	e723      	b.n	8010352 <__gethex+0x12a>
 801050a:	bf00      	nop
 801050c:	080129b4 	.word	0x080129b4
 8010510:	080128d8 	.word	0x080128d8
 8010514:	0801294c 	.word	0x0801294c
 8010518:	1e71      	subs	r1, r6, #1
 801051a:	4620      	mov	r0, r4
 801051c:	f000 febd 	bl	801129a <__any_on>
 8010520:	2800      	cmp	r0, #0
 8010522:	d1e6      	bne.n	80104f2 <__gethex+0x2ca>
 8010524:	ee18 0a10 	vmov	r0, s16
 8010528:	4621      	mov	r1, r4
 801052a:	f000 fa59 	bl	80109e0 <_Bfree>
 801052e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010530:	2300      	movs	r3, #0
 8010532:	6013      	str	r3, [r2, #0]
 8010534:	2750      	movs	r7, #80	; 0x50
 8010536:	e70c      	b.n	8010352 <__gethex+0x12a>
 8010538:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801053a:	2b00      	cmp	r3, #0
 801053c:	d1f2      	bne.n	8010524 <__gethex+0x2fc>
 801053e:	e7d8      	b.n	80104f2 <__gethex+0x2ca>
 8010540:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010542:	2b00      	cmp	r3, #0
 8010544:	d1d5      	bne.n	80104f2 <__gethex+0x2ca>
 8010546:	e7ed      	b.n	8010524 <__gethex+0x2fc>
 8010548:	1e6f      	subs	r7, r5, #1
 801054a:	f1ba 0f00 	cmp.w	sl, #0
 801054e:	d131      	bne.n	80105b4 <__gethex+0x38c>
 8010550:	b127      	cbz	r7, 801055c <__gethex+0x334>
 8010552:	4639      	mov	r1, r7
 8010554:	4620      	mov	r0, r4
 8010556:	f000 fea0 	bl	801129a <__any_on>
 801055a:	4682      	mov	sl, r0
 801055c:	117b      	asrs	r3, r7, #5
 801055e:	2101      	movs	r1, #1
 8010560:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8010564:	f007 071f 	and.w	r7, r7, #31
 8010568:	fa01 f707 	lsl.w	r7, r1, r7
 801056c:	421f      	tst	r7, r3
 801056e:	4629      	mov	r1, r5
 8010570:	4620      	mov	r0, r4
 8010572:	bf18      	it	ne
 8010574:	f04a 0a02 	orrne.w	sl, sl, #2
 8010578:	1b76      	subs	r6, r6, r5
 801057a:	f7ff fdee 	bl	801015a <rshift>
 801057e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010582:	2702      	movs	r7, #2
 8010584:	f1ba 0f00 	cmp.w	sl, #0
 8010588:	d048      	beq.n	801061c <__gethex+0x3f4>
 801058a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801058e:	2b02      	cmp	r3, #2
 8010590:	d015      	beq.n	80105be <__gethex+0x396>
 8010592:	2b03      	cmp	r3, #3
 8010594:	d017      	beq.n	80105c6 <__gethex+0x39e>
 8010596:	2b01      	cmp	r3, #1
 8010598:	d109      	bne.n	80105ae <__gethex+0x386>
 801059a:	f01a 0f02 	tst.w	sl, #2
 801059e:	d006      	beq.n	80105ae <__gethex+0x386>
 80105a0:	f8d9 0000 	ldr.w	r0, [r9]
 80105a4:	ea4a 0a00 	orr.w	sl, sl, r0
 80105a8:	f01a 0f01 	tst.w	sl, #1
 80105ac:	d10e      	bne.n	80105cc <__gethex+0x3a4>
 80105ae:	f047 0710 	orr.w	r7, r7, #16
 80105b2:	e033      	b.n	801061c <__gethex+0x3f4>
 80105b4:	f04f 0a01 	mov.w	sl, #1
 80105b8:	e7d0      	b.n	801055c <__gethex+0x334>
 80105ba:	2701      	movs	r7, #1
 80105bc:	e7e2      	b.n	8010584 <__gethex+0x35c>
 80105be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80105c0:	f1c3 0301 	rsb	r3, r3, #1
 80105c4:	9315      	str	r3, [sp, #84]	; 0x54
 80105c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d0f0      	beq.n	80105ae <__gethex+0x386>
 80105cc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80105d0:	f104 0314 	add.w	r3, r4, #20
 80105d4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80105d8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80105dc:	f04f 0c00 	mov.w	ip, #0
 80105e0:	4618      	mov	r0, r3
 80105e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80105e6:	f1b2 3fff 	cmp.w	r2, #4294967295
 80105ea:	d01c      	beq.n	8010626 <__gethex+0x3fe>
 80105ec:	3201      	adds	r2, #1
 80105ee:	6002      	str	r2, [r0, #0]
 80105f0:	2f02      	cmp	r7, #2
 80105f2:	f104 0314 	add.w	r3, r4, #20
 80105f6:	d13f      	bne.n	8010678 <__gethex+0x450>
 80105f8:	f8d8 2000 	ldr.w	r2, [r8]
 80105fc:	3a01      	subs	r2, #1
 80105fe:	42b2      	cmp	r2, r6
 8010600:	d10a      	bne.n	8010618 <__gethex+0x3f0>
 8010602:	1171      	asrs	r1, r6, #5
 8010604:	2201      	movs	r2, #1
 8010606:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801060a:	f006 061f 	and.w	r6, r6, #31
 801060e:	fa02 f606 	lsl.w	r6, r2, r6
 8010612:	421e      	tst	r6, r3
 8010614:	bf18      	it	ne
 8010616:	4617      	movne	r7, r2
 8010618:	f047 0720 	orr.w	r7, r7, #32
 801061c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801061e:	601c      	str	r4, [r3, #0]
 8010620:	9b04      	ldr	r3, [sp, #16]
 8010622:	601d      	str	r5, [r3, #0]
 8010624:	e695      	b.n	8010352 <__gethex+0x12a>
 8010626:	4299      	cmp	r1, r3
 8010628:	f843 cc04 	str.w	ip, [r3, #-4]
 801062c:	d8d8      	bhi.n	80105e0 <__gethex+0x3b8>
 801062e:	68a3      	ldr	r3, [r4, #8]
 8010630:	459b      	cmp	fp, r3
 8010632:	db19      	blt.n	8010668 <__gethex+0x440>
 8010634:	6861      	ldr	r1, [r4, #4]
 8010636:	ee18 0a10 	vmov	r0, s16
 801063a:	3101      	adds	r1, #1
 801063c:	f000 f990 	bl	8010960 <_Balloc>
 8010640:	4681      	mov	r9, r0
 8010642:	b918      	cbnz	r0, 801064c <__gethex+0x424>
 8010644:	4b1a      	ldr	r3, [pc, #104]	; (80106b0 <__gethex+0x488>)
 8010646:	4602      	mov	r2, r0
 8010648:	2184      	movs	r1, #132	; 0x84
 801064a:	e6a8      	b.n	801039e <__gethex+0x176>
 801064c:	6922      	ldr	r2, [r4, #16]
 801064e:	3202      	adds	r2, #2
 8010650:	f104 010c 	add.w	r1, r4, #12
 8010654:	0092      	lsls	r2, r2, #2
 8010656:	300c      	adds	r0, #12
 8010658:	f000 f974 	bl	8010944 <memcpy>
 801065c:	4621      	mov	r1, r4
 801065e:	ee18 0a10 	vmov	r0, s16
 8010662:	f000 f9bd 	bl	80109e0 <_Bfree>
 8010666:	464c      	mov	r4, r9
 8010668:	6923      	ldr	r3, [r4, #16]
 801066a:	1c5a      	adds	r2, r3, #1
 801066c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010670:	6122      	str	r2, [r4, #16]
 8010672:	2201      	movs	r2, #1
 8010674:	615a      	str	r2, [r3, #20]
 8010676:	e7bb      	b.n	80105f0 <__gethex+0x3c8>
 8010678:	6922      	ldr	r2, [r4, #16]
 801067a:	455a      	cmp	r2, fp
 801067c:	dd0b      	ble.n	8010696 <__gethex+0x46e>
 801067e:	2101      	movs	r1, #1
 8010680:	4620      	mov	r0, r4
 8010682:	f7ff fd6a 	bl	801015a <rshift>
 8010686:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801068a:	3501      	adds	r5, #1
 801068c:	42ab      	cmp	r3, r5
 801068e:	f6ff aed0 	blt.w	8010432 <__gethex+0x20a>
 8010692:	2701      	movs	r7, #1
 8010694:	e7c0      	b.n	8010618 <__gethex+0x3f0>
 8010696:	f016 061f 	ands.w	r6, r6, #31
 801069a:	d0fa      	beq.n	8010692 <__gethex+0x46a>
 801069c:	4453      	add	r3, sl
 801069e:	f1c6 0620 	rsb	r6, r6, #32
 80106a2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80106a6:	f000 fa4d 	bl	8010b44 <__hi0bits>
 80106aa:	42b0      	cmp	r0, r6
 80106ac:	dbe7      	blt.n	801067e <__gethex+0x456>
 80106ae:	e7f0      	b.n	8010692 <__gethex+0x46a>
 80106b0:	080128d8 	.word	0x080128d8

080106b4 <L_shift>:
 80106b4:	f1c2 0208 	rsb	r2, r2, #8
 80106b8:	0092      	lsls	r2, r2, #2
 80106ba:	b570      	push	{r4, r5, r6, lr}
 80106bc:	f1c2 0620 	rsb	r6, r2, #32
 80106c0:	6843      	ldr	r3, [r0, #4]
 80106c2:	6804      	ldr	r4, [r0, #0]
 80106c4:	fa03 f506 	lsl.w	r5, r3, r6
 80106c8:	432c      	orrs	r4, r5
 80106ca:	40d3      	lsrs	r3, r2
 80106cc:	6004      	str	r4, [r0, #0]
 80106ce:	f840 3f04 	str.w	r3, [r0, #4]!
 80106d2:	4288      	cmp	r0, r1
 80106d4:	d3f4      	bcc.n	80106c0 <L_shift+0xc>
 80106d6:	bd70      	pop	{r4, r5, r6, pc}

080106d8 <__match>:
 80106d8:	b530      	push	{r4, r5, lr}
 80106da:	6803      	ldr	r3, [r0, #0]
 80106dc:	3301      	adds	r3, #1
 80106de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80106e2:	b914      	cbnz	r4, 80106ea <__match+0x12>
 80106e4:	6003      	str	r3, [r0, #0]
 80106e6:	2001      	movs	r0, #1
 80106e8:	bd30      	pop	{r4, r5, pc}
 80106ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80106ee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80106f2:	2d19      	cmp	r5, #25
 80106f4:	bf98      	it	ls
 80106f6:	3220      	addls	r2, #32
 80106f8:	42a2      	cmp	r2, r4
 80106fa:	d0f0      	beq.n	80106de <__match+0x6>
 80106fc:	2000      	movs	r0, #0
 80106fe:	e7f3      	b.n	80106e8 <__match+0x10>

08010700 <__hexnan>:
 8010700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010704:	680b      	ldr	r3, [r1, #0]
 8010706:	115e      	asrs	r6, r3, #5
 8010708:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801070c:	f013 031f 	ands.w	r3, r3, #31
 8010710:	b087      	sub	sp, #28
 8010712:	bf18      	it	ne
 8010714:	3604      	addne	r6, #4
 8010716:	2500      	movs	r5, #0
 8010718:	1f37      	subs	r7, r6, #4
 801071a:	4690      	mov	r8, r2
 801071c:	6802      	ldr	r2, [r0, #0]
 801071e:	9301      	str	r3, [sp, #4]
 8010720:	4682      	mov	sl, r0
 8010722:	f846 5c04 	str.w	r5, [r6, #-4]
 8010726:	46b9      	mov	r9, r7
 8010728:	463c      	mov	r4, r7
 801072a:	9502      	str	r5, [sp, #8]
 801072c:	46ab      	mov	fp, r5
 801072e:	7851      	ldrb	r1, [r2, #1]
 8010730:	1c53      	adds	r3, r2, #1
 8010732:	9303      	str	r3, [sp, #12]
 8010734:	b341      	cbz	r1, 8010788 <__hexnan+0x88>
 8010736:	4608      	mov	r0, r1
 8010738:	9205      	str	r2, [sp, #20]
 801073a:	9104      	str	r1, [sp, #16]
 801073c:	f7ff fd5f 	bl	80101fe <__hexdig_fun>
 8010740:	2800      	cmp	r0, #0
 8010742:	d14f      	bne.n	80107e4 <__hexnan+0xe4>
 8010744:	9904      	ldr	r1, [sp, #16]
 8010746:	9a05      	ldr	r2, [sp, #20]
 8010748:	2920      	cmp	r1, #32
 801074a:	d818      	bhi.n	801077e <__hexnan+0x7e>
 801074c:	9b02      	ldr	r3, [sp, #8]
 801074e:	459b      	cmp	fp, r3
 8010750:	dd13      	ble.n	801077a <__hexnan+0x7a>
 8010752:	454c      	cmp	r4, r9
 8010754:	d206      	bcs.n	8010764 <__hexnan+0x64>
 8010756:	2d07      	cmp	r5, #7
 8010758:	dc04      	bgt.n	8010764 <__hexnan+0x64>
 801075a:	462a      	mov	r2, r5
 801075c:	4649      	mov	r1, r9
 801075e:	4620      	mov	r0, r4
 8010760:	f7ff ffa8 	bl	80106b4 <L_shift>
 8010764:	4544      	cmp	r4, r8
 8010766:	d950      	bls.n	801080a <__hexnan+0x10a>
 8010768:	2300      	movs	r3, #0
 801076a:	f1a4 0904 	sub.w	r9, r4, #4
 801076e:	f844 3c04 	str.w	r3, [r4, #-4]
 8010772:	f8cd b008 	str.w	fp, [sp, #8]
 8010776:	464c      	mov	r4, r9
 8010778:	461d      	mov	r5, r3
 801077a:	9a03      	ldr	r2, [sp, #12]
 801077c:	e7d7      	b.n	801072e <__hexnan+0x2e>
 801077e:	2929      	cmp	r1, #41	; 0x29
 8010780:	d156      	bne.n	8010830 <__hexnan+0x130>
 8010782:	3202      	adds	r2, #2
 8010784:	f8ca 2000 	str.w	r2, [sl]
 8010788:	f1bb 0f00 	cmp.w	fp, #0
 801078c:	d050      	beq.n	8010830 <__hexnan+0x130>
 801078e:	454c      	cmp	r4, r9
 8010790:	d206      	bcs.n	80107a0 <__hexnan+0xa0>
 8010792:	2d07      	cmp	r5, #7
 8010794:	dc04      	bgt.n	80107a0 <__hexnan+0xa0>
 8010796:	462a      	mov	r2, r5
 8010798:	4649      	mov	r1, r9
 801079a:	4620      	mov	r0, r4
 801079c:	f7ff ff8a 	bl	80106b4 <L_shift>
 80107a0:	4544      	cmp	r4, r8
 80107a2:	d934      	bls.n	801080e <__hexnan+0x10e>
 80107a4:	f1a8 0204 	sub.w	r2, r8, #4
 80107a8:	4623      	mov	r3, r4
 80107aa:	f853 1b04 	ldr.w	r1, [r3], #4
 80107ae:	f842 1f04 	str.w	r1, [r2, #4]!
 80107b2:	429f      	cmp	r7, r3
 80107b4:	d2f9      	bcs.n	80107aa <__hexnan+0xaa>
 80107b6:	1b3b      	subs	r3, r7, r4
 80107b8:	f023 0303 	bic.w	r3, r3, #3
 80107bc:	3304      	adds	r3, #4
 80107be:	3401      	adds	r4, #1
 80107c0:	3e03      	subs	r6, #3
 80107c2:	42b4      	cmp	r4, r6
 80107c4:	bf88      	it	hi
 80107c6:	2304      	movhi	r3, #4
 80107c8:	4443      	add	r3, r8
 80107ca:	2200      	movs	r2, #0
 80107cc:	f843 2b04 	str.w	r2, [r3], #4
 80107d0:	429f      	cmp	r7, r3
 80107d2:	d2fb      	bcs.n	80107cc <__hexnan+0xcc>
 80107d4:	683b      	ldr	r3, [r7, #0]
 80107d6:	b91b      	cbnz	r3, 80107e0 <__hexnan+0xe0>
 80107d8:	4547      	cmp	r7, r8
 80107da:	d127      	bne.n	801082c <__hexnan+0x12c>
 80107dc:	2301      	movs	r3, #1
 80107de:	603b      	str	r3, [r7, #0]
 80107e0:	2005      	movs	r0, #5
 80107e2:	e026      	b.n	8010832 <__hexnan+0x132>
 80107e4:	3501      	adds	r5, #1
 80107e6:	2d08      	cmp	r5, #8
 80107e8:	f10b 0b01 	add.w	fp, fp, #1
 80107ec:	dd06      	ble.n	80107fc <__hexnan+0xfc>
 80107ee:	4544      	cmp	r4, r8
 80107f0:	d9c3      	bls.n	801077a <__hexnan+0x7a>
 80107f2:	2300      	movs	r3, #0
 80107f4:	f844 3c04 	str.w	r3, [r4, #-4]
 80107f8:	2501      	movs	r5, #1
 80107fa:	3c04      	subs	r4, #4
 80107fc:	6822      	ldr	r2, [r4, #0]
 80107fe:	f000 000f 	and.w	r0, r0, #15
 8010802:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8010806:	6022      	str	r2, [r4, #0]
 8010808:	e7b7      	b.n	801077a <__hexnan+0x7a>
 801080a:	2508      	movs	r5, #8
 801080c:	e7b5      	b.n	801077a <__hexnan+0x7a>
 801080e:	9b01      	ldr	r3, [sp, #4]
 8010810:	2b00      	cmp	r3, #0
 8010812:	d0df      	beq.n	80107d4 <__hexnan+0xd4>
 8010814:	f04f 32ff 	mov.w	r2, #4294967295
 8010818:	f1c3 0320 	rsb	r3, r3, #32
 801081c:	fa22 f303 	lsr.w	r3, r2, r3
 8010820:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010824:	401a      	ands	r2, r3
 8010826:	f846 2c04 	str.w	r2, [r6, #-4]
 801082a:	e7d3      	b.n	80107d4 <__hexnan+0xd4>
 801082c:	3f04      	subs	r7, #4
 801082e:	e7d1      	b.n	80107d4 <__hexnan+0xd4>
 8010830:	2004      	movs	r0, #4
 8010832:	b007      	add	sp, #28
 8010834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010838 <_localeconv_r>:
 8010838:	4800      	ldr	r0, [pc, #0]	; (801083c <_localeconv_r+0x4>)
 801083a:	4770      	bx	lr
 801083c:	20000164 	.word	0x20000164

08010840 <__retarget_lock_init_recursive>:
 8010840:	4770      	bx	lr

08010842 <__retarget_lock_acquire_recursive>:
 8010842:	4770      	bx	lr

08010844 <__retarget_lock_release_recursive>:
 8010844:	4770      	bx	lr

08010846 <__swhatbuf_r>:
 8010846:	b570      	push	{r4, r5, r6, lr}
 8010848:	460e      	mov	r6, r1
 801084a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801084e:	2900      	cmp	r1, #0
 8010850:	b096      	sub	sp, #88	; 0x58
 8010852:	4614      	mov	r4, r2
 8010854:	461d      	mov	r5, r3
 8010856:	da08      	bge.n	801086a <__swhatbuf_r+0x24>
 8010858:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801085c:	2200      	movs	r2, #0
 801085e:	602a      	str	r2, [r5, #0]
 8010860:	061a      	lsls	r2, r3, #24
 8010862:	d410      	bmi.n	8010886 <__swhatbuf_r+0x40>
 8010864:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010868:	e00e      	b.n	8010888 <__swhatbuf_r+0x42>
 801086a:	466a      	mov	r2, sp
 801086c:	f001 f9b2 	bl	8011bd4 <_fstat_r>
 8010870:	2800      	cmp	r0, #0
 8010872:	dbf1      	blt.n	8010858 <__swhatbuf_r+0x12>
 8010874:	9a01      	ldr	r2, [sp, #4]
 8010876:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801087a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801087e:	425a      	negs	r2, r3
 8010880:	415a      	adcs	r2, r3
 8010882:	602a      	str	r2, [r5, #0]
 8010884:	e7ee      	b.n	8010864 <__swhatbuf_r+0x1e>
 8010886:	2340      	movs	r3, #64	; 0x40
 8010888:	2000      	movs	r0, #0
 801088a:	6023      	str	r3, [r4, #0]
 801088c:	b016      	add	sp, #88	; 0x58
 801088e:	bd70      	pop	{r4, r5, r6, pc}

08010890 <__smakebuf_r>:
 8010890:	898b      	ldrh	r3, [r1, #12]
 8010892:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010894:	079d      	lsls	r5, r3, #30
 8010896:	4606      	mov	r6, r0
 8010898:	460c      	mov	r4, r1
 801089a:	d507      	bpl.n	80108ac <__smakebuf_r+0x1c>
 801089c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80108a0:	6023      	str	r3, [r4, #0]
 80108a2:	6123      	str	r3, [r4, #16]
 80108a4:	2301      	movs	r3, #1
 80108a6:	6163      	str	r3, [r4, #20]
 80108a8:	b002      	add	sp, #8
 80108aa:	bd70      	pop	{r4, r5, r6, pc}
 80108ac:	ab01      	add	r3, sp, #4
 80108ae:	466a      	mov	r2, sp
 80108b0:	f7ff ffc9 	bl	8010846 <__swhatbuf_r>
 80108b4:	9900      	ldr	r1, [sp, #0]
 80108b6:	4605      	mov	r5, r0
 80108b8:	4630      	mov	r0, r6
 80108ba:	f000 fd91 	bl	80113e0 <_malloc_r>
 80108be:	b948      	cbnz	r0, 80108d4 <__smakebuf_r+0x44>
 80108c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80108c4:	059a      	lsls	r2, r3, #22
 80108c6:	d4ef      	bmi.n	80108a8 <__smakebuf_r+0x18>
 80108c8:	f023 0303 	bic.w	r3, r3, #3
 80108cc:	f043 0302 	orr.w	r3, r3, #2
 80108d0:	81a3      	strh	r3, [r4, #12]
 80108d2:	e7e3      	b.n	801089c <__smakebuf_r+0xc>
 80108d4:	4b0d      	ldr	r3, [pc, #52]	; (801090c <__smakebuf_r+0x7c>)
 80108d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80108d8:	89a3      	ldrh	r3, [r4, #12]
 80108da:	6020      	str	r0, [r4, #0]
 80108dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80108e0:	81a3      	strh	r3, [r4, #12]
 80108e2:	9b00      	ldr	r3, [sp, #0]
 80108e4:	6163      	str	r3, [r4, #20]
 80108e6:	9b01      	ldr	r3, [sp, #4]
 80108e8:	6120      	str	r0, [r4, #16]
 80108ea:	b15b      	cbz	r3, 8010904 <__smakebuf_r+0x74>
 80108ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80108f0:	4630      	mov	r0, r6
 80108f2:	f001 f981 	bl	8011bf8 <_isatty_r>
 80108f6:	b128      	cbz	r0, 8010904 <__smakebuf_r+0x74>
 80108f8:	89a3      	ldrh	r3, [r4, #12]
 80108fa:	f023 0303 	bic.w	r3, r3, #3
 80108fe:	f043 0301 	orr.w	r3, r3, #1
 8010902:	81a3      	strh	r3, [r4, #12]
 8010904:	89a0      	ldrh	r0, [r4, #12]
 8010906:	4305      	orrs	r5, r0
 8010908:	81a5      	strh	r5, [r4, #12]
 801090a:	e7cd      	b.n	80108a8 <__smakebuf_r+0x18>
 801090c:	0800ffb9 	.word	0x0800ffb9

08010910 <malloc>:
 8010910:	4b02      	ldr	r3, [pc, #8]	; (801091c <malloc+0xc>)
 8010912:	4601      	mov	r1, r0
 8010914:	6818      	ldr	r0, [r3, #0]
 8010916:	f000 bd63 	b.w	80113e0 <_malloc_r>
 801091a:	bf00      	nop
 801091c:	2000000c 	.word	0x2000000c

08010920 <__ascii_mbtowc>:
 8010920:	b082      	sub	sp, #8
 8010922:	b901      	cbnz	r1, 8010926 <__ascii_mbtowc+0x6>
 8010924:	a901      	add	r1, sp, #4
 8010926:	b142      	cbz	r2, 801093a <__ascii_mbtowc+0x1a>
 8010928:	b14b      	cbz	r3, 801093e <__ascii_mbtowc+0x1e>
 801092a:	7813      	ldrb	r3, [r2, #0]
 801092c:	600b      	str	r3, [r1, #0]
 801092e:	7812      	ldrb	r2, [r2, #0]
 8010930:	1e10      	subs	r0, r2, #0
 8010932:	bf18      	it	ne
 8010934:	2001      	movne	r0, #1
 8010936:	b002      	add	sp, #8
 8010938:	4770      	bx	lr
 801093a:	4610      	mov	r0, r2
 801093c:	e7fb      	b.n	8010936 <__ascii_mbtowc+0x16>
 801093e:	f06f 0001 	mvn.w	r0, #1
 8010942:	e7f8      	b.n	8010936 <__ascii_mbtowc+0x16>

08010944 <memcpy>:
 8010944:	440a      	add	r2, r1
 8010946:	4291      	cmp	r1, r2
 8010948:	f100 33ff 	add.w	r3, r0, #4294967295
 801094c:	d100      	bne.n	8010950 <memcpy+0xc>
 801094e:	4770      	bx	lr
 8010950:	b510      	push	{r4, lr}
 8010952:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010956:	f803 4f01 	strb.w	r4, [r3, #1]!
 801095a:	4291      	cmp	r1, r2
 801095c:	d1f9      	bne.n	8010952 <memcpy+0xe>
 801095e:	bd10      	pop	{r4, pc}

08010960 <_Balloc>:
 8010960:	b570      	push	{r4, r5, r6, lr}
 8010962:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010964:	4604      	mov	r4, r0
 8010966:	460d      	mov	r5, r1
 8010968:	b976      	cbnz	r6, 8010988 <_Balloc+0x28>
 801096a:	2010      	movs	r0, #16
 801096c:	f7ff ffd0 	bl	8010910 <malloc>
 8010970:	4602      	mov	r2, r0
 8010972:	6260      	str	r0, [r4, #36]	; 0x24
 8010974:	b920      	cbnz	r0, 8010980 <_Balloc+0x20>
 8010976:	4b18      	ldr	r3, [pc, #96]	; (80109d8 <_Balloc+0x78>)
 8010978:	4818      	ldr	r0, [pc, #96]	; (80109dc <_Balloc+0x7c>)
 801097a:	2166      	movs	r1, #102	; 0x66
 801097c:	f001 f8ea 	bl	8011b54 <__assert_func>
 8010980:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010984:	6006      	str	r6, [r0, #0]
 8010986:	60c6      	str	r6, [r0, #12]
 8010988:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801098a:	68f3      	ldr	r3, [r6, #12]
 801098c:	b183      	cbz	r3, 80109b0 <_Balloc+0x50>
 801098e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010990:	68db      	ldr	r3, [r3, #12]
 8010992:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010996:	b9b8      	cbnz	r0, 80109c8 <_Balloc+0x68>
 8010998:	2101      	movs	r1, #1
 801099a:	fa01 f605 	lsl.w	r6, r1, r5
 801099e:	1d72      	adds	r2, r6, #5
 80109a0:	0092      	lsls	r2, r2, #2
 80109a2:	4620      	mov	r0, r4
 80109a4:	f000 fc9a 	bl	80112dc <_calloc_r>
 80109a8:	b160      	cbz	r0, 80109c4 <_Balloc+0x64>
 80109aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80109ae:	e00e      	b.n	80109ce <_Balloc+0x6e>
 80109b0:	2221      	movs	r2, #33	; 0x21
 80109b2:	2104      	movs	r1, #4
 80109b4:	4620      	mov	r0, r4
 80109b6:	f000 fc91 	bl	80112dc <_calloc_r>
 80109ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80109bc:	60f0      	str	r0, [r6, #12]
 80109be:	68db      	ldr	r3, [r3, #12]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d1e4      	bne.n	801098e <_Balloc+0x2e>
 80109c4:	2000      	movs	r0, #0
 80109c6:	bd70      	pop	{r4, r5, r6, pc}
 80109c8:	6802      	ldr	r2, [r0, #0]
 80109ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80109ce:	2300      	movs	r3, #0
 80109d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80109d4:	e7f7      	b.n	80109c6 <_Balloc+0x66>
 80109d6:	bf00      	nop
 80109d8:	08012866 	.word	0x08012866
 80109dc:	080129c8 	.word	0x080129c8

080109e0 <_Bfree>:
 80109e0:	b570      	push	{r4, r5, r6, lr}
 80109e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80109e4:	4605      	mov	r5, r0
 80109e6:	460c      	mov	r4, r1
 80109e8:	b976      	cbnz	r6, 8010a08 <_Bfree+0x28>
 80109ea:	2010      	movs	r0, #16
 80109ec:	f7ff ff90 	bl	8010910 <malloc>
 80109f0:	4602      	mov	r2, r0
 80109f2:	6268      	str	r0, [r5, #36]	; 0x24
 80109f4:	b920      	cbnz	r0, 8010a00 <_Bfree+0x20>
 80109f6:	4b09      	ldr	r3, [pc, #36]	; (8010a1c <_Bfree+0x3c>)
 80109f8:	4809      	ldr	r0, [pc, #36]	; (8010a20 <_Bfree+0x40>)
 80109fa:	218a      	movs	r1, #138	; 0x8a
 80109fc:	f001 f8aa 	bl	8011b54 <__assert_func>
 8010a00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010a04:	6006      	str	r6, [r0, #0]
 8010a06:	60c6      	str	r6, [r0, #12]
 8010a08:	b13c      	cbz	r4, 8010a1a <_Bfree+0x3a>
 8010a0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010a0c:	6862      	ldr	r2, [r4, #4]
 8010a0e:	68db      	ldr	r3, [r3, #12]
 8010a10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010a14:	6021      	str	r1, [r4, #0]
 8010a16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010a1a:	bd70      	pop	{r4, r5, r6, pc}
 8010a1c:	08012866 	.word	0x08012866
 8010a20:	080129c8 	.word	0x080129c8

08010a24 <__multadd>:
 8010a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a28:	690d      	ldr	r5, [r1, #16]
 8010a2a:	4607      	mov	r7, r0
 8010a2c:	460c      	mov	r4, r1
 8010a2e:	461e      	mov	r6, r3
 8010a30:	f101 0c14 	add.w	ip, r1, #20
 8010a34:	2000      	movs	r0, #0
 8010a36:	f8dc 3000 	ldr.w	r3, [ip]
 8010a3a:	b299      	uxth	r1, r3
 8010a3c:	fb02 6101 	mla	r1, r2, r1, r6
 8010a40:	0c1e      	lsrs	r6, r3, #16
 8010a42:	0c0b      	lsrs	r3, r1, #16
 8010a44:	fb02 3306 	mla	r3, r2, r6, r3
 8010a48:	b289      	uxth	r1, r1
 8010a4a:	3001      	adds	r0, #1
 8010a4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010a50:	4285      	cmp	r5, r0
 8010a52:	f84c 1b04 	str.w	r1, [ip], #4
 8010a56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010a5a:	dcec      	bgt.n	8010a36 <__multadd+0x12>
 8010a5c:	b30e      	cbz	r6, 8010aa2 <__multadd+0x7e>
 8010a5e:	68a3      	ldr	r3, [r4, #8]
 8010a60:	42ab      	cmp	r3, r5
 8010a62:	dc19      	bgt.n	8010a98 <__multadd+0x74>
 8010a64:	6861      	ldr	r1, [r4, #4]
 8010a66:	4638      	mov	r0, r7
 8010a68:	3101      	adds	r1, #1
 8010a6a:	f7ff ff79 	bl	8010960 <_Balloc>
 8010a6e:	4680      	mov	r8, r0
 8010a70:	b928      	cbnz	r0, 8010a7e <__multadd+0x5a>
 8010a72:	4602      	mov	r2, r0
 8010a74:	4b0c      	ldr	r3, [pc, #48]	; (8010aa8 <__multadd+0x84>)
 8010a76:	480d      	ldr	r0, [pc, #52]	; (8010aac <__multadd+0x88>)
 8010a78:	21b5      	movs	r1, #181	; 0xb5
 8010a7a:	f001 f86b 	bl	8011b54 <__assert_func>
 8010a7e:	6922      	ldr	r2, [r4, #16]
 8010a80:	3202      	adds	r2, #2
 8010a82:	f104 010c 	add.w	r1, r4, #12
 8010a86:	0092      	lsls	r2, r2, #2
 8010a88:	300c      	adds	r0, #12
 8010a8a:	f7ff ff5b 	bl	8010944 <memcpy>
 8010a8e:	4621      	mov	r1, r4
 8010a90:	4638      	mov	r0, r7
 8010a92:	f7ff ffa5 	bl	80109e0 <_Bfree>
 8010a96:	4644      	mov	r4, r8
 8010a98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010a9c:	3501      	adds	r5, #1
 8010a9e:	615e      	str	r6, [r3, #20]
 8010aa0:	6125      	str	r5, [r4, #16]
 8010aa2:	4620      	mov	r0, r4
 8010aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010aa8:	080128d8 	.word	0x080128d8
 8010aac:	080129c8 	.word	0x080129c8

08010ab0 <__s2b>:
 8010ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ab4:	460c      	mov	r4, r1
 8010ab6:	4615      	mov	r5, r2
 8010ab8:	461f      	mov	r7, r3
 8010aba:	2209      	movs	r2, #9
 8010abc:	3308      	adds	r3, #8
 8010abe:	4606      	mov	r6, r0
 8010ac0:	fb93 f3f2 	sdiv	r3, r3, r2
 8010ac4:	2100      	movs	r1, #0
 8010ac6:	2201      	movs	r2, #1
 8010ac8:	429a      	cmp	r2, r3
 8010aca:	db09      	blt.n	8010ae0 <__s2b+0x30>
 8010acc:	4630      	mov	r0, r6
 8010ace:	f7ff ff47 	bl	8010960 <_Balloc>
 8010ad2:	b940      	cbnz	r0, 8010ae6 <__s2b+0x36>
 8010ad4:	4602      	mov	r2, r0
 8010ad6:	4b19      	ldr	r3, [pc, #100]	; (8010b3c <__s2b+0x8c>)
 8010ad8:	4819      	ldr	r0, [pc, #100]	; (8010b40 <__s2b+0x90>)
 8010ada:	21ce      	movs	r1, #206	; 0xce
 8010adc:	f001 f83a 	bl	8011b54 <__assert_func>
 8010ae0:	0052      	lsls	r2, r2, #1
 8010ae2:	3101      	adds	r1, #1
 8010ae4:	e7f0      	b.n	8010ac8 <__s2b+0x18>
 8010ae6:	9b08      	ldr	r3, [sp, #32]
 8010ae8:	6143      	str	r3, [r0, #20]
 8010aea:	2d09      	cmp	r5, #9
 8010aec:	f04f 0301 	mov.w	r3, #1
 8010af0:	6103      	str	r3, [r0, #16]
 8010af2:	dd16      	ble.n	8010b22 <__s2b+0x72>
 8010af4:	f104 0909 	add.w	r9, r4, #9
 8010af8:	46c8      	mov	r8, r9
 8010afa:	442c      	add	r4, r5
 8010afc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010b00:	4601      	mov	r1, r0
 8010b02:	3b30      	subs	r3, #48	; 0x30
 8010b04:	220a      	movs	r2, #10
 8010b06:	4630      	mov	r0, r6
 8010b08:	f7ff ff8c 	bl	8010a24 <__multadd>
 8010b0c:	45a0      	cmp	r8, r4
 8010b0e:	d1f5      	bne.n	8010afc <__s2b+0x4c>
 8010b10:	f1a5 0408 	sub.w	r4, r5, #8
 8010b14:	444c      	add	r4, r9
 8010b16:	1b2d      	subs	r5, r5, r4
 8010b18:	1963      	adds	r3, r4, r5
 8010b1a:	42bb      	cmp	r3, r7
 8010b1c:	db04      	blt.n	8010b28 <__s2b+0x78>
 8010b1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b22:	340a      	adds	r4, #10
 8010b24:	2509      	movs	r5, #9
 8010b26:	e7f6      	b.n	8010b16 <__s2b+0x66>
 8010b28:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010b2c:	4601      	mov	r1, r0
 8010b2e:	3b30      	subs	r3, #48	; 0x30
 8010b30:	220a      	movs	r2, #10
 8010b32:	4630      	mov	r0, r6
 8010b34:	f7ff ff76 	bl	8010a24 <__multadd>
 8010b38:	e7ee      	b.n	8010b18 <__s2b+0x68>
 8010b3a:	bf00      	nop
 8010b3c:	080128d8 	.word	0x080128d8
 8010b40:	080129c8 	.word	0x080129c8

08010b44 <__hi0bits>:
 8010b44:	0c03      	lsrs	r3, r0, #16
 8010b46:	041b      	lsls	r3, r3, #16
 8010b48:	b9d3      	cbnz	r3, 8010b80 <__hi0bits+0x3c>
 8010b4a:	0400      	lsls	r0, r0, #16
 8010b4c:	2310      	movs	r3, #16
 8010b4e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010b52:	bf04      	itt	eq
 8010b54:	0200      	lsleq	r0, r0, #8
 8010b56:	3308      	addeq	r3, #8
 8010b58:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010b5c:	bf04      	itt	eq
 8010b5e:	0100      	lsleq	r0, r0, #4
 8010b60:	3304      	addeq	r3, #4
 8010b62:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010b66:	bf04      	itt	eq
 8010b68:	0080      	lsleq	r0, r0, #2
 8010b6a:	3302      	addeq	r3, #2
 8010b6c:	2800      	cmp	r0, #0
 8010b6e:	db05      	blt.n	8010b7c <__hi0bits+0x38>
 8010b70:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010b74:	f103 0301 	add.w	r3, r3, #1
 8010b78:	bf08      	it	eq
 8010b7a:	2320      	moveq	r3, #32
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	4770      	bx	lr
 8010b80:	2300      	movs	r3, #0
 8010b82:	e7e4      	b.n	8010b4e <__hi0bits+0xa>

08010b84 <__lo0bits>:
 8010b84:	6803      	ldr	r3, [r0, #0]
 8010b86:	f013 0207 	ands.w	r2, r3, #7
 8010b8a:	4601      	mov	r1, r0
 8010b8c:	d00b      	beq.n	8010ba6 <__lo0bits+0x22>
 8010b8e:	07da      	lsls	r2, r3, #31
 8010b90:	d423      	bmi.n	8010bda <__lo0bits+0x56>
 8010b92:	0798      	lsls	r0, r3, #30
 8010b94:	bf49      	itett	mi
 8010b96:	085b      	lsrmi	r3, r3, #1
 8010b98:	089b      	lsrpl	r3, r3, #2
 8010b9a:	2001      	movmi	r0, #1
 8010b9c:	600b      	strmi	r3, [r1, #0]
 8010b9e:	bf5c      	itt	pl
 8010ba0:	600b      	strpl	r3, [r1, #0]
 8010ba2:	2002      	movpl	r0, #2
 8010ba4:	4770      	bx	lr
 8010ba6:	b298      	uxth	r0, r3
 8010ba8:	b9a8      	cbnz	r0, 8010bd6 <__lo0bits+0x52>
 8010baa:	0c1b      	lsrs	r3, r3, #16
 8010bac:	2010      	movs	r0, #16
 8010bae:	b2da      	uxtb	r2, r3
 8010bb0:	b90a      	cbnz	r2, 8010bb6 <__lo0bits+0x32>
 8010bb2:	3008      	adds	r0, #8
 8010bb4:	0a1b      	lsrs	r3, r3, #8
 8010bb6:	071a      	lsls	r2, r3, #28
 8010bb8:	bf04      	itt	eq
 8010bba:	091b      	lsreq	r3, r3, #4
 8010bbc:	3004      	addeq	r0, #4
 8010bbe:	079a      	lsls	r2, r3, #30
 8010bc0:	bf04      	itt	eq
 8010bc2:	089b      	lsreq	r3, r3, #2
 8010bc4:	3002      	addeq	r0, #2
 8010bc6:	07da      	lsls	r2, r3, #31
 8010bc8:	d403      	bmi.n	8010bd2 <__lo0bits+0x4e>
 8010bca:	085b      	lsrs	r3, r3, #1
 8010bcc:	f100 0001 	add.w	r0, r0, #1
 8010bd0:	d005      	beq.n	8010bde <__lo0bits+0x5a>
 8010bd2:	600b      	str	r3, [r1, #0]
 8010bd4:	4770      	bx	lr
 8010bd6:	4610      	mov	r0, r2
 8010bd8:	e7e9      	b.n	8010bae <__lo0bits+0x2a>
 8010bda:	2000      	movs	r0, #0
 8010bdc:	4770      	bx	lr
 8010bde:	2020      	movs	r0, #32
 8010be0:	4770      	bx	lr
	...

08010be4 <__i2b>:
 8010be4:	b510      	push	{r4, lr}
 8010be6:	460c      	mov	r4, r1
 8010be8:	2101      	movs	r1, #1
 8010bea:	f7ff feb9 	bl	8010960 <_Balloc>
 8010bee:	4602      	mov	r2, r0
 8010bf0:	b928      	cbnz	r0, 8010bfe <__i2b+0x1a>
 8010bf2:	4b05      	ldr	r3, [pc, #20]	; (8010c08 <__i2b+0x24>)
 8010bf4:	4805      	ldr	r0, [pc, #20]	; (8010c0c <__i2b+0x28>)
 8010bf6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010bfa:	f000 ffab 	bl	8011b54 <__assert_func>
 8010bfe:	2301      	movs	r3, #1
 8010c00:	6144      	str	r4, [r0, #20]
 8010c02:	6103      	str	r3, [r0, #16]
 8010c04:	bd10      	pop	{r4, pc}
 8010c06:	bf00      	nop
 8010c08:	080128d8 	.word	0x080128d8
 8010c0c:	080129c8 	.word	0x080129c8

08010c10 <__multiply>:
 8010c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c14:	4691      	mov	r9, r2
 8010c16:	690a      	ldr	r2, [r1, #16]
 8010c18:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010c1c:	429a      	cmp	r2, r3
 8010c1e:	bfb8      	it	lt
 8010c20:	460b      	movlt	r3, r1
 8010c22:	460c      	mov	r4, r1
 8010c24:	bfbc      	itt	lt
 8010c26:	464c      	movlt	r4, r9
 8010c28:	4699      	movlt	r9, r3
 8010c2a:	6927      	ldr	r7, [r4, #16]
 8010c2c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010c30:	68a3      	ldr	r3, [r4, #8]
 8010c32:	6861      	ldr	r1, [r4, #4]
 8010c34:	eb07 060a 	add.w	r6, r7, sl
 8010c38:	42b3      	cmp	r3, r6
 8010c3a:	b085      	sub	sp, #20
 8010c3c:	bfb8      	it	lt
 8010c3e:	3101      	addlt	r1, #1
 8010c40:	f7ff fe8e 	bl	8010960 <_Balloc>
 8010c44:	b930      	cbnz	r0, 8010c54 <__multiply+0x44>
 8010c46:	4602      	mov	r2, r0
 8010c48:	4b44      	ldr	r3, [pc, #272]	; (8010d5c <__multiply+0x14c>)
 8010c4a:	4845      	ldr	r0, [pc, #276]	; (8010d60 <__multiply+0x150>)
 8010c4c:	f240 115d 	movw	r1, #349	; 0x15d
 8010c50:	f000 ff80 	bl	8011b54 <__assert_func>
 8010c54:	f100 0514 	add.w	r5, r0, #20
 8010c58:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010c5c:	462b      	mov	r3, r5
 8010c5e:	2200      	movs	r2, #0
 8010c60:	4543      	cmp	r3, r8
 8010c62:	d321      	bcc.n	8010ca8 <__multiply+0x98>
 8010c64:	f104 0314 	add.w	r3, r4, #20
 8010c68:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010c6c:	f109 0314 	add.w	r3, r9, #20
 8010c70:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010c74:	9202      	str	r2, [sp, #8]
 8010c76:	1b3a      	subs	r2, r7, r4
 8010c78:	3a15      	subs	r2, #21
 8010c7a:	f022 0203 	bic.w	r2, r2, #3
 8010c7e:	3204      	adds	r2, #4
 8010c80:	f104 0115 	add.w	r1, r4, #21
 8010c84:	428f      	cmp	r7, r1
 8010c86:	bf38      	it	cc
 8010c88:	2204      	movcc	r2, #4
 8010c8a:	9201      	str	r2, [sp, #4]
 8010c8c:	9a02      	ldr	r2, [sp, #8]
 8010c8e:	9303      	str	r3, [sp, #12]
 8010c90:	429a      	cmp	r2, r3
 8010c92:	d80c      	bhi.n	8010cae <__multiply+0x9e>
 8010c94:	2e00      	cmp	r6, #0
 8010c96:	dd03      	ble.n	8010ca0 <__multiply+0x90>
 8010c98:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d05a      	beq.n	8010d56 <__multiply+0x146>
 8010ca0:	6106      	str	r6, [r0, #16]
 8010ca2:	b005      	add	sp, #20
 8010ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ca8:	f843 2b04 	str.w	r2, [r3], #4
 8010cac:	e7d8      	b.n	8010c60 <__multiply+0x50>
 8010cae:	f8b3 a000 	ldrh.w	sl, [r3]
 8010cb2:	f1ba 0f00 	cmp.w	sl, #0
 8010cb6:	d024      	beq.n	8010d02 <__multiply+0xf2>
 8010cb8:	f104 0e14 	add.w	lr, r4, #20
 8010cbc:	46a9      	mov	r9, r5
 8010cbe:	f04f 0c00 	mov.w	ip, #0
 8010cc2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010cc6:	f8d9 1000 	ldr.w	r1, [r9]
 8010cca:	fa1f fb82 	uxth.w	fp, r2
 8010cce:	b289      	uxth	r1, r1
 8010cd0:	fb0a 110b 	mla	r1, sl, fp, r1
 8010cd4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010cd8:	f8d9 2000 	ldr.w	r2, [r9]
 8010cdc:	4461      	add	r1, ip
 8010cde:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010ce2:	fb0a c20b 	mla	r2, sl, fp, ip
 8010ce6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010cea:	b289      	uxth	r1, r1
 8010cec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010cf0:	4577      	cmp	r7, lr
 8010cf2:	f849 1b04 	str.w	r1, [r9], #4
 8010cf6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010cfa:	d8e2      	bhi.n	8010cc2 <__multiply+0xb2>
 8010cfc:	9a01      	ldr	r2, [sp, #4]
 8010cfe:	f845 c002 	str.w	ip, [r5, r2]
 8010d02:	9a03      	ldr	r2, [sp, #12]
 8010d04:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010d08:	3304      	adds	r3, #4
 8010d0a:	f1b9 0f00 	cmp.w	r9, #0
 8010d0e:	d020      	beq.n	8010d52 <__multiply+0x142>
 8010d10:	6829      	ldr	r1, [r5, #0]
 8010d12:	f104 0c14 	add.w	ip, r4, #20
 8010d16:	46ae      	mov	lr, r5
 8010d18:	f04f 0a00 	mov.w	sl, #0
 8010d1c:	f8bc b000 	ldrh.w	fp, [ip]
 8010d20:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010d24:	fb09 220b 	mla	r2, r9, fp, r2
 8010d28:	4492      	add	sl, r2
 8010d2a:	b289      	uxth	r1, r1
 8010d2c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010d30:	f84e 1b04 	str.w	r1, [lr], #4
 8010d34:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010d38:	f8be 1000 	ldrh.w	r1, [lr]
 8010d3c:	0c12      	lsrs	r2, r2, #16
 8010d3e:	fb09 1102 	mla	r1, r9, r2, r1
 8010d42:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010d46:	4567      	cmp	r7, ip
 8010d48:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010d4c:	d8e6      	bhi.n	8010d1c <__multiply+0x10c>
 8010d4e:	9a01      	ldr	r2, [sp, #4]
 8010d50:	50a9      	str	r1, [r5, r2]
 8010d52:	3504      	adds	r5, #4
 8010d54:	e79a      	b.n	8010c8c <__multiply+0x7c>
 8010d56:	3e01      	subs	r6, #1
 8010d58:	e79c      	b.n	8010c94 <__multiply+0x84>
 8010d5a:	bf00      	nop
 8010d5c:	080128d8 	.word	0x080128d8
 8010d60:	080129c8 	.word	0x080129c8

08010d64 <__pow5mult>:
 8010d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d68:	4615      	mov	r5, r2
 8010d6a:	f012 0203 	ands.w	r2, r2, #3
 8010d6e:	4606      	mov	r6, r0
 8010d70:	460f      	mov	r7, r1
 8010d72:	d007      	beq.n	8010d84 <__pow5mult+0x20>
 8010d74:	4c25      	ldr	r4, [pc, #148]	; (8010e0c <__pow5mult+0xa8>)
 8010d76:	3a01      	subs	r2, #1
 8010d78:	2300      	movs	r3, #0
 8010d7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010d7e:	f7ff fe51 	bl	8010a24 <__multadd>
 8010d82:	4607      	mov	r7, r0
 8010d84:	10ad      	asrs	r5, r5, #2
 8010d86:	d03d      	beq.n	8010e04 <__pow5mult+0xa0>
 8010d88:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010d8a:	b97c      	cbnz	r4, 8010dac <__pow5mult+0x48>
 8010d8c:	2010      	movs	r0, #16
 8010d8e:	f7ff fdbf 	bl	8010910 <malloc>
 8010d92:	4602      	mov	r2, r0
 8010d94:	6270      	str	r0, [r6, #36]	; 0x24
 8010d96:	b928      	cbnz	r0, 8010da4 <__pow5mult+0x40>
 8010d98:	4b1d      	ldr	r3, [pc, #116]	; (8010e10 <__pow5mult+0xac>)
 8010d9a:	481e      	ldr	r0, [pc, #120]	; (8010e14 <__pow5mult+0xb0>)
 8010d9c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010da0:	f000 fed8 	bl	8011b54 <__assert_func>
 8010da4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010da8:	6004      	str	r4, [r0, #0]
 8010daa:	60c4      	str	r4, [r0, #12]
 8010dac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010db0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010db4:	b94c      	cbnz	r4, 8010dca <__pow5mult+0x66>
 8010db6:	f240 2171 	movw	r1, #625	; 0x271
 8010dba:	4630      	mov	r0, r6
 8010dbc:	f7ff ff12 	bl	8010be4 <__i2b>
 8010dc0:	2300      	movs	r3, #0
 8010dc2:	f8c8 0008 	str.w	r0, [r8, #8]
 8010dc6:	4604      	mov	r4, r0
 8010dc8:	6003      	str	r3, [r0, #0]
 8010dca:	f04f 0900 	mov.w	r9, #0
 8010dce:	07eb      	lsls	r3, r5, #31
 8010dd0:	d50a      	bpl.n	8010de8 <__pow5mult+0x84>
 8010dd2:	4639      	mov	r1, r7
 8010dd4:	4622      	mov	r2, r4
 8010dd6:	4630      	mov	r0, r6
 8010dd8:	f7ff ff1a 	bl	8010c10 <__multiply>
 8010ddc:	4639      	mov	r1, r7
 8010dde:	4680      	mov	r8, r0
 8010de0:	4630      	mov	r0, r6
 8010de2:	f7ff fdfd 	bl	80109e0 <_Bfree>
 8010de6:	4647      	mov	r7, r8
 8010de8:	106d      	asrs	r5, r5, #1
 8010dea:	d00b      	beq.n	8010e04 <__pow5mult+0xa0>
 8010dec:	6820      	ldr	r0, [r4, #0]
 8010dee:	b938      	cbnz	r0, 8010e00 <__pow5mult+0x9c>
 8010df0:	4622      	mov	r2, r4
 8010df2:	4621      	mov	r1, r4
 8010df4:	4630      	mov	r0, r6
 8010df6:	f7ff ff0b 	bl	8010c10 <__multiply>
 8010dfa:	6020      	str	r0, [r4, #0]
 8010dfc:	f8c0 9000 	str.w	r9, [r0]
 8010e00:	4604      	mov	r4, r0
 8010e02:	e7e4      	b.n	8010dce <__pow5mult+0x6a>
 8010e04:	4638      	mov	r0, r7
 8010e06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e0a:	bf00      	nop
 8010e0c:	08012b18 	.word	0x08012b18
 8010e10:	08012866 	.word	0x08012866
 8010e14:	080129c8 	.word	0x080129c8

08010e18 <__lshift>:
 8010e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e1c:	460c      	mov	r4, r1
 8010e1e:	6849      	ldr	r1, [r1, #4]
 8010e20:	6923      	ldr	r3, [r4, #16]
 8010e22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010e26:	68a3      	ldr	r3, [r4, #8]
 8010e28:	4607      	mov	r7, r0
 8010e2a:	4691      	mov	r9, r2
 8010e2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010e30:	f108 0601 	add.w	r6, r8, #1
 8010e34:	42b3      	cmp	r3, r6
 8010e36:	db0b      	blt.n	8010e50 <__lshift+0x38>
 8010e38:	4638      	mov	r0, r7
 8010e3a:	f7ff fd91 	bl	8010960 <_Balloc>
 8010e3e:	4605      	mov	r5, r0
 8010e40:	b948      	cbnz	r0, 8010e56 <__lshift+0x3e>
 8010e42:	4602      	mov	r2, r0
 8010e44:	4b2a      	ldr	r3, [pc, #168]	; (8010ef0 <__lshift+0xd8>)
 8010e46:	482b      	ldr	r0, [pc, #172]	; (8010ef4 <__lshift+0xdc>)
 8010e48:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010e4c:	f000 fe82 	bl	8011b54 <__assert_func>
 8010e50:	3101      	adds	r1, #1
 8010e52:	005b      	lsls	r3, r3, #1
 8010e54:	e7ee      	b.n	8010e34 <__lshift+0x1c>
 8010e56:	2300      	movs	r3, #0
 8010e58:	f100 0114 	add.w	r1, r0, #20
 8010e5c:	f100 0210 	add.w	r2, r0, #16
 8010e60:	4618      	mov	r0, r3
 8010e62:	4553      	cmp	r3, sl
 8010e64:	db37      	blt.n	8010ed6 <__lshift+0xbe>
 8010e66:	6920      	ldr	r0, [r4, #16]
 8010e68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010e6c:	f104 0314 	add.w	r3, r4, #20
 8010e70:	f019 091f 	ands.w	r9, r9, #31
 8010e74:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010e78:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010e7c:	d02f      	beq.n	8010ede <__lshift+0xc6>
 8010e7e:	f1c9 0e20 	rsb	lr, r9, #32
 8010e82:	468a      	mov	sl, r1
 8010e84:	f04f 0c00 	mov.w	ip, #0
 8010e88:	681a      	ldr	r2, [r3, #0]
 8010e8a:	fa02 f209 	lsl.w	r2, r2, r9
 8010e8e:	ea42 020c 	orr.w	r2, r2, ip
 8010e92:	f84a 2b04 	str.w	r2, [sl], #4
 8010e96:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e9a:	4298      	cmp	r0, r3
 8010e9c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010ea0:	d8f2      	bhi.n	8010e88 <__lshift+0x70>
 8010ea2:	1b03      	subs	r3, r0, r4
 8010ea4:	3b15      	subs	r3, #21
 8010ea6:	f023 0303 	bic.w	r3, r3, #3
 8010eaa:	3304      	adds	r3, #4
 8010eac:	f104 0215 	add.w	r2, r4, #21
 8010eb0:	4290      	cmp	r0, r2
 8010eb2:	bf38      	it	cc
 8010eb4:	2304      	movcc	r3, #4
 8010eb6:	f841 c003 	str.w	ip, [r1, r3]
 8010eba:	f1bc 0f00 	cmp.w	ip, #0
 8010ebe:	d001      	beq.n	8010ec4 <__lshift+0xac>
 8010ec0:	f108 0602 	add.w	r6, r8, #2
 8010ec4:	3e01      	subs	r6, #1
 8010ec6:	4638      	mov	r0, r7
 8010ec8:	612e      	str	r6, [r5, #16]
 8010eca:	4621      	mov	r1, r4
 8010ecc:	f7ff fd88 	bl	80109e0 <_Bfree>
 8010ed0:	4628      	mov	r0, r5
 8010ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ed6:	f842 0f04 	str.w	r0, [r2, #4]!
 8010eda:	3301      	adds	r3, #1
 8010edc:	e7c1      	b.n	8010e62 <__lshift+0x4a>
 8010ede:	3904      	subs	r1, #4
 8010ee0:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ee4:	f841 2f04 	str.w	r2, [r1, #4]!
 8010ee8:	4298      	cmp	r0, r3
 8010eea:	d8f9      	bhi.n	8010ee0 <__lshift+0xc8>
 8010eec:	e7ea      	b.n	8010ec4 <__lshift+0xac>
 8010eee:	bf00      	nop
 8010ef0:	080128d8 	.word	0x080128d8
 8010ef4:	080129c8 	.word	0x080129c8

08010ef8 <__mcmp>:
 8010ef8:	b530      	push	{r4, r5, lr}
 8010efa:	6902      	ldr	r2, [r0, #16]
 8010efc:	690c      	ldr	r4, [r1, #16]
 8010efe:	1b12      	subs	r2, r2, r4
 8010f00:	d10e      	bne.n	8010f20 <__mcmp+0x28>
 8010f02:	f100 0314 	add.w	r3, r0, #20
 8010f06:	3114      	adds	r1, #20
 8010f08:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010f0c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010f10:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010f14:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010f18:	42a5      	cmp	r5, r4
 8010f1a:	d003      	beq.n	8010f24 <__mcmp+0x2c>
 8010f1c:	d305      	bcc.n	8010f2a <__mcmp+0x32>
 8010f1e:	2201      	movs	r2, #1
 8010f20:	4610      	mov	r0, r2
 8010f22:	bd30      	pop	{r4, r5, pc}
 8010f24:	4283      	cmp	r3, r0
 8010f26:	d3f3      	bcc.n	8010f10 <__mcmp+0x18>
 8010f28:	e7fa      	b.n	8010f20 <__mcmp+0x28>
 8010f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8010f2e:	e7f7      	b.n	8010f20 <__mcmp+0x28>

08010f30 <__mdiff>:
 8010f30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f34:	460c      	mov	r4, r1
 8010f36:	4606      	mov	r6, r0
 8010f38:	4611      	mov	r1, r2
 8010f3a:	4620      	mov	r0, r4
 8010f3c:	4690      	mov	r8, r2
 8010f3e:	f7ff ffdb 	bl	8010ef8 <__mcmp>
 8010f42:	1e05      	subs	r5, r0, #0
 8010f44:	d110      	bne.n	8010f68 <__mdiff+0x38>
 8010f46:	4629      	mov	r1, r5
 8010f48:	4630      	mov	r0, r6
 8010f4a:	f7ff fd09 	bl	8010960 <_Balloc>
 8010f4e:	b930      	cbnz	r0, 8010f5e <__mdiff+0x2e>
 8010f50:	4b3a      	ldr	r3, [pc, #232]	; (801103c <__mdiff+0x10c>)
 8010f52:	4602      	mov	r2, r0
 8010f54:	f240 2132 	movw	r1, #562	; 0x232
 8010f58:	4839      	ldr	r0, [pc, #228]	; (8011040 <__mdiff+0x110>)
 8010f5a:	f000 fdfb 	bl	8011b54 <__assert_func>
 8010f5e:	2301      	movs	r3, #1
 8010f60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010f64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f68:	bfa4      	itt	ge
 8010f6a:	4643      	movge	r3, r8
 8010f6c:	46a0      	movge	r8, r4
 8010f6e:	4630      	mov	r0, r6
 8010f70:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010f74:	bfa6      	itte	ge
 8010f76:	461c      	movge	r4, r3
 8010f78:	2500      	movge	r5, #0
 8010f7a:	2501      	movlt	r5, #1
 8010f7c:	f7ff fcf0 	bl	8010960 <_Balloc>
 8010f80:	b920      	cbnz	r0, 8010f8c <__mdiff+0x5c>
 8010f82:	4b2e      	ldr	r3, [pc, #184]	; (801103c <__mdiff+0x10c>)
 8010f84:	4602      	mov	r2, r0
 8010f86:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010f8a:	e7e5      	b.n	8010f58 <__mdiff+0x28>
 8010f8c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010f90:	6926      	ldr	r6, [r4, #16]
 8010f92:	60c5      	str	r5, [r0, #12]
 8010f94:	f104 0914 	add.w	r9, r4, #20
 8010f98:	f108 0514 	add.w	r5, r8, #20
 8010f9c:	f100 0e14 	add.w	lr, r0, #20
 8010fa0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010fa4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010fa8:	f108 0210 	add.w	r2, r8, #16
 8010fac:	46f2      	mov	sl, lr
 8010fae:	2100      	movs	r1, #0
 8010fb0:	f859 3b04 	ldr.w	r3, [r9], #4
 8010fb4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010fb8:	fa1f f883 	uxth.w	r8, r3
 8010fbc:	fa11 f18b 	uxtah	r1, r1, fp
 8010fc0:	0c1b      	lsrs	r3, r3, #16
 8010fc2:	eba1 0808 	sub.w	r8, r1, r8
 8010fc6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010fca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010fce:	fa1f f888 	uxth.w	r8, r8
 8010fd2:	1419      	asrs	r1, r3, #16
 8010fd4:	454e      	cmp	r6, r9
 8010fd6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010fda:	f84a 3b04 	str.w	r3, [sl], #4
 8010fde:	d8e7      	bhi.n	8010fb0 <__mdiff+0x80>
 8010fe0:	1b33      	subs	r3, r6, r4
 8010fe2:	3b15      	subs	r3, #21
 8010fe4:	f023 0303 	bic.w	r3, r3, #3
 8010fe8:	3304      	adds	r3, #4
 8010fea:	3415      	adds	r4, #21
 8010fec:	42a6      	cmp	r6, r4
 8010fee:	bf38      	it	cc
 8010ff0:	2304      	movcc	r3, #4
 8010ff2:	441d      	add	r5, r3
 8010ff4:	4473      	add	r3, lr
 8010ff6:	469e      	mov	lr, r3
 8010ff8:	462e      	mov	r6, r5
 8010ffa:	4566      	cmp	r6, ip
 8010ffc:	d30e      	bcc.n	801101c <__mdiff+0xec>
 8010ffe:	f10c 0203 	add.w	r2, ip, #3
 8011002:	1b52      	subs	r2, r2, r5
 8011004:	f022 0203 	bic.w	r2, r2, #3
 8011008:	3d03      	subs	r5, #3
 801100a:	45ac      	cmp	ip, r5
 801100c:	bf38      	it	cc
 801100e:	2200      	movcc	r2, #0
 8011010:	441a      	add	r2, r3
 8011012:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011016:	b17b      	cbz	r3, 8011038 <__mdiff+0x108>
 8011018:	6107      	str	r7, [r0, #16]
 801101a:	e7a3      	b.n	8010f64 <__mdiff+0x34>
 801101c:	f856 8b04 	ldr.w	r8, [r6], #4
 8011020:	fa11 f288 	uxtah	r2, r1, r8
 8011024:	1414      	asrs	r4, r2, #16
 8011026:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801102a:	b292      	uxth	r2, r2
 801102c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011030:	f84e 2b04 	str.w	r2, [lr], #4
 8011034:	1421      	asrs	r1, r4, #16
 8011036:	e7e0      	b.n	8010ffa <__mdiff+0xca>
 8011038:	3f01      	subs	r7, #1
 801103a:	e7ea      	b.n	8011012 <__mdiff+0xe2>
 801103c:	080128d8 	.word	0x080128d8
 8011040:	080129c8 	.word	0x080129c8

08011044 <__ulp>:
 8011044:	b082      	sub	sp, #8
 8011046:	ed8d 0b00 	vstr	d0, [sp]
 801104a:	9b01      	ldr	r3, [sp, #4]
 801104c:	4912      	ldr	r1, [pc, #72]	; (8011098 <__ulp+0x54>)
 801104e:	4019      	ands	r1, r3
 8011050:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8011054:	2900      	cmp	r1, #0
 8011056:	dd05      	ble.n	8011064 <__ulp+0x20>
 8011058:	2200      	movs	r2, #0
 801105a:	460b      	mov	r3, r1
 801105c:	ec43 2b10 	vmov	d0, r2, r3
 8011060:	b002      	add	sp, #8
 8011062:	4770      	bx	lr
 8011064:	4249      	negs	r1, r1
 8011066:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801106a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801106e:	f04f 0200 	mov.w	r2, #0
 8011072:	f04f 0300 	mov.w	r3, #0
 8011076:	da04      	bge.n	8011082 <__ulp+0x3e>
 8011078:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801107c:	fa41 f300 	asr.w	r3, r1, r0
 8011080:	e7ec      	b.n	801105c <__ulp+0x18>
 8011082:	f1a0 0114 	sub.w	r1, r0, #20
 8011086:	291e      	cmp	r1, #30
 8011088:	bfda      	itte	le
 801108a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801108e:	fa20 f101 	lsrle.w	r1, r0, r1
 8011092:	2101      	movgt	r1, #1
 8011094:	460a      	mov	r2, r1
 8011096:	e7e1      	b.n	801105c <__ulp+0x18>
 8011098:	7ff00000 	.word	0x7ff00000

0801109c <__b2d>:
 801109c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801109e:	6905      	ldr	r5, [r0, #16]
 80110a0:	f100 0714 	add.w	r7, r0, #20
 80110a4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80110a8:	1f2e      	subs	r6, r5, #4
 80110aa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80110ae:	4620      	mov	r0, r4
 80110b0:	f7ff fd48 	bl	8010b44 <__hi0bits>
 80110b4:	f1c0 0320 	rsb	r3, r0, #32
 80110b8:	280a      	cmp	r0, #10
 80110ba:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8011138 <__b2d+0x9c>
 80110be:	600b      	str	r3, [r1, #0]
 80110c0:	dc14      	bgt.n	80110ec <__b2d+0x50>
 80110c2:	f1c0 0e0b 	rsb	lr, r0, #11
 80110c6:	fa24 f10e 	lsr.w	r1, r4, lr
 80110ca:	42b7      	cmp	r7, r6
 80110cc:	ea41 030c 	orr.w	r3, r1, ip
 80110d0:	bf34      	ite	cc
 80110d2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80110d6:	2100      	movcs	r1, #0
 80110d8:	3015      	adds	r0, #21
 80110da:	fa04 f000 	lsl.w	r0, r4, r0
 80110de:	fa21 f10e 	lsr.w	r1, r1, lr
 80110e2:	ea40 0201 	orr.w	r2, r0, r1
 80110e6:	ec43 2b10 	vmov	d0, r2, r3
 80110ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110ec:	42b7      	cmp	r7, r6
 80110ee:	bf3a      	itte	cc
 80110f0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80110f4:	f1a5 0608 	subcc.w	r6, r5, #8
 80110f8:	2100      	movcs	r1, #0
 80110fa:	380b      	subs	r0, #11
 80110fc:	d017      	beq.n	801112e <__b2d+0x92>
 80110fe:	f1c0 0c20 	rsb	ip, r0, #32
 8011102:	fa04 f500 	lsl.w	r5, r4, r0
 8011106:	42be      	cmp	r6, r7
 8011108:	fa21 f40c 	lsr.w	r4, r1, ip
 801110c:	ea45 0504 	orr.w	r5, r5, r4
 8011110:	bf8c      	ite	hi
 8011112:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8011116:	2400      	movls	r4, #0
 8011118:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801111c:	fa01 f000 	lsl.w	r0, r1, r0
 8011120:	fa24 f40c 	lsr.w	r4, r4, ip
 8011124:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011128:	ea40 0204 	orr.w	r2, r0, r4
 801112c:	e7db      	b.n	80110e6 <__b2d+0x4a>
 801112e:	ea44 030c 	orr.w	r3, r4, ip
 8011132:	460a      	mov	r2, r1
 8011134:	e7d7      	b.n	80110e6 <__b2d+0x4a>
 8011136:	bf00      	nop
 8011138:	3ff00000 	.word	0x3ff00000

0801113c <__d2b>:
 801113c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011140:	4689      	mov	r9, r1
 8011142:	2101      	movs	r1, #1
 8011144:	ec57 6b10 	vmov	r6, r7, d0
 8011148:	4690      	mov	r8, r2
 801114a:	f7ff fc09 	bl	8010960 <_Balloc>
 801114e:	4604      	mov	r4, r0
 8011150:	b930      	cbnz	r0, 8011160 <__d2b+0x24>
 8011152:	4602      	mov	r2, r0
 8011154:	4b25      	ldr	r3, [pc, #148]	; (80111ec <__d2b+0xb0>)
 8011156:	4826      	ldr	r0, [pc, #152]	; (80111f0 <__d2b+0xb4>)
 8011158:	f240 310a 	movw	r1, #778	; 0x30a
 801115c:	f000 fcfa 	bl	8011b54 <__assert_func>
 8011160:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011164:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011168:	bb35      	cbnz	r5, 80111b8 <__d2b+0x7c>
 801116a:	2e00      	cmp	r6, #0
 801116c:	9301      	str	r3, [sp, #4]
 801116e:	d028      	beq.n	80111c2 <__d2b+0x86>
 8011170:	4668      	mov	r0, sp
 8011172:	9600      	str	r6, [sp, #0]
 8011174:	f7ff fd06 	bl	8010b84 <__lo0bits>
 8011178:	9900      	ldr	r1, [sp, #0]
 801117a:	b300      	cbz	r0, 80111be <__d2b+0x82>
 801117c:	9a01      	ldr	r2, [sp, #4]
 801117e:	f1c0 0320 	rsb	r3, r0, #32
 8011182:	fa02 f303 	lsl.w	r3, r2, r3
 8011186:	430b      	orrs	r3, r1
 8011188:	40c2      	lsrs	r2, r0
 801118a:	6163      	str	r3, [r4, #20]
 801118c:	9201      	str	r2, [sp, #4]
 801118e:	9b01      	ldr	r3, [sp, #4]
 8011190:	61a3      	str	r3, [r4, #24]
 8011192:	2b00      	cmp	r3, #0
 8011194:	bf14      	ite	ne
 8011196:	2202      	movne	r2, #2
 8011198:	2201      	moveq	r2, #1
 801119a:	6122      	str	r2, [r4, #16]
 801119c:	b1d5      	cbz	r5, 80111d4 <__d2b+0x98>
 801119e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80111a2:	4405      	add	r5, r0
 80111a4:	f8c9 5000 	str.w	r5, [r9]
 80111a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80111ac:	f8c8 0000 	str.w	r0, [r8]
 80111b0:	4620      	mov	r0, r4
 80111b2:	b003      	add	sp, #12
 80111b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80111b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80111bc:	e7d5      	b.n	801116a <__d2b+0x2e>
 80111be:	6161      	str	r1, [r4, #20]
 80111c0:	e7e5      	b.n	801118e <__d2b+0x52>
 80111c2:	a801      	add	r0, sp, #4
 80111c4:	f7ff fcde 	bl	8010b84 <__lo0bits>
 80111c8:	9b01      	ldr	r3, [sp, #4]
 80111ca:	6163      	str	r3, [r4, #20]
 80111cc:	2201      	movs	r2, #1
 80111ce:	6122      	str	r2, [r4, #16]
 80111d0:	3020      	adds	r0, #32
 80111d2:	e7e3      	b.n	801119c <__d2b+0x60>
 80111d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80111d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80111dc:	f8c9 0000 	str.w	r0, [r9]
 80111e0:	6918      	ldr	r0, [r3, #16]
 80111e2:	f7ff fcaf 	bl	8010b44 <__hi0bits>
 80111e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80111ea:	e7df      	b.n	80111ac <__d2b+0x70>
 80111ec:	080128d8 	.word	0x080128d8
 80111f0:	080129c8 	.word	0x080129c8

080111f4 <__ratio>:
 80111f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111f8:	4688      	mov	r8, r1
 80111fa:	4669      	mov	r1, sp
 80111fc:	4681      	mov	r9, r0
 80111fe:	f7ff ff4d 	bl	801109c <__b2d>
 8011202:	a901      	add	r1, sp, #4
 8011204:	4640      	mov	r0, r8
 8011206:	ec55 4b10 	vmov	r4, r5, d0
 801120a:	ee10 aa10 	vmov	sl, s0
 801120e:	f7ff ff45 	bl	801109c <__b2d>
 8011212:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011216:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801121a:	1a59      	subs	r1, r3, r1
 801121c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011220:	1ad3      	subs	r3, r2, r3
 8011222:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011226:	ec57 6b10 	vmov	r6, r7, d0
 801122a:	2b00      	cmp	r3, #0
 801122c:	bfd6      	itet	le
 801122e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011232:	462a      	movgt	r2, r5
 8011234:	463a      	movle	r2, r7
 8011236:	46ab      	mov	fp, r5
 8011238:	bfd6      	itet	le
 801123a:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801123e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8011242:	ee00 3a90 	vmovle	s1, r3
 8011246:	ec4b ab17 	vmov	d7, sl, fp
 801124a:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801124e:	b003      	add	sp, #12
 8011250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011254 <__copybits>:
 8011254:	3901      	subs	r1, #1
 8011256:	b570      	push	{r4, r5, r6, lr}
 8011258:	1149      	asrs	r1, r1, #5
 801125a:	6914      	ldr	r4, [r2, #16]
 801125c:	3101      	adds	r1, #1
 801125e:	f102 0314 	add.w	r3, r2, #20
 8011262:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011266:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801126a:	1f05      	subs	r5, r0, #4
 801126c:	42a3      	cmp	r3, r4
 801126e:	d30c      	bcc.n	801128a <__copybits+0x36>
 8011270:	1aa3      	subs	r3, r4, r2
 8011272:	3b11      	subs	r3, #17
 8011274:	f023 0303 	bic.w	r3, r3, #3
 8011278:	3211      	adds	r2, #17
 801127a:	42a2      	cmp	r2, r4
 801127c:	bf88      	it	hi
 801127e:	2300      	movhi	r3, #0
 8011280:	4418      	add	r0, r3
 8011282:	2300      	movs	r3, #0
 8011284:	4288      	cmp	r0, r1
 8011286:	d305      	bcc.n	8011294 <__copybits+0x40>
 8011288:	bd70      	pop	{r4, r5, r6, pc}
 801128a:	f853 6b04 	ldr.w	r6, [r3], #4
 801128e:	f845 6f04 	str.w	r6, [r5, #4]!
 8011292:	e7eb      	b.n	801126c <__copybits+0x18>
 8011294:	f840 3b04 	str.w	r3, [r0], #4
 8011298:	e7f4      	b.n	8011284 <__copybits+0x30>

0801129a <__any_on>:
 801129a:	f100 0214 	add.w	r2, r0, #20
 801129e:	6900      	ldr	r0, [r0, #16]
 80112a0:	114b      	asrs	r3, r1, #5
 80112a2:	4298      	cmp	r0, r3
 80112a4:	b510      	push	{r4, lr}
 80112a6:	db11      	blt.n	80112cc <__any_on+0x32>
 80112a8:	dd0a      	ble.n	80112c0 <__any_on+0x26>
 80112aa:	f011 011f 	ands.w	r1, r1, #31
 80112ae:	d007      	beq.n	80112c0 <__any_on+0x26>
 80112b0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80112b4:	fa24 f001 	lsr.w	r0, r4, r1
 80112b8:	fa00 f101 	lsl.w	r1, r0, r1
 80112bc:	428c      	cmp	r4, r1
 80112be:	d10b      	bne.n	80112d8 <__any_on+0x3e>
 80112c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80112c4:	4293      	cmp	r3, r2
 80112c6:	d803      	bhi.n	80112d0 <__any_on+0x36>
 80112c8:	2000      	movs	r0, #0
 80112ca:	bd10      	pop	{r4, pc}
 80112cc:	4603      	mov	r3, r0
 80112ce:	e7f7      	b.n	80112c0 <__any_on+0x26>
 80112d0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80112d4:	2900      	cmp	r1, #0
 80112d6:	d0f5      	beq.n	80112c4 <__any_on+0x2a>
 80112d8:	2001      	movs	r0, #1
 80112da:	e7f6      	b.n	80112ca <__any_on+0x30>

080112dc <_calloc_r>:
 80112dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80112de:	fba1 2402 	umull	r2, r4, r1, r2
 80112e2:	b94c      	cbnz	r4, 80112f8 <_calloc_r+0x1c>
 80112e4:	4611      	mov	r1, r2
 80112e6:	9201      	str	r2, [sp, #4]
 80112e8:	f000 f87a 	bl	80113e0 <_malloc_r>
 80112ec:	9a01      	ldr	r2, [sp, #4]
 80112ee:	4605      	mov	r5, r0
 80112f0:	b930      	cbnz	r0, 8011300 <_calloc_r+0x24>
 80112f2:	4628      	mov	r0, r5
 80112f4:	b003      	add	sp, #12
 80112f6:	bd30      	pop	{r4, r5, pc}
 80112f8:	220c      	movs	r2, #12
 80112fa:	6002      	str	r2, [r0, #0]
 80112fc:	2500      	movs	r5, #0
 80112fe:	e7f8      	b.n	80112f2 <_calloc_r+0x16>
 8011300:	4621      	mov	r1, r4
 8011302:	f7fc f957 	bl	800d5b4 <memset>
 8011306:	e7f4      	b.n	80112f2 <_calloc_r+0x16>

08011308 <_free_r>:
 8011308:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801130a:	2900      	cmp	r1, #0
 801130c:	d044      	beq.n	8011398 <_free_r+0x90>
 801130e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011312:	9001      	str	r0, [sp, #4]
 8011314:	2b00      	cmp	r3, #0
 8011316:	f1a1 0404 	sub.w	r4, r1, #4
 801131a:	bfb8      	it	lt
 801131c:	18e4      	addlt	r4, r4, r3
 801131e:	f000 fca7 	bl	8011c70 <__malloc_lock>
 8011322:	4a1e      	ldr	r2, [pc, #120]	; (801139c <_free_r+0x94>)
 8011324:	9801      	ldr	r0, [sp, #4]
 8011326:	6813      	ldr	r3, [r2, #0]
 8011328:	b933      	cbnz	r3, 8011338 <_free_r+0x30>
 801132a:	6063      	str	r3, [r4, #4]
 801132c:	6014      	str	r4, [r2, #0]
 801132e:	b003      	add	sp, #12
 8011330:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011334:	f000 bca2 	b.w	8011c7c <__malloc_unlock>
 8011338:	42a3      	cmp	r3, r4
 801133a:	d908      	bls.n	801134e <_free_r+0x46>
 801133c:	6825      	ldr	r5, [r4, #0]
 801133e:	1961      	adds	r1, r4, r5
 8011340:	428b      	cmp	r3, r1
 8011342:	bf01      	itttt	eq
 8011344:	6819      	ldreq	r1, [r3, #0]
 8011346:	685b      	ldreq	r3, [r3, #4]
 8011348:	1949      	addeq	r1, r1, r5
 801134a:	6021      	streq	r1, [r4, #0]
 801134c:	e7ed      	b.n	801132a <_free_r+0x22>
 801134e:	461a      	mov	r2, r3
 8011350:	685b      	ldr	r3, [r3, #4]
 8011352:	b10b      	cbz	r3, 8011358 <_free_r+0x50>
 8011354:	42a3      	cmp	r3, r4
 8011356:	d9fa      	bls.n	801134e <_free_r+0x46>
 8011358:	6811      	ldr	r1, [r2, #0]
 801135a:	1855      	adds	r5, r2, r1
 801135c:	42a5      	cmp	r5, r4
 801135e:	d10b      	bne.n	8011378 <_free_r+0x70>
 8011360:	6824      	ldr	r4, [r4, #0]
 8011362:	4421      	add	r1, r4
 8011364:	1854      	adds	r4, r2, r1
 8011366:	42a3      	cmp	r3, r4
 8011368:	6011      	str	r1, [r2, #0]
 801136a:	d1e0      	bne.n	801132e <_free_r+0x26>
 801136c:	681c      	ldr	r4, [r3, #0]
 801136e:	685b      	ldr	r3, [r3, #4]
 8011370:	6053      	str	r3, [r2, #4]
 8011372:	4421      	add	r1, r4
 8011374:	6011      	str	r1, [r2, #0]
 8011376:	e7da      	b.n	801132e <_free_r+0x26>
 8011378:	d902      	bls.n	8011380 <_free_r+0x78>
 801137a:	230c      	movs	r3, #12
 801137c:	6003      	str	r3, [r0, #0]
 801137e:	e7d6      	b.n	801132e <_free_r+0x26>
 8011380:	6825      	ldr	r5, [r4, #0]
 8011382:	1961      	adds	r1, r4, r5
 8011384:	428b      	cmp	r3, r1
 8011386:	bf04      	itt	eq
 8011388:	6819      	ldreq	r1, [r3, #0]
 801138a:	685b      	ldreq	r3, [r3, #4]
 801138c:	6063      	str	r3, [r4, #4]
 801138e:	bf04      	itt	eq
 8011390:	1949      	addeq	r1, r1, r5
 8011392:	6021      	streq	r1, [r4, #0]
 8011394:	6054      	str	r4, [r2, #4]
 8011396:	e7ca      	b.n	801132e <_free_r+0x26>
 8011398:	b003      	add	sp, #12
 801139a:	bd30      	pop	{r4, r5, pc}
 801139c:	2000408c 	.word	0x2000408c

080113a0 <sbrk_aligned>:
 80113a0:	b570      	push	{r4, r5, r6, lr}
 80113a2:	4e0e      	ldr	r6, [pc, #56]	; (80113dc <sbrk_aligned+0x3c>)
 80113a4:	460c      	mov	r4, r1
 80113a6:	6831      	ldr	r1, [r6, #0]
 80113a8:	4605      	mov	r5, r0
 80113aa:	b911      	cbnz	r1, 80113b2 <sbrk_aligned+0x12>
 80113ac:	f000 fb4c 	bl	8011a48 <_sbrk_r>
 80113b0:	6030      	str	r0, [r6, #0]
 80113b2:	4621      	mov	r1, r4
 80113b4:	4628      	mov	r0, r5
 80113b6:	f000 fb47 	bl	8011a48 <_sbrk_r>
 80113ba:	1c43      	adds	r3, r0, #1
 80113bc:	d00a      	beq.n	80113d4 <sbrk_aligned+0x34>
 80113be:	1cc4      	adds	r4, r0, #3
 80113c0:	f024 0403 	bic.w	r4, r4, #3
 80113c4:	42a0      	cmp	r0, r4
 80113c6:	d007      	beq.n	80113d8 <sbrk_aligned+0x38>
 80113c8:	1a21      	subs	r1, r4, r0
 80113ca:	4628      	mov	r0, r5
 80113cc:	f000 fb3c 	bl	8011a48 <_sbrk_r>
 80113d0:	3001      	adds	r0, #1
 80113d2:	d101      	bne.n	80113d8 <sbrk_aligned+0x38>
 80113d4:	f04f 34ff 	mov.w	r4, #4294967295
 80113d8:	4620      	mov	r0, r4
 80113da:	bd70      	pop	{r4, r5, r6, pc}
 80113dc:	20004090 	.word	0x20004090

080113e0 <_malloc_r>:
 80113e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113e4:	1ccd      	adds	r5, r1, #3
 80113e6:	f025 0503 	bic.w	r5, r5, #3
 80113ea:	3508      	adds	r5, #8
 80113ec:	2d0c      	cmp	r5, #12
 80113ee:	bf38      	it	cc
 80113f0:	250c      	movcc	r5, #12
 80113f2:	2d00      	cmp	r5, #0
 80113f4:	4607      	mov	r7, r0
 80113f6:	db01      	blt.n	80113fc <_malloc_r+0x1c>
 80113f8:	42a9      	cmp	r1, r5
 80113fa:	d905      	bls.n	8011408 <_malloc_r+0x28>
 80113fc:	230c      	movs	r3, #12
 80113fe:	603b      	str	r3, [r7, #0]
 8011400:	2600      	movs	r6, #0
 8011402:	4630      	mov	r0, r6
 8011404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011408:	4e2e      	ldr	r6, [pc, #184]	; (80114c4 <_malloc_r+0xe4>)
 801140a:	f000 fc31 	bl	8011c70 <__malloc_lock>
 801140e:	6833      	ldr	r3, [r6, #0]
 8011410:	461c      	mov	r4, r3
 8011412:	bb34      	cbnz	r4, 8011462 <_malloc_r+0x82>
 8011414:	4629      	mov	r1, r5
 8011416:	4638      	mov	r0, r7
 8011418:	f7ff ffc2 	bl	80113a0 <sbrk_aligned>
 801141c:	1c43      	adds	r3, r0, #1
 801141e:	4604      	mov	r4, r0
 8011420:	d14d      	bne.n	80114be <_malloc_r+0xde>
 8011422:	6834      	ldr	r4, [r6, #0]
 8011424:	4626      	mov	r6, r4
 8011426:	2e00      	cmp	r6, #0
 8011428:	d140      	bne.n	80114ac <_malloc_r+0xcc>
 801142a:	6823      	ldr	r3, [r4, #0]
 801142c:	4631      	mov	r1, r6
 801142e:	4638      	mov	r0, r7
 8011430:	eb04 0803 	add.w	r8, r4, r3
 8011434:	f000 fb08 	bl	8011a48 <_sbrk_r>
 8011438:	4580      	cmp	r8, r0
 801143a:	d13a      	bne.n	80114b2 <_malloc_r+0xd2>
 801143c:	6821      	ldr	r1, [r4, #0]
 801143e:	3503      	adds	r5, #3
 8011440:	1a6d      	subs	r5, r5, r1
 8011442:	f025 0503 	bic.w	r5, r5, #3
 8011446:	3508      	adds	r5, #8
 8011448:	2d0c      	cmp	r5, #12
 801144a:	bf38      	it	cc
 801144c:	250c      	movcc	r5, #12
 801144e:	4629      	mov	r1, r5
 8011450:	4638      	mov	r0, r7
 8011452:	f7ff ffa5 	bl	80113a0 <sbrk_aligned>
 8011456:	3001      	adds	r0, #1
 8011458:	d02b      	beq.n	80114b2 <_malloc_r+0xd2>
 801145a:	6823      	ldr	r3, [r4, #0]
 801145c:	442b      	add	r3, r5
 801145e:	6023      	str	r3, [r4, #0]
 8011460:	e00e      	b.n	8011480 <_malloc_r+0xa0>
 8011462:	6822      	ldr	r2, [r4, #0]
 8011464:	1b52      	subs	r2, r2, r5
 8011466:	d41e      	bmi.n	80114a6 <_malloc_r+0xc6>
 8011468:	2a0b      	cmp	r2, #11
 801146a:	d916      	bls.n	801149a <_malloc_r+0xba>
 801146c:	1961      	adds	r1, r4, r5
 801146e:	42a3      	cmp	r3, r4
 8011470:	6025      	str	r5, [r4, #0]
 8011472:	bf18      	it	ne
 8011474:	6059      	strne	r1, [r3, #4]
 8011476:	6863      	ldr	r3, [r4, #4]
 8011478:	bf08      	it	eq
 801147a:	6031      	streq	r1, [r6, #0]
 801147c:	5162      	str	r2, [r4, r5]
 801147e:	604b      	str	r3, [r1, #4]
 8011480:	4638      	mov	r0, r7
 8011482:	f104 060b 	add.w	r6, r4, #11
 8011486:	f000 fbf9 	bl	8011c7c <__malloc_unlock>
 801148a:	f026 0607 	bic.w	r6, r6, #7
 801148e:	1d23      	adds	r3, r4, #4
 8011490:	1af2      	subs	r2, r6, r3
 8011492:	d0b6      	beq.n	8011402 <_malloc_r+0x22>
 8011494:	1b9b      	subs	r3, r3, r6
 8011496:	50a3      	str	r3, [r4, r2]
 8011498:	e7b3      	b.n	8011402 <_malloc_r+0x22>
 801149a:	6862      	ldr	r2, [r4, #4]
 801149c:	42a3      	cmp	r3, r4
 801149e:	bf0c      	ite	eq
 80114a0:	6032      	streq	r2, [r6, #0]
 80114a2:	605a      	strne	r2, [r3, #4]
 80114a4:	e7ec      	b.n	8011480 <_malloc_r+0xa0>
 80114a6:	4623      	mov	r3, r4
 80114a8:	6864      	ldr	r4, [r4, #4]
 80114aa:	e7b2      	b.n	8011412 <_malloc_r+0x32>
 80114ac:	4634      	mov	r4, r6
 80114ae:	6876      	ldr	r6, [r6, #4]
 80114b0:	e7b9      	b.n	8011426 <_malloc_r+0x46>
 80114b2:	230c      	movs	r3, #12
 80114b4:	603b      	str	r3, [r7, #0]
 80114b6:	4638      	mov	r0, r7
 80114b8:	f000 fbe0 	bl	8011c7c <__malloc_unlock>
 80114bc:	e7a1      	b.n	8011402 <_malloc_r+0x22>
 80114be:	6025      	str	r5, [r4, #0]
 80114c0:	e7de      	b.n	8011480 <_malloc_r+0xa0>
 80114c2:	bf00      	nop
 80114c4:	2000408c 	.word	0x2000408c

080114c8 <__ssputs_r>:
 80114c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80114cc:	688e      	ldr	r6, [r1, #8]
 80114ce:	429e      	cmp	r6, r3
 80114d0:	4682      	mov	sl, r0
 80114d2:	460c      	mov	r4, r1
 80114d4:	4690      	mov	r8, r2
 80114d6:	461f      	mov	r7, r3
 80114d8:	d838      	bhi.n	801154c <__ssputs_r+0x84>
 80114da:	898a      	ldrh	r2, [r1, #12]
 80114dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80114e0:	d032      	beq.n	8011548 <__ssputs_r+0x80>
 80114e2:	6825      	ldr	r5, [r4, #0]
 80114e4:	6909      	ldr	r1, [r1, #16]
 80114e6:	eba5 0901 	sub.w	r9, r5, r1
 80114ea:	6965      	ldr	r5, [r4, #20]
 80114ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80114f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80114f4:	3301      	adds	r3, #1
 80114f6:	444b      	add	r3, r9
 80114f8:	106d      	asrs	r5, r5, #1
 80114fa:	429d      	cmp	r5, r3
 80114fc:	bf38      	it	cc
 80114fe:	461d      	movcc	r5, r3
 8011500:	0553      	lsls	r3, r2, #21
 8011502:	d531      	bpl.n	8011568 <__ssputs_r+0xa0>
 8011504:	4629      	mov	r1, r5
 8011506:	f7ff ff6b 	bl	80113e0 <_malloc_r>
 801150a:	4606      	mov	r6, r0
 801150c:	b950      	cbnz	r0, 8011524 <__ssputs_r+0x5c>
 801150e:	230c      	movs	r3, #12
 8011510:	f8ca 3000 	str.w	r3, [sl]
 8011514:	89a3      	ldrh	r3, [r4, #12]
 8011516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801151a:	81a3      	strh	r3, [r4, #12]
 801151c:	f04f 30ff 	mov.w	r0, #4294967295
 8011520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011524:	6921      	ldr	r1, [r4, #16]
 8011526:	464a      	mov	r2, r9
 8011528:	f7ff fa0c 	bl	8010944 <memcpy>
 801152c:	89a3      	ldrh	r3, [r4, #12]
 801152e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011536:	81a3      	strh	r3, [r4, #12]
 8011538:	6126      	str	r6, [r4, #16]
 801153a:	6165      	str	r5, [r4, #20]
 801153c:	444e      	add	r6, r9
 801153e:	eba5 0509 	sub.w	r5, r5, r9
 8011542:	6026      	str	r6, [r4, #0]
 8011544:	60a5      	str	r5, [r4, #8]
 8011546:	463e      	mov	r6, r7
 8011548:	42be      	cmp	r6, r7
 801154a:	d900      	bls.n	801154e <__ssputs_r+0x86>
 801154c:	463e      	mov	r6, r7
 801154e:	6820      	ldr	r0, [r4, #0]
 8011550:	4632      	mov	r2, r6
 8011552:	4641      	mov	r1, r8
 8011554:	f000 fb72 	bl	8011c3c <memmove>
 8011558:	68a3      	ldr	r3, [r4, #8]
 801155a:	1b9b      	subs	r3, r3, r6
 801155c:	60a3      	str	r3, [r4, #8]
 801155e:	6823      	ldr	r3, [r4, #0]
 8011560:	4433      	add	r3, r6
 8011562:	6023      	str	r3, [r4, #0]
 8011564:	2000      	movs	r0, #0
 8011566:	e7db      	b.n	8011520 <__ssputs_r+0x58>
 8011568:	462a      	mov	r2, r5
 801156a:	f000 fb8d 	bl	8011c88 <_realloc_r>
 801156e:	4606      	mov	r6, r0
 8011570:	2800      	cmp	r0, #0
 8011572:	d1e1      	bne.n	8011538 <__ssputs_r+0x70>
 8011574:	6921      	ldr	r1, [r4, #16]
 8011576:	4650      	mov	r0, sl
 8011578:	f7ff fec6 	bl	8011308 <_free_r>
 801157c:	e7c7      	b.n	801150e <__ssputs_r+0x46>
	...

08011580 <_svfiprintf_r>:
 8011580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011584:	4698      	mov	r8, r3
 8011586:	898b      	ldrh	r3, [r1, #12]
 8011588:	061b      	lsls	r3, r3, #24
 801158a:	b09d      	sub	sp, #116	; 0x74
 801158c:	4607      	mov	r7, r0
 801158e:	460d      	mov	r5, r1
 8011590:	4614      	mov	r4, r2
 8011592:	d50e      	bpl.n	80115b2 <_svfiprintf_r+0x32>
 8011594:	690b      	ldr	r3, [r1, #16]
 8011596:	b963      	cbnz	r3, 80115b2 <_svfiprintf_r+0x32>
 8011598:	2140      	movs	r1, #64	; 0x40
 801159a:	f7ff ff21 	bl	80113e0 <_malloc_r>
 801159e:	6028      	str	r0, [r5, #0]
 80115a0:	6128      	str	r0, [r5, #16]
 80115a2:	b920      	cbnz	r0, 80115ae <_svfiprintf_r+0x2e>
 80115a4:	230c      	movs	r3, #12
 80115a6:	603b      	str	r3, [r7, #0]
 80115a8:	f04f 30ff 	mov.w	r0, #4294967295
 80115ac:	e0d1      	b.n	8011752 <_svfiprintf_r+0x1d2>
 80115ae:	2340      	movs	r3, #64	; 0x40
 80115b0:	616b      	str	r3, [r5, #20]
 80115b2:	2300      	movs	r3, #0
 80115b4:	9309      	str	r3, [sp, #36]	; 0x24
 80115b6:	2320      	movs	r3, #32
 80115b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80115bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80115c0:	2330      	movs	r3, #48	; 0x30
 80115c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801176c <_svfiprintf_r+0x1ec>
 80115c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80115ca:	f04f 0901 	mov.w	r9, #1
 80115ce:	4623      	mov	r3, r4
 80115d0:	469a      	mov	sl, r3
 80115d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80115d6:	b10a      	cbz	r2, 80115dc <_svfiprintf_r+0x5c>
 80115d8:	2a25      	cmp	r2, #37	; 0x25
 80115da:	d1f9      	bne.n	80115d0 <_svfiprintf_r+0x50>
 80115dc:	ebba 0b04 	subs.w	fp, sl, r4
 80115e0:	d00b      	beq.n	80115fa <_svfiprintf_r+0x7a>
 80115e2:	465b      	mov	r3, fp
 80115e4:	4622      	mov	r2, r4
 80115e6:	4629      	mov	r1, r5
 80115e8:	4638      	mov	r0, r7
 80115ea:	f7ff ff6d 	bl	80114c8 <__ssputs_r>
 80115ee:	3001      	adds	r0, #1
 80115f0:	f000 80aa 	beq.w	8011748 <_svfiprintf_r+0x1c8>
 80115f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80115f6:	445a      	add	r2, fp
 80115f8:	9209      	str	r2, [sp, #36]	; 0x24
 80115fa:	f89a 3000 	ldrb.w	r3, [sl]
 80115fe:	2b00      	cmp	r3, #0
 8011600:	f000 80a2 	beq.w	8011748 <_svfiprintf_r+0x1c8>
 8011604:	2300      	movs	r3, #0
 8011606:	f04f 32ff 	mov.w	r2, #4294967295
 801160a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801160e:	f10a 0a01 	add.w	sl, sl, #1
 8011612:	9304      	str	r3, [sp, #16]
 8011614:	9307      	str	r3, [sp, #28]
 8011616:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801161a:	931a      	str	r3, [sp, #104]	; 0x68
 801161c:	4654      	mov	r4, sl
 801161e:	2205      	movs	r2, #5
 8011620:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011624:	4851      	ldr	r0, [pc, #324]	; (801176c <_svfiprintf_r+0x1ec>)
 8011626:	f7ee fe23 	bl	8000270 <memchr>
 801162a:	9a04      	ldr	r2, [sp, #16]
 801162c:	b9d8      	cbnz	r0, 8011666 <_svfiprintf_r+0xe6>
 801162e:	06d0      	lsls	r0, r2, #27
 8011630:	bf44      	itt	mi
 8011632:	2320      	movmi	r3, #32
 8011634:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011638:	0711      	lsls	r1, r2, #28
 801163a:	bf44      	itt	mi
 801163c:	232b      	movmi	r3, #43	; 0x2b
 801163e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011642:	f89a 3000 	ldrb.w	r3, [sl]
 8011646:	2b2a      	cmp	r3, #42	; 0x2a
 8011648:	d015      	beq.n	8011676 <_svfiprintf_r+0xf6>
 801164a:	9a07      	ldr	r2, [sp, #28]
 801164c:	4654      	mov	r4, sl
 801164e:	2000      	movs	r0, #0
 8011650:	f04f 0c0a 	mov.w	ip, #10
 8011654:	4621      	mov	r1, r4
 8011656:	f811 3b01 	ldrb.w	r3, [r1], #1
 801165a:	3b30      	subs	r3, #48	; 0x30
 801165c:	2b09      	cmp	r3, #9
 801165e:	d94e      	bls.n	80116fe <_svfiprintf_r+0x17e>
 8011660:	b1b0      	cbz	r0, 8011690 <_svfiprintf_r+0x110>
 8011662:	9207      	str	r2, [sp, #28]
 8011664:	e014      	b.n	8011690 <_svfiprintf_r+0x110>
 8011666:	eba0 0308 	sub.w	r3, r0, r8
 801166a:	fa09 f303 	lsl.w	r3, r9, r3
 801166e:	4313      	orrs	r3, r2
 8011670:	9304      	str	r3, [sp, #16]
 8011672:	46a2      	mov	sl, r4
 8011674:	e7d2      	b.n	801161c <_svfiprintf_r+0x9c>
 8011676:	9b03      	ldr	r3, [sp, #12]
 8011678:	1d19      	adds	r1, r3, #4
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	9103      	str	r1, [sp, #12]
 801167e:	2b00      	cmp	r3, #0
 8011680:	bfbb      	ittet	lt
 8011682:	425b      	neglt	r3, r3
 8011684:	f042 0202 	orrlt.w	r2, r2, #2
 8011688:	9307      	strge	r3, [sp, #28]
 801168a:	9307      	strlt	r3, [sp, #28]
 801168c:	bfb8      	it	lt
 801168e:	9204      	strlt	r2, [sp, #16]
 8011690:	7823      	ldrb	r3, [r4, #0]
 8011692:	2b2e      	cmp	r3, #46	; 0x2e
 8011694:	d10c      	bne.n	80116b0 <_svfiprintf_r+0x130>
 8011696:	7863      	ldrb	r3, [r4, #1]
 8011698:	2b2a      	cmp	r3, #42	; 0x2a
 801169a:	d135      	bne.n	8011708 <_svfiprintf_r+0x188>
 801169c:	9b03      	ldr	r3, [sp, #12]
 801169e:	1d1a      	adds	r2, r3, #4
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	9203      	str	r2, [sp, #12]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	bfb8      	it	lt
 80116a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80116ac:	3402      	adds	r4, #2
 80116ae:	9305      	str	r3, [sp, #20]
 80116b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801177c <_svfiprintf_r+0x1fc>
 80116b4:	7821      	ldrb	r1, [r4, #0]
 80116b6:	2203      	movs	r2, #3
 80116b8:	4650      	mov	r0, sl
 80116ba:	f7ee fdd9 	bl	8000270 <memchr>
 80116be:	b140      	cbz	r0, 80116d2 <_svfiprintf_r+0x152>
 80116c0:	2340      	movs	r3, #64	; 0x40
 80116c2:	eba0 000a 	sub.w	r0, r0, sl
 80116c6:	fa03 f000 	lsl.w	r0, r3, r0
 80116ca:	9b04      	ldr	r3, [sp, #16]
 80116cc:	4303      	orrs	r3, r0
 80116ce:	3401      	adds	r4, #1
 80116d0:	9304      	str	r3, [sp, #16]
 80116d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80116d6:	4826      	ldr	r0, [pc, #152]	; (8011770 <_svfiprintf_r+0x1f0>)
 80116d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80116dc:	2206      	movs	r2, #6
 80116de:	f7ee fdc7 	bl	8000270 <memchr>
 80116e2:	2800      	cmp	r0, #0
 80116e4:	d038      	beq.n	8011758 <_svfiprintf_r+0x1d8>
 80116e6:	4b23      	ldr	r3, [pc, #140]	; (8011774 <_svfiprintf_r+0x1f4>)
 80116e8:	bb1b      	cbnz	r3, 8011732 <_svfiprintf_r+0x1b2>
 80116ea:	9b03      	ldr	r3, [sp, #12]
 80116ec:	3307      	adds	r3, #7
 80116ee:	f023 0307 	bic.w	r3, r3, #7
 80116f2:	3308      	adds	r3, #8
 80116f4:	9303      	str	r3, [sp, #12]
 80116f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80116f8:	4433      	add	r3, r6
 80116fa:	9309      	str	r3, [sp, #36]	; 0x24
 80116fc:	e767      	b.n	80115ce <_svfiprintf_r+0x4e>
 80116fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8011702:	460c      	mov	r4, r1
 8011704:	2001      	movs	r0, #1
 8011706:	e7a5      	b.n	8011654 <_svfiprintf_r+0xd4>
 8011708:	2300      	movs	r3, #0
 801170a:	3401      	adds	r4, #1
 801170c:	9305      	str	r3, [sp, #20]
 801170e:	4619      	mov	r1, r3
 8011710:	f04f 0c0a 	mov.w	ip, #10
 8011714:	4620      	mov	r0, r4
 8011716:	f810 2b01 	ldrb.w	r2, [r0], #1
 801171a:	3a30      	subs	r2, #48	; 0x30
 801171c:	2a09      	cmp	r2, #9
 801171e:	d903      	bls.n	8011728 <_svfiprintf_r+0x1a8>
 8011720:	2b00      	cmp	r3, #0
 8011722:	d0c5      	beq.n	80116b0 <_svfiprintf_r+0x130>
 8011724:	9105      	str	r1, [sp, #20]
 8011726:	e7c3      	b.n	80116b0 <_svfiprintf_r+0x130>
 8011728:	fb0c 2101 	mla	r1, ip, r1, r2
 801172c:	4604      	mov	r4, r0
 801172e:	2301      	movs	r3, #1
 8011730:	e7f0      	b.n	8011714 <_svfiprintf_r+0x194>
 8011732:	ab03      	add	r3, sp, #12
 8011734:	9300      	str	r3, [sp, #0]
 8011736:	462a      	mov	r2, r5
 8011738:	4b0f      	ldr	r3, [pc, #60]	; (8011778 <_svfiprintf_r+0x1f8>)
 801173a:	a904      	add	r1, sp, #16
 801173c:	4638      	mov	r0, r7
 801173e:	f7fb ffd3 	bl	800d6e8 <_printf_float>
 8011742:	1c42      	adds	r2, r0, #1
 8011744:	4606      	mov	r6, r0
 8011746:	d1d6      	bne.n	80116f6 <_svfiprintf_r+0x176>
 8011748:	89ab      	ldrh	r3, [r5, #12]
 801174a:	065b      	lsls	r3, r3, #25
 801174c:	f53f af2c 	bmi.w	80115a8 <_svfiprintf_r+0x28>
 8011750:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011752:	b01d      	add	sp, #116	; 0x74
 8011754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011758:	ab03      	add	r3, sp, #12
 801175a:	9300      	str	r3, [sp, #0]
 801175c:	462a      	mov	r2, r5
 801175e:	4b06      	ldr	r3, [pc, #24]	; (8011778 <_svfiprintf_r+0x1f8>)
 8011760:	a904      	add	r1, sp, #16
 8011762:	4638      	mov	r0, r7
 8011764:	f7fc fa4c 	bl	800dc00 <_printf_i>
 8011768:	e7eb      	b.n	8011742 <_svfiprintf_r+0x1c2>
 801176a:	bf00      	nop
 801176c:	08012b24 	.word	0x08012b24
 8011770:	08012b2e 	.word	0x08012b2e
 8011774:	0800d6e9 	.word	0x0800d6e9
 8011778:	080114c9 	.word	0x080114c9
 801177c:	08012b2a 	.word	0x08012b2a

08011780 <__sfputc_r>:
 8011780:	6893      	ldr	r3, [r2, #8]
 8011782:	3b01      	subs	r3, #1
 8011784:	2b00      	cmp	r3, #0
 8011786:	b410      	push	{r4}
 8011788:	6093      	str	r3, [r2, #8]
 801178a:	da08      	bge.n	801179e <__sfputc_r+0x1e>
 801178c:	6994      	ldr	r4, [r2, #24]
 801178e:	42a3      	cmp	r3, r4
 8011790:	db01      	blt.n	8011796 <__sfputc_r+0x16>
 8011792:	290a      	cmp	r1, #10
 8011794:	d103      	bne.n	801179e <__sfputc_r+0x1e>
 8011796:	f85d 4b04 	ldr.w	r4, [sp], #4
 801179a:	f7fd bc6d 	b.w	800f078 <__swbuf_r>
 801179e:	6813      	ldr	r3, [r2, #0]
 80117a0:	1c58      	adds	r0, r3, #1
 80117a2:	6010      	str	r0, [r2, #0]
 80117a4:	7019      	strb	r1, [r3, #0]
 80117a6:	4608      	mov	r0, r1
 80117a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80117ac:	4770      	bx	lr

080117ae <__sfputs_r>:
 80117ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117b0:	4606      	mov	r6, r0
 80117b2:	460f      	mov	r7, r1
 80117b4:	4614      	mov	r4, r2
 80117b6:	18d5      	adds	r5, r2, r3
 80117b8:	42ac      	cmp	r4, r5
 80117ba:	d101      	bne.n	80117c0 <__sfputs_r+0x12>
 80117bc:	2000      	movs	r0, #0
 80117be:	e007      	b.n	80117d0 <__sfputs_r+0x22>
 80117c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80117c4:	463a      	mov	r2, r7
 80117c6:	4630      	mov	r0, r6
 80117c8:	f7ff ffda 	bl	8011780 <__sfputc_r>
 80117cc:	1c43      	adds	r3, r0, #1
 80117ce:	d1f3      	bne.n	80117b8 <__sfputs_r+0xa>
 80117d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080117d4 <_vfiprintf_r>:
 80117d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117d8:	460d      	mov	r5, r1
 80117da:	b09d      	sub	sp, #116	; 0x74
 80117dc:	4614      	mov	r4, r2
 80117de:	4698      	mov	r8, r3
 80117e0:	4606      	mov	r6, r0
 80117e2:	b118      	cbz	r0, 80117ec <_vfiprintf_r+0x18>
 80117e4:	6983      	ldr	r3, [r0, #24]
 80117e6:	b90b      	cbnz	r3, 80117ec <_vfiprintf_r+0x18>
 80117e8:	f7fe fc1a 	bl	8010020 <__sinit>
 80117ec:	4b89      	ldr	r3, [pc, #548]	; (8011a14 <_vfiprintf_r+0x240>)
 80117ee:	429d      	cmp	r5, r3
 80117f0:	d11b      	bne.n	801182a <_vfiprintf_r+0x56>
 80117f2:	6875      	ldr	r5, [r6, #4]
 80117f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80117f6:	07d9      	lsls	r1, r3, #31
 80117f8:	d405      	bmi.n	8011806 <_vfiprintf_r+0x32>
 80117fa:	89ab      	ldrh	r3, [r5, #12]
 80117fc:	059a      	lsls	r2, r3, #22
 80117fe:	d402      	bmi.n	8011806 <_vfiprintf_r+0x32>
 8011800:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011802:	f7ff f81e 	bl	8010842 <__retarget_lock_acquire_recursive>
 8011806:	89ab      	ldrh	r3, [r5, #12]
 8011808:	071b      	lsls	r3, r3, #28
 801180a:	d501      	bpl.n	8011810 <_vfiprintf_r+0x3c>
 801180c:	692b      	ldr	r3, [r5, #16]
 801180e:	b9eb      	cbnz	r3, 801184c <_vfiprintf_r+0x78>
 8011810:	4629      	mov	r1, r5
 8011812:	4630      	mov	r0, r6
 8011814:	f7fd fc82 	bl	800f11c <__swsetup_r>
 8011818:	b1c0      	cbz	r0, 801184c <_vfiprintf_r+0x78>
 801181a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801181c:	07dc      	lsls	r4, r3, #31
 801181e:	d50e      	bpl.n	801183e <_vfiprintf_r+0x6a>
 8011820:	f04f 30ff 	mov.w	r0, #4294967295
 8011824:	b01d      	add	sp, #116	; 0x74
 8011826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801182a:	4b7b      	ldr	r3, [pc, #492]	; (8011a18 <_vfiprintf_r+0x244>)
 801182c:	429d      	cmp	r5, r3
 801182e:	d101      	bne.n	8011834 <_vfiprintf_r+0x60>
 8011830:	68b5      	ldr	r5, [r6, #8]
 8011832:	e7df      	b.n	80117f4 <_vfiprintf_r+0x20>
 8011834:	4b79      	ldr	r3, [pc, #484]	; (8011a1c <_vfiprintf_r+0x248>)
 8011836:	429d      	cmp	r5, r3
 8011838:	bf08      	it	eq
 801183a:	68f5      	ldreq	r5, [r6, #12]
 801183c:	e7da      	b.n	80117f4 <_vfiprintf_r+0x20>
 801183e:	89ab      	ldrh	r3, [r5, #12]
 8011840:	0598      	lsls	r0, r3, #22
 8011842:	d4ed      	bmi.n	8011820 <_vfiprintf_r+0x4c>
 8011844:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011846:	f7fe fffd 	bl	8010844 <__retarget_lock_release_recursive>
 801184a:	e7e9      	b.n	8011820 <_vfiprintf_r+0x4c>
 801184c:	2300      	movs	r3, #0
 801184e:	9309      	str	r3, [sp, #36]	; 0x24
 8011850:	2320      	movs	r3, #32
 8011852:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011856:	f8cd 800c 	str.w	r8, [sp, #12]
 801185a:	2330      	movs	r3, #48	; 0x30
 801185c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011a20 <_vfiprintf_r+0x24c>
 8011860:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011864:	f04f 0901 	mov.w	r9, #1
 8011868:	4623      	mov	r3, r4
 801186a:	469a      	mov	sl, r3
 801186c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011870:	b10a      	cbz	r2, 8011876 <_vfiprintf_r+0xa2>
 8011872:	2a25      	cmp	r2, #37	; 0x25
 8011874:	d1f9      	bne.n	801186a <_vfiprintf_r+0x96>
 8011876:	ebba 0b04 	subs.w	fp, sl, r4
 801187a:	d00b      	beq.n	8011894 <_vfiprintf_r+0xc0>
 801187c:	465b      	mov	r3, fp
 801187e:	4622      	mov	r2, r4
 8011880:	4629      	mov	r1, r5
 8011882:	4630      	mov	r0, r6
 8011884:	f7ff ff93 	bl	80117ae <__sfputs_r>
 8011888:	3001      	adds	r0, #1
 801188a:	f000 80aa 	beq.w	80119e2 <_vfiprintf_r+0x20e>
 801188e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011890:	445a      	add	r2, fp
 8011892:	9209      	str	r2, [sp, #36]	; 0x24
 8011894:	f89a 3000 	ldrb.w	r3, [sl]
 8011898:	2b00      	cmp	r3, #0
 801189a:	f000 80a2 	beq.w	80119e2 <_vfiprintf_r+0x20e>
 801189e:	2300      	movs	r3, #0
 80118a0:	f04f 32ff 	mov.w	r2, #4294967295
 80118a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80118a8:	f10a 0a01 	add.w	sl, sl, #1
 80118ac:	9304      	str	r3, [sp, #16]
 80118ae:	9307      	str	r3, [sp, #28]
 80118b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80118b4:	931a      	str	r3, [sp, #104]	; 0x68
 80118b6:	4654      	mov	r4, sl
 80118b8:	2205      	movs	r2, #5
 80118ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80118be:	4858      	ldr	r0, [pc, #352]	; (8011a20 <_vfiprintf_r+0x24c>)
 80118c0:	f7ee fcd6 	bl	8000270 <memchr>
 80118c4:	9a04      	ldr	r2, [sp, #16]
 80118c6:	b9d8      	cbnz	r0, 8011900 <_vfiprintf_r+0x12c>
 80118c8:	06d1      	lsls	r1, r2, #27
 80118ca:	bf44      	itt	mi
 80118cc:	2320      	movmi	r3, #32
 80118ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80118d2:	0713      	lsls	r3, r2, #28
 80118d4:	bf44      	itt	mi
 80118d6:	232b      	movmi	r3, #43	; 0x2b
 80118d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80118dc:	f89a 3000 	ldrb.w	r3, [sl]
 80118e0:	2b2a      	cmp	r3, #42	; 0x2a
 80118e2:	d015      	beq.n	8011910 <_vfiprintf_r+0x13c>
 80118e4:	9a07      	ldr	r2, [sp, #28]
 80118e6:	4654      	mov	r4, sl
 80118e8:	2000      	movs	r0, #0
 80118ea:	f04f 0c0a 	mov.w	ip, #10
 80118ee:	4621      	mov	r1, r4
 80118f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80118f4:	3b30      	subs	r3, #48	; 0x30
 80118f6:	2b09      	cmp	r3, #9
 80118f8:	d94e      	bls.n	8011998 <_vfiprintf_r+0x1c4>
 80118fa:	b1b0      	cbz	r0, 801192a <_vfiprintf_r+0x156>
 80118fc:	9207      	str	r2, [sp, #28]
 80118fe:	e014      	b.n	801192a <_vfiprintf_r+0x156>
 8011900:	eba0 0308 	sub.w	r3, r0, r8
 8011904:	fa09 f303 	lsl.w	r3, r9, r3
 8011908:	4313      	orrs	r3, r2
 801190a:	9304      	str	r3, [sp, #16]
 801190c:	46a2      	mov	sl, r4
 801190e:	e7d2      	b.n	80118b6 <_vfiprintf_r+0xe2>
 8011910:	9b03      	ldr	r3, [sp, #12]
 8011912:	1d19      	adds	r1, r3, #4
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	9103      	str	r1, [sp, #12]
 8011918:	2b00      	cmp	r3, #0
 801191a:	bfbb      	ittet	lt
 801191c:	425b      	neglt	r3, r3
 801191e:	f042 0202 	orrlt.w	r2, r2, #2
 8011922:	9307      	strge	r3, [sp, #28]
 8011924:	9307      	strlt	r3, [sp, #28]
 8011926:	bfb8      	it	lt
 8011928:	9204      	strlt	r2, [sp, #16]
 801192a:	7823      	ldrb	r3, [r4, #0]
 801192c:	2b2e      	cmp	r3, #46	; 0x2e
 801192e:	d10c      	bne.n	801194a <_vfiprintf_r+0x176>
 8011930:	7863      	ldrb	r3, [r4, #1]
 8011932:	2b2a      	cmp	r3, #42	; 0x2a
 8011934:	d135      	bne.n	80119a2 <_vfiprintf_r+0x1ce>
 8011936:	9b03      	ldr	r3, [sp, #12]
 8011938:	1d1a      	adds	r2, r3, #4
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	9203      	str	r2, [sp, #12]
 801193e:	2b00      	cmp	r3, #0
 8011940:	bfb8      	it	lt
 8011942:	f04f 33ff 	movlt.w	r3, #4294967295
 8011946:	3402      	adds	r4, #2
 8011948:	9305      	str	r3, [sp, #20]
 801194a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011a30 <_vfiprintf_r+0x25c>
 801194e:	7821      	ldrb	r1, [r4, #0]
 8011950:	2203      	movs	r2, #3
 8011952:	4650      	mov	r0, sl
 8011954:	f7ee fc8c 	bl	8000270 <memchr>
 8011958:	b140      	cbz	r0, 801196c <_vfiprintf_r+0x198>
 801195a:	2340      	movs	r3, #64	; 0x40
 801195c:	eba0 000a 	sub.w	r0, r0, sl
 8011960:	fa03 f000 	lsl.w	r0, r3, r0
 8011964:	9b04      	ldr	r3, [sp, #16]
 8011966:	4303      	orrs	r3, r0
 8011968:	3401      	adds	r4, #1
 801196a:	9304      	str	r3, [sp, #16]
 801196c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011970:	482c      	ldr	r0, [pc, #176]	; (8011a24 <_vfiprintf_r+0x250>)
 8011972:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011976:	2206      	movs	r2, #6
 8011978:	f7ee fc7a 	bl	8000270 <memchr>
 801197c:	2800      	cmp	r0, #0
 801197e:	d03f      	beq.n	8011a00 <_vfiprintf_r+0x22c>
 8011980:	4b29      	ldr	r3, [pc, #164]	; (8011a28 <_vfiprintf_r+0x254>)
 8011982:	bb1b      	cbnz	r3, 80119cc <_vfiprintf_r+0x1f8>
 8011984:	9b03      	ldr	r3, [sp, #12]
 8011986:	3307      	adds	r3, #7
 8011988:	f023 0307 	bic.w	r3, r3, #7
 801198c:	3308      	adds	r3, #8
 801198e:	9303      	str	r3, [sp, #12]
 8011990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011992:	443b      	add	r3, r7
 8011994:	9309      	str	r3, [sp, #36]	; 0x24
 8011996:	e767      	b.n	8011868 <_vfiprintf_r+0x94>
 8011998:	fb0c 3202 	mla	r2, ip, r2, r3
 801199c:	460c      	mov	r4, r1
 801199e:	2001      	movs	r0, #1
 80119a0:	e7a5      	b.n	80118ee <_vfiprintf_r+0x11a>
 80119a2:	2300      	movs	r3, #0
 80119a4:	3401      	adds	r4, #1
 80119a6:	9305      	str	r3, [sp, #20]
 80119a8:	4619      	mov	r1, r3
 80119aa:	f04f 0c0a 	mov.w	ip, #10
 80119ae:	4620      	mov	r0, r4
 80119b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80119b4:	3a30      	subs	r2, #48	; 0x30
 80119b6:	2a09      	cmp	r2, #9
 80119b8:	d903      	bls.n	80119c2 <_vfiprintf_r+0x1ee>
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d0c5      	beq.n	801194a <_vfiprintf_r+0x176>
 80119be:	9105      	str	r1, [sp, #20]
 80119c0:	e7c3      	b.n	801194a <_vfiprintf_r+0x176>
 80119c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80119c6:	4604      	mov	r4, r0
 80119c8:	2301      	movs	r3, #1
 80119ca:	e7f0      	b.n	80119ae <_vfiprintf_r+0x1da>
 80119cc:	ab03      	add	r3, sp, #12
 80119ce:	9300      	str	r3, [sp, #0]
 80119d0:	462a      	mov	r2, r5
 80119d2:	4b16      	ldr	r3, [pc, #88]	; (8011a2c <_vfiprintf_r+0x258>)
 80119d4:	a904      	add	r1, sp, #16
 80119d6:	4630      	mov	r0, r6
 80119d8:	f7fb fe86 	bl	800d6e8 <_printf_float>
 80119dc:	4607      	mov	r7, r0
 80119de:	1c78      	adds	r0, r7, #1
 80119e0:	d1d6      	bne.n	8011990 <_vfiprintf_r+0x1bc>
 80119e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80119e4:	07d9      	lsls	r1, r3, #31
 80119e6:	d405      	bmi.n	80119f4 <_vfiprintf_r+0x220>
 80119e8:	89ab      	ldrh	r3, [r5, #12]
 80119ea:	059a      	lsls	r2, r3, #22
 80119ec:	d402      	bmi.n	80119f4 <_vfiprintf_r+0x220>
 80119ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80119f0:	f7fe ff28 	bl	8010844 <__retarget_lock_release_recursive>
 80119f4:	89ab      	ldrh	r3, [r5, #12]
 80119f6:	065b      	lsls	r3, r3, #25
 80119f8:	f53f af12 	bmi.w	8011820 <_vfiprintf_r+0x4c>
 80119fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80119fe:	e711      	b.n	8011824 <_vfiprintf_r+0x50>
 8011a00:	ab03      	add	r3, sp, #12
 8011a02:	9300      	str	r3, [sp, #0]
 8011a04:	462a      	mov	r2, r5
 8011a06:	4b09      	ldr	r3, [pc, #36]	; (8011a2c <_vfiprintf_r+0x258>)
 8011a08:	a904      	add	r1, sp, #16
 8011a0a:	4630      	mov	r0, r6
 8011a0c:	f7fc f8f8 	bl	800dc00 <_printf_i>
 8011a10:	e7e4      	b.n	80119dc <_vfiprintf_r+0x208>
 8011a12:	bf00      	nop
 8011a14:	0801290c 	.word	0x0801290c
 8011a18:	0801292c 	.word	0x0801292c
 8011a1c:	080128ec 	.word	0x080128ec
 8011a20:	08012b24 	.word	0x08012b24
 8011a24:	08012b2e 	.word	0x08012b2e
 8011a28:	0800d6e9 	.word	0x0800d6e9
 8011a2c:	080117af 	.word	0x080117af
 8011a30:	08012b2a 	.word	0x08012b2a
 8011a34:	00000000 	.word	0x00000000

08011a38 <nan>:
 8011a38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011a40 <nan+0x8>
 8011a3c:	4770      	bx	lr
 8011a3e:	bf00      	nop
 8011a40:	00000000 	.word	0x00000000
 8011a44:	7ff80000 	.word	0x7ff80000

08011a48 <_sbrk_r>:
 8011a48:	b538      	push	{r3, r4, r5, lr}
 8011a4a:	4d06      	ldr	r5, [pc, #24]	; (8011a64 <_sbrk_r+0x1c>)
 8011a4c:	2300      	movs	r3, #0
 8011a4e:	4604      	mov	r4, r0
 8011a50:	4608      	mov	r0, r1
 8011a52:	602b      	str	r3, [r5, #0]
 8011a54:	f7f3 f8e6 	bl	8004c24 <_sbrk>
 8011a58:	1c43      	adds	r3, r0, #1
 8011a5a:	d102      	bne.n	8011a62 <_sbrk_r+0x1a>
 8011a5c:	682b      	ldr	r3, [r5, #0]
 8011a5e:	b103      	cbz	r3, 8011a62 <_sbrk_r+0x1a>
 8011a60:	6023      	str	r3, [r4, #0]
 8011a62:	bd38      	pop	{r3, r4, r5, pc}
 8011a64:	20004094 	.word	0x20004094

08011a68 <__sread>:
 8011a68:	b510      	push	{r4, lr}
 8011a6a:	460c      	mov	r4, r1
 8011a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a70:	f000 f93a 	bl	8011ce8 <_read_r>
 8011a74:	2800      	cmp	r0, #0
 8011a76:	bfab      	itete	ge
 8011a78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011a7a:	89a3      	ldrhlt	r3, [r4, #12]
 8011a7c:	181b      	addge	r3, r3, r0
 8011a7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011a82:	bfac      	ite	ge
 8011a84:	6563      	strge	r3, [r4, #84]	; 0x54
 8011a86:	81a3      	strhlt	r3, [r4, #12]
 8011a88:	bd10      	pop	{r4, pc}

08011a8a <__swrite>:
 8011a8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a8e:	461f      	mov	r7, r3
 8011a90:	898b      	ldrh	r3, [r1, #12]
 8011a92:	05db      	lsls	r3, r3, #23
 8011a94:	4605      	mov	r5, r0
 8011a96:	460c      	mov	r4, r1
 8011a98:	4616      	mov	r6, r2
 8011a9a:	d505      	bpl.n	8011aa8 <__swrite+0x1e>
 8011a9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011aa0:	2302      	movs	r3, #2
 8011aa2:	2200      	movs	r2, #0
 8011aa4:	f000 f8b8 	bl	8011c18 <_lseek_r>
 8011aa8:	89a3      	ldrh	r3, [r4, #12]
 8011aaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011aae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011ab2:	81a3      	strh	r3, [r4, #12]
 8011ab4:	4632      	mov	r2, r6
 8011ab6:	463b      	mov	r3, r7
 8011ab8:	4628      	mov	r0, r5
 8011aba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011abe:	f000 b837 	b.w	8011b30 <_write_r>

08011ac2 <__sseek>:
 8011ac2:	b510      	push	{r4, lr}
 8011ac4:	460c      	mov	r4, r1
 8011ac6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011aca:	f000 f8a5 	bl	8011c18 <_lseek_r>
 8011ace:	1c43      	adds	r3, r0, #1
 8011ad0:	89a3      	ldrh	r3, [r4, #12]
 8011ad2:	bf15      	itete	ne
 8011ad4:	6560      	strne	r0, [r4, #84]	; 0x54
 8011ad6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011ada:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011ade:	81a3      	strheq	r3, [r4, #12]
 8011ae0:	bf18      	it	ne
 8011ae2:	81a3      	strhne	r3, [r4, #12]
 8011ae4:	bd10      	pop	{r4, pc}

08011ae6 <__sclose>:
 8011ae6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011aea:	f000 b851 	b.w	8011b90 <_close_r>

08011aee <strncmp>:
 8011aee:	b510      	push	{r4, lr}
 8011af0:	b17a      	cbz	r2, 8011b12 <strncmp+0x24>
 8011af2:	4603      	mov	r3, r0
 8011af4:	3901      	subs	r1, #1
 8011af6:	1884      	adds	r4, r0, r2
 8011af8:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011afc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011b00:	4290      	cmp	r0, r2
 8011b02:	d101      	bne.n	8011b08 <strncmp+0x1a>
 8011b04:	42a3      	cmp	r3, r4
 8011b06:	d101      	bne.n	8011b0c <strncmp+0x1e>
 8011b08:	1a80      	subs	r0, r0, r2
 8011b0a:	bd10      	pop	{r4, pc}
 8011b0c:	2800      	cmp	r0, #0
 8011b0e:	d1f3      	bne.n	8011af8 <strncmp+0xa>
 8011b10:	e7fa      	b.n	8011b08 <strncmp+0x1a>
 8011b12:	4610      	mov	r0, r2
 8011b14:	e7f9      	b.n	8011b0a <strncmp+0x1c>

08011b16 <__ascii_wctomb>:
 8011b16:	b149      	cbz	r1, 8011b2c <__ascii_wctomb+0x16>
 8011b18:	2aff      	cmp	r2, #255	; 0xff
 8011b1a:	bf85      	ittet	hi
 8011b1c:	238a      	movhi	r3, #138	; 0x8a
 8011b1e:	6003      	strhi	r3, [r0, #0]
 8011b20:	700a      	strbls	r2, [r1, #0]
 8011b22:	f04f 30ff 	movhi.w	r0, #4294967295
 8011b26:	bf98      	it	ls
 8011b28:	2001      	movls	r0, #1
 8011b2a:	4770      	bx	lr
 8011b2c:	4608      	mov	r0, r1
 8011b2e:	4770      	bx	lr

08011b30 <_write_r>:
 8011b30:	b538      	push	{r3, r4, r5, lr}
 8011b32:	4d07      	ldr	r5, [pc, #28]	; (8011b50 <_write_r+0x20>)
 8011b34:	4604      	mov	r4, r0
 8011b36:	4608      	mov	r0, r1
 8011b38:	4611      	mov	r1, r2
 8011b3a:	2200      	movs	r2, #0
 8011b3c:	602a      	str	r2, [r5, #0]
 8011b3e:	461a      	mov	r2, r3
 8011b40:	f7f3 f81f 	bl	8004b82 <_write>
 8011b44:	1c43      	adds	r3, r0, #1
 8011b46:	d102      	bne.n	8011b4e <_write_r+0x1e>
 8011b48:	682b      	ldr	r3, [r5, #0]
 8011b4a:	b103      	cbz	r3, 8011b4e <_write_r+0x1e>
 8011b4c:	6023      	str	r3, [r4, #0]
 8011b4e:	bd38      	pop	{r3, r4, r5, pc}
 8011b50:	20004094 	.word	0x20004094

08011b54 <__assert_func>:
 8011b54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011b56:	4614      	mov	r4, r2
 8011b58:	461a      	mov	r2, r3
 8011b5a:	4b09      	ldr	r3, [pc, #36]	; (8011b80 <__assert_func+0x2c>)
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	4605      	mov	r5, r0
 8011b60:	68d8      	ldr	r0, [r3, #12]
 8011b62:	b14c      	cbz	r4, 8011b78 <__assert_func+0x24>
 8011b64:	4b07      	ldr	r3, [pc, #28]	; (8011b84 <__assert_func+0x30>)
 8011b66:	9100      	str	r1, [sp, #0]
 8011b68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011b6c:	4906      	ldr	r1, [pc, #24]	; (8011b88 <__assert_func+0x34>)
 8011b6e:	462b      	mov	r3, r5
 8011b70:	f000 f81e 	bl	8011bb0 <fiprintf>
 8011b74:	f000 f8ca 	bl	8011d0c <abort>
 8011b78:	4b04      	ldr	r3, [pc, #16]	; (8011b8c <__assert_func+0x38>)
 8011b7a:	461c      	mov	r4, r3
 8011b7c:	e7f3      	b.n	8011b66 <__assert_func+0x12>
 8011b7e:	bf00      	nop
 8011b80:	2000000c 	.word	0x2000000c
 8011b84:	08012b35 	.word	0x08012b35
 8011b88:	08012b42 	.word	0x08012b42
 8011b8c:	08012b70 	.word	0x08012b70

08011b90 <_close_r>:
 8011b90:	b538      	push	{r3, r4, r5, lr}
 8011b92:	4d06      	ldr	r5, [pc, #24]	; (8011bac <_close_r+0x1c>)
 8011b94:	2300      	movs	r3, #0
 8011b96:	4604      	mov	r4, r0
 8011b98:	4608      	mov	r0, r1
 8011b9a:	602b      	str	r3, [r5, #0]
 8011b9c:	f7f3 f80d 	bl	8004bba <_close>
 8011ba0:	1c43      	adds	r3, r0, #1
 8011ba2:	d102      	bne.n	8011baa <_close_r+0x1a>
 8011ba4:	682b      	ldr	r3, [r5, #0]
 8011ba6:	b103      	cbz	r3, 8011baa <_close_r+0x1a>
 8011ba8:	6023      	str	r3, [r4, #0]
 8011baa:	bd38      	pop	{r3, r4, r5, pc}
 8011bac:	20004094 	.word	0x20004094

08011bb0 <fiprintf>:
 8011bb0:	b40e      	push	{r1, r2, r3}
 8011bb2:	b503      	push	{r0, r1, lr}
 8011bb4:	4601      	mov	r1, r0
 8011bb6:	ab03      	add	r3, sp, #12
 8011bb8:	4805      	ldr	r0, [pc, #20]	; (8011bd0 <fiprintf+0x20>)
 8011bba:	f853 2b04 	ldr.w	r2, [r3], #4
 8011bbe:	6800      	ldr	r0, [r0, #0]
 8011bc0:	9301      	str	r3, [sp, #4]
 8011bc2:	f7ff fe07 	bl	80117d4 <_vfiprintf_r>
 8011bc6:	b002      	add	sp, #8
 8011bc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8011bcc:	b003      	add	sp, #12
 8011bce:	4770      	bx	lr
 8011bd0:	2000000c 	.word	0x2000000c

08011bd4 <_fstat_r>:
 8011bd4:	b538      	push	{r3, r4, r5, lr}
 8011bd6:	4d07      	ldr	r5, [pc, #28]	; (8011bf4 <_fstat_r+0x20>)
 8011bd8:	2300      	movs	r3, #0
 8011bda:	4604      	mov	r4, r0
 8011bdc:	4608      	mov	r0, r1
 8011bde:	4611      	mov	r1, r2
 8011be0:	602b      	str	r3, [r5, #0]
 8011be2:	f7f2 fff6 	bl	8004bd2 <_fstat>
 8011be6:	1c43      	adds	r3, r0, #1
 8011be8:	d102      	bne.n	8011bf0 <_fstat_r+0x1c>
 8011bea:	682b      	ldr	r3, [r5, #0]
 8011bec:	b103      	cbz	r3, 8011bf0 <_fstat_r+0x1c>
 8011bee:	6023      	str	r3, [r4, #0]
 8011bf0:	bd38      	pop	{r3, r4, r5, pc}
 8011bf2:	bf00      	nop
 8011bf4:	20004094 	.word	0x20004094

08011bf8 <_isatty_r>:
 8011bf8:	b538      	push	{r3, r4, r5, lr}
 8011bfa:	4d06      	ldr	r5, [pc, #24]	; (8011c14 <_isatty_r+0x1c>)
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	4604      	mov	r4, r0
 8011c00:	4608      	mov	r0, r1
 8011c02:	602b      	str	r3, [r5, #0]
 8011c04:	f7f2 fff5 	bl	8004bf2 <_isatty>
 8011c08:	1c43      	adds	r3, r0, #1
 8011c0a:	d102      	bne.n	8011c12 <_isatty_r+0x1a>
 8011c0c:	682b      	ldr	r3, [r5, #0]
 8011c0e:	b103      	cbz	r3, 8011c12 <_isatty_r+0x1a>
 8011c10:	6023      	str	r3, [r4, #0]
 8011c12:	bd38      	pop	{r3, r4, r5, pc}
 8011c14:	20004094 	.word	0x20004094

08011c18 <_lseek_r>:
 8011c18:	b538      	push	{r3, r4, r5, lr}
 8011c1a:	4d07      	ldr	r5, [pc, #28]	; (8011c38 <_lseek_r+0x20>)
 8011c1c:	4604      	mov	r4, r0
 8011c1e:	4608      	mov	r0, r1
 8011c20:	4611      	mov	r1, r2
 8011c22:	2200      	movs	r2, #0
 8011c24:	602a      	str	r2, [r5, #0]
 8011c26:	461a      	mov	r2, r3
 8011c28:	f7f2 ffee 	bl	8004c08 <_lseek>
 8011c2c:	1c43      	adds	r3, r0, #1
 8011c2e:	d102      	bne.n	8011c36 <_lseek_r+0x1e>
 8011c30:	682b      	ldr	r3, [r5, #0]
 8011c32:	b103      	cbz	r3, 8011c36 <_lseek_r+0x1e>
 8011c34:	6023      	str	r3, [r4, #0]
 8011c36:	bd38      	pop	{r3, r4, r5, pc}
 8011c38:	20004094 	.word	0x20004094

08011c3c <memmove>:
 8011c3c:	4288      	cmp	r0, r1
 8011c3e:	b510      	push	{r4, lr}
 8011c40:	eb01 0402 	add.w	r4, r1, r2
 8011c44:	d902      	bls.n	8011c4c <memmove+0x10>
 8011c46:	4284      	cmp	r4, r0
 8011c48:	4623      	mov	r3, r4
 8011c4a:	d807      	bhi.n	8011c5c <memmove+0x20>
 8011c4c:	1e43      	subs	r3, r0, #1
 8011c4e:	42a1      	cmp	r1, r4
 8011c50:	d008      	beq.n	8011c64 <memmove+0x28>
 8011c52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011c56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011c5a:	e7f8      	b.n	8011c4e <memmove+0x12>
 8011c5c:	4402      	add	r2, r0
 8011c5e:	4601      	mov	r1, r0
 8011c60:	428a      	cmp	r2, r1
 8011c62:	d100      	bne.n	8011c66 <memmove+0x2a>
 8011c64:	bd10      	pop	{r4, pc}
 8011c66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011c6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011c6e:	e7f7      	b.n	8011c60 <memmove+0x24>

08011c70 <__malloc_lock>:
 8011c70:	4801      	ldr	r0, [pc, #4]	; (8011c78 <__malloc_lock+0x8>)
 8011c72:	f7fe bde6 	b.w	8010842 <__retarget_lock_acquire_recursive>
 8011c76:	bf00      	nop
 8011c78:	20004088 	.word	0x20004088

08011c7c <__malloc_unlock>:
 8011c7c:	4801      	ldr	r0, [pc, #4]	; (8011c84 <__malloc_unlock+0x8>)
 8011c7e:	f7fe bde1 	b.w	8010844 <__retarget_lock_release_recursive>
 8011c82:	bf00      	nop
 8011c84:	20004088 	.word	0x20004088

08011c88 <_realloc_r>:
 8011c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c8c:	4680      	mov	r8, r0
 8011c8e:	4614      	mov	r4, r2
 8011c90:	460e      	mov	r6, r1
 8011c92:	b921      	cbnz	r1, 8011c9e <_realloc_r+0x16>
 8011c94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011c98:	4611      	mov	r1, r2
 8011c9a:	f7ff bba1 	b.w	80113e0 <_malloc_r>
 8011c9e:	b92a      	cbnz	r2, 8011cac <_realloc_r+0x24>
 8011ca0:	f7ff fb32 	bl	8011308 <_free_r>
 8011ca4:	4625      	mov	r5, r4
 8011ca6:	4628      	mov	r0, r5
 8011ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cac:	f000 f835 	bl	8011d1a <_malloc_usable_size_r>
 8011cb0:	4284      	cmp	r4, r0
 8011cb2:	4607      	mov	r7, r0
 8011cb4:	d802      	bhi.n	8011cbc <_realloc_r+0x34>
 8011cb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011cba:	d812      	bhi.n	8011ce2 <_realloc_r+0x5a>
 8011cbc:	4621      	mov	r1, r4
 8011cbe:	4640      	mov	r0, r8
 8011cc0:	f7ff fb8e 	bl	80113e0 <_malloc_r>
 8011cc4:	4605      	mov	r5, r0
 8011cc6:	2800      	cmp	r0, #0
 8011cc8:	d0ed      	beq.n	8011ca6 <_realloc_r+0x1e>
 8011cca:	42bc      	cmp	r4, r7
 8011ccc:	4622      	mov	r2, r4
 8011cce:	4631      	mov	r1, r6
 8011cd0:	bf28      	it	cs
 8011cd2:	463a      	movcs	r2, r7
 8011cd4:	f7fe fe36 	bl	8010944 <memcpy>
 8011cd8:	4631      	mov	r1, r6
 8011cda:	4640      	mov	r0, r8
 8011cdc:	f7ff fb14 	bl	8011308 <_free_r>
 8011ce0:	e7e1      	b.n	8011ca6 <_realloc_r+0x1e>
 8011ce2:	4635      	mov	r5, r6
 8011ce4:	e7df      	b.n	8011ca6 <_realloc_r+0x1e>
	...

08011ce8 <_read_r>:
 8011ce8:	b538      	push	{r3, r4, r5, lr}
 8011cea:	4d07      	ldr	r5, [pc, #28]	; (8011d08 <_read_r+0x20>)
 8011cec:	4604      	mov	r4, r0
 8011cee:	4608      	mov	r0, r1
 8011cf0:	4611      	mov	r1, r2
 8011cf2:	2200      	movs	r2, #0
 8011cf4:	602a      	str	r2, [r5, #0]
 8011cf6:	461a      	mov	r2, r3
 8011cf8:	f7f2 ff26 	bl	8004b48 <_read>
 8011cfc:	1c43      	adds	r3, r0, #1
 8011cfe:	d102      	bne.n	8011d06 <_read_r+0x1e>
 8011d00:	682b      	ldr	r3, [r5, #0]
 8011d02:	b103      	cbz	r3, 8011d06 <_read_r+0x1e>
 8011d04:	6023      	str	r3, [r4, #0]
 8011d06:	bd38      	pop	{r3, r4, r5, pc}
 8011d08:	20004094 	.word	0x20004094

08011d0c <abort>:
 8011d0c:	b508      	push	{r3, lr}
 8011d0e:	2006      	movs	r0, #6
 8011d10:	f000 f834 	bl	8011d7c <raise>
 8011d14:	2001      	movs	r0, #1
 8011d16:	f7f2 ff0d 	bl	8004b34 <_exit>

08011d1a <_malloc_usable_size_r>:
 8011d1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011d1e:	1f18      	subs	r0, r3, #4
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	bfbc      	itt	lt
 8011d24:	580b      	ldrlt	r3, [r1, r0]
 8011d26:	18c0      	addlt	r0, r0, r3
 8011d28:	4770      	bx	lr

08011d2a <_raise_r>:
 8011d2a:	291f      	cmp	r1, #31
 8011d2c:	b538      	push	{r3, r4, r5, lr}
 8011d2e:	4604      	mov	r4, r0
 8011d30:	460d      	mov	r5, r1
 8011d32:	d904      	bls.n	8011d3e <_raise_r+0x14>
 8011d34:	2316      	movs	r3, #22
 8011d36:	6003      	str	r3, [r0, #0]
 8011d38:	f04f 30ff 	mov.w	r0, #4294967295
 8011d3c:	bd38      	pop	{r3, r4, r5, pc}
 8011d3e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011d40:	b112      	cbz	r2, 8011d48 <_raise_r+0x1e>
 8011d42:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011d46:	b94b      	cbnz	r3, 8011d5c <_raise_r+0x32>
 8011d48:	4620      	mov	r0, r4
 8011d4a:	f000 f831 	bl	8011db0 <_getpid_r>
 8011d4e:	462a      	mov	r2, r5
 8011d50:	4601      	mov	r1, r0
 8011d52:	4620      	mov	r0, r4
 8011d54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011d58:	f000 b818 	b.w	8011d8c <_kill_r>
 8011d5c:	2b01      	cmp	r3, #1
 8011d5e:	d00a      	beq.n	8011d76 <_raise_r+0x4c>
 8011d60:	1c59      	adds	r1, r3, #1
 8011d62:	d103      	bne.n	8011d6c <_raise_r+0x42>
 8011d64:	2316      	movs	r3, #22
 8011d66:	6003      	str	r3, [r0, #0]
 8011d68:	2001      	movs	r0, #1
 8011d6a:	e7e7      	b.n	8011d3c <_raise_r+0x12>
 8011d6c:	2400      	movs	r4, #0
 8011d6e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011d72:	4628      	mov	r0, r5
 8011d74:	4798      	blx	r3
 8011d76:	2000      	movs	r0, #0
 8011d78:	e7e0      	b.n	8011d3c <_raise_r+0x12>
	...

08011d7c <raise>:
 8011d7c:	4b02      	ldr	r3, [pc, #8]	; (8011d88 <raise+0xc>)
 8011d7e:	4601      	mov	r1, r0
 8011d80:	6818      	ldr	r0, [r3, #0]
 8011d82:	f7ff bfd2 	b.w	8011d2a <_raise_r>
 8011d86:	bf00      	nop
 8011d88:	2000000c 	.word	0x2000000c

08011d8c <_kill_r>:
 8011d8c:	b538      	push	{r3, r4, r5, lr}
 8011d8e:	4d07      	ldr	r5, [pc, #28]	; (8011dac <_kill_r+0x20>)
 8011d90:	2300      	movs	r3, #0
 8011d92:	4604      	mov	r4, r0
 8011d94:	4608      	mov	r0, r1
 8011d96:	4611      	mov	r1, r2
 8011d98:	602b      	str	r3, [r5, #0]
 8011d9a:	f7f2 febb 	bl	8004b14 <_kill>
 8011d9e:	1c43      	adds	r3, r0, #1
 8011da0:	d102      	bne.n	8011da8 <_kill_r+0x1c>
 8011da2:	682b      	ldr	r3, [r5, #0]
 8011da4:	b103      	cbz	r3, 8011da8 <_kill_r+0x1c>
 8011da6:	6023      	str	r3, [r4, #0]
 8011da8:	bd38      	pop	{r3, r4, r5, pc}
 8011daa:	bf00      	nop
 8011dac:	20004094 	.word	0x20004094

08011db0 <_getpid_r>:
 8011db0:	f7f2 bea8 	b.w	8004b04 <_getpid>

08011db4 <checkint>:
 8011db4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011db8:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8011dbc:	429a      	cmp	r2, r3
 8011dbe:	b570      	push	{r4, r5, r6, lr}
 8011dc0:	dd2a      	ble.n	8011e18 <checkint+0x64>
 8011dc2:	f240 4333 	movw	r3, #1075	; 0x433
 8011dc6:	429a      	cmp	r2, r3
 8011dc8:	dc24      	bgt.n	8011e14 <checkint+0x60>
 8011dca:	1a9b      	subs	r3, r3, r2
 8011dcc:	f1a3 0620 	sub.w	r6, r3, #32
 8011dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8011dd4:	fa02 f403 	lsl.w	r4, r2, r3
 8011dd8:	fa02 f606 	lsl.w	r6, r2, r6
 8011ddc:	f1c3 0520 	rsb	r5, r3, #32
 8011de0:	fa22 f505 	lsr.w	r5, r2, r5
 8011de4:	4334      	orrs	r4, r6
 8011de6:	432c      	orrs	r4, r5
 8011de8:	409a      	lsls	r2, r3
 8011dea:	ea20 0202 	bic.w	r2, r0, r2
 8011dee:	ea21 0404 	bic.w	r4, r1, r4
 8011df2:	4322      	orrs	r2, r4
 8011df4:	f1a3 0420 	sub.w	r4, r3, #32
 8011df8:	f1c3 0220 	rsb	r2, r3, #32
 8011dfc:	d10c      	bne.n	8011e18 <checkint+0x64>
 8011dfe:	40d8      	lsrs	r0, r3
 8011e00:	fa01 f302 	lsl.w	r3, r1, r2
 8011e04:	4318      	orrs	r0, r3
 8011e06:	40e1      	lsrs	r1, r4
 8011e08:	4308      	orrs	r0, r1
 8011e0a:	f000 0001 	and.w	r0, r0, #1
 8011e0e:	f1d0 0002 	rsbs	r0, r0, #2
 8011e12:	bd70      	pop	{r4, r5, r6, pc}
 8011e14:	2002      	movs	r0, #2
 8011e16:	e7fc      	b.n	8011e12 <checkint+0x5e>
 8011e18:	2000      	movs	r0, #0
 8011e1a:	e7fa      	b.n	8011e12 <checkint+0x5e>
 8011e1c:	0000      	movs	r0, r0
	...

08011e20 <pow>:
 8011e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e24:	ee10 4a90 	vmov	r4, s1
 8011e28:	ed2d 8b0a 	vpush	{d8-d12}
 8011e2c:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 8011e30:	ee11 7a90 	vmov	r7, s3
 8011e34:	f10a 32ff 	add.w	r2, sl, #4294967295
 8011e38:	f240 73fd 	movw	r3, #2045	; 0x7fd
 8011e3c:	429a      	cmp	r2, r3
 8011e3e:	ee10 6a10 	vmov	r6, s0
 8011e42:	ee11 0a10 	vmov	r0, s2
 8011e46:	b086      	sub	sp, #24
 8011e48:	46d4      	mov	ip, sl
 8011e4a:	ea4f 5517 	mov.w	r5, r7, lsr #20
 8011e4e:	d806      	bhi.n	8011e5e <pow+0x3e>
 8011e50:	f3c5 030a 	ubfx	r3, r5, #0, #11
 8011e54:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8011e58:	2b7f      	cmp	r3, #127	; 0x7f
 8011e5a:	f240 8156 	bls.w	801210a <pow+0x2ea>
 8011e5e:	1802      	adds	r2, r0, r0
 8011e60:	eb47 0107 	adc.w	r1, r7, r7
 8011e64:	f06f 0e01 	mvn.w	lr, #1
 8011e68:	f112 39ff 	adds.w	r9, r2, #4294967295
 8011e6c:	f141 38ff 	adc.w	r8, r1, #4294967295
 8011e70:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8011e74:	45ce      	cmp	lr, r9
 8011e76:	eb73 0808 	sbcs.w	r8, r3, r8
 8011e7a:	d23f      	bcs.n	8011efc <pow+0xdc>
 8011e7c:	ea52 0301 	orrs.w	r3, r2, r1
 8011e80:	f04f 0300 	mov.w	r3, #0
 8011e84:	d10c      	bne.n	8011ea0 <pow+0x80>
 8011e86:	19b6      	adds	r6, r6, r6
 8011e88:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 8011e8c:	4164      	adcs	r4, r4
 8011e8e:	42b3      	cmp	r3, r6
 8011e90:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011e94:	41a3      	sbcs	r3, r4
 8011e96:	f0c0 808c 	bcc.w	8011fb2 <pow+0x192>
 8011e9a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011e9e:	e028      	b.n	8011ef2 <pow+0xd2>
 8011ea0:	4da3      	ldr	r5, [pc, #652]	; (8012130 <pow+0x310>)
 8011ea2:	42ac      	cmp	r4, r5
 8011ea4:	bf08      	it	eq
 8011ea6:	429e      	cmpeq	r6, r3
 8011ea8:	d107      	bne.n	8011eba <pow+0x9a>
 8011eaa:	1800      	adds	r0, r0, r0
 8011eac:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 8011eb0:	417f      	adcs	r7, r7
 8011eb2:	4283      	cmp	r3, r0
 8011eb4:	4b9f      	ldr	r3, [pc, #636]	; (8012134 <pow+0x314>)
 8011eb6:	41bb      	sbcs	r3, r7
 8011eb8:	e7ed      	b.n	8011e96 <pow+0x76>
 8011eba:	19b6      	adds	r6, r6, r6
 8011ebc:	489e      	ldr	r0, [pc, #632]	; (8012138 <pow+0x318>)
 8011ebe:	4164      	adcs	r4, r4
 8011ec0:	42b3      	cmp	r3, r6
 8011ec2:	eb70 0504 	sbcs.w	r5, r0, r4
 8011ec6:	d374      	bcc.n	8011fb2 <pow+0x192>
 8011ec8:	4281      	cmp	r1, r0
 8011eca:	bf08      	it	eq
 8011ecc:	429a      	cmpeq	r2, r3
 8011ece:	d170      	bne.n	8011fb2 <pow+0x192>
 8011ed0:	4a9a      	ldr	r2, [pc, #616]	; (801213c <pow+0x31c>)
 8011ed2:	4294      	cmp	r4, r2
 8011ed4:	bf08      	it	eq
 8011ed6:	429e      	cmpeq	r6, r3
 8011ed8:	d0df      	beq.n	8011e9a <pow+0x7a>
 8011eda:	4294      	cmp	r4, r2
 8011edc:	ea6f 0707 	mvn.w	r7, r7
 8011ee0:	bf34      	ite	cc
 8011ee2:	2400      	movcc	r4, #0
 8011ee4:	2401      	movcs	r4, #1
 8011ee6:	0fff      	lsrs	r7, r7, #31
 8011ee8:	42bc      	cmp	r4, r7
 8011eea:	f040 81d9 	bne.w	80122a0 <pow+0x480>
 8011eee:	ee21 0b01 	vmul.f64	d0, d1, d1
 8011ef2:	b006      	add	sp, #24
 8011ef4:	ecbd 8b0a 	vpop	{d8-d12}
 8011ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011efc:	eb16 0806 	adds.w	r8, r6, r6
 8011f00:	eb44 0904 	adc.w	r9, r4, r4
 8011f04:	f118 31ff 	adds.w	r1, r8, #4294967295
 8011f08:	f169 0200 	sbc.w	r2, r9, #0
 8011f0c:	458e      	cmp	lr, r1
 8011f0e:	4193      	sbcs	r3, r2
 8011f10:	d223      	bcs.n	8011f5a <pow+0x13a>
 8011f12:	ee20 0b00 	vmul.f64	d0, d0, d0
 8011f16:	2c00      	cmp	r4, #0
 8011f18:	da12      	bge.n	8011f40 <pow+0x120>
 8011f1a:	4639      	mov	r1, r7
 8011f1c:	f7ff ff4a 	bl	8011db4 <checkint>
 8011f20:	2801      	cmp	r0, #1
 8011f22:	d10d      	bne.n	8011f40 <pow+0x120>
 8011f24:	eeb1 0b40 	vneg.f64	d0, d0
 8011f28:	ea58 0309 	orrs.w	r3, r8, r9
 8011f2c:	d10a      	bne.n	8011f44 <pow+0x124>
 8011f2e:	2f00      	cmp	r7, #0
 8011f30:	dadf      	bge.n	8011ef2 <pow+0xd2>
 8011f32:	b006      	add	sp, #24
 8011f34:	ecbd 8b0a 	vpop	{d8-d12}
 8011f38:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f3c:	f000 ba14 	b.w	8012368 <__math_divzero>
 8011f40:	2000      	movs	r0, #0
 8011f42:	e7f1      	b.n	8011f28 <pow+0x108>
 8011f44:	2f00      	cmp	r7, #0
 8011f46:	dad4      	bge.n	8011ef2 <pow+0xd2>
 8011f48:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011f4c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8011f50:	ed8d 7b00 	vstr	d7, [sp]
 8011f54:	ed9d 0b00 	vldr	d0, [sp]
 8011f58:	e7cb      	b.n	8011ef2 <pow+0xd2>
 8011f5a:	2c00      	cmp	r4, #0
 8011f5c:	da2c      	bge.n	8011fb8 <pow+0x198>
 8011f5e:	4639      	mov	r1, r7
 8011f60:	f7ff ff28 	bl	8011db4 <checkint>
 8011f64:	b930      	cbnz	r0, 8011f74 <pow+0x154>
 8011f66:	b006      	add	sp, #24
 8011f68:	ecbd 8b0a 	vpop	{d8-d12}
 8011f6c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f70:	f000 ba12 	b.w	8012398 <__math_invalid>
 8011f74:	2801      	cmp	r0, #1
 8011f76:	bf14      	ite	ne
 8011f78:	2000      	movne	r0, #0
 8011f7a:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8011f7e:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8011f82:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 8011f86:	f3c5 020a 	ubfx	r2, r5, #0, #11
 8011f8a:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 8011f8e:	2b7f      	cmp	r3, #127	; 0x7f
 8011f90:	d92d      	bls.n	8011fee <pow+0x1ce>
 8011f92:	4b67      	ldr	r3, [pc, #412]	; (8012130 <pow+0x310>)
 8011f94:	2000      	movs	r0, #0
 8011f96:	429c      	cmp	r4, r3
 8011f98:	bf08      	it	eq
 8011f9a:	4286      	cmpeq	r6, r0
 8011f9c:	f43f af7d 	beq.w	8011e9a <pow+0x7a>
 8011fa0:	f240 31bd 	movw	r1, #957	; 0x3bd
 8011fa4:	428a      	cmp	r2, r1
 8011fa6:	d80c      	bhi.n	8011fc2 <pow+0x1a2>
 8011fa8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011fac:	42b0      	cmp	r0, r6
 8011fae:	41a3      	sbcs	r3, r4
 8011fb0:	d204      	bcs.n	8011fbc <pow+0x19c>
 8011fb2:	ee31 0b00 	vadd.f64	d0, d1, d0
 8011fb6:	e79c      	b.n	8011ef2 <pow+0xd2>
 8011fb8:	2000      	movs	r0, #0
 8011fba:	e7e4      	b.n	8011f86 <pow+0x166>
 8011fbc:	ee30 0b41 	vsub.f64	d0, d0, d1
 8011fc0:	e797      	b.n	8011ef2 <pow+0xd2>
 8011fc2:	2e01      	cmp	r6, #1
 8011fc4:	eb74 0303 	sbcs.w	r3, r4, r3
 8011fc8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8011fcc:	bf34      	ite	cc
 8011fce:	2301      	movcc	r3, #1
 8011fd0:	2300      	movcs	r3, #0
 8011fd2:	4295      	cmp	r5, r2
 8011fd4:	bf8c      	ite	hi
 8011fd6:	2500      	movhi	r5, #0
 8011fd8:	2501      	movls	r5, #1
 8011fda:	42ab      	cmp	r3, r5
 8011fdc:	f000 809d 	beq.w	801211a <pow+0x2fa>
 8011fe0:	b006      	add	sp, #24
 8011fe2:	ecbd 8b0a 	vpop	{d8-d12}
 8011fe6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011fea:	f000 b9b5 	b.w	8012358 <__math_oflow>
 8011fee:	f1bc 0f00 	cmp.w	ip, #0
 8011ff2:	d10b      	bne.n	801200c <pow+0x1ec>
 8011ff4:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8012128 <pow+0x308>
 8011ff8:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011ffc:	ec53 2b17 	vmov	r2, r3, d7
 8012000:	ee17 6a10 	vmov	r6, s14
 8012004:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8012008:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 801200c:	4b4c      	ldr	r3, [pc, #304]	; (8012140 <pow+0x320>)
 801200e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8012012:	4423      	add	r3, r4
 8012014:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8012018:	1519      	asrs	r1, r3, #20
 801201a:	0d1b      	lsrs	r3, r3, #20
 801201c:	051b      	lsls	r3, r3, #20
 801201e:	eba4 0903 	sub.w	r9, r4, r3
 8012022:	4b48      	ldr	r3, [pc, #288]	; (8012144 <pow+0x324>)
 8012024:	ee04 1a10 	vmov	s8, r1
 8012028:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 801202c:	f1b6 0800 	subs.w	r8, r6, #0
 8012030:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 8012034:	ec49 8b15 	vmov	d5, r8, r9
 8012038:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 801203c:	eea5 6b07 	vfma.f64	d6, d5, d7
 8012040:	ed93 7b00 	vldr	d7, [r3]
 8012044:	ed93 5b02 	vldr	d5, [r3, #8]
 8012048:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 801204c:	eea4 2b07 	vfma.f64	d2, d4, d7
 8012050:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 8012054:	ee36 ab02 	vadd.f64	d10, d6, d2
 8012058:	ee32 2b4a 	vsub.f64	d2, d2, d10
 801205c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8012060:	ed93 5b04 	vldr	d5, [r3, #16]
 8012064:	ee32 2b06 	vadd.f64	d2, d2, d6
 8012068:	ee37 7b02 	vadd.f64	d7, d7, d2
 801206c:	ee26 5b05 	vmul.f64	d5, d6, d5
 8012070:	ed93 4b08 	vldr	d4, [r3, #32]
 8012074:	ee26 0b05 	vmul.f64	d0, d6, d5
 8012078:	eeb0 9b40 	vmov.f64	d9, d0
 801207c:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8012080:	ed93 5b06 	vldr	d5, [r3, #24]
 8012084:	ee3a 8b00 	vadd.f64	d8, d10, d0
 8012088:	ee26 bb00 	vmul.f64	d11, d6, d0
 801208c:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8012090:	eea6 5b04 	vfma.f64	d5, d6, d4
 8012094:	ee3a ab48 	vsub.f64	d10, d10, d8
 8012098:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 801209c:	ee37 9b09 	vadd.f64	d9, d7, d9
 80120a0:	ee3a ab00 	vadd.f64	d10, d10, d0
 80120a4:	eea6 4b03 	vfma.f64	d4, d6, d3
 80120a8:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 80120ac:	ee39 ab0a 	vadd.f64	d10, d9, d10
 80120b0:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 80120b4:	eea6 3b0c 	vfma.f64	d3, d6, d12
 80120b8:	eea0 4b03 	vfma.f64	d4, d0, d3
 80120bc:	eea0 5b04 	vfma.f64	d5, d0, d4
 80120c0:	eeab ab05 	vfma.f64	d10, d11, d5
 80120c4:	ee38 6b0a 	vadd.f64	d6, d8, d10
 80120c8:	ee21 7b06 	vmul.f64	d7, d1, d6
 80120cc:	ee17 3a90 	vmov	r3, s15
 80120d0:	eeb0 5b47 	vmov.f64	d5, d7
 80120d4:	f3c3 560a 	ubfx	r6, r3, #20, #11
 80120d8:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 80120dc:	18b2      	adds	r2, r6, r2
 80120de:	2a3e      	cmp	r2, #62	; 0x3e
 80120e0:	ee91 5b06 	vfnms.f64	d5, d1, d6
 80120e4:	ee38 8b46 	vsub.f64	d8, d8, d6
 80120e8:	ee38 ab0a 	vadd.f64	d10, d8, d10
 80120ec:	eea1 5b0a 	vfma.f64	d5, d1, d10
 80120f0:	d92b      	bls.n	801214a <pow+0x32a>
 80120f2:	2a00      	cmp	r2, #0
 80120f4:	da0b      	bge.n	801210e <pow+0x2ee>
 80120f6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80120fa:	ee37 0b00 	vadd.f64	d0, d7, d0
 80120fe:	2800      	cmp	r0, #0
 8012100:	f43f aef7 	beq.w	8011ef2 <pow+0xd2>
 8012104:	eeb1 0b40 	vneg.f64	d0, d0
 8012108:	e6f3      	b.n	8011ef2 <pow+0xd2>
 801210a:	2000      	movs	r0, #0
 801210c:	e77e      	b.n	801200c <pow+0x1ec>
 801210e:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8012112:	d919      	bls.n	8012148 <pow+0x328>
 8012114:	2b00      	cmp	r3, #0
 8012116:	f6bf af63 	bge.w	8011fe0 <pow+0x1c0>
 801211a:	b006      	add	sp, #24
 801211c:	ecbd 8b0a 	vpop	{d8-d12}
 8012120:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012124:	f000 b910 	b.w	8012348 <__math_uflow>
 8012128:	00000000 	.word	0x00000000
 801212c:	43300000 	.word	0x43300000
 8012130:	3ff00000 	.word	0x3ff00000
 8012134:	fff00000 	.word	0xfff00000
 8012138:	ffe00000 	.word	0xffe00000
 801213c:	7fe00000 	.word	0x7fe00000
 8012140:	c0196aab 	.word	0xc0196aab
 8012144:	08012b78 	.word	0x08012b78
 8012148:	2600      	movs	r6, #0
 801214a:	495d      	ldr	r1, [pc, #372]	; (80122c0 <pow+0x4a0>)
 801214c:	ed91 4b02 	vldr	d4, [r1, #8]
 8012150:	ed91 3b00 	vldr	d3, [r1]
 8012154:	eeb0 6b44 	vmov.f64	d6, d4
 8012158:	eea7 6b03 	vfma.f64	d6, d7, d3
 801215c:	ee16 5a10 	vmov	r5, s12
 8012160:	ee36 6b44 	vsub.f64	d6, d6, d4
 8012164:	ed91 4b04 	vldr	d4, [r1, #16]
 8012168:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 801216c:	eea6 7b04 	vfma.f64	d7, d6, d4
 8012170:	eeb0 0b47 	vmov.f64	d0, d7
 8012174:	ed91 7b06 	vldr	d7, [r1, #24]
 8012178:	18dc      	adds	r4, r3, r3
 801217a:	f104 030f 	add.w	r3, r4, #15
 801217e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8012182:	eea6 0b07 	vfma.f64	d0, d6, d7
 8012186:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 801218a:	ee35 0b00 	vadd.f64	d0, d5, d0
 801218e:	ee20 6b00 	vmul.f64	d6, d0, d0
 8012192:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 8012196:	ed91 5b08 	vldr	d5, [r1, #32]
 801219a:	ee30 7b07 	vadd.f64	d7, d0, d7
 801219e:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 80121a2:	eea0 5b04 	vfma.f64	d5, d0, d4
 80121a6:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 80121aa:	eea6 7b05 	vfma.f64	d7, d6, d5
 80121ae:	ee26 6b06 	vmul.f64	d6, d6, d6
 80121b2:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 80121b6:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 80121ba:	f8d2 e004 	ldr.w	lr, [r2, #4]
 80121be:	eea0 5b04 	vfma.f64	d5, d0, d4
 80121c2:	1940      	adds	r0, r0, r5
 80121c4:	2700      	movs	r7, #0
 80121c6:	eb17 020c 	adds.w	r2, r7, ip
 80121ca:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 80121ce:	eea6 7b05 	vfma.f64	d7, d6, d5
 80121d2:	2e00      	cmp	r6, #0
 80121d4:	d15f      	bne.n	8012296 <pow+0x476>
 80121d6:	42bd      	cmp	r5, r7
 80121d8:	db13      	blt.n	8012202 <pow+0x3e2>
 80121da:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 80121de:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 80121e2:	4610      	mov	r0, r2
 80121e4:	ec41 0b10 	vmov	d0, r0, r1
 80121e8:	eea7 0b00 	vfma.f64	d0, d7, d0
 80121ec:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80122a8 <pow+0x488>
 80121f0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80121f4:	b006      	add	sp, #24
 80121f6:	ecbd 8b0a 	vpop	{d8-d12}
 80121fa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80121fe:	f000 b8e3 	b.w	80123c8 <__math_check_oflow>
 8012202:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8012206:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 801220a:	4610      	mov	r0, r2
 801220c:	ec41 0b15 	vmov	d5, r0, r1
 8012210:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8012214:	ee27 6b05 	vmul.f64	d6, d7, d5
 8012218:	ee35 7b06 	vadd.f64	d7, d5, d6
 801221c:	eeb0 3bc7 	vabs.f64	d3, d7
 8012220:	eeb4 3bc4 	vcmpe.f64	d3, d4
 8012224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012228:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80122b0 <pow+0x490>
 801222c:	d52a      	bpl.n	8012284 <pow+0x464>
 801222e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8012232:	ee35 5b47 	vsub.f64	d5, d5, d7
 8012236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801223a:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 801223e:	ee35 6b06 	vadd.f64	d6, d5, d6
 8012242:	bf48      	it	mi
 8012244:	eeb0 4b43 	vmovmi.f64	d4, d3
 8012248:	ee37 3b04 	vadd.f64	d3, d7, d4
 801224c:	ee34 5b43 	vsub.f64	d5, d4, d3
 8012250:	ee35 7b07 	vadd.f64	d7, d5, d7
 8012254:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012258:	ee37 7b03 	vadd.f64	d7, d7, d3
 801225c:	ee37 7b44 	vsub.f64	d7, d7, d4
 8012260:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012268:	d104      	bne.n	8012274 <pow+0x454>
 801226a:	4632      	mov	r2, r6
 801226c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8012270:	ec43 2b17 	vmov	d7, r2, r3
 8012274:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012278:	ed9d 6b02 	vldr	d6, [sp, #8]
 801227c:	ee26 6b00 	vmul.f64	d6, d6, d0
 8012280:	ed8d 6b04 	vstr	d6, [sp, #16]
 8012284:	ee27 0b00 	vmul.f64	d0, d7, d0
 8012288:	b006      	add	sp, #24
 801228a:	ecbd 8b0a 	vpop	{d8-d12}
 801228e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012292:	f000 b890 	b.w	80123b6 <__math_check_uflow>
 8012296:	ec43 2b10 	vmov	d0, r2, r3
 801229a:	eea7 0b00 	vfma.f64	d0, d7, d0
 801229e:	e628      	b.n	8011ef2 <pow+0xd2>
 80122a0:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80122b8 <pow+0x498>
 80122a4:	e625      	b.n	8011ef2 <pow+0xd2>
 80122a6:	bf00      	nop
 80122a8:	00000000 	.word	0x00000000
 80122ac:	7f000000 	.word	0x7f000000
 80122b0:	00000000 	.word	0x00000000
 80122b4:	00100000 	.word	0x00100000
	...
 80122c0:	08013bc0 	.word	0x08013bc0
 80122c4:	00000000 	.word	0x00000000

080122c8 <sqrt>:
 80122c8:	b508      	push	{r3, lr}
 80122ca:	ed2d 8b04 	vpush	{d8-d9}
 80122ce:	eeb0 8b40 	vmov.f64	d8, d0
 80122d2:	f000 f819 	bl	8012308 <__ieee754_sqrt>
 80122d6:	eeb4 8b48 	vcmp.f64	d8, d8
 80122da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122de:	d60c      	bvs.n	80122fa <sqrt+0x32>
 80122e0:	ed9f 9b07 	vldr	d9, [pc, #28]	; 8012300 <sqrt+0x38>
 80122e4:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80122e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122ec:	d505      	bpl.n	80122fa <sqrt+0x32>
 80122ee:	f7fb f937 	bl	800d560 <__errno>
 80122f2:	ee89 0b09 	vdiv.f64	d0, d9, d9
 80122f6:	2321      	movs	r3, #33	; 0x21
 80122f8:	6003      	str	r3, [r0, #0]
 80122fa:	ecbd 8b04 	vpop	{d8-d9}
 80122fe:	bd08      	pop	{r3, pc}
	...

08012308 <__ieee754_sqrt>:
 8012308:	eeb1 0bc0 	vsqrt.f64	d0, d0
 801230c:	4770      	bx	lr

0801230e <with_errno>:
 801230e:	b513      	push	{r0, r1, r4, lr}
 8012310:	4604      	mov	r4, r0
 8012312:	ed8d 0b00 	vstr	d0, [sp]
 8012316:	f7fb f923 	bl	800d560 <__errno>
 801231a:	ed9d 0b00 	vldr	d0, [sp]
 801231e:	6004      	str	r4, [r0, #0]
 8012320:	b002      	add	sp, #8
 8012322:	bd10      	pop	{r4, pc}

08012324 <xflow>:
 8012324:	b082      	sub	sp, #8
 8012326:	b158      	cbz	r0, 8012340 <xflow+0x1c>
 8012328:	eeb1 7b40 	vneg.f64	d7, d0
 801232c:	ed8d 7b00 	vstr	d7, [sp]
 8012330:	ed9d 7b00 	vldr	d7, [sp]
 8012334:	2022      	movs	r0, #34	; 0x22
 8012336:	ee20 0b07 	vmul.f64	d0, d0, d7
 801233a:	b002      	add	sp, #8
 801233c:	f7ff bfe7 	b.w	801230e <with_errno>
 8012340:	eeb0 7b40 	vmov.f64	d7, d0
 8012344:	e7f2      	b.n	801232c <xflow+0x8>
	...

08012348 <__math_uflow>:
 8012348:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012350 <__math_uflow+0x8>
 801234c:	f7ff bfea 	b.w	8012324 <xflow>
 8012350:	00000000 	.word	0x00000000
 8012354:	10000000 	.word	0x10000000

08012358 <__math_oflow>:
 8012358:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012360 <__math_oflow+0x8>
 801235c:	f7ff bfe2 	b.w	8012324 <xflow>
 8012360:	00000000 	.word	0x00000000
 8012364:	70000000 	.word	0x70000000

08012368 <__math_divzero>:
 8012368:	b082      	sub	sp, #8
 801236a:	2800      	cmp	r0, #0
 801236c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8012370:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8012374:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8012378:	ed8d 7b00 	vstr	d7, [sp]
 801237c:	ed9d 0b00 	vldr	d0, [sp]
 8012380:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8012390 <__math_divzero+0x28>
 8012384:	2022      	movs	r0, #34	; 0x22
 8012386:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801238a:	b002      	add	sp, #8
 801238c:	f7ff bfbf 	b.w	801230e <with_errno>
	...

08012398 <__math_invalid>:
 8012398:	eeb0 7b40 	vmov.f64	d7, d0
 801239c:	eeb4 7b47 	vcmp.f64	d7, d7
 80123a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123a4:	ee30 6b40 	vsub.f64	d6, d0, d0
 80123a8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 80123ac:	d602      	bvs.n	80123b4 <__math_invalid+0x1c>
 80123ae:	2021      	movs	r0, #33	; 0x21
 80123b0:	f7ff bfad 	b.w	801230e <with_errno>
 80123b4:	4770      	bx	lr

080123b6 <__math_check_uflow>:
 80123b6:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80123ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123be:	d102      	bne.n	80123c6 <__math_check_uflow+0x10>
 80123c0:	2022      	movs	r0, #34	; 0x22
 80123c2:	f7ff bfa4 	b.w	801230e <with_errno>
 80123c6:	4770      	bx	lr

080123c8 <__math_check_oflow>:
 80123c8:	ed9f 6b07 	vldr	d6, [pc, #28]	; 80123e8 <__math_check_oflow+0x20>
 80123cc:	eeb0 7bc0 	vabs.f64	d7, d0
 80123d0:	eeb4 7b46 	vcmp.f64	d7, d6
 80123d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123d8:	dd02      	ble.n	80123e0 <__math_check_oflow+0x18>
 80123da:	2022      	movs	r0, #34	; 0x22
 80123dc:	f7ff bf97 	b.w	801230e <with_errno>
 80123e0:	4770      	bx	lr
 80123e2:	bf00      	nop
 80123e4:	f3af 8000 	nop.w
 80123e8:	ffffffff 	.word	0xffffffff
 80123ec:	7fefffff 	.word	0x7fefffff

080123f0 <_init>:
 80123f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123f2:	bf00      	nop
 80123f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80123f6:	bc08      	pop	{r3}
 80123f8:	469e      	mov	lr, r3
 80123fa:	4770      	bx	lr

080123fc <_fini>:
 80123fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123fe:	bf00      	nop
 8012400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012402:	bc08      	pop	{r3}
 8012404:	469e      	mov	lr, r3
 8012406:	4770      	bx	lr
