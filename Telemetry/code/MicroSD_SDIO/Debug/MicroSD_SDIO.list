
MicroSD_SDIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e8a4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000065c  0800eaa8  0800eaa8  0001eaa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f104  0800f104  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f104  0800f104  0001f104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f10c  0800f10c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f10c  0800f10c  0001f10c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f110  0800f110  0001f110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800f114  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  200001e0  0800f2f4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000488  0800f2f4  00020488  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018874  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037c6  00000000  00000000  00038a82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e0  00000000  00000000  0003c248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001138  00000000  00000000  0003d528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b0fd  00000000  00000000  0003e660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ab22  00000000  00000000  0006975d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fabbb  00000000  00000000  0008427f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017ee3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060cc  00000000  00000000  0017ee8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e0 	.word	0x200001e0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800ea8c 	.word	0x0800ea8c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e4 	.word	0x200001e4
 800023c:	0800ea8c 	.word	0x0800ea8c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9ac 	b.w	80009d8 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468e      	mov	lr, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	d14d      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000716:	428a      	cmp	r2, r1
 8000718:	4694      	mov	ip, r2
 800071a:	d969      	bls.n	80007f0 <__udivmoddi4+0xe8>
 800071c:	fab2 f282 	clz	r2, r2
 8000720:	b152      	cbz	r2, 8000738 <__udivmoddi4+0x30>
 8000722:	fa01 f302 	lsl.w	r3, r1, r2
 8000726:	f1c2 0120 	rsb	r1, r2, #32
 800072a:	fa20 f101 	lsr.w	r1, r0, r1
 800072e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000732:	ea41 0e03 	orr.w	lr, r1, r3
 8000736:	4094      	lsls	r4, r2
 8000738:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800073c:	0c21      	lsrs	r1, r4, #16
 800073e:	fbbe f6f8 	udiv	r6, lr, r8
 8000742:	fa1f f78c 	uxth.w	r7, ip
 8000746:	fb08 e316 	mls	r3, r8, r6, lr
 800074a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800074e:	fb06 f107 	mul.w	r1, r6, r7
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f106 30ff 	add.w	r0, r6, #4294967295
 800075e:	f080 811f 	bcs.w	80009a0 <__udivmoddi4+0x298>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 811c 	bls.w	80009a0 <__udivmoddi4+0x298>
 8000768:	3e02      	subs	r6, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a5b      	subs	r3, r3, r1
 800076e:	b2a4      	uxth	r4, r4
 8000770:	fbb3 f0f8 	udiv	r0, r3, r8
 8000774:	fb08 3310 	mls	r3, r8, r0, r3
 8000778:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800077c:	fb00 f707 	mul.w	r7, r0, r7
 8000780:	42a7      	cmp	r7, r4
 8000782:	d90a      	bls.n	800079a <__udivmoddi4+0x92>
 8000784:	eb1c 0404 	adds.w	r4, ip, r4
 8000788:	f100 33ff 	add.w	r3, r0, #4294967295
 800078c:	f080 810a 	bcs.w	80009a4 <__udivmoddi4+0x29c>
 8000790:	42a7      	cmp	r7, r4
 8000792:	f240 8107 	bls.w	80009a4 <__udivmoddi4+0x29c>
 8000796:	4464      	add	r4, ip
 8000798:	3802      	subs	r0, #2
 800079a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800079e:	1be4      	subs	r4, r4, r7
 80007a0:	2600      	movs	r6, #0
 80007a2:	b11d      	cbz	r5, 80007ac <__udivmoddi4+0xa4>
 80007a4:	40d4      	lsrs	r4, r2
 80007a6:	2300      	movs	r3, #0
 80007a8:	e9c5 4300 	strd	r4, r3, [r5]
 80007ac:	4631      	mov	r1, r6
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d909      	bls.n	80007ca <__udivmoddi4+0xc2>
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	f000 80ef 	beq.w	800099a <__udivmoddi4+0x292>
 80007bc:	2600      	movs	r6, #0
 80007be:	e9c5 0100 	strd	r0, r1, [r5]
 80007c2:	4630      	mov	r0, r6
 80007c4:	4631      	mov	r1, r6
 80007c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ca:	fab3 f683 	clz	r6, r3
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d14a      	bne.n	8000868 <__udivmoddi4+0x160>
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d302      	bcc.n	80007dc <__udivmoddi4+0xd4>
 80007d6:	4282      	cmp	r2, r0
 80007d8:	f200 80f9 	bhi.w	80009ce <__udivmoddi4+0x2c6>
 80007dc:	1a84      	subs	r4, r0, r2
 80007de:	eb61 0303 	sbc.w	r3, r1, r3
 80007e2:	2001      	movs	r0, #1
 80007e4:	469e      	mov	lr, r3
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	d0e0      	beq.n	80007ac <__udivmoddi4+0xa4>
 80007ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ee:	e7dd      	b.n	80007ac <__udivmoddi4+0xa4>
 80007f0:	b902      	cbnz	r2, 80007f4 <__udivmoddi4+0xec>
 80007f2:	deff      	udf	#255	; 0xff
 80007f4:	fab2 f282 	clz	r2, r2
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	f040 8092 	bne.w	8000922 <__udivmoddi4+0x21a>
 80007fe:	eba1 010c 	sub.w	r1, r1, ip
 8000802:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000806:	fa1f fe8c 	uxth.w	lr, ip
 800080a:	2601      	movs	r6, #1
 800080c:	0c20      	lsrs	r0, r4, #16
 800080e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000812:	fb07 1113 	mls	r1, r7, r3, r1
 8000816:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800081a:	fb0e f003 	mul.w	r0, lr, r3
 800081e:	4288      	cmp	r0, r1
 8000820:	d908      	bls.n	8000834 <__udivmoddi4+0x12c>
 8000822:	eb1c 0101 	adds.w	r1, ip, r1
 8000826:	f103 38ff 	add.w	r8, r3, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x12a>
 800082c:	4288      	cmp	r0, r1
 800082e:	f200 80cb 	bhi.w	80009c8 <__udivmoddi4+0x2c0>
 8000832:	4643      	mov	r3, r8
 8000834:	1a09      	subs	r1, r1, r0
 8000836:	b2a4      	uxth	r4, r4
 8000838:	fbb1 f0f7 	udiv	r0, r1, r7
 800083c:	fb07 1110 	mls	r1, r7, r0, r1
 8000840:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000844:	fb0e fe00 	mul.w	lr, lr, r0
 8000848:	45a6      	cmp	lr, r4
 800084a:	d908      	bls.n	800085e <__udivmoddi4+0x156>
 800084c:	eb1c 0404 	adds.w	r4, ip, r4
 8000850:	f100 31ff 	add.w	r1, r0, #4294967295
 8000854:	d202      	bcs.n	800085c <__udivmoddi4+0x154>
 8000856:	45a6      	cmp	lr, r4
 8000858:	f200 80bb 	bhi.w	80009d2 <__udivmoddi4+0x2ca>
 800085c:	4608      	mov	r0, r1
 800085e:	eba4 040e 	sub.w	r4, r4, lr
 8000862:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000866:	e79c      	b.n	80007a2 <__udivmoddi4+0x9a>
 8000868:	f1c6 0720 	rsb	r7, r6, #32
 800086c:	40b3      	lsls	r3, r6
 800086e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000872:	ea4c 0c03 	orr.w	ip, ip, r3
 8000876:	fa20 f407 	lsr.w	r4, r0, r7
 800087a:	fa01 f306 	lsl.w	r3, r1, r6
 800087e:	431c      	orrs	r4, r3
 8000880:	40f9      	lsrs	r1, r7
 8000882:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000886:	fa00 f306 	lsl.w	r3, r0, r6
 800088a:	fbb1 f8f9 	udiv	r8, r1, r9
 800088e:	0c20      	lsrs	r0, r4, #16
 8000890:	fa1f fe8c 	uxth.w	lr, ip
 8000894:	fb09 1118 	mls	r1, r9, r8, r1
 8000898:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800089c:	fb08 f00e 	mul.w	r0, r8, lr
 80008a0:	4288      	cmp	r0, r1
 80008a2:	fa02 f206 	lsl.w	r2, r2, r6
 80008a6:	d90b      	bls.n	80008c0 <__udivmoddi4+0x1b8>
 80008a8:	eb1c 0101 	adds.w	r1, ip, r1
 80008ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80008b0:	f080 8088 	bcs.w	80009c4 <__udivmoddi4+0x2bc>
 80008b4:	4288      	cmp	r0, r1
 80008b6:	f240 8085 	bls.w	80009c4 <__udivmoddi4+0x2bc>
 80008ba:	f1a8 0802 	sub.w	r8, r8, #2
 80008be:	4461      	add	r1, ip
 80008c0:	1a09      	subs	r1, r1, r0
 80008c2:	b2a4      	uxth	r4, r4
 80008c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008c8:	fb09 1110 	mls	r1, r9, r0, r1
 80008cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d4:	458e      	cmp	lr, r1
 80008d6:	d908      	bls.n	80008ea <__udivmoddi4+0x1e2>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e0:	d26c      	bcs.n	80009bc <__udivmoddi4+0x2b4>
 80008e2:	458e      	cmp	lr, r1
 80008e4:	d96a      	bls.n	80009bc <__udivmoddi4+0x2b4>
 80008e6:	3802      	subs	r0, #2
 80008e8:	4461      	add	r1, ip
 80008ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ee:	fba0 9402 	umull	r9, r4, r0, r2
 80008f2:	eba1 010e 	sub.w	r1, r1, lr
 80008f6:	42a1      	cmp	r1, r4
 80008f8:	46c8      	mov	r8, r9
 80008fa:	46a6      	mov	lr, r4
 80008fc:	d356      	bcc.n	80009ac <__udivmoddi4+0x2a4>
 80008fe:	d053      	beq.n	80009a8 <__udivmoddi4+0x2a0>
 8000900:	b15d      	cbz	r5, 800091a <__udivmoddi4+0x212>
 8000902:	ebb3 0208 	subs.w	r2, r3, r8
 8000906:	eb61 010e 	sbc.w	r1, r1, lr
 800090a:	fa01 f707 	lsl.w	r7, r1, r7
 800090e:	fa22 f306 	lsr.w	r3, r2, r6
 8000912:	40f1      	lsrs	r1, r6
 8000914:	431f      	orrs	r7, r3
 8000916:	e9c5 7100 	strd	r7, r1, [r5]
 800091a:	2600      	movs	r6, #0
 800091c:	4631      	mov	r1, r6
 800091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000922:	f1c2 0320 	rsb	r3, r2, #32
 8000926:	40d8      	lsrs	r0, r3
 8000928:	fa0c fc02 	lsl.w	ip, ip, r2
 800092c:	fa21 f303 	lsr.w	r3, r1, r3
 8000930:	4091      	lsls	r1, r2
 8000932:	4301      	orrs	r1, r0
 8000934:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000938:	fa1f fe8c 	uxth.w	lr, ip
 800093c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000940:	fb07 3610 	mls	r6, r7, r0, r3
 8000944:	0c0b      	lsrs	r3, r1, #16
 8000946:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800094a:	fb00 f60e 	mul.w	r6, r0, lr
 800094e:	429e      	cmp	r6, r3
 8000950:	fa04 f402 	lsl.w	r4, r4, r2
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0x260>
 8000956:	eb1c 0303 	adds.w	r3, ip, r3
 800095a:	f100 38ff 	add.w	r8, r0, #4294967295
 800095e:	d22f      	bcs.n	80009c0 <__udivmoddi4+0x2b8>
 8000960:	429e      	cmp	r6, r3
 8000962:	d92d      	bls.n	80009c0 <__udivmoddi4+0x2b8>
 8000964:	3802      	subs	r0, #2
 8000966:	4463      	add	r3, ip
 8000968:	1b9b      	subs	r3, r3, r6
 800096a:	b289      	uxth	r1, r1
 800096c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000970:	fb07 3316 	mls	r3, r7, r6, r3
 8000974:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000978:	fb06 f30e 	mul.w	r3, r6, lr
 800097c:	428b      	cmp	r3, r1
 800097e:	d908      	bls.n	8000992 <__udivmoddi4+0x28a>
 8000980:	eb1c 0101 	adds.w	r1, ip, r1
 8000984:	f106 38ff 	add.w	r8, r6, #4294967295
 8000988:	d216      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 800098a:	428b      	cmp	r3, r1
 800098c:	d914      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800098e:	3e02      	subs	r6, #2
 8000990:	4461      	add	r1, ip
 8000992:	1ac9      	subs	r1, r1, r3
 8000994:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000998:	e738      	b.n	800080c <__udivmoddi4+0x104>
 800099a:	462e      	mov	r6, r5
 800099c:	4628      	mov	r0, r5
 800099e:	e705      	b.n	80007ac <__udivmoddi4+0xa4>
 80009a0:	4606      	mov	r6, r0
 80009a2:	e6e3      	b.n	800076c <__udivmoddi4+0x64>
 80009a4:	4618      	mov	r0, r3
 80009a6:	e6f8      	b.n	800079a <__udivmoddi4+0x92>
 80009a8:	454b      	cmp	r3, r9
 80009aa:	d2a9      	bcs.n	8000900 <__udivmoddi4+0x1f8>
 80009ac:	ebb9 0802 	subs.w	r8, r9, r2
 80009b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009b4:	3801      	subs	r0, #1
 80009b6:	e7a3      	b.n	8000900 <__udivmoddi4+0x1f8>
 80009b8:	4646      	mov	r6, r8
 80009ba:	e7ea      	b.n	8000992 <__udivmoddi4+0x28a>
 80009bc:	4620      	mov	r0, r4
 80009be:	e794      	b.n	80008ea <__udivmoddi4+0x1e2>
 80009c0:	4640      	mov	r0, r8
 80009c2:	e7d1      	b.n	8000968 <__udivmoddi4+0x260>
 80009c4:	46d0      	mov	r8, sl
 80009c6:	e77b      	b.n	80008c0 <__udivmoddi4+0x1b8>
 80009c8:	3b02      	subs	r3, #2
 80009ca:	4461      	add	r1, ip
 80009cc:	e732      	b.n	8000834 <__udivmoddi4+0x12c>
 80009ce:	4630      	mov	r0, r6
 80009d0:	e709      	b.n	80007e6 <__udivmoddi4+0xde>
 80009d2:	4464      	add	r4, ip
 80009d4:	3802      	subs	r0, #2
 80009d6:	e742      	b.n	800085e <__udivmoddi4+0x156>

080009d8 <__aeabi_idiv0>:
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <MPU9250_IsConnected>:
__weak void MPU9250_OnActivate()
{
}
#ifndef USE_SPI
bool	MPU9250_IsConnected()
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&_MPU9250_I2C,_dev_add,1,HAL_MAX_DELAY)==HAL_OK)
 80009e0:	21d0      	movs	r1, #208	; 0xd0
 80009e2:	f04f 33ff 	mov.w	r3, #4294967295
 80009e6:	2201      	movs	r2, #1
 80009e8:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MPU9250_IsConnected+0x24>)
 80009ea:	f002 fc83 	bl	80032f4 <HAL_I2C_IsDeviceReady>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d101      	bne.n	80009f8 <MPU9250_IsConnected+0x1c>
		return true;
 80009f4:	2301      	movs	r3, #1
 80009f6:	e000      	b.n	80009fa <MPU9250_IsConnected+0x1e>
	else
		return false;	
 80009f8:	2300      	movs	r3, #0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000218 	.word	0x20000218

08000a04 <MPU_I2C_Write>:

void MPU_I2C_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af04      	add	r7, sp, #16
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	460b      	mov	r3, r1
 8000a0e:	70fb      	strb	r3, [r7, #3]
 8000a10:	4613      	mov	r3, r2
 8000a12:	803b      	strh	r3, [r7, #0]
	HAL_I2C_Mem_Write(&_MPU9250_I2C,_dev_add,WriteAddr,I2C_MEMADD_SIZE_8BIT,pBuffer,NumByteToWrite,HAL_MAX_DELAY);
 8000a14:	21d0      	movs	r1, #208	; 0xd0
 8000a16:	78fb      	ldrb	r3, [r7, #3]
 8000a18:	b29a      	uxth	r2, r3
 8000a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1e:	9302      	str	r3, [sp, #8]
 8000a20:	883b      	ldrh	r3, [r7, #0]
 8000a22:	9301      	str	r3, [sp, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	9300      	str	r3, [sp, #0]
 8000a28:	2301      	movs	r3, #1
 8000a2a:	4803      	ldr	r0, [pc, #12]	; (8000a38 <MPU_I2C_Write+0x34>)
 8000a2c:	f002 fb4e 	bl	80030cc <HAL_I2C_Mem_Write>
}
 8000a30:	bf00      	nop
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000218 	.word	0x20000218

08000a3c <MPU_I2C_Read>:

void MPU_I2C_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af02      	add	r7, sp, #8
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	460b      	mov	r3, r1
 8000a46:	70fb      	strb	r3, [r7, #3]
 8000a48:	4613      	mov	r3, r2
 8000a4a:	803b      	strh	r3, [r7, #0]
	uint8_t data = ReadAddr | READWRITE_CMD;
 8000a4c:	2280      	movs	r2, #128	; 0x80
 8000a4e:	78fb      	ldrb	r3, [r7, #3]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&_MPU9250_I2C,_dev_add,&data,1,HAL_MAX_DELAY);
 8000a56:	21d0      	movs	r1, #208	; 0xd0
 8000a58:	f107 020f 	add.w	r2, r7, #15
 8000a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a60:	9300      	str	r3, [sp, #0]
 8000a62:	2301      	movs	r3, #1
 8000a64:	4807      	ldr	r0, [pc, #28]	; (8000a84 <MPU_I2C_Read+0x48>)
 8000a66:	f002 f947 	bl	8002cf8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&_MPU9250_I2C,_dev_add,pBuffer,NumByteToRead,HAL_MAX_DELAY);
 8000a6a:	21d0      	movs	r1, #208	; 0xd0
 8000a6c:	883b      	ldrh	r3, [r7, #0]
 8000a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8000a72:	9200      	str	r2, [sp, #0]
 8000a74:	687a      	ldr	r2, [r7, #4]
 8000a76:	4803      	ldr	r0, [pc, #12]	; (8000a84 <MPU_I2C_Read+0x48>)
 8000a78:	f002 fa32 	bl	8002ee0 <HAL_I2C_Master_Receive>
}
 8000a7c:	bf00      	nop
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000218 	.word	0x20000218

08000a88 <writeRegister>:
	MPU9250_Deactivate();
}
#endif
/* writes a byte to MPU9250 register given a register address and data */
void writeRegister(uint8_t subAddress, uint8_t data)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	460a      	mov	r2, r1
 8000a92:	71fb      	strb	r3, [r7, #7]
 8000a94:	4613      	mov	r3, r2
 8000a96:	71bb      	strb	r3, [r7, #6]
	#ifdef USE_SPI
	MPU_SPI_Write(&data, subAddress, 1);
	#else
	MPU_I2C_Write(&data, subAddress, 1);
 8000a98:	79f9      	ldrb	r1, [r7, #7]
 8000a9a:	1dbb      	adds	r3, r7, #6
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff ffb0 	bl	8000a04 <MPU_I2C_Write>
	#endif
	HAL_Delay(10);
 8000aa4:	200a      	movs	r0, #10
 8000aa6:	f001 fa0f 	bl	8001ec8 <HAL_Delay>
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <readRegisters>:

/* reads registers from MPU9250 given a starting register address, number of bytes, and a pointer to store data */
void readRegisters(uint8_t subAddress, uint8_t count, uint8_t* dest){
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b082      	sub	sp, #8
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	4603      	mov	r3, r0
 8000aba:	603a      	str	r2, [r7, #0]
 8000abc:	71fb      	strb	r3, [r7, #7]
 8000abe:	460b      	mov	r3, r1
 8000ac0:	71bb      	strb	r3, [r7, #6]
	#ifdef USE_SPI
	MPU_SPI_Read(dest, subAddress, count);
	#else
	MPU_I2C_Read(dest, subAddress, count);
 8000ac2:	79bb      	ldrb	r3, [r7, #6]
 8000ac4:	b29a      	uxth	r2, r3
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	6838      	ldr	r0, [r7, #0]
 8000acc:	f7ff ffb6 	bl	8000a3c <MPU_I2C_Read>
	#endif
}
 8000ad0:	bf00      	nop
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <writeAK8963Register>:

/* writes a register to the AK8963 given a register address and data */
void writeAK8963Register(uint8_t subAddress, uint8_t data)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	460a      	mov	r2, r1
 8000ae2:	71fb      	strb	r3, [r7, #7]
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for write
	writeRegister(I2C_SLV0_ADDR,AK8963_I2C_ADDR);
 8000ae8:	2325      	movs	r3, #37	; 0x25
 8000aea:	220c      	movs	r2, #12
 8000aec:	4611      	mov	r1, r2
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff ffca 	bl	8000a88 <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 8000af4:	2226      	movs	r2, #38	; 0x26
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	4619      	mov	r1, r3
 8000afa:	4610      	mov	r0, r2
 8000afc:	f7ff ffc4 	bl	8000a88 <writeRegister>

	// store the data for write
	writeRegister(I2C_SLV0_DO,data);
 8000b00:	2263      	movs	r2, #99	; 0x63
 8000b02:	79bb      	ldrb	r3, [r7, #6]
 8000b04:	4619      	mov	r1, r3
 8000b06:	4610      	mov	r0, r2
 8000b08:	f7ff ffbe 	bl	8000a88 <writeRegister>

	// enable I2C and send 1 byte
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | (uint8_t)1);
 8000b0c:	2227      	movs	r2, #39	; 0x27
 8000b0e:	2380      	movs	r3, #128	; 0x80
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	4619      	mov	r1, r3
 8000b18:	4610      	mov	r0, r2
 8000b1a:	f7ff ffb5 	bl	8000a88 <writeRegister>
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <readAK8963Registers>:

/* reads registers from the AK8963 */
void readAK8963Registers(uint8_t subAddress, uint8_t count, uint8_t* dest)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b082      	sub	sp, #8
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	603a      	str	r2, [r7, #0]
 8000b30:	71fb      	strb	r3, [r7, #7]
 8000b32:	460b      	mov	r3, r1
 8000b34:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for read
	writeRegister(I2C_SLV0_ADDR, AK8963_I2C_ADDR | I2C_READ_FLAG);
 8000b36:	2025      	movs	r0, #37	; 0x25
 8000b38:	220c      	movs	r2, #12
 8000b3a:	2380      	movs	r3, #128	; 0x80
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	4619      	mov	r1, r3
 8000b42:	f7ff ffa1 	bl	8000a88 <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 8000b46:	2226      	movs	r2, #38	; 0x26
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4610      	mov	r0, r2
 8000b4e:	f7ff ff9b 	bl	8000a88 <writeRegister>

	// enable I2C and request the bytes
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | count);
 8000b52:	2027      	movs	r0, #39	; 0x27
 8000b54:	2280      	movs	r2, #128	; 0x80
 8000b56:	79bb      	ldrb	r3, [r7, #6]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	f7ff ff93 	bl	8000a88 <writeRegister>

	// takes some time for these registers to fill
	HAL_Delay(1);
 8000b62:	2001      	movs	r0, #1
 8000b64:	f001 f9b0 	bl	8001ec8 <HAL_Delay>

	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	readRegisters(EXT_SENS_DATA_00,count,dest);
 8000b68:	2049      	movs	r0, #73	; 0x49
 8000b6a:	79bb      	ldrb	r3, [r7, #6]
 8000b6c:	683a      	ldr	r2, [r7, #0]
 8000b6e:	4619      	mov	r1, r3
 8000b70:	f7ff ff9f 	bl	8000ab2 <readRegisters>
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <whoAmI>:

/* gets the MPU9250 WHO_AM_I register value, expected to be 0x71 */
static uint8_t whoAmI(){
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readRegisters(WHO_AM_I,1,_buffer);
 8000b80:	2375      	movs	r3, #117	; 0x75
 8000b82:	4a04      	ldr	r2, [pc, #16]	; (8000b94 <whoAmI+0x18>)
 8000b84:	2101      	movs	r1, #1
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff ff93 	bl	8000ab2 <readRegisters>

	// return the register value
	return _buffer[0];
 8000b8c:	4b01      	ldr	r3, [pc, #4]	; (8000b94 <whoAmI+0x18>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	200001fc 	.word	0x200001fc

08000b98 <whoAmIAK8963>:

/* gets the AK8963 WHO_AM_I register value, expected to be 0x48 */
static int whoAmIAK8963(){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readAK8963Registers(AK8963_WHO_AM_I,1,_buffer);
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <whoAmIAK8963+0x18>)
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff ffbf 	bl	8000b26 <readAK8963Registers>
	// return the register value
	return _buffer[0];
 8000ba8:	4b01      	ldr	r3, [pc, #4]	; (8000bb0 <whoAmIAK8963+0x18>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	200001fc 	.word	0x200001fc

08000bb4 <MPU9250_Init>:

/* starts communication with the MPU-9250 */
uint8_t MPU9250_Init()
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
	#ifndef USE_SPI
	while(MPU9250_IsConnected() == false)
 8000bba:	e002      	b.n	8000bc2 <MPU9250_Init+0xe>
	{
		HAL_Delay(100);
 8000bbc:	2064      	movs	r0, #100	; 0x64
 8000bbe:	f001 f983 	bl	8001ec8 <HAL_Delay>
	while(MPU9250_IsConnected() == false)
 8000bc2:	f7ff ff0b 	bl	80009dc <MPU9250_IsConnected>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	f083 0301 	eor.w	r3, r3, #1
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d1f4      	bne.n	8000bbc <MPU9250_Init+0x8>
	}
	#endif
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL);
 8000bd2:	236b      	movs	r3, #107	; 0x6b
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	4611      	mov	r1, r2
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff ff55 	bl	8000a88 <writeRegister>
	// enable I2C master mode
	writeRegister(USER_CTRL, I2C_MST_EN);
 8000bde:	236a      	movs	r3, #106	; 0x6a
 8000be0:	2220      	movs	r2, #32
 8000be2:	4611      	mov	r1, r2
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff ff4f 	bl	8000a88 <writeRegister>
	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL, I2C_MST_CLK);
 8000bea:	2324      	movs	r3, #36	; 0x24
 8000bec:	220d      	movs	r2, #13
 8000bee:	4611      	mov	r1, r2
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff ff49 	bl	8000a88 <writeRegister>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 8000bf6:	230a      	movs	r3, #10
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	4611      	mov	r1, r2
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff ff6b 	bl	8000ad8 <writeAK8963Register>
	// reset the MPU9250
	writeRegister(PWR_MGMNT_1,PWR_RESET);
 8000c02:	236b      	movs	r3, #107	; 0x6b
 8000c04:	2280      	movs	r2, #128	; 0x80
 8000c06:	4611      	mov	r1, r2
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff ff3d 	bl	8000a88 <writeRegister>
	// wait for MPU-9250 to come back up
	HAL_Delay(10);
 8000c0e:	200a      	movs	r0, #10
 8000c10:	f001 f95a 	bl	8001ec8 <HAL_Delay>
	// reset the AK8963
	writeAK8963Register(AK8963_CNTL2,AK8963_RESET);
 8000c14:	230b      	movs	r3, #11
 8000c16:	2201      	movs	r2, #1
 8000c18:	4611      	mov	r1, r2
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff ff5c 	bl	8000ad8 <writeAK8963Register>
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL);
 8000c20:	236b      	movs	r3, #107	; 0x6b
 8000c22:	2201      	movs	r2, #1
 8000c24:	4611      	mov	r1, r2
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff ff2e 	bl	8000a88 <writeRegister>

	// check the WHO AM I byte, expected value is 0x71 (decimal 113) or 0x73 (decimal 115)
	uint8_t who = whoAmI();
 8000c2c:	f7ff ffa6 	bl	8000b7c <whoAmI>
 8000c30:	4603      	mov	r3, r0
 8000c32:	71fb      	strb	r3, [r7, #7]
	if((who != 0x71) && ( who != 0x73))
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	2b71      	cmp	r3, #113	; 0x71
 8000c38:	d004      	beq.n	8000c44 <MPU9250_Init+0x90>
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	2b73      	cmp	r3, #115	; 0x73
 8000c3e:	d001      	beq.n	8000c44 <MPU9250_Init+0x90>
	{
		return 1;
 8000c40:	2301      	movs	r3, #1
 8000c42:	e06c      	b.n	8000d1e <MPU9250_Init+0x16a>
	}

	// enable accelerometer and gyro
	writeRegister(PWR_MGMNT_2,SEN_ENABLE);
 8000c44:	236c      	movs	r3, #108	; 0x6c
 8000c46:	2200      	movs	r2, #0
 8000c48:	4611      	mov	r1, r2
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff ff1c 	bl	8000a88 <writeRegister>

	// setting accel range to 16G as default
	writeRegister(ACCEL_CONFIG,ACCEL_FS_SEL_2G);
 8000c50:	231c      	movs	r3, #28
 8000c52:	2200      	movs	r2, #0
 8000c54:	4611      	mov	r1, r2
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff ff16 	bl	8000a88 <writeRegister>

	// setting the gyro range to 2000DPS as default
	writeRegister(GYRO_CONFIG,GYRO_FS_SEL_250DPS);
 8000c5c:	231b      	movs	r3, #27
 8000c5e:	2200      	movs	r2, #0
 8000c60:	4611      	mov	r1, r2
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff ff10 	bl	8000a88 <writeRegister>

	// setting bandwidth to 184Hz as default
	writeRegister(ACCEL_CONFIG2,DLPF_184);
 8000c68:	231d      	movs	r3, #29
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	4611      	mov	r1, r2
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff ff0a 	bl	8000a88 <writeRegister>

	// setting gyro bandwidth to 184Hz
	writeRegister(CONFIG,DLPF_184);
 8000c74:	231a      	movs	r3, #26
 8000c76:	2201      	movs	r2, #1
 8000c78:	4611      	mov	r1, r2
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff ff04 	bl	8000a88 <writeRegister>

	// setting the sample rate divider to 0 as default
	writeRegister(SMPDIV,0x00);
 8000c80:	2319      	movs	r3, #25
 8000c82:	2100      	movs	r1, #0
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff feff 	bl	8000a88 <writeRegister>

	// enable I2C master mode
	writeRegister(USER_CTRL,I2C_MST_EN);
 8000c8a:	236a      	movs	r3, #106	; 0x6a
 8000c8c:	2220      	movs	r2, #32
 8000c8e:	4611      	mov	r1, r2
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff fef9 	bl	8000a88 <writeRegister>

	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL,I2C_MST_CLK);
 8000c96:	2324      	movs	r3, #36	; 0x24
 8000c98:	220d      	movs	r2, #13
 8000c9a:	4611      	mov	r1, r2
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fef3 	bl	8000a88 <writeRegister>

	// check AK8963 WHO AM I register, expected value is 0x48 (decimal 72)
	if( whoAmIAK8963() != 0x48 )
 8000ca2:	f7ff ff79 	bl	8000b98 <whoAmIAK8963>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b48      	cmp	r3, #72	; 0x48
 8000caa:	d001      	beq.n	8000cb0 <MPU9250_Init+0xfc>
	{
		return 1;
 8000cac:	2301      	movs	r3, #1
 8000cae:	e036      	b.n	8000d1e <MPU9250_Init+0x16a>
	}

	/* get the magnetometer calibration */
	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 8000cb0:	230a      	movs	r3, #10
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	4611      	mov	r1, r2
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff ff0e 	bl	8000ad8 <writeAK8963Register>

	HAL_Delay(100); // long wait between AK8963 mode changes
 8000cbc:	2064      	movs	r0, #100	; 0x64
 8000cbe:	f001 f903 	bl	8001ec8 <HAL_Delay>

	// set AK8963 to FUSE ROM access
	writeAK8963Register(AK8963_CNTL1,AK8963_FUSE_ROM);
 8000cc2:	230a      	movs	r3, #10
 8000cc4:	220f      	movs	r2, #15
 8000cc6:	4611      	mov	r1, r2
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff ff05 	bl	8000ad8 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8000cce:	2064      	movs	r0, #100	; 0x64
 8000cd0:	f001 f8fa 	bl	8001ec8 <HAL_Delay>

	// read the AK8963 ASA registers and compute magnetometer scale factors
	readAK8963Registers(AK8963_ASA, 3, _mag_adjust);
 8000cd4:	2310      	movs	r3, #16
 8000cd6:	4a14      	ldr	r2, [pc, #80]	; (8000d28 <MPU9250_Init+0x174>)
 8000cd8:	2103      	movs	r1, #3
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff ff23 	bl	8000b26 <readAK8963Registers>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 8000ce0:	230a      	movs	r3, #10
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	4611      	mov	r1, r2
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fef6 	bl	8000ad8 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8000cec:	2064      	movs	r0, #100	; 0x64
 8000cee:	f001 f8eb 	bl	8001ec8 <HAL_Delay>

	// set AK8963 to 16 bit resolution, 100 Hz update rate
	writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS2);
 8000cf2:	230a      	movs	r3, #10
 8000cf4:	2216      	movs	r2, #22
 8000cf6:	4611      	mov	r1, r2
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff feed 	bl	8000ad8 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8000cfe:	2064      	movs	r0, #100	; 0x64
 8000d00:	f001 f8e2 	bl	8001ec8 <HAL_Delay>

	// select clock source to gyro
	writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL);
 8000d04:	236b      	movs	r3, #107	; 0x6b
 8000d06:	2201      	movs	r2, #1
 8000d08:	4611      	mov	r1, r2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff febc 	bl	8000a88 <writeRegister>

	// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
	readAK8963Registers(AK8963_HXL,7,_buffer);
 8000d10:	2303      	movs	r3, #3
 8000d12:	4a06      	ldr	r2, [pc, #24]	; (8000d2c <MPU9250_Init+0x178>)
 8000d14:	2107      	movs	r1, #7
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff ff05 	bl	8000b26 <readAK8963Registers>

	// successful init, return 0
	return 0;
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000214 	.word	0x20000214
 8000d2c:	200001fc 	.word	0x200001fc

08000d30 <MPU9250_GetData>:
	writeRegister(SMPDIV, srd);
}

/* read the data, each argiment should point to a array for x, y, and x */
void MPU9250_GetData(int16_t* AccData, int16_t* MagData, int16_t* GyroData)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
	// grab the data from the MPU9250
	readRegisters(ACCEL_OUT, 21, _buffer);
 8000d3c:	233b      	movs	r3, #59	; 0x3b
 8000d3e:	4a63      	ldr	r2, [pc, #396]	; (8000ecc <MPU9250_GetData+0x19c>)
 8000d40:	2115      	movs	r1, #21
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff feb5 	bl	8000ab2 <readRegisters>

	// combine into 16 bit values
	AccData[0] = (((int16_t)_buffer[0]) << 8) | _buffer[1];
 8000d48:	4b60      	ldr	r3, [pc, #384]	; (8000ecc <MPU9250_GetData+0x19c>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	021b      	lsls	r3, r3, #8
 8000d4e:	b21a      	sxth	r2, r3
 8000d50:	4b5e      	ldr	r3, [pc, #376]	; (8000ecc <MPU9250_GetData+0x19c>)
 8000d52:	785b      	ldrb	r3, [r3, #1]
 8000d54:	b21b      	sxth	r3, r3
 8000d56:	4313      	orrs	r3, r2
 8000d58:	b21a      	sxth	r2, r3
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	801a      	strh	r2, [r3, #0]
	AccData[1] = (((int16_t)_buffer[2]) << 8) | _buffer[3];
 8000d5e:	4b5b      	ldr	r3, [pc, #364]	; (8000ecc <MPU9250_GetData+0x19c>)
 8000d60:	789b      	ldrb	r3, [r3, #2]
 8000d62:	021b      	lsls	r3, r3, #8
 8000d64:	b219      	sxth	r1, r3
 8000d66:	4b59      	ldr	r3, [pc, #356]	; (8000ecc <MPU9250_GetData+0x19c>)
 8000d68:	78db      	ldrb	r3, [r3, #3]
 8000d6a:	b21a      	sxth	r2, r3
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	3302      	adds	r3, #2
 8000d70:	430a      	orrs	r2, r1
 8000d72:	b212      	sxth	r2, r2
 8000d74:	801a      	strh	r2, [r3, #0]
	AccData[2] = (((int16_t)_buffer[4]) << 8) | _buffer[5];
 8000d76:	4b55      	ldr	r3, [pc, #340]	; (8000ecc <MPU9250_GetData+0x19c>)
 8000d78:	791b      	ldrb	r3, [r3, #4]
 8000d7a:	021b      	lsls	r3, r3, #8
 8000d7c:	b219      	sxth	r1, r3
 8000d7e:	4b53      	ldr	r3, [pc, #332]	; (8000ecc <MPU9250_GetData+0x19c>)
 8000d80:	795b      	ldrb	r3, [r3, #5]
 8000d82:	b21a      	sxth	r2, r3
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	3304      	adds	r3, #4
 8000d88:	430a      	orrs	r2, r1
 8000d8a:	b212      	sxth	r2, r2
 8000d8c:	801a      	strh	r2, [r3, #0]
	GyroData[0] = (((int16_t)_buffer[8]) << 8) | _buffer[9];
 8000d8e:	4b4f      	ldr	r3, [pc, #316]	; (8000ecc <MPU9250_GetData+0x19c>)
 8000d90:	7a1b      	ldrb	r3, [r3, #8]
 8000d92:	021b      	lsls	r3, r3, #8
 8000d94:	b21a      	sxth	r2, r3
 8000d96:	4b4d      	ldr	r3, [pc, #308]	; (8000ecc <MPU9250_GetData+0x19c>)
 8000d98:	7a5b      	ldrb	r3, [r3, #9]
 8000d9a:	b21b      	sxth	r3, r3
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	b21a      	sxth	r2, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	801a      	strh	r2, [r3, #0]
	GyroData[1] = (((int16_t)_buffer[10]) << 8) | _buffer[11];
 8000da4:	4b49      	ldr	r3, [pc, #292]	; (8000ecc <MPU9250_GetData+0x19c>)
 8000da6:	7a9b      	ldrb	r3, [r3, #10]
 8000da8:	021b      	lsls	r3, r3, #8
 8000daa:	b219      	sxth	r1, r3
 8000dac:	4b47      	ldr	r3, [pc, #284]	; (8000ecc <MPU9250_GetData+0x19c>)
 8000dae:	7adb      	ldrb	r3, [r3, #11]
 8000db0:	b21a      	sxth	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	3302      	adds	r3, #2
 8000db6:	430a      	orrs	r2, r1
 8000db8:	b212      	sxth	r2, r2
 8000dba:	801a      	strh	r2, [r3, #0]
	GyroData[2] = (((int16_t)_buffer[12]) << 8) | _buffer[13];
 8000dbc:	4b43      	ldr	r3, [pc, #268]	; (8000ecc <MPU9250_GetData+0x19c>)
 8000dbe:	7b1b      	ldrb	r3, [r3, #12]
 8000dc0:	021b      	lsls	r3, r3, #8
 8000dc2:	b219      	sxth	r1, r3
 8000dc4:	4b41      	ldr	r3, [pc, #260]	; (8000ecc <MPU9250_GetData+0x19c>)
 8000dc6:	7b5b      	ldrb	r3, [r3, #13]
 8000dc8:	b21a      	sxth	r2, r3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	3304      	adds	r3, #4
 8000dce:	430a      	orrs	r2, r1
 8000dd0:	b212      	sxth	r2, r2
 8000dd2:	801a      	strh	r2, [r3, #0]

	int16_t magx = (((int16_t)_buffer[15]) << 8) | _buffer[14];
 8000dd4:	4b3d      	ldr	r3, [pc, #244]	; (8000ecc <MPU9250_GetData+0x19c>)
 8000dd6:	7bdb      	ldrb	r3, [r3, #15]
 8000dd8:	021b      	lsls	r3, r3, #8
 8000dda:	b21a      	sxth	r2, r3
 8000ddc:	4b3b      	ldr	r3, [pc, #236]	; (8000ecc <MPU9250_GetData+0x19c>)
 8000dde:	7b9b      	ldrb	r3, [r3, #14]
 8000de0:	b21b      	sxth	r3, r3
 8000de2:	4313      	orrs	r3, r2
 8000de4:	82fb      	strh	r3, [r7, #22]
	int16_t magy = (((int16_t)_buffer[17]) << 8) | _buffer[16];
 8000de6:	4b39      	ldr	r3, [pc, #228]	; (8000ecc <MPU9250_GetData+0x19c>)
 8000de8:	7c5b      	ldrb	r3, [r3, #17]
 8000dea:	021b      	lsls	r3, r3, #8
 8000dec:	b21a      	sxth	r2, r3
 8000dee:	4b37      	ldr	r3, [pc, #220]	; (8000ecc <MPU9250_GetData+0x19c>)
 8000df0:	7c1b      	ldrb	r3, [r3, #16]
 8000df2:	b21b      	sxth	r3, r3
 8000df4:	4313      	orrs	r3, r2
 8000df6:	82bb      	strh	r3, [r7, #20]
	int16_t magz = (((int16_t)_buffer[19]) << 8) | _buffer[18];
 8000df8:	4b34      	ldr	r3, [pc, #208]	; (8000ecc <MPU9250_GetData+0x19c>)
 8000dfa:	7cdb      	ldrb	r3, [r3, #19]
 8000dfc:	021b      	lsls	r3, r3, #8
 8000dfe:	b21a      	sxth	r2, r3
 8000e00:	4b32      	ldr	r3, [pc, #200]	; (8000ecc <MPU9250_GetData+0x19c>)
 8000e02:	7c9b      	ldrb	r3, [r3, #18]
 8000e04:	b21b      	sxth	r3, r3
 8000e06:	4313      	orrs	r3, r2
 8000e08:	827b      	strh	r3, [r7, #18]

	MagData[0] = (int16_t)((float)magx * ((float)(_mag_adjust[0] - 128) / 256.0f + 1.0f));
 8000e0a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e0e:	ee07 3a90 	vmov	s15, r3
 8000e12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e16:	4b2e      	ldr	r3, [pc, #184]	; (8000ed0 <MPU9250_GetData+0x1a0>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	3b80      	subs	r3, #128	; 0x80
 8000e1c:	ee07 3a90 	vmov	s15, r3
 8000e20:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e24:	ed9f 6a2b 	vldr	s12, [pc, #172]	; 8000ed4 <MPU9250_GetData+0x1a4>
 8000e28:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000e2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000e30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000e34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e3c:	ee17 3a90 	vmov	r3, s15
 8000e40:	b21a      	sxth	r2, r3
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	801a      	strh	r2, [r3, #0]
	MagData[1] = (int16_t)((float)magy * ((float)(_mag_adjust[1] - 128) / 256.0f + 1.0f));
 8000e46:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000e4a:	ee07 3a90 	vmov	s15, r3
 8000e4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e52:	4b1f      	ldr	r3, [pc, #124]	; (8000ed0 <MPU9250_GetData+0x1a0>)
 8000e54:	785b      	ldrb	r3, [r3, #1]
 8000e56:	3b80      	subs	r3, #128	; 0x80
 8000e58:	ee07 3a90 	vmov	s15, r3
 8000e5c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e60:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8000ed4 <MPU9250_GetData+0x1a4>
 8000e64:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000e68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000e6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000e70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	3302      	adds	r3, #2
 8000e78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e7c:	ee17 2a90 	vmov	r2, s15
 8000e80:	b212      	sxth	r2, r2
 8000e82:	801a      	strh	r2, [r3, #0]
	MagData[2] = (int16_t)((float)magz * ((float)(_mag_adjust[2] - 128) / 256.0f + 1.0f));
 8000e84:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000e88:	ee07 3a90 	vmov	s15, r3
 8000e8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e90:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <MPU9250_GetData+0x1a0>)
 8000e92:	789b      	ldrb	r3, [r3, #2]
 8000e94:	3b80      	subs	r3, #128	; 0x80
 8000e96:	ee07 3a90 	vmov	s15, r3
 8000e9a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e9e:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 8000ed4 <MPU9250_GetData+0x1a4>
 8000ea2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000ea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000eba:	ee17 2a90 	vmov	r2, s15
 8000ebe:	b212      	sxth	r2, r2
 8000ec0:	801a      	strh	r2, [r3, #0]
}
 8000ec2:	bf00      	nop
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	200001fc 	.word	0x200001fc
 8000ed0:	20000214 	.word	0x20000214
 8000ed4:	43800000 	.word	0x43800000

08000ed8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <MX_DMA_Init+0x48>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	4a0f      	ldr	r2, [pc, #60]	; (8000f20 <MX_DMA_Init+0x48>)
 8000ee4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eea:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <MX_DMA_Init+0x48>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2100      	movs	r1, #0
 8000efa:	203b      	movs	r0, #59	; 0x3b
 8000efc:	f001 f8e3 	bl	80020c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000f00:	203b      	movs	r0, #59	; 0x3b
 8000f02:	f001 f8fc 	bl	80020fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2100      	movs	r1, #0
 8000f0a:	2045      	movs	r0, #69	; 0x45
 8000f0c:	f001 f8db 	bl	80020c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000f10:	2045      	movs	r0, #69	; 0x45
 8000f12:	f001 f8f4 	bl	80020fe <HAL_NVIC_EnableIRQ>

}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40023800 	.word	0x40023800

08000f24 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2a:	f107 030c 	add.w	r3, r7, #12
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
 8000f38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f3a:	4b1a      	ldr	r3, [pc, #104]	; (8000fa4 <MX_GPIO_Init+0x80>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a19      	ldr	r2, [pc, #100]	; (8000fa4 <MX_GPIO_Init+0x80>)
 8000f40:	f043 0308 	orr.w	r3, r3, #8
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <MX_GPIO_Init+0x80>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0308 	and.w	r3, r3, #8
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f52:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <MX_GPIO_Init+0x80>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a13      	ldr	r2, [pc, #76]	; (8000fa4 <MX_GPIO_Init+0x80>)
 8000f58:	f043 0304 	orr.w	r3, r3, #4
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <MX_GPIO_Init+0x80>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0304 	and.w	r3, r3, #4
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <MX_GPIO_Init+0x80>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	4a0d      	ldr	r2, [pc, #52]	; (8000fa4 <MX_GPIO_Init+0x80>)
 8000f70:	f043 0302 	orr.w	r3, r3, #2
 8000f74:	6313      	str	r3, [r2, #48]	; 0x30
 8000f76:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <MX_GPIO_Init+0x80>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	f003 0302 	and.w	r3, r3, #2
 8000f7e:	603b      	str	r3, [r7, #0]
 8000f80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f82:	2380      	movs	r3, #128	; 0x80
 8000f84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f8e:	f107 030c 	add.w	r3, r7, #12
 8000f92:	4619      	mov	r1, r3
 8000f94:	4804      	ldr	r0, [pc, #16]	; (8000fa8 <MX_GPIO_Init+0x84>)
 8000f96:	f001 fc73 	bl	8002880 <HAL_GPIO_Init>

}
 8000f9a:	bf00      	nop
 8000f9c:	3720      	adds	r7, #32
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40020800 	.word	0x40020800

08000fac <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fb0:	4b1b      	ldr	r3, [pc, #108]	; (8001020 <MX_I2C1_Init+0x74>)
 8000fb2:	4a1c      	ldr	r2, [pc, #112]	; (8001024 <MX_I2C1_Init+0x78>)
 8000fb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100413;
 8000fb6:	4b1a      	ldr	r3, [pc, #104]	; (8001020 <MX_I2C1_Init+0x74>)
 8000fb8:	4a1b      	ldr	r2, [pc, #108]	; (8001028 <MX_I2C1_Init+0x7c>)
 8000fba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fbc:	4b18      	ldr	r3, [pc, #96]	; (8001020 <MX_I2C1_Init+0x74>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fc2:	4b17      	ldr	r3, [pc, #92]	; (8001020 <MX_I2C1_Init+0x74>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fc8:	4b15      	ldr	r3, [pc, #84]	; (8001020 <MX_I2C1_Init+0x74>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fce:	4b14      	ldr	r3, [pc, #80]	; (8001020 <MX_I2C1_Init+0x74>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <MX_I2C1_Init+0x74>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fda:	4b11      	ldr	r3, [pc, #68]	; (8001020 <MX_I2C1_Init+0x74>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fe0:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <MX_I2C1_Init+0x74>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fe6:	480e      	ldr	r0, [pc, #56]	; (8001020 <MX_I2C1_Init+0x74>)
 8000fe8:	f001 fdf6 	bl	8002bd8 <HAL_I2C_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ff2:	f000 fc0b 	bl	800180c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4809      	ldr	r0, [pc, #36]	; (8001020 <MX_I2C1_Init+0x74>)
 8000ffa:	f002 fd4f 	bl	8003a9c <HAL_I2CEx_ConfigAnalogFilter>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001004:	f000 fc02 	bl	800180c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001008:	2100      	movs	r1, #0
 800100a:	4805      	ldr	r0, [pc, #20]	; (8001020 <MX_I2C1_Init+0x74>)
 800100c:	f002 fd91 	bl	8003b32 <HAL_I2CEx_ConfigDigitalFilter>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001016:	f000 fbf9 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000218 	.word	0x20000218
 8001024:	40005400 	.word	0x40005400
 8001028:	00100413 	.word	0x00100413

0800102c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	; 0x28
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a17      	ldr	r2, [pc, #92]	; (80010a8 <HAL_I2C_MspInit+0x7c>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d128      	bne.n	80010a0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800104e:	4b17      	ldr	r3, [pc, #92]	; (80010ac <HAL_I2C_MspInit+0x80>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a16      	ldr	r2, [pc, #88]	; (80010ac <HAL_I2C_MspInit+0x80>)
 8001054:	f043 0302 	orr.w	r3, r3, #2
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b14      	ldr	r3, [pc, #80]	; (80010ac <HAL_I2C_MspInit+0x80>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001066:	f44f 7340 	mov.w	r3, #768	; 0x300
 800106a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800106c:	2312      	movs	r3, #18
 800106e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001074:	2303      	movs	r3, #3
 8001076:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001078:	2304      	movs	r3, #4
 800107a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107c:	f107 0314 	add.w	r3, r7, #20
 8001080:	4619      	mov	r1, r3
 8001082:	480b      	ldr	r0, [pc, #44]	; (80010b0 <HAL_I2C_MspInit+0x84>)
 8001084:	f001 fbfc 	bl	8002880 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001088:	4b08      	ldr	r3, [pc, #32]	; (80010ac <HAL_I2C_MspInit+0x80>)
 800108a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108c:	4a07      	ldr	r2, [pc, #28]	; (80010ac <HAL_I2C_MspInit+0x80>)
 800108e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001092:	6413      	str	r3, [r2, #64]	; 0x40
 8001094:	4b05      	ldr	r3, [pc, #20]	; (80010ac <HAL_I2C_MspInit+0x80>)
 8001096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001098:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80010a0:	bf00      	nop
 80010a2:	3728      	adds	r7, #40	; 0x28
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40005400 	.word	0x40005400
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40020400 	.word	0x40020400

080010b4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80010bc:	1d39      	adds	r1, r7, #4
 80010be:	f04f 33ff 	mov.w	r3, #4294967295
 80010c2:	2201      	movs	r2, #1
 80010c4:	4803      	ldr	r0, [pc, #12]	; (80010d4 <__io_putchar+0x20>)
 80010c6:	f005 f9b6 	bl	8006436 <HAL_UART_Transmit>
    return 1;
 80010ca:	2301      	movs	r3, #1
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	200003ac 	.word	0x200003ac

080010d8 <imu_9dof_convert>:
	double acc_data_calc[3];
	double gyro_data_calc[3];
};

void imu_9dof_convert(struct imu_9dof * input, struct imu_9dof_calc * output)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
	output->acc_data_calc[0] = (double) input->acc_data[0] / 16384;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e8:	ee07 3a90 	vmov	s15, r3
 80010ec:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80010f0:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 80011b0 <imu_9dof_convert+0xd8>
 80010f4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	ed83 7b00 	vstr	d7, [r3]
	output->acc_data_calc[1] = (double) input->acc_data[1] / 16384;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001104:	ee07 3a90 	vmov	s15, r3
 8001108:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800110c:	ed9f 5b28 	vldr	d5, [pc, #160]	; 80011b0 <imu_9dof_convert+0xd8>
 8001110:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	ed83 7b02 	vstr	d7, [r3, #8]
	output->acc_data_calc[2] = (double) input->acc_data[2] / 16384;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001120:	ee07 3a90 	vmov	s15, r3
 8001124:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001128:	ed9f 5b21 	vldr	d5, [pc, #132]	; 80011b0 <imu_9dof_convert+0xd8>
 800112c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	ed83 7b04 	vstr	d7, [r3, #16]
	output->gyro_data_calc[0] = (double) input->gyro_data[0] * 250 / 32768;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800113c:	ee07 3a90 	vmov	s15, r3
 8001140:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001144:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 80011b8 <imu_9dof_convert+0xe0>
 8001148:	ee27 6b06 	vmul.f64	d6, d7, d6
 800114c:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 80011c0 <imu_9dof_convert+0xe8>
 8001150:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	ed83 7b06 	vstr	d7, [r3, #24]
	output->gyro_data_calc[1] = (double) input->gyro_data[1] * 250 / 32768;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001160:	ee07 3a90 	vmov	s15, r3
 8001164:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001168:	ed9f 6b13 	vldr	d6, [pc, #76]	; 80011b8 <imu_9dof_convert+0xe0>
 800116c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001170:	ed9f 5b13 	vldr	d5, [pc, #76]	; 80011c0 <imu_9dof_convert+0xe8>
 8001174:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	ed83 7b08 	vstr	d7, [r3, #32]
	output->gyro_data_calc[2] = (double) input->gyro_data[2] * 250 / 32768;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001184:	ee07 3a90 	vmov	s15, r3
 8001188:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800118c:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 80011b8 <imu_9dof_convert+0xe0>
 8001190:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001194:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 80011c0 <imu_9dof_convert+0xe8>
 8001198:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	00000000 	.word	0x00000000
 80011b4:	40d00000 	.word	0x40d00000
 80011b8:	00000000 	.word	0x00000000
 80011bc:	406f4000 	.word	0x406f4000
 80011c0:	00000000 	.word	0x00000000
 80011c4:	40e00000 	.word	0x40e00000

080011c8 <imu_9dof_get_data>:

void imu_9dof_get_data(struct imu_9dof * imu_9dof_data, struct imu_9dof_calc * imu_9dof_calculated)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
    MPU9250_GetData(imu_9dof_data->acc_data, imu_9dof_data->mag_data, imu_9dof_data->gyro_data);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	1d99      	adds	r1, r3, #6
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	330c      	adds	r3, #12
 80011dc:	461a      	mov	r2, r3
 80011de:	f7ff fda7 	bl	8000d30 <MPU9250_GetData>
    imu_9dof_convert(imu_9dof_data, imu_9dof_calculated);
 80011e2:	6839      	ldr	r1, [r7, #0]
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff ff77 	bl	80010d8 <imu_9dof_convert>
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011f4:	b5b0      	push	{r4, r5, r7, lr}
 80011f6:	f5ad 5d09 	sub.w	sp, sp, #8768	; 0x2240
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011fe:	f000 fe06 	bl	8001e0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001202:	f000 fa6f 	bl	80016e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001206:	f7ff fe8d 	bl	8000f24 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800120a:	f000 fd63 	bl	8001cd4 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 800120e:	f006 fb2f 	bl	8007870 <MX_FATFS_Init>
  MX_DMA_Init();
 8001212:	f7ff fe61 	bl	8000ed8 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8001216:	f000 faff 	bl	8001818 <MX_SDMMC1_SD_Init>
  MX_I2C1_Init();
 800121a:	f7ff fec7 	bl	8000fac <MX_I2C1_Init>
  //HAL_UART_Transmit(&huart3, "no filesystem\r\n", 6, HAL_MAX_DELAY);
      //UG_ConsolePutString(''uSD: HAL_SD_Get_CardInfo != SD_OK!\n'');


*/
  uint8_t Buffer[25] = {0};
 800121e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001222:	2200      	movs	r2, #0
 8001224:	f843 2c9c 	str.w	r2, [r3, #-156]
 8001228:	3b98      	subs	r3, #152	; 0x98
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]
 8001234:	611a      	str	r2, [r3, #16]
 8001236:	751a      	strb	r2, [r3, #20]
  uint8_t Space[] = " - ";
 8001238:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800123c:	461a      	mov	r2, r3
 800123e:	4b9b      	ldr	r3, [pc, #620]	; (80014ac <main+0x2b8>)
 8001240:	f842 3ca0 	str.w	r3, [r2, #-160]
  uint8_t StartMSG[] = "Starting I2C Scanning: \r\n";
 8001244:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001248:	4a99      	ldr	r2, [pc, #612]	; (80014b0 <main+0x2bc>)
 800124a:	f1a3 04bc 	sub.w	r4, r3, #188	; 0xbc
 800124e:	4615      	mov	r5, r2
 8001250:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001252:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001254:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001258:	c403      	stmia	r4!, {r0, r1}
 800125a:	8022      	strh	r2, [r4, #0]
  uint8_t EndMSG[] = "Done! \r\n\r\n";
 800125c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001260:	4a94      	ldr	r2, [pc, #592]	; (80014b4 <main+0x2c0>)
 8001262:	3bc8      	subs	r3, #200	; 0xc8
 8001264:	ca07      	ldmia	r2, {r0, r1, r2}
 8001266:	c303      	stmia	r3!, {r0, r1}
 8001268:	801a      	strh	r2, [r3, #0]
 800126a:	3302      	adds	r3, #2
 800126c:	0c12      	lsrs	r2, r2, #16
 800126e:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart3, StartMSG, sizeof(StartMSG), 10000);
 8001270:	4991      	ldr	r1, [pc, #580]	; (80014b8 <main+0x2c4>)
 8001272:	f242 2358 	movw	r3, #8792	; 0x2258
 8001276:	440b      	add	r3, r1
 8001278:	19d9      	adds	r1, r3, r7
 800127a:	f242 7310 	movw	r3, #10000	; 0x2710
 800127e:	221a      	movs	r2, #26
 8001280:	488e      	ldr	r0, [pc, #568]	; (80014bc <main+0x2c8>)
 8001282:	f005 f8d8 	bl	8006436 <HAL_UART_Transmit>
      for(int i=1; i<128; i++)
 8001286:	2301      	movs	r3, #1
 8001288:	f242 2254 	movw	r2, #8788	; 0x2254
 800128c:	443a      	add	r2, r7
 800128e:	6013      	str	r3, [r2, #0]
 8001290:	e047      	b.n	8001322 <main+0x12e>
      {
          int ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5);
 8001292:	f242 2354 	movw	r3, #8788	; 0x2254
 8001296:	443b      	add	r3, r7
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	b29b      	uxth	r3, r3
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	b299      	uxth	r1, r3
 80012a0:	2305      	movs	r3, #5
 80012a2:	2203      	movs	r2, #3
 80012a4:	4886      	ldr	r0, [pc, #536]	; (80014c0 <main+0x2cc>)
 80012a6:	f002 f825 	bl	80032f4 <HAL_I2C_IsDeviceReady>
 80012aa:	4603      	mov	r3, r0
 80012ac:	f507 5209 	add.w	r2, r7, #8768	; 0x2240
 80012b0:	6013      	str	r3, [r2, #0]
          if (ret != HAL_OK) /* No ACK Received At That Address */
 80012b2:	f507 5309 	add.w	r3, r7, #8768	; 0x2240
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d00b      	beq.n	80012d4 <main+0xe0>
          {
              HAL_UART_Transmit(&huart3, Space, sizeof(Space), 10000);
 80012bc:	4981      	ldr	r1, [pc, #516]	; (80014c4 <main+0x2d0>)
 80012be:	f242 2358 	movw	r3, #8792	; 0x2258
 80012c2:	440b      	add	r3, r1
 80012c4:	19d9      	adds	r1, r3, r7
 80012c6:	f242 7310 	movw	r3, #10000	; 0x2710
 80012ca:	2204      	movs	r2, #4
 80012cc:	487b      	ldr	r0, [pc, #492]	; (80014bc <main+0x2c8>)
 80012ce:	f005 f8b2 	bl	8006436 <HAL_UART_Transmit>
 80012d2:	e01d      	b.n	8001310 <main+0x11c>
          }
          else if(ret == HAL_OK)
 80012d4:	f507 5309 	add.w	r3, r7, #8768	; 0x2240
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d118      	bne.n	8001310 <main+0x11c>
          {
              sprintf(Buffer, "0x%X", i);
 80012de:	4b7a      	ldr	r3, [pc, #488]	; (80014c8 <main+0x2d4>)
 80012e0:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 80012e4:	f103 0318 	add.w	r3, r3, #24
 80012e8:	443b      	add	r3, r7
 80012ea:	f242 2254 	movw	r2, #8788	; 0x2254
 80012ee:	443a      	add	r2, r7
 80012f0:	6812      	ldr	r2, [r2, #0]
 80012f2:	4976      	ldr	r1, [pc, #472]	; (80014cc <main+0x2d8>)
 80012f4:	4618      	mov	r0, r3
 80012f6:	f009 feaf 	bl	800b058 <siprintf>
              HAL_UART_Transmit(&huart3, Buffer, sizeof(Buffer), 10000);
 80012fa:	4973      	ldr	r1, [pc, #460]	; (80014c8 <main+0x2d4>)
 80012fc:	f242 2358 	movw	r3, #8792	; 0x2258
 8001300:	440b      	add	r3, r1
 8001302:	19d9      	adds	r1, r3, r7
 8001304:	f242 7310 	movw	r3, #10000	; 0x2710
 8001308:	2219      	movs	r2, #25
 800130a:	486c      	ldr	r0, [pc, #432]	; (80014bc <main+0x2c8>)
 800130c:	f005 f893 	bl	8006436 <HAL_UART_Transmit>
      for(int i=1; i<128; i++)
 8001310:	f242 2354 	movw	r3, #8788	; 0x2254
 8001314:	443b      	add	r3, r7
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	3301      	adds	r3, #1
 800131a:	f242 2254 	movw	r2, #8788	; 0x2254
 800131e:	443a      	add	r2, r7
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	f242 2354 	movw	r3, #8788	; 0x2254
 8001326:	443b      	add	r3, r7
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2b7f      	cmp	r3, #127	; 0x7f
 800132c:	ddb1      	ble.n	8001292 <main+0x9e>
          }
      }
      HAL_UART_Transmit(&huart3, EndMSG, sizeof(EndMSG), 10000);
 800132e:	4968      	ldr	r1, [pc, #416]	; (80014d0 <main+0x2dc>)
 8001330:	f242 2358 	movw	r3, #8792	; 0x2258
 8001334:	440b      	add	r3, r1
 8001336:	19d9      	adds	r1, r3, r7
 8001338:	f242 7310 	movw	r3, #10000	; 0x2710
 800133c:	220b      	movs	r2, #11
 800133e:	485f      	ldr	r0, [pc, #380]	; (80014bc <main+0x2c8>)
 8001340:	f005 f879 	bl	8006436 <HAL_UART_Transmit>


  struct imu_9dof imu_9dof_data;
  struct imu_9dof_calc imu_9dof_calculated;
  MPU9250_Init();
 8001344:	f7ff fc36 	bl	8000bb4 <MPU9250_Init>
  char testdata[255] ;
FRESULT fres = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	f242 2247 	movw	r2, #8775	; 0x2247
 800134e:	443a      	add	r2, r7
 8001350:	7013      	strb	r3, [r2, #0]

  HAL_Delay(1000);
 8001352:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001356:	f000 fdb7 	bl	8001ec8 <HAL_Delay>

  if (f_mount(&temp_fatfs, "", 1) == FR_OK)
 800135a:	4b5e      	ldr	r3, [pc, #376]	; (80014d4 <main+0x2e0>)
 800135c:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001360:	f103 0318 	add.w	r3, r3, #24
 8001364:	443b      	add	r3, r7
 8001366:	2201      	movs	r2, #1
 8001368:	495b      	ldr	r1, [pc, #364]	; (80014d8 <main+0x2e4>)
 800136a:	4618      	mov	r0, r3
 800136c:	f008 fabc 	bl	80098e8 <f_mount>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d154      	bne.n	8001420 <main+0x22c>
  {
	  HAL_UART_Transmit(&huart3, "SDCard mounted\r\n", strlen("SDCard mounted\r\n"), HAL_MAX_DELAY);
 8001376:	f04f 33ff 	mov.w	r3, #4294967295
 800137a:	2210      	movs	r2, #16
 800137c:	4957      	ldr	r1, [pc, #348]	; (80014dc <main+0x2e8>)
 800137e:	484f      	ldr	r0, [pc, #316]	; (80014bc <main+0x2c8>)
 8001380:	f005 f859 	bl	8006436 <HAL_UART_Transmit>
	  char path[] = "GYRO.TXT\0";
 8001384:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001388:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800138c:	4a54      	ldr	r2, [pc, #336]	; (80014e0 <main+0x2ec>)
 800138e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001390:	c303      	stmia	r3!, {r0, r1}
 8001392:	801a      	strh	r2, [r3, #0]
	 fres = f_open(&fil, path, FA_WRITE | FA_CREATE_ALWAYS);
 8001394:	4953      	ldr	r1, [pc, #332]	; (80014e4 <main+0x2f0>)
 8001396:	f242 2358 	movw	r3, #8792	; 0x2258
 800139a:	440b      	add	r3, r1
 800139c:	19d9      	adds	r1, r3, r7
 800139e:	4b52      	ldr	r3, [pc, #328]	; (80014e8 <main+0x2f4>)
 80013a0:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 80013a4:	f103 0318 	add.w	r3, r3, #24
 80013a8:	443b      	add	r3, r7
 80013aa:	220a      	movs	r2, #10
 80013ac:	4618      	mov	r0, r3
 80013ae:	f008 fae1 	bl	8009974 <f_open>
 80013b2:	4603      	mov	r3, r0
 80013b4:	f242 2247 	movw	r2, #8775	; 0x2247
 80013b8:	443a      	add	r2, r7
 80013ba:	7013      	strb	r3, [r2, #0]

	  char test_data[] = "number,gyro_x,gyro_y,gyro_z,acc_x,acc_y,acc_z\r\n";
 80013bc:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80013c0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80013c4:	4a49      	ldr	r2, [pc, #292]	; (80014ec <main+0x2f8>)
 80013c6:	461c      	mov	r4, r3
 80013c8:	4615      	mov	r5, r2
 80013ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013d2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80013d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  fres =  f_write(&fil, test_data, sizeof(test_data), &test_byte);
 80013da:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80013de:	4944      	ldr	r1, [pc, #272]	; (80014f0 <main+0x2fc>)
 80013e0:	f242 2258 	movw	r2, #8792	; 0x2258
 80013e4:	440a      	add	r2, r1
 80013e6:	19d1      	adds	r1, r2, r7
 80013e8:	483f      	ldr	r0, [pc, #252]	; (80014e8 <main+0x2f4>)
 80013ea:	f242 2258 	movw	r2, #8792	; 0x2258
 80013ee:	4402      	add	r2, r0
 80013f0:	19d0      	adds	r0, r2, r7
 80013f2:	2230      	movs	r2, #48	; 0x30
 80013f4:	f008 fc8a 	bl	8009d0c <f_write>
 80013f8:	4603      	mov	r3, r0
 80013fa:	f242 2247 	movw	r2, #8775	; 0x2247
 80013fe:	443a      	add	r2, r7
 8001400:	7013      	strb	r3, [r2, #0]
	  fres =   f_close(&fil);
 8001402:	4b39      	ldr	r3, [pc, #228]	; (80014e8 <main+0x2f4>)
 8001404:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001408:	f103 0318 	add.w	r3, r3, #24
 800140c:	443b      	add	r3, r7
 800140e:	4618      	mov	r0, r3
 8001410:	f008 fe8e 	bl	800a130 <f_close>
 8001414:	4603      	mov	r3, r0
 8001416:	f242 2247 	movw	r2, #8775	; 0x2247
 800141a:	443a      	add	r2, r7
 800141c:	7013      	strb	r3, [r2, #0]
 800141e:	e006      	b.n	800142e <main+0x23a>

  }else
  {
	  HAL_UART_Transmit(&huart3, "SDCard mount failed\r\n", strlen("SDCard mount failed\r\n"), HAL_MAX_DELAY);
 8001420:	f04f 33ff 	mov.w	r3, #4294967295
 8001424:	2215      	movs	r2, #21
 8001426:	4933      	ldr	r1, [pc, #204]	; (80014f4 <main+0x300>)
 8001428:	4824      	ldr	r0, [pc, #144]	; (80014bc <main+0x2c8>)
 800142a:	f005 f804 	bl	8006436 <HAL_UART_Transmit>
  }
  //HAL_UART_Transmit(&huart3, "no filesystem\r\n", 6, HAL_MAX_DELAY);
  int number = 1;
 800142e:	2301      	movs	r3, #1
 8001430:	f242 2250 	movw	r2, #8784	; 0x2250
 8001434:	443a      	add	r2, r7
 8001436:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  char path[] = "GYRO.TXT\0";
 8001438:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800143c:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8001440:	4a27      	ldr	r2, [pc, #156]	; (80014e0 <main+0x2ec>)
 8001442:	ca07      	ldmia	r2, {r0, r1, r2}
 8001444:	c303      	stmia	r3!, {r0, r1}
 8001446:	801a      	strh	r2, [r3, #0]
	sprintf(testdata,"%d,,", number);
 8001448:	4b2b      	ldr	r3, [pc, #172]	; (80014f8 <main+0x304>)
 800144a:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 800144e:	f103 0318 	add.w	r3, r3, #24
 8001452:	443b      	add	r3, r7
 8001454:	f242 2250 	movw	r2, #8784	; 0x2250
 8001458:	443a      	add	r2, r7
 800145a:	6812      	ldr	r2, [r2, #0]
 800145c:	4927      	ldr	r1, [pc, #156]	; (80014fc <main+0x308>)
 800145e:	4618      	mov	r0, r3
 8001460:	f009 fdfa 	bl	800b058 <siprintf>
	  f_open(&fil, path, FA_WRITE | FA_OPEN_APPEND);
 8001464:	4926      	ldr	r1, [pc, #152]	; (8001500 <main+0x30c>)
 8001466:	f242 2358 	movw	r3, #8792	; 0x2258
 800146a:	440b      	add	r3, r1
 800146c:	19d9      	adds	r1, r3, r7
 800146e:	4b1e      	ldr	r3, [pc, #120]	; (80014e8 <main+0x2f4>)
 8001470:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001474:	f103 0318 	add.w	r3, r3, #24
 8001478:	443b      	add	r3, r7
 800147a:	2232      	movs	r2, #50	; 0x32
 800147c:	4618      	mov	r0, r3
 800147e:	f008 fa79 	bl	8009974 <f_open>

	imu_9dof_get_data(&imu_9dof_data, &imu_9dof_calculated);
 8001482:	4a20      	ldr	r2, [pc, #128]	; (8001504 <main+0x310>)
 8001484:	f242 2358 	movw	r3, #8792	; 0x2258
 8001488:	4413      	add	r3, r2
 800148a:	19da      	adds	r2, r3, r7
 800148c:	4b1e      	ldr	r3, [pc, #120]	; (8001508 <main+0x314>)
 800148e:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001492:	f103 0318 	add.w	r3, r3, #24
 8001496:	443b      	add	r3, r7
 8001498:	4611      	mov	r1, r2
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff fe94 	bl	80011c8 <imu_9dof_get_data>
	for (int i = 0; i < 3; i++)
 80014a0:	2300      	movs	r3, #0
 80014a2:	f242 224c 	movw	r2, #8780	; 0x224c
 80014a6:	443a      	add	r2, r7
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	e077      	b.n	800159c <main+0x3a8>
 80014ac:	00202d20 	.word	0x00202d20
 80014b0:	0800eaf8 	.word	0x0800eaf8
 80014b4:	0800eb14 	.word	0x0800eb14
 80014b8:	ffffdf44 	.word	0xffffdf44
 80014bc:	200003ac 	.word	0x200003ac
 80014c0:	20000218 	.word	0x20000218
 80014c4:	ffffdf60 	.word	0xffffdf60
 80014c8:	ffffdf64 	.word	0xffffdf64
 80014cc:	0800eaa8 	.word	0x0800eaa8
 80014d0:	ffffdf38 	.word	0xffffdf38
 80014d4:	ffffefb4 	.word	0xffffefb4
 80014d8:	0800eab0 	.word	0x0800eab0
 80014dc:	0800eab4 	.word	0x0800eab4
 80014e0:	0800eb20 	.word	0x0800eb20
 80014e4:	ffffdde4 	.word	0xffffdde4
 80014e8:	ffffdf84 	.word	0xffffdf84
 80014ec:	0800eb2c 	.word	0x0800eb2c
 80014f0:	ffffdda8 	.word	0xffffdda8
 80014f4:	0800eac8 	.word	0x0800eac8
 80014f8:	ffffddf0 	.word	0xffffddf0
 80014fc:	0800eae0 	.word	0x0800eae0
 8001500:	ffffddd8 	.word	0xffffddd8
 8001504:	ffffdef0 	.word	0xffffdef0
 8001508:	ffffdf24 	.word	0xffffdf24
	{
		sprintf(testdata, "%f,", imu_9dof_calculated.gyro_data_calc[i]);
 800150c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001510:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8001514:	f242 234c 	movw	r3, #8780	; 0x224c
 8001518:	443b      	add	r3, r7
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	3303      	adds	r3, #3
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	4413      	add	r3, r2
 8001522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001526:	4869      	ldr	r0, [pc, #420]	; (80016cc <main+0x4d8>)
 8001528:	f242 2158 	movw	r1, #8792	; 0x2258
 800152c:	4401      	add	r1, r0
 800152e:	19c8      	adds	r0, r1, r7
 8001530:	4967      	ldr	r1, [pc, #412]	; (80016d0 <main+0x4dc>)
 8001532:	f009 fd91 	bl	800b058 <siprintf>
		  f_write(&fil, testdata, strlen(testdata), &test_byte);
 8001536:	4b65      	ldr	r3, [pc, #404]	; (80016cc <main+0x4d8>)
 8001538:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 800153c:	f103 0318 	add.w	r3, r3, #24
 8001540:	443b      	add	r3, r7
 8001542:	4618      	mov	r0, r3
 8001544:	f7fe fe7c 	bl	8000240 <strlen>
 8001548:	4602      	mov	r2, r0
 800154a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800154e:	495f      	ldr	r1, [pc, #380]	; (80016cc <main+0x4d8>)
 8001550:	f501 5109 	add.w	r1, r1, #8768	; 0x2240
 8001554:	f101 0118 	add.w	r1, r1, #24
 8001558:	4439      	add	r1, r7
 800155a:	485e      	ldr	r0, [pc, #376]	; (80016d4 <main+0x4e0>)
 800155c:	f500 5009 	add.w	r0, r0, #8768	; 0x2240
 8001560:	f100 0018 	add.w	r0, r0, #24
 8001564:	4438      	add	r0, r7
 8001566:	f008 fbd1 	bl	8009d0c <f_write>
		printf("%f ", imu_9dof_calculated.gyro_data_calc[i]);
 800156a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800156e:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8001572:	f242 234c 	movw	r3, #8780	; 0x224c
 8001576:	443b      	add	r3, r7
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	3303      	adds	r3, #3
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	4413      	add	r3, r2
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	4854      	ldr	r0, [pc, #336]	; (80016d8 <main+0x4e4>)
 8001586:	f009 fcd3 	bl	800af30 <iprintf>
	for (int i = 0; i < 3; i++)
 800158a:	f242 234c 	movw	r3, #8780	; 0x224c
 800158e:	443b      	add	r3, r7
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	3301      	adds	r3, #1
 8001594:	f242 224c 	movw	r2, #8780	; 0x224c
 8001598:	443a      	add	r2, r7
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	f242 234c 	movw	r3, #8780	; 0x224c
 80015a0:	443b      	add	r3, r7
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	ddb1      	ble.n	800150c <main+0x318>

	}
	for (int i = 0; i < 3; i++)
 80015a8:	2300      	movs	r3, #0
 80015aa:	f242 2248 	movw	r2, #8776	; 0x2248
 80015ae:	443a      	add	r2, r7
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	e046      	b.n	8001642 <main+0x44e>
	{
		sprintf(testdata, "%f,", imu_9dof_calculated.gyro_data_calc[i]);
 80015b4:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80015b8:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 80015bc:	f242 2348 	movw	r3, #8776	; 0x2248
 80015c0:	443b      	add	r3, r7
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	3303      	adds	r3, #3
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	4413      	add	r3, r2
 80015ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ce:	483f      	ldr	r0, [pc, #252]	; (80016cc <main+0x4d8>)
 80015d0:	f242 2158 	movw	r1, #8792	; 0x2258
 80015d4:	4401      	add	r1, r0
 80015d6:	19c8      	adds	r0, r1, r7
 80015d8:	493d      	ldr	r1, [pc, #244]	; (80016d0 <main+0x4dc>)
 80015da:	f009 fd3d 	bl	800b058 <siprintf>
		  f_write(&fil, testdata, strlen(testdata), &test_byte);
 80015de:	4b3b      	ldr	r3, [pc, #236]	; (80016cc <main+0x4d8>)
 80015e0:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 80015e4:	f103 0318 	add.w	r3, r3, #24
 80015e8:	443b      	add	r3, r7
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7fe fe28 	bl	8000240 <strlen>
 80015f0:	4602      	mov	r2, r0
 80015f2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80015f6:	4935      	ldr	r1, [pc, #212]	; (80016cc <main+0x4d8>)
 80015f8:	f501 5109 	add.w	r1, r1, #8768	; 0x2240
 80015fc:	f101 0118 	add.w	r1, r1, #24
 8001600:	4439      	add	r1, r7
 8001602:	4834      	ldr	r0, [pc, #208]	; (80016d4 <main+0x4e0>)
 8001604:	f500 5009 	add.w	r0, r0, #8768	; 0x2240
 8001608:	f100 0018 	add.w	r0, r0, #24
 800160c:	4438      	add	r0, r7
 800160e:	f008 fb7d 	bl	8009d0c <f_write>
		printf("%f ", imu_9dof_calculated.acc_data_calc[i]);
 8001612:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001616:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800161a:	f242 2348 	movw	r3, #8776	; 0x2248
 800161e:	443b      	add	r3, r7
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	4413      	add	r3, r2
 8001626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162a:	482b      	ldr	r0, [pc, #172]	; (80016d8 <main+0x4e4>)
 800162c:	f009 fc80 	bl	800af30 <iprintf>
	for (int i = 0; i < 3; i++)
 8001630:	f242 2348 	movw	r3, #8776	; 0x2248
 8001634:	443b      	add	r3, r7
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	3301      	adds	r3, #1
 800163a:	f242 2248 	movw	r2, #8776	; 0x2248
 800163e:	443a      	add	r2, r7
 8001640:	6013      	str	r3, [r2, #0]
 8001642:	f242 2348 	movw	r3, #8776	; 0x2248
 8001646:	443b      	add	r3, r7
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2b02      	cmp	r3, #2
 800164c:	ddb2      	ble.n	80015b4 <main+0x3c0>
	}
	sprintf(testdata, "\r\n ");
 800164e:	4b1f      	ldr	r3, [pc, #124]	; (80016cc <main+0x4d8>)
 8001650:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001654:	f103 0318 	add.w	r3, r3, #24
 8001658:	443b      	add	r3, r7
 800165a:	4920      	ldr	r1, [pc, #128]	; (80016dc <main+0x4e8>)
 800165c:	4618      	mov	r0, r3
 800165e:	f009 fcfb 	bl	800b058 <siprintf>
	number++;
 8001662:	f242 2350 	movw	r3, #8784	; 0x2250
 8001666:	443b      	add	r3, r7
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	3301      	adds	r3, #1
 800166c:	f242 2250 	movw	r2, #8784	; 0x2250
 8001670:	443a      	add	r2, r7
 8001672:	6013      	str	r3, [r2, #0]
	f_write(&fil, testdata, strlen(testdata), &test_byte);
 8001674:	4b15      	ldr	r3, [pc, #84]	; (80016cc <main+0x4d8>)
 8001676:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 800167a:	f103 0318 	add.w	r3, r3, #24
 800167e:	443b      	add	r3, r7
 8001680:	4618      	mov	r0, r3
 8001682:	f7fe fddd 	bl	8000240 <strlen>
 8001686:	4602      	mov	r2, r0
 8001688:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800168c:	490f      	ldr	r1, [pc, #60]	; (80016cc <main+0x4d8>)
 800168e:	f501 5109 	add.w	r1, r1, #8768	; 0x2240
 8001692:	f101 0118 	add.w	r1, r1, #24
 8001696:	4439      	add	r1, r7
 8001698:	480e      	ldr	r0, [pc, #56]	; (80016d4 <main+0x4e0>)
 800169a:	f500 5009 	add.w	r0, r0, #8768	; 0x2240
 800169e:	f100 0018 	add.w	r0, r0, #24
 80016a2:	4438      	add	r0, r7
 80016a4:	f008 fb32 	bl	8009d0c <f_write>
	printf("\r\n");
 80016a8:	480d      	ldr	r0, [pc, #52]	; (80016e0 <main+0x4ec>)
 80016aa:	f009 fcc7 	bl	800b03c <puts>





	  f_close(&fil);
 80016ae:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <main+0x4e0>)
 80016b0:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 80016b4:	f103 0318 	add.w	r3, r3, #24
 80016b8:	443b      	add	r3, r7
 80016ba:	4618      	mov	r0, r3
 80016bc:	f008 fd38 	bl	800a130 <f_close>

	  HAL_Delay(1000);
 80016c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016c4:	f000 fc00 	bl	8001ec8 <HAL_Delay>
  {
 80016c8:	e6b6      	b.n	8001438 <main+0x244>
 80016ca:	bf00      	nop
 80016cc:	ffffddf0 	.word	0xffffddf0
 80016d0:	0800eae8 	.word	0x0800eae8
 80016d4:	ffffdf84 	.word	0xffffdf84
 80016d8:	0800eaec 	.word	0x0800eaec
 80016dc:	0800eaf0 	.word	0x0800eaf0
 80016e0:	0800eaf4 	.word	0x0800eaf4

080016e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b0b8      	sub	sp, #224	; 0xe0
 80016e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ea:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80016ee:	2234      	movs	r2, #52	; 0x34
 80016f0:	2100      	movs	r1, #0
 80016f2:	4618      	mov	r0, r3
 80016f4:	f008 fdcc 	bl	800a290 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001708:	f107 0308 	add.w	r3, r7, #8
 800170c:	2290      	movs	r2, #144	; 0x90
 800170e:	2100      	movs	r1, #0
 8001710:	4618      	mov	r0, r3
 8001712:	f008 fdbd 	bl	800a290 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001716:	4b3a      	ldr	r3, [pc, #232]	; (8001800 <SystemClock_Config+0x11c>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	4a39      	ldr	r2, [pc, #228]	; (8001800 <SystemClock_Config+0x11c>)
 800171c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001720:	6413      	str	r3, [r2, #64]	; 0x40
 8001722:	4b37      	ldr	r3, [pc, #220]	; (8001800 <SystemClock_Config+0x11c>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172a:	607b      	str	r3, [r7, #4]
 800172c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800172e:	4b35      	ldr	r3, [pc, #212]	; (8001804 <SystemClock_Config+0x120>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001736:	4a33      	ldr	r2, [pc, #204]	; (8001804 <SystemClock_Config+0x120>)
 8001738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	4b31      	ldr	r3, [pc, #196]	; (8001804 <SystemClock_Config+0x120>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001746:	603b      	str	r3, [r7, #0]
 8001748:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800174a:	2302      	movs	r3, #2
 800174c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001750:	2301      	movs	r3, #1
 8001752:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001756:	2310      	movs	r3, #16
 8001758:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800175c:	2302      	movs	r3, #2
 800175e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001762:	2300      	movs	r3, #0
 8001764:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001768:	2308      	movs	r3, #8
 800176a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 800176e:	2360      	movs	r3, #96	; 0x60
 8001770:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8001774:	2308      	movs	r3, #8
 8001776:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800177a:	2308      	movs	r3, #8
 800177c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001780:	2302      	movs	r3, #2
 8001782:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001786:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800178a:	4618      	mov	r0, r3
 800178c:	f002 fa1e 	bl	8003bcc <HAL_RCC_OscConfig>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001796:	f000 f839 	bl	800180c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800179a:	230f      	movs	r3, #15
 800179c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017a0:	2302      	movs	r3, #2
 80017a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017a6:	2300      	movs	r3, #0
 80017a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017b4:	2300      	movs	r3, #0
 80017b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017ba:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80017be:	2100      	movs	r1, #0
 80017c0:	4618      	mov	r0, r3
 80017c2:	f002 fcb1 	bl	8004128 <HAL_RCC_ClockConfig>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <SystemClock_Config+0xec>
  {
    Error_Handler();
 80017cc:	f000 f81e 	bl	800180c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 80017d0:	4b0d      	ldr	r3, [pc, #52]	; (8001808 <SystemClock_Config+0x124>)
 80017d2:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDMMC1;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80017d4:	2300      	movs	r3, #0
 80017d6:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80017d8:	2300      	movs	r3, #0
 80017da:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_SYSCLK;
 80017dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80017e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017e4:	f107 0308 	add.w	r3, r7, #8
 80017e8:	4618      	mov	r0, r3
 80017ea:	f002 fe83 	bl	80044f4 <HAL_RCCEx_PeriphCLKConfig>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <SystemClock_Config+0x114>
  {
    Error_Handler();
 80017f4:	f000 f80a 	bl	800180c <Error_Handler>
  }
}
 80017f8:	bf00      	nop
 80017fa:	37e0      	adds	r7, #224	; 0xe0
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40023800 	.word	0x40023800
 8001804:	40007000 	.word	0x40007000
 8001808:	00804100 	.word	0x00804100

0800180c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001810:	b672      	cpsid	i
}
 8001812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001814:	e7fe      	b.n	8001814 <Error_Handler+0x8>
	...

08001818 <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800181c:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <MX_SDMMC1_SD_Init+0x38>)
 800181e:	4a0d      	ldr	r2, [pc, #52]	; (8001854 <MX_SDMMC1_SD_Init+0x3c>)
 8001820:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001822:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <MX_SDMMC1_SD_Init+0x38>)
 8001824:	2200      	movs	r2, #0
 8001826:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001828:	4b09      	ldr	r3, [pc, #36]	; (8001850 <MX_SDMMC1_SD_Init+0x38>)
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800182e:	4b08      	ldr	r3, [pc, #32]	; (8001850 <MX_SDMMC1_SD_Init+0x38>)
 8001830:	2200      	movs	r2, #0
 8001832:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001834:	4b06      	ldr	r3, [pc, #24]	; (8001850 <MX_SDMMC1_SD_Init+0x38>)
 8001836:	2200      	movs	r2, #0
 8001838:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800183a:	4b05      	ldr	r3, [pc, #20]	; (8001850 <MX_SDMMC1_SD_Init+0x38>)
 800183c:	2200      	movs	r2, #0
 800183e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001840:	4b03      	ldr	r3, [pc, #12]	; (8001850 <MX_SDMMC1_SD_Init+0x38>)
 8001842:	2200      	movs	r2, #0
 8001844:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001846:	bf00      	nop
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	20000264 	.word	0x20000264
 8001854:	40012c00 	.word	0x40012c00

08001858 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08a      	sub	sp, #40	; 0x28
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 0314 	add.w	r3, r7, #20
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a6d      	ldr	r2, [pc, #436]	; (8001a2c <HAL_SD_MspInit+0x1d4>)
 8001876:	4293      	cmp	r3, r2
 8001878:	f040 80d4 	bne.w	8001a24 <HAL_SD_MspInit+0x1cc>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800187c:	4b6c      	ldr	r3, [pc, #432]	; (8001a30 <HAL_SD_MspInit+0x1d8>)
 800187e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001880:	4a6b      	ldr	r2, [pc, #428]	; (8001a30 <HAL_SD_MspInit+0x1d8>)
 8001882:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001886:	6453      	str	r3, [r2, #68]	; 0x44
 8001888:	4b69      	ldr	r3, [pc, #420]	; (8001a30 <HAL_SD_MspInit+0x1d8>)
 800188a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001894:	4b66      	ldr	r3, [pc, #408]	; (8001a30 <HAL_SD_MspInit+0x1d8>)
 8001896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001898:	4a65      	ldr	r2, [pc, #404]	; (8001a30 <HAL_SD_MspInit+0x1d8>)
 800189a:	f043 0304 	orr.w	r3, r3, #4
 800189e:	6313      	str	r3, [r2, #48]	; 0x30
 80018a0:	4b63      	ldr	r3, [pc, #396]	; (8001a30 <HAL_SD_MspInit+0x1d8>)
 80018a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a4:	f003 0304 	and.w	r3, r3, #4
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ac:	4b60      	ldr	r3, [pc, #384]	; (8001a30 <HAL_SD_MspInit+0x1d8>)
 80018ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b0:	4a5f      	ldr	r2, [pc, #380]	; (8001a30 <HAL_SD_MspInit+0x1d8>)
 80018b2:	f043 0308 	orr.w	r3, r3, #8
 80018b6:	6313      	str	r3, [r2, #48]	; 0x30
 80018b8:	4b5d      	ldr	r3, [pc, #372]	; (8001a30 <HAL_SD_MspInit+0x1d8>)
 80018ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018bc:	f003 0308 	and.w	r3, r3, #8
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80018c4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80018c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ca:	2302      	movs	r3, #2
 80018cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018ce:	2301      	movs	r3, #1
 80018d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d2:	2303      	movs	r3, #3
 80018d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80018d6:	230c      	movs	r3, #12
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018da:	f107 0314 	add.w	r3, r7, #20
 80018de:	4619      	mov	r1, r3
 80018e0:	4854      	ldr	r0, [pc, #336]	; (8001a34 <HAL_SD_MspInit+0x1dc>)
 80018e2:	f000 ffcd 	bl	8002880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80018e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ec:	2302      	movs	r3, #2
 80018ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f4:	2303      	movs	r3, #3
 80018f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80018f8:	230c      	movs	r3, #12
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	4619      	mov	r1, r3
 8001902:	484c      	ldr	r0, [pc, #304]	; (8001a34 <HAL_SD_MspInit+0x1dc>)
 8001904:	f000 ffbc 	bl	8002880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001908:	2304      	movs	r3, #4
 800190a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190c:	2302      	movs	r3, #2
 800190e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001910:	2301      	movs	r3, #1
 8001912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001914:	2303      	movs	r3, #3
 8001916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001918:	230c      	movs	r3, #12
 800191a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	4619      	mov	r1, r3
 8001922:	4845      	ldr	r0, [pc, #276]	; (8001a38 <HAL_SD_MspInit+0x1e0>)
 8001924:	f000 ffac 	bl	8002880 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8001928:	4b44      	ldr	r3, [pc, #272]	; (8001a3c <HAL_SD_MspInit+0x1e4>)
 800192a:	4a45      	ldr	r2, [pc, #276]	; (8001a40 <HAL_SD_MspInit+0x1e8>)
 800192c:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 800192e:	4b43      	ldr	r3, [pc, #268]	; (8001a3c <HAL_SD_MspInit+0x1e4>)
 8001930:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001934:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001936:	4b41      	ldr	r3, [pc, #260]	; (8001a3c <HAL_SD_MspInit+0x1e4>)
 8001938:	2200      	movs	r2, #0
 800193a:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800193c:	4b3f      	ldr	r3, [pc, #252]	; (8001a3c <HAL_SD_MspInit+0x1e4>)
 800193e:	2200      	movs	r2, #0
 8001940:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001942:	4b3e      	ldr	r3, [pc, #248]	; (8001a3c <HAL_SD_MspInit+0x1e4>)
 8001944:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001948:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800194a:	4b3c      	ldr	r3, [pc, #240]	; (8001a3c <HAL_SD_MspInit+0x1e4>)
 800194c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001950:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001952:	4b3a      	ldr	r3, [pc, #232]	; (8001a3c <HAL_SD_MspInit+0x1e4>)
 8001954:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001958:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 800195a:	4b38      	ldr	r3, [pc, #224]	; (8001a3c <HAL_SD_MspInit+0x1e4>)
 800195c:	2220      	movs	r2, #32
 800195e:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001960:	4b36      	ldr	r3, [pc, #216]	; (8001a3c <HAL_SD_MspInit+0x1e4>)
 8001962:	2200      	movs	r2, #0
 8001964:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001966:	4b35      	ldr	r3, [pc, #212]	; (8001a3c <HAL_SD_MspInit+0x1e4>)
 8001968:	2204      	movs	r2, #4
 800196a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800196c:	4b33      	ldr	r3, [pc, #204]	; (8001a3c <HAL_SD_MspInit+0x1e4>)
 800196e:	2203      	movs	r2, #3
 8001970:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001972:	4b32      	ldr	r3, [pc, #200]	; (8001a3c <HAL_SD_MspInit+0x1e4>)
 8001974:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001978:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800197a:	4b30      	ldr	r3, [pc, #192]	; (8001a3c <HAL_SD_MspInit+0x1e4>)
 800197c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001980:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8001982:	482e      	ldr	r0, [pc, #184]	; (8001a3c <HAL_SD_MspInit+0x1e4>)
 8001984:	f000 fbd6 	bl	8002134 <HAL_DMA_Init>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <HAL_SD_MspInit+0x13a>
    {
      Error_Handler();
 800198e:	f7ff ff3d 	bl	800180c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a29      	ldr	r2, [pc, #164]	; (8001a3c <HAL_SD_MspInit+0x1e4>)
 8001996:	641a      	str	r2, [r3, #64]	; 0x40
 8001998:	4a28      	ldr	r2, [pc, #160]	; (8001a3c <HAL_SD_MspInit+0x1e4>)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 800199e:	4b29      	ldr	r3, [pc, #164]	; (8001a44 <HAL_SD_MspInit+0x1ec>)
 80019a0:	4a29      	ldr	r2, [pc, #164]	; (8001a48 <HAL_SD_MspInit+0x1f0>)
 80019a2:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 80019a4:	4b27      	ldr	r3, [pc, #156]	; (8001a44 <HAL_SD_MspInit+0x1ec>)
 80019a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019aa:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019ac:	4b25      	ldr	r3, [pc, #148]	; (8001a44 <HAL_SD_MspInit+0x1ec>)
 80019ae:	2240      	movs	r2, #64	; 0x40
 80019b0:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019b2:	4b24      	ldr	r3, [pc, #144]	; (8001a44 <HAL_SD_MspInit+0x1ec>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019b8:	4b22      	ldr	r3, [pc, #136]	; (8001a44 <HAL_SD_MspInit+0x1ec>)
 80019ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019be:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019c0:	4b20      	ldr	r3, [pc, #128]	; (8001a44 <HAL_SD_MspInit+0x1ec>)
 80019c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019c6:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80019c8:	4b1e      	ldr	r3, [pc, #120]	; (8001a44 <HAL_SD_MspInit+0x1ec>)
 80019ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019ce:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 80019d0:	4b1c      	ldr	r3, [pc, #112]	; (8001a44 <HAL_SD_MspInit+0x1ec>)
 80019d2:	2220      	movs	r2, #32
 80019d4:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019d6:	4b1b      	ldr	r3, [pc, #108]	; (8001a44 <HAL_SD_MspInit+0x1ec>)
 80019d8:	2200      	movs	r2, #0
 80019da:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80019dc:	4b19      	ldr	r3, [pc, #100]	; (8001a44 <HAL_SD_MspInit+0x1ec>)
 80019de:	2204      	movs	r2, #4
 80019e0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80019e2:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <HAL_SD_MspInit+0x1ec>)
 80019e4:	2203      	movs	r2, #3
 80019e6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 80019e8:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <HAL_SD_MspInit+0x1ec>)
 80019ea:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80019ee:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80019f0:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <HAL_SD_MspInit+0x1ec>)
 80019f2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80019f6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 80019f8:	4812      	ldr	r0, [pc, #72]	; (8001a44 <HAL_SD_MspInit+0x1ec>)
 80019fa:	f000 fb9b 	bl	8002134 <HAL_DMA_Init>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <HAL_SD_MspInit+0x1b0>
    {
      Error_Handler();
 8001a04:	f7ff ff02 	bl	800180c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a0e      	ldr	r2, [pc, #56]	; (8001a44 <HAL_SD_MspInit+0x1ec>)
 8001a0c:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a0e:	4a0d      	ldr	r2, [pc, #52]	; (8001a44 <HAL_SD_MspInit+0x1ec>)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001a14:	2200      	movs	r2, #0
 8001a16:	2100      	movs	r1, #0
 8001a18:	2031      	movs	r0, #49	; 0x31
 8001a1a:	f000 fb54 	bl	80020c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001a1e:	2031      	movs	r0, #49	; 0x31
 8001a20:	f000 fb6d 	bl	80020fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8001a24:	bf00      	nop
 8001a26:	3728      	adds	r7, #40	; 0x28
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40012c00 	.word	0x40012c00
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40020800 	.word	0x40020800
 8001a38:	40020c00 	.word	0x40020c00
 8001a3c:	200002e8 	.word	0x200002e8
 8001a40:	40026458 	.word	0x40026458
 8001a44:	20000348 	.word	0x20000348
 8001a48:	400264a0 	.word	0x400264a0

08001a4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a52:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <HAL_MspInit+0x44>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	4a0e      	ldr	r2, [pc, #56]	; (8001a90 <HAL_MspInit+0x44>)
 8001a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a5e:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <HAL_MspInit+0x44>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a66:	607b      	str	r3, [r7, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a6a:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <HAL_MspInit+0x44>)
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6e:	4a08      	ldr	r2, [pc, #32]	; (8001a90 <HAL_MspInit+0x44>)
 8001a70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a74:	6453      	str	r3, [r2, #68]	; 0x44
 8001a76:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <HAL_MspInit+0x44>)
 8001a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a7e:	603b      	str	r3, [r7, #0]
 8001a80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	40023800 	.word	0x40023800

08001a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a98:	e7fe      	b.n	8001a98 <NMI_Handler+0x4>

08001a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a9e:	e7fe      	b.n	8001a9e <HardFault_Handler+0x4>

08001aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa4:	e7fe      	b.n	8001aa4 <MemManage_Handler+0x4>

08001aa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aaa:	e7fe      	b.n	8001aaa <BusFault_Handler+0x4>

08001aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ab0:	e7fe      	b.n	8001ab0 <UsageFault_Handler+0x4>

08001ab2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ae0:	f000 f9d2 	bl	8001e88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001aec:	4802      	ldr	r0, [pc, #8]	; (8001af8 <SDMMC1_IRQHandler+0x10>)
 8001aee:	f003 fba9 	bl	8005244 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000264 	.word	0x20000264

08001afc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8001b00:	4802      	ldr	r0, [pc, #8]	; (8001b0c <DMA2_Stream3_IRQHandler+0x10>)
 8001b02:	f000 fc47 	bl	8002394 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	200002e8 	.word	0x200002e8

08001b10 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8001b14:	4802      	ldr	r0, [pc, #8]	; (8001b20 <DMA2_Stream6_IRQHandler+0x10>)
 8001b16:	f000 fc3d 	bl	8002394 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000348 	.word	0x20000348

08001b24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
	return 1;
 8001b28:	2301      	movs	r3, #1
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <_kill>:

int _kill(int pid, int sig)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b3e:	f008 fb7d 	bl	800a23c <__errno>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2216      	movs	r2, #22
 8001b46:	601a      	str	r2, [r3, #0]
	return -1;
 8001b48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <_exit>:

void _exit (int status)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f7ff ffe7 	bl	8001b34 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b66:	e7fe      	b.n	8001b66 <_exit+0x12>

08001b68 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]
 8001b78:	e00a      	b.n	8001b90 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b7a:	f3af 8000 	nop.w
 8001b7e:	4601      	mov	r1, r0
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	1c5a      	adds	r2, r3, #1
 8001b84:	60ba      	str	r2, [r7, #8]
 8001b86:	b2ca      	uxtb	r2, r1
 8001b88:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	697a      	ldr	r2, [r7, #20]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	dbf0      	blt.n	8001b7a <_read+0x12>
	}

return len;
 8001b98:	687b      	ldr	r3, [r7, #4]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b086      	sub	sp, #24
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	60f8      	str	r0, [r7, #12]
 8001baa:	60b9      	str	r1, [r7, #8]
 8001bac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bae:	2300      	movs	r3, #0
 8001bb0:	617b      	str	r3, [r7, #20]
 8001bb2:	e009      	b.n	8001bc8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	1c5a      	adds	r2, r3, #1
 8001bb8:	60ba      	str	r2, [r7, #8]
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff fa79 	bl	80010b4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	617b      	str	r3, [r7, #20]
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	dbf1      	blt.n	8001bb4 <_write+0x12>
	}
	return len;
 8001bd0:	687b      	ldr	r3, [r7, #4]
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3718      	adds	r7, #24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <_close>:

int _close(int file)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
	return -1;
 8001be2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c02:	605a      	str	r2, [r3, #4]
	return 0;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <_isatty>:

int _isatty(int file)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
	return 1;
 8001c1a:	2301      	movs	r3, #1
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
	return 0;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
	...

08001c44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c4c:	4a14      	ldr	r2, [pc, #80]	; (8001ca0 <_sbrk+0x5c>)
 8001c4e:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <_sbrk+0x60>)
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c58:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <_sbrk+0x64>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d102      	bne.n	8001c66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c60:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <_sbrk+0x64>)
 8001c62:	4a12      	ldr	r2, [pc, #72]	; (8001cac <_sbrk+0x68>)
 8001c64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c66:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <_sbrk+0x64>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d207      	bcs.n	8001c84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c74:	f008 fae2 	bl	800a23c <__errno>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	220c      	movs	r2, #12
 8001c7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c82:	e009      	b.n	8001c98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c84:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <_sbrk+0x64>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c8a:	4b07      	ldr	r3, [pc, #28]	; (8001ca8 <_sbrk+0x64>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4413      	add	r3, r2
 8001c92:	4a05      	ldr	r2, [pc, #20]	; (8001ca8 <_sbrk+0x64>)
 8001c94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c96:	68fb      	ldr	r3, [r7, #12]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	20080000 	.word	0x20080000
 8001ca4:	00000400 	.word	0x00000400
 8001ca8:	200003a8 	.word	0x200003a8
 8001cac:	20000488 	.word	0x20000488

08001cb0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cb4:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <SystemInit+0x20>)
 8001cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cba:	4a05      	ldr	r2, [pc, #20]	; (8001cd0 <SystemInit+0x20>)
 8001cbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	e000ed00 	.word	0xe000ed00

08001cd4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001cd8:	4b14      	ldr	r3, [pc, #80]	; (8001d2c <MX_USART3_UART_Init+0x58>)
 8001cda:	4a15      	ldr	r2, [pc, #84]	; (8001d30 <MX_USART3_UART_Init+0x5c>)
 8001cdc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001cde:	4b13      	ldr	r3, [pc, #76]	; (8001d2c <MX_USART3_UART_Init+0x58>)
 8001ce0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ce4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ce6:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <MX_USART3_UART_Init+0x58>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001cec:	4b0f      	ldr	r3, [pc, #60]	; (8001d2c <MX_USART3_UART_Init+0x58>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <MX_USART3_UART_Init+0x58>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <MX_USART3_UART_Init+0x58>)
 8001cfa:	220c      	movs	r2, #12
 8001cfc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cfe:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <MX_USART3_UART_Init+0x58>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d04:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <MX_USART3_UART_Init+0x58>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d0a:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <MX_USART3_UART_Init+0x58>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d10:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <MX_USART3_UART_Init+0x58>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d16:	4805      	ldr	r0, [pc, #20]	; (8001d2c <MX_USART3_UART_Init+0x58>)
 8001d18:	f004 fb3f 	bl	800639a <HAL_UART_Init>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001d22:	f7ff fd73 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	200003ac 	.word	0x200003ac
 8001d30:	40004800 	.word	0x40004800

08001d34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08a      	sub	sp, #40	; 0x28
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a17      	ldr	r2, [pc, #92]	; (8001db0 <HAL_UART_MspInit+0x7c>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d128      	bne.n	8001da8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d56:	4b17      	ldr	r3, [pc, #92]	; (8001db4 <HAL_UART_MspInit+0x80>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	4a16      	ldr	r2, [pc, #88]	; (8001db4 <HAL_UART_MspInit+0x80>)
 8001d5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d60:	6413      	str	r3, [r2, #64]	; 0x40
 8001d62:	4b14      	ldr	r3, [pc, #80]	; (8001db4 <HAL_UART_MspInit+0x80>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d6a:	613b      	str	r3, [r7, #16]
 8001d6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d6e:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <HAL_UART_MspInit+0x80>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	4a10      	ldr	r2, [pc, #64]	; (8001db4 <HAL_UART_MspInit+0x80>)
 8001d74:	f043 0308 	orr.w	r3, r3, #8
 8001d78:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7a:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <HAL_UART_MspInit+0x80>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d94:	2303      	movs	r3, #3
 8001d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d98:	2307      	movs	r3, #7
 8001d9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	4619      	mov	r1, r3
 8001da2:	4805      	ldr	r0, [pc, #20]	; (8001db8 <HAL_UART_MspInit+0x84>)
 8001da4:	f000 fd6c 	bl	8002880 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001da8:	bf00      	nop
 8001daa:	3728      	adds	r7, #40	; 0x28
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40004800 	.word	0x40004800
 8001db4:	40023800 	.word	0x40023800
 8001db8:	40020c00 	.word	0x40020c00

08001dbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001dbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001df4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dc0:	480d      	ldr	r0, [pc, #52]	; (8001df8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001dc2:	490e      	ldr	r1, [pc, #56]	; (8001dfc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001dc4:	4a0e      	ldr	r2, [pc, #56]	; (8001e00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dc8:	e002      	b.n	8001dd0 <LoopCopyDataInit>

08001dca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dce:	3304      	adds	r3, #4

08001dd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dd4:	d3f9      	bcc.n	8001dca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dd6:	4a0b      	ldr	r2, [pc, #44]	; (8001e04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001dd8:	4c0b      	ldr	r4, [pc, #44]	; (8001e08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001dda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ddc:	e001      	b.n	8001de2 <LoopFillZerobss>

08001dde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001de0:	3204      	adds	r2, #4

08001de2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001de2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001de4:	d3fb      	bcc.n	8001dde <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001de6:	f7ff ff63 	bl	8001cb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dea:	f008 fa2d 	bl	800a248 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dee:	f7ff fa01 	bl	80011f4 <main>
  bx  lr    
 8001df2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001df4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dfc:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001e00:	0800f114 	.word	0x0800f114
  ldr r2, =_sbss
 8001e04:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001e08:	20000488 	.word	0x20000488

08001e0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e0c:	e7fe      	b.n	8001e0c <ADC_IRQHandler>

08001e0e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e12:	2003      	movs	r0, #3
 8001e14:	f000 f94c 	bl	80020b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e18:	200f      	movs	r0, #15
 8001e1a:	f000 f805 	bl	8001e28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e1e:	f7ff fe15 	bl	8001a4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e30:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <HAL_InitTick+0x54>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <HAL_InitTick+0x58>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	4619      	mov	r1, r3
 8001e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e46:	4618      	mov	r0, r3
 8001e48:	f000 f967 	bl	800211a <HAL_SYSTICK_Config>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e00e      	b.n	8001e74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2b0f      	cmp	r3, #15
 8001e5a:	d80a      	bhi.n	8001e72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	f04f 30ff 	mov.w	r0, #4294967295
 8001e64:	f000 f92f 	bl	80020c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e68:	4a06      	ldr	r2, [pc, #24]	; (8001e84 <HAL_InitTick+0x5c>)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	e000      	b.n	8001e74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20000000 	.word	0x20000000
 8001e80:	20000008 	.word	0x20000008
 8001e84:	20000004 	.word	0x20000004

08001e88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e8c:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <HAL_IncTick+0x20>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	461a      	mov	r2, r3
 8001e92:	4b06      	ldr	r3, [pc, #24]	; (8001eac <HAL_IncTick+0x24>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4413      	add	r3, r2
 8001e98:	4a04      	ldr	r2, [pc, #16]	; (8001eac <HAL_IncTick+0x24>)
 8001e9a:	6013      	str	r3, [r2, #0]
}
 8001e9c:	bf00      	nop
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	20000008 	.word	0x20000008
 8001eac:	20000430 	.word	0x20000430

08001eb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001eb4:	4b03      	ldr	r3, [pc, #12]	; (8001ec4 <HAL_GetTick+0x14>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	20000430 	.word	0x20000430

08001ec8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ed0:	f7ff ffee 	bl	8001eb0 <HAL_GetTick>
 8001ed4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee0:	d005      	beq.n	8001eee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ee2:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <HAL_Delay+0x44>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	4413      	add	r3, r2
 8001eec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eee:	bf00      	nop
 8001ef0:	f7ff ffde 	bl	8001eb0 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d8f7      	bhi.n	8001ef0 <HAL_Delay+0x28>
  {
  }
}
 8001f00:	bf00      	nop
 8001f02:	bf00      	nop
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20000008 	.word	0x20000008

08001f10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f20:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <__NVIC_SetPriorityGrouping+0x40>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f26:	68ba      	ldr	r2, [r7, #8]
 8001f28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f38:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <__NVIC_SetPriorityGrouping+0x44>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f3e:	4a04      	ldr	r2, [pc, #16]	; (8001f50 <__NVIC_SetPriorityGrouping+0x40>)
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	60d3      	str	r3, [r2, #12]
}
 8001f44:	bf00      	nop
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	e000ed00 	.word	0xe000ed00
 8001f54:	05fa0000 	.word	0x05fa0000

08001f58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f5c:	4b04      	ldr	r3, [pc, #16]	; (8001f70 <__NVIC_GetPriorityGrouping+0x18>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	0a1b      	lsrs	r3, r3, #8
 8001f62:	f003 0307 	and.w	r3, r3, #7
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	db0b      	blt.n	8001f9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	f003 021f 	and.w	r2, r3, #31
 8001f8c:	4907      	ldr	r1, [pc, #28]	; (8001fac <__NVIC_EnableIRQ+0x38>)
 8001f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f92:	095b      	lsrs	r3, r3, #5
 8001f94:	2001      	movs	r0, #1
 8001f96:	fa00 f202 	lsl.w	r2, r0, r2
 8001f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	e000e100 	.word	0xe000e100

08001fb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	6039      	str	r1, [r7, #0]
 8001fba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	db0a      	blt.n	8001fda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	490c      	ldr	r1, [pc, #48]	; (8001ffc <__NVIC_SetPriority+0x4c>)
 8001fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fce:	0112      	lsls	r2, r2, #4
 8001fd0:	b2d2      	uxtb	r2, r2
 8001fd2:	440b      	add	r3, r1
 8001fd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fd8:	e00a      	b.n	8001ff0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	4908      	ldr	r1, [pc, #32]	; (8002000 <__NVIC_SetPriority+0x50>)
 8001fe0:	79fb      	ldrb	r3, [r7, #7]
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	3b04      	subs	r3, #4
 8001fe8:	0112      	lsls	r2, r2, #4
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	440b      	add	r3, r1
 8001fee:	761a      	strb	r2, [r3, #24]
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	e000e100 	.word	0xe000e100
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002004:	b480      	push	{r7}
 8002006:	b089      	sub	sp, #36	; 0x24
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	f1c3 0307 	rsb	r3, r3, #7
 800201e:	2b04      	cmp	r3, #4
 8002020:	bf28      	it	cs
 8002022:	2304      	movcs	r3, #4
 8002024:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	3304      	adds	r3, #4
 800202a:	2b06      	cmp	r3, #6
 800202c:	d902      	bls.n	8002034 <NVIC_EncodePriority+0x30>
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	3b03      	subs	r3, #3
 8002032:	e000      	b.n	8002036 <NVIC_EncodePriority+0x32>
 8002034:	2300      	movs	r3, #0
 8002036:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002038:	f04f 32ff 	mov.w	r2, #4294967295
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43da      	mvns	r2, r3
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	401a      	ands	r2, r3
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800204c:	f04f 31ff 	mov.w	r1, #4294967295
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	fa01 f303 	lsl.w	r3, r1, r3
 8002056:	43d9      	mvns	r1, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800205c:	4313      	orrs	r3, r2
         );
}
 800205e:	4618      	mov	r0, r3
 8002060:	3724      	adds	r7, #36	; 0x24
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
	...

0800206c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3b01      	subs	r3, #1
 8002078:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800207c:	d301      	bcc.n	8002082 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800207e:	2301      	movs	r3, #1
 8002080:	e00f      	b.n	80020a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002082:	4a0a      	ldr	r2, [pc, #40]	; (80020ac <SysTick_Config+0x40>)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3b01      	subs	r3, #1
 8002088:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800208a:	210f      	movs	r1, #15
 800208c:	f04f 30ff 	mov.w	r0, #4294967295
 8002090:	f7ff ff8e 	bl	8001fb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002094:	4b05      	ldr	r3, [pc, #20]	; (80020ac <SysTick_Config+0x40>)
 8002096:	2200      	movs	r2, #0
 8002098:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800209a:	4b04      	ldr	r3, [pc, #16]	; (80020ac <SysTick_Config+0x40>)
 800209c:	2207      	movs	r2, #7
 800209e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	e000e010 	.word	0xe000e010

080020b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f7ff ff29 	bl	8001f10 <__NVIC_SetPriorityGrouping>
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b086      	sub	sp, #24
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	4603      	mov	r3, r0
 80020ce:	60b9      	str	r1, [r7, #8]
 80020d0:	607a      	str	r2, [r7, #4]
 80020d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020d4:	2300      	movs	r3, #0
 80020d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020d8:	f7ff ff3e 	bl	8001f58 <__NVIC_GetPriorityGrouping>
 80020dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	68b9      	ldr	r1, [r7, #8]
 80020e2:	6978      	ldr	r0, [r7, #20]
 80020e4:	f7ff ff8e 	bl	8002004 <NVIC_EncodePriority>
 80020e8:	4602      	mov	r2, r0
 80020ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ee:	4611      	mov	r1, r2
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff ff5d 	bl	8001fb0 <__NVIC_SetPriority>
}
 80020f6:	bf00      	nop
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b082      	sub	sp, #8
 8002102:	af00      	add	r7, sp, #0
 8002104:	4603      	mov	r3, r0
 8002106:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff ff31 	bl	8001f74 <__NVIC_EnableIRQ>
}
 8002112:	bf00      	nop
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7ff ffa2 	bl	800206c <SysTick_Config>
 8002128:	4603      	mov	r3, r0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
	...

08002134 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002140:	f7ff feb6 	bl	8001eb0 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e099      	b.n	8002284 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2202      	movs	r2, #2
 8002154:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 0201 	bic.w	r2, r2, #1
 800216e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002170:	e00f      	b.n	8002192 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002172:	f7ff fe9d 	bl	8001eb0 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b05      	cmp	r3, #5
 800217e:	d908      	bls.n	8002192 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2220      	movs	r2, #32
 8002184:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2203      	movs	r2, #3
 800218a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e078      	b.n	8002284 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1e8      	bne.n	8002172 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	4b38      	ldr	r3, [pc, #224]	; (800228c <HAL_DMA_Init+0x158>)
 80021ac:	4013      	ands	r3, r2
 80021ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e8:	2b04      	cmp	r3, #4
 80021ea:	d107      	bne.n	80021fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f4:	4313      	orrs	r3, r2
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	697a      	ldr	r2, [r7, #20]
 8002202:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	f023 0307 	bic.w	r3, r3, #7
 8002212:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	4313      	orrs	r3, r2
 800221c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002222:	2b04      	cmp	r3, #4
 8002224:	d117      	bne.n	8002256 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	4313      	orrs	r3, r2
 800222e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00e      	beq.n	8002256 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 faa5 	bl	8002788 <DMA_CheckFifoParam>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d008      	beq.n	8002256 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2240      	movs	r2, #64	; 0x40
 8002248:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2201      	movs	r2, #1
 800224e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002252:	2301      	movs	r3, #1
 8002254:	e016      	b.n	8002284 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 fa5c 	bl	800271c <DMA_CalcBaseAndBitshift>
 8002264:	4603      	mov	r3, r0
 8002266:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800226c:	223f      	movs	r2, #63	; 0x3f
 800226e:	409a      	lsls	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	e010803f 	.word	0xe010803f

08002290 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
 800229c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800229e:	2300      	movs	r3, #0
 80022a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d101      	bne.n	80022b6 <HAL_DMA_Start_IT+0x26>
 80022b2:	2302      	movs	r3, #2
 80022b4:	e048      	b.n	8002348 <HAL_DMA_Start_IT+0xb8>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d137      	bne.n	800233a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2202      	movs	r2, #2
 80022ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	68b9      	ldr	r1, [r7, #8]
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f000 f9ee 	bl	80026c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e8:	223f      	movs	r2, #63	; 0x3f
 80022ea:	409a      	lsls	r2, r3
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0216 	orr.w	r2, r2, #22
 80022fe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	695a      	ldr	r2, [r3, #20]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800230e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002314:	2b00      	cmp	r3, #0
 8002316:	d007      	beq.n	8002328 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f042 0208 	orr.w	r2, r2, #8
 8002326:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f042 0201 	orr.w	r2, r2, #1
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	e005      	b.n	8002346 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002342:	2302      	movs	r3, #2
 8002344:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002346:	7dfb      	ldrb	r3, [r7, #23]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3718      	adds	r7, #24
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d004      	beq.n	800236e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2280      	movs	r2, #128	; 0x80
 8002368:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e00c      	b.n	8002388 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2205      	movs	r2, #5
 8002372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 0201 	bic.w	r2, r2, #1
 8002384:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800239c:	2300      	movs	r3, #0
 800239e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80023a0:	4b8e      	ldr	r3, [pc, #568]	; (80025dc <HAL_DMA_IRQHandler+0x248>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a8e      	ldr	r2, [pc, #568]	; (80025e0 <HAL_DMA_IRQHandler+0x24c>)
 80023a6:	fba2 2303 	umull	r2, r3, r2, r3
 80023aa:	0a9b      	lsrs	r3, r3, #10
 80023ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023be:	2208      	movs	r2, #8
 80023c0:	409a      	lsls	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	4013      	ands	r3, r2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d01a      	beq.n	8002400 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d013      	beq.n	8002400 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 0204 	bic.w	r2, r2, #4
 80023e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ec:	2208      	movs	r2, #8
 80023ee:	409a      	lsls	r2, r3
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f8:	f043 0201 	orr.w	r2, r3, #1
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002404:	2201      	movs	r2, #1
 8002406:	409a      	lsls	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4013      	ands	r3, r2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d012      	beq.n	8002436 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00b      	beq.n	8002436 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002422:	2201      	movs	r2, #1
 8002424:	409a      	lsls	r2, r3
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242e:	f043 0202 	orr.w	r2, r3, #2
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243a:	2204      	movs	r2, #4
 800243c:	409a      	lsls	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	4013      	ands	r3, r2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d012      	beq.n	800246c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00b      	beq.n	800246c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002458:	2204      	movs	r2, #4
 800245a:	409a      	lsls	r2, r3
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002464:	f043 0204 	orr.w	r2, r3, #4
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002470:	2210      	movs	r2, #16
 8002472:	409a      	lsls	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4013      	ands	r3, r2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d043      	beq.n	8002504 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0308 	and.w	r3, r3, #8
 8002486:	2b00      	cmp	r3, #0
 8002488:	d03c      	beq.n	8002504 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248e:	2210      	movs	r2, #16
 8002490:	409a      	lsls	r2, r3
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d018      	beq.n	80024d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d108      	bne.n	80024c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d024      	beq.n	8002504 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	4798      	blx	r3
 80024c2:	e01f      	b.n	8002504 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d01b      	beq.n	8002504 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	4798      	blx	r3
 80024d4:	e016      	b.n	8002504 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d107      	bne.n	80024f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f022 0208 	bic.w	r2, r2, #8
 80024f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d003      	beq.n	8002504 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002508:	2220      	movs	r2, #32
 800250a:	409a      	lsls	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4013      	ands	r3, r2
 8002510:	2b00      	cmp	r3, #0
 8002512:	f000 808f 	beq.w	8002634 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0310 	and.w	r3, r3, #16
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 8087 	beq.w	8002634 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800252a:	2220      	movs	r2, #32
 800252c:	409a      	lsls	r2, r3
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b05      	cmp	r3, #5
 800253c:	d136      	bne.n	80025ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 0216 	bic.w	r2, r2, #22
 800254c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	695a      	ldr	r2, [r3, #20]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800255c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	2b00      	cmp	r3, #0
 8002564:	d103      	bne.n	800256e <HAL_DMA_IRQHandler+0x1da>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800256a:	2b00      	cmp	r3, #0
 800256c:	d007      	beq.n	800257e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 0208 	bic.w	r2, r2, #8
 800257c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002582:	223f      	movs	r2, #63	; 0x3f
 8002584:	409a      	lsls	r2, r3
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d07e      	beq.n	80026a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	4798      	blx	r3
        }
        return;
 80025aa:	e079      	b.n	80026a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d01d      	beq.n	80025f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10d      	bne.n	80025e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d031      	beq.n	8002634 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	4798      	blx	r3
 80025d8:	e02c      	b.n	8002634 <HAL_DMA_IRQHandler+0x2a0>
 80025da:	bf00      	nop
 80025dc:	20000000 	.word	0x20000000
 80025e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d023      	beq.n	8002634 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	4798      	blx	r3
 80025f4:	e01e      	b.n	8002634 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10f      	bne.n	8002624 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f022 0210 	bic.w	r2, r2, #16
 8002612:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002628:	2b00      	cmp	r3, #0
 800262a:	d003      	beq.n	8002634 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002638:	2b00      	cmp	r3, #0
 800263a:	d032      	beq.n	80026a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	2b00      	cmp	r3, #0
 8002646:	d022      	beq.n	800268e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2205      	movs	r2, #5
 800264c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f022 0201 	bic.w	r2, r2, #1
 800265e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	3301      	adds	r3, #1
 8002664:	60bb      	str	r3, [r7, #8]
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	429a      	cmp	r2, r3
 800266a:	d307      	bcc.n	800267c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1f2      	bne.n	8002660 <HAL_DMA_IRQHandler+0x2cc>
 800267a:	e000      	b.n	800267e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800267c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002692:	2b00      	cmp	r3, #0
 8002694:	d005      	beq.n	80026a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	4798      	blx	r3
 800269e:	e000      	b.n	80026a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80026a0:	bf00      	nop
    }
  }
}
 80026a2:	3718      	adds	r7, #24
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
 80026cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	2b40      	cmp	r3, #64	; 0x40
 80026ec:	d108      	bne.n	8002700 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68ba      	ldr	r2, [r7, #8]
 80026fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80026fe:	e007      	b.n	8002710 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68ba      	ldr	r2, [r7, #8]
 8002706:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	60da      	str	r2, [r3, #12]
}
 8002710:	bf00      	nop
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	b2db      	uxtb	r3, r3
 800272a:	3b10      	subs	r3, #16
 800272c:	4a13      	ldr	r2, [pc, #76]	; (800277c <DMA_CalcBaseAndBitshift+0x60>)
 800272e:	fba2 2303 	umull	r2, r3, r2, r3
 8002732:	091b      	lsrs	r3, r3, #4
 8002734:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002736:	4a12      	ldr	r2, [pc, #72]	; (8002780 <DMA_CalcBaseAndBitshift+0x64>)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4413      	add	r3, r2
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	461a      	mov	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2b03      	cmp	r3, #3
 8002748:	d908      	bls.n	800275c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	461a      	mov	r2, r3
 8002750:	4b0c      	ldr	r3, [pc, #48]	; (8002784 <DMA_CalcBaseAndBitshift+0x68>)
 8002752:	4013      	ands	r3, r2
 8002754:	1d1a      	adds	r2, r3, #4
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	659a      	str	r2, [r3, #88]	; 0x58
 800275a:	e006      	b.n	800276a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	461a      	mov	r2, r3
 8002762:	4b08      	ldr	r3, [pc, #32]	; (8002784 <DMA_CalcBaseAndBitshift+0x68>)
 8002764:	4013      	ands	r3, r2
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800276e:	4618      	mov	r0, r3
 8002770:	3714      	adds	r7, #20
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	aaaaaaab 	.word	0xaaaaaaab
 8002780:	0800ebb8 	.word	0x0800ebb8
 8002784:	fffffc00 	.word	0xfffffc00

08002788 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002790:	2300      	movs	r3, #0
 8002792:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002798:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d11f      	bne.n	80027e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	2b03      	cmp	r3, #3
 80027a6:	d856      	bhi.n	8002856 <DMA_CheckFifoParam+0xce>
 80027a8:	a201      	add	r2, pc, #4	; (adr r2, 80027b0 <DMA_CheckFifoParam+0x28>)
 80027aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ae:	bf00      	nop
 80027b0:	080027c1 	.word	0x080027c1
 80027b4:	080027d3 	.word	0x080027d3
 80027b8:	080027c1 	.word	0x080027c1
 80027bc:	08002857 	.word	0x08002857
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d046      	beq.n	800285a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027d0:	e043      	b.n	800285a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027da:	d140      	bne.n	800285e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027e0:	e03d      	b.n	800285e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027ea:	d121      	bne.n	8002830 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	2b03      	cmp	r3, #3
 80027f0:	d837      	bhi.n	8002862 <DMA_CheckFifoParam+0xda>
 80027f2:	a201      	add	r2, pc, #4	; (adr r2, 80027f8 <DMA_CheckFifoParam+0x70>)
 80027f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f8:	08002809 	.word	0x08002809
 80027fc:	0800280f 	.word	0x0800280f
 8002800:	08002809 	.word	0x08002809
 8002804:	08002821 	.word	0x08002821
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	73fb      	strb	r3, [r7, #15]
      break;
 800280c:	e030      	b.n	8002870 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002812:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d025      	beq.n	8002866 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800281e:	e022      	b.n	8002866 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002824:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002828:	d11f      	bne.n	800286a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800282e:	e01c      	b.n	800286a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	2b02      	cmp	r3, #2
 8002834:	d903      	bls.n	800283e <DMA_CheckFifoParam+0xb6>
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	2b03      	cmp	r3, #3
 800283a:	d003      	beq.n	8002844 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800283c:	e018      	b.n	8002870 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	73fb      	strb	r3, [r7, #15]
      break;
 8002842:	e015      	b.n	8002870 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002848:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00e      	beq.n	800286e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	73fb      	strb	r3, [r7, #15]
      break;
 8002854:	e00b      	b.n	800286e <DMA_CheckFifoParam+0xe6>
      break;
 8002856:	bf00      	nop
 8002858:	e00a      	b.n	8002870 <DMA_CheckFifoParam+0xe8>
      break;
 800285a:	bf00      	nop
 800285c:	e008      	b.n	8002870 <DMA_CheckFifoParam+0xe8>
      break;
 800285e:	bf00      	nop
 8002860:	e006      	b.n	8002870 <DMA_CheckFifoParam+0xe8>
      break;
 8002862:	bf00      	nop
 8002864:	e004      	b.n	8002870 <DMA_CheckFifoParam+0xe8>
      break;
 8002866:	bf00      	nop
 8002868:	e002      	b.n	8002870 <DMA_CheckFifoParam+0xe8>
      break;   
 800286a:	bf00      	nop
 800286c:	e000      	b.n	8002870 <DMA_CheckFifoParam+0xe8>
      break;
 800286e:	bf00      	nop
    }
  } 
  
  return status; 
 8002870:	7bfb      	ldrb	r3, [r7, #15]
}
 8002872:	4618      	mov	r0, r3
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop

08002880 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002880:	b480      	push	{r7}
 8002882:	b089      	sub	sp, #36	; 0x24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800288a:	2300      	movs	r3, #0
 800288c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800288e:	2300      	movs	r3, #0
 8002890:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002892:	2300      	movs	r3, #0
 8002894:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002896:	2300      	movs	r3, #0
 8002898:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800289a:	2300      	movs	r3, #0
 800289c:	61fb      	str	r3, [r7, #28]
 800289e:	e175      	b.n	8002b8c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80028a0:	2201      	movs	r2, #1
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	4013      	ands	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	f040 8164 	bne.w	8002b86 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f003 0303 	and.w	r3, r3, #3
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d005      	beq.n	80028d6 <HAL_GPIO_Init+0x56>
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f003 0303 	and.w	r3, r3, #3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d130      	bne.n	8002938 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	2203      	movs	r2, #3
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	43db      	mvns	r3, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4013      	ands	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	68da      	ldr	r2, [r3, #12]
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800290c:	2201      	movs	r2, #1
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	43db      	mvns	r3, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4013      	ands	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	091b      	lsrs	r3, r3, #4
 8002922:	f003 0201 	and.w	r2, r3, #1
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4313      	orrs	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f003 0303 	and.w	r3, r3, #3
 8002940:	2b03      	cmp	r3, #3
 8002942:	d017      	beq.n	8002974 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	2203      	movs	r2, #3
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	43db      	mvns	r3, r3
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	4013      	ands	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4313      	orrs	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 0303 	and.w	r3, r3, #3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d123      	bne.n	80029c8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	08da      	lsrs	r2, r3, #3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3208      	adds	r2, #8
 8002988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800298c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	f003 0307 	and.w	r3, r3, #7
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	220f      	movs	r2, #15
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	43db      	mvns	r3, r3
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	4013      	ands	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	08da      	lsrs	r2, r3, #3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3208      	adds	r2, #8
 80029c2:	69b9      	ldr	r1, [r7, #24]
 80029c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	2203      	movs	r2, #3
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	4013      	ands	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f003 0203 	and.w	r2, r3, #3
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 80be 	beq.w	8002b86 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a0a:	4b66      	ldr	r3, [pc, #408]	; (8002ba4 <HAL_GPIO_Init+0x324>)
 8002a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0e:	4a65      	ldr	r2, [pc, #404]	; (8002ba4 <HAL_GPIO_Init+0x324>)
 8002a10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a14:	6453      	str	r3, [r2, #68]	; 0x44
 8002a16:	4b63      	ldr	r3, [pc, #396]	; (8002ba4 <HAL_GPIO_Init+0x324>)
 8002a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002a22:	4a61      	ldr	r2, [pc, #388]	; (8002ba8 <HAL_GPIO_Init+0x328>)
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	089b      	lsrs	r3, r3, #2
 8002a28:	3302      	adds	r3, #2
 8002a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	220f      	movs	r2, #15
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	4013      	ands	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a58      	ldr	r2, [pc, #352]	; (8002bac <HAL_GPIO_Init+0x32c>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d037      	beq.n	8002abe <HAL_GPIO_Init+0x23e>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a57      	ldr	r2, [pc, #348]	; (8002bb0 <HAL_GPIO_Init+0x330>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d031      	beq.n	8002aba <HAL_GPIO_Init+0x23a>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a56      	ldr	r2, [pc, #344]	; (8002bb4 <HAL_GPIO_Init+0x334>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d02b      	beq.n	8002ab6 <HAL_GPIO_Init+0x236>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a55      	ldr	r2, [pc, #340]	; (8002bb8 <HAL_GPIO_Init+0x338>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d025      	beq.n	8002ab2 <HAL_GPIO_Init+0x232>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a54      	ldr	r2, [pc, #336]	; (8002bbc <HAL_GPIO_Init+0x33c>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d01f      	beq.n	8002aae <HAL_GPIO_Init+0x22e>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a53      	ldr	r2, [pc, #332]	; (8002bc0 <HAL_GPIO_Init+0x340>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d019      	beq.n	8002aaa <HAL_GPIO_Init+0x22a>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a52      	ldr	r2, [pc, #328]	; (8002bc4 <HAL_GPIO_Init+0x344>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d013      	beq.n	8002aa6 <HAL_GPIO_Init+0x226>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a51      	ldr	r2, [pc, #324]	; (8002bc8 <HAL_GPIO_Init+0x348>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d00d      	beq.n	8002aa2 <HAL_GPIO_Init+0x222>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a50      	ldr	r2, [pc, #320]	; (8002bcc <HAL_GPIO_Init+0x34c>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d007      	beq.n	8002a9e <HAL_GPIO_Init+0x21e>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a4f      	ldr	r2, [pc, #316]	; (8002bd0 <HAL_GPIO_Init+0x350>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d101      	bne.n	8002a9a <HAL_GPIO_Init+0x21a>
 8002a96:	2309      	movs	r3, #9
 8002a98:	e012      	b.n	8002ac0 <HAL_GPIO_Init+0x240>
 8002a9a:	230a      	movs	r3, #10
 8002a9c:	e010      	b.n	8002ac0 <HAL_GPIO_Init+0x240>
 8002a9e:	2308      	movs	r3, #8
 8002aa0:	e00e      	b.n	8002ac0 <HAL_GPIO_Init+0x240>
 8002aa2:	2307      	movs	r3, #7
 8002aa4:	e00c      	b.n	8002ac0 <HAL_GPIO_Init+0x240>
 8002aa6:	2306      	movs	r3, #6
 8002aa8:	e00a      	b.n	8002ac0 <HAL_GPIO_Init+0x240>
 8002aaa:	2305      	movs	r3, #5
 8002aac:	e008      	b.n	8002ac0 <HAL_GPIO_Init+0x240>
 8002aae:	2304      	movs	r3, #4
 8002ab0:	e006      	b.n	8002ac0 <HAL_GPIO_Init+0x240>
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e004      	b.n	8002ac0 <HAL_GPIO_Init+0x240>
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	e002      	b.n	8002ac0 <HAL_GPIO_Init+0x240>
 8002aba:	2301      	movs	r3, #1
 8002abc:	e000      	b.n	8002ac0 <HAL_GPIO_Init+0x240>
 8002abe:	2300      	movs	r3, #0
 8002ac0:	69fa      	ldr	r2, [r7, #28]
 8002ac2:	f002 0203 	and.w	r2, r2, #3
 8002ac6:	0092      	lsls	r2, r2, #2
 8002ac8:	4093      	lsls	r3, r2
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002ad0:	4935      	ldr	r1, [pc, #212]	; (8002ba8 <HAL_GPIO_Init+0x328>)
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	089b      	lsrs	r3, r3, #2
 8002ad6:	3302      	adds	r3, #2
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ade:	4b3d      	ldr	r3, [pc, #244]	; (8002bd4 <HAL_GPIO_Init+0x354>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4013      	ands	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b02:	4a34      	ldr	r2, [pc, #208]	; (8002bd4 <HAL_GPIO_Init+0x354>)
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b08:	4b32      	ldr	r3, [pc, #200]	; (8002bd4 <HAL_GPIO_Init+0x354>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	43db      	mvns	r3, r3
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4013      	ands	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b2c:	4a29      	ldr	r2, [pc, #164]	; (8002bd4 <HAL_GPIO_Init+0x354>)
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b32:	4b28      	ldr	r3, [pc, #160]	; (8002bd4 <HAL_GPIO_Init+0x354>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b56:	4a1f      	ldr	r2, [pc, #124]	; (8002bd4 <HAL_GPIO_Init+0x354>)
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b5c:	4b1d      	ldr	r3, [pc, #116]	; (8002bd4 <HAL_GPIO_Init+0x354>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	43db      	mvns	r3, r3
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d003      	beq.n	8002b80 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b80:	4a14      	ldr	r2, [pc, #80]	; (8002bd4 <HAL_GPIO_Init+0x354>)
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	61fb      	str	r3, [r7, #28]
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	2b0f      	cmp	r3, #15
 8002b90:	f67f ae86 	bls.w	80028a0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002b94:	bf00      	nop
 8002b96:	bf00      	nop
 8002b98:	3724      	adds	r7, #36	; 0x24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	40013800 	.word	0x40013800
 8002bac:	40020000 	.word	0x40020000
 8002bb0:	40020400 	.word	0x40020400
 8002bb4:	40020800 	.word	0x40020800
 8002bb8:	40020c00 	.word	0x40020c00
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	40021400 	.word	0x40021400
 8002bc4:	40021800 	.word	0x40021800
 8002bc8:	40021c00 	.word	0x40021c00
 8002bcc:	40022000 	.word	0x40022000
 8002bd0:	40022400 	.word	0x40022400
 8002bd4:	40013c00 	.word	0x40013c00

08002bd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e07f      	b.n	8002cea <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d106      	bne.n	8002c04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7fe fa14 	bl	800102c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2224      	movs	r2, #36	; 0x24
 8002c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 0201 	bic.w	r2, r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c28:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c38:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d107      	bne.n	8002c52 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689a      	ldr	r2, [r3, #8]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c4e:	609a      	str	r2, [r3, #8]
 8002c50:	e006      	b.n	8002c60 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689a      	ldr	r2, [r3, #8]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002c5e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d104      	bne.n	8002c72 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c70:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6859      	ldr	r1, [r3, #4]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	4b1d      	ldr	r3, [pc, #116]	; (8002cf4 <HAL_I2C_Init+0x11c>)
 8002c7e:	430b      	orrs	r3, r1
 8002c80:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68da      	ldr	r2, [r3, #12]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c90:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691a      	ldr	r2, [r3, #16]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	69d9      	ldr	r1, [r3, #28]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a1a      	ldr	r2, [r3, #32]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f042 0201 	orr.w	r2, r2, #1
 8002cca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	02008000 	.word	0x02008000

08002cf8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b088      	sub	sp, #32
 8002cfc:	af02      	add	r7, sp, #8
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	607a      	str	r2, [r7, #4]
 8002d02:	461a      	mov	r2, r3
 8002d04:	460b      	mov	r3, r1
 8002d06:	817b      	strh	r3, [r7, #10]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	2b20      	cmp	r3, #32
 8002d16:	f040 80da 	bne.w	8002ece <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d101      	bne.n	8002d28 <HAL_I2C_Master_Transmit+0x30>
 8002d24:	2302      	movs	r3, #2
 8002d26:	e0d3      	b.n	8002ed0 <HAL_I2C_Master_Transmit+0x1d8>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d30:	f7ff f8be 	bl	8001eb0 <HAL_GetTick>
 8002d34:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	2319      	movs	r3, #25
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 fc56 	bl	80035f4 <I2C_WaitOnFlagUntilTimeout>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e0be      	b.n	8002ed0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2221      	movs	r2, #33	; 0x21
 8002d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2210      	movs	r2, #16
 8002d5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	893a      	ldrh	r2, [r7, #8]
 8002d72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	2bff      	cmp	r3, #255	; 0xff
 8002d82:	d90e      	bls.n	8002da2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	22ff      	movs	r2, #255	; 0xff
 8002d88:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d8e:	b2da      	uxtb	r2, r3
 8002d90:	8979      	ldrh	r1, [r7, #10]
 8002d92:	4b51      	ldr	r3, [pc, #324]	; (8002ed8 <HAL_I2C_Master_Transmit+0x1e0>)
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f000 fe4c 	bl	8003a38 <I2C_TransferConfig>
 8002da0:	e06c      	b.n	8002e7c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db0:	b2da      	uxtb	r2, r3
 8002db2:	8979      	ldrh	r1, [r7, #10]
 8002db4:	4b48      	ldr	r3, [pc, #288]	; (8002ed8 <HAL_I2C_Master_Transmit+0x1e0>)
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f000 fe3b 	bl	8003a38 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002dc2:	e05b      	b.n	8002e7c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	6a39      	ldr	r1, [r7, #32]
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f000 fc53 	bl	8003674 <I2C_WaitOnTXISFlagUntilTimeout>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e07b      	b.n	8002ed0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	781a      	ldrb	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	1c5a      	adds	r2, r3, #1
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	3b01      	subs	r3, #1
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e00:	3b01      	subs	r3, #1
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d034      	beq.n	8002e7c <HAL_I2C_Master_Transmit+0x184>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d130      	bne.n	8002e7c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	2200      	movs	r2, #0
 8002e22:	2180      	movs	r1, #128	; 0x80
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f000 fbe5 	bl	80035f4 <I2C_WaitOnFlagUntilTimeout>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e04d      	b.n	8002ed0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	2bff      	cmp	r3, #255	; 0xff
 8002e3c:	d90e      	bls.n	8002e5c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	22ff      	movs	r2, #255	; 0xff
 8002e42:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	8979      	ldrh	r1, [r7, #10]
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	9300      	str	r3, [sp, #0]
 8002e50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f000 fdef 	bl	8003a38 <I2C_TransferConfig>
 8002e5a:	e00f      	b.n	8002e7c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e6a:	b2da      	uxtb	r2, r3
 8002e6c:	8979      	ldrh	r1, [r7, #10]
 8002e6e:	2300      	movs	r3, #0
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f000 fdde 	bl	8003a38 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d19e      	bne.n	8002dc4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	6a39      	ldr	r1, [r7, #32]
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f000 fc32 	bl	80036f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e01a      	b.n	8002ed0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6859      	ldr	r1, [r3, #4]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	4b0b      	ldr	r3, [pc, #44]	; (8002edc <HAL_I2C_Master_Transmit+0x1e4>)
 8002eae:	400b      	ands	r3, r1
 8002eb0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	e000      	b.n	8002ed0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002ece:	2302      	movs	r3, #2
  }
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3718      	adds	r7, #24
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	80002000 	.word	0x80002000
 8002edc:	fe00e800 	.word	0xfe00e800

08002ee0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b088      	sub	sp, #32
 8002ee4:	af02      	add	r7, sp, #8
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	607a      	str	r2, [r7, #4]
 8002eea:	461a      	mov	r2, r3
 8002eec:	460b      	mov	r3, r1
 8002eee:	817b      	strh	r3, [r7, #10]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b20      	cmp	r3, #32
 8002efe:	f040 80db 	bne.w	80030b8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d101      	bne.n	8002f10 <HAL_I2C_Master_Receive+0x30>
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	e0d4      	b.n	80030ba <HAL_I2C_Master_Receive+0x1da>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f18:	f7fe ffca 	bl	8001eb0 <HAL_GetTick>
 8002f1c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	2319      	movs	r3, #25
 8002f24:	2201      	movs	r2, #1
 8002f26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 fb62 	bl	80035f4 <I2C_WaitOnFlagUntilTimeout>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e0bf      	b.n	80030ba <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2222      	movs	r2, #34	; 0x22
 8002f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2210      	movs	r2, #16
 8002f46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	893a      	ldrh	r2, [r7, #8]
 8002f5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	2bff      	cmp	r3, #255	; 0xff
 8002f6a:	d90e      	bls.n	8002f8a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	22ff      	movs	r2, #255	; 0xff
 8002f70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	8979      	ldrh	r1, [r7, #10]
 8002f7a:	4b52      	ldr	r3, [pc, #328]	; (80030c4 <HAL_I2C_Master_Receive+0x1e4>)
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 fd58 	bl	8003a38 <I2C_TransferConfig>
 8002f88:	e06d      	b.n	8003066 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	8979      	ldrh	r1, [r7, #10]
 8002f9c:	4b49      	ldr	r3, [pc, #292]	; (80030c4 <HAL_I2C_Master_Receive+0x1e4>)
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f000 fd47 	bl	8003a38 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002faa:	e05c      	b.n	8003066 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	6a39      	ldr	r1, [r7, #32]
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f000 fbdb 	bl	800376c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e07c      	b.n	80030ba <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd2:	1c5a      	adds	r2, r3, #1
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	3b01      	subs	r3, #1
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d034      	beq.n	8003066 <HAL_I2C_Master_Receive+0x186>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003000:	2b00      	cmp	r3, #0
 8003002:	d130      	bne.n	8003066 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	6a3b      	ldr	r3, [r7, #32]
 800300a:	2200      	movs	r2, #0
 800300c:	2180      	movs	r1, #128	; 0x80
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 faf0 	bl	80035f4 <I2C_WaitOnFlagUntilTimeout>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e04d      	b.n	80030ba <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003022:	b29b      	uxth	r3, r3
 8003024:	2bff      	cmp	r3, #255	; 0xff
 8003026:	d90e      	bls.n	8003046 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	22ff      	movs	r2, #255	; 0xff
 800302c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003032:	b2da      	uxtb	r2, r3
 8003034:	8979      	ldrh	r1, [r7, #10]
 8003036:	2300      	movs	r3, #0
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f000 fcfa 	bl	8003a38 <I2C_TransferConfig>
 8003044:	e00f      	b.n	8003066 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800304a:	b29a      	uxth	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003054:	b2da      	uxtb	r2, r3
 8003056:	8979      	ldrh	r1, [r7, #10]
 8003058:	2300      	movs	r3, #0
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f000 fce9 	bl	8003a38 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800306a:	b29b      	uxth	r3, r3
 800306c:	2b00      	cmp	r3, #0
 800306e:	d19d      	bne.n	8002fac <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003070:	697a      	ldr	r2, [r7, #20]
 8003072:	6a39      	ldr	r1, [r7, #32]
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f000 fb3d 	bl	80036f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e01a      	b.n	80030ba <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2220      	movs	r2, #32
 800308a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6859      	ldr	r1, [r3, #4]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	4b0c      	ldr	r3, [pc, #48]	; (80030c8 <HAL_I2C_Master_Receive+0x1e8>)
 8003098:	400b      	ands	r3, r1
 800309a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2220      	movs	r2, #32
 80030a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030b4:	2300      	movs	r3, #0
 80030b6:	e000      	b.n	80030ba <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80030b8:	2302      	movs	r3, #2
  }
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3718      	adds	r7, #24
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	80002400 	.word	0x80002400
 80030c8:	fe00e800 	.word	0xfe00e800

080030cc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b088      	sub	sp, #32
 80030d0:	af02      	add	r7, sp, #8
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	4608      	mov	r0, r1
 80030d6:	4611      	mov	r1, r2
 80030d8:	461a      	mov	r2, r3
 80030da:	4603      	mov	r3, r0
 80030dc:	817b      	strh	r3, [r7, #10]
 80030de:	460b      	mov	r3, r1
 80030e0:	813b      	strh	r3, [r7, #8]
 80030e2:	4613      	mov	r3, r2
 80030e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b20      	cmp	r3, #32
 80030f0:	f040 80f9 	bne.w	80032e6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80030f4:	6a3b      	ldr	r3, [r7, #32]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d002      	beq.n	8003100 <HAL_I2C_Mem_Write+0x34>
 80030fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d105      	bne.n	800310c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003106:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e0ed      	b.n	80032e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003112:	2b01      	cmp	r3, #1
 8003114:	d101      	bne.n	800311a <HAL_I2C_Mem_Write+0x4e>
 8003116:	2302      	movs	r3, #2
 8003118:	e0e6      	b.n	80032e8 <HAL_I2C_Mem_Write+0x21c>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003122:	f7fe fec5 	bl	8001eb0 <HAL_GetTick>
 8003126:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	9300      	str	r3, [sp, #0]
 800312c:	2319      	movs	r3, #25
 800312e:	2201      	movs	r2, #1
 8003130:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f000 fa5d 	bl	80035f4 <I2C_WaitOnFlagUntilTimeout>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e0d1      	b.n	80032e8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2221      	movs	r2, #33	; 0x21
 8003148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2240      	movs	r2, #64	; 0x40
 8003150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6a3a      	ldr	r2, [r7, #32]
 800315e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003164:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800316c:	88f8      	ldrh	r0, [r7, #6]
 800316e:	893a      	ldrh	r2, [r7, #8]
 8003170:	8979      	ldrh	r1, [r7, #10]
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	9301      	str	r3, [sp, #4]
 8003176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	4603      	mov	r3, r0
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f000 f9c1 	bl	8003504 <I2C_RequestMemoryWrite>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d005      	beq.n	8003194 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e0a9      	b.n	80032e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003198:	b29b      	uxth	r3, r3
 800319a:	2bff      	cmp	r3, #255	; 0xff
 800319c:	d90e      	bls.n	80031bc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	22ff      	movs	r2, #255	; 0xff
 80031a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a8:	b2da      	uxtb	r2, r3
 80031aa:	8979      	ldrh	r1, [r7, #10]
 80031ac:	2300      	movs	r3, #0
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f000 fc3f 	bl	8003a38 <I2C_TransferConfig>
 80031ba:	e00f      	b.n	80031dc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	8979      	ldrh	r1, [r7, #10]
 80031ce:	2300      	movs	r3, #0
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f000 fc2e 	bl	8003a38 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f000 fa47 	bl	8003674 <I2C_WaitOnTXISFlagUntilTimeout>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e07b      	b.n	80032e8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	781a      	ldrb	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	1c5a      	adds	r2, r3, #1
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800320a:	b29b      	uxth	r3, r3
 800320c:	3b01      	subs	r3, #1
 800320e:	b29a      	uxth	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003218:	3b01      	subs	r3, #1
 800321a:	b29a      	uxth	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003224:	b29b      	uxth	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d034      	beq.n	8003294 <HAL_I2C_Mem_Write+0x1c8>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800322e:	2b00      	cmp	r3, #0
 8003230:	d130      	bne.n	8003294 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003238:	2200      	movs	r2, #0
 800323a:	2180      	movs	r1, #128	; 0x80
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f000 f9d9 	bl	80035f4 <I2C_WaitOnFlagUntilTimeout>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e04d      	b.n	80032e8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003250:	b29b      	uxth	r3, r3
 8003252:	2bff      	cmp	r3, #255	; 0xff
 8003254:	d90e      	bls.n	8003274 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	22ff      	movs	r2, #255	; 0xff
 800325a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003260:	b2da      	uxtb	r2, r3
 8003262:	8979      	ldrh	r1, [r7, #10]
 8003264:	2300      	movs	r3, #0
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f000 fbe3 	bl	8003a38 <I2C_TransferConfig>
 8003272:	e00f      	b.n	8003294 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003278:	b29a      	uxth	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003282:	b2da      	uxtb	r2, r3
 8003284:	8979      	ldrh	r1, [r7, #10]
 8003286:	2300      	movs	r3, #0
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 fbd2 	bl	8003a38 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003298:	b29b      	uxth	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d19e      	bne.n	80031dc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f000 fa26 	bl	80036f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e01a      	b.n	80032e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2220      	movs	r2, #32
 80032b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	6859      	ldr	r1, [r3, #4]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	4b0a      	ldr	r3, [pc, #40]	; (80032f0 <HAL_I2C_Mem_Write+0x224>)
 80032c6:	400b      	ands	r3, r1
 80032c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2220      	movs	r2, #32
 80032ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032e2:	2300      	movs	r3, #0
 80032e4:	e000      	b.n	80032e8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80032e6:	2302      	movs	r3, #2
  }
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3718      	adds	r7, #24
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	fe00e800 	.word	0xfe00e800

080032f4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b08a      	sub	sp, #40	; 0x28
 80032f8:	af02      	add	r7, sp, #8
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	607a      	str	r2, [r7, #4]
 80032fe:	603b      	str	r3, [r7, #0]
 8003300:	460b      	mov	r3, r1
 8003302:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003304:	2300      	movs	r3, #0
 8003306:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b20      	cmp	r3, #32
 8003312:	f040 80ef 	bne.w	80034f4 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003320:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003324:	d101      	bne.n	800332a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003326:	2302      	movs	r3, #2
 8003328:	e0e5      	b.n	80034f6 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003330:	2b01      	cmp	r3, #1
 8003332:	d101      	bne.n	8003338 <HAL_I2C_IsDeviceReady+0x44>
 8003334:	2302      	movs	r3, #2
 8003336:	e0de      	b.n	80034f6 <HAL_I2C_IsDeviceReady+0x202>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2224      	movs	r2, #36	; 0x24
 8003344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d105      	bne.n	8003362 <HAL_I2C_IsDeviceReady+0x6e>
 8003356:	897b      	ldrh	r3, [r7, #10]
 8003358:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800335c:	4b68      	ldr	r3, [pc, #416]	; (8003500 <HAL_I2C_IsDeviceReady+0x20c>)
 800335e:	4313      	orrs	r3, r2
 8003360:	e004      	b.n	800336c <HAL_I2C_IsDeviceReady+0x78>
 8003362:	897b      	ldrh	r3, [r7, #10]
 8003364:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003368:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	6812      	ldr	r2, [r2, #0]
 8003370:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003372:	f7fe fd9d 	bl	8001eb0 <HAL_GetTick>
 8003376:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	f003 0320 	and.w	r3, r3, #32
 8003382:	2b20      	cmp	r3, #32
 8003384:	bf0c      	ite	eq
 8003386:	2301      	moveq	r3, #1
 8003388:	2300      	movne	r3, #0
 800338a:	b2db      	uxtb	r3, r3
 800338c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	f003 0310 	and.w	r3, r3, #16
 8003398:	2b10      	cmp	r3, #16
 800339a:	bf0c      	ite	eq
 800339c:	2301      	moveq	r3, #1
 800339e:	2300      	movne	r3, #0
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80033a4:	e034      	b.n	8003410 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ac:	d01a      	beq.n	80033e4 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80033ae:	f7fe fd7f 	bl	8001eb0 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d302      	bcc.n	80033c4 <HAL_I2C_IsDeviceReady+0xd0>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d10f      	bne.n	80033e4 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2220      	movs	r2, #32
 80033c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d0:	f043 0220 	orr.w	r2, r3, #32
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e088      	b.n	80034f6 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	f003 0320 	and.w	r3, r3, #32
 80033ee:	2b20      	cmp	r3, #32
 80033f0:	bf0c      	ite	eq
 80033f2:	2301      	moveq	r3, #1
 80033f4:	2300      	movne	r3, #0
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	f003 0310 	and.w	r3, r3, #16
 8003404:	2b10      	cmp	r3, #16
 8003406:	bf0c      	ite	eq
 8003408:	2301      	moveq	r3, #1
 800340a:	2300      	movne	r3, #0
 800340c:	b2db      	uxtb	r3, r3
 800340e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003410:	7ffb      	ldrb	r3, [r7, #31]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d102      	bne.n	800341c <HAL_I2C_IsDeviceReady+0x128>
 8003416:	7fbb      	ldrb	r3, [r7, #30]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d0c4      	beq.n	80033a6 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	f003 0310 	and.w	r3, r3, #16
 8003426:	2b10      	cmp	r3, #16
 8003428:	d01a      	beq.n	8003460 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	2200      	movs	r2, #0
 8003432:	2120      	movs	r1, #32
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f000 f8dd 	bl	80035f4 <I2C_WaitOnFlagUntilTimeout>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e058      	b.n	80034f6 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2220      	movs	r2, #32
 800344a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2220      	movs	r2, #32
 8003450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800345c:	2300      	movs	r3, #0
 800345e:	e04a      	b.n	80034f6 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	9300      	str	r3, [sp, #0]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	2200      	movs	r2, #0
 8003468:	2120      	movs	r1, #32
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 f8c2 	bl	80035f4 <I2C_WaitOnFlagUntilTimeout>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e03d      	b.n	80034f6 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2210      	movs	r2, #16
 8003480:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2220      	movs	r2, #32
 8003488:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	429a      	cmp	r2, r3
 8003490:	d118      	bne.n	80034c4 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034a0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	2200      	movs	r2, #0
 80034aa:	2120      	movs	r1, #32
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f000 f8a1 	bl	80035f4 <I2C_WaitOnFlagUntilTimeout>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e01c      	b.n	80034f6 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2220      	movs	r2, #32
 80034c2:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	3301      	adds	r3, #1
 80034c8:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	f63f af3d 	bhi.w	800334e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e0:	f043 0220 	orr.w	r2, r3, #32
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e000      	b.n	80034f6 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 80034f4:	2302      	movs	r3, #2
  }
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3720      	adds	r7, #32
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	02002000 	.word	0x02002000

08003504 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af02      	add	r7, sp, #8
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	4608      	mov	r0, r1
 800350e:	4611      	mov	r1, r2
 8003510:	461a      	mov	r2, r3
 8003512:	4603      	mov	r3, r0
 8003514:	817b      	strh	r3, [r7, #10]
 8003516:	460b      	mov	r3, r1
 8003518:	813b      	strh	r3, [r7, #8]
 800351a:	4613      	mov	r3, r2
 800351c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800351e:	88fb      	ldrh	r3, [r7, #6]
 8003520:	b2da      	uxtb	r2, r3
 8003522:	8979      	ldrh	r1, [r7, #10]
 8003524:	4b20      	ldr	r3, [pc, #128]	; (80035a8 <I2C_RequestMemoryWrite+0xa4>)
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f000 fa83 	bl	8003a38 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003532:	69fa      	ldr	r2, [r7, #28]
 8003534:	69b9      	ldr	r1, [r7, #24]
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f000 f89c 	bl	8003674 <I2C_WaitOnTXISFlagUntilTimeout>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e02c      	b.n	80035a0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003546:	88fb      	ldrh	r3, [r7, #6]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d105      	bne.n	8003558 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800354c:	893b      	ldrh	r3, [r7, #8]
 800354e:	b2da      	uxtb	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	629a      	str	r2, [r3, #40]	; 0x28
 8003556:	e015      	b.n	8003584 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003558:	893b      	ldrh	r3, [r7, #8]
 800355a:	0a1b      	lsrs	r3, r3, #8
 800355c:	b29b      	uxth	r3, r3
 800355e:	b2da      	uxtb	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003566:	69fa      	ldr	r2, [r7, #28]
 8003568:	69b9      	ldr	r1, [r7, #24]
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 f882 	bl	8003674 <I2C_WaitOnTXISFlagUntilTimeout>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e012      	b.n	80035a0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800357a:	893b      	ldrh	r3, [r7, #8]
 800357c:	b2da      	uxtb	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	2200      	movs	r2, #0
 800358c:	2180      	movs	r1, #128	; 0x80
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f000 f830 	bl	80035f4 <I2C_WaitOnFlagUntilTimeout>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e000      	b.n	80035a0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	80002000 	.word	0x80002000

080035ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d103      	bne.n	80035ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2200      	movs	r2, #0
 80035c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d007      	beq.n	80035e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	699a      	ldr	r2, [r3, #24]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f042 0201 	orr.w	r2, r2, #1
 80035e6:	619a      	str	r2, [r3, #24]
  }
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	603b      	str	r3, [r7, #0]
 8003600:	4613      	mov	r3, r2
 8003602:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003604:	e022      	b.n	800364c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360c:	d01e      	beq.n	800364c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800360e:	f7fe fc4f 	bl	8001eb0 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	429a      	cmp	r2, r3
 800361c:	d302      	bcc.n	8003624 <I2C_WaitOnFlagUntilTimeout+0x30>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d113      	bne.n	800364c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003628:	f043 0220 	orr.w	r2, r3, #32
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2220      	movs	r2, #32
 8003634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e00f      	b.n	800366c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	699a      	ldr	r2, [r3, #24]
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	4013      	ands	r3, r2
 8003656:	68ba      	ldr	r2, [r7, #8]
 8003658:	429a      	cmp	r2, r3
 800365a:	bf0c      	ite	eq
 800365c:	2301      	moveq	r3, #1
 800365e:	2300      	movne	r3, #0
 8003660:	b2db      	uxtb	r3, r3
 8003662:	461a      	mov	r2, r3
 8003664:	79fb      	ldrb	r3, [r7, #7]
 8003666:	429a      	cmp	r2, r3
 8003668:	d0cd      	beq.n	8003606 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003680:	e02c      	b.n	80036dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	68b9      	ldr	r1, [r7, #8]
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f000 f8ea 	bl	8003860 <I2C_IsErrorOccurred>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e02a      	b.n	80036ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369c:	d01e      	beq.n	80036dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800369e:	f7fe fc07 	bl	8001eb0 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	68ba      	ldr	r2, [r7, #8]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d302      	bcc.n	80036b4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d113      	bne.n	80036dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b8:	f043 0220 	orr.w	r2, r3, #32
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e007      	b.n	80036ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d1cb      	bne.n	8003682 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003700:	e028      	b.n	8003754 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	68b9      	ldr	r1, [r7, #8]
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f000 f8aa 	bl	8003860 <I2C_IsErrorOccurred>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e026      	b.n	8003764 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003716:	f7fe fbcb 	bl	8001eb0 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	429a      	cmp	r2, r3
 8003724:	d302      	bcc.n	800372c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d113      	bne.n	8003754 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003730:	f043 0220 	orr.w	r2, r3, #32
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2220      	movs	r2, #32
 800373c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e007      	b.n	8003764 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	f003 0320 	and.w	r3, r3, #32
 800375e:	2b20      	cmp	r3, #32
 8003760:	d1cf      	bne.n	8003702 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003778:	e064      	b.n	8003844 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	68b9      	ldr	r1, [r7, #8]
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 f86e 	bl	8003860 <I2C_IsErrorOccurred>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e062      	b.n	8003854 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	f003 0320 	and.w	r3, r3, #32
 8003798:	2b20      	cmp	r3, #32
 800379a:	d138      	bne.n	800380e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	f003 0304 	and.w	r3, r3, #4
 80037a6:	2b04      	cmp	r3, #4
 80037a8:	d105      	bne.n	80037b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80037b2:	2300      	movs	r3, #0
 80037b4:	e04e      	b.n	8003854 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	f003 0310 	and.w	r3, r3, #16
 80037c0:	2b10      	cmp	r3, #16
 80037c2:	d107      	bne.n	80037d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2210      	movs	r2, #16
 80037ca:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2204      	movs	r2, #4
 80037d0:	645a      	str	r2, [r3, #68]	; 0x44
 80037d2:	e002      	b.n	80037da <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2220      	movs	r2, #32
 80037e0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6859      	ldr	r1, [r3, #4]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	4b1b      	ldr	r3, [pc, #108]	; (800385c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80037ee:	400b      	ands	r3, r1
 80037f0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2220      	movs	r2, #32
 80037f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e022      	b.n	8003854 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800380e:	f7fe fb4f 	bl	8001eb0 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	429a      	cmp	r2, r3
 800381c:	d302      	bcc.n	8003824 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d10f      	bne.n	8003844 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003828:	f043 0220 	orr.w	r2, r3, #32
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2220      	movs	r2, #32
 8003834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e007      	b.n	8003854 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	f003 0304 	and.w	r3, r3, #4
 800384e:	2b04      	cmp	r3, #4
 8003850:	d193      	bne.n	800377a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	fe00e800 	.word	0xfe00e800

08003860 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b08a      	sub	sp, #40	; 0x28
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800386c:	2300      	movs	r3, #0
 800386e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800387a:	2300      	movs	r3, #0
 800387c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	f003 0310 	and.w	r3, r3, #16
 8003888:	2b00      	cmp	r3, #0
 800388a:	d075      	beq.n	8003978 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2210      	movs	r2, #16
 8003892:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003894:	e056      	b.n	8003944 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389c:	d052      	beq.n	8003944 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800389e:	f7fe fb07 	bl	8001eb0 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	68ba      	ldr	r2, [r7, #8]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d302      	bcc.n	80038b4 <I2C_IsErrorOccurred+0x54>
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d147      	bne.n	8003944 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80038c6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038d6:	d12e      	bne.n	8003936 <I2C_IsErrorOccurred+0xd6>
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038de:	d02a      	beq.n	8003936 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80038e0:	7cfb      	ldrb	r3, [r7, #19]
 80038e2:	2b20      	cmp	r3, #32
 80038e4:	d027      	beq.n	8003936 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038f4:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80038f6:	f7fe fadb 	bl	8001eb0 <HAL_GetTick>
 80038fa:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038fc:	e01b      	b.n	8003936 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80038fe:	f7fe fad7 	bl	8001eb0 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b19      	cmp	r3, #25
 800390a:	d914      	bls.n	8003936 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003910:	f043 0220 	orr.w	r2, r3, #32
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2220      	movs	r2, #32
 800391c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	f003 0320 	and.w	r3, r3, #32
 8003940:	2b20      	cmp	r3, #32
 8003942:	d1dc      	bne.n	80038fe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	f003 0320 	and.w	r3, r3, #32
 800394e:	2b20      	cmp	r3, #32
 8003950:	d003      	beq.n	800395a <I2C_IsErrorOccurred+0xfa>
 8003952:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003956:	2b00      	cmp	r3, #0
 8003958:	d09d      	beq.n	8003896 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800395a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800395e:	2b00      	cmp	r3, #0
 8003960:	d103      	bne.n	800396a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2220      	movs	r2, #32
 8003968:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800396a:	6a3b      	ldr	r3, [r7, #32]
 800396c:	f043 0304 	orr.w	r3, r3, #4
 8003970:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00b      	beq.n	80039a2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	f043 0301 	orr.w	r3, r3, #1
 8003990:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f44f 7280 	mov.w	r2, #256	; 0x100
 800399a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00b      	beq.n	80039c4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80039ac:	6a3b      	ldr	r3, [r7, #32]
 80039ae:	f043 0308 	orr.w	r3, r3, #8
 80039b2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00b      	beq.n	80039e6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80039ce:	6a3b      	ldr	r3, [r7, #32]
 80039d0:	f043 0302 	orr.w	r3, r3, #2
 80039d4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80039e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d01c      	beq.n	8003a28 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f7ff fddc 	bl	80035ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6859      	ldr	r1, [r3, #4]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	4b0d      	ldr	r3, [pc, #52]	; (8003a34 <I2C_IsErrorOccurred+0x1d4>)
 8003a00:	400b      	ands	r3, r1
 8003a02:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a08:	6a3b      	ldr	r3, [r7, #32]
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2220      	movs	r2, #32
 8003a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003a28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3728      	adds	r7, #40	; 0x28
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	fe00e800 	.word	0xfe00e800

08003a38 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	607b      	str	r3, [r7, #4]
 8003a42:	460b      	mov	r3, r1
 8003a44:	817b      	strh	r3, [r7, #10]
 8003a46:	4613      	mov	r3, r2
 8003a48:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a4a:	897b      	ldrh	r3, [r7, #10]
 8003a4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a50:	7a7b      	ldrb	r3, [r7, #9]
 8003a52:	041b      	lsls	r3, r3, #16
 8003a54:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a58:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a5e:	6a3b      	ldr	r3, [r7, #32]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a66:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	685a      	ldr	r2, [r3, #4]
 8003a6e:	6a3b      	ldr	r3, [r7, #32]
 8003a70:	0d5b      	lsrs	r3, r3, #21
 8003a72:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003a76:	4b08      	ldr	r3, [pc, #32]	; (8003a98 <I2C_TransferConfig+0x60>)
 8003a78:	430b      	orrs	r3, r1
 8003a7a:	43db      	mvns	r3, r3
 8003a7c:	ea02 0103 	and.w	r1, r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003a8a:	bf00      	nop
 8003a8c:	371c      	adds	r7, #28
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	03ff63ff 	.word	0x03ff63ff

08003a9c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b20      	cmp	r3, #32
 8003ab0:	d138      	bne.n	8003b24 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d101      	bne.n	8003ac0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003abc:	2302      	movs	r3, #2
 8003abe:	e032      	b.n	8003b26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2224      	movs	r2, #36	; 0x24
 8003acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0201 	bic.w	r2, r2, #1
 8003ade:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003aee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6819      	ldr	r1, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0201 	orr.w	r2, r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2220      	movs	r2, #32
 8003b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b20:	2300      	movs	r3, #0
 8003b22:	e000      	b.n	8003b26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b24:	2302      	movs	r3, #2
  }
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b085      	sub	sp, #20
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
 8003b3a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b20      	cmp	r3, #32
 8003b46:	d139      	bne.n	8003bbc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d101      	bne.n	8003b56 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b52:	2302      	movs	r3, #2
 8003b54:	e033      	b.n	8003bbe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2224      	movs	r2, #36	; 0x24
 8003b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f022 0201 	bic.w	r2, r2, #1
 8003b74:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b84:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	021b      	lsls	r3, r3, #8
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f042 0201 	orr.w	r2, r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2220      	movs	r2, #32
 8003bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	e000      	b.n	8003bbe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003bbc:	2302      	movs	r3, #2
  }
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3714      	adds	r7, #20
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
	...

08003bcc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e29b      	b.n	800411a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f000 8087 	beq.w	8003cfe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bf0:	4b96      	ldr	r3, [pc, #600]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f003 030c 	and.w	r3, r3, #12
 8003bf8:	2b04      	cmp	r3, #4
 8003bfa:	d00c      	beq.n	8003c16 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bfc:	4b93      	ldr	r3, [pc, #588]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 030c 	and.w	r3, r3, #12
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	d112      	bne.n	8003c2e <HAL_RCC_OscConfig+0x62>
 8003c08:	4b90      	ldr	r3, [pc, #576]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c14:	d10b      	bne.n	8003c2e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c16:	4b8d      	ldr	r3, [pc, #564]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d06c      	beq.n	8003cfc <HAL_RCC_OscConfig+0x130>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d168      	bne.n	8003cfc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e275      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c36:	d106      	bne.n	8003c46 <HAL_RCC_OscConfig+0x7a>
 8003c38:	4b84      	ldr	r3, [pc, #528]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a83      	ldr	r2, [pc, #524]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c42:	6013      	str	r3, [r2, #0]
 8003c44:	e02e      	b.n	8003ca4 <HAL_RCC_OscConfig+0xd8>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10c      	bne.n	8003c68 <HAL_RCC_OscConfig+0x9c>
 8003c4e:	4b7f      	ldr	r3, [pc, #508]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a7e      	ldr	r2, [pc, #504]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c58:	6013      	str	r3, [r2, #0]
 8003c5a:	4b7c      	ldr	r3, [pc, #496]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a7b      	ldr	r2, [pc, #492]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	e01d      	b.n	8003ca4 <HAL_RCC_OscConfig+0xd8>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c70:	d10c      	bne.n	8003c8c <HAL_RCC_OscConfig+0xc0>
 8003c72:	4b76      	ldr	r3, [pc, #472]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a75      	ldr	r2, [pc, #468]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c7c:	6013      	str	r3, [r2, #0]
 8003c7e:	4b73      	ldr	r3, [pc, #460]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a72      	ldr	r2, [pc, #456]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	e00b      	b.n	8003ca4 <HAL_RCC_OscConfig+0xd8>
 8003c8c:	4b6f      	ldr	r3, [pc, #444]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a6e      	ldr	r2, [pc, #440]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c96:	6013      	str	r3, [r2, #0]
 8003c98:	4b6c      	ldr	r3, [pc, #432]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a6b      	ldr	r2, [pc, #428]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ca2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d013      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cac:	f7fe f900 	bl	8001eb0 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cb4:	f7fe f8fc 	bl	8001eb0 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b64      	cmp	r3, #100	; 0x64
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e229      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cc6:	4b61      	ldr	r3, [pc, #388]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0f0      	beq.n	8003cb4 <HAL_RCC_OscConfig+0xe8>
 8003cd2:	e014      	b.n	8003cfe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd4:	f7fe f8ec 	bl	8001eb0 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cdc:	f7fe f8e8 	bl	8001eb0 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b64      	cmp	r3, #100	; 0x64
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e215      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cee:	4b57      	ldr	r3, [pc, #348]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1f0      	bne.n	8003cdc <HAL_RCC_OscConfig+0x110>
 8003cfa:	e000      	b.n	8003cfe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d069      	beq.n	8003dde <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d0a:	4b50      	ldr	r3, [pc, #320]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 030c 	and.w	r3, r3, #12
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00b      	beq.n	8003d2e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d16:	4b4d      	ldr	r3, [pc, #308]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 030c 	and.w	r3, r3, #12
 8003d1e:	2b08      	cmp	r3, #8
 8003d20:	d11c      	bne.n	8003d5c <HAL_RCC_OscConfig+0x190>
 8003d22:	4b4a      	ldr	r3, [pc, #296]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d116      	bne.n	8003d5c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d2e:	4b47      	ldr	r3, [pc, #284]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d005      	beq.n	8003d46 <HAL_RCC_OscConfig+0x17a>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d001      	beq.n	8003d46 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e1e9      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d46:	4b41      	ldr	r3, [pc, #260]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	493d      	ldr	r1, [pc, #244]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d5a:	e040      	b.n	8003dde <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d023      	beq.n	8003dac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d64:	4b39      	ldr	r3, [pc, #228]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a38      	ldr	r2, [pc, #224]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d6a:	f043 0301 	orr.w	r3, r3, #1
 8003d6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d70:	f7fe f89e 	bl	8001eb0 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d78:	f7fe f89a 	bl	8001eb0 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e1c7      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d8a:	4b30      	ldr	r3, [pc, #192]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0f0      	beq.n	8003d78 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d96:	4b2d      	ldr	r3, [pc, #180]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	00db      	lsls	r3, r3, #3
 8003da4:	4929      	ldr	r1, [pc, #164]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	600b      	str	r3, [r1, #0]
 8003daa:	e018      	b.n	8003dde <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dac:	4b27      	ldr	r3, [pc, #156]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a26      	ldr	r2, [pc, #152]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003db2:	f023 0301 	bic.w	r3, r3, #1
 8003db6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db8:	f7fe f87a 	bl	8001eb0 <HAL_GetTick>
 8003dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dbe:	e008      	b.n	8003dd2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dc0:	f7fe f876 	bl	8001eb0 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e1a3      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dd2:	4b1e      	ldr	r3, [pc, #120]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1f0      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0308 	and.w	r3, r3, #8
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d038      	beq.n	8003e5c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d019      	beq.n	8003e26 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003df2:	4b16      	ldr	r3, [pc, #88]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003df6:	4a15      	ldr	r2, [pc, #84]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003df8:	f043 0301 	orr.w	r3, r3, #1
 8003dfc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dfe:	f7fe f857 	bl	8001eb0 <HAL_GetTick>
 8003e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e04:	e008      	b.n	8003e18 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e06:	f7fe f853 	bl	8001eb0 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d901      	bls.n	8003e18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e180      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e18:	4b0c      	ldr	r3, [pc, #48]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003e1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d0f0      	beq.n	8003e06 <HAL_RCC_OscConfig+0x23a>
 8003e24:	e01a      	b.n	8003e5c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e26:	4b09      	ldr	r3, [pc, #36]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e2a:	4a08      	ldr	r2, [pc, #32]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003e2c:	f023 0301 	bic.w	r3, r3, #1
 8003e30:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e32:	f7fe f83d 	bl	8001eb0 <HAL_GetTick>
 8003e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e38:	e00a      	b.n	8003e50 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e3a:	f7fe f839 	bl	8001eb0 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d903      	bls.n	8003e50 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e166      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
 8003e4c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e50:	4b92      	ldr	r3, [pc, #584]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1ee      	bne.n	8003e3a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f000 80a4 	beq.w	8003fb2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e6a:	4b8c      	ldr	r3, [pc, #560]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10d      	bne.n	8003e92 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e76:	4b89      	ldr	r3, [pc, #548]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	4a88      	ldr	r2, [pc, #544]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e80:	6413      	str	r3, [r2, #64]	; 0x40
 8003e82:	4b86      	ldr	r3, [pc, #536]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e8a:	60bb      	str	r3, [r7, #8]
 8003e8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e92:	4b83      	ldr	r3, [pc, #524]	; (80040a0 <HAL_RCC_OscConfig+0x4d4>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d118      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003e9e:	4b80      	ldr	r3, [pc, #512]	; (80040a0 <HAL_RCC_OscConfig+0x4d4>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a7f      	ldr	r2, [pc, #508]	; (80040a0 <HAL_RCC_OscConfig+0x4d4>)
 8003ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ea8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eaa:	f7fe f801 	bl	8001eb0 <HAL_GetTick>
 8003eae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003eb0:	e008      	b.n	8003ec4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eb2:	f7fd fffd 	bl	8001eb0 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b64      	cmp	r3, #100	; 0x64
 8003ebe:	d901      	bls.n	8003ec4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e12a      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ec4:	4b76      	ldr	r3, [pc, #472]	; (80040a0 <HAL_RCC_OscConfig+0x4d4>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d0f0      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d106      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x31a>
 8003ed8:	4b70      	ldr	r3, [pc, #448]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003edc:	4a6f      	ldr	r2, [pc, #444]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003ede:	f043 0301 	orr.w	r3, r3, #1
 8003ee2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee4:	e02d      	b.n	8003f42 <HAL_RCC_OscConfig+0x376>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10c      	bne.n	8003f08 <HAL_RCC_OscConfig+0x33c>
 8003eee:	4b6b      	ldr	r3, [pc, #428]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef2:	4a6a      	ldr	r2, [pc, #424]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003ef4:	f023 0301 	bic.w	r3, r3, #1
 8003ef8:	6713      	str	r3, [r2, #112]	; 0x70
 8003efa:	4b68      	ldr	r3, [pc, #416]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efe:	4a67      	ldr	r2, [pc, #412]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003f00:	f023 0304 	bic.w	r3, r3, #4
 8003f04:	6713      	str	r3, [r2, #112]	; 0x70
 8003f06:	e01c      	b.n	8003f42 <HAL_RCC_OscConfig+0x376>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	2b05      	cmp	r3, #5
 8003f0e:	d10c      	bne.n	8003f2a <HAL_RCC_OscConfig+0x35e>
 8003f10:	4b62      	ldr	r3, [pc, #392]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f14:	4a61      	ldr	r2, [pc, #388]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003f16:	f043 0304 	orr.w	r3, r3, #4
 8003f1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f1c:	4b5f      	ldr	r3, [pc, #380]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f20:	4a5e      	ldr	r2, [pc, #376]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003f22:	f043 0301 	orr.w	r3, r3, #1
 8003f26:	6713      	str	r3, [r2, #112]	; 0x70
 8003f28:	e00b      	b.n	8003f42 <HAL_RCC_OscConfig+0x376>
 8003f2a:	4b5c      	ldr	r3, [pc, #368]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2e:	4a5b      	ldr	r2, [pc, #364]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003f30:	f023 0301 	bic.w	r3, r3, #1
 8003f34:	6713      	str	r3, [r2, #112]	; 0x70
 8003f36:	4b59      	ldr	r3, [pc, #356]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3a:	4a58      	ldr	r2, [pc, #352]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003f3c:	f023 0304 	bic.w	r3, r3, #4
 8003f40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d015      	beq.n	8003f76 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f4a:	f7fd ffb1 	bl	8001eb0 <HAL_GetTick>
 8003f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f50:	e00a      	b.n	8003f68 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f52:	f7fd ffad 	bl	8001eb0 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e0d8      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f68:	4b4c      	ldr	r3, [pc, #304]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d0ee      	beq.n	8003f52 <HAL_RCC_OscConfig+0x386>
 8003f74:	e014      	b.n	8003fa0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f76:	f7fd ff9b 	bl	8001eb0 <HAL_GetTick>
 8003f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f7c:	e00a      	b.n	8003f94 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f7e:	f7fd ff97 	bl	8001eb0 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e0c2      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f94:	4b41      	ldr	r3, [pc, #260]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1ee      	bne.n	8003f7e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fa0:	7dfb      	ldrb	r3, [r7, #23]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d105      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fa6:	4b3d      	ldr	r3, [pc, #244]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	4a3c      	ldr	r2, [pc, #240]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003fac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fb0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f000 80ae 	beq.w	8004118 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fbc:	4b37      	ldr	r3, [pc, #220]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f003 030c 	and.w	r3, r3, #12
 8003fc4:	2b08      	cmp	r3, #8
 8003fc6:	d06d      	beq.n	80040a4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d14b      	bne.n	8004068 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fd0:	4b32      	ldr	r3, [pc, #200]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a31      	ldr	r2, [pc, #196]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003fd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fdc:	f7fd ff68 	bl	8001eb0 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fe4:	f7fd ff64 	bl	8001eb0 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e091      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ff6:	4b29      	ldr	r3, [pc, #164]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1f0      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	69da      	ldr	r2, [r3, #28]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004010:	019b      	lsls	r3, r3, #6
 8004012:	431a      	orrs	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004018:	085b      	lsrs	r3, r3, #1
 800401a:	3b01      	subs	r3, #1
 800401c:	041b      	lsls	r3, r3, #16
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004024:	061b      	lsls	r3, r3, #24
 8004026:	431a      	orrs	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402c:	071b      	lsls	r3, r3, #28
 800402e:	491b      	ldr	r1, [pc, #108]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8004030:	4313      	orrs	r3, r2
 8004032:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004034:	4b19      	ldr	r3, [pc, #100]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a18      	ldr	r2, [pc, #96]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 800403a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800403e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004040:	f7fd ff36 	bl	8001eb0 <HAL_GetTick>
 8004044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004048:	f7fd ff32 	bl	8001eb0 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e05f      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800405a:	4b10      	ldr	r3, [pc, #64]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d0f0      	beq.n	8004048 <HAL_RCC_OscConfig+0x47c>
 8004066:	e057      	b.n	8004118 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004068:	4b0c      	ldr	r3, [pc, #48]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a0b      	ldr	r2, [pc, #44]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 800406e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004072:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004074:	f7fd ff1c 	bl	8001eb0 <HAL_GetTick>
 8004078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800407a:	e008      	b.n	800408e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800407c:	f7fd ff18 	bl	8001eb0 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b02      	cmp	r3, #2
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e045      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800408e:	4b03      	ldr	r3, [pc, #12]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1f0      	bne.n	800407c <HAL_RCC_OscConfig+0x4b0>
 800409a:	e03d      	b.n	8004118 <HAL_RCC_OscConfig+0x54c>
 800409c:	40023800 	.word	0x40023800
 80040a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80040a4:	4b1f      	ldr	r3, [pc, #124]	; (8004124 <HAL_RCC_OscConfig+0x558>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d030      	beq.n	8004114 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040bc:	429a      	cmp	r2, r3
 80040be:	d129      	bne.n	8004114 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d122      	bne.n	8004114 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040d4:	4013      	ands	r3, r2
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040da:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040dc:	4293      	cmp	r3, r2
 80040de:	d119      	bne.n	8004114 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ea:	085b      	lsrs	r3, r3, #1
 80040ec:	3b01      	subs	r3, #1
 80040ee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d10f      	bne.n	8004114 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004100:	429a      	cmp	r2, r3
 8004102:	d107      	bne.n	8004114 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004110:	429a      	cmp	r2, r3
 8004112:	d001      	beq.n	8004118 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e000      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3718      	adds	r7, #24
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	40023800 	.word	0x40023800

08004128 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004132:	2300      	movs	r3, #0
 8004134:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d101      	bne.n	8004140 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e0d0      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004140:	4b6a      	ldr	r3, [pc, #424]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 030f 	and.w	r3, r3, #15
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	429a      	cmp	r2, r3
 800414c:	d910      	bls.n	8004170 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800414e:	4b67      	ldr	r3, [pc, #412]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f023 020f 	bic.w	r2, r3, #15
 8004156:	4965      	ldr	r1, [pc, #404]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	4313      	orrs	r3, r2
 800415c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800415e:	4b63      	ldr	r3, [pc, #396]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 030f 	and.w	r3, r3, #15
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	429a      	cmp	r2, r3
 800416a:	d001      	beq.n	8004170 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e0b8      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d020      	beq.n	80041be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0304 	and.w	r3, r3, #4
 8004184:	2b00      	cmp	r3, #0
 8004186:	d005      	beq.n	8004194 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004188:	4b59      	ldr	r3, [pc, #356]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	4a58      	ldr	r2, [pc, #352]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 800418e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004192:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0308 	and.w	r3, r3, #8
 800419c:	2b00      	cmp	r3, #0
 800419e:	d005      	beq.n	80041ac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041a0:	4b53      	ldr	r3, [pc, #332]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	4a52      	ldr	r2, [pc, #328]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 80041a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041ac:	4b50      	ldr	r3, [pc, #320]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	494d      	ldr	r1, [pc, #308]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d040      	beq.n	800424c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d107      	bne.n	80041e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041d2:	4b47      	ldr	r3, [pc, #284]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d115      	bne.n	800420a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e07f      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d107      	bne.n	80041fa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ea:	4b41      	ldr	r3, [pc, #260]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d109      	bne.n	800420a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e073      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041fa:	4b3d      	ldr	r3, [pc, #244]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e06b      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800420a:	4b39      	ldr	r3, [pc, #228]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f023 0203 	bic.w	r2, r3, #3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	4936      	ldr	r1, [pc, #216]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 8004218:	4313      	orrs	r3, r2
 800421a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800421c:	f7fd fe48 	bl	8001eb0 <HAL_GetTick>
 8004220:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004222:	e00a      	b.n	800423a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004224:	f7fd fe44 	bl	8001eb0 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004232:	4293      	cmp	r3, r2
 8004234:	d901      	bls.n	800423a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e053      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800423a:	4b2d      	ldr	r3, [pc, #180]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f003 020c 	and.w	r2, r3, #12
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	429a      	cmp	r2, r3
 800424a:	d1eb      	bne.n	8004224 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800424c:	4b27      	ldr	r3, [pc, #156]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 030f 	and.w	r3, r3, #15
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	429a      	cmp	r2, r3
 8004258:	d210      	bcs.n	800427c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800425a:	4b24      	ldr	r3, [pc, #144]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f023 020f 	bic.w	r2, r3, #15
 8004262:	4922      	ldr	r1, [pc, #136]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	4313      	orrs	r3, r2
 8004268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800426a:	4b20      	ldr	r3, [pc, #128]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 030f 	and.w	r3, r3, #15
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	429a      	cmp	r2, r3
 8004276:	d001      	beq.n	800427c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e032      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	2b00      	cmp	r3, #0
 8004286:	d008      	beq.n	800429a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004288:	4b19      	ldr	r3, [pc, #100]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	4916      	ldr	r1, [pc, #88]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 8004296:	4313      	orrs	r3, r2
 8004298:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0308 	and.w	r3, r3, #8
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d009      	beq.n	80042ba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80042a6:	4b12      	ldr	r3, [pc, #72]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	490e      	ldr	r1, [pc, #56]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042ba:	f000 f821 	bl	8004300 <HAL_RCC_GetSysClockFreq>
 80042be:	4602      	mov	r2, r0
 80042c0:	4b0b      	ldr	r3, [pc, #44]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	091b      	lsrs	r3, r3, #4
 80042c6:	f003 030f 	and.w	r3, r3, #15
 80042ca:	490a      	ldr	r1, [pc, #40]	; (80042f4 <HAL_RCC_ClockConfig+0x1cc>)
 80042cc:	5ccb      	ldrb	r3, [r1, r3]
 80042ce:	fa22 f303 	lsr.w	r3, r2, r3
 80042d2:	4a09      	ldr	r2, [pc, #36]	; (80042f8 <HAL_RCC_ClockConfig+0x1d0>)
 80042d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80042d6:	4b09      	ldr	r3, [pc, #36]	; (80042fc <HAL_RCC_ClockConfig+0x1d4>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4618      	mov	r0, r3
 80042dc:	f7fd fda4 	bl	8001e28 <HAL_InitTick>

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	40023c00 	.word	0x40023c00
 80042f0:	40023800 	.word	0x40023800
 80042f4:	0800eba0 	.word	0x0800eba0
 80042f8:	20000000 	.word	0x20000000
 80042fc:	20000004 	.word	0x20000004

08004300 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004304:	b090      	sub	sp, #64	; 0x40
 8004306:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004308:	2300      	movs	r3, #0
 800430a:	637b      	str	r3, [r7, #52]	; 0x34
 800430c:	2300      	movs	r3, #0
 800430e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004310:	2300      	movs	r3, #0
 8004312:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004314:	2300      	movs	r3, #0
 8004316:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004318:	4b59      	ldr	r3, [pc, #356]	; (8004480 <HAL_RCC_GetSysClockFreq+0x180>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f003 030c 	and.w	r3, r3, #12
 8004320:	2b08      	cmp	r3, #8
 8004322:	d00d      	beq.n	8004340 <HAL_RCC_GetSysClockFreq+0x40>
 8004324:	2b08      	cmp	r3, #8
 8004326:	f200 80a1 	bhi.w	800446c <HAL_RCC_GetSysClockFreq+0x16c>
 800432a:	2b00      	cmp	r3, #0
 800432c:	d002      	beq.n	8004334 <HAL_RCC_GetSysClockFreq+0x34>
 800432e:	2b04      	cmp	r3, #4
 8004330:	d003      	beq.n	800433a <HAL_RCC_GetSysClockFreq+0x3a>
 8004332:	e09b      	b.n	800446c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004334:	4b53      	ldr	r3, [pc, #332]	; (8004484 <HAL_RCC_GetSysClockFreq+0x184>)
 8004336:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004338:	e09b      	b.n	8004472 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800433a:	4b53      	ldr	r3, [pc, #332]	; (8004488 <HAL_RCC_GetSysClockFreq+0x188>)
 800433c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800433e:	e098      	b.n	8004472 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004340:	4b4f      	ldr	r3, [pc, #316]	; (8004480 <HAL_RCC_GetSysClockFreq+0x180>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004348:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800434a:	4b4d      	ldr	r3, [pc, #308]	; (8004480 <HAL_RCC_GetSysClockFreq+0x180>)
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d028      	beq.n	80043a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004356:	4b4a      	ldr	r3, [pc, #296]	; (8004480 <HAL_RCC_GetSysClockFreq+0x180>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	099b      	lsrs	r3, r3, #6
 800435c:	2200      	movs	r2, #0
 800435e:	623b      	str	r3, [r7, #32]
 8004360:	627a      	str	r2, [r7, #36]	; 0x24
 8004362:	6a3b      	ldr	r3, [r7, #32]
 8004364:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004368:	2100      	movs	r1, #0
 800436a:	4b47      	ldr	r3, [pc, #284]	; (8004488 <HAL_RCC_GetSysClockFreq+0x188>)
 800436c:	fb03 f201 	mul.w	r2, r3, r1
 8004370:	2300      	movs	r3, #0
 8004372:	fb00 f303 	mul.w	r3, r0, r3
 8004376:	4413      	add	r3, r2
 8004378:	4a43      	ldr	r2, [pc, #268]	; (8004488 <HAL_RCC_GetSysClockFreq+0x188>)
 800437a:	fba0 1202 	umull	r1, r2, r0, r2
 800437e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004380:	460a      	mov	r2, r1
 8004382:	62ba      	str	r2, [r7, #40]	; 0x28
 8004384:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004386:	4413      	add	r3, r2
 8004388:	62fb      	str	r3, [r7, #44]	; 0x2c
 800438a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800438c:	2200      	movs	r2, #0
 800438e:	61bb      	str	r3, [r7, #24]
 8004390:	61fa      	str	r2, [r7, #28]
 8004392:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004396:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800439a:	f7fc f965 	bl	8000668 <__aeabi_uldivmod>
 800439e:	4602      	mov	r2, r0
 80043a0:	460b      	mov	r3, r1
 80043a2:	4613      	mov	r3, r2
 80043a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043a6:	e053      	b.n	8004450 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043a8:	4b35      	ldr	r3, [pc, #212]	; (8004480 <HAL_RCC_GetSysClockFreq+0x180>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	099b      	lsrs	r3, r3, #6
 80043ae:	2200      	movs	r2, #0
 80043b0:	613b      	str	r3, [r7, #16]
 80043b2:	617a      	str	r2, [r7, #20]
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80043ba:	f04f 0b00 	mov.w	fp, #0
 80043be:	4652      	mov	r2, sl
 80043c0:	465b      	mov	r3, fp
 80043c2:	f04f 0000 	mov.w	r0, #0
 80043c6:	f04f 0100 	mov.w	r1, #0
 80043ca:	0159      	lsls	r1, r3, #5
 80043cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043d0:	0150      	lsls	r0, r2, #5
 80043d2:	4602      	mov	r2, r0
 80043d4:	460b      	mov	r3, r1
 80043d6:	ebb2 080a 	subs.w	r8, r2, sl
 80043da:	eb63 090b 	sbc.w	r9, r3, fp
 80043de:	f04f 0200 	mov.w	r2, #0
 80043e2:	f04f 0300 	mov.w	r3, #0
 80043e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80043ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80043ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80043f2:	ebb2 0408 	subs.w	r4, r2, r8
 80043f6:	eb63 0509 	sbc.w	r5, r3, r9
 80043fa:	f04f 0200 	mov.w	r2, #0
 80043fe:	f04f 0300 	mov.w	r3, #0
 8004402:	00eb      	lsls	r3, r5, #3
 8004404:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004408:	00e2      	lsls	r2, r4, #3
 800440a:	4614      	mov	r4, r2
 800440c:	461d      	mov	r5, r3
 800440e:	eb14 030a 	adds.w	r3, r4, sl
 8004412:	603b      	str	r3, [r7, #0]
 8004414:	eb45 030b 	adc.w	r3, r5, fp
 8004418:	607b      	str	r3, [r7, #4]
 800441a:	f04f 0200 	mov.w	r2, #0
 800441e:	f04f 0300 	mov.w	r3, #0
 8004422:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004426:	4629      	mov	r1, r5
 8004428:	028b      	lsls	r3, r1, #10
 800442a:	4621      	mov	r1, r4
 800442c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004430:	4621      	mov	r1, r4
 8004432:	028a      	lsls	r2, r1, #10
 8004434:	4610      	mov	r0, r2
 8004436:	4619      	mov	r1, r3
 8004438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800443a:	2200      	movs	r2, #0
 800443c:	60bb      	str	r3, [r7, #8]
 800443e:	60fa      	str	r2, [r7, #12]
 8004440:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004444:	f7fc f910 	bl	8000668 <__aeabi_uldivmod>
 8004448:	4602      	mov	r2, r0
 800444a:	460b      	mov	r3, r1
 800444c:	4613      	mov	r3, r2
 800444e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004450:	4b0b      	ldr	r3, [pc, #44]	; (8004480 <HAL_RCC_GetSysClockFreq+0x180>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	0c1b      	lsrs	r3, r3, #16
 8004456:	f003 0303 	and.w	r3, r3, #3
 800445a:	3301      	adds	r3, #1
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004460:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004464:	fbb2 f3f3 	udiv	r3, r2, r3
 8004468:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800446a:	e002      	b.n	8004472 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800446c:	4b05      	ldr	r3, [pc, #20]	; (8004484 <HAL_RCC_GetSysClockFreq+0x184>)
 800446e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004470:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004474:	4618      	mov	r0, r3
 8004476:	3740      	adds	r7, #64	; 0x40
 8004478:	46bd      	mov	sp, r7
 800447a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800447e:	bf00      	nop
 8004480:	40023800 	.word	0x40023800
 8004484:	00f42400 	.word	0x00f42400
 8004488:	017d7840 	.word	0x017d7840

0800448c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800448c:	b480      	push	{r7}
 800448e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004490:	4b03      	ldr	r3, [pc, #12]	; (80044a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004492:	681b      	ldr	r3, [r3, #0]
}
 8004494:	4618      	mov	r0, r3
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	20000000 	.word	0x20000000

080044a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044a8:	f7ff fff0 	bl	800448c <HAL_RCC_GetHCLKFreq>
 80044ac:	4602      	mov	r2, r0
 80044ae:	4b05      	ldr	r3, [pc, #20]	; (80044c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	0a9b      	lsrs	r3, r3, #10
 80044b4:	f003 0307 	and.w	r3, r3, #7
 80044b8:	4903      	ldr	r1, [pc, #12]	; (80044c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044ba:	5ccb      	ldrb	r3, [r1, r3]
 80044bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	40023800 	.word	0x40023800
 80044c8:	0800ebb0 	.word	0x0800ebb0

080044cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044d0:	f7ff ffdc 	bl	800448c <HAL_RCC_GetHCLKFreq>
 80044d4:	4602      	mov	r2, r0
 80044d6:	4b05      	ldr	r3, [pc, #20]	; (80044ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	0b5b      	lsrs	r3, r3, #13
 80044dc:	f003 0307 	and.w	r3, r3, #7
 80044e0:	4903      	ldr	r1, [pc, #12]	; (80044f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044e2:	5ccb      	ldrb	r3, [r1, r3]
 80044e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	40023800 	.word	0x40023800
 80044f0:	0800ebb0 	.word	0x0800ebb0

080044f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b088      	sub	sp, #32
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80044fc:	2300      	movs	r3, #0
 80044fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004500:	2300      	movs	r3, #0
 8004502:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004504:	2300      	movs	r3, #0
 8004506:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004508:	2300      	movs	r3, #0
 800450a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800450c:	2300      	movs	r3, #0
 800450e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	2b00      	cmp	r3, #0
 800451a:	d012      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800451c:	4b69      	ldr	r3, [pc, #420]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	4a68      	ldr	r2, [pc, #416]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004522:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004526:	6093      	str	r3, [r2, #8]
 8004528:	4b66      	ldr	r3, [pc, #408]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800452a:	689a      	ldr	r2, [r3, #8]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004530:	4964      	ldr	r1, [pc, #400]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004532:	4313      	orrs	r3, r2
 8004534:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800453e:	2301      	movs	r3, #1
 8004540:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d017      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800454e:	4b5d      	ldr	r3, [pc, #372]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004550:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004554:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800455c:	4959      	ldr	r1, [pc, #356]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800455e:	4313      	orrs	r3, r2
 8004560:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004568:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800456c:	d101      	bne.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800456e:	2301      	movs	r3, #1
 8004570:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800457a:	2301      	movs	r3, #1
 800457c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d017      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800458a:	4b4e      	ldr	r3, [pc, #312]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800458c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004590:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004598:	494a      	ldr	r1, [pc, #296]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800459a:	4313      	orrs	r3, r2
 800459c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045a8:	d101      	bne.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80045aa:	2301      	movs	r3, #1
 80045ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80045b6:	2301      	movs	r3, #1
 80045b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80045c6:	2301      	movs	r3, #1
 80045c8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0320 	and.w	r3, r3, #32
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 808b 	beq.w	80046ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80045d8:	4b3a      	ldr	r3, [pc, #232]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045dc:	4a39      	ldr	r2, [pc, #228]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045e2:	6413      	str	r3, [r2, #64]	; 0x40
 80045e4:	4b37      	ldr	r3, [pc, #220]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ec:	60bb      	str	r3, [r7, #8]
 80045ee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80045f0:	4b35      	ldr	r3, [pc, #212]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a34      	ldr	r2, [pc, #208]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045fc:	f7fd fc58 	bl	8001eb0 <HAL_GetTick>
 8004600:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004602:	e008      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004604:	f7fd fc54 	bl	8001eb0 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b64      	cmp	r3, #100	; 0x64
 8004610:	d901      	bls.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e38f      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004616:	4b2c      	ldr	r3, [pc, #176]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800461e:	2b00      	cmp	r3, #0
 8004620:	d0f0      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004622:	4b28      	ldr	r3, [pc, #160]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004626:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800462a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d035      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	429a      	cmp	r2, r3
 800463e:	d02e      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004640:	4b20      	ldr	r3, [pc, #128]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004644:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004648:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800464a:	4b1e      	ldr	r3, [pc, #120]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800464c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464e:	4a1d      	ldr	r2, [pc, #116]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004654:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004656:	4b1b      	ldr	r3, [pc, #108]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465a:	4a1a      	ldr	r2, [pc, #104]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800465c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004660:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004662:	4a18      	ldr	r2, [pc, #96]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004668:	4b16      	ldr	r3, [pc, #88]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800466a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b01      	cmp	r3, #1
 8004672:	d114      	bne.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004674:	f7fd fc1c 	bl	8001eb0 <HAL_GetTick>
 8004678:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800467a:	e00a      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800467c:	f7fd fc18 	bl	8001eb0 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	f241 3288 	movw	r2, #5000	; 0x1388
 800468a:	4293      	cmp	r3, r2
 800468c:	d901      	bls.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e351      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004692:	4b0c      	ldr	r3, [pc, #48]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d0ee      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046aa:	d111      	bne.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80046ac:	4b05      	ldr	r3, [pc, #20]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80046b8:	4b04      	ldr	r3, [pc, #16]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80046ba:	400b      	ands	r3, r1
 80046bc:	4901      	ldr	r1, [pc, #4]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	608b      	str	r3, [r1, #8]
 80046c2:	e00b      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80046c4:	40023800 	.word	0x40023800
 80046c8:	40007000 	.word	0x40007000
 80046cc:	0ffffcff 	.word	0x0ffffcff
 80046d0:	4bac      	ldr	r3, [pc, #688]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	4aab      	ldr	r2, [pc, #684]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046d6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80046da:	6093      	str	r3, [r2, #8]
 80046dc:	4ba9      	ldr	r3, [pc, #676]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046e8:	49a6      	ldr	r1, [pc, #664]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0310 	and.w	r3, r3, #16
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d010      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80046fa:	4ba2      	ldr	r3, [pc, #648]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004700:	4aa0      	ldr	r2, [pc, #640]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004702:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004706:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800470a:	4b9e      	ldr	r3, [pc, #632]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800470c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004714:	499b      	ldr	r1, [pc, #620]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004716:	4313      	orrs	r3, r2
 8004718:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00a      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004728:	4b96      	ldr	r3, [pc, #600]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800472a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800472e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004736:	4993      	ldr	r1, [pc, #588]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004738:	4313      	orrs	r3, r2
 800473a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00a      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800474a:	4b8e      	ldr	r3, [pc, #568]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800474c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004750:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004758:	498a      	ldr	r1, [pc, #552]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800475a:	4313      	orrs	r3, r2
 800475c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00a      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800476c:	4b85      	ldr	r3, [pc, #532]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800476e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004772:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800477a:	4982      	ldr	r1, [pc, #520]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800477c:	4313      	orrs	r3, r2
 800477e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00a      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800478e:	4b7d      	ldr	r3, [pc, #500]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004794:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479c:	4979      	ldr	r1, [pc, #484]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00a      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047b0:	4b74      	ldr	r3, [pc, #464]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b6:	f023 0203 	bic.w	r2, r3, #3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047be:	4971      	ldr	r1, [pc, #452]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00a      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047d2:	4b6c      	ldr	r3, [pc, #432]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d8:	f023 020c 	bic.w	r2, r3, #12
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047e0:	4968      	ldr	r1, [pc, #416]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00a      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047f4:	4b63      	ldr	r3, [pc, #396]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047fa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004802:	4960      	ldr	r1, [pc, #384]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004804:	4313      	orrs	r3, r2
 8004806:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00a      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004816:	4b5b      	ldr	r3, [pc, #364]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800481c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004824:	4957      	ldr	r1, [pc, #348]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004826:	4313      	orrs	r3, r2
 8004828:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00a      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004838:	4b52      	ldr	r3, [pc, #328]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800483a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800483e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004846:	494f      	ldr	r1, [pc, #316]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004848:	4313      	orrs	r3, r2
 800484a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00a      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800485a:	4b4a      	ldr	r3, [pc, #296]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800485c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004860:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004868:	4946      	ldr	r1, [pc, #280]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800486a:	4313      	orrs	r3, r2
 800486c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00a      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800487c:	4b41      	ldr	r3, [pc, #260]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800487e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004882:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800488a:	493e      	ldr	r1, [pc, #248]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800488c:	4313      	orrs	r3, r2
 800488e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00a      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800489e:	4b39      	ldr	r3, [pc, #228]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048ac:	4935      	ldr	r1, [pc, #212]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00a      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80048c0:	4b30      	ldr	r3, [pc, #192]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048ce:	492d      	ldr	r1, [pc, #180]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d011      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80048e2:	4b28      	ldr	r3, [pc, #160]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048f0:	4924      	ldr	r1, [pc, #144]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004900:	d101      	bne.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004902:	2301      	movs	r3, #1
 8004904:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0308 	and.w	r3, r3, #8
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004912:	2301      	movs	r3, #1
 8004914:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00a      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004922:	4b18      	ldr	r3, [pc, #96]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004928:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004930:	4914      	ldr	r1, [pc, #80]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004932:	4313      	orrs	r3, r2
 8004934:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00b      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004944:	4b0f      	ldr	r3, [pc, #60]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800494a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004954:	490b      	ldr	r1, [pc, #44]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004956:	4313      	orrs	r3, r2
 8004958:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00f      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004968:	4b06      	ldr	r3, [pc, #24]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800496a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800496e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004978:	4902      	ldr	r1, [pc, #8]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800497a:	4313      	orrs	r3, r2
 800497c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004980:	e002      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004982:	bf00      	nop
 8004984:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00b      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004994:	4b8a      	ldr	r3, [pc, #552]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004996:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800499a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a4:	4986      	ldr	r1, [pc, #536]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00b      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80049b8:	4b81      	ldr	r3, [pc, #516]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049be:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049c8:	497d      	ldr	r1, [pc, #500]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d006      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f000 80d6 	beq.w	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80049e4:	4b76      	ldr	r3, [pc, #472]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a75      	ldr	r2, [pc, #468]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80049ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049f0:	f7fd fa5e 	bl	8001eb0 <HAL_GetTick>
 80049f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049f6:	e008      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80049f8:	f7fd fa5a 	bl	8001eb0 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b64      	cmp	r3, #100	; 0x64
 8004a04:	d901      	bls.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e195      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a0a:	4b6d      	ldr	r3, [pc, #436]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1f0      	bne.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d021      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d11d      	bne.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a2a:	4b65      	ldr	r3, [pc, #404]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a30:	0c1b      	lsrs	r3, r3, #16
 8004a32:	f003 0303 	and.w	r3, r3, #3
 8004a36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a38:	4b61      	ldr	r3, [pc, #388]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a3e:	0e1b      	lsrs	r3, r3, #24
 8004a40:	f003 030f 	and.w	r3, r3, #15
 8004a44:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	019a      	lsls	r2, r3, #6
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	041b      	lsls	r3, r3, #16
 8004a50:	431a      	orrs	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	061b      	lsls	r3, r3, #24
 8004a56:	431a      	orrs	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	071b      	lsls	r3, r3, #28
 8004a5e:	4958      	ldr	r1, [pc, #352]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d004      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a7a:	d00a      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d02e      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a90:	d129      	bne.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a92:	4b4b      	ldr	r3, [pc, #300]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a98:	0c1b      	lsrs	r3, r3, #16
 8004a9a:	f003 0303 	and.w	r3, r3, #3
 8004a9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004aa0:	4b47      	ldr	r3, [pc, #284]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004aa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aa6:	0f1b      	lsrs	r3, r3, #28
 8004aa8:	f003 0307 	and.w	r3, r3, #7
 8004aac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	019a      	lsls	r2, r3, #6
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	041b      	lsls	r3, r3, #16
 8004ab8:	431a      	orrs	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	061b      	lsls	r3, r3, #24
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	071b      	lsls	r3, r3, #28
 8004ac6:	493e      	ldr	r1, [pc, #248]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004ace:	4b3c      	ldr	r3, [pc, #240]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ad4:	f023 021f 	bic.w	r2, r3, #31
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004adc:	3b01      	subs	r3, #1
 8004ade:	4938      	ldr	r1, [pc, #224]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d01d      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004af2:	4b33      	ldr	r3, [pc, #204]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004af4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004af8:	0e1b      	lsrs	r3, r3, #24
 8004afa:	f003 030f 	and.w	r3, r3, #15
 8004afe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b00:	4b2f      	ldr	r3, [pc, #188]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b06:	0f1b      	lsrs	r3, r3, #28
 8004b08:	f003 0307 	and.w	r3, r3, #7
 8004b0c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	019a      	lsls	r2, r3, #6
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	041b      	lsls	r3, r3, #16
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	061b      	lsls	r3, r3, #24
 8004b20:	431a      	orrs	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	071b      	lsls	r3, r3, #28
 8004b26:	4926      	ldr	r1, [pc, #152]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d011      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	019a      	lsls	r2, r3, #6
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	041b      	lsls	r3, r3, #16
 8004b46:	431a      	orrs	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	061b      	lsls	r3, r3, #24
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	071b      	lsls	r3, r3, #28
 8004b56:	491a      	ldr	r1, [pc, #104]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b5e:	4b18      	ldr	r3, [pc, #96]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a17      	ldr	r2, [pc, #92]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b64:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b6a:	f7fd f9a1 	bl	8001eb0 <HAL_GetTick>
 8004b6e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b70:	e008      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b72:	f7fd f99d 	bl	8001eb0 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	2b64      	cmp	r3, #100	; 0x64
 8004b7e:	d901      	bls.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e0d8      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b84:	4b0e      	ldr	r3, [pc, #56]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d0f0      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	f040 80ce 	bne.w	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004b98:	4b09      	ldr	r3, [pc, #36]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a08      	ldr	r2, [pc, #32]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ba2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ba4:	f7fd f984 	bl	8001eb0 <HAL_GetTick>
 8004ba8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004baa:	e00b      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004bac:	f7fd f980 	bl	8001eb0 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b64      	cmp	r3, #100	; 0x64
 8004bb8:	d904      	bls.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e0bb      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004bbe:	bf00      	nop
 8004bc0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004bc4:	4b5e      	ldr	r3, [pc, #376]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bd0:	d0ec      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d003      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d009      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d02e      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d12a      	bne.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004bfa:	4b51      	ldr	r3, [pc, #324]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c00:	0c1b      	lsrs	r3, r3, #16
 8004c02:	f003 0303 	and.w	r3, r3, #3
 8004c06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c08:	4b4d      	ldr	r3, [pc, #308]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c0e:	0f1b      	lsrs	r3, r3, #28
 8004c10:	f003 0307 	and.w	r3, r3, #7
 8004c14:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	019a      	lsls	r2, r3, #6
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	041b      	lsls	r3, r3, #16
 8004c20:	431a      	orrs	r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	061b      	lsls	r3, r3, #24
 8004c28:	431a      	orrs	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	071b      	lsls	r3, r3, #28
 8004c2e:	4944      	ldr	r1, [pc, #272]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004c36:	4b42      	ldr	r3, [pc, #264]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c3c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c44:	3b01      	subs	r3, #1
 8004c46:	021b      	lsls	r3, r3, #8
 8004c48:	493d      	ldr	r1, [pc, #244]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d022      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c64:	d11d      	bne.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c66:	4b36      	ldr	r3, [pc, #216]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c6c:	0e1b      	lsrs	r3, r3, #24
 8004c6e:	f003 030f 	and.w	r3, r3, #15
 8004c72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c74:	4b32      	ldr	r3, [pc, #200]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7a:	0f1b      	lsrs	r3, r3, #28
 8004c7c:	f003 0307 	and.w	r3, r3, #7
 8004c80:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	019a      	lsls	r2, r3, #6
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	041b      	lsls	r3, r3, #16
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	061b      	lsls	r3, r3, #24
 8004c94:	431a      	orrs	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	071b      	lsls	r3, r3, #28
 8004c9a:	4929      	ldr	r1, [pc, #164]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0308 	and.w	r3, r3, #8
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d028      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004cae:	4b24      	ldr	r3, [pc, #144]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb4:	0e1b      	lsrs	r3, r3, #24
 8004cb6:	f003 030f 	and.w	r3, r3, #15
 8004cba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004cbc:	4b20      	ldr	r3, [pc, #128]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc2:	0c1b      	lsrs	r3, r3, #16
 8004cc4:	f003 0303 	and.w	r3, r3, #3
 8004cc8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	019a      	lsls	r2, r3, #6
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	041b      	lsls	r3, r3, #16
 8004cd4:	431a      	orrs	r2, r3
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	061b      	lsls	r3, r3, #24
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	69db      	ldr	r3, [r3, #28]
 8004ce0:	071b      	lsls	r3, r3, #28
 8004ce2:	4917      	ldr	r1, [pc, #92]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004cea:	4b15      	ldr	r3, [pc, #84]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cf0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf8:	4911      	ldr	r1, [pc, #68]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004d00:	4b0f      	ldr	r3, [pc, #60]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a0e      	ldr	r2, [pc, #56]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d0c:	f7fd f8d0 	bl	8001eb0 <HAL_GetTick>
 8004d10:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d12:	e008      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d14:	f7fd f8cc 	bl	8001eb0 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b64      	cmp	r3, #100	; 0x64
 8004d20:	d901      	bls.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e007      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d26:	4b06      	ldr	r3, [pc, #24]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d32:	d1ef      	bne.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3720      	adds	r7, #32
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	40023800 	.word	0x40023800

08004d44 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e022      	b.n	8004d9c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d105      	bne.n	8004d6e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f7fc fd75 	bl	8001858 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2203      	movs	r2, #3
 8004d72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 f814 	bl	8004da4 <HAL_SD_InitCard>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d001      	beq.n	8004d86 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e00a      	b.n	8004d9c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3708      	adds	r7, #8
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004da4:	b5b0      	push	{r4, r5, r7, lr}
 8004da6:	b08e      	sub	sp, #56	; 0x38
 8004da8:	af04      	add	r7, sp, #16
 8004daa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8004dac:	2300      	movs	r3, #0
 8004dae:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8004db0:	2300      	movs	r3, #0
 8004db2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004db4:	2300      	movs	r3, #0
 8004db6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8004db8:	2300      	movs	r3, #0
 8004dba:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8004dc0:	2376      	movs	r3, #118	; 0x76
 8004dc2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681d      	ldr	r5, [r3, #0]
 8004dc8:	466c      	mov	r4, sp
 8004dca:	f107 0314 	add.w	r3, r7, #20
 8004dce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004dd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004dd6:	f107 0308 	add.w	r3, r7, #8
 8004dda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ddc:	4628      	mov	r0, r5
 8004dde:	f001 ffd1 	bl	8006d84 <SDMMC_Init>
 8004de2:	4603      	mov	r3, r0
 8004de4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004de8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d001      	beq.n	8004df4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e059      	b.n	8004ea8 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685a      	ldr	r2, [r3, #4]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e02:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f002 f805 	bl	8006e18 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e1c:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8004e1e:	2002      	movs	r0, #2
 8004e20:	f7fd f852 	bl	8001ec8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 fff3 	bl	8005e10 <SD_PowerON>
 8004e2a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e2c:	6a3b      	ldr	r3, [r7, #32]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00b      	beq.n	8004e4a <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e3e:	6a3b      	ldr	r3, [r7, #32]
 8004e40:	431a      	orrs	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e02e      	b.n	8004ea8 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 ff12 	bl	8005c74 <SD_InitCard>
 8004e50:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e52:	6a3b      	ldr	r3, [r7, #32]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00b      	beq.n	8004e70 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e64:	6a3b      	ldr	r3, [r7, #32]
 8004e66:	431a      	orrs	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e01b      	b.n	8004ea8 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f002 f85f 	bl	8006f3c <SDMMC_CmdBlockLength>
 8004e7e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e80:	6a3b      	ldr	r3, [r7, #32]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00f      	beq.n	8004ea6 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a09      	ldr	r2, [pc, #36]	; (8004eb0 <HAL_SD_InitCard+0x10c>)
 8004e8c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e92:	6a3b      	ldr	r3, [r7, #32]
 8004e94:	431a      	orrs	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e000      	b.n	8004ea8 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3728      	adds	r7, #40	; 0x28
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bdb0      	pop	{r4, r5, r7, pc}
 8004eb0:	004005ff 	.word	0x004005ff

08004eb4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b08c      	sub	sp, #48	; 0x30
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
 8004ec0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d107      	bne.n	8004edc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e0c3      	b.n	8005064 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	f040 80bc 	bne.w	8005062 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004ef0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	441a      	add	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d907      	bls.n	8004f0e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f02:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e0aa      	b.n	8005064 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2203      	movs	r2, #3
 8004f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8004f2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f32:	4a4e      	ldr	r2, [pc, #312]	; (800506c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8004f34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3a:	4a4d      	ldr	r2, [pc, #308]	; (8005070 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8004f3c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f42:	2200      	movs	r2, #0
 8004f44:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5e:	689a      	ldr	r2, [r3, #8]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	3380      	adds	r3, #128	; 0x80
 8004f74:	4619      	mov	r1, r3
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	025b      	lsls	r3, r3, #9
 8004f7c:	089b      	lsrs	r3, r3, #2
 8004f7e:	f7fd f987 	bl	8002290 <HAL_DMA_Start_IT>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d017      	beq.n	8004fb8 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8004f96:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a35      	ldr	r2, [pc, #212]	; (8005074 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8004f9e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e055      	b.n	8005064 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f042 0208 	orr.w	r2, r2, #8
 8004fc6:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d002      	beq.n	8004fd6 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8004fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd2:	025b      	lsls	r3, r3, #9
 8004fd4:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8004fda:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	025b      	lsls	r3, r3, #9
 8004fe0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004fe2:	2390      	movs	r3, #144	; 0x90
 8004fe4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004fe6:	2302      	movs	r3, #2
 8004fe8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004fea:	2300      	movs	r3, #0
 8004fec:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f107 0210 	add.w	r2, r7, #16
 8004ffa:	4611      	mov	r1, r2
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f001 ff71 	bl	8006ee4 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d90a      	bls.n	800501e <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2282      	movs	r2, #130	; 0x82
 800500c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005014:	4618      	mov	r0, r3
 8005016:	f001 ffd5 	bl	8006fc4 <SDMMC_CmdReadMultiBlock>
 800501a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800501c:	e009      	b.n	8005032 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2281      	movs	r2, #129	; 0x81
 8005022:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800502a:	4618      	mov	r0, r3
 800502c:	f001 ffa8 	bl	8006f80 <SDMMC_CmdReadSingleBlock>
 8005030:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8005032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005034:	2b00      	cmp	r3, #0
 8005036:	d012      	beq.n	800505e <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a0d      	ldr	r2, [pc, #52]	; (8005074 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800503e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005046:	431a      	orrs	r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e002      	b.n	8005064 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800505e:	2300      	movs	r3, #0
 8005060:	e000      	b.n	8005064 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8005062:	2302      	movs	r3, #2
  }
}
 8005064:	4618      	mov	r0, r3
 8005066:	3730      	adds	r7, #48	; 0x30
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	08005a83 	.word	0x08005a83
 8005070:	08005af5 	.word	0x08005af5
 8005074:	004005ff 	.word	0x004005ff

08005078 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b08c      	sub	sp, #48	; 0x30
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
 8005084:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d107      	bne.n	80050a0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005094:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e0c6      	b.n	800522e <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	f040 80bf 	bne.w	800522c <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80050b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	441a      	add	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050be:	429a      	cmp	r2, r3
 80050c0:	d907      	bls.n	80050d2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e0ad      	b.n	800522e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2203      	movs	r2, #3
 80050d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2200      	movs	r2, #0
 80050e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f042 021a 	orr.w	r2, r2, #26
 80050f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f6:	4a50      	ldr	r2, [pc, #320]	; (8005238 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80050f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050fe:	4a4f      	ldr	r2, [pc, #316]	; (800523c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8005100:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005106:	2200      	movs	r2, #0
 8005108:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800510e:	2b01      	cmp	r3, #1
 8005110:	d002      	beq.n	8005118 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8005112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005114:	025b      	lsls	r3, r3, #9
 8005116:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d90a      	bls.n	8005134 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	22a0      	movs	r2, #160	; 0xa0
 8005122:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800512a:	4618      	mov	r0, r3
 800512c:	f001 ff8e 	bl	800704c <SDMMC_CmdWriteMultiBlock>
 8005130:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005132:	e009      	b.n	8005148 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2290      	movs	r2, #144	; 0x90
 8005138:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005140:	4618      	mov	r0, r3
 8005142:	f001 ff61 	bl	8007008 <SDMMC_CmdWriteSingleBlock>
 8005146:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800514a:	2b00      	cmp	r3, #0
 800514c:	d012      	beq.n	8005174 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a3b      	ldr	r2, [pc, #236]	; (8005240 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8005154:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800515a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800515c:	431a      	orrs	r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e05c      	b.n	800522e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f042 0208 	orr.w	r2, r2, #8
 8005182:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005188:	2240      	movs	r2, #64	; 0x40
 800518a:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800519c:	689a      	ldr	r2, [r3, #8]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	430a      	orrs	r2, r1
 80051a6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80051ac:	68b9      	ldr	r1, [r7, #8]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	3380      	adds	r3, #128	; 0x80
 80051b4:	461a      	mov	r2, r3
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	025b      	lsls	r3, r3, #9
 80051ba:	089b      	lsrs	r3, r3, #2
 80051bc:	f7fd f868 	bl	8002290 <HAL_DMA_Start_IT>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d01a      	beq.n	80051fc <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f022 021a 	bic.w	r2, r2, #26
 80051d4:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a19      	ldr	r2, [pc, #100]	; (8005240 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80051dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e018      	b.n	800522e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80051fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005200:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	025b      	lsls	r3, r3, #9
 8005206:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005208:	2390      	movs	r3, #144	; 0x90
 800520a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800520c:	2300      	movs	r3, #0
 800520e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005210:	2300      	movs	r3, #0
 8005212:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8005214:	2301      	movs	r3, #1
 8005216:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f107 0210 	add.w	r2, r7, #16
 8005220:	4611      	mov	r1, r2
 8005222:	4618      	mov	r0, r3
 8005224:	f001 fe5e 	bl	8006ee4 <SDMMC_ConfigData>

      return HAL_OK;
 8005228:	2300      	movs	r3, #0
 800522a:	e000      	b.n	800522e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800522c:	2302      	movs	r3, #2
  }
}
 800522e:	4618      	mov	r0, r3
 8005230:	3730      	adds	r7, #48	; 0x30
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	08005a59 	.word	0x08005a59
 800523c:	08005af5 	.word	0x08005af5
 8005240:	004005ff 	.word	0x004005ff

08005244 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005250:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005258:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d008      	beq.n	8005272 <HAL_SD_IRQHandler+0x2e>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f003 0308 	and.w	r3, r3, #8
 8005266:	2b00      	cmp	r3, #0
 8005268:	d003      	beq.n	8005272 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 ffef 	bl	800624e <SD_Read_IT>
 8005270:	e15a      	b.n	8005528 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800527c:	2b00      	cmp	r3, #0
 800527e:	f000 808d 	beq.w	800539c <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f44f 7280 	mov.w	r2, #256	; 0x100
 800528a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	4b9a      	ldr	r3, [pc, #616]	; (8005500 <HAL_SD_IRQHandler+0x2bc>)
 8005298:	400b      	ands	r3, r1
 800529a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f022 0201 	bic.w	r2, r2, #1
 80052aa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f003 0308 	and.w	r3, r3, #8
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d039      	beq.n	800532a <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f003 0302 	and.w	r3, r3, #2
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d104      	bne.n	80052ca <HAL_SD_IRQHandler+0x86>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f003 0320 	and.w	r3, r3, #32
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d011      	beq.n	80052ee <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4618      	mov	r0, r3
 80052d0:	f001 fede 	bl	8007090 <SDMMC_CmdStopTransfer>
 80052d4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d008      	beq.n	80052ee <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	431a      	orrs	r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 f921 	bl	8005530 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f240 523a 	movw	r2, #1338	; 0x53a
 80052f6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f003 0301 	and.w	r3, r3, #1
 800530c:	2b00      	cmp	r3, #0
 800530e:	d104      	bne.n	800531a <HAL_SD_IRQHandler+0xd6>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d003      	beq.n	8005322 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f002 fb4e 	bl	80079bc <HAL_SD_RxCpltCallback>
 8005320:	e102      	b.n	8005528 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f002 fb40 	bl	80079a8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005328:	e0fe      	b.n	8005528 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005330:	2b00      	cmp	r3, #0
 8005332:	f000 80f9 	beq.w	8005528 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f003 0320 	and.w	r3, r3, #32
 800533c:	2b00      	cmp	r3, #0
 800533e:	d011      	beq.n	8005364 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4618      	mov	r0, r3
 8005346:	f001 fea3 	bl	8007090 <SDMMC_CmdStopTransfer>
 800534a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d008      	beq.n	8005364 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	431a      	orrs	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 f8e6 	bl	8005530 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f003 0301 	and.w	r3, r3, #1
 800536a:	2b00      	cmp	r3, #0
 800536c:	f040 80dc 	bne.w	8005528 <HAL_SD_IRQHandler+0x2e4>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f003 0302 	and.w	r3, r3, #2
 8005376:	2b00      	cmp	r3, #0
 8005378:	f040 80d6 	bne.w	8005528 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f022 0208 	bic.w	r2, r2, #8
 800538a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f002 fb07 	bl	80079a8 <HAL_SD_TxCpltCallback>
}
 800539a:	e0c5      	b.n	8005528 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d008      	beq.n	80053bc <HAL_SD_IRQHandler+0x178>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f003 0308 	and.w	r3, r3, #8
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d003      	beq.n	80053bc <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 ff9b 	bl	80062f0 <SD_Write_IT>
 80053ba:	e0b5      	b.n	8005528 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053c2:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	f000 80ae 	beq.w	8005528 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d2:	f003 0302 	and.w	r3, r3, #2
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d005      	beq.n	80053e6 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053de:	f043 0202 	orr.w	r2, r3, #2
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ec:	f003 0308 	and.w	r3, r3, #8
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d005      	beq.n	8005400 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f8:	f043 0208 	orr.w	r2, r3, #8
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005406:	f003 0320 	and.w	r3, r3, #32
 800540a:	2b00      	cmp	r3, #0
 800540c:	d005      	beq.n	800541a <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005412:	f043 0220 	orr.w	r2, r3, #32
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005420:	f003 0310 	and.w	r3, r3, #16
 8005424:	2b00      	cmp	r3, #0
 8005426:	d005      	beq.n	8005434 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542c:	f043 0210 	orr.w	r2, r3, #16
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f240 523a 	movw	r2, #1338	; 0x53a
 800543c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800544c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4618      	mov	r0, r3
 8005454:	f001 fe1c 	bl	8007090 <SDMMC_CmdStopTransfer>
 8005458:	4602      	mov	r2, r0
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545e:	431a      	orrs	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f003 0308 	and.w	r3, r3, #8
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00a      	beq.n	8005484 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2201      	movs	r2, #1
 8005472:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 f857 	bl	8005530 <HAL_SD_ErrorCallback>
}
 8005482:	e051      	b.n	8005528 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800548a:	2b00      	cmp	r3, #0
 800548c:	d04c      	beq.n	8005528 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f003 0310 	and.w	r3, r3, #16
 8005494:	2b00      	cmp	r3, #0
 8005496:	d104      	bne.n	80054a2 <HAL_SD_IRQHandler+0x25e>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f003 0320 	and.w	r3, r3, #32
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d011      	beq.n	80054c6 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054a6:	4a17      	ldr	r2, [pc, #92]	; (8005504 <HAL_SD_IRQHandler+0x2c0>)
 80054a8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ae:	4618      	mov	r0, r3
 80054b0:	f7fc ff4e 	bl	8002350 <HAL_DMA_Abort_IT>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d036      	beq.n	8005528 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054be:	4618      	mov	r0, r3
 80054c0:	f000 fb6a 	bl	8005b98 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80054c4:	e030      	b.n	8005528 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f003 0301 	and.w	r3, r3, #1
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d104      	bne.n	80054da <HAL_SD_IRQHandler+0x296>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d018      	beq.n	800550c <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054de:	4a0a      	ldr	r2, [pc, #40]	; (8005508 <HAL_SD_IRQHandler+0x2c4>)
 80054e0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7fc ff32 	bl	8002350 <HAL_DMA_Abort_IT>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d01a      	beq.n	8005528 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f6:	4618      	mov	r0, r3
 80054f8:	f000 fb85 	bl	8005c06 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80054fc:	e014      	b.n	8005528 <HAL_SD_IRQHandler+0x2e4>
 80054fe:	bf00      	nop
 8005500:	ffff3ec5 	.word	0xffff3ec5
 8005504:	08005b99 	.word	0x08005b99
 8005508:	08005c07 	.word	0x08005c07
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f002 fa37 	bl	8007994 <HAL_SD_AbortCallback>
}
 8005526:	e7ff      	b.n	8005528 <HAL_SD_IRQHandler+0x2e4>
 8005528:	bf00      	nop
 800552a:	3710      	adds	r7, #16
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005538:	bf00      	nop
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005552:	0f9b      	lsrs	r3, r3, #30
 8005554:	b2da      	uxtb	r2, r3
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800555e:	0e9b      	lsrs	r3, r3, #26
 8005560:	b2db      	uxtb	r3, r3
 8005562:	f003 030f 	and.w	r3, r3, #15
 8005566:	b2da      	uxtb	r2, r3
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005570:	0e1b      	lsrs	r3, r3, #24
 8005572:	b2db      	uxtb	r3, r3
 8005574:	f003 0303 	and.w	r3, r3, #3
 8005578:	b2da      	uxtb	r2, r3
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005582:	0c1b      	lsrs	r3, r3, #16
 8005584:	b2da      	uxtb	r2, r3
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800558e:	0a1b      	lsrs	r3, r3, #8
 8005590:	b2da      	uxtb	r2, r3
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800559a:	b2da      	uxtb	r2, r3
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055a4:	0d1b      	lsrs	r3, r3, #20
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055b0:	0c1b      	lsrs	r3, r3, #16
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	f003 030f 	and.w	r3, r3, #15
 80055b8:	b2da      	uxtb	r2, r3
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055c2:	0bdb      	lsrs	r3, r3, #15
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	b2da      	uxtb	r2, r3
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055d4:	0b9b      	lsrs	r3, r3, #14
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	f003 0301 	and.w	r3, r3, #1
 80055dc:	b2da      	uxtb	r2, r3
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055e6:	0b5b      	lsrs	r3, r3, #13
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	b2da      	uxtb	r2, r3
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055f8:	0b1b      	lsrs	r3, r3, #12
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	f003 0301 	and.w	r3, r3, #1
 8005600:	b2da      	uxtb	r2, r3
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	2200      	movs	r2, #0
 800560a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005610:	2b00      	cmp	r3, #0
 8005612:	d163      	bne.n	80056dc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005618:	009a      	lsls	r2, r3, #2
 800561a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800561e:	4013      	ands	r3, r2
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005624:	0f92      	lsrs	r2, r2, #30
 8005626:	431a      	orrs	r2, r3
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005630:	0edb      	lsrs	r3, r3, #27
 8005632:	b2db      	uxtb	r3, r3
 8005634:	f003 0307 	and.w	r3, r3, #7
 8005638:	b2da      	uxtb	r2, r3
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005642:	0e1b      	lsrs	r3, r3, #24
 8005644:	b2db      	uxtb	r3, r3
 8005646:	f003 0307 	and.w	r3, r3, #7
 800564a:	b2da      	uxtb	r2, r3
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005654:	0d5b      	lsrs	r3, r3, #21
 8005656:	b2db      	uxtb	r3, r3
 8005658:	f003 0307 	and.w	r3, r3, #7
 800565c:	b2da      	uxtb	r2, r3
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005666:	0c9b      	lsrs	r3, r3, #18
 8005668:	b2db      	uxtb	r3, r3
 800566a:	f003 0307 	and.w	r3, r3, #7
 800566e:	b2da      	uxtb	r2, r3
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005678:	0bdb      	lsrs	r3, r3, #15
 800567a:	b2db      	uxtb	r3, r3
 800567c:	f003 0307 	and.w	r3, r3, #7
 8005680:	b2da      	uxtb	r2, r3
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	1c5a      	adds	r2, r3, #1
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	7e1b      	ldrb	r3, [r3, #24]
 8005694:	b2db      	uxtb	r3, r3
 8005696:	f003 0307 	and.w	r3, r3, #7
 800569a:	3302      	adds	r3, #2
 800569c:	2201      	movs	r2, #1
 800569e:	fa02 f303 	lsl.w	r3, r2, r3
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80056a6:	fb03 f202 	mul.w	r2, r3, r2
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	7a1b      	ldrb	r3, [r3, #8]
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	f003 030f 	and.w	r3, r3, #15
 80056b8:	2201      	movs	r2, #1
 80056ba:	409a      	lsls	r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80056c8:	0a52      	lsrs	r2, r2, #9
 80056ca:	fb03 f202 	mul.w	r2, r3, r2
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056d8:	661a      	str	r2, [r3, #96]	; 0x60
 80056da:	e031      	b.n	8005740 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d11d      	bne.n	8005720 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056e8:	041b      	lsls	r3, r3, #16
 80056ea:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056f2:	0c1b      	lsrs	r3, r3, #16
 80056f4:	431a      	orrs	r2, r3
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	3301      	adds	r3, #1
 8005700:	029a      	lsls	r2, r3, #10
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005714:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	661a      	str	r2, [r3, #96]	; 0x60
 800571e:	e00f      	b.n	8005740 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a58      	ldr	r2, [pc, #352]	; (8005888 <HAL_SD_GetCardCSD+0x344>)
 8005726:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e09d      	b.n	800587c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005744:	0b9b      	lsrs	r3, r3, #14
 8005746:	b2db      	uxtb	r3, r3
 8005748:	f003 0301 	and.w	r3, r3, #1
 800574c:	b2da      	uxtb	r2, r3
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005756:	09db      	lsrs	r3, r3, #7
 8005758:	b2db      	uxtb	r3, r3
 800575a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800575e:	b2da      	uxtb	r2, r3
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005768:	b2db      	uxtb	r3, r3
 800576a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800576e:	b2da      	uxtb	r2, r3
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005778:	0fdb      	lsrs	r3, r3, #31
 800577a:	b2da      	uxtb	r2, r3
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005784:	0f5b      	lsrs	r3, r3, #29
 8005786:	b2db      	uxtb	r3, r3
 8005788:	f003 0303 	and.w	r3, r3, #3
 800578c:	b2da      	uxtb	r2, r3
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005796:	0e9b      	lsrs	r3, r3, #26
 8005798:	b2db      	uxtb	r3, r3
 800579a:	f003 0307 	and.w	r3, r3, #7
 800579e:	b2da      	uxtb	r2, r3
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a8:	0d9b      	lsrs	r3, r3, #22
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	f003 030f 	and.w	r3, r3, #15
 80057b0:	b2da      	uxtb	r2, r3
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ba:	0d5b      	lsrs	r3, r3, #21
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	f003 0301 	and.w	r3, r3, #1
 80057c2:	b2da      	uxtb	r2, r3
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d6:	0c1b      	lsrs	r3, r3, #16
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	b2da      	uxtb	r2, r3
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ea:	0bdb      	lsrs	r3, r3, #15
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	b2da      	uxtb	r2, r3
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057fe:	0b9b      	lsrs	r3, r3, #14
 8005800:	b2db      	uxtb	r3, r3
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	b2da      	uxtb	r2, r3
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005812:	0b5b      	lsrs	r3, r3, #13
 8005814:	b2db      	uxtb	r3, r3
 8005816:	f003 0301 	and.w	r3, r3, #1
 800581a:	b2da      	uxtb	r2, r3
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005826:	0b1b      	lsrs	r3, r3, #12
 8005828:	b2db      	uxtb	r3, r3
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	b2da      	uxtb	r2, r3
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800583a:	0a9b      	lsrs	r3, r3, #10
 800583c:	b2db      	uxtb	r3, r3
 800583e:	f003 0303 	and.w	r3, r3, #3
 8005842:	b2da      	uxtb	r2, r3
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800584e:	0a1b      	lsrs	r3, r3, #8
 8005850:	b2db      	uxtb	r3, r3
 8005852:	f003 0303 	and.w	r3, r3, #3
 8005856:	b2da      	uxtb	r2, r3
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005862:	085b      	lsrs	r3, r3, #1
 8005864:	b2db      	uxtb	r3, r3
 8005866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800586a:	b2da      	uxtb	r2, r3
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	2201      	movs	r2, #1
 8005876:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr
 8005888:	004005ff 	.word	0x004005ff

0800588c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80058e4:	b5b0      	push	{r4, r5, r7, lr}
 80058e6:	b08e      	sub	sp, #56	; 0x38
 80058e8:	af04      	add	r7, sp, #16
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80058ee:	2300      	movs	r3, #0
 80058f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2203      	movs	r2, #3
 80058f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005900:	2b03      	cmp	r3, #3
 8005902:	d02e      	beq.n	8005962 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800590a:	d106      	bne.n	800591a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005910:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	639a      	str	r2, [r3, #56]	; 0x38
 8005918:	e029      	b.n	800596e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005920:	d10a      	bne.n	8005938 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 fb2a 	bl	8005f7c <SD_WideBus_Enable>
 8005928:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800592e:	6a3b      	ldr	r3, [r7, #32]
 8005930:	431a      	orrs	r2, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	639a      	str	r2, [r3, #56]	; 0x38
 8005936:	e01a      	b.n	800596e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d10a      	bne.n	8005954 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 fb67 	bl	8006012 <SD_WideBus_Disable>
 8005944:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800594a:	6a3b      	ldr	r3, [r7, #32]
 800594c:	431a      	orrs	r2, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	639a      	str	r2, [r3, #56]	; 0x38
 8005952:	e00c      	b.n	800596e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005958:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	639a      	str	r2, [r3, #56]	; 0x38
 8005960:	e005      	b.n	800596e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005966:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00b      	beq.n	800598e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a26      	ldr	r2, [pc, #152]	; (8005a14 <HAL_SD_ConfigWideBusOperation+0x130>)
 800597c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2201      	movs	r2, #1
 8005982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800598c:	e01f      	b.n	80059ce <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	695b      	ldr	r3, [r3, #20]
 80059a8:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681d      	ldr	r5, [r3, #0]
 80059b4:	466c      	mov	r4, sp
 80059b6:	f107 0314 	add.w	r3, r7, #20
 80059ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80059be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80059c2:	f107 0308 	add.w	r3, r7, #8
 80059c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059c8:	4628      	mov	r0, r5
 80059ca:	f001 f9db 	bl	8006d84 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80059d6:	4618      	mov	r0, r3
 80059d8:	f001 fab0 	bl	8006f3c <SDMMC_CmdBlockLength>
 80059dc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80059de:	6a3b      	ldr	r3, [r7, #32]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00c      	beq.n	80059fe <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a0a      	ldr	r2, [pc, #40]	; (8005a14 <HAL_SD_ConfigWideBusOperation+0x130>)
 80059ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059f0:	6a3b      	ldr	r3, [r7, #32]
 80059f2:	431a      	orrs	r2, r3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8005a06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3728      	adds	r7, #40	; 0x28
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bdb0      	pop	{r4, r5, r7, pc}
 8005a12:	bf00      	nop
 8005a14:	004005ff 	.word	0x004005ff

08005a18 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b086      	sub	sp, #24
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005a20:	2300      	movs	r3, #0
 8005a22:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005a24:	f107 030c 	add.w	r3, r7, #12
 8005a28:	4619      	mov	r1, r3
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 fa7e 	bl	8005f2c <SD_SendStatus>
 8005a30:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d005      	beq.n	8005a44 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	431a      	orrs	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	0a5b      	lsrs	r3, r3, #9
 8005a48:	f003 030f 	and.w	r3, r3, #15
 8005a4c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005a4e:	693b      	ldr	r3, [r7, #16]
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3718      	adds	r7, #24
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a64:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a74:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005a76:	bf00      	nop
 8005a78:	3714      	adds	r7, #20
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr

08005a82 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b084      	sub	sp, #16
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a94:	2b82      	cmp	r3, #130	; 0x82
 8005a96:	d111      	bne.n	8005abc <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f001 faf7 	bl	8007090 <SDMMC_CmdStopTransfer>
 8005aa2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d008      	beq.n	8005abc <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	431a      	orrs	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f7ff fd3a 	bl	8005530 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f022 0208 	bic.w	r2, r2, #8
 8005aca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f240 523a 	movw	r2, #1338	; 0x53a
 8005ad4:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	f001 ff69 	bl	80079bc <HAL_SD_RxCpltCallback>
#endif
}
 8005aea:	bf00      	nop
 8005aec:	3710      	adds	r7, #16
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
	...

08005af4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b086      	sub	sp, #24
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b00:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7fc fdd0 	bl	80026a8 <HAL_DMA_GetError>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d03e      	beq.n	8005b8c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b14:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b1c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d002      	beq.n	8005b2a <SD_DMAError+0x36>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d12d      	bne.n	8005b86 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a19      	ldr	r2, [pc, #100]	; (8005b94 <SD_DMAError+0xa0>)
 8005b30:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005b40:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b46:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8005b4e:	6978      	ldr	r0, [r7, #20]
 8005b50:	f7ff ff62 	bl	8005a18 <HAL_SD_GetCardState>
 8005b54:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	2b06      	cmp	r3, #6
 8005b5a:	d002      	beq.n	8005b62 <SD_DMAError+0x6e>
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	2b05      	cmp	r3, #5
 8005b60:	d10a      	bne.n	8005b78 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4618      	mov	r0, r3
 8005b68:	f001 fa92 	bl	8007090 <SDMMC_CmdStopTransfer>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b72:	431a      	orrs	r2, r3
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	2200      	movs	r2, #0
 8005b84:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8005b86:	6978      	ldr	r0, [r7, #20]
 8005b88:	f7ff fcd2 	bl	8005530 <HAL_SD_ErrorCallback>
#endif
  }
}
 8005b8c:	bf00      	nop
 8005b8e:	3718      	adds	r7, #24
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	004005ff 	.word	0x004005ff

08005b98 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f240 523a 	movw	r2, #1338	; 0x53a
 8005bae:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f7ff ff31 	bl	8005a18 <HAL_SD_GetCardState>
 8005bb6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	2b06      	cmp	r3, #6
 8005bca:	d002      	beq.n	8005bd2 <SD_DMATxAbort+0x3a>
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	2b05      	cmp	r3, #5
 8005bd0:	d10a      	bne.n	8005be8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f001 fa5a 	bl	8007090 <SDMMC_CmdStopTransfer>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be2:	431a      	orrs	r2, r3
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d103      	bne.n	8005bf8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f001 fecf 	bl	8007994 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005bf6:	e002      	b.n	8005bfe <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f7ff fc99 	bl	8005530 <HAL_SD_ErrorCallback>
}
 8005bfe:	bf00      	nop
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8005c06:	b580      	push	{r7, lr}
 8005c08:	b084      	sub	sp, #16
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c12:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f240 523a 	movw	r2, #1338	; 0x53a
 8005c1c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f7ff fefa 	bl	8005a18 <HAL_SD_GetCardState>
 8005c24:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	2b06      	cmp	r3, #6
 8005c38:	d002      	beq.n	8005c40 <SD_DMARxAbort+0x3a>
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	2b05      	cmp	r3, #5
 8005c3e:	d10a      	bne.n	8005c56 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4618      	mov	r0, r3
 8005c46:	f001 fa23 	bl	8007090 <SDMMC_CmdStopTransfer>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c50:	431a      	orrs	r2, r3
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d103      	bne.n	8005c66 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f001 fe98 	bl	8007994 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005c64:	e002      	b.n	8005c6c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f7ff fc62 	bl	8005530 <HAL_SD_ErrorCallback>
}
 8005c6c:	bf00      	nop
 8005c6e:	3710      	adds	r7, #16
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005c74:	b5b0      	push	{r4, r5, r7, lr}
 8005c76:	b094      	sub	sp, #80	; 0x50
 8005c78:	af04      	add	r7, sp, #16
 8005c7a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4618      	mov	r0, r3
 8005c86:	f001 f8d5 	bl	8006e34 <SDMMC_GetPowerState>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d102      	bne.n	8005c96 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005c90:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005c94:	e0b8      	b.n	8005e08 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c9a:	2b03      	cmp	r3, #3
 8005c9c:	d02f      	beq.n	8005cfe <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f001 faff 	bl	80072a6 <SDMMC_CmdSendCID>
 8005ca8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d001      	beq.n	8005cb4 <SD_InitCard+0x40>
    {
      return errorstate;
 8005cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cb2:	e0a9      	b.n	8005e08 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2100      	movs	r1, #0
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f001 f8ff 	bl	8006ebe <SDMMC_GetResponse>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2104      	movs	r1, #4
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f001 f8f6 	bl	8006ebe <SDMMC_GetResponse>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2108      	movs	r1, #8
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f001 f8ed 	bl	8006ebe <SDMMC_GetResponse>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	210c      	movs	r1, #12
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f001 f8e4 	bl	8006ebe <SDMMC_GetResponse>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d02:	2b03      	cmp	r3, #3
 8005d04:	d00d      	beq.n	8005d22 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f107 020e 	add.w	r2, r7, #14
 8005d0e:	4611      	mov	r1, r2
 8005d10:	4618      	mov	r0, r3
 8005d12:	f001 fb05 	bl	8007320 <SDMMC_CmdSetRelAdd>
 8005d16:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d001      	beq.n	8005d22 <SD_InitCard+0xae>
    {
      return errorstate;
 8005d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d20:	e072      	b.n	8005e08 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d26:	2b03      	cmp	r3, #3
 8005d28:	d036      	beq.n	8005d98 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005d2a:	89fb      	ldrh	r3, [r7, #14]
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d3a:	041b      	lsls	r3, r3, #16
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	4610      	mov	r0, r2
 8005d40:	f001 facf 	bl	80072e2 <SDMMC_CmdSendCSD>
 8005d44:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d001      	beq.n	8005d50 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d4e:	e05b      	b.n	8005e08 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2100      	movs	r1, #0
 8005d56:	4618      	mov	r0, r3
 8005d58:	f001 f8b1 	bl	8006ebe <SDMMC_GetResponse>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2104      	movs	r1, #4
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f001 f8a8 	bl	8006ebe <SDMMC_GetResponse>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2108      	movs	r1, #8
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f001 f89f 	bl	8006ebe <SDMMC_GetResponse>
 8005d80:	4602      	mov	r2, r0
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	210c      	movs	r1, #12
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f001 f896 	bl	8006ebe <SDMMC_GetResponse>
 8005d92:	4602      	mov	r2, r0
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2104      	movs	r1, #4
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f001 f88d 	bl	8006ebe <SDMMC_GetResponse>
 8005da4:	4603      	mov	r3, r0
 8005da6:	0d1a      	lsrs	r2, r3, #20
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005dac:	f107 0310 	add.w	r3, r7, #16
 8005db0:	4619      	mov	r1, r3
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f7ff fbc6 	bl	8005544 <HAL_SD_GetCardCSD>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d002      	beq.n	8005dc4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005dbe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005dc2:	e021      	b.n	8005e08 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6819      	ldr	r1, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dcc:	041b      	lsls	r3, r3, #16
 8005dce:	2200      	movs	r2, #0
 8005dd0:	461c      	mov	r4, r3
 8005dd2:	4615      	mov	r5, r2
 8005dd4:	4622      	mov	r2, r4
 8005dd6:	462b      	mov	r3, r5
 8005dd8:	4608      	mov	r0, r1
 8005dda:	f001 f97b 	bl	80070d4 <SDMMC_CmdSelDesel>
 8005dde:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d001      	beq.n	8005dea <SD_InitCard+0x176>
  {
    return errorstate;
 8005de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005de8:	e00e      	b.n	8005e08 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681d      	ldr	r5, [r3, #0]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	466c      	mov	r4, sp
 8005df2:	f103 0210 	add.w	r2, r3, #16
 8005df6:	ca07      	ldmia	r2, {r0, r1, r2}
 8005df8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005dfc:	3304      	adds	r3, #4
 8005dfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e00:	4628      	mov	r0, r5
 8005e02:	f000 ffbf 	bl	8006d84 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3740      	adds	r7, #64	; 0x40
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bdb0      	pop	{r4, r5, r7, pc}

08005e10 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	617b      	str	r3, [r7, #20]
 8005e20:	2300      	movs	r3, #0
 8005e22:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f001 f976 	bl	800711a <SDMMC_CmdGoIdleState>
 8005e2e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d001      	beq.n	8005e3a <SD_PowerON+0x2a>
  {
    return errorstate;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	e072      	b.n	8005f20 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f001 f989 	bl	8007156 <SDMMC_CmdOperCond>
 8005e44:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00d      	beq.n	8005e68 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4618      	mov	r0, r3
 8005e58:	f001 f95f 	bl	800711a <SDMMC_CmdGoIdleState>
 8005e5c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d004      	beq.n	8005e6e <SD_PowerON+0x5e>
    {
      return errorstate;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	e05b      	b.n	8005f20 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d137      	bne.n	8005ee6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f001 f989 	bl	8007194 <SDMMC_CmdAppCommand>
 8005e82:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d02d      	beq.n	8005ee6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005e8a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005e8e:	e047      	b.n	8005f20 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2100      	movs	r1, #0
 8005e96:	4618      	mov	r0, r3
 8005e98:	f001 f97c 	bl	8007194 <SDMMC_CmdAppCommand>
 8005e9c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d001      	beq.n	8005ea8 <SD_PowerON+0x98>
    {
      return errorstate;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	e03b      	b.n	8005f20 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	491e      	ldr	r1, [pc, #120]	; (8005f28 <SD_PowerON+0x118>)
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f001 f992 	bl	80071d8 <SDMMC_CmdAppOperCommand>
 8005eb4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d002      	beq.n	8005ec2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005ebc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005ec0:	e02e      	b.n	8005f20 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2100      	movs	r1, #0
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f000 fff8 	bl	8006ebe <SDMMC_GetResponse>
 8005ece:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	0fdb      	lsrs	r3, r3, #31
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d101      	bne.n	8005edc <SD_PowerON+0xcc>
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e000      	b.n	8005ede <SD_PowerON+0xce>
 8005edc:	2300      	movs	r3, #0
 8005ede:	613b      	str	r3, [r7, #16]

    count++;
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d802      	bhi.n	8005ef6 <SD_PowerON+0xe6>
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d0cc      	beq.n	8005e90 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d902      	bls.n	8005f06 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005f00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f04:	e00c      	b.n	8005f20 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d003      	beq.n	8005f18 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	645a      	str	r2, [r3, #68]	; 0x44
 8005f16:	e002      	b.n	8005f1e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3718      	adds	r7, #24
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	c1100000 	.word	0xc1100000

08005f2c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d102      	bne.n	8005f42 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005f3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005f40:	e018      	b.n	8005f74 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f4a:	041b      	lsls	r3, r3, #16
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	4610      	mov	r0, r2
 8005f50:	f001 fa07 	bl	8007362 <SDMMC_CmdSendStatus>
 8005f54:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d001      	beq.n	8005f60 <SD_SendStatus+0x34>
  {
    return errorstate;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	e009      	b.n	8005f74 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2100      	movs	r1, #0
 8005f66:	4618      	mov	r0, r3
 8005f68:	f000 ffa9 	bl	8006ebe <SDMMC_GetResponse>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3710      	adds	r7, #16
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b086      	sub	sp, #24
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005f84:	2300      	movs	r3, #0
 8005f86:	60fb      	str	r3, [r7, #12]
 8005f88:	2300      	movs	r3, #0
 8005f8a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2100      	movs	r1, #0
 8005f92:	4618      	mov	r0, r3
 8005f94:	f000 ff93 	bl	8006ebe <SDMMC_GetResponse>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005fa2:	d102      	bne.n	8005faa <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005fa4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005fa8:	e02f      	b.n	800600a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005faa:	f107 030c 	add.w	r3, r7, #12
 8005fae:	4619      	mov	r1, r3
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 f879 	bl	80060a8 <SD_FindSCR>
 8005fb6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d001      	beq.n	8005fc2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	e023      	b.n	800600a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d01c      	beq.n	8006006 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fd4:	041b      	lsls	r3, r3, #16
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	4610      	mov	r0, r2
 8005fda:	f001 f8db 	bl	8007194 <SDMMC_CmdAppCommand>
 8005fde:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d001      	beq.n	8005fea <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	e00f      	b.n	800600a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2102      	movs	r1, #2
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f001 f915 	bl	8007220 <SDMMC_CmdBusWidth>
 8005ff6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d001      	beq.n	8006002 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	e003      	b.n	800600a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006002:	2300      	movs	r3, #0
 8006004:	e001      	b.n	800600a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006006:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800600a:	4618      	mov	r0, r3
 800600c:	3718      	adds	r7, #24
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}

08006012 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006012:	b580      	push	{r7, lr}
 8006014:	b086      	sub	sp, #24
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800601a:	2300      	movs	r3, #0
 800601c:	60fb      	str	r3, [r7, #12]
 800601e:	2300      	movs	r3, #0
 8006020:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2100      	movs	r1, #0
 8006028:	4618      	mov	r0, r3
 800602a:	f000 ff48 	bl	8006ebe <SDMMC_GetResponse>
 800602e:	4603      	mov	r3, r0
 8006030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006034:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006038:	d102      	bne.n	8006040 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800603a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800603e:	e02f      	b.n	80060a0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006040:	f107 030c 	add.w	r3, r7, #12
 8006044:	4619      	mov	r1, r3
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 f82e 	bl	80060a8 <SD_FindSCR>
 800604c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d001      	beq.n	8006058 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	e023      	b.n	80060a0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d01c      	beq.n	800609c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800606a:	041b      	lsls	r3, r3, #16
 800606c:	4619      	mov	r1, r3
 800606e:	4610      	mov	r0, r2
 8006070:	f001 f890 	bl	8007194 <SDMMC_CmdAppCommand>
 8006074:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d001      	beq.n	8006080 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	e00f      	b.n	80060a0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2100      	movs	r1, #0
 8006086:	4618      	mov	r0, r3
 8006088:	f001 f8ca 	bl	8007220 <SDMMC_CmdBusWidth>
 800608c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d001      	beq.n	8006098 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	e003      	b.n	80060a0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006098:	2300      	movs	r3, #0
 800609a:	e001      	b.n	80060a0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800609c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3718      	adds	r7, #24
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80060a8:	b590      	push	{r4, r7, lr}
 80060aa:	b08f      	sub	sp, #60	; 0x3c
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80060b2:	f7fb fefd 	bl	8001eb0 <HAL_GetTick>
 80060b6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80060b8:	2300      	movs	r3, #0
 80060ba:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80060bc:	2300      	movs	r3, #0
 80060be:	60bb      	str	r3, [r7, #8]
 80060c0:	2300      	movs	r3, #0
 80060c2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2108      	movs	r1, #8
 80060ce:	4618      	mov	r0, r3
 80060d0:	f000 ff34 	bl	8006f3c <SDMMC_CmdBlockLength>
 80060d4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80060d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d001      	beq.n	80060e0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80060dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060de:	e0b2      	b.n	8006246 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060e8:	041b      	lsls	r3, r3, #16
 80060ea:	4619      	mov	r1, r3
 80060ec:	4610      	mov	r0, r2
 80060ee:	f001 f851 	bl	8007194 <SDMMC_CmdAppCommand>
 80060f2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80060f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d001      	beq.n	80060fe <SD_FindSCR+0x56>
  {
    return errorstate;
 80060fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fc:	e0a3      	b.n	8006246 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80060fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006102:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006104:	2308      	movs	r3, #8
 8006106:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8006108:	2330      	movs	r3, #48	; 0x30
 800610a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800610c:	2302      	movs	r3, #2
 800610e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006110:	2300      	movs	r3, #0
 8006112:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006114:	2301      	movs	r3, #1
 8006116:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f107 0210 	add.w	r2, r7, #16
 8006120:	4611      	mov	r1, r2
 8006122:	4618      	mov	r0, r3
 8006124:	f000 fede 	bl	8006ee4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4618      	mov	r0, r3
 800612e:	f001 f899 	bl	8007264 <SDMMC_CmdSendSCR>
 8006132:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006136:	2b00      	cmp	r3, #0
 8006138:	d02a      	beq.n	8006190 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800613a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613c:	e083      	b.n	8006246 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00f      	beq.n	800616c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6819      	ldr	r1, [r3, #0]
 8006150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	f107 0208 	add.w	r2, r7, #8
 8006158:	18d4      	adds	r4, r2, r3
 800615a:	4608      	mov	r0, r1
 800615c:	f000 fe3e 	bl	8006ddc <SDMMC_ReadFIFO>
 8006160:	4603      	mov	r3, r0
 8006162:	6023      	str	r3, [r4, #0]
      index++;
 8006164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006166:	3301      	adds	r3, #1
 8006168:	637b      	str	r3, [r7, #52]	; 0x34
 800616a:	e006      	b.n	800617a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006172:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d012      	beq.n	80061a0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800617a:	f7fb fe99 	bl	8001eb0 <HAL_GetTick>
 800617e:	4602      	mov	r2, r0
 8006180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006188:	d102      	bne.n	8006190 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800618a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800618e:	e05a      	b.n	8006246 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006196:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800619a:	2b00      	cmp	r3, #0
 800619c:	d0cf      	beq.n	800613e <SD_FindSCR+0x96>
 800619e:	e000      	b.n	80061a2 <SD_FindSCR+0xfa>
      break;
 80061a0:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061a8:	f003 0308 	and.w	r3, r3, #8
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d005      	beq.n	80061bc <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2208      	movs	r2, #8
 80061b6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80061b8:	2308      	movs	r3, #8
 80061ba:	e044      	b.n	8006246 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061c2:	f003 0302 	and.w	r3, r3, #2
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d005      	beq.n	80061d6 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2202      	movs	r2, #2
 80061d0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80061d2:	2302      	movs	r3, #2
 80061d4:	e037      	b.n	8006246 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061dc:	f003 0320 	and.w	r3, r3, #32
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d005      	beq.n	80061f0 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2220      	movs	r2, #32
 80061ea:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80061ec:	2320      	movs	r3, #32
 80061ee:	e02a      	b.n	8006246 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f240 523a 	movw	r2, #1338	; 0x53a
 80061f8:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	061a      	lsls	r2, r3, #24
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	021b      	lsls	r3, r3, #8
 8006202:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006206:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	0a1b      	lsrs	r3, r3, #8
 800620c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006210:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	0e1b      	lsrs	r3, r3, #24
 8006216:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800621a:	601a      	str	r2, [r3, #0]
    scr++;
 800621c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800621e:	3304      	adds	r3, #4
 8006220:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	061a      	lsls	r2, r3, #24
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	021b      	lsls	r3, r3, #8
 800622a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800622e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	0a1b      	lsrs	r3, r3, #8
 8006234:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006238:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	0e1b      	lsrs	r3, r3, #24
 800623e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006242:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	373c      	adds	r7, #60	; 0x3c
 800624a:	46bd      	mov	sp, r7
 800624c:	bd90      	pop	{r4, r7, pc}

0800624e <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800624e:	b580      	push	{r7, lr}
 8006250:	b086      	sub	sp, #24
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800625a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006260:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d03f      	beq.n	80062e8 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8006268:	2300      	movs	r3, #0
 800626a:	617b      	str	r3, [r7, #20]
 800626c:	e033      	b.n	80062d6 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4618      	mov	r0, r3
 8006274:	f000 fdb2 	bl	8006ddc <SDMMC_ReadFIFO>
 8006278:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	b2da      	uxtb	r2, r3
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	3301      	adds	r3, #1
 8006286:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	3b01      	subs	r3, #1
 800628c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	0a1b      	lsrs	r3, r3, #8
 8006292:	b2da      	uxtb	r2, r3
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	3301      	adds	r3, #1
 800629c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	3b01      	subs	r3, #1
 80062a2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	0c1b      	lsrs	r3, r3, #16
 80062a8:	b2da      	uxtb	r2, r3
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	701a      	strb	r2, [r3, #0]
      tmp++;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	3301      	adds	r3, #1
 80062b2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	3b01      	subs	r3, #1
 80062b8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	0e1b      	lsrs	r3, r3, #24
 80062be:	b2da      	uxtb	r2, r3
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	3301      	adds	r3, #1
 80062c8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	3b01      	subs	r3, #1
 80062ce:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	3301      	adds	r3, #1
 80062d4:	617b      	str	r3, [r7, #20]
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	2b07      	cmp	r3, #7
 80062da:	d9c8      	bls.n	800626e <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	693a      	ldr	r2, [r7, #16]
 80062e6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80062e8:	bf00      	nop
 80062ea:	3718      	adds	r7, #24
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a1b      	ldr	r3, [r3, #32]
 80062fc:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006302:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d043      	beq.n	8006392 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800630a:	2300      	movs	r3, #0
 800630c:	617b      	str	r3, [r7, #20]
 800630e:	e037      	b.n	8006380 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	3301      	adds	r3, #1
 800631a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	3b01      	subs	r3, #1
 8006320:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	021a      	lsls	r2, r3, #8
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	4313      	orrs	r3, r2
 800632c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	3301      	adds	r3, #1
 8006332:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	3b01      	subs	r3, #1
 8006338:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	041a      	lsls	r2, r3, #16
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	4313      	orrs	r3, r2
 8006344:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	3301      	adds	r3, #1
 800634a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	3b01      	subs	r3, #1
 8006350:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	061a      	lsls	r2, r3, #24
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	4313      	orrs	r3, r2
 800635c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	3301      	adds	r3, #1
 8006362:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	3b01      	subs	r3, #1
 8006368:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f107 0208 	add.w	r2, r7, #8
 8006372:	4611      	mov	r1, r2
 8006374:	4618      	mov	r0, r3
 8006376:	f000 fd3e 	bl	8006df6 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	3301      	adds	r3, #1
 800637e:	617b      	str	r3, [r7, #20]
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	2b07      	cmp	r3, #7
 8006384:	d9c4      	bls.n	8006310 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	693a      	ldr	r2, [r7, #16]
 8006390:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8006392:	bf00      	nop
 8006394:	3718      	adds	r7, #24
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b082      	sub	sp, #8
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d101      	bne.n	80063ac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e040      	b.n	800642e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d106      	bne.n	80063c2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f7fb fcb9 	bl	8001d34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2224      	movs	r2, #36	; 0x24
 80063c6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f022 0201 	bic.w	r2, r2, #1
 80063d6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 f8bf 	bl	800655c <UART_SetConfig>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d101      	bne.n	80063e8 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e022      	b.n	800642e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d002      	beq.n	80063f6 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 fb17 	bl	8006a24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006404:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	689a      	ldr	r2, [r3, #8]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006414:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f042 0201 	orr.w	r2, r2, #1
 8006424:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 fb9e 	bl	8006b68 <UART_CheckIdleState>
 800642c:	4603      	mov	r3, r0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3708      	adds	r7, #8
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006436:	b580      	push	{r7, lr}
 8006438:	b08a      	sub	sp, #40	; 0x28
 800643a:	af02      	add	r7, sp, #8
 800643c:	60f8      	str	r0, [r7, #12]
 800643e:	60b9      	str	r1, [r7, #8]
 8006440:	603b      	str	r3, [r7, #0]
 8006442:	4613      	mov	r3, r2
 8006444:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800644a:	2b20      	cmp	r3, #32
 800644c:	f040 8081 	bne.w	8006552 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d002      	beq.n	800645c <HAL_UART_Transmit+0x26>
 8006456:	88fb      	ldrh	r3, [r7, #6]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d101      	bne.n	8006460 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	e079      	b.n	8006554 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006466:	2b01      	cmp	r3, #1
 8006468:	d101      	bne.n	800646e <HAL_UART_Transmit+0x38>
 800646a:	2302      	movs	r3, #2
 800646c:	e072      	b.n	8006554 <HAL_UART_Transmit+0x11e>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2201      	movs	r2, #1
 8006472:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2221      	movs	r2, #33	; 0x21
 8006482:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006484:	f7fb fd14 	bl	8001eb0 <HAL_GetTick>
 8006488:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	88fa      	ldrh	r2, [r7, #6]
 800648e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	88fa      	ldrh	r2, [r7, #6]
 8006496:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064a2:	d108      	bne.n	80064b6 <HAL_UART_Transmit+0x80>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d104      	bne.n	80064b6 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80064ac:	2300      	movs	r3, #0
 80064ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	61bb      	str	r3, [r7, #24]
 80064b4:	e003      	b.n	80064be <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064ba:	2300      	movs	r3, #0
 80064bc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80064c6:	e02c      	b.n	8006522 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	9300      	str	r3, [sp, #0]
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	2200      	movs	r2, #0
 80064d0:	2180      	movs	r1, #128	; 0x80
 80064d2:	68f8      	ldr	r0, [r7, #12]
 80064d4:	f000 fb91 	bl	8006bfa <UART_WaitOnFlagUntilTimeout>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d001      	beq.n	80064e2 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e038      	b.n	8006554 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d10b      	bne.n	8006500 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	881b      	ldrh	r3, [r3, #0]
 80064ec:	461a      	mov	r2, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064f6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	3302      	adds	r3, #2
 80064fc:	61bb      	str	r3, [r7, #24]
 80064fe:	e007      	b.n	8006510 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	781a      	ldrb	r2, [r3, #0]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	3301      	adds	r3, #1
 800650e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006516:	b29b      	uxth	r3, r3
 8006518:	3b01      	subs	r3, #1
 800651a:	b29a      	uxth	r2, r3
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006528:	b29b      	uxth	r3, r3
 800652a:	2b00      	cmp	r3, #0
 800652c:	d1cc      	bne.n	80064c8 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	2200      	movs	r2, #0
 8006536:	2140      	movs	r1, #64	; 0x40
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f000 fb5e 	bl	8006bfa <UART_WaitOnFlagUntilTimeout>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d001      	beq.n	8006548 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e005      	b.n	8006554 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2220      	movs	r2, #32
 800654c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800654e:	2300      	movs	r3, #0
 8006550:	e000      	b.n	8006554 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006552:	2302      	movs	r3, #2
  }
}
 8006554:	4618      	mov	r0, r3
 8006556:	3720      	adds	r7, #32
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b088      	sub	sp, #32
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006564:	2300      	movs	r3, #0
 8006566:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	689a      	ldr	r2, [r3, #8]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	431a      	orrs	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	431a      	orrs	r2, r3
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	69db      	ldr	r3, [r3, #28]
 800657c:	4313      	orrs	r3, r2
 800657e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	4ba6      	ldr	r3, [pc, #664]	; (8006820 <UART_SetConfig+0x2c4>)
 8006588:	4013      	ands	r3, r2
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	6812      	ldr	r2, [r2, #0]
 800658e:	6979      	ldr	r1, [r7, #20]
 8006590:	430b      	orrs	r3, r1
 8006592:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	68da      	ldr	r2, [r3, #12]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	430a      	orrs	r2, r1
 80065a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a1b      	ldr	r3, [r3, #32]
 80065b4:	697a      	ldr	r2, [r7, #20]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	697a      	ldr	r2, [r7, #20]
 80065ca:	430a      	orrs	r2, r1
 80065cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a94      	ldr	r2, [pc, #592]	; (8006824 <UART_SetConfig+0x2c8>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d120      	bne.n	800661a <UART_SetConfig+0xbe>
 80065d8:	4b93      	ldr	r3, [pc, #588]	; (8006828 <UART_SetConfig+0x2cc>)
 80065da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065de:	f003 0303 	and.w	r3, r3, #3
 80065e2:	2b03      	cmp	r3, #3
 80065e4:	d816      	bhi.n	8006614 <UART_SetConfig+0xb8>
 80065e6:	a201      	add	r2, pc, #4	; (adr r2, 80065ec <UART_SetConfig+0x90>)
 80065e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ec:	080065fd 	.word	0x080065fd
 80065f0:	08006609 	.word	0x08006609
 80065f4:	08006603 	.word	0x08006603
 80065f8:	0800660f 	.word	0x0800660f
 80065fc:	2301      	movs	r3, #1
 80065fe:	77fb      	strb	r3, [r7, #31]
 8006600:	e150      	b.n	80068a4 <UART_SetConfig+0x348>
 8006602:	2302      	movs	r3, #2
 8006604:	77fb      	strb	r3, [r7, #31]
 8006606:	e14d      	b.n	80068a4 <UART_SetConfig+0x348>
 8006608:	2304      	movs	r3, #4
 800660a:	77fb      	strb	r3, [r7, #31]
 800660c:	e14a      	b.n	80068a4 <UART_SetConfig+0x348>
 800660e:	2308      	movs	r3, #8
 8006610:	77fb      	strb	r3, [r7, #31]
 8006612:	e147      	b.n	80068a4 <UART_SetConfig+0x348>
 8006614:	2310      	movs	r3, #16
 8006616:	77fb      	strb	r3, [r7, #31]
 8006618:	e144      	b.n	80068a4 <UART_SetConfig+0x348>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a83      	ldr	r2, [pc, #524]	; (800682c <UART_SetConfig+0x2d0>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d132      	bne.n	800668a <UART_SetConfig+0x12e>
 8006624:	4b80      	ldr	r3, [pc, #512]	; (8006828 <UART_SetConfig+0x2cc>)
 8006626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800662a:	f003 030c 	and.w	r3, r3, #12
 800662e:	2b0c      	cmp	r3, #12
 8006630:	d828      	bhi.n	8006684 <UART_SetConfig+0x128>
 8006632:	a201      	add	r2, pc, #4	; (adr r2, 8006638 <UART_SetConfig+0xdc>)
 8006634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006638:	0800666d 	.word	0x0800666d
 800663c:	08006685 	.word	0x08006685
 8006640:	08006685 	.word	0x08006685
 8006644:	08006685 	.word	0x08006685
 8006648:	08006679 	.word	0x08006679
 800664c:	08006685 	.word	0x08006685
 8006650:	08006685 	.word	0x08006685
 8006654:	08006685 	.word	0x08006685
 8006658:	08006673 	.word	0x08006673
 800665c:	08006685 	.word	0x08006685
 8006660:	08006685 	.word	0x08006685
 8006664:	08006685 	.word	0x08006685
 8006668:	0800667f 	.word	0x0800667f
 800666c:	2300      	movs	r3, #0
 800666e:	77fb      	strb	r3, [r7, #31]
 8006670:	e118      	b.n	80068a4 <UART_SetConfig+0x348>
 8006672:	2302      	movs	r3, #2
 8006674:	77fb      	strb	r3, [r7, #31]
 8006676:	e115      	b.n	80068a4 <UART_SetConfig+0x348>
 8006678:	2304      	movs	r3, #4
 800667a:	77fb      	strb	r3, [r7, #31]
 800667c:	e112      	b.n	80068a4 <UART_SetConfig+0x348>
 800667e:	2308      	movs	r3, #8
 8006680:	77fb      	strb	r3, [r7, #31]
 8006682:	e10f      	b.n	80068a4 <UART_SetConfig+0x348>
 8006684:	2310      	movs	r3, #16
 8006686:	77fb      	strb	r3, [r7, #31]
 8006688:	e10c      	b.n	80068a4 <UART_SetConfig+0x348>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a68      	ldr	r2, [pc, #416]	; (8006830 <UART_SetConfig+0x2d4>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d120      	bne.n	80066d6 <UART_SetConfig+0x17a>
 8006694:	4b64      	ldr	r3, [pc, #400]	; (8006828 <UART_SetConfig+0x2cc>)
 8006696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800669a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800669e:	2b30      	cmp	r3, #48	; 0x30
 80066a0:	d013      	beq.n	80066ca <UART_SetConfig+0x16e>
 80066a2:	2b30      	cmp	r3, #48	; 0x30
 80066a4:	d814      	bhi.n	80066d0 <UART_SetConfig+0x174>
 80066a6:	2b20      	cmp	r3, #32
 80066a8:	d009      	beq.n	80066be <UART_SetConfig+0x162>
 80066aa:	2b20      	cmp	r3, #32
 80066ac:	d810      	bhi.n	80066d0 <UART_SetConfig+0x174>
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d002      	beq.n	80066b8 <UART_SetConfig+0x15c>
 80066b2:	2b10      	cmp	r3, #16
 80066b4:	d006      	beq.n	80066c4 <UART_SetConfig+0x168>
 80066b6:	e00b      	b.n	80066d0 <UART_SetConfig+0x174>
 80066b8:	2300      	movs	r3, #0
 80066ba:	77fb      	strb	r3, [r7, #31]
 80066bc:	e0f2      	b.n	80068a4 <UART_SetConfig+0x348>
 80066be:	2302      	movs	r3, #2
 80066c0:	77fb      	strb	r3, [r7, #31]
 80066c2:	e0ef      	b.n	80068a4 <UART_SetConfig+0x348>
 80066c4:	2304      	movs	r3, #4
 80066c6:	77fb      	strb	r3, [r7, #31]
 80066c8:	e0ec      	b.n	80068a4 <UART_SetConfig+0x348>
 80066ca:	2308      	movs	r3, #8
 80066cc:	77fb      	strb	r3, [r7, #31]
 80066ce:	e0e9      	b.n	80068a4 <UART_SetConfig+0x348>
 80066d0:	2310      	movs	r3, #16
 80066d2:	77fb      	strb	r3, [r7, #31]
 80066d4:	e0e6      	b.n	80068a4 <UART_SetConfig+0x348>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a56      	ldr	r2, [pc, #344]	; (8006834 <UART_SetConfig+0x2d8>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d120      	bne.n	8006722 <UART_SetConfig+0x1c6>
 80066e0:	4b51      	ldr	r3, [pc, #324]	; (8006828 <UART_SetConfig+0x2cc>)
 80066e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80066ea:	2bc0      	cmp	r3, #192	; 0xc0
 80066ec:	d013      	beq.n	8006716 <UART_SetConfig+0x1ba>
 80066ee:	2bc0      	cmp	r3, #192	; 0xc0
 80066f0:	d814      	bhi.n	800671c <UART_SetConfig+0x1c0>
 80066f2:	2b80      	cmp	r3, #128	; 0x80
 80066f4:	d009      	beq.n	800670a <UART_SetConfig+0x1ae>
 80066f6:	2b80      	cmp	r3, #128	; 0x80
 80066f8:	d810      	bhi.n	800671c <UART_SetConfig+0x1c0>
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d002      	beq.n	8006704 <UART_SetConfig+0x1a8>
 80066fe:	2b40      	cmp	r3, #64	; 0x40
 8006700:	d006      	beq.n	8006710 <UART_SetConfig+0x1b4>
 8006702:	e00b      	b.n	800671c <UART_SetConfig+0x1c0>
 8006704:	2300      	movs	r3, #0
 8006706:	77fb      	strb	r3, [r7, #31]
 8006708:	e0cc      	b.n	80068a4 <UART_SetConfig+0x348>
 800670a:	2302      	movs	r3, #2
 800670c:	77fb      	strb	r3, [r7, #31]
 800670e:	e0c9      	b.n	80068a4 <UART_SetConfig+0x348>
 8006710:	2304      	movs	r3, #4
 8006712:	77fb      	strb	r3, [r7, #31]
 8006714:	e0c6      	b.n	80068a4 <UART_SetConfig+0x348>
 8006716:	2308      	movs	r3, #8
 8006718:	77fb      	strb	r3, [r7, #31]
 800671a:	e0c3      	b.n	80068a4 <UART_SetConfig+0x348>
 800671c:	2310      	movs	r3, #16
 800671e:	77fb      	strb	r3, [r7, #31]
 8006720:	e0c0      	b.n	80068a4 <UART_SetConfig+0x348>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a44      	ldr	r2, [pc, #272]	; (8006838 <UART_SetConfig+0x2dc>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d125      	bne.n	8006778 <UART_SetConfig+0x21c>
 800672c:	4b3e      	ldr	r3, [pc, #248]	; (8006828 <UART_SetConfig+0x2cc>)
 800672e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006736:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800673a:	d017      	beq.n	800676c <UART_SetConfig+0x210>
 800673c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006740:	d817      	bhi.n	8006772 <UART_SetConfig+0x216>
 8006742:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006746:	d00b      	beq.n	8006760 <UART_SetConfig+0x204>
 8006748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800674c:	d811      	bhi.n	8006772 <UART_SetConfig+0x216>
 800674e:	2b00      	cmp	r3, #0
 8006750:	d003      	beq.n	800675a <UART_SetConfig+0x1fe>
 8006752:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006756:	d006      	beq.n	8006766 <UART_SetConfig+0x20a>
 8006758:	e00b      	b.n	8006772 <UART_SetConfig+0x216>
 800675a:	2300      	movs	r3, #0
 800675c:	77fb      	strb	r3, [r7, #31]
 800675e:	e0a1      	b.n	80068a4 <UART_SetConfig+0x348>
 8006760:	2302      	movs	r3, #2
 8006762:	77fb      	strb	r3, [r7, #31]
 8006764:	e09e      	b.n	80068a4 <UART_SetConfig+0x348>
 8006766:	2304      	movs	r3, #4
 8006768:	77fb      	strb	r3, [r7, #31]
 800676a:	e09b      	b.n	80068a4 <UART_SetConfig+0x348>
 800676c:	2308      	movs	r3, #8
 800676e:	77fb      	strb	r3, [r7, #31]
 8006770:	e098      	b.n	80068a4 <UART_SetConfig+0x348>
 8006772:	2310      	movs	r3, #16
 8006774:	77fb      	strb	r3, [r7, #31]
 8006776:	e095      	b.n	80068a4 <UART_SetConfig+0x348>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a2f      	ldr	r2, [pc, #188]	; (800683c <UART_SetConfig+0x2e0>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d125      	bne.n	80067ce <UART_SetConfig+0x272>
 8006782:	4b29      	ldr	r3, [pc, #164]	; (8006828 <UART_SetConfig+0x2cc>)
 8006784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006788:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800678c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006790:	d017      	beq.n	80067c2 <UART_SetConfig+0x266>
 8006792:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006796:	d817      	bhi.n	80067c8 <UART_SetConfig+0x26c>
 8006798:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800679c:	d00b      	beq.n	80067b6 <UART_SetConfig+0x25a>
 800679e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067a2:	d811      	bhi.n	80067c8 <UART_SetConfig+0x26c>
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d003      	beq.n	80067b0 <UART_SetConfig+0x254>
 80067a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067ac:	d006      	beq.n	80067bc <UART_SetConfig+0x260>
 80067ae:	e00b      	b.n	80067c8 <UART_SetConfig+0x26c>
 80067b0:	2301      	movs	r3, #1
 80067b2:	77fb      	strb	r3, [r7, #31]
 80067b4:	e076      	b.n	80068a4 <UART_SetConfig+0x348>
 80067b6:	2302      	movs	r3, #2
 80067b8:	77fb      	strb	r3, [r7, #31]
 80067ba:	e073      	b.n	80068a4 <UART_SetConfig+0x348>
 80067bc:	2304      	movs	r3, #4
 80067be:	77fb      	strb	r3, [r7, #31]
 80067c0:	e070      	b.n	80068a4 <UART_SetConfig+0x348>
 80067c2:	2308      	movs	r3, #8
 80067c4:	77fb      	strb	r3, [r7, #31]
 80067c6:	e06d      	b.n	80068a4 <UART_SetConfig+0x348>
 80067c8:	2310      	movs	r3, #16
 80067ca:	77fb      	strb	r3, [r7, #31]
 80067cc:	e06a      	b.n	80068a4 <UART_SetConfig+0x348>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a1b      	ldr	r2, [pc, #108]	; (8006840 <UART_SetConfig+0x2e4>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d138      	bne.n	800684a <UART_SetConfig+0x2ee>
 80067d8:	4b13      	ldr	r3, [pc, #76]	; (8006828 <UART_SetConfig+0x2cc>)
 80067da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067de:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80067e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80067e6:	d017      	beq.n	8006818 <UART_SetConfig+0x2bc>
 80067e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80067ec:	d82a      	bhi.n	8006844 <UART_SetConfig+0x2e8>
 80067ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067f2:	d00b      	beq.n	800680c <UART_SetConfig+0x2b0>
 80067f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067f8:	d824      	bhi.n	8006844 <UART_SetConfig+0x2e8>
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d003      	beq.n	8006806 <UART_SetConfig+0x2aa>
 80067fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006802:	d006      	beq.n	8006812 <UART_SetConfig+0x2b6>
 8006804:	e01e      	b.n	8006844 <UART_SetConfig+0x2e8>
 8006806:	2300      	movs	r3, #0
 8006808:	77fb      	strb	r3, [r7, #31]
 800680a:	e04b      	b.n	80068a4 <UART_SetConfig+0x348>
 800680c:	2302      	movs	r3, #2
 800680e:	77fb      	strb	r3, [r7, #31]
 8006810:	e048      	b.n	80068a4 <UART_SetConfig+0x348>
 8006812:	2304      	movs	r3, #4
 8006814:	77fb      	strb	r3, [r7, #31]
 8006816:	e045      	b.n	80068a4 <UART_SetConfig+0x348>
 8006818:	2308      	movs	r3, #8
 800681a:	77fb      	strb	r3, [r7, #31]
 800681c:	e042      	b.n	80068a4 <UART_SetConfig+0x348>
 800681e:	bf00      	nop
 8006820:	efff69f3 	.word	0xefff69f3
 8006824:	40011000 	.word	0x40011000
 8006828:	40023800 	.word	0x40023800
 800682c:	40004400 	.word	0x40004400
 8006830:	40004800 	.word	0x40004800
 8006834:	40004c00 	.word	0x40004c00
 8006838:	40005000 	.word	0x40005000
 800683c:	40011400 	.word	0x40011400
 8006840:	40007800 	.word	0x40007800
 8006844:	2310      	movs	r3, #16
 8006846:	77fb      	strb	r3, [r7, #31]
 8006848:	e02c      	b.n	80068a4 <UART_SetConfig+0x348>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a72      	ldr	r2, [pc, #456]	; (8006a18 <UART_SetConfig+0x4bc>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d125      	bne.n	80068a0 <UART_SetConfig+0x344>
 8006854:	4b71      	ldr	r3, [pc, #452]	; (8006a1c <UART_SetConfig+0x4c0>)
 8006856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800685a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800685e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006862:	d017      	beq.n	8006894 <UART_SetConfig+0x338>
 8006864:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006868:	d817      	bhi.n	800689a <UART_SetConfig+0x33e>
 800686a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800686e:	d00b      	beq.n	8006888 <UART_SetConfig+0x32c>
 8006870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006874:	d811      	bhi.n	800689a <UART_SetConfig+0x33e>
 8006876:	2b00      	cmp	r3, #0
 8006878:	d003      	beq.n	8006882 <UART_SetConfig+0x326>
 800687a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800687e:	d006      	beq.n	800688e <UART_SetConfig+0x332>
 8006880:	e00b      	b.n	800689a <UART_SetConfig+0x33e>
 8006882:	2300      	movs	r3, #0
 8006884:	77fb      	strb	r3, [r7, #31]
 8006886:	e00d      	b.n	80068a4 <UART_SetConfig+0x348>
 8006888:	2302      	movs	r3, #2
 800688a:	77fb      	strb	r3, [r7, #31]
 800688c:	e00a      	b.n	80068a4 <UART_SetConfig+0x348>
 800688e:	2304      	movs	r3, #4
 8006890:	77fb      	strb	r3, [r7, #31]
 8006892:	e007      	b.n	80068a4 <UART_SetConfig+0x348>
 8006894:	2308      	movs	r3, #8
 8006896:	77fb      	strb	r3, [r7, #31]
 8006898:	e004      	b.n	80068a4 <UART_SetConfig+0x348>
 800689a:	2310      	movs	r3, #16
 800689c:	77fb      	strb	r3, [r7, #31]
 800689e:	e001      	b.n	80068a4 <UART_SetConfig+0x348>
 80068a0:	2310      	movs	r3, #16
 80068a2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	69db      	ldr	r3, [r3, #28]
 80068a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068ac:	d15b      	bne.n	8006966 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80068ae:	7ffb      	ldrb	r3, [r7, #31]
 80068b0:	2b08      	cmp	r3, #8
 80068b2:	d828      	bhi.n	8006906 <UART_SetConfig+0x3aa>
 80068b4:	a201      	add	r2, pc, #4	; (adr r2, 80068bc <UART_SetConfig+0x360>)
 80068b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ba:	bf00      	nop
 80068bc:	080068e1 	.word	0x080068e1
 80068c0:	080068e9 	.word	0x080068e9
 80068c4:	080068f1 	.word	0x080068f1
 80068c8:	08006907 	.word	0x08006907
 80068cc:	080068f7 	.word	0x080068f7
 80068d0:	08006907 	.word	0x08006907
 80068d4:	08006907 	.word	0x08006907
 80068d8:	08006907 	.word	0x08006907
 80068dc:	080068ff 	.word	0x080068ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068e0:	f7fd fde0 	bl	80044a4 <HAL_RCC_GetPCLK1Freq>
 80068e4:	61b8      	str	r0, [r7, #24]
        break;
 80068e6:	e013      	b.n	8006910 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068e8:	f7fd fdf0 	bl	80044cc <HAL_RCC_GetPCLK2Freq>
 80068ec:	61b8      	str	r0, [r7, #24]
        break;
 80068ee:	e00f      	b.n	8006910 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068f0:	4b4b      	ldr	r3, [pc, #300]	; (8006a20 <UART_SetConfig+0x4c4>)
 80068f2:	61bb      	str	r3, [r7, #24]
        break;
 80068f4:	e00c      	b.n	8006910 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068f6:	f7fd fd03 	bl	8004300 <HAL_RCC_GetSysClockFreq>
 80068fa:	61b8      	str	r0, [r7, #24]
        break;
 80068fc:	e008      	b.n	8006910 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006902:	61bb      	str	r3, [r7, #24]
        break;
 8006904:	e004      	b.n	8006910 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006906:	2300      	movs	r3, #0
 8006908:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	77bb      	strb	r3, [r7, #30]
        break;
 800690e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d074      	beq.n	8006a00 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	005a      	lsls	r2, r3, #1
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	085b      	lsrs	r3, r3, #1
 8006920:	441a      	add	r2, r3
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	fbb2 f3f3 	udiv	r3, r2, r3
 800692a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	2b0f      	cmp	r3, #15
 8006930:	d916      	bls.n	8006960 <UART_SetConfig+0x404>
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006938:	d212      	bcs.n	8006960 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	b29b      	uxth	r3, r3
 800693e:	f023 030f 	bic.w	r3, r3, #15
 8006942:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	085b      	lsrs	r3, r3, #1
 8006948:	b29b      	uxth	r3, r3
 800694a:	f003 0307 	and.w	r3, r3, #7
 800694e:	b29a      	uxth	r2, r3
 8006950:	89fb      	ldrh	r3, [r7, #14]
 8006952:	4313      	orrs	r3, r2
 8006954:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	89fa      	ldrh	r2, [r7, #14]
 800695c:	60da      	str	r2, [r3, #12]
 800695e:	e04f      	b.n	8006a00 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	77bb      	strb	r3, [r7, #30]
 8006964:	e04c      	b.n	8006a00 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006966:	7ffb      	ldrb	r3, [r7, #31]
 8006968:	2b08      	cmp	r3, #8
 800696a:	d828      	bhi.n	80069be <UART_SetConfig+0x462>
 800696c:	a201      	add	r2, pc, #4	; (adr r2, 8006974 <UART_SetConfig+0x418>)
 800696e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006972:	bf00      	nop
 8006974:	08006999 	.word	0x08006999
 8006978:	080069a1 	.word	0x080069a1
 800697c:	080069a9 	.word	0x080069a9
 8006980:	080069bf 	.word	0x080069bf
 8006984:	080069af 	.word	0x080069af
 8006988:	080069bf 	.word	0x080069bf
 800698c:	080069bf 	.word	0x080069bf
 8006990:	080069bf 	.word	0x080069bf
 8006994:	080069b7 	.word	0x080069b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006998:	f7fd fd84 	bl	80044a4 <HAL_RCC_GetPCLK1Freq>
 800699c:	61b8      	str	r0, [r7, #24]
        break;
 800699e:	e013      	b.n	80069c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069a0:	f7fd fd94 	bl	80044cc <HAL_RCC_GetPCLK2Freq>
 80069a4:	61b8      	str	r0, [r7, #24]
        break;
 80069a6:	e00f      	b.n	80069c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069a8:	4b1d      	ldr	r3, [pc, #116]	; (8006a20 <UART_SetConfig+0x4c4>)
 80069aa:	61bb      	str	r3, [r7, #24]
        break;
 80069ac:	e00c      	b.n	80069c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069ae:	f7fd fca7 	bl	8004300 <HAL_RCC_GetSysClockFreq>
 80069b2:	61b8      	str	r0, [r7, #24]
        break;
 80069b4:	e008      	b.n	80069c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069ba:	61bb      	str	r3, [r7, #24]
        break;
 80069bc:	e004      	b.n	80069c8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80069be:	2300      	movs	r3, #0
 80069c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	77bb      	strb	r3, [r7, #30]
        break;
 80069c6:	bf00      	nop
    }

    if (pclk != 0U)
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d018      	beq.n	8006a00 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	085a      	lsrs	r2, r3, #1
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	441a      	add	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80069e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	2b0f      	cmp	r3, #15
 80069e6:	d909      	bls.n	80069fc <UART_SetConfig+0x4a0>
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069ee:	d205      	bcs.n	80069fc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	60da      	str	r2, [r3, #12]
 80069fa:	e001      	b.n	8006a00 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006a0c:	7fbb      	ldrb	r3, [r7, #30]
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3720      	adds	r7, #32
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	40007c00 	.word	0x40007c00
 8006a1c:	40023800 	.word	0x40023800
 8006a20:	00f42400 	.word	0x00f42400

08006a24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a30:	f003 0301 	and.w	r3, r3, #1
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00a      	beq.n	8006a4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	430a      	orrs	r2, r1
 8006a4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a52:	f003 0302 	and.w	r3, r3, #2
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00a      	beq.n	8006a70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	430a      	orrs	r2, r1
 8006a6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a74:	f003 0304 	and.w	r3, r3, #4
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00a      	beq.n	8006a92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	430a      	orrs	r2, r1
 8006a90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a96:	f003 0308 	and.w	r3, r3, #8
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00a      	beq.n	8006ab4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	430a      	orrs	r2, r1
 8006ab2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab8:	f003 0310 	and.w	r3, r3, #16
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d00a      	beq.n	8006ad6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	430a      	orrs	r2, r1
 8006ad4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ada:	f003 0320 	and.w	r3, r3, #32
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00a      	beq.n	8006af8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	430a      	orrs	r2, r1
 8006af6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d01a      	beq.n	8006b3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	430a      	orrs	r2, r1
 8006b18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b22:	d10a      	bne.n	8006b3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	430a      	orrs	r2, r1
 8006b38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00a      	beq.n	8006b5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	430a      	orrs	r2, r1
 8006b5a:	605a      	str	r2, [r3, #4]
  }
}
 8006b5c:	bf00      	nop
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b086      	sub	sp, #24
 8006b6c:	af02      	add	r7, sp, #8
 8006b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b78:	f7fb f99a 	bl	8001eb0 <HAL_GetTick>
 8006b7c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0308 	and.w	r3, r3, #8
 8006b88:	2b08      	cmp	r3, #8
 8006b8a:	d10e      	bne.n	8006baa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b90:	9300      	str	r3, [sp, #0]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 f82d 	bl	8006bfa <UART_WaitOnFlagUntilTimeout>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d001      	beq.n	8006baa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e023      	b.n	8006bf2 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0304 	and.w	r3, r3, #4
 8006bb4:	2b04      	cmp	r3, #4
 8006bb6:	d10e      	bne.n	8006bd6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006bbc:	9300      	str	r3, [sp, #0]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 f817 	bl	8006bfa <UART_WaitOnFlagUntilTimeout>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d001      	beq.n	8006bd6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	e00d      	b.n	8006bf2 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2220      	movs	r2, #32
 8006bda:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2220      	movs	r2, #32
 8006be0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3710      	adds	r7, #16
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b09c      	sub	sp, #112	; 0x70
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	60f8      	str	r0, [r7, #12]
 8006c02:	60b9      	str	r1, [r7, #8]
 8006c04:	603b      	str	r3, [r7, #0]
 8006c06:	4613      	mov	r3, r2
 8006c08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c0a:	e0a5      	b.n	8006d58 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c12:	f000 80a1 	beq.w	8006d58 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c16:	f7fb f94b 	bl	8001eb0 <HAL_GetTick>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d302      	bcc.n	8006c2c <UART_WaitOnFlagUntilTimeout+0x32>
 8006c26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d13e      	bne.n	8006caa <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c34:	e853 3f00 	ldrex	r3, [r3]
 8006c38:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c3c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c40:	667b      	str	r3, [r7, #100]	; 0x64
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	461a      	mov	r2, r3
 8006c48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c4c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006c50:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006c52:	e841 2300 	strex	r3, r2, [r1]
 8006c56:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006c58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d1e6      	bne.n	8006c2c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	3308      	adds	r3, #8
 8006c64:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c68:	e853 3f00 	ldrex	r3, [r3]
 8006c6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c70:	f023 0301 	bic.w	r3, r3, #1
 8006c74:	663b      	str	r3, [r7, #96]	; 0x60
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	3308      	adds	r3, #8
 8006c7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c7e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006c80:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006c84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c86:	e841 2300 	strex	r3, r2, [r1]
 8006c8a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006c8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d1e5      	bne.n	8006c5e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2220      	movs	r2, #32
 8006c96:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2220      	movs	r2, #32
 8006c9c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	e067      	b.n	8006d7a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 0304 	and.w	r3, r3, #4
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d04f      	beq.n	8006d58 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	69db      	ldr	r3, [r3, #28]
 8006cbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cc6:	d147      	bne.n	8006d58 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cd0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cda:	e853 3f00 	ldrex	r3, [r3]
 8006cde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ce6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	461a      	mov	r2, r3
 8006cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cf0:	637b      	str	r3, [r7, #52]	; 0x34
 8006cf2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006cf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cf8:	e841 2300 	strex	r3, r2, [r1]
 8006cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d1e6      	bne.n	8006cd2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	3308      	adds	r3, #8
 8006d0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	e853 3f00 	ldrex	r3, [r3]
 8006d12:	613b      	str	r3, [r7, #16]
   return(result);
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	f023 0301 	bic.w	r3, r3, #1
 8006d1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	3308      	adds	r3, #8
 8006d22:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006d24:	623a      	str	r2, [r7, #32]
 8006d26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d28:	69f9      	ldr	r1, [r7, #28]
 8006d2a:	6a3a      	ldr	r2, [r7, #32]
 8006d2c:	e841 2300 	strex	r3, r2, [r1]
 8006d30:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d1e5      	bne.n	8006d04 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2220      	movs	r2, #32
 8006d3c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2220      	movs	r2, #32
 8006d42:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2220      	movs	r2, #32
 8006d48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006d54:	2303      	movs	r3, #3
 8006d56:	e010      	b.n	8006d7a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	69da      	ldr	r2, [r3, #28]
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	4013      	ands	r3, r2
 8006d62:	68ba      	ldr	r2, [r7, #8]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	bf0c      	ite	eq
 8006d68:	2301      	moveq	r3, #1
 8006d6a:	2300      	movne	r3, #0
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	461a      	mov	r2, r3
 8006d70:	79fb      	ldrb	r3, [r7, #7]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	f43f af4a 	beq.w	8006c0c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3770      	adds	r7, #112	; 0x70
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
	...

08006d84 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8006d84:	b084      	sub	sp, #16
 8006d86:	b480      	push	{r7}
 8006d88:	b085      	sub	sp, #20
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
 8006d8e:	f107 001c 	add.w	r0, r7, #28
 8006d92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006d96:	2300      	movs	r3, #0
 8006d98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006d9a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006d9c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006d9e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8006da2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8006da6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8006daa:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8006dae:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006db0:	68fa      	ldr	r2, [r7, #12]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685a      	ldr	r2, [r3, #4]
 8006dba:	4b07      	ldr	r3, [pc, #28]	; (8006dd8 <SDMMC_Init+0x54>)
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	431a      	orrs	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006dc6:	2300      	movs	r3, #0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3714      	adds	r7, #20
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	b004      	add	sp, #16
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	ffff8100 	.word	0xffff8100

08006ddc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	370c      	adds	r7, #12
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr

08006df6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8006df6:	b480      	push	{r7}
 8006df8:	b083      	sub	sp, #12
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
 8006dfe:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2203      	movs	r2, #3
 8006e24:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 0303 	and.w	r3, r3, #3
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006e6e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006e74:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006e7a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006e7c:	68fa      	ldr	r2, [r7, #12]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	68da      	ldr	r2, [r3, #12]
 8006e86:	4b06      	ldr	r3, [pc, #24]	; (8006ea0 <SDMMC_SendCommand+0x50>)
 8006e88:	4013      	ands	r3, r2
 8006e8a:	68fa      	ldr	r2, [r7, #12]
 8006e8c:	431a      	orrs	r2, r3
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3714      	adds	r7, #20
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr
 8006ea0:	fffff000 	.word	0xfffff000

08006ea4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	b2db      	uxtb	r3, r3
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	370c      	adds	r7, #12
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr

08006ebe <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8006ebe:	b480      	push	{r7}
 8006ec0:	b085      	sub	sp, #20
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
 8006ec6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	3314      	adds	r3, #20
 8006ecc:	461a      	mov	r2, r3
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
}  
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3714      	adds	r7, #20
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	685a      	ldr	r2, [r3, #4]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006f0a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006f10:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006f16:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f22:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	431a      	orrs	r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006f2e:	2300      	movs	r3, #0

}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3714      	adds	r7, #20
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b088      	sub	sp, #32
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006f4a:	2310      	movs	r3, #16
 8006f4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006f4e:	2340      	movs	r3, #64	; 0x40
 8006f50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006f52:	2300      	movs	r3, #0
 8006f54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006f56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006f5c:	f107 0308 	add.w	r3, r7, #8
 8006f60:	4619      	mov	r1, r3
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f7ff ff74 	bl	8006e50 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8006f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f6c:	2110      	movs	r1, #16
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 fa1a 	bl	80073a8 <SDMMC_GetCmdResp1>
 8006f74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f76:	69fb      	ldr	r3, [r7, #28]
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3720      	adds	r7, #32
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b088      	sub	sp, #32
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006f8e:	2311      	movs	r3, #17
 8006f90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006f92:	2340      	movs	r3, #64	; 0x40
 8006f94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006f96:	2300      	movs	r3, #0
 8006f98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006f9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006fa0:	f107 0308 	add.w	r3, r7, #8
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f7ff ff52 	bl	8006e50 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8006fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fb0:	2111      	movs	r1, #17
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 f9f8 	bl	80073a8 <SDMMC_GetCmdResp1>
 8006fb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006fba:	69fb      	ldr	r3, [r7, #28]
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3720      	adds	r7, #32
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b088      	sub	sp, #32
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006fd2:	2312      	movs	r3, #18
 8006fd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006fd6:	2340      	movs	r3, #64	; 0x40
 8006fd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006fde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fe2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006fe4:	f107 0308 	add.w	r3, r7, #8
 8006fe8:	4619      	mov	r1, r3
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f7ff ff30 	bl	8006e50 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8006ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ff4:	2112      	movs	r1, #18
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 f9d6 	bl	80073a8 <SDMMC_GetCmdResp1>
 8006ffc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ffe:	69fb      	ldr	r3, [r7, #28]
}
 8007000:	4618      	mov	r0, r3
 8007002:	3720      	adds	r7, #32
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b088      	sub	sp, #32
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007016:	2318      	movs	r3, #24
 8007018:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800701a:	2340      	movs	r3, #64	; 0x40
 800701c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800701e:	2300      	movs	r3, #0
 8007020:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007022:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007026:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007028:	f107 0308 	add.w	r3, r7, #8
 800702c:	4619      	mov	r1, r3
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f7ff ff0e 	bl	8006e50 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007034:	f241 3288 	movw	r2, #5000	; 0x1388
 8007038:	2118      	movs	r1, #24
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 f9b4 	bl	80073a8 <SDMMC_GetCmdResp1>
 8007040:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007042:	69fb      	ldr	r3, [r7, #28]
}
 8007044:	4618      	mov	r0, r3
 8007046:	3720      	adds	r7, #32
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b088      	sub	sp, #32
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800705a:	2319      	movs	r3, #25
 800705c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800705e:	2340      	movs	r3, #64	; 0x40
 8007060:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007062:	2300      	movs	r3, #0
 8007064:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007066:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800706a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800706c:	f107 0308 	add.w	r3, r7, #8
 8007070:	4619      	mov	r1, r3
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f7ff feec 	bl	8006e50 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007078:	f241 3288 	movw	r2, #5000	; 0x1388
 800707c:	2119      	movs	r1, #25
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 f992 	bl	80073a8 <SDMMC_GetCmdResp1>
 8007084:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007086:	69fb      	ldr	r3, [r7, #28]
}
 8007088:	4618      	mov	r0, r3
 800708a:	3720      	adds	r7, #32
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b088      	sub	sp, #32
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007098:	2300      	movs	r3, #0
 800709a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800709c:	230c      	movs	r3, #12
 800709e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80070a0:	2340      	movs	r3, #64	; 0x40
 80070a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80070a4:	2300      	movs	r3, #0
 80070a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80070a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80070ae:	f107 0308 	add.w	r3, r7, #8
 80070b2:	4619      	mov	r1, r3
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f7ff fecb 	bl	8006e50 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80070ba:	4a05      	ldr	r2, [pc, #20]	; (80070d0 <SDMMC_CmdStopTransfer+0x40>)
 80070bc:	210c      	movs	r1, #12
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 f972 	bl	80073a8 <SDMMC_GetCmdResp1>
 80070c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80070c6:	69fb      	ldr	r3, [r7, #28]
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3720      	adds	r7, #32
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	05f5e100 	.word	0x05f5e100

080070d4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b08a      	sub	sp, #40	; 0x28
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80070e4:	2307      	movs	r3, #7
 80070e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80070e8:	2340      	movs	r3, #64	; 0x40
 80070ea:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80070ec:	2300      	movs	r3, #0
 80070ee:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80070f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070f4:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80070f6:	f107 0310 	add.w	r3, r7, #16
 80070fa:	4619      	mov	r1, r3
 80070fc:	68f8      	ldr	r0, [r7, #12]
 80070fe:	f7ff fea7 	bl	8006e50 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8007102:	f241 3288 	movw	r2, #5000	; 0x1388
 8007106:	2107      	movs	r1, #7
 8007108:	68f8      	ldr	r0, [r7, #12]
 800710a:	f000 f94d 	bl	80073a8 <SDMMC_GetCmdResp1>
 800710e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007112:	4618      	mov	r0, r3
 8007114:	3728      	adds	r7, #40	; 0x28
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800711a:	b580      	push	{r7, lr}
 800711c:	b088      	sub	sp, #32
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007122:	2300      	movs	r3, #0
 8007124:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007126:	2300      	movs	r3, #0
 8007128:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800712a:	2300      	movs	r3, #0
 800712c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800712e:	2300      	movs	r3, #0
 8007130:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007132:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007136:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007138:	f107 0308 	add.w	r3, r7, #8
 800713c:	4619      	mov	r1, r3
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f7ff fe86 	bl	8006e50 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 fb67 	bl	8007818 <SDMMC_GetCmdError>
 800714a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800714c:	69fb      	ldr	r3, [r7, #28]
}
 800714e:	4618      	mov	r0, r3
 8007150:	3720      	adds	r7, #32
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8007156:	b580      	push	{r7, lr}
 8007158:	b088      	sub	sp, #32
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800715e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007162:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007164:	2308      	movs	r3, #8
 8007166:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007168:	2340      	movs	r3, #64	; 0x40
 800716a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800716c:	2300      	movs	r3, #0
 800716e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007170:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007174:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007176:	f107 0308 	add.w	r3, r7, #8
 800717a:	4619      	mov	r1, r3
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f7ff fe67 	bl	8006e50 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 fafa 	bl	800777c <SDMMC_GetCmdResp7>
 8007188:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800718a:	69fb      	ldr	r3, [r7, #28]
}
 800718c:	4618      	mov	r0, r3
 800718e:	3720      	adds	r7, #32
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b088      	sub	sp, #32
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80071a2:	2337      	movs	r3, #55	; 0x37
 80071a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80071a6:	2340      	movs	r3, #64	; 0x40
 80071a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80071aa:	2300      	movs	r3, #0
 80071ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80071ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80071b4:	f107 0308 	add.w	r3, r7, #8
 80071b8:	4619      	mov	r1, r3
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f7ff fe48 	bl	8006e50 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80071c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80071c4:	2137      	movs	r1, #55	; 0x37
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 f8ee 	bl	80073a8 <SDMMC_GetCmdResp1>
 80071cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80071ce:	69fb      	ldr	r3, [r7, #28]
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3720      	adds	r7, #32
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b088      	sub	sp, #32
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80071e2:	683a      	ldr	r2, [r7, #0]
 80071e4:	4b0d      	ldr	r3, [pc, #52]	; (800721c <SDMMC_CmdAppOperCommand+0x44>)
 80071e6:	4313      	orrs	r3, r2
 80071e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80071ea:	2329      	movs	r3, #41	; 0x29
 80071ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80071ee:	2340      	movs	r3, #64	; 0x40
 80071f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80071f2:	2300      	movs	r3, #0
 80071f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80071f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80071fc:	f107 0308 	add.w	r3, r7, #8
 8007200:	4619      	mov	r1, r3
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f7ff fe24 	bl	8006e50 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 fa03 	bl	8007614 <SDMMC_GetCmdResp3>
 800720e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007210:	69fb      	ldr	r3, [r7, #28]
}
 8007212:	4618      	mov	r0, r3
 8007214:	3720      	adds	r7, #32
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	80100000 	.word	0x80100000

08007220 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b088      	sub	sp, #32
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800722e:	2306      	movs	r3, #6
 8007230:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007232:	2340      	movs	r3, #64	; 0x40
 8007234:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007236:	2300      	movs	r3, #0
 8007238:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800723a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800723e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007240:	f107 0308 	add.w	r3, r7, #8
 8007244:	4619      	mov	r1, r3
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f7ff fe02 	bl	8006e50 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800724c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007250:	2106      	movs	r1, #6
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 f8a8 	bl	80073a8 <SDMMC_GetCmdResp1>
 8007258:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800725a:	69fb      	ldr	r3, [r7, #28]
}
 800725c:	4618      	mov	r0, r3
 800725e:	3720      	adds	r7, #32
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b088      	sub	sp, #32
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800726c:	2300      	movs	r3, #0
 800726e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007270:	2333      	movs	r3, #51	; 0x33
 8007272:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007274:	2340      	movs	r3, #64	; 0x40
 8007276:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007278:	2300      	movs	r3, #0
 800727a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800727c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007280:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007282:	f107 0308 	add.w	r3, r7, #8
 8007286:	4619      	mov	r1, r3
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f7ff fde1 	bl	8006e50 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800728e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007292:	2133      	movs	r1, #51	; 0x33
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 f887 	bl	80073a8 <SDMMC_GetCmdResp1>
 800729a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800729c:	69fb      	ldr	r3, [r7, #28]
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3720      	adds	r7, #32
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b088      	sub	sp, #32
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80072ae:	2300      	movs	r3, #0
 80072b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80072b2:	2302      	movs	r3, #2
 80072b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80072b6:	23c0      	movs	r3, #192	; 0xc0
 80072b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80072ba:	2300      	movs	r3, #0
 80072bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80072be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80072c4:	f107 0308 	add.w	r3, r7, #8
 80072c8:	4619      	mov	r1, r3
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f7ff fdc0 	bl	8006e50 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 f957 	bl	8007584 <SDMMC_GetCmdResp2>
 80072d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80072d8:	69fb      	ldr	r3, [r7, #28]
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3720      	adds	r7, #32
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80072e2:	b580      	push	{r7, lr}
 80072e4:	b088      	sub	sp, #32
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
 80072ea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80072f0:	2309      	movs	r3, #9
 80072f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80072f4:	23c0      	movs	r3, #192	; 0xc0
 80072f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80072f8:	2300      	movs	r3, #0
 80072fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80072fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007300:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007302:	f107 0308 	add.w	r3, r7, #8
 8007306:	4619      	mov	r1, r3
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f7ff fda1 	bl	8006e50 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f938 	bl	8007584 <SDMMC_GetCmdResp2>
 8007314:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007316:	69fb      	ldr	r3, [r7, #28]
}
 8007318:	4618      	mov	r0, r3
 800731a:	3720      	adds	r7, #32
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b088      	sub	sp, #32
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800732a:	2300      	movs	r3, #0
 800732c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800732e:	2303      	movs	r3, #3
 8007330:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007332:	2340      	movs	r3, #64	; 0x40
 8007334:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007336:	2300      	movs	r3, #0
 8007338:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800733a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800733e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007340:	f107 0308 	add.w	r3, r7, #8
 8007344:	4619      	mov	r1, r3
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f7ff fd82 	bl	8006e50 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800734c:	683a      	ldr	r2, [r7, #0]
 800734e:	2103      	movs	r1, #3
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 f99d 	bl	8007690 <SDMMC_GetCmdResp6>
 8007356:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007358:	69fb      	ldr	r3, [r7, #28]
}
 800735a:	4618      	mov	r0, r3
 800735c:	3720      	adds	r7, #32
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007362:	b580      	push	{r7, lr}
 8007364:	b088      	sub	sp, #32
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
 800736a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007370:	230d      	movs	r3, #13
 8007372:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007374:	2340      	movs	r3, #64	; 0x40
 8007376:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007378:	2300      	movs	r3, #0
 800737a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800737c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007380:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007382:	f107 0308 	add.w	r3, r7, #8
 8007386:	4619      	mov	r1, r3
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f7ff fd61 	bl	8006e50 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800738e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007392:	210d      	movs	r1, #13
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 f807 	bl	80073a8 <SDMMC_GetCmdResp1>
 800739a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800739c:	69fb      	ldr	r3, [r7, #28]
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3720      	adds	r7, #32
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
	...

080073a8 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b088      	sub	sp, #32
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	460b      	mov	r3, r1
 80073b2:	607a      	str	r2, [r7, #4]
 80073b4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80073b6:	4b70      	ldr	r3, [pc, #448]	; (8007578 <SDMMC_GetCmdResp1+0x1d0>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a70      	ldr	r2, [pc, #448]	; (800757c <SDMMC_GetCmdResp1+0x1d4>)
 80073bc:	fba2 2303 	umull	r2, r3, r2, r3
 80073c0:	0a5a      	lsrs	r2, r3, #9
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	fb02 f303 	mul.w	r3, r2, r3
 80073c8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	1e5a      	subs	r2, r3, #1
 80073ce:	61fa      	str	r2, [r7, #28]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d102      	bne.n	80073da <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80073d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80073d8:	e0c9      	b.n	800756e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073de:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d0ef      	beq.n	80073ca <SDMMC_GetCmdResp1+0x22>
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d1ea      	bne.n	80073ca <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073f8:	f003 0304 	and.w	r3, r3, #4
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d004      	beq.n	800740a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2204      	movs	r2, #4
 8007404:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007406:	2304      	movs	r3, #4
 8007408:	e0b1      	b.n	800756e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800740e:	f003 0301 	and.w	r3, r3, #1
 8007412:	2b00      	cmp	r3, #0
 8007414:	d004      	beq.n	8007420 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2201      	movs	r2, #1
 800741a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800741c:	2301      	movs	r3, #1
 800741e:	e0a6      	b.n	800756e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	22c5      	movs	r2, #197	; 0xc5
 8007424:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	f7ff fd3c 	bl	8006ea4 <SDMMC_GetCommandResponse>
 800742c:	4603      	mov	r3, r0
 800742e:	461a      	mov	r2, r3
 8007430:	7afb      	ldrb	r3, [r7, #11]
 8007432:	4293      	cmp	r3, r2
 8007434:	d001      	beq.n	800743a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007436:	2301      	movs	r3, #1
 8007438:	e099      	b.n	800756e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800743a:	2100      	movs	r1, #0
 800743c:	68f8      	ldr	r0, [r7, #12]
 800743e:	f7ff fd3e 	bl	8006ebe <SDMMC_GetResponse>
 8007442:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007444:	697a      	ldr	r2, [r7, #20]
 8007446:	4b4e      	ldr	r3, [pc, #312]	; (8007580 <SDMMC_GetCmdResp1+0x1d8>)
 8007448:	4013      	ands	r3, r2
 800744a:	2b00      	cmp	r3, #0
 800744c:	d101      	bne.n	8007452 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800744e:	2300      	movs	r3, #0
 8007450:	e08d      	b.n	800756e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	2b00      	cmp	r3, #0
 8007456:	da02      	bge.n	800745e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007458:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800745c:	e087      	b.n	800756e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007464:	2b00      	cmp	r3, #0
 8007466:	d001      	beq.n	800746c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007468:	2340      	movs	r3, #64	; 0x40
 800746a:	e080      	b.n	800756e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007472:	2b00      	cmp	r3, #0
 8007474:	d001      	beq.n	800747a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007476:	2380      	movs	r3, #128	; 0x80
 8007478:	e079      	b.n	800756e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007480:	2b00      	cmp	r3, #0
 8007482:	d002      	beq.n	800748a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007484:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007488:	e071      	b.n	800756e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007490:	2b00      	cmp	r3, #0
 8007492:	d002      	beq.n	800749a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007494:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007498:	e069      	b.n	800756e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d002      	beq.n	80074aa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80074a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074a8:	e061      	b.n	800756e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d002      	beq.n	80074ba <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80074b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80074b8:	e059      	b.n	800756e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d002      	beq.n	80074ca <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80074c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074c8:	e051      	b.n	800756e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d002      	beq.n	80074da <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80074d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80074d8:	e049      	b.n	800756e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d002      	beq.n	80074ea <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80074e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80074e8:	e041      	b.n	800756e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d002      	beq.n	80074fa <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80074f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074f8:	e039      	b.n	800756e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007500:	2b00      	cmp	r3, #0
 8007502:	d002      	beq.n	800750a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007504:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007508:	e031      	b.n	800756e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007510:	2b00      	cmp	r3, #0
 8007512:	d002      	beq.n	800751a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007514:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007518:	e029      	b.n	800756e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007520:	2b00      	cmp	r3, #0
 8007522:	d002      	beq.n	800752a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007524:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007528:	e021      	b.n	800756e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007530:	2b00      	cmp	r3, #0
 8007532:	d002      	beq.n	800753a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007534:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007538:	e019      	b.n	800756e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007540:	2b00      	cmp	r3, #0
 8007542:	d002      	beq.n	800754a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007544:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007548:	e011      	b.n	800756e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007550:	2b00      	cmp	r3, #0
 8007552:	d002      	beq.n	800755a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007554:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007558:	e009      	b.n	800756e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	f003 0308 	and.w	r3, r3, #8
 8007560:	2b00      	cmp	r3, #0
 8007562:	d002      	beq.n	800756a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007564:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007568:	e001      	b.n	800756e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800756a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800756e:	4618      	mov	r0, r3
 8007570:	3720      	adds	r7, #32
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	20000000 	.word	0x20000000
 800757c:	10624dd3 	.word	0x10624dd3
 8007580:	fdffe008 	.word	0xfdffe008

08007584 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8007584:	b480      	push	{r7}
 8007586:	b085      	sub	sp, #20
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800758c:	4b1f      	ldr	r3, [pc, #124]	; (800760c <SDMMC_GetCmdResp2+0x88>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a1f      	ldr	r2, [pc, #124]	; (8007610 <SDMMC_GetCmdResp2+0x8c>)
 8007592:	fba2 2303 	umull	r2, r3, r2, r3
 8007596:	0a5b      	lsrs	r3, r3, #9
 8007598:	f241 3288 	movw	r2, #5000	; 0x1388
 800759c:	fb02 f303 	mul.w	r3, r2, r3
 80075a0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	1e5a      	subs	r2, r3, #1
 80075a6:	60fa      	str	r2, [r7, #12]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d102      	bne.n	80075b2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80075ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80075b0:	e026      	b.n	8007600 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075b6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d0ef      	beq.n	80075a2 <SDMMC_GetCmdResp2+0x1e>
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d1ea      	bne.n	80075a2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075d0:	f003 0304 	and.w	r3, r3, #4
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d004      	beq.n	80075e2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2204      	movs	r2, #4
 80075dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80075de:	2304      	movs	r3, #4
 80075e0:	e00e      	b.n	8007600 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075e6:	f003 0301 	and.w	r3, r3, #1
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d004      	beq.n	80075f8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2201      	movs	r2, #1
 80075f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80075f4:	2301      	movs	r3, #1
 80075f6:	e003      	b.n	8007600 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	22c5      	movs	r2, #197	; 0xc5
 80075fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	3714      	adds	r7, #20
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr
 800760c:	20000000 	.word	0x20000000
 8007610:	10624dd3 	.word	0x10624dd3

08007614 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8007614:	b480      	push	{r7}
 8007616:	b085      	sub	sp, #20
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800761c:	4b1a      	ldr	r3, [pc, #104]	; (8007688 <SDMMC_GetCmdResp3+0x74>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a1a      	ldr	r2, [pc, #104]	; (800768c <SDMMC_GetCmdResp3+0x78>)
 8007622:	fba2 2303 	umull	r2, r3, r2, r3
 8007626:	0a5b      	lsrs	r3, r3, #9
 8007628:	f241 3288 	movw	r2, #5000	; 0x1388
 800762c:	fb02 f303 	mul.w	r3, r2, r3
 8007630:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	1e5a      	subs	r2, r3, #1
 8007636:	60fa      	str	r2, [r7, #12]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d102      	bne.n	8007642 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800763c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007640:	e01b      	b.n	800767a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007646:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800764e:	2b00      	cmp	r3, #0
 8007650:	d0ef      	beq.n	8007632 <SDMMC_GetCmdResp3+0x1e>
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007658:	2b00      	cmp	r3, #0
 800765a:	d1ea      	bne.n	8007632 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007660:	f003 0304 	and.w	r3, r3, #4
 8007664:	2b00      	cmp	r3, #0
 8007666:	d004      	beq.n	8007672 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2204      	movs	r2, #4
 800766c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800766e:	2304      	movs	r3, #4
 8007670:	e003      	b.n	800767a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	22c5      	movs	r2, #197	; 0xc5
 8007676:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007678:	2300      	movs	r3, #0
}
 800767a:	4618      	mov	r0, r3
 800767c:	3714      	adds	r7, #20
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop
 8007688:	20000000 	.word	0x20000000
 800768c:	10624dd3 	.word	0x10624dd3

08007690 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b088      	sub	sp, #32
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	460b      	mov	r3, r1
 800769a:	607a      	str	r2, [r7, #4]
 800769c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800769e:	4b35      	ldr	r3, [pc, #212]	; (8007774 <SDMMC_GetCmdResp6+0xe4>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a35      	ldr	r2, [pc, #212]	; (8007778 <SDMMC_GetCmdResp6+0xe8>)
 80076a4:	fba2 2303 	umull	r2, r3, r2, r3
 80076a8:	0a5b      	lsrs	r3, r3, #9
 80076aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80076ae:	fb02 f303 	mul.w	r3, r2, r3
 80076b2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	1e5a      	subs	r2, r3, #1
 80076b8:	61fa      	str	r2, [r7, #28]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d102      	bne.n	80076c4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80076be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80076c2:	e052      	b.n	800776a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076c8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d0ef      	beq.n	80076b4 <SDMMC_GetCmdResp6+0x24>
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d1ea      	bne.n	80076b4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076e2:	f003 0304 	and.w	r3, r3, #4
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d004      	beq.n	80076f4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2204      	movs	r2, #4
 80076ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80076f0:	2304      	movs	r3, #4
 80076f2:	e03a      	b.n	800776a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076f8:	f003 0301 	and.w	r3, r3, #1
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d004      	beq.n	800770a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2201      	movs	r2, #1
 8007704:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007706:	2301      	movs	r3, #1
 8007708:	e02f      	b.n	800776a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800770a:	68f8      	ldr	r0, [r7, #12]
 800770c:	f7ff fbca 	bl	8006ea4 <SDMMC_GetCommandResponse>
 8007710:	4603      	mov	r3, r0
 8007712:	461a      	mov	r2, r3
 8007714:	7afb      	ldrb	r3, [r7, #11]
 8007716:	4293      	cmp	r3, r2
 8007718:	d001      	beq.n	800771e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800771a:	2301      	movs	r3, #1
 800771c:	e025      	b.n	800776a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	22c5      	movs	r2, #197	; 0xc5
 8007722:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007724:	2100      	movs	r1, #0
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f7ff fbc9 	bl	8006ebe <SDMMC_GetResponse>
 800772c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007734:	2b00      	cmp	r3, #0
 8007736:	d106      	bne.n	8007746 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	0c1b      	lsrs	r3, r3, #16
 800773c:	b29a      	uxth	r2, r3
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007742:	2300      	movs	r3, #0
 8007744:	e011      	b.n	800776a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800774c:	2b00      	cmp	r3, #0
 800774e:	d002      	beq.n	8007756 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007750:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007754:	e009      	b.n	800776a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800775c:	2b00      	cmp	r3, #0
 800775e:	d002      	beq.n	8007766 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007764:	e001      	b.n	800776a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007766:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800776a:	4618      	mov	r0, r3
 800776c:	3720      	adds	r7, #32
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
 8007772:	bf00      	nop
 8007774:	20000000 	.word	0x20000000
 8007778:	10624dd3 	.word	0x10624dd3

0800777c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800777c:	b480      	push	{r7}
 800777e:	b085      	sub	sp, #20
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007784:	4b22      	ldr	r3, [pc, #136]	; (8007810 <SDMMC_GetCmdResp7+0x94>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a22      	ldr	r2, [pc, #136]	; (8007814 <SDMMC_GetCmdResp7+0x98>)
 800778a:	fba2 2303 	umull	r2, r3, r2, r3
 800778e:	0a5b      	lsrs	r3, r3, #9
 8007790:	f241 3288 	movw	r2, #5000	; 0x1388
 8007794:	fb02 f303 	mul.w	r3, r2, r3
 8007798:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	1e5a      	subs	r2, r3, #1
 800779e:	60fa      	str	r2, [r7, #12]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d102      	bne.n	80077aa <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80077a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80077a8:	e02c      	b.n	8007804 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077ae:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d0ef      	beq.n	800779a <SDMMC_GetCmdResp7+0x1e>
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d1ea      	bne.n	800779a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077c8:	f003 0304 	and.w	r3, r3, #4
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d004      	beq.n	80077da <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2204      	movs	r2, #4
 80077d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80077d6:	2304      	movs	r3, #4
 80077d8:	e014      	b.n	8007804 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077de:	f003 0301 	and.w	r3, r3, #1
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d004      	beq.n	80077f0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2201      	movs	r2, #1
 80077ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80077ec:	2301      	movs	r3, #1
 80077ee:	e009      	b.n	8007804 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d002      	beq.n	8007802 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2240      	movs	r2, #64	; 0x40
 8007800:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007802:	2300      	movs	r3, #0
  
}
 8007804:	4618      	mov	r0, r3
 8007806:	3714      	adds	r7, #20
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr
 8007810:	20000000 	.word	0x20000000
 8007814:	10624dd3 	.word	0x10624dd3

08007818 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8007818:	b480      	push	{r7}
 800781a:	b085      	sub	sp, #20
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007820:	4b11      	ldr	r3, [pc, #68]	; (8007868 <SDMMC_GetCmdError+0x50>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a11      	ldr	r2, [pc, #68]	; (800786c <SDMMC_GetCmdError+0x54>)
 8007826:	fba2 2303 	umull	r2, r3, r2, r3
 800782a:	0a5b      	lsrs	r3, r3, #9
 800782c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007830:	fb02 f303 	mul.w	r3, r2, r3
 8007834:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	1e5a      	subs	r2, r3, #1
 800783a:	60fa      	str	r2, [r7, #12]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d102      	bne.n	8007846 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007840:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007844:	e009      	b.n	800785a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800784a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800784e:	2b00      	cmp	r3, #0
 8007850:	d0f1      	beq.n	8007836 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	22c5      	movs	r2, #197	; 0xc5
 8007856:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3714      	adds	r7, #20
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr
 8007866:	bf00      	nop
 8007868:	20000000 	.word	0x20000000
 800786c:	10624dd3 	.word	0x10624dd3

08007870 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007874:	4904      	ldr	r1, [pc, #16]	; (8007888 <MX_FATFS_Init+0x18>)
 8007876:	4805      	ldr	r0, [pc, #20]	; (800788c <MX_FATFS_Init+0x1c>)
 8007878:	f002 fcd0 	bl	800a21c <FATFS_LinkDriver>
 800787c:	4603      	mov	r3, r0
 800787e:	461a      	mov	r2, r3
 8007880:	4b03      	ldr	r3, [pc, #12]	; (8007890 <MX_FATFS_Init+0x20>)
 8007882:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007884:	bf00      	nop
 8007886:	bd80      	pop	{r7, pc}
 8007888:	20000438 	.word	0x20000438
 800788c:	0800ebc0 	.word	0x0800ebc0
 8007890:	20000434 	.word	0x20000434

08007894 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007894:	b480      	push	{r7}
 8007896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007898:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800789a:	4618      	mov	r0, r3
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80078aa:	2300      	movs	r3, #0
 80078ac:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80078ae:	f000 f896 	bl	80079de <BSP_SD_IsDetected>
 80078b2:	4603      	mov	r3, r0
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d001      	beq.n	80078bc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80078b8:	2302      	movs	r3, #2
 80078ba:	e012      	b.n	80078e2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80078bc:	480b      	ldr	r0, [pc, #44]	; (80078ec <BSP_SD_Init+0x48>)
 80078be:	f7fd fa41 	bl	8004d44 <HAL_SD_Init>
 80078c2:	4603      	mov	r3, r0
 80078c4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80078c6:	79fb      	ldrb	r3, [r7, #7]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d109      	bne.n	80078e0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80078cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80078d0:	4806      	ldr	r0, [pc, #24]	; (80078ec <BSP_SD_Init+0x48>)
 80078d2:	f7fe f807 	bl	80058e4 <HAL_SD_ConfigWideBusOperation>
 80078d6:	4603      	mov	r3, r0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d001      	beq.n	80078e0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80078e0:	79fb      	ldrb	r3, [r7, #7]
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3708      	adds	r7, #8
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	20000264 	.word	0x20000264

080078f0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b086      	sub	sp, #24
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80078fc:	2300      	movs	r3, #0
 80078fe:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	68ba      	ldr	r2, [r7, #8]
 8007904:	68f9      	ldr	r1, [r7, #12]
 8007906:	4806      	ldr	r0, [pc, #24]	; (8007920 <BSP_SD_ReadBlocks_DMA+0x30>)
 8007908:	f7fd fad4 	bl	8004eb4 <HAL_SD_ReadBlocks_DMA>
 800790c:	4603      	mov	r3, r0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d001      	beq.n	8007916 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007916:	7dfb      	ldrb	r3, [r7, #23]
}
 8007918:	4618      	mov	r0, r3
 800791a:	3718      	adds	r7, #24
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}
 8007920:	20000264 	.word	0x20000264

08007924 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b086      	sub	sp, #24
 8007928:	af00      	add	r7, sp, #0
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	60b9      	str	r1, [r7, #8]
 800792e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007930:	2300      	movs	r3, #0
 8007932:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	68ba      	ldr	r2, [r7, #8]
 8007938:	68f9      	ldr	r1, [r7, #12]
 800793a:	4806      	ldr	r0, [pc, #24]	; (8007954 <BSP_SD_WriteBlocks_DMA+0x30>)
 800793c:	f7fd fb9c 	bl	8005078 <HAL_SD_WriteBlocks_DMA>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d001      	beq.n	800794a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800794a:	7dfb      	ldrb	r3, [r7, #23]
}
 800794c:	4618      	mov	r0, r3
 800794e:	3718      	adds	r7, #24
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}
 8007954:	20000264 	.word	0x20000264

08007958 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800795c:	4805      	ldr	r0, [pc, #20]	; (8007974 <BSP_SD_GetCardState+0x1c>)
 800795e:	f7fe f85b 	bl	8005a18 <HAL_SD_GetCardState>
 8007962:	4603      	mov	r3, r0
 8007964:	2b04      	cmp	r3, #4
 8007966:	bf14      	ite	ne
 8007968:	2301      	movne	r3, #1
 800796a:	2300      	moveq	r3, #0
 800796c:	b2db      	uxtb	r3, r3
}
 800796e:	4618      	mov	r0, r3
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	20000264 	.word	0x20000264

08007978 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8007980:	6879      	ldr	r1, [r7, #4]
 8007982:	4803      	ldr	r0, [pc, #12]	; (8007990 <BSP_SD_GetCardInfo+0x18>)
 8007984:	f7fd ff82 	bl	800588c <HAL_SD_GetCardInfo>
}
 8007988:	bf00      	nop
 800798a:	3708      	adds	r7, #8
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}
 8007990:	20000264 	.word	0x20000264

08007994 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800799c:	f000 f818 	bl	80079d0 <BSP_SD_AbortCallback>
}
 80079a0:	bf00      	nop
 80079a2:	3708      	adds	r7, #8
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80079b0:	f000 f98c 	bl	8007ccc <BSP_SD_WriteCpltCallback>
}
 80079b4:	bf00      	nop
 80079b6:	3708      	adds	r7, #8
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80079c4:	f000 f98e 	bl	8007ce4 <BSP_SD_ReadCpltCallback>
}
 80079c8:	bf00      	nop
 80079ca:	3708      	adds	r7, #8
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80079d0:	b480      	push	{r7}
 80079d2:	af00      	add	r7, sp, #0

}
 80079d4:	bf00      	nop
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr

080079de <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80079de:	b480      	push	{r7}
 80079e0:	b083      	sub	sp, #12
 80079e2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80079e4:	2301      	movs	r3, #1
 80079e6:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80079e8:	79fb      	ldrb	r3, [r7, #7]
 80079ea:	b2db      	uxtb	r3, r3
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	370c      	adds	r7, #12
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr

080079f8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8007a00:	f7fa fa56 	bl	8001eb0 <HAL_GetTick>
 8007a04:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8007a06:	e006      	b.n	8007a16 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007a08:	f7ff ffa6 	bl	8007958 <BSP_SD_GetCardState>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d101      	bne.n	8007a16 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8007a12:	2300      	movs	r3, #0
 8007a14:	e009      	b.n	8007a2a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8007a16:	f7fa fa4b 	bl	8001eb0 <HAL_GetTick>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	1ad3      	subs	r3, r2, r3
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d8f0      	bhi.n	8007a08 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8007a26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3710      	adds	r7, #16
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
	...

08007a34 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007a3e:	4b0b      	ldr	r3, [pc, #44]	; (8007a6c <SD_CheckStatus+0x38>)
 8007a40:	2201      	movs	r2, #1
 8007a42:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8007a44:	f7ff ff88 	bl	8007958 <BSP_SD_GetCardState>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d107      	bne.n	8007a5e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007a4e:	4b07      	ldr	r3, [pc, #28]	; (8007a6c <SD_CheckStatus+0x38>)
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	f023 0301 	bic.w	r3, r3, #1
 8007a58:	b2da      	uxtb	r2, r3
 8007a5a:	4b04      	ldr	r3, [pc, #16]	; (8007a6c <SD_CheckStatus+0x38>)
 8007a5c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007a5e:	4b03      	ldr	r3, [pc, #12]	; (8007a6c <SD_CheckStatus+0x38>)
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	b2db      	uxtb	r3, r3
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3708      	adds	r7, #8
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	20000009 	.word	0x20000009

08007a70 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	4603      	mov	r3, r0
 8007a78:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8007a7a:	f7ff ff13 	bl	80078a4 <BSP_SD_Init>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d107      	bne.n	8007a94 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8007a84:	79fb      	ldrb	r3, [r7, #7]
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7ff ffd4 	bl	8007a34 <SD_CheckStatus>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	461a      	mov	r2, r3
 8007a90:	4b04      	ldr	r3, [pc, #16]	; (8007aa4 <SD_initialize+0x34>)
 8007a92:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8007a94:	4b03      	ldr	r3, [pc, #12]	; (8007aa4 <SD_initialize+0x34>)
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	b2db      	uxtb	r3, r3
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3708      	adds	r7, #8
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	20000009 	.word	0x20000009

08007aa8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	4603      	mov	r3, r0
 8007ab0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007ab2:	79fb      	ldrb	r3, [r7, #7]
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f7ff ffbd 	bl	8007a34 <SD_CheckStatus>
 8007aba:	4603      	mov	r3, r0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3708      	adds	r7, #8
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b086      	sub	sp, #24
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	60b9      	str	r1, [r7, #8]
 8007acc:	607a      	str	r2, [r7, #4]
 8007ace:	603b      	str	r3, [r7, #0]
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007ad8:	f247 5030 	movw	r0, #30000	; 0x7530
 8007adc:	f7ff ff8c 	bl	80079f8 <SD_CheckStatusWithTimeout>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	da01      	bge.n	8007aea <SD_read+0x26>
  {
    return res;
 8007ae6:	7dfb      	ldrb	r3, [r7, #23]
 8007ae8:	e03b      	b.n	8007b62 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8007aea:	683a      	ldr	r2, [r7, #0]
 8007aec:	6879      	ldr	r1, [r7, #4]
 8007aee:	68b8      	ldr	r0, [r7, #8]
 8007af0:	f7ff fefe 	bl	80078f0 <BSP_SD_ReadBlocks_DMA>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d132      	bne.n	8007b60 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8007afa:	4b1c      	ldr	r3, [pc, #112]	; (8007b6c <SD_read+0xa8>)
 8007afc:	2200      	movs	r2, #0
 8007afe:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8007b00:	f7fa f9d6 	bl	8001eb0 <HAL_GetTick>
 8007b04:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8007b06:	bf00      	nop
 8007b08:	4b18      	ldr	r3, [pc, #96]	; (8007b6c <SD_read+0xa8>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d108      	bne.n	8007b22 <SD_read+0x5e>
 8007b10:	f7fa f9ce 	bl	8001eb0 <HAL_GetTick>
 8007b14:	4602      	mov	r2, r0
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	1ad3      	subs	r3, r2, r3
 8007b1a:	f247 522f 	movw	r2, #29999	; 0x752f
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d9f2      	bls.n	8007b08 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8007b22:	4b12      	ldr	r3, [pc, #72]	; (8007b6c <SD_read+0xa8>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d102      	bne.n	8007b30 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	75fb      	strb	r3, [r7, #23]
 8007b2e:	e017      	b.n	8007b60 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8007b30:	4b0e      	ldr	r3, [pc, #56]	; (8007b6c <SD_read+0xa8>)
 8007b32:	2200      	movs	r2, #0
 8007b34:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8007b36:	f7fa f9bb 	bl	8001eb0 <HAL_GetTick>
 8007b3a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007b3c:	e007      	b.n	8007b4e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007b3e:	f7ff ff0b 	bl	8007958 <BSP_SD_GetCardState>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d102      	bne.n	8007b4e <SD_read+0x8a>
          {
            res = RES_OK;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8007b4c:	e008      	b.n	8007b60 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007b4e:	f7fa f9af 	bl	8001eb0 <HAL_GetTick>
 8007b52:	4602      	mov	r2, r0
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	1ad3      	subs	r3, r2, r3
 8007b58:	f247 522f 	movw	r2, #29999	; 0x752f
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d9ee      	bls.n	8007b3e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8007b60:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3718      	adds	r7, #24
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
 8007b6a:	bf00      	nop
 8007b6c:	20000440 	.word	0x20000440

08007b70 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b086      	sub	sp, #24
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	60b9      	str	r1, [r7, #8]
 8007b78:	607a      	str	r2, [r7, #4]
 8007b7a:	603b      	str	r3, [r7, #0]
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007b80:	2301      	movs	r3, #1
 8007b82:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8007b84:	4b24      	ldr	r3, [pc, #144]	; (8007c18 <SD_write+0xa8>)
 8007b86:	2200      	movs	r2, #0
 8007b88:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007b8a:	f247 5030 	movw	r0, #30000	; 0x7530
 8007b8e:	f7ff ff33 	bl	80079f8 <SD_CheckStatusWithTimeout>
 8007b92:	4603      	mov	r3, r0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	da01      	bge.n	8007b9c <SD_write+0x2c>
  {
    return res;
 8007b98:	7dfb      	ldrb	r3, [r7, #23]
 8007b9a:	e038      	b.n	8007c0e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8007b9c:	683a      	ldr	r2, [r7, #0]
 8007b9e:	6879      	ldr	r1, [r7, #4]
 8007ba0:	68b8      	ldr	r0, [r7, #8]
 8007ba2:	f7ff febf 	bl	8007924 <BSP_SD_WriteBlocks_DMA>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d12f      	bne.n	8007c0c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8007bac:	f7fa f980 	bl	8001eb0 <HAL_GetTick>
 8007bb0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8007bb2:	bf00      	nop
 8007bb4:	4b18      	ldr	r3, [pc, #96]	; (8007c18 <SD_write+0xa8>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d108      	bne.n	8007bce <SD_write+0x5e>
 8007bbc:	f7fa f978 	bl	8001eb0 <HAL_GetTick>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	1ad3      	subs	r3, r2, r3
 8007bc6:	f247 522f 	movw	r2, #29999	; 0x752f
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d9f2      	bls.n	8007bb4 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8007bce:	4b12      	ldr	r3, [pc, #72]	; (8007c18 <SD_write+0xa8>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d102      	bne.n	8007bdc <SD_write+0x6c>
      {
        res = RES_ERROR;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	75fb      	strb	r3, [r7, #23]
 8007bda:	e017      	b.n	8007c0c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8007bdc:	4b0e      	ldr	r3, [pc, #56]	; (8007c18 <SD_write+0xa8>)
 8007bde:	2200      	movs	r2, #0
 8007be0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8007be2:	f7fa f965 	bl	8001eb0 <HAL_GetTick>
 8007be6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007be8:	e007      	b.n	8007bfa <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007bea:	f7ff feb5 	bl	8007958 <BSP_SD_GetCardState>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d102      	bne.n	8007bfa <SD_write+0x8a>
          {
            res = RES_OK;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	75fb      	strb	r3, [r7, #23]
            break;
 8007bf8:	e008      	b.n	8007c0c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007bfa:	f7fa f959 	bl	8001eb0 <HAL_GetTick>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	1ad3      	subs	r3, r2, r3
 8007c04:	f247 522f 	movw	r2, #29999	; 0x752f
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d9ee      	bls.n	8007bea <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8007c0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3718      	adds	r7, #24
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	2000043c 	.word	0x2000043c

08007c1c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b08c      	sub	sp, #48	; 0x30
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	4603      	mov	r3, r0
 8007c24:	603a      	str	r2, [r7, #0]
 8007c26:	71fb      	strb	r3, [r7, #7]
 8007c28:	460b      	mov	r3, r1
 8007c2a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007c32:	4b25      	ldr	r3, [pc, #148]	; (8007cc8 <SD_ioctl+0xac>)
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	f003 0301 	and.w	r3, r3, #1
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d001      	beq.n	8007c44 <SD_ioctl+0x28>
 8007c40:	2303      	movs	r3, #3
 8007c42:	e03c      	b.n	8007cbe <SD_ioctl+0xa2>

  switch (cmd)
 8007c44:	79bb      	ldrb	r3, [r7, #6]
 8007c46:	2b03      	cmp	r3, #3
 8007c48:	d834      	bhi.n	8007cb4 <SD_ioctl+0x98>
 8007c4a:	a201      	add	r2, pc, #4	; (adr r2, 8007c50 <SD_ioctl+0x34>)
 8007c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c50:	08007c61 	.word	0x08007c61
 8007c54:	08007c69 	.word	0x08007c69
 8007c58:	08007c81 	.word	0x08007c81
 8007c5c:	08007c9b 	.word	0x08007c9b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007c60:	2300      	movs	r3, #0
 8007c62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007c66:	e028      	b.n	8007cba <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007c68:	f107 030c 	add.w	r3, r7, #12
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f7ff fe83 	bl	8007978 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007c7e:	e01c      	b.n	8007cba <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007c80:	f107 030c 	add.w	r3, r7, #12
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7ff fe77 	bl	8007978 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c8c:	b29a      	uxth	r2, r3
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8007c92:	2300      	movs	r3, #0
 8007c94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007c98:	e00f      	b.n	8007cba <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007c9a:	f107 030c 	add.w	r3, r7, #12
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f7ff fe6a 	bl	8007978 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca6:	0a5a      	lsrs	r2, r3, #9
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007cac:	2300      	movs	r3, #0
 8007cae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007cb2:	e002      	b.n	8007cba <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8007cb4:	2304      	movs	r3, #4
 8007cb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8007cba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3730      	adds	r7, #48	; 0x30
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	20000009 	.word	0x20000009

08007ccc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8007cd0:	4b03      	ldr	r3, [pc, #12]	; (8007ce0 <BSP_SD_WriteCpltCallback+0x14>)
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	601a      	str	r2, [r3, #0]
}
 8007cd6:	bf00      	nop
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr
 8007ce0:	2000043c 	.word	0x2000043c

08007ce4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8007ce8:	4b03      	ldr	r3, [pc, #12]	; (8007cf8 <BSP_SD_ReadCpltCallback+0x14>)
 8007cea:	2201      	movs	r2, #1
 8007cec:	601a      	str	r2, [r3, #0]
}
 8007cee:	bf00      	nop
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr
 8007cf8:	20000440 	.word	0x20000440

08007cfc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	4603      	mov	r3, r0
 8007d04:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007d06:	79fb      	ldrb	r3, [r7, #7]
 8007d08:	4a08      	ldr	r2, [pc, #32]	; (8007d2c <disk_status+0x30>)
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	4413      	add	r3, r2
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	79fa      	ldrb	r2, [r7, #7]
 8007d14:	4905      	ldr	r1, [pc, #20]	; (8007d2c <disk_status+0x30>)
 8007d16:	440a      	add	r2, r1
 8007d18:	7a12      	ldrb	r2, [r2, #8]
 8007d1a:	4610      	mov	r0, r2
 8007d1c:	4798      	blx	r3
 8007d1e:	4603      	mov	r3, r0
 8007d20:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3710      	adds	r7, #16
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}
 8007d2c:	2000046c 	.word	0x2000046c

08007d30 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	4603      	mov	r3, r0
 8007d38:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007d3e:	79fb      	ldrb	r3, [r7, #7]
 8007d40:	4a0d      	ldr	r2, [pc, #52]	; (8007d78 <disk_initialize+0x48>)
 8007d42:	5cd3      	ldrb	r3, [r2, r3]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d111      	bne.n	8007d6c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007d48:	79fb      	ldrb	r3, [r7, #7]
 8007d4a:	4a0b      	ldr	r2, [pc, #44]	; (8007d78 <disk_initialize+0x48>)
 8007d4c:	2101      	movs	r1, #1
 8007d4e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007d50:	79fb      	ldrb	r3, [r7, #7]
 8007d52:	4a09      	ldr	r2, [pc, #36]	; (8007d78 <disk_initialize+0x48>)
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	4413      	add	r3, r2
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	79fa      	ldrb	r2, [r7, #7]
 8007d5e:	4906      	ldr	r1, [pc, #24]	; (8007d78 <disk_initialize+0x48>)
 8007d60:	440a      	add	r2, r1
 8007d62:	7a12      	ldrb	r2, [r2, #8]
 8007d64:	4610      	mov	r0, r2
 8007d66:	4798      	blx	r3
 8007d68:	4603      	mov	r3, r0
 8007d6a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	2000046c 	.word	0x2000046c

08007d7c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007d7c:	b590      	push	{r4, r7, lr}
 8007d7e:	b087      	sub	sp, #28
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60b9      	str	r1, [r7, #8]
 8007d84:	607a      	str	r2, [r7, #4]
 8007d86:	603b      	str	r3, [r7, #0]
 8007d88:	4603      	mov	r3, r0
 8007d8a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007d8c:	7bfb      	ldrb	r3, [r7, #15]
 8007d8e:	4a0a      	ldr	r2, [pc, #40]	; (8007db8 <disk_read+0x3c>)
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	4413      	add	r3, r2
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	689c      	ldr	r4, [r3, #8]
 8007d98:	7bfb      	ldrb	r3, [r7, #15]
 8007d9a:	4a07      	ldr	r2, [pc, #28]	; (8007db8 <disk_read+0x3c>)
 8007d9c:	4413      	add	r3, r2
 8007d9e:	7a18      	ldrb	r0, [r3, #8]
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	68b9      	ldr	r1, [r7, #8]
 8007da6:	47a0      	blx	r4
 8007da8:	4603      	mov	r3, r0
 8007daa:	75fb      	strb	r3, [r7, #23]
  return res;
 8007dac:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	371c      	adds	r7, #28
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd90      	pop	{r4, r7, pc}
 8007db6:	bf00      	nop
 8007db8:	2000046c 	.word	0x2000046c

08007dbc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007dbc:	b590      	push	{r4, r7, lr}
 8007dbe:	b087      	sub	sp, #28
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	60b9      	str	r1, [r7, #8]
 8007dc4:	607a      	str	r2, [r7, #4]
 8007dc6:	603b      	str	r3, [r7, #0]
 8007dc8:	4603      	mov	r3, r0
 8007dca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007dcc:	7bfb      	ldrb	r3, [r7, #15]
 8007dce:	4a0a      	ldr	r2, [pc, #40]	; (8007df8 <disk_write+0x3c>)
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	4413      	add	r3, r2
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	68dc      	ldr	r4, [r3, #12]
 8007dd8:	7bfb      	ldrb	r3, [r7, #15]
 8007dda:	4a07      	ldr	r2, [pc, #28]	; (8007df8 <disk_write+0x3c>)
 8007ddc:	4413      	add	r3, r2
 8007dde:	7a18      	ldrb	r0, [r3, #8]
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	68b9      	ldr	r1, [r7, #8]
 8007de6:	47a0      	blx	r4
 8007de8:	4603      	mov	r3, r0
 8007dea:	75fb      	strb	r3, [r7, #23]
  return res;
 8007dec:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	371c      	adds	r7, #28
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd90      	pop	{r4, r7, pc}
 8007df6:	bf00      	nop
 8007df8:	2000046c 	.word	0x2000046c

08007dfc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	4603      	mov	r3, r0
 8007e04:	603a      	str	r2, [r7, #0]
 8007e06:	71fb      	strb	r3, [r7, #7]
 8007e08:	460b      	mov	r3, r1
 8007e0a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007e0c:	79fb      	ldrb	r3, [r7, #7]
 8007e0e:	4a09      	ldr	r2, [pc, #36]	; (8007e34 <disk_ioctl+0x38>)
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	4413      	add	r3, r2
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	79fa      	ldrb	r2, [r7, #7]
 8007e1a:	4906      	ldr	r1, [pc, #24]	; (8007e34 <disk_ioctl+0x38>)
 8007e1c:	440a      	add	r2, r1
 8007e1e:	7a10      	ldrb	r0, [r2, #8]
 8007e20:	79b9      	ldrb	r1, [r7, #6]
 8007e22:	683a      	ldr	r2, [r7, #0]
 8007e24:	4798      	blx	r3
 8007e26:	4603      	mov	r3, r0
 8007e28:	73fb      	strb	r3, [r7, #15]
  return res;
 8007e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3710      	adds	r7, #16
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	2000046c 	.word	0x2000046c

08007e38 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b085      	sub	sp, #20
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	3301      	adds	r3, #1
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007e48:	89fb      	ldrh	r3, [r7, #14]
 8007e4a:	021b      	lsls	r3, r3, #8
 8007e4c:	b21a      	sxth	r2, r3
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	b21b      	sxth	r3, r3
 8007e54:	4313      	orrs	r3, r2
 8007e56:	b21b      	sxth	r3, r3
 8007e58:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007e5a:	89fb      	ldrh	r3, [r7, #14]
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3714      	adds	r7, #20
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	3303      	adds	r3, #3
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	021b      	lsls	r3, r3, #8
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	3202      	adds	r2, #2
 8007e80:	7812      	ldrb	r2, [r2, #0]
 8007e82:	4313      	orrs	r3, r2
 8007e84:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	021b      	lsls	r3, r3, #8
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	3201      	adds	r2, #1
 8007e8e:	7812      	ldrb	r2, [r2, #0]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	021b      	lsls	r3, r3, #8
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	7812      	ldrb	r2, [r2, #0]
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	60fb      	str	r3, [r7, #12]
	return rv;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3714      	adds	r7, #20
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr

08007eae <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007eae:	b480      	push	{r7}
 8007eb0:	b083      	sub	sp, #12
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6078      	str	r0, [r7, #4]
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	1c5a      	adds	r2, r3, #1
 8007ebe:	607a      	str	r2, [r7, #4]
 8007ec0:	887a      	ldrh	r2, [r7, #2]
 8007ec2:	b2d2      	uxtb	r2, r2
 8007ec4:	701a      	strb	r2, [r3, #0]
 8007ec6:	887b      	ldrh	r3, [r7, #2]
 8007ec8:	0a1b      	lsrs	r3, r3, #8
 8007eca:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	1c5a      	adds	r2, r3, #1
 8007ed0:	607a      	str	r2, [r7, #4]
 8007ed2:	887a      	ldrh	r2, [r7, #2]
 8007ed4:	b2d2      	uxtb	r2, r2
 8007ed6:	701a      	strb	r2, [r3, #0]
}
 8007ed8:	bf00      	nop
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b083      	sub	sp, #12
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	1c5a      	adds	r2, r3, #1
 8007ef2:	607a      	str	r2, [r7, #4]
 8007ef4:	683a      	ldr	r2, [r7, #0]
 8007ef6:	b2d2      	uxtb	r2, r2
 8007ef8:	701a      	strb	r2, [r3, #0]
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	0a1b      	lsrs	r3, r3, #8
 8007efe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	1c5a      	adds	r2, r3, #1
 8007f04:	607a      	str	r2, [r7, #4]
 8007f06:	683a      	ldr	r2, [r7, #0]
 8007f08:	b2d2      	uxtb	r2, r2
 8007f0a:	701a      	strb	r2, [r3, #0]
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	0a1b      	lsrs	r3, r3, #8
 8007f10:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	1c5a      	adds	r2, r3, #1
 8007f16:	607a      	str	r2, [r7, #4]
 8007f18:	683a      	ldr	r2, [r7, #0]
 8007f1a:	b2d2      	uxtb	r2, r2
 8007f1c:	701a      	strb	r2, [r3, #0]
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	0a1b      	lsrs	r3, r3, #8
 8007f22:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	1c5a      	adds	r2, r3, #1
 8007f28:	607a      	str	r2, [r7, #4]
 8007f2a:	683a      	ldr	r2, [r7, #0]
 8007f2c:	b2d2      	uxtb	r2, r2
 8007f2e:	701a      	strb	r2, [r3, #0]
}
 8007f30:	bf00      	nop
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007f3c:	b480      	push	{r7}
 8007f3e:	b087      	sub	sp, #28
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	60f8      	str	r0, [r7, #12]
 8007f44:	60b9      	str	r1, [r7, #8]
 8007f46:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d00d      	beq.n	8007f72 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007f56:	693a      	ldr	r2, [r7, #16]
 8007f58:	1c53      	adds	r3, r2, #1
 8007f5a:	613b      	str	r3, [r7, #16]
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	1c59      	adds	r1, r3, #1
 8007f60:	6179      	str	r1, [r7, #20]
 8007f62:	7812      	ldrb	r2, [r2, #0]
 8007f64:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	3b01      	subs	r3, #1
 8007f6a:	607b      	str	r3, [r7, #4]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d1f1      	bne.n	8007f56 <mem_cpy+0x1a>
	}
}
 8007f72:	bf00      	nop
 8007f74:	371c      	adds	r7, #28
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr

08007f7e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007f7e:	b480      	push	{r7}
 8007f80:	b087      	sub	sp, #28
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	60f8      	str	r0, [r7, #12]
 8007f86:	60b9      	str	r1, [r7, #8]
 8007f88:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	1c5a      	adds	r2, r3, #1
 8007f92:	617a      	str	r2, [r7, #20]
 8007f94:	68ba      	ldr	r2, [r7, #8]
 8007f96:	b2d2      	uxtb	r2, r2
 8007f98:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	3b01      	subs	r3, #1
 8007f9e:	607b      	str	r3, [r7, #4]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d1f3      	bne.n	8007f8e <mem_set+0x10>
}
 8007fa6:	bf00      	nop
 8007fa8:	bf00      	nop
 8007faa:	371c      	adds	r7, #28
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007fb4:	b480      	push	{r7}
 8007fb6:	b089      	sub	sp, #36	; 0x24
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	61fb      	str	r3, [r7, #28]
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	1c5a      	adds	r2, r3, #1
 8007fd0:	61fa      	str	r2, [r7, #28]
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	1c5a      	adds	r2, r3, #1
 8007fda:	61ba      	str	r2, [r7, #24]
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	1acb      	subs	r3, r1, r3
 8007fe0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	3b01      	subs	r3, #1
 8007fe6:	607b      	str	r3, [r7, #4]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d002      	beq.n	8007ff4 <mem_cmp+0x40>
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d0eb      	beq.n	8007fcc <mem_cmp+0x18>

	return r;
 8007ff4:	697b      	ldr	r3, [r7, #20]
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3724      	adds	r7, #36	; 0x24
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr

08008002 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008002:	b480      	push	{r7}
 8008004:	b083      	sub	sp, #12
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
 800800a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800800c:	e002      	b.n	8008014 <chk_chr+0x12>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	3301      	adds	r3, #1
 8008012:	607b      	str	r3, [r7, #4]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d005      	beq.n	8008028 <chk_chr+0x26>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	461a      	mov	r2, r3
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	4293      	cmp	r3, r2
 8008026:	d1f2      	bne.n	800800e <chk_chr+0xc>
	return *str;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	781b      	ldrb	r3, [r3, #0]
}
 800802c:	4618      	mov	r0, r3
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008038:	b480      	push	{r7}
 800803a:	b085      	sub	sp, #20
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008042:	2300      	movs	r3, #0
 8008044:	60bb      	str	r3, [r7, #8]
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	60fb      	str	r3, [r7, #12]
 800804a:	e029      	b.n	80080a0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800804c:	4a27      	ldr	r2, [pc, #156]	; (80080ec <chk_lock+0xb4>)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	011b      	lsls	r3, r3, #4
 8008052:	4413      	add	r3, r2
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d01d      	beq.n	8008096 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800805a:	4a24      	ldr	r2, [pc, #144]	; (80080ec <chk_lock+0xb4>)
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	011b      	lsls	r3, r3, #4
 8008060:	4413      	add	r3, r2
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	429a      	cmp	r2, r3
 800806a:	d116      	bne.n	800809a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800806c:	4a1f      	ldr	r2, [pc, #124]	; (80080ec <chk_lock+0xb4>)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	011b      	lsls	r3, r3, #4
 8008072:	4413      	add	r3, r2
 8008074:	3304      	adds	r3, #4
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800807c:	429a      	cmp	r2, r3
 800807e:	d10c      	bne.n	800809a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008080:	4a1a      	ldr	r2, [pc, #104]	; (80080ec <chk_lock+0xb4>)
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	011b      	lsls	r3, r3, #4
 8008086:	4413      	add	r3, r2
 8008088:	3308      	adds	r3, #8
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008090:	429a      	cmp	r2, r3
 8008092:	d102      	bne.n	800809a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008094:	e007      	b.n	80080a6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008096:	2301      	movs	r3, #1
 8008098:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	3301      	adds	r3, #1
 800809e:	60fb      	str	r3, [r7, #12]
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d9d2      	bls.n	800804c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2b02      	cmp	r3, #2
 80080aa:	d109      	bne.n	80080c0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d102      	bne.n	80080b8 <chk_lock+0x80>
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	d101      	bne.n	80080bc <chk_lock+0x84>
 80080b8:	2300      	movs	r3, #0
 80080ba:	e010      	b.n	80080de <chk_lock+0xa6>
 80080bc:	2312      	movs	r3, #18
 80080be:	e00e      	b.n	80080de <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d108      	bne.n	80080d8 <chk_lock+0xa0>
 80080c6:	4a09      	ldr	r2, [pc, #36]	; (80080ec <chk_lock+0xb4>)
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	011b      	lsls	r3, r3, #4
 80080cc:	4413      	add	r3, r2
 80080ce:	330c      	adds	r3, #12
 80080d0:	881b      	ldrh	r3, [r3, #0]
 80080d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080d6:	d101      	bne.n	80080dc <chk_lock+0xa4>
 80080d8:	2310      	movs	r3, #16
 80080da:	e000      	b.n	80080de <chk_lock+0xa6>
 80080dc:	2300      	movs	r3, #0
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3714      	adds	r7, #20
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop
 80080ec:	2000044c 	.word	0x2000044c

080080f0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80080f6:	2300      	movs	r3, #0
 80080f8:	607b      	str	r3, [r7, #4]
 80080fa:	e002      	b.n	8008102 <enq_lock+0x12>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	3301      	adds	r3, #1
 8008100:	607b      	str	r3, [r7, #4]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2b01      	cmp	r3, #1
 8008106:	d806      	bhi.n	8008116 <enq_lock+0x26>
 8008108:	4a09      	ldr	r2, [pc, #36]	; (8008130 <enq_lock+0x40>)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	011b      	lsls	r3, r3, #4
 800810e:	4413      	add	r3, r2
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d1f2      	bne.n	80080fc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2b02      	cmp	r3, #2
 800811a:	bf14      	ite	ne
 800811c:	2301      	movne	r3, #1
 800811e:	2300      	moveq	r3, #0
 8008120:	b2db      	uxtb	r3, r3
}
 8008122:	4618      	mov	r0, r3
 8008124:	370c      	adds	r7, #12
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop
 8008130:	2000044c 	.word	0x2000044c

08008134 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008134:	b480      	push	{r7}
 8008136:	b085      	sub	sp, #20
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800813e:	2300      	movs	r3, #0
 8008140:	60fb      	str	r3, [r7, #12]
 8008142:	e01f      	b.n	8008184 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008144:	4a41      	ldr	r2, [pc, #260]	; (800824c <inc_lock+0x118>)
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	011b      	lsls	r3, r3, #4
 800814a:	4413      	add	r3, r2
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	429a      	cmp	r2, r3
 8008154:	d113      	bne.n	800817e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008156:	4a3d      	ldr	r2, [pc, #244]	; (800824c <inc_lock+0x118>)
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	011b      	lsls	r3, r3, #4
 800815c:	4413      	add	r3, r2
 800815e:	3304      	adds	r3, #4
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008166:	429a      	cmp	r2, r3
 8008168:	d109      	bne.n	800817e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800816a:	4a38      	ldr	r2, [pc, #224]	; (800824c <inc_lock+0x118>)
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	011b      	lsls	r3, r3, #4
 8008170:	4413      	add	r3, r2
 8008172:	3308      	adds	r3, #8
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800817a:	429a      	cmp	r2, r3
 800817c:	d006      	beq.n	800818c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	3301      	adds	r3, #1
 8008182:	60fb      	str	r3, [r7, #12]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2b01      	cmp	r3, #1
 8008188:	d9dc      	bls.n	8008144 <inc_lock+0x10>
 800818a:	e000      	b.n	800818e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800818c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2b02      	cmp	r3, #2
 8008192:	d132      	bne.n	80081fa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008194:	2300      	movs	r3, #0
 8008196:	60fb      	str	r3, [r7, #12]
 8008198:	e002      	b.n	80081a0 <inc_lock+0x6c>
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	3301      	adds	r3, #1
 800819e:	60fb      	str	r3, [r7, #12]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d806      	bhi.n	80081b4 <inc_lock+0x80>
 80081a6:	4a29      	ldr	r2, [pc, #164]	; (800824c <inc_lock+0x118>)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	011b      	lsls	r3, r3, #4
 80081ac:	4413      	add	r3, r2
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d1f2      	bne.n	800819a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	d101      	bne.n	80081be <inc_lock+0x8a>
 80081ba:	2300      	movs	r3, #0
 80081bc:	e040      	b.n	8008240 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	4922      	ldr	r1, [pc, #136]	; (800824c <inc_lock+0x118>)
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	011b      	lsls	r3, r3, #4
 80081c8:	440b      	add	r3, r1
 80081ca:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	689a      	ldr	r2, [r3, #8]
 80081d0:	491e      	ldr	r1, [pc, #120]	; (800824c <inc_lock+0x118>)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	011b      	lsls	r3, r3, #4
 80081d6:	440b      	add	r3, r1
 80081d8:	3304      	adds	r3, #4
 80081da:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	695a      	ldr	r2, [r3, #20]
 80081e0:	491a      	ldr	r1, [pc, #104]	; (800824c <inc_lock+0x118>)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	011b      	lsls	r3, r3, #4
 80081e6:	440b      	add	r3, r1
 80081e8:	3308      	adds	r3, #8
 80081ea:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80081ec:	4a17      	ldr	r2, [pc, #92]	; (800824c <inc_lock+0x118>)
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	011b      	lsls	r3, r3, #4
 80081f2:	4413      	add	r3, r2
 80081f4:	330c      	adds	r3, #12
 80081f6:	2200      	movs	r2, #0
 80081f8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d009      	beq.n	8008214 <inc_lock+0xe0>
 8008200:	4a12      	ldr	r2, [pc, #72]	; (800824c <inc_lock+0x118>)
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	011b      	lsls	r3, r3, #4
 8008206:	4413      	add	r3, r2
 8008208:	330c      	adds	r3, #12
 800820a:	881b      	ldrh	r3, [r3, #0]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d001      	beq.n	8008214 <inc_lock+0xe0>
 8008210:	2300      	movs	r3, #0
 8008212:	e015      	b.n	8008240 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d108      	bne.n	800822c <inc_lock+0xf8>
 800821a:	4a0c      	ldr	r2, [pc, #48]	; (800824c <inc_lock+0x118>)
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	011b      	lsls	r3, r3, #4
 8008220:	4413      	add	r3, r2
 8008222:	330c      	adds	r3, #12
 8008224:	881b      	ldrh	r3, [r3, #0]
 8008226:	3301      	adds	r3, #1
 8008228:	b29a      	uxth	r2, r3
 800822a:	e001      	b.n	8008230 <inc_lock+0xfc>
 800822c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008230:	4906      	ldr	r1, [pc, #24]	; (800824c <inc_lock+0x118>)
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	011b      	lsls	r3, r3, #4
 8008236:	440b      	add	r3, r1
 8008238:	330c      	adds	r3, #12
 800823a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	3301      	adds	r3, #1
}
 8008240:	4618      	mov	r0, r3
 8008242:	3714      	adds	r7, #20
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr
 800824c:	2000044c 	.word	0x2000044c

08008250 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008250:	b480      	push	{r7}
 8008252:	b085      	sub	sp, #20
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	3b01      	subs	r3, #1
 800825c:	607b      	str	r3, [r7, #4]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2b01      	cmp	r3, #1
 8008262:	d825      	bhi.n	80082b0 <dec_lock+0x60>
		n = Files[i].ctr;
 8008264:	4a17      	ldr	r2, [pc, #92]	; (80082c4 <dec_lock+0x74>)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	011b      	lsls	r3, r3, #4
 800826a:	4413      	add	r3, r2
 800826c:	330c      	adds	r3, #12
 800826e:	881b      	ldrh	r3, [r3, #0]
 8008270:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008272:	89fb      	ldrh	r3, [r7, #14]
 8008274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008278:	d101      	bne.n	800827e <dec_lock+0x2e>
 800827a:	2300      	movs	r3, #0
 800827c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800827e:	89fb      	ldrh	r3, [r7, #14]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d002      	beq.n	800828a <dec_lock+0x3a>
 8008284:	89fb      	ldrh	r3, [r7, #14]
 8008286:	3b01      	subs	r3, #1
 8008288:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800828a:	4a0e      	ldr	r2, [pc, #56]	; (80082c4 <dec_lock+0x74>)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	011b      	lsls	r3, r3, #4
 8008290:	4413      	add	r3, r2
 8008292:	330c      	adds	r3, #12
 8008294:	89fa      	ldrh	r2, [r7, #14]
 8008296:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008298:	89fb      	ldrh	r3, [r7, #14]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d105      	bne.n	80082aa <dec_lock+0x5a>
 800829e:	4a09      	ldr	r2, [pc, #36]	; (80082c4 <dec_lock+0x74>)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	011b      	lsls	r3, r3, #4
 80082a4:	4413      	add	r3, r2
 80082a6:	2200      	movs	r2, #0
 80082a8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80082aa:	2300      	movs	r3, #0
 80082ac:	737b      	strb	r3, [r7, #13]
 80082ae:	e001      	b.n	80082b4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80082b0:	2302      	movs	r3, #2
 80082b2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80082b4:	7b7b      	ldrb	r3, [r7, #13]
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3714      	adds	r7, #20
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop
 80082c4:	2000044c 	.word	0x2000044c

080082c8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b085      	sub	sp, #20
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80082d0:	2300      	movs	r3, #0
 80082d2:	60fb      	str	r3, [r7, #12]
 80082d4:	e010      	b.n	80082f8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80082d6:	4a0d      	ldr	r2, [pc, #52]	; (800830c <clear_lock+0x44>)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	011b      	lsls	r3, r3, #4
 80082dc:	4413      	add	r3, r2
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d105      	bne.n	80082f2 <clear_lock+0x2a>
 80082e6:	4a09      	ldr	r2, [pc, #36]	; (800830c <clear_lock+0x44>)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	011b      	lsls	r3, r3, #4
 80082ec:	4413      	add	r3, r2
 80082ee:	2200      	movs	r2, #0
 80082f0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	3301      	adds	r3, #1
 80082f6:	60fb      	str	r3, [r7, #12]
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d9eb      	bls.n	80082d6 <clear_lock+0xe>
	}
}
 80082fe:	bf00      	nop
 8008300:	bf00      	nop
 8008302:	3714      	adds	r7, #20
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr
 800830c:	2000044c 	.word	0x2000044c

08008310 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b086      	sub	sp, #24
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008318:	2300      	movs	r3, #0
 800831a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	78db      	ldrb	r3, [r3, #3]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d034      	beq.n	800838e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008328:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	7858      	ldrb	r0, [r3, #1]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008334:	2301      	movs	r3, #1
 8008336:	697a      	ldr	r2, [r7, #20]
 8008338:	f7ff fd40 	bl	8007dbc <disk_write>
 800833c:	4603      	mov	r3, r0
 800833e:	2b00      	cmp	r3, #0
 8008340:	d002      	beq.n	8008348 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008342:	2301      	movs	r3, #1
 8008344:	73fb      	strb	r3, [r7, #15]
 8008346:	e022      	b.n	800838e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008352:	697a      	ldr	r2, [r7, #20]
 8008354:	1ad2      	subs	r2, r2, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	69db      	ldr	r3, [r3, #28]
 800835a:	429a      	cmp	r2, r3
 800835c:	d217      	bcs.n	800838e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	789b      	ldrb	r3, [r3, #2]
 8008362:	613b      	str	r3, [r7, #16]
 8008364:	e010      	b.n	8008388 <sync_window+0x78>
					wsect += fs->fsize;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	69db      	ldr	r3, [r3, #28]
 800836a:	697a      	ldr	r2, [r7, #20]
 800836c:	4413      	add	r3, r2
 800836e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	7858      	ldrb	r0, [r3, #1]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800837a:	2301      	movs	r3, #1
 800837c:	697a      	ldr	r2, [r7, #20]
 800837e:	f7ff fd1d 	bl	8007dbc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	3b01      	subs	r3, #1
 8008386:	613b      	str	r3, [r7, #16]
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	2b01      	cmp	r3, #1
 800838c:	d8eb      	bhi.n	8008366 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800838e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008390:	4618      	mov	r0, r3
 8008392:	3718      	adds	r7, #24
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80083a2:	2300      	movs	r3, #0
 80083a4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083aa:	683a      	ldr	r2, [r7, #0]
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d01b      	beq.n	80083e8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f7ff ffad 	bl	8008310 <sync_window>
 80083b6:	4603      	mov	r3, r0
 80083b8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80083ba:	7bfb      	ldrb	r3, [r7, #15]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d113      	bne.n	80083e8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	7858      	ldrb	r0, [r3, #1]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80083ca:	2301      	movs	r3, #1
 80083cc:	683a      	ldr	r2, [r7, #0]
 80083ce:	f7ff fcd5 	bl	8007d7c <disk_read>
 80083d2:	4603      	mov	r3, r0
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d004      	beq.n	80083e2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80083d8:	f04f 33ff 	mov.w	r3, #4294967295
 80083dc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80083de:	2301      	movs	r3, #1
 80083e0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	683a      	ldr	r2, [r7, #0]
 80083e6:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80083e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3710      	adds	r7, #16
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
	...

080083f4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f7ff ff87 	bl	8008310 <sync_window>
 8008402:	4603      	mov	r3, r0
 8008404:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008406:	7bfb      	ldrb	r3, [r7, #15]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d159      	bne.n	80084c0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	2b03      	cmp	r3, #3
 8008412:	d149      	bne.n	80084a8 <sync_fs+0xb4>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	791b      	ldrb	r3, [r3, #4]
 8008418:	2b01      	cmp	r3, #1
 800841a:	d145      	bne.n	80084a8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	899b      	ldrh	r3, [r3, #12]
 8008426:	461a      	mov	r2, r3
 8008428:	2100      	movs	r1, #0
 800842a:	f7ff fda8 	bl	8007f7e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	3334      	adds	r3, #52	; 0x34
 8008432:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008436:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800843a:	4618      	mov	r0, r3
 800843c:	f7ff fd37 	bl	8007eae <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	3334      	adds	r3, #52	; 0x34
 8008444:	4921      	ldr	r1, [pc, #132]	; (80084cc <sync_fs+0xd8>)
 8008446:	4618      	mov	r0, r3
 8008448:	f7ff fd4c 	bl	8007ee4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	3334      	adds	r3, #52	; 0x34
 8008450:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008454:	491e      	ldr	r1, [pc, #120]	; (80084d0 <sync_fs+0xdc>)
 8008456:	4618      	mov	r0, r3
 8008458:	f7ff fd44 	bl	8007ee4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	3334      	adds	r3, #52	; 0x34
 8008460:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	695b      	ldr	r3, [r3, #20]
 8008468:	4619      	mov	r1, r3
 800846a:	4610      	mov	r0, r2
 800846c:	f7ff fd3a 	bl	8007ee4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	3334      	adds	r3, #52	; 0x34
 8008474:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	691b      	ldr	r3, [r3, #16]
 800847c:	4619      	mov	r1, r3
 800847e:	4610      	mov	r0, r2
 8008480:	f7ff fd30 	bl	8007ee4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6a1b      	ldr	r3, [r3, #32]
 8008488:	1c5a      	adds	r2, r3, #1
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	7858      	ldrb	r0, [r3, #1]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800849c:	2301      	movs	r3, #1
 800849e:	f7ff fc8d 	bl	8007dbc <disk_write>
			fs->fsi_flag = 0;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	785b      	ldrb	r3, [r3, #1]
 80084ac:	2200      	movs	r2, #0
 80084ae:	2100      	movs	r1, #0
 80084b0:	4618      	mov	r0, r3
 80084b2:	f7ff fca3 	bl	8007dfc <disk_ioctl>
 80084b6:	4603      	mov	r3, r0
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d001      	beq.n	80084c0 <sync_fs+0xcc>
 80084bc:	2301      	movs	r3, #1
 80084be:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80084c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3710      	adds	r7, #16
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
 80084ca:	bf00      	nop
 80084cc:	41615252 	.word	0x41615252
 80084d0:	61417272 	.word	0x61417272

080084d4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	3b02      	subs	r3, #2
 80084e2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	699b      	ldr	r3, [r3, #24]
 80084e8:	3b02      	subs	r3, #2
 80084ea:	683a      	ldr	r2, [r7, #0]
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d301      	bcc.n	80084f4 <clust2sect+0x20>
 80084f0:	2300      	movs	r3, #0
 80084f2:	e008      	b.n	8008506 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	895b      	ldrh	r3, [r3, #10]
 80084f8:	461a      	mov	r2, r3
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	fb03 f202 	mul.w	r2, r3, r2
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008504:	4413      	add	r3, r2
}
 8008506:	4618      	mov	r0, r3
 8008508:	370c      	adds	r7, #12
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr

08008512 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008512:	b580      	push	{r7, lr}
 8008514:	b086      	sub	sp, #24
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
 800851a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	2b01      	cmp	r3, #1
 8008526:	d904      	bls.n	8008532 <get_fat+0x20>
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	699b      	ldr	r3, [r3, #24]
 800852c:	683a      	ldr	r2, [r7, #0]
 800852e:	429a      	cmp	r2, r3
 8008530:	d302      	bcc.n	8008538 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008532:	2301      	movs	r3, #1
 8008534:	617b      	str	r3, [r7, #20]
 8008536:	e0bb      	b.n	80086b0 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008538:	f04f 33ff 	mov.w	r3, #4294967295
 800853c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	2b03      	cmp	r3, #3
 8008544:	f000 8083 	beq.w	800864e <get_fat+0x13c>
 8008548:	2b03      	cmp	r3, #3
 800854a:	f300 80a7 	bgt.w	800869c <get_fat+0x18a>
 800854e:	2b01      	cmp	r3, #1
 8008550:	d002      	beq.n	8008558 <get_fat+0x46>
 8008552:	2b02      	cmp	r3, #2
 8008554:	d056      	beq.n	8008604 <get_fat+0xf2>
 8008556:	e0a1      	b.n	800869c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	60fb      	str	r3, [r7, #12]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	085b      	lsrs	r3, r3, #1
 8008560:	68fa      	ldr	r2, [r7, #12]
 8008562:	4413      	add	r3, r2
 8008564:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	899b      	ldrh	r3, [r3, #12]
 800856e:	4619      	mov	r1, r3
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	fbb3 f3f1 	udiv	r3, r3, r1
 8008576:	4413      	add	r3, r2
 8008578:	4619      	mov	r1, r3
 800857a:	6938      	ldr	r0, [r7, #16]
 800857c:	f7ff ff0c 	bl	8008398 <move_window>
 8008580:	4603      	mov	r3, r0
 8008582:	2b00      	cmp	r3, #0
 8008584:	f040 808d 	bne.w	80086a2 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	1c5a      	adds	r2, r3, #1
 800858c:	60fa      	str	r2, [r7, #12]
 800858e:	693a      	ldr	r2, [r7, #16]
 8008590:	8992      	ldrh	r2, [r2, #12]
 8008592:	fbb3 f1f2 	udiv	r1, r3, r2
 8008596:	fb01 f202 	mul.w	r2, r1, r2
 800859a:	1a9b      	subs	r3, r3, r2
 800859c:	693a      	ldr	r2, [r7, #16]
 800859e:	4413      	add	r3, r2
 80085a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80085a4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	899b      	ldrh	r3, [r3, #12]
 80085ae:	4619      	mov	r1, r3
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80085b6:	4413      	add	r3, r2
 80085b8:	4619      	mov	r1, r3
 80085ba:	6938      	ldr	r0, [r7, #16]
 80085bc:	f7ff feec 	bl	8008398 <move_window>
 80085c0:	4603      	mov	r3, r0
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d16f      	bne.n	80086a6 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	899b      	ldrh	r3, [r3, #12]
 80085ca:	461a      	mov	r2, r3
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80085d2:	fb01 f202 	mul.w	r2, r1, r2
 80085d6:	1a9b      	subs	r3, r3, r2
 80085d8:	693a      	ldr	r2, [r7, #16]
 80085da:	4413      	add	r3, r2
 80085dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80085e0:	021b      	lsls	r3, r3, #8
 80085e2:	461a      	mov	r2, r3
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	4313      	orrs	r3, r2
 80085e8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	f003 0301 	and.w	r3, r3, #1
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d002      	beq.n	80085fa <get_fat+0xe8>
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	091b      	lsrs	r3, r3, #4
 80085f8:	e002      	b.n	8008600 <get_fat+0xee>
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008600:	617b      	str	r3, [r7, #20]
			break;
 8008602:	e055      	b.n	80086b0 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	899b      	ldrh	r3, [r3, #12]
 800860c:	085b      	lsrs	r3, r3, #1
 800860e:	b29b      	uxth	r3, r3
 8008610:	4619      	mov	r1, r3
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	fbb3 f3f1 	udiv	r3, r3, r1
 8008618:	4413      	add	r3, r2
 800861a:	4619      	mov	r1, r3
 800861c:	6938      	ldr	r0, [r7, #16]
 800861e:	f7ff febb 	bl	8008398 <move_window>
 8008622:	4603      	mov	r3, r0
 8008624:	2b00      	cmp	r3, #0
 8008626:	d140      	bne.n	80086aa <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	005b      	lsls	r3, r3, #1
 8008632:	693a      	ldr	r2, [r7, #16]
 8008634:	8992      	ldrh	r2, [r2, #12]
 8008636:	fbb3 f0f2 	udiv	r0, r3, r2
 800863a:	fb00 f202 	mul.w	r2, r0, r2
 800863e:	1a9b      	subs	r3, r3, r2
 8008640:	440b      	add	r3, r1
 8008642:	4618      	mov	r0, r3
 8008644:	f7ff fbf8 	bl	8007e38 <ld_word>
 8008648:	4603      	mov	r3, r0
 800864a:	617b      	str	r3, [r7, #20]
			break;
 800864c:	e030      	b.n	80086b0 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	899b      	ldrh	r3, [r3, #12]
 8008656:	089b      	lsrs	r3, r3, #2
 8008658:	b29b      	uxth	r3, r3
 800865a:	4619      	mov	r1, r3
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008662:	4413      	add	r3, r2
 8008664:	4619      	mov	r1, r3
 8008666:	6938      	ldr	r0, [r7, #16]
 8008668:	f7ff fe96 	bl	8008398 <move_window>
 800866c:	4603      	mov	r3, r0
 800866e:	2b00      	cmp	r3, #0
 8008670:	d11d      	bne.n	80086ae <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	009b      	lsls	r3, r3, #2
 800867c:	693a      	ldr	r2, [r7, #16]
 800867e:	8992      	ldrh	r2, [r2, #12]
 8008680:	fbb3 f0f2 	udiv	r0, r3, r2
 8008684:	fb00 f202 	mul.w	r2, r0, r2
 8008688:	1a9b      	subs	r3, r3, r2
 800868a:	440b      	add	r3, r1
 800868c:	4618      	mov	r0, r3
 800868e:	f7ff fbeb 	bl	8007e68 <ld_dword>
 8008692:	4603      	mov	r3, r0
 8008694:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008698:	617b      	str	r3, [r7, #20]
			break;
 800869a:	e009      	b.n	80086b0 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800869c:	2301      	movs	r3, #1
 800869e:	617b      	str	r3, [r7, #20]
 80086a0:	e006      	b.n	80086b0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80086a2:	bf00      	nop
 80086a4:	e004      	b.n	80086b0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80086a6:	bf00      	nop
 80086a8:	e002      	b.n	80086b0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80086aa:	bf00      	nop
 80086ac:	e000      	b.n	80086b0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80086ae:	bf00      	nop
		}
	}

	return val;
 80086b0:	697b      	ldr	r3, [r7, #20]
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3718      	adds	r7, #24
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}

080086ba <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80086ba:	b590      	push	{r4, r7, lr}
 80086bc:	b089      	sub	sp, #36	; 0x24
 80086be:	af00      	add	r7, sp, #0
 80086c0:	60f8      	str	r0, [r7, #12]
 80086c2:	60b9      	str	r1, [r7, #8]
 80086c4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80086c6:	2302      	movs	r3, #2
 80086c8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	f240 8102 	bls.w	80088d6 <put_fat+0x21c>
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	699b      	ldr	r3, [r3, #24]
 80086d6:	68ba      	ldr	r2, [r7, #8]
 80086d8:	429a      	cmp	r2, r3
 80086da:	f080 80fc 	bcs.w	80088d6 <put_fat+0x21c>
		switch (fs->fs_type) {
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	2b03      	cmp	r3, #3
 80086e4:	f000 80b6 	beq.w	8008854 <put_fat+0x19a>
 80086e8:	2b03      	cmp	r3, #3
 80086ea:	f300 80fd 	bgt.w	80088e8 <put_fat+0x22e>
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d003      	beq.n	80086fa <put_fat+0x40>
 80086f2:	2b02      	cmp	r3, #2
 80086f4:	f000 8083 	beq.w	80087fe <put_fat+0x144>
 80086f8:	e0f6      	b.n	80088e8 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	61bb      	str	r3, [r7, #24]
 80086fe:	69bb      	ldr	r3, [r7, #24]
 8008700:	085b      	lsrs	r3, r3, #1
 8008702:	69ba      	ldr	r2, [r7, #24]
 8008704:	4413      	add	r3, r2
 8008706:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	899b      	ldrh	r3, [r3, #12]
 8008710:	4619      	mov	r1, r3
 8008712:	69bb      	ldr	r3, [r7, #24]
 8008714:	fbb3 f3f1 	udiv	r3, r3, r1
 8008718:	4413      	add	r3, r2
 800871a:	4619      	mov	r1, r3
 800871c:	68f8      	ldr	r0, [r7, #12]
 800871e:	f7ff fe3b 	bl	8008398 <move_window>
 8008722:	4603      	mov	r3, r0
 8008724:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008726:	7ffb      	ldrb	r3, [r7, #31]
 8008728:	2b00      	cmp	r3, #0
 800872a:	f040 80d6 	bne.w	80088da <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008734:	69bb      	ldr	r3, [r7, #24]
 8008736:	1c5a      	adds	r2, r3, #1
 8008738:	61ba      	str	r2, [r7, #24]
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	8992      	ldrh	r2, [r2, #12]
 800873e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008742:	fb00 f202 	mul.w	r2, r0, r2
 8008746:	1a9b      	subs	r3, r3, r2
 8008748:	440b      	add	r3, r1
 800874a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	f003 0301 	and.w	r3, r3, #1
 8008752:	2b00      	cmp	r3, #0
 8008754:	d00d      	beq.n	8008772 <put_fat+0xb8>
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	b25b      	sxtb	r3, r3
 800875c:	f003 030f 	and.w	r3, r3, #15
 8008760:	b25a      	sxtb	r2, r3
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	b2db      	uxtb	r3, r3
 8008766:	011b      	lsls	r3, r3, #4
 8008768:	b25b      	sxtb	r3, r3
 800876a:	4313      	orrs	r3, r2
 800876c:	b25b      	sxtb	r3, r3
 800876e:	b2db      	uxtb	r3, r3
 8008770:	e001      	b.n	8008776 <put_fat+0xbc>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	b2db      	uxtb	r3, r3
 8008776:	697a      	ldr	r2, [r7, #20]
 8008778:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	2201      	movs	r2, #1
 800877e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	899b      	ldrh	r3, [r3, #12]
 8008788:	4619      	mov	r1, r3
 800878a:	69bb      	ldr	r3, [r7, #24]
 800878c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008790:	4413      	add	r3, r2
 8008792:	4619      	mov	r1, r3
 8008794:	68f8      	ldr	r0, [r7, #12]
 8008796:	f7ff fdff 	bl	8008398 <move_window>
 800879a:	4603      	mov	r3, r0
 800879c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800879e:	7ffb      	ldrb	r3, [r7, #31]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	f040 809c 	bne.w	80088de <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	899b      	ldrh	r3, [r3, #12]
 80087b0:	461a      	mov	r2, r3
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	fbb3 f0f2 	udiv	r0, r3, r2
 80087b8:	fb00 f202 	mul.w	r2, r0, r2
 80087bc:	1a9b      	subs	r3, r3, r2
 80087be:	440b      	add	r3, r1
 80087c0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	f003 0301 	and.w	r3, r3, #1
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d003      	beq.n	80087d4 <put_fat+0x11a>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	091b      	lsrs	r3, r3, #4
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	e00e      	b.n	80087f2 <put_fat+0x138>
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	b25b      	sxtb	r3, r3
 80087da:	f023 030f 	bic.w	r3, r3, #15
 80087de:	b25a      	sxtb	r2, r3
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	0a1b      	lsrs	r3, r3, #8
 80087e4:	b25b      	sxtb	r3, r3
 80087e6:	f003 030f 	and.w	r3, r3, #15
 80087ea:	b25b      	sxtb	r3, r3
 80087ec:	4313      	orrs	r3, r2
 80087ee:	b25b      	sxtb	r3, r3
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	697a      	ldr	r2, [r7, #20]
 80087f4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2201      	movs	r2, #1
 80087fa:	70da      	strb	r2, [r3, #3]
			break;
 80087fc:	e074      	b.n	80088e8 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	899b      	ldrh	r3, [r3, #12]
 8008806:	085b      	lsrs	r3, r3, #1
 8008808:	b29b      	uxth	r3, r3
 800880a:	4619      	mov	r1, r3
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008812:	4413      	add	r3, r2
 8008814:	4619      	mov	r1, r3
 8008816:	68f8      	ldr	r0, [r7, #12]
 8008818:	f7ff fdbe 	bl	8008398 <move_window>
 800881c:	4603      	mov	r3, r0
 800881e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008820:	7ffb      	ldrb	r3, [r7, #31]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d15d      	bne.n	80088e2 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	005b      	lsls	r3, r3, #1
 8008830:	68fa      	ldr	r2, [r7, #12]
 8008832:	8992      	ldrh	r2, [r2, #12]
 8008834:	fbb3 f0f2 	udiv	r0, r3, r2
 8008838:	fb00 f202 	mul.w	r2, r0, r2
 800883c:	1a9b      	subs	r3, r3, r2
 800883e:	440b      	add	r3, r1
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	b292      	uxth	r2, r2
 8008844:	4611      	mov	r1, r2
 8008846:	4618      	mov	r0, r3
 8008848:	f7ff fb31 	bl	8007eae <st_word>
			fs->wflag = 1;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2201      	movs	r2, #1
 8008850:	70da      	strb	r2, [r3, #3]
			break;
 8008852:	e049      	b.n	80088e8 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	899b      	ldrh	r3, [r3, #12]
 800885c:	089b      	lsrs	r3, r3, #2
 800885e:	b29b      	uxth	r3, r3
 8008860:	4619      	mov	r1, r3
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	fbb3 f3f1 	udiv	r3, r3, r1
 8008868:	4413      	add	r3, r2
 800886a:	4619      	mov	r1, r3
 800886c:	68f8      	ldr	r0, [r7, #12]
 800886e:	f7ff fd93 	bl	8008398 <move_window>
 8008872:	4603      	mov	r3, r0
 8008874:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008876:	7ffb      	ldrb	r3, [r7, #31]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d134      	bne.n	80088e6 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	009b      	lsls	r3, r3, #2
 800888c:	68fa      	ldr	r2, [r7, #12]
 800888e:	8992      	ldrh	r2, [r2, #12]
 8008890:	fbb3 f0f2 	udiv	r0, r3, r2
 8008894:	fb00 f202 	mul.w	r2, r0, r2
 8008898:	1a9b      	subs	r3, r3, r2
 800889a:	440b      	add	r3, r1
 800889c:	4618      	mov	r0, r3
 800889e:	f7ff fae3 	bl	8007e68 <ld_dword>
 80088a2:	4603      	mov	r3, r0
 80088a4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80088a8:	4323      	orrs	r3, r4
 80088aa:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	009b      	lsls	r3, r3, #2
 80088b6:	68fa      	ldr	r2, [r7, #12]
 80088b8:	8992      	ldrh	r2, [r2, #12]
 80088ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80088be:	fb00 f202 	mul.w	r2, r0, r2
 80088c2:	1a9b      	subs	r3, r3, r2
 80088c4:	440b      	add	r3, r1
 80088c6:	6879      	ldr	r1, [r7, #4]
 80088c8:	4618      	mov	r0, r3
 80088ca:	f7ff fb0b 	bl	8007ee4 <st_dword>
			fs->wflag = 1;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2201      	movs	r2, #1
 80088d2:	70da      	strb	r2, [r3, #3]
			break;
 80088d4:	e008      	b.n	80088e8 <put_fat+0x22e>
		}
	}
 80088d6:	bf00      	nop
 80088d8:	e006      	b.n	80088e8 <put_fat+0x22e>
			if (res != FR_OK) break;
 80088da:	bf00      	nop
 80088dc:	e004      	b.n	80088e8 <put_fat+0x22e>
			if (res != FR_OK) break;
 80088de:	bf00      	nop
 80088e0:	e002      	b.n	80088e8 <put_fat+0x22e>
			if (res != FR_OK) break;
 80088e2:	bf00      	nop
 80088e4:	e000      	b.n	80088e8 <put_fat+0x22e>
			if (res != FR_OK) break;
 80088e6:	bf00      	nop
	return res;
 80088e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3724      	adds	r7, #36	; 0x24
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd90      	pop	{r4, r7, pc}

080088f2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b088      	sub	sp, #32
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	60f8      	str	r0, [r7, #12]
 80088fa:	60b9      	str	r1, [r7, #8]
 80088fc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80088fe:	2300      	movs	r3, #0
 8008900:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	2b01      	cmp	r3, #1
 800890c:	d904      	bls.n	8008918 <remove_chain+0x26>
 800890e:	69bb      	ldr	r3, [r7, #24]
 8008910:	699b      	ldr	r3, [r3, #24]
 8008912:	68ba      	ldr	r2, [r7, #8]
 8008914:	429a      	cmp	r2, r3
 8008916:	d301      	bcc.n	800891c <remove_chain+0x2a>
 8008918:	2302      	movs	r3, #2
 800891a:	e04b      	b.n	80089b4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d00c      	beq.n	800893c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008922:	f04f 32ff 	mov.w	r2, #4294967295
 8008926:	6879      	ldr	r1, [r7, #4]
 8008928:	69b8      	ldr	r0, [r7, #24]
 800892a:	f7ff fec6 	bl	80086ba <put_fat>
 800892e:	4603      	mov	r3, r0
 8008930:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008932:	7ffb      	ldrb	r3, [r7, #31]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d001      	beq.n	800893c <remove_chain+0x4a>
 8008938:	7ffb      	ldrb	r3, [r7, #31]
 800893a:	e03b      	b.n	80089b4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800893c:	68b9      	ldr	r1, [r7, #8]
 800893e:	68f8      	ldr	r0, [r7, #12]
 8008940:	f7ff fde7 	bl	8008512 <get_fat>
 8008944:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d031      	beq.n	80089b0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	2b01      	cmp	r3, #1
 8008950:	d101      	bne.n	8008956 <remove_chain+0x64>
 8008952:	2302      	movs	r3, #2
 8008954:	e02e      	b.n	80089b4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800895c:	d101      	bne.n	8008962 <remove_chain+0x70>
 800895e:	2301      	movs	r3, #1
 8008960:	e028      	b.n	80089b4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008962:	2200      	movs	r2, #0
 8008964:	68b9      	ldr	r1, [r7, #8]
 8008966:	69b8      	ldr	r0, [r7, #24]
 8008968:	f7ff fea7 	bl	80086ba <put_fat>
 800896c:	4603      	mov	r3, r0
 800896e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008970:	7ffb      	ldrb	r3, [r7, #31]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d001      	beq.n	800897a <remove_chain+0x88>
 8008976:	7ffb      	ldrb	r3, [r7, #31]
 8008978:	e01c      	b.n	80089b4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800897a:	69bb      	ldr	r3, [r7, #24]
 800897c:	695a      	ldr	r2, [r3, #20]
 800897e:	69bb      	ldr	r3, [r7, #24]
 8008980:	699b      	ldr	r3, [r3, #24]
 8008982:	3b02      	subs	r3, #2
 8008984:	429a      	cmp	r2, r3
 8008986:	d20b      	bcs.n	80089a0 <remove_chain+0xae>
			fs->free_clst++;
 8008988:	69bb      	ldr	r3, [r7, #24]
 800898a:	695b      	ldr	r3, [r3, #20]
 800898c:	1c5a      	adds	r2, r3, #1
 800898e:	69bb      	ldr	r3, [r7, #24]
 8008990:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	791b      	ldrb	r3, [r3, #4]
 8008996:	f043 0301 	orr.w	r3, r3, #1
 800899a:	b2da      	uxtb	r2, r3
 800899c:	69bb      	ldr	r3, [r7, #24]
 800899e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80089a4:	69bb      	ldr	r3, [r7, #24]
 80089a6:	699b      	ldr	r3, [r3, #24]
 80089a8:	68ba      	ldr	r2, [r7, #8]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d3c6      	bcc.n	800893c <remove_chain+0x4a>
 80089ae:	e000      	b.n	80089b2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80089b0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80089b2:	2300      	movs	r3, #0
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3720      	adds	r7, #32
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b088      	sub	sp, #32
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d10d      	bne.n	80089ee <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80089d8:	69bb      	ldr	r3, [r7, #24]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d004      	beq.n	80089e8 <create_chain+0x2c>
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	699b      	ldr	r3, [r3, #24]
 80089e2:	69ba      	ldr	r2, [r7, #24]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d31b      	bcc.n	8008a20 <create_chain+0x64>
 80089e8:	2301      	movs	r3, #1
 80089ea:	61bb      	str	r3, [r7, #24]
 80089ec:	e018      	b.n	8008a20 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80089ee:	6839      	ldr	r1, [r7, #0]
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f7ff fd8e 	bl	8008512 <get_fat>
 80089f6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d801      	bhi.n	8008a02 <create_chain+0x46>
 80089fe:	2301      	movs	r3, #1
 8008a00:	e070      	b.n	8008ae4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a08:	d101      	bne.n	8008a0e <create_chain+0x52>
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	e06a      	b.n	8008ae4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	699b      	ldr	r3, [r3, #24]
 8008a12:	68fa      	ldr	r2, [r7, #12]
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d201      	bcs.n	8008a1c <create_chain+0x60>
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	e063      	b.n	8008ae4 <create_chain+0x128>
		scl = clst;
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008a20:	69bb      	ldr	r3, [r7, #24]
 8008a22:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008a24:	69fb      	ldr	r3, [r7, #28]
 8008a26:	3301      	adds	r3, #1
 8008a28:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	699b      	ldr	r3, [r3, #24]
 8008a2e:	69fa      	ldr	r2, [r7, #28]
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d307      	bcc.n	8008a44 <create_chain+0x88>
				ncl = 2;
 8008a34:	2302      	movs	r3, #2
 8008a36:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008a38:	69fa      	ldr	r2, [r7, #28]
 8008a3a:	69bb      	ldr	r3, [r7, #24]
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d901      	bls.n	8008a44 <create_chain+0x88>
 8008a40:	2300      	movs	r3, #0
 8008a42:	e04f      	b.n	8008ae4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008a44:	69f9      	ldr	r1, [r7, #28]
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f7ff fd63 	bl	8008512 <get_fat>
 8008a4c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d00e      	beq.n	8008a72 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d003      	beq.n	8008a62 <create_chain+0xa6>
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a60:	d101      	bne.n	8008a66 <create_chain+0xaa>
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	e03e      	b.n	8008ae4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008a66:	69fa      	ldr	r2, [r7, #28]
 8008a68:	69bb      	ldr	r3, [r7, #24]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d1da      	bne.n	8008a24 <create_chain+0x68>
 8008a6e:	2300      	movs	r3, #0
 8008a70:	e038      	b.n	8008ae4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008a72:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008a74:	f04f 32ff 	mov.w	r2, #4294967295
 8008a78:	69f9      	ldr	r1, [r7, #28]
 8008a7a:	6938      	ldr	r0, [r7, #16]
 8008a7c:	f7ff fe1d 	bl	80086ba <put_fat>
 8008a80:	4603      	mov	r3, r0
 8008a82:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008a84:	7dfb      	ldrb	r3, [r7, #23]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d109      	bne.n	8008a9e <create_chain+0xe2>
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d006      	beq.n	8008a9e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008a90:	69fa      	ldr	r2, [r7, #28]
 8008a92:	6839      	ldr	r1, [r7, #0]
 8008a94:	6938      	ldr	r0, [r7, #16]
 8008a96:	f7ff fe10 	bl	80086ba <put_fat>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008a9e:	7dfb      	ldrb	r3, [r7, #23]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d116      	bne.n	8008ad2 <create_chain+0x116>
		fs->last_clst = ncl;
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	69fa      	ldr	r2, [r7, #28]
 8008aa8:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	695a      	ldr	r2, [r3, #20]
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	699b      	ldr	r3, [r3, #24]
 8008ab2:	3b02      	subs	r3, #2
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d804      	bhi.n	8008ac2 <create_chain+0x106>
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	695b      	ldr	r3, [r3, #20]
 8008abc:	1e5a      	subs	r2, r3, #1
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	791b      	ldrb	r3, [r3, #4]
 8008ac6:	f043 0301 	orr.w	r3, r3, #1
 8008aca:	b2da      	uxtb	r2, r3
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	711a      	strb	r2, [r3, #4]
 8008ad0:	e007      	b.n	8008ae2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008ad2:	7dfb      	ldrb	r3, [r7, #23]
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d102      	bne.n	8008ade <create_chain+0x122>
 8008ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8008adc:	e000      	b.n	8008ae0 <create_chain+0x124>
 8008ade:	2301      	movs	r3, #1
 8008ae0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008ae2:	69fb      	ldr	r3, [r7, #28]
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3720      	adds	r7, #32
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b087      	sub	sp, #28
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b00:	3304      	adds	r3, #4
 8008b02:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	899b      	ldrh	r3, [r3, #12]
 8008b08:	461a      	mov	r2, r3
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b10:	68fa      	ldr	r2, [r7, #12]
 8008b12:	8952      	ldrh	r2, [r2, #10]
 8008b14:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b18:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	1d1a      	adds	r2, r3, #4
 8008b1e:	613a      	str	r2, [r7, #16]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d101      	bne.n	8008b2e <clmt_clust+0x42>
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	e010      	b.n	8008b50 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8008b2e:	697a      	ldr	r2, [r7, #20]
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d307      	bcc.n	8008b46 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8008b36:	697a      	ldr	r2, [r7, #20]
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	1ad3      	subs	r3, r2, r3
 8008b3c:	617b      	str	r3, [r7, #20]
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	3304      	adds	r3, #4
 8008b42:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008b44:	e7e9      	b.n	8008b1a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8008b46:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	4413      	add	r3, r2
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	371c      	adds	r7, #28
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr

08008b5c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b086      	sub	sp, #24
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b72:	d204      	bcs.n	8008b7e <dir_sdi+0x22>
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	f003 031f 	and.w	r3, r3, #31
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d001      	beq.n	8008b82 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008b7e:	2302      	movs	r3, #2
 8008b80:	e071      	b.n	8008c66 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	683a      	ldr	r2, [r7, #0]
 8008b86:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d106      	bne.n	8008ba2 <dir_sdi+0x46>
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	2b02      	cmp	r3, #2
 8008b9a:	d902      	bls.n	8008ba2 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ba0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d10c      	bne.n	8008bc2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	095b      	lsrs	r3, r3, #5
 8008bac:	693a      	ldr	r2, [r7, #16]
 8008bae:	8912      	ldrh	r2, [r2, #8]
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d301      	bcc.n	8008bb8 <dir_sdi+0x5c>
 8008bb4:	2302      	movs	r3, #2
 8008bb6:	e056      	b.n	8008c66 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	61da      	str	r2, [r3, #28]
 8008bc0:	e02d      	b.n	8008c1e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	895b      	ldrh	r3, [r3, #10]
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	899b      	ldrh	r3, [r3, #12]
 8008bcc:	fb02 f303 	mul.w	r3, r2, r3
 8008bd0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008bd2:	e019      	b.n	8008c08 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6979      	ldr	r1, [r7, #20]
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f7ff fc9a 	bl	8008512 <get_fat>
 8008bde:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008be6:	d101      	bne.n	8008bec <dir_sdi+0x90>
 8008be8:	2301      	movs	r3, #1
 8008bea:	e03c      	b.n	8008c66 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	2b01      	cmp	r3, #1
 8008bf0:	d904      	bls.n	8008bfc <dir_sdi+0xa0>
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	699b      	ldr	r3, [r3, #24]
 8008bf6:	697a      	ldr	r2, [r7, #20]
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d301      	bcc.n	8008c00 <dir_sdi+0xa4>
 8008bfc:	2302      	movs	r3, #2
 8008bfe:	e032      	b.n	8008c66 <dir_sdi+0x10a>
			ofs -= csz;
 8008c00:	683a      	ldr	r2, [r7, #0]
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	1ad3      	subs	r3, r2, r3
 8008c06:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008c08:	683a      	ldr	r2, [r7, #0]
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d2e1      	bcs.n	8008bd4 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8008c10:	6979      	ldr	r1, [r7, #20]
 8008c12:	6938      	ldr	r0, [r7, #16]
 8008c14:	f7ff fc5e 	bl	80084d4 <clust2sect>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	697a      	ldr	r2, [r7, #20]
 8008c22:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	69db      	ldr	r3, [r3, #28]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d101      	bne.n	8008c30 <dir_sdi+0xd4>
 8008c2c:	2302      	movs	r3, #2
 8008c2e:	e01a      	b.n	8008c66 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	69da      	ldr	r2, [r3, #28]
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	899b      	ldrh	r3, [r3, #12]
 8008c38:	4619      	mov	r1, r3
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008c40:	441a      	add	r2, r3
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	899b      	ldrh	r3, [r3, #12]
 8008c50:	461a      	mov	r2, r3
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	fbb3 f0f2 	udiv	r0, r3, r2
 8008c58:	fb00 f202 	mul.w	r2, r0, r2
 8008c5c:	1a9b      	subs	r3, r3, r2
 8008c5e:	18ca      	adds	r2, r1, r3
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008c64:	2300      	movs	r3, #0
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3718      	adds	r7, #24
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}

08008c6e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008c6e:	b580      	push	{r7, lr}
 8008c70:	b086      	sub	sp, #24
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
 8008c76:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	695b      	ldr	r3, [r3, #20]
 8008c82:	3320      	adds	r3, #32
 8008c84:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	69db      	ldr	r3, [r3, #28]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d003      	beq.n	8008c96 <dir_next+0x28>
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c94:	d301      	bcc.n	8008c9a <dir_next+0x2c>
 8008c96:	2304      	movs	r3, #4
 8008c98:	e0bb      	b.n	8008e12 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	899b      	ldrh	r3, [r3, #12]
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ca6:	fb01 f202 	mul.w	r2, r1, r2
 8008caa:	1a9b      	subs	r3, r3, r2
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	f040 809d 	bne.w	8008dec <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	69db      	ldr	r3, [r3, #28]
 8008cb6:	1c5a      	adds	r2, r3, #1
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	699b      	ldr	r3, [r3, #24]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d10b      	bne.n	8008cdc <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	095b      	lsrs	r3, r3, #5
 8008cc8:	68fa      	ldr	r2, [r7, #12]
 8008cca:	8912      	ldrh	r2, [r2, #8]
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	f0c0 808d 	bcc.w	8008dec <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	61da      	str	r2, [r3, #28]
 8008cd8:	2304      	movs	r3, #4
 8008cda:	e09a      	b.n	8008e12 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	899b      	ldrh	r3, [r3, #12]
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ce8:	68fa      	ldr	r2, [r7, #12]
 8008cea:	8952      	ldrh	r2, [r2, #10]
 8008cec:	3a01      	subs	r2, #1
 8008cee:	4013      	ands	r3, r2
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d17b      	bne.n	8008dec <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	699b      	ldr	r3, [r3, #24]
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	4610      	mov	r0, r2
 8008cfe:	f7ff fc08 	bl	8008512 <get_fat>
 8008d02:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d801      	bhi.n	8008d0e <dir_next+0xa0>
 8008d0a:	2302      	movs	r3, #2
 8008d0c:	e081      	b.n	8008e12 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d14:	d101      	bne.n	8008d1a <dir_next+0xac>
 8008d16:	2301      	movs	r3, #1
 8008d18:	e07b      	b.n	8008e12 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	699b      	ldr	r3, [r3, #24]
 8008d1e:	697a      	ldr	r2, [r7, #20]
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d359      	bcc.n	8008dd8 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d104      	bne.n	8008d34 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	61da      	str	r2, [r3, #28]
 8008d30:	2304      	movs	r3, #4
 8008d32:	e06e      	b.n	8008e12 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	699b      	ldr	r3, [r3, #24]
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	4610      	mov	r0, r2
 8008d3e:	f7ff fe3d 	bl	80089bc <create_chain>
 8008d42:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d101      	bne.n	8008d4e <dir_next+0xe0>
 8008d4a:	2307      	movs	r3, #7
 8008d4c:	e061      	b.n	8008e12 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d101      	bne.n	8008d58 <dir_next+0xea>
 8008d54:	2302      	movs	r3, #2
 8008d56:	e05c      	b.n	8008e12 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d5e:	d101      	bne.n	8008d64 <dir_next+0xf6>
 8008d60:	2301      	movs	r3, #1
 8008d62:	e056      	b.n	8008e12 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008d64:	68f8      	ldr	r0, [r7, #12]
 8008d66:	f7ff fad3 	bl	8008310 <sync_window>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d001      	beq.n	8008d74 <dir_next+0x106>
 8008d70:	2301      	movs	r3, #1
 8008d72:	e04e      	b.n	8008e12 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	899b      	ldrh	r3, [r3, #12]
 8008d7e:	461a      	mov	r2, r3
 8008d80:	2100      	movs	r1, #0
 8008d82:	f7ff f8fc 	bl	8007f7e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008d86:	2300      	movs	r3, #0
 8008d88:	613b      	str	r3, [r7, #16]
 8008d8a:	6979      	ldr	r1, [r7, #20]
 8008d8c:	68f8      	ldr	r0, [r7, #12]
 8008d8e:	f7ff fba1 	bl	80084d4 <clust2sect>
 8008d92:	4602      	mov	r2, r0
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	631a      	str	r2, [r3, #48]	; 0x30
 8008d98:	e012      	b.n	8008dc0 <dir_next+0x152>
						fs->wflag = 1;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008da0:	68f8      	ldr	r0, [r7, #12]
 8008da2:	f7ff fab5 	bl	8008310 <sync_window>
 8008da6:	4603      	mov	r3, r0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d001      	beq.n	8008db0 <dir_next+0x142>
 8008dac:	2301      	movs	r3, #1
 8008dae:	e030      	b.n	8008e12 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	3301      	adds	r3, #1
 8008db4:	613b      	str	r3, [r7, #16]
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dba:	1c5a      	adds	r2, r3, #1
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	631a      	str	r2, [r3, #48]	; 0x30
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	895b      	ldrh	r3, [r3, #10]
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d3e6      	bcc.n	8008d9a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	1ad2      	subs	r2, r2, r3
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	697a      	ldr	r2, [r7, #20]
 8008ddc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008dde:	6979      	ldr	r1, [r7, #20]
 8008de0:	68f8      	ldr	r0, [r7, #12]
 8008de2:	f7ff fb77 	bl	80084d4 <clust2sect>
 8008de6:	4602      	mov	r2, r0
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	68ba      	ldr	r2, [r7, #8]
 8008df0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	899b      	ldrh	r3, [r3, #12]
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	fbb3 f0f2 	udiv	r0, r3, r2
 8008e04:	fb00 f202 	mul.w	r2, r0, r2
 8008e08:	1a9b      	subs	r3, r3, r2
 8008e0a:	18ca      	adds	r2, r1, r3
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008e10:	2300      	movs	r3, #0
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3718      	adds	r7, #24
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}

08008e1a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008e1a:	b580      	push	{r7, lr}
 8008e1c:	b086      	sub	sp, #24
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
 8008e22:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008e2a:	2100      	movs	r1, #0
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f7ff fe95 	bl	8008b5c <dir_sdi>
 8008e32:	4603      	mov	r3, r0
 8008e34:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008e36:	7dfb      	ldrb	r3, [r7, #23]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d12b      	bne.n	8008e94 <dir_alloc+0x7a>
		n = 0;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	69db      	ldr	r3, [r3, #28]
 8008e44:	4619      	mov	r1, r3
 8008e46:	68f8      	ldr	r0, [r7, #12]
 8008e48:	f7ff faa6 	bl	8008398 <move_window>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008e50:	7dfb      	ldrb	r3, [r7, #23]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d11d      	bne.n	8008e92 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6a1b      	ldr	r3, [r3, #32]
 8008e5a:	781b      	ldrb	r3, [r3, #0]
 8008e5c:	2be5      	cmp	r3, #229	; 0xe5
 8008e5e:	d004      	beq.n	8008e6a <dir_alloc+0x50>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6a1b      	ldr	r3, [r3, #32]
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d107      	bne.n	8008e7a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	613b      	str	r3, [r7, #16]
 8008e70:	693a      	ldr	r2, [r7, #16]
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d102      	bne.n	8008e7e <dir_alloc+0x64>
 8008e78:	e00c      	b.n	8008e94 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008e7e:	2101      	movs	r1, #1
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f7ff fef4 	bl	8008c6e <dir_next>
 8008e86:	4603      	mov	r3, r0
 8008e88:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008e8a:	7dfb      	ldrb	r3, [r7, #23]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d0d7      	beq.n	8008e40 <dir_alloc+0x26>
 8008e90:	e000      	b.n	8008e94 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008e92:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008e94:	7dfb      	ldrb	r3, [r7, #23]
 8008e96:	2b04      	cmp	r3, #4
 8008e98:	d101      	bne.n	8008e9e <dir_alloc+0x84>
 8008e9a:	2307      	movs	r3, #7
 8008e9c:	75fb      	strb	r3, [r7, #23]
	return res;
 8008e9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3718      	adds	r7, #24
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b084      	sub	sp, #16
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	331a      	adds	r3, #26
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f7fe ffbe 	bl	8007e38 <ld_word>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	2b03      	cmp	r3, #3
 8008ec6:	d109      	bne.n	8008edc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	3314      	adds	r3, #20
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f7fe ffb3 	bl	8007e38 <ld_word>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	041b      	lsls	r3, r3, #16
 8008ed6:	68fa      	ldr	r2, [r7, #12]
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008edc:	68fb      	ldr	r3, [r7, #12]
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3710      	adds	r7, #16
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}

08008ee6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008ee6:	b580      	push	{r7, lr}
 8008ee8:	b084      	sub	sp, #16
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	60f8      	str	r0, [r7, #12]
 8008eee:	60b9      	str	r1, [r7, #8]
 8008ef0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	331a      	adds	r3, #26
 8008ef6:	687a      	ldr	r2, [r7, #4]
 8008ef8:	b292      	uxth	r2, r2
 8008efa:	4611      	mov	r1, r2
 8008efc:	4618      	mov	r0, r3
 8008efe:	f7fe ffd6 	bl	8007eae <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	2b03      	cmp	r3, #3
 8008f08:	d109      	bne.n	8008f1e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	f103 0214 	add.w	r2, r3, #20
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	0c1b      	lsrs	r3, r3, #16
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	4619      	mov	r1, r3
 8008f18:	4610      	mov	r0, r2
 8008f1a:	f7fe ffc8 	bl	8007eae <st_word>
	}
}
 8008f1e:	bf00      	nop
 8008f20:	3710      	adds	r7, #16
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}

08008f26 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008f26:	b580      	push	{r7, lr}
 8008f28:	b086      	sub	sp, #24
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008f34:	2100      	movs	r1, #0
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f7ff fe10 	bl	8008b5c <dir_sdi>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008f40:	7dfb      	ldrb	r3, [r7, #23]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d001      	beq.n	8008f4a <dir_find+0x24>
 8008f46:	7dfb      	ldrb	r3, [r7, #23]
 8008f48:	e03e      	b.n	8008fc8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	69db      	ldr	r3, [r3, #28]
 8008f4e:	4619      	mov	r1, r3
 8008f50:	6938      	ldr	r0, [r7, #16]
 8008f52:	f7ff fa21 	bl	8008398 <move_window>
 8008f56:	4603      	mov	r3, r0
 8008f58:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008f5a:	7dfb      	ldrb	r3, [r7, #23]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d12f      	bne.n	8008fc0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6a1b      	ldr	r3, [r3, #32]
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008f68:	7bfb      	ldrb	r3, [r7, #15]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d102      	bne.n	8008f74 <dir_find+0x4e>
 8008f6e:	2304      	movs	r3, #4
 8008f70:	75fb      	strb	r3, [r7, #23]
 8008f72:	e028      	b.n	8008fc6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6a1b      	ldr	r3, [r3, #32]
 8008f78:	330b      	adds	r3, #11
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f80:	b2da      	uxtb	r2, r3
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6a1b      	ldr	r3, [r3, #32]
 8008f8a:	330b      	adds	r3, #11
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	f003 0308 	and.w	r3, r3, #8
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d10a      	bne.n	8008fac <dir_find+0x86>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6a18      	ldr	r0, [r3, #32]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	3324      	adds	r3, #36	; 0x24
 8008f9e:	220b      	movs	r2, #11
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	f7ff f807 	bl	8007fb4 <mem_cmp>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d00b      	beq.n	8008fc4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008fac:	2100      	movs	r1, #0
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f7ff fe5d 	bl	8008c6e <dir_next>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008fb8:	7dfb      	ldrb	r3, [r7, #23]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d0c5      	beq.n	8008f4a <dir_find+0x24>
 8008fbe:	e002      	b.n	8008fc6 <dir_find+0xa0>
		if (res != FR_OK) break;
 8008fc0:	bf00      	nop
 8008fc2:	e000      	b.n	8008fc6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008fc4:	bf00      	nop

	return res;
 8008fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3718      	adds	r7, #24
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008fde:	2101      	movs	r1, #1
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f7ff ff1a 	bl	8008e1a <dir_alloc>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008fea:	7bfb      	ldrb	r3, [r7, #15]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d11c      	bne.n	800902a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	69db      	ldr	r3, [r3, #28]
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	68b8      	ldr	r0, [r7, #8]
 8008ff8:	f7ff f9ce 	bl	8008398 <move_window>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009000:	7bfb      	ldrb	r3, [r7, #15]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d111      	bne.n	800902a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6a1b      	ldr	r3, [r3, #32]
 800900a:	2220      	movs	r2, #32
 800900c:	2100      	movs	r1, #0
 800900e:	4618      	mov	r0, r3
 8009010:	f7fe ffb5 	bl	8007f7e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6a18      	ldr	r0, [r3, #32]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	3324      	adds	r3, #36	; 0x24
 800901c:	220b      	movs	r2, #11
 800901e:	4619      	mov	r1, r3
 8009020:	f7fe ff8c 	bl	8007f3c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	2201      	movs	r2, #1
 8009028:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800902a:	7bfb      	ldrb	r3, [r7, #15]
}
 800902c:	4618      	mov	r0, r3
 800902e:	3710      	adds	r7, #16
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b088      	sub	sp, #32
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	60fb      	str	r3, [r7, #12]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	3324      	adds	r3, #36	; 0x24
 8009048:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800904a:	220b      	movs	r2, #11
 800904c:	2120      	movs	r1, #32
 800904e:	68b8      	ldr	r0, [r7, #8]
 8009050:	f7fe ff95 	bl	8007f7e <mem_set>
	si = i = 0; ni = 8;
 8009054:	2300      	movs	r3, #0
 8009056:	613b      	str	r3, [r7, #16]
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	61fb      	str	r3, [r7, #28]
 800905c:	2308      	movs	r3, #8
 800905e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009060:	69fb      	ldr	r3, [r7, #28]
 8009062:	1c5a      	adds	r2, r3, #1
 8009064:	61fa      	str	r2, [r7, #28]
 8009066:	68fa      	ldr	r2, [r7, #12]
 8009068:	4413      	add	r3, r2
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800906e:	7efb      	ldrb	r3, [r7, #27]
 8009070:	2b20      	cmp	r3, #32
 8009072:	d94e      	bls.n	8009112 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009074:	7efb      	ldrb	r3, [r7, #27]
 8009076:	2b2f      	cmp	r3, #47	; 0x2f
 8009078:	d006      	beq.n	8009088 <create_name+0x54>
 800907a:	7efb      	ldrb	r3, [r7, #27]
 800907c:	2b5c      	cmp	r3, #92	; 0x5c
 800907e:	d110      	bne.n	80090a2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009080:	e002      	b.n	8009088 <create_name+0x54>
 8009082:	69fb      	ldr	r3, [r7, #28]
 8009084:	3301      	adds	r3, #1
 8009086:	61fb      	str	r3, [r7, #28]
 8009088:	68fa      	ldr	r2, [r7, #12]
 800908a:	69fb      	ldr	r3, [r7, #28]
 800908c:	4413      	add	r3, r2
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	2b2f      	cmp	r3, #47	; 0x2f
 8009092:	d0f6      	beq.n	8009082 <create_name+0x4e>
 8009094:	68fa      	ldr	r2, [r7, #12]
 8009096:	69fb      	ldr	r3, [r7, #28]
 8009098:	4413      	add	r3, r2
 800909a:	781b      	ldrb	r3, [r3, #0]
 800909c:	2b5c      	cmp	r3, #92	; 0x5c
 800909e:	d0f0      	beq.n	8009082 <create_name+0x4e>
			break;
 80090a0:	e038      	b.n	8009114 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80090a2:	7efb      	ldrb	r3, [r7, #27]
 80090a4:	2b2e      	cmp	r3, #46	; 0x2e
 80090a6:	d003      	beq.n	80090b0 <create_name+0x7c>
 80090a8:	693a      	ldr	r2, [r7, #16]
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d30c      	bcc.n	80090ca <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	2b0b      	cmp	r3, #11
 80090b4:	d002      	beq.n	80090bc <create_name+0x88>
 80090b6:	7efb      	ldrb	r3, [r7, #27]
 80090b8:	2b2e      	cmp	r3, #46	; 0x2e
 80090ba:	d001      	beq.n	80090c0 <create_name+0x8c>
 80090bc:	2306      	movs	r3, #6
 80090be:	e044      	b.n	800914a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80090c0:	2308      	movs	r3, #8
 80090c2:	613b      	str	r3, [r7, #16]
 80090c4:	230b      	movs	r3, #11
 80090c6:	617b      	str	r3, [r7, #20]
			continue;
 80090c8:	e022      	b.n	8009110 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80090ca:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	da04      	bge.n	80090dc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80090d2:	7efb      	ldrb	r3, [r7, #27]
 80090d4:	3b80      	subs	r3, #128	; 0x80
 80090d6:	4a1f      	ldr	r2, [pc, #124]	; (8009154 <create_name+0x120>)
 80090d8:	5cd3      	ldrb	r3, [r2, r3]
 80090da:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80090dc:	7efb      	ldrb	r3, [r7, #27]
 80090de:	4619      	mov	r1, r3
 80090e0:	481d      	ldr	r0, [pc, #116]	; (8009158 <create_name+0x124>)
 80090e2:	f7fe ff8e 	bl	8008002 <chk_chr>
 80090e6:	4603      	mov	r3, r0
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d001      	beq.n	80090f0 <create_name+0xbc>
 80090ec:	2306      	movs	r3, #6
 80090ee:	e02c      	b.n	800914a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80090f0:	7efb      	ldrb	r3, [r7, #27]
 80090f2:	2b60      	cmp	r3, #96	; 0x60
 80090f4:	d905      	bls.n	8009102 <create_name+0xce>
 80090f6:	7efb      	ldrb	r3, [r7, #27]
 80090f8:	2b7a      	cmp	r3, #122	; 0x7a
 80090fa:	d802      	bhi.n	8009102 <create_name+0xce>
 80090fc:	7efb      	ldrb	r3, [r7, #27]
 80090fe:	3b20      	subs	r3, #32
 8009100:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	1c5a      	adds	r2, r3, #1
 8009106:	613a      	str	r2, [r7, #16]
 8009108:	68ba      	ldr	r2, [r7, #8]
 800910a:	4413      	add	r3, r2
 800910c:	7efa      	ldrb	r2, [r7, #27]
 800910e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009110:	e7a6      	b.n	8009060 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009112:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009114:	68fa      	ldr	r2, [r7, #12]
 8009116:	69fb      	ldr	r3, [r7, #28]
 8009118:	441a      	add	r2, r3
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d101      	bne.n	8009128 <create_name+0xf4>
 8009124:	2306      	movs	r3, #6
 8009126:	e010      	b.n	800914a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	2be5      	cmp	r3, #229	; 0xe5
 800912e:	d102      	bne.n	8009136 <create_name+0x102>
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	2205      	movs	r2, #5
 8009134:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009136:	7efb      	ldrb	r3, [r7, #27]
 8009138:	2b20      	cmp	r3, #32
 800913a:	d801      	bhi.n	8009140 <create_name+0x10c>
 800913c:	2204      	movs	r2, #4
 800913e:	e000      	b.n	8009142 <create_name+0x10e>
 8009140:	2200      	movs	r2, #0
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	330b      	adds	r3, #11
 8009146:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009148:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800914a:	4618      	mov	r0, r3
 800914c:	3720      	adds	r7, #32
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	0800ebd4 	.word	0x0800ebd4
 8009158:	0800eb5c 	.word	0x0800eb5c

0800915c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b086      	sub	sp, #24
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009170:	e002      	b.n	8009178 <follow_path+0x1c>
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	3301      	adds	r3, #1
 8009176:	603b      	str	r3, [r7, #0]
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	781b      	ldrb	r3, [r3, #0]
 800917c:	2b2f      	cmp	r3, #47	; 0x2f
 800917e:	d0f8      	beq.n	8009172 <follow_path+0x16>
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	781b      	ldrb	r3, [r3, #0]
 8009184:	2b5c      	cmp	r3, #92	; 0x5c
 8009186:	d0f4      	beq.n	8009172 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	2200      	movs	r2, #0
 800918c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	2b1f      	cmp	r3, #31
 8009194:	d80a      	bhi.n	80091ac <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2280      	movs	r2, #128	; 0x80
 800919a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800919e:	2100      	movs	r1, #0
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f7ff fcdb 	bl	8008b5c <dir_sdi>
 80091a6:	4603      	mov	r3, r0
 80091a8:	75fb      	strb	r3, [r7, #23]
 80091aa:	e048      	b.n	800923e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80091ac:	463b      	mov	r3, r7
 80091ae:	4619      	mov	r1, r3
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f7ff ff3f 	bl	8009034 <create_name>
 80091b6:	4603      	mov	r3, r0
 80091b8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80091ba:	7dfb      	ldrb	r3, [r7, #23]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d139      	bne.n	8009234 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f7ff feb0 	bl	8008f26 <dir_find>
 80091c6:	4603      	mov	r3, r0
 80091c8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80091d0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80091d2:	7dfb      	ldrb	r3, [r7, #23]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d00a      	beq.n	80091ee <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80091d8:	7dfb      	ldrb	r3, [r7, #23]
 80091da:	2b04      	cmp	r3, #4
 80091dc:	d12c      	bne.n	8009238 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80091de:	7afb      	ldrb	r3, [r7, #11]
 80091e0:	f003 0304 	and.w	r3, r3, #4
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d127      	bne.n	8009238 <follow_path+0xdc>
 80091e8:	2305      	movs	r3, #5
 80091ea:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80091ec:	e024      	b.n	8009238 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80091ee:	7afb      	ldrb	r3, [r7, #11]
 80091f0:	f003 0304 	and.w	r3, r3, #4
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d121      	bne.n	800923c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	799b      	ldrb	r3, [r3, #6]
 80091fc:	f003 0310 	and.w	r3, r3, #16
 8009200:	2b00      	cmp	r3, #0
 8009202:	d102      	bne.n	800920a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009204:	2305      	movs	r3, #5
 8009206:	75fb      	strb	r3, [r7, #23]
 8009208:	e019      	b.n	800923e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	695b      	ldr	r3, [r3, #20]
 8009214:	68fa      	ldr	r2, [r7, #12]
 8009216:	8992      	ldrh	r2, [r2, #12]
 8009218:	fbb3 f0f2 	udiv	r0, r3, r2
 800921c:	fb00 f202 	mul.w	r2, r0, r2
 8009220:	1a9b      	subs	r3, r3, r2
 8009222:	440b      	add	r3, r1
 8009224:	4619      	mov	r1, r3
 8009226:	68f8      	ldr	r0, [r7, #12]
 8009228:	f7ff fe3e 	bl	8008ea8 <ld_clust>
 800922c:	4602      	mov	r2, r0
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009232:	e7bb      	b.n	80091ac <follow_path+0x50>
			if (res != FR_OK) break;
 8009234:	bf00      	nop
 8009236:	e002      	b.n	800923e <follow_path+0xe2>
				break;
 8009238:	bf00      	nop
 800923a:	e000      	b.n	800923e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800923c:	bf00      	nop
			}
		}
	}

	return res;
 800923e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009240:	4618      	mov	r0, r3
 8009242:	3718      	adds	r7, #24
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009248:	b480      	push	{r7}
 800924a:	b087      	sub	sp, #28
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009250:	f04f 33ff 	mov.w	r3, #4294967295
 8009254:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d031      	beq.n	80092c2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	617b      	str	r3, [r7, #20]
 8009264:	e002      	b.n	800926c <get_ldnumber+0x24>
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	3301      	adds	r3, #1
 800926a:	617b      	str	r3, [r7, #20]
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	781b      	ldrb	r3, [r3, #0]
 8009270:	2b20      	cmp	r3, #32
 8009272:	d903      	bls.n	800927c <get_ldnumber+0x34>
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	2b3a      	cmp	r3, #58	; 0x3a
 800927a:	d1f4      	bne.n	8009266 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	2b3a      	cmp	r3, #58	; 0x3a
 8009282:	d11c      	bne.n	80092be <get_ldnumber+0x76>
			tp = *path;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	1c5a      	adds	r2, r3, #1
 800928e:	60fa      	str	r2, [r7, #12]
 8009290:	781b      	ldrb	r3, [r3, #0]
 8009292:	3b30      	subs	r3, #48	; 0x30
 8009294:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	2b09      	cmp	r3, #9
 800929a:	d80e      	bhi.n	80092ba <get_ldnumber+0x72>
 800929c:	68fa      	ldr	r2, [r7, #12]
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d10a      	bne.n	80092ba <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d107      	bne.n	80092ba <get_ldnumber+0x72>
					vol = (int)i;
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	3301      	adds	r3, #1
 80092b2:	617b      	str	r3, [r7, #20]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	697a      	ldr	r2, [r7, #20]
 80092b8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	e002      	b.n	80092c4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80092be:	2300      	movs	r3, #0
 80092c0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80092c2:	693b      	ldr	r3, [r7, #16]
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	371c      	adds	r7, #28
 80092c8:	46bd      	mov	sp, r7
 80092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ce:	4770      	bx	lr

080092d0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b082      	sub	sp, #8
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	70da      	strb	r2, [r3, #3]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f04f 32ff 	mov.w	r2, #4294967295
 80092e6:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80092e8:	6839      	ldr	r1, [r7, #0]
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f7ff f854 	bl	8008398 <move_window>
 80092f0:	4603      	mov	r3, r0
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d001      	beq.n	80092fa <check_fs+0x2a>
 80092f6:	2304      	movs	r3, #4
 80092f8:	e038      	b.n	800936c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	3334      	adds	r3, #52	; 0x34
 80092fe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009302:	4618      	mov	r0, r3
 8009304:	f7fe fd98 	bl	8007e38 <ld_word>
 8009308:	4603      	mov	r3, r0
 800930a:	461a      	mov	r2, r3
 800930c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009310:	429a      	cmp	r2, r3
 8009312:	d001      	beq.n	8009318 <check_fs+0x48>
 8009314:	2303      	movs	r3, #3
 8009316:	e029      	b.n	800936c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800931e:	2be9      	cmp	r3, #233	; 0xe9
 8009320:	d009      	beq.n	8009336 <check_fs+0x66>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009328:	2beb      	cmp	r3, #235	; 0xeb
 800932a:	d11e      	bne.n	800936a <check_fs+0x9a>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009332:	2b90      	cmp	r3, #144	; 0x90
 8009334:	d119      	bne.n	800936a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	3334      	adds	r3, #52	; 0x34
 800933a:	3336      	adds	r3, #54	; 0x36
 800933c:	4618      	mov	r0, r3
 800933e:	f7fe fd93 	bl	8007e68 <ld_dword>
 8009342:	4603      	mov	r3, r0
 8009344:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009348:	4a0a      	ldr	r2, [pc, #40]	; (8009374 <check_fs+0xa4>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d101      	bne.n	8009352 <check_fs+0x82>
 800934e:	2300      	movs	r3, #0
 8009350:	e00c      	b.n	800936c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	3334      	adds	r3, #52	; 0x34
 8009356:	3352      	adds	r3, #82	; 0x52
 8009358:	4618      	mov	r0, r3
 800935a:	f7fe fd85 	bl	8007e68 <ld_dword>
 800935e:	4603      	mov	r3, r0
 8009360:	4a05      	ldr	r2, [pc, #20]	; (8009378 <check_fs+0xa8>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d101      	bne.n	800936a <check_fs+0x9a>
 8009366:	2300      	movs	r3, #0
 8009368:	e000      	b.n	800936c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800936a:	2302      	movs	r3, #2
}
 800936c:	4618      	mov	r0, r3
 800936e:	3708      	adds	r7, #8
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}
 8009374:	00544146 	.word	0x00544146
 8009378:	33544146 	.word	0x33544146

0800937c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b096      	sub	sp, #88	; 0x58
 8009380:	af00      	add	r7, sp, #0
 8009382:	60f8      	str	r0, [r7, #12]
 8009384:	60b9      	str	r1, [r7, #8]
 8009386:	4613      	mov	r3, r2
 8009388:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	2200      	movs	r2, #0
 800938e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009390:	68f8      	ldr	r0, [r7, #12]
 8009392:	f7ff ff59 	bl	8009248 <get_ldnumber>
 8009396:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800939a:	2b00      	cmp	r3, #0
 800939c:	da01      	bge.n	80093a2 <find_volume+0x26>
 800939e:	230b      	movs	r3, #11
 80093a0:	e262      	b.n	8009868 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80093a2:	4a9f      	ldr	r2, [pc, #636]	; (8009620 <find_volume+0x2a4>)
 80093a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093aa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80093ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d101      	bne.n	80093b6 <find_volume+0x3a>
 80093b2:	230c      	movs	r3, #12
 80093b4:	e258      	b.n	8009868 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093ba:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80093bc:	79fb      	ldrb	r3, [r7, #7]
 80093be:	f023 0301 	bic.w	r3, r3, #1
 80093c2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80093c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d01a      	beq.n	8009402 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80093cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ce:	785b      	ldrb	r3, [r3, #1]
 80093d0:	4618      	mov	r0, r3
 80093d2:	f7fe fc93 	bl	8007cfc <disk_status>
 80093d6:	4603      	mov	r3, r0
 80093d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80093dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80093e0:	f003 0301 	and.w	r3, r3, #1
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d10c      	bne.n	8009402 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80093e8:	79fb      	ldrb	r3, [r7, #7]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d007      	beq.n	80093fe <find_volume+0x82>
 80093ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80093f2:	f003 0304 	and.w	r3, r3, #4
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d001      	beq.n	80093fe <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80093fa:	230a      	movs	r3, #10
 80093fc:	e234      	b.n	8009868 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 80093fe:	2300      	movs	r3, #0
 8009400:	e232      	b.n	8009868 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009404:	2200      	movs	r2, #0
 8009406:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800940a:	b2da      	uxtb	r2, r3
 800940c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800940e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009412:	785b      	ldrb	r3, [r3, #1]
 8009414:	4618      	mov	r0, r3
 8009416:	f7fe fc8b 	bl	8007d30 <disk_initialize>
 800941a:	4603      	mov	r3, r0
 800941c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009420:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009424:	f003 0301 	and.w	r3, r3, #1
 8009428:	2b00      	cmp	r3, #0
 800942a:	d001      	beq.n	8009430 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800942c:	2303      	movs	r3, #3
 800942e:	e21b      	b.n	8009868 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009430:	79fb      	ldrb	r3, [r7, #7]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d007      	beq.n	8009446 <find_volume+0xca>
 8009436:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800943a:	f003 0304 	and.w	r3, r3, #4
 800943e:	2b00      	cmp	r3, #0
 8009440:	d001      	beq.n	8009446 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009442:	230a      	movs	r3, #10
 8009444:	e210      	b.n	8009868 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8009446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009448:	7858      	ldrb	r0, [r3, #1]
 800944a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800944c:	330c      	adds	r3, #12
 800944e:	461a      	mov	r2, r3
 8009450:	2102      	movs	r1, #2
 8009452:	f7fe fcd3 	bl	8007dfc <disk_ioctl>
 8009456:	4603      	mov	r3, r0
 8009458:	2b00      	cmp	r3, #0
 800945a:	d001      	beq.n	8009460 <find_volume+0xe4>
 800945c:	2301      	movs	r3, #1
 800945e:	e203      	b.n	8009868 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8009460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009462:	899b      	ldrh	r3, [r3, #12]
 8009464:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009468:	d80d      	bhi.n	8009486 <find_volume+0x10a>
 800946a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800946c:	899b      	ldrh	r3, [r3, #12]
 800946e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009472:	d308      	bcc.n	8009486 <find_volume+0x10a>
 8009474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009476:	899b      	ldrh	r3, [r3, #12]
 8009478:	461a      	mov	r2, r3
 800947a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800947c:	899b      	ldrh	r3, [r3, #12]
 800947e:	3b01      	subs	r3, #1
 8009480:	4013      	ands	r3, r2
 8009482:	2b00      	cmp	r3, #0
 8009484:	d001      	beq.n	800948a <find_volume+0x10e>
 8009486:	2301      	movs	r3, #1
 8009488:	e1ee      	b.n	8009868 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800948a:	2300      	movs	r3, #0
 800948c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800948e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009490:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009492:	f7ff ff1d 	bl	80092d0 <check_fs>
 8009496:	4603      	mov	r3, r0
 8009498:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800949c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80094a0:	2b02      	cmp	r3, #2
 80094a2:	d149      	bne.n	8009538 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80094a4:	2300      	movs	r3, #0
 80094a6:	643b      	str	r3, [r7, #64]	; 0x40
 80094a8:	e01e      	b.n	80094e8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80094aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ac:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80094b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094b2:	011b      	lsls	r3, r3, #4
 80094b4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80094b8:	4413      	add	r3, r2
 80094ba:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80094bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094be:	3304      	adds	r3, #4
 80094c0:	781b      	ldrb	r3, [r3, #0]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d006      	beq.n	80094d4 <find_volume+0x158>
 80094c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c8:	3308      	adds	r3, #8
 80094ca:	4618      	mov	r0, r3
 80094cc:	f7fe fccc 	bl	8007e68 <ld_dword>
 80094d0:	4602      	mov	r2, r0
 80094d2:	e000      	b.n	80094d6 <find_volume+0x15a>
 80094d4:	2200      	movs	r2, #0
 80094d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	3358      	adds	r3, #88	; 0x58
 80094dc:	443b      	add	r3, r7
 80094de:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80094e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094e4:	3301      	adds	r3, #1
 80094e6:	643b      	str	r3, [r7, #64]	; 0x40
 80094e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094ea:	2b03      	cmp	r3, #3
 80094ec:	d9dd      	bls.n	80094aa <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80094ee:	2300      	movs	r3, #0
 80094f0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80094f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d002      	beq.n	80094fe <find_volume+0x182>
 80094f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094fa:	3b01      	subs	r3, #1
 80094fc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80094fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009500:	009b      	lsls	r3, r3, #2
 8009502:	3358      	adds	r3, #88	; 0x58
 8009504:	443b      	add	r3, r7
 8009506:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800950a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800950c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800950e:	2b00      	cmp	r3, #0
 8009510:	d005      	beq.n	800951e <find_volume+0x1a2>
 8009512:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009514:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009516:	f7ff fedb 	bl	80092d0 <check_fs>
 800951a:	4603      	mov	r3, r0
 800951c:	e000      	b.n	8009520 <find_volume+0x1a4>
 800951e:	2303      	movs	r3, #3
 8009520:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009524:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009528:	2b01      	cmp	r3, #1
 800952a:	d905      	bls.n	8009538 <find_volume+0x1bc>
 800952c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800952e:	3301      	adds	r3, #1
 8009530:	643b      	str	r3, [r7, #64]	; 0x40
 8009532:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009534:	2b03      	cmp	r3, #3
 8009536:	d9e2      	bls.n	80094fe <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009538:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800953c:	2b04      	cmp	r3, #4
 800953e:	d101      	bne.n	8009544 <find_volume+0x1c8>
 8009540:	2301      	movs	r3, #1
 8009542:	e191      	b.n	8009868 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009544:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009548:	2b01      	cmp	r3, #1
 800954a:	d901      	bls.n	8009550 <find_volume+0x1d4>
 800954c:	230d      	movs	r3, #13
 800954e:	e18b      	b.n	8009868 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009552:	3334      	adds	r3, #52	; 0x34
 8009554:	330b      	adds	r3, #11
 8009556:	4618      	mov	r0, r3
 8009558:	f7fe fc6e 	bl	8007e38 <ld_word>
 800955c:	4603      	mov	r3, r0
 800955e:	461a      	mov	r2, r3
 8009560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009562:	899b      	ldrh	r3, [r3, #12]
 8009564:	429a      	cmp	r2, r3
 8009566:	d001      	beq.n	800956c <find_volume+0x1f0>
 8009568:	230d      	movs	r3, #13
 800956a:	e17d      	b.n	8009868 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800956c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800956e:	3334      	adds	r3, #52	; 0x34
 8009570:	3316      	adds	r3, #22
 8009572:	4618      	mov	r0, r3
 8009574:	f7fe fc60 	bl	8007e38 <ld_word>
 8009578:	4603      	mov	r3, r0
 800957a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800957c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800957e:	2b00      	cmp	r3, #0
 8009580:	d106      	bne.n	8009590 <find_volume+0x214>
 8009582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009584:	3334      	adds	r3, #52	; 0x34
 8009586:	3324      	adds	r3, #36	; 0x24
 8009588:	4618      	mov	r0, r3
 800958a:	f7fe fc6d 	bl	8007e68 <ld_dword>
 800958e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009592:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009594:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009598:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800959c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800959e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80095a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a2:	789b      	ldrb	r3, [r3, #2]
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d005      	beq.n	80095b4 <find_volume+0x238>
 80095a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095aa:	789b      	ldrb	r3, [r3, #2]
 80095ac:	2b02      	cmp	r3, #2
 80095ae:	d001      	beq.n	80095b4 <find_volume+0x238>
 80095b0:	230d      	movs	r3, #13
 80095b2:	e159      	b.n	8009868 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80095b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b6:	789b      	ldrb	r3, [r3, #2]
 80095b8:	461a      	mov	r2, r3
 80095ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095bc:	fb02 f303 	mul.w	r3, r2, r3
 80095c0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80095c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80095c8:	b29a      	uxth	r2, r3
 80095ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095cc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80095ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d0:	895b      	ldrh	r3, [r3, #10]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d008      	beq.n	80095e8 <find_volume+0x26c>
 80095d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d8:	895b      	ldrh	r3, [r3, #10]
 80095da:	461a      	mov	r2, r3
 80095dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095de:	895b      	ldrh	r3, [r3, #10]
 80095e0:	3b01      	subs	r3, #1
 80095e2:	4013      	ands	r3, r2
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d001      	beq.n	80095ec <find_volume+0x270>
 80095e8:	230d      	movs	r3, #13
 80095ea:	e13d      	b.n	8009868 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80095ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ee:	3334      	adds	r3, #52	; 0x34
 80095f0:	3311      	adds	r3, #17
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7fe fc20 	bl	8007e38 <ld_word>
 80095f8:	4603      	mov	r3, r0
 80095fa:	461a      	mov	r2, r3
 80095fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095fe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009602:	891b      	ldrh	r3, [r3, #8]
 8009604:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009606:	8992      	ldrh	r2, [r2, #12]
 8009608:	0952      	lsrs	r2, r2, #5
 800960a:	b292      	uxth	r2, r2
 800960c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009610:	fb01 f202 	mul.w	r2, r1, r2
 8009614:	1a9b      	subs	r3, r3, r2
 8009616:	b29b      	uxth	r3, r3
 8009618:	2b00      	cmp	r3, #0
 800961a:	d003      	beq.n	8009624 <find_volume+0x2a8>
 800961c:	230d      	movs	r3, #13
 800961e:	e123      	b.n	8009868 <find_volume+0x4ec>
 8009620:	20000444 	.word	0x20000444

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009626:	3334      	adds	r3, #52	; 0x34
 8009628:	3313      	adds	r3, #19
 800962a:	4618      	mov	r0, r3
 800962c:	f7fe fc04 	bl	8007e38 <ld_word>
 8009630:	4603      	mov	r3, r0
 8009632:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009634:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009636:	2b00      	cmp	r3, #0
 8009638:	d106      	bne.n	8009648 <find_volume+0x2cc>
 800963a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800963c:	3334      	adds	r3, #52	; 0x34
 800963e:	3320      	adds	r3, #32
 8009640:	4618      	mov	r0, r3
 8009642:	f7fe fc11 	bl	8007e68 <ld_dword>
 8009646:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800964a:	3334      	adds	r3, #52	; 0x34
 800964c:	330e      	adds	r3, #14
 800964e:	4618      	mov	r0, r3
 8009650:	f7fe fbf2 	bl	8007e38 <ld_word>
 8009654:	4603      	mov	r3, r0
 8009656:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009658:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800965a:	2b00      	cmp	r3, #0
 800965c:	d101      	bne.n	8009662 <find_volume+0x2e6>
 800965e:	230d      	movs	r3, #13
 8009660:	e102      	b.n	8009868 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009662:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009666:	4413      	add	r3, r2
 8009668:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800966a:	8911      	ldrh	r1, [r2, #8]
 800966c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800966e:	8992      	ldrh	r2, [r2, #12]
 8009670:	0952      	lsrs	r2, r2, #5
 8009672:	b292      	uxth	r2, r2
 8009674:	fbb1 f2f2 	udiv	r2, r1, r2
 8009678:	b292      	uxth	r2, r2
 800967a:	4413      	add	r3, r2
 800967c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800967e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009682:	429a      	cmp	r2, r3
 8009684:	d201      	bcs.n	800968a <find_volume+0x30e>
 8009686:	230d      	movs	r3, #13
 8009688:	e0ee      	b.n	8009868 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800968a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800968c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800968e:	1ad3      	subs	r3, r2, r3
 8009690:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009692:	8952      	ldrh	r2, [r2, #10]
 8009694:	fbb3 f3f2 	udiv	r3, r3, r2
 8009698:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800969a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969c:	2b00      	cmp	r3, #0
 800969e:	d101      	bne.n	80096a4 <find_volume+0x328>
 80096a0:	230d      	movs	r3, #13
 80096a2:	e0e1      	b.n	8009868 <find_volume+0x4ec>
		fmt = FS_FAT32;
 80096a4:	2303      	movs	r3, #3
 80096a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80096aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ac:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d802      	bhi.n	80096ba <find_volume+0x33e>
 80096b4:	2302      	movs	r3, #2
 80096b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80096ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096bc:	f640 72f5 	movw	r2, #4085	; 0xff5
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d802      	bhi.n	80096ca <find_volume+0x34e>
 80096c4:	2301      	movs	r3, #1
 80096c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80096ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096cc:	1c9a      	adds	r2, r3, #2
 80096ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d0:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80096d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80096d6:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80096d8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80096da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096dc:	441a      	add	r2, r3
 80096de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e0:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80096e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80096e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e6:	441a      	add	r2, r3
 80096e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ea:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80096ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80096f0:	2b03      	cmp	r3, #3
 80096f2:	d11e      	bne.n	8009732 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80096f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f6:	3334      	adds	r3, #52	; 0x34
 80096f8:	332a      	adds	r3, #42	; 0x2a
 80096fa:	4618      	mov	r0, r3
 80096fc:	f7fe fb9c 	bl	8007e38 <ld_word>
 8009700:	4603      	mov	r3, r0
 8009702:	2b00      	cmp	r3, #0
 8009704:	d001      	beq.n	800970a <find_volume+0x38e>
 8009706:	230d      	movs	r3, #13
 8009708:	e0ae      	b.n	8009868 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800970a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800970c:	891b      	ldrh	r3, [r3, #8]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d001      	beq.n	8009716 <find_volume+0x39a>
 8009712:	230d      	movs	r3, #13
 8009714:	e0a8      	b.n	8009868 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009718:	3334      	adds	r3, #52	; 0x34
 800971a:	332c      	adds	r3, #44	; 0x2c
 800971c:	4618      	mov	r0, r3
 800971e:	f7fe fba3 	bl	8007e68 <ld_dword>
 8009722:	4602      	mov	r2, r0
 8009724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009726:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800972a:	699b      	ldr	r3, [r3, #24]
 800972c:	009b      	lsls	r3, r3, #2
 800972e:	647b      	str	r3, [r7, #68]	; 0x44
 8009730:	e01f      	b.n	8009772 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009734:	891b      	ldrh	r3, [r3, #8]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d101      	bne.n	800973e <find_volume+0x3c2>
 800973a:	230d      	movs	r3, #13
 800973c:	e094      	b.n	8009868 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800973e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009740:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009744:	441a      	add	r2, r3
 8009746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009748:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800974a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800974e:	2b02      	cmp	r3, #2
 8009750:	d103      	bne.n	800975a <find_volume+0x3de>
 8009752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009754:	699b      	ldr	r3, [r3, #24]
 8009756:	005b      	lsls	r3, r3, #1
 8009758:	e00a      	b.n	8009770 <find_volume+0x3f4>
 800975a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800975c:	699a      	ldr	r2, [r3, #24]
 800975e:	4613      	mov	r3, r2
 8009760:	005b      	lsls	r3, r3, #1
 8009762:	4413      	add	r3, r2
 8009764:	085a      	lsrs	r2, r3, #1
 8009766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009768:	699b      	ldr	r3, [r3, #24]
 800976a:	f003 0301 	and.w	r3, r3, #1
 800976e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009770:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009774:	69da      	ldr	r2, [r3, #28]
 8009776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009778:	899b      	ldrh	r3, [r3, #12]
 800977a:	4619      	mov	r1, r3
 800977c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800977e:	440b      	add	r3, r1
 8009780:	3b01      	subs	r3, #1
 8009782:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009784:	8989      	ldrh	r1, [r1, #12]
 8009786:	fbb3 f3f1 	udiv	r3, r3, r1
 800978a:	429a      	cmp	r2, r3
 800978c:	d201      	bcs.n	8009792 <find_volume+0x416>
 800978e:	230d      	movs	r3, #13
 8009790:	e06a      	b.n	8009868 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009794:	f04f 32ff 	mov.w	r2, #4294967295
 8009798:	615a      	str	r2, [r3, #20]
 800979a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800979c:	695a      	ldr	r2, [r3, #20]
 800979e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80097a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a4:	2280      	movs	r2, #128	; 0x80
 80097a6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80097a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80097ac:	2b03      	cmp	r3, #3
 80097ae:	d149      	bne.n	8009844 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80097b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b2:	3334      	adds	r3, #52	; 0x34
 80097b4:	3330      	adds	r3, #48	; 0x30
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7fe fb3e 	bl	8007e38 <ld_word>
 80097bc:	4603      	mov	r3, r0
 80097be:	2b01      	cmp	r3, #1
 80097c0:	d140      	bne.n	8009844 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80097c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097c4:	3301      	adds	r3, #1
 80097c6:	4619      	mov	r1, r3
 80097c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80097ca:	f7fe fde5 	bl	8008398 <move_window>
 80097ce:	4603      	mov	r3, r0
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d137      	bne.n	8009844 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80097d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d6:	2200      	movs	r2, #0
 80097d8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80097da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097dc:	3334      	adds	r3, #52	; 0x34
 80097de:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80097e2:	4618      	mov	r0, r3
 80097e4:	f7fe fb28 	bl	8007e38 <ld_word>
 80097e8:	4603      	mov	r3, r0
 80097ea:	461a      	mov	r2, r3
 80097ec:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d127      	bne.n	8009844 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80097f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f6:	3334      	adds	r3, #52	; 0x34
 80097f8:	4618      	mov	r0, r3
 80097fa:	f7fe fb35 	bl	8007e68 <ld_dword>
 80097fe:	4603      	mov	r3, r0
 8009800:	4a1b      	ldr	r2, [pc, #108]	; (8009870 <find_volume+0x4f4>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d11e      	bne.n	8009844 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009808:	3334      	adds	r3, #52	; 0x34
 800980a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800980e:	4618      	mov	r0, r3
 8009810:	f7fe fb2a 	bl	8007e68 <ld_dword>
 8009814:	4603      	mov	r3, r0
 8009816:	4a17      	ldr	r2, [pc, #92]	; (8009874 <find_volume+0x4f8>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d113      	bne.n	8009844 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800981c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800981e:	3334      	adds	r3, #52	; 0x34
 8009820:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009824:	4618      	mov	r0, r3
 8009826:	f7fe fb1f 	bl	8007e68 <ld_dword>
 800982a:	4602      	mov	r2, r0
 800982c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800982e:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009832:	3334      	adds	r3, #52	; 0x34
 8009834:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009838:	4618      	mov	r0, r3
 800983a:	f7fe fb15 	bl	8007e68 <ld_dword>
 800983e:	4602      	mov	r2, r0
 8009840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009842:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009846:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800984a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800984c:	4b0a      	ldr	r3, [pc, #40]	; (8009878 <find_volume+0x4fc>)
 800984e:	881b      	ldrh	r3, [r3, #0]
 8009850:	3301      	adds	r3, #1
 8009852:	b29a      	uxth	r2, r3
 8009854:	4b08      	ldr	r3, [pc, #32]	; (8009878 <find_volume+0x4fc>)
 8009856:	801a      	strh	r2, [r3, #0]
 8009858:	4b07      	ldr	r3, [pc, #28]	; (8009878 <find_volume+0x4fc>)
 800985a:	881a      	ldrh	r2, [r3, #0]
 800985c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800985e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009860:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009862:	f7fe fd31 	bl	80082c8 <clear_lock>
#endif
	return FR_OK;
 8009866:	2300      	movs	r3, #0
}
 8009868:	4618      	mov	r0, r3
 800986a:	3758      	adds	r7, #88	; 0x58
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}
 8009870:	41615252 	.word	0x41615252
 8009874:	61417272 	.word	0x61417272
 8009878:	20000448 	.word	0x20000448

0800987c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009886:	2309      	movs	r3, #9
 8009888:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d01c      	beq.n	80098ca <validate+0x4e>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d018      	beq.n	80098ca <validate+0x4e>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d013      	beq.n	80098ca <validate+0x4e>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	889a      	ldrh	r2, [r3, #4]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	88db      	ldrh	r3, [r3, #6]
 80098ac:	429a      	cmp	r2, r3
 80098ae:	d10c      	bne.n	80098ca <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	785b      	ldrb	r3, [r3, #1]
 80098b6:	4618      	mov	r0, r3
 80098b8:	f7fe fa20 	bl	8007cfc <disk_status>
 80098bc:	4603      	mov	r3, r0
 80098be:	f003 0301 	and.w	r3, r3, #1
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d101      	bne.n	80098ca <validate+0x4e>
			res = FR_OK;
 80098c6:	2300      	movs	r3, #0
 80098c8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80098ca:	7bfb      	ldrb	r3, [r7, #15]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d102      	bne.n	80098d6 <validate+0x5a>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	e000      	b.n	80098d8 <validate+0x5c>
 80098d6:	2300      	movs	r3, #0
 80098d8:	683a      	ldr	r2, [r7, #0]
 80098da:	6013      	str	r3, [r2, #0]
	return res;
 80098dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3710      	adds	r7, #16
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}
	...

080098e8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b088      	sub	sp, #32
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	4613      	mov	r3, r2
 80098f4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80098fa:	f107 0310 	add.w	r3, r7, #16
 80098fe:	4618      	mov	r0, r3
 8009900:	f7ff fca2 	bl	8009248 <get_ldnumber>
 8009904:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009906:	69fb      	ldr	r3, [r7, #28]
 8009908:	2b00      	cmp	r3, #0
 800990a:	da01      	bge.n	8009910 <f_mount+0x28>
 800990c:	230b      	movs	r3, #11
 800990e:	e02b      	b.n	8009968 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009910:	4a17      	ldr	r2, [pc, #92]	; (8009970 <f_mount+0x88>)
 8009912:	69fb      	ldr	r3, [r7, #28]
 8009914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009918:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800991a:	69bb      	ldr	r3, [r7, #24]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d005      	beq.n	800992c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009920:	69b8      	ldr	r0, [r7, #24]
 8009922:	f7fe fcd1 	bl	80082c8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009926:	69bb      	ldr	r3, [r7, #24]
 8009928:	2200      	movs	r2, #0
 800992a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d002      	beq.n	8009938 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2200      	movs	r2, #0
 8009936:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009938:	68fa      	ldr	r2, [r7, #12]
 800993a:	490d      	ldr	r1, [pc, #52]	; (8009970 <f_mount+0x88>)
 800993c:	69fb      	ldr	r3, [r7, #28]
 800993e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d002      	beq.n	800994e <f_mount+0x66>
 8009948:	79fb      	ldrb	r3, [r7, #7]
 800994a:	2b01      	cmp	r3, #1
 800994c:	d001      	beq.n	8009952 <f_mount+0x6a>
 800994e:	2300      	movs	r3, #0
 8009950:	e00a      	b.n	8009968 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009952:	f107 010c 	add.w	r1, r7, #12
 8009956:	f107 0308 	add.w	r3, r7, #8
 800995a:	2200      	movs	r2, #0
 800995c:	4618      	mov	r0, r3
 800995e:	f7ff fd0d 	bl	800937c <find_volume>
 8009962:	4603      	mov	r3, r0
 8009964:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009966:	7dfb      	ldrb	r3, [r7, #23]
}
 8009968:	4618      	mov	r0, r3
 800996a:	3720      	adds	r7, #32
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}
 8009970:	20000444 	.word	0x20000444

08009974 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b098      	sub	sp, #96	; 0x60
 8009978:	af00      	add	r7, sp, #0
 800997a:	60f8      	str	r0, [r7, #12]
 800997c:	60b9      	str	r1, [r7, #8]
 800997e:	4613      	mov	r3, r2
 8009980:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d101      	bne.n	800998c <f_open+0x18>
 8009988:	2309      	movs	r3, #9
 800998a:	e1bb      	b.n	8009d04 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800998c:	79fb      	ldrb	r3, [r7, #7]
 800998e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009992:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009994:	79fa      	ldrb	r2, [r7, #7]
 8009996:	f107 0110 	add.w	r1, r7, #16
 800999a:	f107 0308 	add.w	r3, r7, #8
 800999e:	4618      	mov	r0, r3
 80099a0:	f7ff fcec 	bl	800937c <find_volume>
 80099a4:	4603      	mov	r3, r0
 80099a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80099aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	f040 819f 	bne.w	8009cf2 <f_open+0x37e>
		dj.obj.fs = fs;
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80099b8:	68ba      	ldr	r2, [r7, #8]
 80099ba:	f107 0314 	add.w	r3, r7, #20
 80099be:	4611      	mov	r1, r2
 80099c0:	4618      	mov	r0, r3
 80099c2:	f7ff fbcb 	bl	800915c <follow_path>
 80099c6:	4603      	mov	r3, r0
 80099c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80099cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d11a      	bne.n	8009a0a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80099d4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80099d8:	b25b      	sxtb	r3, r3
 80099da:	2b00      	cmp	r3, #0
 80099dc:	da03      	bge.n	80099e6 <f_open+0x72>
				res = FR_INVALID_NAME;
 80099de:	2306      	movs	r3, #6
 80099e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80099e4:	e011      	b.n	8009a0a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80099e6:	79fb      	ldrb	r3, [r7, #7]
 80099e8:	f023 0301 	bic.w	r3, r3, #1
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	bf14      	ite	ne
 80099f0:	2301      	movne	r3, #1
 80099f2:	2300      	moveq	r3, #0
 80099f4:	b2db      	uxtb	r3, r3
 80099f6:	461a      	mov	r2, r3
 80099f8:	f107 0314 	add.w	r3, r7, #20
 80099fc:	4611      	mov	r1, r2
 80099fe:	4618      	mov	r0, r3
 8009a00:	f7fe fb1a 	bl	8008038 <chk_lock>
 8009a04:	4603      	mov	r3, r0
 8009a06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009a0a:	79fb      	ldrb	r3, [r7, #7]
 8009a0c:	f003 031c 	and.w	r3, r3, #28
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d07f      	beq.n	8009b14 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009a14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d017      	beq.n	8009a4c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009a1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a20:	2b04      	cmp	r3, #4
 8009a22:	d10e      	bne.n	8009a42 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009a24:	f7fe fb64 	bl	80080f0 <enq_lock>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d006      	beq.n	8009a3c <f_open+0xc8>
 8009a2e:	f107 0314 	add.w	r3, r7, #20
 8009a32:	4618      	mov	r0, r3
 8009a34:	f7ff facc 	bl	8008fd0 <dir_register>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	e000      	b.n	8009a3e <f_open+0xca>
 8009a3c:	2312      	movs	r3, #18
 8009a3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009a42:	79fb      	ldrb	r3, [r7, #7]
 8009a44:	f043 0308 	orr.w	r3, r3, #8
 8009a48:	71fb      	strb	r3, [r7, #7]
 8009a4a:	e010      	b.n	8009a6e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009a4c:	7ebb      	ldrb	r3, [r7, #26]
 8009a4e:	f003 0311 	and.w	r3, r3, #17
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d003      	beq.n	8009a5e <f_open+0xea>
					res = FR_DENIED;
 8009a56:	2307      	movs	r3, #7
 8009a58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009a5c:	e007      	b.n	8009a6e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009a5e:	79fb      	ldrb	r3, [r7, #7]
 8009a60:	f003 0304 	and.w	r3, r3, #4
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d002      	beq.n	8009a6e <f_open+0xfa>
 8009a68:	2308      	movs	r3, #8
 8009a6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009a6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d168      	bne.n	8009b48 <f_open+0x1d4>
 8009a76:	79fb      	ldrb	r3, [r7, #7]
 8009a78:	f003 0308 	and.w	r3, r3, #8
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d063      	beq.n	8009b48 <f_open+0x1d4>
				dw = GET_FATTIME();
 8009a80:	f7fd ff08 	bl	8007894 <get_fattime>
 8009a84:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a88:	330e      	adds	r3, #14
 8009a8a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f7fe fa29 	bl	8007ee4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a94:	3316      	adds	r3, #22
 8009a96:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f7fe fa23 	bl	8007ee4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aa0:	330b      	adds	r3, #11
 8009aa2:	2220      	movs	r2, #32
 8009aa4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009aaa:	4611      	mov	r1, r2
 8009aac:	4618      	mov	r0, r3
 8009aae:	f7ff f9fb 	bl	8008ea8 <ld_clust>
 8009ab2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009ab8:	2200      	movs	r2, #0
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7ff fa13 	bl	8008ee6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ac2:	331c      	adds	r3, #28
 8009ac4:	2100      	movs	r1, #0
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f7fe fa0c 	bl	8007ee4 <st_dword>
					fs->wflag = 1;
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	2201      	movs	r2, #1
 8009ad0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d037      	beq.n	8009b48 <f_open+0x1d4>
						dw = fs->winsect;
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009adc:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009ade:	f107 0314 	add.w	r3, r7, #20
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7fe ff03 	bl	80088f2 <remove_chain>
 8009aec:	4603      	mov	r3, r0
 8009aee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8009af2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d126      	bne.n	8009b48 <f_open+0x1d4>
							res = move_window(fs, dw);
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009afe:	4618      	mov	r0, r3
 8009b00:	f7fe fc4a 	bl	8008398 <move_window>
 8009b04:	4603      	mov	r3, r0
 8009b06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009b0e:	3a01      	subs	r2, #1
 8009b10:	611a      	str	r2, [r3, #16]
 8009b12:	e019      	b.n	8009b48 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009b14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d115      	bne.n	8009b48 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009b1c:	7ebb      	ldrb	r3, [r7, #26]
 8009b1e:	f003 0310 	and.w	r3, r3, #16
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d003      	beq.n	8009b2e <f_open+0x1ba>
					res = FR_NO_FILE;
 8009b26:	2304      	movs	r3, #4
 8009b28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009b2c:	e00c      	b.n	8009b48 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009b2e:	79fb      	ldrb	r3, [r7, #7]
 8009b30:	f003 0302 	and.w	r3, r3, #2
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d007      	beq.n	8009b48 <f_open+0x1d4>
 8009b38:	7ebb      	ldrb	r3, [r7, #26]
 8009b3a:	f003 0301 	and.w	r3, r3, #1
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d002      	beq.n	8009b48 <f_open+0x1d4>
						res = FR_DENIED;
 8009b42:	2307      	movs	r3, #7
 8009b44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009b48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d128      	bne.n	8009ba2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009b50:	79fb      	ldrb	r3, [r7, #7]
 8009b52:	f003 0308 	and.w	r3, r3, #8
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d003      	beq.n	8009b62 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009b5a:	79fb      	ldrb	r3, [r7, #7]
 8009b5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b60:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009b6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009b70:	79fb      	ldrb	r3, [r7, #7]
 8009b72:	f023 0301 	bic.w	r3, r3, #1
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	bf14      	ite	ne
 8009b7a:	2301      	movne	r3, #1
 8009b7c:	2300      	moveq	r3, #0
 8009b7e:	b2db      	uxtb	r3, r3
 8009b80:	461a      	mov	r2, r3
 8009b82:	f107 0314 	add.w	r3, r7, #20
 8009b86:	4611      	mov	r1, r2
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f7fe fad3 	bl	8008134 <inc_lock>
 8009b8e:	4602      	mov	r2, r0
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	691b      	ldr	r3, [r3, #16]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d102      	bne.n	8009ba2 <f_open+0x22e>
 8009b9c:	2302      	movs	r3, #2
 8009b9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009ba2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	f040 80a3 	bne.w	8009cf2 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009bb0:	4611      	mov	r1, r2
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f7ff f978 	bl	8008ea8 <ld_clust>
 8009bb8:	4602      	mov	r2, r0
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bc0:	331c      	adds	r3, #28
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f7fe f950 	bl	8007e68 <ld_dword>
 8009bc8:	4602      	mov	r2, r0
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009bd4:	693a      	ldr	r2, [r7, #16]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	88da      	ldrh	r2, [r3, #6]
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	79fa      	ldrb	r2, [r7, #7]
 8009be6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2200      	movs	r2, #0
 8009bec:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	3330      	adds	r3, #48	; 0x30
 8009bfe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009c02:	2100      	movs	r1, #0
 8009c04:	4618      	mov	r0, r3
 8009c06:	f7fe f9ba 	bl	8007f7e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009c0a:	79fb      	ldrb	r3, [r7, #7]
 8009c0c:	f003 0320 	and.w	r3, r3, #32
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d06e      	beq.n	8009cf2 <f_open+0x37e>
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	68db      	ldr	r3, [r3, #12]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d06a      	beq.n	8009cf2 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	68da      	ldr	r2, [r3, #12]
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	895b      	ldrh	r3, [r3, #10]
 8009c28:	461a      	mov	r2, r3
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	899b      	ldrh	r3, [r3, #12]
 8009c2e:	fb02 f303 	mul.w	r3, r2, r3
 8009c32:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	689b      	ldr	r3, [r3, #8]
 8009c38:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	68db      	ldr	r3, [r3, #12]
 8009c3e:	657b      	str	r3, [r7, #84]	; 0x54
 8009c40:	e016      	b.n	8009c70 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009c46:	4618      	mov	r0, r3
 8009c48:	f7fe fc63 	bl	8008512 <get_fat>
 8009c4c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009c4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	d802      	bhi.n	8009c5a <f_open+0x2e6>
 8009c54:	2302      	movs	r3, #2
 8009c56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009c5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c60:	d102      	bne.n	8009c68 <f_open+0x2f4>
 8009c62:	2301      	movs	r3, #1
 8009c64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009c68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009c6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c6c:	1ad3      	subs	r3, r2, r3
 8009c6e:	657b      	str	r3, [r7, #84]	; 0x54
 8009c70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d103      	bne.n	8009c80 <f_open+0x30c>
 8009c78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009c7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	d8e0      	bhi.n	8009c42 <f_open+0x2ce>
				}
				fp->clust = clst;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009c84:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009c86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d131      	bne.n	8009cf2 <f_open+0x37e>
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	899b      	ldrh	r3, [r3, #12]
 8009c92:	461a      	mov	r2, r3
 8009c94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c96:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c9a:	fb01 f202 	mul.w	r2, r1, r2
 8009c9e:	1a9b      	subs	r3, r3, r2
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d026      	beq.n	8009cf2 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f7fe fc13 	bl	80084d4 <clust2sect>
 8009cae:	6478      	str	r0, [r7, #68]	; 0x44
 8009cb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d103      	bne.n	8009cbe <f_open+0x34a>
						res = FR_INT_ERR;
 8009cb6:	2302      	movs	r3, #2
 8009cb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009cbc:	e019      	b.n	8009cf2 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	899b      	ldrh	r3, [r3, #12]
 8009cc2:	461a      	mov	r2, r3
 8009cc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009cc6:	fbb3 f2f2 	udiv	r2, r3, r2
 8009cca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ccc:	441a      	add	r2, r3
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	7858      	ldrb	r0, [r3, #1]
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	6a1a      	ldr	r2, [r3, #32]
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	f7fe f84b 	bl	8007d7c <disk_read>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d002      	beq.n	8009cf2 <f_open+0x37e>
 8009cec:	2301      	movs	r3, #1
 8009cee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009cf2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d002      	beq.n	8009d00 <f_open+0x38c>
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009d00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3760      	adds	r7, #96	; 0x60
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b08c      	sub	sp, #48	; 0x30
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	60f8      	str	r0, [r7, #12]
 8009d14:	60b9      	str	r1, [r7, #8]
 8009d16:	607a      	str	r2, [r7, #4]
 8009d18:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	2200      	movs	r2, #0
 8009d22:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f107 0210 	add.w	r2, r7, #16
 8009d2a:	4611      	mov	r1, r2
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f7ff fda5 	bl	800987c <validate>
 8009d32:	4603      	mov	r3, r0
 8009d34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009d38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d107      	bne.n	8009d50 <f_write+0x44>
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	7d5b      	ldrb	r3, [r3, #21]
 8009d44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009d48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d002      	beq.n	8009d56 <f_write+0x4a>
 8009d50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d54:	e16a      	b.n	800a02c <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	7d1b      	ldrb	r3, [r3, #20]
 8009d5a:	f003 0302 	and.w	r3, r3, #2
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d101      	bne.n	8009d66 <f_write+0x5a>
 8009d62:	2307      	movs	r3, #7
 8009d64:	e162      	b.n	800a02c <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	699a      	ldr	r2, [r3, #24]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	441a      	add	r2, r3
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	699b      	ldr	r3, [r3, #24]
 8009d72:	429a      	cmp	r2, r3
 8009d74:	f080 814c 	bcs.w	800a010 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	699b      	ldr	r3, [r3, #24]
 8009d7c:	43db      	mvns	r3, r3
 8009d7e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009d80:	e146      	b.n	800a010 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	699b      	ldr	r3, [r3, #24]
 8009d86:	693a      	ldr	r2, [r7, #16]
 8009d88:	8992      	ldrh	r2, [r2, #12]
 8009d8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d8e:	fb01 f202 	mul.w	r2, r1, r2
 8009d92:	1a9b      	subs	r3, r3, r2
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	f040 80f1 	bne.w	8009f7c <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	699b      	ldr	r3, [r3, #24]
 8009d9e:	693a      	ldr	r2, [r7, #16]
 8009da0:	8992      	ldrh	r2, [r2, #12]
 8009da2:	fbb3 f3f2 	udiv	r3, r3, r2
 8009da6:	693a      	ldr	r2, [r7, #16]
 8009da8:	8952      	ldrh	r2, [r2, #10]
 8009daa:	3a01      	subs	r2, #1
 8009dac:	4013      	ands	r3, r2
 8009dae:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009db0:	69bb      	ldr	r3, [r7, #24]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d143      	bne.n	8009e3e <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	699b      	ldr	r3, [r3, #24]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d10c      	bne.n	8009dd8 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	689b      	ldr	r3, [r3, #8]
 8009dc2:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d11a      	bne.n	8009e00 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	2100      	movs	r1, #0
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f7fe fdf4 	bl	80089bc <create_chain>
 8009dd4:	62b8      	str	r0, [r7, #40]	; 0x28
 8009dd6:	e013      	b.n	8009e00 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d007      	beq.n	8009df0 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	699b      	ldr	r3, [r3, #24]
 8009de4:	4619      	mov	r1, r3
 8009de6:	68f8      	ldr	r0, [r7, #12]
 8009de8:	f7fe fe80 	bl	8008aec <clmt_clust>
 8009dec:	62b8      	str	r0, [r7, #40]	; 0x28
 8009dee:	e007      	b.n	8009e00 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009df0:	68fa      	ldr	r2, [r7, #12]
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	69db      	ldr	r3, [r3, #28]
 8009df6:	4619      	mov	r1, r3
 8009df8:	4610      	mov	r0, r2
 8009dfa:	f7fe fddf 	bl	80089bc <create_chain>
 8009dfe:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	f000 8109 	beq.w	800a01a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e0a:	2b01      	cmp	r3, #1
 8009e0c:	d104      	bne.n	8009e18 <f_write+0x10c>
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2202      	movs	r2, #2
 8009e12:	755a      	strb	r2, [r3, #21]
 8009e14:	2302      	movs	r3, #2
 8009e16:	e109      	b.n	800a02c <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e1e:	d104      	bne.n	8009e2a <f_write+0x11e>
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	2201      	movs	r2, #1
 8009e24:	755a      	strb	r2, [r3, #21]
 8009e26:	2301      	movs	r3, #1
 8009e28:	e100      	b.n	800a02c <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e2e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	689b      	ldr	r3, [r3, #8]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d102      	bne.n	8009e3e <f_write+0x132>
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e3c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	7d1b      	ldrb	r3, [r3, #20]
 8009e42:	b25b      	sxtb	r3, r3
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	da18      	bge.n	8009e7a <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	7858      	ldrb	r0, [r3, #1]
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	6a1a      	ldr	r2, [r3, #32]
 8009e56:	2301      	movs	r3, #1
 8009e58:	f7fd ffb0 	bl	8007dbc <disk_write>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d004      	beq.n	8009e6c <f_write+0x160>
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2201      	movs	r2, #1
 8009e66:	755a      	strb	r2, [r3, #21]
 8009e68:	2301      	movs	r3, #1
 8009e6a:	e0df      	b.n	800a02c <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	7d1b      	ldrb	r3, [r3, #20]
 8009e70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e74:	b2da      	uxtb	r2, r3
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009e7a:	693a      	ldr	r2, [r7, #16]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	69db      	ldr	r3, [r3, #28]
 8009e80:	4619      	mov	r1, r3
 8009e82:	4610      	mov	r0, r2
 8009e84:	f7fe fb26 	bl	80084d4 <clust2sect>
 8009e88:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009e8a:	697b      	ldr	r3, [r7, #20]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d104      	bne.n	8009e9a <f_write+0x18e>
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2202      	movs	r2, #2
 8009e94:	755a      	strb	r2, [r3, #21]
 8009e96:	2302      	movs	r3, #2
 8009e98:	e0c8      	b.n	800a02c <f_write+0x320>
			sect += csect;
 8009e9a:	697a      	ldr	r2, [r7, #20]
 8009e9c:	69bb      	ldr	r3, [r7, #24]
 8009e9e:	4413      	add	r3, r2
 8009ea0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	899b      	ldrh	r3, [r3, #12]
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	fbb3 f3f2 	udiv	r3, r3, r2
 8009eae:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009eb0:	6a3b      	ldr	r3, [r7, #32]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d043      	beq.n	8009f3e <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009eb6:	69ba      	ldr	r2, [r7, #24]
 8009eb8:	6a3b      	ldr	r3, [r7, #32]
 8009eba:	4413      	add	r3, r2
 8009ebc:	693a      	ldr	r2, [r7, #16]
 8009ebe:	8952      	ldrh	r2, [r2, #10]
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d905      	bls.n	8009ed0 <f_write+0x1c4>
					cc = fs->csize - csect;
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	895b      	ldrh	r3, [r3, #10]
 8009ec8:	461a      	mov	r2, r3
 8009eca:	69bb      	ldr	r3, [r7, #24]
 8009ecc:	1ad3      	subs	r3, r2, r3
 8009ece:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	7858      	ldrb	r0, [r3, #1]
 8009ed4:	6a3b      	ldr	r3, [r7, #32]
 8009ed6:	697a      	ldr	r2, [r7, #20]
 8009ed8:	69f9      	ldr	r1, [r7, #28]
 8009eda:	f7fd ff6f 	bl	8007dbc <disk_write>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d004      	beq.n	8009eee <f_write+0x1e2>
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	755a      	strb	r2, [r3, #21]
 8009eea:	2301      	movs	r3, #1
 8009eec:	e09e      	b.n	800a02c <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	6a1a      	ldr	r2, [r3, #32]
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	1ad3      	subs	r3, r2, r3
 8009ef6:	6a3a      	ldr	r2, [r7, #32]
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	d918      	bls.n	8009f2e <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	6a1a      	ldr	r2, [r3, #32]
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	1ad3      	subs	r3, r2, r3
 8009f0a:	693a      	ldr	r2, [r7, #16]
 8009f0c:	8992      	ldrh	r2, [r2, #12]
 8009f0e:	fb02 f303 	mul.w	r3, r2, r3
 8009f12:	69fa      	ldr	r2, [r7, #28]
 8009f14:	18d1      	adds	r1, r2, r3
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	899b      	ldrh	r3, [r3, #12]
 8009f1a:	461a      	mov	r2, r3
 8009f1c:	f7fe f80e 	bl	8007f3c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	7d1b      	ldrb	r3, [r3, #20]
 8009f24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f28:	b2da      	uxtb	r2, r3
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	899b      	ldrh	r3, [r3, #12]
 8009f32:	461a      	mov	r2, r3
 8009f34:	6a3b      	ldr	r3, [r7, #32]
 8009f36:	fb02 f303 	mul.w	r3, r2, r3
 8009f3a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009f3c:	e04b      	b.n	8009fd6 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	6a1b      	ldr	r3, [r3, #32]
 8009f42:	697a      	ldr	r2, [r7, #20]
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d016      	beq.n	8009f76 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	699a      	ldr	r2, [r3, #24]
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d210      	bcs.n	8009f76 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	7858      	ldrb	r0, [r3, #1]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009f5e:	2301      	movs	r3, #1
 8009f60:	697a      	ldr	r2, [r7, #20]
 8009f62:	f7fd ff0b 	bl	8007d7c <disk_read>
 8009f66:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d004      	beq.n	8009f76 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	755a      	strb	r2, [r3, #21]
 8009f72:	2301      	movs	r3, #1
 8009f74:	e05a      	b.n	800a02c <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	697a      	ldr	r2, [r7, #20]
 8009f7a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	899b      	ldrh	r3, [r3, #12]
 8009f80:	4618      	mov	r0, r3
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	699b      	ldr	r3, [r3, #24]
 8009f86:	693a      	ldr	r2, [r7, #16]
 8009f88:	8992      	ldrh	r2, [r2, #12]
 8009f8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f8e:	fb01 f202 	mul.w	r2, r1, r2
 8009f92:	1a9b      	subs	r3, r3, r2
 8009f94:	1ac3      	subs	r3, r0, r3
 8009f96:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d901      	bls.n	8009fa4 <f_write+0x298>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	699b      	ldr	r3, [r3, #24]
 8009fae:	693a      	ldr	r2, [r7, #16]
 8009fb0:	8992      	ldrh	r2, [r2, #12]
 8009fb2:	fbb3 f0f2 	udiv	r0, r3, r2
 8009fb6:	fb00 f202 	mul.w	r2, r0, r2
 8009fba:	1a9b      	subs	r3, r3, r2
 8009fbc:	440b      	add	r3, r1
 8009fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fc0:	69f9      	ldr	r1, [r7, #28]
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f7fd ffba 	bl	8007f3c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	7d1b      	ldrb	r3, [r3, #20]
 8009fcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009fd0:	b2da      	uxtb	r2, r3
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009fd6:	69fa      	ldr	r2, [r7, #28]
 8009fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fda:	4413      	add	r3, r2
 8009fdc:	61fb      	str	r3, [r7, #28]
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	699a      	ldr	r2, [r3, #24]
 8009fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe4:	441a      	add	r2, r3
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	619a      	str	r2, [r3, #24]
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	68da      	ldr	r2, [r3, #12]
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	699b      	ldr	r3, [r3, #24]
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	bf38      	it	cc
 8009ff6:	461a      	movcc	r2, r3
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	60da      	str	r2, [r3, #12]
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	681a      	ldr	r2, [r3, #0]
 800a000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a002:	441a      	add	r2, r3
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	601a      	str	r2, [r3, #0]
 800a008:	687a      	ldr	r2, [r7, #4]
 800a00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00c:	1ad3      	subs	r3, r2, r3
 800a00e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2b00      	cmp	r3, #0
 800a014:	f47f aeb5 	bne.w	8009d82 <f_write+0x76>
 800a018:	e000      	b.n	800a01c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a01a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	7d1b      	ldrb	r3, [r3, #20]
 800a020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a024:	b2da      	uxtb	r2, r3
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a02a:	2300      	movs	r3, #0
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3730      	adds	r7, #48	; 0x30
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}

0800a034 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b086      	sub	sp, #24
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f107 0208 	add.w	r2, r7, #8
 800a042:	4611      	mov	r1, r2
 800a044:	4618      	mov	r0, r3
 800a046:	f7ff fc19 	bl	800987c <validate>
 800a04a:	4603      	mov	r3, r0
 800a04c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a04e:	7dfb      	ldrb	r3, [r7, #23]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d168      	bne.n	800a126 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	7d1b      	ldrb	r3, [r3, #20]
 800a058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d062      	beq.n	800a126 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	7d1b      	ldrb	r3, [r3, #20]
 800a064:	b25b      	sxtb	r3, r3
 800a066:	2b00      	cmp	r3, #0
 800a068:	da15      	bge.n	800a096 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	7858      	ldrb	r0, [r3, #1]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6a1a      	ldr	r2, [r3, #32]
 800a078:	2301      	movs	r3, #1
 800a07a:	f7fd fe9f 	bl	8007dbc <disk_write>
 800a07e:	4603      	mov	r3, r0
 800a080:	2b00      	cmp	r3, #0
 800a082:	d001      	beq.n	800a088 <f_sync+0x54>
 800a084:	2301      	movs	r3, #1
 800a086:	e04f      	b.n	800a128 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	7d1b      	ldrb	r3, [r3, #20]
 800a08c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a090:	b2da      	uxtb	r2, r3
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a096:	f7fd fbfd 	bl	8007894 <get_fattime>
 800a09a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a09c:	68ba      	ldr	r2, [r7, #8]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	4610      	mov	r0, r2
 800a0a6:	f7fe f977 	bl	8008398 <move_window>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a0ae:	7dfb      	ldrb	r3, [r7, #23]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d138      	bne.n	800a126 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0b8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	330b      	adds	r3, #11
 800a0be:	781a      	ldrb	r2, [r3, #0]
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	330b      	adds	r3, #11
 800a0c4:	f042 0220 	orr.w	r2, r2, #32
 800a0c8:	b2d2      	uxtb	r2, r2
 800a0ca:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6818      	ldr	r0, [r3, #0]
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	689b      	ldr	r3, [r3, #8]
 800a0d4:	461a      	mov	r2, r3
 800a0d6:	68f9      	ldr	r1, [r7, #12]
 800a0d8:	f7fe ff05 	bl	8008ee6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	f103 021c 	add.w	r2, r3, #28
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	68db      	ldr	r3, [r3, #12]
 800a0e6:	4619      	mov	r1, r3
 800a0e8:	4610      	mov	r0, r2
 800a0ea:	f7fd fefb 	bl	8007ee4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	3316      	adds	r3, #22
 800a0f2:	6939      	ldr	r1, [r7, #16]
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f7fd fef5 	bl	8007ee4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	3312      	adds	r3, #18
 800a0fe:	2100      	movs	r1, #0
 800a100:	4618      	mov	r0, r3
 800a102:	f7fd fed4 	bl	8007eae <st_word>
					fs->wflag = 1;
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	2201      	movs	r2, #1
 800a10a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	4618      	mov	r0, r3
 800a110:	f7fe f970 	bl	80083f4 <sync_fs>
 800a114:	4603      	mov	r3, r0
 800a116:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	7d1b      	ldrb	r3, [r3, #20]
 800a11c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a120:	b2da      	uxtb	r2, r3
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a126:	7dfb      	ldrb	r3, [r7, #23]
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3718      	adds	r7, #24
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}

0800a130 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b084      	sub	sp, #16
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f7ff ff7b 	bl	800a034 <f_sync>
 800a13e:	4603      	mov	r3, r0
 800a140:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a142:	7bfb      	ldrb	r3, [r7, #15]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d118      	bne.n	800a17a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f107 0208 	add.w	r2, r7, #8
 800a14e:	4611      	mov	r1, r2
 800a150:	4618      	mov	r0, r3
 800a152:	f7ff fb93 	bl	800987c <validate>
 800a156:	4603      	mov	r3, r0
 800a158:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a15a:	7bfb      	ldrb	r3, [r7, #15]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d10c      	bne.n	800a17a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	691b      	ldr	r3, [r3, #16]
 800a164:	4618      	mov	r0, r3
 800a166:	f7fe f873 	bl	8008250 <dec_lock>
 800a16a:	4603      	mov	r3, r0
 800a16c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a16e:	7bfb      	ldrb	r3, [r7, #15]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d102      	bne.n	800a17a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2200      	movs	r2, #0
 800a178:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a17a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3710      	adds	r7, #16
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a184:	b480      	push	{r7}
 800a186:	b087      	sub	sp, #28
 800a188:	af00      	add	r7, sp, #0
 800a18a:	60f8      	str	r0, [r7, #12]
 800a18c:	60b9      	str	r1, [r7, #8]
 800a18e:	4613      	mov	r3, r2
 800a190:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a192:	2301      	movs	r3, #1
 800a194:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a196:	2300      	movs	r3, #0
 800a198:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a19a:	4b1f      	ldr	r3, [pc, #124]	; (800a218 <FATFS_LinkDriverEx+0x94>)
 800a19c:	7a5b      	ldrb	r3, [r3, #9]
 800a19e:	b2db      	uxtb	r3, r3
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d131      	bne.n	800a208 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a1a4:	4b1c      	ldr	r3, [pc, #112]	; (800a218 <FATFS_LinkDriverEx+0x94>)
 800a1a6:	7a5b      	ldrb	r3, [r3, #9]
 800a1a8:	b2db      	uxtb	r3, r3
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	4b1a      	ldr	r3, [pc, #104]	; (800a218 <FATFS_LinkDriverEx+0x94>)
 800a1ae:	2100      	movs	r1, #0
 800a1b0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a1b2:	4b19      	ldr	r3, [pc, #100]	; (800a218 <FATFS_LinkDriverEx+0x94>)
 800a1b4:	7a5b      	ldrb	r3, [r3, #9]
 800a1b6:	b2db      	uxtb	r3, r3
 800a1b8:	4a17      	ldr	r2, [pc, #92]	; (800a218 <FATFS_LinkDriverEx+0x94>)
 800a1ba:	009b      	lsls	r3, r3, #2
 800a1bc:	4413      	add	r3, r2
 800a1be:	68fa      	ldr	r2, [r7, #12]
 800a1c0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a1c2:	4b15      	ldr	r3, [pc, #84]	; (800a218 <FATFS_LinkDriverEx+0x94>)
 800a1c4:	7a5b      	ldrb	r3, [r3, #9]
 800a1c6:	b2db      	uxtb	r3, r3
 800a1c8:	461a      	mov	r2, r3
 800a1ca:	4b13      	ldr	r3, [pc, #76]	; (800a218 <FATFS_LinkDriverEx+0x94>)
 800a1cc:	4413      	add	r3, r2
 800a1ce:	79fa      	ldrb	r2, [r7, #7]
 800a1d0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a1d2:	4b11      	ldr	r3, [pc, #68]	; (800a218 <FATFS_LinkDriverEx+0x94>)
 800a1d4:	7a5b      	ldrb	r3, [r3, #9]
 800a1d6:	b2db      	uxtb	r3, r3
 800a1d8:	1c5a      	adds	r2, r3, #1
 800a1da:	b2d1      	uxtb	r1, r2
 800a1dc:	4a0e      	ldr	r2, [pc, #56]	; (800a218 <FATFS_LinkDriverEx+0x94>)
 800a1de:	7251      	strb	r1, [r2, #9]
 800a1e0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a1e2:	7dbb      	ldrb	r3, [r7, #22]
 800a1e4:	3330      	adds	r3, #48	; 0x30
 800a1e6:	b2da      	uxtb	r2, r3
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	3301      	adds	r3, #1
 800a1f0:	223a      	movs	r2, #58	; 0x3a
 800a1f2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	3302      	adds	r3, #2
 800a1f8:	222f      	movs	r2, #47	; 0x2f
 800a1fa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	3303      	adds	r3, #3
 800a200:	2200      	movs	r2, #0
 800a202:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a204:	2300      	movs	r3, #0
 800a206:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a208:	7dfb      	ldrb	r3, [r7, #23]
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	371c      	adds	r7, #28
 800a20e:	46bd      	mov	sp, r7
 800a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a214:	4770      	bx	lr
 800a216:	bf00      	nop
 800a218:	2000046c 	.word	0x2000046c

0800a21c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b082      	sub	sp, #8
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a226:	2200      	movs	r2, #0
 800a228:	6839      	ldr	r1, [r7, #0]
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f7ff ffaa 	bl	800a184 <FATFS_LinkDriverEx>
 800a230:	4603      	mov	r3, r0
}
 800a232:	4618      	mov	r0, r3
 800a234:	3708      	adds	r7, #8
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
	...

0800a23c <__errno>:
 800a23c:	4b01      	ldr	r3, [pc, #4]	; (800a244 <__errno+0x8>)
 800a23e:	6818      	ldr	r0, [r3, #0]
 800a240:	4770      	bx	lr
 800a242:	bf00      	nop
 800a244:	2000000c 	.word	0x2000000c

0800a248 <__libc_init_array>:
 800a248:	b570      	push	{r4, r5, r6, lr}
 800a24a:	4d0d      	ldr	r5, [pc, #52]	; (800a280 <__libc_init_array+0x38>)
 800a24c:	4c0d      	ldr	r4, [pc, #52]	; (800a284 <__libc_init_array+0x3c>)
 800a24e:	1b64      	subs	r4, r4, r5
 800a250:	10a4      	asrs	r4, r4, #2
 800a252:	2600      	movs	r6, #0
 800a254:	42a6      	cmp	r6, r4
 800a256:	d109      	bne.n	800a26c <__libc_init_array+0x24>
 800a258:	4d0b      	ldr	r5, [pc, #44]	; (800a288 <__libc_init_array+0x40>)
 800a25a:	4c0c      	ldr	r4, [pc, #48]	; (800a28c <__libc_init_array+0x44>)
 800a25c:	f004 fc16 	bl	800ea8c <_init>
 800a260:	1b64      	subs	r4, r4, r5
 800a262:	10a4      	asrs	r4, r4, #2
 800a264:	2600      	movs	r6, #0
 800a266:	42a6      	cmp	r6, r4
 800a268:	d105      	bne.n	800a276 <__libc_init_array+0x2e>
 800a26a:	bd70      	pop	{r4, r5, r6, pc}
 800a26c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a270:	4798      	blx	r3
 800a272:	3601      	adds	r6, #1
 800a274:	e7ee      	b.n	800a254 <__libc_init_array+0xc>
 800a276:	f855 3b04 	ldr.w	r3, [r5], #4
 800a27a:	4798      	blx	r3
 800a27c:	3601      	adds	r6, #1
 800a27e:	e7f2      	b.n	800a266 <__libc_init_array+0x1e>
 800a280:	0800f10c 	.word	0x0800f10c
 800a284:	0800f10c 	.word	0x0800f10c
 800a288:	0800f10c 	.word	0x0800f10c
 800a28c:	0800f110 	.word	0x0800f110

0800a290 <memset>:
 800a290:	4402      	add	r2, r0
 800a292:	4603      	mov	r3, r0
 800a294:	4293      	cmp	r3, r2
 800a296:	d100      	bne.n	800a29a <memset+0xa>
 800a298:	4770      	bx	lr
 800a29a:	f803 1b01 	strb.w	r1, [r3], #1
 800a29e:	e7f9      	b.n	800a294 <memset+0x4>

0800a2a0 <__cvt>:
 800a2a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2a2:	ed2d 8b02 	vpush	{d8}
 800a2a6:	eeb0 8b40 	vmov.f64	d8, d0
 800a2aa:	b085      	sub	sp, #20
 800a2ac:	4617      	mov	r7, r2
 800a2ae:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a2b0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a2b2:	ee18 2a90 	vmov	r2, s17
 800a2b6:	f025 0520 	bic.w	r5, r5, #32
 800a2ba:	2a00      	cmp	r2, #0
 800a2bc:	bfb6      	itet	lt
 800a2be:	222d      	movlt	r2, #45	; 0x2d
 800a2c0:	2200      	movge	r2, #0
 800a2c2:	eeb1 8b40 	vneglt.f64	d8, d0
 800a2c6:	2d46      	cmp	r5, #70	; 0x46
 800a2c8:	460c      	mov	r4, r1
 800a2ca:	701a      	strb	r2, [r3, #0]
 800a2cc:	d004      	beq.n	800a2d8 <__cvt+0x38>
 800a2ce:	2d45      	cmp	r5, #69	; 0x45
 800a2d0:	d100      	bne.n	800a2d4 <__cvt+0x34>
 800a2d2:	3401      	adds	r4, #1
 800a2d4:	2102      	movs	r1, #2
 800a2d6:	e000      	b.n	800a2da <__cvt+0x3a>
 800a2d8:	2103      	movs	r1, #3
 800a2da:	ab03      	add	r3, sp, #12
 800a2dc:	9301      	str	r3, [sp, #4]
 800a2de:	ab02      	add	r3, sp, #8
 800a2e0:	9300      	str	r3, [sp, #0]
 800a2e2:	4622      	mov	r2, r4
 800a2e4:	4633      	mov	r3, r6
 800a2e6:	eeb0 0b48 	vmov.f64	d0, d8
 800a2ea:	f001 fe7d 	bl	800bfe8 <_dtoa_r>
 800a2ee:	2d47      	cmp	r5, #71	; 0x47
 800a2f0:	d101      	bne.n	800a2f6 <__cvt+0x56>
 800a2f2:	07fb      	lsls	r3, r7, #31
 800a2f4:	d51a      	bpl.n	800a32c <__cvt+0x8c>
 800a2f6:	2d46      	cmp	r5, #70	; 0x46
 800a2f8:	eb00 0204 	add.w	r2, r0, r4
 800a2fc:	d10c      	bne.n	800a318 <__cvt+0x78>
 800a2fe:	7803      	ldrb	r3, [r0, #0]
 800a300:	2b30      	cmp	r3, #48	; 0x30
 800a302:	d107      	bne.n	800a314 <__cvt+0x74>
 800a304:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a30c:	bf1c      	itt	ne
 800a30e:	f1c4 0401 	rsbne	r4, r4, #1
 800a312:	6034      	strne	r4, [r6, #0]
 800a314:	6833      	ldr	r3, [r6, #0]
 800a316:	441a      	add	r2, r3
 800a318:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a31c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a320:	bf08      	it	eq
 800a322:	9203      	streq	r2, [sp, #12]
 800a324:	2130      	movs	r1, #48	; 0x30
 800a326:	9b03      	ldr	r3, [sp, #12]
 800a328:	4293      	cmp	r3, r2
 800a32a:	d307      	bcc.n	800a33c <__cvt+0x9c>
 800a32c:	9b03      	ldr	r3, [sp, #12]
 800a32e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a330:	1a1b      	subs	r3, r3, r0
 800a332:	6013      	str	r3, [r2, #0]
 800a334:	b005      	add	sp, #20
 800a336:	ecbd 8b02 	vpop	{d8}
 800a33a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a33c:	1c5c      	adds	r4, r3, #1
 800a33e:	9403      	str	r4, [sp, #12]
 800a340:	7019      	strb	r1, [r3, #0]
 800a342:	e7f0      	b.n	800a326 <__cvt+0x86>

0800a344 <__exponent>:
 800a344:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a346:	4603      	mov	r3, r0
 800a348:	2900      	cmp	r1, #0
 800a34a:	bfb8      	it	lt
 800a34c:	4249      	neglt	r1, r1
 800a34e:	f803 2b02 	strb.w	r2, [r3], #2
 800a352:	bfb4      	ite	lt
 800a354:	222d      	movlt	r2, #45	; 0x2d
 800a356:	222b      	movge	r2, #43	; 0x2b
 800a358:	2909      	cmp	r1, #9
 800a35a:	7042      	strb	r2, [r0, #1]
 800a35c:	dd2a      	ble.n	800a3b4 <__exponent+0x70>
 800a35e:	f10d 0407 	add.w	r4, sp, #7
 800a362:	46a4      	mov	ip, r4
 800a364:	270a      	movs	r7, #10
 800a366:	46a6      	mov	lr, r4
 800a368:	460a      	mov	r2, r1
 800a36a:	fb91 f6f7 	sdiv	r6, r1, r7
 800a36e:	fb07 1516 	mls	r5, r7, r6, r1
 800a372:	3530      	adds	r5, #48	; 0x30
 800a374:	2a63      	cmp	r2, #99	; 0x63
 800a376:	f104 34ff 	add.w	r4, r4, #4294967295
 800a37a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a37e:	4631      	mov	r1, r6
 800a380:	dcf1      	bgt.n	800a366 <__exponent+0x22>
 800a382:	3130      	adds	r1, #48	; 0x30
 800a384:	f1ae 0502 	sub.w	r5, lr, #2
 800a388:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a38c:	1c44      	adds	r4, r0, #1
 800a38e:	4629      	mov	r1, r5
 800a390:	4561      	cmp	r1, ip
 800a392:	d30a      	bcc.n	800a3aa <__exponent+0x66>
 800a394:	f10d 0209 	add.w	r2, sp, #9
 800a398:	eba2 020e 	sub.w	r2, r2, lr
 800a39c:	4565      	cmp	r5, ip
 800a39e:	bf88      	it	hi
 800a3a0:	2200      	movhi	r2, #0
 800a3a2:	4413      	add	r3, r2
 800a3a4:	1a18      	subs	r0, r3, r0
 800a3a6:	b003      	add	sp, #12
 800a3a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a3ae:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a3b2:	e7ed      	b.n	800a390 <__exponent+0x4c>
 800a3b4:	2330      	movs	r3, #48	; 0x30
 800a3b6:	3130      	adds	r1, #48	; 0x30
 800a3b8:	7083      	strb	r3, [r0, #2]
 800a3ba:	70c1      	strb	r1, [r0, #3]
 800a3bc:	1d03      	adds	r3, r0, #4
 800a3be:	e7f1      	b.n	800a3a4 <__exponent+0x60>

0800a3c0 <_printf_float>:
 800a3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3c4:	b08b      	sub	sp, #44	; 0x2c
 800a3c6:	460c      	mov	r4, r1
 800a3c8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800a3cc:	4616      	mov	r6, r2
 800a3ce:	461f      	mov	r7, r3
 800a3d0:	4605      	mov	r5, r0
 800a3d2:	f003 f89d 	bl	800d510 <_localeconv_r>
 800a3d6:	f8d0 b000 	ldr.w	fp, [r0]
 800a3da:	4658      	mov	r0, fp
 800a3dc:	f7f5 ff30 	bl	8000240 <strlen>
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	9308      	str	r3, [sp, #32]
 800a3e4:	f8d8 3000 	ldr.w	r3, [r8]
 800a3e8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a3ec:	6822      	ldr	r2, [r4, #0]
 800a3ee:	3307      	adds	r3, #7
 800a3f0:	f023 0307 	bic.w	r3, r3, #7
 800a3f4:	f103 0108 	add.w	r1, r3, #8
 800a3f8:	f8c8 1000 	str.w	r1, [r8]
 800a3fc:	4682      	mov	sl, r0
 800a3fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a402:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800a406:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800a668 <_printf_float+0x2a8>
 800a40a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800a40e:	eeb0 6bc0 	vabs.f64	d6, d0
 800a412:	eeb4 6b47 	vcmp.f64	d6, d7
 800a416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a41a:	dd24      	ble.n	800a466 <_printf_float+0xa6>
 800a41c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a424:	d502      	bpl.n	800a42c <_printf_float+0x6c>
 800a426:	232d      	movs	r3, #45	; 0x2d
 800a428:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a42c:	4b90      	ldr	r3, [pc, #576]	; (800a670 <_printf_float+0x2b0>)
 800a42e:	4891      	ldr	r0, [pc, #580]	; (800a674 <_printf_float+0x2b4>)
 800a430:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800a434:	bf94      	ite	ls
 800a436:	4698      	movls	r8, r3
 800a438:	4680      	movhi	r8, r0
 800a43a:	2303      	movs	r3, #3
 800a43c:	6123      	str	r3, [r4, #16]
 800a43e:	f022 0204 	bic.w	r2, r2, #4
 800a442:	2300      	movs	r3, #0
 800a444:	6022      	str	r2, [r4, #0]
 800a446:	9304      	str	r3, [sp, #16]
 800a448:	9700      	str	r7, [sp, #0]
 800a44a:	4633      	mov	r3, r6
 800a44c:	aa09      	add	r2, sp, #36	; 0x24
 800a44e:	4621      	mov	r1, r4
 800a450:	4628      	mov	r0, r5
 800a452:	f000 f9d3 	bl	800a7fc <_printf_common>
 800a456:	3001      	adds	r0, #1
 800a458:	f040 808a 	bne.w	800a570 <_printf_float+0x1b0>
 800a45c:	f04f 30ff 	mov.w	r0, #4294967295
 800a460:	b00b      	add	sp, #44	; 0x2c
 800a462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a466:	eeb4 0b40 	vcmp.f64	d0, d0
 800a46a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a46e:	d709      	bvc.n	800a484 <_printf_float+0xc4>
 800a470:	ee10 3a90 	vmov	r3, s1
 800a474:	2b00      	cmp	r3, #0
 800a476:	bfbc      	itt	lt
 800a478:	232d      	movlt	r3, #45	; 0x2d
 800a47a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a47e:	487e      	ldr	r0, [pc, #504]	; (800a678 <_printf_float+0x2b8>)
 800a480:	4b7e      	ldr	r3, [pc, #504]	; (800a67c <_printf_float+0x2bc>)
 800a482:	e7d5      	b.n	800a430 <_printf_float+0x70>
 800a484:	6863      	ldr	r3, [r4, #4]
 800a486:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800a48a:	9104      	str	r1, [sp, #16]
 800a48c:	1c59      	adds	r1, r3, #1
 800a48e:	d13c      	bne.n	800a50a <_printf_float+0x14a>
 800a490:	2306      	movs	r3, #6
 800a492:	6063      	str	r3, [r4, #4]
 800a494:	2300      	movs	r3, #0
 800a496:	9303      	str	r3, [sp, #12]
 800a498:	ab08      	add	r3, sp, #32
 800a49a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800a49e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a4a2:	ab07      	add	r3, sp, #28
 800a4a4:	6861      	ldr	r1, [r4, #4]
 800a4a6:	9300      	str	r3, [sp, #0]
 800a4a8:	6022      	str	r2, [r4, #0]
 800a4aa:	f10d 031b 	add.w	r3, sp, #27
 800a4ae:	4628      	mov	r0, r5
 800a4b0:	f7ff fef6 	bl	800a2a0 <__cvt>
 800a4b4:	9b04      	ldr	r3, [sp, #16]
 800a4b6:	9907      	ldr	r1, [sp, #28]
 800a4b8:	2b47      	cmp	r3, #71	; 0x47
 800a4ba:	4680      	mov	r8, r0
 800a4bc:	d108      	bne.n	800a4d0 <_printf_float+0x110>
 800a4be:	1cc8      	adds	r0, r1, #3
 800a4c0:	db02      	blt.n	800a4c8 <_printf_float+0x108>
 800a4c2:	6863      	ldr	r3, [r4, #4]
 800a4c4:	4299      	cmp	r1, r3
 800a4c6:	dd41      	ble.n	800a54c <_printf_float+0x18c>
 800a4c8:	f1a9 0902 	sub.w	r9, r9, #2
 800a4cc:	fa5f f989 	uxtb.w	r9, r9
 800a4d0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a4d4:	d820      	bhi.n	800a518 <_printf_float+0x158>
 800a4d6:	3901      	subs	r1, #1
 800a4d8:	464a      	mov	r2, r9
 800a4da:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a4de:	9107      	str	r1, [sp, #28]
 800a4e0:	f7ff ff30 	bl	800a344 <__exponent>
 800a4e4:	9a08      	ldr	r2, [sp, #32]
 800a4e6:	9004      	str	r0, [sp, #16]
 800a4e8:	1813      	adds	r3, r2, r0
 800a4ea:	2a01      	cmp	r2, #1
 800a4ec:	6123      	str	r3, [r4, #16]
 800a4ee:	dc02      	bgt.n	800a4f6 <_printf_float+0x136>
 800a4f0:	6822      	ldr	r2, [r4, #0]
 800a4f2:	07d2      	lsls	r2, r2, #31
 800a4f4:	d501      	bpl.n	800a4fa <_printf_float+0x13a>
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	6123      	str	r3, [r4, #16]
 800a4fa:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d0a2      	beq.n	800a448 <_printf_float+0x88>
 800a502:	232d      	movs	r3, #45	; 0x2d
 800a504:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a508:	e79e      	b.n	800a448 <_printf_float+0x88>
 800a50a:	9904      	ldr	r1, [sp, #16]
 800a50c:	2947      	cmp	r1, #71	; 0x47
 800a50e:	d1c1      	bne.n	800a494 <_printf_float+0xd4>
 800a510:	2b00      	cmp	r3, #0
 800a512:	d1bf      	bne.n	800a494 <_printf_float+0xd4>
 800a514:	2301      	movs	r3, #1
 800a516:	e7bc      	b.n	800a492 <_printf_float+0xd2>
 800a518:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800a51c:	d118      	bne.n	800a550 <_printf_float+0x190>
 800a51e:	2900      	cmp	r1, #0
 800a520:	6863      	ldr	r3, [r4, #4]
 800a522:	dd0b      	ble.n	800a53c <_printf_float+0x17c>
 800a524:	6121      	str	r1, [r4, #16]
 800a526:	b913      	cbnz	r3, 800a52e <_printf_float+0x16e>
 800a528:	6822      	ldr	r2, [r4, #0]
 800a52a:	07d0      	lsls	r0, r2, #31
 800a52c:	d502      	bpl.n	800a534 <_printf_float+0x174>
 800a52e:	3301      	adds	r3, #1
 800a530:	440b      	add	r3, r1
 800a532:	6123      	str	r3, [r4, #16]
 800a534:	2300      	movs	r3, #0
 800a536:	65a1      	str	r1, [r4, #88]	; 0x58
 800a538:	9304      	str	r3, [sp, #16]
 800a53a:	e7de      	b.n	800a4fa <_printf_float+0x13a>
 800a53c:	b913      	cbnz	r3, 800a544 <_printf_float+0x184>
 800a53e:	6822      	ldr	r2, [r4, #0]
 800a540:	07d2      	lsls	r2, r2, #31
 800a542:	d501      	bpl.n	800a548 <_printf_float+0x188>
 800a544:	3302      	adds	r3, #2
 800a546:	e7f4      	b.n	800a532 <_printf_float+0x172>
 800a548:	2301      	movs	r3, #1
 800a54a:	e7f2      	b.n	800a532 <_printf_float+0x172>
 800a54c:	f04f 0967 	mov.w	r9, #103	; 0x67
 800a550:	9b08      	ldr	r3, [sp, #32]
 800a552:	4299      	cmp	r1, r3
 800a554:	db05      	blt.n	800a562 <_printf_float+0x1a2>
 800a556:	6823      	ldr	r3, [r4, #0]
 800a558:	6121      	str	r1, [r4, #16]
 800a55a:	07d8      	lsls	r0, r3, #31
 800a55c:	d5ea      	bpl.n	800a534 <_printf_float+0x174>
 800a55e:	1c4b      	adds	r3, r1, #1
 800a560:	e7e7      	b.n	800a532 <_printf_float+0x172>
 800a562:	2900      	cmp	r1, #0
 800a564:	bfd4      	ite	le
 800a566:	f1c1 0202 	rsble	r2, r1, #2
 800a56a:	2201      	movgt	r2, #1
 800a56c:	4413      	add	r3, r2
 800a56e:	e7e0      	b.n	800a532 <_printf_float+0x172>
 800a570:	6823      	ldr	r3, [r4, #0]
 800a572:	055a      	lsls	r2, r3, #21
 800a574:	d407      	bmi.n	800a586 <_printf_float+0x1c6>
 800a576:	6923      	ldr	r3, [r4, #16]
 800a578:	4642      	mov	r2, r8
 800a57a:	4631      	mov	r1, r6
 800a57c:	4628      	mov	r0, r5
 800a57e:	47b8      	blx	r7
 800a580:	3001      	adds	r0, #1
 800a582:	d12a      	bne.n	800a5da <_printf_float+0x21a>
 800a584:	e76a      	b.n	800a45c <_printf_float+0x9c>
 800a586:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a58a:	f240 80e2 	bls.w	800a752 <_printf_float+0x392>
 800a58e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a592:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a59a:	d133      	bne.n	800a604 <_printf_float+0x244>
 800a59c:	4a38      	ldr	r2, [pc, #224]	; (800a680 <_printf_float+0x2c0>)
 800a59e:	2301      	movs	r3, #1
 800a5a0:	4631      	mov	r1, r6
 800a5a2:	4628      	mov	r0, r5
 800a5a4:	47b8      	blx	r7
 800a5a6:	3001      	adds	r0, #1
 800a5a8:	f43f af58 	beq.w	800a45c <_printf_float+0x9c>
 800a5ac:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	db02      	blt.n	800a5ba <_printf_float+0x1fa>
 800a5b4:	6823      	ldr	r3, [r4, #0]
 800a5b6:	07d8      	lsls	r0, r3, #31
 800a5b8:	d50f      	bpl.n	800a5da <_printf_float+0x21a>
 800a5ba:	4653      	mov	r3, sl
 800a5bc:	465a      	mov	r2, fp
 800a5be:	4631      	mov	r1, r6
 800a5c0:	4628      	mov	r0, r5
 800a5c2:	47b8      	blx	r7
 800a5c4:	3001      	adds	r0, #1
 800a5c6:	f43f af49 	beq.w	800a45c <_printf_float+0x9c>
 800a5ca:	f04f 0800 	mov.w	r8, #0
 800a5ce:	f104 091a 	add.w	r9, r4, #26
 800a5d2:	9b08      	ldr	r3, [sp, #32]
 800a5d4:	3b01      	subs	r3, #1
 800a5d6:	4543      	cmp	r3, r8
 800a5d8:	dc09      	bgt.n	800a5ee <_printf_float+0x22e>
 800a5da:	6823      	ldr	r3, [r4, #0]
 800a5dc:	079b      	lsls	r3, r3, #30
 800a5de:	f100 8108 	bmi.w	800a7f2 <_printf_float+0x432>
 800a5e2:	68e0      	ldr	r0, [r4, #12]
 800a5e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5e6:	4298      	cmp	r0, r3
 800a5e8:	bfb8      	it	lt
 800a5ea:	4618      	movlt	r0, r3
 800a5ec:	e738      	b.n	800a460 <_printf_float+0xa0>
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	464a      	mov	r2, r9
 800a5f2:	4631      	mov	r1, r6
 800a5f4:	4628      	mov	r0, r5
 800a5f6:	47b8      	blx	r7
 800a5f8:	3001      	adds	r0, #1
 800a5fa:	f43f af2f 	beq.w	800a45c <_printf_float+0x9c>
 800a5fe:	f108 0801 	add.w	r8, r8, #1
 800a602:	e7e6      	b.n	800a5d2 <_printf_float+0x212>
 800a604:	9b07      	ldr	r3, [sp, #28]
 800a606:	2b00      	cmp	r3, #0
 800a608:	dc3c      	bgt.n	800a684 <_printf_float+0x2c4>
 800a60a:	4a1d      	ldr	r2, [pc, #116]	; (800a680 <_printf_float+0x2c0>)
 800a60c:	2301      	movs	r3, #1
 800a60e:	4631      	mov	r1, r6
 800a610:	4628      	mov	r0, r5
 800a612:	47b8      	blx	r7
 800a614:	3001      	adds	r0, #1
 800a616:	f43f af21 	beq.w	800a45c <_printf_float+0x9c>
 800a61a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a61e:	4313      	orrs	r3, r2
 800a620:	d102      	bne.n	800a628 <_printf_float+0x268>
 800a622:	6823      	ldr	r3, [r4, #0]
 800a624:	07d9      	lsls	r1, r3, #31
 800a626:	d5d8      	bpl.n	800a5da <_printf_float+0x21a>
 800a628:	4653      	mov	r3, sl
 800a62a:	465a      	mov	r2, fp
 800a62c:	4631      	mov	r1, r6
 800a62e:	4628      	mov	r0, r5
 800a630:	47b8      	blx	r7
 800a632:	3001      	adds	r0, #1
 800a634:	f43f af12 	beq.w	800a45c <_printf_float+0x9c>
 800a638:	f04f 0900 	mov.w	r9, #0
 800a63c:	f104 0a1a 	add.w	sl, r4, #26
 800a640:	9b07      	ldr	r3, [sp, #28]
 800a642:	425b      	negs	r3, r3
 800a644:	454b      	cmp	r3, r9
 800a646:	dc01      	bgt.n	800a64c <_printf_float+0x28c>
 800a648:	9b08      	ldr	r3, [sp, #32]
 800a64a:	e795      	b.n	800a578 <_printf_float+0x1b8>
 800a64c:	2301      	movs	r3, #1
 800a64e:	4652      	mov	r2, sl
 800a650:	4631      	mov	r1, r6
 800a652:	4628      	mov	r0, r5
 800a654:	47b8      	blx	r7
 800a656:	3001      	adds	r0, #1
 800a658:	f43f af00 	beq.w	800a45c <_printf_float+0x9c>
 800a65c:	f109 0901 	add.w	r9, r9, #1
 800a660:	e7ee      	b.n	800a640 <_printf_float+0x280>
 800a662:	bf00      	nop
 800a664:	f3af 8000 	nop.w
 800a668:	ffffffff 	.word	0xffffffff
 800a66c:	7fefffff 	.word	0x7fefffff
 800a670:	0800ec58 	.word	0x0800ec58
 800a674:	0800ec5c 	.word	0x0800ec5c
 800a678:	0800ec64 	.word	0x0800ec64
 800a67c:	0800ec60 	.word	0x0800ec60
 800a680:	0800ec68 	.word	0x0800ec68
 800a684:	9a08      	ldr	r2, [sp, #32]
 800a686:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a688:	429a      	cmp	r2, r3
 800a68a:	bfa8      	it	ge
 800a68c:	461a      	movge	r2, r3
 800a68e:	2a00      	cmp	r2, #0
 800a690:	4691      	mov	r9, r2
 800a692:	dc38      	bgt.n	800a706 <_printf_float+0x346>
 800a694:	2300      	movs	r3, #0
 800a696:	9305      	str	r3, [sp, #20]
 800a698:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a69c:	f104 021a 	add.w	r2, r4, #26
 800a6a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a6a2:	9905      	ldr	r1, [sp, #20]
 800a6a4:	9304      	str	r3, [sp, #16]
 800a6a6:	eba3 0309 	sub.w	r3, r3, r9
 800a6aa:	428b      	cmp	r3, r1
 800a6ac:	dc33      	bgt.n	800a716 <_printf_float+0x356>
 800a6ae:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	db3c      	blt.n	800a730 <_printf_float+0x370>
 800a6b6:	6823      	ldr	r3, [r4, #0]
 800a6b8:	07da      	lsls	r2, r3, #31
 800a6ba:	d439      	bmi.n	800a730 <_printf_float+0x370>
 800a6bc:	9b08      	ldr	r3, [sp, #32]
 800a6be:	9a04      	ldr	r2, [sp, #16]
 800a6c0:	9907      	ldr	r1, [sp, #28]
 800a6c2:	1a9a      	subs	r2, r3, r2
 800a6c4:	eba3 0901 	sub.w	r9, r3, r1
 800a6c8:	4591      	cmp	r9, r2
 800a6ca:	bfa8      	it	ge
 800a6cc:	4691      	movge	r9, r2
 800a6ce:	f1b9 0f00 	cmp.w	r9, #0
 800a6d2:	dc35      	bgt.n	800a740 <_printf_float+0x380>
 800a6d4:	f04f 0800 	mov.w	r8, #0
 800a6d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a6dc:	f104 0a1a 	add.w	sl, r4, #26
 800a6e0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a6e4:	1a9b      	subs	r3, r3, r2
 800a6e6:	eba3 0309 	sub.w	r3, r3, r9
 800a6ea:	4543      	cmp	r3, r8
 800a6ec:	f77f af75 	ble.w	800a5da <_printf_float+0x21a>
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	4652      	mov	r2, sl
 800a6f4:	4631      	mov	r1, r6
 800a6f6:	4628      	mov	r0, r5
 800a6f8:	47b8      	blx	r7
 800a6fa:	3001      	adds	r0, #1
 800a6fc:	f43f aeae 	beq.w	800a45c <_printf_float+0x9c>
 800a700:	f108 0801 	add.w	r8, r8, #1
 800a704:	e7ec      	b.n	800a6e0 <_printf_float+0x320>
 800a706:	4613      	mov	r3, r2
 800a708:	4631      	mov	r1, r6
 800a70a:	4642      	mov	r2, r8
 800a70c:	4628      	mov	r0, r5
 800a70e:	47b8      	blx	r7
 800a710:	3001      	adds	r0, #1
 800a712:	d1bf      	bne.n	800a694 <_printf_float+0x2d4>
 800a714:	e6a2      	b.n	800a45c <_printf_float+0x9c>
 800a716:	2301      	movs	r3, #1
 800a718:	4631      	mov	r1, r6
 800a71a:	4628      	mov	r0, r5
 800a71c:	9204      	str	r2, [sp, #16]
 800a71e:	47b8      	blx	r7
 800a720:	3001      	adds	r0, #1
 800a722:	f43f ae9b 	beq.w	800a45c <_printf_float+0x9c>
 800a726:	9b05      	ldr	r3, [sp, #20]
 800a728:	9a04      	ldr	r2, [sp, #16]
 800a72a:	3301      	adds	r3, #1
 800a72c:	9305      	str	r3, [sp, #20]
 800a72e:	e7b7      	b.n	800a6a0 <_printf_float+0x2e0>
 800a730:	4653      	mov	r3, sl
 800a732:	465a      	mov	r2, fp
 800a734:	4631      	mov	r1, r6
 800a736:	4628      	mov	r0, r5
 800a738:	47b8      	blx	r7
 800a73a:	3001      	adds	r0, #1
 800a73c:	d1be      	bne.n	800a6bc <_printf_float+0x2fc>
 800a73e:	e68d      	b.n	800a45c <_printf_float+0x9c>
 800a740:	9a04      	ldr	r2, [sp, #16]
 800a742:	464b      	mov	r3, r9
 800a744:	4442      	add	r2, r8
 800a746:	4631      	mov	r1, r6
 800a748:	4628      	mov	r0, r5
 800a74a:	47b8      	blx	r7
 800a74c:	3001      	adds	r0, #1
 800a74e:	d1c1      	bne.n	800a6d4 <_printf_float+0x314>
 800a750:	e684      	b.n	800a45c <_printf_float+0x9c>
 800a752:	9a08      	ldr	r2, [sp, #32]
 800a754:	2a01      	cmp	r2, #1
 800a756:	dc01      	bgt.n	800a75c <_printf_float+0x39c>
 800a758:	07db      	lsls	r3, r3, #31
 800a75a:	d537      	bpl.n	800a7cc <_printf_float+0x40c>
 800a75c:	2301      	movs	r3, #1
 800a75e:	4642      	mov	r2, r8
 800a760:	4631      	mov	r1, r6
 800a762:	4628      	mov	r0, r5
 800a764:	47b8      	blx	r7
 800a766:	3001      	adds	r0, #1
 800a768:	f43f ae78 	beq.w	800a45c <_printf_float+0x9c>
 800a76c:	4653      	mov	r3, sl
 800a76e:	465a      	mov	r2, fp
 800a770:	4631      	mov	r1, r6
 800a772:	4628      	mov	r0, r5
 800a774:	47b8      	blx	r7
 800a776:	3001      	adds	r0, #1
 800a778:	f43f ae70 	beq.w	800a45c <_printf_float+0x9c>
 800a77c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a780:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a788:	d01b      	beq.n	800a7c2 <_printf_float+0x402>
 800a78a:	9b08      	ldr	r3, [sp, #32]
 800a78c:	f108 0201 	add.w	r2, r8, #1
 800a790:	3b01      	subs	r3, #1
 800a792:	4631      	mov	r1, r6
 800a794:	4628      	mov	r0, r5
 800a796:	47b8      	blx	r7
 800a798:	3001      	adds	r0, #1
 800a79a:	d10e      	bne.n	800a7ba <_printf_float+0x3fa>
 800a79c:	e65e      	b.n	800a45c <_printf_float+0x9c>
 800a79e:	2301      	movs	r3, #1
 800a7a0:	464a      	mov	r2, r9
 800a7a2:	4631      	mov	r1, r6
 800a7a4:	4628      	mov	r0, r5
 800a7a6:	47b8      	blx	r7
 800a7a8:	3001      	adds	r0, #1
 800a7aa:	f43f ae57 	beq.w	800a45c <_printf_float+0x9c>
 800a7ae:	f108 0801 	add.w	r8, r8, #1
 800a7b2:	9b08      	ldr	r3, [sp, #32]
 800a7b4:	3b01      	subs	r3, #1
 800a7b6:	4543      	cmp	r3, r8
 800a7b8:	dcf1      	bgt.n	800a79e <_printf_float+0x3de>
 800a7ba:	9b04      	ldr	r3, [sp, #16]
 800a7bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a7c0:	e6db      	b.n	800a57a <_printf_float+0x1ba>
 800a7c2:	f04f 0800 	mov.w	r8, #0
 800a7c6:	f104 091a 	add.w	r9, r4, #26
 800a7ca:	e7f2      	b.n	800a7b2 <_printf_float+0x3f2>
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	4642      	mov	r2, r8
 800a7d0:	e7df      	b.n	800a792 <_printf_float+0x3d2>
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	464a      	mov	r2, r9
 800a7d6:	4631      	mov	r1, r6
 800a7d8:	4628      	mov	r0, r5
 800a7da:	47b8      	blx	r7
 800a7dc:	3001      	adds	r0, #1
 800a7de:	f43f ae3d 	beq.w	800a45c <_printf_float+0x9c>
 800a7e2:	f108 0801 	add.w	r8, r8, #1
 800a7e6:	68e3      	ldr	r3, [r4, #12]
 800a7e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a7ea:	1a5b      	subs	r3, r3, r1
 800a7ec:	4543      	cmp	r3, r8
 800a7ee:	dcf0      	bgt.n	800a7d2 <_printf_float+0x412>
 800a7f0:	e6f7      	b.n	800a5e2 <_printf_float+0x222>
 800a7f2:	f04f 0800 	mov.w	r8, #0
 800a7f6:	f104 0919 	add.w	r9, r4, #25
 800a7fa:	e7f4      	b.n	800a7e6 <_printf_float+0x426>

0800a7fc <_printf_common>:
 800a7fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a800:	4616      	mov	r6, r2
 800a802:	4699      	mov	r9, r3
 800a804:	688a      	ldr	r2, [r1, #8]
 800a806:	690b      	ldr	r3, [r1, #16]
 800a808:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a80c:	4293      	cmp	r3, r2
 800a80e:	bfb8      	it	lt
 800a810:	4613      	movlt	r3, r2
 800a812:	6033      	str	r3, [r6, #0]
 800a814:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a818:	4607      	mov	r7, r0
 800a81a:	460c      	mov	r4, r1
 800a81c:	b10a      	cbz	r2, 800a822 <_printf_common+0x26>
 800a81e:	3301      	adds	r3, #1
 800a820:	6033      	str	r3, [r6, #0]
 800a822:	6823      	ldr	r3, [r4, #0]
 800a824:	0699      	lsls	r1, r3, #26
 800a826:	bf42      	ittt	mi
 800a828:	6833      	ldrmi	r3, [r6, #0]
 800a82a:	3302      	addmi	r3, #2
 800a82c:	6033      	strmi	r3, [r6, #0]
 800a82e:	6825      	ldr	r5, [r4, #0]
 800a830:	f015 0506 	ands.w	r5, r5, #6
 800a834:	d106      	bne.n	800a844 <_printf_common+0x48>
 800a836:	f104 0a19 	add.w	sl, r4, #25
 800a83a:	68e3      	ldr	r3, [r4, #12]
 800a83c:	6832      	ldr	r2, [r6, #0]
 800a83e:	1a9b      	subs	r3, r3, r2
 800a840:	42ab      	cmp	r3, r5
 800a842:	dc26      	bgt.n	800a892 <_printf_common+0x96>
 800a844:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a848:	1e13      	subs	r3, r2, #0
 800a84a:	6822      	ldr	r2, [r4, #0]
 800a84c:	bf18      	it	ne
 800a84e:	2301      	movne	r3, #1
 800a850:	0692      	lsls	r2, r2, #26
 800a852:	d42b      	bmi.n	800a8ac <_printf_common+0xb0>
 800a854:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a858:	4649      	mov	r1, r9
 800a85a:	4638      	mov	r0, r7
 800a85c:	47c0      	blx	r8
 800a85e:	3001      	adds	r0, #1
 800a860:	d01e      	beq.n	800a8a0 <_printf_common+0xa4>
 800a862:	6823      	ldr	r3, [r4, #0]
 800a864:	68e5      	ldr	r5, [r4, #12]
 800a866:	6832      	ldr	r2, [r6, #0]
 800a868:	f003 0306 	and.w	r3, r3, #6
 800a86c:	2b04      	cmp	r3, #4
 800a86e:	bf08      	it	eq
 800a870:	1aad      	subeq	r5, r5, r2
 800a872:	68a3      	ldr	r3, [r4, #8]
 800a874:	6922      	ldr	r2, [r4, #16]
 800a876:	bf0c      	ite	eq
 800a878:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a87c:	2500      	movne	r5, #0
 800a87e:	4293      	cmp	r3, r2
 800a880:	bfc4      	itt	gt
 800a882:	1a9b      	subgt	r3, r3, r2
 800a884:	18ed      	addgt	r5, r5, r3
 800a886:	2600      	movs	r6, #0
 800a888:	341a      	adds	r4, #26
 800a88a:	42b5      	cmp	r5, r6
 800a88c:	d11a      	bne.n	800a8c4 <_printf_common+0xc8>
 800a88e:	2000      	movs	r0, #0
 800a890:	e008      	b.n	800a8a4 <_printf_common+0xa8>
 800a892:	2301      	movs	r3, #1
 800a894:	4652      	mov	r2, sl
 800a896:	4649      	mov	r1, r9
 800a898:	4638      	mov	r0, r7
 800a89a:	47c0      	blx	r8
 800a89c:	3001      	adds	r0, #1
 800a89e:	d103      	bne.n	800a8a8 <_printf_common+0xac>
 800a8a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8a8:	3501      	adds	r5, #1
 800a8aa:	e7c6      	b.n	800a83a <_printf_common+0x3e>
 800a8ac:	18e1      	adds	r1, r4, r3
 800a8ae:	1c5a      	adds	r2, r3, #1
 800a8b0:	2030      	movs	r0, #48	; 0x30
 800a8b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a8b6:	4422      	add	r2, r4
 800a8b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a8bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a8c0:	3302      	adds	r3, #2
 800a8c2:	e7c7      	b.n	800a854 <_printf_common+0x58>
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	4622      	mov	r2, r4
 800a8c8:	4649      	mov	r1, r9
 800a8ca:	4638      	mov	r0, r7
 800a8cc:	47c0      	blx	r8
 800a8ce:	3001      	adds	r0, #1
 800a8d0:	d0e6      	beq.n	800a8a0 <_printf_common+0xa4>
 800a8d2:	3601      	adds	r6, #1
 800a8d4:	e7d9      	b.n	800a88a <_printf_common+0x8e>
	...

0800a8d8 <_printf_i>:
 800a8d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8dc:	7e0f      	ldrb	r7, [r1, #24]
 800a8de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a8e0:	2f78      	cmp	r7, #120	; 0x78
 800a8e2:	4691      	mov	r9, r2
 800a8e4:	4680      	mov	r8, r0
 800a8e6:	460c      	mov	r4, r1
 800a8e8:	469a      	mov	sl, r3
 800a8ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a8ee:	d807      	bhi.n	800a900 <_printf_i+0x28>
 800a8f0:	2f62      	cmp	r7, #98	; 0x62
 800a8f2:	d80a      	bhi.n	800a90a <_printf_i+0x32>
 800a8f4:	2f00      	cmp	r7, #0
 800a8f6:	f000 80d8 	beq.w	800aaaa <_printf_i+0x1d2>
 800a8fa:	2f58      	cmp	r7, #88	; 0x58
 800a8fc:	f000 80a3 	beq.w	800aa46 <_printf_i+0x16e>
 800a900:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a904:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a908:	e03a      	b.n	800a980 <_printf_i+0xa8>
 800a90a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a90e:	2b15      	cmp	r3, #21
 800a910:	d8f6      	bhi.n	800a900 <_printf_i+0x28>
 800a912:	a101      	add	r1, pc, #4	; (adr r1, 800a918 <_printf_i+0x40>)
 800a914:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a918:	0800a971 	.word	0x0800a971
 800a91c:	0800a985 	.word	0x0800a985
 800a920:	0800a901 	.word	0x0800a901
 800a924:	0800a901 	.word	0x0800a901
 800a928:	0800a901 	.word	0x0800a901
 800a92c:	0800a901 	.word	0x0800a901
 800a930:	0800a985 	.word	0x0800a985
 800a934:	0800a901 	.word	0x0800a901
 800a938:	0800a901 	.word	0x0800a901
 800a93c:	0800a901 	.word	0x0800a901
 800a940:	0800a901 	.word	0x0800a901
 800a944:	0800aa91 	.word	0x0800aa91
 800a948:	0800a9b5 	.word	0x0800a9b5
 800a94c:	0800aa73 	.word	0x0800aa73
 800a950:	0800a901 	.word	0x0800a901
 800a954:	0800a901 	.word	0x0800a901
 800a958:	0800aab3 	.word	0x0800aab3
 800a95c:	0800a901 	.word	0x0800a901
 800a960:	0800a9b5 	.word	0x0800a9b5
 800a964:	0800a901 	.word	0x0800a901
 800a968:	0800a901 	.word	0x0800a901
 800a96c:	0800aa7b 	.word	0x0800aa7b
 800a970:	682b      	ldr	r3, [r5, #0]
 800a972:	1d1a      	adds	r2, r3, #4
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	602a      	str	r2, [r5, #0]
 800a978:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a97c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a980:	2301      	movs	r3, #1
 800a982:	e0a3      	b.n	800aacc <_printf_i+0x1f4>
 800a984:	6820      	ldr	r0, [r4, #0]
 800a986:	6829      	ldr	r1, [r5, #0]
 800a988:	0606      	lsls	r6, r0, #24
 800a98a:	f101 0304 	add.w	r3, r1, #4
 800a98e:	d50a      	bpl.n	800a9a6 <_printf_i+0xce>
 800a990:	680e      	ldr	r6, [r1, #0]
 800a992:	602b      	str	r3, [r5, #0]
 800a994:	2e00      	cmp	r6, #0
 800a996:	da03      	bge.n	800a9a0 <_printf_i+0xc8>
 800a998:	232d      	movs	r3, #45	; 0x2d
 800a99a:	4276      	negs	r6, r6
 800a99c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9a0:	485e      	ldr	r0, [pc, #376]	; (800ab1c <_printf_i+0x244>)
 800a9a2:	230a      	movs	r3, #10
 800a9a4:	e019      	b.n	800a9da <_printf_i+0x102>
 800a9a6:	680e      	ldr	r6, [r1, #0]
 800a9a8:	602b      	str	r3, [r5, #0]
 800a9aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a9ae:	bf18      	it	ne
 800a9b0:	b236      	sxthne	r6, r6
 800a9b2:	e7ef      	b.n	800a994 <_printf_i+0xbc>
 800a9b4:	682b      	ldr	r3, [r5, #0]
 800a9b6:	6820      	ldr	r0, [r4, #0]
 800a9b8:	1d19      	adds	r1, r3, #4
 800a9ba:	6029      	str	r1, [r5, #0]
 800a9bc:	0601      	lsls	r1, r0, #24
 800a9be:	d501      	bpl.n	800a9c4 <_printf_i+0xec>
 800a9c0:	681e      	ldr	r6, [r3, #0]
 800a9c2:	e002      	b.n	800a9ca <_printf_i+0xf2>
 800a9c4:	0646      	lsls	r6, r0, #25
 800a9c6:	d5fb      	bpl.n	800a9c0 <_printf_i+0xe8>
 800a9c8:	881e      	ldrh	r6, [r3, #0]
 800a9ca:	4854      	ldr	r0, [pc, #336]	; (800ab1c <_printf_i+0x244>)
 800a9cc:	2f6f      	cmp	r7, #111	; 0x6f
 800a9ce:	bf0c      	ite	eq
 800a9d0:	2308      	moveq	r3, #8
 800a9d2:	230a      	movne	r3, #10
 800a9d4:	2100      	movs	r1, #0
 800a9d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a9da:	6865      	ldr	r5, [r4, #4]
 800a9dc:	60a5      	str	r5, [r4, #8]
 800a9de:	2d00      	cmp	r5, #0
 800a9e0:	bfa2      	ittt	ge
 800a9e2:	6821      	ldrge	r1, [r4, #0]
 800a9e4:	f021 0104 	bicge.w	r1, r1, #4
 800a9e8:	6021      	strge	r1, [r4, #0]
 800a9ea:	b90e      	cbnz	r6, 800a9f0 <_printf_i+0x118>
 800a9ec:	2d00      	cmp	r5, #0
 800a9ee:	d04d      	beq.n	800aa8c <_printf_i+0x1b4>
 800a9f0:	4615      	mov	r5, r2
 800a9f2:	fbb6 f1f3 	udiv	r1, r6, r3
 800a9f6:	fb03 6711 	mls	r7, r3, r1, r6
 800a9fa:	5dc7      	ldrb	r7, [r0, r7]
 800a9fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aa00:	4637      	mov	r7, r6
 800aa02:	42bb      	cmp	r3, r7
 800aa04:	460e      	mov	r6, r1
 800aa06:	d9f4      	bls.n	800a9f2 <_printf_i+0x11a>
 800aa08:	2b08      	cmp	r3, #8
 800aa0a:	d10b      	bne.n	800aa24 <_printf_i+0x14c>
 800aa0c:	6823      	ldr	r3, [r4, #0]
 800aa0e:	07de      	lsls	r6, r3, #31
 800aa10:	d508      	bpl.n	800aa24 <_printf_i+0x14c>
 800aa12:	6923      	ldr	r3, [r4, #16]
 800aa14:	6861      	ldr	r1, [r4, #4]
 800aa16:	4299      	cmp	r1, r3
 800aa18:	bfde      	ittt	le
 800aa1a:	2330      	movle	r3, #48	; 0x30
 800aa1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aa20:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aa24:	1b52      	subs	r2, r2, r5
 800aa26:	6122      	str	r2, [r4, #16]
 800aa28:	f8cd a000 	str.w	sl, [sp]
 800aa2c:	464b      	mov	r3, r9
 800aa2e:	aa03      	add	r2, sp, #12
 800aa30:	4621      	mov	r1, r4
 800aa32:	4640      	mov	r0, r8
 800aa34:	f7ff fee2 	bl	800a7fc <_printf_common>
 800aa38:	3001      	adds	r0, #1
 800aa3a:	d14c      	bne.n	800aad6 <_printf_i+0x1fe>
 800aa3c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa40:	b004      	add	sp, #16
 800aa42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa46:	4835      	ldr	r0, [pc, #212]	; (800ab1c <_printf_i+0x244>)
 800aa48:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800aa4c:	6829      	ldr	r1, [r5, #0]
 800aa4e:	6823      	ldr	r3, [r4, #0]
 800aa50:	f851 6b04 	ldr.w	r6, [r1], #4
 800aa54:	6029      	str	r1, [r5, #0]
 800aa56:	061d      	lsls	r5, r3, #24
 800aa58:	d514      	bpl.n	800aa84 <_printf_i+0x1ac>
 800aa5a:	07df      	lsls	r7, r3, #31
 800aa5c:	bf44      	itt	mi
 800aa5e:	f043 0320 	orrmi.w	r3, r3, #32
 800aa62:	6023      	strmi	r3, [r4, #0]
 800aa64:	b91e      	cbnz	r6, 800aa6e <_printf_i+0x196>
 800aa66:	6823      	ldr	r3, [r4, #0]
 800aa68:	f023 0320 	bic.w	r3, r3, #32
 800aa6c:	6023      	str	r3, [r4, #0]
 800aa6e:	2310      	movs	r3, #16
 800aa70:	e7b0      	b.n	800a9d4 <_printf_i+0xfc>
 800aa72:	6823      	ldr	r3, [r4, #0]
 800aa74:	f043 0320 	orr.w	r3, r3, #32
 800aa78:	6023      	str	r3, [r4, #0]
 800aa7a:	2378      	movs	r3, #120	; 0x78
 800aa7c:	4828      	ldr	r0, [pc, #160]	; (800ab20 <_printf_i+0x248>)
 800aa7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aa82:	e7e3      	b.n	800aa4c <_printf_i+0x174>
 800aa84:	0659      	lsls	r1, r3, #25
 800aa86:	bf48      	it	mi
 800aa88:	b2b6      	uxthmi	r6, r6
 800aa8a:	e7e6      	b.n	800aa5a <_printf_i+0x182>
 800aa8c:	4615      	mov	r5, r2
 800aa8e:	e7bb      	b.n	800aa08 <_printf_i+0x130>
 800aa90:	682b      	ldr	r3, [r5, #0]
 800aa92:	6826      	ldr	r6, [r4, #0]
 800aa94:	6961      	ldr	r1, [r4, #20]
 800aa96:	1d18      	adds	r0, r3, #4
 800aa98:	6028      	str	r0, [r5, #0]
 800aa9a:	0635      	lsls	r5, r6, #24
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	d501      	bpl.n	800aaa4 <_printf_i+0x1cc>
 800aaa0:	6019      	str	r1, [r3, #0]
 800aaa2:	e002      	b.n	800aaaa <_printf_i+0x1d2>
 800aaa4:	0670      	lsls	r0, r6, #25
 800aaa6:	d5fb      	bpl.n	800aaa0 <_printf_i+0x1c8>
 800aaa8:	8019      	strh	r1, [r3, #0]
 800aaaa:	2300      	movs	r3, #0
 800aaac:	6123      	str	r3, [r4, #16]
 800aaae:	4615      	mov	r5, r2
 800aab0:	e7ba      	b.n	800aa28 <_printf_i+0x150>
 800aab2:	682b      	ldr	r3, [r5, #0]
 800aab4:	1d1a      	adds	r2, r3, #4
 800aab6:	602a      	str	r2, [r5, #0]
 800aab8:	681d      	ldr	r5, [r3, #0]
 800aaba:	6862      	ldr	r2, [r4, #4]
 800aabc:	2100      	movs	r1, #0
 800aabe:	4628      	mov	r0, r5
 800aac0:	f7f5 fbc6 	bl	8000250 <memchr>
 800aac4:	b108      	cbz	r0, 800aaca <_printf_i+0x1f2>
 800aac6:	1b40      	subs	r0, r0, r5
 800aac8:	6060      	str	r0, [r4, #4]
 800aaca:	6863      	ldr	r3, [r4, #4]
 800aacc:	6123      	str	r3, [r4, #16]
 800aace:	2300      	movs	r3, #0
 800aad0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aad4:	e7a8      	b.n	800aa28 <_printf_i+0x150>
 800aad6:	6923      	ldr	r3, [r4, #16]
 800aad8:	462a      	mov	r2, r5
 800aada:	4649      	mov	r1, r9
 800aadc:	4640      	mov	r0, r8
 800aade:	47d0      	blx	sl
 800aae0:	3001      	adds	r0, #1
 800aae2:	d0ab      	beq.n	800aa3c <_printf_i+0x164>
 800aae4:	6823      	ldr	r3, [r4, #0]
 800aae6:	079b      	lsls	r3, r3, #30
 800aae8:	d413      	bmi.n	800ab12 <_printf_i+0x23a>
 800aaea:	68e0      	ldr	r0, [r4, #12]
 800aaec:	9b03      	ldr	r3, [sp, #12]
 800aaee:	4298      	cmp	r0, r3
 800aaf0:	bfb8      	it	lt
 800aaf2:	4618      	movlt	r0, r3
 800aaf4:	e7a4      	b.n	800aa40 <_printf_i+0x168>
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	4632      	mov	r2, r6
 800aafa:	4649      	mov	r1, r9
 800aafc:	4640      	mov	r0, r8
 800aafe:	47d0      	blx	sl
 800ab00:	3001      	adds	r0, #1
 800ab02:	d09b      	beq.n	800aa3c <_printf_i+0x164>
 800ab04:	3501      	adds	r5, #1
 800ab06:	68e3      	ldr	r3, [r4, #12]
 800ab08:	9903      	ldr	r1, [sp, #12]
 800ab0a:	1a5b      	subs	r3, r3, r1
 800ab0c:	42ab      	cmp	r3, r5
 800ab0e:	dcf2      	bgt.n	800aaf6 <_printf_i+0x21e>
 800ab10:	e7eb      	b.n	800aaea <_printf_i+0x212>
 800ab12:	2500      	movs	r5, #0
 800ab14:	f104 0619 	add.w	r6, r4, #25
 800ab18:	e7f5      	b.n	800ab06 <_printf_i+0x22e>
 800ab1a:	bf00      	nop
 800ab1c:	0800ec6a 	.word	0x0800ec6a
 800ab20:	0800ec7b 	.word	0x0800ec7b

0800ab24 <_scanf_float>:
 800ab24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab28:	b087      	sub	sp, #28
 800ab2a:	4617      	mov	r7, r2
 800ab2c:	9303      	str	r3, [sp, #12]
 800ab2e:	688b      	ldr	r3, [r1, #8]
 800ab30:	1e5a      	subs	r2, r3, #1
 800ab32:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ab36:	bf83      	ittte	hi
 800ab38:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ab3c:	195b      	addhi	r3, r3, r5
 800ab3e:	9302      	strhi	r3, [sp, #8]
 800ab40:	2300      	movls	r3, #0
 800ab42:	bf86      	itte	hi
 800ab44:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ab48:	608b      	strhi	r3, [r1, #8]
 800ab4a:	9302      	strls	r3, [sp, #8]
 800ab4c:	680b      	ldr	r3, [r1, #0]
 800ab4e:	468b      	mov	fp, r1
 800ab50:	2500      	movs	r5, #0
 800ab52:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ab56:	f84b 3b1c 	str.w	r3, [fp], #28
 800ab5a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ab5e:	4680      	mov	r8, r0
 800ab60:	460c      	mov	r4, r1
 800ab62:	465e      	mov	r6, fp
 800ab64:	46aa      	mov	sl, r5
 800ab66:	46a9      	mov	r9, r5
 800ab68:	9501      	str	r5, [sp, #4]
 800ab6a:	68a2      	ldr	r2, [r4, #8]
 800ab6c:	b152      	cbz	r2, 800ab84 <_scanf_float+0x60>
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	2b4e      	cmp	r3, #78	; 0x4e
 800ab74:	d864      	bhi.n	800ac40 <_scanf_float+0x11c>
 800ab76:	2b40      	cmp	r3, #64	; 0x40
 800ab78:	d83c      	bhi.n	800abf4 <_scanf_float+0xd0>
 800ab7a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800ab7e:	b2c8      	uxtb	r0, r1
 800ab80:	280e      	cmp	r0, #14
 800ab82:	d93a      	bls.n	800abfa <_scanf_float+0xd6>
 800ab84:	f1b9 0f00 	cmp.w	r9, #0
 800ab88:	d003      	beq.n	800ab92 <_scanf_float+0x6e>
 800ab8a:	6823      	ldr	r3, [r4, #0]
 800ab8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab90:	6023      	str	r3, [r4, #0]
 800ab92:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab96:	f1ba 0f01 	cmp.w	sl, #1
 800ab9a:	f200 8113 	bhi.w	800adc4 <_scanf_float+0x2a0>
 800ab9e:	455e      	cmp	r6, fp
 800aba0:	f200 8105 	bhi.w	800adae <_scanf_float+0x28a>
 800aba4:	2501      	movs	r5, #1
 800aba6:	4628      	mov	r0, r5
 800aba8:	b007      	add	sp, #28
 800abaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abae:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800abb2:	2a0d      	cmp	r2, #13
 800abb4:	d8e6      	bhi.n	800ab84 <_scanf_float+0x60>
 800abb6:	a101      	add	r1, pc, #4	; (adr r1, 800abbc <_scanf_float+0x98>)
 800abb8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800abbc:	0800acfb 	.word	0x0800acfb
 800abc0:	0800ab85 	.word	0x0800ab85
 800abc4:	0800ab85 	.word	0x0800ab85
 800abc8:	0800ab85 	.word	0x0800ab85
 800abcc:	0800ad5b 	.word	0x0800ad5b
 800abd0:	0800ad33 	.word	0x0800ad33
 800abd4:	0800ab85 	.word	0x0800ab85
 800abd8:	0800ab85 	.word	0x0800ab85
 800abdc:	0800ad09 	.word	0x0800ad09
 800abe0:	0800ab85 	.word	0x0800ab85
 800abe4:	0800ab85 	.word	0x0800ab85
 800abe8:	0800ab85 	.word	0x0800ab85
 800abec:	0800ab85 	.word	0x0800ab85
 800abf0:	0800acc1 	.word	0x0800acc1
 800abf4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800abf8:	e7db      	b.n	800abb2 <_scanf_float+0x8e>
 800abfa:	290e      	cmp	r1, #14
 800abfc:	d8c2      	bhi.n	800ab84 <_scanf_float+0x60>
 800abfe:	a001      	add	r0, pc, #4	; (adr r0, 800ac04 <_scanf_float+0xe0>)
 800ac00:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ac04:	0800acb3 	.word	0x0800acb3
 800ac08:	0800ab85 	.word	0x0800ab85
 800ac0c:	0800acb3 	.word	0x0800acb3
 800ac10:	0800ad47 	.word	0x0800ad47
 800ac14:	0800ab85 	.word	0x0800ab85
 800ac18:	0800ac61 	.word	0x0800ac61
 800ac1c:	0800ac9d 	.word	0x0800ac9d
 800ac20:	0800ac9d 	.word	0x0800ac9d
 800ac24:	0800ac9d 	.word	0x0800ac9d
 800ac28:	0800ac9d 	.word	0x0800ac9d
 800ac2c:	0800ac9d 	.word	0x0800ac9d
 800ac30:	0800ac9d 	.word	0x0800ac9d
 800ac34:	0800ac9d 	.word	0x0800ac9d
 800ac38:	0800ac9d 	.word	0x0800ac9d
 800ac3c:	0800ac9d 	.word	0x0800ac9d
 800ac40:	2b6e      	cmp	r3, #110	; 0x6e
 800ac42:	d809      	bhi.n	800ac58 <_scanf_float+0x134>
 800ac44:	2b60      	cmp	r3, #96	; 0x60
 800ac46:	d8b2      	bhi.n	800abae <_scanf_float+0x8a>
 800ac48:	2b54      	cmp	r3, #84	; 0x54
 800ac4a:	d077      	beq.n	800ad3c <_scanf_float+0x218>
 800ac4c:	2b59      	cmp	r3, #89	; 0x59
 800ac4e:	d199      	bne.n	800ab84 <_scanf_float+0x60>
 800ac50:	2d07      	cmp	r5, #7
 800ac52:	d197      	bne.n	800ab84 <_scanf_float+0x60>
 800ac54:	2508      	movs	r5, #8
 800ac56:	e029      	b.n	800acac <_scanf_float+0x188>
 800ac58:	2b74      	cmp	r3, #116	; 0x74
 800ac5a:	d06f      	beq.n	800ad3c <_scanf_float+0x218>
 800ac5c:	2b79      	cmp	r3, #121	; 0x79
 800ac5e:	e7f6      	b.n	800ac4e <_scanf_float+0x12a>
 800ac60:	6821      	ldr	r1, [r4, #0]
 800ac62:	05c8      	lsls	r0, r1, #23
 800ac64:	d51a      	bpl.n	800ac9c <_scanf_float+0x178>
 800ac66:	9b02      	ldr	r3, [sp, #8]
 800ac68:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ac6c:	6021      	str	r1, [r4, #0]
 800ac6e:	f109 0901 	add.w	r9, r9, #1
 800ac72:	b11b      	cbz	r3, 800ac7c <_scanf_float+0x158>
 800ac74:	3b01      	subs	r3, #1
 800ac76:	3201      	adds	r2, #1
 800ac78:	9302      	str	r3, [sp, #8]
 800ac7a:	60a2      	str	r2, [r4, #8]
 800ac7c:	68a3      	ldr	r3, [r4, #8]
 800ac7e:	3b01      	subs	r3, #1
 800ac80:	60a3      	str	r3, [r4, #8]
 800ac82:	6923      	ldr	r3, [r4, #16]
 800ac84:	3301      	adds	r3, #1
 800ac86:	6123      	str	r3, [r4, #16]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	3b01      	subs	r3, #1
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	607b      	str	r3, [r7, #4]
 800ac90:	f340 8084 	ble.w	800ad9c <_scanf_float+0x278>
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	3301      	adds	r3, #1
 800ac98:	603b      	str	r3, [r7, #0]
 800ac9a:	e766      	b.n	800ab6a <_scanf_float+0x46>
 800ac9c:	eb1a 0f05 	cmn.w	sl, r5
 800aca0:	f47f af70 	bne.w	800ab84 <_scanf_float+0x60>
 800aca4:	6822      	ldr	r2, [r4, #0]
 800aca6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800acaa:	6022      	str	r2, [r4, #0]
 800acac:	f806 3b01 	strb.w	r3, [r6], #1
 800acb0:	e7e4      	b.n	800ac7c <_scanf_float+0x158>
 800acb2:	6822      	ldr	r2, [r4, #0]
 800acb4:	0610      	lsls	r0, r2, #24
 800acb6:	f57f af65 	bpl.w	800ab84 <_scanf_float+0x60>
 800acba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800acbe:	e7f4      	b.n	800acaa <_scanf_float+0x186>
 800acc0:	f1ba 0f00 	cmp.w	sl, #0
 800acc4:	d10e      	bne.n	800ace4 <_scanf_float+0x1c0>
 800acc6:	f1b9 0f00 	cmp.w	r9, #0
 800acca:	d10e      	bne.n	800acea <_scanf_float+0x1c6>
 800accc:	6822      	ldr	r2, [r4, #0]
 800acce:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800acd2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800acd6:	d108      	bne.n	800acea <_scanf_float+0x1c6>
 800acd8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800acdc:	6022      	str	r2, [r4, #0]
 800acde:	f04f 0a01 	mov.w	sl, #1
 800ace2:	e7e3      	b.n	800acac <_scanf_float+0x188>
 800ace4:	f1ba 0f02 	cmp.w	sl, #2
 800ace8:	d055      	beq.n	800ad96 <_scanf_float+0x272>
 800acea:	2d01      	cmp	r5, #1
 800acec:	d002      	beq.n	800acf4 <_scanf_float+0x1d0>
 800acee:	2d04      	cmp	r5, #4
 800acf0:	f47f af48 	bne.w	800ab84 <_scanf_float+0x60>
 800acf4:	3501      	adds	r5, #1
 800acf6:	b2ed      	uxtb	r5, r5
 800acf8:	e7d8      	b.n	800acac <_scanf_float+0x188>
 800acfa:	f1ba 0f01 	cmp.w	sl, #1
 800acfe:	f47f af41 	bne.w	800ab84 <_scanf_float+0x60>
 800ad02:	f04f 0a02 	mov.w	sl, #2
 800ad06:	e7d1      	b.n	800acac <_scanf_float+0x188>
 800ad08:	b97d      	cbnz	r5, 800ad2a <_scanf_float+0x206>
 800ad0a:	f1b9 0f00 	cmp.w	r9, #0
 800ad0e:	f47f af3c 	bne.w	800ab8a <_scanf_float+0x66>
 800ad12:	6822      	ldr	r2, [r4, #0]
 800ad14:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ad18:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ad1c:	f47f af39 	bne.w	800ab92 <_scanf_float+0x6e>
 800ad20:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ad24:	6022      	str	r2, [r4, #0]
 800ad26:	2501      	movs	r5, #1
 800ad28:	e7c0      	b.n	800acac <_scanf_float+0x188>
 800ad2a:	2d03      	cmp	r5, #3
 800ad2c:	d0e2      	beq.n	800acf4 <_scanf_float+0x1d0>
 800ad2e:	2d05      	cmp	r5, #5
 800ad30:	e7de      	b.n	800acf0 <_scanf_float+0x1cc>
 800ad32:	2d02      	cmp	r5, #2
 800ad34:	f47f af26 	bne.w	800ab84 <_scanf_float+0x60>
 800ad38:	2503      	movs	r5, #3
 800ad3a:	e7b7      	b.n	800acac <_scanf_float+0x188>
 800ad3c:	2d06      	cmp	r5, #6
 800ad3e:	f47f af21 	bne.w	800ab84 <_scanf_float+0x60>
 800ad42:	2507      	movs	r5, #7
 800ad44:	e7b2      	b.n	800acac <_scanf_float+0x188>
 800ad46:	6822      	ldr	r2, [r4, #0]
 800ad48:	0591      	lsls	r1, r2, #22
 800ad4a:	f57f af1b 	bpl.w	800ab84 <_scanf_float+0x60>
 800ad4e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ad52:	6022      	str	r2, [r4, #0]
 800ad54:	f8cd 9004 	str.w	r9, [sp, #4]
 800ad58:	e7a8      	b.n	800acac <_scanf_float+0x188>
 800ad5a:	6822      	ldr	r2, [r4, #0]
 800ad5c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800ad60:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ad64:	d006      	beq.n	800ad74 <_scanf_float+0x250>
 800ad66:	0550      	lsls	r0, r2, #21
 800ad68:	f57f af0c 	bpl.w	800ab84 <_scanf_float+0x60>
 800ad6c:	f1b9 0f00 	cmp.w	r9, #0
 800ad70:	f43f af0f 	beq.w	800ab92 <_scanf_float+0x6e>
 800ad74:	0591      	lsls	r1, r2, #22
 800ad76:	bf58      	it	pl
 800ad78:	9901      	ldrpl	r1, [sp, #4]
 800ad7a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ad7e:	bf58      	it	pl
 800ad80:	eba9 0101 	subpl.w	r1, r9, r1
 800ad84:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800ad88:	bf58      	it	pl
 800ad8a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ad8e:	6022      	str	r2, [r4, #0]
 800ad90:	f04f 0900 	mov.w	r9, #0
 800ad94:	e78a      	b.n	800acac <_scanf_float+0x188>
 800ad96:	f04f 0a03 	mov.w	sl, #3
 800ad9a:	e787      	b.n	800acac <_scanf_float+0x188>
 800ad9c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ada0:	4639      	mov	r1, r7
 800ada2:	4640      	mov	r0, r8
 800ada4:	4798      	blx	r3
 800ada6:	2800      	cmp	r0, #0
 800ada8:	f43f aedf 	beq.w	800ab6a <_scanf_float+0x46>
 800adac:	e6ea      	b.n	800ab84 <_scanf_float+0x60>
 800adae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800adb2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800adb6:	463a      	mov	r2, r7
 800adb8:	4640      	mov	r0, r8
 800adba:	4798      	blx	r3
 800adbc:	6923      	ldr	r3, [r4, #16]
 800adbe:	3b01      	subs	r3, #1
 800adc0:	6123      	str	r3, [r4, #16]
 800adc2:	e6ec      	b.n	800ab9e <_scanf_float+0x7a>
 800adc4:	1e6b      	subs	r3, r5, #1
 800adc6:	2b06      	cmp	r3, #6
 800adc8:	d825      	bhi.n	800ae16 <_scanf_float+0x2f2>
 800adca:	2d02      	cmp	r5, #2
 800adcc:	d836      	bhi.n	800ae3c <_scanf_float+0x318>
 800adce:	455e      	cmp	r6, fp
 800add0:	f67f aee8 	bls.w	800aba4 <_scanf_float+0x80>
 800add4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800add8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800addc:	463a      	mov	r2, r7
 800adde:	4640      	mov	r0, r8
 800ade0:	4798      	blx	r3
 800ade2:	6923      	ldr	r3, [r4, #16]
 800ade4:	3b01      	subs	r3, #1
 800ade6:	6123      	str	r3, [r4, #16]
 800ade8:	e7f1      	b.n	800adce <_scanf_float+0x2aa>
 800adea:	9802      	ldr	r0, [sp, #8]
 800adec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800adf0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800adf4:	9002      	str	r0, [sp, #8]
 800adf6:	463a      	mov	r2, r7
 800adf8:	4640      	mov	r0, r8
 800adfa:	4798      	blx	r3
 800adfc:	6923      	ldr	r3, [r4, #16]
 800adfe:	3b01      	subs	r3, #1
 800ae00:	6123      	str	r3, [r4, #16]
 800ae02:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ae06:	fa5f fa8a 	uxtb.w	sl, sl
 800ae0a:	f1ba 0f02 	cmp.w	sl, #2
 800ae0e:	d1ec      	bne.n	800adea <_scanf_float+0x2c6>
 800ae10:	3d03      	subs	r5, #3
 800ae12:	b2ed      	uxtb	r5, r5
 800ae14:	1b76      	subs	r6, r6, r5
 800ae16:	6823      	ldr	r3, [r4, #0]
 800ae18:	05da      	lsls	r2, r3, #23
 800ae1a:	d52f      	bpl.n	800ae7c <_scanf_float+0x358>
 800ae1c:	055b      	lsls	r3, r3, #21
 800ae1e:	d510      	bpl.n	800ae42 <_scanf_float+0x31e>
 800ae20:	455e      	cmp	r6, fp
 800ae22:	f67f aebf 	bls.w	800aba4 <_scanf_float+0x80>
 800ae26:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ae2a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ae2e:	463a      	mov	r2, r7
 800ae30:	4640      	mov	r0, r8
 800ae32:	4798      	blx	r3
 800ae34:	6923      	ldr	r3, [r4, #16]
 800ae36:	3b01      	subs	r3, #1
 800ae38:	6123      	str	r3, [r4, #16]
 800ae3a:	e7f1      	b.n	800ae20 <_scanf_float+0x2fc>
 800ae3c:	46aa      	mov	sl, r5
 800ae3e:	9602      	str	r6, [sp, #8]
 800ae40:	e7df      	b.n	800ae02 <_scanf_float+0x2de>
 800ae42:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ae46:	6923      	ldr	r3, [r4, #16]
 800ae48:	2965      	cmp	r1, #101	; 0x65
 800ae4a:	f103 33ff 	add.w	r3, r3, #4294967295
 800ae4e:	f106 35ff 	add.w	r5, r6, #4294967295
 800ae52:	6123      	str	r3, [r4, #16]
 800ae54:	d00c      	beq.n	800ae70 <_scanf_float+0x34c>
 800ae56:	2945      	cmp	r1, #69	; 0x45
 800ae58:	d00a      	beq.n	800ae70 <_scanf_float+0x34c>
 800ae5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ae5e:	463a      	mov	r2, r7
 800ae60:	4640      	mov	r0, r8
 800ae62:	4798      	blx	r3
 800ae64:	6923      	ldr	r3, [r4, #16]
 800ae66:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ae6a:	3b01      	subs	r3, #1
 800ae6c:	1eb5      	subs	r5, r6, #2
 800ae6e:	6123      	str	r3, [r4, #16]
 800ae70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ae74:	463a      	mov	r2, r7
 800ae76:	4640      	mov	r0, r8
 800ae78:	4798      	blx	r3
 800ae7a:	462e      	mov	r6, r5
 800ae7c:	6825      	ldr	r5, [r4, #0]
 800ae7e:	f015 0510 	ands.w	r5, r5, #16
 800ae82:	d14e      	bne.n	800af22 <_scanf_float+0x3fe>
 800ae84:	7035      	strb	r5, [r6, #0]
 800ae86:	6823      	ldr	r3, [r4, #0]
 800ae88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ae8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae90:	d119      	bne.n	800aec6 <_scanf_float+0x3a2>
 800ae92:	9b01      	ldr	r3, [sp, #4]
 800ae94:	454b      	cmp	r3, r9
 800ae96:	eba3 0209 	sub.w	r2, r3, r9
 800ae9a:	d121      	bne.n	800aee0 <_scanf_float+0x3bc>
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	4659      	mov	r1, fp
 800aea0:	4640      	mov	r0, r8
 800aea2:	f000 fecb 	bl	800bc3c <_strtod_r>
 800aea6:	6822      	ldr	r2, [r4, #0]
 800aea8:	9b03      	ldr	r3, [sp, #12]
 800aeaa:	f012 0f02 	tst.w	r2, #2
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	d021      	beq.n	800aef6 <_scanf_float+0x3d2>
 800aeb2:	9903      	ldr	r1, [sp, #12]
 800aeb4:	1d1a      	adds	r2, r3, #4
 800aeb6:	600a      	str	r2, [r1, #0]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	ed83 0b00 	vstr	d0, [r3]
 800aebe:	68e3      	ldr	r3, [r4, #12]
 800aec0:	3301      	adds	r3, #1
 800aec2:	60e3      	str	r3, [r4, #12]
 800aec4:	e66f      	b.n	800aba6 <_scanf_float+0x82>
 800aec6:	9b04      	ldr	r3, [sp, #16]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d0e7      	beq.n	800ae9c <_scanf_float+0x378>
 800aecc:	9905      	ldr	r1, [sp, #20]
 800aece:	230a      	movs	r3, #10
 800aed0:	462a      	mov	r2, r5
 800aed2:	3101      	adds	r1, #1
 800aed4:	4640      	mov	r0, r8
 800aed6:	f000 ff39 	bl	800bd4c <_strtol_r>
 800aeda:	9b04      	ldr	r3, [sp, #16]
 800aedc:	9e05      	ldr	r6, [sp, #20]
 800aede:	1ac2      	subs	r2, r0, r3
 800aee0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800aee4:	429e      	cmp	r6, r3
 800aee6:	bf28      	it	cs
 800aee8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800aeec:	490e      	ldr	r1, [pc, #56]	; (800af28 <_scanf_float+0x404>)
 800aeee:	4630      	mov	r0, r6
 800aef0:	f000 f8b2 	bl	800b058 <siprintf>
 800aef4:	e7d2      	b.n	800ae9c <_scanf_float+0x378>
 800aef6:	9903      	ldr	r1, [sp, #12]
 800aef8:	f012 0f04 	tst.w	r2, #4
 800aefc:	f103 0204 	add.w	r2, r3, #4
 800af00:	600a      	str	r2, [r1, #0]
 800af02:	d1d9      	bne.n	800aeb8 <_scanf_float+0x394>
 800af04:	eeb4 0b40 	vcmp.f64	d0, d0
 800af08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af0c:	681e      	ldr	r6, [r3, #0]
 800af0e:	d705      	bvc.n	800af1c <_scanf_float+0x3f8>
 800af10:	4806      	ldr	r0, [pc, #24]	; (800af2c <_scanf_float+0x408>)
 800af12:	f000 f89b 	bl	800b04c <nanf>
 800af16:	ed86 0a00 	vstr	s0, [r6]
 800af1a:	e7d0      	b.n	800aebe <_scanf_float+0x39a>
 800af1c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800af20:	e7f9      	b.n	800af16 <_scanf_float+0x3f2>
 800af22:	2500      	movs	r5, #0
 800af24:	e63f      	b.n	800aba6 <_scanf_float+0x82>
 800af26:	bf00      	nop
 800af28:	0800ec8c 	.word	0x0800ec8c
 800af2c:	0800f100 	.word	0x0800f100

0800af30 <iprintf>:
 800af30:	b40f      	push	{r0, r1, r2, r3}
 800af32:	4b0a      	ldr	r3, [pc, #40]	; (800af5c <iprintf+0x2c>)
 800af34:	b513      	push	{r0, r1, r4, lr}
 800af36:	681c      	ldr	r4, [r3, #0]
 800af38:	b124      	cbz	r4, 800af44 <iprintf+0x14>
 800af3a:	69a3      	ldr	r3, [r4, #24]
 800af3c:	b913      	cbnz	r3, 800af44 <iprintf+0x14>
 800af3e:	4620      	mov	r0, r4
 800af40:	f001 feda 	bl	800ccf8 <__sinit>
 800af44:	ab05      	add	r3, sp, #20
 800af46:	9a04      	ldr	r2, [sp, #16]
 800af48:	68a1      	ldr	r1, [r4, #8]
 800af4a:	9301      	str	r3, [sp, #4]
 800af4c:	4620      	mov	r0, r4
 800af4e:	f003 faad 	bl	800e4ac <_vfiprintf_r>
 800af52:	b002      	add	sp, #8
 800af54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af58:	b004      	add	sp, #16
 800af5a:	4770      	bx	lr
 800af5c:	2000000c 	.word	0x2000000c

0800af60 <_puts_r>:
 800af60:	b570      	push	{r4, r5, r6, lr}
 800af62:	460e      	mov	r6, r1
 800af64:	4605      	mov	r5, r0
 800af66:	b118      	cbz	r0, 800af70 <_puts_r+0x10>
 800af68:	6983      	ldr	r3, [r0, #24]
 800af6a:	b90b      	cbnz	r3, 800af70 <_puts_r+0x10>
 800af6c:	f001 fec4 	bl	800ccf8 <__sinit>
 800af70:	69ab      	ldr	r3, [r5, #24]
 800af72:	68ac      	ldr	r4, [r5, #8]
 800af74:	b913      	cbnz	r3, 800af7c <_puts_r+0x1c>
 800af76:	4628      	mov	r0, r5
 800af78:	f001 febe 	bl	800ccf8 <__sinit>
 800af7c:	4b2c      	ldr	r3, [pc, #176]	; (800b030 <_puts_r+0xd0>)
 800af7e:	429c      	cmp	r4, r3
 800af80:	d120      	bne.n	800afc4 <_puts_r+0x64>
 800af82:	686c      	ldr	r4, [r5, #4]
 800af84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af86:	07db      	lsls	r3, r3, #31
 800af88:	d405      	bmi.n	800af96 <_puts_r+0x36>
 800af8a:	89a3      	ldrh	r3, [r4, #12]
 800af8c:	0598      	lsls	r0, r3, #22
 800af8e:	d402      	bmi.n	800af96 <_puts_r+0x36>
 800af90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af92:	f002 fac2 	bl	800d51a <__retarget_lock_acquire_recursive>
 800af96:	89a3      	ldrh	r3, [r4, #12]
 800af98:	0719      	lsls	r1, r3, #28
 800af9a:	d51d      	bpl.n	800afd8 <_puts_r+0x78>
 800af9c:	6923      	ldr	r3, [r4, #16]
 800af9e:	b1db      	cbz	r3, 800afd8 <_puts_r+0x78>
 800afa0:	3e01      	subs	r6, #1
 800afa2:	68a3      	ldr	r3, [r4, #8]
 800afa4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800afa8:	3b01      	subs	r3, #1
 800afaa:	60a3      	str	r3, [r4, #8]
 800afac:	bb39      	cbnz	r1, 800affe <_puts_r+0x9e>
 800afae:	2b00      	cmp	r3, #0
 800afb0:	da38      	bge.n	800b024 <_puts_r+0xc4>
 800afb2:	4622      	mov	r2, r4
 800afb4:	210a      	movs	r1, #10
 800afb6:	4628      	mov	r0, r5
 800afb8:	f000 feca 	bl	800bd50 <__swbuf_r>
 800afbc:	3001      	adds	r0, #1
 800afbe:	d011      	beq.n	800afe4 <_puts_r+0x84>
 800afc0:	250a      	movs	r5, #10
 800afc2:	e011      	b.n	800afe8 <_puts_r+0x88>
 800afc4:	4b1b      	ldr	r3, [pc, #108]	; (800b034 <_puts_r+0xd4>)
 800afc6:	429c      	cmp	r4, r3
 800afc8:	d101      	bne.n	800afce <_puts_r+0x6e>
 800afca:	68ac      	ldr	r4, [r5, #8]
 800afcc:	e7da      	b.n	800af84 <_puts_r+0x24>
 800afce:	4b1a      	ldr	r3, [pc, #104]	; (800b038 <_puts_r+0xd8>)
 800afd0:	429c      	cmp	r4, r3
 800afd2:	bf08      	it	eq
 800afd4:	68ec      	ldreq	r4, [r5, #12]
 800afd6:	e7d5      	b.n	800af84 <_puts_r+0x24>
 800afd8:	4621      	mov	r1, r4
 800afda:	4628      	mov	r0, r5
 800afdc:	f000 ff0a 	bl	800bdf4 <__swsetup_r>
 800afe0:	2800      	cmp	r0, #0
 800afe2:	d0dd      	beq.n	800afa0 <_puts_r+0x40>
 800afe4:	f04f 35ff 	mov.w	r5, #4294967295
 800afe8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800afea:	07da      	lsls	r2, r3, #31
 800afec:	d405      	bmi.n	800affa <_puts_r+0x9a>
 800afee:	89a3      	ldrh	r3, [r4, #12]
 800aff0:	059b      	lsls	r3, r3, #22
 800aff2:	d402      	bmi.n	800affa <_puts_r+0x9a>
 800aff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aff6:	f002 fa91 	bl	800d51c <__retarget_lock_release_recursive>
 800affa:	4628      	mov	r0, r5
 800affc:	bd70      	pop	{r4, r5, r6, pc}
 800affe:	2b00      	cmp	r3, #0
 800b000:	da04      	bge.n	800b00c <_puts_r+0xac>
 800b002:	69a2      	ldr	r2, [r4, #24]
 800b004:	429a      	cmp	r2, r3
 800b006:	dc06      	bgt.n	800b016 <_puts_r+0xb6>
 800b008:	290a      	cmp	r1, #10
 800b00a:	d004      	beq.n	800b016 <_puts_r+0xb6>
 800b00c:	6823      	ldr	r3, [r4, #0]
 800b00e:	1c5a      	adds	r2, r3, #1
 800b010:	6022      	str	r2, [r4, #0]
 800b012:	7019      	strb	r1, [r3, #0]
 800b014:	e7c5      	b.n	800afa2 <_puts_r+0x42>
 800b016:	4622      	mov	r2, r4
 800b018:	4628      	mov	r0, r5
 800b01a:	f000 fe99 	bl	800bd50 <__swbuf_r>
 800b01e:	3001      	adds	r0, #1
 800b020:	d1bf      	bne.n	800afa2 <_puts_r+0x42>
 800b022:	e7df      	b.n	800afe4 <_puts_r+0x84>
 800b024:	6823      	ldr	r3, [r4, #0]
 800b026:	250a      	movs	r5, #10
 800b028:	1c5a      	adds	r2, r3, #1
 800b02a:	6022      	str	r2, [r4, #0]
 800b02c:	701d      	strb	r5, [r3, #0]
 800b02e:	e7db      	b.n	800afe8 <_puts_r+0x88>
 800b030:	0800ee9c 	.word	0x0800ee9c
 800b034:	0800eebc 	.word	0x0800eebc
 800b038:	0800ee7c 	.word	0x0800ee7c

0800b03c <puts>:
 800b03c:	4b02      	ldr	r3, [pc, #8]	; (800b048 <puts+0xc>)
 800b03e:	4601      	mov	r1, r0
 800b040:	6818      	ldr	r0, [r3, #0]
 800b042:	f7ff bf8d 	b.w	800af60 <_puts_r>
 800b046:	bf00      	nop
 800b048:	2000000c 	.word	0x2000000c

0800b04c <nanf>:
 800b04c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b054 <nanf+0x8>
 800b050:	4770      	bx	lr
 800b052:	bf00      	nop
 800b054:	7fc00000 	.word	0x7fc00000

0800b058 <siprintf>:
 800b058:	b40e      	push	{r1, r2, r3}
 800b05a:	b500      	push	{lr}
 800b05c:	b09c      	sub	sp, #112	; 0x70
 800b05e:	ab1d      	add	r3, sp, #116	; 0x74
 800b060:	9002      	str	r0, [sp, #8]
 800b062:	9006      	str	r0, [sp, #24]
 800b064:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b068:	4809      	ldr	r0, [pc, #36]	; (800b090 <siprintf+0x38>)
 800b06a:	9107      	str	r1, [sp, #28]
 800b06c:	9104      	str	r1, [sp, #16]
 800b06e:	4909      	ldr	r1, [pc, #36]	; (800b094 <siprintf+0x3c>)
 800b070:	f853 2b04 	ldr.w	r2, [r3], #4
 800b074:	9105      	str	r1, [sp, #20]
 800b076:	6800      	ldr	r0, [r0, #0]
 800b078:	9301      	str	r3, [sp, #4]
 800b07a:	a902      	add	r1, sp, #8
 800b07c:	f003 f8ec 	bl	800e258 <_svfiprintf_r>
 800b080:	9b02      	ldr	r3, [sp, #8]
 800b082:	2200      	movs	r2, #0
 800b084:	701a      	strb	r2, [r3, #0]
 800b086:	b01c      	add	sp, #112	; 0x70
 800b088:	f85d eb04 	ldr.w	lr, [sp], #4
 800b08c:	b003      	add	sp, #12
 800b08e:	4770      	bx	lr
 800b090:	2000000c 	.word	0x2000000c
 800b094:	ffff0208 	.word	0xffff0208

0800b098 <sulp>:
 800b098:	b570      	push	{r4, r5, r6, lr}
 800b09a:	4604      	mov	r4, r0
 800b09c:	460d      	mov	r5, r1
 800b09e:	4616      	mov	r6, r2
 800b0a0:	ec45 4b10 	vmov	d0, r4, r5
 800b0a4:	f002 fe3a 	bl	800dd1c <__ulp>
 800b0a8:	b17e      	cbz	r6, 800b0ca <sulp+0x32>
 800b0aa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b0ae:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	dd09      	ble.n	800b0ca <sulp+0x32>
 800b0b6:	051b      	lsls	r3, r3, #20
 800b0b8:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800b0bc:	2000      	movs	r0, #0
 800b0be:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800b0c2:	ec41 0b17 	vmov	d7, r0, r1
 800b0c6:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b0ca:	bd70      	pop	{r4, r5, r6, pc}
 800b0cc:	0000      	movs	r0, r0
	...

0800b0d0 <_strtod_l>:
 800b0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0d4:	ed2d 8b0e 	vpush	{d8-d14}
 800b0d8:	b097      	sub	sp, #92	; 0x5c
 800b0da:	461f      	mov	r7, r3
 800b0dc:	2300      	movs	r3, #0
 800b0de:	9312      	str	r3, [sp, #72]	; 0x48
 800b0e0:	4ba1      	ldr	r3, [pc, #644]	; (800b368 <_strtod_l+0x298>)
 800b0e2:	920d      	str	r2, [sp, #52]	; 0x34
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	9307      	str	r3, [sp, #28]
 800b0e8:	4604      	mov	r4, r0
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	468b      	mov	fp, r1
 800b0ee:	f7f5 f8a7 	bl	8000240 <strlen>
 800b0f2:	f04f 0800 	mov.w	r8, #0
 800b0f6:	4605      	mov	r5, r0
 800b0f8:	f04f 0900 	mov.w	r9, #0
 800b0fc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800b100:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b102:	7813      	ldrb	r3, [r2, #0]
 800b104:	2b2b      	cmp	r3, #43	; 0x2b
 800b106:	d04d      	beq.n	800b1a4 <_strtod_l+0xd4>
 800b108:	d83a      	bhi.n	800b180 <_strtod_l+0xb0>
 800b10a:	2b0d      	cmp	r3, #13
 800b10c:	d833      	bhi.n	800b176 <_strtod_l+0xa6>
 800b10e:	2b08      	cmp	r3, #8
 800b110:	d833      	bhi.n	800b17a <_strtod_l+0xaa>
 800b112:	2b00      	cmp	r3, #0
 800b114:	d03d      	beq.n	800b192 <_strtod_l+0xc2>
 800b116:	2300      	movs	r3, #0
 800b118:	9308      	str	r3, [sp, #32]
 800b11a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800b11c:	7833      	ldrb	r3, [r6, #0]
 800b11e:	2b30      	cmp	r3, #48	; 0x30
 800b120:	f040 80b0 	bne.w	800b284 <_strtod_l+0x1b4>
 800b124:	7873      	ldrb	r3, [r6, #1]
 800b126:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b12a:	2b58      	cmp	r3, #88	; 0x58
 800b12c:	d167      	bne.n	800b1fe <_strtod_l+0x12e>
 800b12e:	9b08      	ldr	r3, [sp, #32]
 800b130:	9301      	str	r3, [sp, #4]
 800b132:	ab12      	add	r3, sp, #72	; 0x48
 800b134:	9702      	str	r7, [sp, #8]
 800b136:	9300      	str	r3, [sp, #0]
 800b138:	4a8c      	ldr	r2, [pc, #560]	; (800b36c <_strtod_l+0x29c>)
 800b13a:	ab13      	add	r3, sp, #76	; 0x4c
 800b13c:	a911      	add	r1, sp, #68	; 0x44
 800b13e:	4620      	mov	r0, r4
 800b140:	f001 fede 	bl	800cf00 <__gethex>
 800b144:	f010 0507 	ands.w	r5, r0, #7
 800b148:	4607      	mov	r7, r0
 800b14a:	d005      	beq.n	800b158 <_strtod_l+0x88>
 800b14c:	2d06      	cmp	r5, #6
 800b14e:	d12b      	bne.n	800b1a8 <_strtod_l+0xd8>
 800b150:	3601      	adds	r6, #1
 800b152:	2300      	movs	r3, #0
 800b154:	9611      	str	r6, [sp, #68]	; 0x44
 800b156:	9308      	str	r3, [sp, #32]
 800b158:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	f040 854e 	bne.w	800bbfc <_strtod_l+0xb2c>
 800b160:	9b08      	ldr	r3, [sp, #32]
 800b162:	b1e3      	cbz	r3, 800b19e <_strtod_l+0xce>
 800b164:	ec49 8b17 	vmov	d7, r8, r9
 800b168:	eeb1 0b47 	vneg.f64	d0, d7
 800b16c:	b017      	add	sp, #92	; 0x5c
 800b16e:	ecbd 8b0e 	vpop	{d8-d14}
 800b172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b176:	2b20      	cmp	r3, #32
 800b178:	d1cd      	bne.n	800b116 <_strtod_l+0x46>
 800b17a:	3201      	adds	r2, #1
 800b17c:	9211      	str	r2, [sp, #68]	; 0x44
 800b17e:	e7bf      	b.n	800b100 <_strtod_l+0x30>
 800b180:	2b2d      	cmp	r3, #45	; 0x2d
 800b182:	d1c8      	bne.n	800b116 <_strtod_l+0x46>
 800b184:	2301      	movs	r3, #1
 800b186:	9308      	str	r3, [sp, #32]
 800b188:	1c53      	adds	r3, r2, #1
 800b18a:	9311      	str	r3, [sp, #68]	; 0x44
 800b18c:	7853      	ldrb	r3, [r2, #1]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d1c3      	bne.n	800b11a <_strtod_l+0x4a>
 800b192:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b194:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800b198:	2b00      	cmp	r3, #0
 800b19a:	f040 852d 	bne.w	800bbf8 <_strtod_l+0xb28>
 800b19e:	ec49 8b10 	vmov	d0, r8, r9
 800b1a2:	e7e3      	b.n	800b16c <_strtod_l+0x9c>
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	e7ee      	b.n	800b186 <_strtod_l+0xb6>
 800b1a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b1aa:	b13a      	cbz	r2, 800b1bc <_strtod_l+0xec>
 800b1ac:	2135      	movs	r1, #53	; 0x35
 800b1ae:	a814      	add	r0, sp, #80	; 0x50
 800b1b0:	f002 febc 	bl	800df2c <__copybits>
 800b1b4:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b1b6:	4620      	mov	r0, r4
 800b1b8:	f002 fa7e 	bl	800d6b8 <_Bfree>
 800b1bc:	3d01      	subs	r5, #1
 800b1be:	2d04      	cmp	r5, #4
 800b1c0:	d806      	bhi.n	800b1d0 <_strtod_l+0x100>
 800b1c2:	e8df f005 	tbb	[pc, r5]
 800b1c6:	030a      	.short	0x030a
 800b1c8:	1714      	.short	0x1714
 800b1ca:	0a          	.byte	0x0a
 800b1cb:	00          	.byte	0x00
 800b1cc:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800b1d0:	073f      	lsls	r7, r7, #28
 800b1d2:	d5c1      	bpl.n	800b158 <_strtod_l+0x88>
 800b1d4:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800b1d8:	e7be      	b.n	800b158 <_strtod_l+0x88>
 800b1da:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800b1de:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b1e0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b1e4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b1e8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800b1ec:	e7f0      	b.n	800b1d0 <_strtod_l+0x100>
 800b1ee:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800b370 <_strtod_l+0x2a0>
 800b1f2:	e7ed      	b.n	800b1d0 <_strtod_l+0x100>
 800b1f4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800b1f8:	f04f 38ff 	mov.w	r8, #4294967295
 800b1fc:	e7e8      	b.n	800b1d0 <_strtod_l+0x100>
 800b1fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b200:	1c5a      	adds	r2, r3, #1
 800b202:	9211      	str	r2, [sp, #68]	; 0x44
 800b204:	785b      	ldrb	r3, [r3, #1]
 800b206:	2b30      	cmp	r3, #48	; 0x30
 800b208:	d0f9      	beq.n	800b1fe <_strtod_l+0x12e>
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d0a4      	beq.n	800b158 <_strtod_l+0x88>
 800b20e:	2301      	movs	r3, #1
 800b210:	f04f 0a00 	mov.w	sl, #0
 800b214:	9304      	str	r3, [sp, #16]
 800b216:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b218:	930a      	str	r3, [sp, #40]	; 0x28
 800b21a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800b21e:	f8cd a018 	str.w	sl, [sp, #24]
 800b222:	220a      	movs	r2, #10
 800b224:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b226:	7807      	ldrb	r7, [r0, #0]
 800b228:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800b22c:	b2d9      	uxtb	r1, r3
 800b22e:	2909      	cmp	r1, #9
 800b230:	d92a      	bls.n	800b288 <_strtod_l+0x1b8>
 800b232:	9907      	ldr	r1, [sp, #28]
 800b234:	462a      	mov	r2, r5
 800b236:	f003 fac6 	bl	800e7c6 <strncmp>
 800b23a:	2800      	cmp	r0, #0
 800b23c:	d033      	beq.n	800b2a6 <_strtod_l+0x1d6>
 800b23e:	2000      	movs	r0, #0
 800b240:	9b06      	ldr	r3, [sp, #24]
 800b242:	463a      	mov	r2, r7
 800b244:	4601      	mov	r1, r0
 800b246:	4607      	mov	r7, r0
 800b248:	2a65      	cmp	r2, #101	; 0x65
 800b24a:	d001      	beq.n	800b250 <_strtod_l+0x180>
 800b24c:	2a45      	cmp	r2, #69	; 0x45
 800b24e:	d117      	bne.n	800b280 <_strtod_l+0x1b0>
 800b250:	b91b      	cbnz	r3, 800b25a <_strtod_l+0x18a>
 800b252:	9b04      	ldr	r3, [sp, #16]
 800b254:	4303      	orrs	r3, r0
 800b256:	d09c      	beq.n	800b192 <_strtod_l+0xc2>
 800b258:	2300      	movs	r3, #0
 800b25a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800b25e:	f10b 0201 	add.w	r2, fp, #1
 800b262:	9211      	str	r2, [sp, #68]	; 0x44
 800b264:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800b268:	2a2b      	cmp	r2, #43	; 0x2b
 800b26a:	d071      	beq.n	800b350 <_strtod_l+0x280>
 800b26c:	2a2d      	cmp	r2, #45	; 0x2d
 800b26e:	d077      	beq.n	800b360 <_strtod_l+0x290>
 800b270:	f04f 0e00 	mov.w	lr, #0
 800b274:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800b278:	2d09      	cmp	r5, #9
 800b27a:	d97f      	bls.n	800b37c <_strtod_l+0x2ac>
 800b27c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800b280:	2500      	movs	r5, #0
 800b282:	e09b      	b.n	800b3bc <_strtod_l+0x2ec>
 800b284:	2300      	movs	r3, #0
 800b286:	e7c3      	b.n	800b210 <_strtod_l+0x140>
 800b288:	9906      	ldr	r1, [sp, #24]
 800b28a:	2908      	cmp	r1, #8
 800b28c:	bfdd      	ittte	le
 800b28e:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b290:	fb02 3301 	mlale	r3, r2, r1, r3
 800b294:	9309      	strle	r3, [sp, #36]	; 0x24
 800b296:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800b29a:	9b06      	ldr	r3, [sp, #24]
 800b29c:	3001      	adds	r0, #1
 800b29e:	3301      	adds	r3, #1
 800b2a0:	9306      	str	r3, [sp, #24]
 800b2a2:	9011      	str	r0, [sp, #68]	; 0x44
 800b2a4:	e7be      	b.n	800b224 <_strtod_l+0x154>
 800b2a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b2a8:	195a      	adds	r2, r3, r5
 800b2aa:	9211      	str	r2, [sp, #68]	; 0x44
 800b2ac:	5d5a      	ldrb	r2, [r3, r5]
 800b2ae:	9b06      	ldr	r3, [sp, #24]
 800b2b0:	b3a3      	cbz	r3, 800b31c <_strtod_l+0x24c>
 800b2b2:	4607      	mov	r7, r0
 800b2b4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b2b8:	2909      	cmp	r1, #9
 800b2ba:	d912      	bls.n	800b2e2 <_strtod_l+0x212>
 800b2bc:	2101      	movs	r1, #1
 800b2be:	e7c3      	b.n	800b248 <_strtod_l+0x178>
 800b2c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b2c2:	1c5a      	adds	r2, r3, #1
 800b2c4:	9211      	str	r2, [sp, #68]	; 0x44
 800b2c6:	785a      	ldrb	r2, [r3, #1]
 800b2c8:	3001      	adds	r0, #1
 800b2ca:	2a30      	cmp	r2, #48	; 0x30
 800b2cc:	d0f8      	beq.n	800b2c0 <_strtod_l+0x1f0>
 800b2ce:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b2d2:	2b08      	cmp	r3, #8
 800b2d4:	f200 8497 	bhi.w	800bc06 <_strtod_l+0xb36>
 800b2d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b2da:	930a      	str	r3, [sp, #40]	; 0x28
 800b2dc:	4607      	mov	r7, r0
 800b2de:	2000      	movs	r0, #0
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	3a30      	subs	r2, #48	; 0x30
 800b2e4:	f100 0101 	add.w	r1, r0, #1
 800b2e8:	d012      	beq.n	800b310 <_strtod_l+0x240>
 800b2ea:	440f      	add	r7, r1
 800b2ec:	eb00 0c03 	add.w	ip, r0, r3
 800b2f0:	4619      	mov	r1, r3
 800b2f2:	250a      	movs	r5, #10
 800b2f4:	4561      	cmp	r1, ip
 800b2f6:	d113      	bne.n	800b320 <_strtod_l+0x250>
 800b2f8:	1819      	adds	r1, r3, r0
 800b2fa:	2908      	cmp	r1, #8
 800b2fc:	f103 0301 	add.w	r3, r3, #1
 800b300:	4403      	add	r3, r0
 800b302:	dc1c      	bgt.n	800b33e <_strtod_l+0x26e>
 800b304:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b306:	210a      	movs	r1, #10
 800b308:	fb01 2200 	mla	r2, r1, r0, r2
 800b30c:	9209      	str	r2, [sp, #36]	; 0x24
 800b30e:	2100      	movs	r1, #0
 800b310:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b312:	1c50      	adds	r0, r2, #1
 800b314:	9011      	str	r0, [sp, #68]	; 0x44
 800b316:	7852      	ldrb	r2, [r2, #1]
 800b318:	4608      	mov	r0, r1
 800b31a:	e7cb      	b.n	800b2b4 <_strtod_l+0x1e4>
 800b31c:	9806      	ldr	r0, [sp, #24]
 800b31e:	e7d4      	b.n	800b2ca <_strtod_l+0x1fa>
 800b320:	2908      	cmp	r1, #8
 800b322:	dc04      	bgt.n	800b32e <_strtod_l+0x25e>
 800b324:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b326:	436e      	muls	r6, r5
 800b328:	9609      	str	r6, [sp, #36]	; 0x24
 800b32a:	3101      	adds	r1, #1
 800b32c:	e7e2      	b.n	800b2f4 <_strtod_l+0x224>
 800b32e:	f101 0e01 	add.w	lr, r1, #1
 800b332:	f1be 0f10 	cmp.w	lr, #16
 800b336:	bfd8      	it	le
 800b338:	fb05 fa0a 	mulle.w	sl, r5, sl
 800b33c:	e7f5      	b.n	800b32a <_strtod_l+0x25a>
 800b33e:	2b10      	cmp	r3, #16
 800b340:	bfdc      	itt	le
 800b342:	210a      	movle	r1, #10
 800b344:	fb01 2a0a 	mlale	sl, r1, sl, r2
 800b348:	e7e1      	b.n	800b30e <_strtod_l+0x23e>
 800b34a:	2700      	movs	r7, #0
 800b34c:	2101      	movs	r1, #1
 800b34e:	e780      	b.n	800b252 <_strtod_l+0x182>
 800b350:	f04f 0e00 	mov.w	lr, #0
 800b354:	f10b 0202 	add.w	r2, fp, #2
 800b358:	9211      	str	r2, [sp, #68]	; 0x44
 800b35a:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800b35e:	e789      	b.n	800b274 <_strtod_l+0x1a4>
 800b360:	f04f 0e01 	mov.w	lr, #1
 800b364:	e7f6      	b.n	800b354 <_strtod_l+0x284>
 800b366:	bf00      	nop
 800b368:	0800ef44 	.word	0x0800ef44
 800b36c:	0800ec94 	.word	0x0800ec94
 800b370:	7ff00000 	.word	0x7ff00000
 800b374:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b376:	1c55      	adds	r5, r2, #1
 800b378:	9511      	str	r5, [sp, #68]	; 0x44
 800b37a:	7852      	ldrb	r2, [r2, #1]
 800b37c:	2a30      	cmp	r2, #48	; 0x30
 800b37e:	d0f9      	beq.n	800b374 <_strtod_l+0x2a4>
 800b380:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800b384:	2d08      	cmp	r5, #8
 800b386:	f63f af7b 	bhi.w	800b280 <_strtod_l+0x1b0>
 800b38a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800b38e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b390:	9207      	str	r2, [sp, #28]
 800b392:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b394:	1c55      	adds	r5, r2, #1
 800b396:	9511      	str	r5, [sp, #68]	; 0x44
 800b398:	7852      	ldrb	r2, [r2, #1]
 800b39a:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800b39e:	2e09      	cmp	r6, #9
 800b3a0:	d937      	bls.n	800b412 <_strtod_l+0x342>
 800b3a2:	9e07      	ldr	r6, [sp, #28]
 800b3a4:	1bad      	subs	r5, r5, r6
 800b3a6:	2d08      	cmp	r5, #8
 800b3a8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800b3ac:	dc02      	bgt.n	800b3b4 <_strtod_l+0x2e4>
 800b3ae:	4565      	cmp	r5, ip
 800b3b0:	bfa8      	it	ge
 800b3b2:	4665      	movge	r5, ip
 800b3b4:	f1be 0f00 	cmp.w	lr, #0
 800b3b8:	d000      	beq.n	800b3bc <_strtod_l+0x2ec>
 800b3ba:	426d      	negs	r5, r5
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d14d      	bne.n	800b45c <_strtod_l+0x38c>
 800b3c0:	9b04      	ldr	r3, [sp, #16]
 800b3c2:	4303      	orrs	r3, r0
 800b3c4:	f47f aec8 	bne.w	800b158 <_strtod_l+0x88>
 800b3c8:	2900      	cmp	r1, #0
 800b3ca:	f47f aee2 	bne.w	800b192 <_strtod_l+0xc2>
 800b3ce:	2a69      	cmp	r2, #105	; 0x69
 800b3d0:	d027      	beq.n	800b422 <_strtod_l+0x352>
 800b3d2:	dc24      	bgt.n	800b41e <_strtod_l+0x34e>
 800b3d4:	2a49      	cmp	r2, #73	; 0x49
 800b3d6:	d024      	beq.n	800b422 <_strtod_l+0x352>
 800b3d8:	2a4e      	cmp	r2, #78	; 0x4e
 800b3da:	f47f aeda 	bne.w	800b192 <_strtod_l+0xc2>
 800b3de:	4996      	ldr	r1, [pc, #600]	; (800b638 <_strtod_l+0x568>)
 800b3e0:	a811      	add	r0, sp, #68	; 0x44
 800b3e2:	f001 ffe5 	bl	800d3b0 <__match>
 800b3e6:	2800      	cmp	r0, #0
 800b3e8:	f43f aed3 	beq.w	800b192 <_strtod_l+0xc2>
 800b3ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b3ee:	781b      	ldrb	r3, [r3, #0]
 800b3f0:	2b28      	cmp	r3, #40	; 0x28
 800b3f2:	d12d      	bne.n	800b450 <_strtod_l+0x380>
 800b3f4:	4991      	ldr	r1, [pc, #580]	; (800b63c <_strtod_l+0x56c>)
 800b3f6:	aa14      	add	r2, sp, #80	; 0x50
 800b3f8:	a811      	add	r0, sp, #68	; 0x44
 800b3fa:	f001 ffed 	bl	800d3d8 <__hexnan>
 800b3fe:	2805      	cmp	r0, #5
 800b400:	d126      	bne.n	800b450 <_strtod_l+0x380>
 800b402:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b404:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800b408:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800b40c:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800b410:	e6a2      	b.n	800b158 <_strtod_l+0x88>
 800b412:	250a      	movs	r5, #10
 800b414:	fb05 250c 	mla	r5, r5, ip, r2
 800b418:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800b41c:	e7b9      	b.n	800b392 <_strtod_l+0x2c2>
 800b41e:	2a6e      	cmp	r2, #110	; 0x6e
 800b420:	e7db      	b.n	800b3da <_strtod_l+0x30a>
 800b422:	4987      	ldr	r1, [pc, #540]	; (800b640 <_strtod_l+0x570>)
 800b424:	a811      	add	r0, sp, #68	; 0x44
 800b426:	f001 ffc3 	bl	800d3b0 <__match>
 800b42a:	2800      	cmp	r0, #0
 800b42c:	f43f aeb1 	beq.w	800b192 <_strtod_l+0xc2>
 800b430:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b432:	4984      	ldr	r1, [pc, #528]	; (800b644 <_strtod_l+0x574>)
 800b434:	3b01      	subs	r3, #1
 800b436:	a811      	add	r0, sp, #68	; 0x44
 800b438:	9311      	str	r3, [sp, #68]	; 0x44
 800b43a:	f001 ffb9 	bl	800d3b0 <__match>
 800b43e:	b910      	cbnz	r0, 800b446 <_strtod_l+0x376>
 800b440:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b442:	3301      	adds	r3, #1
 800b444:	9311      	str	r3, [sp, #68]	; 0x44
 800b446:	f8df 9210 	ldr.w	r9, [pc, #528]	; 800b658 <_strtod_l+0x588>
 800b44a:	f04f 0800 	mov.w	r8, #0
 800b44e:	e683      	b.n	800b158 <_strtod_l+0x88>
 800b450:	487d      	ldr	r0, [pc, #500]	; (800b648 <_strtod_l+0x578>)
 800b452:	f003 f95d 	bl	800e710 <nan>
 800b456:	ec59 8b10 	vmov	r8, r9, d0
 800b45a:	e67d      	b.n	800b158 <_strtod_l+0x88>
 800b45c:	1bea      	subs	r2, r5, r7
 800b45e:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800b462:	9207      	str	r2, [sp, #28]
 800b464:	9a06      	ldr	r2, [sp, #24]
 800b466:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b46a:	2a00      	cmp	r2, #0
 800b46c:	bf08      	it	eq
 800b46e:	461a      	moveq	r2, r3
 800b470:	2b10      	cmp	r3, #16
 800b472:	9206      	str	r2, [sp, #24]
 800b474:	461a      	mov	r2, r3
 800b476:	bfa8      	it	ge
 800b478:	2210      	movge	r2, #16
 800b47a:	2b09      	cmp	r3, #9
 800b47c:	ec59 8b17 	vmov	r8, r9, d7
 800b480:	dd0c      	ble.n	800b49c <_strtod_l+0x3cc>
 800b482:	4972      	ldr	r1, [pc, #456]	; (800b64c <_strtod_l+0x57c>)
 800b484:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800b488:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800b48c:	ee06 aa90 	vmov	s13, sl
 800b490:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800b494:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b498:	ec59 8b16 	vmov	r8, r9, d6
 800b49c:	2b0f      	cmp	r3, #15
 800b49e:	dc36      	bgt.n	800b50e <_strtod_l+0x43e>
 800b4a0:	9907      	ldr	r1, [sp, #28]
 800b4a2:	2900      	cmp	r1, #0
 800b4a4:	f43f ae58 	beq.w	800b158 <_strtod_l+0x88>
 800b4a8:	dd23      	ble.n	800b4f2 <_strtod_l+0x422>
 800b4aa:	2916      	cmp	r1, #22
 800b4ac:	dc0b      	bgt.n	800b4c6 <_strtod_l+0x3f6>
 800b4ae:	4b67      	ldr	r3, [pc, #412]	; (800b64c <_strtod_l+0x57c>)
 800b4b0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800b4b4:	ed93 7b00 	vldr	d7, [r3]
 800b4b8:	ec49 8b16 	vmov	d6, r8, r9
 800b4bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b4c0:	ec59 8b17 	vmov	r8, r9, d7
 800b4c4:	e648      	b.n	800b158 <_strtod_l+0x88>
 800b4c6:	9807      	ldr	r0, [sp, #28]
 800b4c8:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800b4cc:	4281      	cmp	r1, r0
 800b4ce:	db1e      	blt.n	800b50e <_strtod_l+0x43e>
 800b4d0:	4a5e      	ldr	r2, [pc, #376]	; (800b64c <_strtod_l+0x57c>)
 800b4d2:	f1c3 030f 	rsb	r3, r3, #15
 800b4d6:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800b4da:	ed91 7b00 	vldr	d7, [r1]
 800b4de:	ec49 8b16 	vmov	d6, r8, r9
 800b4e2:	1ac3      	subs	r3, r0, r3
 800b4e4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800b4e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b4ec:	ed92 6b00 	vldr	d6, [r2]
 800b4f0:	e7e4      	b.n	800b4bc <_strtod_l+0x3ec>
 800b4f2:	9907      	ldr	r1, [sp, #28]
 800b4f4:	3116      	adds	r1, #22
 800b4f6:	db0a      	blt.n	800b50e <_strtod_l+0x43e>
 800b4f8:	4b54      	ldr	r3, [pc, #336]	; (800b64c <_strtod_l+0x57c>)
 800b4fa:	1b7d      	subs	r5, r7, r5
 800b4fc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b500:	ed95 7b00 	vldr	d7, [r5]
 800b504:	ec49 8b16 	vmov	d6, r8, r9
 800b508:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b50c:	e7d8      	b.n	800b4c0 <_strtod_l+0x3f0>
 800b50e:	9907      	ldr	r1, [sp, #28]
 800b510:	1a9a      	subs	r2, r3, r2
 800b512:	440a      	add	r2, r1
 800b514:	2a00      	cmp	r2, #0
 800b516:	dd6f      	ble.n	800b5f8 <_strtod_l+0x528>
 800b518:	f012 000f 	ands.w	r0, r2, #15
 800b51c:	d00a      	beq.n	800b534 <_strtod_l+0x464>
 800b51e:	494b      	ldr	r1, [pc, #300]	; (800b64c <_strtod_l+0x57c>)
 800b520:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800b524:	ed91 7b00 	vldr	d7, [r1]
 800b528:	ec49 8b16 	vmov	d6, r8, r9
 800b52c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b530:	ec59 8b17 	vmov	r8, r9, d7
 800b534:	f032 020f 	bics.w	r2, r2, #15
 800b538:	d04f      	beq.n	800b5da <_strtod_l+0x50a>
 800b53a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800b53e:	dd22      	ble.n	800b586 <_strtod_l+0x4b6>
 800b540:	2500      	movs	r5, #0
 800b542:	462e      	mov	r6, r5
 800b544:	9506      	str	r5, [sp, #24]
 800b546:	462f      	mov	r7, r5
 800b548:	2322      	movs	r3, #34	; 0x22
 800b54a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800b658 <_strtod_l+0x588>
 800b54e:	6023      	str	r3, [r4, #0]
 800b550:	f04f 0800 	mov.w	r8, #0
 800b554:	9b06      	ldr	r3, [sp, #24]
 800b556:	2b00      	cmp	r3, #0
 800b558:	f43f adfe 	beq.w	800b158 <_strtod_l+0x88>
 800b55c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b55e:	4620      	mov	r0, r4
 800b560:	f002 f8aa 	bl	800d6b8 <_Bfree>
 800b564:	4639      	mov	r1, r7
 800b566:	4620      	mov	r0, r4
 800b568:	f002 f8a6 	bl	800d6b8 <_Bfree>
 800b56c:	4631      	mov	r1, r6
 800b56e:	4620      	mov	r0, r4
 800b570:	f002 f8a2 	bl	800d6b8 <_Bfree>
 800b574:	9906      	ldr	r1, [sp, #24]
 800b576:	4620      	mov	r0, r4
 800b578:	f002 f89e 	bl	800d6b8 <_Bfree>
 800b57c:	4629      	mov	r1, r5
 800b57e:	4620      	mov	r0, r4
 800b580:	f002 f89a 	bl	800d6b8 <_Bfree>
 800b584:	e5e8      	b.n	800b158 <_strtod_l+0x88>
 800b586:	2000      	movs	r0, #0
 800b588:	ec49 8b17 	vmov	d7, r8, r9
 800b58c:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800b650 <_strtod_l+0x580>
 800b590:	1112      	asrs	r2, r2, #4
 800b592:	4601      	mov	r1, r0
 800b594:	2a01      	cmp	r2, #1
 800b596:	dc23      	bgt.n	800b5e0 <_strtod_l+0x510>
 800b598:	b108      	cbz	r0, 800b59e <_strtod_l+0x4ce>
 800b59a:	ec59 8b17 	vmov	r8, r9, d7
 800b59e:	4a2c      	ldr	r2, [pc, #176]	; (800b650 <_strtod_l+0x580>)
 800b5a0:	482c      	ldr	r0, [pc, #176]	; (800b654 <_strtod_l+0x584>)
 800b5a2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b5a6:	ed92 7b00 	vldr	d7, [r2]
 800b5aa:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b5ae:	ec49 8b16 	vmov	d6, r8, r9
 800b5b2:	4a29      	ldr	r2, [pc, #164]	; (800b658 <_strtod_l+0x588>)
 800b5b4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b5b8:	ee17 1a90 	vmov	r1, s15
 800b5bc:	400a      	ands	r2, r1
 800b5be:	4282      	cmp	r2, r0
 800b5c0:	ec59 8b17 	vmov	r8, r9, d7
 800b5c4:	d8bc      	bhi.n	800b540 <_strtod_l+0x470>
 800b5c6:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800b5ca:	4282      	cmp	r2, r0
 800b5cc:	bf86      	itte	hi
 800b5ce:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800b65c <_strtod_l+0x58c>
 800b5d2:	f04f 38ff 	movhi.w	r8, #4294967295
 800b5d6:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800b5da:	2200      	movs	r2, #0
 800b5dc:	9204      	str	r2, [sp, #16]
 800b5de:	e078      	b.n	800b6d2 <_strtod_l+0x602>
 800b5e0:	07d6      	lsls	r6, r2, #31
 800b5e2:	d504      	bpl.n	800b5ee <_strtod_l+0x51e>
 800b5e4:	ed9c 6b00 	vldr	d6, [ip]
 800b5e8:	2001      	movs	r0, #1
 800b5ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b5ee:	3101      	adds	r1, #1
 800b5f0:	1052      	asrs	r2, r2, #1
 800b5f2:	f10c 0c08 	add.w	ip, ip, #8
 800b5f6:	e7cd      	b.n	800b594 <_strtod_l+0x4c4>
 800b5f8:	d0ef      	beq.n	800b5da <_strtod_l+0x50a>
 800b5fa:	4252      	negs	r2, r2
 800b5fc:	f012 000f 	ands.w	r0, r2, #15
 800b600:	d00a      	beq.n	800b618 <_strtod_l+0x548>
 800b602:	4912      	ldr	r1, [pc, #72]	; (800b64c <_strtod_l+0x57c>)
 800b604:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800b608:	ed91 7b00 	vldr	d7, [r1]
 800b60c:	ec49 8b16 	vmov	d6, r8, r9
 800b610:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b614:	ec59 8b17 	vmov	r8, r9, d7
 800b618:	1112      	asrs	r2, r2, #4
 800b61a:	d0de      	beq.n	800b5da <_strtod_l+0x50a>
 800b61c:	2a1f      	cmp	r2, #31
 800b61e:	dd1f      	ble.n	800b660 <_strtod_l+0x590>
 800b620:	2500      	movs	r5, #0
 800b622:	462e      	mov	r6, r5
 800b624:	9506      	str	r5, [sp, #24]
 800b626:	462f      	mov	r7, r5
 800b628:	2322      	movs	r3, #34	; 0x22
 800b62a:	f04f 0800 	mov.w	r8, #0
 800b62e:	f04f 0900 	mov.w	r9, #0
 800b632:	6023      	str	r3, [r4, #0]
 800b634:	e78e      	b.n	800b554 <_strtod_l+0x484>
 800b636:	bf00      	nop
 800b638:	0800ec65 	.word	0x0800ec65
 800b63c:	0800eca8 	.word	0x0800eca8
 800b640:	0800ec5d 	.word	0x0800ec5d
 800b644:	0800edec 	.word	0x0800edec
 800b648:	0800f100 	.word	0x0800f100
 800b64c:	0800efe0 	.word	0x0800efe0
 800b650:	0800efb8 	.word	0x0800efb8
 800b654:	7ca00000 	.word	0x7ca00000
 800b658:	7ff00000 	.word	0x7ff00000
 800b65c:	7fefffff 	.word	0x7fefffff
 800b660:	f012 0110 	ands.w	r1, r2, #16
 800b664:	bf18      	it	ne
 800b666:	216a      	movne	r1, #106	; 0x6a
 800b668:	9104      	str	r1, [sp, #16]
 800b66a:	ec49 8b17 	vmov	d7, r8, r9
 800b66e:	49be      	ldr	r1, [pc, #760]	; (800b968 <_strtod_l+0x898>)
 800b670:	2000      	movs	r0, #0
 800b672:	07d6      	lsls	r6, r2, #31
 800b674:	d504      	bpl.n	800b680 <_strtod_l+0x5b0>
 800b676:	ed91 6b00 	vldr	d6, [r1]
 800b67a:	2001      	movs	r0, #1
 800b67c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b680:	1052      	asrs	r2, r2, #1
 800b682:	f101 0108 	add.w	r1, r1, #8
 800b686:	d1f4      	bne.n	800b672 <_strtod_l+0x5a2>
 800b688:	b108      	cbz	r0, 800b68e <_strtod_l+0x5be>
 800b68a:	ec59 8b17 	vmov	r8, r9, d7
 800b68e:	9a04      	ldr	r2, [sp, #16]
 800b690:	b1c2      	cbz	r2, 800b6c4 <_strtod_l+0x5f4>
 800b692:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800b696:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800b69a:	2a00      	cmp	r2, #0
 800b69c:	4648      	mov	r0, r9
 800b69e:	dd11      	ble.n	800b6c4 <_strtod_l+0x5f4>
 800b6a0:	2a1f      	cmp	r2, #31
 800b6a2:	f340 812e 	ble.w	800b902 <_strtod_l+0x832>
 800b6a6:	2a34      	cmp	r2, #52	; 0x34
 800b6a8:	bfde      	ittt	le
 800b6aa:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800b6ae:	f04f 32ff 	movle.w	r2, #4294967295
 800b6b2:	fa02 f101 	lslle.w	r1, r2, r1
 800b6b6:	f04f 0800 	mov.w	r8, #0
 800b6ba:	bfcc      	ite	gt
 800b6bc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b6c0:	ea01 0900 	andle.w	r9, r1, r0
 800b6c4:	ec49 8b17 	vmov	d7, r8, r9
 800b6c8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b6cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6d0:	d0a6      	beq.n	800b620 <_strtod_l+0x550>
 800b6d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6d4:	9200      	str	r2, [sp, #0]
 800b6d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b6d8:	9a06      	ldr	r2, [sp, #24]
 800b6da:	4620      	mov	r0, r4
 800b6dc:	f002 f854 	bl	800d788 <__s2b>
 800b6e0:	9006      	str	r0, [sp, #24]
 800b6e2:	2800      	cmp	r0, #0
 800b6e4:	f43f af2c 	beq.w	800b540 <_strtod_l+0x470>
 800b6e8:	9b07      	ldr	r3, [sp, #28]
 800b6ea:	1b7d      	subs	r5, r7, r5
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	bfb4      	ite	lt
 800b6f0:	462b      	movlt	r3, r5
 800b6f2:	2300      	movge	r3, #0
 800b6f4:	9309      	str	r3, [sp, #36]	; 0x24
 800b6f6:	9b07      	ldr	r3, [sp, #28]
 800b6f8:	ed9f 9b93 	vldr	d9, [pc, #588]	; 800b948 <_strtod_l+0x878>
 800b6fc:	ed9f ab94 	vldr	d10, [pc, #592]	; 800b950 <_strtod_l+0x880>
 800b700:	ed9f bb95 	vldr	d11, [pc, #596]	; 800b958 <_strtod_l+0x888>
 800b704:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b708:	2500      	movs	r5, #0
 800b70a:	930c      	str	r3, [sp, #48]	; 0x30
 800b70c:	462e      	mov	r6, r5
 800b70e:	9b06      	ldr	r3, [sp, #24]
 800b710:	4620      	mov	r0, r4
 800b712:	6859      	ldr	r1, [r3, #4]
 800b714:	f001 ff90 	bl	800d638 <_Balloc>
 800b718:	4607      	mov	r7, r0
 800b71a:	2800      	cmp	r0, #0
 800b71c:	f43f af14 	beq.w	800b548 <_strtod_l+0x478>
 800b720:	9b06      	ldr	r3, [sp, #24]
 800b722:	691a      	ldr	r2, [r3, #16]
 800b724:	3202      	adds	r2, #2
 800b726:	f103 010c 	add.w	r1, r3, #12
 800b72a:	0092      	lsls	r2, r2, #2
 800b72c:	300c      	adds	r0, #12
 800b72e:	f001 ff75 	bl	800d61c <memcpy>
 800b732:	ec49 8b10 	vmov	d0, r8, r9
 800b736:	aa14      	add	r2, sp, #80	; 0x50
 800b738:	a913      	add	r1, sp, #76	; 0x4c
 800b73a:	4620      	mov	r0, r4
 800b73c:	f002 fb6a 	bl	800de14 <__d2b>
 800b740:	ec49 8b18 	vmov	d8, r8, r9
 800b744:	9012      	str	r0, [sp, #72]	; 0x48
 800b746:	2800      	cmp	r0, #0
 800b748:	f43f aefe 	beq.w	800b548 <_strtod_l+0x478>
 800b74c:	2101      	movs	r1, #1
 800b74e:	4620      	mov	r0, r4
 800b750:	f002 f8b4 	bl	800d8bc <__i2b>
 800b754:	4606      	mov	r6, r0
 800b756:	2800      	cmp	r0, #0
 800b758:	f43f aef6 	beq.w	800b548 <_strtod_l+0x478>
 800b75c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b75e:	9914      	ldr	r1, [sp, #80]	; 0x50
 800b760:	2b00      	cmp	r3, #0
 800b762:	bfab      	itete	ge
 800b764:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800b766:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800b768:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800b76c:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800b770:	bfac      	ite	ge
 800b772:	eb03 0b02 	addge.w	fp, r3, r2
 800b776:	eba2 0a03 	sublt.w	sl, r2, r3
 800b77a:	9a04      	ldr	r2, [sp, #16]
 800b77c:	1a9b      	subs	r3, r3, r2
 800b77e:	440b      	add	r3, r1
 800b780:	4a7a      	ldr	r2, [pc, #488]	; (800b96c <_strtod_l+0x89c>)
 800b782:	3b01      	subs	r3, #1
 800b784:	4293      	cmp	r3, r2
 800b786:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800b78a:	f280 80cd 	bge.w	800b928 <_strtod_l+0x858>
 800b78e:	1ad2      	subs	r2, r2, r3
 800b790:	2a1f      	cmp	r2, #31
 800b792:	eba1 0102 	sub.w	r1, r1, r2
 800b796:	f04f 0001 	mov.w	r0, #1
 800b79a:	f300 80b9 	bgt.w	800b910 <_strtod_l+0x840>
 800b79e:	fa00 f302 	lsl.w	r3, r0, r2
 800b7a2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	930a      	str	r3, [sp, #40]	; 0x28
 800b7a8:	eb0b 0301 	add.w	r3, fp, r1
 800b7ac:	9a04      	ldr	r2, [sp, #16]
 800b7ae:	459b      	cmp	fp, r3
 800b7b0:	448a      	add	sl, r1
 800b7b2:	4492      	add	sl, r2
 800b7b4:	465a      	mov	r2, fp
 800b7b6:	bfa8      	it	ge
 800b7b8:	461a      	movge	r2, r3
 800b7ba:	4552      	cmp	r2, sl
 800b7bc:	bfa8      	it	ge
 800b7be:	4652      	movge	r2, sl
 800b7c0:	2a00      	cmp	r2, #0
 800b7c2:	bfc2      	ittt	gt
 800b7c4:	1a9b      	subgt	r3, r3, r2
 800b7c6:	ebaa 0a02 	subgt.w	sl, sl, r2
 800b7ca:	ebab 0b02 	subgt.w	fp, fp, r2
 800b7ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7d0:	2a00      	cmp	r2, #0
 800b7d2:	dd18      	ble.n	800b806 <_strtod_l+0x736>
 800b7d4:	4631      	mov	r1, r6
 800b7d6:	4620      	mov	r0, r4
 800b7d8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b7da:	f002 f92f 	bl	800da3c <__pow5mult>
 800b7de:	4606      	mov	r6, r0
 800b7e0:	2800      	cmp	r0, #0
 800b7e2:	f43f aeb1 	beq.w	800b548 <_strtod_l+0x478>
 800b7e6:	4601      	mov	r1, r0
 800b7e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b7ea:	4620      	mov	r0, r4
 800b7ec:	f002 f87c 	bl	800d8e8 <__multiply>
 800b7f0:	900e      	str	r0, [sp, #56]	; 0x38
 800b7f2:	2800      	cmp	r0, #0
 800b7f4:	f43f aea8 	beq.w	800b548 <_strtod_l+0x478>
 800b7f8:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b7fa:	4620      	mov	r0, r4
 800b7fc:	f001 ff5c 	bl	800d6b8 <_Bfree>
 800b800:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b802:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b804:	9212      	str	r2, [sp, #72]	; 0x48
 800b806:	2b00      	cmp	r3, #0
 800b808:	f300 8093 	bgt.w	800b932 <_strtod_l+0x862>
 800b80c:	9b07      	ldr	r3, [sp, #28]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	dd08      	ble.n	800b824 <_strtod_l+0x754>
 800b812:	4639      	mov	r1, r7
 800b814:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b816:	4620      	mov	r0, r4
 800b818:	f002 f910 	bl	800da3c <__pow5mult>
 800b81c:	4607      	mov	r7, r0
 800b81e:	2800      	cmp	r0, #0
 800b820:	f43f ae92 	beq.w	800b548 <_strtod_l+0x478>
 800b824:	f1ba 0f00 	cmp.w	sl, #0
 800b828:	dd08      	ble.n	800b83c <_strtod_l+0x76c>
 800b82a:	4639      	mov	r1, r7
 800b82c:	4652      	mov	r2, sl
 800b82e:	4620      	mov	r0, r4
 800b830:	f002 f95e 	bl	800daf0 <__lshift>
 800b834:	4607      	mov	r7, r0
 800b836:	2800      	cmp	r0, #0
 800b838:	f43f ae86 	beq.w	800b548 <_strtod_l+0x478>
 800b83c:	f1bb 0f00 	cmp.w	fp, #0
 800b840:	dd08      	ble.n	800b854 <_strtod_l+0x784>
 800b842:	4631      	mov	r1, r6
 800b844:	465a      	mov	r2, fp
 800b846:	4620      	mov	r0, r4
 800b848:	f002 f952 	bl	800daf0 <__lshift>
 800b84c:	4606      	mov	r6, r0
 800b84e:	2800      	cmp	r0, #0
 800b850:	f43f ae7a 	beq.w	800b548 <_strtod_l+0x478>
 800b854:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b856:	463a      	mov	r2, r7
 800b858:	4620      	mov	r0, r4
 800b85a:	f002 f9d5 	bl	800dc08 <__mdiff>
 800b85e:	4605      	mov	r5, r0
 800b860:	2800      	cmp	r0, #0
 800b862:	f43f ae71 	beq.w	800b548 <_strtod_l+0x478>
 800b866:	2300      	movs	r3, #0
 800b868:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800b86c:	60c3      	str	r3, [r0, #12]
 800b86e:	4631      	mov	r1, r6
 800b870:	f002 f9ae 	bl	800dbd0 <__mcmp>
 800b874:	2800      	cmp	r0, #0
 800b876:	da7d      	bge.n	800b974 <_strtod_l+0x8a4>
 800b878:	ea5a 0308 	orrs.w	r3, sl, r8
 800b87c:	f040 80a3 	bne.w	800b9c6 <_strtod_l+0x8f6>
 800b880:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b884:	2b00      	cmp	r3, #0
 800b886:	f040 809e 	bne.w	800b9c6 <_strtod_l+0x8f6>
 800b88a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b88e:	0d1b      	lsrs	r3, r3, #20
 800b890:	051b      	lsls	r3, r3, #20
 800b892:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b896:	f240 8096 	bls.w	800b9c6 <_strtod_l+0x8f6>
 800b89a:	696b      	ldr	r3, [r5, #20]
 800b89c:	b91b      	cbnz	r3, 800b8a6 <_strtod_l+0x7d6>
 800b89e:	692b      	ldr	r3, [r5, #16]
 800b8a0:	2b01      	cmp	r3, #1
 800b8a2:	f340 8090 	ble.w	800b9c6 <_strtod_l+0x8f6>
 800b8a6:	4629      	mov	r1, r5
 800b8a8:	2201      	movs	r2, #1
 800b8aa:	4620      	mov	r0, r4
 800b8ac:	f002 f920 	bl	800daf0 <__lshift>
 800b8b0:	4631      	mov	r1, r6
 800b8b2:	4605      	mov	r5, r0
 800b8b4:	f002 f98c 	bl	800dbd0 <__mcmp>
 800b8b8:	2800      	cmp	r0, #0
 800b8ba:	f340 8084 	ble.w	800b9c6 <_strtod_l+0x8f6>
 800b8be:	9904      	ldr	r1, [sp, #16]
 800b8c0:	4a2b      	ldr	r2, [pc, #172]	; (800b970 <_strtod_l+0x8a0>)
 800b8c2:	464b      	mov	r3, r9
 800b8c4:	2900      	cmp	r1, #0
 800b8c6:	f000 809d 	beq.w	800ba04 <_strtod_l+0x934>
 800b8ca:	ea02 0109 	and.w	r1, r2, r9
 800b8ce:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b8d2:	f300 8097 	bgt.w	800ba04 <_strtod_l+0x934>
 800b8d6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b8da:	f77f aea5 	ble.w	800b628 <_strtod_l+0x558>
 800b8de:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800b960 <_strtod_l+0x890>
 800b8e2:	ec49 8b16 	vmov	d6, r8, r9
 800b8e6:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b8ea:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b8ee:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800b8f2:	4313      	orrs	r3, r2
 800b8f4:	bf08      	it	eq
 800b8f6:	2322      	moveq	r3, #34	; 0x22
 800b8f8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b8fc:	bf08      	it	eq
 800b8fe:	6023      	streq	r3, [r4, #0]
 800b900:	e62c      	b.n	800b55c <_strtod_l+0x48c>
 800b902:	f04f 31ff 	mov.w	r1, #4294967295
 800b906:	fa01 f202 	lsl.w	r2, r1, r2
 800b90a:	ea02 0808 	and.w	r8, r2, r8
 800b90e:	e6d9      	b.n	800b6c4 <_strtod_l+0x5f4>
 800b910:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800b914:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800b918:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800b91c:	33e2      	adds	r3, #226	; 0xe2
 800b91e:	fa00 f303 	lsl.w	r3, r0, r3
 800b922:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800b926:	e73f      	b.n	800b7a8 <_strtod_l+0x6d8>
 800b928:	2200      	movs	r2, #0
 800b92a:	2301      	movs	r3, #1
 800b92c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b930:	e73a      	b.n	800b7a8 <_strtod_l+0x6d8>
 800b932:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b934:	461a      	mov	r2, r3
 800b936:	4620      	mov	r0, r4
 800b938:	f002 f8da 	bl	800daf0 <__lshift>
 800b93c:	9012      	str	r0, [sp, #72]	; 0x48
 800b93e:	2800      	cmp	r0, #0
 800b940:	f47f af64 	bne.w	800b80c <_strtod_l+0x73c>
 800b944:	e600      	b.n	800b548 <_strtod_l+0x478>
 800b946:	bf00      	nop
 800b948:	94a03595 	.word	0x94a03595
 800b94c:	3fcfffff 	.word	0x3fcfffff
 800b950:	94a03595 	.word	0x94a03595
 800b954:	3fdfffff 	.word	0x3fdfffff
 800b958:	35afe535 	.word	0x35afe535
 800b95c:	3fe00000 	.word	0x3fe00000
 800b960:	00000000 	.word	0x00000000
 800b964:	39500000 	.word	0x39500000
 800b968:	0800ecc0 	.word	0x0800ecc0
 800b96c:	fffffc02 	.word	0xfffffc02
 800b970:	7ff00000 	.word	0x7ff00000
 800b974:	46cb      	mov	fp, r9
 800b976:	d15f      	bne.n	800ba38 <_strtod_l+0x968>
 800b978:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b97c:	f1ba 0f00 	cmp.w	sl, #0
 800b980:	d02a      	beq.n	800b9d8 <_strtod_l+0x908>
 800b982:	4aa7      	ldr	r2, [pc, #668]	; (800bc20 <_strtod_l+0xb50>)
 800b984:	4293      	cmp	r3, r2
 800b986:	d12b      	bne.n	800b9e0 <_strtod_l+0x910>
 800b988:	9b04      	ldr	r3, [sp, #16]
 800b98a:	4642      	mov	r2, r8
 800b98c:	b1fb      	cbz	r3, 800b9ce <_strtod_l+0x8fe>
 800b98e:	4ba5      	ldr	r3, [pc, #660]	; (800bc24 <_strtod_l+0xb54>)
 800b990:	ea09 0303 	and.w	r3, r9, r3
 800b994:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b998:	f04f 31ff 	mov.w	r1, #4294967295
 800b99c:	d81a      	bhi.n	800b9d4 <_strtod_l+0x904>
 800b99e:	0d1b      	lsrs	r3, r3, #20
 800b9a0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b9a4:	fa01 f303 	lsl.w	r3, r1, r3
 800b9a8:	429a      	cmp	r2, r3
 800b9aa:	d119      	bne.n	800b9e0 <_strtod_l+0x910>
 800b9ac:	4b9e      	ldr	r3, [pc, #632]	; (800bc28 <_strtod_l+0xb58>)
 800b9ae:	459b      	cmp	fp, r3
 800b9b0:	d102      	bne.n	800b9b8 <_strtod_l+0x8e8>
 800b9b2:	3201      	adds	r2, #1
 800b9b4:	f43f adc8 	beq.w	800b548 <_strtod_l+0x478>
 800b9b8:	4b9a      	ldr	r3, [pc, #616]	; (800bc24 <_strtod_l+0xb54>)
 800b9ba:	ea0b 0303 	and.w	r3, fp, r3
 800b9be:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b9c2:	f04f 0800 	mov.w	r8, #0
 800b9c6:	9b04      	ldr	r3, [sp, #16]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d188      	bne.n	800b8de <_strtod_l+0x80e>
 800b9cc:	e5c6      	b.n	800b55c <_strtod_l+0x48c>
 800b9ce:	f04f 33ff 	mov.w	r3, #4294967295
 800b9d2:	e7e9      	b.n	800b9a8 <_strtod_l+0x8d8>
 800b9d4:	460b      	mov	r3, r1
 800b9d6:	e7e7      	b.n	800b9a8 <_strtod_l+0x8d8>
 800b9d8:	ea53 0308 	orrs.w	r3, r3, r8
 800b9dc:	f43f af6f 	beq.w	800b8be <_strtod_l+0x7ee>
 800b9e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9e2:	b1cb      	cbz	r3, 800ba18 <_strtod_l+0x948>
 800b9e4:	ea13 0f0b 	tst.w	r3, fp
 800b9e8:	d0ed      	beq.n	800b9c6 <_strtod_l+0x8f6>
 800b9ea:	9a04      	ldr	r2, [sp, #16]
 800b9ec:	4640      	mov	r0, r8
 800b9ee:	4649      	mov	r1, r9
 800b9f0:	f1ba 0f00 	cmp.w	sl, #0
 800b9f4:	d014      	beq.n	800ba20 <_strtod_l+0x950>
 800b9f6:	f7ff fb4f 	bl	800b098 <sulp>
 800b9fa:	ee38 7b00 	vadd.f64	d7, d8, d0
 800b9fe:	ec59 8b17 	vmov	r8, r9, d7
 800ba02:	e7e0      	b.n	800b9c6 <_strtod_l+0x8f6>
 800ba04:	4013      	ands	r3, r2
 800ba06:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ba0a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800ba0e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800ba12:	f04f 38ff 	mov.w	r8, #4294967295
 800ba16:	e7d6      	b.n	800b9c6 <_strtod_l+0x8f6>
 800ba18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba1a:	ea13 0f08 	tst.w	r3, r8
 800ba1e:	e7e3      	b.n	800b9e8 <_strtod_l+0x918>
 800ba20:	f7ff fb3a 	bl	800b098 <sulp>
 800ba24:	ee38 0b40 	vsub.f64	d0, d8, d0
 800ba28:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800ba2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba30:	ec59 8b10 	vmov	r8, r9, d0
 800ba34:	d1c7      	bne.n	800b9c6 <_strtod_l+0x8f6>
 800ba36:	e5f7      	b.n	800b628 <_strtod_l+0x558>
 800ba38:	4631      	mov	r1, r6
 800ba3a:	4628      	mov	r0, r5
 800ba3c:	f002 fa46 	bl	800decc <__ratio>
 800ba40:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800ba44:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ba48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba4c:	d865      	bhi.n	800bb1a <_strtod_l+0xa4a>
 800ba4e:	f1ba 0f00 	cmp.w	sl, #0
 800ba52:	d042      	beq.n	800bada <_strtod_l+0xa0a>
 800ba54:	4b75      	ldr	r3, [pc, #468]	; (800bc2c <_strtod_l+0xb5c>)
 800ba56:	2200      	movs	r2, #0
 800ba58:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800ba5c:	4871      	ldr	r0, [pc, #452]	; (800bc24 <_strtod_l+0xb54>)
 800ba5e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800bc38 <_strtod_l+0xb68>
 800ba62:	ea0b 0100 	and.w	r1, fp, r0
 800ba66:	4561      	cmp	r1, ip
 800ba68:	f040 808e 	bne.w	800bb88 <_strtod_l+0xab8>
 800ba6c:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800ba70:	ec49 8b10 	vmov	d0, r8, r9
 800ba74:	ec43 2b1c 	vmov	d12, r2, r3
 800ba78:	910a      	str	r1, [sp, #40]	; 0x28
 800ba7a:	f002 f94f 	bl	800dd1c <__ulp>
 800ba7e:	ec49 8b1e 	vmov	d14, r8, r9
 800ba82:	4868      	ldr	r0, [pc, #416]	; (800bc24 <_strtod_l+0xb54>)
 800ba84:	eeac eb00 	vfma.f64	d14, d12, d0
 800ba88:	ee1e 3a90 	vmov	r3, s29
 800ba8c:	4a68      	ldr	r2, [pc, #416]	; (800bc30 <_strtod_l+0xb60>)
 800ba8e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ba90:	4018      	ands	r0, r3
 800ba92:	4290      	cmp	r0, r2
 800ba94:	ec59 8b1e 	vmov	r8, r9, d14
 800ba98:	d94e      	bls.n	800bb38 <_strtod_l+0xa68>
 800ba9a:	ee18 3a90 	vmov	r3, s17
 800ba9e:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800baa2:	4293      	cmp	r3, r2
 800baa4:	d104      	bne.n	800bab0 <_strtod_l+0x9e0>
 800baa6:	ee18 3a10 	vmov	r3, s16
 800baaa:	3301      	adds	r3, #1
 800baac:	f43f ad4c 	beq.w	800b548 <_strtod_l+0x478>
 800bab0:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800bc28 <_strtod_l+0xb58>
 800bab4:	f04f 38ff 	mov.w	r8, #4294967295
 800bab8:	9912      	ldr	r1, [sp, #72]	; 0x48
 800baba:	4620      	mov	r0, r4
 800babc:	f001 fdfc 	bl	800d6b8 <_Bfree>
 800bac0:	4639      	mov	r1, r7
 800bac2:	4620      	mov	r0, r4
 800bac4:	f001 fdf8 	bl	800d6b8 <_Bfree>
 800bac8:	4631      	mov	r1, r6
 800baca:	4620      	mov	r0, r4
 800bacc:	f001 fdf4 	bl	800d6b8 <_Bfree>
 800bad0:	4629      	mov	r1, r5
 800bad2:	4620      	mov	r0, r4
 800bad4:	f001 fdf0 	bl	800d6b8 <_Bfree>
 800bad8:	e619      	b.n	800b70e <_strtod_l+0x63e>
 800bada:	f1b8 0f00 	cmp.w	r8, #0
 800bade:	d112      	bne.n	800bb06 <_strtod_l+0xa36>
 800bae0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bae4:	b9b3      	cbnz	r3, 800bb14 <_strtod_l+0xa44>
 800bae6:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800baea:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800baee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baf2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800baf6:	bf58      	it	pl
 800baf8:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800bafc:	eeb1 7b4d 	vneg.f64	d7, d13
 800bb00:	ec53 2b17 	vmov	r2, r3, d7
 800bb04:	e7aa      	b.n	800ba5c <_strtod_l+0x98c>
 800bb06:	f1b8 0f01 	cmp.w	r8, #1
 800bb0a:	d103      	bne.n	800bb14 <_strtod_l+0xa44>
 800bb0c:	f1b9 0f00 	cmp.w	r9, #0
 800bb10:	f43f ad8a 	beq.w	800b628 <_strtod_l+0x558>
 800bb14:	4b47      	ldr	r3, [pc, #284]	; (800bc34 <_strtod_l+0xb64>)
 800bb16:	2200      	movs	r2, #0
 800bb18:	e79e      	b.n	800ba58 <_strtod_l+0x988>
 800bb1a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800bb1e:	ee20 db0d 	vmul.f64	d13, d0, d13
 800bb22:	f1ba 0f00 	cmp.w	sl, #0
 800bb26:	d104      	bne.n	800bb32 <_strtod_l+0xa62>
 800bb28:	eeb1 7b4d 	vneg.f64	d7, d13
 800bb2c:	ec53 2b17 	vmov	r2, r3, d7
 800bb30:	e794      	b.n	800ba5c <_strtod_l+0x98c>
 800bb32:	eeb0 7b4d 	vmov.f64	d7, d13
 800bb36:	e7f9      	b.n	800bb2c <_strtod_l+0xa5c>
 800bb38:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800bb3c:	9b04      	ldr	r3, [sp, #16]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d1ba      	bne.n	800bab8 <_strtod_l+0x9e8>
 800bb42:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bb46:	0d1b      	lsrs	r3, r3, #20
 800bb48:	051b      	lsls	r3, r3, #20
 800bb4a:	4299      	cmp	r1, r3
 800bb4c:	d1b4      	bne.n	800bab8 <_strtod_l+0x9e8>
 800bb4e:	ec51 0b1d 	vmov	r0, r1, d13
 800bb52:	f7f4 fda1 	bl	8000698 <__aeabi_d2lz>
 800bb56:	f7f4 fd59 	bl	800060c <__aeabi_l2d>
 800bb5a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bb5e:	ec41 0b17 	vmov	d7, r0, r1
 800bb62:	ea43 0308 	orr.w	r3, r3, r8
 800bb66:	ea53 030a 	orrs.w	r3, r3, sl
 800bb6a:	ee3d db47 	vsub.f64	d13, d13, d7
 800bb6e:	d03c      	beq.n	800bbea <_strtod_l+0xb1a>
 800bb70:	eeb4 dbca 	vcmpe.f64	d13, d10
 800bb74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb78:	f53f acf0 	bmi.w	800b55c <_strtod_l+0x48c>
 800bb7c:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800bb80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb84:	dd98      	ble.n	800bab8 <_strtod_l+0x9e8>
 800bb86:	e4e9      	b.n	800b55c <_strtod_l+0x48c>
 800bb88:	9804      	ldr	r0, [sp, #16]
 800bb8a:	b1f0      	cbz	r0, 800bbca <_strtod_l+0xafa>
 800bb8c:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800bb90:	d81b      	bhi.n	800bbca <_strtod_l+0xafa>
 800bb92:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800bc18 <_strtod_l+0xb48>
 800bb96:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800bb9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb9e:	d811      	bhi.n	800bbc4 <_strtod_l+0xaf4>
 800bba0:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800bba4:	ee1d 3a10 	vmov	r3, s26
 800bba8:	2b01      	cmp	r3, #1
 800bbaa:	bf38      	it	cc
 800bbac:	2301      	movcc	r3, #1
 800bbae:	ee0d 3a10 	vmov	s26, r3
 800bbb2:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800bbb6:	f1ba 0f00 	cmp.w	sl, #0
 800bbba:	d113      	bne.n	800bbe4 <_strtod_l+0xb14>
 800bbbc:	eeb1 7b4d 	vneg.f64	d7, d13
 800bbc0:	ec53 2b17 	vmov	r2, r3, d7
 800bbc4:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800bbc8:	1a43      	subs	r3, r0, r1
 800bbca:	eeb0 0b48 	vmov.f64	d0, d8
 800bbce:	ec43 2b1c 	vmov	d12, r2, r3
 800bbd2:	910a      	str	r1, [sp, #40]	; 0x28
 800bbd4:	f002 f8a2 	bl	800dd1c <__ulp>
 800bbd8:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bbda:	eeac 8b00 	vfma.f64	d8, d12, d0
 800bbde:	ec59 8b18 	vmov	r8, r9, d8
 800bbe2:	e7ab      	b.n	800bb3c <_strtod_l+0xa6c>
 800bbe4:	eeb0 7b4d 	vmov.f64	d7, d13
 800bbe8:	e7ea      	b.n	800bbc0 <_strtod_l+0xaf0>
 800bbea:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800bbee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbf2:	f57f af61 	bpl.w	800bab8 <_strtod_l+0x9e8>
 800bbf6:	e4b1      	b.n	800b55c <_strtod_l+0x48c>
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	9308      	str	r3, [sp, #32]
 800bbfc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bbfe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bc00:	6013      	str	r3, [r2, #0]
 800bc02:	f7ff baad 	b.w	800b160 <_strtod_l+0x90>
 800bc06:	2a65      	cmp	r2, #101	; 0x65
 800bc08:	f43f ab9f 	beq.w	800b34a <_strtod_l+0x27a>
 800bc0c:	2a45      	cmp	r2, #69	; 0x45
 800bc0e:	f43f ab9c 	beq.w	800b34a <_strtod_l+0x27a>
 800bc12:	2101      	movs	r1, #1
 800bc14:	f7ff bbd4 	b.w	800b3c0 <_strtod_l+0x2f0>
 800bc18:	ffc00000 	.word	0xffc00000
 800bc1c:	41dfffff 	.word	0x41dfffff
 800bc20:	000fffff 	.word	0x000fffff
 800bc24:	7ff00000 	.word	0x7ff00000
 800bc28:	7fefffff 	.word	0x7fefffff
 800bc2c:	3ff00000 	.word	0x3ff00000
 800bc30:	7c9fffff 	.word	0x7c9fffff
 800bc34:	bff00000 	.word	0xbff00000
 800bc38:	7fe00000 	.word	0x7fe00000

0800bc3c <_strtod_r>:
 800bc3c:	4b01      	ldr	r3, [pc, #4]	; (800bc44 <_strtod_r+0x8>)
 800bc3e:	f7ff ba47 	b.w	800b0d0 <_strtod_l>
 800bc42:	bf00      	nop
 800bc44:	20000074 	.word	0x20000074

0800bc48 <_strtol_l.constprop.0>:
 800bc48:	2b01      	cmp	r3, #1
 800bc4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc4e:	d001      	beq.n	800bc54 <_strtol_l.constprop.0+0xc>
 800bc50:	2b24      	cmp	r3, #36	; 0x24
 800bc52:	d906      	bls.n	800bc62 <_strtol_l.constprop.0+0x1a>
 800bc54:	f7fe faf2 	bl	800a23c <__errno>
 800bc58:	2316      	movs	r3, #22
 800bc5a:	6003      	str	r3, [r0, #0]
 800bc5c:	2000      	movs	r0, #0
 800bc5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc62:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bd48 <_strtol_l.constprop.0+0x100>
 800bc66:	460d      	mov	r5, r1
 800bc68:	462e      	mov	r6, r5
 800bc6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bc6e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800bc72:	f017 0708 	ands.w	r7, r7, #8
 800bc76:	d1f7      	bne.n	800bc68 <_strtol_l.constprop.0+0x20>
 800bc78:	2c2d      	cmp	r4, #45	; 0x2d
 800bc7a:	d132      	bne.n	800bce2 <_strtol_l.constprop.0+0x9a>
 800bc7c:	782c      	ldrb	r4, [r5, #0]
 800bc7e:	2701      	movs	r7, #1
 800bc80:	1cb5      	adds	r5, r6, #2
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d05b      	beq.n	800bd3e <_strtol_l.constprop.0+0xf6>
 800bc86:	2b10      	cmp	r3, #16
 800bc88:	d109      	bne.n	800bc9e <_strtol_l.constprop.0+0x56>
 800bc8a:	2c30      	cmp	r4, #48	; 0x30
 800bc8c:	d107      	bne.n	800bc9e <_strtol_l.constprop.0+0x56>
 800bc8e:	782c      	ldrb	r4, [r5, #0]
 800bc90:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bc94:	2c58      	cmp	r4, #88	; 0x58
 800bc96:	d14d      	bne.n	800bd34 <_strtol_l.constprop.0+0xec>
 800bc98:	786c      	ldrb	r4, [r5, #1]
 800bc9a:	2310      	movs	r3, #16
 800bc9c:	3502      	adds	r5, #2
 800bc9e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800bca2:	f108 38ff 	add.w	r8, r8, #4294967295
 800bca6:	f04f 0c00 	mov.w	ip, #0
 800bcaa:	fbb8 f9f3 	udiv	r9, r8, r3
 800bcae:	4666      	mov	r6, ip
 800bcb0:	fb03 8a19 	mls	sl, r3, r9, r8
 800bcb4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800bcb8:	f1be 0f09 	cmp.w	lr, #9
 800bcbc:	d816      	bhi.n	800bcec <_strtol_l.constprop.0+0xa4>
 800bcbe:	4674      	mov	r4, lr
 800bcc0:	42a3      	cmp	r3, r4
 800bcc2:	dd24      	ble.n	800bd0e <_strtol_l.constprop.0+0xc6>
 800bcc4:	f1bc 0f00 	cmp.w	ip, #0
 800bcc8:	db1e      	blt.n	800bd08 <_strtol_l.constprop.0+0xc0>
 800bcca:	45b1      	cmp	r9, r6
 800bccc:	d31c      	bcc.n	800bd08 <_strtol_l.constprop.0+0xc0>
 800bcce:	d101      	bne.n	800bcd4 <_strtol_l.constprop.0+0x8c>
 800bcd0:	45a2      	cmp	sl, r4
 800bcd2:	db19      	blt.n	800bd08 <_strtol_l.constprop.0+0xc0>
 800bcd4:	fb06 4603 	mla	r6, r6, r3, r4
 800bcd8:	f04f 0c01 	mov.w	ip, #1
 800bcdc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bce0:	e7e8      	b.n	800bcb4 <_strtol_l.constprop.0+0x6c>
 800bce2:	2c2b      	cmp	r4, #43	; 0x2b
 800bce4:	bf04      	itt	eq
 800bce6:	782c      	ldrbeq	r4, [r5, #0]
 800bce8:	1cb5      	addeq	r5, r6, #2
 800bcea:	e7ca      	b.n	800bc82 <_strtol_l.constprop.0+0x3a>
 800bcec:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800bcf0:	f1be 0f19 	cmp.w	lr, #25
 800bcf4:	d801      	bhi.n	800bcfa <_strtol_l.constprop.0+0xb2>
 800bcf6:	3c37      	subs	r4, #55	; 0x37
 800bcf8:	e7e2      	b.n	800bcc0 <_strtol_l.constprop.0+0x78>
 800bcfa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800bcfe:	f1be 0f19 	cmp.w	lr, #25
 800bd02:	d804      	bhi.n	800bd0e <_strtol_l.constprop.0+0xc6>
 800bd04:	3c57      	subs	r4, #87	; 0x57
 800bd06:	e7db      	b.n	800bcc0 <_strtol_l.constprop.0+0x78>
 800bd08:	f04f 3cff 	mov.w	ip, #4294967295
 800bd0c:	e7e6      	b.n	800bcdc <_strtol_l.constprop.0+0x94>
 800bd0e:	f1bc 0f00 	cmp.w	ip, #0
 800bd12:	da05      	bge.n	800bd20 <_strtol_l.constprop.0+0xd8>
 800bd14:	2322      	movs	r3, #34	; 0x22
 800bd16:	6003      	str	r3, [r0, #0]
 800bd18:	4646      	mov	r6, r8
 800bd1a:	b942      	cbnz	r2, 800bd2e <_strtol_l.constprop.0+0xe6>
 800bd1c:	4630      	mov	r0, r6
 800bd1e:	e79e      	b.n	800bc5e <_strtol_l.constprop.0+0x16>
 800bd20:	b107      	cbz	r7, 800bd24 <_strtol_l.constprop.0+0xdc>
 800bd22:	4276      	negs	r6, r6
 800bd24:	2a00      	cmp	r2, #0
 800bd26:	d0f9      	beq.n	800bd1c <_strtol_l.constprop.0+0xd4>
 800bd28:	f1bc 0f00 	cmp.w	ip, #0
 800bd2c:	d000      	beq.n	800bd30 <_strtol_l.constprop.0+0xe8>
 800bd2e:	1e69      	subs	r1, r5, #1
 800bd30:	6011      	str	r1, [r2, #0]
 800bd32:	e7f3      	b.n	800bd1c <_strtol_l.constprop.0+0xd4>
 800bd34:	2430      	movs	r4, #48	; 0x30
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d1b1      	bne.n	800bc9e <_strtol_l.constprop.0+0x56>
 800bd3a:	2308      	movs	r3, #8
 800bd3c:	e7af      	b.n	800bc9e <_strtol_l.constprop.0+0x56>
 800bd3e:	2c30      	cmp	r4, #48	; 0x30
 800bd40:	d0a5      	beq.n	800bc8e <_strtol_l.constprop.0+0x46>
 800bd42:	230a      	movs	r3, #10
 800bd44:	e7ab      	b.n	800bc9e <_strtol_l.constprop.0+0x56>
 800bd46:	bf00      	nop
 800bd48:	0800ece9 	.word	0x0800ece9

0800bd4c <_strtol_r>:
 800bd4c:	f7ff bf7c 	b.w	800bc48 <_strtol_l.constprop.0>

0800bd50 <__swbuf_r>:
 800bd50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd52:	460e      	mov	r6, r1
 800bd54:	4614      	mov	r4, r2
 800bd56:	4605      	mov	r5, r0
 800bd58:	b118      	cbz	r0, 800bd62 <__swbuf_r+0x12>
 800bd5a:	6983      	ldr	r3, [r0, #24]
 800bd5c:	b90b      	cbnz	r3, 800bd62 <__swbuf_r+0x12>
 800bd5e:	f000 ffcb 	bl	800ccf8 <__sinit>
 800bd62:	4b21      	ldr	r3, [pc, #132]	; (800bde8 <__swbuf_r+0x98>)
 800bd64:	429c      	cmp	r4, r3
 800bd66:	d12b      	bne.n	800bdc0 <__swbuf_r+0x70>
 800bd68:	686c      	ldr	r4, [r5, #4]
 800bd6a:	69a3      	ldr	r3, [r4, #24]
 800bd6c:	60a3      	str	r3, [r4, #8]
 800bd6e:	89a3      	ldrh	r3, [r4, #12]
 800bd70:	071a      	lsls	r2, r3, #28
 800bd72:	d52f      	bpl.n	800bdd4 <__swbuf_r+0x84>
 800bd74:	6923      	ldr	r3, [r4, #16]
 800bd76:	b36b      	cbz	r3, 800bdd4 <__swbuf_r+0x84>
 800bd78:	6923      	ldr	r3, [r4, #16]
 800bd7a:	6820      	ldr	r0, [r4, #0]
 800bd7c:	1ac0      	subs	r0, r0, r3
 800bd7e:	6963      	ldr	r3, [r4, #20]
 800bd80:	b2f6      	uxtb	r6, r6
 800bd82:	4283      	cmp	r3, r0
 800bd84:	4637      	mov	r7, r6
 800bd86:	dc04      	bgt.n	800bd92 <__swbuf_r+0x42>
 800bd88:	4621      	mov	r1, r4
 800bd8a:	4628      	mov	r0, r5
 800bd8c:	f000 ff20 	bl	800cbd0 <_fflush_r>
 800bd90:	bb30      	cbnz	r0, 800bde0 <__swbuf_r+0x90>
 800bd92:	68a3      	ldr	r3, [r4, #8]
 800bd94:	3b01      	subs	r3, #1
 800bd96:	60a3      	str	r3, [r4, #8]
 800bd98:	6823      	ldr	r3, [r4, #0]
 800bd9a:	1c5a      	adds	r2, r3, #1
 800bd9c:	6022      	str	r2, [r4, #0]
 800bd9e:	701e      	strb	r6, [r3, #0]
 800bda0:	6963      	ldr	r3, [r4, #20]
 800bda2:	3001      	adds	r0, #1
 800bda4:	4283      	cmp	r3, r0
 800bda6:	d004      	beq.n	800bdb2 <__swbuf_r+0x62>
 800bda8:	89a3      	ldrh	r3, [r4, #12]
 800bdaa:	07db      	lsls	r3, r3, #31
 800bdac:	d506      	bpl.n	800bdbc <__swbuf_r+0x6c>
 800bdae:	2e0a      	cmp	r6, #10
 800bdb0:	d104      	bne.n	800bdbc <__swbuf_r+0x6c>
 800bdb2:	4621      	mov	r1, r4
 800bdb4:	4628      	mov	r0, r5
 800bdb6:	f000 ff0b 	bl	800cbd0 <_fflush_r>
 800bdba:	b988      	cbnz	r0, 800bde0 <__swbuf_r+0x90>
 800bdbc:	4638      	mov	r0, r7
 800bdbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdc0:	4b0a      	ldr	r3, [pc, #40]	; (800bdec <__swbuf_r+0x9c>)
 800bdc2:	429c      	cmp	r4, r3
 800bdc4:	d101      	bne.n	800bdca <__swbuf_r+0x7a>
 800bdc6:	68ac      	ldr	r4, [r5, #8]
 800bdc8:	e7cf      	b.n	800bd6a <__swbuf_r+0x1a>
 800bdca:	4b09      	ldr	r3, [pc, #36]	; (800bdf0 <__swbuf_r+0xa0>)
 800bdcc:	429c      	cmp	r4, r3
 800bdce:	bf08      	it	eq
 800bdd0:	68ec      	ldreq	r4, [r5, #12]
 800bdd2:	e7ca      	b.n	800bd6a <__swbuf_r+0x1a>
 800bdd4:	4621      	mov	r1, r4
 800bdd6:	4628      	mov	r0, r5
 800bdd8:	f000 f80c 	bl	800bdf4 <__swsetup_r>
 800bddc:	2800      	cmp	r0, #0
 800bdde:	d0cb      	beq.n	800bd78 <__swbuf_r+0x28>
 800bde0:	f04f 37ff 	mov.w	r7, #4294967295
 800bde4:	e7ea      	b.n	800bdbc <__swbuf_r+0x6c>
 800bde6:	bf00      	nop
 800bde8:	0800ee9c 	.word	0x0800ee9c
 800bdec:	0800eebc 	.word	0x0800eebc
 800bdf0:	0800ee7c 	.word	0x0800ee7c

0800bdf4 <__swsetup_r>:
 800bdf4:	4b32      	ldr	r3, [pc, #200]	; (800bec0 <__swsetup_r+0xcc>)
 800bdf6:	b570      	push	{r4, r5, r6, lr}
 800bdf8:	681d      	ldr	r5, [r3, #0]
 800bdfa:	4606      	mov	r6, r0
 800bdfc:	460c      	mov	r4, r1
 800bdfe:	b125      	cbz	r5, 800be0a <__swsetup_r+0x16>
 800be00:	69ab      	ldr	r3, [r5, #24]
 800be02:	b913      	cbnz	r3, 800be0a <__swsetup_r+0x16>
 800be04:	4628      	mov	r0, r5
 800be06:	f000 ff77 	bl	800ccf8 <__sinit>
 800be0a:	4b2e      	ldr	r3, [pc, #184]	; (800bec4 <__swsetup_r+0xd0>)
 800be0c:	429c      	cmp	r4, r3
 800be0e:	d10f      	bne.n	800be30 <__swsetup_r+0x3c>
 800be10:	686c      	ldr	r4, [r5, #4]
 800be12:	89a3      	ldrh	r3, [r4, #12]
 800be14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be18:	0719      	lsls	r1, r3, #28
 800be1a:	d42c      	bmi.n	800be76 <__swsetup_r+0x82>
 800be1c:	06dd      	lsls	r5, r3, #27
 800be1e:	d411      	bmi.n	800be44 <__swsetup_r+0x50>
 800be20:	2309      	movs	r3, #9
 800be22:	6033      	str	r3, [r6, #0]
 800be24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800be28:	81a3      	strh	r3, [r4, #12]
 800be2a:	f04f 30ff 	mov.w	r0, #4294967295
 800be2e:	e03e      	b.n	800beae <__swsetup_r+0xba>
 800be30:	4b25      	ldr	r3, [pc, #148]	; (800bec8 <__swsetup_r+0xd4>)
 800be32:	429c      	cmp	r4, r3
 800be34:	d101      	bne.n	800be3a <__swsetup_r+0x46>
 800be36:	68ac      	ldr	r4, [r5, #8]
 800be38:	e7eb      	b.n	800be12 <__swsetup_r+0x1e>
 800be3a:	4b24      	ldr	r3, [pc, #144]	; (800becc <__swsetup_r+0xd8>)
 800be3c:	429c      	cmp	r4, r3
 800be3e:	bf08      	it	eq
 800be40:	68ec      	ldreq	r4, [r5, #12]
 800be42:	e7e6      	b.n	800be12 <__swsetup_r+0x1e>
 800be44:	0758      	lsls	r0, r3, #29
 800be46:	d512      	bpl.n	800be6e <__swsetup_r+0x7a>
 800be48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be4a:	b141      	cbz	r1, 800be5e <__swsetup_r+0x6a>
 800be4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be50:	4299      	cmp	r1, r3
 800be52:	d002      	beq.n	800be5a <__swsetup_r+0x66>
 800be54:	4630      	mov	r0, r6
 800be56:	f002 f8c3 	bl	800dfe0 <_free_r>
 800be5a:	2300      	movs	r3, #0
 800be5c:	6363      	str	r3, [r4, #52]	; 0x34
 800be5e:	89a3      	ldrh	r3, [r4, #12]
 800be60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800be64:	81a3      	strh	r3, [r4, #12]
 800be66:	2300      	movs	r3, #0
 800be68:	6063      	str	r3, [r4, #4]
 800be6a:	6923      	ldr	r3, [r4, #16]
 800be6c:	6023      	str	r3, [r4, #0]
 800be6e:	89a3      	ldrh	r3, [r4, #12]
 800be70:	f043 0308 	orr.w	r3, r3, #8
 800be74:	81a3      	strh	r3, [r4, #12]
 800be76:	6923      	ldr	r3, [r4, #16]
 800be78:	b94b      	cbnz	r3, 800be8e <__swsetup_r+0x9a>
 800be7a:	89a3      	ldrh	r3, [r4, #12]
 800be7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800be80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be84:	d003      	beq.n	800be8e <__swsetup_r+0x9a>
 800be86:	4621      	mov	r1, r4
 800be88:	4630      	mov	r0, r6
 800be8a:	f001 fb6d 	bl	800d568 <__smakebuf_r>
 800be8e:	89a0      	ldrh	r0, [r4, #12]
 800be90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be94:	f010 0301 	ands.w	r3, r0, #1
 800be98:	d00a      	beq.n	800beb0 <__swsetup_r+0xbc>
 800be9a:	2300      	movs	r3, #0
 800be9c:	60a3      	str	r3, [r4, #8]
 800be9e:	6963      	ldr	r3, [r4, #20]
 800bea0:	425b      	negs	r3, r3
 800bea2:	61a3      	str	r3, [r4, #24]
 800bea4:	6923      	ldr	r3, [r4, #16]
 800bea6:	b943      	cbnz	r3, 800beba <__swsetup_r+0xc6>
 800bea8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800beac:	d1ba      	bne.n	800be24 <__swsetup_r+0x30>
 800beae:	bd70      	pop	{r4, r5, r6, pc}
 800beb0:	0781      	lsls	r1, r0, #30
 800beb2:	bf58      	it	pl
 800beb4:	6963      	ldrpl	r3, [r4, #20]
 800beb6:	60a3      	str	r3, [r4, #8]
 800beb8:	e7f4      	b.n	800bea4 <__swsetup_r+0xb0>
 800beba:	2000      	movs	r0, #0
 800bebc:	e7f7      	b.n	800beae <__swsetup_r+0xba>
 800bebe:	bf00      	nop
 800bec0:	2000000c 	.word	0x2000000c
 800bec4:	0800ee9c 	.word	0x0800ee9c
 800bec8:	0800eebc 	.word	0x0800eebc
 800becc:	0800ee7c 	.word	0x0800ee7c

0800bed0 <quorem>:
 800bed0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bed4:	6903      	ldr	r3, [r0, #16]
 800bed6:	690c      	ldr	r4, [r1, #16]
 800bed8:	42a3      	cmp	r3, r4
 800beda:	4607      	mov	r7, r0
 800bedc:	f2c0 8081 	blt.w	800bfe2 <quorem+0x112>
 800bee0:	3c01      	subs	r4, #1
 800bee2:	f101 0814 	add.w	r8, r1, #20
 800bee6:	f100 0514 	add.w	r5, r0, #20
 800beea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800beee:	9301      	str	r3, [sp, #4]
 800bef0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bef4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bef8:	3301      	adds	r3, #1
 800befa:	429a      	cmp	r2, r3
 800befc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bf00:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bf04:	fbb2 f6f3 	udiv	r6, r2, r3
 800bf08:	d331      	bcc.n	800bf6e <quorem+0x9e>
 800bf0a:	f04f 0e00 	mov.w	lr, #0
 800bf0e:	4640      	mov	r0, r8
 800bf10:	46ac      	mov	ip, r5
 800bf12:	46f2      	mov	sl, lr
 800bf14:	f850 2b04 	ldr.w	r2, [r0], #4
 800bf18:	b293      	uxth	r3, r2
 800bf1a:	fb06 e303 	mla	r3, r6, r3, lr
 800bf1e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bf22:	b29b      	uxth	r3, r3
 800bf24:	ebaa 0303 	sub.w	r3, sl, r3
 800bf28:	f8dc a000 	ldr.w	sl, [ip]
 800bf2c:	0c12      	lsrs	r2, r2, #16
 800bf2e:	fa13 f38a 	uxtah	r3, r3, sl
 800bf32:	fb06 e202 	mla	r2, r6, r2, lr
 800bf36:	9300      	str	r3, [sp, #0]
 800bf38:	9b00      	ldr	r3, [sp, #0]
 800bf3a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bf3e:	b292      	uxth	r2, r2
 800bf40:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bf44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bf48:	f8bd 3000 	ldrh.w	r3, [sp]
 800bf4c:	4581      	cmp	r9, r0
 800bf4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf52:	f84c 3b04 	str.w	r3, [ip], #4
 800bf56:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bf5a:	d2db      	bcs.n	800bf14 <quorem+0x44>
 800bf5c:	f855 300b 	ldr.w	r3, [r5, fp]
 800bf60:	b92b      	cbnz	r3, 800bf6e <quorem+0x9e>
 800bf62:	9b01      	ldr	r3, [sp, #4]
 800bf64:	3b04      	subs	r3, #4
 800bf66:	429d      	cmp	r5, r3
 800bf68:	461a      	mov	r2, r3
 800bf6a:	d32e      	bcc.n	800bfca <quorem+0xfa>
 800bf6c:	613c      	str	r4, [r7, #16]
 800bf6e:	4638      	mov	r0, r7
 800bf70:	f001 fe2e 	bl	800dbd0 <__mcmp>
 800bf74:	2800      	cmp	r0, #0
 800bf76:	db24      	blt.n	800bfc2 <quorem+0xf2>
 800bf78:	3601      	adds	r6, #1
 800bf7a:	4628      	mov	r0, r5
 800bf7c:	f04f 0c00 	mov.w	ip, #0
 800bf80:	f858 2b04 	ldr.w	r2, [r8], #4
 800bf84:	f8d0 e000 	ldr.w	lr, [r0]
 800bf88:	b293      	uxth	r3, r2
 800bf8a:	ebac 0303 	sub.w	r3, ip, r3
 800bf8e:	0c12      	lsrs	r2, r2, #16
 800bf90:	fa13 f38e 	uxtah	r3, r3, lr
 800bf94:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bf98:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bf9c:	b29b      	uxth	r3, r3
 800bf9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bfa2:	45c1      	cmp	r9, r8
 800bfa4:	f840 3b04 	str.w	r3, [r0], #4
 800bfa8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bfac:	d2e8      	bcs.n	800bf80 <quorem+0xb0>
 800bfae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bfb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bfb6:	b922      	cbnz	r2, 800bfc2 <quorem+0xf2>
 800bfb8:	3b04      	subs	r3, #4
 800bfba:	429d      	cmp	r5, r3
 800bfbc:	461a      	mov	r2, r3
 800bfbe:	d30a      	bcc.n	800bfd6 <quorem+0x106>
 800bfc0:	613c      	str	r4, [r7, #16]
 800bfc2:	4630      	mov	r0, r6
 800bfc4:	b003      	add	sp, #12
 800bfc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfca:	6812      	ldr	r2, [r2, #0]
 800bfcc:	3b04      	subs	r3, #4
 800bfce:	2a00      	cmp	r2, #0
 800bfd0:	d1cc      	bne.n	800bf6c <quorem+0x9c>
 800bfd2:	3c01      	subs	r4, #1
 800bfd4:	e7c7      	b.n	800bf66 <quorem+0x96>
 800bfd6:	6812      	ldr	r2, [r2, #0]
 800bfd8:	3b04      	subs	r3, #4
 800bfda:	2a00      	cmp	r2, #0
 800bfdc:	d1f0      	bne.n	800bfc0 <quorem+0xf0>
 800bfde:	3c01      	subs	r4, #1
 800bfe0:	e7eb      	b.n	800bfba <quorem+0xea>
 800bfe2:	2000      	movs	r0, #0
 800bfe4:	e7ee      	b.n	800bfc4 <quorem+0xf4>
	...

0800bfe8 <_dtoa_r>:
 800bfe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfec:	ed2d 8b02 	vpush	{d8}
 800bff0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bff2:	b091      	sub	sp, #68	; 0x44
 800bff4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bff8:	ec59 8b10 	vmov	r8, r9, d0
 800bffc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800bffe:	9106      	str	r1, [sp, #24]
 800c000:	4606      	mov	r6, r0
 800c002:	9208      	str	r2, [sp, #32]
 800c004:	930c      	str	r3, [sp, #48]	; 0x30
 800c006:	b975      	cbnz	r5, 800c026 <_dtoa_r+0x3e>
 800c008:	2010      	movs	r0, #16
 800c00a:	f001 faed 	bl	800d5e8 <malloc>
 800c00e:	4602      	mov	r2, r0
 800c010:	6270      	str	r0, [r6, #36]	; 0x24
 800c012:	b920      	cbnz	r0, 800c01e <_dtoa_r+0x36>
 800c014:	4baa      	ldr	r3, [pc, #680]	; (800c2c0 <_dtoa_r+0x2d8>)
 800c016:	21ea      	movs	r1, #234	; 0xea
 800c018:	48aa      	ldr	r0, [pc, #680]	; (800c2c4 <_dtoa_r+0x2dc>)
 800c01a:	f002 fc07 	bl	800e82c <__assert_func>
 800c01e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c022:	6005      	str	r5, [r0, #0]
 800c024:	60c5      	str	r5, [r0, #12]
 800c026:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c028:	6819      	ldr	r1, [r3, #0]
 800c02a:	b151      	cbz	r1, 800c042 <_dtoa_r+0x5a>
 800c02c:	685a      	ldr	r2, [r3, #4]
 800c02e:	604a      	str	r2, [r1, #4]
 800c030:	2301      	movs	r3, #1
 800c032:	4093      	lsls	r3, r2
 800c034:	608b      	str	r3, [r1, #8]
 800c036:	4630      	mov	r0, r6
 800c038:	f001 fb3e 	bl	800d6b8 <_Bfree>
 800c03c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c03e:	2200      	movs	r2, #0
 800c040:	601a      	str	r2, [r3, #0]
 800c042:	f1b9 0300 	subs.w	r3, r9, #0
 800c046:	bfbb      	ittet	lt
 800c048:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c04c:	9303      	strlt	r3, [sp, #12]
 800c04e:	2300      	movge	r3, #0
 800c050:	2201      	movlt	r2, #1
 800c052:	bfac      	ite	ge
 800c054:	6023      	strge	r3, [r4, #0]
 800c056:	6022      	strlt	r2, [r4, #0]
 800c058:	4b9b      	ldr	r3, [pc, #620]	; (800c2c8 <_dtoa_r+0x2e0>)
 800c05a:	9c03      	ldr	r4, [sp, #12]
 800c05c:	43a3      	bics	r3, r4
 800c05e:	d11c      	bne.n	800c09a <_dtoa_r+0xb2>
 800c060:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c062:	f242 730f 	movw	r3, #9999	; 0x270f
 800c066:	6013      	str	r3, [r2, #0]
 800c068:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800c06c:	ea53 0308 	orrs.w	r3, r3, r8
 800c070:	f000 84fd 	beq.w	800ca6e <_dtoa_r+0xa86>
 800c074:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c076:	b963      	cbnz	r3, 800c092 <_dtoa_r+0xaa>
 800c078:	4b94      	ldr	r3, [pc, #592]	; (800c2cc <_dtoa_r+0x2e4>)
 800c07a:	e01f      	b.n	800c0bc <_dtoa_r+0xd4>
 800c07c:	4b94      	ldr	r3, [pc, #592]	; (800c2d0 <_dtoa_r+0x2e8>)
 800c07e:	9301      	str	r3, [sp, #4]
 800c080:	3308      	adds	r3, #8
 800c082:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c084:	6013      	str	r3, [r2, #0]
 800c086:	9801      	ldr	r0, [sp, #4]
 800c088:	b011      	add	sp, #68	; 0x44
 800c08a:	ecbd 8b02 	vpop	{d8}
 800c08e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c092:	4b8e      	ldr	r3, [pc, #568]	; (800c2cc <_dtoa_r+0x2e4>)
 800c094:	9301      	str	r3, [sp, #4]
 800c096:	3303      	adds	r3, #3
 800c098:	e7f3      	b.n	800c082 <_dtoa_r+0x9a>
 800c09a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800c09e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c0a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0a6:	d10b      	bne.n	800c0c0 <_dtoa_r+0xd8>
 800c0a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	6013      	str	r3, [r2, #0]
 800c0ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	f000 84d9 	beq.w	800ca68 <_dtoa_r+0xa80>
 800c0b6:	4887      	ldr	r0, [pc, #540]	; (800c2d4 <_dtoa_r+0x2ec>)
 800c0b8:	6018      	str	r0, [r3, #0]
 800c0ba:	1e43      	subs	r3, r0, #1
 800c0bc:	9301      	str	r3, [sp, #4]
 800c0be:	e7e2      	b.n	800c086 <_dtoa_r+0x9e>
 800c0c0:	a90f      	add	r1, sp, #60	; 0x3c
 800c0c2:	aa0e      	add	r2, sp, #56	; 0x38
 800c0c4:	4630      	mov	r0, r6
 800c0c6:	eeb0 0b48 	vmov.f64	d0, d8
 800c0ca:	f001 fea3 	bl	800de14 <__d2b>
 800c0ce:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800c0d2:	4605      	mov	r5, r0
 800c0d4:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c0d6:	2900      	cmp	r1, #0
 800c0d8:	d046      	beq.n	800c168 <_dtoa_r+0x180>
 800c0da:	ee18 4a90 	vmov	r4, s17
 800c0de:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c0e2:	ec53 2b18 	vmov	r2, r3, d8
 800c0e6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800c0ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c0ee:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c0f2:	2400      	movs	r4, #0
 800c0f4:	ec43 2b16 	vmov	d6, r2, r3
 800c0f8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800c0fc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800c2a8 <_dtoa_r+0x2c0>
 800c100:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c104:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800c2b0 <_dtoa_r+0x2c8>
 800c108:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c10c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800c2b8 <_dtoa_r+0x2d0>
 800c110:	ee07 1a90 	vmov	s15, r1
 800c114:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800c118:	eeb0 7b46 	vmov.f64	d7, d6
 800c11c:	eea4 7b05 	vfma.f64	d7, d4, d5
 800c120:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800c124:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800c128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c12c:	ee16 ba90 	vmov	fp, s13
 800c130:	940a      	str	r4, [sp, #40]	; 0x28
 800c132:	d508      	bpl.n	800c146 <_dtoa_r+0x15e>
 800c134:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800c138:	eeb4 6b47 	vcmp.f64	d6, d7
 800c13c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c140:	bf18      	it	ne
 800c142:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800c146:	f1bb 0f16 	cmp.w	fp, #22
 800c14a:	d82f      	bhi.n	800c1ac <_dtoa_r+0x1c4>
 800c14c:	4b62      	ldr	r3, [pc, #392]	; (800c2d8 <_dtoa_r+0x2f0>)
 800c14e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c152:	ed93 7b00 	vldr	d7, [r3]
 800c156:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c15a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c15e:	d501      	bpl.n	800c164 <_dtoa_r+0x17c>
 800c160:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c164:	2300      	movs	r3, #0
 800c166:	e022      	b.n	800c1ae <_dtoa_r+0x1c6>
 800c168:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c16a:	4401      	add	r1, r0
 800c16c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800c170:	2b20      	cmp	r3, #32
 800c172:	bfc1      	itttt	gt
 800c174:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c178:	fa04 f303 	lslgt.w	r3, r4, r3
 800c17c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800c180:	fa28 f804 	lsrgt.w	r8, r8, r4
 800c184:	bfd6      	itet	le
 800c186:	f1c3 0320 	rsble	r3, r3, #32
 800c18a:	ea43 0808 	orrgt.w	r8, r3, r8
 800c18e:	fa08 f803 	lslle.w	r8, r8, r3
 800c192:	ee07 8a90 	vmov	s15, r8
 800c196:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c19a:	3901      	subs	r1, #1
 800c19c:	ee17 4a90 	vmov	r4, s15
 800c1a0:	ec53 2b17 	vmov	r2, r3, d7
 800c1a4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800c1a8:	2401      	movs	r4, #1
 800c1aa:	e7a3      	b.n	800c0f4 <_dtoa_r+0x10c>
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	930b      	str	r3, [sp, #44]	; 0x2c
 800c1b0:	1a43      	subs	r3, r0, r1
 800c1b2:	1e5a      	subs	r2, r3, #1
 800c1b4:	bf45      	ittet	mi
 800c1b6:	f1c3 0301 	rsbmi	r3, r3, #1
 800c1ba:	9304      	strmi	r3, [sp, #16]
 800c1bc:	2300      	movpl	r3, #0
 800c1be:	2300      	movmi	r3, #0
 800c1c0:	9205      	str	r2, [sp, #20]
 800c1c2:	bf54      	ite	pl
 800c1c4:	9304      	strpl	r3, [sp, #16]
 800c1c6:	9305      	strmi	r3, [sp, #20]
 800c1c8:	f1bb 0f00 	cmp.w	fp, #0
 800c1cc:	db18      	blt.n	800c200 <_dtoa_r+0x218>
 800c1ce:	9b05      	ldr	r3, [sp, #20]
 800c1d0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800c1d4:	445b      	add	r3, fp
 800c1d6:	9305      	str	r3, [sp, #20]
 800c1d8:	2300      	movs	r3, #0
 800c1da:	9a06      	ldr	r2, [sp, #24]
 800c1dc:	2a09      	cmp	r2, #9
 800c1de:	d849      	bhi.n	800c274 <_dtoa_r+0x28c>
 800c1e0:	2a05      	cmp	r2, #5
 800c1e2:	bfc4      	itt	gt
 800c1e4:	3a04      	subgt	r2, #4
 800c1e6:	9206      	strgt	r2, [sp, #24]
 800c1e8:	9a06      	ldr	r2, [sp, #24]
 800c1ea:	f1a2 0202 	sub.w	r2, r2, #2
 800c1ee:	bfcc      	ite	gt
 800c1f0:	2400      	movgt	r4, #0
 800c1f2:	2401      	movle	r4, #1
 800c1f4:	2a03      	cmp	r2, #3
 800c1f6:	d848      	bhi.n	800c28a <_dtoa_r+0x2a2>
 800c1f8:	e8df f002 	tbb	[pc, r2]
 800c1fc:	3a2c2e0b 	.word	0x3a2c2e0b
 800c200:	9b04      	ldr	r3, [sp, #16]
 800c202:	2200      	movs	r2, #0
 800c204:	eba3 030b 	sub.w	r3, r3, fp
 800c208:	9304      	str	r3, [sp, #16]
 800c20a:	9209      	str	r2, [sp, #36]	; 0x24
 800c20c:	f1cb 0300 	rsb	r3, fp, #0
 800c210:	e7e3      	b.n	800c1da <_dtoa_r+0x1f2>
 800c212:	2200      	movs	r2, #0
 800c214:	9207      	str	r2, [sp, #28]
 800c216:	9a08      	ldr	r2, [sp, #32]
 800c218:	2a00      	cmp	r2, #0
 800c21a:	dc39      	bgt.n	800c290 <_dtoa_r+0x2a8>
 800c21c:	f04f 0a01 	mov.w	sl, #1
 800c220:	46d1      	mov	r9, sl
 800c222:	4652      	mov	r2, sl
 800c224:	f8cd a020 	str.w	sl, [sp, #32]
 800c228:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800c22a:	2100      	movs	r1, #0
 800c22c:	6079      	str	r1, [r7, #4]
 800c22e:	2004      	movs	r0, #4
 800c230:	f100 0c14 	add.w	ip, r0, #20
 800c234:	4594      	cmp	ip, r2
 800c236:	6879      	ldr	r1, [r7, #4]
 800c238:	d92f      	bls.n	800c29a <_dtoa_r+0x2b2>
 800c23a:	4630      	mov	r0, r6
 800c23c:	930d      	str	r3, [sp, #52]	; 0x34
 800c23e:	f001 f9fb 	bl	800d638 <_Balloc>
 800c242:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c244:	9001      	str	r0, [sp, #4]
 800c246:	4602      	mov	r2, r0
 800c248:	2800      	cmp	r0, #0
 800c24a:	d149      	bne.n	800c2e0 <_dtoa_r+0x2f8>
 800c24c:	4b23      	ldr	r3, [pc, #140]	; (800c2dc <_dtoa_r+0x2f4>)
 800c24e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c252:	e6e1      	b.n	800c018 <_dtoa_r+0x30>
 800c254:	2201      	movs	r2, #1
 800c256:	e7dd      	b.n	800c214 <_dtoa_r+0x22c>
 800c258:	2200      	movs	r2, #0
 800c25a:	9207      	str	r2, [sp, #28]
 800c25c:	9a08      	ldr	r2, [sp, #32]
 800c25e:	eb0b 0a02 	add.w	sl, fp, r2
 800c262:	f10a 0901 	add.w	r9, sl, #1
 800c266:	464a      	mov	r2, r9
 800c268:	2a01      	cmp	r2, #1
 800c26a:	bfb8      	it	lt
 800c26c:	2201      	movlt	r2, #1
 800c26e:	e7db      	b.n	800c228 <_dtoa_r+0x240>
 800c270:	2201      	movs	r2, #1
 800c272:	e7f2      	b.n	800c25a <_dtoa_r+0x272>
 800c274:	2401      	movs	r4, #1
 800c276:	2200      	movs	r2, #0
 800c278:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800c27c:	f04f 3aff 	mov.w	sl, #4294967295
 800c280:	2100      	movs	r1, #0
 800c282:	46d1      	mov	r9, sl
 800c284:	2212      	movs	r2, #18
 800c286:	9108      	str	r1, [sp, #32]
 800c288:	e7ce      	b.n	800c228 <_dtoa_r+0x240>
 800c28a:	2201      	movs	r2, #1
 800c28c:	9207      	str	r2, [sp, #28]
 800c28e:	e7f5      	b.n	800c27c <_dtoa_r+0x294>
 800c290:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c294:	46d1      	mov	r9, sl
 800c296:	4652      	mov	r2, sl
 800c298:	e7c6      	b.n	800c228 <_dtoa_r+0x240>
 800c29a:	3101      	adds	r1, #1
 800c29c:	6079      	str	r1, [r7, #4]
 800c29e:	0040      	lsls	r0, r0, #1
 800c2a0:	e7c6      	b.n	800c230 <_dtoa_r+0x248>
 800c2a2:	bf00      	nop
 800c2a4:	f3af 8000 	nop.w
 800c2a8:	636f4361 	.word	0x636f4361
 800c2ac:	3fd287a7 	.word	0x3fd287a7
 800c2b0:	8b60c8b3 	.word	0x8b60c8b3
 800c2b4:	3fc68a28 	.word	0x3fc68a28
 800c2b8:	509f79fb 	.word	0x509f79fb
 800c2bc:	3fd34413 	.word	0x3fd34413
 800c2c0:	0800edf6 	.word	0x0800edf6
 800c2c4:	0800ee0d 	.word	0x0800ee0d
 800c2c8:	7ff00000 	.word	0x7ff00000
 800c2cc:	0800edf2 	.word	0x0800edf2
 800c2d0:	0800ede9 	.word	0x0800ede9
 800c2d4:	0800ec69 	.word	0x0800ec69
 800c2d8:	0800efe0 	.word	0x0800efe0
 800c2dc:	0800ee68 	.word	0x0800ee68
 800c2e0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800c2e2:	9901      	ldr	r1, [sp, #4]
 800c2e4:	6011      	str	r1, [r2, #0]
 800c2e6:	f1b9 0f0e 	cmp.w	r9, #14
 800c2ea:	d86c      	bhi.n	800c3c6 <_dtoa_r+0x3de>
 800c2ec:	2c00      	cmp	r4, #0
 800c2ee:	d06a      	beq.n	800c3c6 <_dtoa_r+0x3de>
 800c2f0:	f1bb 0f00 	cmp.w	fp, #0
 800c2f4:	f340 80a0 	ble.w	800c438 <_dtoa_r+0x450>
 800c2f8:	49c1      	ldr	r1, [pc, #772]	; (800c600 <_dtoa_r+0x618>)
 800c2fa:	f00b 020f 	and.w	r2, fp, #15
 800c2fe:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800c302:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c306:	ed92 7b00 	vldr	d7, [r2]
 800c30a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800c30e:	f000 8087 	beq.w	800c420 <_dtoa_r+0x438>
 800c312:	4abc      	ldr	r2, [pc, #752]	; (800c604 <_dtoa_r+0x61c>)
 800c314:	ed92 6b08 	vldr	d6, [r2, #32]
 800c318:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800c31c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c320:	f001 010f 	and.w	r1, r1, #15
 800c324:	2203      	movs	r2, #3
 800c326:	48b7      	ldr	r0, [pc, #732]	; (800c604 <_dtoa_r+0x61c>)
 800c328:	2900      	cmp	r1, #0
 800c32a:	d17b      	bne.n	800c424 <_dtoa_r+0x43c>
 800c32c:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c330:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c334:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c338:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c33a:	2900      	cmp	r1, #0
 800c33c:	f000 80a2 	beq.w	800c484 <_dtoa_r+0x49c>
 800c340:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800c344:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c348:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c34c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c350:	f140 8098 	bpl.w	800c484 <_dtoa_r+0x49c>
 800c354:	f1b9 0f00 	cmp.w	r9, #0
 800c358:	f000 8094 	beq.w	800c484 <_dtoa_r+0x49c>
 800c35c:	f1ba 0f00 	cmp.w	sl, #0
 800c360:	dd2f      	ble.n	800c3c2 <_dtoa_r+0x3da>
 800c362:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800c366:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c36a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c36e:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c372:	3201      	adds	r2, #1
 800c374:	4650      	mov	r0, sl
 800c376:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c37a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800c37e:	ee07 2a90 	vmov	s15, r2
 800c382:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c386:	eea7 5b06 	vfma.f64	d5, d7, d6
 800c38a:	ee15 4a90 	vmov	r4, s11
 800c38e:	ec52 1b15 	vmov	r1, r2, d5
 800c392:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800c396:	2800      	cmp	r0, #0
 800c398:	d177      	bne.n	800c48a <_dtoa_r+0x4a2>
 800c39a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800c39e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c3a2:	ec42 1b17 	vmov	d7, r1, r2
 800c3a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c3aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3ae:	f300 8263 	bgt.w	800c878 <_dtoa_r+0x890>
 800c3b2:	eeb1 7b47 	vneg.f64	d7, d7
 800c3b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c3ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3be:	f100 8258 	bmi.w	800c872 <_dtoa_r+0x88a>
 800c3c2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c3c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c3c8:	2a00      	cmp	r2, #0
 800c3ca:	f2c0 811d 	blt.w	800c608 <_dtoa_r+0x620>
 800c3ce:	f1bb 0f0e 	cmp.w	fp, #14
 800c3d2:	f300 8119 	bgt.w	800c608 <_dtoa_r+0x620>
 800c3d6:	4b8a      	ldr	r3, [pc, #552]	; (800c600 <_dtoa_r+0x618>)
 800c3d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c3dc:	ed93 6b00 	vldr	d6, [r3]
 800c3e0:	9b08      	ldr	r3, [sp, #32]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	f280 80b7 	bge.w	800c556 <_dtoa_r+0x56e>
 800c3e8:	f1b9 0f00 	cmp.w	r9, #0
 800c3ec:	f300 80b3 	bgt.w	800c556 <_dtoa_r+0x56e>
 800c3f0:	f040 823f 	bne.w	800c872 <_dtoa_r+0x88a>
 800c3f4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800c3f8:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c3fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c400:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c408:	464c      	mov	r4, r9
 800c40a:	464f      	mov	r7, r9
 800c40c:	f280 8215 	bge.w	800c83a <_dtoa_r+0x852>
 800c410:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c414:	2331      	movs	r3, #49	; 0x31
 800c416:	f808 3b01 	strb.w	r3, [r8], #1
 800c41a:	f10b 0b01 	add.w	fp, fp, #1
 800c41e:	e211      	b.n	800c844 <_dtoa_r+0x85c>
 800c420:	2202      	movs	r2, #2
 800c422:	e780      	b.n	800c326 <_dtoa_r+0x33e>
 800c424:	07cc      	lsls	r4, r1, #31
 800c426:	d504      	bpl.n	800c432 <_dtoa_r+0x44a>
 800c428:	ed90 6b00 	vldr	d6, [r0]
 800c42c:	3201      	adds	r2, #1
 800c42e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c432:	1049      	asrs	r1, r1, #1
 800c434:	3008      	adds	r0, #8
 800c436:	e777      	b.n	800c328 <_dtoa_r+0x340>
 800c438:	d022      	beq.n	800c480 <_dtoa_r+0x498>
 800c43a:	f1cb 0100 	rsb	r1, fp, #0
 800c43e:	4a70      	ldr	r2, [pc, #448]	; (800c600 <_dtoa_r+0x618>)
 800c440:	f001 000f 	and.w	r0, r1, #15
 800c444:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c448:	ed92 7b00 	vldr	d7, [r2]
 800c44c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800c450:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c454:	486b      	ldr	r0, [pc, #428]	; (800c604 <_dtoa_r+0x61c>)
 800c456:	1109      	asrs	r1, r1, #4
 800c458:	2400      	movs	r4, #0
 800c45a:	2202      	movs	r2, #2
 800c45c:	b929      	cbnz	r1, 800c46a <_dtoa_r+0x482>
 800c45e:	2c00      	cmp	r4, #0
 800c460:	f43f af6a 	beq.w	800c338 <_dtoa_r+0x350>
 800c464:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c468:	e766      	b.n	800c338 <_dtoa_r+0x350>
 800c46a:	07cf      	lsls	r7, r1, #31
 800c46c:	d505      	bpl.n	800c47a <_dtoa_r+0x492>
 800c46e:	ed90 6b00 	vldr	d6, [r0]
 800c472:	3201      	adds	r2, #1
 800c474:	2401      	movs	r4, #1
 800c476:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c47a:	1049      	asrs	r1, r1, #1
 800c47c:	3008      	adds	r0, #8
 800c47e:	e7ed      	b.n	800c45c <_dtoa_r+0x474>
 800c480:	2202      	movs	r2, #2
 800c482:	e759      	b.n	800c338 <_dtoa_r+0x350>
 800c484:	465f      	mov	r7, fp
 800c486:	4648      	mov	r0, r9
 800c488:	e775      	b.n	800c376 <_dtoa_r+0x38e>
 800c48a:	ec42 1b17 	vmov	d7, r1, r2
 800c48e:	4a5c      	ldr	r2, [pc, #368]	; (800c600 <_dtoa_r+0x618>)
 800c490:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c494:	ed12 4b02 	vldr	d4, [r2, #-8]
 800c498:	9a01      	ldr	r2, [sp, #4]
 800c49a:	1814      	adds	r4, r2, r0
 800c49c:	9a07      	ldr	r2, [sp, #28]
 800c49e:	b352      	cbz	r2, 800c4f6 <_dtoa_r+0x50e>
 800c4a0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800c4a4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800c4a8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c4ac:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800c4b0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c4b4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c4b8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c4bc:	ee14 2a90 	vmov	r2, s9
 800c4c0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c4c4:	3230      	adds	r2, #48	; 0x30
 800c4c6:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c4ca:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c4ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4d2:	f808 2b01 	strb.w	r2, [r8], #1
 800c4d6:	d439      	bmi.n	800c54c <_dtoa_r+0x564>
 800c4d8:	ee32 5b46 	vsub.f64	d5, d2, d6
 800c4dc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800c4e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4e4:	d472      	bmi.n	800c5cc <_dtoa_r+0x5e4>
 800c4e6:	45a0      	cmp	r8, r4
 800c4e8:	f43f af6b 	beq.w	800c3c2 <_dtoa_r+0x3da>
 800c4ec:	ee27 7b03 	vmul.f64	d7, d7, d3
 800c4f0:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c4f4:	e7e0      	b.n	800c4b8 <_dtoa_r+0x4d0>
 800c4f6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c4fa:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c4fe:	4621      	mov	r1, r4
 800c500:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c504:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c508:	ee14 2a90 	vmov	r2, s9
 800c50c:	3230      	adds	r2, #48	; 0x30
 800c50e:	f808 2b01 	strb.w	r2, [r8], #1
 800c512:	45a0      	cmp	r8, r4
 800c514:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c518:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c51c:	d118      	bne.n	800c550 <_dtoa_r+0x568>
 800c51e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c522:	ee37 4b05 	vadd.f64	d4, d7, d5
 800c526:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800c52a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c52e:	dc4d      	bgt.n	800c5cc <_dtoa_r+0x5e4>
 800c530:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c534:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c53c:	f57f af41 	bpl.w	800c3c2 <_dtoa_r+0x3da>
 800c540:	4688      	mov	r8, r1
 800c542:	3901      	subs	r1, #1
 800c544:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800c548:	2b30      	cmp	r3, #48	; 0x30
 800c54a:	d0f9      	beq.n	800c540 <_dtoa_r+0x558>
 800c54c:	46bb      	mov	fp, r7
 800c54e:	e02a      	b.n	800c5a6 <_dtoa_r+0x5be>
 800c550:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c554:	e7d6      	b.n	800c504 <_dtoa_r+0x51c>
 800c556:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c55a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800c55e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c562:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800c566:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800c56a:	ee15 3a10 	vmov	r3, s10
 800c56e:	3330      	adds	r3, #48	; 0x30
 800c570:	f808 3b01 	strb.w	r3, [r8], #1
 800c574:	9b01      	ldr	r3, [sp, #4]
 800c576:	eba8 0303 	sub.w	r3, r8, r3
 800c57a:	4599      	cmp	r9, r3
 800c57c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800c580:	eea3 7b46 	vfms.f64	d7, d3, d6
 800c584:	d133      	bne.n	800c5ee <_dtoa_r+0x606>
 800c586:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c58a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c58e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c592:	dc1a      	bgt.n	800c5ca <_dtoa_r+0x5e2>
 800c594:	eeb4 7b46 	vcmp.f64	d7, d6
 800c598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c59c:	d103      	bne.n	800c5a6 <_dtoa_r+0x5be>
 800c59e:	ee15 3a10 	vmov	r3, s10
 800c5a2:	07d9      	lsls	r1, r3, #31
 800c5a4:	d411      	bmi.n	800c5ca <_dtoa_r+0x5e2>
 800c5a6:	4629      	mov	r1, r5
 800c5a8:	4630      	mov	r0, r6
 800c5aa:	f001 f885 	bl	800d6b8 <_Bfree>
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c5b2:	f888 3000 	strb.w	r3, [r8]
 800c5b6:	f10b 0301 	add.w	r3, fp, #1
 800c5ba:	6013      	str	r3, [r2, #0]
 800c5bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	f43f ad61 	beq.w	800c086 <_dtoa_r+0x9e>
 800c5c4:	f8c3 8000 	str.w	r8, [r3]
 800c5c8:	e55d      	b.n	800c086 <_dtoa_r+0x9e>
 800c5ca:	465f      	mov	r7, fp
 800c5cc:	4643      	mov	r3, r8
 800c5ce:	4698      	mov	r8, r3
 800c5d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c5d4:	2a39      	cmp	r2, #57	; 0x39
 800c5d6:	d106      	bne.n	800c5e6 <_dtoa_r+0x5fe>
 800c5d8:	9a01      	ldr	r2, [sp, #4]
 800c5da:	429a      	cmp	r2, r3
 800c5dc:	d1f7      	bne.n	800c5ce <_dtoa_r+0x5e6>
 800c5de:	9901      	ldr	r1, [sp, #4]
 800c5e0:	2230      	movs	r2, #48	; 0x30
 800c5e2:	3701      	adds	r7, #1
 800c5e4:	700a      	strb	r2, [r1, #0]
 800c5e6:	781a      	ldrb	r2, [r3, #0]
 800c5e8:	3201      	adds	r2, #1
 800c5ea:	701a      	strb	r2, [r3, #0]
 800c5ec:	e7ae      	b.n	800c54c <_dtoa_r+0x564>
 800c5ee:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c5f2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c5f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5fa:	d1b2      	bne.n	800c562 <_dtoa_r+0x57a>
 800c5fc:	e7d3      	b.n	800c5a6 <_dtoa_r+0x5be>
 800c5fe:	bf00      	nop
 800c600:	0800efe0 	.word	0x0800efe0
 800c604:	0800efb8 	.word	0x0800efb8
 800c608:	9907      	ldr	r1, [sp, #28]
 800c60a:	2900      	cmp	r1, #0
 800c60c:	f000 80d0 	beq.w	800c7b0 <_dtoa_r+0x7c8>
 800c610:	9906      	ldr	r1, [sp, #24]
 800c612:	2901      	cmp	r1, #1
 800c614:	f300 80b4 	bgt.w	800c780 <_dtoa_r+0x798>
 800c618:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c61a:	2900      	cmp	r1, #0
 800c61c:	f000 80ac 	beq.w	800c778 <_dtoa_r+0x790>
 800c620:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c624:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c628:	461c      	mov	r4, r3
 800c62a:	930a      	str	r3, [sp, #40]	; 0x28
 800c62c:	9b04      	ldr	r3, [sp, #16]
 800c62e:	4413      	add	r3, r2
 800c630:	9304      	str	r3, [sp, #16]
 800c632:	9b05      	ldr	r3, [sp, #20]
 800c634:	2101      	movs	r1, #1
 800c636:	4413      	add	r3, r2
 800c638:	4630      	mov	r0, r6
 800c63a:	9305      	str	r3, [sp, #20]
 800c63c:	f001 f93e 	bl	800d8bc <__i2b>
 800c640:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c642:	4607      	mov	r7, r0
 800c644:	f1b8 0f00 	cmp.w	r8, #0
 800c648:	dd0d      	ble.n	800c666 <_dtoa_r+0x67e>
 800c64a:	9a05      	ldr	r2, [sp, #20]
 800c64c:	2a00      	cmp	r2, #0
 800c64e:	dd0a      	ble.n	800c666 <_dtoa_r+0x67e>
 800c650:	4542      	cmp	r2, r8
 800c652:	9904      	ldr	r1, [sp, #16]
 800c654:	bfa8      	it	ge
 800c656:	4642      	movge	r2, r8
 800c658:	1a89      	subs	r1, r1, r2
 800c65a:	9104      	str	r1, [sp, #16]
 800c65c:	9905      	ldr	r1, [sp, #20]
 800c65e:	eba8 0802 	sub.w	r8, r8, r2
 800c662:	1a8a      	subs	r2, r1, r2
 800c664:	9205      	str	r2, [sp, #20]
 800c666:	b303      	cbz	r3, 800c6aa <_dtoa_r+0x6c2>
 800c668:	9a07      	ldr	r2, [sp, #28]
 800c66a:	2a00      	cmp	r2, #0
 800c66c:	f000 80a5 	beq.w	800c7ba <_dtoa_r+0x7d2>
 800c670:	2c00      	cmp	r4, #0
 800c672:	dd13      	ble.n	800c69c <_dtoa_r+0x6b4>
 800c674:	4639      	mov	r1, r7
 800c676:	4622      	mov	r2, r4
 800c678:	4630      	mov	r0, r6
 800c67a:	930d      	str	r3, [sp, #52]	; 0x34
 800c67c:	f001 f9de 	bl	800da3c <__pow5mult>
 800c680:	462a      	mov	r2, r5
 800c682:	4601      	mov	r1, r0
 800c684:	4607      	mov	r7, r0
 800c686:	4630      	mov	r0, r6
 800c688:	f001 f92e 	bl	800d8e8 <__multiply>
 800c68c:	4629      	mov	r1, r5
 800c68e:	900a      	str	r0, [sp, #40]	; 0x28
 800c690:	4630      	mov	r0, r6
 800c692:	f001 f811 	bl	800d6b8 <_Bfree>
 800c696:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c698:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c69a:	4615      	mov	r5, r2
 800c69c:	1b1a      	subs	r2, r3, r4
 800c69e:	d004      	beq.n	800c6aa <_dtoa_r+0x6c2>
 800c6a0:	4629      	mov	r1, r5
 800c6a2:	4630      	mov	r0, r6
 800c6a4:	f001 f9ca 	bl	800da3c <__pow5mult>
 800c6a8:	4605      	mov	r5, r0
 800c6aa:	2101      	movs	r1, #1
 800c6ac:	4630      	mov	r0, r6
 800c6ae:	f001 f905 	bl	800d8bc <__i2b>
 800c6b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	4604      	mov	r4, r0
 800c6b8:	f340 8081 	ble.w	800c7be <_dtoa_r+0x7d6>
 800c6bc:	461a      	mov	r2, r3
 800c6be:	4601      	mov	r1, r0
 800c6c0:	4630      	mov	r0, r6
 800c6c2:	f001 f9bb 	bl	800da3c <__pow5mult>
 800c6c6:	9b06      	ldr	r3, [sp, #24]
 800c6c8:	2b01      	cmp	r3, #1
 800c6ca:	4604      	mov	r4, r0
 800c6cc:	dd7a      	ble.n	800c7c4 <_dtoa_r+0x7dc>
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	930a      	str	r3, [sp, #40]	; 0x28
 800c6d2:	6922      	ldr	r2, [r4, #16]
 800c6d4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c6d8:	6910      	ldr	r0, [r2, #16]
 800c6da:	f001 f89f 	bl	800d81c <__hi0bits>
 800c6de:	f1c0 0020 	rsb	r0, r0, #32
 800c6e2:	9b05      	ldr	r3, [sp, #20]
 800c6e4:	4418      	add	r0, r3
 800c6e6:	f010 001f 	ands.w	r0, r0, #31
 800c6ea:	f000 808c 	beq.w	800c806 <_dtoa_r+0x81e>
 800c6ee:	f1c0 0220 	rsb	r2, r0, #32
 800c6f2:	2a04      	cmp	r2, #4
 800c6f4:	f340 8085 	ble.w	800c802 <_dtoa_r+0x81a>
 800c6f8:	f1c0 001c 	rsb	r0, r0, #28
 800c6fc:	9b04      	ldr	r3, [sp, #16]
 800c6fe:	4403      	add	r3, r0
 800c700:	9304      	str	r3, [sp, #16]
 800c702:	9b05      	ldr	r3, [sp, #20]
 800c704:	4403      	add	r3, r0
 800c706:	4480      	add	r8, r0
 800c708:	9305      	str	r3, [sp, #20]
 800c70a:	9b04      	ldr	r3, [sp, #16]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	dd05      	ble.n	800c71c <_dtoa_r+0x734>
 800c710:	4629      	mov	r1, r5
 800c712:	461a      	mov	r2, r3
 800c714:	4630      	mov	r0, r6
 800c716:	f001 f9eb 	bl	800daf0 <__lshift>
 800c71a:	4605      	mov	r5, r0
 800c71c:	9b05      	ldr	r3, [sp, #20]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	dd05      	ble.n	800c72e <_dtoa_r+0x746>
 800c722:	4621      	mov	r1, r4
 800c724:	461a      	mov	r2, r3
 800c726:	4630      	mov	r0, r6
 800c728:	f001 f9e2 	bl	800daf0 <__lshift>
 800c72c:	4604      	mov	r4, r0
 800c72e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c730:	2b00      	cmp	r3, #0
 800c732:	d06a      	beq.n	800c80a <_dtoa_r+0x822>
 800c734:	4621      	mov	r1, r4
 800c736:	4628      	mov	r0, r5
 800c738:	f001 fa4a 	bl	800dbd0 <__mcmp>
 800c73c:	2800      	cmp	r0, #0
 800c73e:	da64      	bge.n	800c80a <_dtoa_r+0x822>
 800c740:	2300      	movs	r3, #0
 800c742:	4629      	mov	r1, r5
 800c744:	220a      	movs	r2, #10
 800c746:	4630      	mov	r0, r6
 800c748:	f000 ffd8 	bl	800d6fc <__multadd>
 800c74c:	9b07      	ldr	r3, [sp, #28]
 800c74e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c752:	4605      	mov	r5, r0
 800c754:	2b00      	cmp	r3, #0
 800c756:	f000 8191 	beq.w	800ca7c <_dtoa_r+0xa94>
 800c75a:	4639      	mov	r1, r7
 800c75c:	2300      	movs	r3, #0
 800c75e:	220a      	movs	r2, #10
 800c760:	4630      	mov	r0, r6
 800c762:	f000 ffcb 	bl	800d6fc <__multadd>
 800c766:	f1ba 0f00 	cmp.w	sl, #0
 800c76a:	4607      	mov	r7, r0
 800c76c:	f300 808d 	bgt.w	800c88a <_dtoa_r+0x8a2>
 800c770:	9b06      	ldr	r3, [sp, #24]
 800c772:	2b02      	cmp	r3, #2
 800c774:	dc50      	bgt.n	800c818 <_dtoa_r+0x830>
 800c776:	e088      	b.n	800c88a <_dtoa_r+0x8a2>
 800c778:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c77a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c77e:	e751      	b.n	800c624 <_dtoa_r+0x63c>
 800c780:	f109 34ff 	add.w	r4, r9, #4294967295
 800c784:	42a3      	cmp	r3, r4
 800c786:	bfbf      	itttt	lt
 800c788:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800c78a:	1ae3      	sublt	r3, r4, r3
 800c78c:	18d2      	addlt	r2, r2, r3
 800c78e:	9209      	strlt	r2, [sp, #36]	; 0x24
 800c790:	bfb6      	itet	lt
 800c792:	4623      	movlt	r3, r4
 800c794:	1b1c      	subge	r4, r3, r4
 800c796:	2400      	movlt	r4, #0
 800c798:	f1b9 0f00 	cmp.w	r9, #0
 800c79c:	bfb5      	itete	lt
 800c79e:	9a04      	ldrlt	r2, [sp, #16]
 800c7a0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800c7a4:	eba2 0809 	sublt.w	r8, r2, r9
 800c7a8:	464a      	movge	r2, r9
 800c7aa:	bfb8      	it	lt
 800c7ac:	2200      	movlt	r2, #0
 800c7ae:	e73c      	b.n	800c62a <_dtoa_r+0x642>
 800c7b0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c7b4:	9f07      	ldr	r7, [sp, #28]
 800c7b6:	461c      	mov	r4, r3
 800c7b8:	e744      	b.n	800c644 <_dtoa_r+0x65c>
 800c7ba:	461a      	mov	r2, r3
 800c7bc:	e770      	b.n	800c6a0 <_dtoa_r+0x6b8>
 800c7be:	9b06      	ldr	r3, [sp, #24]
 800c7c0:	2b01      	cmp	r3, #1
 800c7c2:	dc18      	bgt.n	800c7f6 <_dtoa_r+0x80e>
 800c7c4:	9b02      	ldr	r3, [sp, #8]
 800c7c6:	b9b3      	cbnz	r3, 800c7f6 <_dtoa_r+0x80e>
 800c7c8:	9b03      	ldr	r3, [sp, #12]
 800c7ca:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800c7ce:	b9a2      	cbnz	r2, 800c7fa <_dtoa_r+0x812>
 800c7d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c7d4:	0d12      	lsrs	r2, r2, #20
 800c7d6:	0512      	lsls	r2, r2, #20
 800c7d8:	b18a      	cbz	r2, 800c7fe <_dtoa_r+0x816>
 800c7da:	9b04      	ldr	r3, [sp, #16]
 800c7dc:	3301      	adds	r3, #1
 800c7de:	9304      	str	r3, [sp, #16]
 800c7e0:	9b05      	ldr	r3, [sp, #20]
 800c7e2:	3301      	adds	r3, #1
 800c7e4:	9305      	str	r3, [sp, #20]
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	930a      	str	r3, [sp, #40]	; 0x28
 800c7ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	f47f af70 	bne.w	800c6d2 <_dtoa_r+0x6ea>
 800c7f2:	2001      	movs	r0, #1
 800c7f4:	e775      	b.n	800c6e2 <_dtoa_r+0x6fa>
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	e7f6      	b.n	800c7e8 <_dtoa_r+0x800>
 800c7fa:	9b02      	ldr	r3, [sp, #8]
 800c7fc:	e7f4      	b.n	800c7e8 <_dtoa_r+0x800>
 800c7fe:	920a      	str	r2, [sp, #40]	; 0x28
 800c800:	e7f3      	b.n	800c7ea <_dtoa_r+0x802>
 800c802:	d082      	beq.n	800c70a <_dtoa_r+0x722>
 800c804:	4610      	mov	r0, r2
 800c806:	301c      	adds	r0, #28
 800c808:	e778      	b.n	800c6fc <_dtoa_r+0x714>
 800c80a:	f1b9 0f00 	cmp.w	r9, #0
 800c80e:	dc37      	bgt.n	800c880 <_dtoa_r+0x898>
 800c810:	9b06      	ldr	r3, [sp, #24]
 800c812:	2b02      	cmp	r3, #2
 800c814:	dd34      	ble.n	800c880 <_dtoa_r+0x898>
 800c816:	46ca      	mov	sl, r9
 800c818:	f1ba 0f00 	cmp.w	sl, #0
 800c81c:	d10d      	bne.n	800c83a <_dtoa_r+0x852>
 800c81e:	4621      	mov	r1, r4
 800c820:	4653      	mov	r3, sl
 800c822:	2205      	movs	r2, #5
 800c824:	4630      	mov	r0, r6
 800c826:	f000 ff69 	bl	800d6fc <__multadd>
 800c82a:	4601      	mov	r1, r0
 800c82c:	4604      	mov	r4, r0
 800c82e:	4628      	mov	r0, r5
 800c830:	f001 f9ce 	bl	800dbd0 <__mcmp>
 800c834:	2800      	cmp	r0, #0
 800c836:	f73f adeb 	bgt.w	800c410 <_dtoa_r+0x428>
 800c83a:	9b08      	ldr	r3, [sp, #32]
 800c83c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c840:	ea6f 0b03 	mvn.w	fp, r3
 800c844:	f04f 0900 	mov.w	r9, #0
 800c848:	4621      	mov	r1, r4
 800c84a:	4630      	mov	r0, r6
 800c84c:	f000 ff34 	bl	800d6b8 <_Bfree>
 800c850:	2f00      	cmp	r7, #0
 800c852:	f43f aea8 	beq.w	800c5a6 <_dtoa_r+0x5be>
 800c856:	f1b9 0f00 	cmp.w	r9, #0
 800c85a:	d005      	beq.n	800c868 <_dtoa_r+0x880>
 800c85c:	45b9      	cmp	r9, r7
 800c85e:	d003      	beq.n	800c868 <_dtoa_r+0x880>
 800c860:	4649      	mov	r1, r9
 800c862:	4630      	mov	r0, r6
 800c864:	f000 ff28 	bl	800d6b8 <_Bfree>
 800c868:	4639      	mov	r1, r7
 800c86a:	4630      	mov	r0, r6
 800c86c:	f000 ff24 	bl	800d6b8 <_Bfree>
 800c870:	e699      	b.n	800c5a6 <_dtoa_r+0x5be>
 800c872:	2400      	movs	r4, #0
 800c874:	4627      	mov	r7, r4
 800c876:	e7e0      	b.n	800c83a <_dtoa_r+0x852>
 800c878:	46bb      	mov	fp, r7
 800c87a:	4604      	mov	r4, r0
 800c87c:	4607      	mov	r7, r0
 800c87e:	e5c7      	b.n	800c410 <_dtoa_r+0x428>
 800c880:	9b07      	ldr	r3, [sp, #28]
 800c882:	46ca      	mov	sl, r9
 800c884:	2b00      	cmp	r3, #0
 800c886:	f000 8100 	beq.w	800ca8a <_dtoa_r+0xaa2>
 800c88a:	f1b8 0f00 	cmp.w	r8, #0
 800c88e:	dd05      	ble.n	800c89c <_dtoa_r+0x8b4>
 800c890:	4639      	mov	r1, r7
 800c892:	4642      	mov	r2, r8
 800c894:	4630      	mov	r0, r6
 800c896:	f001 f92b 	bl	800daf0 <__lshift>
 800c89a:	4607      	mov	r7, r0
 800c89c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d05d      	beq.n	800c95e <_dtoa_r+0x976>
 800c8a2:	6879      	ldr	r1, [r7, #4]
 800c8a4:	4630      	mov	r0, r6
 800c8a6:	f000 fec7 	bl	800d638 <_Balloc>
 800c8aa:	4680      	mov	r8, r0
 800c8ac:	b928      	cbnz	r0, 800c8ba <_dtoa_r+0x8d2>
 800c8ae:	4b82      	ldr	r3, [pc, #520]	; (800cab8 <_dtoa_r+0xad0>)
 800c8b0:	4602      	mov	r2, r0
 800c8b2:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c8b6:	f7ff bbaf 	b.w	800c018 <_dtoa_r+0x30>
 800c8ba:	693a      	ldr	r2, [r7, #16]
 800c8bc:	3202      	adds	r2, #2
 800c8be:	0092      	lsls	r2, r2, #2
 800c8c0:	f107 010c 	add.w	r1, r7, #12
 800c8c4:	300c      	adds	r0, #12
 800c8c6:	f000 fea9 	bl	800d61c <memcpy>
 800c8ca:	2201      	movs	r2, #1
 800c8cc:	4641      	mov	r1, r8
 800c8ce:	4630      	mov	r0, r6
 800c8d0:	f001 f90e 	bl	800daf0 <__lshift>
 800c8d4:	9b01      	ldr	r3, [sp, #4]
 800c8d6:	3301      	adds	r3, #1
 800c8d8:	9304      	str	r3, [sp, #16]
 800c8da:	9b01      	ldr	r3, [sp, #4]
 800c8dc:	4453      	add	r3, sl
 800c8de:	9308      	str	r3, [sp, #32]
 800c8e0:	9b02      	ldr	r3, [sp, #8]
 800c8e2:	f003 0301 	and.w	r3, r3, #1
 800c8e6:	46b9      	mov	r9, r7
 800c8e8:	9307      	str	r3, [sp, #28]
 800c8ea:	4607      	mov	r7, r0
 800c8ec:	9b04      	ldr	r3, [sp, #16]
 800c8ee:	4621      	mov	r1, r4
 800c8f0:	3b01      	subs	r3, #1
 800c8f2:	4628      	mov	r0, r5
 800c8f4:	9302      	str	r3, [sp, #8]
 800c8f6:	f7ff faeb 	bl	800bed0 <quorem>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	3330      	adds	r3, #48	; 0x30
 800c8fe:	9005      	str	r0, [sp, #20]
 800c900:	4649      	mov	r1, r9
 800c902:	4628      	mov	r0, r5
 800c904:	9309      	str	r3, [sp, #36]	; 0x24
 800c906:	f001 f963 	bl	800dbd0 <__mcmp>
 800c90a:	463a      	mov	r2, r7
 800c90c:	4682      	mov	sl, r0
 800c90e:	4621      	mov	r1, r4
 800c910:	4630      	mov	r0, r6
 800c912:	f001 f979 	bl	800dc08 <__mdiff>
 800c916:	68c2      	ldr	r2, [r0, #12]
 800c918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c91a:	4680      	mov	r8, r0
 800c91c:	bb0a      	cbnz	r2, 800c962 <_dtoa_r+0x97a>
 800c91e:	4601      	mov	r1, r0
 800c920:	4628      	mov	r0, r5
 800c922:	f001 f955 	bl	800dbd0 <__mcmp>
 800c926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c928:	4602      	mov	r2, r0
 800c92a:	4641      	mov	r1, r8
 800c92c:	4630      	mov	r0, r6
 800c92e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800c932:	f000 fec1 	bl	800d6b8 <_Bfree>
 800c936:	9b06      	ldr	r3, [sp, #24]
 800c938:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c93a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c93e:	ea43 0102 	orr.w	r1, r3, r2
 800c942:	9b07      	ldr	r3, [sp, #28]
 800c944:	430b      	orrs	r3, r1
 800c946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c948:	d10d      	bne.n	800c966 <_dtoa_r+0x97e>
 800c94a:	2b39      	cmp	r3, #57	; 0x39
 800c94c:	d029      	beq.n	800c9a2 <_dtoa_r+0x9ba>
 800c94e:	f1ba 0f00 	cmp.w	sl, #0
 800c952:	dd01      	ble.n	800c958 <_dtoa_r+0x970>
 800c954:	9b05      	ldr	r3, [sp, #20]
 800c956:	3331      	adds	r3, #49	; 0x31
 800c958:	9a02      	ldr	r2, [sp, #8]
 800c95a:	7013      	strb	r3, [r2, #0]
 800c95c:	e774      	b.n	800c848 <_dtoa_r+0x860>
 800c95e:	4638      	mov	r0, r7
 800c960:	e7b8      	b.n	800c8d4 <_dtoa_r+0x8ec>
 800c962:	2201      	movs	r2, #1
 800c964:	e7e1      	b.n	800c92a <_dtoa_r+0x942>
 800c966:	f1ba 0f00 	cmp.w	sl, #0
 800c96a:	db06      	blt.n	800c97a <_dtoa_r+0x992>
 800c96c:	9906      	ldr	r1, [sp, #24]
 800c96e:	ea41 0a0a 	orr.w	sl, r1, sl
 800c972:	9907      	ldr	r1, [sp, #28]
 800c974:	ea5a 0101 	orrs.w	r1, sl, r1
 800c978:	d120      	bne.n	800c9bc <_dtoa_r+0x9d4>
 800c97a:	2a00      	cmp	r2, #0
 800c97c:	ddec      	ble.n	800c958 <_dtoa_r+0x970>
 800c97e:	4629      	mov	r1, r5
 800c980:	2201      	movs	r2, #1
 800c982:	4630      	mov	r0, r6
 800c984:	9304      	str	r3, [sp, #16]
 800c986:	f001 f8b3 	bl	800daf0 <__lshift>
 800c98a:	4621      	mov	r1, r4
 800c98c:	4605      	mov	r5, r0
 800c98e:	f001 f91f 	bl	800dbd0 <__mcmp>
 800c992:	2800      	cmp	r0, #0
 800c994:	9b04      	ldr	r3, [sp, #16]
 800c996:	dc02      	bgt.n	800c99e <_dtoa_r+0x9b6>
 800c998:	d1de      	bne.n	800c958 <_dtoa_r+0x970>
 800c99a:	07da      	lsls	r2, r3, #31
 800c99c:	d5dc      	bpl.n	800c958 <_dtoa_r+0x970>
 800c99e:	2b39      	cmp	r3, #57	; 0x39
 800c9a0:	d1d8      	bne.n	800c954 <_dtoa_r+0x96c>
 800c9a2:	9a02      	ldr	r2, [sp, #8]
 800c9a4:	2339      	movs	r3, #57	; 0x39
 800c9a6:	7013      	strb	r3, [r2, #0]
 800c9a8:	4643      	mov	r3, r8
 800c9aa:	4698      	mov	r8, r3
 800c9ac:	3b01      	subs	r3, #1
 800c9ae:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800c9b2:	2a39      	cmp	r2, #57	; 0x39
 800c9b4:	d051      	beq.n	800ca5a <_dtoa_r+0xa72>
 800c9b6:	3201      	adds	r2, #1
 800c9b8:	701a      	strb	r2, [r3, #0]
 800c9ba:	e745      	b.n	800c848 <_dtoa_r+0x860>
 800c9bc:	2a00      	cmp	r2, #0
 800c9be:	dd03      	ble.n	800c9c8 <_dtoa_r+0x9e0>
 800c9c0:	2b39      	cmp	r3, #57	; 0x39
 800c9c2:	d0ee      	beq.n	800c9a2 <_dtoa_r+0x9ba>
 800c9c4:	3301      	adds	r3, #1
 800c9c6:	e7c7      	b.n	800c958 <_dtoa_r+0x970>
 800c9c8:	9a04      	ldr	r2, [sp, #16]
 800c9ca:	9908      	ldr	r1, [sp, #32]
 800c9cc:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c9d0:	428a      	cmp	r2, r1
 800c9d2:	d02b      	beq.n	800ca2c <_dtoa_r+0xa44>
 800c9d4:	4629      	mov	r1, r5
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	220a      	movs	r2, #10
 800c9da:	4630      	mov	r0, r6
 800c9dc:	f000 fe8e 	bl	800d6fc <__multadd>
 800c9e0:	45b9      	cmp	r9, r7
 800c9e2:	4605      	mov	r5, r0
 800c9e4:	f04f 0300 	mov.w	r3, #0
 800c9e8:	f04f 020a 	mov.w	r2, #10
 800c9ec:	4649      	mov	r1, r9
 800c9ee:	4630      	mov	r0, r6
 800c9f0:	d107      	bne.n	800ca02 <_dtoa_r+0xa1a>
 800c9f2:	f000 fe83 	bl	800d6fc <__multadd>
 800c9f6:	4681      	mov	r9, r0
 800c9f8:	4607      	mov	r7, r0
 800c9fa:	9b04      	ldr	r3, [sp, #16]
 800c9fc:	3301      	adds	r3, #1
 800c9fe:	9304      	str	r3, [sp, #16]
 800ca00:	e774      	b.n	800c8ec <_dtoa_r+0x904>
 800ca02:	f000 fe7b 	bl	800d6fc <__multadd>
 800ca06:	4639      	mov	r1, r7
 800ca08:	4681      	mov	r9, r0
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	220a      	movs	r2, #10
 800ca0e:	4630      	mov	r0, r6
 800ca10:	f000 fe74 	bl	800d6fc <__multadd>
 800ca14:	4607      	mov	r7, r0
 800ca16:	e7f0      	b.n	800c9fa <_dtoa_r+0xa12>
 800ca18:	f1ba 0f00 	cmp.w	sl, #0
 800ca1c:	9a01      	ldr	r2, [sp, #4]
 800ca1e:	bfcc      	ite	gt
 800ca20:	46d0      	movgt	r8, sl
 800ca22:	f04f 0801 	movle.w	r8, #1
 800ca26:	4490      	add	r8, r2
 800ca28:	f04f 0900 	mov.w	r9, #0
 800ca2c:	4629      	mov	r1, r5
 800ca2e:	2201      	movs	r2, #1
 800ca30:	4630      	mov	r0, r6
 800ca32:	9302      	str	r3, [sp, #8]
 800ca34:	f001 f85c 	bl	800daf0 <__lshift>
 800ca38:	4621      	mov	r1, r4
 800ca3a:	4605      	mov	r5, r0
 800ca3c:	f001 f8c8 	bl	800dbd0 <__mcmp>
 800ca40:	2800      	cmp	r0, #0
 800ca42:	dcb1      	bgt.n	800c9a8 <_dtoa_r+0x9c0>
 800ca44:	d102      	bne.n	800ca4c <_dtoa_r+0xa64>
 800ca46:	9b02      	ldr	r3, [sp, #8]
 800ca48:	07db      	lsls	r3, r3, #31
 800ca4a:	d4ad      	bmi.n	800c9a8 <_dtoa_r+0x9c0>
 800ca4c:	4643      	mov	r3, r8
 800ca4e:	4698      	mov	r8, r3
 800ca50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ca54:	2a30      	cmp	r2, #48	; 0x30
 800ca56:	d0fa      	beq.n	800ca4e <_dtoa_r+0xa66>
 800ca58:	e6f6      	b.n	800c848 <_dtoa_r+0x860>
 800ca5a:	9a01      	ldr	r2, [sp, #4]
 800ca5c:	429a      	cmp	r2, r3
 800ca5e:	d1a4      	bne.n	800c9aa <_dtoa_r+0x9c2>
 800ca60:	f10b 0b01 	add.w	fp, fp, #1
 800ca64:	2331      	movs	r3, #49	; 0x31
 800ca66:	e778      	b.n	800c95a <_dtoa_r+0x972>
 800ca68:	4b14      	ldr	r3, [pc, #80]	; (800cabc <_dtoa_r+0xad4>)
 800ca6a:	f7ff bb27 	b.w	800c0bc <_dtoa_r+0xd4>
 800ca6e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	f47f ab03 	bne.w	800c07c <_dtoa_r+0x94>
 800ca76:	4b12      	ldr	r3, [pc, #72]	; (800cac0 <_dtoa_r+0xad8>)
 800ca78:	f7ff bb20 	b.w	800c0bc <_dtoa_r+0xd4>
 800ca7c:	f1ba 0f00 	cmp.w	sl, #0
 800ca80:	dc03      	bgt.n	800ca8a <_dtoa_r+0xaa2>
 800ca82:	9b06      	ldr	r3, [sp, #24]
 800ca84:	2b02      	cmp	r3, #2
 800ca86:	f73f aec7 	bgt.w	800c818 <_dtoa_r+0x830>
 800ca8a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ca8e:	4621      	mov	r1, r4
 800ca90:	4628      	mov	r0, r5
 800ca92:	f7ff fa1d 	bl	800bed0 <quorem>
 800ca96:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ca9a:	f808 3b01 	strb.w	r3, [r8], #1
 800ca9e:	9a01      	ldr	r2, [sp, #4]
 800caa0:	eba8 0202 	sub.w	r2, r8, r2
 800caa4:	4592      	cmp	sl, r2
 800caa6:	ddb7      	ble.n	800ca18 <_dtoa_r+0xa30>
 800caa8:	4629      	mov	r1, r5
 800caaa:	2300      	movs	r3, #0
 800caac:	220a      	movs	r2, #10
 800caae:	4630      	mov	r0, r6
 800cab0:	f000 fe24 	bl	800d6fc <__multadd>
 800cab4:	4605      	mov	r5, r0
 800cab6:	e7ea      	b.n	800ca8e <_dtoa_r+0xaa6>
 800cab8:	0800ee68 	.word	0x0800ee68
 800cabc:	0800ec68 	.word	0x0800ec68
 800cac0:	0800ede9 	.word	0x0800ede9

0800cac4 <__sflush_r>:
 800cac4:	898a      	ldrh	r2, [r1, #12]
 800cac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caca:	4605      	mov	r5, r0
 800cacc:	0710      	lsls	r0, r2, #28
 800cace:	460c      	mov	r4, r1
 800cad0:	d458      	bmi.n	800cb84 <__sflush_r+0xc0>
 800cad2:	684b      	ldr	r3, [r1, #4]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	dc05      	bgt.n	800cae4 <__sflush_r+0x20>
 800cad8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cada:	2b00      	cmp	r3, #0
 800cadc:	dc02      	bgt.n	800cae4 <__sflush_r+0x20>
 800cade:	2000      	movs	r0, #0
 800cae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cae4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cae6:	2e00      	cmp	r6, #0
 800cae8:	d0f9      	beq.n	800cade <__sflush_r+0x1a>
 800caea:	2300      	movs	r3, #0
 800caec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800caf0:	682f      	ldr	r7, [r5, #0]
 800caf2:	602b      	str	r3, [r5, #0]
 800caf4:	d032      	beq.n	800cb5c <__sflush_r+0x98>
 800caf6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800caf8:	89a3      	ldrh	r3, [r4, #12]
 800cafa:	075a      	lsls	r2, r3, #29
 800cafc:	d505      	bpl.n	800cb0a <__sflush_r+0x46>
 800cafe:	6863      	ldr	r3, [r4, #4]
 800cb00:	1ac0      	subs	r0, r0, r3
 800cb02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cb04:	b10b      	cbz	r3, 800cb0a <__sflush_r+0x46>
 800cb06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cb08:	1ac0      	subs	r0, r0, r3
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	4602      	mov	r2, r0
 800cb0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb10:	6a21      	ldr	r1, [r4, #32]
 800cb12:	4628      	mov	r0, r5
 800cb14:	47b0      	blx	r6
 800cb16:	1c43      	adds	r3, r0, #1
 800cb18:	89a3      	ldrh	r3, [r4, #12]
 800cb1a:	d106      	bne.n	800cb2a <__sflush_r+0x66>
 800cb1c:	6829      	ldr	r1, [r5, #0]
 800cb1e:	291d      	cmp	r1, #29
 800cb20:	d82c      	bhi.n	800cb7c <__sflush_r+0xb8>
 800cb22:	4a2a      	ldr	r2, [pc, #168]	; (800cbcc <__sflush_r+0x108>)
 800cb24:	40ca      	lsrs	r2, r1
 800cb26:	07d6      	lsls	r6, r2, #31
 800cb28:	d528      	bpl.n	800cb7c <__sflush_r+0xb8>
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	6062      	str	r2, [r4, #4]
 800cb2e:	04d9      	lsls	r1, r3, #19
 800cb30:	6922      	ldr	r2, [r4, #16]
 800cb32:	6022      	str	r2, [r4, #0]
 800cb34:	d504      	bpl.n	800cb40 <__sflush_r+0x7c>
 800cb36:	1c42      	adds	r2, r0, #1
 800cb38:	d101      	bne.n	800cb3e <__sflush_r+0x7a>
 800cb3a:	682b      	ldr	r3, [r5, #0]
 800cb3c:	b903      	cbnz	r3, 800cb40 <__sflush_r+0x7c>
 800cb3e:	6560      	str	r0, [r4, #84]	; 0x54
 800cb40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb42:	602f      	str	r7, [r5, #0]
 800cb44:	2900      	cmp	r1, #0
 800cb46:	d0ca      	beq.n	800cade <__sflush_r+0x1a>
 800cb48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb4c:	4299      	cmp	r1, r3
 800cb4e:	d002      	beq.n	800cb56 <__sflush_r+0x92>
 800cb50:	4628      	mov	r0, r5
 800cb52:	f001 fa45 	bl	800dfe0 <_free_r>
 800cb56:	2000      	movs	r0, #0
 800cb58:	6360      	str	r0, [r4, #52]	; 0x34
 800cb5a:	e7c1      	b.n	800cae0 <__sflush_r+0x1c>
 800cb5c:	6a21      	ldr	r1, [r4, #32]
 800cb5e:	2301      	movs	r3, #1
 800cb60:	4628      	mov	r0, r5
 800cb62:	47b0      	blx	r6
 800cb64:	1c41      	adds	r1, r0, #1
 800cb66:	d1c7      	bne.n	800caf8 <__sflush_r+0x34>
 800cb68:	682b      	ldr	r3, [r5, #0]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d0c4      	beq.n	800caf8 <__sflush_r+0x34>
 800cb6e:	2b1d      	cmp	r3, #29
 800cb70:	d001      	beq.n	800cb76 <__sflush_r+0xb2>
 800cb72:	2b16      	cmp	r3, #22
 800cb74:	d101      	bne.n	800cb7a <__sflush_r+0xb6>
 800cb76:	602f      	str	r7, [r5, #0]
 800cb78:	e7b1      	b.n	800cade <__sflush_r+0x1a>
 800cb7a:	89a3      	ldrh	r3, [r4, #12]
 800cb7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb80:	81a3      	strh	r3, [r4, #12]
 800cb82:	e7ad      	b.n	800cae0 <__sflush_r+0x1c>
 800cb84:	690f      	ldr	r7, [r1, #16]
 800cb86:	2f00      	cmp	r7, #0
 800cb88:	d0a9      	beq.n	800cade <__sflush_r+0x1a>
 800cb8a:	0793      	lsls	r3, r2, #30
 800cb8c:	680e      	ldr	r6, [r1, #0]
 800cb8e:	bf08      	it	eq
 800cb90:	694b      	ldreq	r3, [r1, #20]
 800cb92:	600f      	str	r7, [r1, #0]
 800cb94:	bf18      	it	ne
 800cb96:	2300      	movne	r3, #0
 800cb98:	eba6 0807 	sub.w	r8, r6, r7
 800cb9c:	608b      	str	r3, [r1, #8]
 800cb9e:	f1b8 0f00 	cmp.w	r8, #0
 800cba2:	dd9c      	ble.n	800cade <__sflush_r+0x1a>
 800cba4:	6a21      	ldr	r1, [r4, #32]
 800cba6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cba8:	4643      	mov	r3, r8
 800cbaa:	463a      	mov	r2, r7
 800cbac:	4628      	mov	r0, r5
 800cbae:	47b0      	blx	r6
 800cbb0:	2800      	cmp	r0, #0
 800cbb2:	dc06      	bgt.n	800cbc2 <__sflush_r+0xfe>
 800cbb4:	89a3      	ldrh	r3, [r4, #12]
 800cbb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbba:	81a3      	strh	r3, [r4, #12]
 800cbbc:	f04f 30ff 	mov.w	r0, #4294967295
 800cbc0:	e78e      	b.n	800cae0 <__sflush_r+0x1c>
 800cbc2:	4407      	add	r7, r0
 800cbc4:	eba8 0800 	sub.w	r8, r8, r0
 800cbc8:	e7e9      	b.n	800cb9e <__sflush_r+0xda>
 800cbca:	bf00      	nop
 800cbcc:	20400001 	.word	0x20400001

0800cbd0 <_fflush_r>:
 800cbd0:	b538      	push	{r3, r4, r5, lr}
 800cbd2:	690b      	ldr	r3, [r1, #16]
 800cbd4:	4605      	mov	r5, r0
 800cbd6:	460c      	mov	r4, r1
 800cbd8:	b913      	cbnz	r3, 800cbe0 <_fflush_r+0x10>
 800cbda:	2500      	movs	r5, #0
 800cbdc:	4628      	mov	r0, r5
 800cbde:	bd38      	pop	{r3, r4, r5, pc}
 800cbe0:	b118      	cbz	r0, 800cbea <_fflush_r+0x1a>
 800cbe2:	6983      	ldr	r3, [r0, #24]
 800cbe4:	b90b      	cbnz	r3, 800cbea <_fflush_r+0x1a>
 800cbe6:	f000 f887 	bl	800ccf8 <__sinit>
 800cbea:	4b14      	ldr	r3, [pc, #80]	; (800cc3c <_fflush_r+0x6c>)
 800cbec:	429c      	cmp	r4, r3
 800cbee:	d11b      	bne.n	800cc28 <_fflush_r+0x58>
 800cbf0:	686c      	ldr	r4, [r5, #4]
 800cbf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d0ef      	beq.n	800cbda <_fflush_r+0xa>
 800cbfa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cbfc:	07d0      	lsls	r0, r2, #31
 800cbfe:	d404      	bmi.n	800cc0a <_fflush_r+0x3a>
 800cc00:	0599      	lsls	r1, r3, #22
 800cc02:	d402      	bmi.n	800cc0a <_fflush_r+0x3a>
 800cc04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc06:	f000 fc88 	bl	800d51a <__retarget_lock_acquire_recursive>
 800cc0a:	4628      	mov	r0, r5
 800cc0c:	4621      	mov	r1, r4
 800cc0e:	f7ff ff59 	bl	800cac4 <__sflush_r>
 800cc12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc14:	07da      	lsls	r2, r3, #31
 800cc16:	4605      	mov	r5, r0
 800cc18:	d4e0      	bmi.n	800cbdc <_fflush_r+0xc>
 800cc1a:	89a3      	ldrh	r3, [r4, #12]
 800cc1c:	059b      	lsls	r3, r3, #22
 800cc1e:	d4dd      	bmi.n	800cbdc <_fflush_r+0xc>
 800cc20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc22:	f000 fc7b 	bl	800d51c <__retarget_lock_release_recursive>
 800cc26:	e7d9      	b.n	800cbdc <_fflush_r+0xc>
 800cc28:	4b05      	ldr	r3, [pc, #20]	; (800cc40 <_fflush_r+0x70>)
 800cc2a:	429c      	cmp	r4, r3
 800cc2c:	d101      	bne.n	800cc32 <_fflush_r+0x62>
 800cc2e:	68ac      	ldr	r4, [r5, #8]
 800cc30:	e7df      	b.n	800cbf2 <_fflush_r+0x22>
 800cc32:	4b04      	ldr	r3, [pc, #16]	; (800cc44 <_fflush_r+0x74>)
 800cc34:	429c      	cmp	r4, r3
 800cc36:	bf08      	it	eq
 800cc38:	68ec      	ldreq	r4, [r5, #12]
 800cc3a:	e7da      	b.n	800cbf2 <_fflush_r+0x22>
 800cc3c:	0800ee9c 	.word	0x0800ee9c
 800cc40:	0800eebc 	.word	0x0800eebc
 800cc44:	0800ee7c 	.word	0x0800ee7c

0800cc48 <std>:
 800cc48:	2300      	movs	r3, #0
 800cc4a:	b510      	push	{r4, lr}
 800cc4c:	4604      	mov	r4, r0
 800cc4e:	e9c0 3300 	strd	r3, r3, [r0]
 800cc52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc56:	6083      	str	r3, [r0, #8]
 800cc58:	8181      	strh	r1, [r0, #12]
 800cc5a:	6643      	str	r3, [r0, #100]	; 0x64
 800cc5c:	81c2      	strh	r2, [r0, #14]
 800cc5e:	6183      	str	r3, [r0, #24]
 800cc60:	4619      	mov	r1, r3
 800cc62:	2208      	movs	r2, #8
 800cc64:	305c      	adds	r0, #92	; 0x5c
 800cc66:	f7fd fb13 	bl	800a290 <memset>
 800cc6a:	4b05      	ldr	r3, [pc, #20]	; (800cc80 <std+0x38>)
 800cc6c:	6263      	str	r3, [r4, #36]	; 0x24
 800cc6e:	4b05      	ldr	r3, [pc, #20]	; (800cc84 <std+0x3c>)
 800cc70:	62a3      	str	r3, [r4, #40]	; 0x28
 800cc72:	4b05      	ldr	r3, [pc, #20]	; (800cc88 <std+0x40>)
 800cc74:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cc76:	4b05      	ldr	r3, [pc, #20]	; (800cc8c <std+0x44>)
 800cc78:	6224      	str	r4, [r4, #32]
 800cc7a:	6323      	str	r3, [r4, #48]	; 0x30
 800cc7c:	bd10      	pop	{r4, pc}
 800cc7e:	bf00      	nop
 800cc80:	0800e741 	.word	0x0800e741
 800cc84:	0800e763 	.word	0x0800e763
 800cc88:	0800e79b 	.word	0x0800e79b
 800cc8c:	0800e7bf 	.word	0x0800e7bf

0800cc90 <_cleanup_r>:
 800cc90:	4901      	ldr	r1, [pc, #4]	; (800cc98 <_cleanup_r+0x8>)
 800cc92:	f000 b8af 	b.w	800cdf4 <_fwalk_reent>
 800cc96:	bf00      	nop
 800cc98:	0800cbd1 	.word	0x0800cbd1

0800cc9c <__sfmoreglue>:
 800cc9c:	b570      	push	{r4, r5, r6, lr}
 800cc9e:	2268      	movs	r2, #104	; 0x68
 800cca0:	1e4d      	subs	r5, r1, #1
 800cca2:	4355      	muls	r5, r2
 800cca4:	460e      	mov	r6, r1
 800cca6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ccaa:	f001 fa05 	bl	800e0b8 <_malloc_r>
 800ccae:	4604      	mov	r4, r0
 800ccb0:	b140      	cbz	r0, 800ccc4 <__sfmoreglue+0x28>
 800ccb2:	2100      	movs	r1, #0
 800ccb4:	e9c0 1600 	strd	r1, r6, [r0]
 800ccb8:	300c      	adds	r0, #12
 800ccba:	60a0      	str	r0, [r4, #8]
 800ccbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ccc0:	f7fd fae6 	bl	800a290 <memset>
 800ccc4:	4620      	mov	r0, r4
 800ccc6:	bd70      	pop	{r4, r5, r6, pc}

0800ccc8 <__sfp_lock_acquire>:
 800ccc8:	4801      	ldr	r0, [pc, #4]	; (800ccd0 <__sfp_lock_acquire+0x8>)
 800ccca:	f000 bc26 	b.w	800d51a <__retarget_lock_acquire_recursive>
 800ccce:	bf00      	nop
 800ccd0:	20000479 	.word	0x20000479

0800ccd4 <__sfp_lock_release>:
 800ccd4:	4801      	ldr	r0, [pc, #4]	; (800ccdc <__sfp_lock_release+0x8>)
 800ccd6:	f000 bc21 	b.w	800d51c <__retarget_lock_release_recursive>
 800ccda:	bf00      	nop
 800ccdc:	20000479 	.word	0x20000479

0800cce0 <__sinit_lock_acquire>:
 800cce0:	4801      	ldr	r0, [pc, #4]	; (800cce8 <__sinit_lock_acquire+0x8>)
 800cce2:	f000 bc1a 	b.w	800d51a <__retarget_lock_acquire_recursive>
 800cce6:	bf00      	nop
 800cce8:	2000047a 	.word	0x2000047a

0800ccec <__sinit_lock_release>:
 800ccec:	4801      	ldr	r0, [pc, #4]	; (800ccf4 <__sinit_lock_release+0x8>)
 800ccee:	f000 bc15 	b.w	800d51c <__retarget_lock_release_recursive>
 800ccf2:	bf00      	nop
 800ccf4:	2000047a 	.word	0x2000047a

0800ccf8 <__sinit>:
 800ccf8:	b510      	push	{r4, lr}
 800ccfa:	4604      	mov	r4, r0
 800ccfc:	f7ff fff0 	bl	800cce0 <__sinit_lock_acquire>
 800cd00:	69a3      	ldr	r3, [r4, #24]
 800cd02:	b11b      	cbz	r3, 800cd0c <__sinit+0x14>
 800cd04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd08:	f7ff bff0 	b.w	800ccec <__sinit_lock_release>
 800cd0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cd10:	6523      	str	r3, [r4, #80]	; 0x50
 800cd12:	4b13      	ldr	r3, [pc, #76]	; (800cd60 <__sinit+0x68>)
 800cd14:	4a13      	ldr	r2, [pc, #76]	; (800cd64 <__sinit+0x6c>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	62a2      	str	r2, [r4, #40]	; 0x28
 800cd1a:	42a3      	cmp	r3, r4
 800cd1c:	bf04      	itt	eq
 800cd1e:	2301      	moveq	r3, #1
 800cd20:	61a3      	streq	r3, [r4, #24]
 800cd22:	4620      	mov	r0, r4
 800cd24:	f000 f820 	bl	800cd68 <__sfp>
 800cd28:	6060      	str	r0, [r4, #4]
 800cd2a:	4620      	mov	r0, r4
 800cd2c:	f000 f81c 	bl	800cd68 <__sfp>
 800cd30:	60a0      	str	r0, [r4, #8]
 800cd32:	4620      	mov	r0, r4
 800cd34:	f000 f818 	bl	800cd68 <__sfp>
 800cd38:	2200      	movs	r2, #0
 800cd3a:	60e0      	str	r0, [r4, #12]
 800cd3c:	2104      	movs	r1, #4
 800cd3e:	6860      	ldr	r0, [r4, #4]
 800cd40:	f7ff ff82 	bl	800cc48 <std>
 800cd44:	68a0      	ldr	r0, [r4, #8]
 800cd46:	2201      	movs	r2, #1
 800cd48:	2109      	movs	r1, #9
 800cd4a:	f7ff ff7d 	bl	800cc48 <std>
 800cd4e:	68e0      	ldr	r0, [r4, #12]
 800cd50:	2202      	movs	r2, #2
 800cd52:	2112      	movs	r1, #18
 800cd54:	f7ff ff78 	bl	800cc48 <std>
 800cd58:	2301      	movs	r3, #1
 800cd5a:	61a3      	str	r3, [r4, #24]
 800cd5c:	e7d2      	b.n	800cd04 <__sinit+0xc>
 800cd5e:	bf00      	nop
 800cd60:	0800ec54 	.word	0x0800ec54
 800cd64:	0800cc91 	.word	0x0800cc91

0800cd68 <__sfp>:
 800cd68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd6a:	4607      	mov	r7, r0
 800cd6c:	f7ff ffac 	bl	800ccc8 <__sfp_lock_acquire>
 800cd70:	4b1e      	ldr	r3, [pc, #120]	; (800cdec <__sfp+0x84>)
 800cd72:	681e      	ldr	r6, [r3, #0]
 800cd74:	69b3      	ldr	r3, [r6, #24]
 800cd76:	b913      	cbnz	r3, 800cd7e <__sfp+0x16>
 800cd78:	4630      	mov	r0, r6
 800cd7a:	f7ff ffbd 	bl	800ccf8 <__sinit>
 800cd7e:	3648      	adds	r6, #72	; 0x48
 800cd80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cd84:	3b01      	subs	r3, #1
 800cd86:	d503      	bpl.n	800cd90 <__sfp+0x28>
 800cd88:	6833      	ldr	r3, [r6, #0]
 800cd8a:	b30b      	cbz	r3, 800cdd0 <__sfp+0x68>
 800cd8c:	6836      	ldr	r6, [r6, #0]
 800cd8e:	e7f7      	b.n	800cd80 <__sfp+0x18>
 800cd90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cd94:	b9d5      	cbnz	r5, 800cdcc <__sfp+0x64>
 800cd96:	4b16      	ldr	r3, [pc, #88]	; (800cdf0 <__sfp+0x88>)
 800cd98:	60e3      	str	r3, [r4, #12]
 800cd9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cd9e:	6665      	str	r5, [r4, #100]	; 0x64
 800cda0:	f000 fbba 	bl	800d518 <__retarget_lock_init_recursive>
 800cda4:	f7ff ff96 	bl	800ccd4 <__sfp_lock_release>
 800cda8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cdac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cdb0:	6025      	str	r5, [r4, #0]
 800cdb2:	61a5      	str	r5, [r4, #24]
 800cdb4:	2208      	movs	r2, #8
 800cdb6:	4629      	mov	r1, r5
 800cdb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cdbc:	f7fd fa68 	bl	800a290 <memset>
 800cdc0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cdc4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cdc8:	4620      	mov	r0, r4
 800cdca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdcc:	3468      	adds	r4, #104	; 0x68
 800cdce:	e7d9      	b.n	800cd84 <__sfp+0x1c>
 800cdd0:	2104      	movs	r1, #4
 800cdd2:	4638      	mov	r0, r7
 800cdd4:	f7ff ff62 	bl	800cc9c <__sfmoreglue>
 800cdd8:	4604      	mov	r4, r0
 800cdda:	6030      	str	r0, [r6, #0]
 800cddc:	2800      	cmp	r0, #0
 800cdde:	d1d5      	bne.n	800cd8c <__sfp+0x24>
 800cde0:	f7ff ff78 	bl	800ccd4 <__sfp_lock_release>
 800cde4:	230c      	movs	r3, #12
 800cde6:	603b      	str	r3, [r7, #0]
 800cde8:	e7ee      	b.n	800cdc8 <__sfp+0x60>
 800cdea:	bf00      	nop
 800cdec:	0800ec54 	.word	0x0800ec54
 800cdf0:	ffff0001 	.word	0xffff0001

0800cdf4 <_fwalk_reent>:
 800cdf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdf8:	4606      	mov	r6, r0
 800cdfa:	4688      	mov	r8, r1
 800cdfc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ce00:	2700      	movs	r7, #0
 800ce02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ce06:	f1b9 0901 	subs.w	r9, r9, #1
 800ce0a:	d505      	bpl.n	800ce18 <_fwalk_reent+0x24>
 800ce0c:	6824      	ldr	r4, [r4, #0]
 800ce0e:	2c00      	cmp	r4, #0
 800ce10:	d1f7      	bne.n	800ce02 <_fwalk_reent+0xe>
 800ce12:	4638      	mov	r0, r7
 800ce14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce18:	89ab      	ldrh	r3, [r5, #12]
 800ce1a:	2b01      	cmp	r3, #1
 800ce1c:	d907      	bls.n	800ce2e <_fwalk_reent+0x3a>
 800ce1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ce22:	3301      	adds	r3, #1
 800ce24:	d003      	beq.n	800ce2e <_fwalk_reent+0x3a>
 800ce26:	4629      	mov	r1, r5
 800ce28:	4630      	mov	r0, r6
 800ce2a:	47c0      	blx	r8
 800ce2c:	4307      	orrs	r7, r0
 800ce2e:	3568      	adds	r5, #104	; 0x68
 800ce30:	e7e9      	b.n	800ce06 <_fwalk_reent+0x12>

0800ce32 <rshift>:
 800ce32:	6903      	ldr	r3, [r0, #16]
 800ce34:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ce38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ce3c:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ce40:	f100 0414 	add.w	r4, r0, #20
 800ce44:	dd45      	ble.n	800ced2 <rshift+0xa0>
 800ce46:	f011 011f 	ands.w	r1, r1, #31
 800ce4a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ce4e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ce52:	d10c      	bne.n	800ce6e <rshift+0x3c>
 800ce54:	f100 0710 	add.w	r7, r0, #16
 800ce58:	4629      	mov	r1, r5
 800ce5a:	42b1      	cmp	r1, r6
 800ce5c:	d334      	bcc.n	800cec8 <rshift+0x96>
 800ce5e:	1a9b      	subs	r3, r3, r2
 800ce60:	009b      	lsls	r3, r3, #2
 800ce62:	1eea      	subs	r2, r5, #3
 800ce64:	4296      	cmp	r6, r2
 800ce66:	bf38      	it	cc
 800ce68:	2300      	movcc	r3, #0
 800ce6a:	4423      	add	r3, r4
 800ce6c:	e015      	b.n	800ce9a <rshift+0x68>
 800ce6e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ce72:	f1c1 0820 	rsb	r8, r1, #32
 800ce76:	40cf      	lsrs	r7, r1
 800ce78:	f105 0e04 	add.w	lr, r5, #4
 800ce7c:	46a1      	mov	r9, r4
 800ce7e:	4576      	cmp	r6, lr
 800ce80:	46f4      	mov	ip, lr
 800ce82:	d815      	bhi.n	800ceb0 <rshift+0x7e>
 800ce84:	1a9a      	subs	r2, r3, r2
 800ce86:	0092      	lsls	r2, r2, #2
 800ce88:	3a04      	subs	r2, #4
 800ce8a:	3501      	adds	r5, #1
 800ce8c:	42ae      	cmp	r6, r5
 800ce8e:	bf38      	it	cc
 800ce90:	2200      	movcc	r2, #0
 800ce92:	18a3      	adds	r3, r4, r2
 800ce94:	50a7      	str	r7, [r4, r2]
 800ce96:	b107      	cbz	r7, 800ce9a <rshift+0x68>
 800ce98:	3304      	adds	r3, #4
 800ce9a:	1b1a      	subs	r2, r3, r4
 800ce9c:	42a3      	cmp	r3, r4
 800ce9e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cea2:	bf08      	it	eq
 800cea4:	2300      	moveq	r3, #0
 800cea6:	6102      	str	r2, [r0, #16]
 800cea8:	bf08      	it	eq
 800ceaa:	6143      	streq	r3, [r0, #20]
 800ceac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ceb0:	f8dc c000 	ldr.w	ip, [ip]
 800ceb4:	fa0c fc08 	lsl.w	ip, ip, r8
 800ceb8:	ea4c 0707 	orr.w	r7, ip, r7
 800cebc:	f849 7b04 	str.w	r7, [r9], #4
 800cec0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cec4:	40cf      	lsrs	r7, r1
 800cec6:	e7da      	b.n	800ce7e <rshift+0x4c>
 800cec8:	f851 cb04 	ldr.w	ip, [r1], #4
 800cecc:	f847 cf04 	str.w	ip, [r7, #4]!
 800ced0:	e7c3      	b.n	800ce5a <rshift+0x28>
 800ced2:	4623      	mov	r3, r4
 800ced4:	e7e1      	b.n	800ce9a <rshift+0x68>

0800ced6 <__hexdig_fun>:
 800ced6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ceda:	2b09      	cmp	r3, #9
 800cedc:	d802      	bhi.n	800cee4 <__hexdig_fun+0xe>
 800cede:	3820      	subs	r0, #32
 800cee0:	b2c0      	uxtb	r0, r0
 800cee2:	4770      	bx	lr
 800cee4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800cee8:	2b05      	cmp	r3, #5
 800ceea:	d801      	bhi.n	800cef0 <__hexdig_fun+0x1a>
 800ceec:	3847      	subs	r0, #71	; 0x47
 800ceee:	e7f7      	b.n	800cee0 <__hexdig_fun+0xa>
 800cef0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800cef4:	2b05      	cmp	r3, #5
 800cef6:	d801      	bhi.n	800cefc <__hexdig_fun+0x26>
 800cef8:	3827      	subs	r0, #39	; 0x27
 800cefa:	e7f1      	b.n	800cee0 <__hexdig_fun+0xa>
 800cefc:	2000      	movs	r0, #0
 800cefe:	4770      	bx	lr

0800cf00 <__gethex>:
 800cf00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf04:	ed2d 8b02 	vpush	{d8}
 800cf08:	b089      	sub	sp, #36	; 0x24
 800cf0a:	ee08 0a10 	vmov	s16, r0
 800cf0e:	9304      	str	r3, [sp, #16]
 800cf10:	4bb4      	ldr	r3, [pc, #720]	; (800d1e4 <__gethex+0x2e4>)
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	9301      	str	r3, [sp, #4]
 800cf16:	4618      	mov	r0, r3
 800cf18:	468b      	mov	fp, r1
 800cf1a:	4690      	mov	r8, r2
 800cf1c:	f7f3 f990 	bl	8000240 <strlen>
 800cf20:	9b01      	ldr	r3, [sp, #4]
 800cf22:	f8db 2000 	ldr.w	r2, [fp]
 800cf26:	4403      	add	r3, r0
 800cf28:	4682      	mov	sl, r0
 800cf2a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800cf2e:	9305      	str	r3, [sp, #20]
 800cf30:	1c93      	adds	r3, r2, #2
 800cf32:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800cf36:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800cf3a:	32fe      	adds	r2, #254	; 0xfe
 800cf3c:	18d1      	adds	r1, r2, r3
 800cf3e:	461f      	mov	r7, r3
 800cf40:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cf44:	9100      	str	r1, [sp, #0]
 800cf46:	2830      	cmp	r0, #48	; 0x30
 800cf48:	d0f8      	beq.n	800cf3c <__gethex+0x3c>
 800cf4a:	f7ff ffc4 	bl	800ced6 <__hexdig_fun>
 800cf4e:	4604      	mov	r4, r0
 800cf50:	2800      	cmp	r0, #0
 800cf52:	d13a      	bne.n	800cfca <__gethex+0xca>
 800cf54:	9901      	ldr	r1, [sp, #4]
 800cf56:	4652      	mov	r2, sl
 800cf58:	4638      	mov	r0, r7
 800cf5a:	f001 fc34 	bl	800e7c6 <strncmp>
 800cf5e:	4605      	mov	r5, r0
 800cf60:	2800      	cmp	r0, #0
 800cf62:	d168      	bne.n	800d036 <__gethex+0x136>
 800cf64:	f817 000a 	ldrb.w	r0, [r7, sl]
 800cf68:	eb07 060a 	add.w	r6, r7, sl
 800cf6c:	f7ff ffb3 	bl	800ced6 <__hexdig_fun>
 800cf70:	2800      	cmp	r0, #0
 800cf72:	d062      	beq.n	800d03a <__gethex+0x13a>
 800cf74:	4633      	mov	r3, r6
 800cf76:	7818      	ldrb	r0, [r3, #0]
 800cf78:	2830      	cmp	r0, #48	; 0x30
 800cf7a:	461f      	mov	r7, r3
 800cf7c:	f103 0301 	add.w	r3, r3, #1
 800cf80:	d0f9      	beq.n	800cf76 <__gethex+0x76>
 800cf82:	f7ff ffa8 	bl	800ced6 <__hexdig_fun>
 800cf86:	2301      	movs	r3, #1
 800cf88:	fab0 f480 	clz	r4, r0
 800cf8c:	0964      	lsrs	r4, r4, #5
 800cf8e:	4635      	mov	r5, r6
 800cf90:	9300      	str	r3, [sp, #0]
 800cf92:	463a      	mov	r2, r7
 800cf94:	4616      	mov	r6, r2
 800cf96:	3201      	adds	r2, #1
 800cf98:	7830      	ldrb	r0, [r6, #0]
 800cf9a:	f7ff ff9c 	bl	800ced6 <__hexdig_fun>
 800cf9e:	2800      	cmp	r0, #0
 800cfa0:	d1f8      	bne.n	800cf94 <__gethex+0x94>
 800cfa2:	9901      	ldr	r1, [sp, #4]
 800cfa4:	4652      	mov	r2, sl
 800cfa6:	4630      	mov	r0, r6
 800cfa8:	f001 fc0d 	bl	800e7c6 <strncmp>
 800cfac:	b980      	cbnz	r0, 800cfd0 <__gethex+0xd0>
 800cfae:	b94d      	cbnz	r5, 800cfc4 <__gethex+0xc4>
 800cfb0:	eb06 050a 	add.w	r5, r6, sl
 800cfb4:	462a      	mov	r2, r5
 800cfb6:	4616      	mov	r6, r2
 800cfb8:	3201      	adds	r2, #1
 800cfba:	7830      	ldrb	r0, [r6, #0]
 800cfbc:	f7ff ff8b 	bl	800ced6 <__hexdig_fun>
 800cfc0:	2800      	cmp	r0, #0
 800cfc2:	d1f8      	bne.n	800cfb6 <__gethex+0xb6>
 800cfc4:	1bad      	subs	r5, r5, r6
 800cfc6:	00ad      	lsls	r5, r5, #2
 800cfc8:	e004      	b.n	800cfd4 <__gethex+0xd4>
 800cfca:	2400      	movs	r4, #0
 800cfcc:	4625      	mov	r5, r4
 800cfce:	e7e0      	b.n	800cf92 <__gethex+0x92>
 800cfd0:	2d00      	cmp	r5, #0
 800cfd2:	d1f7      	bne.n	800cfc4 <__gethex+0xc4>
 800cfd4:	7833      	ldrb	r3, [r6, #0]
 800cfd6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cfda:	2b50      	cmp	r3, #80	; 0x50
 800cfdc:	d13b      	bne.n	800d056 <__gethex+0x156>
 800cfde:	7873      	ldrb	r3, [r6, #1]
 800cfe0:	2b2b      	cmp	r3, #43	; 0x2b
 800cfe2:	d02c      	beq.n	800d03e <__gethex+0x13e>
 800cfe4:	2b2d      	cmp	r3, #45	; 0x2d
 800cfe6:	d02e      	beq.n	800d046 <__gethex+0x146>
 800cfe8:	1c71      	adds	r1, r6, #1
 800cfea:	f04f 0900 	mov.w	r9, #0
 800cfee:	7808      	ldrb	r0, [r1, #0]
 800cff0:	f7ff ff71 	bl	800ced6 <__hexdig_fun>
 800cff4:	1e43      	subs	r3, r0, #1
 800cff6:	b2db      	uxtb	r3, r3
 800cff8:	2b18      	cmp	r3, #24
 800cffa:	d82c      	bhi.n	800d056 <__gethex+0x156>
 800cffc:	f1a0 0210 	sub.w	r2, r0, #16
 800d000:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d004:	f7ff ff67 	bl	800ced6 <__hexdig_fun>
 800d008:	1e43      	subs	r3, r0, #1
 800d00a:	b2db      	uxtb	r3, r3
 800d00c:	2b18      	cmp	r3, #24
 800d00e:	d91d      	bls.n	800d04c <__gethex+0x14c>
 800d010:	f1b9 0f00 	cmp.w	r9, #0
 800d014:	d000      	beq.n	800d018 <__gethex+0x118>
 800d016:	4252      	negs	r2, r2
 800d018:	4415      	add	r5, r2
 800d01a:	f8cb 1000 	str.w	r1, [fp]
 800d01e:	b1e4      	cbz	r4, 800d05a <__gethex+0x15a>
 800d020:	9b00      	ldr	r3, [sp, #0]
 800d022:	2b00      	cmp	r3, #0
 800d024:	bf14      	ite	ne
 800d026:	2700      	movne	r7, #0
 800d028:	2706      	moveq	r7, #6
 800d02a:	4638      	mov	r0, r7
 800d02c:	b009      	add	sp, #36	; 0x24
 800d02e:	ecbd 8b02 	vpop	{d8}
 800d032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d036:	463e      	mov	r6, r7
 800d038:	4625      	mov	r5, r4
 800d03a:	2401      	movs	r4, #1
 800d03c:	e7ca      	b.n	800cfd4 <__gethex+0xd4>
 800d03e:	f04f 0900 	mov.w	r9, #0
 800d042:	1cb1      	adds	r1, r6, #2
 800d044:	e7d3      	b.n	800cfee <__gethex+0xee>
 800d046:	f04f 0901 	mov.w	r9, #1
 800d04a:	e7fa      	b.n	800d042 <__gethex+0x142>
 800d04c:	230a      	movs	r3, #10
 800d04e:	fb03 0202 	mla	r2, r3, r2, r0
 800d052:	3a10      	subs	r2, #16
 800d054:	e7d4      	b.n	800d000 <__gethex+0x100>
 800d056:	4631      	mov	r1, r6
 800d058:	e7df      	b.n	800d01a <__gethex+0x11a>
 800d05a:	1bf3      	subs	r3, r6, r7
 800d05c:	3b01      	subs	r3, #1
 800d05e:	4621      	mov	r1, r4
 800d060:	2b07      	cmp	r3, #7
 800d062:	dc0b      	bgt.n	800d07c <__gethex+0x17c>
 800d064:	ee18 0a10 	vmov	r0, s16
 800d068:	f000 fae6 	bl	800d638 <_Balloc>
 800d06c:	4604      	mov	r4, r0
 800d06e:	b940      	cbnz	r0, 800d082 <__gethex+0x182>
 800d070:	4b5d      	ldr	r3, [pc, #372]	; (800d1e8 <__gethex+0x2e8>)
 800d072:	4602      	mov	r2, r0
 800d074:	21de      	movs	r1, #222	; 0xde
 800d076:	485d      	ldr	r0, [pc, #372]	; (800d1ec <__gethex+0x2ec>)
 800d078:	f001 fbd8 	bl	800e82c <__assert_func>
 800d07c:	3101      	adds	r1, #1
 800d07e:	105b      	asrs	r3, r3, #1
 800d080:	e7ee      	b.n	800d060 <__gethex+0x160>
 800d082:	f100 0914 	add.w	r9, r0, #20
 800d086:	f04f 0b00 	mov.w	fp, #0
 800d08a:	f1ca 0301 	rsb	r3, sl, #1
 800d08e:	f8cd 9008 	str.w	r9, [sp, #8]
 800d092:	f8cd b000 	str.w	fp, [sp]
 800d096:	9306      	str	r3, [sp, #24]
 800d098:	42b7      	cmp	r7, r6
 800d09a:	d340      	bcc.n	800d11e <__gethex+0x21e>
 800d09c:	9802      	ldr	r0, [sp, #8]
 800d09e:	9b00      	ldr	r3, [sp, #0]
 800d0a0:	f840 3b04 	str.w	r3, [r0], #4
 800d0a4:	eba0 0009 	sub.w	r0, r0, r9
 800d0a8:	1080      	asrs	r0, r0, #2
 800d0aa:	0146      	lsls	r6, r0, #5
 800d0ac:	6120      	str	r0, [r4, #16]
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f000 fbb4 	bl	800d81c <__hi0bits>
 800d0b4:	1a30      	subs	r0, r6, r0
 800d0b6:	f8d8 6000 	ldr.w	r6, [r8]
 800d0ba:	42b0      	cmp	r0, r6
 800d0bc:	dd63      	ble.n	800d186 <__gethex+0x286>
 800d0be:	1b87      	subs	r7, r0, r6
 800d0c0:	4639      	mov	r1, r7
 800d0c2:	4620      	mov	r0, r4
 800d0c4:	f000 ff55 	bl	800df72 <__any_on>
 800d0c8:	4682      	mov	sl, r0
 800d0ca:	b1a8      	cbz	r0, 800d0f8 <__gethex+0x1f8>
 800d0cc:	1e7b      	subs	r3, r7, #1
 800d0ce:	1159      	asrs	r1, r3, #5
 800d0d0:	f003 021f 	and.w	r2, r3, #31
 800d0d4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d0d8:	f04f 0a01 	mov.w	sl, #1
 800d0dc:	fa0a f202 	lsl.w	r2, sl, r2
 800d0e0:	420a      	tst	r2, r1
 800d0e2:	d009      	beq.n	800d0f8 <__gethex+0x1f8>
 800d0e4:	4553      	cmp	r3, sl
 800d0e6:	dd05      	ble.n	800d0f4 <__gethex+0x1f4>
 800d0e8:	1eb9      	subs	r1, r7, #2
 800d0ea:	4620      	mov	r0, r4
 800d0ec:	f000 ff41 	bl	800df72 <__any_on>
 800d0f0:	2800      	cmp	r0, #0
 800d0f2:	d145      	bne.n	800d180 <__gethex+0x280>
 800d0f4:	f04f 0a02 	mov.w	sl, #2
 800d0f8:	4639      	mov	r1, r7
 800d0fa:	4620      	mov	r0, r4
 800d0fc:	f7ff fe99 	bl	800ce32 <rshift>
 800d100:	443d      	add	r5, r7
 800d102:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d106:	42ab      	cmp	r3, r5
 800d108:	da4c      	bge.n	800d1a4 <__gethex+0x2a4>
 800d10a:	ee18 0a10 	vmov	r0, s16
 800d10e:	4621      	mov	r1, r4
 800d110:	f000 fad2 	bl	800d6b8 <_Bfree>
 800d114:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d116:	2300      	movs	r3, #0
 800d118:	6013      	str	r3, [r2, #0]
 800d11a:	27a3      	movs	r7, #163	; 0xa3
 800d11c:	e785      	b.n	800d02a <__gethex+0x12a>
 800d11e:	1e73      	subs	r3, r6, #1
 800d120:	9a05      	ldr	r2, [sp, #20]
 800d122:	9303      	str	r3, [sp, #12]
 800d124:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d128:	4293      	cmp	r3, r2
 800d12a:	d019      	beq.n	800d160 <__gethex+0x260>
 800d12c:	f1bb 0f20 	cmp.w	fp, #32
 800d130:	d107      	bne.n	800d142 <__gethex+0x242>
 800d132:	9b02      	ldr	r3, [sp, #8]
 800d134:	9a00      	ldr	r2, [sp, #0]
 800d136:	f843 2b04 	str.w	r2, [r3], #4
 800d13a:	9302      	str	r3, [sp, #8]
 800d13c:	2300      	movs	r3, #0
 800d13e:	9300      	str	r3, [sp, #0]
 800d140:	469b      	mov	fp, r3
 800d142:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d146:	f7ff fec6 	bl	800ced6 <__hexdig_fun>
 800d14a:	9b00      	ldr	r3, [sp, #0]
 800d14c:	f000 000f 	and.w	r0, r0, #15
 800d150:	fa00 f00b 	lsl.w	r0, r0, fp
 800d154:	4303      	orrs	r3, r0
 800d156:	9300      	str	r3, [sp, #0]
 800d158:	f10b 0b04 	add.w	fp, fp, #4
 800d15c:	9b03      	ldr	r3, [sp, #12]
 800d15e:	e00d      	b.n	800d17c <__gethex+0x27c>
 800d160:	9b03      	ldr	r3, [sp, #12]
 800d162:	9a06      	ldr	r2, [sp, #24]
 800d164:	4413      	add	r3, r2
 800d166:	42bb      	cmp	r3, r7
 800d168:	d3e0      	bcc.n	800d12c <__gethex+0x22c>
 800d16a:	4618      	mov	r0, r3
 800d16c:	9901      	ldr	r1, [sp, #4]
 800d16e:	9307      	str	r3, [sp, #28]
 800d170:	4652      	mov	r2, sl
 800d172:	f001 fb28 	bl	800e7c6 <strncmp>
 800d176:	9b07      	ldr	r3, [sp, #28]
 800d178:	2800      	cmp	r0, #0
 800d17a:	d1d7      	bne.n	800d12c <__gethex+0x22c>
 800d17c:	461e      	mov	r6, r3
 800d17e:	e78b      	b.n	800d098 <__gethex+0x198>
 800d180:	f04f 0a03 	mov.w	sl, #3
 800d184:	e7b8      	b.n	800d0f8 <__gethex+0x1f8>
 800d186:	da0a      	bge.n	800d19e <__gethex+0x29e>
 800d188:	1a37      	subs	r7, r6, r0
 800d18a:	4621      	mov	r1, r4
 800d18c:	ee18 0a10 	vmov	r0, s16
 800d190:	463a      	mov	r2, r7
 800d192:	f000 fcad 	bl	800daf0 <__lshift>
 800d196:	1bed      	subs	r5, r5, r7
 800d198:	4604      	mov	r4, r0
 800d19a:	f100 0914 	add.w	r9, r0, #20
 800d19e:	f04f 0a00 	mov.w	sl, #0
 800d1a2:	e7ae      	b.n	800d102 <__gethex+0x202>
 800d1a4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d1a8:	42a8      	cmp	r0, r5
 800d1aa:	dd72      	ble.n	800d292 <__gethex+0x392>
 800d1ac:	1b45      	subs	r5, r0, r5
 800d1ae:	42ae      	cmp	r6, r5
 800d1b0:	dc36      	bgt.n	800d220 <__gethex+0x320>
 800d1b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d1b6:	2b02      	cmp	r3, #2
 800d1b8:	d02a      	beq.n	800d210 <__gethex+0x310>
 800d1ba:	2b03      	cmp	r3, #3
 800d1bc:	d02c      	beq.n	800d218 <__gethex+0x318>
 800d1be:	2b01      	cmp	r3, #1
 800d1c0:	d11c      	bne.n	800d1fc <__gethex+0x2fc>
 800d1c2:	42ae      	cmp	r6, r5
 800d1c4:	d11a      	bne.n	800d1fc <__gethex+0x2fc>
 800d1c6:	2e01      	cmp	r6, #1
 800d1c8:	d112      	bne.n	800d1f0 <__gethex+0x2f0>
 800d1ca:	9a04      	ldr	r2, [sp, #16]
 800d1cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d1d0:	6013      	str	r3, [r2, #0]
 800d1d2:	2301      	movs	r3, #1
 800d1d4:	6123      	str	r3, [r4, #16]
 800d1d6:	f8c9 3000 	str.w	r3, [r9]
 800d1da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d1dc:	2762      	movs	r7, #98	; 0x62
 800d1de:	601c      	str	r4, [r3, #0]
 800d1e0:	e723      	b.n	800d02a <__gethex+0x12a>
 800d1e2:	bf00      	nop
 800d1e4:	0800ef44 	.word	0x0800ef44
 800d1e8:	0800ee68 	.word	0x0800ee68
 800d1ec:	0800eedc 	.word	0x0800eedc
 800d1f0:	1e71      	subs	r1, r6, #1
 800d1f2:	4620      	mov	r0, r4
 800d1f4:	f000 febd 	bl	800df72 <__any_on>
 800d1f8:	2800      	cmp	r0, #0
 800d1fa:	d1e6      	bne.n	800d1ca <__gethex+0x2ca>
 800d1fc:	ee18 0a10 	vmov	r0, s16
 800d200:	4621      	mov	r1, r4
 800d202:	f000 fa59 	bl	800d6b8 <_Bfree>
 800d206:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d208:	2300      	movs	r3, #0
 800d20a:	6013      	str	r3, [r2, #0]
 800d20c:	2750      	movs	r7, #80	; 0x50
 800d20e:	e70c      	b.n	800d02a <__gethex+0x12a>
 800d210:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d212:	2b00      	cmp	r3, #0
 800d214:	d1f2      	bne.n	800d1fc <__gethex+0x2fc>
 800d216:	e7d8      	b.n	800d1ca <__gethex+0x2ca>
 800d218:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d1d5      	bne.n	800d1ca <__gethex+0x2ca>
 800d21e:	e7ed      	b.n	800d1fc <__gethex+0x2fc>
 800d220:	1e6f      	subs	r7, r5, #1
 800d222:	f1ba 0f00 	cmp.w	sl, #0
 800d226:	d131      	bne.n	800d28c <__gethex+0x38c>
 800d228:	b127      	cbz	r7, 800d234 <__gethex+0x334>
 800d22a:	4639      	mov	r1, r7
 800d22c:	4620      	mov	r0, r4
 800d22e:	f000 fea0 	bl	800df72 <__any_on>
 800d232:	4682      	mov	sl, r0
 800d234:	117b      	asrs	r3, r7, #5
 800d236:	2101      	movs	r1, #1
 800d238:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d23c:	f007 071f 	and.w	r7, r7, #31
 800d240:	fa01 f707 	lsl.w	r7, r1, r7
 800d244:	421f      	tst	r7, r3
 800d246:	4629      	mov	r1, r5
 800d248:	4620      	mov	r0, r4
 800d24a:	bf18      	it	ne
 800d24c:	f04a 0a02 	orrne.w	sl, sl, #2
 800d250:	1b76      	subs	r6, r6, r5
 800d252:	f7ff fdee 	bl	800ce32 <rshift>
 800d256:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d25a:	2702      	movs	r7, #2
 800d25c:	f1ba 0f00 	cmp.w	sl, #0
 800d260:	d048      	beq.n	800d2f4 <__gethex+0x3f4>
 800d262:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d266:	2b02      	cmp	r3, #2
 800d268:	d015      	beq.n	800d296 <__gethex+0x396>
 800d26a:	2b03      	cmp	r3, #3
 800d26c:	d017      	beq.n	800d29e <__gethex+0x39e>
 800d26e:	2b01      	cmp	r3, #1
 800d270:	d109      	bne.n	800d286 <__gethex+0x386>
 800d272:	f01a 0f02 	tst.w	sl, #2
 800d276:	d006      	beq.n	800d286 <__gethex+0x386>
 800d278:	f8d9 0000 	ldr.w	r0, [r9]
 800d27c:	ea4a 0a00 	orr.w	sl, sl, r0
 800d280:	f01a 0f01 	tst.w	sl, #1
 800d284:	d10e      	bne.n	800d2a4 <__gethex+0x3a4>
 800d286:	f047 0710 	orr.w	r7, r7, #16
 800d28a:	e033      	b.n	800d2f4 <__gethex+0x3f4>
 800d28c:	f04f 0a01 	mov.w	sl, #1
 800d290:	e7d0      	b.n	800d234 <__gethex+0x334>
 800d292:	2701      	movs	r7, #1
 800d294:	e7e2      	b.n	800d25c <__gethex+0x35c>
 800d296:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d298:	f1c3 0301 	rsb	r3, r3, #1
 800d29c:	9315      	str	r3, [sp, #84]	; 0x54
 800d29e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d0f0      	beq.n	800d286 <__gethex+0x386>
 800d2a4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d2a8:	f104 0314 	add.w	r3, r4, #20
 800d2ac:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d2b0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d2b4:	f04f 0c00 	mov.w	ip, #0
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2be:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d2c2:	d01c      	beq.n	800d2fe <__gethex+0x3fe>
 800d2c4:	3201      	adds	r2, #1
 800d2c6:	6002      	str	r2, [r0, #0]
 800d2c8:	2f02      	cmp	r7, #2
 800d2ca:	f104 0314 	add.w	r3, r4, #20
 800d2ce:	d13f      	bne.n	800d350 <__gethex+0x450>
 800d2d0:	f8d8 2000 	ldr.w	r2, [r8]
 800d2d4:	3a01      	subs	r2, #1
 800d2d6:	42b2      	cmp	r2, r6
 800d2d8:	d10a      	bne.n	800d2f0 <__gethex+0x3f0>
 800d2da:	1171      	asrs	r1, r6, #5
 800d2dc:	2201      	movs	r2, #1
 800d2de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d2e2:	f006 061f 	and.w	r6, r6, #31
 800d2e6:	fa02 f606 	lsl.w	r6, r2, r6
 800d2ea:	421e      	tst	r6, r3
 800d2ec:	bf18      	it	ne
 800d2ee:	4617      	movne	r7, r2
 800d2f0:	f047 0720 	orr.w	r7, r7, #32
 800d2f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d2f6:	601c      	str	r4, [r3, #0]
 800d2f8:	9b04      	ldr	r3, [sp, #16]
 800d2fa:	601d      	str	r5, [r3, #0]
 800d2fc:	e695      	b.n	800d02a <__gethex+0x12a>
 800d2fe:	4299      	cmp	r1, r3
 800d300:	f843 cc04 	str.w	ip, [r3, #-4]
 800d304:	d8d8      	bhi.n	800d2b8 <__gethex+0x3b8>
 800d306:	68a3      	ldr	r3, [r4, #8]
 800d308:	459b      	cmp	fp, r3
 800d30a:	db19      	blt.n	800d340 <__gethex+0x440>
 800d30c:	6861      	ldr	r1, [r4, #4]
 800d30e:	ee18 0a10 	vmov	r0, s16
 800d312:	3101      	adds	r1, #1
 800d314:	f000 f990 	bl	800d638 <_Balloc>
 800d318:	4681      	mov	r9, r0
 800d31a:	b918      	cbnz	r0, 800d324 <__gethex+0x424>
 800d31c:	4b1a      	ldr	r3, [pc, #104]	; (800d388 <__gethex+0x488>)
 800d31e:	4602      	mov	r2, r0
 800d320:	2184      	movs	r1, #132	; 0x84
 800d322:	e6a8      	b.n	800d076 <__gethex+0x176>
 800d324:	6922      	ldr	r2, [r4, #16]
 800d326:	3202      	adds	r2, #2
 800d328:	f104 010c 	add.w	r1, r4, #12
 800d32c:	0092      	lsls	r2, r2, #2
 800d32e:	300c      	adds	r0, #12
 800d330:	f000 f974 	bl	800d61c <memcpy>
 800d334:	4621      	mov	r1, r4
 800d336:	ee18 0a10 	vmov	r0, s16
 800d33a:	f000 f9bd 	bl	800d6b8 <_Bfree>
 800d33e:	464c      	mov	r4, r9
 800d340:	6923      	ldr	r3, [r4, #16]
 800d342:	1c5a      	adds	r2, r3, #1
 800d344:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d348:	6122      	str	r2, [r4, #16]
 800d34a:	2201      	movs	r2, #1
 800d34c:	615a      	str	r2, [r3, #20]
 800d34e:	e7bb      	b.n	800d2c8 <__gethex+0x3c8>
 800d350:	6922      	ldr	r2, [r4, #16]
 800d352:	455a      	cmp	r2, fp
 800d354:	dd0b      	ble.n	800d36e <__gethex+0x46e>
 800d356:	2101      	movs	r1, #1
 800d358:	4620      	mov	r0, r4
 800d35a:	f7ff fd6a 	bl	800ce32 <rshift>
 800d35e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d362:	3501      	adds	r5, #1
 800d364:	42ab      	cmp	r3, r5
 800d366:	f6ff aed0 	blt.w	800d10a <__gethex+0x20a>
 800d36a:	2701      	movs	r7, #1
 800d36c:	e7c0      	b.n	800d2f0 <__gethex+0x3f0>
 800d36e:	f016 061f 	ands.w	r6, r6, #31
 800d372:	d0fa      	beq.n	800d36a <__gethex+0x46a>
 800d374:	4453      	add	r3, sl
 800d376:	f1c6 0620 	rsb	r6, r6, #32
 800d37a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d37e:	f000 fa4d 	bl	800d81c <__hi0bits>
 800d382:	42b0      	cmp	r0, r6
 800d384:	dbe7      	blt.n	800d356 <__gethex+0x456>
 800d386:	e7f0      	b.n	800d36a <__gethex+0x46a>
 800d388:	0800ee68 	.word	0x0800ee68

0800d38c <L_shift>:
 800d38c:	f1c2 0208 	rsb	r2, r2, #8
 800d390:	0092      	lsls	r2, r2, #2
 800d392:	b570      	push	{r4, r5, r6, lr}
 800d394:	f1c2 0620 	rsb	r6, r2, #32
 800d398:	6843      	ldr	r3, [r0, #4]
 800d39a:	6804      	ldr	r4, [r0, #0]
 800d39c:	fa03 f506 	lsl.w	r5, r3, r6
 800d3a0:	432c      	orrs	r4, r5
 800d3a2:	40d3      	lsrs	r3, r2
 800d3a4:	6004      	str	r4, [r0, #0]
 800d3a6:	f840 3f04 	str.w	r3, [r0, #4]!
 800d3aa:	4288      	cmp	r0, r1
 800d3ac:	d3f4      	bcc.n	800d398 <L_shift+0xc>
 800d3ae:	bd70      	pop	{r4, r5, r6, pc}

0800d3b0 <__match>:
 800d3b0:	b530      	push	{r4, r5, lr}
 800d3b2:	6803      	ldr	r3, [r0, #0]
 800d3b4:	3301      	adds	r3, #1
 800d3b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d3ba:	b914      	cbnz	r4, 800d3c2 <__match+0x12>
 800d3bc:	6003      	str	r3, [r0, #0]
 800d3be:	2001      	movs	r0, #1
 800d3c0:	bd30      	pop	{r4, r5, pc}
 800d3c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d3ca:	2d19      	cmp	r5, #25
 800d3cc:	bf98      	it	ls
 800d3ce:	3220      	addls	r2, #32
 800d3d0:	42a2      	cmp	r2, r4
 800d3d2:	d0f0      	beq.n	800d3b6 <__match+0x6>
 800d3d4:	2000      	movs	r0, #0
 800d3d6:	e7f3      	b.n	800d3c0 <__match+0x10>

0800d3d8 <__hexnan>:
 800d3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3dc:	680b      	ldr	r3, [r1, #0]
 800d3de:	115e      	asrs	r6, r3, #5
 800d3e0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d3e4:	f013 031f 	ands.w	r3, r3, #31
 800d3e8:	b087      	sub	sp, #28
 800d3ea:	bf18      	it	ne
 800d3ec:	3604      	addne	r6, #4
 800d3ee:	2500      	movs	r5, #0
 800d3f0:	1f37      	subs	r7, r6, #4
 800d3f2:	4690      	mov	r8, r2
 800d3f4:	6802      	ldr	r2, [r0, #0]
 800d3f6:	9301      	str	r3, [sp, #4]
 800d3f8:	4682      	mov	sl, r0
 800d3fa:	f846 5c04 	str.w	r5, [r6, #-4]
 800d3fe:	46b9      	mov	r9, r7
 800d400:	463c      	mov	r4, r7
 800d402:	9502      	str	r5, [sp, #8]
 800d404:	46ab      	mov	fp, r5
 800d406:	7851      	ldrb	r1, [r2, #1]
 800d408:	1c53      	adds	r3, r2, #1
 800d40a:	9303      	str	r3, [sp, #12]
 800d40c:	b341      	cbz	r1, 800d460 <__hexnan+0x88>
 800d40e:	4608      	mov	r0, r1
 800d410:	9205      	str	r2, [sp, #20]
 800d412:	9104      	str	r1, [sp, #16]
 800d414:	f7ff fd5f 	bl	800ced6 <__hexdig_fun>
 800d418:	2800      	cmp	r0, #0
 800d41a:	d14f      	bne.n	800d4bc <__hexnan+0xe4>
 800d41c:	9904      	ldr	r1, [sp, #16]
 800d41e:	9a05      	ldr	r2, [sp, #20]
 800d420:	2920      	cmp	r1, #32
 800d422:	d818      	bhi.n	800d456 <__hexnan+0x7e>
 800d424:	9b02      	ldr	r3, [sp, #8]
 800d426:	459b      	cmp	fp, r3
 800d428:	dd13      	ble.n	800d452 <__hexnan+0x7a>
 800d42a:	454c      	cmp	r4, r9
 800d42c:	d206      	bcs.n	800d43c <__hexnan+0x64>
 800d42e:	2d07      	cmp	r5, #7
 800d430:	dc04      	bgt.n	800d43c <__hexnan+0x64>
 800d432:	462a      	mov	r2, r5
 800d434:	4649      	mov	r1, r9
 800d436:	4620      	mov	r0, r4
 800d438:	f7ff ffa8 	bl	800d38c <L_shift>
 800d43c:	4544      	cmp	r4, r8
 800d43e:	d950      	bls.n	800d4e2 <__hexnan+0x10a>
 800d440:	2300      	movs	r3, #0
 800d442:	f1a4 0904 	sub.w	r9, r4, #4
 800d446:	f844 3c04 	str.w	r3, [r4, #-4]
 800d44a:	f8cd b008 	str.w	fp, [sp, #8]
 800d44e:	464c      	mov	r4, r9
 800d450:	461d      	mov	r5, r3
 800d452:	9a03      	ldr	r2, [sp, #12]
 800d454:	e7d7      	b.n	800d406 <__hexnan+0x2e>
 800d456:	2929      	cmp	r1, #41	; 0x29
 800d458:	d156      	bne.n	800d508 <__hexnan+0x130>
 800d45a:	3202      	adds	r2, #2
 800d45c:	f8ca 2000 	str.w	r2, [sl]
 800d460:	f1bb 0f00 	cmp.w	fp, #0
 800d464:	d050      	beq.n	800d508 <__hexnan+0x130>
 800d466:	454c      	cmp	r4, r9
 800d468:	d206      	bcs.n	800d478 <__hexnan+0xa0>
 800d46a:	2d07      	cmp	r5, #7
 800d46c:	dc04      	bgt.n	800d478 <__hexnan+0xa0>
 800d46e:	462a      	mov	r2, r5
 800d470:	4649      	mov	r1, r9
 800d472:	4620      	mov	r0, r4
 800d474:	f7ff ff8a 	bl	800d38c <L_shift>
 800d478:	4544      	cmp	r4, r8
 800d47a:	d934      	bls.n	800d4e6 <__hexnan+0x10e>
 800d47c:	f1a8 0204 	sub.w	r2, r8, #4
 800d480:	4623      	mov	r3, r4
 800d482:	f853 1b04 	ldr.w	r1, [r3], #4
 800d486:	f842 1f04 	str.w	r1, [r2, #4]!
 800d48a:	429f      	cmp	r7, r3
 800d48c:	d2f9      	bcs.n	800d482 <__hexnan+0xaa>
 800d48e:	1b3b      	subs	r3, r7, r4
 800d490:	f023 0303 	bic.w	r3, r3, #3
 800d494:	3304      	adds	r3, #4
 800d496:	3401      	adds	r4, #1
 800d498:	3e03      	subs	r6, #3
 800d49a:	42b4      	cmp	r4, r6
 800d49c:	bf88      	it	hi
 800d49e:	2304      	movhi	r3, #4
 800d4a0:	4443      	add	r3, r8
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	f843 2b04 	str.w	r2, [r3], #4
 800d4a8:	429f      	cmp	r7, r3
 800d4aa:	d2fb      	bcs.n	800d4a4 <__hexnan+0xcc>
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	b91b      	cbnz	r3, 800d4b8 <__hexnan+0xe0>
 800d4b0:	4547      	cmp	r7, r8
 800d4b2:	d127      	bne.n	800d504 <__hexnan+0x12c>
 800d4b4:	2301      	movs	r3, #1
 800d4b6:	603b      	str	r3, [r7, #0]
 800d4b8:	2005      	movs	r0, #5
 800d4ba:	e026      	b.n	800d50a <__hexnan+0x132>
 800d4bc:	3501      	adds	r5, #1
 800d4be:	2d08      	cmp	r5, #8
 800d4c0:	f10b 0b01 	add.w	fp, fp, #1
 800d4c4:	dd06      	ble.n	800d4d4 <__hexnan+0xfc>
 800d4c6:	4544      	cmp	r4, r8
 800d4c8:	d9c3      	bls.n	800d452 <__hexnan+0x7a>
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	f844 3c04 	str.w	r3, [r4, #-4]
 800d4d0:	2501      	movs	r5, #1
 800d4d2:	3c04      	subs	r4, #4
 800d4d4:	6822      	ldr	r2, [r4, #0]
 800d4d6:	f000 000f 	and.w	r0, r0, #15
 800d4da:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d4de:	6022      	str	r2, [r4, #0]
 800d4e0:	e7b7      	b.n	800d452 <__hexnan+0x7a>
 800d4e2:	2508      	movs	r5, #8
 800d4e4:	e7b5      	b.n	800d452 <__hexnan+0x7a>
 800d4e6:	9b01      	ldr	r3, [sp, #4]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d0df      	beq.n	800d4ac <__hexnan+0xd4>
 800d4ec:	f04f 32ff 	mov.w	r2, #4294967295
 800d4f0:	f1c3 0320 	rsb	r3, r3, #32
 800d4f4:	fa22 f303 	lsr.w	r3, r2, r3
 800d4f8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d4fc:	401a      	ands	r2, r3
 800d4fe:	f846 2c04 	str.w	r2, [r6, #-4]
 800d502:	e7d3      	b.n	800d4ac <__hexnan+0xd4>
 800d504:	3f04      	subs	r7, #4
 800d506:	e7d1      	b.n	800d4ac <__hexnan+0xd4>
 800d508:	2004      	movs	r0, #4
 800d50a:	b007      	add	sp, #28
 800d50c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d510 <_localeconv_r>:
 800d510:	4800      	ldr	r0, [pc, #0]	; (800d514 <_localeconv_r+0x4>)
 800d512:	4770      	bx	lr
 800d514:	20000164 	.word	0x20000164

0800d518 <__retarget_lock_init_recursive>:
 800d518:	4770      	bx	lr

0800d51a <__retarget_lock_acquire_recursive>:
 800d51a:	4770      	bx	lr

0800d51c <__retarget_lock_release_recursive>:
 800d51c:	4770      	bx	lr

0800d51e <__swhatbuf_r>:
 800d51e:	b570      	push	{r4, r5, r6, lr}
 800d520:	460e      	mov	r6, r1
 800d522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d526:	2900      	cmp	r1, #0
 800d528:	b096      	sub	sp, #88	; 0x58
 800d52a:	4614      	mov	r4, r2
 800d52c:	461d      	mov	r5, r3
 800d52e:	da08      	bge.n	800d542 <__swhatbuf_r+0x24>
 800d530:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d534:	2200      	movs	r2, #0
 800d536:	602a      	str	r2, [r5, #0]
 800d538:	061a      	lsls	r2, r3, #24
 800d53a:	d410      	bmi.n	800d55e <__swhatbuf_r+0x40>
 800d53c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d540:	e00e      	b.n	800d560 <__swhatbuf_r+0x42>
 800d542:	466a      	mov	r2, sp
 800d544:	f001 f9b2 	bl	800e8ac <_fstat_r>
 800d548:	2800      	cmp	r0, #0
 800d54a:	dbf1      	blt.n	800d530 <__swhatbuf_r+0x12>
 800d54c:	9a01      	ldr	r2, [sp, #4]
 800d54e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d552:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d556:	425a      	negs	r2, r3
 800d558:	415a      	adcs	r2, r3
 800d55a:	602a      	str	r2, [r5, #0]
 800d55c:	e7ee      	b.n	800d53c <__swhatbuf_r+0x1e>
 800d55e:	2340      	movs	r3, #64	; 0x40
 800d560:	2000      	movs	r0, #0
 800d562:	6023      	str	r3, [r4, #0]
 800d564:	b016      	add	sp, #88	; 0x58
 800d566:	bd70      	pop	{r4, r5, r6, pc}

0800d568 <__smakebuf_r>:
 800d568:	898b      	ldrh	r3, [r1, #12]
 800d56a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d56c:	079d      	lsls	r5, r3, #30
 800d56e:	4606      	mov	r6, r0
 800d570:	460c      	mov	r4, r1
 800d572:	d507      	bpl.n	800d584 <__smakebuf_r+0x1c>
 800d574:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d578:	6023      	str	r3, [r4, #0]
 800d57a:	6123      	str	r3, [r4, #16]
 800d57c:	2301      	movs	r3, #1
 800d57e:	6163      	str	r3, [r4, #20]
 800d580:	b002      	add	sp, #8
 800d582:	bd70      	pop	{r4, r5, r6, pc}
 800d584:	ab01      	add	r3, sp, #4
 800d586:	466a      	mov	r2, sp
 800d588:	f7ff ffc9 	bl	800d51e <__swhatbuf_r>
 800d58c:	9900      	ldr	r1, [sp, #0]
 800d58e:	4605      	mov	r5, r0
 800d590:	4630      	mov	r0, r6
 800d592:	f000 fd91 	bl	800e0b8 <_malloc_r>
 800d596:	b948      	cbnz	r0, 800d5ac <__smakebuf_r+0x44>
 800d598:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d59c:	059a      	lsls	r2, r3, #22
 800d59e:	d4ef      	bmi.n	800d580 <__smakebuf_r+0x18>
 800d5a0:	f023 0303 	bic.w	r3, r3, #3
 800d5a4:	f043 0302 	orr.w	r3, r3, #2
 800d5a8:	81a3      	strh	r3, [r4, #12]
 800d5aa:	e7e3      	b.n	800d574 <__smakebuf_r+0xc>
 800d5ac:	4b0d      	ldr	r3, [pc, #52]	; (800d5e4 <__smakebuf_r+0x7c>)
 800d5ae:	62b3      	str	r3, [r6, #40]	; 0x28
 800d5b0:	89a3      	ldrh	r3, [r4, #12]
 800d5b2:	6020      	str	r0, [r4, #0]
 800d5b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5b8:	81a3      	strh	r3, [r4, #12]
 800d5ba:	9b00      	ldr	r3, [sp, #0]
 800d5bc:	6163      	str	r3, [r4, #20]
 800d5be:	9b01      	ldr	r3, [sp, #4]
 800d5c0:	6120      	str	r0, [r4, #16]
 800d5c2:	b15b      	cbz	r3, 800d5dc <__smakebuf_r+0x74>
 800d5c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5c8:	4630      	mov	r0, r6
 800d5ca:	f001 f981 	bl	800e8d0 <_isatty_r>
 800d5ce:	b128      	cbz	r0, 800d5dc <__smakebuf_r+0x74>
 800d5d0:	89a3      	ldrh	r3, [r4, #12]
 800d5d2:	f023 0303 	bic.w	r3, r3, #3
 800d5d6:	f043 0301 	orr.w	r3, r3, #1
 800d5da:	81a3      	strh	r3, [r4, #12]
 800d5dc:	89a0      	ldrh	r0, [r4, #12]
 800d5de:	4305      	orrs	r5, r0
 800d5e0:	81a5      	strh	r5, [r4, #12]
 800d5e2:	e7cd      	b.n	800d580 <__smakebuf_r+0x18>
 800d5e4:	0800cc91 	.word	0x0800cc91

0800d5e8 <malloc>:
 800d5e8:	4b02      	ldr	r3, [pc, #8]	; (800d5f4 <malloc+0xc>)
 800d5ea:	4601      	mov	r1, r0
 800d5ec:	6818      	ldr	r0, [r3, #0]
 800d5ee:	f000 bd63 	b.w	800e0b8 <_malloc_r>
 800d5f2:	bf00      	nop
 800d5f4:	2000000c 	.word	0x2000000c

0800d5f8 <__ascii_mbtowc>:
 800d5f8:	b082      	sub	sp, #8
 800d5fa:	b901      	cbnz	r1, 800d5fe <__ascii_mbtowc+0x6>
 800d5fc:	a901      	add	r1, sp, #4
 800d5fe:	b142      	cbz	r2, 800d612 <__ascii_mbtowc+0x1a>
 800d600:	b14b      	cbz	r3, 800d616 <__ascii_mbtowc+0x1e>
 800d602:	7813      	ldrb	r3, [r2, #0]
 800d604:	600b      	str	r3, [r1, #0]
 800d606:	7812      	ldrb	r2, [r2, #0]
 800d608:	1e10      	subs	r0, r2, #0
 800d60a:	bf18      	it	ne
 800d60c:	2001      	movne	r0, #1
 800d60e:	b002      	add	sp, #8
 800d610:	4770      	bx	lr
 800d612:	4610      	mov	r0, r2
 800d614:	e7fb      	b.n	800d60e <__ascii_mbtowc+0x16>
 800d616:	f06f 0001 	mvn.w	r0, #1
 800d61a:	e7f8      	b.n	800d60e <__ascii_mbtowc+0x16>

0800d61c <memcpy>:
 800d61c:	440a      	add	r2, r1
 800d61e:	4291      	cmp	r1, r2
 800d620:	f100 33ff 	add.w	r3, r0, #4294967295
 800d624:	d100      	bne.n	800d628 <memcpy+0xc>
 800d626:	4770      	bx	lr
 800d628:	b510      	push	{r4, lr}
 800d62a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d62e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d632:	4291      	cmp	r1, r2
 800d634:	d1f9      	bne.n	800d62a <memcpy+0xe>
 800d636:	bd10      	pop	{r4, pc}

0800d638 <_Balloc>:
 800d638:	b570      	push	{r4, r5, r6, lr}
 800d63a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d63c:	4604      	mov	r4, r0
 800d63e:	460d      	mov	r5, r1
 800d640:	b976      	cbnz	r6, 800d660 <_Balloc+0x28>
 800d642:	2010      	movs	r0, #16
 800d644:	f7ff ffd0 	bl	800d5e8 <malloc>
 800d648:	4602      	mov	r2, r0
 800d64a:	6260      	str	r0, [r4, #36]	; 0x24
 800d64c:	b920      	cbnz	r0, 800d658 <_Balloc+0x20>
 800d64e:	4b18      	ldr	r3, [pc, #96]	; (800d6b0 <_Balloc+0x78>)
 800d650:	4818      	ldr	r0, [pc, #96]	; (800d6b4 <_Balloc+0x7c>)
 800d652:	2166      	movs	r1, #102	; 0x66
 800d654:	f001 f8ea 	bl	800e82c <__assert_func>
 800d658:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d65c:	6006      	str	r6, [r0, #0]
 800d65e:	60c6      	str	r6, [r0, #12]
 800d660:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d662:	68f3      	ldr	r3, [r6, #12]
 800d664:	b183      	cbz	r3, 800d688 <_Balloc+0x50>
 800d666:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d668:	68db      	ldr	r3, [r3, #12]
 800d66a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d66e:	b9b8      	cbnz	r0, 800d6a0 <_Balloc+0x68>
 800d670:	2101      	movs	r1, #1
 800d672:	fa01 f605 	lsl.w	r6, r1, r5
 800d676:	1d72      	adds	r2, r6, #5
 800d678:	0092      	lsls	r2, r2, #2
 800d67a:	4620      	mov	r0, r4
 800d67c:	f000 fc9a 	bl	800dfb4 <_calloc_r>
 800d680:	b160      	cbz	r0, 800d69c <_Balloc+0x64>
 800d682:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d686:	e00e      	b.n	800d6a6 <_Balloc+0x6e>
 800d688:	2221      	movs	r2, #33	; 0x21
 800d68a:	2104      	movs	r1, #4
 800d68c:	4620      	mov	r0, r4
 800d68e:	f000 fc91 	bl	800dfb4 <_calloc_r>
 800d692:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d694:	60f0      	str	r0, [r6, #12]
 800d696:	68db      	ldr	r3, [r3, #12]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d1e4      	bne.n	800d666 <_Balloc+0x2e>
 800d69c:	2000      	movs	r0, #0
 800d69e:	bd70      	pop	{r4, r5, r6, pc}
 800d6a0:	6802      	ldr	r2, [r0, #0]
 800d6a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d6ac:	e7f7      	b.n	800d69e <_Balloc+0x66>
 800d6ae:	bf00      	nop
 800d6b0:	0800edf6 	.word	0x0800edf6
 800d6b4:	0800ef58 	.word	0x0800ef58

0800d6b8 <_Bfree>:
 800d6b8:	b570      	push	{r4, r5, r6, lr}
 800d6ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d6bc:	4605      	mov	r5, r0
 800d6be:	460c      	mov	r4, r1
 800d6c0:	b976      	cbnz	r6, 800d6e0 <_Bfree+0x28>
 800d6c2:	2010      	movs	r0, #16
 800d6c4:	f7ff ff90 	bl	800d5e8 <malloc>
 800d6c8:	4602      	mov	r2, r0
 800d6ca:	6268      	str	r0, [r5, #36]	; 0x24
 800d6cc:	b920      	cbnz	r0, 800d6d8 <_Bfree+0x20>
 800d6ce:	4b09      	ldr	r3, [pc, #36]	; (800d6f4 <_Bfree+0x3c>)
 800d6d0:	4809      	ldr	r0, [pc, #36]	; (800d6f8 <_Bfree+0x40>)
 800d6d2:	218a      	movs	r1, #138	; 0x8a
 800d6d4:	f001 f8aa 	bl	800e82c <__assert_func>
 800d6d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d6dc:	6006      	str	r6, [r0, #0]
 800d6de:	60c6      	str	r6, [r0, #12]
 800d6e0:	b13c      	cbz	r4, 800d6f2 <_Bfree+0x3a>
 800d6e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d6e4:	6862      	ldr	r2, [r4, #4]
 800d6e6:	68db      	ldr	r3, [r3, #12]
 800d6e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d6ec:	6021      	str	r1, [r4, #0]
 800d6ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d6f2:	bd70      	pop	{r4, r5, r6, pc}
 800d6f4:	0800edf6 	.word	0x0800edf6
 800d6f8:	0800ef58 	.word	0x0800ef58

0800d6fc <__multadd>:
 800d6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d700:	690d      	ldr	r5, [r1, #16]
 800d702:	4607      	mov	r7, r0
 800d704:	460c      	mov	r4, r1
 800d706:	461e      	mov	r6, r3
 800d708:	f101 0c14 	add.w	ip, r1, #20
 800d70c:	2000      	movs	r0, #0
 800d70e:	f8dc 3000 	ldr.w	r3, [ip]
 800d712:	b299      	uxth	r1, r3
 800d714:	fb02 6101 	mla	r1, r2, r1, r6
 800d718:	0c1e      	lsrs	r6, r3, #16
 800d71a:	0c0b      	lsrs	r3, r1, #16
 800d71c:	fb02 3306 	mla	r3, r2, r6, r3
 800d720:	b289      	uxth	r1, r1
 800d722:	3001      	adds	r0, #1
 800d724:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d728:	4285      	cmp	r5, r0
 800d72a:	f84c 1b04 	str.w	r1, [ip], #4
 800d72e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d732:	dcec      	bgt.n	800d70e <__multadd+0x12>
 800d734:	b30e      	cbz	r6, 800d77a <__multadd+0x7e>
 800d736:	68a3      	ldr	r3, [r4, #8]
 800d738:	42ab      	cmp	r3, r5
 800d73a:	dc19      	bgt.n	800d770 <__multadd+0x74>
 800d73c:	6861      	ldr	r1, [r4, #4]
 800d73e:	4638      	mov	r0, r7
 800d740:	3101      	adds	r1, #1
 800d742:	f7ff ff79 	bl	800d638 <_Balloc>
 800d746:	4680      	mov	r8, r0
 800d748:	b928      	cbnz	r0, 800d756 <__multadd+0x5a>
 800d74a:	4602      	mov	r2, r0
 800d74c:	4b0c      	ldr	r3, [pc, #48]	; (800d780 <__multadd+0x84>)
 800d74e:	480d      	ldr	r0, [pc, #52]	; (800d784 <__multadd+0x88>)
 800d750:	21b5      	movs	r1, #181	; 0xb5
 800d752:	f001 f86b 	bl	800e82c <__assert_func>
 800d756:	6922      	ldr	r2, [r4, #16]
 800d758:	3202      	adds	r2, #2
 800d75a:	f104 010c 	add.w	r1, r4, #12
 800d75e:	0092      	lsls	r2, r2, #2
 800d760:	300c      	adds	r0, #12
 800d762:	f7ff ff5b 	bl	800d61c <memcpy>
 800d766:	4621      	mov	r1, r4
 800d768:	4638      	mov	r0, r7
 800d76a:	f7ff ffa5 	bl	800d6b8 <_Bfree>
 800d76e:	4644      	mov	r4, r8
 800d770:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d774:	3501      	adds	r5, #1
 800d776:	615e      	str	r6, [r3, #20]
 800d778:	6125      	str	r5, [r4, #16]
 800d77a:	4620      	mov	r0, r4
 800d77c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d780:	0800ee68 	.word	0x0800ee68
 800d784:	0800ef58 	.word	0x0800ef58

0800d788 <__s2b>:
 800d788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d78c:	460c      	mov	r4, r1
 800d78e:	4615      	mov	r5, r2
 800d790:	461f      	mov	r7, r3
 800d792:	2209      	movs	r2, #9
 800d794:	3308      	adds	r3, #8
 800d796:	4606      	mov	r6, r0
 800d798:	fb93 f3f2 	sdiv	r3, r3, r2
 800d79c:	2100      	movs	r1, #0
 800d79e:	2201      	movs	r2, #1
 800d7a0:	429a      	cmp	r2, r3
 800d7a2:	db09      	blt.n	800d7b8 <__s2b+0x30>
 800d7a4:	4630      	mov	r0, r6
 800d7a6:	f7ff ff47 	bl	800d638 <_Balloc>
 800d7aa:	b940      	cbnz	r0, 800d7be <__s2b+0x36>
 800d7ac:	4602      	mov	r2, r0
 800d7ae:	4b19      	ldr	r3, [pc, #100]	; (800d814 <__s2b+0x8c>)
 800d7b0:	4819      	ldr	r0, [pc, #100]	; (800d818 <__s2b+0x90>)
 800d7b2:	21ce      	movs	r1, #206	; 0xce
 800d7b4:	f001 f83a 	bl	800e82c <__assert_func>
 800d7b8:	0052      	lsls	r2, r2, #1
 800d7ba:	3101      	adds	r1, #1
 800d7bc:	e7f0      	b.n	800d7a0 <__s2b+0x18>
 800d7be:	9b08      	ldr	r3, [sp, #32]
 800d7c0:	6143      	str	r3, [r0, #20]
 800d7c2:	2d09      	cmp	r5, #9
 800d7c4:	f04f 0301 	mov.w	r3, #1
 800d7c8:	6103      	str	r3, [r0, #16]
 800d7ca:	dd16      	ble.n	800d7fa <__s2b+0x72>
 800d7cc:	f104 0909 	add.w	r9, r4, #9
 800d7d0:	46c8      	mov	r8, r9
 800d7d2:	442c      	add	r4, r5
 800d7d4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d7d8:	4601      	mov	r1, r0
 800d7da:	3b30      	subs	r3, #48	; 0x30
 800d7dc:	220a      	movs	r2, #10
 800d7de:	4630      	mov	r0, r6
 800d7e0:	f7ff ff8c 	bl	800d6fc <__multadd>
 800d7e4:	45a0      	cmp	r8, r4
 800d7e6:	d1f5      	bne.n	800d7d4 <__s2b+0x4c>
 800d7e8:	f1a5 0408 	sub.w	r4, r5, #8
 800d7ec:	444c      	add	r4, r9
 800d7ee:	1b2d      	subs	r5, r5, r4
 800d7f0:	1963      	adds	r3, r4, r5
 800d7f2:	42bb      	cmp	r3, r7
 800d7f4:	db04      	blt.n	800d800 <__s2b+0x78>
 800d7f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7fa:	340a      	adds	r4, #10
 800d7fc:	2509      	movs	r5, #9
 800d7fe:	e7f6      	b.n	800d7ee <__s2b+0x66>
 800d800:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d804:	4601      	mov	r1, r0
 800d806:	3b30      	subs	r3, #48	; 0x30
 800d808:	220a      	movs	r2, #10
 800d80a:	4630      	mov	r0, r6
 800d80c:	f7ff ff76 	bl	800d6fc <__multadd>
 800d810:	e7ee      	b.n	800d7f0 <__s2b+0x68>
 800d812:	bf00      	nop
 800d814:	0800ee68 	.word	0x0800ee68
 800d818:	0800ef58 	.word	0x0800ef58

0800d81c <__hi0bits>:
 800d81c:	0c03      	lsrs	r3, r0, #16
 800d81e:	041b      	lsls	r3, r3, #16
 800d820:	b9d3      	cbnz	r3, 800d858 <__hi0bits+0x3c>
 800d822:	0400      	lsls	r0, r0, #16
 800d824:	2310      	movs	r3, #16
 800d826:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d82a:	bf04      	itt	eq
 800d82c:	0200      	lsleq	r0, r0, #8
 800d82e:	3308      	addeq	r3, #8
 800d830:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d834:	bf04      	itt	eq
 800d836:	0100      	lsleq	r0, r0, #4
 800d838:	3304      	addeq	r3, #4
 800d83a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d83e:	bf04      	itt	eq
 800d840:	0080      	lsleq	r0, r0, #2
 800d842:	3302      	addeq	r3, #2
 800d844:	2800      	cmp	r0, #0
 800d846:	db05      	blt.n	800d854 <__hi0bits+0x38>
 800d848:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d84c:	f103 0301 	add.w	r3, r3, #1
 800d850:	bf08      	it	eq
 800d852:	2320      	moveq	r3, #32
 800d854:	4618      	mov	r0, r3
 800d856:	4770      	bx	lr
 800d858:	2300      	movs	r3, #0
 800d85a:	e7e4      	b.n	800d826 <__hi0bits+0xa>

0800d85c <__lo0bits>:
 800d85c:	6803      	ldr	r3, [r0, #0]
 800d85e:	f013 0207 	ands.w	r2, r3, #7
 800d862:	4601      	mov	r1, r0
 800d864:	d00b      	beq.n	800d87e <__lo0bits+0x22>
 800d866:	07da      	lsls	r2, r3, #31
 800d868:	d423      	bmi.n	800d8b2 <__lo0bits+0x56>
 800d86a:	0798      	lsls	r0, r3, #30
 800d86c:	bf49      	itett	mi
 800d86e:	085b      	lsrmi	r3, r3, #1
 800d870:	089b      	lsrpl	r3, r3, #2
 800d872:	2001      	movmi	r0, #1
 800d874:	600b      	strmi	r3, [r1, #0]
 800d876:	bf5c      	itt	pl
 800d878:	600b      	strpl	r3, [r1, #0]
 800d87a:	2002      	movpl	r0, #2
 800d87c:	4770      	bx	lr
 800d87e:	b298      	uxth	r0, r3
 800d880:	b9a8      	cbnz	r0, 800d8ae <__lo0bits+0x52>
 800d882:	0c1b      	lsrs	r3, r3, #16
 800d884:	2010      	movs	r0, #16
 800d886:	b2da      	uxtb	r2, r3
 800d888:	b90a      	cbnz	r2, 800d88e <__lo0bits+0x32>
 800d88a:	3008      	adds	r0, #8
 800d88c:	0a1b      	lsrs	r3, r3, #8
 800d88e:	071a      	lsls	r2, r3, #28
 800d890:	bf04      	itt	eq
 800d892:	091b      	lsreq	r3, r3, #4
 800d894:	3004      	addeq	r0, #4
 800d896:	079a      	lsls	r2, r3, #30
 800d898:	bf04      	itt	eq
 800d89a:	089b      	lsreq	r3, r3, #2
 800d89c:	3002      	addeq	r0, #2
 800d89e:	07da      	lsls	r2, r3, #31
 800d8a0:	d403      	bmi.n	800d8aa <__lo0bits+0x4e>
 800d8a2:	085b      	lsrs	r3, r3, #1
 800d8a4:	f100 0001 	add.w	r0, r0, #1
 800d8a8:	d005      	beq.n	800d8b6 <__lo0bits+0x5a>
 800d8aa:	600b      	str	r3, [r1, #0]
 800d8ac:	4770      	bx	lr
 800d8ae:	4610      	mov	r0, r2
 800d8b0:	e7e9      	b.n	800d886 <__lo0bits+0x2a>
 800d8b2:	2000      	movs	r0, #0
 800d8b4:	4770      	bx	lr
 800d8b6:	2020      	movs	r0, #32
 800d8b8:	4770      	bx	lr
	...

0800d8bc <__i2b>:
 800d8bc:	b510      	push	{r4, lr}
 800d8be:	460c      	mov	r4, r1
 800d8c0:	2101      	movs	r1, #1
 800d8c2:	f7ff feb9 	bl	800d638 <_Balloc>
 800d8c6:	4602      	mov	r2, r0
 800d8c8:	b928      	cbnz	r0, 800d8d6 <__i2b+0x1a>
 800d8ca:	4b05      	ldr	r3, [pc, #20]	; (800d8e0 <__i2b+0x24>)
 800d8cc:	4805      	ldr	r0, [pc, #20]	; (800d8e4 <__i2b+0x28>)
 800d8ce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d8d2:	f000 ffab 	bl	800e82c <__assert_func>
 800d8d6:	2301      	movs	r3, #1
 800d8d8:	6144      	str	r4, [r0, #20]
 800d8da:	6103      	str	r3, [r0, #16]
 800d8dc:	bd10      	pop	{r4, pc}
 800d8de:	bf00      	nop
 800d8e0:	0800ee68 	.word	0x0800ee68
 800d8e4:	0800ef58 	.word	0x0800ef58

0800d8e8 <__multiply>:
 800d8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8ec:	4691      	mov	r9, r2
 800d8ee:	690a      	ldr	r2, [r1, #16]
 800d8f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d8f4:	429a      	cmp	r2, r3
 800d8f6:	bfb8      	it	lt
 800d8f8:	460b      	movlt	r3, r1
 800d8fa:	460c      	mov	r4, r1
 800d8fc:	bfbc      	itt	lt
 800d8fe:	464c      	movlt	r4, r9
 800d900:	4699      	movlt	r9, r3
 800d902:	6927      	ldr	r7, [r4, #16]
 800d904:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d908:	68a3      	ldr	r3, [r4, #8]
 800d90a:	6861      	ldr	r1, [r4, #4]
 800d90c:	eb07 060a 	add.w	r6, r7, sl
 800d910:	42b3      	cmp	r3, r6
 800d912:	b085      	sub	sp, #20
 800d914:	bfb8      	it	lt
 800d916:	3101      	addlt	r1, #1
 800d918:	f7ff fe8e 	bl	800d638 <_Balloc>
 800d91c:	b930      	cbnz	r0, 800d92c <__multiply+0x44>
 800d91e:	4602      	mov	r2, r0
 800d920:	4b44      	ldr	r3, [pc, #272]	; (800da34 <__multiply+0x14c>)
 800d922:	4845      	ldr	r0, [pc, #276]	; (800da38 <__multiply+0x150>)
 800d924:	f240 115d 	movw	r1, #349	; 0x15d
 800d928:	f000 ff80 	bl	800e82c <__assert_func>
 800d92c:	f100 0514 	add.w	r5, r0, #20
 800d930:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d934:	462b      	mov	r3, r5
 800d936:	2200      	movs	r2, #0
 800d938:	4543      	cmp	r3, r8
 800d93a:	d321      	bcc.n	800d980 <__multiply+0x98>
 800d93c:	f104 0314 	add.w	r3, r4, #20
 800d940:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d944:	f109 0314 	add.w	r3, r9, #20
 800d948:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d94c:	9202      	str	r2, [sp, #8]
 800d94e:	1b3a      	subs	r2, r7, r4
 800d950:	3a15      	subs	r2, #21
 800d952:	f022 0203 	bic.w	r2, r2, #3
 800d956:	3204      	adds	r2, #4
 800d958:	f104 0115 	add.w	r1, r4, #21
 800d95c:	428f      	cmp	r7, r1
 800d95e:	bf38      	it	cc
 800d960:	2204      	movcc	r2, #4
 800d962:	9201      	str	r2, [sp, #4]
 800d964:	9a02      	ldr	r2, [sp, #8]
 800d966:	9303      	str	r3, [sp, #12]
 800d968:	429a      	cmp	r2, r3
 800d96a:	d80c      	bhi.n	800d986 <__multiply+0x9e>
 800d96c:	2e00      	cmp	r6, #0
 800d96e:	dd03      	ble.n	800d978 <__multiply+0x90>
 800d970:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d974:	2b00      	cmp	r3, #0
 800d976:	d05a      	beq.n	800da2e <__multiply+0x146>
 800d978:	6106      	str	r6, [r0, #16]
 800d97a:	b005      	add	sp, #20
 800d97c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d980:	f843 2b04 	str.w	r2, [r3], #4
 800d984:	e7d8      	b.n	800d938 <__multiply+0x50>
 800d986:	f8b3 a000 	ldrh.w	sl, [r3]
 800d98a:	f1ba 0f00 	cmp.w	sl, #0
 800d98e:	d024      	beq.n	800d9da <__multiply+0xf2>
 800d990:	f104 0e14 	add.w	lr, r4, #20
 800d994:	46a9      	mov	r9, r5
 800d996:	f04f 0c00 	mov.w	ip, #0
 800d99a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d99e:	f8d9 1000 	ldr.w	r1, [r9]
 800d9a2:	fa1f fb82 	uxth.w	fp, r2
 800d9a6:	b289      	uxth	r1, r1
 800d9a8:	fb0a 110b 	mla	r1, sl, fp, r1
 800d9ac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d9b0:	f8d9 2000 	ldr.w	r2, [r9]
 800d9b4:	4461      	add	r1, ip
 800d9b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d9ba:	fb0a c20b 	mla	r2, sl, fp, ip
 800d9be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d9c2:	b289      	uxth	r1, r1
 800d9c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d9c8:	4577      	cmp	r7, lr
 800d9ca:	f849 1b04 	str.w	r1, [r9], #4
 800d9ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d9d2:	d8e2      	bhi.n	800d99a <__multiply+0xb2>
 800d9d4:	9a01      	ldr	r2, [sp, #4]
 800d9d6:	f845 c002 	str.w	ip, [r5, r2]
 800d9da:	9a03      	ldr	r2, [sp, #12]
 800d9dc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d9e0:	3304      	adds	r3, #4
 800d9e2:	f1b9 0f00 	cmp.w	r9, #0
 800d9e6:	d020      	beq.n	800da2a <__multiply+0x142>
 800d9e8:	6829      	ldr	r1, [r5, #0]
 800d9ea:	f104 0c14 	add.w	ip, r4, #20
 800d9ee:	46ae      	mov	lr, r5
 800d9f0:	f04f 0a00 	mov.w	sl, #0
 800d9f4:	f8bc b000 	ldrh.w	fp, [ip]
 800d9f8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d9fc:	fb09 220b 	mla	r2, r9, fp, r2
 800da00:	4492      	add	sl, r2
 800da02:	b289      	uxth	r1, r1
 800da04:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800da08:	f84e 1b04 	str.w	r1, [lr], #4
 800da0c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800da10:	f8be 1000 	ldrh.w	r1, [lr]
 800da14:	0c12      	lsrs	r2, r2, #16
 800da16:	fb09 1102 	mla	r1, r9, r2, r1
 800da1a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800da1e:	4567      	cmp	r7, ip
 800da20:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800da24:	d8e6      	bhi.n	800d9f4 <__multiply+0x10c>
 800da26:	9a01      	ldr	r2, [sp, #4]
 800da28:	50a9      	str	r1, [r5, r2]
 800da2a:	3504      	adds	r5, #4
 800da2c:	e79a      	b.n	800d964 <__multiply+0x7c>
 800da2e:	3e01      	subs	r6, #1
 800da30:	e79c      	b.n	800d96c <__multiply+0x84>
 800da32:	bf00      	nop
 800da34:	0800ee68 	.word	0x0800ee68
 800da38:	0800ef58 	.word	0x0800ef58

0800da3c <__pow5mult>:
 800da3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da40:	4615      	mov	r5, r2
 800da42:	f012 0203 	ands.w	r2, r2, #3
 800da46:	4606      	mov	r6, r0
 800da48:	460f      	mov	r7, r1
 800da4a:	d007      	beq.n	800da5c <__pow5mult+0x20>
 800da4c:	4c25      	ldr	r4, [pc, #148]	; (800dae4 <__pow5mult+0xa8>)
 800da4e:	3a01      	subs	r2, #1
 800da50:	2300      	movs	r3, #0
 800da52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800da56:	f7ff fe51 	bl	800d6fc <__multadd>
 800da5a:	4607      	mov	r7, r0
 800da5c:	10ad      	asrs	r5, r5, #2
 800da5e:	d03d      	beq.n	800dadc <__pow5mult+0xa0>
 800da60:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800da62:	b97c      	cbnz	r4, 800da84 <__pow5mult+0x48>
 800da64:	2010      	movs	r0, #16
 800da66:	f7ff fdbf 	bl	800d5e8 <malloc>
 800da6a:	4602      	mov	r2, r0
 800da6c:	6270      	str	r0, [r6, #36]	; 0x24
 800da6e:	b928      	cbnz	r0, 800da7c <__pow5mult+0x40>
 800da70:	4b1d      	ldr	r3, [pc, #116]	; (800dae8 <__pow5mult+0xac>)
 800da72:	481e      	ldr	r0, [pc, #120]	; (800daec <__pow5mult+0xb0>)
 800da74:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800da78:	f000 fed8 	bl	800e82c <__assert_func>
 800da7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800da80:	6004      	str	r4, [r0, #0]
 800da82:	60c4      	str	r4, [r0, #12]
 800da84:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800da88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800da8c:	b94c      	cbnz	r4, 800daa2 <__pow5mult+0x66>
 800da8e:	f240 2171 	movw	r1, #625	; 0x271
 800da92:	4630      	mov	r0, r6
 800da94:	f7ff ff12 	bl	800d8bc <__i2b>
 800da98:	2300      	movs	r3, #0
 800da9a:	f8c8 0008 	str.w	r0, [r8, #8]
 800da9e:	4604      	mov	r4, r0
 800daa0:	6003      	str	r3, [r0, #0]
 800daa2:	f04f 0900 	mov.w	r9, #0
 800daa6:	07eb      	lsls	r3, r5, #31
 800daa8:	d50a      	bpl.n	800dac0 <__pow5mult+0x84>
 800daaa:	4639      	mov	r1, r7
 800daac:	4622      	mov	r2, r4
 800daae:	4630      	mov	r0, r6
 800dab0:	f7ff ff1a 	bl	800d8e8 <__multiply>
 800dab4:	4639      	mov	r1, r7
 800dab6:	4680      	mov	r8, r0
 800dab8:	4630      	mov	r0, r6
 800daba:	f7ff fdfd 	bl	800d6b8 <_Bfree>
 800dabe:	4647      	mov	r7, r8
 800dac0:	106d      	asrs	r5, r5, #1
 800dac2:	d00b      	beq.n	800dadc <__pow5mult+0xa0>
 800dac4:	6820      	ldr	r0, [r4, #0]
 800dac6:	b938      	cbnz	r0, 800dad8 <__pow5mult+0x9c>
 800dac8:	4622      	mov	r2, r4
 800daca:	4621      	mov	r1, r4
 800dacc:	4630      	mov	r0, r6
 800dace:	f7ff ff0b 	bl	800d8e8 <__multiply>
 800dad2:	6020      	str	r0, [r4, #0]
 800dad4:	f8c0 9000 	str.w	r9, [r0]
 800dad8:	4604      	mov	r4, r0
 800dada:	e7e4      	b.n	800daa6 <__pow5mult+0x6a>
 800dadc:	4638      	mov	r0, r7
 800dade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dae2:	bf00      	nop
 800dae4:	0800f0a8 	.word	0x0800f0a8
 800dae8:	0800edf6 	.word	0x0800edf6
 800daec:	0800ef58 	.word	0x0800ef58

0800daf0 <__lshift>:
 800daf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800daf4:	460c      	mov	r4, r1
 800daf6:	6849      	ldr	r1, [r1, #4]
 800daf8:	6923      	ldr	r3, [r4, #16]
 800dafa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dafe:	68a3      	ldr	r3, [r4, #8]
 800db00:	4607      	mov	r7, r0
 800db02:	4691      	mov	r9, r2
 800db04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800db08:	f108 0601 	add.w	r6, r8, #1
 800db0c:	42b3      	cmp	r3, r6
 800db0e:	db0b      	blt.n	800db28 <__lshift+0x38>
 800db10:	4638      	mov	r0, r7
 800db12:	f7ff fd91 	bl	800d638 <_Balloc>
 800db16:	4605      	mov	r5, r0
 800db18:	b948      	cbnz	r0, 800db2e <__lshift+0x3e>
 800db1a:	4602      	mov	r2, r0
 800db1c:	4b2a      	ldr	r3, [pc, #168]	; (800dbc8 <__lshift+0xd8>)
 800db1e:	482b      	ldr	r0, [pc, #172]	; (800dbcc <__lshift+0xdc>)
 800db20:	f240 11d9 	movw	r1, #473	; 0x1d9
 800db24:	f000 fe82 	bl	800e82c <__assert_func>
 800db28:	3101      	adds	r1, #1
 800db2a:	005b      	lsls	r3, r3, #1
 800db2c:	e7ee      	b.n	800db0c <__lshift+0x1c>
 800db2e:	2300      	movs	r3, #0
 800db30:	f100 0114 	add.w	r1, r0, #20
 800db34:	f100 0210 	add.w	r2, r0, #16
 800db38:	4618      	mov	r0, r3
 800db3a:	4553      	cmp	r3, sl
 800db3c:	db37      	blt.n	800dbae <__lshift+0xbe>
 800db3e:	6920      	ldr	r0, [r4, #16]
 800db40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800db44:	f104 0314 	add.w	r3, r4, #20
 800db48:	f019 091f 	ands.w	r9, r9, #31
 800db4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800db50:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800db54:	d02f      	beq.n	800dbb6 <__lshift+0xc6>
 800db56:	f1c9 0e20 	rsb	lr, r9, #32
 800db5a:	468a      	mov	sl, r1
 800db5c:	f04f 0c00 	mov.w	ip, #0
 800db60:	681a      	ldr	r2, [r3, #0]
 800db62:	fa02 f209 	lsl.w	r2, r2, r9
 800db66:	ea42 020c 	orr.w	r2, r2, ip
 800db6a:	f84a 2b04 	str.w	r2, [sl], #4
 800db6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800db72:	4298      	cmp	r0, r3
 800db74:	fa22 fc0e 	lsr.w	ip, r2, lr
 800db78:	d8f2      	bhi.n	800db60 <__lshift+0x70>
 800db7a:	1b03      	subs	r3, r0, r4
 800db7c:	3b15      	subs	r3, #21
 800db7e:	f023 0303 	bic.w	r3, r3, #3
 800db82:	3304      	adds	r3, #4
 800db84:	f104 0215 	add.w	r2, r4, #21
 800db88:	4290      	cmp	r0, r2
 800db8a:	bf38      	it	cc
 800db8c:	2304      	movcc	r3, #4
 800db8e:	f841 c003 	str.w	ip, [r1, r3]
 800db92:	f1bc 0f00 	cmp.w	ip, #0
 800db96:	d001      	beq.n	800db9c <__lshift+0xac>
 800db98:	f108 0602 	add.w	r6, r8, #2
 800db9c:	3e01      	subs	r6, #1
 800db9e:	4638      	mov	r0, r7
 800dba0:	612e      	str	r6, [r5, #16]
 800dba2:	4621      	mov	r1, r4
 800dba4:	f7ff fd88 	bl	800d6b8 <_Bfree>
 800dba8:	4628      	mov	r0, r5
 800dbaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbae:	f842 0f04 	str.w	r0, [r2, #4]!
 800dbb2:	3301      	adds	r3, #1
 800dbb4:	e7c1      	b.n	800db3a <__lshift+0x4a>
 800dbb6:	3904      	subs	r1, #4
 800dbb8:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbbc:	f841 2f04 	str.w	r2, [r1, #4]!
 800dbc0:	4298      	cmp	r0, r3
 800dbc2:	d8f9      	bhi.n	800dbb8 <__lshift+0xc8>
 800dbc4:	e7ea      	b.n	800db9c <__lshift+0xac>
 800dbc6:	bf00      	nop
 800dbc8:	0800ee68 	.word	0x0800ee68
 800dbcc:	0800ef58 	.word	0x0800ef58

0800dbd0 <__mcmp>:
 800dbd0:	b530      	push	{r4, r5, lr}
 800dbd2:	6902      	ldr	r2, [r0, #16]
 800dbd4:	690c      	ldr	r4, [r1, #16]
 800dbd6:	1b12      	subs	r2, r2, r4
 800dbd8:	d10e      	bne.n	800dbf8 <__mcmp+0x28>
 800dbda:	f100 0314 	add.w	r3, r0, #20
 800dbde:	3114      	adds	r1, #20
 800dbe0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800dbe4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800dbe8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dbec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dbf0:	42a5      	cmp	r5, r4
 800dbf2:	d003      	beq.n	800dbfc <__mcmp+0x2c>
 800dbf4:	d305      	bcc.n	800dc02 <__mcmp+0x32>
 800dbf6:	2201      	movs	r2, #1
 800dbf8:	4610      	mov	r0, r2
 800dbfa:	bd30      	pop	{r4, r5, pc}
 800dbfc:	4283      	cmp	r3, r0
 800dbfe:	d3f3      	bcc.n	800dbe8 <__mcmp+0x18>
 800dc00:	e7fa      	b.n	800dbf8 <__mcmp+0x28>
 800dc02:	f04f 32ff 	mov.w	r2, #4294967295
 800dc06:	e7f7      	b.n	800dbf8 <__mcmp+0x28>

0800dc08 <__mdiff>:
 800dc08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc0c:	460c      	mov	r4, r1
 800dc0e:	4606      	mov	r6, r0
 800dc10:	4611      	mov	r1, r2
 800dc12:	4620      	mov	r0, r4
 800dc14:	4690      	mov	r8, r2
 800dc16:	f7ff ffdb 	bl	800dbd0 <__mcmp>
 800dc1a:	1e05      	subs	r5, r0, #0
 800dc1c:	d110      	bne.n	800dc40 <__mdiff+0x38>
 800dc1e:	4629      	mov	r1, r5
 800dc20:	4630      	mov	r0, r6
 800dc22:	f7ff fd09 	bl	800d638 <_Balloc>
 800dc26:	b930      	cbnz	r0, 800dc36 <__mdiff+0x2e>
 800dc28:	4b3a      	ldr	r3, [pc, #232]	; (800dd14 <__mdiff+0x10c>)
 800dc2a:	4602      	mov	r2, r0
 800dc2c:	f240 2132 	movw	r1, #562	; 0x232
 800dc30:	4839      	ldr	r0, [pc, #228]	; (800dd18 <__mdiff+0x110>)
 800dc32:	f000 fdfb 	bl	800e82c <__assert_func>
 800dc36:	2301      	movs	r3, #1
 800dc38:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dc3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc40:	bfa4      	itt	ge
 800dc42:	4643      	movge	r3, r8
 800dc44:	46a0      	movge	r8, r4
 800dc46:	4630      	mov	r0, r6
 800dc48:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dc4c:	bfa6      	itte	ge
 800dc4e:	461c      	movge	r4, r3
 800dc50:	2500      	movge	r5, #0
 800dc52:	2501      	movlt	r5, #1
 800dc54:	f7ff fcf0 	bl	800d638 <_Balloc>
 800dc58:	b920      	cbnz	r0, 800dc64 <__mdiff+0x5c>
 800dc5a:	4b2e      	ldr	r3, [pc, #184]	; (800dd14 <__mdiff+0x10c>)
 800dc5c:	4602      	mov	r2, r0
 800dc5e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dc62:	e7e5      	b.n	800dc30 <__mdiff+0x28>
 800dc64:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dc68:	6926      	ldr	r6, [r4, #16]
 800dc6a:	60c5      	str	r5, [r0, #12]
 800dc6c:	f104 0914 	add.w	r9, r4, #20
 800dc70:	f108 0514 	add.w	r5, r8, #20
 800dc74:	f100 0e14 	add.w	lr, r0, #20
 800dc78:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800dc7c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dc80:	f108 0210 	add.w	r2, r8, #16
 800dc84:	46f2      	mov	sl, lr
 800dc86:	2100      	movs	r1, #0
 800dc88:	f859 3b04 	ldr.w	r3, [r9], #4
 800dc8c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dc90:	fa1f f883 	uxth.w	r8, r3
 800dc94:	fa11 f18b 	uxtah	r1, r1, fp
 800dc98:	0c1b      	lsrs	r3, r3, #16
 800dc9a:	eba1 0808 	sub.w	r8, r1, r8
 800dc9e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dca2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dca6:	fa1f f888 	uxth.w	r8, r8
 800dcaa:	1419      	asrs	r1, r3, #16
 800dcac:	454e      	cmp	r6, r9
 800dcae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dcb2:	f84a 3b04 	str.w	r3, [sl], #4
 800dcb6:	d8e7      	bhi.n	800dc88 <__mdiff+0x80>
 800dcb8:	1b33      	subs	r3, r6, r4
 800dcba:	3b15      	subs	r3, #21
 800dcbc:	f023 0303 	bic.w	r3, r3, #3
 800dcc0:	3304      	adds	r3, #4
 800dcc2:	3415      	adds	r4, #21
 800dcc4:	42a6      	cmp	r6, r4
 800dcc6:	bf38      	it	cc
 800dcc8:	2304      	movcc	r3, #4
 800dcca:	441d      	add	r5, r3
 800dccc:	4473      	add	r3, lr
 800dcce:	469e      	mov	lr, r3
 800dcd0:	462e      	mov	r6, r5
 800dcd2:	4566      	cmp	r6, ip
 800dcd4:	d30e      	bcc.n	800dcf4 <__mdiff+0xec>
 800dcd6:	f10c 0203 	add.w	r2, ip, #3
 800dcda:	1b52      	subs	r2, r2, r5
 800dcdc:	f022 0203 	bic.w	r2, r2, #3
 800dce0:	3d03      	subs	r5, #3
 800dce2:	45ac      	cmp	ip, r5
 800dce4:	bf38      	it	cc
 800dce6:	2200      	movcc	r2, #0
 800dce8:	441a      	add	r2, r3
 800dcea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800dcee:	b17b      	cbz	r3, 800dd10 <__mdiff+0x108>
 800dcf0:	6107      	str	r7, [r0, #16]
 800dcf2:	e7a3      	b.n	800dc3c <__mdiff+0x34>
 800dcf4:	f856 8b04 	ldr.w	r8, [r6], #4
 800dcf8:	fa11 f288 	uxtah	r2, r1, r8
 800dcfc:	1414      	asrs	r4, r2, #16
 800dcfe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800dd02:	b292      	uxth	r2, r2
 800dd04:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800dd08:	f84e 2b04 	str.w	r2, [lr], #4
 800dd0c:	1421      	asrs	r1, r4, #16
 800dd0e:	e7e0      	b.n	800dcd2 <__mdiff+0xca>
 800dd10:	3f01      	subs	r7, #1
 800dd12:	e7ea      	b.n	800dcea <__mdiff+0xe2>
 800dd14:	0800ee68 	.word	0x0800ee68
 800dd18:	0800ef58 	.word	0x0800ef58

0800dd1c <__ulp>:
 800dd1c:	b082      	sub	sp, #8
 800dd1e:	ed8d 0b00 	vstr	d0, [sp]
 800dd22:	9b01      	ldr	r3, [sp, #4]
 800dd24:	4912      	ldr	r1, [pc, #72]	; (800dd70 <__ulp+0x54>)
 800dd26:	4019      	ands	r1, r3
 800dd28:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800dd2c:	2900      	cmp	r1, #0
 800dd2e:	dd05      	ble.n	800dd3c <__ulp+0x20>
 800dd30:	2200      	movs	r2, #0
 800dd32:	460b      	mov	r3, r1
 800dd34:	ec43 2b10 	vmov	d0, r2, r3
 800dd38:	b002      	add	sp, #8
 800dd3a:	4770      	bx	lr
 800dd3c:	4249      	negs	r1, r1
 800dd3e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800dd42:	ea4f 5021 	mov.w	r0, r1, asr #20
 800dd46:	f04f 0200 	mov.w	r2, #0
 800dd4a:	f04f 0300 	mov.w	r3, #0
 800dd4e:	da04      	bge.n	800dd5a <__ulp+0x3e>
 800dd50:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800dd54:	fa41 f300 	asr.w	r3, r1, r0
 800dd58:	e7ec      	b.n	800dd34 <__ulp+0x18>
 800dd5a:	f1a0 0114 	sub.w	r1, r0, #20
 800dd5e:	291e      	cmp	r1, #30
 800dd60:	bfda      	itte	le
 800dd62:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800dd66:	fa20 f101 	lsrle.w	r1, r0, r1
 800dd6a:	2101      	movgt	r1, #1
 800dd6c:	460a      	mov	r2, r1
 800dd6e:	e7e1      	b.n	800dd34 <__ulp+0x18>
 800dd70:	7ff00000 	.word	0x7ff00000

0800dd74 <__b2d>:
 800dd74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd76:	6905      	ldr	r5, [r0, #16]
 800dd78:	f100 0714 	add.w	r7, r0, #20
 800dd7c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800dd80:	1f2e      	subs	r6, r5, #4
 800dd82:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800dd86:	4620      	mov	r0, r4
 800dd88:	f7ff fd48 	bl	800d81c <__hi0bits>
 800dd8c:	f1c0 0320 	rsb	r3, r0, #32
 800dd90:	280a      	cmp	r0, #10
 800dd92:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800de10 <__b2d+0x9c>
 800dd96:	600b      	str	r3, [r1, #0]
 800dd98:	dc14      	bgt.n	800ddc4 <__b2d+0x50>
 800dd9a:	f1c0 0e0b 	rsb	lr, r0, #11
 800dd9e:	fa24 f10e 	lsr.w	r1, r4, lr
 800dda2:	42b7      	cmp	r7, r6
 800dda4:	ea41 030c 	orr.w	r3, r1, ip
 800dda8:	bf34      	ite	cc
 800ddaa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ddae:	2100      	movcs	r1, #0
 800ddb0:	3015      	adds	r0, #21
 800ddb2:	fa04 f000 	lsl.w	r0, r4, r0
 800ddb6:	fa21 f10e 	lsr.w	r1, r1, lr
 800ddba:	ea40 0201 	orr.w	r2, r0, r1
 800ddbe:	ec43 2b10 	vmov	d0, r2, r3
 800ddc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ddc4:	42b7      	cmp	r7, r6
 800ddc6:	bf3a      	itte	cc
 800ddc8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ddcc:	f1a5 0608 	subcc.w	r6, r5, #8
 800ddd0:	2100      	movcs	r1, #0
 800ddd2:	380b      	subs	r0, #11
 800ddd4:	d017      	beq.n	800de06 <__b2d+0x92>
 800ddd6:	f1c0 0c20 	rsb	ip, r0, #32
 800ddda:	fa04 f500 	lsl.w	r5, r4, r0
 800ddde:	42be      	cmp	r6, r7
 800dde0:	fa21 f40c 	lsr.w	r4, r1, ip
 800dde4:	ea45 0504 	orr.w	r5, r5, r4
 800dde8:	bf8c      	ite	hi
 800ddea:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ddee:	2400      	movls	r4, #0
 800ddf0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ddf4:	fa01 f000 	lsl.w	r0, r1, r0
 800ddf8:	fa24 f40c 	lsr.w	r4, r4, ip
 800ddfc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800de00:	ea40 0204 	orr.w	r2, r0, r4
 800de04:	e7db      	b.n	800ddbe <__b2d+0x4a>
 800de06:	ea44 030c 	orr.w	r3, r4, ip
 800de0a:	460a      	mov	r2, r1
 800de0c:	e7d7      	b.n	800ddbe <__b2d+0x4a>
 800de0e:	bf00      	nop
 800de10:	3ff00000 	.word	0x3ff00000

0800de14 <__d2b>:
 800de14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800de18:	4689      	mov	r9, r1
 800de1a:	2101      	movs	r1, #1
 800de1c:	ec57 6b10 	vmov	r6, r7, d0
 800de20:	4690      	mov	r8, r2
 800de22:	f7ff fc09 	bl	800d638 <_Balloc>
 800de26:	4604      	mov	r4, r0
 800de28:	b930      	cbnz	r0, 800de38 <__d2b+0x24>
 800de2a:	4602      	mov	r2, r0
 800de2c:	4b25      	ldr	r3, [pc, #148]	; (800dec4 <__d2b+0xb0>)
 800de2e:	4826      	ldr	r0, [pc, #152]	; (800dec8 <__d2b+0xb4>)
 800de30:	f240 310a 	movw	r1, #778	; 0x30a
 800de34:	f000 fcfa 	bl	800e82c <__assert_func>
 800de38:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800de3c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800de40:	bb35      	cbnz	r5, 800de90 <__d2b+0x7c>
 800de42:	2e00      	cmp	r6, #0
 800de44:	9301      	str	r3, [sp, #4]
 800de46:	d028      	beq.n	800de9a <__d2b+0x86>
 800de48:	4668      	mov	r0, sp
 800de4a:	9600      	str	r6, [sp, #0]
 800de4c:	f7ff fd06 	bl	800d85c <__lo0bits>
 800de50:	9900      	ldr	r1, [sp, #0]
 800de52:	b300      	cbz	r0, 800de96 <__d2b+0x82>
 800de54:	9a01      	ldr	r2, [sp, #4]
 800de56:	f1c0 0320 	rsb	r3, r0, #32
 800de5a:	fa02 f303 	lsl.w	r3, r2, r3
 800de5e:	430b      	orrs	r3, r1
 800de60:	40c2      	lsrs	r2, r0
 800de62:	6163      	str	r3, [r4, #20]
 800de64:	9201      	str	r2, [sp, #4]
 800de66:	9b01      	ldr	r3, [sp, #4]
 800de68:	61a3      	str	r3, [r4, #24]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	bf14      	ite	ne
 800de6e:	2202      	movne	r2, #2
 800de70:	2201      	moveq	r2, #1
 800de72:	6122      	str	r2, [r4, #16]
 800de74:	b1d5      	cbz	r5, 800deac <__d2b+0x98>
 800de76:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800de7a:	4405      	add	r5, r0
 800de7c:	f8c9 5000 	str.w	r5, [r9]
 800de80:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800de84:	f8c8 0000 	str.w	r0, [r8]
 800de88:	4620      	mov	r0, r4
 800de8a:	b003      	add	sp, #12
 800de8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800de94:	e7d5      	b.n	800de42 <__d2b+0x2e>
 800de96:	6161      	str	r1, [r4, #20]
 800de98:	e7e5      	b.n	800de66 <__d2b+0x52>
 800de9a:	a801      	add	r0, sp, #4
 800de9c:	f7ff fcde 	bl	800d85c <__lo0bits>
 800dea0:	9b01      	ldr	r3, [sp, #4]
 800dea2:	6163      	str	r3, [r4, #20]
 800dea4:	2201      	movs	r2, #1
 800dea6:	6122      	str	r2, [r4, #16]
 800dea8:	3020      	adds	r0, #32
 800deaa:	e7e3      	b.n	800de74 <__d2b+0x60>
 800deac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800deb0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800deb4:	f8c9 0000 	str.w	r0, [r9]
 800deb8:	6918      	ldr	r0, [r3, #16]
 800deba:	f7ff fcaf 	bl	800d81c <__hi0bits>
 800debe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dec2:	e7df      	b.n	800de84 <__d2b+0x70>
 800dec4:	0800ee68 	.word	0x0800ee68
 800dec8:	0800ef58 	.word	0x0800ef58

0800decc <__ratio>:
 800decc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ded0:	4688      	mov	r8, r1
 800ded2:	4669      	mov	r1, sp
 800ded4:	4681      	mov	r9, r0
 800ded6:	f7ff ff4d 	bl	800dd74 <__b2d>
 800deda:	a901      	add	r1, sp, #4
 800dedc:	4640      	mov	r0, r8
 800dede:	ec55 4b10 	vmov	r4, r5, d0
 800dee2:	ee10 aa10 	vmov	sl, s0
 800dee6:	f7ff ff45 	bl	800dd74 <__b2d>
 800deea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800deee:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800def2:	1a59      	subs	r1, r3, r1
 800def4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800def8:	1ad3      	subs	r3, r2, r3
 800defa:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800defe:	ec57 6b10 	vmov	r6, r7, d0
 800df02:	2b00      	cmp	r3, #0
 800df04:	bfd6      	itet	le
 800df06:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800df0a:	462a      	movgt	r2, r5
 800df0c:	463a      	movle	r2, r7
 800df0e:	46ab      	mov	fp, r5
 800df10:	bfd6      	itet	le
 800df12:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800df16:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800df1a:	ee00 3a90 	vmovle	s1, r3
 800df1e:	ec4b ab17 	vmov	d7, sl, fp
 800df22:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800df26:	b003      	add	sp, #12
 800df28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800df2c <__copybits>:
 800df2c:	3901      	subs	r1, #1
 800df2e:	b570      	push	{r4, r5, r6, lr}
 800df30:	1149      	asrs	r1, r1, #5
 800df32:	6914      	ldr	r4, [r2, #16]
 800df34:	3101      	adds	r1, #1
 800df36:	f102 0314 	add.w	r3, r2, #20
 800df3a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800df3e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800df42:	1f05      	subs	r5, r0, #4
 800df44:	42a3      	cmp	r3, r4
 800df46:	d30c      	bcc.n	800df62 <__copybits+0x36>
 800df48:	1aa3      	subs	r3, r4, r2
 800df4a:	3b11      	subs	r3, #17
 800df4c:	f023 0303 	bic.w	r3, r3, #3
 800df50:	3211      	adds	r2, #17
 800df52:	42a2      	cmp	r2, r4
 800df54:	bf88      	it	hi
 800df56:	2300      	movhi	r3, #0
 800df58:	4418      	add	r0, r3
 800df5a:	2300      	movs	r3, #0
 800df5c:	4288      	cmp	r0, r1
 800df5e:	d305      	bcc.n	800df6c <__copybits+0x40>
 800df60:	bd70      	pop	{r4, r5, r6, pc}
 800df62:	f853 6b04 	ldr.w	r6, [r3], #4
 800df66:	f845 6f04 	str.w	r6, [r5, #4]!
 800df6a:	e7eb      	b.n	800df44 <__copybits+0x18>
 800df6c:	f840 3b04 	str.w	r3, [r0], #4
 800df70:	e7f4      	b.n	800df5c <__copybits+0x30>

0800df72 <__any_on>:
 800df72:	f100 0214 	add.w	r2, r0, #20
 800df76:	6900      	ldr	r0, [r0, #16]
 800df78:	114b      	asrs	r3, r1, #5
 800df7a:	4298      	cmp	r0, r3
 800df7c:	b510      	push	{r4, lr}
 800df7e:	db11      	blt.n	800dfa4 <__any_on+0x32>
 800df80:	dd0a      	ble.n	800df98 <__any_on+0x26>
 800df82:	f011 011f 	ands.w	r1, r1, #31
 800df86:	d007      	beq.n	800df98 <__any_on+0x26>
 800df88:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800df8c:	fa24 f001 	lsr.w	r0, r4, r1
 800df90:	fa00 f101 	lsl.w	r1, r0, r1
 800df94:	428c      	cmp	r4, r1
 800df96:	d10b      	bne.n	800dfb0 <__any_on+0x3e>
 800df98:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800df9c:	4293      	cmp	r3, r2
 800df9e:	d803      	bhi.n	800dfa8 <__any_on+0x36>
 800dfa0:	2000      	movs	r0, #0
 800dfa2:	bd10      	pop	{r4, pc}
 800dfa4:	4603      	mov	r3, r0
 800dfa6:	e7f7      	b.n	800df98 <__any_on+0x26>
 800dfa8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dfac:	2900      	cmp	r1, #0
 800dfae:	d0f5      	beq.n	800df9c <__any_on+0x2a>
 800dfb0:	2001      	movs	r0, #1
 800dfb2:	e7f6      	b.n	800dfa2 <__any_on+0x30>

0800dfb4 <_calloc_r>:
 800dfb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dfb6:	fba1 2402 	umull	r2, r4, r1, r2
 800dfba:	b94c      	cbnz	r4, 800dfd0 <_calloc_r+0x1c>
 800dfbc:	4611      	mov	r1, r2
 800dfbe:	9201      	str	r2, [sp, #4]
 800dfc0:	f000 f87a 	bl	800e0b8 <_malloc_r>
 800dfc4:	9a01      	ldr	r2, [sp, #4]
 800dfc6:	4605      	mov	r5, r0
 800dfc8:	b930      	cbnz	r0, 800dfd8 <_calloc_r+0x24>
 800dfca:	4628      	mov	r0, r5
 800dfcc:	b003      	add	sp, #12
 800dfce:	bd30      	pop	{r4, r5, pc}
 800dfd0:	220c      	movs	r2, #12
 800dfd2:	6002      	str	r2, [r0, #0]
 800dfd4:	2500      	movs	r5, #0
 800dfd6:	e7f8      	b.n	800dfca <_calloc_r+0x16>
 800dfd8:	4621      	mov	r1, r4
 800dfda:	f7fc f959 	bl	800a290 <memset>
 800dfde:	e7f4      	b.n	800dfca <_calloc_r+0x16>

0800dfe0 <_free_r>:
 800dfe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dfe2:	2900      	cmp	r1, #0
 800dfe4:	d044      	beq.n	800e070 <_free_r+0x90>
 800dfe6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dfea:	9001      	str	r0, [sp, #4]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	f1a1 0404 	sub.w	r4, r1, #4
 800dff2:	bfb8      	it	lt
 800dff4:	18e4      	addlt	r4, r4, r3
 800dff6:	f000 fca7 	bl	800e948 <__malloc_lock>
 800dffa:	4a1e      	ldr	r2, [pc, #120]	; (800e074 <_free_r+0x94>)
 800dffc:	9801      	ldr	r0, [sp, #4]
 800dffe:	6813      	ldr	r3, [r2, #0]
 800e000:	b933      	cbnz	r3, 800e010 <_free_r+0x30>
 800e002:	6063      	str	r3, [r4, #4]
 800e004:	6014      	str	r4, [r2, #0]
 800e006:	b003      	add	sp, #12
 800e008:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e00c:	f000 bca2 	b.w	800e954 <__malloc_unlock>
 800e010:	42a3      	cmp	r3, r4
 800e012:	d908      	bls.n	800e026 <_free_r+0x46>
 800e014:	6825      	ldr	r5, [r4, #0]
 800e016:	1961      	adds	r1, r4, r5
 800e018:	428b      	cmp	r3, r1
 800e01a:	bf01      	itttt	eq
 800e01c:	6819      	ldreq	r1, [r3, #0]
 800e01e:	685b      	ldreq	r3, [r3, #4]
 800e020:	1949      	addeq	r1, r1, r5
 800e022:	6021      	streq	r1, [r4, #0]
 800e024:	e7ed      	b.n	800e002 <_free_r+0x22>
 800e026:	461a      	mov	r2, r3
 800e028:	685b      	ldr	r3, [r3, #4]
 800e02a:	b10b      	cbz	r3, 800e030 <_free_r+0x50>
 800e02c:	42a3      	cmp	r3, r4
 800e02e:	d9fa      	bls.n	800e026 <_free_r+0x46>
 800e030:	6811      	ldr	r1, [r2, #0]
 800e032:	1855      	adds	r5, r2, r1
 800e034:	42a5      	cmp	r5, r4
 800e036:	d10b      	bne.n	800e050 <_free_r+0x70>
 800e038:	6824      	ldr	r4, [r4, #0]
 800e03a:	4421      	add	r1, r4
 800e03c:	1854      	adds	r4, r2, r1
 800e03e:	42a3      	cmp	r3, r4
 800e040:	6011      	str	r1, [r2, #0]
 800e042:	d1e0      	bne.n	800e006 <_free_r+0x26>
 800e044:	681c      	ldr	r4, [r3, #0]
 800e046:	685b      	ldr	r3, [r3, #4]
 800e048:	6053      	str	r3, [r2, #4]
 800e04a:	4421      	add	r1, r4
 800e04c:	6011      	str	r1, [r2, #0]
 800e04e:	e7da      	b.n	800e006 <_free_r+0x26>
 800e050:	d902      	bls.n	800e058 <_free_r+0x78>
 800e052:	230c      	movs	r3, #12
 800e054:	6003      	str	r3, [r0, #0]
 800e056:	e7d6      	b.n	800e006 <_free_r+0x26>
 800e058:	6825      	ldr	r5, [r4, #0]
 800e05a:	1961      	adds	r1, r4, r5
 800e05c:	428b      	cmp	r3, r1
 800e05e:	bf04      	itt	eq
 800e060:	6819      	ldreq	r1, [r3, #0]
 800e062:	685b      	ldreq	r3, [r3, #4]
 800e064:	6063      	str	r3, [r4, #4]
 800e066:	bf04      	itt	eq
 800e068:	1949      	addeq	r1, r1, r5
 800e06a:	6021      	streq	r1, [r4, #0]
 800e06c:	6054      	str	r4, [r2, #4]
 800e06e:	e7ca      	b.n	800e006 <_free_r+0x26>
 800e070:	b003      	add	sp, #12
 800e072:	bd30      	pop	{r4, r5, pc}
 800e074:	2000047c 	.word	0x2000047c

0800e078 <sbrk_aligned>:
 800e078:	b570      	push	{r4, r5, r6, lr}
 800e07a:	4e0e      	ldr	r6, [pc, #56]	; (800e0b4 <sbrk_aligned+0x3c>)
 800e07c:	460c      	mov	r4, r1
 800e07e:	6831      	ldr	r1, [r6, #0]
 800e080:	4605      	mov	r5, r0
 800e082:	b911      	cbnz	r1, 800e08a <sbrk_aligned+0x12>
 800e084:	f000 fb4c 	bl	800e720 <_sbrk_r>
 800e088:	6030      	str	r0, [r6, #0]
 800e08a:	4621      	mov	r1, r4
 800e08c:	4628      	mov	r0, r5
 800e08e:	f000 fb47 	bl	800e720 <_sbrk_r>
 800e092:	1c43      	adds	r3, r0, #1
 800e094:	d00a      	beq.n	800e0ac <sbrk_aligned+0x34>
 800e096:	1cc4      	adds	r4, r0, #3
 800e098:	f024 0403 	bic.w	r4, r4, #3
 800e09c:	42a0      	cmp	r0, r4
 800e09e:	d007      	beq.n	800e0b0 <sbrk_aligned+0x38>
 800e0a0:	1a21      	subs	r1, r4, r0
 800e0a2:	4628      	mov	r0, r5
 800e0a4:	f000 fb3c 	bl	800e720 <_sbrk_r>
 800e0a8:	3001      	adds	r0, #1
 800e0aa:	d101      	bne.n	800e0b0 <sbrk_aligned+0x38>
 800e0ac:	f04f 34ff 	mov.w	r4, #4294967295
 800e0b0:	4620      	mov	r0, r4
 800e0b2:	bd70      	pop	{r4, r5, r6, pc}
 800e0b4:	20000480 	.word	0x20000480

0800e0b8 <_malloc_r>:
 800e0b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0bc:	1ccd      	adds	r5, r1, #3
 800e0be:	f025 0503 	bic.w	r5, r5, #3
 800e0c2:	3508      	adds	r5, #8
 800e0c4:	2d0c      	cmp	r5, #12
 800e0c6:	bf38      	it	cc
 800e0c8:	250c      	movcc	r5, #12
 800e0ca:	2d00      	cmp	r5, #0
 800e0cc:	4607      	mov	r7, r0
 800e0ce:	db01      	blt.n	800e0d4 <_malloc_r+0x1c>
 800e0d0:	42a9      	cmp	r1, r5
 800e0d2:	d905      	bls.n	800e0e0 <_malloc_r+0x28>
 800e0d4:	230c      	movs	r3, #12
 800e0d6:	603b      	str	r3, [r7, #0]
 800e0d8:	2600      	movs	r6, #0
 800e0da:	4630      	mov	r0, r6
 800e0dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0e0:	4e2e      	ldr	r6, [pc, #184]	; (800e19c <_malloc_r+0xe4>)
 800e0e2:	f000 fc31 	bl	800e948 <__malloc_lock>
 800e0e6:	6833      	ldr	r3, [r6, #0]
 800e0e8:	461c      	mov	r4, r3
 800e0ea:	bb34      	cbnz	r4, 800e13a <_malloc_r+0x82>
 800e0ec:	4629      	mov	r1, r5
 800e0ee:	4638      	mov	r0, r7
 800e0f0:	f7ff ffc2 	bl	800e078 <sbrk_aligned>
 800e0f4:	1c43      	adds	r3, r0, #1
 800e0f6:	4604      	mov	r4, r0
 800e0f8:	d14d      	bne.n	800e196 <_malloc_r+0xde>
 800e0fa:	6834      	ldr	r4, [r6, #0]
 800e0fc:	4626      	mov	r6, r4
 800e0fe:	2e00      	cmp	r6, #0
 800e100:	d140      	bne.n	800e184 <_malloc_r+0xcc>
 800e102:	6823      	ldr	r3, [r4, #0]
 800e104:	4631      	mov	r1, r6
 800e106:	4638      	mov	r0, r7
 800e108:	eb04 0803 	add.w	r8, r4, r3
 800e10c:	f000 fb08 	bl	800e720 <_sbrk_r>
 800e110:	4580      	cmp	r8, r0
 800e112:	d13a      	bne.n	800e18a <_malloc_r+0xd2>
 800e114:	6821      	ldr	r1, [r4, #0]
 800e116:	3503      	adds	r5, #3
 800e118:	1a6d      	subs	r5, r5, r1
 800e11a:	f025 0503 	bic.w	r5, r5, #3
 800e11e:	3508      	adds	r5, #8
 800e120:	2d0c      	cmp	r5, #12
 800e122:	bf38      	it	cc
 800e124:	250c      	movcc	r5, #12
 800e126:	4629      	mov	r1, r5
 800e128:	4638      	mov	r0, r7
 800e12a:	f7ff ffa5 	bl	800e078 <sbrk_aligned>
 800e12e:	3001      	adds	r0, #1
 800e130:	d02b      	beq.n	800e18a <_malloc_r+0xd2>
 800e132:	6823      	ldr	r3, [r4, #0]
 800e134:	442b      	add	r3, r5
 800e136:	6023      	str	r3, [r4, #0]
 800e138:	e00e      	b.n	800e158 <_malloc_r+0xa0>
 800e13a:	6822      	ldr	r2, [r4, #0]
 800e13c:	1b52      	subs	r2, r2, r5
 800e13e:	d41e      	bmi.n	800e17e <_malloc_r+0xc6>
 800e140:	2a0b      	cmp	r2, #11
 800e142:	d916      	bls.n	800e172 <_malloc_r+0xba>
 800e144:	1961      	adds	r1, r4, r5
 800e146:	42a3      	cmp	r3, r4
 800e148:	6025      	str	r5, [r4, #0]
 800e14a:	bf18      	it	ne
 800e14c:	6059      	strne	r1, [r3, #4]
 800e14e:	6863      	ldr	r3, [r4, #4]
 800e150:	bf08      	it	eq
 800e152:	6031      	streq	r1, [r6, #0]
 800e154:	5162      	str	r2, [r4, r5]
 800e156:	604b      	str	r3, [r1, #4]
 800e158:	4638      	mov	r0, r7
 800e15a:	f104 060b 	add.w	r6, r4, #11
 800e15e:	f000 fbf9 	bl	800e954 <__malloc_unlock>
 800e162:	f026 0607 	bic.w	r6, r6, #7
 800e166:	1d23      	adds	r3, r4, #4
 800e168:	1af2      	subs	r2, r6, r3
 800e16a:	d0b6      	beq.n	800e0da <_malloc_r+0x22>
 800e16c:	1b9b      	subs	r3, r3, r6
 800e16e:	50a3      	str	r3, [r4, r2]
 800e170:	e7b3      	b.n	800e0da <_malloc_r+0x22>
 800e172:	6862      	ldr	r2, [r4, #4]
 800e174:	42a3      	cmp	r3, r4
 800e176:	bf0c      	ite	eq
 800e178:	6032      	streq	r2, [r6, #0]
 800e17a:	605a      	strne	r2, [r3, #4]
 800e17c:	e7ec      	b.n	800e158 <_malloc_r+0xa0>
 800e17e:	4623      	mov	r3, r4
 800e180:	6864      	ldr	r4, [r4, #4]
 800e182:	e7b2      	b.n	800e0ea <_malloc_r+0x32>
 800e184:	4634      	mov	r4, r6
 800e186:	6876      	ldr	r6, [r6, #4]
 800e188:	e7b9      	b.n	800e0fe <_malloc_r+0x46>
 800e18a:	230c      	movs	r3, #12
 800e18c:	603b      	str	r3, [r7, #0]
 800e18e:	4638      	mov	r0, r7
 800e190:	f000 fbe0 	bl	800e954 <__malloc_unlock>
 800e194:	e7a1      	b.n	800e0da <_malloc_r+0x22>
 800e196:	6025      	str	r5, [r4, #0]
 800e198:	e7de      	b.n	800e158 <_malloc_r+0xa0>
 800e19a:	bf00      	nop
 800e19c:	2000047c 	.word	0x2000047c

0800e1a0 <__ssputs_r>:
 800e1a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1a4:	688e      	ldr	r6, [r1, #8]
 800e1a6:	429e      	cmp	r6, r3
 800e1a8:	4682      	mov	sl, r0
 800e1aa:	460c      	mov	r4, r1
 800e1ac:	4690      	mov	r8, r2
 800e1ae:	461f      	mov	r7, r3
 800e1b0:	d838      	bhi.n	800e224 <__ssputs_r+0x84>
 800e1b2:	898a      	ldrh	r2, [r1, #12]
 800e1b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e1b8:	d032      	beq.n	800e220 <__ssputs_r+0x80>
 800e1ba:	6825      	ldr	r5, [r4, #0]
 800e1bc:	6909      	ldr	r1, [r1, #16]
 800e1be:	eba5 0901 	sub.w	r9, r5, r1
 800e1c2:	6965      	ldr	r5, [r4, #20]
 800e1c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e1c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e1cc:	3301      	adds	r3, #1
 800e1ce:	444b      	add	r3, r9
 800e1d0:	106d      	asrs	r5, r5, #1
 800e1d2:	429d      	cmp	r5, r3
 800e1d4:	bf38      	it	cc
 800e1d6:	461d      	movcc	r5, r3
 800e1d8:	0553      	lsls	r3, r2, #21
 800e1da:	d531      	bpl.n	800e240 <__ssputs_r+0xa0>
 800e1dc:	4629      	mov	r1, r5
 800e1de:	f7ff ff6b 	bl	800e0b8 <_malloc_r>
 800e1e2:	4606      	mov	r6, r0
 800e1e4:	b950      	cbnz	r0, 800e1fc <__ssputs_r+0x5c>
 800e1e6:	230c      	movs	r3, #12
 800e1e8:	f8ca 3000 	str.w	r3, [sl]
 800e1ec:	89a3      	ldrh	r3, [r4, #12]
 800e1ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1f2:	81a3      	strh	r3, [r4, #12]
 800e1f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e1f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1fc:	6921      	ldr	r1, [r4, #16]
 800e1fe:	464a      	mov	r2, r9
 800e200:	f7ff fa0c 	bl	800d61c <memcpy>
 800e204:	89a3      	ldrh	r3, [r4, #12]
 800e206:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e20a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e20e:	81a3      	strh	r3, [r4, #12]
 800e210:	6126      	str	r6, [r4, #16]
 800e212:	6165      	str	r5, [r4, #20]
 800e214:	444e      	add	r6, r9
 800e216:	eba5 0509 	sub.w	r5, r5, r9
 800e21a:	6026      	str	r6, [r4, #0]
 800e21c:	60a5      	str	r5, [r4, #8]
 800e21e:	463e      	mov	r6, r7
 800e220:	42be      	cmp	r6, r7
 800e222:	d900      	bls.n	800e226 <__ssputs_r+0x86>
 800e224:	463e      	mov	r6, r7
 800e226:	6820      	ldr	r0, [r4, #0]
 800e228:	4632      	mov	r2, r6
 800e22a:	4641      	mov	r1, r8
 800e22c:	f000 fb72 	bl	800e914 <memmove>
 800e230:	68a3      	ldr	r3, [r4, #8]
 800e232:	1b9b      	subs	r3, r3, r6
 800e234:	60a3      	str	r3, [r4, #8]
 800e236:	6823      	ldr	r3, [r4, #0]
 800e238:	4433      	add	r3, r6
 800e23a:	6023      	str	r3, [r4, #0]
 800e23c:	2000      	movs	r0, #0
 800e23e:	e7db      	b.n	800e1f8 <__ssputs_r+0x58>
 800e240:	462a      	mov	r2, r5
 800e242:	f000 fb8d 	bl	800e960 <_realloc_r>
 800e246:	4606      	mov	r6, r0
 800e248:	2800      	cmp	r0, #0
 800e24a:	d1e1      	bne.n	800e210 <__ssputs_r+0x70>
 800e24c:	6921      	ldr	r1, [r4, #16]
 800e24e:	4650      	mov	r0, sl
 800e250:	f7ff fec6 	bl	800dfe0 <_free_r>
 800e254:	e7c7      	b.n	800e1e6 <__ssputs_r+0x46>
	...

0800e258 <_svfiprintf_r>:
 800e258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e25c:	4698      	mov	r8, r3
 800e25e:	898b      	ldrh	r3, [r1, #12]
 800e260:	061b      	lsls	r3, r3, #24
 800e262:	b09d      	sub	sp, #116	; 0x74
 800e264:	4607      	mov	r7, r0
 800e266:	460d      	mov	r5, r1
 800e268:	4614      	mov	r4, r2
 800e26a:	d50e      	bpl.n	800e28a <_svfiprintf_r+0x32>
 800e26c:	690b      	ldr	r3, [r1, #16]
 800e26e:	b963      	cbnz	r3, 800e28a <_svfiprintf_r+0x32>
 800e270:	2140      	movs	r1, #64	; 0x40
 800e272:	f7ff ff21 	bl	800e0b8 <_malloc_r>
 800e276:	6028      	str	r0, [r5, #0]
 800e278:	6128      	str	r0, [r5, #16]
 800e27a:	b920      	cbnz	r0, 800e286 <_svfiprintf_r+0x2e>
 800e27c:	230c      	movs	r3, #12
 800e27e:	603b      	str	r3, [r7, #0]
 800e280:	f04f 30ff 	mov.w	r0, #4294967295
 800e284:	e0d1      	b.n	800e42a <_svfiprintf_r+0x1d2>
 800e286:	2340      	movs	r3, #64	; 0x40
 800e288:	616b      	str	r3, [r5, #20]
 800e28a:	2300      	movs	r3, #0
 800e28c:	9309      	str	r3, [sp, #36]	; 0x24
 800e28e:	2320      	movs	r3, #32
 800e290:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e294:	f8cd 800c 	str.w	r8, [sp, #12]
 800e298:	2330      	movs	r3, #48	; 0x30
 800e29a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e444 <_svfiprintf_r+0x1ec>
 800e29e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e2a2:	f04f 0901 	mov.w	r9, #1
 800e2a6:	4623      	mov	r3, r4
 800e2a8:	469a      	mov	sl, r3
 800e2aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e2ae:	b10a      	cbz	r2, 800e2b4 <_svfiprintf_r+0x5c>
 800e2b0:	2a25      	cmp	r2, #37	; 0x25
 800e2b2:	d1f9      	bne.n	800e2a8 <_svfiprintf_r+0x50>
 800e2b4:	ebba 0b04 	subs.w	fp, sl, r4
 800e2b8:	d00b      	beq.n	800e2d2 <_svfiprintf_r+0x7a>
 800e2ba:	465b      	mov	r3, fp
 800e2bc:	4622      	mov	r2, r4
 800e2be:	4629      	mov	r1, r5
 800e2c0:	4638      	mov	r0, r7
 800e2c2:	f7ff ff6d 	bl	800e1a0 <__ssputs_r>
 800e2c6:	3001      	adds	r0, #1
 800e2c8:	f000 80aa 	beq.w	800e420 <_svfiprintf_r+0x1c8>
 800e2cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e2ce:	445a      	add	r2, fp
 800e2d0:	9209      	str	r2, [sp, #36]	; 0x24
 800e2d2:	f89a 3000 	ldrb.w	r3, [sl]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	f000 80a2 	beq.w	800e420 <_svfiprintf_r+0x1c8>
 800e2dc:	2300      	movs	r3, #0
 800e2de:	f04f 32ff 	mov.w	r2, #4294967295
 800e2e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e2e6:	f10a 0a01 	add.w	sl, sl, #1
 800e2ea:	9304      	str	r3, [sp, #16]
 800e2ec:	9307      	str	r3, [sp, #28]
 800e2ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e2f2:	931a      	str	r3, [sp, #104]	; 0x68
 800e2f4:	4654      	mov	r4, sl
 800e2f6:	2205      	movs	r2, #5
 800e2f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2fc:	4851      	ldr	r0, [pc, #324]	; (800e444 <_svfiprintf_r+0x1ec>)
 800e2fe:	f7f1 ffa7 	bl	8000250 <memchr>
 800e302:	9a04      	ldr	r2, [sp, #16]
 800e304:	b9d8      	cbnz	r0, 800e33e <_svfiprintf_r+0xe6>
 800e306:	06d0      	lsls	r0, r2, #27
 800e308:	bf44      	itt	mi
 800e30a:	2320      	movmi	r3, #32
 800e30c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e310:	0711      	lsls	r1, r2, #28
 800e312:	bf44      	itt	mi
 800e314:	232b      	movmi	r3, #43	; 0x2b
 800e316:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e31a:	f89a 3000 	ldrb.w	r3, [sl]
 800e31e:	2b2a      	cmp	r3, #42	; 0x2a
 800e320:	d015      	beq.n	800e34e <_svfiprintf_r+0xf6>
 800e322:	9a07      	ldr	r2, [sp, #28]
 800e324:	4654      	mov	r4, sl
 800e326:	2000      	movs	r0, #0
 800e328:	f04f 0c0a 	mov.w	ip, #10
 800e32c:	4621      	mov	r1, r4
 800e32e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e332:	3b30      	subs	r3, #48	; 0x30
 800e334:	2b09      	cmp	r3, #9
 800e336:	d94e      	bls.n	800e3d6 <_svfiprintf_r+0x17e>
 800e338:	b1b0      	cbz	r0, 800e368 <_svfiprintf_r+0x110>
 800e33a:	9207      	str	r2, [sp, #28]
 800e33c:	e014      	b.n	800e368 <_svfiprintf_r+0x110>
 800e33e:	eba0 0308 	sub.w	r3, r0, r8
 800e342:	fa09 f303 	lsl.w	r3, r9, r3
 800e346:	4313      	orrs	r3, r2
 800e348:	9304      	str	r3, [sp, #16]
 800e34a:	46a2      	mov	sl, r4
 800e34c:	e7d2      	b.n	800e2f4 <_svfiprintf_r+0x9c>
 800e34e:	9b03      	ldr	r3, [sp, #12]
 800e350:	1d19      	adds	r1, r3, #4
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	9103      	str	r1, [sp, #12]
 800e356:	2b00      	cmp	r3, #0
 800e358:	bfbb      	ittet	lt
 800e35a:	425b      	neglt	r3, r3
 800e35c:	f042 0202 	orrlt.w	r2, r2, #2
 800e360:	9307      	strge	r3, [sp, #28]
 800e362:	9307      	strlt	r3, [sp, #28]
 800e364:	bfb8      	it	lt
 800e366:	9204      	strlt	r2, [sp, #16]
 800e368:	7823      	ldrb	r3, [r4, #0]
 800e36a:	2b2e      	cmp	r3, #46	; 0x2e
 800e36c:	d10c      	bne.n	800e388 <_svfiprintf_r+0x130>
 800e36e:	7863      	ldrb	r3, [r4, #1]
 800e370:	2b2a      	cmp	r3, #42	; 0x2a
 800e372:	d135      	bne.n	800e3e0 <_svfiprintf_r+0x188>
 800e374:	9b03      	ldr	r3, [sp, #12]
 800e376:	1d1a      	adds	r2, r3, #4
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	9203      	str	r2, [sp, #12]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	bfb8      	it	lt
 800e380:	f04f 33ff 	movlt.w	r3, #4294967295
 800e384:	3402      	adds	r4, #2
 800e386:	9305      	str	r3, [sp, #20]
 800e388:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e454 <_svfiprintf_r+0x1fc>
 800e38c:	7821      	ldrb	r1, [r4, #0]
 800e38e:	2203      	movs	r2, #3
 800e390:	4650      	mov	r0, sl
 800e392:	f7f1 ff5d 	bl	8000250 <memchr>
 800e396:	b140      	cbz	r0, 800e3aa <_svfiprintf_r+0x152>
 800e398:	2340      	movs	r3, #64	; 0x40
 800e39a:	eba0 000a 	sub.w	r0, r0, sl
 800e39e:	fa03 f000 	lsl.w	r0, r3, r0
 800e3a2:	9b04      	ldr	r3, [sp, #16]
 800e3a4:	4303      	orrs	r3, r0
 800e3a6:	3401      	adds	r4, #1
 800e3a8:	9304      	str	r3, [sp, #16]
 800e3aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3ae:	4826      	ldr	r0, [pc, #152]	; (800e448 <_svfiprintf_r+0x1f0>)
 800e3b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e3b4:	2206      	movs	r2, #6
 800e3b6:	f7f1 ff4b 	bl	8000250 <memchr>
 800e3ba:	2800      	cmp	r0, #0
 800e3bc:	d038      	beq.n	800e430 <_svfiprintf_r+0x1d8>
 800e3be:	4b23      	ldr	r3, [pc, #140]	; (800e44c <_svfiprintf_r+0x1f4>)
 800e3c0:	bb1b      	cbnz	r3, 800e40a <_svfiprintf_r+0x1b2>
 800e3c2:	9b03      	ldr	r3, [sp, #12]
 800e3c4:	3307      	adds	r3, #7
 800e3c6:	f023 0307 	bic.w	r3, r3, #7
 800e3ca:	3308      	adds	r3, #8
 800e3cc:	9303      	str	r3, [sp, #12]
 800e3ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3d0:	4433      	add	r3, r6
 800e3d2:	9309      	str	r3, [sp, #36]	; 0x24
 800e3d4:	e767      	b.n	800e2a6 <_svfiprintf_r+0x4e>
 800e3d6:	fb0c 3202 	mla	r2, ip, r2, r3
 800e3da:	460c      	mov	r4, r1
 800e3dc:	2001      	movs	r0, #1
 800e3de:	e7a5      	b.n	800e32c <_svfiprintf_r+0xd4>
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	3401      	adds	r4, #1
 800e3e4:	9305      	str	r3, [sp, #20]
 800e3e6:	4619      	mov	r1, r3
 800e3e8:	f04f 0c0a 	mov.w	ip, #10
 800e3ec:	4620      	mov	r0, r4
 800e3ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e3f2:	3a30      	subs	r2, #48	; 0x30
 800e3f4:	2a09      	cmp	r2, #9
 800e3f6:	d903      	bls.n	800e400 <_svfiprintf_r+0x1a8>
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d0c5      	beq.n	800e388 <_svfiprintf_r+0x130>
 800e3fc:	9105      	str	r1, [sp, #20]
 800e3fe:	e7c3      	b.n	800e388 <_svfiprintf_r+0x130>
 800e400:	fb0c 2101 	mla	r1, ip, r1, r2
 800e404:	4604      	mov	r4, r0
 800e406:	2301      	movs	r3, #1
 800e408:	e7f0      	b.n	800e3ec <_svfiprintf_r+0x194>
 800e40a:	ab03      	add	r3, sp, #12
 800e40c:	9300      	str	r3, [sp, #0]
 800e40e:	462a      	mov	r2, r5
 800e410:	4b0f      	ldr	r3, [pc, #60]	; (800e450 <_svfiprintf_r+0x1f8>)
 800e412:	a904      	add	r1, sp, #16
 800e414:	4638      	mov	r0, r7
 800e416:	f7fb ffd3 	bl	800a3c0 <_printf_float>
 800e41a:	1c42      	adds	r2, r0, #1
 800e41c:	4606      	mov	r6, r0
 800e41e:	d1d6      	bne.n	800e3ce <_svfiprintf_r+0x176>
 800e420:	89ab      	ldrh	r3, [r5, #12]
 800e422:	065b      	lsls	r3, r3, #25
 800e424:	f53f af2c 	bmi.w	800e280 <_svfiprintf_r+0x28>
 800e428:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e42a:	b01d      	add	sp, #116	; 0x74
 800e42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e430:	ab03      	add	r3, sp, #12
 800e432:	9300      	str	r3, [sp, #0]
 800e434:	462a      	mov	r2, r5
 800e436:	4b06      	ldr	r3, [pc, #24]	; (800e450 <_svfiprintf_r+0x1f8>)
 800e438:	a904      	add	r1, sp, #16
 800e43a:	4638      	mov	r0, r7
 800e43c:	f7fc fa4c 	bl	800a8d8 <_printf_i>
 800e440:	e7eb      	b.n	800e41a <_svfiprintf_r+0x1c2>
 800e442:	bf00      	nop
 800e444:	0800f0b4 	.word	0x0800f0b4
 800e448:	0800f0be 	.word	0x0800f0be
 800e44c:	0800a3c1 	.word	0x0800a3c1
 800e450:	0800e1a1 	.word	0x0800e1a1
 800e454:	0800f0ba 	.word	0x0800f0ba

0800e458 <__sfputc_r>:
 800e458:	6893      	ldr	r3, [r2, #8]
 800e45a:	3b01      	subs	r3, #1
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	b410      	push	{r4}
 800e460:	6093      	str	r3, [r2, #8]
 800e462:	da08      	bge.n	800e476 <__sfputc_r+0x1e>
 800e464:	6994      	ldr	r4, [r2, #24]
 800e466:	42a3      	cmp	r3, r4
 800e468:	db01      	blt.n	800e46e <__sfputc_r+0x16>
 800e46a:	290a      	cmp	r1, #10
 800e46c:	d103      	bne.n	800e476 <__sfputc_r+0x1e>
 800e46e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e472:	f7fd bc6d 	b.w	800bd50 <__swbuf_r>
 800e476:	6813      	ldr	r3, [r2, #0]
 800e478:	1c58      	adds	r0, r3, #1
 800e47a:	6010      	str	r0, [r2, #0]
 800e47c:	7019      	strb	r1, [r3, #0]
 800e47e:	4608      	mov	r0, r1
 800e480:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e484:	4770      	bx	lr

0800e486 <__sfputs_r>:
 800e486:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e488:	4606      	mov	r6, r0
 800e48a:	460f      	mov	r7, r1
 800e48c:	4614      	mov	r4, r2
 800e48e:	18d5      	adds	r5, r2, r3
 800e490:	42ac      	cmp	r4, r5
 800e492:	d101      	bne.n	800e498 <__sfputs_r+0x12>
 800e494:	2000      	movs	r0, #0
 800e496:	e007      	b.n	800e4a8 <__sfputs_r+0x22>
 800e498:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e49c:	463a      	mov	r2, r7
 800e49e:	4630      	mov	r0, r6
 800e4a0:	f7ff ffda 	bl	800e458 <__sfputc_r>
 800e4a4:	1c43      	adds	r3, r0, #1
 800e4a6:	d1f3      	bne.n	800e490 <__sfputs_r+0xa>
 800e4a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e4ac <_vfiprintf_r>:
 800e4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4b0:	460d      	mov	r5, r1
 800e4b2:	b09d      	sub	sp, #116	; 0x74
 800e4b4:	4614      	mov	r4, r2
 800e4b6:	4698      	mov	r8, r3
 800e4b8:	4606      	mov	r6, r0
 800e4ba:	b118      	cbz	r0, 800e4c4 <_vfiprintf_r+0x18>
 800e4bc:	6983      	ldr	r3, [r0, #24]
 800e4be:	b90b      	cbnz	r3, 800e4c4 <_vfiprintf_r+0x18>
 800e4c0:	f7fe fc1a 	bl	800ccf8 <__sinit>
 800e4c4:	4b89      	ldr	r3, [pc, #548]	; (800e6ec <_vfiprintf_r+0x240>)
 800e4c6:	429d      	cmp	r5, r3
 800e4c8:	d11b      	bne.n	800e502 <_vfiprintf_r+0x56>
 800e4ca:	6875      	ldr	r5, [r6, #4]
 800e4cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e4ce:	07d9      	lsls	r1, r3, #31
 800e4d0:	d405      	bmi.n	800e4de <_vfiprintf_r+0x32>
 800e4d2:	89ab      	ldrh	r3, [r5, #12]
 800e4d4:	059a      	lsls	r2, r3, #22
 800e4d6:	d402      	bmi.n	800e4de <_vfiprintf_r+0x32>
 800e4d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e4da:	f7ff f81e 	bl	800d51a <__retarget_lock_acquire_recursive>
 800e4de:	89ab      	ldrh	r3, [r5, #12]
 800e4e0:	071b      	lsls	r3, r3, #28
 800e4e2:	d501      	bpl.n	800e4e8 <_vfiprintf_r+0x3c>
 800e4e4:	692b      	ldr	r3, [r5, #16]
 800e4e6:	b9eb      	cbnz	r3, 800e524 <_vfiprintf_r+0x78>
 800e4e8:	4629      	mov	r1, r5
 800e4ea:	4630      	mov	r0, r6
 800e4ec:	f7fd fc82 	bl	800bdf4 <__swsetup_r>
 800e4f0:	b1c0      	cbz	r0, 800e524 <_vfiprintf_r+0x78>
 800e4f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e4f4:	07dc      	lsls	r4, r3, #31
 800e4f6:	d50e      	bpl.n	800e516 <_vfiprintf_r+0x6a>
 800e4f8:	f04f 30ff 	mov.w	r0, #4294967295
 800e4fc:	b01d      	add	sp, #116	; 0x74
 800e4fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e502:	4b7b      	ldr	r3, [pc, #492]	; (800e6f0 <_vfiprintf_r+0x244>)
 800e504:	429d      	cmp	r5, r3
 800e506:	d101      	bne.n	800e50c <_vfiprintf_r+0x60>
 800e508:	68b5      	ldr	r5, [r6, #8]
 800e50a:	e7df      	b.n	800e4cc <_vfiprintf_r+0x20>
 800e50c:	4b79      	ldr	r3, [pc, #484]	; (800e6f4 <_vfiprintf_r+0x248>)
 800e50e:	429d      	cmp	r5, r3
 800e510:	bf08      	it	eq
 800e512:	68f5      	ldreq	r5, [r6, #12]
 800e514:	e7da      	b.n	800e4cc <_vfiprintf_r+0x20>
 800e516:	89ab      	ldrh	r3, [r5, #12]
 800e518:	0598      	lsls	r0, r3, #22
 800e51a:	d4ed      	bmi.n	800e4f8 <_vfiprintf_r+0x4c>
 800e51c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e51e:	f7fe fffd 	bl	800d51c <__retarget_lock_release_recursive>
 800e522:	e7e9      	b.n	800e4f8 <_vfiprintf_r+0x4c>
 800e524:	2300      	movs	r3, #0
 800e526:	9309      	str	r3, [sp, #36]	; 0x24
 800e528:	2320      	movs	r3, #32
 800e52a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e52e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e532:	2330      	movs	r3, #48	; 0x30
 800e534:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e6f8 <_vfiprintf_r+0x24c>
 800e538:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e53c:	f04f 0901 	mov.w	r9, #1
 800e540:	4623      	mov	r3, r4
 800e542:	469a      	mov	sl, r3
 800e544:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e548:	b10a      	cbz	r2, 800e54e <_vfiprintf_r+0xa2>
 800e54a:	2a25      	cmp	r2, #37	; 0x25
 800e54c:	d1f9      	bne.n	800e542 <_vfiprintf_r+0x96>
 800e54e:	ebba 0b04 	subs.w	fp, sl, r4
 800e552:	d00b      	beq.n	800e56c <_vfiprintf_r+0xc0>
 800e554:	465b      	mov	r3, fp
 800e556:	4622      	mov	r2, r4
 800e558:	4629      	mov	r1, r5
 800e55a:	4630      	mov	r0, r6
 800e55c:	f7ff ff93 	bl	800e486 <__sfputs_r>
 800e560:	3001      	adds	r0, #1
 800e562:	f000 80aa 	beq.w	800e6ba <_vfiprintf_r+0x20e>
 800e566:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e568:	445a      	add	r2, fp
 800e56a:	9209      	str	r2, [sp, #36]	; 0x24
 800e56c:	f89a 3000 	ldrb.w	r3, [sl]
 800e570:	2b00      	cmp	r3, #0
 800e572:	f000 80a2 	beq.w	800e6ba <_vfiprintf_r+0x20e>
 800e576:	2300      	movs	r3, #0
 800e578:	f04f 32ff 	mov.w	r2, #4294967295
 800e57c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e580:	f10a 0a01 	add.w	sl, sl, #1
 800e584:	9304      	str	r3, [sp, #16]
 800e586:	9307      	str	r3, [sp, #28]
 800e588:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e58c:	931a      	str	r3, [sp, #104]	; 0x68
 800e58e:	4654      	mov	r4, sl
 800e590:	2205      	movs	r2, #5
 800e592:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e596:	4858      	ldr	r0, [pc, #352]	; (800e6f8 <_vfiprintf_r+0x24c>)
 800e598:	f7f1 fe5a 	bl	8000250 <memchr>
 800e59c:	9a04      	ldr	r2, [sp, #16]
 800e59e:	b9d8      	cbnz	r0, 800e5d8 <_vfiprintf_r+0x12c>
 800e5a0:	06d1      	lsls	r1, r2, #27
 800e5a2:	bf44      	itt	mi
 800e5a4:	2320      	movmi	r3, #32
 800e5a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e5aa:	0713      	lsls	r3, r2, #28
 800e5ac:	bf44      	itt	mi
 800e5ae:	232b      	movmi	r3, #43	; 0x2b
 800e5b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e5b4:	f89a 3000 	ldrb.w	r3, [sl]
 800e5b8:	2b2a      	cmp	r3, #42	; 0x2a
 800e5ba:	d015      	beq.n	800e5e8 <_vfiprintf_r+0x13c>
 800e5bc:	9a07      	ldr	r2, [sp, #28]
 800e5be:	4654      	mov	r4, sl
 800e5c0:	2000      	movs	r0, #0
 800e5c2:	f04f 0c0a 	mov.w	ip, #10
 800e5c6:	4621      	mov	r1, r4
 800e5c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e5cc:	3b30      	subs	r3, #48	; 0x30
 800e5ce:	2b09      	cmp	r3, #9
 800e5d0:	d94e      	bls.n	800e670 <_vfiprintf_r+0x1c4>
 800e5d2:	b1b0      	cbz	r0, 800e602 <_vfiprintf_r+0x156>
 800e5d4:	9207      	str	r2, [sp, #28]
 800e5d6:	e014      	b.n	800e602 <_vfiprintf_r+0x156>
 800e5d8:	eba0 0308 	sub.w	r3, r0, r8
 800e5dc:	fa09 f303 	lsl.w	r3, r9, r3
 800e5e0:	4313      	orrs	r3, r2
 800e5e2:	9304      	str	r3, [sp, #16]
 800e5e4:	46a2      	mov	sl, r4
 800e5e6:	e7d2      	b.n	800e58e <_vfiprintf_r+0xe2>
 800e5e8:	9b03      	ldr	r3, [sp, #12]
 800e5ea:	1d19      	adds	r1, r3, #4
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	9103      	str	r1, [sp, #12]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	bfbb      	ittet	lt
 800e5f4:	425b      	neglt	r3, r3
 800e5f6:	f042 0202 	orrlt.w	r2, r2, #2
 800e5fa:	9307      	strge	r3, [sp, #28]
 800e5fc:	9307      	strlt	r3, [sp, #28]
 800e5fe:	bfb8      	it	lt
 800e600:	9204      	strlt	r2, [sp, #16]
 800e602:	7823      	ldrb	r3, [r4, #0]
 800e604:	2b2e      	cmp	r3, #46	; 0x2e
 800e606:	d10c      	bne.n	800e622 <_vfiprintf_r+0x176>
 800e608:	7863      	ldrb	r3, [r4, #1]
 800e60a:	2b2a      	cmp	r3, #42	; 0x2a
 800e60c:	d135      	bne.n	800e67a <_vfiprintf_r+0x1ce>
 800e60e:	9b03      	ldr	r3, [sp, #12]
 800e610:	1d1a      	adds	r2, r3, #4
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	9203      	str	r2, [sp, #12]
 800e616:	2b00      	cmp	r3, #0
 800e618:	bfb8      	it	lt
 800e61a:	f04f 33ff 	movlt.w	r3, #4294967295
 800e61e:	3402      	adds	r4, #2
 800e620:	9305      	str	r3, [sp, #20]
 800e622:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e708 <_vfiprintf_r+0x25c>
 800e626:	7821      	ldrb	r1, [r4, #0]
 800e628:	2203      	movs	r2, #3
 800e62a:	4650      	mov	r0, sl
 800e62c:	f7f1 fe10 	bl	8000250 <memchr>
 800e630:	b140      	cbz	r0, 800e644 <_vfiprintf_r+0x198>
 800e632:	2340      	movs	r3, #64	; 0x40
 800e634:	eba0 000a 	sub.w	r0, r0, sl
 800e638:	fa03 f000 	lsl.w	r0, r3, r0
 800e63c:	9b04      	ldr	r3, [sp, #16]
 800e63e:	4303      	orrs	r3, r0
 800e640:	3401      	adds	r4, #1
 800e642:	9304      	str	r3, [sp, #16]
 800e644:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e648:	482c      	ldr	r0, [pc, #176]	; (800e6fc <_vfiprintf_r+0x250>)
 800e64a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e64e:	2206      	movs	r2, #6
 800e650:	f7f1 fdfe 	bl	8000250 <memchr>
 800e654:	2800      	cmp	r0, #0
 800e656:	d03f      	beq.n	800e6d8 <_vfiprintf_r+0x22c>
 800e658:	4b29      	ldr	r3, [pc, #164]	; (800e700 <_vfiprintf_r+0x254>)
 800e65a:	bb1b      	cbnz	r3, 800e6a4 <_vfiprintf_r+0x1f8>
 800e65c:	9b03      	ldr	r3, [sp, #12]
 800e65e:	3307      	adds	r3, #7
 800e660:	f023 0307 	bic.w	r3, r3, #7
 800e664:	3308      	adds	r3, #8
 800e666:	9303      	str	r3, [sp, #12]
 800e668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e66a:	443b      	add	r3, r7
 800e66c:	9309      	str	r3, [sp, #36]	; 0x24
 800e66e:	e767      	b.n	800e540 <_vfiprintf_r+0x94>
 800e670:	fb0c 3202 	mla	r2, ip, r2, r3
 800e674:	460c      	mov	r4, r1
 800e676:	2001      	movs	r0, #1
 800e678:	e7a5      	b.n	800e5c6 <_vfiprintf_r+0x11a>
 800e67a:	2300      	movs	r3, #0
 800e67c:	3401      	adds	r4, #1
 800e67e:	9305      	str	r3, [sp, #20]
 800e680:	4619      	mov	r1, r3
 800e682:	f04f 0c0a 	mov.w	ip, #10
 800e686:	4620      	mov	r0, r4
 800e688:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e68c:	3a30      	subs	r2, #48	; 0x30
 800e68e:	2a09      	cmp	r2, #9
 800e690:	d903      	bls.n	800e69a <_vfiprintf_r+0x1ee>
 800e692:	2b00      	cmp	r3, #0
 800e694:	d0c5      	beq.n	800e622 <_vfiprintf_r+0x176>
 800e696:	9105      	str	r1, [sp, #20]
 800e698:	e7c3      	b.n	800e622 <_vfiprintf_r+0x176>
 800e69a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e69e:	4604      	mov	r4, r0
 800e6a0:	2301      	movs	r3, #1
 800e6a2:	e7f0      	b.n	800e686 <_vfiprintf_r+0x1da>
 800e6a4:	ab03      	add	r3, sp, #12
 800e6a6:	9300      	str	r3, [sp, #0]
 800e6a8:	462a      	mov	r2, r5
 800e6aa:	4b16      	ldr	r3, [pc, #88]	; (800e704 <_vfiprintf_r+0x258>)
 800e6ac:	a904      	add	r1, sp, #16
 800e6ae:	4630      	mov	r0, r6
 800e6b0:	f7fb fe86 	bl	800a3c0 <_printf_float>
 800e6b4:	4607      	mov	r7, r0
 800e6b6:	1c78      	adds	r0, r7, #1
 800e6b8:	d1d6      	bne.n	800e668 <_vfiprintf_r+0x1bc>
 800e6ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e6bc:	07d9      	lsls	r1, r3, #31
 800e6be:	d405      	bmi.n	800e6cc <_vfiprintf_r+0x220>
 800e6c0:	89ab      	ldrh	r3, [r5, #12]
 800e6c2:	059a      	lsls	r2, r3, #22
 800e6c4:	d402      	bmi.n	800e6cc <_vfiprintf_r+0x220>
 800e6c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e6c8:	f7fe ff28 	bl	800d51c <__retarget_lock_release_recursive>
 800e6cc:	89ab      	ldrh	r3, [r5, #12]
 800e6ce:	065b      	lsls	r3, r3, #25
 800e6d0:	f53f af12 	bmi.w	800e4f8 <_vfiprintf_r+0x4c>
 800e6d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e6d6:	e711      	b.n	800e4fc <_vfiprintf_r+0x50>
 800e6d8:	ab03      	add	r3, sp, #12
 800e6da:	9300      	str	r3, [sp, #0]
 800e6dc:	462a      	mov	r2, r5
 800e6de:	4b09      	ldr	r3, [pc, #36]	; (800e704 <_vfiprintf_r+0x258>)
 800e6e0:	a904      	add	r1, sp, #16
 800e6e2:	4630      	mov	r0, r6
 800e6e4:	f7fc f8f8 	bl	800a8d8 <_printf_i>
 800e6e8:	e7e4      	b.n	800e6b4 <_vfiprintf_r+0x208>
 800e6ea:	bf00      	nop
 800e6ec:	0800ee9c 	.word	0x0800ee9c
 800e6f0:	0800eebc 	.word	0x0800eebc
 800e6f4:	0800ee7c 	.word	0x0800ee7c
 800e6f8:	0800f0b4 	.word	0x0800f0b4
 800e6fc:	0800f0be 	.word	0x0800f0be
 800e700:	0800a3c1 	.word	0x0800a3c1
 800e704:	0800e487 	.word	0x0800e487
 800e708:	0800f0ba 	.word	0x0800f0ba
 800e70c:	00000000 	.word	0x00000000

0800e710 <nan>:
 800e710:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e718 <nan+0x8>
 800e714:	4770      	bx	lr
 800e716:	bf00      	nop
 800e718:	00000000 	.word	0x00000000
 800e71c:	7ff80000 	.word	0x7ff80000

0800e720 <_sbrk_r>:
 800e720:	b538      	push	{r3, r4, r5, lr}
 800e722:	4d06      	ldr	r5, [pc, #24]	; (800e73c <_sbrk_r+0x1c>)
 800e724:	2300      	movs	r3, #0
 800e726:	4604      	mov	r4, r0
 800e728:	4608      	mov	r0, r1
 800e72a:	602b      	str	r3, [r5, #0]
 800e72c:	f7f3 fa8a 	bl	8001c44 <_sbrk>
 800e730:	1c43      	adds	r3, r0, #1
 800e732:	d102      	bne.n	800e73a <_sbrk_r+0x1a>
 800e734:	682b      	ldr	r3, [r5, #0]
 800e736:	b103      	cbz	r3, 800e73a <_sbrk_r+0x1a>
 800e738:	6023      	str	r3, [r4, #0]
 800e73a:	bd38      	pop	{r3, r4, r5, pc}
 800e73c:	20000484 	.word	0x20000484

0800e740 <__sread>:
 800e740:	b510      	push	{r4, lr}
 800e742:	460c      	mov	r4, r1
 800e744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e748:	f000 f93a 	bl	800e9c0 <_read_r>
 800e74c:	2800      	cmp	r0, #0
 800e74e:	bfab      	itete	ge
 800e750:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e752:	89a3      	ldrhlt	r3, [r4, #12]
 800e754:	181b      	addge	r3, r3, r0
 800e756:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e75a:	bfac      	ite	ge
 800e75c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e75e:	81a3      	strhlt	r3, [r4, #12]
 800e760:	bd10      	pop	{r4, pc}

0800e762 <__swrite>:
 800e762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e766:	461f      	mov	r7, r3
 800e768:	898b      	ldrh	r3, [r1, #12]
 800e76a:	05db      	lsls	r3, r3, #23
 800e76c:	4605      	mov	r5, r0
 800e76e:	460c      	mov	r4, r1
 800e770:	4616      	mov	r6, r2
 800e772:	d505      	bpl.n	800e780 <__swrite+0x1e>
 800e774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e778:	2302      	movs	r3, #2
 800e77a:	2200      	movs	r2, #0
 800e77c:	f000 f8b8 	bl	800e8f0 <_lseek_r>
 800e780:	89a3      	ldrh	r3, [r4, #12]
 800e782:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e786:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e78a:	81a3      	strh	r3, [r4, #12]
 800e78c:	4632      	mov	r2, r6
 800e78e:	463b      	mov	r3, r7
 800e790:	4628      	mov	r0, r5
 800e792:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e796:	f000 b837 	b.w	800e808 <_write_r>

0800e79a <__sseek>:
 800e79a:	b510      	push	{r4, lr}
 800e79c:	460c      	mov	r4, r1
 800e79e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7a2:	f000 f8a5 	bl	800e8f0 <_lseek_r>
 800e7a6:	1c43      	adds	r3, r0, #1
 800e7a8:	89a3      	ldrh	r3, [r4, #12]
 800e7aa:	bf15      	itete	ne
 800e7ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800e7ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e7b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e7b6:	81a3      	strheq	r3, [r4, #12]
 800e7b8:	bf18      	it	ne
 800e7ba:	81a3      	strhne	r3, [r4, #12]
 800e7bc:	bd10      	pop	{r4, pc}

0800e7be <__sclose>:
 800e7be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7c2:	f000 b851 	b.w	800e868 <_close_r>

0800e7c6 <strncmp>:
 800e7c6:	b510      	push	{r4, lr}
 800e7c8:	b17a      	cbz	r2, 800e7ea <strncmp+0x24>
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	3901      	subs	r1, #1
 800e7ce:	1884      	adds	r4, r0, r2
 800e7d0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e7d4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e7d8:	4290      	cmp	r0, r2
 800e7da:	d101      	bne.n	800e7e0 <strncmp+0x1a>
 800e7dc:	42a3      	cmp	r3, r4
 800e7de:	d101      	bne.n	800e7e4 <strncmp+0x1e>
 800e7e0:	1a80      	subs	r0, r0, r2
 800e7e2:	bd10      	pop	{r4, pc}
 800e7e4:	2800      	cmp	r0, #0
 800e7e6:	d1f3      	bne.n	800e7d0 <strncmp+0xa>
 800e7e8:	e7fa      	b.n	800e7e0 <strncmp+0x1a>
 800e7ea:	4610      	mov	r0, r2
 800e7ec:	e7f9      	b.n	800e7e2 <strncmp+0x1c>

0800e7ee <__ascii_wctomb>:
 800e7ee:	b149      	cbz	r1, 800e804 <__ascii_wctomb+0x16>
 800e7f0:	2aff      	cmp	r2, #255	; 0xff
 800e7f2:	bf85      	ittet	hi
 800e7f4:	238a      	movhi	r3, #138	; 0x8a
 800e7f6:	6003      	strhi	r3, [r0, #0]
 800e7f8:	700a      	strbls	r2, [r1, #0]
 800e7fa:	f04f 30ff 	movhi.w	r0, #4294967295
 800e7fe:	bf98      	it	ls
 800e800:	2001      	movls	r0, #1
 800e802:	4770      	bx	lr
 800e804:	4608      	mov	r0, r1
 800e806:	4770      	bx	lr

0800e808 <_write_r>:
 800e808:	b538      	push	{r3, r4, r5, lr}
 800e80a:	4d07      	ldr	r5, [pc, #28]	; (800e828 <_write_r+0x20>)
 800e80c:	4604      	mov	r4, r0
 800e80e:	4608      	mov	r0, r1
 800e810:	4611      	mov	r1, r2
 800e812:	2200      	movs	r2, #0
 800e814:	602a      	str	r2, [r5, #0]
 800e816:	461a      	mov	r2, r3
 800e818:	f7f3 f9c3 	bl	8001ba2 <_write>
 800e81c:	1c43      	adds	r3, r0, #1
 800e81e:	d102      	bne.n	800e826 <_write_r+0x1e>
 800e820:	682b      	ldr	r3, [r5, #0]
 800e822:	b103      	cbz	r3, 800e826 <_write_r+0x1e>
 800e824:	6023      	str	r3, [r4, #0]
 800e826:	bd38      	pop	{r3, r4, r5, pc}
 800e828:	20000484 	.word	0x20000484

0800e82c <__assert_func>:
 800e82c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e82e:	4614      	mov	r4, r2
 800e830:	461a      	mov	r2, r3
 800e832:	4b09      	ldr	r3, [pc, #36]	; (800e858 <__assert_func+0x2c>)
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	4605      	mov	r5, r0
 800e838:	68d8      	ldr	r0, [r3, #12]
 800e83a:	b14c      	cbz	r4, 800e850 <__assert_func+0x24>
 800e83c:	4b07      	ldr	r3, [pc, #28]	; (800e85c <__assert_func+0x30>)
 800e83e:	9100      	str	r1, [sp, #0]
 800e840:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e844:	4906      	ldr	r1, [pc, #24]	; (800e860 <__assert_func+0x34>)
 800e846:	462b      	mov	r3, r5
 800e848:	f000 f81e 	bl	800e888 <fiprintf>
 800e84c:	f000 f8ca 	bl	800e9e4 <abort>
 800e850:	4b04      	ldr	r3, [pc, #16]	; (800e864 <__assert_func+0x38>)
 800e852:	461c      	mov	r4, r3
 800e854:	e7f3      	b.n	800e83e <__assert_func+0x12>
 800e856:	bf00      	nop
 800e858:	2000000c 	.word	0x2000000c
 800e85c:	0800f0c5 	.word	0x0800f0c5
 800e860:	0800f0d2 	.word	0x0800f0d2
 800e864:	0800f100 	.word	0x0800f100

0800e868 <_close_r>:
 800e868:	b538      	push	{r3, r4, r5, lr}
 800e86a:	4d06      	ldr	r5, [pc, #24]	; (800e884 <_close_r+0x1c>)
 800e86c:	2300      	movs	r3, #0
 800e86e:	4604      	mov	r4, r0
 800e870:	4608      	mov	r0, r1
 800e872:	602b      	str	r3, [r5, #0]
 800e874:	f7f3 f9b1 	bl	8001bda <_close>
 800e878:	1c43      	adds	r3, r0, #1
 800e87a:	d102      	bne.n	800e882 <_close_r+0x1a>
 800e87c:	682b      	ldr	r3, [r5, #0]
 800e87e:	b103      	cbz	r3, 800e882 <_close_r+0x1a>
 800e880:	6023      	str	r3, [r4, #0]
 800e882:	bd38      	pop	{r3, r4, r5, pc}
 800e884:	20000484 	.word	0x20000484

0800e888 <fiprintf>:
 800e888:	b40e      	push	{r1, r2, r3}
 800e88a:	b503      	push	{r0, r1, lr}
 800e88c:	4601      	mov	r1, r0
 800e88e:	ab03      	add	r3, sp, #12
 800e890:	4805      	ldr	r0, [pc, #20]	; (800e8a8 <fiprintf+0x20>)
 800e892:	f853 2b04 	ldr.w	r2, [r3], #4
 800e896:	6800      	ldr	r0, [r0, #0]
 800e898:	9301      	str	r3, [sp, #4]
 800e89a:	f7ff fe07 	bl	800e4ac <_vfiprintf_r>
 800e89e:	b002      	add	sp, #8
 800e8a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e8a4:	b003      	add	sp, #12
 800e8a6:	4770      	bx	lr
 800e8a8:	2000000c 	.word	0x2000000c

0800e8ac <_fstat_r>:
 800e8ac:	b538      	push	{r3, r4, r5, lr}
 800e8ae:	4d07      	ldr	r5, [pc, #28]	; (800e8cc <_fstat_r+0x20>)
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	4604      	mov	r4, r0
 800e8b4:	4608      	mov	r0, r1
 800e8b6:	4611      	mov	r1, r2
 800e8b8:	602b      	str	r3, [r5, #0]
 800e8ba:	f7f3 f99a 	bl	8001bf2 <_fstat>
 800e8be:	1c43      	adds	r3, r0, #1
 800e8c0:	d102      	bne.n	800e8c8 <_fstat_r+0x1c>
 800e8c2:	682b      	ldr	r3, [r5, #0]
 800e8c4:	b103      	cbz	r3, 800e8c8 <_fstat_r+0x1c>
 800e8c6:	6023      	str	r3, [r4, #0]
 800e8c8:	bd38      	pop	{r3, r4, r5, pc}
 800e8ca:	bf00      	nop
 800e8cc:	20000484 	.word	0x20000484

0800e8d0 <_isatty_r>:
 800e8d0:	b538      	push	{r3, r4, r5, lr}
 800e8d2:	4d06      	ldr	r5, [pc, #24]	; (800e8ec <_isatty_r+0x1c>)
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	4604      	mov	r4, r0
 800e8d8:	4608      	mov	r0, r1
 800e8da:	602b      	str	r3, [r5, #0]
 800e8dc:	f7f3 f999 	bl	8001c12 <_isatty>
 800e8e0:	1c43      	adds	r3, r0, #1
 800e8e2:	d102      	bne.n	800e8ea <_isatty_r+0x1a>
 800e8e4:	682b      	ldr	r3, [r5, #0]
 800e8e6:	b103      	cbz	r3, 800e8ea <_isatty_r+0x1a>
 800e8e8:	6023      	str	r3, [r4, #0]
 800e8ea:	bd38      	pop	{r3, r4, r5, pc}
 800e8ec:	20000484 	.word	0x20000484

0800e8f0 <_lseek_r>:
 800e8f0:	b538      	push	{r3, r4, r5, lr}
 800e8f2:	4d07      	ldr	r5, [pc, #28]	; (800e910 <_lseek_r+0x20>)
 800e8f4:	4604      	mov	r4, r0
 800e8f6:	4608      	mov	r0, r1
 800e8f8:	4611      	mov	r1, r2
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	602a      	str	r2, [r5, #0]
 800e8fe:	461a      	mov	r2, r3
 800e900:	f7f3 f992 	bl	8001c28 <_lseek>
 800e904:	1c43      	adds	r3, r0, #1
 800e906:	d102      	bne.n	800e90e <_lseek_r+0x1e>
 800e908:	682b      	ldr	r3, [r5, #0]
 800e90a:	b103      	cbz	r3, 800e90e <_lseek_r+0x1e>
 800e90c:	6023      	str	r3, [r4, #0]
 800e90e:	bd38      	pop	{r3, r4, r5, pc}
 800e910:	20000484 	.word	0x20000484

0800e914 <memmove>:
 800e914:	4288      	cmp	r0, r1
 800e916:	b510      	push	{r4, lr}
 800e918:	eb01 0402 	add.w	r4, r1, r2
 800e91c:	d902      	bls.n	800e924 <memmove+0x10>
 800e91e:	4284      	cmp	r4, r0
 800e920:	4623      	mov	r3, r4
 800e922:	d807      	bhi.n	800e934 <memmove+0x20>
 800e924:	1e43      	subs	r3, r0, #1
 800e926:	42a1      	cmp	r1, r4
 800e928:	d008      	beq.n	800e93c <memmove+0x28>
 800e92a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e92e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e932:	e7f8      	b.n	800e926 <memmove+0x12>
 800e934:	4402      	add	r2, r0
 800e936:	4601      	mov	r1, r0
 800e938:	428a      	cmp	r2, r1
 800e93a:	d100      	bne.n	800e93e <memmove+0x2a>
 800e93c:	bd10      	pop	{r4, pc}
 800e93e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e942:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e946:	e7f7      	b.n	800e938 <memmove+0x24>

0800e948 <__malloc_lock>:
 800e948:	4801      	ldr	r0, [pc, #4]	; (800e950 <__malloc_lock+0x8>)
 800e94a:	f7fe bde6 	b.w	800d51a <__retarget_lock_acquire_recursive>
 800e94e:	bf00      	nop
 800e950:	20000478 	.word	0x20000478

0800e954 <__malloc_unlock>:
 800e954:	4801      	ldr	r0, [pc, #4]	; (800e95c <__malloc_unlock+0x8>)
 800e956:	f7fe bde1 	b.w	800d51c <__retarget_lock_release_recursive>
 800e95a:	bf00      	nop
 800e95c:	20000478 	.word	0x20000478

0800e960 <_realloc_r>:
 800e960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e964:	4680      	mov	r8, r0
 800e966:	4614      	mov	r4, r2
 800e968:	460e      	mov	r6, r1
 800e96a:	b921      	cbnz	r1, 800e976 <_realloc_r+0x16>
 800e96c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e970:	4611      	mov	r1, r2
 800e972:	f7ff bba1 	b.w	800e0b8 <_malloc_r>
 800e976:	b92a      	cbnz	r2, 800e984 <_realloc_r+0x24>
 800e978:	f7ff fb32 	bl	800dfe0 <_free_r>
 800e97c:	4625      	mov	r5, r4
 800e97e:	4628      	mov	r0, r5
 800e980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e984:	f000 f835 	bl	800e9f2 <_malloc_usable_size_r>
 800e988:	4284      	cmp	r4, r0
 800e98a:	4607      	mov	r7, r0
 800e98c:	d802      	bhi.n	800e994 <_realloc_r+0x34>
 800e98e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e992:	d812      	bhi.n	800e9ba <_realloc_r+0x5a>
 800e994:	4621      	mov	r1, r4
 800e996:	4640      	mov	r0, r8
 800e998:	f7ff fb8e 	bl	800e0b8 <_malloc_r>
 800e99c:	4605      	mov	r5, r0
 800e99e:	2800      	cmp	r0, #0
 800e9a0:	d0ed      	beq.n	800e97e <_realloc_r+0x1e>
 800e9a2:	42bc      	cmp	r4, r7
 800e9a4:	4622      	mov	r2, r4
 800e9a6:	4631      	mov	r1, r6
 800e9a8:	bf28      	it	cs
 800e9aa:	463a      	movcs	r2, r7
 800e9ac:	f7fe fe36 	bl	800d61c <memcpy>
 800e9b0:	4631      	mov	r1, r6
 800e9b2:	4640      	mov	r0, r8
 800e9b4:	f7ff fb14 	bl	800dfe0 <_free_r>
 800e9b8:	e7e1      	b.n	800e97e <_realloc_r+0x1e>
 800e9ba:	4635      	mov	r5, r6
 800e9bc:	e7df      	b.n	800e97e <_realloc_r+0x1e>
	...

0800e9c0 <_read_r>:
 800e9c0:	b538      	push	{r3, r4, r5, lr}
 800e9c2:	4d07      	ldr	r5, [pc, #28]	; (800e9e0 <_read_r+0x20>)
 800e9c4:	4604      	mov	r4, r0
 800e9c6:	4608      	mov	r0, r1
 800e9c8:	4611      	mov	r1, r2
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	602a      	str	r2, [r5, #0]
 800e9ce:	461a      	mov	r2, r3
 800e9d0:	f7f3 f8ca 	bl	8001b68 <_read>
 800e9d4:	1c43      	adds	r3, r0, #1
 800e9d6:	d102      	bne.n	800e9de <_read_r+0x1e>
 800e9d8:	682b      	ldr	r3, [r5, #0]
 800e9da:	b103      	cbz	r3, 800e9de <_read_r+0x1e>
 800e9dc:	6023      	str	r3, [r4, #0]
 800e9de:	bd38      	pop	{r3, r4, r5, pc}
 800e9e0:	20000484 	.word	0x20000484

0800e9e4 <abort>:
 800e9e4:	b508      	push	{r3, lr}
 800e9e6:	2006      	movs	r0, #6
 800e9e8:	f000 f834 	bl	800ea54 <raise>
 800e9ec:	2001      	movs	r0, #1
 800e9ee:	f7f3 f8b1 	bl	8001b54 <_exit>

0800e9f2 <_malloc_usable_size_r>:
 800e9f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e9f6:	1f18      	subs	r0, r3, #4
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	bfbc      	itt	lt
 800e9fc:	580b      	ldrlt	r3, [r1, r0]
 800e9fe:	18c0      	addlt	r0, r0, r3
 800ea00:	4770      	bx	lr

0800ea02 <_raise_r>:
 800ea02:	291f      	cmp	r1, #31
 800ea04:	b538      	push	{r3, r4, r5, lr}
 800ea06:	4604      	mov	r4, r0
 800ea08:	460d      	mov	r5, r1
 800ea0a:	d904      	bls.n	800ea16 <_raise_r+0x14>
 800ea0c:	2316      	movs	r3, #22
 800ea0e:	6003      	str	r3, [r0, #0]
 800ea10:	f04f 30ff 	mov.w	r0, #4294967295
 800ea14:	bd38      	pop	{r3, r4, r5, pc}
 800ea16:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ea18:	b112      	cbz	r2, 800ea20 <_raise_r+0x1e>
 800ea1a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ea1e:	b94b      	cbnz	r3, 800ea34 <_raise_r+0x32>
 800ea20:	4620      	mov	r0, r4
 800ea22:	f000 f831 	bl	800ea88 <_getpid_r>
 800ea26:	462a      	mov	r2, r5
 800ea28:	4601      	mov	r1, r0
 800ea2a:	4620      	mov	r0, r4
 800ea2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea30:	f000 b818 	b.w	800ea64 <_kill_r>
 800ea34:	2b01      	cmp	r3, #1
 800ea36:	d00a      	beq.n	800ea4e <_raise_r+0x4c>
 800ea38:	1c59      	adds	r1, r3, #1
 800ea3a:	d103      	bne.n	800ea44 <_raise_r+0x42>
 800ea3c:	2316      	movs	r3, #22
 800ea3e:	6003      	str	r3, [r0, #0]
 800ea40:	2001      	movs	r0, #1
 800ea42:	e7e7      	b.n	800ea14 <_raise_r+0x12>
 800ea44:	2400      	movs	r4, #0
 800ea46:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ea4a:	4628      	mov	r0, r5
 800ea4c:	4798      	blx	r3
 800ea4e:	2000      	movs	r0, #0
 800ea50:	e7e0      	b.n	800ea14 <_raise_r+0x12>
	...

0800ea54 <raise>:
 800ea54:	4b02      	ldr	r3, [pc, #8]	; (800ea60 <raise+0xc>)
 800ea56:	4601      	mov	r1, r0
 800ea58:	6818      	ldr	r0, [r3, #0]
 800ea5a:	f7ff bfd2 	b.w	800ea02 <_raise_r>
 800ea5e:	bf00      	nop
 800ea60:	2000000c 	.word	0x2000000c

0800ea64 <_kill_r>:
 800ea64:	b538      	push	{r3, r4, r5, lr}
 800ea66:	4d07      	ldr	r5, [pc, #28]	; (800ea84 <_kill_r+0x20>)
 800ea68:	2300      	movs	r3, #0
 800ea6a:	4604      	mov	r4, r0
 800ea6c:	4608      	mov	r0, r1
 800ea6e:	4611      	mov	r1, r2
 800ea70:	602b      	str	r3, [r5, #0]
 800ea72:	f7f3 f85f 	bl	8001b34 <_kill>
 800ea76:	1c43      	adds	r3, r0, #1
 800ea78:	d102      	bne.n	800ea80 <_kill_r+0x1c>
 800ea7a:	682b      	ldr	r3, [r5, #0]
 800ea7c:	b103      	cbz	r3, 800ea80 <_kill_r+0x1c>
 800ea7e:	6023      	str	r3, [r4, #0]
 800ea80:	bd38      	pop	{r3, r4, r5, pc}
 800ea82:	bf00      	nop
 800ea84:	20000484 	.word	0x20000484

0800ea88 <_getpid_r>:
 800ea88:	f7f3 b84c 	b.w	8001b24 <_getpid>

0800ea8c <_init>:
 800ea8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea8e:	bf00      	nop
 800ea90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea92:	bc08      	pop	{r3}
 800ea94:	469e      	mov	lr, r3
 800ea96:	4770      	bx	lr

0800ea98 <_fini>:
 800ea98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea9a:	bf00      	nop
 800ea9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea9e:	bc08      	pop	{r3}
 800eaa0:	469e      	mov	lr, r3
 800eaa2:	4770      	bx	lr
