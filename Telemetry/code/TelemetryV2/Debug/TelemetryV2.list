
TelemetryV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001abf0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000026c0  0801adf0  0801adf0  0002adf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d4b0  0801d4b0  000302f0  2**0
                  CONTENTS
  4 .ARM          00000008  0801d4b0  0801d4b0  0002d4b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d4b8  0801d4b8  000302f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d4b8  0801d4b8  0002d4b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d4bc  0801d4bc  0002d4bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f0  20000000  0801d4c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005ed0  200002f0  0801d7b0  000302f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200061c0  0801d7b0  000361c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000302f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003e712  00000000  00000000  0003031e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007d9b  00000000  00000000  0006ea30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002730  00000000  00000000  000767d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000023b0  00000000  00000000  00078f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00034760  00000000  00000000  0007b2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003ba47  00000000  00000000  000afa10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00119d93  00000000  00000000  000eb457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002051ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b960  00000000  00000000  0020523c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002f0 	.word	0x200002f0
 800021c:	00000000 	.word	0x00000000
 8000220:	0801add8 	.word	0x0801add8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002f4 	.word	0x200002f4
 800023c:	0801add8 	.word	0x0801add8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9ac 	b.w	80009d8 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468e      	mov	lr, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	d14d      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000716:	428a      	cmp	r2, r1
 8000718:	4694      	mov	ip, r2
 800071a:	d969      	bls.n	80007f0 <__udivmoddi4+0xe8>
 800071c:	fab2 f282 	clz	r2, r2
 8000720:	b152      	cbz	r2, 8000738 <__udivmoddi4+0x30>
 8000722:	fa01 f302 	lsl.w	r3, r1, r2
 8000726:	f1c2 0120 	rsb	r1, r2, #32
 800072a:	fa20 f101 	lsr.w	r1, r0, r1
 800072e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000732:	ea41 0e03 	orr.w	lr, r1, r3
 8000736:	4094      	lsls	r4, r2
 8000738:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800073c:	0c21      	lsrs	r1, r4, #16
 800073e:	fbbe f6f8 	udiv	r6, lr, r8
 8000742:	fa1f f78c 	uxth.w	r7, ip
 8000746:	fb08 e316 	mls	r3, r8, r6, lr
 800074a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800074e:	fb06 f107 	mul.w	r1, r6, r7
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f106 30ff 	add.w	r0, r6, #4294967295
 800075e:	f080 811f 	bcs.w	80009a0 <__udivmoddi4+0x298>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 811c 	bls.w	80009a0 <__udivmoddi4+0x298>
 8000768:	3e02      	subs	r6, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a5b      	subs	r3, r3, r1
 800076e:	b2a4      	uxth	r4, r4
 8000770:	fbb3 f0f8 	udiv	r0, r3, r8
 8000774:	fb08 3310 	mls	r3, r8, r0, r3
 8000778:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800077c:	fb00 f707 	mul.w	r7, r0, r7
 8000780:	42a7      	cmp	r7, r4
 8000782:	d90a      	bls.n	800079a <__udivmoddi4+0x92>
 8000784:	eb1c 0404 	adds.w	r4, ip, r4
 8000788:	f100 33ff 	add.w	r3, r0, #4294967295
 800078c:	f080 810a 	bcs.w	80009a4 <__udivmoddi4+0x29c>
 8000790:	42a7      	cmp	r7, r4
 8000792:	f240 8107 	bls.w	80009a4 <__udivmoddi4+0x29c>
 8000796:	4464      	add	r4, ip
 8000798:	3802      	subs	r0, #2
 800079a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800079e:	1be4      	subs	r4, r4, r7
 80007a0:	2600      	movs	r6, #0
 80007a2:	b11d      	cbz	r5, 80007ac <__udivmoddi4+0xa4>
 80007a4:	40d4      	lsrs	r4, r2
 80007a6:	2300      	movs	r3, #0
 80007a8:	e9c5 4300 	strd	r4, r3, [r5]
 80007ac:	4631      	mov	r1, r6
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d909      	bls.n	80007ca <__udivmoddi4+0xc2>
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	f000 80ef 	beq.w	800099a <__udivmoddi4+0x292>
 80007bc:	2600      	movs	r6, #0
 80007be:	e9c5 0100 	strd	r0, r1, [r5]
 80007c2:	4630      	mov	r0, r6
 80007c4:	4631      	mov	r1, r6
 80007c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ca:	fab3 f683 	clz	r6, r3
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d14a      	bne.n	8000868 <__udivmoddi4+0x160>
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d302      	bcc.n	80007dc <__udivmoddi4+0xd4>
 80007d6:	4282      	cmp	r2, r0
 80007d8:	f200 80f9 	bhi.w	80009ce <__udivmoddi4+0x2c6>
 80007dc:	1a84      	subs	r4, r0, r2
 80007de:	eb61 0303 	sbc.w	r3, r1, r3
 80007e2:	2001      	movs	r0, #1
 80007e4:	469e      	mov	lr, r3
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	d0e0      	beq.n	80007ac <__udivmoddi4+0xa4>
 80007ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ee:	e7dd      	b.n	80007ac <__udivmoddi4+0xa4>
 80007f0:	b902      	cbnz	r2, 80007f4 <__udivmoddi4+0xec>
 80007f2:	deff      	udf	#255	; 0xff
 80007f4:	fab2 f282 	clz	r2, r2
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	f040 8092 	bne.w	8000922 <__udivmoddi4+0x21a>
 80007fe:	eba1 010c 	sub.w	r1, r1, ip
 8000802:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000806:	fa1f fe8c 	uxth.w	lr, ip
 800080a:	2601      	movs	r6, #1
 800080c:	0c20      	lsrs	r0, r4, #16
 800080e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000812:	fb07 1113 	mls	r1, r7, r3, r1
 8000816:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800081a:	fb0e f003 	mul.w	r0, lr, r3
 800081e:	4288      	cmp	r0, r1
 8000820:	d908      	bls.n	8000834 <__udivmoddi4+0x12c>
 8000822:	eb1c 0101 	adds.w	r1, ip, r1
 8000826:	f103 38ff 	add.w	r8, r3, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x12a>
 800082c:	4288      	cmp	r0, r1
 800082e:	f200 80cb 	bhi.w	80009c8 <__udivmoddi4+0x2c0>
 8000832:	4643      	mov	r3, r8
 8000834:	1a09      	subs	r1, r1, r0
 8000836:	b2a4      	uxth	r4, r4
 8000838:	fbb1 f0f7 	udiv	r0, r1, r7
 800083c:	fb07 1110 	mls	r1, r7, r0, r1
 8000840:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000844:	fb0e fe00 	mul.w	lr, lr, r0
 8000848:	45a6      	cmp	lr, r4
 800084a:	d908      	bls.n	800085e <__udivmoddi4+0x156>
 800084c:	eb1c 0404 	adds.w	r4, ip, r4
 8000850:	f100 31ff 	add.w	r1, r0, #4294967295
 8000854:	d202      	bcs.n	800085c <__udivmoddi4+0x154>
 8000856:	45a6      	cmp	lr, r4
 8000858:	f200 80bb 	bhi.w	80009d2 <__udivmoddi4+0x2ca>
 800085c:	4608      	mov	r0, r1
 800085e:	eba4 040e 	sub.w	r4, r4, lr
 8000862:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000866:	e79c      	b.n	80007a2 <__udivmoddi4+0x9a>
 8000868:	f1c6 0720 	rsb	r7, r6, #32
 800086c:	40b3      	lsls	r3, r6
 800086e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000872:	ea4c 0c03 	orr.w	ip, ip, r3
 8000876:	fa20 f407 	lsr.w	r4, r0, r7
 800087a:	fa01 f306 	lsl.w	r3, r1, r6
 800087e:	431c      	orrs	r4, r3
 8000880:	40f9      	lsrs	r1, r7
 8000882:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000886:	fa00 f306 	lsl.w	r3, r0, r6
 800088a:	fbb1 f8f9 	udiv	r8, r1, r9
 800088e:	0c20      	lsrs	r0, r4, #16
 8000890:	fa1f fe8c 	uxth.w	lr, ip
 8000894:	fb09 1118 	mls	r1, r9, r8, r1
 8000898:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800089c:	fb08 f00e 	mul.w	r0, r8, lr
 80008a0:	4288      	cmp	r0, r1
 80008a2:	fa02 f206 	lsl.w	r2, r2, r6
 80008a6:	d90b      	bls.n	80008c0 <__udivmoddi4+0x1b8>
 80008a8:	eb1c 0101 	adds.w	r1, ip, r1
 80008ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80008b0:	f080 8088 	bcs.w	80009c4 <__udivmoddi4+0x2bc>
 80008b4:	4288      	cmp	r0, r1
 80008b6:	f240 8085 	bls.w	80009c4 <__udivmoddi4+0x2bc>
 80008ba:	f1a8 0802 	sub.w	r8, r8, #2
 80008be:	4461      	add	r1, ip
 80008c0:	1a09      	subs	r1, r1, r0
 80008c2:	b2a4      	uxth	r4, r4
 80008c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008c8:	fb09 1110 	mls	r1, r9, r0, r1
 80008cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d4:	458e      	cmp	lr, r1
 80008d6:	d908      	bls.n	80008ea <__udivmoddi4+0x1e2>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e0:	d26c      	bcs.n	80009bc <__udivmoddi4+0x2b4>
 80008e2:	458e      	cmp	lr, r1
 80008e4:	d96a      	bls.n	80009bc <__udivmoddi4+0x2b4>
 80008e6:	3802      	subs	r0, #2
 80008e8:	4461      	add	r1, ip
 80008ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ee:	fba0 9402 	umull	r9, r4, r0, r2
 80008f2:	eba1 010e 	sub.w	r1, r1, lr
 80008f6:	42a1      	cmp	r1, r4
 80008f8:	46c8      	mov	r8, r9
 80008fa:	46a6      	mov	lr, r4
 80008fc:	d356      	bcc.n	80009ac <__udivmoddi4+0x2a4>
 80008fe:	d053      	beq.n	80009a8 <__udivmoddi4+0x2a0>
 8000900:	b15d      	cbz	r5, 800091a <__udivmoddi4+0x212>
 8000902:	ebb3 0208 	subs.w	r2, r3, r8
 8000906:	eb61 010e 	sbc.w	r1, r1, lr
 800090a:	fa01 f707 	lsl.w	r7, r1, r7
 800090e:	fa22 f306 	lsr.w	r3, r2, r6
 8000912:	40f1      	lsrs	r1, r6
 8000914:	431f      	orrs	r7, r3
 8000916:	e9c5 7100 	strd	r7, r1, [r5]
 800091a:	2600      	movs	r6, #0
 800091c:	4631      	mov	r1, r6
 800091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000922:	f1c2 0320 	rsb	r3, r2, #32
 8000926:	40d8      	lsrs	r0, r3
 8000928:	fa0c fc02 	lsl.w	ip, ip, r2
 800092c:	fa21 f303 	lsr.w	r3, r1, r3
 8000930:	4091      	lsls	r1, r2
 8000932:	4301      	orrs	r1, r0
 8000934:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000938:	fa1f fe8c 	uxth.w	lr, ip
 800093c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000940:	fb07 3610 	mls	r6, r7, r0, r3
 8000944:	0c0b      	lsrs	r3, r1, #16
 8000946:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800094a:	fb00 f60e 	mul.w	r6, r0, lr
 800094e:	429e      	cmp	r6, r3
 8000950:	fa04 f402 	lsl.w	r4, r4, r2
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0x260>
 8000956:	eb1c 0303 	adds.w	r3, ip, r3
 800095a:	f100 38ff 	add.w	r8, r0, #4294967295
 800095e:	d22f      	bcs.n	80009c0 <__udivmoddi4+0x2b8>
 8000960:	429e      	cmp	r6, r3
 8000962:	d92d      	bls.n	80009c0 <__udivmoddi4+0x2b8>
 8000964:	3802      	subs	r0, #2
 8000966:	4463      	add	r3, ip
 8000968:	1b9b      	subs	r3, r3, r6
 800096a:	b289      	uxth	r1, r1
 800096c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000970:	fb07 3316 	mls	r3, r7, r6, r3
 8000974:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000978:	fb06 f30e 	mul.w	r3, r6, lr
 800097c:	428b      	cmp	r3, r1
 800097e:	d908      	bls.n	8000992 <__udivmoddi4+0x28a>
 8000980:	eb1c 0101 	adds.w	r1, ip, r1
 8000984:	f106 38ff 	add.w	r8, r6, #4294967295
 8000988:	d216      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 800098a:	428b      	cmp	r3, r1
 800098c:	d914      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800098e:	3e02      	subs	r6, #2
 8000990:	4461      	add	r1, ip
 8000992:	1ac9      	subs	r1, r1, r3
 8000994:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000998:	e738      	b.n	800080c <__udivmoddi4+0x104>
 800099a:	462e      	mov	r6, r5
 800099c:	4628      	mov	r0, r5
 800099e:	e705      	b.n	80007ac <__udivmoddi4+0xa4>
 80009a0:	4606      	mov	r6, r0
 80009a2:	e6e3      	b.n	800076c <__udivmoddi4+0x64>
 80009a4:	4618      	mov	r0, r3
 80009a6:	e6f8      	b.n	800079a <__udivmoddi4+0x92>
 80009a8:	454b      	cmp	r3, r9
 80009aa:	d2a9      	bcs.n	8000900 <__udivmoddi4+0x1f8>
 80009ac:	ebb9 0802 	subs.w	r8, r9, r2
 80009b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009b4:	3801      	subs	r0, #1
 80009b6:	e7a3      	b.n	8000900 <__udivmoddi4+0x1f8>
 80009b8:	4646      	mov	r6, r8
 80009ba:	e7ea      	b.n	8000992 <__udivmoddi4+0x28a>
 80009bc:	4620      	mov	r0, r4
 80009be:	e794      	b.n	80008ea <__udivmoddi4+0x1e2>
 80009c0:	4640      	mov	r0, r8
 80009c2:	e7d1      	b.n	8000968 <__udivmoddi4+0x260>
 80009c4:	46d0      	mov	r8, sl
 80009c6:	e77b      	b.n	80008c0 <__udivmoddi4+0x1b8>
 80009c8:	3b02      	subs	r3, #2
 80009ca:	4461      	add	r1, ip
 80009cc:	e732      	b.n	8000834 <__udivmoddi4+0x12c>
 80009ce:	4630      	mov	r0, r6
 80009d0:	e709      	b.n	80007e6 <__udivmoddi4+0xde>
 80009d2:	4464      	add	r4, ip
 80009d4:	3802      	subs	r0, #2
 80009d6:	e742      	b.n	800085e <__udivmoddi4+0x156>

080009d8 <__aeabi_idiv0>:
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009e2:	463b      	mov	r3, r7
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009ee:	4b28      	ldr	r3, [pc, #160]	; (8000a90 <MX_ADC1_Init+0xb4>)
 80009f0:	4a28      	ldr	r2, [pc, #160]	; (8000a94 <MX_ADC1_Init+0xb8>)
 80009f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009f4:	4b26      	ldr	r3, [pc, #152]	; (8000a90 <MX_ADC1_Init+0xb4>)
 80009f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009fc:	4b24      	ldr	r3, [pc, #144]	; (8000a90 <MX_ADC1_Init+0xb4>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a02:	4b23      	ldr	r3, [pc, #140]	; (8000a90 <MX_ADC1_Init+0xb4>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a08:	4b21      	ldr	r3, [pc, #132]	; (8000a90 <MX_ADC1_Init+0xb4>)
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a0e:	4b20      	ldr	r3, [pc, #128]	; (8000a90 <MX_ADC1_Init+0xb4>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a16:	4b1e      	ldr	r3, [pc, #120]	; (8000a90 <MX_ADC1_Init+0xb4>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a1c:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <MX_ADC1_Init+0xb4>)
 8000a1e:	4a1e      	ldr	r2, [pc, #120]	; (8000a98 <MX_ADC1_Init+0xbc>)
 8000a20:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a22:	4b1b      	ldr	r3, [pc, #108]	; (8000a90 <MX_ADC1_Init+0xb4>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000a28:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <MX_ADC1_Init+0xb4>)
 8000a2a:	2202      	movs	r2, #2
 8000a2c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a2e:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <MX_ADC1_Init+0xb4>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a36:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <MX_ADC1_Init+0xb4>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a3c:	4814      	ldr	r0, [pc, #80]	; (8000a90 <MX_ADC1_Init+0xb4>)
 8000a3e:	f007 fd97 	bl	8008570 <HAL_ADC_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a48:	f001 fbfc 	bl	8002244 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a50:	2301      	movs	r3, #1
 8000a52:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000a54:	2307      	movs	r3, #7
 8000a56:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a58:	463b      	mov	r3, r7
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	480c      	ldr	r0, [pc, #48]	; (8000a90 <MX_ADC1_Init+0xb4>)
 8000a5e:	f007 fee3 	bl	8008828 <HAL_ADC_ConfigChannel>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a68:	f001 fbec 	bl	8002244 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a70:	2302      	movs	r3, #2
 8000a72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a74:	463b      	mov	r3, r7
 8000a76:	4619      	mov	r1, r3
 8000a78:	4805      	ldr	r0, [pc, #20]	; (8000a90 <MX_ADC1_Init+0xb4>)
 8000a7a:	f007 fed5 	bl	8008828 <HAL_ADC_ConfigChannel>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000a84:	f001 fbde 	bl	8002244 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a88:	bf00      	nop
 8000a8a:	3710      	adds	r7, #16
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	2000030c 	.word	0x2000030c
 8000a94:	40012000 	.word	0x40012000
 8000a98:	0f000001 	.word	0x0f000001

08000a9c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000aa2:	463b      	mov	r3, r7
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000aae:	4b28      	ldr	r3, [pc, #160]	; (8000b50 <MX_ADC2_Init+0xb4>)
 8000ab0:	4a28      	ldr	r2, [pc, #160]	; (8000b54 <MX_ADC2_Init+0xb8>)
 8000ab2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ab4:	4b26      	ldr	r3, [pc, #152]	; (8000b50 <MX_ADC2_Init+0xb4>)
 8000ab6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000aba:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000abc:	4b24      	ldr	r3, [pc, #144]	; (8000b50 <MX_ADC2_Init+0xb4>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ac2:	4b23      	ldr	r3, [pc, #140]	; (8000b50 <MX_ADC2_Init+0xb4>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000ac8:	4b21      	ldr	r3, [pc, #132]	; (8000b50 <MX_ADC2_Init+0xb4>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ace:	4b20      	ldr	r3, [pc, #128]	; (8000b50 <MX_ADC2_Init+0xb4>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ad6:	4b1e      	ldr	r3, [pc, #120]	; (8000b50 <MX_ADC2_Init+0xb4>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000adc:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <MX_ADC2_Init+0xb4>)
 8000ade:	4a1e      	ldr	r2, [pc, #120]	; (8000b58 <MX_ADC2_Init+0xbc>)
 8000ae0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ae2:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <MX_ADC2_Init+0xb4>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8000ae8:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <MX_ADC2_Init+0xb4>)
 8000aea:	2202      	movs	r2, #2
 8000aec:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000aee:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <MX_ADC2_Init+0xb4>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000af6:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <MX_ADC2_Init+0xb4>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000afc:	4814      	ldr	r0, [pc, #80]	; (8000b50 <MX_ADC2_Init+0xb4>)
 8000afe:	f007 fd37 	bl	8008570 <HAL_ADC_Init>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000b08:	f001 fb9c 	bl	8002244 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b10:	2301      	movs	r3, #1
 8000b12:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000b14:	2307      	movs	r3, #7
 8000b16:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b18:	463b      	mov	r3, r7
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	480c      	ldr	r0, [pc, #48]	; (8000b50 <MX_ADC2_Init+0xb4>)
 8000b1e:	f007 fe83 	bl	8008828 <HAL_ADC_ConfigChannel>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000b28:	f001 fb8c 	bl	8002244 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b30:	2302      	movs	r3, #2
 8000b32:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b34:	463b      	mov	r3, r7
 8000b36:	4619      	mov	r1, r3
 8000b38:	4805      	ldr	r0, [pc, #20]	; (8000b50 <MX_ADC2_Init+0xb4>)
 8000b3a:	f007 fe75 	bl	8008828 <HAL_ADC_ConfigChannel>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000b44:	f001 fb7e 	bl	8002244 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000b48:	bf00      	nop
 8000b4a:	3710      	adds	r7, #16
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000354 	.word	0x20000354
 8000b54:	40012100 	.word	0x40012100
 8000b58:	0f000001 	.word	0x0f000001

08000b5c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b62:	463b      	mov	r3, r7
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000b6e:	4b28      	ldr	r3, [pc, #160]	; (8000c10 <MX_ADC3_Init+0xb4>)
 8000b70:	4a28      	ldr	r2, [pc, #160]	; (8000c14 <MX_ADC3_Init+0xb8>)
 8000b72:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b74:	4b26      	ldr	r3, [pc, #152]	; (8000c10 <MX_ADC3_Init+0xb4>)
 8000b76:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b7a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000b7c:	4b24      	ldr	r3, [pc, #144]	; (8000c10 <MX_ADC3_Init+0xb4>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b82:	4b23      	ldr	r3, [pc, #140]	; (8000c10 <MX_ADC3_Init+0xb4>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000b88:	4b21      	ldr	r3, [pc, #132]	; (8000c10 <MX_ADC3_Init+0xb4>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000b8e:	4b20      	ldr	r3, [pc, #128]	; (8000c10 <MX_ADC3_Init+0xb4>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b96:	4b1e      	ldr	r3, [pc, #120]	; (8000c10 <MX_ADC3_Init+0xb4>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b9c:	4b1c      	ldr	r3, [pc, #112]	; (8000c10 <MX_ADC3_Init+0xb4>)
 8000b9e:	4a1e      	ldr	r2, [pc, #120]	; (8000c18 <MX_ADC3_Init+0xbc>)
 8000ba0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ba2:	4b1b      	ldr	r3, [pc, #108]	; (8000c10 <MX_ADC3_Init+0xb4>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 2;
 8000ba8:	4b19      	ldr	r3, [pc, #100]	; (8000c10 <MX_ADC3_Init+0xb4>)
 8000baa:	2202      	movs	r2, #2
 8000bac:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000bae:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <MX_ADC3_Init+0xb4>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bb6:	4b16      	ldr	r3, [pc, #88]	; (8000c10 <MX_ADC3_Init+0xb4>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000bbc:	4814      	ldr	r0, [pc, #80]	; (8000c10 <MX_ADC3_Init+0xb4>)
 8000bbe:	f007 fcd7 	bl	8008570 <HAL_ADC_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000bc8:	f001 fb3c 	bl	8002244 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000bcc:	2304      	movs	r3, #4
 8000bce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000bd4:	2307      	movs	r3, #7
 8000bd6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000bd8:	463b      	mov	r3, r7
 8000bda:	4619      	mov	r1, r3
 8000bdc:	480c      	ldr	r0, [pc, #48]	; (8000c10 <MX_ADC3_Init+0xb4>)
 8000bde:	f007 fe23 	bl	8008828 <HAL_ADC_ConfigChannel>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000be8:	f001 fb2c 	bl	8002244 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000bec:	2305      	movs	r3, #5
 8000bee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000bf4:	463b      	mov	r3, r7
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4805      	ldr	r0, [pc, #20]	; (8000c10 <MX_ADC3_Init+0xb4>)
 8000bfa:	f007 fe15 	bl	8008828 <HAL_ADC_ConfigChannel>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 8000c04:	f001 fb1e 	bl	8002244 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c08:	bf00      	nop
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	2000039c 	.word	0x2000039c
 8000c14:	40012200 	.word	0x40012200
 8000c18:	0f000001 	.word	0x0f000001

08000c1c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08e      	sub	sp, #56	; 0x38
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a87      	ldr	r2, [pc, #540]	; (8000e58 <HAL_ADC_MspInit+0x23c>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d154      	bne.n	8000ce8 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c3e:	4b87      	ldr	r3, [pc, #540]	; (8000e5c <HAL_ADC_MspInit+0x240>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c42:	4a86      	ldr	r2, [pc, #536]	; (8000e5c <HAL_ADC_MspInit+0x240>)
 8000c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c48:	6453      	str	r3, [r2, #68]	; 0x44
 8000c4a:	4b84      	ldr	r3, [pc, #528]	; (8000e5c <HAL_ADC_MspInit+0x240>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c52:	623b      	str	r3, [r7, #32]
 8000c54:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	4b81      	ldr	r3, [pc, #516]	; (8000e5c <HAL_ADC_MspInit+0x240>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a80      	ldr	r2, [pc, #512]	; (8000e5c <HAL_ADC_MspInit+0x240>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b7e      	ldr	r3, [pc, #504]	; (8000e5c <HAL_ADC_MspInit+0x240>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	61fb      	str	r3, [r7, #28]
 8000c6c:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c6e:	230c      	movs	r3, #12
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c72:	2303      	movs	r3, #3
 8000c74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4877      	ldr	r0, [pc, #476]	; (8000e60 <HAL_ADC_MspInit+0x244>)
 8000c82:	f009 fc57 	bl	800a534 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8000c86:	4b77      	ldr	r3, [pc, #476]	; (8000e64 <HAL_ADC_MspInit+0x248>)
 8000c88:	4a77      	ldr	r2, [pc, #476]	; (8000e68 <HAL_ADC_MspInit+0x24c>)
 8000c8a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c8c:	4b75      	ldr	r3, [pc, #468]	; (8000e64 <HAL_ADC_MspInit+0x248>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c92:	4b74      	ldr	r3, [pc, #464]	; (8000e64 <HAL_ADC_MspInit+0x248>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c98:	4b72      	ldr	r3, [pc, #456]	; (8000e64 <HAL_ADC_MspInit+0x248>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c9e:	4b71      	ldr	r3, [pc, #452]	; (8000e64 <HAL_ADC_MspInit+0x248>)
 8000ca0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ca4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ca6:	4b6f      	ldr	r3, [pc, #444]	; (8000e64 <HAL_ADC_MspInit+0x248>)
 8000ca8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cae:	4b6d      	ldr	r3, [pc, #436]	; (8000e64 <HAL_ADC_MspInit+0x248>)
 8000cb0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cb4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000cb6:	4b6b      	ldr	r3, [pc, #428]	; (8000e64 <HAL_ADC_MspInit+0x248>)
 8000cb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cbc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000cbe:	4b69      	ldr	r3, [pc, #420]	; (8000e64 <HAL_ADC_MspInit+0x248>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cc4:	4b67      	ldr	r3, [pc, #412]	; (8000e64 <HAL_ADC_MspInit+0x248>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cca:	4866      	ldr	r0, [pc, #408]	; (8000e64 <HAL_ADC_MspInit+0x248>)
 8000ccc:	f009 f81c 	bl	8009d08 <HAL_DMA_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000cd6:	f001 fab5 	bl	8002244 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a61      	ldr	r2, [pc, #388]	; (8000e64 <HAL_ADC_MspInit+0x248>)
 8000cde:	639a      	str	r2, [r3, #56]	; 0x38
 8000ce0:	4a60      	ldr	r2, [pc, #384]	; (8000e64 <HAL_ADC_MspInit+0x248>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000ce6:	e0b3      	b.n	8000e50 <HAL_ADC_MspInit+0x234>
  else if(adcHandle->Instance==ADC2)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a5f      	ldr	r2, [pc, #380]	; (8000e6c <HAL_ADC_MspInit+0x250>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d155      	bne.n	8000d9e <HAL_ADC_MspInit+0x182>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000cf2:	4b5a      	ldr	r3, [pc, #360]	; (8000e5c <HAL_ADC_MspInit+0x240>)
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf6:	4a59      	ldr	r2, [pc, #356]	; (8000e5c <HAL_ADC_MspInit+0x240>)
 8000cf8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cfe:	4b57      	ldr	r3, [pc, #348]	; (8000e5c <HAL_ADC_MspInit+0x240>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d06:	61bb      	str	r3, [r7, #24]
 8000d08:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0a:	4b54      	ldr	r3, [pc, #336]	; (8000e5c <HAL_ADC_MspInit+0x240>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a53      	ldr	r2, [pc, #332]	; (8000e5c <HAL_ADC_MspInit+0x240>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b51      	ldr	r3, [pc, #324]	; (8000e5c <HAL_ADC_MspInit+0x240>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	617b      	str	r3, [r7, #20]
 8000d20:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d22:	2303      	movs	r3, #3
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d26:	2303      	movs	r3, #3
 8000d28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d32:	4619      	mov	r1, r3
 8000d34:	484a      	ldr	r0, [pc, #296]	; (8000e60 <HAL_ADC_MspInit+0x244>)
 8000d36:	f009 fbfd 	bl	800a534 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8000d3a:	4b4d      	ldr	r3, [pc, #308]	; (8000e70 <HAL_ADC_MspInit+0x254>)
 8000d3c:	4a4d      	ldr	r2, [pc, #308]	; (8000e74 <HAL_ADC_MspInit+0x258>)
 8000d3e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8000d40:	4b4b      	ldr	r3, [pc, #300]	; (8000e70 <HAL_ADC_MspInit+0x254>)
 8000d42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000d46:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d48:	4b49      	ldr	r3, [pc, #292]	; (8000e70 <HAL_ADC_MspInit+0x254>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d4e:	4b48      	ldr	r3, [pc, #288]	; (8000e70 <HAL_ADC_MspInit+0x254>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000d54:	4b46      	ldr	r3, [pc, #280]	; (8000e70 <HAL_ADC_MspInit+0x254>)
 8000d56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d5a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d5c:	4b44      	ldr	r3, [pc, #272]	; (8000e70 <HAL_ADC_MspInit+0x254>)
 8000d5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d62:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d64:	4b42      	ldr	r3, [pc, #264]	; (8000e70 <HAL_ADC_MspInit+0x254>)
 8000d66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d6a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000d6c:	4b40      	ldr	r3, [pc, #256]	; (8000e70 <HAL_ADC_MspInit+0x254>)
 8000d6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d72:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000d74:	4b3e      	ldr	r3, [pc, #248]	; (8000e70 <HAL_ADC_MspInit+0x254>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d7a:	4b3d      	ldr	r3, [pc, #244]	; (8000e70 <HAL_ADC_MspInit+0x254>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000d80:	483b      	ldr	r0, [pc, #236]	; (8000e70 <HAL_ADC_MspInit+0x254>)
 8000d82:	f008 ffc1 	bl	8009d08 <HAL_DMA_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <HAL_ADC_MspInit+0x174>
      Error_Handler();
 8000d8c:	f001 fa5a 	bl	8002244 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a37      	ldr	r2, [pc, #220]	; (8000e70 <HAL_ADC_MspInit+0x254>)
 8000d94:	639a      	str	r2, [r3, #56]	; 0x38
 8000d96:	4a36      	ldr	r2, [pc, #216]	; (8000e70 <HAL_ADC_MspInit+0x254>)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000d9c:	e058      	b.n	8000e50 <HAL_ADC_MspInit+0x234>
  else if(adcHandle->Instance==ADC3)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a35      	ldr	r2, [pc, #212]	; (8000e78 <HAL_ADC_MspInit+0x25c>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d153      	bne.n	8000e50 <HAL_ADC_MspInit+0x234>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000da8:	4b2c      	ldr	r3, [pc, #176]	; (8000e5c <HAL_ADC_MspInit+0x240>)
 8000daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dac:	4a2b      	ldr	r2, [pc, #172]	; (8000e5c <HAL_ADC_MspInit+0x240>)
 8000dae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000db2:	6453      	str	r3, [r2, #68]	; 0x44
 8000db4:	4b29      	ldr	r3, [pc, #164]	; (8000e5c <HAL_ADC_MspInit+0x240>)
 8000db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dbc:	613b      	str	r3, [r7, #16]
 8000dbe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dc0:	4b26      	ldr	r3, [pc, #152]	; (8000e5c <HAL_ADC_MspInit+0x240>)
 8000dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc4:	4a25      	ldr	r2, [pc, #148]	; (8000e5c <HAL_ADC_MspInit+0x240>)
 8000dc6:	f043 0320 	orr.w	r3, r3, #32
 8000dca:	6313      	str	r3, [r2, #48]	; 0x30
 8000dcc:	4b23      	ldr	r3, [pc, #140]	; (8000e5c <HAL_ADC_MspInit+0x240>)
 8000dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd0:	f003 0320 	and.w	r3, r3, #32
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dd8:	23c0      	movs	r3, #192	; 0xc0
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000de4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de8:	4619      	mov	r1, r3
 8000dea:	4824      	ldr	r0, [pc, #144]	; (8000e7c <HAL_ADC_MspInit+0x260>)
 8000dec:	f009 fba2 	bl	800a534 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8000df0:	4b23      	ldr	r3, [pc, #140]	; (8000e80 <HAL_ADC_MspInit+0x264>)
 8000df2:	4a24      	ldr	r2, [pc, #144]	; (8000e84 <HAL_ADC_MspInit+0x268>)
 8000df4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8000df6:	4b22      	ldr	r3, [pc, #136]	; (8000e80 <HAL_ADC_MspInit+0x264>)
 8000df8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000dfc:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dfe:	4b20      	ldr	r3, [pc, #128]	; (8000e80 <HAL_ADC_MspInit+0x264>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e04:	4b1e      	ldr	r3, [pc, #120]	; (8000e80 <HAL_ADC_MspInit+0x264>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000e0a:	4b1d      	ldr	r3, [pc, #116]	; (8000e80 <HAL_ADC_MspInit+0x264>)
 8000e0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e10:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e12:	4b1b      	ldr	r3, [pc, #108]	; (8000e80 <HAL_ADC_MspInit+0x264>)
 8000e14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e18:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e1a:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <HAL_ADC_MspInit+0x264>)
 8000e1c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e20:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8000e22:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <HAL_ADC_MspInit+0x264>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000e28:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <HAL_ADC_MspInit+0x264>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e2e:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <HAL_ADC_MspInit+0x264>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000e34:	4812      	ldr	r0, [pc, #72]	; (8000e80 <HAL_ADC_MspInit+0x264>)
 8000e36:	f008 ff67 	bl	8009d08 <HAL_DMA_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <HAL_ADC_MspInit+0x228>
      Error_Handler();
 8000e40:	f001 fa00 	bl	8002244 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a0e      	ldr	r2, [pc, #56]	; (8000e80 <HAL_ADC_MspInit+0x264>)
 8000e48:	639a      	str	r2, [r3, #56]	; 0x38
 8000e4a:	4a0d      	ldr	r2, [pc, #52]	; (8000e80 <HAL_ADC_MspInit+0x264>)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000e50:	bf00      	nop
 8000e52:	3738      	adds	r7, #56	; 0x38
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40012000 	.word	0x40012000
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40020000 	.word	0x40020000
 8000e64:	200003e4 	.word	0x200003e4
 8000e68:	40026470 	.word	0x40026470
 8000e6c:	40012100 	.word	0x40012100
 8000e70:	20000444 	.word	0x20000444
 8000e74:	40026440 	.word	0x40026440
 8000e78:	40012200 	.word	0x40012200
 8000e7c:	40021400 	.word	0x40021400
 8000e80:	200004a4 	.word	0x200004a4
 8000e84:	40026428 	.word	0x40026428

08000e88 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08a      	sub	sp, #40	; 0x28
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000e8e:	4b26      	ldr	r3, [pc, #152]	; (8000f28 <MX_CAN1_Init+0xa0>)
 8000e90:	4a26      	ldr	r2, [pc, #152]	; (8000f2c <MX_CAN1_Init+0xa4>)
 8000e92:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8000e94:	4b24      	ldr	r3, [pc, #144]	; (8000f28 <MX_CAN1_Init+0xa0>)
 8000e96:	2209      	movs	r2, #9
 8000e98:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000e9a:	4b23      	ldr	r3, [pc, #140]	; (8000f28 <MX_CAN1_Init+0xa0>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000ea0:	4b21      	ldr	r3, [pc, #132]	; (8000f28 <MX_CAN1_Init+0xa0>)
 8000ea2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000ea6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000ea8:	4b1f      	ldr	r3, [pc, #124]	; (8000f28 <MX_CAN1_Init+0xa0>)
 8000eaa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000eae:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000eb0:	4b1d      	ldr	r3, [pc, #116]	; (8000f28 <MX_CAN1_Init+0xa0>)
 8000eb2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000eb6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000eb8:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <MX_CAN1_Init+0xa0>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <MX_CAN1_Init+0xa0>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000ec4:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <MX_CAN1_Init+0xa0>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000eca:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <MX_CAN1_Init+0xa0>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000ed0:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <MX_CAN1_Init+0xa0>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ed6:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <MX_CAN1_Init+0xa0>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000edc:	4812      	ldr	r0, [pc, #72]	; (8000f28 <MX_CAN1_Init+0xa0>)
 8000ede:	f007 ff75 	bl	8008dcc <HAL_CAN_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_CAN1_Init+0x64>
  {
    Error_Handler();
 8000ee8:	f001 f9ac 	bl	8002244 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;
    canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000eec:	2301      	movs	r3, #1
 8000eee:	623b      	str	r3, [r7, #32]
    canfilterconfig.FilterBank = 0;  // which filter bank to use from the assigned ones
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]
    canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	613b      	str	r3, [r7, #16]
    canfilterconfig.FilterIdHigh = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	603b      	str	r3, [r7, #0]
    canfilterconfig.FilterIdLow = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	607b      	str	r3, [r7, #4]
    canfilterconfig.FilterMaskIdHigh = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	60bb      	str	r3, [r7, #8]
    canfilterconfig.FilterMaskIdLow = 0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	60fb      	str	r3, [r7, #12]
    canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61bb      	str	r3, [r7, #24]
    canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	61fb      	str	r3, [r7, #28]
    canfilterconfig.SlaveStartFilterBank = 1;
 8000f10:	2301      	movs	r3, #1
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000f14:	463b      	mov	r3, r7
 8000f16:	4619      	mov	r1, r3
 8000f18:	4803      	ldr	r0, [pc, #12]	; (8000f28 <MX_CAN1_Init+0xa0>)
 8000f1a:	f008 f853 	bl	8008fc4 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8000f1e:	bf00      	nop
 8000f20:	3728      	adds	r7, #40	; 0x28
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000504 	.word	0x20000504
 8000f2c:	40006400 	.word	0x40006400

08000f30 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08a      	sub	sp, #40	; 0x28
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000f36:	4b26      	ldr	r3, [pc, #152]	; (8000fd0 <MX_CAN2_Init+0xa0>)
 8000f38:	4a26      	ldr	r2, [pc, #152]	; (8000fd4 <MX_CAN2_Init+0xa4>)
 8000f3a:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 9;
 8000f3c:	4b24      	ldr	r3, [pc, #144]	; (8000fd0 <MX_CAN2_Init+0xa0>)
 8000f3e:	2209      	movs	r2, #9
 8000f40:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000f42:	4b23      	ldr	r3, [pc, #140]	; (8000fd0 <MX_CAN2_Init+0xa0>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000f48:	4b21      	ldr	r3, [pc, #132]	; (8000fd0 <MX_CAN2_Init+0xa0>)
 8000f4a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f4e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000f50:	4b1f      	ldr	r3, [pc, #124]	; (8000fd0 <MX_CAN2_Init+0xa0>)
 8000f52:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f56:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000f58:	4b1d      	ldr	r3, [pc, #116]	; (8000fd0 <MX_CAN2_Init+0xa0>)
 8000f5a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000f5e:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000f60:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <MX_CAN2_Init+0xa0>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000f66:	4b1a      	ldr	r3, [pc, #104]	; (8000fd0 <MX_CAN2_Init+0xa0>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000f6c:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <MX_CAN2_Init+0xa0>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 8000f72:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <MX_CAN2_Init+0xa0>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000f78:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <MX_CAN2_Init+0xa0>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000f7e:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <MX_CAN2_Init+0xa0>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000f84:	4812      	ldr	r0, [pc, #72]	; (8000fd0 <MX_CAN2_Init+0xa0>)
 8000f86:	f007 ff21 	bl	8008dcc <HAL_CAN_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_CAN2_Init+0x64>
  {
    Error_Handler();
 8000f90:	f001 f958 	bl	8002244 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  CAN_FilterTypeDef canfilterconfig;
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000f94:	2301      	movs	r3, #1
 8000f96:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 8000f98:	2312      	movs	r3, #18
 8000f9a:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 14;
 8000fb8:	230e      	movs	r3, #14
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig);
 8000fbc:	463b      	mov	r3, r7
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4803      	ldr	r0, [pc, #12]	; (8000fd0 <MX_CAN2_Init+0xa0>)
 8000fc2:	f007 ffff 	bl	8008fc4 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN2_Init 2 */

}
 8000fc6:	bf00      	nop
 8000fc8:	3728      	adds	r7, #40	; 0x28
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	2000052c 	.word	0x2000052c
 8000fd4:	40006800 	.word	0x40006800

08000fd8 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08c      	sub	sp, #48	; 0x30
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 031c 	add.w	r3, r7, #28
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a55      	ldr	r2, [pc, #340]	; (800114c <HAL_CAN_MspInit+0x174>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d149      	bne.n	800108e <HAL_CAN_MspInit+0xb6>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000ffa:	4b55      	ldr	r3, [pc, #340]	; (8001150 <HAL_CAN_MspInit+0x178>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	3301      	adds	r3, #1
 8001000:	4a53      	ldr	r2, [pc, #332]	; (8001150 <HAL_CAN_MspInit+0x178>)
 8001002:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001004:	4b52      	ldr	r3, [pc, #328]	; (8001150 <HAL_CAN_MspInit+0x178>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d10b      	bne.n	8001024 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800100c:	4b51      	ldr	r3, [pc, #324]	; (8001154 <HAL_CAN_MspInit+0x17c>)
 800100e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001010:	4a50      	ldr	r2, [pc, #320]	; (8001154 <HAL_CAN_MspInit+0x17c>)
 8001012:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001016:	6413      	str	r3, [r2, #64]	; 0x40
 8001018:	4b4e      	ldr	r3, [pc, #312]	; (8001154 <HAL_CAN_MspInit+0x17c>)
 800101a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001020:	61bb      	str	r3, [r7, #24]
 8001022:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001024:	4b4b      	ldr	r3, [pc, #300]	; (8001154 <HAL_CAN_MspInit+0x17c>)
 8001026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001028:	4a4a      	ldr	r2, [pc, #296]	; (8001154 <HAL_CAN_MspInit+0x17c>)
 800102a:	f043 0308 	orr.w	r3, r3, #8
 800102e:	6313      	str	r3, [r2, #48]	; 0x30
 8001030:	4b48      	ldr	r3, [pc, #288]	; (8001154 <HAL_CAN_MspInit+0x17c>)
 8001032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001034:	f003 0308 	and.w	r3, r3, #8
 8001038:	617b      	str	r3, [r7, #20]
 800103a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800103c:	2303      	movs	r3, #3
 800103e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001040:	2302      	movs	r3, #2
 8001042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001048:	2303      	movs	r3, #3
 800104a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800104c:	2309      	movs	r3, #9
 800104e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001050:	f107 031c 	add.w	r3, r7, #28
 8001054:	4619      	mov	r1, r3
 8001056:	4840      	ldr	r0, [pc, #256]	; (8001158 <HAL_CAN_MspInit+0x180>)
 8001058:	f009 fa6c 	bl	800a534 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 800105c:	2200      	movs	r2, #0
 800105e:	2100      	movs	r1, #0
 8001060:	2013      	movs	r0, #19
 8001062:	f008 fe0c 	bl	8009c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001066:	2013      	movs	r0, #19
 8001068:	f008 fe25 	bl	8009cb6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800106c:	2200      	movs	r2, #0
 800106e:	2100      	movs	r1, #0
 8001070:	2014      	movs	r0, #20
 8001072:	f008 fe04 	bl	8009c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001076:	2014      	movs	r0, #20
 8001078:	f008 fe1d 	bl	8009cb6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 800107c:	2200      	movs	r2, #0
 800107e:	2100      	movs	r1, #0
 8001080:	2015      	movs	r0, #21
 8001082:	f008 fdfc 	bl	8009c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001086:	2015      	movs	r0, #21
 8001088:	f008 fe15 	bl	8009cb6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 800108c:	e05a      	b.n	8001144 <HAL_CAN_MspInit+0x16c>
  else if(canHandle->Instance==CAN2)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a32      	ldr	r2, [pc, #200]	; (800115c <HAL_CAN_MspInit+0x184>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d155      	bne.n	8001144 <HAL_CAN_MspInit+0x16c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001098:	4b2e      	ldr	r3, [pc, #184]	; (8001154 <HAL_CAN_MspInit+0x17c>)
 800109a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109c:	4a2d      	ldr	r2, [pc, #180]	; (8001154 <HAL_CAN_MspInit+0x17c>)
 800109e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010a2:	6413      	str	r3, [r2, #64]	; 0x40
 80010a4:	4b2b      	ldr	r3, [pc, #172]	; (8001154 <HAL_CAN_MspInit+0x17c>)
 80010a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010ac:	613b      	str	r3, [r7, #16]
 80010ae:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80010b0:	4b27      	ldr	r3, [pc, #156]	; (8001150 <HAL_CAN_MspInit+0x178>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	3301      	adds	r3, #1
 80010b6:	4a26      	ldr	r2, [pc, #152]	; (8001150 <HAL_CAN_MspInit+0x178>)
 80010b8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80010ba:	4b25      	ldr	r3, [pc, #148]	; (8001150 <HAL_CAN_MspInit+0x178>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d10b      	bne.n	80010da <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80010c2:	4b24      	ldr	r3, [pc, #144]	; (8001154 <HAL_CAN_MspInit+0x17c>)
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	4a23      	ldr	r2, [pc, #140]	; (8001154 <HAL_CAN_MspInit+0x17c>)
 80010c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010cc:	6413      	str	r3, [r2, #64]	; 0x40
 80010ce:	4b21      	ldr	r3, [pc, #132]	; (8001154 <HAL_CAN_MspInit+0x17c>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010da:	4b1e      	ldr	r3, [pc, #120]	; (8001154 <HAL_CAN_MspInit+0x17c>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a1d      	ldr	r2, [pc, #116]	; (8001154 <HAL_CAN_MspInit+0x17c>)
 80010e0:	f043 0302 	orr.w	r3, r3, #2
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <HAL_CAN_MspInit+0x17c>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80010f2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80010f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f8:	2302      	movs	r3, #2
 80010fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001100:	2303      	movs	r3, #3
 8001102:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001104:	2309      	movs	r3, #9
 8001106:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001108:	f107 031c 	add.w	r3, r7, #28
 800110c:	4619      	mov	r1, r3
 800110e:	4814      	ldr	r0, [pc, #80]	; (8001160 <HAL_CAN_MspInit+0x188>)
 8001110:	f009 fa10 	bl	800a534 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 8001114:	2200      	movs	r2, #0
 8001116:	2100      	movs	r1, #0
 8001118:	203f      	movs	r0, #63	; 0x3f
 800111a:	f008 fdb0 	bl	8009c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 800111e:	203f      	movs	r0, #63	; 0x3f
 8001120:	f008 fdc9 	bl	8009cb6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8001124:	2200      	movs	r2, #0
 8001126:	2100      	movs	r1, #0
 8001128:	2040      	movs	r0, #64	; 0x40
 800112a:	f008 fda8 	bl	8009c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800112e:	2040      	movs	r0, #64	; 0x40
 8001130:	f008 fdc1 	bl	8009cb6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8001134:	2200      	movs	r2, #0
 8001136:	2100      	movs	r1, #0
 8001138:	2041      	movs	r0, #65	; 0x41
 800113a:	f008 fda0 	bl	8009c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800113e:	2041      	movs	r0, #65	; 0x41
 8001140:	f008 fdb9 	bl	8009cb6 <HAL_NVIC_EnableIRQ>
}
 8001144:	bf00      	nop
 8001146:	3730      	adds	r7, #48	; 0x30
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40006400 	.word	0x40006400
 8001150:	20000554 	.word	0x20000554
 8001154:	40023800 	.word	0x40023800
 8001158:	40020c00 	.word	0x40020c00
 800115c:	40006800 	.word	0x40006800
 8001160:	40020400 	.word	0x40020400

08001164 <HAL_CAN_RxFifo1MsgPendingCallback>:
  /* USER CODE END CAN2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001164:	b590      	push	{r4, r7, lr}
 8001166:	b091      	sub	sp, #68	; 0x44
 8001168:	af04      	add	r7, sp, #16
 800116a:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 800116c:	f107 030c 	add.w	r3, r7, #12
 8001170:	f107 0214 	add.w	r2, r7, #20
 8001174:	2101      	movs	r1, #1
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f008 f924 	bl	80093c4 <HAL_CAN_GetRxMessage>
	ComputeEcumasterFrame(RxHeader, RxData);
 800117c:	f107 030c 	add.w	r3, r7, #12
 8001180:	9303      	str	r3, [sp, #12]
 8001182:	466c      	mov	r4, sp
 8001184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001188:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800118c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001196:	f000 f823 	bl	80011e0 <ComputeEcumasterFrame>
}
 800119a:	bf00      	nop
 800119c:	3734      	adds	r7, #52	; 0x34
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd90      	pop	{r4, r7, pc}

080011a2 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80011a2:	b590      	push	{r4, r7, lr}
 80011a4:	b091      	sub	sp, #68	; 0x44
 80011a6:	af04      	add	r7, sp, #16
 80011a8:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80011aa:	f107 030c 	add.w	r3, r7, #12
 80011ae:	f107 0214 	add.w	r2, r7, #20
 80011b2:	2100      	movs	r1, #0
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f008 f905 	bl	80093c4 <HAL_CAN_GetRxMessage>
	ComputeEcumasterFrame(RxHeader, RxData);
 80011ba:	f107 030c 	add.w	r3, r7, #12
 80011be:	9303      	str	r3, [sp, #12]
 80011c0:	466c      	mov	r4, sp
 80011c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80011ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80011ce:	f107 0314 	add.w	r3, r7, #20
 80011d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011d4:	f000 f804 	bl	80011e0 <ComputeEcumasterFrame>
}
 80011d8:	bf00      	nop
 80011da:	3734      	adds	r7, #52	; 0x34
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd90      	pop	{r4, r7, pc}

080011e0 <ComputeEcumasterFrame>:
extern FIL* EcuFile;
void ComputeEcumasterFrame(CAN_RxHeaderTypeDef RxHeader, uint8_t *RxData) {
 80011e0:	b084      	sub	sp, #16
 80011e2:	b580      	push	{r7, lr}
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	f107 0c08 	add.w	ip, r7, #8
 80011ea:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (RxHeader.StdId >= Frame1 && RxHeader.StdId <= Frame7) {
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80011f4:	d310      	bcc.n	8001218 <ComputeEcumasterFrame+0x38>
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	f240 6206 	movw	r2, #1542	; 0x606
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d80b      	bhi.n	8001218 <ComputeEcumasterFrame+0x38>
		_dataHandler[ECU].dataReady = 1;
 8001200:	4a75      	ldr	r2, [pc, #468]	; (80013d8 <ComputeEcumasterFrame+0x1f8>)
 8001202:	f892 30c4 	ldrb.w	r3, [r2, #196]	; 0xc4
 8001206:	f043 0301 	orr.w	r3, r3, #1
 800120a:	f882 30c4 	strb.w	r3, [r2, #196]	; 0xc4
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	2108      	movs	r1, #8
 8001212:	4872      	ldr	r0, [pc, #456]	; (80013dc <ComputeEcumasterFrame+0x1fc>)
 8001214:	f009 fc46 	bl	800aaa4 <HAL_GPIO_WritePin>
	}
	if (RxHeader.StdId == Frame1) {
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800121e:	d121      	bne.n	8001264 <ComputeEcumasterFrame+0x84>
		ecuData.rpm = LTBE(&RxData[0]);
 8001220:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001222:	f000 f8df 	bl	80013e4 <LTBE>
 8001226:	4603      	mov	r3, r0
 8001228:	b29a      	uxth	r2, r3
 800122a:	4b6d      	ldr	r3, [pc, #436]	; (80013e0 <ComputeEcumasterFrame+0x200>)
 800122c:	801a      	strh	r2, [r3, #0]
		ecuData.tps = RxData[2];
 800122e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001230:	789a      	ldrb	r2, [r3, #2]
 8001232:	4b6b      	ldr	r3, [pc, #428]	; (80013e0 <ComputeEcumasterFrame+0x200>)
 8001234:	709a      	strb	r2, [r3, #2]
		ecuData.iat = RxData[3];
 8001236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001238:	78da      	ldrb	r2, [r3, #3]
 800123a:	4b69      	ldr	r3, [pc, #420]	; (80013e0 <ComputeEcumasterFrame+0x200>)
 800123c:	70da      	strb	r2, [r3, #3]
		ecuData.map = LTBE(&RxData[4]);
 800123e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001240:	3304      	adds	r3, #4
 8001242:	4618      	mov	r0, r3
 8001244:	f000 f8ce 	bl	80013e4 <LTBE>
 8001248:	4603      	mov	r3, r0
 800124a:	b29a      	uxth	r2, r3
 800124c:	4b64      	ldr	r3, [pc, #400]	; (80013e0 <ComputeEcumasterFrame+0x200>)
 800124e:	809a      	strh	r2, [r3, #4]
		ecuData.injPW = LTBE(&RxData[6]);
 8001250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001252:	3306      	adds	r3, #6
 8001254:	4618      	mov	r0, r3
 8001256:	f000 f8c5 	bl	80013e4 <LTBE>
 800125a:	4603      	mov	r3, r0
 800125c:	b29a      	uxth	r2, r3
 800125e:	4b60      	ldr	r3, [pc, #384]	; (80013e0 <ComputeEcumasterFrame+0x200>)
 8001260:	80da      	strh	r2, [r3, #6]
		ecuData.TCTorqueReduction = RxData[6];
		ecuData.PitLimitTorqueReduction = RxData[7];
	}else if (RxHeader.StdId == 0x1FE) {
		ecuData.BurnedFuel = (float)(LTBE(RxData))/8192.0;
	}
}
 8001262:	e0ae      	b.n	80013c2 <ComputeEcumasterFrame+0x1e2>
	} else if (RxHeader.StdId == Frame3) {
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	f240 6202 	movw	r2, #1538	; 0x602
 800126a:	4293      	cmp	r3, r2
 800126c:	d118      	bne.n	80012a0 <ComputeEcumasterFrame+0xc0>
		ecuData.speed = LTBE(&RxData[0]);
 800126e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001270:	f000 f8b8 	bl	80013e4 <LTBE>
 8001274:	4603      	mov	r3, r0
 8001276:	b29a      	uxth	r2, r3
 8001278:	4b59      	ldr	r3, [pc, #356]	; (80013e0 <ComputeEcumasterFrame+0x200>)
 800127a:	811a      	strh	r2, [r3, #8]
		ecuData.oilTemp = RxData[3];
 800127c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127e:	78da      	ldrb	r2, [r3, #3]
 8001280:	4b57      	ldr	r3, [pc, #348]	; (80013e0 <ComputeEcumasterFrame+0x200>)
 8001282:	72da      	strb	r2, [r3, #11]
		ecuData.oilPress = RxData[4];
 8001284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001286:	791a      	ldrb	r2, [r3, #4]
 8001288:	4b55      	ldr	r3, [pc, #340]	; (80013e0 <ComputeEcumasterFrame+0x200>)
 800128a:	731a      	strb	r2, [r3, #12]
		ecuData.clt = LTBE(&RxData[6]);
 800128c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128e:	3306      	adds	r3, #6
 8001290:	4618      	mov	r0, r3
 8001292:	f000 f8a7 	bl	80013e4 <LTBE>
 8001296:	4603      	mov	r3, r0
 8001298:	b21a      	sxth	r2, r3
 800129a:	4b51      	ldr	r3, [pc, #324]	; (80013e0 <ComputeEcumasterFrame+0x200>)
 800129c:	81da      	strh	r2, [r3, #14]
}
 800129e:	e090      	b.n	80013c2 <ComputeEcumasterFrame+0x1e2>
	} else if (RxHeader.StdId == Frame4) {
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	f240 6203 	movw	r2, #1539	; 0x603
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d123      	bne.n	80012f2 <ComputeEcumasterFrame+0x112>
		ecuData.ignAngle = RxData[0];
 80012aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	b25a      	sxtb	r2, r3
 80012b0:	4b4b      	ldr	r3, [pc, #300]	; (80013e0 <ComputeEcumasterFrame+0x200>)
 80012b2:	741a      	strb	r2, [r3, #16]
		ecuData.ignDwell = RxData[1];
 80012b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b6:	785a      	ldrb	r2, [r3, #1]
 80012b8:	4b49      	ldr	r3, [pc, #292]	; (80013e0 <ComputeEcumasterFrame+0x200>)
 80012ba:	745a      	strb	r2, [r3, #17]
		ecuData.lambda = RxData[2];
 80012bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012be:	789a      	ldrb	r2, [r3, #2]
 80012c0:	4b47      	ldr	r3, [pc, #284]	; (80013e0 <ComputeEcumasterFrame+0x200>)
 80012c2:	749a      	strb	r2, [r3, #18]
		ecuData.lambdaCorrection = RxData[3];
 80012c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c6:	78da      	ldrb	r2, [r3, #3]
 80012c8:	4b45      	ldr	r3, [pc, #276]	; (80013e0 <ComputeEcumasterFrame+0x200>)
 80012ca:	74da      	strb	r2, [r3, #19]
		ecuData.egt1 = LTBE(&RxData[4]);
 80012cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ce:	3304      	adds	r3, #4
 80012d0:	4618      	mov	r0, r3
 80012d2:	f000 f887 	bl	80013e4 <LTBE>
 80012d6:	4603      	mov	r3, r0
 80012d8:	b29a      	uxth	r2, r3
 80012da:	4b41      	ldr	r3, [pc, #260]	; (80013e0 <ComputeEcumasterFrame+0x200>)
 80012dc:	829a      	strh	r2, [r3, #20]
		ecuData.egt2 = LTBE(&RxData[6]);
 80012de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e0:	3306      	adds	r3, #6
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 f87e 	bl	80013e4 <LTBE>
 80012e8:	4603      	mov	r3, r0
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	4b3c      	ldr	r3, [pc, #240]	; (80013e0 <ComputeEcumasterFrame+0x200>)
 80012ee:	82da      	strh	r2, [r3, #22]
}
 80012f0:	e067      	b.n	80013c2 <ComputeEcumasterFrame+0x1e2>
	} else if (RxHeader.StdId == Frame5) {
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	f240 6204 	movw	r2, #1540	; 0x604
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d120      	bne.n	800133e <ComputeEcumasterFrame+0x15e>
		ecuData.gear = RxData[0];
 80012fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fe:	781a      	ldrb	r2, [r3, #0]
 8001300:	4b37      	ldr	r3, [pc, #220]	; (80013e0 <ComputeEcumasterFrame+0x200>)
 8001302:	761a      	strb	r2, [r3, #24]
		ecuData.ecuTemp = RxData[1];
 8001304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001306:	3301      	adds	r3, #1
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	b25a      	sxtb	r2, r3
 800130c:	4b34      	ldr	r3, [pc, #208]	; (80013e0 <ComputeEcumasterFrame+0x200>)
 800130e:	765a      	strb	r2, [r3, #25]
		ecuData.batt = LTBE(&RxData[2]);
 8001310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001312:	3302      	adds	r3, #2
 8001314:	4618      	mov	r0, r3
 8001316:	f000 f865 	bl	80013e4 <LTBE>
 800131a:	4603      	mov	r3, r0
 800131c:	b29a      	uxth	r2, r3
 800131e:	4b30      	ldr	r3, [pc, #192]	; (80013e0 <ComputeEcumasterFrame+0x200>)
 8001320:	835a      	strh	r2, [r3, #26]
		ecuData.errflag = LTBE(&RxData[5]);
 8001322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001324:	3305      	adds	r3, #5
 8001326:	4618      	mov	r0, r3
 8001328:	f000 f85c 	bl	80013e4 <LTBE>
 800132c:	4603      	mov	r3, r0
 800132e:	b29a      	uxth	r2, r3
 8001330:	4b2b      	ldr	r3, [pc, #172]	; (80013e0 <ComputeEcumasterFrame+0x200>)
 8001332:	839a      	strh	r2, [r3, #28]
		ecuData.flags1 = RxData[7];
 8001334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001336:	79da      	ldrb	r2, [r3, #7]
 8001338:	4b29      	ldr	r3, [pc, #164]	; (80013e0 <ComputeEcumasterFrame+0x200>)
 800133a:	779a      	strb	r2, [r3, #30]
}
 800133c:	e041      	b.n	80013c2 <ComputeEcumasterFrame+0x1e2>
	} else if (RxHeader.StdId == Frame6) {
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	f240 6205 	movw	r2, #1541	; 0x605
 8001344:	4293      	cmp	r3, r2
 8001346:	d126      	bne.n	8001396 <ComputeEcumasterFrame+0x1b6>
		ecuData.DBWPosition = RxData[0];
 8001348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134a:	781a      	ldrb	r2, [r3, #0]
 800134c:	4b24      	ldr	r3, [pc, #144]	; (80013e0 <ComputeEcumasterFrame+0x200>)
 800134e:	77da      	strb	r2, [r3, #31]
		ecuData.DBWTrigger = RxData[1];
 8001350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001352:	785a      	ldrb	r2, [r3, #1]
 8001354:	4b22      	ldr	r3, [pc, #136]	; (80013e0 <ComputeEcumasterFrame+0x200>)
 8001356:	f883 2020 	strb.w	r2, [r3, #32]
		ecuData.TCDRPMRaw = LTBE(&RxData[2]);
 800135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135c:	3302      	adds	r3, #2
 800135e:	4618      	mov	r0, r3
 8001360:	f000 f840 	bl	80013e4 <LTBE>
 8001364:	4603      	mov	r3, r0
 8001366:	b29a      	uxth	r2, r3
 8001368:	4b1d      	ldr	r3, [pc, #116]	; (80013e0 <ComputeEcumasterFrame+0x200>)
 800136a:	845a      	strh	r2, [r3, #34]	; 0x22
		ecuData.TCDRPM = LTBE(&RxData[4]);
 800136c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136e:	3304      	adds	r3, #4
 8001370:	4618      	mov	r0, r3
 8001372:	f000 f837 	bl	80013e4 <LTBE>
 8001376:	4603      	mov	r3, r0
 8001378:	b2da      	uxtb	r2, r3
 800137a:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <ComputeEcumasterFrame+0x200>)
 800137c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		ecuData.TCTorqueReduction = RxData[6];
 8001380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001382:	799a      	ldrb	r2, [r3, #6]
 8001384:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <ComputeEcumasterFrame+0x200>)
 8001386:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		ecuData.PitLimitTorqueReduction = RxData[7];
 800138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138c:	79da      	ldrb	r2, [r3, #7]
 800138e:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <ComputeEcumasterFrame+0x200>)
 8001390:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8001394:	e015      	b.n	80013c2 <ComputeEcumasterFrame+0x1e2>
	}else if (RxHeader.StdId == 0x1FE) {
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 800139c:	d111      	bne.n	80013c2 <ComputeEcumasterFrame+0x1e2>
		ecuData.BurnedFuel = (float)(LTBE(RxData))/8192.0;
 800139e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80013a0:	f000 f820 	bl	80013e4 <LTBE>
 80013a4:	ee07 0a90 	vmov	s15, r0
 80013a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ac:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80013b0:	ed9f 5b07 	vldr	d5, [pc, #28]	; 80013d0 <ComputeEcumasterFrame+0x1f0>
 80013b4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80013b8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80013bc:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <ComputeEcumasterFrame+0x200>)
 80013be:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013ca:	b004      	add	sp, #16
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	00000000 	.word	0x00000000
 80013d4:	40c00000 	.word	0x40c00000
 80013d8:	20000000 	.word	0x20000000
 80013dc:	40020c00 	.word	0x40020c00
 80013e0:	20005958 	.word	0x20005958

080013e4 <LTBE>:
int LTBE(uint8_t *data) {
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	int returnData = data[0] + data[1] * 0xFF;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	4619      	mov	r1, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	3301      	adds	r3, #1
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	461a      	mov	r2, r3
 80013fa:	4613      	mov	r3, r2
 80013fc:	021b      	lsls	r3, r3, #8
 80013fe:	1a9b      	subs	r3, r3, r2
 8001400:	440b      	add	r3, r1
 8001402:	60fb      	str	r3, [r7, #12]
	return returnData;
 8001404:	68fb      	ldr	r3, [r7, #12]
}
 8001406:	4618      	mov	r0, r3
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
	...

08001414 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800141a:	4b1c      	ldr	r3, [pc, #112]	; (800148c <MX_DMA_Init+0x78>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a1b      	ldr	r2, [pc, #108]	; (800148c <MX_DMA_Init+0x78>)
 8001420:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b19      	ldr	r3, [pc, #100]	; (800148c <MX_DMA_Init+0x78>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001432:	2200      	movs	r2, #0
 8001434:	2100      	movs	r1, #0
 8001436:	2038      	movs	r0, #56	; 0x38
 8001438:	f008 fc21 	bl	8009c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800143c:	2038      	movs	r0, #56	; 0x38
 800143e:	f008 fc3a 	bl	8009cb6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001442:	2200      	movs	r2, #0
 8001444:	2100      	movs	r1, #0
 8001446:	2039      	movs	r0, #57	; 0x39
 8001448:	f008 fc19 	bl	8009c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800144c:	2039      	movs	r0, #57	; 0x39
 800144e:	f008 fc32 	bl	8009cb6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001452:	2200      	movs	r2, #0
 8001454:	2100      	movs	r1, #0
 8001456:	203a      	movs	r0, #58	; 0x3a
 8001458:	f008 fc11 	bl	8009c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800145c:	203a      	movs	r0, #58	; 0x3a
 800145e:	f008 fc2a 	bl	8009cb6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	2100      	movs	r1, #0
 8001466:	203c      	movs	r0, #60	; 0x3c
 8001468:	f008 fc09 	bl	8009c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 800146c:	203c      	movs	r0, #60	; 0x3c
 800146e:	f008 fc22 	bl	8009cb6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	2100      	movs	r1, #0
 8001476:	2044      	movs	r0, #68	; 0x44
 8001478:	f008 fc01 	bl	8009c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 800147c:	2044      	movs	r0, #68	; 0x44
 800147e:	f008 fc1a 	bl	8009cb6 <HAL_NVIC_EnableIRQ>

}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800

08001490 <EcuInit>:
 */

#include "ecumaster.h"

void EcuInit(EcumasterData* ecu)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	ecu->rpm = 0;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	801a      	strh	r2, [r3, #0]
	ecu->tps = 0;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2200      	movs	r2, #0
 80014a2:	709a      	strb	r2, [r3, #2]
	ecu->iat = 0;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	70da      	strb	r2, [r3, #3]
	ecu->map = 0;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	809a      	strh	r2, [r3, #4]
	ecu->injPW = 0;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	80da      	strh	r2, [r3, #6]
	ecu->baro = 0;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	729a      	strb	r2, [r3, #10]
	ecu->batt = 0;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	835a      	strh	r2, [r3, #26]
	ecu->clt = 0;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	81da      	strh	r2, [r3, #14]
	ecu->ecuTemp = 0;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	765a      	strb	r2, [r3, #25]
	ecu->speed = 0;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	811a      	strh	r2, [r3, #8]
	ecu->oilTemp = 0;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	72da      	strb	r2, [r3, #11]
	ecu->oilPress = 0;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	731a      	strb	r2, [r3, #12]
	ecu->ignAngle = 0;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	741a      	strb	r2, [r3, #16]
	ecu->ignDwell = 0;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	745a      	strb	r2, [r3, #17]
	ecu->lambda = 0;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	749a      	strb	r2, [r3, #18]
	ecu->lambdaCorrection = 0;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	74da      	strb	r2, [r3, #19]
	ecu->egt1 = 0;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	829a      	strh	r2, [r3, #20]
	ecu->egt2 = 0;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	82da      	strh	r2, [r3, #22]
	ecu->gear = 0;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	761a      	strb	r2, [r3, #24]
	ecu->ecuTemp = 0;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	765a      	strb	r2, [r3, #25]
	ecu->batt = 0;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	835a      	strh	r2, [r3, #26]
	ecu->errflag = 0;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	839a      	strh	r2, [r3, #28]
	ecu->flags1 = 0;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	779a      	strb	r2, [r3, #30]
	ecu->DBWPosition = 0;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	77da      	strb	r2, [r3, #31]
	ecu->DBWTrigger = 0;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	f883 2020 	strb.w	r2, [r3, #32]
	ecu->TCDRPMRaw = 0;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	845a      	strh	r2, [r3, #34]	; 0x22
	ecu->TCDRPM = 0;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	ecu->TCTorqueReduction = 0;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	ecu->PitLimitTorqueReduction = 0;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	ecu->BurnedFuel = 0;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
	...

08001564 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08e      	sub	sp, #56	; 0x38
 8001568:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
 8001578:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800157a:	4b78      	ldr	r3, [pc, #480]	; (800175c <MX_GPIO_Init+0x1f8>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	4a77      	ldr	r2, [pc, #476]	; (800175c <MX_GPIO_Init+0x1f8>)
 8001580:	f043 0310 	orr.w	r3, r3, #16
 8001584:	6313      	str	r3, [r2, #48]	; 0x30
 8001586:	4b75      	ldr	r3, [pc, #468]	; (800175c <MX_GPIO_Init+0x1f8>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	f003 0310 	and.w	r3, r3, #16
 800158e:	623b      	str	r3, [r7, #32]
 8001590:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001592:	4b72      	ldr	r3, [pc, #456]	; (800175c <MX_GPIO_Init+0x1f8>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a71      	ldr	r2, [pc, #452]	; (800175c <MX_GPIO_Init+0x1f8>)
 8001598:	f043 0304 	orr.w	r3, r3, #4
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b6f      	ldr	r3, [pc, #444]	; (800175c <MX_GPIO_Init+0x1f8>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f003 0304 	and.w	r3, r3, #4
 80015a6:	61fb      	str	r3, [r7, #28]
 80015a8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015aa:	4b6c      	ldr	r3, [pc, #432]	; (800175c <MX_GPIO_Init+0x1f8>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	4a6b      	ldr	r2, [pc, #428]	; (800175c <MX_GPIO_Init+0x1f8>)
 80015b0:	f043 0320 	orr.w	r3, r3, #32
 80015b4:	6313      	str	r3, [r2, #48]	; 0x30
 80015b6:	4b69      	ldr	r3, [pc, #420]	; (800175c <MX_GPIO_Init+0x1f8>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	f003 0320 	and.w	r3, r3, #32
 80015be:	61bb      	str	r3, [r7, #24]
 80015c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015c2:	4b66      	ldr	r3, [pc, #408]	; (800175c <MX_GPIO_Init+0x1f8>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	4a65      	ldr	r2, [pc, #404]	; (800175c <MX_GPIO_Init+0x1f8>)
 80015c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015cc:	6313      	str	r3, [r2, #48]	; 0x30
 80015ce:	4b63      	ldr	r3, [pc, #396]	; (800175c <MX_GPIO_Init+0x1f8>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015d6:	617b      	str	r3, [r7, #20]
 80015d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015da:	4b60      	ldr	r3, [pc, #384]	; (800175c <MX_GPIO_Init+0x1f8>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4a5f      	ldr	r2, [pc, #380]	; (800175c <MX_GPIO_Init+0x1f8>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	6313      	str	r3, [r2, #48]	; 0x30
 80015e6:	4b5d      	ldr	r3, [pc, #372]	; (800175c <MX_GPIO_Init+0x1f8>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	613b      	str	r3, [r7, #16]
 80015f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f2:	4b5a      	ldr	r3, [pc, #360]	; (800175c <MX_GPIO_Init+0x1f8>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a59      	ldr	r2, [pc, #356]	; (800175c <MX_GPIO_Init+0x1f8>)
 80015f8:	f043 0302 	orr.w	r3, r3, #2
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b57      	ldr	r3, [pc, #348]	; (800175c <MX_GPIO_Init+0x1f8>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800160a:	4b54      	ldr	r3, [pc, #336]	; (800175c <MX_GPIO_Init+0x1f8>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	4a53      	ldr	r2, [pc, #332]	; (800175c <MX_GPIO_Init+0x1f8>)
 8001610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001614:	6313      	str	r3, [r2, #48]	; 0x30
 8001616:	4b51      	ldr	r3, [pc, #324]	; (800175c <MX_GPIO_Init+0x1f8>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001622:	4b4e      	ldr	r3, [pc, #312]	; (800175c <MX_GPIO_Init+0x1f8>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a4d      	ldr	r2, [pc, #308]	; (800175c <MX_GPIO_Init+0x1f8>)
 8001628:	f043 0308 	orr.w	r3, r3, #8
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b4b      	ldr	r3, [pc, #300]	; (800175c <MX_GPIO_Init+0x1f8>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0308 	and.w	r3, r3, #8
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin, GPIO_PIN_RESET);
 800163a:	2200      	movs	r2, #0
 800163c:	2110      	movs	r1, #16
 800163e:	4848      	ldr	r0, [pc, #288]	; (8001760 <MX_GPIO_Init+0x1fc>)
 8001640:	f009 fa30 	bl	800aaa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_LNA_EN_GPIO_Port, GPS_LNA_EN_Pin, GPIO_PIN_SET);
 8001644:	2201      	movs	r2, #1
 8001646:	2120      	movs	r1, #32
 8001648:	4846      	ldr	r0, [pc, #280]	; (8001764 <MX_GPIO_Init+0x200>)
 800164a:	f009 fa2b 	bl	800aaa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 800164e:	2200      	movs	r2, #0
 8001650:	2140      	movs	r1, #64	; 0x40
 8001652:	4844      	ldr	r0, [pc, #272]	; (8001764 <MX_GPIO_Init+0x200>)
 8001654:	f009 fa26 	bl	800aaa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_SW_GPIO_Port, USB_SW_Pin, GPIO_PIN_RESET);
 8001658:	2200      	movs	r2, #0
 800165a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800165e:	4842      	ldr	r0, [pc, #264]	; (8001768 <MX_GPIO_Init+0x204>)
 8001660:	f009 fa20 	bl	800aaa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001664:	2200      	movs	r2, #0
 8001666:	2108      	movs	r1, #8
 8001668:	4840      	ldr	r0, [pc, #256]	; (800176c <MX_GPIO_Init+0x208>)
 800166a:	f009 fa1b 	bl	800aaa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_CLK_GPIO_Port, ADC_CLK_Pin, GPIO_PIN_RESET);
 800166e:	2200      	movs	r2, #0
 8001670:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001674:	483e      	ldr	r0, [pc, #248]	; (8001770 <MX_GPIO_Init+0x20c>)
 8001676:	f009 fa15 	bl	800aaa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADC_DATA_RDY_Pin;
 800167a:	2308      	movs	r3, #8
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800167e:	2300      	movs	r3, #0
 8001680:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ADC_DATA_RDY_GPIO_Port, &GPIO_InitStruct);
 8001686:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168a:	4619      	mov	r1, r3
 800168c:	4834      	ldr	r0, [pc, #208]	; (8001760 <MX_GPIO_Init+0x1fc>)
 800168e:	f008 ff51 	bl	800a534 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADC_CS_Pin;
 8001692:	2310      	movs	r3, #16
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001696:	2301      	movs	r3, #1
 8001698:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	2300      	movs	r3, #0
 80016a0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ADC_CS_GPIO_Port, &GPIO_InitStruct);
 80016a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a6:	4619      	mov	r1, r3
 80016a8:	482d      	ldr	r0, [pc, #180]	; (8001760 <MX_GPIO_Init+0x1fc>)
 80016aa:	f008 ff43 	bl	800a534 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PG6 */
  GPIO_InitStruct.Pin = GPS_LNA_EN_Pin|GPIO_PIN_6;
 80016ae:	2360      	movs	r3, #96	; 0x60
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b2:	2301      	movs	r3, #1
 80016b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ba:	2300      	movs	r3, #0
 80016bc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c2:	4619      	mov	r1, r3
 80016c4:	4827      	ldr	r0, [pc, #156]	; (8001764 <MX_GPIO_Init+0x200>)
 80016c6:	f008 ff35 	bl	800a534 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPS_INT_Pin;
 80016ca:	2380      	movs	r3, #128	; 0x80
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ce:	2300      	movs	r3, #0
 80016d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPS_INT_GPIO_Port, &GPIO_InitStruct);
 80016d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016da:	4619      	mov	r1, r3
 80016dc:	4825      	ldr	r0, [pc, #148]	; (8001774 <MX_GPIO_Init+0x210>)
 80016de:	f008 ff29 	bl	800a534 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_SW_Pin;
 80016e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e8:	2301      	movs	r3, #1
 80016ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f0:	2300      	movs	r3, #0
 80016f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_SW_GPIO_Port, &GPIO_InitStruct);
 80016f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f8:	4619      	mov	r1, r3
 80016fa:	481b      	ldr	r0, [pc, #108]	; (8001768 <MX_GPIO_Init+0x204>)
 80016fc:	f008 ff1a 	bl	800a534 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001700:	2308      	movs	r3, #8
 8001702:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001704:	2301      	movs	r3, #1
 8001706:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170c:	2300      	movs	r3, #0
 800170e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001714:	4619      	mov	r1, r3
 8001716:	4815      	ldr	r0, [pc, #84]	; (800176c <MX_GPIO_Init+0x208>)
 8001718:	f008 ff0c 	bl	800a534 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_DET_Pin;
 800171c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001720:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001722:	2300      	movs	r3, #0
 8001724:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001726:	2302      	movs	r3, #2
 8001728:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_DET_GPIO_Port, &GPIO_InitStruct);
 800172a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800172e:	4619      	mov	r1, r3
 8001730:	480c      	ldr	r0, [pc, #48]	; (8001764 <MX_GPIO_Init+0x200>)
 8001732:	f008 feff 	bl	800a534 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADC_CLK_Pin;
 8001736:	f44f 7300 	mov.w	r3, #512	; 0x200
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173c:	2301      	movs	r3, #1
 800173e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001744:	2300      	movs	r3, #0
 8001746:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ADC_CLK_GPIO_Port, &GPIO_InitStruct);
 8001748:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800174c:	4619      	mov	r1, r3
 800174e:	4808      	ldr	r0, [pc, #32]	; (8001770 <MX_GPIO_Init+0x20c>)
 8001750:	f008 fef0 	bl	800a534 <HAL_GPIO_Init>

}
 8001754:	bf00      	nop
 8001756:	3738      	adds	r7, #56	; 0x38
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40023800 	.word	0x40023800
 8001760:	40021000 	.word	0x40021000
 8001764:	40021800 	.word	0x40021800
 8001768:	40020000 	.word	0x40020000
 800176c:	40020c00 	.word	0x40020c00
 8001770:	40020400 	.word	0x40020400
 8001774:	40020800 	.word	0x40020800

08001778 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c3;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800177c:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <MX_I2C1_Init+0x74>)
 800177e:	4a1c      	ldr	r2, [pc, #112]	; (80017f0 <MX_I2C1_Init+0x78>)
 8001780:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8001782:	4b1a      	ldr	r3, [pc, #104]	; (80017ec <MX_I2C1_Init+0x74>)
 8001784:	4a1b      	ldr	r2, [pc, #108]	; (80017f4 <MX_I2C1_Init+0x7c>)
 8001786:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001788:	4b18      	ldr	r3, [pc, #96]	; (80017ec <MX_I2C1_Init+0x74>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800178e:	4b17      	ldr	r3, [pc, #92]	; (80017ec <MX_I2C1_Init+0x74>)
 8001790:	2201      	movs	r2, #1
 8001792:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001794:	4b15      	ldr	r3, [pc, #84]	; (80017ec <MX_I2C1_Init+0x74>)
 8001796:	2200      	movs	r2, #0
 8001798:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800179a:	4b14      	ldr	r3, [pc, #80]	; (80017ec <MX_I2C1_Init+0x74>)
 800179c:	2200      	movs	r2, #0
 800179e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017a0:	4b12      	ldr	r3, [pc, #72]	; (80017ec <MX_I2C1_Init+0x74>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017a6:	4b11      	ldr	r3, [pc, #68]	; (80017ec <MX_I2C1_Init+0x74>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017ac:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <MX_I2C1_Init+0x74>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017b2:	480e      	ldr	r0, [pc, #56]	; (80017ec <MX_I2C1_Init+0x74>)
 80017b4:	f009 fa0c 	bl	800abd0 <HAL_I2C_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80017be:	f000 fd41 	bl	8002244 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017c2:	2100      	movs	r1, #0
 80017c4:	4809      	ldr	r0, [pc, #36]	; (80017ec <MX_I2C1_Init+0x74>)
 80017c6:	f00a fac7 	bl	800bd58 <HAL_I2CEx_ConfigAnalogFilter>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80017d0:	f000 fd38 	bl	8002244 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80017d4:	2100      	movs	r1, #0
 80017d6:	4805      	ldr	r0, [pc, #20]	; (80017ec <MX_I2C1_Init+0x74>)
 80017d8:	f00a fb09 	bl	800bdee <HAL_I2CEx_ConfigDigitalFilter>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80017e2:	f000 fd2f 	bl	8002244 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000558 	.word	0x20000558
 80017f0:	40005400 	.word	0x40005400
 80017f4:	20404768 	.word	0x20404768

080017f8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017fc:	4b1b      	ldr	r3, [pc, #108]	; (800186c <MX_I2C2_Init+0x74>)
 80017fe:	4a1c      	ldr	r2, [pc, #112]	; (8001870 <MX_I2C2_Init+0x78>)
 8001800:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 8001802:	4b1a      	ldr	r3, [pc, #104]	; (800186c <MX_I2C2_Init+0x74>)
 8001804:	4a1b      	ldr	r2, [pc, #108]	; (8001874 <MX_I2C2_Init+0x7c>)
 8001806:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001808:	4b18      	ldr	r3, [pc, #96]	; (800186c <MX_I2C2_Init+0x74>)
 800180a:	2200      	movs	r2, #0
 800180c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800180e:	4b17      	ldr	r3, [pc, #92]	; (800186c <MX_I2C2_Init+0x74>)
 8001810:	2201      	movs	r2, #1
 8001812:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001814:	4b15      	ldr	r3, [pc, #84]	; (800186c <MX_I2C2_Init+0x74>)
 8001816:	2200      	movs	r2, #0
 8001818:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800181a:	4b14      	ldr	r3, [pc, #80]	; (800186c <MX_I2C2_Init+0x74>)
 800181c:	2200      	movs	r2, #0
 800181e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001820:	4b12      	ldr	r3, [pc, #72]	; (800186c <MX_I2C2_Init+0x74>)
 8001822:	2200      	movs	r2, #0
 8001824:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001826:	4b11      	ldr	r3, [pc, #68]	; (800186c <MX_I2C2_Init+0x74>)
 8001828:	2200      	movs	r2, #0
 800182a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800182c:	4b0f      	ldr	r3, [pc, #60]	; (800186c <MX_I2C2_Init+0x74>)
 800182e:	2200      	movs	r2, #0
 8001830:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001832:	480e      	ldr	r0, [pc, #56]	; (800186c <MX_I2C2_Init+0x74>)
 8001834:	f009 f9cc 	bl	800abd0 <HAL_I2C_Init>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800183e:	f000 fd01 	bl	8002244 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001842:	2100      	movs	r1, #0
 8001844:	4809      	ldr	r0, [pc, #36]	; (800186c <MX_I2C2_Init+0x74>)
 8001846:	f00a fa87 	bl	800bd58 <HAL_I2CEx_ConfigAnalogFilter>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001850:	f000 fcf8 	bl	8002244 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001854:	2100      	movs	r1, #0
 8001856:	4805      	ldr	r0, [pc, #20]	; (800186c <MX_I2C2_Init+0x74>)
 8001858:	f00a fac9 	bl	800bdee <HAL_I2CEx_ConfigDigitalFilter>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001862:	f000 fcef 	bl	8002244 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	200005ac 	.word	0x200005ac
 8001870:	40005800 	.word	0x40005800
 8001874:	20404768 	.word	0x20404768

08001878 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800187c:	4b1b      	ldr	r3, [pc, #108]	; (80018ec <MX_I2C3_Init+0x74>)
 800187e:	4a1c      	ldr	r2, [pc, #112]	; (80018f0 <MX_I2C3_Init+0x78>)
 8001880:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20404768;
 8001882:	4b1a      	ldr	r3, [pc, #104]	; (80018ec <MX_I2C3_Init+0x74>)
 8001884:	4a1b      	ldr	r2, [pc, #108]	; (80018f4 <MX_I2C3_Init+0x7c>)
 8001886:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001888:	4b18      	ldr	r3, [pc, #96]	; (80018ec <MX_I2C3_Init+0x74>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800188e:	4b17      	ldr	r3, [pc, #92]	; (80018ec <MX_I2C3_Init+0x74>)
 8001890:	2201      	movs	r2, #1
 8001892:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001894:	4b15      	ldr	r3, [pc, #84]	; (80018ec <MX_I2C3_Init+0x74>)
 8001896:	2200      	movs	r2, #0
 8001898:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800189a:	4b14      	ldr	r3, [pc, #80]	; (80018ec <MX_I2C3_Init+0x74>)
 800189c:	2200      	movs	r2, #0
 800189e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018a0:	4b12      	ldr	r3, [pc, #72]	; (80018ec <MX_I2C3_Init+0x74>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018a6:	4b11      	ldr	r3, [pc, #68]	; (80018ec <MX_I2C3_Init+0x74>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018ac:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <MX_I2C3_Init+0x74>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80018b2:	480e      	ldr	r0, [pc, #56]	; (80018ec <MX_I2C3_Init+0x74>)
 80018b4:	f009 f98c 	bl	800abd0 <HAL_I2C_Init>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80018be:	f000 fcc1 	bl	8002244 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018c2:	2100      	movs	r1, #0
 80018c4:	4809      	ldr	r0, [pc, #36]	; (80018ec <MX_I2C3_Init+0x74>)
 80018c6:	f00a fa47 	bl	800bd58 <HAL_I2CEx_ConfigAnalogFilter>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80018d0:	f000 fcb8 	bl	8002244 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80018d4:	2100      	movs	r1, #0
 80018d6:	4805      	ldr	r0, [pc, #20]	; (80018ec <MX_I2C3_Init+0x74>)
 80018d8:	f00a fa89 	bl	800bdee <HAL_I2CEx_ConfigDigitalFilter>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80018e2:	f000 fcaf 	bl	8002244 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000600 	.word	0x20000600
 80018f0:	40005c00 	.word	0x40005c00
 80018f4:	20404768 	.word	0x20404768

080018f8 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80018fc:	4b1b      	ldr	r3, [pc, #108]	; (800196c <MX_I2C4_Init+0x74>)
 80018fe:	4a1c      	ldr	r2, [pc, #112]	; (8001970 <MX_I2C4_Init+0x78>)
 8001900:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20404768;
 8001902:	4b1a      	ldr	r3, [pc, #104]	; (800196c <MX_I2C4_Init+0x74>)
 8001904:	4a1b      	ldr	r2, [pc, #108]	; (8001974 <MX_I2C4_Init+0x7c>)
 8001906:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001908:	4b18      	ldr	r3, [pc, #96]	; (800196c <MX_I2C4_Init+0x74>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800190e:	4b17      	ldr	r3, [pc, #92]	; (800196c <MX_I2C4_Init+0x74>)
 8001910:	2201      	movs	r2, #1
 8001912:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001914:	4b15      	ldr	r3, [pc, #84]	; (800196c <MX_I2C4_Init+0x74>)
 8001916:	2200      	movs	r2, #0
 8001918:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800191a:	4b14      	ldr	r3, [pc, #80]	; (800196c <MX_I2C4_Init+0x74>)
 800191c:	2200      	movs	r2, #0
 800191e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001920:	4b12      	ldr	r3, [pc, #72]	; (800196c <MX_I2C4_Init+0x74>)
 8001922:	2200      	movs	r2, #0
 8001924:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001926:	4b11      	ldr	r3, [pc, #68]	; (800196c <MX_I2C4_Init+0x74>)
 8001928:	2200      	movs	r2, #0
 800192a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800192c:	4b0f      	ldr	r3, [pc, #60]	; (800196c <MX_I2C4_Init+0x74>)
 800192e:	2200      	movs	r2, #0
 8001930:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001932:	480e      	ldr	r0, [pc, #56]	; (800196c <MX_I2C4_Init+0x74>)
 8001934:	f009 f94c 	bl	800abd0 <HAL_I2C_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800193e:	f000 fc81 	bl	8002244 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001942:	2100      	movs	r1, #0
 8001944:	4809      	ldr	r0, [pc, #36]	; (800196c <MX_I2C4_Init+0x74>)
 8001946:	f00a fa07 	bl	800bd58 <HAL_I2CEx_ConfigAnalogFilter>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001950:	f000 fc78 	bl	8002244 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001954:	2100      	movs	r1, #0
 8001956:	4805      	ldr	r0, [pc, #20]	; (800196c <MX_I2C4_Init+0x74>)
 8001958:	f00a fa49 	bl	800bdee <HAL_I2CEx_ConfigDigitalFilter>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001962:	f000 fc6f 	bl	8002244 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000654 	.word	0x20000654
 8001970:	40006000 	.word	0x40006000
 8001974:	20404768 	.word	0x20404768

08001978 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b0b4      	sub	sp, #208	; 0xd0
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001980:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001990:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001994:	2290      	movs	r2, #144	; 0x90
 8001996:	2100      	movs	r1, #0
 8001998:	4618      	mov	r0, r3
 800199a:	f014 fa8d 	bl	8015eb8 <memset>
  if(i2cHandle->Instance==I2C1)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a99      	ldr	r2, [pc, #612]	; (8001c08 <HAL_I2C_MspInit+0x290>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d13d      	bne.n	8001a24 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80019a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80019ae:	2300      	movs	r3, #0
 80019b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019b8:	4618      	mov	r0, r3
 80019ba:	f00a ff59 	bl	800c870 <HAL_RCCEx_PeriphCLKConfig>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80019c4:	f000 fc3e 	bl	8002244 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c8:	4b90      	ldr	r3, [pc, #576]	; (8001c0c <HAL_I2C_MspInit+0x294>)
 80019ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019cc:	4a8f      	ldr	r2, [pc, #572]	; (8001c0c <HAL_I2C_MspInit+0x294>)
 80019ce:	f043 0302 	orr.w	r3, r3, #2
 80019d2:	6313      	str	r3, [r2, #48]	; 0x30
 80019d4:	4b8d      	ldr	r3, [pc, #564]	; (8001c0c <HAL_I2C_MspInit+0x294>)
 80019d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80019de:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019e0:	23c0      	movs	r3, #192	; 0xc0
 80019e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019e6:	2312      	movs	r3, #18
 80019e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019ec:	2301      	movs	r3, #1
 80019ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f2:	2303      	movs	r3, #3
 80019f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019f8:	2304      	movs	r3, #4
 80019fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019fe:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001a02:	4619      	mov	r1, r3
 8001a04:	4882      	ldr	r0, [pc, #520]	; (8001c10 <HAL_I2C_MspInit+0x298>)
 8001a06:	f008 fd95 	bl	800a534 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a0a:	4b80      	ldr	r3, [pc, #512]	; (8001c0c <HAL_I2C_MspInit+0x294>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	4a7f      	ldr	r2, [pc, #508]	; (8001c0c <HAL_I2C_MspInit+0x294>)
 8001a10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a14:	6413      	str	r3, [r2, #64]	; 0x40
 8001a16:	4b7d      	ldr	r3, [pc, #500]	; (8001c0c <HAL_I2C_MspInit+0x294>)
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8001a22:	e0ec      	b.n	8001bfe <HAL_I2C_MspInit+0x286>
  else if(i2cHandle->Instance==I2C2)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a7a      	ldr	r2, [pc, #488]	; (8001c14 <HAL_I2C_MspInit+0x29c>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d13e      	bne.n	8001aac <HAL_I2C_MspInit+0x134>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001a2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a32:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001a34:	2300      	movs	r3, #0
 8001a36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f00a ff16 	bl	800c870 <HAL_RCCEx_PeriphCLKConfig>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8001a4a:	f000 fbfb 	bl	8002244 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a4e:	4b6f      	ldr	r3, [pc, #444]	; (8001c0c <HAL_I2C_MspInit+0x294>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	4a6e      	ldr	r2, [pc, #440]	; (8001c0c <HAL_I2C_MspInit+0x294>)
 8001a54:	f043 0302 	orr.w	r3, r3, #2
 8001a58:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5a:	4b6c      	ldr	r3, [pc, #432]	; (8001c0c <HAL_I2C_MspInit+0x294>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	623b      	str	r3, [r7, #32]
 8001a64:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a66:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a6e:	2312      	movs	r3, #18
 8001a70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a80:	2304      	movs	r3, #4
 8001a82:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a86:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4860      	ldr	r0, [pc, #384]	; (8001c10 <HAL_I2C_MspInit+0x298>)
 8001a8e:	f008 fd51 	bl	800a534 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a92:	4b5e      	ldr	r3, [pc, #376]	; (8001c0c <HAL_I2C_MspInit+0x294>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	4a5d      	ldr	r2, [pc, #372]	; (8001c0c <HAL_I2C_MspInit+0x294>)
 8001a98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a9e:	4b5b      	ldr	r3, [pc, #364]	; (8001c0c <HAL_I2C_MspInit+0x294>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aa6:	61fb      	str	r3, [r7, #28]
 8001aa8:	69fb      	ldr	r3, [r7, #28]
}
 8001aaa:	e0a8      	b.n	8001bfe <HAL_I2C_MspInit+0x286>
  else if(i2cHandle->Instance==I2C3)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a59      	ldr	r2, [pc, #356]	; (8001c18 <HAL_I2C_MspInit+0x2a0>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d160      	bne.n	8001b78 <HAL_I2C_MspInit+0x200>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001ab6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001aba:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001abc:	2300      	movs	r3, #0
 8001abe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ac2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f00a fed2 	bl	800c870 <HAL_RCCEx_PeriphCLKConfig>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <HAL_I2C_MspInit+0x15e>
      Error_Handler();
 8001ad2:	f000 fbb7 	bl	8002244 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad6:	4b4d      	ldr	r3, [pc, #308]	; (8001c0c <HAL_I2C_MspInit+0x294>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a4c      	ldr	r2, [pc, #304]	; (8001c0c <HAL_I2C_MspInit+0x294>)
 8001adc:	f043 0304 	orr.w	r3, r3, #4
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b4a      	ldr	r3, [pc, #296]	; (8001c0c <HAL_I2C_MspInit+0x294>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f003 0304 	and.w	r3, r3, #4
 8001aea:	61bb      	str	r3, [r7, #24]
 8001aec:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aee:	4b47      	ldr	r3, [pc, #284]	; (8001c0c <HAL_I2C_MspInit+0x294>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	4a46      	ldr	r2, [pc, #280]	; (8001c0c <HAL_I2C_MspInit+0x294>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	6313      	str	r3, [r2, #48]	; 0x30
 8001afa:	4b44      	ldr	r3, [pc, #272]	; (8001c0c <HAL_I2C_MspInit+0x294>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	617b      	str	r3, [r7, #20]
 8001b04:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b0e:	2312      	movs	r3, #18
 8001b10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b20:	2304      	movs	r3, #4
 8001b22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b26:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	483b      	ldr	r0, [pc, #236]	; (8001c1c <HAL_I2C_MspInit+0x2a4>)
 8001b2e:	f008 fd01 	bl	800a534 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b3a:	2312      	movs	r3, #18
 8001b3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b46:	2303      	movs	r3, #3
 8001b48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b4c:	2304      	movs	r3, #4
 8001b4e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b52:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001b56:	4619      	mov	r1, r3
 8001b58:	4831      	ldr	r0, [pc, #196]	; (8001c20 <HAL_I2C_MspInit+0x2a8>)
 8001b5a:	f008 fceb 	bl	800a534 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001b5e:	4b2b      	ldr	r3, [pc, #172]	; (8001c0c <HAL_I2C_MspInit+0x294>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	4a2a      	ldr	r2, [pc, #168]	; (8001c0c <HAL_I2C_MspInit+0x294>)
 8001b64:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b68:	6413      	str	r3, [r2, #64]	; 0x40
 8001b6a:	4b28      	ldr	r3, [pc, #160]	; (8001c0c <HAL_I2C_MspInit+0x294>)
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b72:	613b      	str	r3, [r7, #16]
 8001b74:	693b      	ldr	r3, [r7, #16]
}
 8001b76:	e042      	b.n	8001bfe <HAL_I2C_MspInit+0x286>
  else if(i2cHandle->Instance==I2C4)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a29      	ldr	r2, [pc, #164]	; (8001c24 <HAL_I2C_MspInit+0x2ac>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d13d      	bne.n	8001bfe <HAL_I2C_MspInit+0x286>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001b82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b86:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b92:	4618      	mov	r0, r3
 8001b94:	f00a fe6c 	bl	800c870 <HAL_RCCEx_PeriphCLKConfig>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <HAL_I2C_MspInit+0x22a>
      Error_Handler();
 8001b9e:	f000 fb51 	bl	8002244 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ba2:	4b1a      	ldr	r3, [pc, #104]	; (8001c0c <HAL_I2C_MspInit+0x294>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a19      	ldr	r2, [pc, #100]	; (8001c0c <HAL_I2C_MspInit+0x294>)
 8001ba8:	f043 0320 	orr.w	r3, r3, #32
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b17      	ldr	r3, [pc, #92]	; (8001c0c <HAL_I2C_MspInit+0x294>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f003 0320 	and.w	r3, r3, #32
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001bba:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001bbe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bc2:	2312      	movs	r3, #18
 8001bc4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001bd4:	2304      	movs	r3, #4
 8001bd6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bda:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001bde:	4619      	mov	r1, r3
 8001be0:	4811      	ldr	r0, [pc, #68]	; (8001c28 <HAL_I2C_MspInit+0x2b0>)
 8001be2:	f008 fca7 	bl	800a534 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001be6:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <HAL_I2C_MspInit+0x294>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	4a08      	ldr	r2, [pc, #32]	; (8001c0c <HAL_I2C_MspInit+0x294>)
 8001bec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf2:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <HAL_I2C_MspInit+0x294>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bfa:	60bb      	str	r3, [r7, #8]
 8001bfc:	68bb      	ldr	r3, [r7, #8]
}
 8001bfe:	bf00      	nop
 8001c00:	37d0      	adds	r7, #208	; 0xd0
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40005400 	.word	0x40005400
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	40020400 	.word	0x40020400
 8001c14:	40005800 	.word	0x40005800
 8001c18:	40005c00 	.word	0x40005c00
 8001c1c:	40020800 	.word	0x40020800
 8001c20:	40020000 	.word	0x40020000
 8001c24:	40006000 	.word	0x40006000
 8001c28:	40021400 	.word	0x40021400

08001c2c <HAL_TIM_PeriodElapsedCallback>:
int measureTime(uint32_t startTime){
	return getSeconds()- startTime;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]

  if (htim == &htim14 )
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a4c      	ldr	r2, [pc, #304]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	f040 8090 	bne.w	8001d5e <HAL_TIM_PeriodElapsedCallback+0x132>
  {
	  IMUInnerSensor.timeToNextRead -= 5;
 8001c3e:	4b4b      	ldr	r3, [pc, #300]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	3b05      	subs	r3, #5
 8001c44:	4a49      	ldr	r2, [pc, #292]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001c46:	61d3      	str	r3, [r2, #28]
	 if(IMUInnerSensor.timeToNextRead <= 0){
 8001c48:	4b48      	ldr	r3, [pc, #288]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	dc10      	bgt.n	8001c72 <HAL_TIM_PeriodElapsedCallback+0x46>
		 if(IMUInnerSensor.dataReady){
 8001c50:	4b46      	ldr	r3, [pc, #280]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d009      	beq.n	8001c6c <HAL_TIM_PeriodElapsedCallback+0x40>
			 IMUInnerSensor.dataReady=0;
 8001c58:	4b44      	ldr	r3, [pc, #272]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	619a      	str	r2, [r3, #24]
			 _dataHandler[IMU].dataReady = 1;
 8001c5e:	4a44      	ldr	r2, [pc, #272]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001c60:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
		 }

		 IMUInnerSensor.timeToNextRead = 0;
 8001c6c:	4b3f      	ldr	r3, [pc, #252]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	61da      	str	r2, [r3, #28]
	 }
	 damperLFSensor.timeToNextRead -= 5;
 8001c72:	4b40      	ldr	r3, [pc, #256]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c76:	3b05      	subs	r3, #5
 8001c78:	4a3e      	ldr	r2, [pc, #248]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001c7a:	62d3      	str	r3, [r2, #44]	; 0x2c
	 if(damperLFSensor.timeToNextRead <= 0){
 8001c7c:	4b3d      	ldr	r3, [pc, #244]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	dc1e      	bgt.n	8001cc2 <HAL_TIM_PeriodElapsedCallback+0x96>
		 _dataHandler[DAMPERRF].dataReady = 1;
 8001c84:	4a3a      	ldr	r2, [pc, #232]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001c86:	f892 30b0 	ldrb.w	r3, [r2, #176]	; 0xb0
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	f882 30b0 	strb.w	r3, [r2, #176]	; 0xb0
		 _dataHandler[DAMPERLF].dataReady = 1;
 8001c92:	4a37      	ldr	r2, [pc, #220]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001c94:	f892 309c 	ldrb.w	r3, [r2, #156]	; 0x9c
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	f882 309c 	strb.w	r3, [r2, #156]	; 0x9c
		 _dataHandler[DAMPERRR].dataReady = 1;
 8001ca0:	4a33      	ldr	r2, [pc, #204]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001ca2:	f892 3100 	ldrb.w	r3, [r2, #256]	; 0x100
 8001ca6:	f043 0301 	orr.w	r3, r3, #1
 8001caa:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
		 _dataHandler[DAMPERLR].dataReady = 1;
 8001cae:	4a30      	ldr	r2, [pc, #192]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001cb0:	f892 30ec 	ldrb.w	r3, [r2, #236]	; 0xec
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	f882 30ec 	strb.w	r3, [r2, #236]	; 0xec
		 damperLFSensor.timeToNextRead = 5;
 8001cbc:	4b2d      	ldr	r3, [pc, #180]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001cbe:	2205      	movs	r2, #5
 8001cc0:	62da      	str	r2, [r3, #44]	; 0x2c
	 }
	 damperLFSensor.sendDataByCanTime -= 5;
 8001cc2:	4b2c      	ldr	r3, [pc, #176]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cc6:	3b05      	subs	r3, #5
 8001cc8:	4a2a      	ldr	r2, [pc, #168]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001cca:	6393      	str	r3, [r2, #56]	; 0x38
	 if( damperLFSensor.sendDataByCanTime<= 0){
 8001ccc:	4b29      	ldr	r3, [pc, #164]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	dc0e      	bgt.n	8001cf2 <HAL_TIM_PeriodElapsedCallback+0xc6>
		 adcSendDataByCan(&damperLFSensor);
 8001cd4:	4827      	ldr	r0, [pc, #156]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001cd6:	f002 fd31 	bl	800473c <adcSendDataByCan>
		 adcSendDataByCan(&damperRFSensor);
 8001cda:	4827      	ldr	r0, [pc, #156]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001cdc:	f002 fd2e 	bl	800473c <adcSendDataByCan>
		 adcSendDataByCan(&damperRRSensor);
 8001ce0:	4826      	ldr	r0, [pc, #152]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001ce2:	f002 fd2b 	bl	800473c <adcSendDataByCan>
		 adcSendDataByCan(&damperLRSensor);
 8001ce6:	4826      	ldr	r0, [pc, #152]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001ce8:	f002 fd28 	bl	800473c <adcSendDataByCan>
		 damperLFSensor.sendDataByCanTime = 100;
 8001cec:	4b21      	ldr	r3, [pc, #132]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001cee:	2264      	movs	r2, #100	; 0x64
 8001cf0:	639a      	str	r2, [r3, #56]	; 0x38
	 }
	 absLFSensor.timeToNextRead -= 5;
 8001cf2:	4b24      	ldr	r3, [pc, #144]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf6:	3b05      	subs	r3, #5
 8001cf8:	4a22      	ldr	r2, [pc, #136]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001cfa:	6293      	str	r3, [r2, #40]	; 0x28
	 if(absLFSensor.timeToNextRead <= 0)
 8001cfc:	4b21      	ldr	r3, [pc, #132]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	dc11      	bgt.n	8001d28 <HAL_TIM_PeriodElapsedCallback+0xfc>
	 {
		 ABSCalculate(&absLFSensor);
 8001d04:	481f      	ldr	r0, [pc, #124]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001d06:	f002 fb47 	bl	8004398 <ABSCalculate>
		 absLFSensor.timestamp = getSeconds();
 8001d0a:	f000 f8b9 	bl	8001e80 <getSeconds>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	4a1c      	ldr	r2, [pc, #112]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001d12:	64d3      	str	r3, [r2, #76]	; 0x4c
		 absLFSensor.timeToNextRead = 5;
 8001d14:	4b1b      	ldr	r3, [pc, #108]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001d16:	2205      	movs	r2, #5
 8001d18:	629a      	str	r2, [r3, #40]	; 0x28
		 _dataHandler[ABSLF].dataReady = 1;
 8001d1a:	4a15      	ldr	r2, [pc, #84]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001d1c:	f892 3060 	ldrb.w	r3, [r2, #96]	; 0x60
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	f882 3060 	strb.w	r3, [r2, #96]	; 0x60
	 }
	 absRFSensor.timeToNextRead -= 5;
 8001d28:	4b17      	ldr	r3, [pc, #92]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2c:	3b05      	subs	r3, #5
 8001d2e:	4a16      	ldr	r2, [pc, #88]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001d30:	6293      	str	r3, [r2, #40]	; 0x28
	 if(absRFSensor.timeToNextRead <= 0)
 8001d32:	4b15      	ldr	r3, [pc, #84]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	dc11      	bgt.n	8001d5e <HAL_TIM_PeriodElapsedCallback+0x132>
	 {
		 ABSCalculate(&absRFSensor);
 8001d3a:	4813      	ldr	r0, [pc, #76]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001d3c:	f002 fb2c 	bl	8004398 <ABSCalculate>
		 absRFSensor.timestamp = getSeconds();
 8001d40:	f000 f89e 	bl	8001e80 <getSeconds>
 8001d44:	4603      	mov	r3, r0
 8001d46:	4a10      	ldr	r2, [pc, #64]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001d48:	64d3      	str	r3, [r2, #76]	; 0x4c
		 absRFSensor.timeToNextRead = 5;
 8001d4a:	4b0f      	ldr	r3, [pc, #60]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001d4c:	2205      	movs	r2, #5
 8001d4e:	629a      	str	r2, [r3, #40]	; 0x28
		 _dataHandler[ABSRF].dataReady = 1;
 8001d50:	4a07      	ldr	r2, [pc, #28]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001d52:	f892 3074 	ldrb.w	r3, [r2, #116]	; 0x74
 8001d56:	f043 0301 	orr.w	r3, r3, #1
 8001d5a:	f882 3074 	strb.w	r3, [r2, #116]	; 0x74
	 }

  }
}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20005a84 	.word	0x20005a84
 8001d6c:	20005740 	.word	0x20005740
 8001d70:	20000000 	.word	0x20000000
 8001d74:	2000582c 	.word	0x2000582c
 8001d78:	20005868 	.word	0x20005868
 8001d7c:	200058e0 	.word	0x200058e0
 8001d80:	200058a4 	.word	0x200058a4
 8001d84:	20001700 	.word	0x20001700
 8001d88:	20001750 	.word	0x20001750

08001d8c <getUTCTimeFormat>:
void getUTCTimeFormat(char arr[25])
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08c      	sub	sp, #48	; 0x30
 8001d90:	af02      	add	r7, sp, #8
 8001d92:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef time;
	RTC_DateTypeDef date;
	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001d94:	f107 0310 	add.w	r3, r7, #16
 8001d98:	2200      	movs	r2, #0
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	481b      	ldr	r0, [pc, #108]	; (8001e0c <getUTCTimeFormat+0x80>)
 8001d9e:	f00b fa13 	bl	800d1c8 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8001da2:	f107 030c 	add.w	r3, r7, #12
 8001da6:	2200      	movs	r2, #0
 8001da8:	4619      	mov	r1, r3
 8001daa:	4818      	ldr	r0, [pc, #96]	; (8001e0c <getUTCTimeFormat+0x80>)
 8001dac:	f00b fa6a 	bl	800d284 <HAL_RTC_GetDate>
	  int mili = ((time.SecondFraction-time.SubSeconds)/((float)time.SecondFraction+1) * 1000);
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	ee07 3a90 	vmov	s15, r3
 8001dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	ee07 3a90 	vmov	s15, r3
 8001dc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001dcc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001dd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dd4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001e10 <getUTCTimeFormat+0x84>
 8001dd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ddc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001de0:	ee17 3a90 	vmov	r3, s15
 8001de4:	627b      	str	r3, [r7, #36]	; 0x24
    sprintf(arr,"%02d:%02d:%02d:%03d", time.Hours, time.Minutes, time.Seconds,mili );
 8001de6:	7c3b      	ldrb	r3, [r7, #16]
 8001de8:	4619      	mov	r1, r3
 8001dea:	7c7b      	ldrb	r3, [r7, #17]
 8001dec:	4618      	mov	r0, r3
 8001dee:	7cbb      	ldrb	r3, [r7, #18]
 8001df0:	461a      	mov	r2, r3
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	9301      	str	r3, [sp, #4]
 8001df6:	9200      	str	r2, [sp, #0]
 8001df8:	4603      	mov	r3, r0
 8001dfa:	460a      	mov	r2, r1
 8001dfc:	4905      	ldr	r1, [pc, #20]	; (8001e14 <getUTCTimeFormat+0x88>)
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f015 f844 	bl	8016e8c <siprintf>
}
 8001e04:	bf00      	nop
 8001e06:	3728      	adds	r7, #40	; 0x28
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	200016e0 	.word	0x200016e0
 8001e10:	447a0000 	.word	0x447a0000
 8001e14:	0801ae10 	.word	0x0801ae10

08001e18 <getTime>:
int getTime(RTC_TimeTypeDef* time, RTC_DateTypeDef* date)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
	HAL_RTC_GetTime(&hrtc, time, RTC_FORMAT_BIN);
 8001e22:	2200      	movs	r2, #0
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	4814      	ldr	r0, [pc, #80]	; (8001e78 <getTime+0x60>)
 8001e28:	f00b f9ce 	bl	800d1c8 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, date, RTC_FORMAT_BIN);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	6839      	ldr	r1, [r7, #0]
 8001e30:	4811      	ldr	r0, [pc, #68]	; (8001e78 <getTime+0x60>)
 8001e32:	f00b fa27 	bl	800d284 <HAL_RTC_GetDate>
    return ((time->SecondFraction-time->SubSeconds)/((float)time->SecondFraction+1) * 1000);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689a      	ldr	r2, [r3, #8]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	ee07 3a90 	vmov	s15, r3
 8001e44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	ee07 3a90 	vmov	s15, r3
 8001e50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001e5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e60:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001e7c <getTime+0x64>
 8001e64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e6c:	ee17 3a90 	vmov	r3, s15
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	200016e0 	.word	0x200016e0
 8001e7c:	447a0000 	.word	0x447a0000

08001e80 <getSeconds>:
int getSeconds(){
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b088      	sub	sp, #32
 8001e84:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef time;
	RTC_DateTypeDef date;
	int sub = getTime(&time,&date);
 8001e86:	1d3a      	adds	r2, r7, #4
 8001e88:	f107 0308 	add.w	r3, r7, #8
 8001e8c:	4611      	mov	r1, r2
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff ffc2 	bl	8001e18 <getTime>
 8001e94:	61f8      	str	r0, [r7, #28]
	return ((time.Hours*60+time.Minutes)*60+time.Seconds)*1000+sub;
 8001e96:	7a3b      	ldrb	r3, [r7, #8]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	011b      	lsls	r3, r3, #4
 8001e9e:	1a9b      	subs	r3, r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	7a7b      	ldrb	r3, [r7, #9]
 8001ea6:	441a      	add	r2, r3
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	011b      	lsls	r3, r3, #4
 8001eac:	1a9b      	subs	r3, r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	7abb      	ldrb	r3, [r7, #10]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001eba:	fb03 f202 	mul.w	r2, r3, r2
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	4413      	add	r3, r2
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3720      	adds	r7, #32
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_TIM_IC_CaptureCallback>:

//ABS
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b082      	sub	sp, #8
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
	ABSCallbackHandler(htim);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f002 fab8 	bl	8004448 <ABSCallbackHandler>
}
 8001ed8:	bf00      	nop
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <HAL_UART_RxCpltCallback>:
char received_command[255];
int command_lenght = 0;
uint8_t bufor;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]

	if(huart==gpsSensor.uart)
 8001ee8:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <HAL_UART_RxCpltCallback+0x20>)
 8001eea:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d101      	bne.n	8001ef8 <HAL_UART_RxCpltCallback+0x18>
	{
		GPSCallbackHandler();
 8001ef4:	f002 fe66 	bl	8004bc4 <GPSCallbackHandler>

		}
		HAL_UART_Receive_IT(&huart3, &(bufor), 1);
		*/
	}
}
 8001ef8:	bf00      	nop
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	200017a0 	.word	0x200017a0

08001f04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08c      	sub	sp, #48	; 0x30
 8001f08:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f0a:	f006 fab0 	bl	800846e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f0e:	f000 f925 	bl	800215c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f12:	f7ff fb27 	bl	8001564 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f16:	f7ff fa7d 	bl	8001414 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001f1a:	f001 f859 	bl	8002fd0 <MX_USART3_UART_Init>
  MX_SDMMC2_SD_Init();
 8001f1e:	f002 f879 	bl	8004014 <MX_SDMMC2_SD_Init>
  MX_I2C1_Init();
 8001f22:	f7ff fc29 	bl	8001778 <MX_I2C1_Init>
  MX_FATFS_Init();
 8001f26:	f010 fd53 	bl	80129d0 <MX_FATFS_Init>
  MX_ADC1_Init();
 8001f2a:	f7fe fd57 	bl	80009dc <MX_ADC1_Init>
  MX_ADC2_Init();
 8001f2e:	f7fe fdb5 	bl	8000a9c <MX_ADC2_Init>
  MX_ADC3_Init();
 8001f32:	f7fe fe13 	bl	8000b5c <MX_ADC3_Init>
  MX_CAN1_Init();
 8001f36:	f7fe ffa7 	bl	8000e88 <MX_CAN1_Init>
  MX_CAN2_Init();
 8001f3a:	f7fe fff9 	bl	8000f30 <MX_CAN2_Init>
  MX_I2C2_Init();
 8001f3e:	f7ff fc5b 	bl	80017f8 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001f42:	f7ff fc99 	bl	8001878 <MX_I2C3_Init>
  MX_I2C4_Init();
 8001f46:	f7ff fcd7 	bl	80018f8 <MX_I2C4_Init>
  MX_SPI4_Init();
 8001f4a:	f000 fb9b 	bl	8002684 <MX_SPI4_Init>
  MX_UART7_Init();
 8001f4e:	f000 ffdf 	bl	8002f10 <MX_UART7_Init>
  MX_USART1_UART_Init();
 8001f52:	f001 f80d 	bl	8002f70 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_HCD_Init();
 8001f56:	f001 f9b5 	bl	80032c4 <MX_USB_OTG_FS_HCD_Init>
  MX_TIM2_Init();
 8001f5a:	f000 fddf 	bl	8002b1c <MX_TIM2_Init>
  MX_TIM14_Init();
 8001f5e:	f000 fef5 	bl	8002d4c <MX_TIM14_Init>
  MX_RTC_Init();
 8001f62:	f000 f987 	bl	8002274 <MX_RTC_Init>
  MX_TIM3_Init();
 8001f66:	f000 fe65 	bl	8002c34 <MX_TIM3_Init>
  //initialise_monitor_handles();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  statusRegister.checkTime = SENSOR_ALL_CHECK_TIME;
 8001f6a:	4b74      	ldr	r3, [pc, #464]	; (800213c <main+0x238>)
 8001f6c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001f70:	809a      	strh	r2, [r3, #4]
    initSensors();
 8001f72:	f000 f9dd 	bl	8002330 <initSensors>

    HAL_TIM_Base_Start_IT(&htim14);
 8001f76:	4872      	ldr	r0, [pc, #456]	; (8002140 <main+0x23c>)
 8001f78:	f00c ff14 	bl	800eda4 <HAL_TIM_Base_Start_IT>
    //HAL_UART_Receive_IT(&huart3, &(bufor), 1);

    sdInit(&fileSystem);
 8001f7c:	4871      	ldr	r0, [pc, #452]	; (8002144 <main+0x240>)
 8001f7e:	f001 fa2d 	bl	80033dc <sdInit>
    printStatusRegister();
 8001f82:	f000 fb45 	bl	8002610 <printStatusRegister>
    if((statusRegister.SDCARD & 0b100) < SENSOR_FAIL){
 8001f86:	4b6d      	ldr	r3, [pc, #436]	; (800213c <main+0x238>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	2b03      	cmp	r3, #3
 8001f96:	dc01      	bgt.n	8001f9c <main+0x98>
  	  openAllFiles();
 8001f98:	f001 fa4a 	bl	8003430 <openAllFiles>
    }

    HAL_Delay(200);
 8001f9c:	20c8      	movs	r0, #200	; 0xc8
 8001f9e:	f006 fac3 	bl	8008528 <HAL_Delay>

    RTC_TimeTypeDef time;
    RTC_DateTypeDef date;

    int mili = getTime(&time,&date);
 8001fa2:	463a      	mov	r2, r7
 8001fa4:	1d3b      	adds	r3, r7, #4
 8001fa6:	4611      	mov	r1, r2
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff ff35 	bl	8001e18 <getTime>
 8001fae:	61b8      	str	r0, [r7, #24]
    printf("Current Date: %02d/%02d/%04d\n", date.Date, date.Month,2000 + date.Year);
 8001fb0:	78bb      	ldrb	r3, [r7, #2]
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	787b      	ldrb	r3, [r7, #1]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	78fb      	ldrb	r3, [r7, #3]
 8001fba:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001fbe:	4862      	ldr	r0, [pc, #392]	; (8002148 <main+0x244>)
 8001fc0:	f014 feaa 	bl	8016d18 <iprintf>
    printf("Current time: %02d:%02d:%02d:%03d\n", time.Hours, time.Minutes, time.Seconds,mili);
 8001fc4:	793b      	ldrb	r3, [r7, #4]
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	797b      	ldrb	r3, [r7, #5]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	79bb      	ldrb	r3, [r7, #6]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	485d      	ldr	r0, [pc, #372]	; (800214c <main+0x248>)
 8001fd8:	f014 fe9e 	bl	8016d18 <iprintf>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 1);
 8001fdc:	2201      	movs	r2, #1
 8001fde:	2108      	movs	r1, #8
 8001fe0:	485b      	ldr	r0, [pc, #364]	; (8002150 <main+0x24c>)
 8001fe2:	f008 fd5f 	bl	800aaa4 <HAL_GPIO_WritePin>
    int counter = 0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
	int timePassed = HAL_GetTick();
 8001fea:	f006 fa91 	bl	8008510 <HAL_GetTick>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	623b      	str	r3, [r7, #32]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


  		  counter++;
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	627b      	str	r3, [r7, #36]	; 0x24
  		  for(SENSORS i=0;i<SENSORS_N;i++)
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	77fb      	strb	r3, [r7, #31]
 8001ffc:	e086      	b.n	800210c <main+0x208>
  		  {
  			  if( _dataHandler[i].isActive)
 8001ffe:	7ffa      	ldrb	r2, [r7, #31]
 8002000:	4954      	ldr	r1, [pc, #336]	; (8002154 <main+0x250>)
 8002002:	4613      	mov	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4413      	add	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	440b      	add	r3, r1
 800200c:	3310      	adds	r3, #16
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d075      	beq.n	8002106 <main+0x202>
  			  {
  				  if(_dataHandler[i].getDataHandler != NULL)
 800201a:	7ffa      	ldrb	r2, [r7, #31]
 800201c:	494d      	ldr	r1, [pc, #308]	; (8002154 <main+0x250>)
 800201e:	4613      	mov	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	4413      	add	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	440b      	add	r3, r1
 8002028:	3308      	adds	r3, #8
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d013      	beq.n	8002058 <main+0x154>
  				  {
  					   _dataHandler[i].getDataHandler(_dataHandler[i].sensorStruct);
 8002030:	7ffa      	ldrb	r2, [r7, #31]
 8002032:	4948      	ldr	r1, [pc, #288]	; (8002154 <main+0x250>)
 8002034:	4613      	mov	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	3308      	adds	r3, #8
 8002040:	6819      	ldr	r1, [r3, #0]
 8002042:	7ffa      	ldrb	r2, [r7, #31]
 8002044:	4843      	ldr	r0, [pc, #268]	; (8002154 <main+0x250>)
 8002046:	4613      	mov	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4403      	add	r3, r0
 8002050:	3304      	adds	r3, #4
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	4788      	blx	r1
  				  }
  			  	  if((statusRegister.SDCARD & 0b100) < SENSOR_FAIL)
 8002058:	4b38      	ldr	r3, [pc, #224]	; (800213c <main+0x238>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8002060:	b2db      	uxtb	r3, r3
 8002062:	f003 0304 	and.w	r3, r3, #4
 8002066:	2b03      	cmp	r3, #3
 8002068:	dc3a      	bgt.n	80020e0 <main+0x1dc>
  			  	  {
					  if(_dataHandler[i].dataReady == 1 && _dataHandler[i].saveDataHandler != NULL)
 800206a:	7ffa      	ldrb	r2, [r7, #31]
 800206c:	4939      	ldr	r1, [pc, #228]	; (8002154 <main+0x250>)
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	440b      	add	r3, r1
 8002078:	3310      	adds	r3, #16
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b01      	cmp	r3, #1
 8002084:	d13f      	bne.n	8002106 <main+0x202>
 8002086:	7ffa      	ldrb	r2, [r7, #31]
 8002088:	4932      	ldr	r1, [pc, #200]	; (8002154 <main+0x250>)
 800208a:	4613      	mov	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	440b      	add	r3, r1
 8002094:	330c      	adds	r3, #12
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d034      	beq.n	8002106 <main+0x202>
					  {
						  _dataHandler[i].saveDataHandler(_dataHandler[i].sensorStruct);
 800209c:	7ffa      	ldrb	r2, [r7, #31]
 800209e:	492d      	ldr	r1, [pc, #180]	; (8002154 <main+0x250>)
 80020a0:	4613      	mov	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4413      	add	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	330c      	adds	r3, #12
 80020ac:	6819      	ldr	r1, [r3, #0]
 80020ae:	7ffa      	ldrb	r2, [r7, #31]
 80020b0:	4828      	ldr	r0, [pc, #160]	; (8002154 <main+0x250>)
 80020b2:	4613      	mov	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4403      	add	r3, r0
 80020bc:	3304      	adds	r3, #4
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	4788      	blx	r1
						  _dataHandler[i].dataReady = 0;
 80020c4:	7ffa      	ldrb	r2, [r7, #31]
 80020c6:	4923      	ldr	r1, [pc, #140]	; (8002154 <main+0x250>)
 80020c8:	4613      	mov	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	f103 0210 	add.w	r2, r3, #16
 80020d6:	7813      	ldrb	r3, [r2, #0]
 80020d8:	f36f 0300 	bfc	r3, #0, #1
 80020dc:	7013      	strb	r3, [r2, #0]
 80020de:	e012      	b.n	8002106 <main+0x202>
					  }
  			  	  }else{
  			  		  if(HAL_GetTick() - timePassed > 1000){
 80020e0:	f006 fa16 	bl	8008510 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	6a3b      	ldr	r3, [r7, #32]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020ee:	d907      	bls.n	8002100 <main+0x1fc>
  			  			  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_3);
 80020f0:	2108      	movs	r1, #8
 80020f2:	4817      	ldr	r0, [pc, #92]	; (8002150 <main+0x24c>)
 80020f4:	f008 fcef 	bl	800aad6 <HAL_GPIO_TogglePin>
  			  			  timePassed = HAL_GetTick();
 80020f8:	f006 fa0a 	bl	8008510 <HAL_GetTick>
 80020fc:	4603      	mov	r3, r0
 80020fe:	623b      	str	r3, [r7, #32]
  			  		  }
  			  		  printf("SD card not initialized\n");
 8002100:	4815      	ldr	r0, [pc, #84]	; (8002158 <main+0x254>)
 8002102:	f014 fea5 	bl	8016e50 <puts>
  		  for(SENSORS i=0;i<SENSORS_N;i++)
 8002106:	7ffb      	ldrb	r3, [r7, #31]
 8002108:	3301      	adds	r3, #1
 800210a:	77fb      	strb	r3, [r7, #31]
 800210c:	7ffb      	ldrb	r3, [r7, #31]
 800210e:	2b0c      	cmp	r3, #12
 8002110:	f67f af75 	bls.w	8001ffe <main+0xfa>
  			  	  }
  			  }
  		  }
  		  //sendEcuLogs(ecuData);
  		  if(counter >= 100){
 8002114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002116:	2b63      	cmp	r3, #99	; 0x63
 8002118:	f77f af6b 	ble.w	8001ff2 <main+0xee>
  			 if((statusRegister.SDCARD & 0b100) < SENSOR_FAIL)
 800211c:	4b07      	ldr	r3, [pc, #28]	; (800213c <main+0x238>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8002124:	b2db      	uxtb	r3, r3
 8002126:	f003 0304 	and.w	r3, r3, #4
 800212a:	2b03      	cmp	r3, #3
 800212c:	f73f af61 	bgt.w	8001ff2 <main+0xee>
  			  			  	  {
  			sdFlush();
 8002130:	f001 ff1a 	bl	8003f68 <sdFlush>
  			//f_sync(StatsFile);
  			counter = 0;
 8002134:	2300      	movs	r3, #0
 8002136:	627b      	str	r3, [r7, #36]	; 0x24
  		  counter++;
 8002138:	e75b      	b.n	8001ff2 <main+0xee>
 800213a:	bf00      	nop
 800213c:	200057e8 	.word	0x200057e8
 8002140:	20005a84 	.word	0x20005a84
 8002144:	200006a8 	.word	0x200006a8
 8002148:	0801ae24 	.word	0x0801ae24
 800214c:	0801ae44 	.word	0x0801ae44
 8002150:	40020c00 	.word	0x40020c00
 8002154:	20000000 	.word	0x20000000
 8002158:	0801ae68 	.word	0x0801ae68

0800215c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b094      	sub	sp, #80	; 0x50
 8002160:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002162:	f107 031c 	add.w	r3, r7, #28
 8002166:	2234      	movs	r2, #52	; 0x34
 8002168:	2100      	movs	r1, #0
 800216a:	4618      	mov	r0, r3
 800216c:	f013 fea4 	bl	8015eb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002170:	f107 0308 	add.w	r3, r7, #8
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	60da      	str	r2, [r3, #12]
 800217e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002180:	f009 fe82 	bl	800be88 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002184:	4b2d      	ldr	r3, [pc, #180]	; (800223c <SystemClock_Config+0xe0>)
 8002186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002188:	4a2c      	ldr	r2, [pc, #176]	; (800223c <SystemClock_Config+0xe0>)
 800218a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800218e:	6413      	str	r3, [r2, #64]	; 0x40
 8002190:	4b2a      	ldr	r3, [pc, #168]	; (800223c <SystemClock_Config+0xe0>)
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002198:	607b      	str	r3, [r7, #4]
 800219a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800219c:	4b28      	ldr	r3, [pc, #160]	; (8002240 <SystemClock_Config+0xe4>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a27      	ldr	r2, [pc, #156]	; (8002240 <SystemClock_Config+0xe4>)
 80021a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021a6:	6013      	str	r3, [r2, #0]
 80021a8:	4b25      	ldr	r3, [pc, #148]	; (8002240 <SystemClock_Config+0xe4>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021b0:	603b      	str	r3, [r7, #0]
 80021b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80021b4:	2309      	movs	r3, #9
 80021b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021bc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80021be:	2301      	movs	r3, #1
 80021c0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021c2:	2302      	movs	r3, #2
 80021c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 80021cc:	2319      	movs	r3, #25
 80021ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 80021d0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80021d4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021d6:	2302      	movs	r3, #2
 80021d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80021da:	2309      	movs	r3, #9
 80021dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80021de:	2302      	movs	r3, #2
 80021e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021e2:	f107 031c 	add.w	r3, r7, #28
 80021e6:	4618      	mov	r0, r3
 80021e8:	f009 feae 	bl	800bf48 <HAL_RCC_OscConfig>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80021f2:	f000 f827 	bl	8002244 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80021f6:	f009 fe57 	bl	800bea8 <HAL_PWREx_EnableOverDrive>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8002200:	f000 f820 	bl	8002244 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002204:	230f      	movs	r3, #15
 8002206:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002208:	2302      	movs	r3, #2
 800220a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800220c:	2300      	movs	r3, #0
 800220e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002210:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002214:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002216:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800221a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800221c:	f107 0308 	add.w	r3, r7, #8
 8002220:	2107      	movs	r1, #7
 8002222:	4618      	mov	r0, r3
 8002224:	f00a f93e 	bl	800c4a4 <HAL_RCC_ClockConfig>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800222e:	f000 f809 	bl	8002244 <Error_Handler>
  }
}
 8002232:	bf00      	nop
 8002234:	3750      	adds	r7, #80	; 0x50
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40023800 	.word	0x40023800
 8002240:	40007000 	.word	0x40007000

08002244 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800224a:	b672      	cpsid	i
}
 800224c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  for(int i =1000000;i > 0; i--){
 800224e:	4b07      	ldr	r3, [pc, #28]	; (800226c <Error_Handler+0x28>)
 8002250:	607b      	str	r3, [r7, #4]
 8002252:	e006      	b.n	8002262 <Error_Handler+0x1e>
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_3);
 8002254:	2108      	movs	r1, #8
 8002256:	4806      	ldr	r0, [pc, #24]	; (8002270 <Error_Handler+0x2c>)
 8002258:	f008 fc3d 	bl	800aad6 <HAL_GPIO_TogglePin>
	  for(int i =1000000;i > 0; i--){
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3b01      	subs	r3, #1
 8002260:	607b      	str	r3, [r7, #4]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	dcf5      	bgt.n	8002254 <Error_Handler+0x10>
 8002268:	e7f1      	b.n	800224e <Error_Handler+0xa>
 800226a:	bf00      	nop
 800226c:	000f4240 	.word	0x000f4240
 8002270:	40020c00 	.word	0x40020c00

08002274 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800227a:	1d3b      	adds	r3, r7, #4
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	60da      	str	r2, [r3, #12]
 8002286:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002288:	2300      	movs	r3, #0
 800228a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800228c:	4b0f      	ldr	r3, [pc, #60]	; (80022cc <MX_RTC_Init+0x58>)
 800228e:	4a10      	ldr	r2, [pc, #64]	; (80022d0 <MX_RTC_Init+0x5c>)
 8002290:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002292:	4b0e      	ldr	r3, [pc, #56]	; (80022cc <MX_RTC_Init+0x58>)
 8002294:	2200      	movs	r2, #0
 8002296:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002298:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <MX_RTC_Init+0x58>)
 800229a:	227f      	movs	r2, #127	; 0x7f
 800229c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800229e:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <MX_RTC_Init+0x58>)
 80022a0:	22ff      	movs	r2, #255	; 0xff
 80022a2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80022a4:	4b09      	ldr	r3, [pc, #36]	; (80022cc <MX_RTC_Init+0x58>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80022aa:	4b08      	ldr	r3, [pc, #32]	; (80022cc <MX_RTC_Init+0x58>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80022b0:	4b06      	ldr	r3, [pc, #24]	; (80022cc <MX_RTC_Init+0x58>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80022b6:	4805      	ldr	r0, [pc, #20]	; (80022cc <MX_RTC_Init+0x58>)
 80022b8:	f00a ff02 	bl	800d0c0 <HAL_RTC_Init>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80022c2:	f7ff ffbf 	bl	8002244 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80022c6:	3718      	adds	r7, #24
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	200016e0 	.word	0x200016e0
 80022d0:	40002800 	.word	0x40002800

080022d4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b0a6      	sub	sp, #152	; 0x98
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022dc:	f107 0308 	add.w	r3, r7, #8
 80022e0:	2290      	movs	r2, #144	; 0x90
 80022e2:	2100      	movs	r1, #0
 80022e4:	4618      	mov	r0, r3
 80022e6:	f013 fde7 	bl	8015eb8 <memset>
  if(rtcHandle->Instance==RTC)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a0e      	ldr	r2, [pc, #56]	; (8002328 <HAL_RTC_MspInit+0x54>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d114      	bne.n	800231e <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80022f4:	2320      	movs	r3, #32
 80022f6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80022f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022fc:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022fe:	f107 0308 	add.w	r3, r7, #8
 8002302:	4618      	mov	r0, r3
 8002304:	f00a fab4 	bl	800c870 <HAL_RCCEx_PeriphCLKConfig>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800230e:	f7ff ff99 	bl	8002244 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002312:	4b06      	ldr	r3, [pc, #24]	; (800232c <HAL_RTC_MspInit+0x58>)
 8002314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002316:	4a05      	ldr	r2, [pc, #20]	; (800232c <HAL_RTC_MspInit+0x58>)
 8002318:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800231c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800231e:	bf00      	nop
 8002320:	3798      	adds	r7, #152	; 0x98
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40002800 	.word	0x40002800
 800232c:	40023800 	.word	0x40023800

08002330 <initSensors>:

	}
}

void initSensors()
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af02      	add	r7, sp, #8

	if(_dataHandler[IMU].isActive){
 8002336:	4b66      	ldr	r3, [pc, #408]	; (80024d0 <initSensors+0x1a0>)
 8002338:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d002      	beq.n	800234c <initSensors+0x1c>
		IMUInit(&IMUInnerSensor);
 8002346:	4863      	ldr	r0, [pc, #396]	; (80024d4 <initSensors+0x1a4>)
 8002348:	f002 fc9e 	bl	8004c88 <IMUInit>
	}
	if(_dataHandler[GPS].isActive){
 800234c:	4b60      	ldr	r3, [pc, #384]	; (80024d0 <initSensors+0x1a0>)
 800234e:	7c1b      	ldrb	r3, [r3, #16]
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d002      	beq.n	8002360 <initSensors+0x30>
		 GPSInit(&gpsSensor);
 800235a:	485f      	ldr	r0, [pc, #380]	; (80024d8 <initSensors+0x1a8>)
 800235c:	f002 fa6c 	bl	8004838 <GPSInit>
	}
	if(_dataHandler[MLXLF].isActive){
 8002360:	4b5b      	ldr	r3, [pc, #364]	; (80024d0 <initSensors+0x1a0>)
 8002362:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2b00      	cmp	r3, #0
 800236e:	d005      	beq.n	800237c <initSensors+0x4c>
		mlxInit(&mlxLFSensor,MLXLF,&hi2c2,0);
 8002370:	2300      	movs	r3, #0
 8002372:	4a5a      	ldr	r2, [pc, #360]	; (80024dc <initSensors+0x1ac>)
 8002374:	2102      	movs	r1, #2
 8002376:	485a      	ldr	r0, [pc, #360]	; (80024e0 <initSensors+0x1b0>)
 8002378:	f002 fd54 	bl	8004e24 <mlxInit>
	}
	if(_dataHandler[MLXRF].isActive){
 800237c:	4b54      	ldr	r3, [pc, #336]	; (80024d0 <initSensors+0x1a0>)
 800237e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b00      	cmp	r3, #0
 800238a:	d006      	beq.n	800239a <initSensors+0x6a>
		mlxInit(&mlxRFSensor,MLXRF,&hi2c4,mlxLFSensor.File);
 800238c:	4b54      	ldr	r3, [pc, #336]	; (80024e0 <initSensors+0x1b0>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a54      	ldr	r2, [pc, #336]	; (80024e4 <initSensors+0x1b4>)
 8002392:	2103      	movs	r1, #3
 8002394:	4854      	ldr	r0, [pc, #336]	; (80024e8 <initSensors+0x1b8>)
 8002396:	f002 fd45 	bl	8004e24 <mlxInit>
	}
	if(_dataHandler[ABSLF].isActive){
 800239a:	4b4d      	ldr	r3, [pc, #308]	; (80024d0 <initSensors+0x1a0>)
 800239c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00e      	beq.n	80023c8 <initSensors+0x98>
	    HAL_TIM_Base_Start(&htim3);
 80023aa:	4850      	ldr	r0, [pc, #320]	; (80024ec <initSensors+0x1bc>)
 80023ac:	f00c fc8a 	bl	800ecc4 <HAL_TIM_Base_Start>
		HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 80023b0:	210c      	movs	r1, #12
 80023b2:	484e      	ldr	r0, [pc, #312]	; (80024ec <initSensors+0x1bc>)
 80023b4:	f00c fdd0 	bl	800ef58 <HAL_TIM_IC_Start_IT>
		ABSInit(&absLFSensor, ABSLF, &htim3, TIM_CHANNEL_4, 0);
 80023b8:	2300      	movs	r3, #0
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	230c      	movs	r3, #12
 80023be:	4a4b      	ldr	r2, [pc, #300]	; (80024ec <initSensors+0x1bc>)
 80023c0:	2104      	movs	r1, #4
 80023c2:	484b      	ldr	r0, [pc, #300]	; (80024f0 <initSensors+0x1c0>)
 80023c4:	f001 ff7e 	bl	80042c4 <ABSInit>
	}
	if(_dataHandler[ABSRF].isActive){
 80023c8:	4b41      	ldr	r3, [pc, #260]	; (80024d0 <initSensors+0x1a0>)
 80023ca:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00f      	beq.n	80023f8 <initSensors+0xc8>
	    HAL_TIM_Base_Start(&htim2);
 80023d8:	4846      	ldr	r0, [pc, #280]	; (80024f4 <initSensors+0x1c4>)
 80023da:	f00c fc73 	bl	800ecc4 <HAL_TIM_Base_Start>
	    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80023de:	2100      	movs	r1, #0
 80023e0:	4844      	ldr	r0, [pc, #272]	; (80024f4 <initSensors+0x1c4>)
 80023e2:	f00c fdb9 	bl	800ef58 <HAL_TIM_IC_Start_IT>
		ABSInit(&absRFSensor, ABSRF, &htim2, TIM_CHANNEL_1, absLFSensor.File);
 80023e6:	4b42      	ldr	r3, [pc, #264]	; (80024f0 <initSensors+0x1c0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	2300      	movs	r3, #0
 80023ee:	4a41      	ldr	r2, [pc, #260]	; (80024f4 <initSensors+0x1c4>)
 80023f0:	2105      	movs	r1, #5
 80023f2:	4841      	ldr	r0, [pc, #260]	; (80024f8 <initSensors+0x1c8>)
 80023f4:	f001 ff66 	bl	80042c4 <ABSInit>
	}
	if(_dataHandler[WHEEL].isActive){
 80023f8:	4b35      	ldr	r3, [pc, #212]	; (80024d0 <initSensors+0x1a0>)
 80023fa:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	b2db      	uxtb	r3, r3
 8002404:	2b00      	cmp	r3, #0
 8002406:	d002      	beq.n	800240e <initSensors+0xde>
		steeringInit(&sWheelSensor);
 8002408:	483c      	ldr	r0, [pc, #240]	; (80024fc <initSensors+0x1cc>)
 800240a:	f002 f95f 	bl	80046cc <steeringInit>
	}
	if(_dataHandler[DAMPERLF].isActive){
 800240e:	4b30      	ldr	r3, [pc, #192]	; (80024d0 <initSensors+0x1a0>)
 8002410:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d004      	beq.n	8002428 <initSensors+0xf8>
		damperInit(&damperLFSensor, DAMPERLF, 0);
 800241e:	2200      	movs	r2, #0
 8002420:	2107      	movs	r1, #7
 8002422:	4837      	ldr	r0, [pc, #220]	; (8002500 <initSensors+0x1d0>)
 8002424:	f002 f8d2 	bl	80045cc <damperInit>
	}
	if(_dataHandler[DAMPERRF].isActive){
 8002428:	4b29      	ldr	r3, [pc, #164]	; (80024d0 <initSensors+0x1a0>)
 800242a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b00      	cmp	r3, #0
 8002436:	d006      	beq.n	8002446 <initSensors+0x116>
		damperInit(&damperRFSensor, DAMPERRF, damperLFSensor.File);
 8002438:	4b31      	ldr	r3, [pc, #196]	; (8002500 <initSensors+0x1d0>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	461a      	mov	r2, r3
 800243e:	2108      	movs	r1, #8
 8002440:	4830      	ldr	r0, [pc, #192]	; (8002504 <initSensors+0x1d4>)
 8002442:	f002 f8c3 	bl	80045cc <damperInit>
	}
	if(_dataHandler[DAMPERLR].isActive){
 8002446:	4b22      	ldr	r3, [pc, #136]	; (80024d0 <initSensors+0x1a0>)
 8002448:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d006      	beq.n	8002464 <initSensors+0x134>
		damperInit(&damperLRSensor, DAMPERLR, damperLFSensor.File);
 8002456:	4b2a      	ldr	r3, [pc, #168]	; (8002500 <initSensors+0x1d0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	461a      	mov	r2, r3
 800245c:	210b      	movs	r1, #11
 800245e:	482a      	ldr	r0, [pc, #168]	; (8002508 <initSensors+0x1d8>)
 8002460:	f002 f8b4 	bl	80045cc <damperInit>
	}
	if(_dataHandler[DAMPERRR].isActive){
 8002464:	4b1a      	ldr	r3, [pc, #104]	; (80024d0 <initSensors+0x1a0>)
 8002466:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b00      	cmp	r3, #0
 8002472:	d006      	beq.n	8002482 <initSensors+0x152>
		damperInit(&damperRRSensor, DAMPERRR, damperLFSensor.File);
 8002474:	4b22      	ldr	r3, [pc, #136]	; (8002500 <initSensors+0x1d0>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	461a      	mov	r2, r3
 800247a:	210c      	movs	r1, #12
 800247c:	4823      	ldr	r0, [pc, #140]	; (800250c <initSensors+0x1dc>)
 800247e:	f002 f8a5 	bl	80045cc <damperInit>
	}
	if(_dataHandler[ECU].isActive){
 8002482:	4b13      	ldr	r3, [pc, #76]	; (80024d0 <initSensors+0x1a0>)
 8002484:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d002      	beq.n	8002498 <initSensors+0x168>
		  EcuInit(&ecuData);
 8002492:	481f      	ldr	r0, [pc, #124]	; (8002510 <initSensors+0x1e0>)
 8002494:	f7fe fffc 	bl	8001490 <EcuInit>
	}
	if(_dataHandler[TELEBACK].isActive){
 8002498:	4b0d      	ldr	r3, [pc, #52]	; (80024d0 <initSensors+0x1a0>)
 800249a:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d002      	beq.n	80024ae <initSensors+0x17e>
		TeleBackInit(&teleData);
 80024a8:	481a      	ldr	r0, [pc, #104]	; (8002514 <initSensors+0x1e4>)
 80024aa:	f005 ff79 	bl	80083a0 <TeleBackInit>
	}
	//Check if can still works!

    HAL_CAN_Start(&hcan1);
 80024ae:	481a      	ldr	r0, [pc, #104]	; (8002518 <initSensors+0x1e8>)
 80024b0:	f006 fe74 	bl	800919c <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80024b4:	2102      	movs	r1, #2
 80024b6:	4818      	ldr	r0, [pc, #96]	; (8002518 <initSensors+0x1e8>)
 80024b8:	f007 f896 	bl	80095e8 <HAL_CAN_ActivateNotification>
	HAL_CAN_Start(&hcan2);
 80024bc:	4817      	ldr	r0, [pc, #92]	; (800251c <initSensors+0x1ec>)
 80024be:	f006 fe6d 	bl	800919c <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 80024c2:	2102      	movs	r1, #2
 80024c4:	4815      	ldr	r0, [pc, #84]	; (800251c <initSensors+0x1ec>)
 80024c6:	f007 f88f 	bl	80095e8 <HAL_CAN_ActivateNotification>


}
 80024ca:	bf00      	nop
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	20000000 	.word	0x20000000
 80024d4:	20005740 	.word	0x20005740
 80024d8:	200017a0 	.word	0x200017a0
 80024dc:	200005ac 	.word	0x200005ac
 80024e0:	200019cc 	.word	0x200019cc
 80024e4:	20000654 	.word	0x20000654
 80024e8:	20003884 	.word	0x20003884
 80024ec:	20005a38 	.word	0x20005a38
 80024f0:	20001700 	.word	0x20001700
 80024f4:	200059ec 	.word	0x200059ec
 80024f8:	20001750 	.word	0x20001750
 80024fc:	200057f0 	.word	0x200057f0
 8002500:	2000582c 	.word	0x2000582c
 8002504:	20005868 	.word	0x20005868
 8002508:	200058a4 	.word	0x200058a4
 800250c:	200058e0 	.word	0x200058e0
 8002510:	20005958 	.word	0x20005958
 8002514:	2000591c 	.word	0x2000591c
 8002518:	20000504 	.word	0x20000504
 800251c:	2000052c 	.word	0x2000052c

08002520 <statusToInt>:
int statusToInt()
{	int fullRegister = statusRegister.TeleBack;
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	4b39      	ldr	r3, [pc, #228]	; (800260c <statusToInt+0xec>)
 8002528:	78db      	ldrb	r3, [r3, #3]
 800252a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800252e:	b2db      	uxtb	r3, r3
 8002530:	607b      	str	r3, [r7, #4]
	fullRegister = fullRegister << 2;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	607b      	str	r3, [r7, #4]
	fullRegister =  (fullRegister  |statusRegister.DamperRF) << 3;
 8002538:	4b34      	ldr	r3, [pc, #208]	; (800260c <statusToInt+0xec>)
 800253a:	78db      	ldrb	r3, [r3, #3]
 800253c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8002540:	b2db      	uxtb	r3, r3
 8002542:	461a      	mov	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4313      	orrs	r3, r2
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	607b      	str	r3, [r7, #4]
	fullRegister =  (fullRegister  |statusRegister.DamperLF) << 3;
 800254c:	4b2f      	ldr	r3, [pc, #188]	; (800260c <statusToInt+0xec>)
 800254e:	78db      	ldrb	r3, [r3, #3]
 8002550:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8002554:	b2db      	uxtb	r3, r3
 8002556:	461a      	mov	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4313      	orrs	r3, r2
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	607b      	str	r3, [r7, #4]
	fullRegister =  (fullRegister  |statusRegister.Steering) << 3;
 8002560:	4b2a      	ldr	r3, [pc, #168]	; (800260c <statusToInt+0xec>)
 8002562:	789b      	ldrb	r3, [r3, #2]
 8002564:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002568:	b2db      	uxtb	r3, r3
 800256a:	461a      	mov	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4313      	orrs	r3, r2
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	607b      	str	r3, [r7, #4]
	fullRegister =  (fullRegister  |statusRegister.VSSRF) << 3;
 8002574:	4b25      	ldr	r3, [pc, #148]	; (800260c <statusToInt+0xec>)
 8002576:	789b      	ldrb	r3, [r3, #2]
 8002578:	f3c3 0382 	ubfx	r3, r3, #2, #3
 800257c:	b2db      	uxtb	r3, r3
 800257e:	461a      	mov	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4313      	orrs	r3, r2
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	607b      	str	r3, [r7, #4]
	fullRegister =  (fullRegister  |statusRegister.VSSLF) << 3;
 8002588:	4b20      	ldr	r3, [pc, #128]	; (800260c <statusToInt+0xec>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f3c3 33c2 	ubfx	r3, r3, #15, #3
 8002590:	b2db      	uxtb	r3, r3
 8002592:	461a      	mov	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4313      	orrs	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	607b      	str	r3, [r7, #4]
	fullRegister =  (fullRegister  |statusRegister.MLXRF) << 3;
 800259c:	4b1b      	ldr	r3, [pc, #108]	; (800260c <statusToInt+0xec>)
 800259e:	785b      	ldrb	r3, [r3, #1]
 80025a0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	461a      	mov	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	607b      	str	r3, [r7, #4]
	fullRegister =  (fullRegister  |statusRegister.MLXLF) << 3;
 80025b0:	4b16      	ldr	r3, [pc, #88]	; (800260c <statusToInt+0xec>)
 80025b2:	785b      	ldrb	r3, [r3, #1]
 80025b4:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	461a      	mov	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4313      	orrs	r3, r2
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	607b      	str	r3, [r7, #4]
	fullRegister = (fullRegister  | statusRegister.IMU) << 3;
 80025c4:	4b11      	ldr	r3, [pc, #68]	; (800260c <statusToInt+0xec>)
 80025c6:	881b      	ldrh	r3, [r3, #0]
 80025c8:	f3c3 1382 	ubfx	r3, r3, #6, #3
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	461a      	mov	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	607b      	str	r3, [r7, #4]
	fullRegister = (fullRegister  | statusRegister.GPS) << 3;
 80025d8:	4b0c      	ldr	r3, [pc, #48]	; (800260c <statusToInt+0xec>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	461a      	mov	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	607b      	str	r3, [r7, #4]
	fullRegister =  (fullRegister  |statusRegister.SDCARD);
 80025ec:	4b07      	ldr	r3, [pc, #28]	; (800260c <statusToInt+0xec>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	461a      	mov	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	607b      	str	r3, [r7, #4]
	return fullRegister;
 80025fe:	687b      	ldr	r3, [r7, #4]
}
 8002600:	4618      	mov	r0, r3
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	200057e8 	.word	0x200057e8

08002610 <printStatusRegister>:
void printStatusRegister()
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
	int fullRegister = statusToInt();
 8002616:	f7ff ff83 	bl	8002520 <statusToInt>
 800261a:	60b8      	str	r0, [r7, #8]
	int b =0;
 800261c:	2300      	movs	r3, #0
 800261e:	607b      	str	r3, [r7, #4]
	for(int i=31;i>=0;i--)
 8002620:	231f      	movs	r3, #31
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	e022      	b.n	800266c <printStatusRegister+0x5c>
	{
		b = fullRegister >> i;
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	fa42 f303 	asr.w	r3, r2, r3
 800262e:	607b      	str	r3, [r7, #4]
		if(b & 1)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <printStatusRegister+0x32>
		{
			printf("1");
 800263a:	2031      	movs	r0, #49	; 0x31
 800263c:	f014 fb84 	bl	8016d48 <putchar>
 8002640:	e002      	b.n	8002648 <printStatusRegister+0x38>
		}else
		{
			printf("0");
 8002642:	2030      	movs	r0, #48	; 0x30
 8002644:	f014 fb80 	bl	8016d48 <putchar>
		}
		if(i%3 == 0)
 8002648:	68f9      	ldr	r1, [r7, #12]
 800264a:	4b0d      	ldr	r3, [pc, #52]	; (8002680 <printStatusRegister+0x70>)
 800264c:	fb83 3201 	smull	r3, r2, r3, r1
 8002650:	17cb      	asrs	r3, r1, #31
 8002652:	1ad2      	subs	r2, r2, r3
 8002654:	4613      	mov	r3, r2
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	4413      	add	r3, r2
 800265a:	1aca      	subs	r2, r1, r3
 800265c:	2a00      	cmp	r2, #0
 800265e:	d102      	bne.n	8002666 <printStatusRegister+0x56>
		{
			printf(" ");
 8002660:	2020      	movs	r0, #32
 8002662:	f014 fb71 	bl	8016d48 <putchar>
	for(int i=31;i>=0;i--)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	3b01      	subs	r3, #1
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2b00      	cmp	r3, #0
 8002670:	dad9      	bge.n	8002626 <printStatusRegister+0x16>
		}

	}
	printf("\n");
 8002672:	200a      	movs	r0, #10
 8002674:	f014 fb68 	bl	8016d48 <putchar>
};
 8002678:	bf00      	nop
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	55555556 	.word	0x55555556

08002684 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002688:	4b1b      	ldr	r3, [pc, #108]	; (80026f8 <MX_SPI4_Init+0x74>)
 800268a:	4a1c      	ldr	r2, [pc, #112]	; (80026fc <MX_SPI4_Init+0x78>)
 800268c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800268e:	4b1a      	ldr	r3, [pc, #104]	; (80026f8 <MX_SPI4_Init+0x74>)
 8002690:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002694:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002696:	4b18      	ldr	r3, [pc, #96]	; (80026f8 <MX_SPI4_Init+0x74>)
 8002698:	2200      	movs	r2, #0
 800269a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 800269c:	4b16      	ldr	r3, [pc, #88]	; (80026f8 <MX_SPI4_Init+0x74>)
 800269e:	f44f 7240 	mov.w	r2, #768	; 0x300
 80026a2:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026a4:	4b14      	ldr	r3, [pc, #80]	; (80026f8 <MX_SPI4_Init+0x74>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026aa:	4b13      	ldr	r3, [pc, #76]	; (80026f8 <MX_SPI4_Init+0x74>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80026b0:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <MX_SPI4_Init+0x74>)
 80026b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026b6:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026b8:	4b0f      	ldr	r3, [pc, #60]	; (80026f8 <MX_SPI4_Init+0x74>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026be:	4b0e      	ldr	r3, [pc, #56]	; (80026f8 <MX_SPI4_Init+0x74>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80026c4:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <MX_SPI4_Init+0x74>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026ca:	4b0b      	ldr	r3, [pc, #44]	; (80026f8 <MX_SPI4_Init+0x74>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 80026d0:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <MX_SPI4_Init+0x74>)
 80026d2:	2207      	movs	r2, #7
 80026d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80026d6:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <MX_SPI4_Init+0x74>)
 80026d8:	2200      	movs	r2, #0
 80026da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80026dc:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <MX_SPI4_Init+0x74>)
 80026de:	2208      	movs	r2, #8
 80026e0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80026e2:	4805      	ldr	r0, [pc, #20]	; (80026f8 <MX_SPI4_Init+0x74>)
 80026e4:	f00c f9eb 	bl	800eabe <HAL_SPI_Init>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 80026ee:	f7ff fda9 	bl	8002244 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	20005984 	.word	0x20005984
 80026fc:	40013400 	.word	0x40013400

08002700 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b08a      	sub	sp, #40	; 0x28
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002708:	f107 0314 	add.w	r3, r7, #20
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	605a      	str	r2, [r3, #4]
 8002712:	609a      	str	r2, [r3, #8]
 8002714:	60da      	str	r2, [r3, #12]
 8002716:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a17      	ldr	r2, [pc, #92]	; (800277c <HAL_SPI_MspInit+0x7c>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d127      	bne.n	8002772 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002722:	4b17      	ldr	r3, [pc, #92]	; (8002780 <HAL_SPI_MspInit+0x80>)
 8002724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002726:	4a16      	ldr	r2, [pc, #88]	; (8002780 <HAL_SPI_MspInit+0x80>)
 8002728:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800272c:	6453      	str	r3, [r2, #68]	; 0x44
 800272e:	4b14      	ldr	r3, [pc, #80]	; (8002780 <HAL_SPI_MspInit+0x80>)
 8002730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002732:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002736:	613b      	str	r3, [r7, #16]
 8002738:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800273a:	4b11      	ldr	r3, [pc, #68]	; (8002780 <HAL_SPI_MspInit+0x80>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	4a10      	ldr	r2, [pc, #64]	; (8002780 <HAL_SPI_MspInit+0x80>)
 8002740:	f043 0310 	orr.w	r3, r3, #16
 8002744:	6313      	str	r3, [r2, #48]	; 0x30
 8002746:	4b0e      	ldr	r3, [pc, #56]	; (8002780 <HAL_SPI_MspInit+0x80>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	f003 0310 	and.w	r3, r3, #16
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8002752:	2364      	movs	r3, #100	; 0x64
 8002754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002756:	2302      	movs	r3, #2
 8002758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275a:	2300      	movs	r3, #0
 800275c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800275e:	2303      	movs	r3, #3
 8002760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002762:	2305      	movs	r3, #5
 8002764:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002766:	f107 0314 	add.w	r3, r7, #20
 800276a:	4619      	mov	r1, r3
 800276c:	4805      	ldr	r0, [pc, #20]	; (8002784 <HAL_SPI_MspInit+0x84>)
 800276e:	f007 fee1 	bl	800a534 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8002772:	bf00      	nop
 8002774:	3728      	adds	r7, #40	; 0x28
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	40013400 	.word	0x40013400
 8002780:	40023800 	.word	0x40023800
 8002784:	40021000 	.word	0x40021000

08002788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800278e:	4b0f      	ldr	r3, [pc, #60]	; (80027cc <HAL_MspInit+0x44>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	4a0e      	ldr	r2, [pc, #56]	; (80027cc <HAL_MspInit+0x44>)
 8002794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002798:	6413      	str	r3, [r2, #64]	; 0x40
 800279a:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <HAL_MspInit+0x44>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a2:	607b      	str	r3, [r7, #4]
 80027a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027a6:	4b09      	ldr	r3, [pc, #36]	; (80027cc <HAL_MspInit+0x44>)
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	4a08      	ldr	r2, [pc, #32]	; (80027cc <HAL_MspInit+0x44>)
 80027ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027b0:	6453      	str	r3, [r2, #68]	; 0x44
 80027b2:	4b06      	ldr	r3, [pc, #24]	; (80027cc <HAL_MspInit+0x44>)
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ba:	603b      	str	r3, [r7, #0]
 80027bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	40023800 	.word	0x40023800

080027d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027d4:	e7fe      	b.n	80027d4 <NMI_Handler+0x4>

080027d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027d6:	b480      	push	{r7}
 80027d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027da:	e7fe      	b.n	80027da <HardFault_Handler+0x4>

080027dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027e0:	e7fe      	b.n	80027e0 <MemManage_Handler+0x4>

080027e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027e2:	b480      	push	{r7}
 80027e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027e6:	e7fe      	b.n	80027e6 <BusFault_Handler+0x4>

080027e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027ec:	e7fe      	b.n	80027ec <UsageFault_Handler+0x4>

080027ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027ee:	b480      	push	{r7}
 80027f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027f2:	bf00      	nop
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002800:	bf00      	nop
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800280a:	b480      	push	{r7}
 800280c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800280e:	bf00      	nop
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800281c:	f005 fe64 	bl	80084e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002820:	bf00      	nop
 8002822:	bd80      	pop	{r7, pc}

08002824 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002828:	4802      	ldr	r0, [pc, #8]	; (8002834 <CAN1_TX_IRQHandler+0x10>)
 800282a:	f006 ff03 	bl	8009634 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800282e:	bf00      	nop
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	20000504 	.word	0x20000504

08002838 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800283c:	4802      	ldr	r0, [pc, #8]	; (8002848 <CAN1_RX0_IRQHandler+0x10>)
 800283e:	f006 fef9 	bl	8009634 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002842:	bf00      	nop
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	20000504 	.word	0x20000504

0800284c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002850:	4802      	ldr	r0, [pc, #8]	; (800285c <CAN1_RX1_IRQHandler+0x10>)
 8002852:	f006 feef 	bl	8009634 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20000504 	.word	0x20000504

08002860 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002864:	4802      	ldr	r0, [pc, #8]	; (8002870 <TIM2_IRQHandler+0x10>)
 8002866:	f00c fcc7 	bl	800f1f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800286a:	bf00      	nop
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	200059ec 	.word	0x200059ec

08002874 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002878:	4802      	ldr	r0, [pc, #8]	; (8002884 <TIM3_IRQHandler+0x10>)
 800287a:	f00c fcbd 	bl	800f1f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	20005a38 	.word	0x20005a38

08002888 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800288c:	4802      	ldr	r0, [pc, #8]	; (8002898 <USART3_IRQHandler+0x10>)
 800288e:	f00d fe9f 	bl	80105d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	20005be0 	.word	0x20005be0

0800289c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80028a0:	4802      	ldr	r0, [pc, #8]	; (80028ac <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80028a2:	f00c fca9 	bl	800f1f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80028a6:	bf00      	nop
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	20005a84 	.word	0x20005a84

080028b0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc2_rx);
 80028b4:	4802      	ldr	r0, [pc, #8]	; (80028c0 <DMA2_Stream0_IRQHandler+0x10>)
 80028b6:	f007 fbc7 	bl	800a048 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80028ba:	bf00      	nop
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	20005ff8 	.word	0x20005ff8

080028c4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80028c8:	4802      	ldr	r0, [pc, #8]	; (80028d4 <DMA2_Stream1_IRQHandler+0x10>)
 80028ca:	f007 fbbd 	bl	800a048 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80028ce:	bf00      	nop
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	200004a4 	.word	0x200004a4

080028d8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80028dc:	4802      	ldr	r0, [pc, #8]	; (80028e8 <DMA2_Stream2_IRQHandler+0x10>)
 80028de:	f007 fbb3 	bl	800a048 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80028e2:	bf00      	nop
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	20000444 	.word	0x20000444

080028ec <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80028f0:	4802      	ldr	r0, [pc, #8]	; (80028fc <DMA2_Stream4_IRQHandler+0x10>)
 80028f2:	f007 fba9 	bl	800a048 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80028f6:	bf00      	nop
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	200003e4 	.word	0x200003e4

08002900 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002904:	4802      	ldr	r0, [pc, #8]	; (8002910 <CAN2_TX_IRQHandler+0x10>)
 8002906:	f006 fe95 	bl	8009634 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 800290a:	bf00      	nop
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	2000052c 	.word	0x2000052c

08002914 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002918:	4802      	ldr	r0, [pc, #8]	; (8002924 <CAN2_RX0_IRQHandler+0x10>)
 800291a:	f006 fe8b 	bl	8009634 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800291e:	bf00      	nop
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	2000052c 	.word	0x2000052c

08002928 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800292c:	4802      	ldr	r0, [pc, #8]	; (8002938 <CAN2_RX1_IRQHandler+0x10>)
 800292e:	f006 fe81 	bl	8009634 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8002932:	bf00      	nop
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	2000052c 	.word	0x2000052c

0800293c <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc2_tx);
 8002940:	4802      	ldr	r0, [pc, #8]	; (800294c <DMA2_Stream5_IRQHandler+0x10>)
 8002942:	f007 fb81 	bl	800a048 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8002946:	bf00      	nop
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	20006058 	.word	0x20006058

08002950 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 8002954:	4802      	ldr	r0, [pc, #8]	; (8002960 <SDMMC2_IRQHandler+0x10>)
 8002956:	f00b f807 	bl	800d968 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 800295a:	bf00      	nop
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	20005f74 	.word	0x20005f74

08002964 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
	return 1;
 8002968:	2301      	movs	r3, #1
}
 800296a:	4618      	mov	r0, r3
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <_kill>:

int _kill(int pid, int sig)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800297e:	f013 fa69 	bl	8015e54 <__errno>
 8002982:	4603      	mov	r3, r0
 8002984:	2216      	movs	r2, #22
 8002986:	601a      	str	r2, [r3, #0]
	return -1;
 8002988:	f04f 33ff 	mov.w	r3, #4294967295
}
 800298c:	4618      	mov	r0, r3
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <_exit>:

void _exit (int status)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800299c:	f04f 31ff 	mov.w	r1, #4294967295
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f7ff ffe7 	bl	8002974 <_kill>
	while (1) {}		/* Make sure we hang here */
 80029a6:	e7fe      	b.n	80029a6 <_exit+0x12>

080029a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029b4:	2300      	movs	r3, #0
 80029b6:	617b      	str	r3, [r7, #20]
 80029b8:	e00a      	b.n	80029d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80029ba:	f3af 8000 	nop.w
 80029be:	4601      	mov	r1, r0
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	1c5a      	adds	r2, r3, #1
 80029c4:	60ba      	str	r2, [r7, #8]
 80029c6:	b2ca      	uxtb	r2, r1
 80029c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	3301      	adds	r3, #1
 80029ce:	617b      	str	r3, [r7, #20]
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	dbf0      	blt.n	80029ba <_read+0x12>
	}

return len;
 80029d8:	687b      	ldr	r3, [r7, #4]
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3718      	adds	r7, #24
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b086      	sub	sp, #24
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	60f8      	str	r0, [r7, #12]
 80029ea:	60b9      	str	r1, [r7, #8]
 80029ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ee:	2300      	movs	r3, #0
 80029f0:	617b      	str	r3, [r7, #20]
 80029f2:	e009      	b.n	8002a08 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	1c5a      	adds	r2, r3, #1
 80029f8:	60ba      	str	r2, [r7, #8]
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	3301      	adds	r3, #1
 8002a06:	617b      	str	r3, [r7, #20]
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	dbf1      	blt.n	80029f4 <_write+0x12>
	}
	return len;
 8002a10:	687b      	ldr	r3, [r7, #4]
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3718      	adds	r7, #24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <_close>:

int _close(int file)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
	return -1;
 8002a22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b083      	sub	sp, #12
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
 8002a3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a42:	605a      	str	r2, [r3, #4]
	return 0;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <_isatty>:

int _isatty(int file)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b083      	sub	sp, #12
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
	return 1;
 8002a5a:	2301      	movs	r3, #1
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
	return 0;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
	...

08002a84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a8c:	4a14      	ldr	r2, [pc, #80]	; (8002ae0 <_sbrk+0x5c>)
 8002a8e:	4b15      	ldr	r3, [pc, #84]	; (8002ae4 <_sbrk+0x60>)
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a98:	4b13      	ldr	r3, [pc, #76]	; (8002ae8 <_sbrk+0x64>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d102      	bne.n	8002aa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002aa0:	4b11      	ldr	r3, [pc, #68]	; (8002ae8 <_sbrk+0x64>)
 8002aa2:	4a12      	ldr	r2, [pc, #72]	; (8002aec <_sbrk+0x68>)
 8002aa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002aa6:	4b10      	ldr	r3, [pc, #64]	; (8002ae8 <_sbrk+0x64>)
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4413      	add	r3, r2
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d207      	bcs.n	8002ac4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ab4:	f013 f9ce 	bl	8015e54 <__errno>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	220c      	movs	r2, #12
 8002abc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002abe:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac2:	e009      	b.n	8002ad8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ac4:	4b08      	ldr	r3, [pc, #32]	; (8002ae8 <_sbrk+0x64>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002aca:	4b07      	ldr	r3, [pc, #28]	; (8002ae8 <_sbrk+0x64>)
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	4a05      	ldr	r2, [pc, #20]	; (8002ae8 <_sbrk+0x64>)
 8002ad4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3718      	adds	r7, #24
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	20080000 	.word	0x20080000
 8002ae4:	00000400 	.word	0x00000400
 8002ae8:	200059e8 	.word	0x200059e8
 8002aec:	200061c0 	.word	0x200061c0

08002af0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002af4:	4b08      	ldr	r3, [pc, #32]	; (8002b18 <SystemInit+0x28>)
 8002af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afa:	4a07      	ldr	r2, [pc, #28]	; (8002b18 <SystemInit+0x28>)
 8002afc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8002b04:	4b04      	ldr	r3, [pc, #16]	; (8002b18 <SystemInit+0x28>)
 8002b06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b0a:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b0c:	bf00      	nop
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	e000ed00 	.word	0xe000ed00

08002b1c <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b090      	sub	sp, #64	; 0x40
 8002b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b22:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b26:	2200      	movs	r2, #0
 8002b28:	601a      	str	r2, [r3, #0]
 8002b2a:	605a      	str	r2, [r3, #4]
 8002b2c:	609a      	str	r2, [r3, #8]
 8002b2e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002b30:	f107 031c 	add.w	r3, r7, #28
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	605a      	str	r2, [r3, #4]
 8002b3a:	609a      	str	r2, [r3, #8]
 8002b3c:	60da      	str	r2, [r3, #12]
 8002b3e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b40:	f107 0310 	add.w	r3, r7, #16
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	605a      	str	r2, [r3, #4]
 8002b4a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002b4c:	463b      	mov	r3, r7
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	605a      	str	r2, [r3, #4]
 8002b54:	609a      	str	r2, [r3, #8]
 8002b56:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b58:	4b35      	ldr	r3, [pc, #212]	; (8002c30 <MX_TIM2_Init+0x114>)
 8002b5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31999;
 8002b60:	4b33      	ldr	r3, [pc, #204]	; (8002c30 <MX_TIM2_Init+0x114>)
 8002b62:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8002b66:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b68:	4b31      	ldr	r3, [pc, #196]	; (8002c30 <MX_TIM2_Init+0x114>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002b6e:	4b30      	ldr	r3, [pc, #192]	; (8002c30 <MX_TIM2_Init+0x114>)
 8002b70:	f04f 32ff 	mov.w	r2, #4294967295
 8002b74:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b76:	4b2e      	ldr	r3, [pc, #184]	; (8002c30 <MX_TIM2_Init+0x114>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b7c:	4b2c      	ldr	r3, [pc, #176]	; (8002c30 <MX_TIM2_Init+0x114>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b82:	482b      	ldr	r0, [pc, #172]	; (8002c30 <MX_TIM2_Init+0x114>)
 8002b84:	f00c f846 	bl	800ec14 <HAL_TIM_Base_Init>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8002b8e:	f7ff fb59 	bl	8002244 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b96:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4824      	ldr	r0, [pc, #144]	; (8002c30 <MX_TIM2_Init+0x114>)
 8002ba0:	f00c fce6 	bl	800f570 <HAL_TIM_ConfigClockSource>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8002baa:	f7ff fb4b 	bl	8002244 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002bae:	4820      	ldr	r0, [pc, #128]	; (8002c30 <MX_TIM2_Init+0x114>)
 8002bb0:	f00c f970 	bl	800ee94 <HAL_TIM_IC_Init>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8002bba:	f7ff fb43 	bl	8002244 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002bbe:	2304      	movs	r3, #4
 8002bc0:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8002bc2:	2340      	movs	r3, #64	; 0x40
 8002bc4:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002bce:	f107 031c 	add.w	r3, r7, #28
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	4816      	ldr	r0, [pc, #88]	; (8002c30 <MX_TIM2_Init+0x114>)
 8002bd6:	f00c fd95 	bl	800f704 <HAL_TIM_SlaveConfigSynchro>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 8002be0:	f7ff fb30 	bl	8002244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002be4:	2300      	movs	r3, #0
 8002be6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002be8:	2300      	movs	r3, #0
 8002bea:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002bec:	f107 0310 	add.w	r3, r7, #16
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	480f      	ldr	r0, [pc, #60]	; (8002c30 <MX_TIM2_Init+0x114>)
 8002bf4:	f00d f904 	bl	800fe00 <HAL_TIMEx_MasterConfigSynchronization>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8002bfe:	f7ff fb21 	bl	8002244 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002c02:	2300      	movs	r3, #0
 8002c04:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002c06:	2301      	movs	r3, #1
 8002c08:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8002c0e:	230f      	movs	r3, #15
 8002c10:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002c12:	463b      	mov	r3, r7
 8002c14:	2200      	movs	r2, #0
 8002c16:	4619      	mov	r1, r3
 8002c18:	4805      	ldr	r0, [pc, #20]	; (8002c30 <MX_TIM2_Init+0x114>)
 8002c1a:	f00c fc0c 	bl	800f436 <HAL_TIM_IC_ConfigChannel>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <MX_TIM2_Init+0x10c>
  {
    Error_Handler();
 8002c24:	f7ff fb0e 	bl	8002244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002c28:	bf00      	nop
 8002c2a:	3740      	adds	r7, #64	; 0x40
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	200059ec 	.word	0x200059ec

08002c34 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b090      	sub	sp, #64	; 0x40
 8002c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c3e:	2200      	movs	r2, #0
 8002c40:	601a      	str	r2, [r3, #0]
 8002c42:	605a      	str	r2, [r3, #4]
 8002c44:	609a      	str	r2, [r3, #8]
 8002c46:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002c48:	f107 031c 	add.w	r3, r7, #28
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	605a      	str	r2, [r3, #4]
 8002c52:	609a      	str	r2, [r3, #8]
 8002c54:	60da      	str	r2, [r3, #12]
 8002c56:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c58:	f107 0310 	add.w	r3, r7, #16
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	605a      	str	r2, [r3, #4]
 8002c62:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002c64:	463b      	mov	r3, r7
 8002c66:	2200      	movs	r2, #0
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	605a      	str	r2, [r3, #4]
 8002c6c:	609a      	str	r2, [r3, #8]
 8002c6e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c70:	4b34      	ldr	r3, [pc, #208]	; (8002d44 <MX_TIM3_Init+0x110>)
 8002c72:	4a35      	ldr	r2, [pc, #212]	; (8002d48 <MX_TIM3_Init+0x114>)
 8002c74:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 31999;
 8002c76:	4b33      	ldr	r3, [pc, #204]	; (8002d44 <MX_TIM3_Init+0x110>)
 8002c78:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8002c7c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c7e:	4b31      	ldr	r3, [pc, #196]	; (8002d44 <MX_TIM3_Init+0x110>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002c84:	4b2f      	ldr	r3, [pc, #188]	; (8002d44 <MX_TIM3_Init+0x110>)
 8002c86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c8a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c8c:	4b2d      	ldr	r3, [pc, #180]	; (8002d44 <MX_TIM3_Init+0x110>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c92:	4b2c      	ldr	r3, [pc, #176]	; (8002d44 <MX_TIM3_Init+0x110>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c98:	482a      	ldr	r0, [pc, #168]	; (8002d44 <MX_TIM3_Init+0x110>)
 8002c9a:	f00b ffbb 	bl	800ec14 <HAL_TIM_Base_Init>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8002ca4:	f7ff face 	bl	8002244 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cac:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002cae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4823      	ldr	r0, [pc, #140]	; (8002d44 <MX_TIM3_Init+0x110>)
 8002cb6:	f00c fc5b 	bl	800f570 <HAL_TIM_ConfigClockSource>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8002cc0:	f7ff fac0 	bl	8002244 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002cc4:	481f      	ldr	r0, [pc, #124]	; (8002d44 <MX_TIM3_Init+0x110>)
 8002cc6:	f00c f8e5 	bl	800ee94 <HAL_TIM_IC_Init>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8002cd0:	f7ff fab8 	bl	8002244 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002cd4:	2304      	movs	r3, #4
 8002cd6:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8002cd8:	2340      	movs	r3, #64	; 0x40
 8002cda:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerFilter = 0;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8002ce0:	f107 031c 	add.w	r3, r7, #28
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4817      	ldr	r0, [pc, #92]	; (8002d44 <MX_TIM3_Init+0x110>)
 8002ce8:	f00c fd0c 	bl	800f704 <HAL_TIM_SlaveConfigSynchro>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 8002cf2:	f7ff faa7 	bl	8002244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002cfe:	f107 0310 	add.w	r3, r7, #16
 8002d02:	4619      	mov	r1, r3
 8002d04:	480f      	ldr	r0, [pc, #60]	; (8002d44 <MX_TIM3_Init+0x110>)
 8002d06:	f00d f87b 	bl	800fe00 <HAL_TIMEx_MasterConfigSynchronization>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8002d10:	f7ff fa98 	bl	8002244 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002d14:	2300      	movs	r3, #0
 8002d16:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8002d20:	230f      	movs	r3, #15
 8002d22:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002d24:	463b      	mov	r3, r7
 8002d26:	220c      	movs	r2, #12
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4806      	ldr	r0, [pc, #24]	; (8002d44 <MX_TIM3_Init+0x110>)
 8002d2c:	f00c fb83 	bl	800f436 <HAL_TIM_IC_ConfigChannel>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 8002d36:	f7ff fa85 	bl	8002244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002d3a:	bf00      	nop
 8002d3c:	3740      	adds	r7, #64	; 0x40
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	20005a38 	.word	0x20005a38
 8002d48:	40000400 	.word	0x40000400

08002d4c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002d50:	4b0e      	ldr	r3, [pc, #56]	; (8002d8c <MX_TIM14_Init+0x40>)
 8002d52:	4a0f      	ldr	r2, [pc, #60]	; (8002d90 <MX_TIM14_Init+0x44>)
 8002d54:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 10799;
 8002d56:	4b0d      	ldr	r3, [pc, #52]	; (8002d8c <MX_TIM14_Init+0x40>)
 8002d58:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8002d5c:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d5e:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <MX_TIM14_Init+0x40>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 49;
 8002d64:	4b09      	ldr	r3, [pc, #36]	; (8002d8c <MX_TIM14_Init+0x40>)
 8002d66:	2231      	movs	r2, #49	; 0x31
 8002d68:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d6a:	4b08      	ldr	r3, [pc, #32]	; (8002d8c <MX_TIM14_Init+0x40>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d70:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <MX_TIM14_Init+0x40>)
 8002d72:	2280      	movs	r2, #128	; 0x80
 8002d74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002d76:	4805      	ldr	r0, [pc, #20]	; (8002d8c <MX_TIM14_Init+0x40>)
 8002d78:	f00b ff4c 	bl	800ec14 <HAL_TIM_Base_Init>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8002d82:	f7ff fa5f 	bl	8002244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002d86:	bf00      	nop
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	20005a84 	.word	0x20005a84
 8002d90:	40002000 	.word	0x40002000

08002d94 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b08e      	sub	sp, #56	; 0x38
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	605a      	str	r2, [r3, #4]
 8002da6:	609a      	str	r2, [r3, #8]
 8002da8:	60da      	str	r2, [r3, #12]
 8002daa:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002db4:	d130      	bne.n	8002e18 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002db6:	4b50      	ldr	r3, [pc, #320]	; (8002ef8 <HAL_TIM_Base_MspInit+0x164>)
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	4a4f      	ldr	r2, [pc, #316]	; (8002ef8 <HAL_TIM_Base_MspInit+0x164>)
 8002dbc:	f043 0301 	orr.w	r3, r3, #1
 8002dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8002dc2:	4b4d      	ldr	r3, [pc, #308]	; (8002ef8 <HAL_TIM_Base_MspInit+0x164>)
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	623b      	str	r3, [r7, #32]
 8002dcc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dce:	4b4a      	ldr	r3, [pc, #296]	; (8002ef8 <HAL_TIM_Base_MspInit+0x164>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	4a49      	ldr	r2, [pc, #292]	; (8002ef8 <HAL_TIM_Base_MspInit+0x164>)
 8002dd4:	f043 0301 	orr.w	r3, r3, #1
 8002dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dda:	4b47      	ldr	r3, [pc, #284]	; (8002ef8 <HAL_TIM_Base_MspInit+0x164>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	61fb      	str	r3, [r7, #28]
 8002de4:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002de6:	2320      	movs	r3, #32
 8002de8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dea:	2302      	movs	r3, #2
 8002dec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dee:	2300      	movs	r3, #0
 8002df0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df2:	2300      	movs	r3, #0
 8002df4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002df6:	2301      	movs	r3, #1
 8002df8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dfe:	4619      	mov	r1, r3
 8002e00:	483e      	ldr	r0, [pc, #248]	; (8002efc <HAL_TIM_Base_MspInit+0x168>)
 8002e02:	f007 fb97 	bl	800a534 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002e06:	2200      	movs	r2, #0
 8002e08:	2100      	movs	r1, #0
 8002e0a:	201c      	movs	r0, #28
 8002e0c:	f006 ff37 	bl	8009c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e10:	201c      	movs	r0, #28
 8002e12:	f006 ff50 	bl	8009cb6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8002e16:	e06a      	b.n	8002eee <HAL_TIM_Base_MspInit+0x15a>
  else if(tim_baseHandle->Instance==TIM3)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a38      	ldr	r2, [pc, #224]	; (8002f00 <HAL_TIM_Base_MspInit+0x16c>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d14c      	bne.n	8002ebc <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e22:	4b35      	ldr	r3, [pc, #212]	; (8002ef8 <HAL_TIM_Base_MspInit+0x164>)
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	4a34      	ldr	r2, [pc, #208]	; (8002ef8 <HAL_TIM_Base_MspInit+0x164>)
 8002e28:	f043 0302 	orr.w	r3, r3, #2
 8002e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e2e:	4b32      	ldr	r3, [pc, #200]	; (8002ef8 <HAL_TIM_Base_MspInit+0x164>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	61bb      	str	r3, [r7, #24]
 8002e38:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e3a:	4b2f      	ldr	r3, [pc, #188]	; (8002ef8 <HAL_TIM_Base_MspInit+0x164>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	4a2e      	ldr	r2, [pc, #184]	; (8002ef8 <HAL_TIM_Base_MspInit+0x164>)
 8002e40:	f043 0302 	orr.w	r3, r3, #2
 8002e44:	6313      	str	r3, [r2, #48]	; 0x30
 8002e46:	4b2c      	ldr	r3, [pc, #176]	; (8002ef8 <HAL_TIM_Base_MspInit+0x164>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	617b      	str	r3, [r7, #20]
 8002e50:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e52:	4b29      	ldr	r3, [pc, #164]	; (8002ef8 <HAL_TIM_Base_MspInit+0x164>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	4a28      	ldr	r2, [pc, #160]	; (8002ef8 <HAL_TIM_Base_MspInit+0x164>)
 8002e58:	f043 0304 	orr.w	r3, r3, #4
 8002e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e5e:	4b26      	ldr	r3, [pc, #152]	; (8002ef8 <HAL_TIM_Base_MspInit+0x164>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	f003 0304 	and.w	r3, r3, #4
 8002e66:	613b      	str	r3, [r7, #16]
 8002e68:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ABS_SPARE2_Pin;
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e6e:	2302      	movs	r3, #2
 8002e70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e72:	2300      	movs	r3, #0
 8002e74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e76:	2300      	movs	r3, #0
 8002e78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ABS_SPARE2_GPIO_Port, &GPIO_InitStruct);
 8002e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e82:	4619      	mov	r1, r3
 8002e84:	481f      	ldr	r0, [pc, #124]	; (8002f04 <HAL_TIM_Base_MspInit+0x170>)
 8002e86:	f007 fb55 	bl	800a534 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002e8a:	2340      	movs	r3, #64	; 0x40
 8002e8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e8e:	2302      	movs	r3, #2
 8002e90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e92:	2300      	movs	r3, #0
 8002e94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e96:	2300      	movs	r3, #0
 8002e98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	4818      	ldr	r0, [pc, #96]	; (8002f08 <HAL_TIM_Base_MspInit+0x174>)
 8002ea6:	f007 fb45 	bl	800a534 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002eaa:	2200      	movs	r2, #0
 8002eac:	2100      	movs	r1, #0
 8002eae:	201d      	movs	r0, #29
 8002eb0:	f006 fee5 	bl	8009c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002eb4:	201d      	movs	r0, #29
 8002eb6:	f006 fefe 	bl	8009cb6 <HAL_NVIC_EnableIRQ>
}
 8002eba:	e018      	b.n	8002eee <HAL_TIM_Base_MspInit+0x15a>
  else if(tim_baseHandle->Instance==TIM14)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a12      	ldr	r2, [pc, #72]	; (8002f0c <HAL_TIM_Base_MspInit+0x178>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d113      	bne.n	8002eee <HAL_TIM_Base_MspInit+0x15a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002ec6:	4b0c      	ldr	r3, [pc, #48]	; (8002ef8 <HAL_TIM_Base_MspInit+0x164>)
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	4a0b      	ldr	r2, [pc, #44]	; (8002ef8 <HAL_TIM_Base_MspInit+0x164>)
 8002ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ed2:	4b09      	ldr	r3, [pc, #36]	; (8002ef8 <HAL_TIM_Base_MspInit+0x164>)
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002ede:	2200      	movs	r2, #0
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	202d      	movs	r0, #45	; 0x2d
 8002ee4:	f006 fecb 	bl	8009c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002ee8:	202d      	movs	r0, #45	; 0x2d
 8002eea:	f006 fee4 	bl	8009cb6 <HAL_NVIC_EnableIRQ>
}
 8002eee:	bf00      	nop
 8002ef0:	3738      	adds	r7, #56	; 0x38
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	40020000 	.word	0x40020000
 8002f00:	40000400 	.word	0x40000400
 8002f04:	40020400 	.word	0x40020400
 8002f08:	40020800 	.word	0x40020800
 8002f0c:	40002000 	.word	0x40002000

08002f10 <MX_UART7_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002f14:	4b14      	ldr	r3, [pc, #80]	; (8002f68 <MX_UART7_Init+0x58>)
 8002f16:	4a15      	ldr	r2, [pc, #84]	; (8002f6c <MX_UART7_Init+0x5c>)
 8002f18:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8002f1a:	4b13      	ldr	r3, [pc, #76]	; (8002f68 <MX_UART7_Init+0x58>)
 8002f1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f20:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002f22:	4b11      	ldr	r3, [pc, #68]	; (8002f68 <MX_UART7_Init+0x58>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002f28:	4b0f      	ldr	r3, [pc, #60]	; (8002f68 <MX_UART7_Init+0x58>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002f2e:	4b0e      	ldr	r3, [pc, #56]	; (8002f68 <MX_UART7_Init+0x58>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002f34:	4b0c      	ldr	r3, [pc, #48]	; (8002f68 <MX_UART7_Init+0x58>)
 8002f36:	220c      	movs	r2, #12
 8002f38:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002f3a:	4b0b      	ldr	r3, [pc, #44]	; (8002f68 <MX_UART7_Init+0x58>)
 8002f3c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002f40:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f42:	4b09      	ldr	r3, [pc, #36]	; (8002f68 <MX_UART7_Init+0x58>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f48:	4b07      	ldr	r3, [pc, #28]	; (8002f68 <MX_UART7_Init+0x58>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f4e:	4b06      	ldr	r3, [pc, #24]	; (8002f68 <MX_UART7_Init+0x58>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002f54:	4804      	ldr	r0, [pc, #16]	; (8002f68 <MX_UART7_Init+0x58>)
 8002f56:	f00c ffff 	bl	800ff58 <HAL_UART_Init>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <MX_UART7_Init+0x54>
  {
    Error_Handler();
 8002f60:	f7ff f970 	bl	8002244 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8002f64:	bf00      	nop
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	20005ad0 	.word	0x20005ad0
 8002f6c:	40007800 	.word	0x40007800

08002f70 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f74:	4b14      	ldr	r3, [pc, #80]	; (8002fc8 <MX_USART1_UART_Init+0x58>)
 8002f76:	4a15      	ldr	r2, [pc, #84]	; (8002fcc <MX_USART1_UART_Init+0x5c>)
 8002f78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002f7a:	4b13      	ldr	r3, [pc, #76]	; (8002fc8 <MX_USART1_UART_Init+0x58>)
 8002f7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f82:	4b11      	ldr	r3, [pc, #68]	; (8002fc8 <MX_USART1_UART_Init+0x58>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f88:	4b0f      	ldr	r3, [pc, #60]	; (8002fc8 <MX_USART1_UART_Init+0x58>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f8e:	4b0e      	ldr	r3, [pc, #56]	; (8002fc8 <MX_USART1_UART_Init+0x58>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f94:	4b0c      	ldr	r3, [pc, #48]	; (8002fc8 <MX_USART1_UART_Init+0x58>)
 8002f96:	220c      	movs	r2, #12
 8002f98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f9a:	4b0b      	ldr	r3, [pc, #44]	; (8002fc8 <MX_USART1_UART_Init+0x58>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fa0:	4b09      	ldr	r3, [pc, #36]	; (8002fc8 <MX_USART1_UART_Init+0x58>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fa6:	4b08      	ldr	r3, [pc, #32]	; (8002fc8 <MX_USART1_UART_Init+0x58>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fac:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <MX_USART1_UART_Init+0x58>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002fb2:	4805      	ldr	r0, [pc, #20]	; (8002fc8 <MX_USART1_UART_Init+0x58>)
 8002fb4:	f00c ffd0 	bl	800ff58 <HAL_UART_Init>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002fbe:	f7ff f941 	bl	8002244 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002fc2:	bf00      	nop
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	20005b58 	.word	0x20005b58
 8002fcc:	40011000 	.word	0x40011000

08002fd0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002fd4:	4b18      	ldr	r3, [pc, #96]	; (8003038 <MX_USART3_UART_Init+0x68>)
 8002fd6:	4a19      	ldr	r2, [pc, #100]	; (800303c <MX_USART3_UART_Init+0x6c>)
 8002fd8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8002fda:	4b17      	ldr	r3, [pc, #92]	; (8003038 <MX_USART3_UART_Init+0x68>)
 8002fdc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002fe0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002fe2:	4b15      	ldr	r3, [pc, #84]	; (8003038 <MX_USART3_UART_Init+0x68>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002fe8:	4b13      	ldr	r3, [pc, #76]	; (8003038 <MX_USART3_UART_Init+0x68>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002fee:	4b12      	ldr	r3, [pc, #72]	; (8003038 <MX_USART3_UART_Init+0x68>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002ff4:	4b10      	ldr	r3, [pc, #64]	; (8003038 <MX_USART3_UART_Init+0x68>)
 8002ff6:	220c      	movs	r2, #12
 8002ff8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ffa:	4b0f      	ldr	r3, [pc, #60]	; (8003038 <MX_USART3_UART_Init+0x68>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003000:	4b0d      	ldr	r3, [pc, #52]	; (8003038 <MX_USART3_UART_Init+0x68>)
 8003002:	2200      	movs	r2, #0
 8003004:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003006:	4b0c      	ldr	r3, [pc, #48]	; (8003038 <MX_USART3_UART_Init+0x68>)
 8003008:	2200      	movs	r2, #0
 800300a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 800300c:	4b0a      	ldr	r3, [pc, #40]	; (8003038 <MX_USART3_UART_Init+0x68>)
 800300e:	2230      	movs	r2, #48	; 0x30
 8003010:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8003012:	4b09      	ldr	r3, [pc, #36]	; (8003038 <MX_USART3_UART_Init+0x68>)
 8003014:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003018:	639a      	str	r2, [r3, #56]	; 0x38
  huart3.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800301a:	4b07      	ldr	r3, [pc, #28]	; (8003038 <MX_USART3_UART_Init+0x68>)
 800301c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003020:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003022:	4805      	ldr	r0, [pc, #20]	; (8003038 <MX_USART3_UART_Init+0x68>)
 8003024:	f00c ff98 	bl	800ff58 <HAL_UART_Init>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <MX_USART3_UART_Init+0x62>
  {
    Error_Handler();
 800302e:	f7ff f909 	bl	8002244 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003032:	bf00      	nop
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	20005be0 	.word	0x20005be0
 800303c:	40004800 	.word	0x40004800

08003040 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b0b2      	sub	sp, #200	; 0xc8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003048:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	605a      	str	r2, [r3, #4]
 8003052:	609a      	str	r2, [r3, #8]
 8003054:	60da      	str	r2, [r3, #12]
 8003056:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800305c:	2290      	movs	r2, #144	; 0x90
 800305e:	2100      	movs	r1, #0
 8003060:	4618      	mov	r0, r3
 8003062:	f012 ff29 	bl	8015eb8 <memset>
  if(uartHandle->Instance==UART7)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a69      	ldr	r2, [pc, #420]	; (8003210 <HAL_UART_MspInit+0x1d0>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d13e      	bne.n	80030ee <HAL_UART_MspInit+0xae>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8003070:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003074:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8003076:	2300      	movs	r3, #0
 8003078:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800307c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003080:	4618      	mov	r0, r3
 8003082:	f009 fbf5 	bl	800c870 <HAL_RCCEx_PeriphCLKConfig>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800308c:	f7ff f8da 	bl	8002244 <Error_Handler>
    }

    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8003090:	4b60      	ldr	r3, [pc, #384]	; (8003214 <HAL_UART_MspInit+0x1d4>)
 8003092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003094:	4a5f      	ldr	r2, [pc, #380]	; (8003214 <HAL_UART_MspInit+0x1d4>)
 8003096:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800309a:	6413      	str	r3, [r2, #64]	; 0x40
 800309c:	4b5d      	ldr	r3, [pc, #372]	; (8003214 <HAL_UART_MspInit+0x1d4>)
 800309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80030a4:	623b      	str	r3, [r7, #32]
 80030a6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80030a8:	4b5a      	ldr	r3, [pc, #360]	; (8003214 <HAL_UART_MspInit+0x1d4>)
 80030aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ac:	4a59      	ldr	r2, [pc, #356]	; (8003214 <HAL_UART_MspInit+0x1d4>)
 80030ae:	f043 0310 	orr.w	r3, r3, #16
 80030b2:	6313      	str	r3, [r2, #48]	; 0x30
 80030b4:	4b57      	ldr	r3, [pc, #348]	; (8003214 <HAL_UART_MspInit+0x1d4>)
 80030b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b8:	f003 0310 	and.w	r3, r3, #16
 80030bc:	61fb      	str	r3, [r7, #28]
 80030be:	69fb      	ldr	r3, [r7, #28]
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    PE9     ------> UART7_RTS
    PE10     ------> UART7_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80030c0:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80030c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c8:	2302      	movs	r3, #2
 80030ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ce:	2300      	movs	r3, #0
 80030d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030d4:	2303      	movs	r3, #3
 80030d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80030da:	2308      	movs	r3, #8
 80030dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80030e0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80030e4:	4619      	mov	r1, r3
 80030e6:	484c      	ldr	r0, [pc, #304]	; (8003218 <HAL_UART_MspInit+0x1d8>)
 80030e8:	f007 fa24 	bl	800a534 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80030ec:	e08b      	b.n	8003206 <HAL_UART_MspInit+0x1c6>
  else if(uartHandle->Instance==USART1)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a4a      	ldr	r2, [pc, #296]	; (800321c <HAL_UART_MspInit+0x1dc>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d13c      	bne.n	8003172 <HAL_UART_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80030f8:	2340      	movs	r3, #64	; 0x40
 80030fa:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80030fc:	2300      	movs	r3, #0
 80030fe:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003104:	4618      	mov	r0, r3
 8003106:	f009 fbb3 	bl	800c870 <HAL_RCCEx_PeriphCLKConfig>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8003110:	f7ff f898 	bl	8002244 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003114:	4b3f      	ldr	r3, [pc, #252]	; (8003214 <HAL_UART_MspInit+0x1d4>)
 8003116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003118:	4a3e      	ldr	r2, [pc, #248]	; (8003214 <HAL_UART_MspInit+0x1d4>)
 800311a:	f043 0310 	orr.w	r3, r3, #16
 800311e:	6453      	str	r3, [r2, #68]	; 0x44
 8003120:	4b3c      	ldr	r3, [pc, #240]	; (8003214 <HAL_UART_MspInit+0x1d4>)
 8003122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003124:	f003 0310 	and.w	r3, r3, #16
 8003128:	61bb      	str	r3, [r7, #24]
 800312a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800312c:	4b39      	ldr	r3, [pc, #228]	; (8003214 <HAL_UART_MspInit+0x1d4>)
 800312e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003130:	4a38      	ldr	r2, [pc, #224]	; (8003214 <HAL_UART_MspInit+0x1d4>)
 8003132:	f043 0302 	orr.w	r3, r3, #2
 8003136:	6313      	str	r3, [r2, #48]	; 0x30
 8003138:	4b36      	ldr	r3, [pc, #216]	; (8003214 <HAL_UART_MspInit+0x1d4>)
 800313a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	617b      	str	r3, [r7, #20]
 8003142:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003144:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003148:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314c:	2302      	movs	r3, #2
 800314e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003152:	2300      	movs	r3, #0
 8003154:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003158:	2303      	movs	r3, #3
 800315a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800315e:	2304      	movs	r3, #4
 8003160:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003164:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003168:	4619      	mov	r1, r3
 800316a:	482d      	ldr	r0, [pc, #180]	; (8003220 <HAL_UART_MspInit+0x1e0>)
 800316c:	f007 f9e2 	bl	800a534 <HAL_GPIO_Init>
}
 8003170:	e049      	b.n	8003206 <HAL_UART_MspInit+0x1c6>
  else if(uartHandle->Instance==USART3)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a2b      	ldr	r2, [pc, #172]	; (8003224 <HAL_UART_MspInit+0x1e4>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d144      	bne.n	8003206 <HAL_UART_MspInit+0x1c6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800317c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003180:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003182:	2300      	movs	r3, #0
 8003184:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003186:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800318a:	4618      	mov	r0, r3
 800318c:	f009 fb70 	bl	800c870 <HAL_RCCEx_PeriphCLKConfig>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <HAL_UART_MspInit+0x15a>
      Error_Handler();
 8003196:	f7ff f855 	bl	8002244 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800319a:	4b1e      	ldr	r3, [pc, #120]	; (8003214 <HAL_UART_MspInit+0x1d4>)
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	4a1d      	ldr	r2, [pc, #116]	; (8003214 <HAL_UART_MspInit+0x1d4>)
 80031a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031a4:	6413      	str	r3, [r2, #64]	; 0x40
 80031a6:	4b1b      	ldr	r3, [pc, #108]	; (8003214 <HAL_UART_MspInit+0x1d4>)
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031ae:	613b      	str	r3, [r7, #16]
 80031b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031b2:	4b18      	ldr	r3, [pc, #96]	; (8003214 <HAL_UART_MspInit+0x1d4>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b6:	4a17      	ldr	r2, [pc, #92]	; (8003214 <HAL_UART_MspInit+0x1d4>)
 80031b8:	f043 0304 	orr.w	r3, r3, #4
 80031bc:	6313      	str	r3, [r2, #48]	; 0x30
 80031be:	4b15      	ldr	r3, [pc, #84]	; (8003214 <HAL_UART_MspInit+0x1d4>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	f003 0304 	and.w	r3, r3, #4
 80031c6:	60fb      	str	r3, [r7, #12]
 80031c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80031ca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80031ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d2:	2302      	movs	r3, #2
 80031d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d8:	2300      	movs	r3, #0
 80031da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031de:	2303      	movs	r3, #3
 80031e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80031e4:	2307      	movs	r3, #7
 80031e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031ea:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80031ee:	4619      	mov	r1, r3
 80031f0:	480d      	ldr	r0, [pc, #52]	; (8003228 <HAL_UART_MspInit+0x1e8>)
 80031f2:	f007 f99f 	bl	800a534 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80031f6:	2200      	movs	r2, #0
 80031f8:	2100      	movs	r1, #0
 80031fa:	2027      	movs	r0, #39	; 0x27
 80031fc:	f006 fd3f 	bl	8009c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003200:	2027      	movs	r0, #39	; 0x27
 8003202:	f006 fd58 	bl	8009cb6 <HAL_NVIC_EnableIRQ>
}
 8003206:	bf00      	nop
 8003208:	37c8      	adds	r7, #200	; 0xc8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	40007800 	.word	0x40007800
 8003214:	40023800 	.word	0x40023800
 8003218:	40021000 	.word	0x40021000
 800321c:	40011000 	.word	0x40011000
 8003220:	40020400 	.word	0x40020400
 8003224:	40004800 	.word	0x40004800
 8003228:	40020800 	.word	0x40020800

0800322c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==UART7)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a1b      	ldr	r2, [pc, #108]	; (80032a8 <HAL_UART_MspDeInit+0x7c>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d10b      	bne.n	8003256 <HAL_UART_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN UART7_MspDeInit 0 */

  /* USER CODE END UART7_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART7_CLK_DISABLE();
 800323e:	4b1b      	ldr	r3, [pc, #108]	; (80032ac <HAL_UART_MspDeInit+0x80>)
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	4a1a      	ldr	r2, [pc, #104]	; (80032ac <HAL_UART_MspDeInit+0x80>)
 8003244:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003248:	6413      	str	r3, [r2, #64]	; 0x40
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    PE9     ------> UART7_RTS
    PE10     ------> UART7_CTS
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10);
 800324a:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 800324e:	4818      	ldr	r0, [pc, #96]	; (80032b0 <HAL_UART_MspDeInit+0x84>)
 8003250:	f007 fb1c 	bl	800a88c <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
}
 8003254:	e023      	b.n	800329e <HAL_UART_MspDeInit+0x72>
  else if(uartHandle->Instance==USART1)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a16      	ldr	r2, [pc, #88]	; (80032b4 <HAL_UART_MspDeInit+0x88>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d10b      	bne.n	8003278 <HAL_UART_MspDeInit+0x4c>
    __HAL_RCC_USART1_CLK_DISABLE();
 8003260:	4b12      	ldr	r3, [pc, #72]	; (80032ac <HAL_UART_MspDeInit+0x80>)
 8003262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003264:	4a11      	ldr	r2, [pc, #68]	; (80032ac <HAL_UART_MspDeInit+0x80>)
 8003266:	f023 0310 	bic.w	r3, r3, #16
 800326a:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_14|GPIO_PIN_15);
 800326c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8003270:	4811      	ldr	r0, [pc, #68]	; (80032b8 <HAL_UART_MspDeInit+0x8c>)
 8003272:	f007 fb0b 	bl	800a88c <HAL_GPIO_DeInit>
}
 8003276:	e012      	b.n	800329e <HAL_UART_MspDeInit+0x72>
  else if(uartHandle->Instance==USART3)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a0f      	ldr	r2, [pc, #60]	; (80032bc <HAL_UART_MspDeInit+0x90>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d10d      	bne.n	800329e <HAL_UART_MspDeInit+0x72>
    __HAL_RCC_USART3_CLK_DISABLE();
 8003282:	4b0a      	ldr	r3, [pc, #40]	; (80032ac <HAL_UART_MspDeInit+0x80>)
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	4a09      	ldr	r2, [pc, #36]	; (80032ac <HAL_UART_MspDeInit+0x80>)
 8003288:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800328c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11);
 800328e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8003292:	480b      	ldr	r0, [pc, #44]	; (80032c0 <HAL_UART_MspDeInit+0x94>)
 8003294:	f007 fafa 	bl	800a88c <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 8003298:	2027      	movs	r0, #39	; 0x27
 800329a:	f006 fd1a 	bl	8009cd2 <HAL_NVIC_DisableIRQ>
}
 800329e:	bf00      	nop
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40007800 	.word	0x40007800
 80032ac:	40023800 	.word	0x40023800
 80032b0:	40021000 	.word	0x40021000
 80032b4:	40011000 	.word	0x40011000
 80032b8:	40020400 	.word	0x40020400
 80032bc:	40004800 	.word	0x40004800
 80032c0:	40020800 	.word	0x40020800

080032c4 <MX_USB_OTG_FS_HCD_Init>:
HCD_HandleTypeDef hhcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_HCD_Init(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80032c8:	4b0e      	ldr	r3, [pc, #56]	; (8003304 <MX_USB_OTG_FS_HCD_Init+0x40>)
 80032ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80032ce:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80032d0:	4b0c      	ldr	r3, [pc, #48]	; (8003304 <MX_USB_OTG_FS_HCD_Init+0x40>)
 80032d2:	2208      	movs	r2, #8
 80032d4:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80032d6:	4b0b      	ldr	r3, [pc, #44]	; (8003304 <MX_USB_OTG_FS_HCD_Init+0x40>)
 80032d8:	2201      	movs	r2, #1
 80032da:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80032dc:	4b09      	ldr	r3, [pc, #36]	; (8003304 <MX_USB_OTG_FS_HCD_Init+0x40>)
 80032de:	2200      	movs	r2, #0
 80032e0:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80032e2:	4b08      	ldr	r3, [pc, #32]	; (8003304 <MX_USB_OTG_FS_HCD_Init+0x40>)
 80032e4:	2202      	movs	r2, #2
 80032e6:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80032e8:	4b06      	ldr	r3, [pc, #24]	; (8003304 <MX_USB_OTG_FS_HCD_Init+0x40>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80032ee:	4805      	ldr	r0, [pc, #20]	; (8003304 <MX_USB_OTG_FS_HCD_Init+0x40>)
 80032f0:	f007 fc0b 	bl	800ab0a <HAL_HCD_Init>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <MX_USB_OTG_FS_HCD_Init+0x3a>
  {
    Error_Handler();
 80032fa:	f7fe ffa3 	bl	8002244 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80032fe:	bf00      	nop
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	20005c68 	.word	0x20005c68

08003308 <HAL_HCD_MspInit>:

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b0ae      	sub	sp, #184	; 0xb8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003310:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]
 8003318:	605a      	str	r2, [r3, #4]
 800331a:	609a      	str	r2, [r3, #8]
 800331c:	60da      	str	r2, [r3, #12]
 800331e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003320:	f107 0314 	add.w	r3, r7, #20
 8003324:	2290      	movs	r2, #144	; 0x90
 8003326:	2100      	movs	r1, #0
 8003328:	4618      	mov	r0, r3
 800332a:	f012 fdc5 	bl	8015eb8 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003336:	d149      	bne.n	80033cc <HAL_HCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8003338:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800333c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800333e:	2300      	movs	r3, #0
 8003340:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003344:	f107 0314 	add.w	r3, r7, #20
 8003348:	4618      	mov	r0, r3
 800334a:	f009 fa91 	bl	800c870 <HAL_RCCEx_PeriphCLKConfig>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <HAL_HCD_MspInit+0x50>
    {
      Error_Handler();
 8003354:	f7fe ff76 	bl	8002244 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003358:	4b1e      	ldr	r3, [pc, #120]	; (80033d4 <HAL_HCD_MspInit+0xcc>)
 800335a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335c:	4a1d      	ldr	r2, [pc, #116]	; (80033d4 <HAL_HCD_MspInit+0xcc>)
 800335e:	f043 0301 	orr.w	r3, r3, #1
 8003362:	6313      	str	r3, [r2, #48]	; 0x30
 8003364:	4b1b      	ldr	r3, [pc, #108]	; (80033d4 <HAL_HCD_MspInit+0xcc>)
 8003366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	613b      	str	r3, [r7, #16]
 800336e:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003370:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003374:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003378:	2302      	movs	r3, #2
 800337a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337e:	2300      	movs	r3, #0
 8003380:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003384:	2303      	movs	r3, #3
 8003386:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800338a:	230a      	movs	r3, #10
 800338c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003390:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003394:	4619      	mov	r1, r3
 8003396:	4810      	ldr	r0, [pc, #64]	; (80033d8 <HAL_HCD_MspInit+0xd0>)
 8003398:	f007 f8cc 	bl	800a534 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800339c:	4b0d      	ldr	r3, [pc, #52]	; (80033d4 <HAL_HCD_MspInit+0xcc>)
 800339e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a0:	4a0c      	ldr	r2, [pc, #48]	; (80033d4 <HAL_HCD_MspInit+0xcc>)
 80033a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033a6:	6353      	str	r3, [r2, #52]	; 0x34
 80033a8:	4b0a      	ldr	r3, [pc, #40]	; (80033d4 <HAL_HCD_MspInit+0xcc>)
 80033aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	4b07      	ldr	r3, [pc, #28]	; (80033d4 <HAL_HCD_MspInit+0xcc>)
 80033b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b8:	4a06      	ldr	r2, [pc, #24]	; (80033d4 <HAL_HCD_MspInit+0xcc>)
 80033ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033be:	6453      	str	r3, [r2, #68]	; 0x44
 80033c0:	4b04      	ldr	r3, [pc, #16]	; (80033d4 <HAL_HCD_MspInit+0xcc>)
 80033c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033c8:	60bb      	str	r3, [r7, #8]
 80033ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80033cc:	bf00      	nop
 80033ce:	37b8      	adds	r7, #184	; 0xb8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	40023800 	.word	0x40023800
 80033d8:	40020000 	.word	0x40020000

080033dc <sdInit>:
		  statusRegister.SDCARD = SENSOR_OFF;
	  }
}

void sdInit(FATFS* fs)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
	  if (f_mount(fs, "", 1) == FR_OK)
 80033e4:	2201      	movs	r2, #1
 80033e6:	490e      	ldr	r1, [pc, #56]	; (8003420 <sdInit+0x44>)
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f011 ffb3 	bl	8015354 <f_mount>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d109      	bne.n	8003408 <sdInit+0x2c>
	  {
		  statusRegister.SDCARD = SENSOR_OK;
 80033f4:	4a0b      	ldr	r2, [pc, #44]	; (8003424 <sdInit+0x48>)
 80033f6:	7813      	ldrb	r3, [r2, #0]
 80033f8:	2101      	movs	r1, #1
 80033fa:	f361 0302 	bfi	r3, r1, #0, #3
 80033fe:	7013      	strb	r3, [r2, #0]
			#if DEBUG
			  printf("SDCard mounting success!\n");
 8003400:	4809      	ldr	r0, [pc, #36]	; (8003428 <sdInit+0x4c>)
 8003402:	f013 fd25 	bl	8016e50 <puts>
		  statusRegister.SDCARD = SENSOR_INIT_FAIL;
		  printf("SDCard mounting fail!\n");

		  //sdMountFailHandler();
	  }
}
 8003406:	e007      	b.n	8003418 <sdInit+0x3c>
		  statusRegister.SDCARD = SENSOR_INIT_FAIL;
 8003408:	4a06      	ldr	r2, [pc, #24]	; (8003424 <sdInit+0x48>)
 800340a:	7813      	ldrb	r3, [r2, #0]
 800340c:	f043 0307 	orr.w	r3, r3, #7
 8003410:	7013      	strb	r3, [r2, #0]
		  printf("SDCard mounting fail!\n");
 8003412:	4806      	ldr	r0, [pc, #24]	; (800342c <sdInit+0x50>)
 8003414:	f013 fd1c 	bl	8016e50 <puts>
}
 8003418:	bf00      	nop
 800341a:	3708      	adds	r7, #8
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	0801ae80 	.word	0x0801ae80
 8003424:	200057e8 	.word	0x200057e8
 8003428:	0801ae84 	.word	0x0801ae84
 800342c:	0801aea0 	.word	0x0801aea0

08003430 <openAllFiles>:
FIL *EcuFile;
FIL *StatsFile;
char ecuPath[] = "EcuData.csv";
void openAllFiles()
{
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0

	if(statusRegister.SDCARD == SENSOR_OK)
 8003434:	4b3a      	ldr	r3, [pc, #232]	; (8003520 <openAllFiles+0xf0>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b01      	cmp	r3, #1
 8003440:	d16b      	bne.n	800351a <openAllFiles+0xea>
	{
		if(_dataHandler[GPS].isActive){
 8003442:	4b38      	ldr	r3, [pc, #224]	; (8003524 <openAllFiles+0xf4>)
 8003444:	7c1b      	ldrb	r3, [r3, #16]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	d006      	beq.n	800345e <openAllFiles+0x2e>
			openFile(gpsSensor.File,gpsSensor.path,FILE_DEFAULT_MODE);
 8003450:	4b35      	ldr	r3, [pc, #212]	; (8003528 <openAllFiles+0xf8>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2232      	movs	r2, #50	; 0x32
 8003456:	4935      	ldr	r1, [pc, #212]	; (800352c <openAllFiles+0xfc>)
 8003458:	4618      	mov	r0, r3
 800345a:	f000 f98d 	bl	8003778 <openFile>
		}
		EcuFile = (FIL*)malloc(sizeof(FIL));
 800345e:	f241 0030 	movw	r0, #4144	; 0x1030
 8003462:	f012 fd21 	bl	8015ea8 <malloc>
 8003466:	4603      	mov	r3, r0
 8003468:	461a      	mov	r2, r3
 800346a:	4b31      	ldr	r3, [pc, #196]	; (8003530 <openAllFiles+0x100>)
 800346c:	601a      	str	r2, [r3, #0]
		openFile(EcuFile,ecuPath,FILE_DEFAULT_MODE);
 800346e:	4b30      	ldr	r3, [pc, #192]	; (8003530 <openAllFiles+0x100>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2232      	movs	r2, #50	; 0x32
 8003474:	492f      	ldr	r1, [pc, #188]	; (8003534 <openAllFiles+0x104>)
 8003476:	4618      	mov	r0, r3
 8003478:	f000 f97e 	bl	8003778 <openFile>
		if(_dataHandler[TELEBACK].isActive){
 800347c:	4b29      	ldr	r3, [pc, #164]	; (8003524 <openAllFiles+0xf4>)
 800347e:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b00      	cmp	r3, #0
 800348a:	d006      	beq.n	800349a <openAllFiles+0x6a>
			openFile(teleData.File,teleData.path,FILE_DEFAULT_MODE);
 800348c:	4b2a      	ldr	r3, [pc, #168]	; (8003538 <openAllFiles+0x108>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2232      	movs	r2, #50	; 0x32
 8003492:	492a      	ldr	r1, [pc, #168]	; (800353c <openAllFiles+0x10c>)
 8003494:	4618      	mov	r0, r3
 8003496:	f000 f96f 	bl	8003778 <openFile>
		}

		openFile(IMUInnerSensor.File, IMUInnerSensor.path, FILE_DEFAULT_MODE);
 800349a:	4b29      	ldr	r3, [pc, #164]	; (8003540 <openAllFiles+0x110>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2232      	movs	r2, #50	; 0x32
 80034a0:	4928      	ldr	r1, [pc, #160]	; (8003544 <openAllFiles+0x114>)
 80034a2:	4618      	mov	r0, r3
 80034a4:	f000 f968 	bl	8003778 <openFile>

		if(statusRegister.MLXLF == SENSOR_OK){
 80034a8:	4b1d      	ldr	r3, [pc, #116]	; (8003520 <openAllFiles+0xf0>)
 80034aa:	785b      	ldrb	r3, [r3, #1]
 80034ac:	f003 030e 	and.w	r3, r3, #14
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d106      	bne.n	80034c4 <openAllFiles+0x94>
			openFile(mlxLFSensor.File, mlxLFSensor.path, FILE_DEFAULT_MODE);
 80034b6:	4b24      	ldr	r3, [pc, #144]	; (8003548 <openAllFiles+0x118>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2232      	movs	r2, #50	; 0x32
 80034bc:	4923      	ldr	r1, [pc, #140]	; (800354c <openAllFiles+0x11c>)
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 f95a 	bl	8003778 <openFile>
		}
		if(statusRegister.VSSLF == SENSOR_OK){
 80034c4:	4b16      	ldr	r3, [pc, #88]	; (8003520 <openAllFiles+0xf0>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 80034cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034d0:	d106      	bne.n	80034e0 <openAllFiles+0xb0>
			openFile(absLFSensor.File, absLFSensor.path, FILE_DEFAULT_MODE);
 80034d2:	4b1f      	ldr	r3, [pc, #124]	; (8003550 <openAllFiles+0x120>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2232      	movs	r2, #50	; 0x32
 80034d8:	491e      	ldr	r1, [pc, #120]	; (8003554 <openAllFiles+0x124>)
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 f94c 	bl	8003778 <openFile>
		}
		if(statusRegister.DamperLF == SENSOR_OK){
 80034e0:	4b0f      	ldr	r3, [pc, #60]	; (8003520 <openAllFiles+0xf0>)
 80034e2:	78db      	ldrb	r3, [r3, #3]
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d106      	bne.n	80034fc <openAllFiles+0xcc>
			openFile(damperLFSensor.File, damperLFSensor.path, FILE_DEFAULT_MODE);
 80034ee:	4b1a      	ldr	r3, [pc, #104]	; (8003558 <openAllFiles+0x128>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2232      	movs	r2, #50	; 0x32
 80034f4:	4919      	ldr	r1, [pc, #100]	; (800355c <openAllFiles+0x12c>)
 80034f6:	4618      	mov	r0, r3
 80034f8:	f000 f93e 	bl	8003778 <openFile>
		}
		StatsFile = (FIL*)malloc(sizeof(FIL));
 80034fc:	f241 0030 	movw	r0, #4144	; 0x1030
 8003500:	f012 fcd2 	bl	8015ea8 <malloc>
 8003504:	4603      	mov	r3, r0
 8003506:	461a      	mov	r2, r3
 8003508:	4b15      	ldr	r3, [pc, #84]	; (8003560 <openAllFiles+0x130>)
 800350a:	601a      	str	r2, [r3, #0]
		openFile(StatsFile,"Stats.txt",FILE_DEFAULT_MODE);
 800350c:	4b14      	ldr	r3, [pc, #80]	; (8003560 <openAllFiles+0x130>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2232      	movs	r2, #50	; 0x32
 8003512:	4914      	ldr	r1, [pc, #80]	; (8003564 <openAllFiles+0x134>)
 8003514:	4618      	mov	r0, r3
 8003516:	f000 f92f 	bl	8003778 <openFile>

	}
}
 800351a:	bf00      	nop
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	200057e8 	.word	0x200057e8
 8003524:	20000000 	.word	0x20000000
 8003528:	200017a0 	.word	0x200017a0
 800352c:	200017a4 	.word	0x200017a4
 8003530:	20005f6c 	.word	0x20005f6c
 8003534:	20000108 	.word	0x20000108
 8003538:	2000591c 	.word	0x2000591c
 800353c:	20005920 	.word	0x20005920
 8003540:	20005740 	.word	0x20005740
 8003544:	20005744 	.word	0x20005744
 8003548:	200019cc 	.word	0x200019cc
 800354c:	200019d0 	.word	0x200019d0
 8003550:	20001700 	.word	0x20001700
 8003554:	20001704 	.word	0x20001704
 8003558:	2000582c 	.word	0x2000582c
 800355c:	20005830 	.word	0x20005830
 8003560:	20005f70 	.word	0x20005f70
 8003564:	0801aeb8 	.word	0x0801aeb8

08003568 <createHeaders>:
int createHeaders(FIL * file,char * path)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b08c      	sub	sp, #48	; 0x30
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
	FRESULT fres;
	UINT bytesWritten = 0;
 8003572:	2300      	movs	r3, #0
 8003574:	627b      	str	r3, [r7, #36]	; 0x24

	fres = f_write(file,"timestamp,",strlen("timestamp,"),&bytesWritten);
 8003576:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800357a:	220a      	movs	r2, #10
 800357c:	496c      	ldr	r1, [pc, #432]	; (8003730 <createHeaders+0x1c8>)
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f012 f8fa 	bl	8015778 <f_write>
 8003584:	4603      	mov	r3, r0
 8003586:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if(fres != FR_OK){
 800358a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800358e:	2b00      	cmp	r3, #0
 8003590:	d006      	beq.n	80035a0 <createHeaders+0x38>
		printf("Error while creating %s header",path);
 8003592:	6839      	ldr	r1, [r7, #0]
 8003594:	4867      	ldr	r0, [pc, #412]	; (8003734 <createHeaders+0x1cc>)
 8003596:	f013 fbbf 	bl	8016d18 <iprintf>
		return SD_WRITE_ERROR;
 800359a:	f04f 33ff 	mov.w	r3, #4294967295
 800359e:	e0c3      	b.n	8003728 <createHeaders+0x1c0>
	}

	if(strstr(path,"IMU") != NULL){
 80035a0:	4965      	ldr	r1, [pc, #404]	; (8003738 <createHeaders+0x1d0>)
 80035a2:	6838      	ldr	r0, [r7, #0]
 80035a4:	f013 fc9a 	bl	8016edc <strstr>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00a      	beq.n	80035c4 <createHeaders+0x5c>
		fres = f_write(file, IMU_HEADER, strlen(IMU_HEADER), &bytesWritten);
 80035ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035b2:	2228      	movs	r2, #40	; 0x28
 80035b4:	4961      	ldr	r1, [pc, #388]	; (800373c <createHeaders+0x1d4>)
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f012 f8de 	bl	8015778 <f_write>
 80035bc:	4603      	mov	r3, r0
 80035be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80035c2:	e09b      	b.n	80036fc <createHeaders+0x194>
	}else if(strstr(path,"MLX")!= NULL){
 80035c4:	495e      	ldr	r1, [pc, #376]	; (8003740 <createHeaders+0x1d8>)
 80035c6:	6838      	ldr	r0, [r7, #0]
 80035c8:	f013 fc88 	bl	8016edc <strstr>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d049      	beq.n	8003666 <createHeaders+0xfe>
		char headerText[25];
		fres =  f_write(file, "ID,", strlen("ID,"), &bytesWritten);
 80035d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035d6:	2203      	movs	r2, #3
 80035d8:	495a      	ldr	r1, [pc, #360]	; (8003744 <createHeaders+0x1dc>)
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f012 f8cc 	bl	8015778 <f_write>
 80035e0:	4603      	mov	r3, r0
 80035e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for(int i=0;i<784;i++){
 80035e6:	2300      	movs	r3, #0
 80035e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80035ea:	e037      	b.n	800365c <createHeaders+0xf4>
			sprintf(headerText,"float_%d,", i);
 80035ec:	f107 0308 	add.w	r3, r7, #8
 80035f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035f2:	4955      	ldr	r1, [pc, #340]	; (8003748 <createHeaders+0x1e0>)
 80035f4:	4618      	mov	r0, r3
 80035f6:	f013 fc49 	bl	8016e8c <siprintf>
			fres = fres | f_write(file, headerText, strlen(headerText), &bytesWritten);
 80035fa:	f107 0308 	add.w	r3, r7, #8
 80035fe:	4618      	mov	r0, r3
 8003600:	f7fc fe1e 	bl	8000240 <strlen>
 8003604:	4602      	mov	r2, r0
 8003606:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800360a:	f107 0108 	add.w	r1, r7, #8
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f012 f8b2 	bl	8015778 <f_write>
 8003614:	4603      	mov	r3, r0
 8003616:	461a      	mov	r2, r3
 8003618:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800361c:	4313      	orrs	r3, r2
 800361e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			sprintf(headerText,"id,");
 8003622:	f107 0308 	add.w	r3, r7, #8
 8003626:	4949      	ldr	r1, [pc, #292]	; (800374c <createHeaders+0x1e4>)
 8003628:	4618      	mov	r0, r3
 800362a:	f013 fc2f 	bl	8016e8c <siprintf>
			fres =  fres | f_write(file, headerText, strlen(headerText), &bytesWritten);
 800362e:	f107 0308 	add.w	r3, r7, #8
 8003632:	4618      	mov	r0, r3
 8003634:	f7fc fe04 	bl	8000240 <strlen>
 8003638:	4602      	mov	r2, r0
 800363a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800363e:	f107 0108 	add.w	r1, r7, #8
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f012 f898 	bl	8015778 <f_write>
 8003648:	4603      	mov	r3, r0
 800364a:	461a      	mov	r2, r3
 800364c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003650:	4313      	orrs	r3, r2
 8003652:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for(int i=0;i<784;i++){
 8003656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003658:	3301      	adds	r3, #1
 800365a:	62bb      	str	r3, [r7, #40]	; 0x28
 800365c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365e:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8003662:	dbc3      	blt.n	80035ec <createHeaders+0x84>
 8003664:	e04a      	b.n	80036fc <createHeaders+0x194>
		}

	}else if(strstr(path,"ABS")!= NULL){
 8003666:	493a      	ldr	r1, [pc, #232]	; (8003750 <createHeaders+0x1e8>)
 8003668:	6838      	ldr	r0, [r7, #0]
 800366a:	f013 fc37 	bl	8016edc <strstr>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00a      	beq.n	800368a <createHeaders+0x122>
		fres = f_write(file, "ID,speed\r\n", strlen("ID,speed\r\n"), &bytesWritten);
 8003674:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003678:	220a      	movs	r2, #10
 800367a:	4936      	ldr	r1, [pc, #216]	; (8003754 <createHeaders+0x1ec>)
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f012 f87b 	bl	8015778 <f_write>
 8003682:	4603      	mov	r3, r0
 8003684:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003688:	e038      	b.n	80036fc <createHeaders+0x194>
	}else if(strstr(path,"DAMP")!= NULL){
 800368a:	4933      	ldr	r1, [pc, #204]	; (8003758 <createHeaders+0x1f0>)
 800368c:	6838      	ldr	r0, [r7, #0]
 800368e:	f013 fc25 	bl	8016edc <strstr>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00a      	beq.n	80036ae <createHeaders+0x146>
		fres = f_write(file, "ID,delta\r\n", strlen("ID,delta\r\n"), &bytesWritten);
 8003698:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800369c:	220a      	movs	r2, #10
 800369e:	492f      	ldr	r1, [pc, #188]	; (800375c <createHeaders+0x1f4>)
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f012 f869 	bl	8015778 <f_write>
 80036a6:	4603      	mov	r3, r0
 80036a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80036ac:	e026      	b.n	80036fc <createHeaders+0x194>
	}else if(strstr(path,"WHEEL")!= NULL){
 80036ae:	492c      	ldr	r1, [pc, #176]	; (8003760 <createHeaders+0x1f8>)
 80036b0:	6838      	ldr	r0, [r7, #0]
 80036b2:	f013 fc13 	bl	8016edc <strstr>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00a      	beq.n	80036d2 <createHeaders+0x16a>
		fres = f_write(file, "ID,angle\r\n", strlen("ID,angle\r\n"), &bytesWritten);
 80036bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036c0:	220a      	movs	r2, #10
 80036c2:	4928      	ldr	r1, [pc, #160]	; (8003764 <createHeaders+0x1fc>)
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f012 f857 	bl	8015778 <f_write>
 80036ca:	4603      	mov	r3, r0
 80036cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80036d0:	e014      	b.n	80036fc <createHeaders+0x194>
	}else if(strstr(path,"GPS")!= NULL){
 80036d2:	4925      	ldr	r1, [pc, #148]	; (8003768 <createHeaders+0x200>)
 80036d4:	6838      	ldr	r0, [r7, #0]
 80036d6:	f013 fc01 	bl	8016edc <strstr>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00a      	beq.n	80036f6 <createHeaders+0x18e>
		fres = f_write(file, "LOG,utc,pos status,lat,lat dir,lon,lon dir,speed,,track,date,,mag var,var dir,mode ind,chs,ter\r\n", strlen("LOG,utc,pos status,lat,lat dir,lon,lon dir,speed,,track,date,,mag var,var dir,mode ind,chs,ter\r\n"), &bytesWritten);
 80036e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036e4:	2260      	movs	r2, #96	; 0x60
 80036e6:	4921      	ldr	r1, [pc, #132]	; (800376c <createHeaders+0x204>)
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f012 f845 	bl	8015778 <f_write>
 80036ee:	4603      	mov	r3, r0
 80036f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80036f4:	e002      	b.n	80036fc <createHeaders+0x194>
	}else
	{
		return WRONG_PARAMETER;
 80036f6:	f06f 0302 	mvn.w	r3, #2
 80036fa:	e015      	b.n	8003728 <createHeaders+0x1c0>
	}

	if(fres != FR_OK){
 80036fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003700:	2b00      	cmp	r3, #0
 8003702:	d006      	beq.n	8003712 <createHeaders+0x1aa>
		printf("Error while creating %s header\n",path);
 8003704:	6839      	ldr	r1, [r7, #0]
 8003706:	481a      	ldr	r0, [pc, #104]	; (8003770 <createHeaders+0x208>)
 8003708:	f013 fb06 	bl	8016d18 <iprintf>
		return SD_WRITE_ERROR;
 800370c:	f04f 33ff 	mov.w	r3, #4294967295
 8003710:	e00a      	b.n	8003728 <createHeaders+0x1c0>
	}
	fres =  f_write(file, "\n", strlen("\n"), &bytesWritten);
 8003712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003716:	2201      	movs	r2, #1
 8003718:	4916      	ldr	r1, [pc, #88]	; (8003774 <createHeaders+0x20c>)
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f012 f82c 	bl	8015778 <f_write>
 8003720:	4603      	mov	r3, r0
 8003722:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	return SD_OK;
 8003726:	2301      	movs	r3, #1

}
 8003728:	4618      	mov	r0, r3
 800372a:	3730      	adds	r7, #48	; 0x30
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	0801aec4 	.word	0x0801aec4
 8003734:	0801aed0 	.word	0x0801aed0
 8003738:	0801aef0 	.word	0x0801aef0
 800373c:	0801b2c0 	.word	0x0801b2c0
 8003740:	0801aef4 	.word	0x0801aef4
 8003744:	0801aef8 	.word	0x0801aef8
 8003748:	0801aefc 	.word	0x0801aefc
 800374c:	0801af08 	.word	0x0801af08
 8003750:	0801af0c 	.word	0x0801af0c
 8003754:	0801af10 	.word	0x0801af10
 8003758:	0801af1c 	.word	0x0801af1c
 800375c:	0801af24 	.word	0x0801af24
 8003760:	0801af30 	.word	0x0801af30
 8003764:	0801af38 	.word	0x0801af38
 8003768:	0801af44 	.word	0x0801af44
 800376c:	0801af48 	.word	0x0801af48
 8003770:	0801afac 	.word	0x0801afac
 8003774:	0801afcc 	.word	0x0801afcc

08003778 <openFile>:


int openFile(FIL * file, char * path, BYTE mode)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b0a8      	sub	sp, #160	; 0xa0
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	4613      	mov	r3, r2
 8003784:	71fb      	strb	r3, [r7, #7]
	FILINFO fInfo;
	FRESULT fres = f_stat(path, &fInfo);
 8003786:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800378a:	4619      	mov	r1, r3
 800378c:	68b8      	ldr	r0, [r7, #8]
 800378e:	f012 fa05 	bl	8015b9c <f_stat>
 8003792:	4603      	mov	r3, r0
 8003794:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	char newFileName[40];
	char originalPath[20];
	strcpy(originalPath,path);
 8003798:	f107 0318 	add.w	r3, r7, #24
 800379c:	68b9      	ldr	r1, [r7, #8]
 800379e:	4618      	mov	r0, r3
 80037a0:	f013 fb94 	bl	8016ecc <strcpy>
	int i = 1;
 80037a4:	2301      	movs	r3, #1
 80037a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	originalPath[strlen(path)-4] = 0;
 80037aa:	68b8      	ldr	r0, [r7, #8]
 80037ac:	f7fc fd48 	bl	8000240 <strlen>
 80037b0:	4603      	mov	r3, r0
 80037b2:	3b04      	subs	r3, #4
 80037b4:	33a0      	adds	r3, #160	; 0xa0
 80037b6:	443b      	add	r3, r7
 80037b8:	2200      	movs	r2, #0
 80037ba:	f803 2c88 	strb.w	r2, [r3, #-136]
	while(fres == FR_OK){
 80037be:	e018      	b.n	80037f2 <openFile+0x7a>

        sprintf(newFileName,"%s-%d.csv",originalPath,i);
 80037c0:	f107 0218 	add.w	r2, r7, #24
 80037c4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80037c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037cc:	493b      	ldr	r1, [pc, #236]	; (80038bc <openFile+0x144>)
 80037ce:	f013 fb5d 	bl	8016e8c <siprintf>
		fres = f_stat(_TEXT(newFileName), &fInfo);
 80037d2:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80037d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037da:	4611      	mov	r1, r2
 80037dc:	4618      	mov	r0, r3
 80037de:	f012 f9dd 	bl	8015b9c <f_stat>
 80037e2:	4603      	mov	r3, r0
 80037e4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		i++;
 80037e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037ec:	3301      	adds	r3, #1
 80037ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	while(fres == FR_OK){
 80037f2:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d0e2      	beq.n	80037c0 <openFile+0x48>
	}
	if(i > 1)
 80037fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037fe:	2b01      	cmp	r3, #1
 8003800:	dd06      	ble.n	8003810 <openFile+0x98>
		sprintf(path,"%s",newFileName);
 8003802:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003806:	461a      	mov	r2, r3
 8003808:	492d      	ldr	r1, [pc, #180]	; (80038c0 <openFile+0x148>)
 800380a:	68b8      	ldr	r0, [r7, #8]
 800380c:	f013 fb3e 	bl	8016e8c <siprintf>
	if(fres == FR_OK)
 8003810:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8003814:	2b00      	cmp	r3, #0
 8003816:	d122      	bne.n	800385e <openFile+0xe6>
	{
		fres = f_open(file, _TEXT(path), mode);
 8003818:	79fb      	ldrb	r3, [r7, #7]
 800381a:	461a      	mov	r2, r3
 800381c:	68b9      	ldr	r1, [r7, #8]
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f011 fdde 	bl	80153e0 <f_open>
 8003824:	4603      	mov	r3, r0
 8003826:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		UINT bw;
		fres |= f_write(file,"---------------Restart------------------\r\n",strlen("---------------Restart------------------\r\n"),&bw);
 800382a:	f107 0314 	add.w	r3, r7, #20
 800382e:	222a      	movs	r2, #42	; 0x2a
 8003830:	4924      	ldr	r1, [pc, #144]	; (80038c4 <openFile+0x14c>)
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f011 ffa0 	bl	8015778 <f_write>
 8003838:	4603      	mov	r3, r0
 800383a:	461a      	mov	r2, r3
 800383c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8003840:	4313      	orrs	r3, r2
 8003842:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		if(fres == FR_OK)
 8003846:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800384a:	2b00      	cmp	r3, #0
 800384c:	d104      	bne.n	8003858 <openFile+0xe0>
		{
			printf("Opening file: %s succeeded\n", path);
 800384e:	68b9      	ldr	r1, [r7, #8]
 8003850:	481d      	ldr	r0, [pc, #116]	; (80038c8 <openFile+0x150>)
 8003852:	f013 fa61 	bl	8016d18 <iprintf>
 8003856:	e028      	b.n	80038aa <openFile+0x132>
		}else
		{
			return SD_READ_ERROR;
 8003858:	f06f 0301 	mvn.w	r3, #1
 800385c:	e029      	b.n	80038b2 <openFile+0x13a>
		}

	}else if(fres == FR_NO_FILE)
 800385e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8003862:	2b04      	cmp	r3, #4
 8003864:	d121      	bne.n	80038aa <openFile+0x132>
	{
		fres = f_open(file, _TEXT(path), mode);
 8003866:	79fb      	ldrb	r3, [r7, #7]
 8003868:	461a      	mov	r2, r3
 800386a:	68b9      	ldr	r1, [r7, #8]
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f011 fdb7 	bl	80153e0 <f_open>
 8003872:	4603      	mov	r3, r0
 8003874:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		if(fres == FR_OK)
 8003878:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800387c:	2b00      	cmp	r3, #0
 800387e:	d111      	bne.n	80038a4 <openFile+0x12c>
		{
			int res = createHeaders(file,path);
 8003880:	68b9      	ldr	r1, [r7, #8]
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f7ff fe70 	bl	8003568 <createHeaders>
 8003888:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			if(res != SD_OK)
 800388c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003890:	2b01      	cmp	r3, #1
 8003892:	d002      	beq.n	800389a <openFile+0x122>
			{
				return res;
 8003894:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003898:	e00b      	b.n	80038b2 <openFile+0x13a>
			}

			printf("No file: %s, created new\n", path);
 800389a:	68b9      	ldr	r1, [r7, #8]
 800389c:	480b      	ldr	r0, [pc, #44]	; (80038cc <openFile+0x154>)
 800389e:	f013 fa3b 	bl	8016d18 <iprintf>
 80038a2:	e002      	b.n	80038aa <openFile+0x132>

		}else
		{
			return SD_READ_ERROR;
 80038a4:	f06f 0301 	mvn.w	r3, #1
 80038a8:	e003      	b.n	80038b2 <openFile+0x13a>
		}
	}
	f_sync(file);
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f012 f8f8 	bl	8015aa0 <f_sync>
	return SD_OK;
 80038b0:	2301      	movs	r3, #1


}
 80038b2:	4618      	mov	r0, r3
 80038b4:	37a0      	adds	r7, #160	; 0xa0
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	0801afd0 	.word	0x0801afd0
 80038c0:	0801afdc 	.word	0x0801afdc
 80038c4:	0801afe0 	.word	0x0801afe0
 80038c8:	0801b00c 	.word	0x0801b00c
 80038cc:	0801b028 	.word	0x0801b028

080038d0 <ecuSaveData>:
	}

	f_write(StatsFile, dataBuffer,dataLength,&bw);
	f_sync(StatsFile);
}
void ecuSaveData(EcumasterData ecu){
 80038d0:	b084      	sub	sp, #16
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b0c2      	sub	sp, #264	; 0x108
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	f507 7c88 	add.w	ip, r7, #272	; 0x110
 80038dc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	UINT bw;
	char dataBuffer[255];
	int dataLength = sprintf(dataBuffer, "%d,", HAL_GetTick());
 80038e0:	f004 fe16 	bl	8008510 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	463b      	mov	r3, r7
 80038e8:	4913      	ldr	r1, [pc, #76]	; (8003938 <ecuSaveData+0x68>)
 80038ea:	4618      	mov	r0, r3
 80038ec:	f013 face 	bl	8016e8c <siprintf>
 80038f0:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
	f_write(EcuFile, dataBuffer, dataLength, &bw);
 80038f4:	4b11      	ldr	r3, [pc, #68]	; (800393c <ecuSaveData+0x6c>)
 80038f6:	6818      	ldr	r0, [r3, #0]
 80038f8:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80038fc:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003900:	4639      	mov	r1, r7
 8003902:	f011 ff39 	bl	8015778 <f_write>
	f_write(EcuFile, &ecu, sizeof(ecu), &bw);
 8003906:	4b0d      	ldr	r3, [pc, #52]	; (800393c <ecuSaveData+0x6c>)
 8003908:	6818      	ldr	r0, [r3, #0]
 800390a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800390e:	222c      	movs	r2, #44	; 0x2c
 8003910:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8003914:	f011 ff30 	bl	8015778 <f_write>
	//int res = f_write(EcuFile, &ecu, sizeof(ecu), &bw);
	f_write(EcuFile, "\r\n", 2, &bw);
 8003918:	4b08      	ldr	r3, [pc, #32]	; (800393c <ecuSaveData+0x6c>)
 800391a:	6818      	ldr	r0, [r3, #0]
 800391c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003920:	2202      	movs	r2, #2
 8003922:	4907      	ldr	r1, [pc, #28]	; (8003940 <ecuSaveData+0x70>)
 8003924:	f011 ff28 	bl	8015778 <f_write>
	//f_sync(EcuFile);
}
 8003928:	bf00      	nop
 800392a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800392e:	46bd      	mov	sp, r7
 8003930:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003934:	b004      	add	sp, #16
 8003936:	4770      	bx	lr
 8003938:	0801b0d0 	.word	0x0801b0d0
 800393c:	20005f6c 	.word	0x20005f6c
 8003940:	0801b0d4 	.word	0x0801b0d4

08003944 <telebackSaveData>:

void telebackSaveData(TeleBackData * teleBack){
 8003944:	b580      	push	{r7, lr}
 8003946:	b0c6      	sub	sp, #280	; 0x118
 8003948:	af02      	add	r7, sp, #8
 800394a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800394e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003952:	6018      	str	r0, [r3, #0]
	UINT bw;
	char dataBuffer[255];
	int dataLength;
	if(teleBack->ABSLRReady){
 8003954:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003958:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	7f1b      	ldrb	r3, [r3, #28]
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d028      	beq.n	80039bc <telebackSaveData+0x78>
		dataLength = sprintf(dataBuffer, "%d,%d,%d\r\n", getSeconds(),ABSLR,teleBack->ABSLRData);
 800396a:	f7fe fa89 	bl	8001e80 <getSeconds>
 800396e:	4602      	mov	r2, r0
 8003970:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003974:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	f107 0008 	add.w	r0, r7, #8
 8003980:	9300      	str	r3, [sp, #0]
 8003982:	230d      	movs	r3, #13
 8003984:	4962      	ldr	r1, [pc, #392]	; (8003b10 <telebackSaveData+0x1cc>)
 8003986:	f013 fa81 	bl	8016e8c <siprintf>
 800398a:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
		f_write(teleBack->File, dataBuffer, dataLength, &bw);
 800398e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003992:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6818      	ldr	r0, [r3, #0]
 800399a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800399e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80039a2:	f107 0108 	add.w	r1, r7, #8
 80039a6:	f011 fee7 	bl	8015778 <f_write>
		teleBack->ABSLRReady = 0;
 80039aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80039ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	7f13      	ldrb	r3, [r2, #28]
 80039b6:	f36f 0300 	bfc	r3, #0, #1
 80039ba:	7713      	strb	r3, [r2, #28]
	}
	if(teleBack->ABSRRReady){
 80039bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80039c0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d02a      	beq.n	8003a2a <telebackSaveData+0xe6>
		dataLength = sprintf(dataBuffer, "%d,%d,%d\r\n", getSeconds(),ABSRR,teleBack->ABSRRData);
 80039d4:	f7fe fa54 	bl	8001e80 <getSeconds>
 80039d8:	4602      	mov	r2, r0
 80039da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80039de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	f107 0008 	add.w	r0, r7, #8
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	230e      	movs	r3, #14
 80039ee:	4948      	ldr	r1, [pc, #288]	; (8003b10 <telebackSaveData+0x1cc>)
 80039f0:	f013 fa4c 	bl	8016e8c <siprintf>
 80039f4:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
		f_write(teleBack->File, dataBuffer, dataLength, &bw);
 80039f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80039fc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	6818      	ldr	r0, [r3, #0]
 8003a04:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8003a08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a0c:	f107 0108 	add.w	r1, r7, #8
 8003a10:	f011 feb2 	bl	8015778 <f_write>
		teleBack->ABSRRReady = 0;
 8003a14:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003a18:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8003a22:	f36f 0300 	bfc	r3, #0, #1
 8003a26:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	}
	if(teleBack->DamperLRReady){
 8003a2a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003a2e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d02a      	beq.n	8003a98 <telebackSaveData+0x154>
		dataLength = sprintf(dataBuffer, "%d,%d,%d\r\n", getSeconds(),DAMPERLR,teleBack->DamperLRData);
 8003a42:	f7fe fa1d 	bl	8001e80 <getSeconds>
 8003a46:	4602      	mov	r2, r0
 8003a48:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003a4c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a54:	f107 0008 	add.w	r0, r7, #8
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	230b      	movs	r3, #11
 8003a5c:	492c      	ldr	r1, [pc, #176]	; (8003b10 <telebackSaveData+0x1cc>)
 8003a5e:	f013 fa15 	bl	8016e8c <siprintf>
 8003a62:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
		f_write(teleBack->File, dataBuffer, dataLength, &bw);
 8003a66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003a6a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6818      	ldr	r0, [r3, #0]
 8003a72:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8003a76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a7a:	f107 0108 	add.w	r1, r7, #8
 8003a7e:	f011 fe7b 	bl	8015778 <f_write>
		teleBack->DamperLRReady = 0;
 8003a82:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003a86:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8003a90:	f36f 0300 	bfc	r3, #0, #1
 8003a94:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
	}
	if(teleBack->DamperRRReady){
 8003a98:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003a9c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d02a      	beq.n	8003b06 <telebackSaveData+0x1c2>
		dataLength = sprintf(dataBuffer, "%d,%d,%d\r\n", getSeconds(),DAMPERRR,teleBack->DamperRRData);
 8003ab0:	f7fe f9e6 	bl	8001e80 <getSeconds>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003aba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac2:	f107 0008 	add.w	r0, r7, #8
 8003ac6:	9300      	str	r3, [sp, #0]
 8003ac8:	230c      	movs	r3, #12
 8003aca:	4911      	ldr	r1, [pc, #68]	; (8003b10 <telebackSaveData+0x1cc>)
 8003acc:	f013 f9de 	bl	8016e8c <siprintf>
 8003ad0:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
		f_write(teleBack->File, dataBuffer, dataLength, &bw);
 8003ad4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003ad8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6818      	ldr	r0, [r3, #0]
 8003ae0:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8003ae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ae8:	f107 0108 	add.w	r1, r7, #8
 8003aec:	f011 fe44 	bl	8015778 <f_write>
		teleBack->DamperRRReady = 0;
 8003af0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003af4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8003afe:	f36f 0300 	bfc	r3, #0, #1
 8003b02:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
	}

}
 8003b06:	bf00      	nop
 8003b08:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	0801b0d8 	.word	0x0801b0d8

08003b14 <gpsSaveData>:
void gpsSaveData(GPSSensor * sens)
{
 8003b14:	b5b0      	push	{r4, r5, r7, lr}
 8003b16:	b0cc      	sub	sp, #304	; 0x130
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003b22:	6018      	str	r0, [r3, #0]
	char dataBuffer[255];
	UINT writedBytes;
	FRESULT status = 0;
 8003b24:	2300      	movs	r3, #0
 8003b26:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	//Save time stamp
	char timestamp[25];
	getUTCTimeFormat(timestamp);
 8003b2a:	f107 0308 	add.w	r3, r7, #8
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7fe f92c 	bl	8001d8c <getUTCTimeFormat>
	int dataLength = sprintf(dataBuffer, "%s,", timestamp);
 8003b34:	f107 0208 	add.w	r2, r7, #8
 8003b38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b3c:	4920      	ldr	r1, [pc, #128]	; (8003bc0 <gpsSaveData+0xac>)
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f013 f9a4 	bl	8016e8c <siprintf>
 8003b44:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
	status = f_write(sens->File, dataBuffer, dataLength, &writedBytes);
 8003b48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6818      	ldr	r0, [r3, #0]
 8003b54:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b5c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003b60:	f011 fe0a 	bl	8015778 <f_write>
 8003b64:	4603      	mov	r3, r0
 8003b66:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	status = status | f_write(sens->File,sens->data,strlen(sens->data),&writedBytes);
 8003b6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681c      	ldr	r4, [r3, #0]
 8003b76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f203 1525 	addw	r5, r3, #293	; 0x125
 8003b84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f203 1325 	addw	r3, r3, #293	; 0x125
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7fc fb54 	bl	8000240 <strlen>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b9e:	4629      	mov	r1, r5
 8003ba0:	4620      	mov	r0, r4
 8003ba2:	f011 fde9 	bl	8015778 <f_write>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	461a      	mov	r2, r3
 8003baa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	//printf("%s",sens->data);
}
 8003bb4:	bf00      	nop
 8003bb6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bdb0      	pop	{r4, r5, r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	0801b0e4 	.word	0x0801b0e4

08003bc4 <IMUSaveData>:
void IMUSaveData(IMUSensor* sens)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b0ce      	sub	sp, #312	; 0x138
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003bce:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003bd2:	6018      	str	r0, [r3, #0]
	char dataBuffer[255];
	UINT writedBytes;
	FRESULT status = 0;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
	//Save time stamp and id
	char timestamp[25];
	getUTCTimeFormat(timestamp);
 8003bda:	f107 0308 	add.w	r3, r7, #8
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7fe f8d4 	bl	8001d8c <getUTCTimeFormat>
	int dataLength = sprintf(dataBuffer, "%s",timestamp);
 8003be4:	f107 0208 	add.w	r2, r7, #8
 8003be8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bec:	4951      	ldr	r1, [pc, #324]	; (8003d34 <IMUSaveData+0x170>)
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f013 f94c 	bl	8016e8c <siprintf>
 8003bf4:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
	status = f_write(sens->File, dataBuffer, dataLength, &writedBytes);
 8003bf8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003bfc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6818      	ldr	r0, [r3, #0]
 8003c04:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c0c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003c10:	f011 fdb2 	bl	8015778 <f_write>
 8003c14:	4603      	mov	r3, r0
 8003c16:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
	//printf(dataBuffer);
	for (int i = 0; i < 3; i++)
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8003c20:	e02c      	b.n	8003c7c <IMUSaveData+0xb8>
	{
		dataLength = sprintf(dataBuffer, ",%f", sens->data.gyro_data_calc[i]);
 8003c22:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003c26:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003c30:	3307      	adds	r3, #7
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	4413      	add	r3, r2
 8003c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c3a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003c3e:	493e      	ldr	r1, [pc, #248]	; (8003d38 <IMUSaveData+0x174>)
 8003c40:	f013 f924 	bl	8016e8c <siprintf>
 8003c44:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
		status = status | f_write(sens->File, dataBuffer, dataLength, &writedBytes);
 8003c48:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003c4c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6818      	ldr	r0, [r3, #0]
 8003c54:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c5c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003c60:	f011 fd8a 	bl	8015778 <f_write>
 8003c64:	4603      	mov	r3, r0
 8003c66:	461a      	mov	r2, r3
 8003c68:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
	for (int i = 0; i < 3; i++)
 8003c72:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003c76:	3301      	adds	r3, #1
 8003c78:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8003c7c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	ddce      	ble.n	8003c22 <IMUSaveData+0x5e>
		//printf(dataBuffer);

	}
	for (int i = 0; i < 3; i++)
 8003c84:	2300      	movs	r3, #0
 8003c86:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003c8a:	e02c      	b.n	8003ce6 <IMUSaveData+0x122>
	{
		dataLength = sprintf(dataBuffer, ",%f", sens->data.acc_data_calc[i]);
 8003c8c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003c90:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c9a:	3304      	adds	r3, #4
 8003c9c:	00db      	lsls	r3, r3, #3
 8003c9e:	4413      	add	r3, r2
 8003ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003ca8:	4923      	ldr	r1, [pc, #140]	; (8003d38 <IMUSaveData+0x174>)
 8003caa:	f013 f8ef 	bl	8016e8c <siprintf>
 8003cae:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
		status = status | f_write(sens->File, dataBuffer, dataLength, &writedBytes);
 8003cb2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003cb6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6818      	ldr	r0, [r3, #0]
 8003cbe:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003cc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cc6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003cca:	f011 fd55 	bl	8015778 <f_write>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
	for (int i = 0; i < 3; i++)
 8003cdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003ce6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	ddce      	ble.n	8003c8c <IMUSaveData+0xc8>
		//printf(dataBuffer);
	}

	dataLength = sprintf(dataBuffer, "\r\n");
 8003cee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003cf2:	4912      	ldr	r1, [pc, #72]	; (8003d3c <IMUSaveData+0x178>)
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f013 f8c9 	bl	8016e8c <siprintf>
 8003cfa:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
	//printf(dataBuffer);
	status = status | f_write(sens->File, dataBuffer, dataLength, &writedBytes);
 8003cfe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003d02:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6818      	ldr	r0, [r3, #0]
 8003d0a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003d0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d12:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003d16:	f011 fd2f 	bl	8015778 <f_write>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8003d22:	4313      	orrs	r3, r2
 8003d24:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137

}
 8003d28:	bf00      	nop
 8003d2a:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	0801afdc 	.word	0x0801afdc
 8003d38:	0801b0e8 	.word	0x0801b0e8
 8003d3c:	0801b0d4 	.word	0x0801b0d4

08003d40 <mlxSaveData>:

void mlxSaveData(MLXSensor* mlx)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b0c6      	sub	sp, #280	; 0x118
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003d4a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003d4e:	6018      	str	r0, [r3, #0]
	char dataBuffer[255];
	UINT writedBytes;
	//Save time stamp and mlx ID
	int dataLength = sprintf(dataBuffer, "%d,%d", mlx->timestamp,mlx->ID);
 8003d50:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003d54:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d5e:	f8d3 2eb4 	ldr.w	r2, [r3, #3764]	; 0xeb4
 8003d62:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003d66:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	f107 000c 	add.w	r0, r7, #12
 8003d72:	4939      	ldr	r1, [pc, #228]	; (8003e58 <mlxSaveData+0x118>)
 8003d74:	f013 f88a 	bl	8016e8c <siprintf>
 8003d78:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int fres = f_write(mlx->File, dataBuffer, dataLength, &writedBytes);
 8003d7c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003d80:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6818      	ldr	r0, [r3, #0]
 8003d88:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8003d8c:	f107 0308 	add.w	r3, r7, #8
 8003d90:	f107 010c 	add.w	r1, r7, #12
 8003d94:	f011 fcf0 	bl	8015778 <f_write>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

	for(int i=0;i<784;i++)
 8003d9e:	2300      	movs	r3, #0
 8003da0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003da4:	e031      	b.n	8003e0a <mlxSaveData+0xca>
	{
		dataLength = sprintf(dataBuffer,"%2.2f,", mlx->data[i]);
 8003da6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003daa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003db4:	f203 43aa 	addw	r3, r3, #1194	; 0x4aa
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	4413      	add	r3, r2
 8003dbc:	edd3 7a00 	vldr	s15, [r3]
 8003dc0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003dc4:	f107 000c 	add.w	r0, r7, #12
 8003dc8:	ec53 2b17 	vmov	r2, r3, d7
 8003dcc:	4923      	ldr	r1, [pc, #140]	; (8003e5c <mlxSaveData+0x11c>)
 8003dce:	f013 f85d 	bl	8016e8c <siprintf>
 8003dd2:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
		fres = fres | f_write(mlx->File, dataBuffer, dataLength, &writedBytes);
 8003dd6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003dda:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6818      	ldr	r0, [r3, #0]
 8003de2:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8003de6:	f107 0308 	add.w	r3, r7, #8
 8003dea:	f107 010c 	add.w	r1, r7, #12
 8003dee:	f011 fcc3 	bl	8015778 <f_write>
 8003df2:	4603      	mov	r3, r0
 8003df4:	461a      	mov	r2, r3
 8003df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	for(int i=0;i<784;i++)
 8003e00:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003e04:	3301      	adds	r3, #1
 8003e06:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003e0a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003e0e:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8003e12:	dbc8      	blt.n	8003da6 <mlxSaveData+0x66>
	}

	sprintf(dataBuffer, "\r\n ");
 8003e14:	f107 030c 	add.w	r3, r7, #12
 8003e18:	4911      	ldr	r1, [pc, #68]	; (8003e60 <mlxSaveData+0x120>)
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f013 f836 	bl	8016e8c <siprintf>
	f_write(mlx->File, dataBuffer, 2, &writedBytes);
 8003e20:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003e24:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6818      	ldr	r0, [r3, #0]
 8003e2c:	f107 0308 	add.w	r3, r7, #8
 8003e30:	f107 010c 	add.w	r1, r7, #12
 8003e34:	2202      	movs	r2, #2
 8003e36:	f011 fc9f 	bl	8015778 <f_write>
	f_sync(mlx->File);
 8003e3a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003e3e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f011 fe2a 	bl	8015aa0 <f_sync>
}
 8003e4c:	bf00      	nop
 8003e4e:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	0801b0ec 	.word	0x0801b0ec
 8003e5c:	0801b0f4 	.word	0x0801b0f4
 8003e60:	0801b0fc 	.word	0x0801b0fc

08003e64 <absSaveData>:


void absSaveData(ABSSensor * sens)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b0a0      	sub	sp, #128	; 0x80
 8003e68:	af02      	add	r7, sp, #8
 8003e6a:	6078      	str	r0, [r7, #4]
	char dataBuffer[100];
	UINT writedBytes;
	int dataLength = sprintf(dataBuffer, "%d,%d,%f\r\n", sens->timestamp,sens->ID,sens->data);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	edd3 7a08 	vldr	s15, [r3, #32]
 8003e7a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e7e:	f107 0010 	add.w	r0, r7, #16
 8003e82:	ed8d 7b00 	vstr	d7, [sp]
 8003e86:	460b      	mov	r3, r1
 8003e88:	4908      	ldr	r1, [pc, #32]	; (8003eac <absSaveData+0x48>)
 8003e8a:	f012 ffff 	bl	8016e8c <siprintf>
 8003e8e:	6778      	str	r0, [r7, #116]	; 0x74
	//printf(dataBuffer);
	f_write(sens->File, dataBuffer, dataLength, &writedBytes);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6818      	ldr	r0, [r3, #0]
 8003e94:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003e96:	f107 030c 	add.w	r3, r7, #12
 8003e9a:	f107 0110 	add.w	r1, r7, #16
 8003e9e:	f011 fc6b 	bl	8015778 <f_write>

}
 8003ea2:	bf00      	nop
 8003ea4:	3778      	adds	r7, #120	; 0x78
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	0801b100 	.word	0x0801b100

08003eb0 <adcSaveData>:

void adcSaveData(ADCSensor * sens)
{
 8003eb0:	b5b0      	push	{r4, r5, r7, lr}
 8003eb2:	b0a8      	sub	sp, #160	; 0xa0
 8003eb4:	af04      	add	r7, sp, #16
 8003eb6:	6078      	str	r0, [r7, #4]
	UINT writedBytes;
	//char timestamp[25];
	//getUTCTimeFormat(timestamp);
	RTC_TimeTypeDef time;
	RTC_DateTypeDef date;
	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8003eb8:	f107 030c 	add.w	r3, r7, #12
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	4826      	ldr	r0, [pc, #152]	; (8003f5c <adcSaveData+0xac>)
 8003ec2:	f009 f981 	bl	800d1c8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8003ec6:	f107 0308 	add.w	r3, r7, #8
 8003eca:	2200      	movs	r2, #0
 8003ecc:	4619      	mov	r1, r3
 8003ece:	4823      	ldr	r0, [pc, #140]	; (8003f5c <adcSaveData+0xac>)
 8003ed0:	f009 f9d8 	bl	800d284 <HAL_RTC_GetDate>
	int mili = ((time.SecondFraction-time.SubSeconds)/((float)time.SecondFraction+1) * 1000);
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	ee07 3a90 	vmov	s15, r3
 8003ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	ee07 3a90 	vmov	s15, r3
 8003ee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ef0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ef4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ef8:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003f60 <adcSaveData+0xb0>
 8003efc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f04:	ee17 3a90 	vmov	r3, s15
 8003f08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	int dataLength = sprintf(dataBuffer,"%02d:%02d:%02d:%03d,%d,%d\r\n", time.Hours, time.Minutes, time.Seconds,mili, sens->ID,*(sens->data));
 8003f0c:	7b3b      	ldrb	r3, [r7, #12]
 8003f0e:	461c      	mov	r4, r3
 8003f10:	7b7b      	ldrb	r3, [r7, #13]
 8003f12:	461d      	mov	r5, r3
 8003f14:	7bbb      	ldrb	r3, [r7, #14]
 8003f16:	4619      	mov	r1, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	69d2      	ldr	r2, [r2, #28]
 8003f20:	8812      	ldrh	r2, [r2, #0]
 8003f22:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003f26:	9203      	str	r2, [sp, #12]
 8003f28:	9302      	str	r3, [sp, #8]
 8003f2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f2e:	9301      	str	r3, [sp, #4]
 8003f30:	9100      	str	r1, [sp, #0]
 8003f32:	462b      	mov	r3, r5
 8003f34:	4622      	mov	r2, r4
 8003f36:	490b      	ldr	r1, [pc, #44]	; (8003f64 <adcSaveData+0xb4>)
 8003f38:	f012 ffa8 	bl	8016e8c <siprintf>
 8003f3c:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	f_write(sens->File, dataBuffer, dataLength, &writedBytes);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6818      	ldr	r0, [r3, #0]
 8003f44:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003f48:	f107 0320 	add.w	r3, r7, #32
 8003f4c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8003f50:	f011 fc12 	bl	8015778 <f_write>
	//printf(dataBuffer);
}
 8003f54:	bf00      	nop
 8003f56:	3790      	adds	r7, #144	; 0x90
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bdb0      	pop	{r4, r5, r7, pc}
 8003f5c:	200016e0 	.word	0x200016e0
 8003f60:	447a0000 	.word	0x447a0000
 8003f64:	0801b10c 	.word	0x0801b10c

08003f68 <sdFlush>:
void sdFlush(){
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	af00      	add	r7, sp, #0
	if(_dataHandler[GPS].isActive)
 8003f6c:	4b22      	ldr	r3, [pc, #136]	; (8003ff8 <sdFlush+0x90>)
 8003f6e:	7c1b      	ldrb	r3, [r3, #16]
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d004      	beq.n	8003f84 <sdFlush+0x1c>
	f_sync(IMUInnerSensor.File);
 8003f7a:	4b20      	ldr	r3, [pc, #128]	; (8003ffc <sdFlush+0x94>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f011 fd8e 	bl	8015aa0 <f_sync>
	if(_dataHandler[ABSLF].isActive)
 8003f84:	4b1c      	ldr	r3, [pc, #112]	; (8003ff8 <sdFlush+0x90>)
 8003f86:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d004      	beq.n	8003f9e <sdFlush+0x36>
	f_sync(absLFSensor.File);
 8003f94:	4b1a      	ldr	r3, [pc, #104]	; (8004000 <sdFlush+0x98>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f011 fd81 	bl	8015aa0 <f_sync>
	if(_dataHandler[GPS].isActive)
 8003f9e:	4b16      	ldr	r3, [pc, #88]	; (8003ff8 <sdFlush+0x90>)
 8003fa0:	7c1b      	ldrb	r3, [r3, #16]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d004      	beq.n	8003fb6 <sdFlush+0x4e>
	f_sync(gpsSensor.File);
 8003fac:	4b15      	ldr	r3, [pc, #84]	; (8004004 <sdFlush+0x9c>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f011 fd75 	bl	8015aa0 <f_sync>
	if(_dataHandler[DAMPERLF].isActive)
 8003fb6:	4b10      	ldr	r3, [pc, #64]	; (8003ff8 <sdFlush+0x90>)
 8003fb8:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8003fbc:	f003 0302 	and.w	r3, r3, #2
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d004      	beq.n	8003fd0 <sdFlush+0x68>
	f_sync(damperLFSensor.File);
 8003fc6:	4b10      	ldr	r3, [pc, #64]	; (8004008 <sdFlush+0xa0>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f011 fd68 	bl	8015aa0 <f_sync>
	if(_dataHandler[TELEBACK].isActive)
 8003fd0:	4b09      	ldr	r3, [pc, #36]	; (8003ff8 <sdFlush+0x90>)
 8003fd2:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d004      	beq.n	8003fea <sdFlush+0x82>
	f_sync(teleData.File);
 8003fe0:	4b0a      	ldr	r3, [pc, #40]	; (800400c <sdFlush+0xa4>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f011 fd5b 	bl	8015aa0 <f_sync>
	f_sync(EcuFile);
 8003fea:	4b09      	ldr	r3, [pc, #36]	; (8004010 <sdFlush+0xa8>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f011 fd56 	bl	8015aa0 <f_sync>
}
 8003ff4:	bf00      	nop
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	20000000 	.word	0x20000000
 8003ffc:	20005740 	.word	0x20005740
 8004000:	20001700 	.word	0x20001700
 8004004:	200017a0 	.word	0x200017a0
 8004008:	2000582c 	.word	0x2000582c
 800400c:	2000591c 	.word	0x2000591c
 8004010:	20005f6c 	.word	0x20005f6c

08004014 <MX_SDMMC2_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc2_tx;

/* SDMMC2 init function */

void MX_SDMMC2_SD_Init(void)
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8004018:	4b0c      	ldr	r3, [pc, #48]	; (800404c <MX_SDMMC2_SD_Init+0x38>)
 800401a:	4a0d      	ldr	r2, [pc, #52]	; (8004050 <MX_SDMMC2_SD_Init+0x3c>)
 800401c:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800401e:	4b0b      	ldr	r3, [pc, #44]	; (800404c <MX_SDMMC2_SD_Init+0x38>)
 8004020:	2200      	movs	r2, #0
 8004022:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8004024:	4b09      	ldr	r3, [pc, #36]	; (800404c <MX_SDMMC2_SD_Init+0x38>)
 8004026:	2200      	movs	r2, #0
 8004028:	609a      	str	r2, [r3, #8]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800402a:	4b08      	ldr	r3, [pc, #32]	; (800404c <MX_SDMMC2_SD_Init+0x38>)
 800402c:	2200      	movs	r2, #0
 800402e:	60da      	str	r2, [r3, #12]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8004030:	4b06      	ldr	r3, [pc, #24]	; (800404c <MX_SDMMC2_SD_Init+0x38>)
 8004032:	2200      	movs	r2, #0
 8004034:	611a      	str	r2, [r3, #16]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004036:	4b05      	ldr	r3, [pc, #20]	; (800404c <MX_SDMMC2_SD_Init+0x38>)
 8004038:	2200      	movs	r2, #0
 800403a:	615a      	str	r2, [r3, #20]
  hsd2.Init.ClockDiv = 0;
 800403c:	4b03      	ldr	r3, [pc, #12]	; (800404c <MX_SDMMC2_SD_Init+0x38>)
 800403e:	2200      	movs	r2, #0
 8004040:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8004042:	bf00      	nop
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr
 800404c:	20005f74 	.word	0x20005f74
 8004050:	40011c00 	.word	0x40011c00

08004054 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b0ae      	sub	sp, #184	; 0xb8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800405c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004060:	2200      	movs	r2, #0
 8004062:	601a      	str	r2, [r3, #0]
 8004064:	605a      	str	r2, [r3, #4]
 8004066:	609a      	str	r2, [r3, #8]
 8004068:	60da      	str	r2, [r3, #12]
 800406a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800406c:	f107 0314 	add.w	r3, r7, #20
 8004070:	2290      	movs	r2, #144	; 0x90
 8004072:	2100      	movs	r1, #0
 8004074:	4618      	mov	r0, r3
 8004076:	f011 ff1f 	bl	8015eb8 <memset>
  if(sdHandle->Instance==SDMMC2)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a89      	ldr	r2, [pc, #548]	; (80042a4 <HAL_SD_MspInit+0x250>)
 8004080:	4293      	cmp	r3, r2
 8004082:	f040 810b 	bne.w	800429c <HAL_SD_MspInit+0x248>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC2|RCC_PERIPHCLK_CLK48;
 8004086:	f04f 6384 	mov.w	r3, #69206016	; 0x4200000
 800408a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800408c:	2300      	movs	r3, #0
 800408e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInitStruct.Sdmmc2ClockSelection = RCC_SDMMC2CLKSOURCE_CLK48;
 8004092:	2300      	movs	r3, #0
 8004094:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004098:	f107 0314 	add.w	r3, r7, #20
 800409c:	4618      	mov	r0, r3
 800409e:	f008 fbe7 	bl	800c870 <HAL_RCCEx_PeriphCLKConfig>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d001      	beq.n	80040ac <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 80040a8:	f7fe f8cc 	bl	8002244 <Error_Handler>
    }

    /* SDMMC2 clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 80040ac:	4b7e      	ldr	r3, [pc, #504]	; (80042a8 <HAL_SD_MspInit+0x254>)
 80040ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b0:	4a7d      	ldr	r2, [pc, #500]	; (80042a8 <HAL_SD_MspInit+0x254>)
 80040b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040b6:	6453      	str	r3, [r2, #68]	; 0x44
 80040b8:	4b7b      	ldr	r3, [pc, #492]	; (80042a8 <HAL_SD_MspInit+0x254>)
 80040ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c0:	613b      	str	r3, [r7, #16]
 80040c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80040c4:	4b78      	ldr	r3, [pc, #480]	; (80042a8 <HAL_SD_MspInit+0x254>)
 80040c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c8:	4a77      	ldr	r2, [pc, #476]	; (80042a8 <HAL_SD_MspInit+0x254>)
 80040ca:	f043 0308 	orr.w	r3, r3, #8
 80040ce:	6313      	str	r3, [r2, #48]	; 0x30
 80040d0:	4b75      	ldr	r3, [pc, #468]	; (80042a8 <HAL_SD_MspInit+0x254>)
 80040d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d4:	f003 0308 	and.w	r3, r3, #8
 80040d8:	60fb      	str	r3, [r7, #12]
 80040da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80040dc:	4b72      	ldr	r3, [pc, #456]	; (80042a8 <HAL_SD_MspInit+0x254>)
 80040de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e0:	4a71      	ldr	r2, [pc, #452]	; (80042a8 <HAL_SD_MspInit+0x254>)
 80040e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040e6:	6313      	str	r3, [r2, #48]	; 0x30
 80040e8:	4b6f      	ldr	r3, [pc, #444]	; (80042a8 <HAL_SD_MspInit+0x254>)
 80040ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f0:	60bb      	str	r3, [r7, #8]
 80040f2:	68bb      	ldr	r3, [r7, #8]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80040f4:	2340      	movs	r3, #64	; 0x40
 80040f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040fa:	2302      	movs	r3, #2
 80040fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004100:	2300      	movs	r3, #0
 8004102:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004106:	2303      	movs	r3, #3
 8004108:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800410c:	230b      	movs	r3, #11
 800410e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004112:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004116:	4619      	mov	r1, r3
 8004118:	4864      	ldr	r0, [pc, #400]	; (80042ac <HAL_SD_MspInit+0x258>)
 800411a:	f006 fa0b 	bl	800a534 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800411e:	2380      	movs	r3, #128	; 0x80
 8004120:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004124:	2302      	movs	r3, #2
 8004126:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800412a:	2301      	movs	r3, #1
 800412c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004130:	2303      	movs	r3, #3
 8004132:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8004136:	230b      	movs	r3, #11
 8004138:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800413c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004140:	4619      	mov	r1, r3
 8004142:	485a      	ldr	r0, [pc, #360]	; (80042ac <HAL_SD_MspInit+0x258>)
 8004144:	f006 f9f6 	bl	800a534 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8004148:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
 800414c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004150:	2302      	movs	r3, #2
 8004152:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004156:	2301      	movs	r3, #1
 8004158:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800415c:	2303      	movs	r3, #3
 800415e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8004162:	230b      	movs	r3, #11
 8004164:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004168:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800416c:	4619      	mov	r1, r3
 800416e:	4850      	ldr	r0, [pc, #320]	; (80042b0 <HAL_SD_MspInit+0x25c>)
 8004170:	f006 f9e0 	bl	800a534 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004174:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004178:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800417c:	2302      	movs	r3, #2
 800417e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004182:	2301      	movs	r3, #1
 8004184:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004188:	2303      	movs	r3, #3
 800418a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 800418e:	230a      	movs	r3, #10
 8004190:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004194:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004198:	4619      	mov	r1, r3
 800419a:	4845      	ldr	r0, [pc, #276]	; (80042b0 <HAL_SD_MspInit+0x25c>)
 800419c:	f006 f9ca 	bl	800a534 <HAL_GPIO_Init>

    /* SDMMC2 DMA Init */
    /* SDMMC2_RX Init */
    hdma_sdmmc2_rx.Instance = DMA2_Stream0;
 80041a0:	4b44      	ldr	r3, [pc, #272]	; (80042b4 <HAL_SD_MspInit+0x260>)
 80041a2:	4a45      	ldr	r2, [pc, #276]	; (80042b8 <HAL_SD_MspInit+0x264>)
 80041a4:	601a      	str	r2, [r3, #0]
    hdma_sdmmc2_rx.Init.Channel = DMA_CHANNEL_11;
 80041a6:	4b43      	ldr	r3, [pc, #268]	; (80042b4 <HAL_SD_MspInit+0x260>)
 80041a8:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 80041ac:	605a      	str	r2, [r3, #4]
    hdma_sdmmc2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041ae:	4b41      	ldr	r3, [pc, #260]	; (80042b4 <HAL_SD_MspInit+0x260>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	609a      	str	r2, [r3, #8]
    hdma_sdmmc2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80041b4:	4b3f      	ldr	r3, [pc, #252]	; (80042b4 <HAL_SD_MspInit+0x260>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	60da      	str	r2, [r3, #12]
    hdma_sdmmc2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80041ba:	4b3e      	ldr	r3, [pc, #248]	; (80042b4 <HAL_SD_MspInit+0x260>)
 80041bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041c0:	611a      	str	r2, [r3, #16]
    hdma_sdmmc2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80041c2:	4b3c      	ldr	r3, [pc, #240]	; (80042b4 <HAL_SD_MspInit+0x260>)
 80041c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80041c8:	615a      	str	r2, [r3, #20]
    hdma_sdmmc2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80041ca:	4b3a      	ldr	r3, [pc, #232]	; (80042b4 <HAL_SD_MspInit+0x260>)
 80041cc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80041d0:	619a      	str	r2, [r3, #24]
    hdma_sdmmc2_rx.Init.Mode = DMA_PFCTRL;
 80041d2:	4b38      	ldr	r3, [pc, #224]	; (80042b4 <HAL_SD_MspInit+0x260>)
 80041d4:	2220      	movs	r2, #32
 80041d6:	61da      	str	r2, [r3, #28]
    hdma_sdmmc2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80041d8:	4b36      	ldr	r3, [pc, #216]	; (80042b4 <HAL_SD_MspInit+0x260>)
 80041da:	2200      	movs	r2, #0
 80041dc:	621a      	str	r2, [r3, #32]
    hdma_sdmmc2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80041de:	4b35      	ldr	r3, [pc, #212]	; (80042b4 <HAL_SD_MspInit+0x260>)
 80041e0:	2204      	movs	r2, #4
 80041e2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80041e4:	4b33      	ldr	r3, [pc, #204]	; (80042b4 <HAL_SD_MspInit+0x260>)
 80041e6:	2203      	movs	r2, #3
 80041e8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc2_rx.Init.MemBurst = DMA_MBURST_INC4;
 80041ea:	4b32      	ldr	r3, [pc, #200]	; (80042b4 <HAL_SD_MspInit+0x260>)
 80041ec:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80041f0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc2_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80041f2:	4b30      	ldr	r3, [pc, #192]	; (80042b4 <HAL_SD_MspInit+0x260>)
 80041f4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80041f8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc2_rx) != HAL_OK)
 80041fa:	482e      	ldr	r0, [pc, #184]	; (80042b4 <HAL_SD_MspInit+0x260>)
 80041fc:	f005 fd84 	bl	8009d08 <HAL_DMA_Init>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <HAL_SD_MspInit+0x1b6>
    {
      Error_Handler();
 8004206:	f7fe f81d 	bl	8002244 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc2_rx);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a29      	ldr	r2, [pc, #164]	; (80042b4 <HAL_SD_MspInit+0x260>)
 800420e:	641a      	str	r2, [r3, #64]	; 0x40
 8004210:	4a28      	ldr	r2, [pc, #160]	; (80042b4 <HAL_SD_MspInit+0x260>)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC2_TX Init */
    hdma_sdmmc2_tx.Instance = DMA2_Stream5;
 8004216:	4b29      	ldr	r3, [pc, #164]	; (80042bc <HAL_SD_MspInit+0x268>)
 8004218:	4a29      	ldr	r2, [pc, #164]	; (80042c0 <HAL_SD_MspInit+0x26c>)
 800421a:	601a      	str	r2, [r3, #0]
    hdma_sdmmc2_tx.Init.Channel = DMA_CHANNEL_11;
 800421c:	4b27      	ldr	r3, [pc, #156]	; (80042bc <HAL_SD_MspInit+0x268>)
 800421e:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 8004222:	605a      	str	r2, [r3, #4]
    hdma_sdmmc2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004224:	4b25      	ldr	r3, [pc, #148]	; (80042bc <HAL_SD_MspInit+0x268>)
 8004226:	2240      	movs	r2, #64	; 0x40
 8004228:	609a      	str	r2, [r3, #8]
    hdma_sdmmc2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800422a:	4b24      	ldr	r3, [pc, #144]	; (80042bc <HAL_SD_MspInit+0x268>)
 800422c:	2200      	movs	r2, #0
 800422e:	60da      	str	r2, [r3, #12]
    hdma_sdmmc2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004230:	4b22      	ldr	r3, [pc, #136]	; (80042bc <HAL_SD_MspInit+0x268>)
 8004232:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004236:	611a      	str	r2, [r3, #16]
    hdma_sdmmc2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004238:	4b20      	ldr	r3, [pc, #128]	; (80042bc <HAL_SD_MspInit+0x268>)
 800423a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800423e:	615a      	str	r2, [r3, #20]
    hdma_sdmmc2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004240:	4b1e      	ldr	r3, [pc, #120]	; (80042bc <HAL_SD_MspInit+0x268>)
 8004242:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004246:	619a      	str	r2, [r3, #24]
    hdma_sdmmc2_tx.Init.Mode = DMA_PFCTRL;
 8004248:	4b1c      	ldr	r3, [pc, #112]	; (80042bc <HAL_SD_MspInit+0x268>)
 800424a:	2220      	movs	r2, #32
 800424c:	61da      	str	r2, [r3, #28]
    hdma_sdmmc2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800424e:	4b1b      	ldr	r3, [pc, #108]	; (80042bc <HAL_SD_MspInit+0x268>)
 8004250:	2200      	movs	r2, #0
 8004252:	621a      	str	r2, [r3, #32]
    hdma_sdmmc2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004254:	4b19      	ldr	r3, [pc, #100]	; (80042bc <HAL_SD_MspInit+0x268>)
 8004256:	2204      	movs	r2, #4
 8004258:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800425a:	4b18      	ldr	r3, [pc, #96]	; (80042bc <HAL_SD_MspInit+0x268>)
 800425c:	2203      	movs	r2, #3
 800425e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc2_tx.Init.MemBurst = DMA_MBURST_INC4;
 8004260:	4b16      	ldr	r3, [pc, #88]	; (80042bc <HAL_SD_MspInit+0x268>)
 8004262:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004266:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc2_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8004268:	4b14      	ldr	r3, [pc, #80]	; (80042bc <HAL_SD_MspInit+0x268>)
 800426a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800426e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc2_tx) != HAL_OK)
 8004270:	4812      	ldr	r0, [pc, #72]	; (80042bc <HAL_SD_MspInit+0x268>)
 8004272:	f005 fd49 	bl	8009d08 <HAL_DMA_Init>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d001      	beq.n	8004280 <HAL_SD_MspInit+0x22c>
    {
      Error_Handler();
 800427c:	f7fd ffe2 	bl	8002244 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc2_tx);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a0e      	ldr	r2, [pc, #56]	; (80042bc <HAL_SD_MspInit+0x268>)
 8004284:	63da      	str	r2, [r3, #60]	; 0x3c
 8004286:	4a0d      	ldr	r2, [pc, #52]	; (80042bc <HAL_SD_MspInit+0x268>)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 800428c:	2200      	movs	r2, #0
 800428e:	2100      	movs	r1, #0
 8004290:	2067      	movs	r0, #103	; 0x67
 8004292:	f005 fcf4 	bl	8009c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8004296:	2067      	movs	r0, #103	; 0x67
 8004298:	f005 fd0d 	bl	8009cb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }
}
 800429c:	bf00      	nop
 800429e:	37b8      	adds	r7, #184	; 0xb8
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	40011c00 	.word	0x40011c00
 80042a8:	40023800 	.word	0x40023800
 80042ac:	40020c00 	.word	0x40020c00
 80042b0:	40021800 	.word	0x40021800
 80042b4:	20005ff8 	.word	0x20005ff8
 80042b8:	40026410 	.word	0x40026410
 80042bc:	20006058 	.word	0x20006058
 80042c0:	40026488 	.word	0x40026488

080042c4 <ABSInit>:
extern SensorStatus statusRegister;
extern sensorDataHandler _dataHandler[];
extern ABSSensor absLFSensor;
extern ABSSensor absRFSensor;
/******** ABS SECTION  ********/
void ABSInit(ABSSensor * sens,int id,TIM_HandleTypeDef* tim,int channel,FIL *f){
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
 80042d0:	603b      	str	r3, [r7, #0]
	if(f == 0)
 80042d2:	6a3b      	ldr	r3, [r7, #32]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d108      	bne.n	80042ea <ABSInit+0x26>
	{
		sens->File = (FIL*)malloc(sizeof(FIL));
 80042d8:	f241 0030 	movw	r0, #4144	; 0x1030
 80042dc:	f011 fde4 	bl	8015ea8 <malloc>
 80042e0:	4603      	mov	r3, r0
 80042e2:	461a      	mov	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	601a      	str	r2, [r3, #0]
 80042e8:	e002      	b.n	80042f0 <ABSInit+0x2c>
	}else
	{
		sens->File = f;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6a3a      	ldr	r2, [r7, #32]
 80042ee:	601a      	str	r2, [r3, #0]
	}
	switch(id){
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	2b04      	cmp	r3, #4
 80042f4:	d003      	beq.n	80042fe <ABSInit+0x3a>
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	2b05      	cmp	r3, #5
 80042fa:	d007      	beq.n	800430c <ABSInit+0x48>
 80042fc:	e00d      	b.n	800431a <ABSInit+0x56>
	case ABSLF:
		statusRegister.VSSLF = SENSOR_OK;
 80042fe:	4a22      	ldr	r2, [pc, #136]	; (8004388 <ABSInit+0xc4>)
 8004300:	6813      	ldr	r3, [r2, #0]
 8004302:	2101      	movs	r1, #1
 8004304:	f361 33d1 	bfi	r3, r1, #15, #3
 8004308:	6013      	str	r3, [r2, #0]
		break;
 800430a:	e006      	b.n	800431a <ABSInit+0x56>

	case ABSRF:
		statusRegister.VSSRF = SENSOR_OK;
 800430c:	4a1e      	ldr	r2, [pc, #120]	; (8004388 <ABSInit+0xc4>)
 800430e:	7893      	ldrb	r3, [r2, #2]
 8004310:	2101      	movs	r1, #1
 8004312:	f361 0384 	bfi	r3, r1, #2, #3
 8004316:	7093      	strb	r3, [r2, #2]
		break;
 8004318:	bf00      	nop
	}
	sens->dataReady = 0;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	619a      	str	r2, [r3, #24]
	sens->ID =id;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	625a      	str	r2, [r3, #36]	; 0x24
	RTC_DateTypeDef date;
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8004326:	f107 0310 	add.w	r3, r7, #16
 800432a:	2200      	movs	r2, #0
 800432c:	4619      	mov	r1, r3
 800432e:	4817      	ldr	r0, [pc, #92]	; (800438c <ABSInit+0xc8>)
 8004330:	f008 ffa8 	bl	800d284 <HAL_RTC_GetDate>
	sprintf(sens->path,"ABS%02d%02d.csv",date.Date,date.Month);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	1d18      	adds	r0, r3, #4
 8004338:	7cbb      	ldrb	r3, [r7, #18]
 800433a:	461a      	mov	r2, r3
 800433c:	7c7b      	ldrb	r3, [r7, #17]
 800433e:	4914      	ldr	r1, [pc, #80]	; (8004390 <ABSInit+0xcc>)
 8004340:	f012 fda4 	bl	8016e8c <siprintf>
	sens->timer = tim;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	62da      	str	r2, [r3, #44]	; 0x2c
	sens->timerChannel = channel;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	631a      	str	r2, [r3, #48]	; 0x30
	for(int i=0;i<ABS_TIME_SAMPLES;i++){
 8004350:	2300      	movs	r3, #0
 8004352:	617b      	str	r3, [r7, #20]
 8004354:	e008      	b.n	8004368 <ABSInit+0xa4>
		sens->rawData[i] = 0;
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	4413      	add	r3, r2
 800435c:	3334      	adds	r3, #52	; 0x34
 800435e:	2200      	movs	r2, #0
 8004360:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<ABS_TIME_SAMPLES;i++){
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	3301      	adds	r3, #1
 8004366:	617b      	str	r3, [r7, #20]
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	2b13      	cmp	r3, #19
 800436c:	ddf3      	ble.n	8004356 <ABSInit+0x92>
	}
	sens->counter = 0;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	sens->data = 0;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f04f 0200 	mov.w	r2, #0
 800437c:	621a      	str	r2, [r3, #32]
}
 800437e:	bf00      	nop
 8004380:	3718      	adds	r7, #24
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	200057e8 	.word	0x200057e8
 800438c:	200016e0 	.word	0x200016e0
 8004390:	0801b13c 	.word	0x0801b13c
 8004394:	00000000 	.word	0x00000000

08004398 <ABSCalculate>:

void ABSCalculate(ABSSensor * sens)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
	sens->data = 0;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f04f 0200 	mov.w	r2, #0
 80043a6:	621a      	str	r2, [r3, #32]
	 for(int i=0;i<ABS_TIME_SAMPLES;i++)
 80043a8:	2300      	movs	r3, #0
 80043aa:	60fb      	str	r3, [r7, #12]
 80043ac:	e013      	b.n	80043d6 <ABSCalculate+0x3e>
	 {
		 sens->data += sens->rawData[i];
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	ed93 7a08 	vldr	s14, [r3, #32]
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	4413      	add	r3, r2
 80043ba:	3334      	adds	r3, #52	; 0x34
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	ee07 3a90 	vmov	s15, r3
 80043c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	edc3 7a08 	vstr	s15, [r3, #32]
	 for(int i=0;i<ABS_TIME_SAMPLES;i++)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	3301      	adds	r3, #1
 80043d4:	60fb      	str	r3, [r7, #12]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2b13      	cmp	r3, #19
 80043da:	dde8      	ble.n	80043ae <ABSCalculate+0x16>
	 }
	 //sens->data+=1;
	 sens->data *= ABS_CONST;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	edd3 7a08 	vldr	s15, [r3, #32]
 80043e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80043e6:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8004440 <ABSCalculate+0xa8>
 80043ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 80043ee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	edc3 7a08 	vstr	s15, [r3, #32]
	 sens->counter++;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80043fe:	3301      	adds	r3, #1
 8004400:	b2da      	uxtb	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	 if(sens->counter>=ABS_TIME_SAMPLES){
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800440e:	2b13      	cmp	r3, #19
 8004410:	d903      	bls.n	800441a <ABSCalculate+0x82>
		 sens->counter = 0;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	 }
	 sens->rawData[sens->counter] = 0;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8004420:	461a      	mov	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4413      	add	r3, r2
 8004426:	2200      	movs	r2, #0
 8004428:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34


	 sendWheelSpeedByCan(sens->ID);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	4618      	mov	r0, r3
 8004432:	f000 f83f 	bl	80044b4 <sendWheelSpeedByCan>
}
 8004436:	bf00      	nop
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	bccd3177 	.word	0xbccd3177
 8004444:	3ff0b48b 	.word	0x3ff0b48b

08004448 <ABSCallbackHandler>:
void ABSCallbackHandler(TIM_HandleTypeDef *htim){
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
	if (htim == absLFSensor.timer) {
 8004450:	4b16      	ldr	r3, [pc, #88]	; (80044ac <ABSCallbackHandler+0x64>)
 8004452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	429a      	cmp	r2, r3
 8004458:	d10e      	bne.n	8004478 <ABSCallbackHandler+0x30>
  absLFSensor.rawData[absLFSensor.counter]++;//HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800445a:	4b14      	ldr	r3, [pc, #80]	; (80044ac <ABSCallbackHandler+0x64>)
 800445c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8004460:	4a12      	ldr	r2, [pc, #72]	; (80044ac <ABSCallbackHandler+0x64>)
 8004462:	441a      	add	r2, r3
 8004464:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004468:	3201      	adds	r2, #1
 800446a:	b2d1      	uxtb	r1, r2
 800446c:	4a0f      	ldr	r2, [pc, #60]	; (80044ac <ABSCallbackHandler+0x64>)
 800446e:	4413      	add	r3, r2
 8004470:	460a      	mov	r2, r1
 8004472:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	        	absRFSensor.rawData[absRFSensor.counter]++;//HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
	        	//_dataHandler[ABSRF].dataReady = 1;


	  }
}
 8004476:	e012      	b.n	800449e <ABSCallbackHandler+0x56>
	  }else if(htim == absRFSensor.timer) {
 8004478:	4b0d      	ldr	r3, [pc, #52]	; (80044b0 <ABSCallbackHandler+0x68>)
 800447a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	429a      	cmp	r2, r3
 8004480:	d10d      	bne.n	800449e <ABSCallbackHandler+0x56>
	        	absRFSensor.rawData[absRFSensor.counter]++;//HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8004482:	4b0b      	ldr	r3, [pc, #44]	; (80044b0 <ABSCallbackHandler+0x68>)
 8004484:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8004488:	4a09      	ldr	r2, [pc, #36]	; (80044b0 <ABSCallbackHandler+0x68>)
 800448a:	441a      	add	r2, r3
 800448c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004490:	3201      	adds	r2, #1
 8004492:	b2d1      	uxtb	r1, r2
 8004494:	4a06      	ldr	r2, [pc, #24]	; (80044b0 <ABSCallbackHandler+0x68>)
 8004496:	4413      	add	r3, r2
 8004498:	460a      	mov	r2, r1
 800449a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 800449e:	bf00      	nop
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	20001700 	.word	0x20001700
 80044b0:	20001750 	.word	0x20001750

080044b4 <sendWheelSpeedByCan>:


void sendWheelSpeedByCan(int id){
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b08c      	sub	sp, #48	; 0x30
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
	ABSSensor* sensor = (ABSSensor*)_dataHandler[id].sensorStruct;
 80044bc:	4920      	ldr	r1, [pc, #128]	; (8004540 <sendWheelSpeedByCan+0x8c>)
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	4613      	mov	r3, r2
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	4413      	add	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	440b      	add	r3, r1
 80044ca:	3304      	adds	r3, #4
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t* TxMailBox = 0;
 80044d0:	2300      	movs	r3, #0
 80044d2:	62bb      	str	r3, [r7, #40]	; 0x28
	CAN_TxHeaderTypeDef pHeader;
	pHeader.DLC = 2;
 80044d4:	2302      	movs	r3, #2
 80044d6:	61fb      	str	r3, [r7, #28]
	pHeader.IDE = CAN_ID_STD;
 80044d8:	2300      	movs	r3, #0
 80044da:	617b      	str	r3, [r7, #20]
	pHeader.StdId = 0x560 + id;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f503 63ac 	add.w	r3, r3, #1376	; 0x560
 80044e2:	60fb      	str	r3, [r7, #12]
	pHeader.RTR = CAN_RTR_DATA;
 80044e4:	2300      	movs	r3, #0
 80044e6:	61bb      	str	r3, [r7, #24]
	uint16_t data =(uint16_t)sensor->data;
 80044e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ea:	edd3 7a08 	vldr	s15, [r3, #32]
 80044ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044f2:	ee17 3a90 	vmov	r3, s15
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	817b      	strh	r3, [r7, #10]
	if(sensor->data>0&&sensor->data<1)
 80044fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044fc:	edd3 7a08 	vldr	s15, [r3, #32]
 8004500:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004508:	dd0b      	ble.n	8004522 <sendWheelSpeedByCan+0x6e>
 800450a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800450c:	edd3 7a08 	vldr	s15, [r3, #32]
 8004510:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004514:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800451c:	d501      	bpl.n	8004522 <sendWheelSpeedByCan+0x6e>
	{
		data = 1;
 800451e:	2301      	movs	r3, #1
 8004520:	817b      	strh	r3, [r7, #10]
	}

	HAL_StatusTypeDef res = HAL_CAN_AddTxMessage(&hcan2, &pHeader,&data , TxMailBox);
 8004522:	f107 020a 	add.w	r2, r7, #10
 8004526:	f107 010c 	add.w	r1, r7, #12
 800452a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452c:	4805      	ldr	r0, [pc, #20]	; (8004544 <sendWheelSpeedByCan+0x90>)
 800452e:	f004 fe79 	bl	8009224 <HAL_CAN_AddTxMessage>
 8004532:	4603      	mov	r3, r0
 8004534:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
}
 8004538:	bf00      	nop
 800453a:	3730      	adds	r7, #48	; 0x30
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	20000000 	.word	0x20000000
 8004544:	2000052c 	.word	0x2000052c

08004548 <adcInit>:
extern SensorStatus statusRegister;
uint16_t adc1[2];
uint16_t adc2[2];
uint16_t adc3[3];
void adcInit(ADCSensor* sens,ADC_HandleTypeDef * adc,int channel,FIL* f)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
 8004554:	603b      	str	r3, [r7, #0]
	if(f == 0)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d108      	bne.n	800456e <adcInit+0x26>
	{
		sens->File = (FIL*)malloc(sizeof(FIL));
 800455c:	f241 0030 	movw	r0, #4144	; 0x1030
 8004560:	f011 fca2 	bl	8015ea8 <malloc>
 8004564:	4603      	mov	r3, r0
 8004566:	461a      	mov	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	601a      	str	r2, [r3, #0]
 800456c:	e002      	b.n	8004574 <adcInit+0x2c>
	}else
	{
		sens->File = f;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	601a      	str	r2, [r3, #0]
	}
	sens->adcChannel = channel;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	631a      	str	r2, [r3, #48]	; 0x30
	sens->adc = adc;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	68ba      	ldr	r2, [r7, #8]
 800457e:	629a      	str	r2, [r3, #40]	; 0x28
	//ADC_SetActiveChannel(sens);
	if(sens->ID == DAMPERLF)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	2b07      	cmp	r3, #7
 8004586:	d104      	bne.n	8004592 <adcInit+0x4a>
		HAL_ADC_Start_DMA(adc, adc1, 2);
 8004588:	2202      	movs	r2, #2
 800458a:	490d      	ldr	r1, [pc, #52]	; (80045c0 <adcInit+0x78>)
 800458c:	68b8      	ldr	r0, [r7, #8]
 800458e:	f004 f833 	bl	80085f8 <HAL_ADC_Start_DMA>
	if(sens->ID == DAMPERRF )
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	2b08      	cmp	r3, #8
 8004598:	d104      	bne.n	80045a4 <adcInit+0x5c>
		HAL_ADC_Start_DMA(adc, adc2, 2);
 800459a:	2202      	movs	r2, #2
 800459c:	4909      	ldr	r1, [pc, #36]	; (80045c4 <adcInit+0x7c>)
 800459e:	68b8      	ldr	r0, [r7, #8]
 80045a0:	f004 f82a 	bl	80085f8 <HAL_ADC_Start_DMA>
	if(sens->ID == WHEEL)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	2b06      	cmp	r3, #6
 80045aa:	d104      	bne.n	80045b6 <adcInit+0x6e>
		HAL_ADC_Start_DMA(adc, adc3, 2);
 80045ac:	2202      	movs	r2, #2
 80045ae:	4906      	ldr	r1, [pc, #24]	; (80045c8 <adcInit+0x80>)
 80045b0:	68b8      	ldr	r0, [r7, #8]
 80045b2:	f004 f821 	bl	80085f8 <HAL_ADC_Start_DMA>


}
 80045b6:	bf00      	nop
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	200060b8 	.word	0x200060b8
 80045c4:	200060bc 	.word	0x200060bc
 80045c8:	200060c0 	.word	0x200060c0

080045cc <damperInit>:
void damperInit(ADCSensor* sens,int id,FIL * f){
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
	sens->ID = id;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	621a      	str	r2, [r3, #32]
	switch(id){
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	3b07      	subs	r3, #7
 80045e2:	2b05      	cmp	r3, #5
 80045e4:	d842      	bhi.n	800466c <damperInit+0xa0>
 80045e6:	a201      	add	r2, pc, #4	; (adr r2, 80045ec <damperInit+0x20>)
 80045e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ec:	08004605 	.word	0x08004605
 80045f0:	08004625 	.word	0x08004625
 80045f4:	0800466d 	.word	0x0800466d
 80045f8:	0800466d 	.word	0x0800466d
 80045fc:	08004645 	.word	0x08004645
 8004600:	08004659 	.word	0x08004659
	case DAMPERLF:
		adcInit(sens,&hadc1,ADC_CHANNEL_2,f);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2202      	movs	r2, #2
 8004608:	4927      	ldr	r1, [pc, #156]	; (80046a8 <damperInit+0xdc>)
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f7ff ff9c 	bl	8004548 <adcInit>
		statusRegister.DamperLF = SENSOR_OK;
 8004610:	4a26      	ldr	r2, [pc, #152]	; (80046ac <damperInit+0xe0>)
 8004612:	78d3      	ldrb	r3, [r2, #3]
 8004614:	2101      	movs	r1, #1
 8004616:	f361 0302 	bfi	r3, r1, #0, #3
 800461a:	70d3      	strb	r3, [r2, #3]
		sens->data = adc1;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	4a24      	ldr	r2, [pc, #144]	; (80046b0 <damperInit+0xe4>)
 8004620:	61da      	str	r2, [r3, #28]
		break;
 8004622:	e024      	b.n	800466e <damperInit+0xa2>
	case DAMPERRF:
		adcInit(sens,&hadc2,ADC_CHANNEL_0,f);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	4922      	ldr	r1, [pc, #136]	; (80046b4 <damperInit+0xe8>)
 800462a:	68f8      	ldr	r0, [r7, #12]
 800462c:	f7ff ff8c 	bl	8004548 <adcInit>
		statusRegister.DamperRF = SENSOR_OK;
 8004630:	4a1e      	ldr	r2, [pc, #120]	; (80046ac <damperInit+0xe0>)
 8004632:	78d3      	ldrb	r3, [r2, #3]
 8004634:	2101      	movs	r1, #1
 8004636:	f361 03c5 	bfi	r3, r1, #3, #3
 800463a:	70d3      	strb	r3, [r2, #3]
		sens->data = adc2;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	4a1e      	ldr	r2, [pc, #120]	; (80046b8 <damperInit+0xec>)
 8004640:	61da      	str	r2, [r3, #28]
		break;
 8004642:	e014      	b.n	800466e <damperInit+0xa2>
	case DAMPERLR:
		adcInit(sens,&hadc1,ADC_CHANNEL_3,f);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2203      	movs	r2, #3
 8004648:	4917      	ldr	r1, [pc, #92]	; (80046a8 <damperInit+0xdc>)
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f7ff ff7c 	bl	8004548 <adcInit>
		sens->data = adc1+1;
 8004650:	4a1a      	ldr	r2, [pc, #104]	; (80046bc <damperInit+0xf0>)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	61da      	str	r2, [r3, #28]
		//statusRegister.DamperLF = SENSOR_OK;
		break;
 8004656:	e00a      	b.n	800466e <damperInit+0xa2>
	case DAMPERRR:
		adcInit(sens,&hadc2,ADC_CHANNEL_1,f);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	4915      	ldr	r1, [pc, #84]	; (80046b4 <damperInit+0xe8>)
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f7ff ff72 	bl	8004548 <adcInit>
		sens->data = adc2+1;
 8004664:	4a16      	ldr	r2, [pc, #88]	; (80046c0 <damperInit+0xf4>)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	61da      	str	r2, [r3, #28]
		//statusRegister.DamperRF = SENSOR_OK;
		break;
 800466a:	e000      	b.n	800466e <damperInit+0xa2>
	default:
		break;
 800466c:	bf00      	nop
	}
	sens->timeToNextRead = 50;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2232      	movs	r2, #50	; 0x32
 8004672:	62da      	str	r2, [r3, #44]	; 0x2c
	sens->dataReady = 0;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	619a      	str	r2, [r3, #24]
	RTC_DateTypeDef date;
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 800467a:	f107 0314 	add.w	r3, r7, #20
 800467e:	2200      	movs	r2, #0
 8004680:	4619      	mov	r1, r3
 8004682:	4810      	ldr	r0, [pc, #64]	; (80046c4 <damperInit+0xf8>)
 8004684:	f008 fdfe 	bl	800d284 <HAL_RTC_GetDate>
	sprintf(sens->path,"DAMP%02d%02d.csv",date.Date,date.Month);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	1d18      	adds	r0, r3, #4
 800468c:	7dbb      	ldrb	r3, [r7, #22]
 800468e:	461a      	mov	r2, r3
 8004690:	7d7b      	ldrb	r3, [r7, #21]
 8004692:	490d      	ldr	r1, [pc, #52]	; (80046c8 <damperInit+0xfc>)
 8004694:	f012 fbfa 	bl	8016e8c <siprintf>

	sens->adcType = damper;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

}
 80046a0:	bf00      	nop
 80046a2:	3718      	adds	r7, #24
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	2000030c 	.word	0x2000030c
 80046ac:	200057e8 	.word	0x200057e8
 80046b0:	200060b8 	.word	0x200060b8
 80046b4:	20000354 	.word	0x20000354
 80046b8:	200060bc 	.word	0x200060bc
 80046bc:	200060ba 	.word	0x200060ba
 80046c0:	200060be 	.word	0x200060be
 80046c4:	200016e0 	.word	0x200016e0
 80046c8:	0801b14c 	.word	0x0801b14c

080046cc <steeringInit>:
void steeringInit(ADCSensor* sens){
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]

	adcInit(sens,&hadc3,5,0);
 80046d4:	2300      	movs	r3, #0
 80046d6:	2205      	movs	r2, #5
 80046d8:	4913      	ldr	r1, [pc, #76]	; (8004728 <steeringInit+0x5c>)
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f7ff ff34 	bl	8004548 <adcInit>
	statusRegister.Steering = SENSOR_OK;
 80046e0:	4a12      	ldr	r2, [pc, #72]	; (800472c <steeringInit+0x60>)
 80046e2:	7893      	ldrb	r3, [r2, #2]
 80046e4:	2101      	movs	r1, #1
 80046e6:	f361 1347 	bfi	r3, r1, #5, #3
 80046ea:	7093      	strb	r3, [r2, #2]
	sens->ID = WHEEL;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2206      	movs	r2, #6
 80046f0:	621a      	str	r2, [r3, #32]
	sens->data = adc3+1;
 80046f2:	4a0f      	ldr	r2, [pc, #60]	; (8004730 <steeringInit+0x64>)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	61da      	str	r2, [r3, #28]
	RTC_DateTypeDef date;
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80046f8:	f107 030c 	add.w	r3, r7, #12
 80046fc:	2200      	movs	r2, #0
 80046fe:	4619      	mov	r1, r3
 8004700:	480c      	ldr	r0, [pc, #48]	; (8004734 <steeringInit+0x68>)
 8004702:	f008 fdbf 	bl	800d284 <HAL_RTC_GetDate>
	sprintf(sens->path,"WHEEl%02d%02d.csv",date.Date,date.Month);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	1d18      	adds	r0, r3, #4
 800470a:	7bbb      	ldrb	r3, [r7, #14]
 800470c:	461a      	mov	r2, r3
 800470e:	7b7b      	ldrb	r3, [r7, #13]
 8004710:	4909      	ldr	r1, [pc, #36]	; (8004738 <steeringInit+0x6c>)
 8004712:	f012 fbbb 	bl	8016e8c <siprintf>
	sens->adcType = steeringWheel;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 800471e:	bf00      	nop
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	2000039c 	.word	0x2000039c
 800472c:	200057e8 	.word	0x200057e8
 8004730:	200060c2 	.word	0x200060c2
 8004734:	200016e0 	.word	0x200016e0
 8004738:	0801b160 	.word	0x0801b160

0800473c <adcSendDataByCan>:
  if (HAL_ADC_ConfigChannel(sens->adc, &sConfig) != HAL_OK)
  {
   Error_Handler();
  }
}
void adcSendDataByCan(ADCSensor * sens){
 800473c:	b580      	push	{r7, lr}
 800473e:	b08a      	sub	sp, #40	; 0x28
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
	uint32_t* TxMailBox = 0;
 8004744:	2300      	movs	r3, #0
 8004746:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef pHeader;
	pHeader.DLC = 2;
 8004748:	2302      	movs	r3, #2
 800474a:	61fb      	str	r3, [r7, #28]
	pHeader.IDE = CAN_ID_STD;
 800474c:	2300      	movs	r3, #0
 800474e:	617b      	str	r3, [r7, #20]
	pHeader.StdId = 0x560 + sens->ID;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	f503 63ac 	add.w	r3, r3, #1376	; 0x560
 8004758:	60fb      	str	r3, [r7, #12]
	pHeader.RTR = CAN_RTR_DATA;
 800475a:	2300      	movs	r3, #0
 800475c:	61bb      	str	r3, [r7, #24]
	uint16_t data = *(sens->data);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	881b      	ldrh	r3, [r3, #0]
 8004764:	817b      	strh	r3, [r7, #10]

	HAL_CAN_AddTxMessage(&hcan1, &pHeader,&data , TxMailBox);
 8004766:	f107 020a 	add.w	r2, r7, #10
 800476a:	f107 010c 	add.w	r1, r7, #12
 800476e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004770:	4803      	ldr	r0, [pc, #12]	; (8004780 <adcSendDataByCan+0x44>)
 8004772:	f004 fd57 	bl	8009224 <HAL_CAN_AddTxMessage>
}
 8004776:	bf00      	nop
 8004778:	3728      	adds	r7, #40	; 0x28
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	20000504 	.word	0x20000504

08004784 <GPSReinitUart>:
	}
	return -1;
}

void GPSReinitUart(GPSSensor * sens)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  HAL_UART_Abort_IT(sens->uart);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8004792:	4618      	mov	r0, r3
 8004794:	f00b fdf6 	bl	8010384 <HAL_UART_Abort_IT>
  HAL_UART_DeInit(sens->uart);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800479e:	4618      	mov	r0, r3
 80047a0:	f00b fc28 	bl	800fff4 <HAL_UART_DeInit>
  sens->uart->Instance = USART3;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80047aa:	4a22      	ldr	r2, [pc, #136]	; (8004834 <GPSReinitUart+0xb0>)
 80047ac:	601a      	str	r2, [r3, #0]
  sens->uart->Init.BaudRate = 115200;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80047b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80047b8:	605a      	str	r2, [r3, #4]
  sens->uart->Init.WordLength = UART_WORDLENGTH_8B;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80047c0:	2200      	movs	r2, #0
 80047c2:	609a      	str	r2, [r3, #8]
  sens->uart->Init.StopBits = UART_STOPBITS_1;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80047ca:	2200      	movs	r2, #0
 80047cc:	60da      	str	r2, [r3, #12]
  sens->uart->Init.Parity = UART_PARITY_NONE;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80047d4:	2200      	movs	r2, #0
 80047d6:	611a      	str	r2, [r3, #16]
  sens->uart->Init.Mode = UART_MODE_TX_RX;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80047de:	220c      	movs	r2, #12
 80047e0:	615a      	str	r2, [r3, #20]
  sens->uart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80047e8:	2200      	movs	r2, #0
 80047ea:	619a      	str	r2, [r3, #24]
  sens->uart->Init.OverSampling = UART_OVERSAMPLING_16;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80047f2:	2200      	movs	r2, #0
 80047f4:	61da      	str	r2, [r3, #28]
  sens->uart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80047fc:	2200      	movs	r2, #0
 80047fe:	621a      	str	r2, [r3, #32]
  sens->uart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8004806:	2210      	movs	r2, #16
 8004808:	625a      	str	r2, [r3, #36]	; 0x24
  sens->uart->AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8004810:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004814:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(sens->uart) != HAL_OK)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800481c:	4618      	mov	r0, r3
 800481e:	f00b fb9b 	bl	800ff58 <HAL_UART_Init>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d001      	beq.n	800482c <GPSReinitUart+0xa8>
  {
	  Error_Handler();
 8004828:	f7fd fd0c 	bl	8002244 <Error_Handler>
  }
}
 800482c:	bf00      	nop
 800482e:	3708      	adds	r7, #8
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	40004800 	.word	0x40004800

08004838 <GPSInit>:


void GPSInit(GPSSensor * sens)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
	sens->File = (FIL*)malloc(sizeof(FIL));
 8004840:	f241 0030 	movw	r0, #4144	; 0x1030
 8004844:	f011 fb30 	bl	8015ea8 <malloc>
 8004848:	4603      	mov	r3, r0
 800484a:	461a      	mov	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	601a      	str	r2, [r3, #0]
	sens->saveRate = GPS_ERROR_TIME;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004856:	621a      	str	r2, [r3, #32]
	sens->uart = &huart3;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a25      	ldr	r2, [pc, #148]	; (80048f0 <GPSInit+0xb8>)
 800485c:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	sens->saveLock = 0;
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	7f53      	ldrb	r3, [r2, #29]
 8004864:	f36f 0341 	bfc	r3, #1, #1
 8004868:	7753      	strb	r3, [r2, #29]
	sens->buforSize = 0;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
	RTC_DateTypeDef date;
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8004872:	f107 030c 	add.w	r3, r7, #12
 8004876:	2200      	movs	r2, #0
 8004878:	4619      	mov	r1, r3
 800487a:	481e      	ldr	r0, [pc, #120]	; (80048f4 <GPSInit+0xbc>)
 800487c:	f008 fd02 	bl	800d284 <HAL_RTC_GetDate>
	sprintf(sens->path,"GPS%02d%02d.csv",date.Date,date.Month);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	1d18      	adds	r0, r3, #4
 8004884:	7bbb      	ldrb	r3, [r7, #14]
 8004886:	461a      	mov	r2, r3
 8004888:	7b7b      	ldrb	r3, [r7, #13]
 800488a:	491b      	ldr	r1, [pc, #108]	; (80048f8 <GPSInit+0xc0>)
 800488c:	f012 fafe 	bl	8016e8c <siprintf>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, 1);
 8004890:	2201      	movs	r2, #1
 8004892:	2140      	movs	r1, #64	; 0x40
 8004894:	4819      	ldr	r0, [pc, #100]	; (80048fc <GPSInit+0xc4>)
 8004896:	f006 f905 	bl	800aaa4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, 1);
 800489a:	2201      	movs	r2, #1
 800489c:	2120      	movs	r1, #32
 800489e:	4817      	ldr	r0, [pc, #92]	; (80048fc <GPSInit+0xc4>)
 80048a0:	f006 f900 	bl	800aaa4 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80048a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80048a8:	f003 fe3e 	bl	8008528 <HAL_Delay>
    GPSChangeBaudrate();
 80048ac:	f000 f926 	bl	8004afc <GPSChangeBaudrate>
    HAL_Delay(1000);
 80048b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80048b4:	f003 fe38 	bl	8008528 <HAL_Delay>
    GPSReinitUart(sens);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f7ff ff63 	bl	8004784 <GPSReinitUart>
    HAL_UART_Receive_IT(sens->uart, &(sens->Rx_data), 1); // aktywacja przerwan
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	3324      	adds	r3, #36	; 0x24
 80048c8:	2201      	movs	r2, #1
 80048ca:	4619      	mov	r1, r3
 80048cc:	f00b fd16 	bl	80102fc <HAL_UART_Receive_IT>
    GPSSetDataRate();
 80048d0:	f000 f816 	bl	8004900 <GPSSetDataRate>
    HAL_Delay(1000);
 80048d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80048d8:	f003 fe26 	bl	8008528 <HAL_Delay>
    GPSDisableNmea();
 80048dc:	f000 f85c 	bl	8004998 <GPSDisableNmea>
    HAL_Delay(100);
 80048e0:	2064      	movs	r0, #100	; 0x64
 80048e2:	f003 fe21 	bl	8008528 <HAL_Delay>


}
 80048e6:	bf00      	nop
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	20005be0 	.word	0x20005be0
 80048f4:	200016e0 	.word	0x200016e0
 80048f8:	0801b194 	.word	0x0801b194
 80048fc:	40021800 	.word	0x40021800

08004900 <GPSSetDataRate>:

void GPSSetDataRate(){
 8004900:	b590      	push	{r4, r7, lr}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
	char packet[] = {
 8004906:	4b22      	ldr	r3, [pc, #136]	; (8004990 <GPSSetDataRate+0x90>)
 8004908:	463c      	mov	r4, r7
 800490a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800490c:	c407      	stmia	r4!, {r0, r1, r2}
 800490e:	8023      	strh	r3, [r4, #0]
        0x00, // payload
        0x00, // payload
        0x00, // CK_A
        0x00, // CK_B
    };
    char packetSize = sizeof(packet);
 8004910:	230e      	movs	r3, #14
 8004912:	73bb      	strb	r3, [r7, #14]
    for (char j = 0; j < packetSize - 4; j++)
 8004914:	2300      	movs	r3, #0
 8004916:	73fb      	strb	r3, [r7, #15]
 8004918:	e02a      	b.n	8004970 <GPSSetDataRate+0x70>
	{
    	packet[packetSize - 2] += packet[2 + j];
 800491a:	7bbb      	ldrb	r3, [r7, #14]
 800491c:	3b02      	subs	r3, #2
 800491e:	3310      	adds	r3, #16
 8004920:	443b      	add	r3, r7
 8004922:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 8004926:	7bfb      	ldrb	r3, [r7, #15]
 8004928:	3302      	adds	r3, #2
 800492a:	3310      	adds	r3, #16
 800492c:	443b      	add	r3, r7
 800492e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8004932:	7bbb      	ldrb	r3, [r7, #14]
 8004934:	3b02      	subs	r3, #2
 8004936:	440a      	add	r2, r1
 8004938:	b2d2      	uxtb	r2, r2
 800493a:	3310      	adds	r3, #16
 800493c:	443b      	add	r3, r7
 800493e:	f803 2c10 	strb.w	r2, [r3, #-16]
    	packet[packetSize - 1] += packet[packetSize - 2];
 8004942:	7bbb      	ldrb	r3, [r7, #14]
 8004944:	3b01      	subs	r3, #1
 8004946:	3310      	adds	r3, #16
 8004948:	443b      	add	r3, r7
 800494a:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 800494e:	7bbb      	ldrb	r3, [r7, #14]
 8004950:	3b02      	subs	r3, #2
 8004952:	3310      	adds	r3, #16
 8004954:	443b      	add	r3, r7
 8004956:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800495a:	7bbb      	ldrb	r3, [r7, #14]
 800495c:	3b01      	subs	r3, #1
 800495e:	440a      	add	r2, r1
 8004960:	b2d2      	uxtb	r2, r2
 8004962:	3310      	adds	r3, #16
 8004964:	443b      	add	r3, r7
 8004966:	f803 2c10 	strb.w	r2, [r3, #-16]
    for (char j = 0; j < packetSize - 4; j++)
 800496a:	7bfb      	ldrb	r3, [r7, #15]
 800496c:	3301      	adds	r3, #1
 800496e:	73fb      	strb	r3, [r7, #15]
 8004970:	7bfa      	ldrb	r2, [r7, #15]
 8004972:	7bbb      	ldrb	r3, [r7, #14]
 8004974:	3b04      	subs	r3, #4
 8004976:	429a      	cmp	r2, r3
 8004978:	dbcf      	blt.n	800491a <GPSSetDataRate+0x1a>
    }
	HAL_UART_Transmit(&huart3, packet, packetSize, 10);
 800497a:	7bbb      	ldrb	r3, [r7, #14]
 800497c:	b29a      	uxth	r2, r3
 800497e:	4639      	mov	r1, r7
 8004980:	230a      	movs	r3, #10
 8004982:	4804      	ldr	r0, [pc, #16]	; (8004994 <GPSSetDataRate+0x94>)
 8004984:	f00b fb73 	bl	801006e <HAL_UART_Transmit>
}
 8004988:	bf00      	nop
 800498a:	3714      	adds	r7, #20
 800498c:	46bd      	mov	sp, r7
 800498e:	bd90      	pop	{r4, r7, pc}
 8004990:	0801b1a4 	.word	0x0801b1a4
 8004994:	20005be0 	.word	0x20005be0

08004998 <GPSDisableNmea>:
// Send a set of packets to the GPS receiver to disable NMEA messages.
void GPSDisableNmea()
{
 8004998:	b5b0      	push	{r4, r5, r7, lr}
 800499a:	b094      	sub	sp, #80	; 0x50
 800499c:	af00      	add	r7, sp, #0
    // An array of two bytes for CFG-MSG packets payload.
    char messages[][3] = {
 800499e:	4b54      	ldr	r3, [pc, #336]	; (8004af0 <GPSDisableNmea+0x158>)
 80049a0:	f107 040c 	add.w	r4, r7, #12
 80049a4:	461d      	mov	r5, r3
 80049a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80049b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        {0xF1, 0x05},
        {0xF1, 0x06},
    };

    // CFG-MSG packet buffer.
    char packet[] = {
 80049ba:	4a4e      	ldr	r2, [pc, #312]	; (8004af4 <GPSDisableNmea+0x15c>)
 80049bc:	463b      	mov	r3, r7
 80049be:	ca07      	ldmia	r2, {r0, r1, r2}
 80049c0:	c303      	stmia	r3!, {r0, r1}
 80049c2:	801a      	strh	r2, [r3, #0]
 80049c4:	3302      	adds	r3, #2
 80049c6:	0c12      	lsrs	r2, r2, #16
 80049c8:	701a      	strb	r2, [r3, #0]
        0x04, // payload (second byte from messages array element)
        0x10, // payload (not changed in this case)
        0x00, // CK_A
        0x00, // CK_B
    };
    char packetSize = sizeof(packet);
 80049ca:	230b      	movs	r3, #11
 80049cc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

    // Offset to a place where payload starts.
    char payloadOffset = 6;
 80049d0:	2306      	movs	r3, #6
 80049d2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

    // Iterate over the messages array.
    for (char i = 0; i < sizeof(messages) / sizeof(*messages); i++)
 80049d6:	2300      	movs	r3, #0
 80049d8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80049dc:	e07d      	b.n	8004ada <GPSDisableNmea+0x142>
    {
        // Copy two bytes of payload to the packet buffer.
        for (char j = 0; j < sizeof(*messages); j++)
 80049de:	2300      	movs	r3, #0
 80049e0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80049e4:	e01a      	b.n	8004a1c <GPSDisableNmea+0x84>
        {
            packet[payloadOffset + j] = messages[i][j];
 80049e6:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80049ea:	f897 004e 	ldrb.w	r0, [r7, #78]	; 0x4e
 80049ee:	f897 104b 	ldrb.w	r1, [r7, #75]	; 0x4b
 80049f2:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80049f6:	4419      	add	r1, r3
 80049f8:	4613      	mov	r3, r2
 80049fa:	005b      	lsls	r3, r3, #1
 80049fc:	4413      	add	r3, r2
 80049fe:	3350      	adds	r3, #80	; 0x50
 8004a00:	443b      	add	r3, r7
 8004a02:	4403      	add	r3, r0
 8004a04:	3b44      	subs	r3, #68	; 0x44
 8004a06:	781a      	ldrb	r2, [r3, #0]
 8004a08:	f101 0350 	add.w	r3, r1, #80	; 0x50
 8004a0c:	443b      	add	r3, r7
 8004a0e:	f803 2c50 	strb.w	r2, [r3, #-80]
        for (char j = 0; j < sizeof(*messages); j++)
 8004a12:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8004a16:	3301      	adds	r3, #1
 8004a18:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8004a1c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d9e0      	bls.n	80049e6 <GPSDisableNmea+0x4e>
        }

        // Set checksum bytes to null.
        packet[packetSize - 2] = 0x00;
 8004a24:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8004a28:	3b02      	subs	r3, #2
 8004a2a:	3350      	adds	r3, #80	; 0x50
 8004a2c:	443b      	add	r3, r7
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f803 2c50 	strb.w	r2, [r3, #-80]
        packet[packetSize - 1] = 0x00;
 8004a34:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	3350      	adds	r3, #80	; 0x50
 8004a3c:	443b      	add	r3, r7
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f803 2c50 	strb.w	r2, [r3, #-80]

        // Calculate checksum over the packet buffer excluding sync (first two) and checksum chars (last two).
        for (char j = 0; j < packetSize - 4; j++)
 8004a44:	2300      	movs	r3, #0
 8004a46:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8004a4a:	e032      	b.n	8004ab2 <GPSDisableNmea+0x11a>
        {
            packet[packetSize - 2] += packet[2 + j];
 8004a4c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8004a50:	3b02      	subs	r3, #2
 8004a52:	3350      	adds	r3, #80	; 0x50
 8004a54:	443b      	add	r3, r7
 8004a56:	f813 1c50 	ldrb.w	r1, [r3, #-80]
 8004a5a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004a5e:	3302      	adds	r3, #2
 8004a60:	3350      	adds	r3, #80	; 0x50
 8004a62:	443b      	add	r3, r7
 8004a64:	f813 2c50 	ldrb.w	r2, [r3, #-80]
 8004a68:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8004a6c:	3b02      	subs	r3, #2
 8004a6e:	440a      	add	r2, r1
 8004a70:	b2d2      	uxtb	r2, r2
 8004a72:	3350      	adds	r3, #80	; 0x50
 8004a74:	443b      	add	r3, r7
 8004a76:	f803 2c50 	strb.w	r2, [r3, #-80]
            packet[packetSize - 1] += packet[packetSize - 2];
 8004a7a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	3350      	adds	r3, #80	; 0x50
 8004a82:	443b      	add	r3, r7
 8004a84:	f813 1c50 	ldrb.w	r1, [r3, #-80]
 8004a88:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8004a8c:	3b02      	subs	r3, #2
 8004a8e:	3350      	adds	r3, #80	; 0x50
 8004a90:	443b      	add	r3, r7
 8004a92:	f813 2c50 	ldrb.w	r2, [r3, #-80]
 8004a96:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	440a      	add	r2, r1
 8004a9e:	b2d2      	uxtb	r2, r2
 8004aa0:	3350      	adds	r3, #80	; 0x50
 8004aa2:	443b      	add	r3, r7
 8004aa4:	f803 2c50 	strb.w	r2, [r3, #-80]
        for (char j = 0; j < packetSize - 4; j++)
 8004aa8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004aac:	3301      	adds	r3, #1
 8004aae:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8004ab2:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8004ab6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8004aba:	3b04      	subs	r3, #4
 8004abc:	429a      	cmp	r2, r3
 8004abe:	dbc5      	blt.n	8004a4c <GPSDisableNmea+0xb4>
        }
        HAL_UART_Transmit(&huart3, packet, packetSize, 10);
 8004ac0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	4639      	mov	r1, r7
 8004ac8:	230a      	movs	r3, #10
 8004aca:	480b      	ldr	r0, [pc, #44]	; (8004af8 <GPSDisableNmea+0x160>)
 8004acc:	f00b facf 	bl	801006e <HAL_UART_Transmit>
    for (char i = 0; i < sizeof(messages) / sizeof(*messages); i++)
 8004ad0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8004ada:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004ade:	2b13      	cmp	r3, #19
 8004ae0:	f67f af7d 	bls.w	80049de <GPSDisableNmea+0x46>

    }
}
 8004ae4:	bf00      	nop
 8004ae6:	bf00      	nop
 8004ae8:	3750      	adds	r7, #80	; 0x50
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bdb0      	pop	{r4, r5, r7, pc}
 8004aee:	bf00      	nop
 8004af0:	0801b1b4 	.word	0x0801b1b4
 8004af4:	0801b1f0 	.word	0x0801b1f0
 8004af8:	20005be0 	.word	0x20005be0

08004afc <GPSChangeBaudrate>:
void GPSChangeBaudrate()
{
 8004afc:	b5b0      	push	{r4, r5, r7, lr}
 8004afe:	b092      	sub	sp, #72	; 0x48
 8004b00:	af00      	add	r7, sp, #0
    // CFG-PRT packet.
    char packet[] = {
 8004b02:	4b2e      	ldr	r3, [pc, #184]	; (8004bbc <GPSChangeBaudrate+0xc0>)
 8004b04:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004b08:	461d      	mov	r5, r3
 8004b0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b0e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004b12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        0x00, // payload
        0x00, // payload
        0x00, // CK_A
        0x00, // CK_B
    };
    char packetSize = sizeof(packet);
 8004b16:	231c      	movs	r3, #28
 8004b18:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

    for (char j = 0; j < packetSize - 4; j++)
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004b22:	e032      	b.n	8004b8a <GPSChangeBaudrate+0x8e>
    {
        packet[packetSize - 2] += packet[2 + j];
 8004b24:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004b28:	3b02      	subs	r3, #2
 8004b2a:	3348      	adds	r3, #72	; 0x48
 8004b2c:	443b      	add	r3, r7
 8004b2e:	f813 1c20 	ldrb.w	r1, [r3, #-32]
 8004b32:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004b36:	3302      	adds	r3, #2
 8004b38:	3348      	adds	r3, #72	; 0x48
 8004b3a:	443b      	add	r3, r7
 8004b3c:	f813 2c20 	ldrb.w	r2, [r3, #-32]
 8004b40:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004b44:	3b02      	subs	r3, #2
 8004b46:	440a      	add	r2, r1
 8004b48:	b2d2      	uxtb	r2, r2
 8004b4a:	3348      	adds	r3, #72	; 0x48
 8004b4c:	443b      	add	r3, r7
 8004b4e:	f803 2c20 	strb.w	r2, [r3, #-32]
        packet[packetSize - 1] += packet[packetSize - 2];
 8004b52:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004b56:	3b01      	subs	r3, #1
 8004b58:	3348      	adds	r3, #72	; 0x48
 8004b5a:	443b      	add	r3, r7
 8004b5c:	f813 1c20 	ldrb.w	r1, [r3, #-32]
 8004b60:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004b64:	3b02      	subs	r3, #2
 8004b66:	3348      	adds	r3, #72	; 0x48
 8004b68:	443b      	add	r3, r7
 8004b6a:	f813 2c20 	ldrb.w	r2, [r3, #-32]
 8004b6e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004b72:	3b01      	subs	r3, #1
 8004b74:	440a      	add	r2, r1
 8004b76:	b2d2      	uxtb	r2, r2
 8004b78:	3348      	adds	r3, #72	; 0x48
 8004b7a:	443b      	add	r3, r7
 8004b7c:	f803 2c20 	strb.w	r2, [r3, #-32]
    for (char j = 0; j < packetSize - 4; j++)
 8004b80:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004b84:	3301      	adds	r3, #1
 8004b86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004b8a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8004b8e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004b92:	3b04      	subs	r3, #4
 8004b94:	429a      	cmp	r2, r3
 8004b96:	dbc5      	blt.n	8004b24 <GPSChangeBaudrate+0x28>
    }
    char bucker[40];
    HAL_UART_Transmit(&huart3, packet, sizeof(packet), 10);
 8004b98:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004b9c:	230a      	movs	r3, #10
 8004b9e:	221c      	movs	r2, #28
 8004ba0:	4807      	ldr	r0, [pc, #28]	; (8004bc0 <GPSChangeBaudrate+0xc4>)
 8004ba2:	f00b fa64 	bl	801006e <HAL_UART_Transmit>
    HAL_UART_Receive(&huart3, bucker, 30, 20);
 8004ba6:	4639      	mov	r1, r7
 8004ba8:	2314      	movs	r3, #20
 8004baa:	221e      	movs	r2, #30
 8004bac:	4804      	ldr	r0, [pc, #16]	; (8004bc0 <GPSChangeBaudrate+0xc4>)
 8004bae:	f00b fae1 	bl	8010174 <HAL_UART_Receive>
}
 8004bb2:	bf00      	nop
 8004bb4:	3748      	adds	r7, #72	; 0x48
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bdb0      	pop	{r4, r5, r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	0801b1fc 	.word	0x0801b1fc
 8004bc0:	20005be0 	.word	0x20005be0

08004bc4 <GPSCallbackHandler>:

void GPSCallbackHandler(){
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	af00      	add	r7, sp, #0

	gpsSensor.bufor[gpsSensor.buforSize] = gpsSensor.Rx_data;
 8004bc8:	4b2a      	ldr	r3, [pc, #168]	; (8004c74 <GPSCallbackHandler+0xb0>)
 8004bca:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8004bce:	4619      	mov	r1, r3
 8004bd0:	4b28      	ldr	r3, [pc, #160]	; (8004c74 <GPSCallbackHandler+0xb0>)
 8004bd2:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8004bd6:	4b27      	ldr	r3, [pc, #156]	; (8004c74 <GPSCallbackHandler+0xb0>)
 8004bd8:	440b      	add	r3, r1
 8004bda:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	gpsSensor.buforSize++;
 8004bde:	4b25      	ldr	r3, [pc, #148]	; (8004c74 <GPSCallbackHandler+0xb0>)
 8004be0:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8004be4:	3301      	adds	r3, #1
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	4b22      	ldr	r3, [pc, #136]	; (8004c74 <GPSCallbackHandler+0xb0>)
 8004bea:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124

	  if(gpsSensor.Rx_data == '\n' && gpsSensor.buforSize > 10)
 8004bee:	4b21      	ldr	r3, [pc, #132]	; (8004c74 <GPSCallbackHandler+0xb0>)
 8004bf0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004bf4:	2b0a      	cmp	r3, #10
 8004bf6:	d132      	bne.n	8004c5e <GPSCallbackHandler+0x9a>
 8004bf8:	4b1e      	ldr	r3, [pc, #120]	; (8004c74 <GPSCallbackHandler+0xb0>)
 8004bfa:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8004bfe:	2b0a      	cmp	r3, #10
 8004c00:	d92d      	bls.n	8004c5e <GPSCallbackHandler+0x9a>
	  {
		_dataHandler[GPS].dataReady = 0;
 8004c02:	4a1d      	ldr	r2, [pc, #116]	; (8004c78 <GPSCallbackHandler+0xb4>)
 8004c04:	7c13      	ldrb	r3, [r2, #16]
 8004c06:	f36f 0300 	bfc	r3, #0, #1
 8004c0a:	7413      	strb	r3, [r2, #16]
		gpsSensor.bufor[gpsSensor.buforSize]= 0;
 8004c0c:	4b19      	ldr	r3, [pc, #100]	; (8004c74 <GPSCallbackHandler+0xb0>)
 8004c0e:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8004c12:	461a      	mov	r2, r3
 8004c14:	4b17      	ldr	r3, [pc, #92]	; (8004c74 <GPSCallbackHandler+0xb0>)
 8004c16:	4413      	add	r3, r2
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		strcpy(gpsSensor.data,gpsSensor.bufor);
 8004c1e:	4917      	ldr	r1, [pc, #92]	; (8004c7c <GPSCallbackHandler+0xb8>)
 8004c20:	4817      	ldr	r0, [pc, #92]	; (8004c80 <GPSCallbackHandler+0xbc>)
 8004c22:	f012 f953 	bl	8016ecc <strcpy>
		gpsSensor.bufor[0]= '\0';
 8004c26:	4b13      	ldr	r3, [pc, #76]	; (8004c74 <GPSCallbackHandler+0xb0>)
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		gpsSensor.buforSize = 0;
 8004c2e:	4b11      	ldr	r3, [pc, #68]	; (8004c74 <GPSCallbackHandler+0xb0>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
		gpsSensor.Rx_data = '\0';
 8004c36:	4b0f      	ldr	r3, [pc, #60]	; (8004c74 <GPSCallbackHandler+0xb0>)
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		gpsSensor.dataReady = 1;
 8004c3e:	4a0d      	ldr	r2, [pc, #52]	; (8004c74 <GPSCallbackHandler+0xb0>)
 8004c40:	7f53      	ldrb	r3, [r2, #29]
 8004c42:	f043 0301 	orr.w	r3, r3, #1
 8004c46:	7753      	strb	r3, [r2, #29]
		_dataHandler[GPS].dataReady = 1;
 8004c48:	4a0b      	ldr	r2, [pc, #44]	; (8004c78 <GPSCallbackHandler+0xb4>)
 8004c4a:	7c13      	ldrb	r3, [r2, #16]
 8004c4c:	f043 0301 	orr.w	r3, r3, #1
 8004c50:	7413      	strb	r3, [r2, #16]
		gpsSensor.timestamp = getSeconds();
 8004c52:	f7fd f915 	bl	8001e80 <getSeconds>
 8004c56:	4603      	mov	r3, r0
 8004c58:	4a06      	ldr	r2, [pc, #24]	; (8004c74 <GPSCallbackHandler+0xb0>)
 8004c5a:	f8c2 3228 	str.w	r3, [r2, #552]	; 0x228
		 gpsSensor.bufor[0] = '\0';
		 gpsSensor.buforSize = 0;
		 _dataHandler[GPS].dataReady = 0;
	  }

	  HAL_UART_Receive_IT(gpsSensor.uart, &(gpsSensor.Rx_data), 1);
 8004c5e:	4b05      	ldr	r3, [pc, #20]	; (8004c74 <GPSCallbackHandler+0xb0>)
 8004c60:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8004c64:	2201      	movs	r2, #1
 8004c66:	4907      	ldr	r1, [pc, #28]	; (8004c84 <GPSCallbackHandler+0xc0>)
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f00b fb47 	bl	80102fc <HAL_UART_Receive_IT>
}
 8004c6e:	bf00      	nop
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	200017a0 	.word	0x200017a0
 8004c78:	20000000 	.word	0x20000000
 8004c7c:	200017c5 	.word	0x200017c5
 8004c80:	200018c5 	.word	0x200018c5
 8004c84:	200017c4 	.word	0x200017c4

08004c88 <IMUInit>:

/* *******IMU SECTION  ********/

//IMU FUNCS
void IMUInit(IMUSensor * sens)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
	int result = MPU9250_Init();
 8004c90:	f003 f9e8 	bl	8008064 <MPU9250_Init>
 8004c94:	4603      	mov	r3, r0
 8004c96:	60fb      	str	r3, [r7, #12]
	if(result == 0)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d106      	bne.n	8004cac <IMUInit+0x24>
	{
		statusRegister.IMU = SENSOR_OK;
 8004c9e:	4a16      	ldr	r2, [pc, #88]	; (8004cf8 <IMUInit+0x70>)
 8004ca0:	8813      	ldrh	r3, [r2, #0]
 8004ca2:	2101      	movs	r1, #1
 8004ca4:	f361 1388 	bfi	r3, r1, #6, #3
 8004ca8:	8013      	strh	r3, [r2, #0]
 8004caa:	e004      	b.n	8004cb6 <IMUInit+0x2e>
	}else{
		statusRegister.IMU = SENSOR_INIT_FAIL;
 8004cac:	4a12      	ldr	r2, [pc, #72]	; (8004cf8 <IMUInit+0x70>)
 8004cae:	8813      	ldrh	r3, [r2, #0]
 8004cb0:	f443 73e0 	orr.w	r3, r3, #448	; 0x1c0
 8004cb4:	8013      	strh	r3, [r2, #0]
	}
	sens->File = (FIL*)malloc(sizeof(FIL));
 8004cb6:	f241 0030 	movw	r0, #4144	; 0x1030
 8004cba:	f011 f8f5 	bl	8015ea8 <malloc>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	601a      	str	r2, [r3, #0]

	RTC_DateTypeDef date;
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8004cc6:	f107 0308 	add.w	r3, r7, #8
 8004cca:	2200      	movs	r2, #0
 8004ccc:	4619      	mov	r1, r3
 8004cce:	480b      	ldr	r0, [pc, #44]	; (8004cfc <IMUInit+0x74>)
 8004cd0:	f008 fad8 	bl	800d284 <HAL_RTC_GetDate>
	sprintf(sens->path,"IMU%02d%02d.csv",date.Date,date.Month);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	1d18      	adds	r0, r3, #4
 8004cd8:	7abb      	ldrb	r3, [r7, #10]
 8004cda:	461a      	mov	r2, r3
 8004cdc:	7a7b      	ldrb	r3, [r7, #9]
 8004cde:	4908      	ldr	r1, [pc, #32]	; (8004d00 <IMUInit+0x78>)
 8004ce0:	f012 f8d4 	bl	8016e8c <siprintf>
	sens->dataReady = 0;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	619a      	str	r2, [r3, #24]
	sens->timeToNextRead = IMU_DATA_RATE;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	220a      	movs	r2, #10
 8004cee:	61da      	str	r2, [r3, #28]
}
 8004cf0:	bf00      	nop
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	200057e8 	.word	0x200057e8
 8004cfc:	200016e0 	.word	0x200016e0
 8004d00:	0801b218 	.word	0x0801b218
 8004d04:	00000000 	.word	0x00000000

08004d08 <IMUConvertData>:
void IMUConvertData(struct IMURawData * input, struct IMUCalculatedData * output)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
	output->acc_data_calc[0] = (double) input->acc_data[0] / 2048.0;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d18:	ee07 3a90 	vmov	s15, r3
 8004d1c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004d20:	ed9f 5b29 	vldr	d5, [pc, #164]	; 8004dc8 <IMUConvertData+0xc0>
 8004d24:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	ed83 7b00 	vstr	d7, [r3]
	output->acc_data_calc[1] = (double) input->acc_data[1] / 2048.0;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004d34:	ee07 3a90 	vmov	s15, r3
 8004d38:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004d3c:	ed9f 5b22 	vldr	d5, [pc, #136]	; 8004dc8 <IMUConvertData+0xc0>
 8004d40:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	ed83 7b02 	vstr	d7, [r3, #8]
	output->acc_data_calc[2] = (double) input->acc_data[2] / 2048.0;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004d50:	ee07 3a90 	vmov	s15, r3
 8004d54:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004d58:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 8004dc8 <IMUConvertData+0xc0>
 8004d5c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	ed83 7b04 	vstr	d7, [r3, #16]
	output->gyro_data_calc[0] = (double) input->gyro_data[0] / 16.4;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004d6c:	ee07 3a90 	vmov	s15, r3
 8004d70:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004d74:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8004dd0 <IMUConvertData+0xc8>
 8004d78:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	ed83 7b06 	vstr	d7, [r3, #24]
	output->gyro_data_calc[1] = (double) input->gyro_data[1] /16.4;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004d88:	ee07 3a90 	vmov	s15, r3
 8004d8c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004d90:	ed9f 5b0f 	vldr	d5, [pc, #60]	; 8004dd0 <IMUConvertData+0xc8>
 8004d94:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	ed83 7b08 	vstr	d7, [r3, #32]
	output->gyro_data_calc[2] = (double) input->gyro_data[2] /16.4;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8004da4:	ee07 3a90 	vmov	s15, r3
 8004da8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004dac:	ed9f 5b08 	vldr	d5, [pc, #32]	; 8004dd0 <IMUConvertData+0xc8>
 8004db0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28

}
 8004dba:	bf00      	nop
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	00000000 	.word	0x00000000
 8004dcc:	40a00000 	.word	0x40a00000
 8004dd0:	66666666 	.word	0x66666666
 8004dd4:	40306666 	.word	0x40306666

08004dd8 <IMUGetData>:

void IMUGetData(IMUSensor * sens)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b088      	sub	sp, #32
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
	IMUData imu_9dof_data;

	sens->dataReady = 1;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	619a      	str	r2, [r3, #24]
    MPU9250_GetData(imu_9dof_data.acc_data, imu_9dof_data.mag_data, imu_9dof_data.gyro_data);
 8004de6:	f107 030c 	add.w	r3, r7, #12
 8004dea:	f103 020c 	add.w	r2, r3, #12
 8004dee:	f107 030c 	add.w	r3, r7, #12
 8004df2:	1d99      	adds	r1, r3, #6
 8004df4:	f107 030c 	add.w	r3, r7, #12
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f003 f9fd 	bl	80081f8 <MPU9250_GetData>
    IMUConvertData(&imu_9dof_data, &sens->data);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f103 0220 	add.w	r2, r3, #32
 8004e04:	f107 030c 	add.w	r3, r7, #12
 8004e08:	4611      	mov	r1, r2
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7ff ff7c 	bl	8004d08 <IMUConvertData>
    sens->timestamp = getSeconds();
 8004e10:	f7fd f836 	bl	8001e80 <getSeconds>
 8004e14:	4602      	mov	r2, r0
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8004e1c:	bf00      	nop
 8004e1e:	3720      	adds	r7, #32
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <mlxInit>:

extern RTC_HandleTypeDef hrtc;
extern SensorStatus statusRegister;
//MLX FUNCS
int mlxInit(MLXSensor *mlx,int id, I2C_HandleTypeDef * i2c,FIL * f)
{
 8004e24:	b590      	push	{r4, r7, lr}
 8004e26:	f2ad 6d9c 	subw	sp, sp, #1692	; 0x69c
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	f507 64d3 	add.w	r4, r7, #1688	; 0x698
 8004e30:	f2a4 648c 	subw	r4, r4, #1676	; 0x68c
 8004e34:	6020      	str	r0, [r4, #0]
 8004e36:	f507 60d3 	add.w	r0, r7, #1688	; 0x698
 8004e3a:	f5a0 60d2 	sub.w	r0, r0, #1680	; 0x690
 8004e3e:	6001      	str	r1, [r0, #0]
 8004e40:	f507 61d3 	add.w	r1, r7, #1688	; 0x698
 8004e44:	f2a1 6194 	subw	r1, r1, #1684	; 0x694
 8004e48:	600a      	str	r2, [r1, #0]
 8004e4a:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 8004e4e:	f5a2 62d3 	sub.w	r2, r2, #1688	; 0x698
 8004e52:	6013      	str	r3, [r2, #0]
		uint16_t eeMLX90640[832];
		if(f == 0)
 8004e54:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004e58:	f5a3 63d3 	sub.w	r3, r3, #1688	; 0x698
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d10c      	bne.n	8004e7c <mlxInit+0x58>
		{
			mlx->File = (FIL*)malloc(sizeof(FIL));
 8004e62:	f241 0030 	movw	r0, #4144	; 0x1030
 8004e66:	f011 f81f 	bl	8015ea8 <malloc>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004e72:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	601a      	str	r2, [r3, #0]
 8004e7a:	e00a      	b.n	8004e92 <mlxInit+0x6e>
		}else
		{
			mlx->File = f;
 8004e7c:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004e80:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 8004e8a:	f5a2 62d3 	sub.w	r2, r2, #1688	; 0x698
 8004e8e:	6812      	ldr	r2, [r2, #0]
 8004e90:	601a      	str	r2, [r3, #0]
		}
		RTC_DateTypeDef date;
		HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8004e92:	f107 0310 	add.w	r3, r7, #16
 8004e96:	2200      	movs	r2, #0
 8004e98:	4619      	mov	r1, r3
 8004e9a:	4861      	ldr	r0, [pc, #388]	; (8005020 <mlxInit+0x1fc>)
 8004e9c:	f008 f9f2 	bl	800d284 <HAL_RTC_GetDate>
		sprintf(mlx->path,"MLX%02d%02d.csv",date.Date,date.Month);
 8004ea0:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004ea4:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	1d18      	adds	r0, r3, #4
 8004eac:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004eb0:	f5a3 63d1 	sub.w	r3, r3, #1672	; 0x688
 8004eb4:	789b      	ldrb	r3, [r3, #2]
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004ebc:	f5a3 63d1 	sub.w	r3, r3, #1672	; 0x688
 8004ec0:	785b      	ldrb	r3, [r3, #1]
 8004ec2:	4958      	ldr	r1, [pc, #352]	; (8005024 <mlxInit+0x200>)
 8004ec4:	f011 ffe2 	bl	8016e8c <siprintf>
		mlx->timeToNextRead = MLX_DATA_RATE;
 8004ec8:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004ecc:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ed6:	621a      	str	r2, [r3, #32]
		mlx->dataReady = 0;
 8004ed8:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004edc:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	619a      	str	r2, [r3, #24]
	  	mlx->emissivity = 0.95;
 8004ee6:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004eea:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ef4:	f503 636b 	add.w	r3, r3, #3760	; 0xeb0
 8004ef8:	4a4b      	ldr	r2, [pc, #300]	; (8005028 <mlxInit+0x204>)
 8004efa:	601a      	str	r2, [r3, #0]
	  	mlx->ID = id;
 8004efc:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004f00:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 8004f0a:	f5a2 62d2 	sub.w	r2, r2, #1680	; 0x690
 8004f0e:	6812      	ldr	r2, [r2, #0]
 8004f10:	625a      	str	r2, [r3, #36]	; 0x24
		MLX90640_SetRefreshRate(MLX90640_ADDR, RefreshRate,mlx->i2c);
 8004f12:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004f16:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1e:	461a      	mov	r2, r3
 8004f20:	2104      	movs	r1, #4
 8004f22:	2033      	movs	r0, #51	; 0x33
 8004f24:	f000 fa75 	bl	8005412 <MLX90640_SetRefreshRate>
	  	MLX90640_SetChessMode(MLX90640_ADDR,mlx->i2c);
 8004f28:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004f2c:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f34:	4619      	mov	r1, r3
 8004f36:	2033      	movs	r0, #51	; 0x33
 8004f38:	f000 fa9d 	bl	8005476 <MLX90640_SetChessMode>
	    int status = MLX90640_DumpEE(MLX90640_ADDR, eeMLX90640,mlx->i2c);
 8004f3c:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004f40:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f48:	f107 0314 	add.w	r3, r7, #20
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	2033      	movs	r0, #51	; 0x33
 8004f50:	f000 f947 	bl	80051e2 <MLX90640_DumpEE>
 8004f54:	f8c7 0694 	str.w	r0, [r7, #1684]	; 0x694
	    status = status | MLX90640_ExtractParameters(eeMLX90640, &mlx->mlx90640);
 8004f58:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004f5c:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8004f66:	f107 0314 	add.w	r3, r7, #20
 8004f6a:	4611      	mov	r1, r2
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 fa0b 	bl	8005388 <MLX90640_ExtractParameters>
 8004f72:	4602      	mov	r2, r0
 8004f74:	f8d7 3694 	ldr.w	r3, [r7, #1684]	; 0x694
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	f8c7 3694 	str.w	r3, [r7, #1684]	; 0x694
	    if (status != 0){
 8004f7e:	f8d7 3694 	ldr.w	r3, [r7, #1684]	; 0x694
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d01d      	beq.n	8004fc2 <mlxInit+0x19e>
	    	 if(mlx->ID == MLXLF)
 8004f86:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004f8a:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d105      	bne.n	8004fa2 <mlxInit+0x17e>
	    	 {
	    	    statusRegister.MLXLF = SENSOR_INIT_FAIL;
 8004f96:	4a25      	ldr	r2, [pc, #148]	; (800502c <mlxInit+0x208>)
 8004f98:	7853      	ldrb	r3, [r2, #1]
 8004f9a:	f043 030e 	orr.w	r3, r3, #14
 8004f9e:	7053      	strb	r3, [r2, #1]
 8004fa0:	e00c      	b.n	8004fbc <mlxInit+0x198>
	    	 }else if(mlx->ID == MLXRF)
 8004fa2:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004fa6:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fae:	2b03      	cmp	r3, #3
 8004fb0:	d104      	bne.n	8004fbc <mlxInit+0x198>
	    	 {
	    	    statusRegister.MLXRF = SENSOR_INIT_FAIL;
 8004fb2:	4a1e      	ldr	r2, [pc, #120]	; (800502c <mlxInit+0x208>)
 8004fb4:	7853      	ldrb	r3, [r2, #1]
 8004fb6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8004fba:	7053      	strb	r3, [r2, #1]
	    	 }
	    	 return status;
 8004fbc:	f8d7 3694 	ldr.w	r3, [r7, #1684]	; 0x694
 8004fc0:	e028      	b.n	8005014 <mlxInit+0x1f0>
	   }
	    mlx->i2c = i2c;
 8004fc2:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004fc6:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 8004fd0:	f2a2 6294 	subw	r2, r2, #1684	; 0x694
 8004fd4:	6812      	ldr	r2, [r2, #0]
 8004fd6:	629a      	str	r2, [r3, #40]	; 0x28

	    if(mlx->ID == MLXLF)
 8004fd8:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004fdc:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d106      	bne.n	8004ff6 <mlxInit+0x1d2>
	    {
	    	statusRegister.MLXLF = SENSOR_OK;
 8004fe8:	4a10      	ldr	r2, [pc, #64]	; (800502c <mlxInit+0x208>)
 8004fea:	7853      	ldrb	r3, [r2, #1]
 8004fec:	2101      	movs	r1, #1
 8004fee:	f361 0343 	bfi	r3, r1, #1, #3
 8004ff2:	7053      	strb	r3, [r2, #1]
 8004ff4:	e00d      	b.n	8005012 <mlxInit+0x1ee>
	    }else if(mlx->ID == MLXRF)
 8004ff6:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004ffa:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005002:	2b03      	cmp	r3, #3
 8005004:	d105      	bne.n	8005012 <mlxInit+0x1ee>
	    {
	    	statusRegister.MLXRF = SENSOR_OK;
 8005006:	4a09      	ldr	r2, [pc, #36]	; (800502c <mlxInit+0x208>)
 8005008:	7853      	ldrb	r3, [r2, #1]
 800500a:	2101      	movs	r1, #1
 800500c:	f361 1306 	bfi	r3, r1, #4, #3
 8005010:	7053      	strb	r3, [r2, #1]
	    }


	    return 0;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	f207 679c 	addw	r7, r7, #1692	; 0x69c
 800501a:	46bd      	mov	sp, r7
 800501c:	bd90      	pop	{r4, r7, pc}
 800501e:	bf00      	nop
 8005020:	200016e0 	.word	0x200016e0
 8005024:	0801b228 	.word	0x0801b228
 8005028:	3f733333 	.word	0x3f733333
 800502c:	200057e8 	.word	0x200057e8

08005030 <mlxGetData>:

//Copy and calcualte data from sensor memory to stm
int mlxGetData(MLXSensor* mlx){
 8005030:	b580      	push	{r7, lr}
 8005032:	f5ad 6dd2 	sub.w	sp, sp, #1680	; 0x690
 8005036:	af00      	add	r7, sp, #0
 8005038:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800503c:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005040:	6018      	str	r0, [r3, #0]
	uint16_t frame[832];
	int status = MLX90640_GetFrameData(MLX90640_ADDR, frame,mlx->i2c);
 8005042:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8005046:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800504e:	f107 030c 	add.w	r3, r7, #12
 8005052:	4619      	mov	r1, r3
 8005054:	2033      	movs	r0, #51	; 0x33
 8005056:	f000 f8db 	bl	8005210 <MLX90640_GetFrameData>
 800505a:	f8c7 068c 	str.w	r0, [r7, #1676]	; 0x68c
	if (status < 0)
 800505e:	f8d7 368c 	ldr.w	r3, [r7, #1676]	; 0x68c
 8005062:	2b00      	cmp	r3, #0
 8005064:	da02      	bge.n	800506c <mlxGetData+0x3c>
	{
		return status;
 8005066:	f8d7 368c 	ldr.w	r3, [r7, #1676]	; 0x68c
 800506a:	e0b5      	b.n	80051d8 <mlxGetData+0x1a8>
	}

	mlx->vdd = MLX90640_GetVdd(frame, &mlx->mlx90640);
 800506c:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8005070:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800507a:	f107 030c 	add.w	r3, r7, #12
 800507e:	4611      	mov	r1, r2
 8005080:	4618      	mov	r0, r3
 8005082:	f000 fe61 	bl	8005d48 <MLX90640_GetVdd>
 8005086:	eef0 7a40 	vmov.f32	s15, s0
 800508a:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800508e:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005098:	f603 63ac 	addw	r3, r3, #3756	; 0xeac
 800509c:	edc3 7a00 	vstr	s15, [r3]
	mlx->ambientTemp = MLX90640_GetTa(frame, &mlx->mlx90640) - TA_SHIFT;
 80050a0:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 80050a4:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80050ae:	f107 030c 	add.w	r3, r7, #12
 80050b2:	4611      	mov	r1, r2
 80050b4:	4618      	mov	r0, r3
 80050b6:	f000 fec1 	bl	8005e3c <MLX90640_GetTa>
 80050ba:	eef0 7a40 	vmov.f32	s15, s0
 80050be:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80050c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80050c6:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 80050ca:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050d4:	f603 63a8 	addw	r3, r3, #3752	; 0xea8
 80050d8:	edc3 7a00 	vstr	s15, [r3]

	MLX90640_CalculateTo(frame, &mlx->mlx90640, mlx->emissivity , mlx->ambientTemp, mlx->data);
 80050dc:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 80050e0:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 80050ea:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 80050ee:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050f8:	f503 636b 	add.w	r3, r3, #3760	; 0xeb0
 80050fc:	edd3 7a00 	vldr	s15, [r3]
 8005100:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8005104:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800510e:	f603 63a8 	addw	r3, r3, #3752	; 0xea8
 8005112:	ed93 7a00 	vldr	s14, [r3]
 8005116:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800511a:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	f241 23a8 	movw	r3, #4776	; 0x12a8
 8005124:	4413      	add	r3, r2
 8005126:	f107 000c 	add.w	r0, r7, #12
 800512a:	461a      	mov	r2, r3
 800512c:	eef0 0a47 	vmov.f32	s1, s14
 8005130:	eeb0 0a67 	vmov.f32	s0, s15
 8005134:	f000 f9c8 	bl	80054c8 <MLX90640_CalculateTo>
	status = MLX90640_GetFrameData(MLX90640_ADDR, frame,mlx->i2c);
 8005138:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800513c:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005144:	f107 030c 	add.w	r3, r7, #12
 8005148:	4619      	mov	r1, r3
 800514a:	2033      	movs	r0, #51	; 0x33
 800514c:	f000 f860 	bl	8005210 <MLX90640_GetFrameData>
 8005150:	f8c7 068c 	str.w	r0, [r7, #1676]	; 0x68c
	if(status < 0)
 8005154:	f8d7 368c 	ldr.w	r3, [r7, #1676]	; 0x68c
 8005158:	2b00      	cmp	r3, #0
 800515a:	da02      	bge.n	8005162 <mlxGetData+0x132>
	{
		return status;
 800515c:	f8d7 368c 	ldr.w	r3, [r7, #1676]	; 0x68c
 8005160:	e03a      	b.n	80051d8 <mlxGetData+0x1a8>
	}
	//mlx->dataReady = 1;
	mlx->timestamp = getSeconds();
 8005162:	f7fc fe8d 	bl	8001e80 <getSeconds>
 8005166:	4602      	mov	r2, r0
 8005168:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800516c:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005176:	f8c3 2eb4 	str.w	r2, [r3, #3764]	; 0xeb4
	MLX90640_CalculateTo(frame, &mlx->mlx90640, mlx->emissivity , mlx->ambientTemp, mlx->data);
 800517a:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800517e:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8005188:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800518c:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005196:	f503 636b 	add.w	r3, r3, #3760	; 0xeb0
 800519a:	edd3 7a00 	vldr	s15, [r3]
 800519e:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 80051a2:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051ac:	f603 63a8 	addw	r3, r3, #3752	; 0xea8
 80051b0:	ed93 7a00 	vldr	s14, [r3]
 80051b4:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 80051b8:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	f241 23a8 	movw	r3, #4776	; 0x12a8
 80051c2:	4413      	add	r3, r2
 80051c4:	f107 000c 	add.w	r0, r7, #12
 80051c8:	461a      	mov	r2, r3
 80051ca:	eef0 0a47 	vmov.f32	s1, s14
 80051ce:	eeb0 0a67 	vmov.f32	s0, s15
 80051d2:	f000 f979 	bl	80054c8 <MLX90640_CalculateTo>
	return 0;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	f507 67d2 	add.w	r7, r7, #1680	; 0x690
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <MLX90640_DumpEE>:
int CheckAdjacentPixels(uint16_t pix1, uint16_t pix2);  
float GetMedian(float *values, int n);
int IsPixelBad(uint16_t pixel,paramsMLX90640 *params);
  
int MLX90640_DumpEE(uint8_t slaveAddr, uint16_t *eeData,I2C_HandleTypeDef * i2c)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b086      	sub	sp, #24
 80051e6:	af02      	add	r7, sp, #8
 80051e8:	4603      	mov	r3, r0
 80051ea:	60b9      	str	r1, [r7, #8]
 80051ec:	607a      	str	r2, [r7, #4]
 80051ee:	73fb      	strb	r3, [r7, #15]
     return MLX90640_I2CRead(slaveAddr, 0x2400, 832, eeData,i2c);
 80051f0:	7bf8      	ldrb	r0, [r7, #15]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	9300      	str	r3, [sp, #0]
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	f44f 7250 	mov.w	r2, #832	; 0x340
 80051fc:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8005200:	f002 fdae 	bl	8007d60 <MLX90640_I2CRead>
 8005204:	4603      	mov	r3, r0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
	...

08005210 <MLX90640_GetFrameData>:

int MLX90640_GetFrameData(uint8_t slaveAddr, uint16_t *frameData,I2C_HandleTypeDef * i2c)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b0aa      	sub	sp, #168	; 0xa8
 8005214:	af02      	add	r7, sp, #8
 8005216:	4603      	mov	r3, r0
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]
 800521c:	73fb      	strb	r3, [r7, #15]
    uint16_t dataReady = 0;
 800521e:	2300      	movs	r3, #0
 8005220:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    uint16_t controlRegister1;
    uint16_t statusRegister;
    int error = 1;
 8005224:	2301      	movs	r3, #1
 8005226:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    uint16_t data[64];
    uint8_t cnt = 0;
 800522a:	2300      	movs	r3, #0
 800522c:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
    
    while(dataReady == 0)
 8005230:	e019      	b.n	8005266 <MLX90640_GetFrameData+0x56>
    {
        error = MLX90640_I2CRead(slaveAddr, 0x8000, 1, &statusRegister,i2c);
 8005232:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8005236:	7bf8      	ldrb	r0, [r7, #15]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	9300      	str	r3, [sp, #0]
 800523c:	4613      	mov	r3, r2
 800523e:	2201      	movs	r2, #1
 8005240:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005244:	f002 fd8c 	bl	8007d60 <MLX90640_I2CRead>
 8005248:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
        if(error != 0)
 800524c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005250:	2b00      	cmp	r3, #0
 8005252:	d002      	beq.n	800525a <MLX90640_GetFrameData+0x4a>
        {
            return error;
 8005254:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005258:	e090      	b.n	800537c <MLX90640_GetFrameData+0x16c>
        }    
        dataReady = statusRegister & 0x0008;
 800525a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800525e:	f003 0308 	and.w	r3, r3, #8
 8005262:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while(dataReady == 0)
 8005266:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800526a:	2b00      	cmp	r3, #0
 800526c:	d0e1      	beq.n	8005232 <MLX90640_GetFrameData+0x22>
    }

    error = MLX90640_I2CWrite(slaveAddr, 0x8000, 0x0030,i2c);
 800526e:	7bf8      	ldrb	r0, [r7, #15]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2230      	movs	r2, #48	; 0x30
 8005274:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005278:	f002 fdc2 	bl	8007e00 <MLX90640_I2CWrite>
 800527c:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
    if(error == -1)
 8005280:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005288:	d102      	bne.n	8005290 <MLX90640_GetFrameData+0x80>
    {
        return error;
 800528a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800528e:	e075      	b.n	800537c <MLX90640_GetFrameData+0x16c>
    }

    error = MLX90640_I2CRead(slaveAddr, 0x0400, 768, frameData,i2c);
 8005290:	7bf8      	ldrb	r0, [r7, #15]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	9300      	str	r3, [sp, #0]
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	f44f 7240 	mov.w	r2, #768	; 0x300
 800529c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80052a0:	f002 fd5e 	bl	8007d60 <MLX90640_I2CRead>
 80052a4:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
    if(error != 0)
 80052a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d002      	beq.n	80052b6 <MLX90640_GetFrameData+0xa6>
    {
        return error;
 80052b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80052b4:	e062      	b.n	800537c <MLX90640_GetFrameData+0x16c>
    }
    
    error = MLX90640_I2CRead(slaveAddr, 0x0700, 64, data,i2c);
 80052b6:	f107 0214 	add.w	r2, r7, #20
 80052ba:	7bf8      	ldrb	r0, [r7, #15]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	9300      	str	r3, [sp, #0]
 80052c0:	4613      	mov	r3, r2
 80052c2:	2240      	movs	r2, #64	; 0x40
 80052c4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80052c8:	f002 fd4a 	bl	8007d60 <MLX90640_I2CRead>
 80052cc:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
    if(error != 0)
 80052d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d002      	beq.n	80052de <MLX90640_GetFrameData+0xce>
    {
        return error;
 80052d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80052dc:	e04e      	b.n	800537c <MLX90640_GetFrameData+0x16c>
    }

    error = MLX90640_I2CRead(slaveAddr, 0x800D, 1, &controlRegister1,i2c);
 80052de:	f107 0296 	add.w	r2, r7, #150	; 0x96
 80052e2:	7bf8      	ldrb	r0, [r7, #15]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	9300      	str	r3, [sp, #0]
 80052e8:	4613      	mov	r3, r2
 80052ea:	2201      	movs	r2, #1
 80052ec:	f248 010d 	movw	r1, #32781	; 0x800d
 80052f0:	f002 fd36 	bl	8007d60 <MLX90640_I2CRead>
 80052f4:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
    frameData[832] = controlRegister1;
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 80052fe:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005302:	801a      	strh	r2, [r3, #0]
    frameData[833] = statusRegister & 0x0001;
 8005304:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	f203 6382 	addw	r3, r3, #1666	; 0x682
 800530e:	f002 0201 	and.w	r2, r2, #1
 8005312:	b292      	uxth	r2, r2
 8005314:	801a      	strh	r2, [r3, #0]

    if(error != 0)
 8005316:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800531a:	2b00      	cmp	r3, #0
 800531c:	d002      	beq.n	8005324 <MLX90640_GetFrameData+0x114>
    {
        return error;
 800531e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005322:	e02b      	b.n	800537c <MLX90640_GetFrameData+0x16c>
    }
    
    //error = ValidateAuxData(data);
    if(error == 0)
 8005324:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005328:	2b00      	cmp	r3, #0
 800532a:	d11b      	bne.n	8005364 <MLX90640_GetFrameData+0x154>
    {
        for(cnt=0; cnt<64; cnt++)
 800532c:	2300      	movs	r3, #0
 800532e:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
 8005332:	e013      	b.n	800535c <MLX90640_GetFrameData+0x14c>
        {
            frameData[cnt+768] = data[cnt];
 8005334:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 8005338:	f897 209d 	ldrb.w	r2, [r7, #157]	; 0x9d
 800533c:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8005340:	0052      	lsls	r2, r2, #1
 8005342:	68b9      	ldr	r1, [r7, #8]
 8005344:	440a      	add	r2, r1
 8005346:	005b      	lsls	r3, r3, #1
 8005348:	33a0      	adds	r3, #160	; 0xa0
 800534a:	443b      	add	r3, r7
 800534c:	f833 3c8c 	ldrh.w	r3, [r3, #-140]
 8005350:	8013      	strh	r3, [r2, #0]
        for(cnt=0; cnt<64; cnt++)
 8005352:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 8005356:	3301      	adds	r3, #1
 8005358:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
 800535c:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 8005360:	2b3f      	cmp	r3, #63	; 0x3f
 8005362:	d9e7      	bls.n	8005334 <MLX90640_GetFrameData+0x124>
        }
    }


    printf("%d \n", frameData[833]);
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	f203 6382 	addw	r3, r3, #1666	; 0x682
 800536a:	881b      	ldrh	r3, [r3, #0]
 800536c:	4619      	mov	r1, r3
 800536e:	4805      	ldr	r0, [pc, #20]	; (8005384 <MLX90640_GetFrameData+0x174>)
 8005370:	f011 fcd2 	bl	8016d18 <iprintf>
    return frameData[833];    
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	f203 6382 	addw	r3, r3, #1666	; 0x682
 800537a:	881b      	ldrh	r3, [r3, #0]
}
 800537c:	4618      	mov	r0, r3
 800537e:	37a0      	adds	r7, #160	; 0xa0
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	0801b244 	.word	0x0801b244

08005388 <MLX90640_ExtractParameters>:

int MLX90640_ExtractParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
    int error = 0;
 8005392:	2300      	movs	r3, #0
 8005394:	60fb      	str	r3, [r7, #12]
    
    ExtractVDDParameters(eeData, mlx90640);
 8005396:	6839      	ldr	r1, [r7, #0]
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 fddf 	bl	8005f5c <ExtractVDDParameters>
    ExtractPTATParameters(eeData, mlx90640);
 800539e:	6839      	ldr	r1, [r7, #0]
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 fe15 	bl	8005fd0 <ExtractPTATParameters>
    ExtractGainParameters(eeData, mlx90640);
 80053a6:	6839      	ldr	r1, [r7, #0]
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 fe95 	bl	80060d8 <ExtractGainParameters>
    ExtractTgcParameters(eeData, mlx90640);
 80053ae:	6839      	ldr	r1, [r7, #0]
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 fea3 	bl	80060fc <ExtractTgcParameters>
    ExtractResolutionParameters(eeData, mlx90640);
 80053b6:	6839      	ldr	r1, [r7, #0]
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 fed7 	bl	800616c <ExtractResolutionParameters>
    ExtractKsTaParameters(eeData, mlx90640);
 80053be:	6839      	ldr	r1, [r7, #0]
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 feeb 	bl	800619c <ExtractKsTaParameters>
    ExtractKsToParameters(eeData, mlx90640);
 80053c6:	6839      	ldr	r1, [r7, #0]
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 ff1f 	bl	800620c <ExtractKsToParameters>
    ExtractCPParameters(eeData, mlx90640);
 80053ce:	6839      	ldr	r1, [r7, #0]
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f002 f9b5 	bl	8007740 <ExtractCPParameters>
    ExtractAlphaParameters(eeData, mlx90640);
 80053d6:	6839      	ldr	r1, [r7, #0]
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 fffd 	bl	80063d8 <ExtractAlphaParameters>
    ExtractOffsetParameters(eeData, mlx90640);
 80053de:	6839      	ldr	r1, [r7, #0]
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f001 fb57 	bl	8006a94 <ExtractOffsetParameters>
    ExtractKtaPixelParameters(eeData, mlx90640);
 80053e6:	6839      	ldr	r1, [r7, #0]
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f001 fd8d 	bl	8006f08 <ExtractKtaPixelParameters>
    ExtractKvPixelParameters(eeData, mlx90640);
 80053ee:	6839      	ldr	r1, [r7, #0]
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f001 ffbd 	bl	8007370 <ExtractKvPixelParameters>
    ExtractCILCParameters(eeData, mlx90640);
 80053f6:	6839      	ldr	r1, [r7, #0]
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f002 fae5 	bl	80079c8 <ExtractCILCParameters>
    error = ExtractDeviatingPixels(eeData, mlx90640);  
 80053fe:	6839      	ldr	r1, [r7, #0]
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f002 fb81 	bl	8007b08 <ExtractDeviatingPixels>
 8005406:	60f8      	str	r0, [r7, #12]
    
    return error;
 8005408:	68fb      	ldr	r3, [r7, #12]

}
 800540a:	4618      	mov	r0, r3
 800540c:	3710      	adds	r7, #16
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <MLX90640_SetRefreshRate>:
}

//------------------------------------------------------------------------------

int MLX90640_SetRefreshRate(uint8_t slaveAddr, uint8_t refreshRate,I2C_HandleTypeDef * i2c)
{
 8005412:	b580      	push	{r7, lr}
 8005414:	b088      	sub	sp, #32
 8005416:	af02      	add	r7, sp, #8
 8005418:	4603      	mov	r3, r0
 800541a:	603a      	str	r2, [r7, #0]
 800541c:	71fb      	strb	r3, [r7, #7]
 800541e:	460b      	mov	r3, r1
 8005420:	71bb      	strb	r3, [r7, #6]
    uint16_t controlRegister1;
    int value;
    int error;
    
    value = (refreshRate & 0x07)<<7;
 8005422:	79bb      	ldrb	r3, [r7, #6]
 8005424:	01db      	lsls	r3, r3, #7
 8005426:	f403 7360 	and.w	r3, r3, #896	; 0x380
 800542a:	613b      	str	r3, [r7, #16]
    
    error = MLX90640_I2CRead(slaveAddr, 0x800D, 1, &controlRegister1,i2c);
 800542c:	f107 020e 	add.w	r2, r7, #14
 8005430:	79f8      	ldrb	r0, [r7, #7]
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	9300      	str	r3, [sp, #0]
 8005436:	4613      	mov	r3, r2
 8005438:	2201      	movs	r2, #1
 800543a:	f248 010d 	movw	r1, #32781	; 0x800d
 800543e:	f002 fc8f 	bl	8007d60 <MLX90640_I2CRead>
 8005442:	6178      	str	r0, [r7, #20]
    if(error == 0)
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d110      	bne.n	800546c <MLX90640_SetRefreshRate+0x5a>
    {
        value = (controlRegister1 & 0xFC7F) | value;
 800544a:	89fb      	ldrh	r3, [r7, #14]
 800544c:	461a      	mov	r2, r3
 800544e:	f64f 437f 	movw	r3, #64639	; 0xfc7f
 8005452:	4013      	ands	r3, r2
 8005454:	693a      	ldr	r2, [r7, #16]
 8005456:	4313      	orrs	r3, r2
 8005458:	613b      	str	r3, [r7, #16]
        error = MLX90640_I2CWrite(slaveAddr, 0x800D, value,i2c);
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	b29a      	uxth	r2, r3
 800545e:	79f8      	ldrb	r0, [r7, #7]
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	f248 010d 	movw	r1, #32781	; 0x800d
 8005466:	f002 fccb 	bl	8007e00 <MLX90640_I2CWrite>
 800546a:	6178      	str	r0, [r7, #20]
    }    
    
    return error;
 800546c:	697b      	ldr	r3, [r7, #20]
}
 800546e:	4618      	mov	r0, r3
 8005470:	3718      	adds	r7, #24
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}

08005476 <MLX90640_SetChessMode>:
}

//------------------------------------------------------------------------------

int MLX90640_SetChessMode(uint8_t slaveAddr,I2C_HandleTypeDef * i2c)
{
 8005476:	b580      	push	{r7, lr}
 8005478:	b088      	sub	sp, #32
 800547a:	af02      	add	r7, sp, #8
 800547c:	4603      	mov	r3, r0
 800547e:	6039      	str	r1, [r7, #0]
 8005480:	71fb      	strb	r3, [r7, #7]
    uint16_t controlRegister1;
    int value;
    int error;
        
    error = MLX90640_I2CRead(slaveAddr, 0x800D, 1, &controlRegister1,i2c);
 8005482:	f107 020e 	add.w	r2, r7, #14
 8005486:	79f8      	ldrb	r0, [r7, #7]
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	9300      	str	r3, [sp, #0]
 800548c:	4613      	mov	r3, r2
 800548e:	2201      	movs	r2, #1
 8005490:	f248 010d 	movw	r1, #32781	; 0x800d
 8005494:	f002 fc64 	bl	8007d60 <MLX90640_I2CRead>
 8005498:	6178      	str	r0, [r7, #20]
    
    if(error == 0)
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d10d      	bne.n	80054bc <MLX90640_SetChessMode+0x46>
    {
        value = (controlRegister1 | 0x1000);
 80054a0:	89fb      	ldrh	r3, [r7, #14]
 80054a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	613b      	str	r3, [r7, #16]
        error = MLX90640_I2CWrite(slaveAddr, 0x800D, value,i2c);
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	b29a      	uxth	r2, r3
 80054ae:	79f8      	ldrb	r0, [r7, #7]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	f248 010d 	movw	r1, #32781	; 0x800d
 80054b6:	f002 fca3 	bl	8007e00 <MLX90640_I2CWrite>
 80054ba:	6178      	str	r0, [r7, #20]
    }    
    
    return error;
 80054bc:	697b      	ldr	r3, [r7, #20]
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3718      	adds	r7, #24
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
	...

080054c8 <MLX90640_CalculateTo>:
}

//------------------------------------------------------------------------------

void MLX90640_CalculateTo(uint16_t *frameData, const paramsMLX90640 *params, float emissivity, float tr, float *result)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b0a0      	sub	sp, #128	; 0x80
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6178      	str	r0, [r7, #20]
 80054d0:	6139      	str	r1, [r7, #16]
 80054d2:	ed87 0a03 	vstr	s0, [r7, #12]
 80054d6:	edc7 0a02 	vstr	s1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
    float kvScale;
    float alphaScale;
    float kta;
    float kv;
    
    subPage = frameData[833];
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	f8b3 3682 	ldrh.w	r3, [r3, #1666]	; 0x682
 80054e2:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
    vdd = MLX90640_GetVdd(frameData, params);
 80054e6:	6939      	ldr	r1, [r7, #16]
 80054e8:	6978      	ldr	r0, [r7, #20]
 80054ea:	f000 fc2d 	bl	8005d48 <MLX90640_GetVdd>
 80054ee:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
    ta = MLX90640_GetTa(frameData, params);
 80054f2:	6939      	ldr	r1, [r7, #16]
 80054f4:	6978      	ldr	r0, [r7, #20]
 80054f6:	f000 fca1 	bl	8005e3c <MLX90640_GetTa>
 80054fa:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
    
    ta4 = (ta + 273.15f);
 80054fe:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005502:	ed9f 7ad3 	vldr	s14, [pc, #844]	; 8005850 <MLX90640_CalculateTo+0x388>
 8005506:	ee77 7a87 	vadd.f32	s15, s15, s14
 800550a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    ta4 = ta4 * ta4;
 800550e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005512:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005516:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    ta4 = ta4 * ta4;
 800551a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800551e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005522:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    tr4 = (tr + 273.15f);
 8005526:	edd7 7a02 	vldr	s15, [r7, #8]
 800552a:	ed9f 7ac9 	vldr	s14, [pc, #804]	; 8005850 <MLX90640_CalculateTo+0x388>
 800552e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005532:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    tr4 = tr4 * tr4;
 8005536:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800553a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800553e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    tr4 = tr4 * tr4;
 8005542:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005546:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800554a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    taTr = tr4 - (tr4-ta4)/emissivity;
 800554e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8005552:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005556:	ee77 6a67 	vsub.f32	s13, s14, s15
 800555a:	ed97 7a03 	vldr	s14, [r7, #12]
 800555e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005562:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8005566:	ee77 7a67 	vsub.f32	s15, s14, s15
 800556a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    
    ktaScale = pow(2,(double)params->ktaScale);
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	f893 3f4c 	ldrb.w	r3, [r3, #3916]	; 0xf4c
 8005574:	ee07 3a90 	vmov	s15, r3
 8005578:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800557c:	eeb0 1b47 	vmov.f64	d1, d7
 8005580:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8005584:	f015 f940 	bl	801a808 <pow>
 8005588:	eeb0 7b40 	vmov.f64	d7, d0
 800558c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005590:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    kvScale = pow(2,(double)params->kvScale);
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800559a:	f893 324d 	ldrb.w	r3, [r3, #589]	; 0x24d
 800559e:	ee07 3a90 	vmov	s15, r3
 80055a2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80055a6:	eeb0 1b47 	vmov.f64	d1, d7
 80055aa:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80055ae:	f015 f92b 	bl	801a808 <pow>
 80055b2:	eeb0 7b40 	vmov.f64	d7, d0
 80055b6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80055ba:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    alphaScale = pow(2,(double)params->alphaScale);
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	f893 364a 	ldrb.w	r3, [r3, #1610]	; 0x64a
 80055c4:	ee07 3a90 	vmov	s15, r3
 80055c8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80055cc:	eeb0 1b47 	vmov.f64	d1, d7
 80055d0:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80055d4:	f015 f918 	bl	801a808 <pow>
 80055d8:	eeb0 7b40 	vmov.f64	d7, d0
 80055dc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80055e0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    
    alphaCorrR[0] = 1 / (1 + params->ksTo[0] * 40);
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80055ea:	ed9f 7a94 	vldr	s14, [pc, #592]	; 800583c <MLX90640_CalculateTo+0x374>
 80055ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005602:	edc7 7a06 	vstr	s15, [r7, #24]
    alphaCorrR[1] = 1 ;
 8005606:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800560a:	61fb      	str	r3, [r7, #28]
    alphaCorrR[2] = (1 + params->ksTo[1] * params->ct[2]);
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8005618:	ee07 3a90 	vmov	s15, r3
 800561c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005620:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005624:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005628:	ee77 7a87 	vadd.f32	s15, s15, s14
 800562c:	edc7 7a08 	vstr	s15, [r7, #32]
    alphaCorrR[3] = alphaCorrR[2] * (1 + params->ksTo[2] * (params->ct[3] - params->ct[2]));
 8005630:	ed97 7a08 	vldr	s14, [r7, #32]
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8005640:	461a      	mov	r2, r3
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	ee07 3a90 	vmov	s15, r3
 800564e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005652:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005656:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800565a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800565e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005662:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    
//------------------------- Gain calculation -----------------------------------    
    gain = frameData[778];
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	f203 6314 	addw	r3, r3, #1556	; 0x614
 800566c:	881b      	ldrh	r3, [r3, #0]
 800566e:	ee07 3a90 	vmov	s15, r3
 8005672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005676:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    if(gain > 32767)
 800567a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800567e:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8005840 <MLX90640_CalculateTo+0x378>
 8005682:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800568a:	dd07      	ble.n	800569c <MLX90640_CalculateTo+0x1d4>
    {
        gain = gain - 65536;
 800568c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005690:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8005844 <MLX90640_CalculateTo+0x37c>
 8005694:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005698:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    }
    
    gain = params->gainEE / gain; 
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80056a2:	ee07 3a90 	vmov	s15, r3
 80056a6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80056aa:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80056ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056b2:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
  
//------------------------- To calculation -------------------------------------    
    mode = (frameData[832] & 0x1000) >> 5;
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 80056bc:	881b      	ldrh	r3, [r3, #0]
 80056be:	115b      	asrs	r3, r3, #5
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80056c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
    irDataCP[0] = frameData[776];  
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 80056d0:	881b      	ldrh	r3, [r3, #0]
 80056d2:	ee07 3a90 	vmov	s15, r3
 80056d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056da:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    irDataCP[1] = frameData[808];
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 80056e4:	881b      	ldrh	r3, [r3, #0]
 80056e6:	ee07 3a90 	vmov	s15, r3
 80056ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ee:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    for( int i = 0; i < 2; i++)
 80056f2:	2300      	movs	r3, #0
 80056f4:	673b      	str	r3, [r7, #112]	; 0x70
 80056f6:	e034      	b.n	8005762 <MLX90640_CalculateTo+0x29a>
    {
        if(irDataCP[i] > 32767)
 80056f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	3380      	adds	r3, #128	; 0x80
 80056fe:	443b      	add	r3, r7
 8005700:	3b58      	subs	r3, #88	; 0x58
 8005702:	edd3 7a00 	vldr	s15, [r3]
 8005706:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8005840 <MLX90640_CalculateTo+0x378>
 800570a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800570e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005712:	dd11      	ble.n	8005738 <MLX90640_CalculateTo+0x270>
        {
            irDataCP[i] = irDataCP[i] - 65536;
 8005714:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	3380      	adds	r3, #128	; 0x80
 800571a:	443b      	add	r3, r7
 800571c:	3b58      	subs	r3, #88	; 0x58
 800571e:	edd3 7a00 	vldr	s15, [r3]
 8005722:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8005844 <MLX90640_CalculateTo+0x37c>
 8005726:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800572a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	3380      	adds	r3, #128	; 0x80
 8005730:	443b      	add	r3, r7
 8005732:	3b58      	subs	r3, #88	; 0x58
 8005734:	edc3 7a00 	vstr	s15, [r3]
        }
        irDataCP[i] = irDataCP[i] * gain;
 8005738:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	3380      	adds	r3, #128	; 0x80
 800573e:	443b      	add	r3, r7
 8005740:	3b58      	subs	r3, #88	; 0x58
 8005742:	ed93 7a00 	vldr	s14, [r3]
 8005746:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800574a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800574e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	3380      	adds	r3, #128	; 0x80
 8005754:	443b      	add	r3, r7
 8005756:	3b58      	subs	r3, #88	; 0x58
 8005758:	edc3 7a00 	vstr	s15, [r3]
    for( int i = 0; i < 2; i++)
 800575c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800575e:	3301      	adds	r3, #1
 8005760:	673b      	str	r3, [r7, #112]	; 0x70
 8005762:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005764:	2b01      	cmp	r3, #1
 8005766:	ddc7      	ble.n	80056f8 <MLX90640_CalculateTo+0x230>
    }
    irDataCP[0] = irDataCP[0] - params->cpOffset[0] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3f));
 8005768:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005772:	f9b3 3258 	ldrsh.w	r3, [r3, #600]	; 0x258
 8005776:	ee07 3a90 	vmov	s15, r3
 800577a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	ed93 6a08 	vldr	s12, [r3, #32]
 8005784:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005788:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
 800578c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8005790:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005794:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005798:	ee77 7a86 	vadd.f32	s15, s15, s12
 800579c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	ed93 6a07 	vldr	s12, [r3, #28]
 80057a6:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80057aa:	eddf 5a27 	vldr	s11, [pc, #156]	; 8005848 <MLX90640_CalculateTo+0x380>
 80057ae:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80057b2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80057b6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80057ba:	ee77 7a86 	vadd.f32	s15, s15, s12
 80057be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057c6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    if( mode ==  params->calibrationModeEE)
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80057d0:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d13d      	bne.n	8005854 <MLX90640_CalculateTo+0x38c>
    {
        irDataCP[1] = irDataCP[1] - params->cpOffset[1] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3f));
 80057d8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057e2:	f9b3 325a 	ldrsh.w	r3, [r3, #602]	; 0x25a
 80057e6:	ee07 3a90 	vmov	s15, r3
 80057ea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	ed93 6a08 	vldr	s12, [r3, #32]
 80057f4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80057f8:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
 80057fc:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8005800:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005804:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005808:	ee77 7a86 	vadd.f32	s15, s15, s12
 800580c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	ed93 6a07 	vldr	s12, [r3, #28]
 8005816:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800581a:	eddf 5a0b 	vldr	s11, [pc, #44]	; 8005848 <MLX90640_CalculateTo+0x380>
 800581e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8005822:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005826:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800582a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800582e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005832:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005836:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 800583a:	e043      	b.n	80058c4 <MLX90640_CalculateTo+0x3fc>
 800583c:	42200000 	.word	0x42200000
 8005840:	46fffe00 	.word	0x46fffe00
 8005844:	47800000 	.word	0x47800000
 8005848:	40533333 	.word	0x40533333
 800584c:	358637bd 	.word	0x358637bd
 8005850:	43889333 	.word	0x43889333
    }
    else
    {
      irDataCP[1] = irDataCP[1] - (params->cpOffset[1] + params->ilChessC[0]) * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3f));
 8005854:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800585e:	f9b3 325a 	ldrsh.w	r3, [r3, #602]	; 0x25a
 8005862:	ee07 3a90 	vmov	s15, r3
 8005866:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005870:	edd3 7a97 	vldr	s15, [r3, #604]	; 0x25c
 8005874:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	ed93 6a08 	vldr	s12, [r3, #32]
 800587e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005882:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
 8005886:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800588a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800588e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005892:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005896:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	ed93 6a07 	vldr	s12, [r3, #28]
 80058a0:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80058a4:	ed5f 5a18 	vldr	s11, [pc, #-96]	; 8005848 <MLX90640_CalculateTo+0x380>
 80058a8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80058ac:	ee66 7a27 	vmul.f32	s15, s12, s15
 80058b0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80058b4:	ee77 7a86 	vadd.f32	s15, s15, s12
 80058b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058c0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    }

    for( int pixelNumber = 0; pixelNumber < 768; pixelNumber++)
 80058c4:	2300      	movs	r3, #0
 80058c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058c8:	e230      	b.n	8005d2c <MLX90640_CalculateTo+0x864>
    {
        ilPattern = pixelNumber / 32 - (pixelNumber / 64) * 2; 
 80058ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	da00      	bge.n	80058d2 <MLX90640_CalculateTo+0x40a>
 80058d0:	331f      	adds	r3, #31
 80058d2:	115b      	asrs	r3, r3, #5
 80058d4:	b2da      	uxtb	r2, r3
 80058d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058d8:	2b00      	cmp	r3, #0
 80058da:	da00      	bge.n	80058de <MLX90640_CalculateTo+0x416>
 80058dc:	333f      	adds	r3, #63	; 0x3f
 80058de:	119b      	asrs	r3, r3, #6
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	005b      	lsls	r3, r3, #1
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
        chessPattern = ilPattern ^ (pixelNumber - (pixelNumber/2)*2); 
 80058ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f003 0301 	and.w	r3, r3, #1
 80058f6:	bfb8      	it	lt
 80058f8:	425b      	neglt	r3, r3
 80058fa:	b25a      	sxtb	r2, r3
 80058fc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005900:	4053      	eors	r3, r2
 8005902:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
        conversionPattern = ((pixelNumber + 2) / 4 - (pixelNumber + 3) / 4 + (pixelNumber + 1) / 4 - pixelNumber / 4) * (1 - 2 * ilPattern);
 8005906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005908:	3302      	adds	r3, #2
 800590a:	2b00      	cmp	r3, #0
 800590c:	da00      	bge.n	8005910 <MLX90640_CalculateTo+0x448>
 800590e:	3303      	adds	r3, #3
 8005910:	109b      	asrs	r3, r3, #2
 8005912:	461a      	mov	r2, r3
 8005914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005916:	3303      	adds	r3, #3
 8005918:	2b00      	cmp	r3, #0
 800591a:	da00      	bge.n	800591e <MLX90640_CalculateTo+0x456>
 800591c:	3303      	adds	r3, #3
 800591e:	109b      	asrs	r3, r3, #2
 8005920:	425b      	negs	r3, r3
 8005922:	441a      	add	r2, r3
 8005924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005926:	3301      	adds	r3, #1
 8005928:	2b00      	cmp	r3, #0
 800592a:	da00      	bge.n	800592e <MLX90640_CalculateTo+0x466>
 800592c:	3303      	adds	r3, #3
 800592e:	109b      	asrs	r3, r3, #2
 8005930:	441a      	add	r2, r3
 8005932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005934:	2b00      	cmp	r3, #0
 8005936:	da00      	bge.n	800593a <MLX90640_CalculateTo+0x472>
 8005938:	3303      	adds	r3, #3
 800593a:	109b      	asrs	r3, r3, #2
 800593c:	425b      	negs	r3, r3
 800593e:	4413      	add	r3, r2
 8005940:	b2da      	uxtb	r2, r3
 8005942:	f997 3046 	ldrsb.w	r3, [r7, #70]	; 0x46
 8005946:	005b      	lsls	r3, r3, #1
 8005948:	f1c3 0301 	rsb	r3, r3, #1
 800594c:	b2db      	uxtb	r3, r3
 800594e:	fb12 f303 	smulbb	r3, r2, r3
 8005952:	b2db      	uxtb	r3, r3
 8005954:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
        
        if(mode == 0)
 8005958:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800595c:	2b00      	cmp	r3, #0
 800595e:	d104      	bne.n	800596a <MLX90640_CalculateTo+0x4a2>
        {
          pattern = ilPattern; 
 8005960:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005964:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005968:	e003      	b.n	8005972 <MLX90640_CalculateTo+0x4aa>
        }
        else 
        {
          pattern = chessPattern; 
 800596a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800596e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
        }               
        
        if(pattern == frameData[833])
 8005972:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	f202 6282 	addw	r2, r2, #1666	; 0x682
 800597c:	8812      	ldrh	r2, [r2, #0]
 800597e:	4293      	cmp	r3, r2
 8005980:	f040 81d1 	bne.w	8005d26 <MLX90640_CalculateTo+0x85e>
        {    
            irData = frameData[pixelNumber];
 8005984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005986:	005b      	lsls	r3, r3, #1
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	4413      	add	r3, r2
 800598c:	881b      	ldrh	r3, [r3, #0]
 800598e:	ee07 3a90 	vmov	s15, r3
 8005992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005996:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            if(irData > 32767)
 800599a:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800599e:	ed1f 7a58 	vldr	s14, [pc, #-352]	; 8005840 <MLX90640_CalculateTo+0x378>
 80059a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059aa:	dd07      	ble.n	80059bc <MLX90640_CalculateTo+0x4f4>
            {
                irData = irData - 65536;
 80059ac:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80059b0:	ed1f 7a5c 	vldr	s14, [pc, #-368]	; 8005844 <MLX90640_CalculateTo+0x37c>
 80059b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80059b8:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            }
            irData = irData * gain;
 80059bc:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80059c0:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80059c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059c8:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            
            kta = params->kta[pixelNumber]/ktaScale;
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059d0:	4413      	add	r3, r2
 80059d2:	f603 434c 	addw	r3, r3, #3148	; 0xc4c
 80059d6:	f993 3000 	ldrsb.w	r3, [r3]
 80059da:	ee07 3a90 	vmov	s15, r3
 80059de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80059e2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80059e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059ea:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            kv = params->kv[pixelNumber]/kvScale;
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059f2:	4413      	add	r3, r2
 80059f4:	f603 734d 	addw	r3, r3, #3917	; 0xf4d
 80059f8:	f993 3000 	ldrsb.w	r3, [r3]
 80059fc:	ee07 3a90 	vmov	s15, r3
 8005a00:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005a04:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005a08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a0c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            irData = irData - params->offset[pixelNumber]*(1 + kta*(ta - 25))*(1 + kv*(vdd - 3.3f));
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a14:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8005a18:	005b      	lsls	r3, r3, #1
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005a20:	ee07 3a90 	vmov	s15, r3
 8005a24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005a28:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005a2c:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8005a30:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8005a34:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8005a38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005a48:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8005a4c:	ed5f 6a82 	vldr	s13, [pc, #-520]	; 8005848 <MLX90640_CalculateTo+0x380>
 8005a50:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8005a54:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005a58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a68:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8005a6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a70:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            
            if(mode !=  params->calibrationModeEE)
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005a7a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d023      	beq.n	8005aca <MLX90640_CalculateTo+0x602>
            {
              irData = irData + params->ilChessC[2] * (2 * ilPattern - 1) - params->ilChessC[1] * conversionPattern; 
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a88:	ed93 7a99 	vldr	s14, [r3, #612]	; 0x264
 8005a8c:	f997 3046 	ldrsb.w	r3, [r7, #70]	; 0x46
 8005a90:	005b      	lsls	r3, r3, #1
 8005a92:	3b01      	subs	r3, #1
 8005a94:	ee07 3a90 	vmov	s15, r3
 8005a98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005aa0:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8005aa4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aae:	edd3 6a98 	vldr	s13, [r3, #608]	; 0x260
 8005ab2:	f997 3044 	ldrsb.w	r3, [r7, #68]	; 0x44
 8005ab6:	ee07 3a90 	vmov	s15, r3
 8005aba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005abe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ac2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ac6:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            }                       
    
            irData = irData - params->tgc * irDataCP[subPage];
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	ed93 7a06 	vldr	s14, [r3, #24]
 8005ad0:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	3380      	adds	r3, #128	; 0x80
 8005ad8:	443b      	add	r3, r7
 8005ada:	3b58      	subs	r3, #88	; 0x58
 8005adc:	edd3 7a00 	vldr	s15, [r3]
 8005ae0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ae4:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8005ae8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005aec:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            irData = irData / emissivity;
 8005af0:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8005af4:	ed97 7a03 	vldr	s14, [r7, #12]
 8005af8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005afc:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            
            alphaCompensated = SCALEALPHA*alphaScale/params->alpha[pixelNumber];
 8005b00:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005b04:	ed1f 7aaf 	vldr	s14, [pc, #-700]	; 800584c <MLX90640_CalculateTo+0x384>
 8005b08:	ee67 6a87 	vmul.f32	s13, s15, s14
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b10:	3324      	adds	r3, #36	; 0x24
 8005b12:	005b      	lsls	r3, r3, #1
 8005b14:	4413      	add	r3, r2
 8005b16:	885b      	ldrh	r3, [r3, #2]
 8005b18:	ee07 3a90 	vmov	s15, r3
 8005b1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b24:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            alphaCompensated = alphaCompensated*(1 + params->KsTa * (ta - 25));
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8005b2e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005b32:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8005b36:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b42:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b46:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b4e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                        
            Sx = alphaCompensated * alphaCompensated * alphaCompensated * (irData + alphaCompensated * taTr);
 8005b52:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005b56:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005b5a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005b5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b62:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8005b66:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005b6a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005b6e:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8005b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b7a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            Sx = sqrt(sqrt(Sx)) * params->ksTo[1];            
 8005b7e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005b82:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005b86:	eeb0 0b47 	vmov.f64	d0, d7
 8005b8a:	f015 f891 	bl	801acb0 <sqrt>
 8005b8e:	eeb0 7b40 	vmov.f64	d7, d0
 8005b92:	eeb0 0b47 	vmov.f64	d0, d7
 8005b96:	f015 f88b 	bl	801acb0 <sqrt>
 8005b9a:	eeb0 6b40 	vmov.f64	d6, d0
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8005ba4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005ba8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005bac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005bb0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            
            To = sqrt(sqrt(irData/(alphaCompensated * (1 - params->ksTo[1] * 273.15f) + Sx) + taTr)) - 273.15f;                     
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8005bba:	ed1f 7adb 	vldr	s14, [pc, #-876]	; 8005850 <MLX90640_CalculateTo+0x388>
 8005bbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005bc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005bc6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005bca:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005bce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005bd2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005bd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bda:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8005bde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005be2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005be6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005bee:	eeb0 0b47 	vmov.f64	d0, d7
 8005bf2:	f015 f85d 	bl	801acb0 <sqrt>
 8005bf6:	eeb0 7b40 	vmov.f64	d7, d0
 8005bfa:	eeb0 0b47 	vmov.f64	d0, d7
 8005bfe:	f015 f857 	bl	801acb0 <sqrt>
 8005c02:	eeb0 7b40 	vmov.f64	d7, d0
 8005c06:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8005d40 <MLX90640_CalculateTo+0x878>
 8005c0a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005c0e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005c12:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
                    
            if(To < params->ct[1])
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8005c1c:	ee07 3a90 	vmov	s15, r3
 8005c20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c24:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8005c28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c30:	d503      	bpl.n	8005c3a <MLX90640_CalculateTo+0x772>
            {
                range = 0;
 8005c32:	2300      	movs	r3, #0
 8005c34:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8005c38:	e026      	b.n	8005c88 <MLX90640_CalculateTo+0x7c0>
            }
            else if(To < params->ct[2])   
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8005c40:	ee07 3a90 	vmov	s15, r3
 8005c44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c48:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8005c4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c54:	d503      	bpl.n	8005c5e <MLX90640_CalculateTo+0x796>
            {
                range = 1;            
 8005c56:	2301      	movs	r3, #1
 8005c58:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8005c5c:	e014      	b.n	8005c88 <MLX90640_CalculateTo+0x7c0>
            }   
            else if(To < params->ct[3])
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8005c64:	ee07 3a90 	vmov	s15, r3
 8005c68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c6c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8005c70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c78:	d503      	bpl.n	8005c82 <MLX90640_CalculateTo+0x7ba>
            {
                range = 2;            
 8005c7a:	2302      	movs	r3, #2
 8005c7c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8005c80:	e002      	b.n	8005c88 <MLX90640_CalculateTo+0x7c0>
            }
            else
            {
                range = 3;            
 8005c82:	2303      	movs	r3, #3
 8005c84:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
            }      
            
            To = sqrt(sqrt(irData / (alphaCompensated * alphaCorrR[range] * (1 + params->ksTo[range] * (To - params->ct[range]))) + taTr)) - 273.15f;
 8005c88:	f997 3076 	ldrsb.w	r3, [r7, #118]	; 0x76
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	3380      	adds	r3, #128	; 0x80
 8005c90:	443b      	add	r3, r7
 8005c92:	3b68      	subs	r3, #104	; 0x68
 8005c94:	ed93 7a00 	vldr	s14, [r3]
 8005c98:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005c9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ca0:	f997 3076 	ldrsb.w	r3, [r7, #118]	; 0x76
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	330a      	adds	r3, #10
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	4413      	add	r3, r2
 8005cac:	3304      	adds	r3, #4
 8005cae:	edd3 6a00 	vldr	s13, [r3]
 8005cb2:	f997 2076 	ldrsb.w	r2, [r7, #118]	; 0x76
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	3220      	adds	r2, #32
 8005cba:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8005cbe:	ee07 3a90 	vmov	s15, r3
 8005cc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cc6:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8005cca:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005cce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cde:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8005ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ce6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005cea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005cf2:	eeb0 0b47 	vmov.f64	d0, d7
 8005cf6:	f014 ffdb 	bl	801acb0 <sqrt>
 8005cfa:	eeb0 7b40 	vmov.f64	d7, d0
 8005cfe:	eeb0 0b47 	vmov.f64	d0, d7
 8005d02:	f014 ffd5 	bl	801acb0 <sqrt>
 8005d06:	eeb0 7b40 	vmov.f64	d7, d0
 8005d0a:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8005d40 <MLX90640_CalculateTo+0x878>
 8005d0e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005d12:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005d16:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
                        
            result[pixelNumber] = To;
 8005d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	4413      	add	r3, r2
 8005d22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d24:	601a      	str	r2, [r3, #0]
    for( int pixelNumber = 0; pixelNumber < 768; pixelNumber++)
 8005d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d28:	3301      	adds	r3, #1
 8005d2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d32:	f6ff adca 	blt.w	80058ca <MLX90640_CalculateTo+0x402>
        }
    }
}
 8005d36:	bf00      	nop
 8005d38:	bf00      	nop
 8005d3a:	3780      	adds	r7, #128	; 0x80
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	60000000 	.word	0x60000000
 8005d44:	40711266 	.word	0x40711266

08005d48 <MLX90640_GetVdd>:
}

//------------------------------------------------------------------------------

float MLX90640_GetVdd(uint16_t *frameData, const paramsMLX90640 *params)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	ed2d 8b02 	vpush	{d8}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
    float vdd;
    float resolutionCorrection;

    int resolutionRAM;    
    
    vdd = frameData[810];
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f203 6354 	addw	r3, r3, #1620	; 0x654
 8005d5c:	881b      	ldrh	r3, [r3, #0]
 8005d5e:	ee07 3a90 	vmov	s15, r3
 8005d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d66:	edc7 7a05 	vstr	s15, [r7, #20]
    if(vdd > 32767)
 8005d6a:	edd7 7a05 	vldr	s15, [r7, #20]
 8005d6e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8005e30 <MLX90640_GetVdd+0xe8>
 8005d72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d7a:	dd07      	ble.n	8005d8c <MLX90640_GetVdd+0x44>
    {
        vdd = vdd - 65536;
 8005d7c:	edd7 7a05 	vldr	s15, [r7, #20]
 8005d80:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8005e34 <MLX90640_GetVdd+0xec>
 8005d84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005d88:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    resolutionRAM = (frameData[832] & 0x0C00) >> 10;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 8005d92:	881b      	ldrh	r3, [r3, #0]
 8005d94:	129b      	asrs	r3, r3, #10
 8005d96:	f003 0303 	and.w	r3, r3, #3
 8005d9a:	613b      	str	r3, [r7, #16]
    resolutionCorrection = pow(2, (double)params->resolutionEE) / pow(2, (double)resolutionRAM);
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005da2:	ee07 3a90 	vmov	s15, r3
 8005da6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005daa:	eeb0 1b47 	vmov.f64	d1, d7
 8005dae:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8005db2:	f014 fd29 	bl	801a808 <pow>
 8005db6:	eeb0 8b40 	vmov.f64	d8, d0
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	ee07 3a90 	vmov	s15, r3
 8005dc0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005dc4:	eeb0 1b47 	vmov.f64	d1, d7
 8005dc8:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8005dcc:	f014 fd1c 	bl	801a808 <pow>
 8005dd0:	eeb0 6b40 	vmov.f64	d6, d0
 8005dd4:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8005dd8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005ddc:	edc7 7a03 	vstr	s15, [r7, #12]
    vdd = (resolutionCorrection * vdd - params->vdd25) / params->kVdd + 3.3f;
 8005de0:	ed97 7a03 	vldr	s14, [r7, #12]
 8005de4:	edd7 7a05 	vldr	s15, [r7, #20]
 8005de8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005df2:	ee07 3a90 	vmov	s15, r3
 8005df6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005dfa:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e04:	ee07 3a90 	vmov	s15, r3
 8005e08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e10:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8005e38 <MLX90640_GetVdd+0xf0>
 8005e14:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005e18:	edc7 7a05 	vstr	s15, [r7, #20]
    
    return vdd;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	ee07 3a90 	vmov	s15, r3
}
 8005e22:	eeb0 0a67 	vmov.f32	s0, s15
 8005e26:	3718      	adds	r7, #24
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	ecbd 8b02 	vpop	{d8}
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	46fffe00 	.word	0x46fffe00
 8005e34:	47800000 	.word	0x47800000
 8005e38:	40533333 	.word	0x40533333

08005e3c <MLX90640_GetTa>:

//------------------------------------------------------------------------------

float MLX90640_GetTa(uint16_t *frameData, const paramsMLX90640 *params)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b086      	sub	sp, #24
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
    float ptat;
    float ptatArt;
    float vdd;
    float ta;
    
    vdd = MLX90640_GetVdd(frameData, params);
 8005e46:	6839      	ldr	r1, [r7, #0]
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f7ff ff7d 	bl	8005d48 <MLX90640_GetVdd>
 8005e4e:	ed87 0a03 	vstr	s0, [r7, #12]
    
    ptat = frameData[800];
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8005e58:	881b      	ldrh	r3, [r3, #0]
 8005e5a:	ee07 3a90 	vmov	s15, r3
 8005e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e62:	edc7 7a05 	vstr	s15, [r7, #20]
    if(ptat > 32767)
 8005e66:	edd7 7a05 	vldr	s15, [r7, #20]
 8005e6a:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8005f4c <MLX90640_GetTa+0x110>
 8005e6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e76:	dd07      	ble.n	8005e88 <MLX90640_GetTa+0x4c>
    {
        ptat = ptat - 65536;
 8005e78:	edd7 7a05 	vldr	s15, [r7, #20]
 8005e7c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8005f50 <MLX90640_GetTa+0x114>
 8005e80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005e84:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    
    ptatArt = frameData[768];
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8005e8e:	881b      	ldrh	r3, [r3, #0]
 8005e90:	ee07 3a90 	vmov	s15, r3
 8005e94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e98:	edc7 7a04 	vstr	s15, [r7, #16]
    if(ptatArt > 32767)
 8005e9c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005ea0:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005f4c <MLX90640_GetTa+0x110>
 8005ea4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eac:	dd07      	ble.n	8005ebe <MLX90640_GetTa+0x82>
    {
        ptatArt = ptatArt - 65536;
 8005eae:	edd7 7a04 	vldr	s15, [r7, #16]
 8005eb2:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8005f50 <MLX90640_GetTa+0x114>
 8005eb6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005eba:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    ptatArt = (ptat / (ptat * params->alphaPTAT + ptatArt)) * pow(2, (double)18);
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	ed93 7a04 	vldr	s14, [r3, #16]
 8005ec4:	edd7 7a05 	vldr	s15, [r7, #20]
 8005ec8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ecc:	edd7 7a04 	vldr	s15, [r7, #16]
 8005ed0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ed4:	edd7 6a05 	vldr	s13, [r7, #20]
 8005ed8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005edc:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005f54 <MLX90640_GetTa+0x118>
 8005ee0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ee4:	edc7 7a04 	vstr	s15, [r7, #16]
    
    ta = (ptatArt / (1 + params->KvPTAT * (vdd - 3.3f)) - params->vPTAT25);
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	ed93 7a01 	vldr	s14, [r3, #4]
 8005eee:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ef2:	eddf 6a19 	vldr	s13, [pc, #100]	; 8005f58 <MLX90640_GetTa+0x11c>
 8005ef6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005efe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f02:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f06:	edd7 6a04 	vldr	s13, [r7, #16]
 8005f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	899b      	ldrh	r3, [r3, #12]
 8005f12:	ee07 3a90 	vmov	s15, r3
 8005f16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f1e:	edc7 7a02 	vstr	s15, [r7, #8]
    ta = ta / params->KtPTAT + 25;
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	ed93 7a02 	vldr	s14, [r3, #8]
 8005f28:	edd7 6a02 	vldr	s13, [r7, #8]
 8005f2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f30:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8005f34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f38:	edc7 7a02 	vstr	s15, [r7, #8]
    
    return ta;
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	ee07 3a90 	vmov	s15, r3
}
 8005f42:	eeb0 0a67 	vmov.f32	s0, s15
 8005f46:	3718      	adds	r7, #24
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	46fffe00 	.word	0x46fffe00
 8005f50:	47800000 	.word	0x47800000
 8005f54:	48800000 	.word	0x48800000
 8005f58:	40533333 	.word	0x40533333

08005f5c <ExtractVDDParameters>:
}

//------------------------------------------------------------------------------

void ExtractVDDParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
    int16_t kVdd;
    int16_t vdd25;
    
    kVdd = eeData[51];
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	3366      	adds	r3, #102	; 0x66
 8005f6a:	881b      	ldrh	r3, [r3, #0]
 8005f6c:	81fb      	strh	r3, [r7, #14]
    
    kVdd = (eeData[51] & 0xFF00) >> 8;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	3366      	adds	r3, #102	; 0x66
 8005f72:	881b      	ldrh	r3, [r3, #0]
 8005f74:	0a1b      	lsrs	r3, r3, #8
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	81fb      	strh	r3, [r7, #14]
    if(kVdd > 127)
 8005f7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005f7e:	2b7f      	cmp	r3, #127	; 0x7f
 8005f80:	dd04      	ble.n	8005f8c <ExtractVDDParameters+0x30>
    {
        kVdd = kVdd - 256;
 8005f82:	89fb      	ldrh	r3, [r7, #14]
 8005f84:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	81fb      	strh	r3, [r7, #14]
    }
    kVdd = 32 * kVdd;
 8005f8c:	89fb      	ldrh	r3, [r7, #14]
 8005f8e:	015b      	lsls	r3, r3, #5
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	81fb      	strh	r3, [r7, #14]
    vdd25 = eeData[51] & 0x00FF;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	3366      	adds	r3, #102	; 0x66
 8005f98:	881b      	ldrh	r3, [r3, #0]
 8005f9a:	b21b      	sxth	r3, r3
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	81bb      	strh	r3, [r7, #12]
    vdd25 = ((vdd25 - 256) << 5) - 8192;
 8005fa0:	89bb      	ldrh	r3, [r7, #12]
 8005fa2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	015b      	lsls	r3, r3, #5
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	81bb      	strh	r3, [r7, #12]
    
    mlx90640->kVdd = kVdd;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	89fa      	ldrh	r2, [r7, #14]
 8005fb8:	801a      	strh	r2, [r3, #0]
    mlx90640->vdd25 = vdd25; 
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	89ba      	ldrh	r2, [r7, #12]
 8005fbe:	805a      	strh	r2, [r3, #2]
}
 8005fc0:	bf00      	nop
 8005fc2:	3714      	adds	r7, #20
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr
 8005fcc:	0000      	movs	r0, r0
	...

08005fd0 <ExtractPTATParameters>:

//------------------------------------------------------------------------------

void ExtractPTATParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b087      	sub	sp, #28
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
    float KvPTAT;
    float KtPTAT;
    int16_t vPTAT25;
    float alphaPTAT;
    
    KvPTAT = (eeData[50] & 0xFC00) >> 10;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	3364      	adds	r3, #100	; 0x64
 8005fde:	881b      	ldrh	r3, [r3, #0]
 8005fe0:	0a9b      	lsrs	r3, r3, #10
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	ee07 3a90 	vmov	s15, r3
 8005fe8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005fec:	edc7 7a05 	vstr	s15, [r7, #20]
    if(KvPTAT > 31)
 8005ff0:	edd7 7a05 	vldr	s15, [r7, #20]
 8005ff4:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8005ff8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006000:	dd07      	ble.n	8006012 <ExtractPTATParameters+0x42>
    {
        KvPTAT = KvPTAT - 64;
 8006002:	edd7 7a05 	vldr	s15, [r7, #20]
 8006006:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80060c8 <ExtractPTATParameters+0xf8>
 800600a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800600e:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    KvPTAT = KvPTAT/4096;
 8006012:	ed97 7a05 	vldr	s14, [r7, #20]
 8006016:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80060cc <ExtractPTATParameters+0xfc>
 800601a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800601e:	edc7 7a05 	vstr	s15, [r7, #20]
    
    KtPTAT = eeData[50] & 0x03FF;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	3364      	adds	r3, #100	; 0x64
 8006026:	881b      	ldrh	r3, [r3, #0]
 8006028:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800602c:	ee07 3a90 	vmov	s15, r3
 8006030:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006034:	edc7 7a04 	vstr	s15, [r7, #16]
    if(KtPTAT > 511)
 8006038:	edd7 7a04 	vldr	s15, [r7, #16]
 800603c:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80060d0 <ExtractPTATParameters+0x100>
 8006040:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006048:	dd07      	ble.n	800605a <ExtractPTATParameters+0x8a>
    {
        KtPTAT = KtPTAT - 1024;
 800604a:	edd7 7a04 	vldr	s15, [r7, #16]
 800604e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80060d4 <ExtractPTATParameters+0x104>
 8006052:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006056:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    KtPTAT = KtPTAT/8;
 800605a:	ed97 7a04 	vldr	s14, [r7, #16]
 800605e:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8006062:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006066:	edc7 7a04 	vstr	s15, [r7, #16]
    
    vPTAT25 = eeData[49];
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	3362      	adds	r3, #98	; 0x62
 800606e:	881b      	ldrh	r3, [r3, #0]
 8006070:	81fb      	strh	r3, [r7, #14]
    
    alphaPTAT = (eeData[16] & 0xF000) / pow(2, (double)14) + 8.0f;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	3320      	adds	r3, #32
 8006076:	881b      	ldrh	r3, [r3, #0]
 8006078:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800607c:	ee07 3a90 	vmov	s15, r3
 8006080:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8006084:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 80060c0 <ExtractPTATParameters+0xf0>
 8006088:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800608c:	eeb2 6b00 	vmov.f64	d6, #32	; 0x41000000  8.0
 8006090:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006094:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006098:	edc7 7a02 	vstr	s15, [r7, #8]
    
    mlx90640->KvPTAT = KvPTAT;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	697a      	ldr	r2, [r7, #20]
 80060a0:	605a      	str	r2, [r3, #4]
    mlx90640->KtPTAT = KtPTAT;    
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	693a      	ldr	r2, [r7, #16]
 80060a6:	609a      	str	r2, [r3, #8]
    mlx90640->vPTAT25 = vPTAT25;
 80060a8:	89fa      	ldrh	r2, [r7, #14]
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	819a      	strh	r2, [r3, #12]
    mlx90640->alphaPTAT = alphaPTAT;   
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	68ba      	ldr	r2, [r7, #8]
 80060b2:	611a      	str	r2, [r3, #16]
}
 80060b4:	bf00      	nop
 80060b6:	371c      	adds	r7, #28
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr
 80060c0:	00000000 	.word	0x00000000
 80060c4:	40d00000 	.word	0x40d00000
 80060c8:	42800000 	.word	0x42800000
 80060cc:	45800000 	.word	0x45800000
 80060d0:	43ff8000 	.word	0x43ff8000
 80060d4:	44800000 	.word	0x44800000

080060d8 <ExtractGainParameters>:

//------------------------------------------------------------------------------

void ExtractGainParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80060d8:	b480      	push	{r7}
 80060da:	b085      	sub	sp, #20
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
    int16_t gainEE;
    
    gainEE = eeData[48];
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	3360      	adds	r3, #96	; 0x60
 80060e6:	881b      	ldrh	r3, [r3, #0]
 80060e8:	81fb      	strh	r3, [r7, #14]
    if(gainEE > 32767)
    {
        gainEE = gainEE -65536;
    }
    
    mlx90640->gainEE = gainEE;    
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	89fa      	ldrh	r2, [r7, #14]
 80060ee:	829a      	strh	r2, [r3, #20]
}
 80060f0:	bf00      	nop
 80060f2:	3714      	adds	r7, #20
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <ExtractTgcParameters>:

//------------------------------------------------------------------------------

void ExtractTgcParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
    float tgc;
    tgc = eeData[60] & 0x00FF;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	3378      	adds	r3, #120	; 0x78
 800610a:	881b      	ldrh	r3, [r3, #0]
 800610c:	b2db      	uxtb	r3, r3
 800610e:	ee07 3a90 	vmov	s15, r3
 8006112:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006116:	edc7 7a03 	vstr	s15, [r7, #12]
    if(tgc > 127)
 800611a:	edd7 7a03 	vldr	s15, [r7, #12]
 800611e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8006160 <ExtractTgcParameters+0x64>
 8006122:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800612a:	dd07      	ble.n	800613c <ExtractTgcParameters+0x40>
    {
        tgc = tgc - 256;
 800612c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006130:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8006164 <ExtractTgcParameters+0x68>
 8006134:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006138:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    tgc = tgc / 32.0f;
 800613c:	ed97 7a03 	vldr	s14, [r7, #12]
 8006140:	eddf 6a09 	vldr	s13, [pc, #36]	; 8006168 <ExtractTgcParameters+0x6c>
 8006144:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006148:	edc7 7a03 	vstr	s15, [r7, #12]
    
    mlx90640->tgc = tgc;        
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	619a      	str	r2, [r3, #24]
}
 8006152:	bf00      	nop
 8006154:	3714      	adds	r7, #20
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	42fe0000 	.word	0x42fe0000
 8006164:	43800000 	.word	0x43800000
 8006168:	42000000 	.word	0x42000000

0800616c <ExtractResolutionParameters>:

//------------------------------------------------------------------------------

void ExtractResolutionParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 800616c:	b480      	push	{r7}
 800616e:	b085      	sub	sp, #20
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
    uint8_t resolutionEE;
    resolutionEE = (eeData[56] & 0x3000) >> 12;    
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	3370      	adds	r3, #112	; 0x70
 800617a:	881b      	ldrh	r3, [r3, #0]
 800617c:	131b      	asrs	r3, r3, #12
 800617e:	b2db      	uxtb	r3, r3
 8006180:	f003 0303 	and.w	r3, r3, #3
 8006184:	73fb      	strb	r3, [r7, #15]
    
    mlx90640->resolutionEE = resolutionEE;
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	7bfa      	ldrb	r2, [r7, #15]
 800618a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 800618e:	bf00      	nop
 8006190:	3714      	adds	r7, #20
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr
	...

0800619c <ExtractKsTaParameters>:

//------------------------------------------------------------------------------

void ExtractKsTaParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
    float KsTa;
    KsTa = (eeData[60] & 0xFF00) >> 8;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	3378      	adds	r3, #120	; 0x78
 80061aa:	881b      	ldrh	r3, [r3, #0]
 80061ac:	0a1b      	lsrs	r3, r3, #8
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	ee07 3a90 	vmov	s15, r3
 80061b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061b8:	edc7 7a03 	vstr	s15, [r7, #12]
    if(KsTa > 127)
 80061bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80061c0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8006200 <ExtractKsTaParameters+0x64>
 80061c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061cc:	dd07      	ble.n	80061de <ExtractKsTaParameters+0x42>
    {
        KsTa = KsTa -256;
 80061ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80061d2:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8006204 <ExtractKsTaParameters+0x68>
 80061d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80061da:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    KsTa = KsTa / 8192.0f;
 80061de:	ed97 7a03 	vldr	s14, [r7, #12]
 80061e2:	eddf 6a09 	vldr	s13, [pc, #36]	; 8006208 <ExtractKsTaParameters+0x6c>
 80061e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80061ea:	edc7 7a03 	vstr	s15, [r7, #12]
    
    mlx90640->KsTa = KsTa;
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80061f4:	bf00      	nop
 80061f6:	3714      	adds	r7, #20
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr
 8006200:	42fe0000 	.word	0x42fe0000
 8006204:	43800000 	.word	0x43800000
 8006208:	46000000 	.word	0x46000000

0800620c <ExtractKsToParameters>:

//------------------------------------------------------------------------------

void ExtractKsToParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 800620c:	b480      	push	{r7}
 800620e:	b087      	sub	sp, #28
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
    int KsToScale;
    int8_t step;
    
    step = ((eeData[63] & 0x3000) >> 12) * 10;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	337e      	adds	r3, #126	; 0x7e
 800621a:	881b      	ldrh	r3, [r3, #0]
 800621c:	131b      	asrs	r3, r3, #12
 800621e:	b2db      	uxtb	r3, r3
 8006220:	f003 0303 	and.w	r3, r3, #3
 8006224:	b2db      	uxtb	r3, r3
 8006226:	461a      	mov	r2, r3
 8006228:	0092      	lsls	r2, r2, #2
 800622a:	4413      	add	r3, r2
 800622c:	005b      	lsls	r3, r3, #1
 800622e:	b2db      	uxtb	r3, r3
 8006230:	74fb      	strb	r3, [r7, #19]
    
    mlx90640->ct[0] = -40;
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	f64f 72d8 	movw	r2, #65496	; 0xffd8
 8006238:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    mlx90640->ct[1] = 0;
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	2200      	movs	r2, #0
 8006240:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    mlx90640->ct[2] = (eeData[63] & 0x00F0) >> 4;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	337e      	adds	r3, #126	; 0x7e
 8006248:	881b      	ldrh	r3, [r3, #0]
 800624a:	111b      	asrs	r3, r3, #4
 800624c:	b21b      	sxth	r3, r3
 800624e:	f003 030f 	and.w	r3, r3, #15
 8006252:	b21a      	sxth	r2, r3
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    mlx90640->ct[3] = (eeData[63] & 0x0F00) >> 8;    
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	337e      	adds	r3, #126	; 0x7e
 800625e:	881b      	ldrh	r3, [r3, #0]
 8006260:	121b      	asrs	r3, r3, #8
 8006262:	b21b      	sxth	r3, r3
 8006264:	f003 030f 	and.w	r3, r3, #15
 8006268:	b21a      	sxth	r2, r3
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    
    mlx90640->ct[2] = mlx90640->ct[2]*step;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8006276:	b29a      	uxth	r2, r3
 8006278:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800627c:	b29b      	uxth	r3, r3
 800627e:	fb12 f303 	smulbb	r3, r2, r3
 8006282:	b29b      	uxth	r3, r3
 8006284:	b21a      	sxth	r2, r3
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    mlx90640->ct[3] = mlx90640->ct[2] + mlx90640->ct[3]*step;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8006292:	b29a      	uxth	r2, r3
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800629a:	b299      	uxth	r1, r3
 800629c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	fb11 f303 	smulbb	r3, r1, r3
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	4413      	add	r3, r2
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	b21a      	sxth	r2, r3
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    mlx90640->ct[4] = 400;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80062ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    
    KsToScale = (eeData[63] & 0x000F) + 8;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	337e      	adds	r3, #126	; 0x7e
 80062c2:	881b      	ldrh	r3, [r3, #0]
 80062c4:	f003 030f 	and.w	r3, r3, #15
 80062c8:	3308      	adds	r3, #8
 80062ca:	60fb      	str	r3, [r7, #12]
    KsToScale = 1 << KsToScale;
 80062cc:	2201      	movs	r2, #1
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	fa02 f303 	lsl.w	r3, r2, r3
 80062d4:	60fb      	str	r3, [r7, #12]
    
    mlx90640->ksTo[0] = eeData[61] & 0x00FF;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	337a      	adds	r3, #122	; 0x7a
 80062da:	881b      	ldrh	r3, [r3, #0]
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	ee07 3a90 	vmov	s15, r3
 80062e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    mlx90640->ksTo[1] = (eeData[61] & 0xFF00) >> 8;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	337a      	adds	r3, #122	; 0x7a
 80062f0:	881b      	ldrh	r3, [r3, #0]
 80062f2:	0a1b      	lsrs	r3, r3, #8
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	ee07 3a90 	vmov	s15, r3
 80062fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    mlx90640->ksTo[2] = eeData[62] & 0x00FF;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	337c      	adds	r3, #124	; 0x7c
 8006308:	881b      	ldrh	r3, [r3, #0]
 800630a:	b2db      	uxtb	r3, r3
 800630c:	ee07 3a90 	vmov	s15, r3
 8006310:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    mlx90640->ksTo[3] = (eeData[62] & 0xFF00) >> 8;      
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	337c      	adds	r3, #124	; 0x7c
 800631e:	881b      	ldrh	r3, [r3, #0]
 8006320:	0a1b      	lsrs	r3, r3, #8
 8006322:	b29b      	uxth	r3, r3
 8006324:	ee07 3a90 	vmov	s15, r3
 8006328:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
    
    for(int i = 0; i < 4; i++)
 8006332:	2300      	movs	r3, #0
 8006334:	617b      	str	r3, [r7, #20]
 8006336:	e03c      	b.n	80063b2 <ExtractKsToParameters+0x1a6>
    {
        if(mlx90640->ksTo[i] > 127)
 8006338:	683a      	ldr	r2, [r7, #0]
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	330a      	adds	r3, #10
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	4413      	add	r3, r2
 8006342:	3304      	adds	r3, #4
 8006344:	edd3 7a00 	vldr	s15, [r3]
 8006348:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80063cc <ExtractKsToParameters+0x1c0>
 800634c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006354:	dd13      	ble.n	800637e <ExtractKsToParameters+0x172>
        {
            mlx90640->ksTo[i] = mlx90640->ksTo[i] - 256;
 8006356:	683a      	ldr	r2, [r7, #0]
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	330a      	adds	r3, #10
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	4413      	add	r3, r2
 8006360:	3304      	adds	r3, #4
 8006362:	edd3 7a00 	vldr	s15, [r3]
 8006366:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80063d0 <ExtractKsToParameters+0x1c4>
 800636a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800636e:	683a      	ldr	r2, [r7, #0]
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	330a      	adds	r3, #10
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	4413      	add	r3, r2
 8006378:	3304      	adds	r3, #4
 800637a:	edc3 7a00 	vstr	s15, [r3]
        }
        mlx90640->ksTo[i] = mlx90640->ksTo[i] / KsToScale;
 800637e:	683a      	ldr	r2, [r7, #0]
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	330a      	adds	r3, #10
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	4413      	add	r3, r2
 8006388:	3304      	adds	r3, #4
 800638a:	edd3 6a00 	vldr	s13, [r3]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	ee07 3a90 	vmov	s15, r3
 8006394:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006398:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800639c:	683a      	ldr	r2, [r7, #0]
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	330a      	adds	r3, #10
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	4413      	add	r3, r2
 80063a6:	3304      	adds	r3, #4
 80063a8:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 0; i < 4; i++)
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	3301      	adds	r3, #1
 80063b0:	617b      	str	r3, [r7, #20]
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	2b03      	cmp	r3, #3
 80063b6:	ddbf      	ble.n	8006338 <ExtractKsToParameters+0x12c>
    } 
    
    mlx90640->ksTo[4] = -0.0002;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	4a06      	ldr	r2, [pc, #24]	; (80063d4 <ExtractKsToParameters+0x1c8>)
 80063bc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80063be:	bf00      	nop
 80063c0:	371c      	adds	r7, #28
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	42fe0000 	.word	0x42fe0000
 80063d0:	43800000 	.word	0x43800000
 80063d4:	b951b717 	.word	0xb951b717

080063d8 <ExtractAlphaParameters>:

//------------------------------------------------------------------------------

void ExtractAlphaParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	ed2d 8b02 	vpush	{d8}
 80063de:	f5ad 6d52 	sub.w	sp, sp, #3360	; 0xd20
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80063e8:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 80063ec:	6018      	str	r0, [r3, #0]
 80063ee:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80063f2:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 80063f6:	6019      	str	r1, [r3, #0]
    int accRow[24];
    int accColumn[32];
    int p = 0;
 80063f8:	2300      	movs	r3, #0
 80063fa:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
    uint8_t accRemScale;
    float alphaTemp[768];
    float temp;
    

    accRemScale = eeData[32] & 0x000F;
 80063fe:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8006402:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	3340      	adds	r3, #64	; 0x40
 800640a:	881b      	ldrh	r3, [r3, #0]
 800640c:	b2db      	uxtb	r3, r3
 800640e:	f003 030f 	and.w	r3, r3, #15
 8006412:	f887 3cf3 	strb.w	r3, [r7, #3315]	; 0xcf3
    accColumnScale = (eeData[32] & 0x00F0) >> 4;
 8006416:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800641a:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	3340      	adds	r3, #64	; 0x40
 8006422:	881b      	ldrh	r3, [r3, #0]
 8006424:	111b      	asrs	r3, r3, #4
 8006426:	b2db      	uxtb	r3, r3
 8006428:	f003 030f 	and.w	r3, r3, #15
 800642c:	f887 3cf2 	strb.w	r3, [r7, #3314]	; 0xcf2
    accRowScale = (eeData[32] & 0x0F00) >> 8;
 8006430:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8006434:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	3340      	adds	r3, #64	; 0x40
 800643c:	881b      	ldrh	r3, [r3, #0]
 800643e:	121b      	asrs	r3, r3, #8
 8006440:	b2db      	uxtb	r3, r3
 8006442:	f003 030f 	and.w	r3, r3, #15
 8006446:	f887 3cf1 	strb.w	r3, [r7, #3313]	; 0xcf1
    alphaScale = ((eeData[32] & 0xF000) >> 12) + 30;
 800644a:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800644e:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	3340      	adds	r3, #64	; 0x40
 8006456:	881b      	ldrh	r3, [r3, #0]
 8006458:	0b1b      	lsrs	r3, r3, #12
 800645a:	b29b      	uxth	r3, r3
 800645c:	b2db      	uxtb	r3, r3
 800645e:	331e      	adds	r3, #30
 8006460:	f887 3d1f 	strb.w	r3, [r7, #3359]	; 0xd1f
    alphaRef = eeData[33];
 8006464:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8006468:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	3342      	adds	r3, #66	; 0x42
 8006470:	881b      	ldrh	r3, [r3, #0]
 8006472:	f8c7 3cec 	str.w	r3, [r7, #3308]	; 0xcec
    
    for(int i = 0; i < 6; i++)
 8006476:	2300      	movs	r3, #0
 8006478:	f8c7 3d14 	str.w	r3, [r7, #3348]	; 0xd14
 800647c:	e062      	b.n	8006544 <ExtractAlphaParameters+0x16c>
    {
        p = i * 4;
 800647e:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
        accRow[p + 0] = (eeData[34 + i] & 0x000F);
 8006488:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 800648c:	3322      	adds	r3, #34	; 0x22
 800648e:	005b      	lsls	r3, r3, #1
 8006490:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8006494:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8006498:	6812      	ldr	r2, [r2, #0]
 800649a:	4413      	add	r3, r2
 800649c:	881b      	ldrh	r3, [r3, #0]
 800649e:	f003 020f 	and.w	r2, r3, #15
 80064a2:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 80064ac:	443b      	add	r3, r7
 80064ae:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 1] = (eeData[34 + i] & 0x00F0) >> 4;
 80064b2:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 80064b6:	3322      	adds	r3, #34	; 0x22
 80064b8:	005b      	lsls	r3, r3, #1
 80064ba:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 80064be:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 80064c2:	6812      	ldr	r2, [r2, #0]
 80064c4:	4413      	add	r3, r2
 80064c6:	881b      	ldrh	r3, [r3, #0]
 80064c8:	111a      	asrs	r2, r3, #4
 80064ca:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80064ce:	3301      	adds	r3, #1
 80064d0:	f002 020f 	and.w	r2, r2, #15
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 80064da:	443b      	add	r3, r7
 80064dc:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 2] = (eeData[34 + i] & 0x0F00) >> 8;
 80064e0:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 80064e4:	3322      	adds	r3, #34	; 0x22
 80064e6:	005b      	lsls	r3, r3, #1
 80064e8:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 80064ec:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 80064f0:	6812      	ldr	r2, [r2, #0]
 80064f2:	4413      	add	r3, r2
 80064f4:	881b      	ldrh	r3, [r3, #0]
 80064f6:	121a      	asrs	r2, r3, #8
 80064f8:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80064fc:	3302      	adds	r3, #2
 80064fe:	f002 020f 	and.w	r2, r2, #15
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8006508:	443b      	add	r3, r7
 800650a:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 3] = (eeData[34 + i] & 0xF000) >> 12;
 800650e:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8006512:	3322      	adds	r3, #34	; 0x22
 8006514:	005b      	lsls	r3, r3, #1
 8006516:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 800651a:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 800651e:	6812      	ldr	r2, [r2, #0]
 8006520:	4413      	add	r3, r2
 8006522:	881b      	ldrh	r3, [r3, #0]
 8006524:	0b1b      	lsrs	r3, r3, #12
 8006526:	b29a      	uxth	r2, r3
 8006528:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 800652c:	3303      	adds	r3, #3
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8006534:	443b      	add	r3, r7
 8006536:	f843 2c94 	str.w	r2, [r3, #-148]
    for(int i = 0; i < 6; i++)
 800653a:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 800653e:	3301      	adds	r3, #1
 8006540:	f8c7 3d14 	str.w	r3, [r7, #3348]	; 0xd14
 8006544:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8006548:	2b05      	cmp	r3, #5
 800654a:	dd98      	ble.n	800647e <ExtractAlphaParameters+0xa6>
    }
    
    for(int i = 0; i < 24; i++)
 800654c:	2300      	movs	r3, #0
 800654e:	f8c7 3d10 	str.w	r3, [r7, #3344]	; 0xd10
 8006552:	e020      	b.n	8006596 <ExtractAlphaParameters+0x1be>
    {
        if (accRow[i] > 7)
 8006554:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 800655e:	443b      	add	r3, r7
 8006560:	f853 3c94 	ldr.w	r3, [r3, #-148]
 8006564:	2b07      	cmp	r3, #7
 8006566:	dd11      	ble.n	800658c <ExtractAlphaParameters+0x1b4>
        {
            accRow[i] = accRow[i] - 16;
 8006568:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8006572:	443b      	add	r3, r7
 8006574:	f853 3c94 	ldr.w	r3, [r3, #-148]
 8006578:	f1a3 0210 	sub.w	r2, r3, #16
 800657c:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8006586:	443b      	add	r3, r7
 8006588:	f843 2c94 	str.w	r2, [r3, #-148]
    for(int i = 0; i < 24; i++)
 800658c:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8006590:	3301      	adds	r3, #1
 8006592:	f8c7 3d10 	str.w	r3, [r7, #3344]	; 0xd10
 8006596:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 800659a:	2b17      	cmp	r3, #23
 800659c:	ddda      	ble.n	8006554 <ExtractAlphaParameters+0x17c>
        }
    }
    
    for(int i = 0; i < 8; i++)
 800659e:	2300      	movs	r3, #0
 80065a0:	f8c7 3d0c 	str.w	r3, [r7, #3340]	; 0xd0c
 80065a4:	e062      	b.n	800666c <ExtractAlphaParameters+0x294>
    {
        p = i * 4;
 80065a6:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
        accColumn[p + 0] = (eeData[40 + i] & 0x000F);
 80065b0:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 80065b4:	3328      	adds	r3, #40	; 0x28
 80065b6:	005b      	lsls	r3, r3, #1
 80065b8:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 80065bc:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 80065c0:	6812      	ldr	r2, [r2, #0]
 80065c2:	4413      	add	r3, r2
 80065c4:	881b      	ldrh	r3, [r3, #0]
 80065c6:	f003 010f 	and.w	r1, r3, #15
 80065ca:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80065ce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80065d2:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	; 0xcf4
 80065d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 1] = (eeData[40 + i] & 0x00F0) >> 4;
 80065da:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 80065de:	3328      	adds	r3, #40	; 0x28
 80065e0:	005b      	lsls	r3, r3, #1
 80065e2:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 80065e6:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 80065ea:	6812      	ldr	r2, [r2, #0]
 80065ec:	4413      	add	r3, r2
 80065ee:	881b      	ldrh	r3, [r3, #0]
 80065f0:	111b      	asrs	r3, r3, #4
 80065f2:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	; 0xcf4
 80065f6:	3201      	adds	r2, #1
 80065f8:	f003 010f 	and.w	r1, r3, #15
 80065fc:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8006600:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 2] = (eeData[40 + i] & 0x0F00) >> 8;
 8006608:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 800660c:	3328      	adds	r3, #40	; 0x28
 800660e:	005b      	lsls	r3, r3, #1
 8006610:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8006614:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8006618:	6812      	ldr	r2, [r2, #0]
 800661a:	4413      	add	r3, r2
 800661c:	881b      	ldrh	r3, [r3, #0]
 800661e:	121b      	asrs	r3, r3, #8
 8006620:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	; 0xcf4
 8006624:	3202      	adds	r2, #2
 8006626:	f003 010f 	and.w	r1, r3, #15
 800662a:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800662e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006632:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 3] = (eeData[40 + i] & 0xF000) >> 12;
 8006636:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 800663a:	3328      	adds	r3, #40	; 0x28
 800663c:	005b      	lsls	r3, r3, #1
 800663e:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8006642:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8006646:	6812      	ldr	r2, [r2, #0]
 8006648:	4413      	add	r3, r2
 800664a:	881b      	ldrh	r3, [r3, #0]
 800664c:	0b1b      	lsrs	r3, r3, #12
 800664e:	b299      	uxth	r1, r3
 8006650:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8006654:	1cda      	adds	r2, r3, #3
 8006656:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800665a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800665e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 8; i++)
 8006662:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8006666:	3301      	adds	r3, #1
 8006668:	f8c7 3d0c 	str.w	r3, [r7, #3340]	; 0xd0c
 800666c:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8006670:	2b07      	cmp	r3, #7
 8006672:	dd98      	ble.n	80065a6 <ExtractAlphaParameters+0x1ce>
    }
    
    for(int i = 0; i < 32; i ++)
 8006674:	2300      	movs	r3, #0
 8006676:	f8c7 3d08 	str.w	r3, [r7, #3336]	; 0xd08
 800667a:	e020      	b.n	80066be <ExtractAlphaParameters+0x2e6>
    {
        if (accColumn[i] > 7)
 800667c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8006680:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006684:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	; 0xd08
 8006688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800668c:	2b07      	cmp	r3, #7
 800668e:	dd11      	ble.n	80066b4 <ExtractAlphaParameters+0x2dc>
        {
            accColumn[i] = accColumn[i] - 16;
 8006690:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8006694:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006698:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	; 0xd08
 800669c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066a0:	f1a3 0110 	sub.w	r1, r3, #16
 80066a4:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80066a8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80066ac:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	; 0xd08
 80066b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 32; i ++)
 80066b4:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 80066b8:	3301      	adds	r3, #1
 80066ba:	f8c7 3d08 	str.w	r3, [r7, #3336]	; 0xd08
 80066be:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 80066c2:	2b1f      	cmp	r3, #31
 80066c4:	ddda      	ble.n	800667c <ExtractAlphaParameters+0x2a4>
        }
    }

    for(int i = 0; i < 24; i++)
 80066c6:	2300      	movs	r3, #0
 80066c8:	f8c7 3d04 	str.w	r3, [r7, #3332]	; 0xd04
 80066cc:	e12a      	b.n	8006924 <ExtractAlphaParameters+0x54c>
    {
        for(int j = 0; j < 32; j ++)
 80066ce:	2300      	movs	r3, #0
 80066d0:	f8c7 3d00 	str.w	r3, [r7, #3328]	; 0xd00
 80066d4:	e11c      	b.n	8006910 <ExtractAlphaParameters+0x538>
        {
            p = 32 * i +j;
 80066d6:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 80066da:	015b      	lsls	r3, r3, #5
 80066dc:	f8d7 2d00 	ldr.w	r2, [r7, #3328]	; 0xd00
 80066e0:	4413      	add	r3, r2
 80066e2:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
            alphaTemp[p] = (eeData[64 + p] & 0x03F0) >> 4;
 80066e6:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80066ea:	3340      	adds	r3, #64	; 0x40
 80066ec:	005b      	lsls	r3, r3, #1
 80066ee:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 80066f2:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 80066f6:	6812      	ldr	r2, [r2, #0]
 80066f8:	4413      	add	r3, r2
 80066fa:	881b      	ldrh	r3, [r3, #0]
 80066fc:	111b      	asrs	r3, r3, #4
 80066fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006702:	ee07 3a90 	vmov	s15, r3
 8006706:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800670a:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800670e:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8006712:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	4413      	add	r3, r2
 800671a:	edc3 7a00 	vstr	s15, [r3]
            if (alphaTemp[p] > 31)
 800671e:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8006722:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8006726:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	4413      	add	r3, r2
 800672e:	edd3 7a00 	vldr	s15, [r3]
 8006732:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8006736:	eef4 7ac7 	vcmpe.f32	s15, s14
 800673a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800673e:	dd17      	ble.n	8006770 <ExtractAlphaParameters+0x398>
            {
                alphaTemp[p] = alphaTemp[p] - 64;
 8006740:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8006744:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8006748:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	4413      	add	r3, r2
 8006750:	edd3 7a00 	vldr	s15, [r3]
 8006754:	ed9f 7acc 	vldr	s14, [pc, #816]	; 8006a88 <ExtractAlphaParameters+0x6b0>
 8006758:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800675c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8006760:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8006764:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	4413      	add	r3, r2
 800676c:	edc3 7a00 	vstr	s15, [r3]
            }
            alphaTemp[p] = alphaTemp[p]*(1 << accRemScale);
 8006770:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8006774:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8006778:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	4413      	add	r3, r2
 8006780:	ed93 7a00 	vldr	s14, [r3]
 8006784:	f897 3cf3 	ldrb.w	r3, [r7, #3315]	; 0xcf3
 8006788:	2201      	movs	r2, #1
 800678a:	fa02 f303 	lsl.w	r3, r2, r3
 800678e:	ee07 3a90 	vmov	s15, r3
 8006792:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800679a:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800679e:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80067a2:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	4413      	add	r3, r2
 80067aa:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = (alphaRef + (accRow[i] << accRowScale) + (accColumn[j] << accColumnScale) + alphaTemp[p]);
 80067ae:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 80067b8:	443b      	add	r3, r7
 80067ba:	f853 2c94 	ldr.w	r2, [r3, #-148]
 80067be:	f897 3cf1 	ldrb.w	r3, [r7, #3313]	; 0xcf1
 80067c2:	409a      	lsls	r2, r3
 80067c4:	f8d7 3cec 	ldr.w	r3, [r7, #3308]	; 0xcec
 80067c8:	441a      	add	r2, r3
 80067ca:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80067ce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80067d2:	f8d7 1d00 	ldr.w	r1, [r7, #3328]	; 0xd00
 80067d6:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80067da:	f897 3cf2 	ldrb.w	r3, [r7, #3314]	; 0xcf2
 80067de:	fa01 f303 	lsl.w	r3, r1, r3
 80067e2:	4413      	add	r3, r2
 80067e4:	ee07 3a90 	vmov	s15, r3
 80067e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80067ec:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80067f0:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80067f4:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	4413      	add	r3, r2
 80067fc:	edd3 7a00 	vldr	s15, [r3]
 8006800:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006804:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8006808:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 800680c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	4413      	add	r3, r2
 8006814:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = alphaTemp[p] / pow(2,(double)alphaScale);
 8006818:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800681c:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8006820:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	4413      	add	r3, r2
 8006828:	edd3 7a00 	vldr	s15, [r3]
 800682c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8006830:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	; 0xd1f
 8006834:	ee07 3a90 	vmov	s15, r3
 8006838:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800683c:	eeb0 1b47 	vmov.f64	d1, d7
 8006840:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8006844:	f013 ffe0 	bl	801a808 <pow>
 8006848:	eeb0 6b40 	vmov.f64	d6, d0
 800684c:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8006850:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006854:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8006858:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 800685c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	4413      	add	r3, r2
 8006864:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = alphaTemp[p] - mlx90640->tgc * (mlx90640->cpAlpha[0] + mlx90640->cpAlpha[1])/2;
 8006868:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800686c:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8006870:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	4413      	add	r3, r2
 8006878:	ed93 7a00 	vldr	s14, [r3]
 800687c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8006880:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	edd3 6a06 	vldr	s13, [r3, #24]
 800688a:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800688e:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006898:	ed93 6a94 	vldr	s12, [r3, #592]	; 0x250
 800689c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80068a0:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068aa:	edd3 7a95 	vldr	s15, [r3, #596]	; 0x254
 80068ae:	ee76 7a27 	vadd.f32	s15, s12, s15
 80068b2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80068b6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80068ba:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80068be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068c2:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80068c6:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80068ca:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	4413      	add	r3, r2
 80068d2:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = SCALEALPHA/alphaTemp[p];
 80068d6:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80068da:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80068de:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	4413      	add	r3, r2
 80068e6:	ed93 7a00 	vldr	s14, [r3]
 80068ea:	eddf 6a68 	vldr	s13, [pc, #416]	; 8006a8c <ExtractAlphaParameters+0x6b4>
 80068ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068f2:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80068f6:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80068fa:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	4413      	add	r3, r2
 8006902:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < 32; j ++)
 8006906:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 800690a:	3301      	adds	r3, #1
 800690c:	f8c7 3d00 	str.w	r3, [r7, #3328]	; 0xd00
 8006910:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8006914:	2b1f      	cmp	r3, #31
 8006916:	f77f aede 	ble.w	80066d6 <ExtractAlphaParameters+0x2fe>
    for(int i = 0; i < 24; i++)
 800691a:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 800691e:	3301      	adds	r3, #1
 8006920:	f8c7 3d04 	str.w	r3, [r7, #3332]	; 0xd04
 8006924:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8006928:	2b17      	cmp	r3, #23
 800692a:	f77f aed0 	ble.w	80066ce <ExtractAlphaParameters+0x2f6>
        }
    }
    
    temp = alphaTemp[0];
 800692e:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8006932:	f6a3 5314 	subw	r3, r3, #3348	; 0xd14
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 800693c:	6013      	str	r3, [r2, #0]
    for(int i = 1; i < 768; i++)
 800693e:	2301      	movs	r3, #1
 8006940:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 8006944:	e023      	b.n	800698e <ExtractAlphaParameters+0x5b6>
    {
        if (alphaTemp[i] > temp)
 8006946:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800694a:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 800694e:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	4413      	add	r3, r2
 8006956:	edd3 7a00 	vldr	s15, [r3]
 800695a:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 800695e:	ed93 7a00 	vldr	s14, [r3]
 8006962:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800696a:	d50b      	bpl.n	8006984 <ExtractAlphaParameters+0x5ac>
        {
            temp = alphaTemp[i];
 800696c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8006970:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8006974:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	4413      	add	r3, r2
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 8006982:	6013      	str	r3, [r2, #0]
    for(int i = 1; i < 768; i++)
 8006984:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8006988:	3301      	adds	r3, #1
 800698a:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 800698e:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8006992:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006996:	dbd6      	blt.n	8006946 <ExtractAlphaParameters+0x56e>
        }
    }
    
    alphaScale = 0;
 8006998:	2300      	movs	r3, #0
 800699a:	f887 3d1f 	strb.w	r3, [r7, #3359]	; 0xd1f
    while(temp < 32768)
 800699e:	e00e      	b.n	80069be <ExtractAlphaParameters+0x5e6>
    {
        temp = temp*2;
 80069a0:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 80069a4:	edd3 7a00 	vldr	s15, [r3]
 80069a8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80069ac:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 80069b0:	edc3 7a00 	vstr	s15, [r3]
        alphaScale = alphaScale + 1;
 80069b4:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	; 0xd1f
 80069b8:	3301      	adds	r3, #1
 80069ba:	f887 3d1f 	strb.w	r3, [r7, #3359]	; 0xd1f
    while(temp < 32768)
 80069be:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 80069c2:	edd3 7a00 	vldr	s15, [r3]
 80069c6:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8006a90 <ExtractAlphaParameters+0x6b8>
 80069ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80069ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069d2:	d4e5      	bmi.n	80069a0 <ExtractAlphaParameters+0x5c8>
    } 
    
    for(int i = 0; i < 768; i++)
 80069d4:	2300      	movs	r3, #0
 80069d6:	f8c7 3cf8 	str.w	r3, [r7, #3320]	; 0xcf8
 80069da:	e03f      	b.n	8006a5c <ExtractAlphaParameters+0x684>
    {
        temp = alphaTemp[i] * pow(2,(double)alphaScale);        
 80069dc:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80069e0:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80069e4:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	4413      	add	r3, r2
 80069ec:	edd3 7a00 	vldr	s15, [r3]
 80069f0:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80069f4:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	; 0xd1f
 80069f8:	ee07 3a90 	vmov	s15, r3
 80069fc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006a00:	eeb0 1b47 	vmov.f64	d1, d7
 8006a04:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8006a08:	f013 fefe 	bl	801a808 <pow>
 8006a0c:	eeb0 7b40 	vmov.f64	d7, d0
 8006a10:	ee28 7b07 	vmul.f64	d7, d8, d7
 8006a14:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006a18:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 8006a1c:	edc3 7a00 	vstr	s15, [r3]
        mlx90640->alpha[i] = (temp + 0.5f);        
 8006a20:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 8006a24:	edd3 7a00 	vldr	s15, [r3]
 8006a28:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006a2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006a30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a34:	ee17 3a90 	vmov	r3, s15
 8006a38:	b299      	uxth	r1, r3
 8006a3a:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8006a3e:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 8006a48:	3324      	adds	r3, #36	; 0x24
 8006a4a:	005b      	lsls	r3, r3, #1
 8006a4c:	4413      	add	r3, r2
 8006a4e:	460a      	mov	r2, r1
 8006a50:	805a      	strh	r2, [r3, #2]
    for(int i = 0; i < 768; i++)
 8006a52:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 8006a56:	3301      	adds	r3, #1
 8006a58:	f8c7 3cf8 	str.w	r3, [r7, #3320]	; 0xcf8
 8006a5c:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 8006a60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a64:	dbba      	blt.n	80069dc <ExtractAlphaParameters+0x604>
        
    } 
    
    mlx90640->alphaScale = alphaScale;      
 8006a66:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8006a6a:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f897 2d1f 	ldrb.w	r2, [r7, #3359]	; 0xd1f
 8006a74:	f883 264a 	strb.w	r2, [r3, #1610]	; 0x64a
   
}
 8006a78:	bf00      	nop
 8006a7a:	f507 6752 	add.w	r7, r7, #3360	; 0xd20
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	ecbd 8b02 	vpop	{d8}
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	42800000 	.word	0x42800000
 8006a8c:	358637bd 	.word	0x358637bd
 8006a90:	47000000 	.word	0x47000000

08006a94 <ExtractOffsetParameters>:

//------------------------------------------------------------------------------

void ExtractOffsetParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b0c5      	sub	sp, #276	; 0x114
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006a9e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006aa2:	6018      	str	r0, [r3, #0]
 8006aa4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006aa8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006aac:	6019      	str	r1, [r3, #0]
    int occRow[24];
    int occColumn[32];
    int p = 0;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    uint8_t occRowScale;
    uint8_t occColumnScale;
    uint8_t occRemScale;
    

    occRemScale = (eeData[16] & 0x000F);
 8006ab4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006ab8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	3320      	adds	r3, #32
 8006ac0:	881b      	ldrh	r3, [r3, #0]
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	f003 030f 	and.w	r3, r3, #15
 8006ac8:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
    occColumnScale = (eeData[16] & 0x00F0) >> 4;
 8006acc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006ad0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	3320      	adds	r3, #32
 8006ad8:	881b      	ldrh	r3, [r3, #0]
 8006ada:	111b      	asrs	r3, r3, #4
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	f003 030f 	and.w	r3, r3, #15
 8006ae2:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
    occRowScale = (eeData[16] & 0x0F00) >> 8;
 8006ae6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006aea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	3320      	adds	r3, #32
 8006af2:	881b      	ldrh	r3, [r3, #0]
 8006af4:	121b      	asrs	r3, r3, #8
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	f003 030f 	and.w	r3, r3, #15
 8006afc:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
    offsetRef = eeData[17];
 8006b00:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006b04:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	3322      	adds	r3, #34	; 0x22
 8006b0c:	881b      	ldrh	r3, [r3, #0]
 8006b0e:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
    if (offsetRef > 32767)
    {
        offsetRef = offsetRef - 65536;
    }
    
    for(int i = 0; i < 6; i++)
 8006b12:	2300      	movs	r3, #0
 8006b14:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006b18:	e062      	b.n	8006be0 <ExtractOffsetParameters+0x14c>
    {
        p = i * 4;
 8006b1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        occRow[p + 0] = (eeData[18 + i] & 0x000F);
 8006b24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b28:	3312      	adds	r3, #18
 8006b2a:	005b      	lsls	r3, r3, #1
 8006b2c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8006b30:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8006b34:	6812      	ldr	r2, [r2, #0]
 8006b36:	4413      	add	r3, r2
 8006b38:	881b      	ldrh	r3, [r3, #0]
 8006b3a:	f003 020f 	and.w	r2, r3, #15
 8006b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8006b48:	443b      	add	r3, r7
 8006b4a:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 1] = (eeData[18 + i] & 0x00F0) >> 4;
 8006b4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b52:	3312      	adds	r3, #18
 8006b54:	005b      	lsls	r3, r3, #1
 8006b56:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8006b5a:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8006b5e:	6812      	ldr	r2, [r2, #0]
 8006b60:	4413      	add	r3, r2
 8006b62:	881b      	ldrh	r3, [r3, #0]
 8006b64:	111a      	asrs	r2, r3, #4
 8006b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	f002 020f 	and.w	r2, r2, #15
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8006b76:	443b      	add	r3, r7
 8006b78:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 2] = (eeData[18 + i] & 0x0F00) >> 8;
 8006b7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b80:	3312      	adds	r3, #18
 8006b82:	005b      	lsls	r3, r3, #1
 8006b84:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8006b88:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8006b8c:	6812      	ldr	r2, [r2, #0]
 8006b8e:	4413      	add	r3, r2
 8006b90:	881b      	ldrh	r3, [r3, #0]
 8006b92:	121a      	asrs	r2, r3, #8
 8006b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b98:	3302      	adds	r3, #2
 8006b9a:	f002 020f 	and.w	r2, r2, #15
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8006ba4:	443b      	add	r3, r7
 8006ba6:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 3] = (eeData[18 + i] & 0xF000) >> 12;
 8006baa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bae:	3312      	adds	r3, #18
 8006bb0:	005b      	lsls	r3, r3, #1
 8006bb2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8006bb6:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8006bba:	6812      	ldr	r2, [r2, #0]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	881b      	ldrh	r3, [r3, #0]
 8006bc0:	0b1b      	lsrs	r3, r3, #12
 8006bc2:	b29a      	uxth	r2, r3
 8006bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bc8:	3303      	adds	r3, #3
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8006bd0:	443b      	add	r3, r7
 8006bd2:	f843 2c84 	str.w	r2, [r3, #-132]
    for(int i = 0; i < 6; i++)
 8006bd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bda:	3301      	adds	r3, #1
 8006bdc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006be0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006be4:	2b05      	cmp	r3, #5
 8006be6:	dd98      	ble.n	8006b1a <ExtractOffsetParameters+0x86>
    }
    
    for(int i = 0; i < 24; i++)
 8006be8:	2300      	movs	r3, #0
 8006bea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006bee:	e020      	b.n	8006c32 <ExtractOffsetParameters+0x19e>
    {
        if (occRow[i] > 7)
 8006bf0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8006bfa:	443b      	add	r3, r7
 8006bfc:	f853 3c84 	ldr.w	r3, [r3, #-132]
 8006c00:	2b07      	cmp	r3, #7
 8006c02:	dd11      	ble.n	8006c28 <ExtractOffsetParameters+0x194>
        {
            occRow[i] = occRow[i] - 16;
 8006c04:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8006c0e:	443b      	add	r3, r7
 8006c10:	f853 3c84 	ldr.w	r3, [r3, #-132]
 8006c14:	f1a3 0210 	sub.w	r2, r3, #16
 8006c18:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8006c22:	443b      	add	r3, r7
 8006c24:	f843 2c84 	str.w	r2, [r3, #-132]
    for(int i = 0; i < 24; i++)
 8006c28:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006c32:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c36:	2b17      	cmp	r3, #23
 8006c38:	ddda      	ble.n	8006bf0 <ExtractOffsetParameters+0x15c>
        }
    }
    
    for(int i = 0; i < 8; i++)
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006c40:	e062      	b.n	8006d08 <ExtractOffsetParameters+0x274>
    {
        p = i * 4;
 8006c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        occColumn[p + 0] = (eeData[24 + i] & 0x000F);
 8006c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c50:	3318      	adds	r3, #24
 8006c52:	005b      	lsls	r3, r3, #1
 8006c54:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8006c58:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8006c5c:	6812      	ldr	r2, [r2, #0]
 8006c5e:	4413      	add	r3, r2
 8006c60:	881b      	ldrh	r3, [r3, #0]
 8006c62:	f003 010f 	and.w	r1, r3, #15
 8006c66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006c6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c6e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8006c72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 1] = (eeData[24 + i] & 0x00F0) >> 4;
 8006c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c7a:	3318      	adds	r3, #24
 8006c7c:	005b      	lsls	r3, r3, #1
 8006c7e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8006c82:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8006c86:	6812      	ldr	r2, [r2, #0]
 8006c88:	4413      	add	r3, r2
 8006c8a:	881b      	ldrh	r3, [r3, #0]
 8006c8c:	111b      	asrs	r3, r3, #4
 8006c8e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8006c92:	3201      	adds	r2, #1
 8006c94:	f003 010f 	and.w	r1, r3, #15
 8006c98:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006c9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ca0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 2] = (eeData[24 + i] & 0x0F00) >> 8;
 8006ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ca8:	3318      	adds	r3, #24
 8006caa:	005b      	lsls	r3, r3, #1
 8006cac:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8006cb0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8006cb4:	6812      	ldr	r2, [r2, #0]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	881b      	ldrh	r3, [r3, #0]
 8006cba:	121b      	asrs	r3, r3, #8
 8006cbc:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8006cc0:	3202      	adds	r2, #2
 8006cc2:	f003 010f 	and.w	r1, r3, #15
 8006cc6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006cca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 3] = (eeData[24 + i] & 0xF000) >> 12;
 8006cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cd6:	3318      	adds	r3, #24
 8006cd8:	005b      	lsls	r3, r3, #1
 8006cda:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8006cde:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8006ce2:	6812      	ldr	r2, [r2, #0]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	881b      	ldrh	r3, [r3, #0]
 8006ce8:	0b1b      	lsrs	r3, r3, #12
 8006cea:	b299      	uxth	r1, r3
 8006cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cf0:	1cda      	adds	r2, r3, #3
 8006cf2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006cf6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 8; i++)
 8006cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d02:	3301      	adds	r3, #1
 8006d04:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d0c:	2b07      	cmp	r3, #7
 8006d0e:	dd98      	ble.n	8006c42 <ExtractOffsetParameters+0x1ae>
    }
    
    for(int i = 0; i < 32; i ++)
 8006d10:	2300      	movs	r3, #0
 8006d12:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006d16:	e020      	b.n	8006d5a <ExtractOffsetParameters+0x2c6>
    {
        if (occColumn[i] > 7)
 8006d18:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006d1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d20:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8006d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d28:	2b07      	cmp	r3, #7
 8006d2a:	dd11      	ble.n	8006d50 <ExtractOffsetParameters+0x2bc>
        {
            occColumn[i] = occColumn[i] - 16;
 8006d2c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006d30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d34:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8006d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d3c:	f1a3 0110 	sub.w	r1, r3, #16
 8006d40:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006d44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d48:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8006d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 32; i ++)
 8006d50:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006d54:	3301      	adds	r3, #1
 8006d56:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006d5a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006d5e:	2b1f      	cmp	r3, #31
 8006d60:	ddda      	ble.n	8006d18 <ExtractOffsetParameters+0x284>
        }
    }

    for(int i = 0; i < 24; i++)
 8006d62:	2300      	movs	r3, #0
 8006d64:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006d68:	e0c0      	b.n	8006eec <ExtractOffsetParameters+0x458>
    {
        for(int j = 0; j < 32; j ++)
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006d70:	e0b2      	b.n	8006ed8 <ExtractOffsetParameters+0x444>
        {
            p = 32 * i +j;
 8006d72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d76:	015b      	lsls	r3, r3, #5
 8006d78:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8006d7c:	4413      	add	r3, r2
 8006d7e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
            mlx90640->offset[p] = (eeData[64 + p] & 0xFC00) >> 10;
 8006d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d86:	3340      	adds	r3, #64	; 0x40
 8006d88:	005b      	lsls	r3, r3, #1
 8006d8a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8006d8e:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8006d92:	6812      	ldr	r2, [r2, #0]
 8006d94:	4413      	add	r3, r2
 8006d96:	881b      	ldrh	r3, [r3, #0]
 8006d98:	0a9b      	lsrs	r3, r3, #10
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	b219      	sxth	r1, r3
 8006d9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006da2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dac:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8006db0:	005b      	lsls	r3, r3, #1
 8006db2:	4413      	add	r3, r2
 8006db4:	460a      	mov	r2, r1
 8006db6:	809a      	strh	r2, [r3, #4]
            if (mlx90640->offset[p] > 31)
 8006db8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006dbc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dc6:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8006dca:	005b      	lsls	r3, r3, #1
 8006dcc:	4413      	add	r3, r2
 8006dce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006dd2:	2b1f      	cmp	r3, #31
 8006dd4:	dd1d      	ble.n	8006e12 <ExtractOffsetParameters+0x37e>
            {
                mlx90640->offset[p] = mlx90640->offset[p] - 64;
 8006dd6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006dda:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006de4:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8006de8:	005b      	lsls	r3, r3, #1
 8006dea:	4413      	add	r3, r2
 8006dec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	3b40      	subs	r3, #64	; 0x40
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	b219      	sxth	r1, r3
 8006df8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006dfc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e06:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8006e0a:	005b      	lsls	r3, r3, #1
 8006e0c:	4413      	add	r3, r2
 8006e0e:	460a      	mov	r2, r1
 8006e10:	809a      	strh	r2, [r3, #4]
            }
            mlx90640->offset[p] = mlx90640->offset[p]*(1 << occRemScale);
 8006e12:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e16:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e20:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8006e24:	005b      	lsls	r3, r3, #1
 8006e26:	4413      	add	r3, r2
 8006e28:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8006e32:	fa02 f303 	lsl.w	r3, r2, r3
 8006e36:	b219      	sxth	r1, r3
 8006e38:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e3c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e46:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8006e4a:	005b      	lsls	r3, r3, #1
 8006e4c:	4413      	add	r3, r2
 8006e4e:	460a      	mov	r2, r1
 8006e50:	809a      	strh	r2, [r3, #4]
            mlx90640->offset[p] = (offsetRef + (occRow[i] << occRowScale) + (occColumn[j] << occColumnScale) + mlx90640->offset[p]);
 8006e52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8006e5c:	443b      	add	r3, r7
 8006e5e:	f853 2c84 	ldr.w	r2, [r3, #-132]
 8006e62:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
 8006e66:	fa02 f303 	lsl.w	r3, r2, r3
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8006e70:	4413      	add	r3, r2
 8006e72:	b29a      	uxth	r2, r3
 8006e74:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e7c:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8006e80:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8006e84:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 8006e88:	fa01 f303 	lsl.w	r3, r1, r3
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	4413      	add	r3, r2
 8006e90:	b29a      	uxth	r2, r3
 8006e92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e96:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006e9a:	6819      	ldr	r1, [r3, #0]
 8006e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ea0:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8006ea4:	005b      	lsls	r3, r3, #1
 8006ea6:	440b      	add	r3, r1
 8006ea8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	4413      	add	r3, r2
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	b219      	sxth	r1, r3
 8006eb4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006eb8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ec2:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8006ec6:	005b      	lsls	r3, r3, #1
 8006ec8:	4413      	add	r3, r2
 8006eca:	460a      	mov	r2, r1
 8006ecc:	809a      	strh	r2, [r3, #4]
        for(int j = 0; j < 32; j ++)
 8006ece:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006ed8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006edc:	2b1f      	cmp	r3, #31
 8006ede:	f77f af48 	ble.w	8006d72 <ExtractOffsetParameters+0x2de>
    for(int i = 0; i < 24; i++)
 8006ee2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006eec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ef0:	2b17      	cmp	r3, #23
 8006ef2:	f77f af3a 	ble.w	8006d6a <ExtractOffsetParameters+0x2d6>
        }
    }
}
 8006ef6:	bf00      	nop
 8006ef8:	bf00      	nop
 8006efa:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr
	...

08006f08 <ExtractKtaPixelParameters>:

//------------------------------------------------------------------------------

void ExtractKtaPixelParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	ed2d 8b02 	vpush	{d8}
 8006f0e:	f6ad 4d38 	subw	sp, sp, #3128	; 0xc38
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8006f18:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8006f1c:	6018      	str	r0, [r3, #0]
 8006f1e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8006f22:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8006f26:	6019      	str	r1, [r3, #0]
    int p = 0;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
    uint8_t ktaScale2;
    uint8_t split;
    float ktaTemp[768];
    float temp;
    
    KtaRoCo = (eeData[54] & 0xFF00) >> 8;
 8006f2e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8006f32:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	336c      	adds	r3, #108	; 0x6c
 8006f3a:	881b      	ldrh	r3, [r3, #0]
 8006f3c:	0a1b      	lsrs	r3, r3, #8
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	f887 3c1b 	strb.w	r3, [r7, #3099]	; 0xc1b
    if (KtaRoCo > 127)
    {
        KtaRoCo = KtaRoCo - 256;
    }
    KtaRC[0] = KtaRoCo;
 8006f44:	f897 3c1b 	ldrb.w	r3, [r7, #3099]	; 0xc1b
 8006f48:	f887 3c10 	strb.w	r3, [r7, #3088]	; 0xc10
    
    KtaReCo = (eeData[54] & 0x00FF);
 8006f4c:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8006f50:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	336c      	adds	r3, #108	; 0x6c
 8006f58:	881b      	ldrh	r3, [r3, #0]
 8006f5a:	f887 3c1a 	strb.w	r3, [r7, #3098]	; 0xc1a
    if (KtaReCo > 127)
    {
        KtaReCo = KtaReCo - 256;
    }
    KtaRC[2] = KtaReCo;
 8006f5e:	f897 3c1a 	ldrb.w	r3, [r7, #3098]	; 0xc1a
 8006f62:	f887 3c12 	strb.w	r3, [r7, #3090]	; 0xc12
      
    KtaRoCe = (eeData[55] & 0xFF00) >> 8;
 8006f66:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8006f6a:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	336e      	adds	r3, #110	; 0x6e
 8006f72:	881b      	ldrh	r3, [r3, #0]
 8006f74:	0a1b      	lsrs	r3, r3, #8
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	f887 3c19 	strb.w	r3, [r7, #3097]	; 0xc19
    if (KtaRoCe > 127)
    {
        KtaRoCe = KtaRoCe - 256;
    }
    KtaRC[1] = KtaRoCe;
 8006f7c:	f897 3c19 	ldrb.w	r3, [r7, #3097]	; 0xc19
 8006f80:	f887 3c11 	strb.w	r3, [r7, #3089]	; 0xc11
      
    KtaReCe = (eeData[55] & 0x00FF);
 8006f84:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8006f88:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	336e      	adds	r3, #110	; 0x6e
 8006f90:	881b      	ldrh	r3, [r3, #0]
 8006f92:	f887 3c18 	strb.w	r3, [r7, #3096]	; 0xc18
    if (KtaReCe > 127)
    {
        KtaReCe = KtaReCe - 256;
    }
    KtaRC[3] = KtaReCe;
 8006f96:	f897 3c18 	ldrb.w	r3, [r7, #3096]	; 0xc18
 8006f9a:	f887 3c13 	strb.w	r3, [r7, #3091]	; 0xc13
  
    ktaScale1 = ((eeData[56] & 0x00F0) >> 4) + 8;
 8006f9e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8006fa2:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	3370      	adds	r3, #112	; 0x70
 8006faa:	881b      	ldrh	r3, [r3, #0]
 8006fac:	111b      	asrs	r3, r3, #4
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	f003 030f 	and.w	r3, r3, #15
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	3308      	adds	r3, #8
 8006fb8:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
    ktaScale2 = (eeData[56] & 0x000F);
 8006fbc:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8006fc0:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	3370      	adds	r3, #112	; 0x70
 8006fc8:	881b      	ldrh	r3, [r3, #0]
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	f003 030f 	and.w	r3, r3, #15
 8006fd0:	f887 3c17 	strb.w	r3, [r7, #3095]	; 0xc17

    for(int i = 0; i < 24; i++)
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	f8c7 3c2c 	str.w	r3, [r7, #3116]	; 0xc2c
 8006fda:	e0e6      	b.n	80071aa <ExtractKtaPixelParameters+0x2a2>
    {
        for(int j = 0; j < 32; j ++)
 8006fdc:	2300      	movs	r3, #0
 8006fde:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
 8006fe2:	e0d8      	b.n	8007196 <ExtractKtaPixelParameters+0x28e>
        {
            p = 32 * i +j;
 8006fe4:	f8d7 3c2c 	ldr.w	r3, [r7, #3116]	; 0xc2c
 8006fe8:	015b      	lsls	r3, r3, #5
 8006fea:	f8d7 2c28 	ldr.w	r2, [r7, #3112]	; 0xc28
 8006fee:	4413      	add	r3, r2
 8006ff0:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
            split = 2*(p/32 - (p/64)*2) + p%2;
 8006ff4:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	da00      	bge.n	8006ffe <ExtractKtaPixelParameters+0xf6>
 8006ffc:	331f      	adds	r3, #31
 8006ffe:	115b      	asrs	r3, r3, #5
 8007000:	461a      	mov	r2, r3
 8007002:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8007006:	2b00      	cmp	r3, #0
 8007008:	da00      	bge.n	800700c <ExtractKtaPixelParameters+0x104>
 800700a:	333f      	adds	r3, #63	; 0x3f
 800700c:	119b      	asrs	r3, r3, #6
 800700e:	005b      	lsls	r3, r3, #1
 8007010:	1ad3      	subs	r3, r2, r3
 8007012:	b2db      	uxtb	r3, r3
 8007014:	005b      	lsls	r3, r3, #1
 8007016:	b2da      	uxtb	r2, r3
 8007018:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 800701c:	2b00      	cmp	r3, #0
 800701e:	f003 0301 	and.w	r3, r3, #1
 8007022:	bfb8      	it	lt
 8007024:	425b      	neglt	r3, r3
 8007026:	b2db      	uxtb	r3, r3
 8007028:	4413      	add	r3, r2
 800702a:	f887 3c16 	strb.w	r3, [r7, #3094]	; 0xc16
            ktaTemp[p] = (eeData[64 + p] & 0x000E) >> 1;
 800702e:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8007032:	3340      	adds	r3, #64	; 0x40
 8007034:	005b      	lsls	r3, r3, #1
 8007036:	f607 4238 	addw	r2, r7, #3128	; 0xc38
 800703a:	f6a2 422c 	subw	r2, r2, #3116	; 0xc2c
 800703e:	6812      	ldr	r2, [r2, #0]
 8007040:	4413      	add	r3, r2
 8007042:	881b      	ldrh	r3, [r3, #0]
 8007044:	105b      	asrs	r3, r3, #1
 8007046:	f003 0307 	and.w	r3, r3, #7
 800704a:	ee07 3a90 	vmov	s15, r3
 800704e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007052:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8007056:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 800705a:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	4413      	add	r3, r2
 8007062:	edc3 7a00 	vstr	s15, [r3]
            if (ktaTemp[p] > 3)
 8007066:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800706a:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 800706e:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	4413      	add	r3, r2
 8007076:	edd3 7a00 	vldr	s15, [r3]
 800707a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800707e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007086:	dd17      	ble.n	80070b8 <ExtractKtaPixelParameters+0x1b0>
            {
                ktaTemp[p] = ktaTemp[p] - 8;
 8007088:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800708c:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8007090:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	4413      	add	r3, r2
 8007098:	edd3 7a00 	vldr	s15, [r3]
 800709c:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80070a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80070a4:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80070a8:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80070ac:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	4413      	add	r3, r2
 80070b4:	edc3 7a00 	vstr	s15, [r3]
            }
            ktaTemp[p] = ktaTemp[p] * (1 << ktaScale2);
 80070b8:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80070bc:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80070c0:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	4413      	add	r3, r2
 80070c8:	ed93 7a00 	vldr	s14, [r3]
 80070cc:	f897 3c17 	ldrb.w	r3, [r7, #3095]	; 0xc17
 80070d0:	2201      	movs	r2, #1
 80070d2:	fa02 f303 	lsl.w	r3, r2, r3
 80070d6:	ee07 3a90 	vmov	s15, r3
 80070da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80070de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070e2:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80070e6:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80070ea:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	4413      	add	r3, r2
 80070f2:	edc3 7a00 	vstr	s15, [r3]
            ktaTemp[p] = KtaRC[split] + ktaTemp[p];
 80070f6:	f897 3c16 	ldrb.w	r3, [r7, #3094]	; 0xc16
 80070fa:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 80070fe:	f107 0208 	add.w	r2, r7, #8
 8007102:	4413      	add	r3, r2
 8007104:	f913 3c28 	ldrsb.w	r3, [r3, #-40]
 8007108:	ee07 3a90 	vmov	s15, r3
 800710c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007110:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8007114:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8007118:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	4413      	add	r3, r2
 8007120:	edd3 7a00 	vldr	s15, [r3]
 8007124:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007128:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800712c:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8007130:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	4413      	add	r3, r2
 8007138:	edc3 7a00 	vstr	s15, [r3]
            ktaTemp[p] = ktaTemp[p] / pow(2,(double)ktaScale1);
 800713c:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8007140:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8007144:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	4413      	add	r3, r2
 800714c:	edd3 7a00 	vldr	s15, [r3]
 8007150:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8007154:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 8007158:	ee07 3a90 	vmov	s15, r3
 800715c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007160:	eeb0 1b47 	vmov.f64	d1, d7
 8007164:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8007168:	f013 fb4e 	bl	801a808 <pow>
 800716c:	eeb0 6b40 	vmov.f64	d6, d0
 8007170:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8007174:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007178:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800717c:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8007180:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	4413      	add	r3, r2
 8007188:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < 32; j ++)
 800718c:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 8007190:	3301      	adds	r3, #1
 8007192:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
 8007196:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 800719a:	2b1f      	cmp	r3, #31
 800719c:	f77f af22 	ble.w	8006fe4 <ExtractKtaPixelParameters+0xdc>
    for(int i = 0; i < 24; i++)
 80071a0:	f8d7 3c2c 	ldr.w	r3, [r7, #3116]	; 0xc2c
 80071a4:	3301      	adds	r3, #1
 80071a6:	f8c7 3c2c 	str.w	r3, [r7, #3116]	; 0xc2c
 80071aa:	f8d7 3c2c 	ldr.w	r3, [r7, #3116]	; 0xc2c
 80071ae:	2b17      	cmp	r3, #23
 80071b0:	f77f af14 	ble.w	8006fdc <ExtractKtaPixelParameters+0xd4>
            //ktaTemp[p] = ktaTemp[p] * mlx90640->offset[p];
        }
    }
    
    temp = fabs(ktaTemp[0]);
 80071b4:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80071b8:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 80071bc:	edd3 7a00 	vldr	s15, [r3]
 80071c0:	eef0 7ae7 	vabs.f32	s15, s15
 80071c4:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80071c8:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < 768; i++)
 80071cc:	2301      	movs	r3, #1
 80071ce:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 80071d2:	e029      	b.n	8007228 <ExtractKtaPixelParameters+0x320>
    {
        if (fabs(ktaTemp[i]) > temp)
 80071d4:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80071d8:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80071dc:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	4413      	add	r3, r2
 80071e4:	edd3 7a00 	vldr	s15, [r3]
 80071e8:	eef0 7ae7 	vabs.f32	s15, s15
 80071ec:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80071f0:	ed93 7a00 	vldr	s14, [r3]
 80071f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80071f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071fc:	d50f      	bpl.n	800721e <ExtractKtaPixelParameters+0x316>
        {
            temp = fabs(ktaTemp[i]);
 80071fe:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8007202:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8007206:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	4413      	add	r3, r2
 800720e:	edd3 7a00 	vldr	s15, [r3]
 8007212:	eef0 7ae7 	vabs.f32	s15, s15
 8007216:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 800721a:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < 768; i++)
 800721e:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 8007222:	3301      	adds	r3, #1
 8007224:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 8007228:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 800722c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007230:	dbd0      	blt.n	80071d4 <ExtractKtaPixelParameters+0x2cc>
        }
    }
    
    ktaScale1 = 0;
 8007232:	2300      	movs	r3, #0
 8007234:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
    while(temp < 64)
 8007238:	e00e      	b.n	8007258 <ExtractKtaPixelParameters+0x350>
    {
        temp = temp*2;
 800723a:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 800723e:	edd3 7a00 	vldr	s15, [r3]
 8007242:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007246:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 800724a:	edc3 7a00 	vstr	s15, [r3]
        ktaScale1 = ktaScale1 + 1;
 800724e:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 8007252:	3301      	adds	r3, #1
 8007254:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
    while(temp < 64)
 8007258:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 800725c:	edd3 7a00 	vldr	s15, [r3]
 8007260:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800736c <ExtractKtaPixelParameters+0x464>
 8007264:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800726c:	d4e5      	bmi.n	800723a <ExtractKtaPixelParameters+0x332>
    }    
     
    for(int i = 0; i < 768; i++)
 800726e:	2300      	movs	r3, #0
 8007270:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 8007274:	e064      	b.n	8007340 <ExtractKtaPixelParameters+0x438>
    {
        temp = ktaTemp[i] * pow(2,(double)ktaScale1);
 8007276:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800727a:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 800727e:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	4413      	add	r3, r2
 8007286:	edd3 7a00 	vldr	s15, [r3]
 800728a:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800728e:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 8007292:	ee07 3a90 	vmov	s15, r3
 8007296:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800729a:	eeb0 1b47 	vmov.f64	d1, d7
 800729e:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80072a2:	f013 fab1 	bl	801a808 <pow>
 80072a6:	eeb0 7b40 	vmov.f64	d7, d0
 80072aa:	ee28 7b07 	vmul.f64	d7, d8, d7
 80072ae:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80072b2:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80072b6:	edc3 7a00 	vstr	s15, [r3]
        if (temp < 0)
 80072ba:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80072be:	edd3 7a00 	vldr	s15, [r3]
 80072c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80072c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072ca:	d51a      	bpl.n	8007302 <ExtractKtaPixelParameters+0x3fa>
        {
            mlx90640->kta[i] = (temp - 0.5f);
 80072cc:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80072d0:	edd3 7a00 	vldr	s15, [r3]
 80072d4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80072d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80072dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80072e0:	edc7 7a01 	vstr	s15, [r7, #4]
 80072e4:	793b      	ldrb	r3, [r7, #4]
 80072e6:	b259      	sxtb	r1, r3
 80072e8:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80072ec:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 80072f6:	4413      	add	r3, r2
 80072f8:	f603 434c 	addw	r3, r3, #3148	; 0xc4c
 80072fc:	460a      	mov	r2, r1
 80072fe:	701a      	strb	r2, [r3, #0]
 8007300:	e019      	b.n	8007336 <ExtractKtaPixelParameters+0x42e>
        }
        else
        {
            mlx90640->kta[i] = (temp + 0.5f);
 8007302:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8007306:	edd3 7a00 	vldr	s15, [r3]
 800730a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800730e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007312:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007316:	edc7 7a01 	vstr	s15, [r7, #4]
 800731a:	793b      	ldrb	r3, [r7, #4]
 800731c:	b259      	sxtb	r1, r3
 800731e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8007322:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 800732c:	4413      	add	r3, r2
 800732e:	f603 434c 	addw	r3, r3, #3148	; 0xc4c
 8007332:	460a      	mov	r2, r1
 8007334:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 768; i++)
 8007336:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 800733a:	3301      	adds	r3, #1
 800733c:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 8007340:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8007344:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007348:	db95      	blt.n	8007276 <ExtractKtaPixelParameters+0x36e>
        }        
        
    } 
    
    mlx90640->ktaScale = ktaScale1;           
 800734a:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800734e:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f897 2c37 	ldrb.w	r2, [r7, #3127]	; 0xc37
 8007358:	f883 2f4c 	strb.w	r2, [r3, #3916]	; 0xf4c
}
 800735c:	bf00      	nop
 800735e:	f607 4738 	addw	r7, r7, #3128	; 0xc38
 8007362:	46bd      	mov	sp, r7
 8007364:	ecbd 8b02 	vpop	{d8}
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	42800000 	.word	0x42800000

08007370 <ExtractKvPixelParameters>:


//------------------------------------------------------------------------------

void ExtractKvPixelParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	ed2d 8b02 	vpush	{d8}
 8007376:	f6ad 4d38 	subw	sp, sp, #3128	; 0xc38
 800737a:	af00      	add	r7, sp, #0
 800737c:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8007380:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8007384:	6018      	str	r0, [r3, #0]
 8007386:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800738a:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 800738e:	6019      	str	r1, [r3, #0]
    int p = 0;
 8007390:	2300      	movs	r3, #0
 8007392:	f8c7 3c18 	str.w	r3, [r7, #3096]	; 0xc18
    uint8_t kvScale;
    uint8_t split;
    float kvTemp[768];
    float temp;

    KvRoCo = (eeData[52] & 0xF000) >> 12;
 8007396:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800739a:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	3368      	adds	r3, #104	; 0x68
 80073a2:	881b      	ldrh	r3, [r3, #0]
 80073a4:	0b1b      	lsrs	r3, r3, #12
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
    if (KvRoCo > 7)
 80073ac:	f997 3c37 	ldrsb.w	r3, [r7, #3127]	; 0xc37
 80073b0:	2b07      	cmp	r3, #7
 80073b2:	dd05      	ble.n	80073c0 <ExtractKvPixelParameters+0x50>
    {
        KvRoCo = KvRoCo - 16;
 80073b4:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 80073b8:	3b10      	subs	r3, #16
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	f887 3c37 	strb.w	r3, [r7, #3127]	; 0xc37
    }
    KvT[0] = KvRoCo;
 80073c0:	f897 3c37 	ldrb.w	r3, [r7, #3127]	; 0xc37
 80073c4:	f887 3c10 	strb.w	r3, [r7, #3088]	; 0xc10
    
    KvReCo = (eeData[52] & 0x0F00) >> 8;
 80073c8:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80073cc:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	3368      	adds	r3, #104	; 0x68
 80073d4:	881b      	ldrh	r3, [r3, #0]
 80073d6:	121b      	asrs	r3, r3, #8
 80073d8:	b25b      	sxtb	r3, r3
 80073da:	f003 030f 	and.w	r3, r3, #15
 80073de:	f887 3c35 	strb.w	r3, [r7, #3125]	; 0xc35
    if (KvReCo > 7)
 80073e2:	f997 3c35 	ldrsb.w	r3, [r7, #3125]	; 0xc35
 80073e6:	2b07      	cmp	r3, #7
 80073e8:	dd05      	ble.n	80073f6 <ExtractKvPixelParameters+0x86>
    {
        KvReCo = KvReCo - 16;
 80073ea:	f897 3c35 	ldrb.w	r3, [r7, #3125]	; 0xc35
 80073ee:	3b10      	subs	r3, #16
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	f887 3c35 	strb.w	r3, [r7, #3125]	; 0xc35
    }
    KvT[2] = KvReCo;
 80073f6:	f897 3c35 	ldrb.w	r3, [r7, #3125]	; 0xc35
 80073fa:	f887 3c12 	strb.w	r3, [r7, #3090]	; 0xc12
      
    KvRoCe = (eeData[52] & 0x00F0) >> 4;
 80073fe:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8007402:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	3368      	adds	r3, #104	; 0x68
 800740a:	881b      	ldrh	r3, [r3, #0]
 800740c:	111b      	asrs	r3, r3, #4
 800740e:	b25b      	sxtb	r3, r3
 8007410:	f003 030f 	and.w	r3, r3, #15
 8007414:	f887 3c36 	strb.w	r3, [r7, #3126]	; 0xc36
    if (KvRoCe > 7)
 8007418:	f997 3c36 	ldrsb.w	r3, [r7, #3126]	; 0xc36
 800741c:	2b07      	cmp	r3, #7
 800741e:	dd05      	ble.n	800742c <ExtractKvPixelParameters+0xbc>
    {
        KvRoCe = KvRoCe - 16;
 8007420:	f897 3c36 	ldrb.w	r3, [r7, #3126]	; 0xc36
 8007424:	3b10      	subs	r3, #16
 8007426:	b2db      	uxtb	r3, r3
 8007428:	f887 3c36 	strb.w	r3, [r7, #3126]	; 0xc36
    }
    KvT[1] = KvRoCe;
 800742c:	f897 3c36 	ldrb.w	r3, [r7, #3126]	; 0xc36
 8007430:	f887 3c11 	strb.w	r3, [r7, #3089]	; 0xc11
      
    KvReCe = (eeData[52] & 0x000F);
 8007434:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8007438:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	3368      	adds	r3, #104	; 0x68
 8007440:	881b      	ldrh	r3, [r3, #0]
 8007442:	b25b      	sxtb	r3, r3
 8007444:	f003 030f 	and.w	r3, r3, #15
 8007448:	f887 3c34 	strb.w	r3, [r7, #3124]	; 0xc34
    if (KvReCe > 7)
 800744c:	f997 3c34 	ldrsb.w	r3, [r7, #3124]	; 0xc34
 8007450:	2b07      	cmp	r3, #7
 8007452:	dd05      	ble.n	8007460 <ExtractKvPixelParameters+0xf0>
    {
        KvReCe = KvReCe - 16;
 8007454:	f897 3c34 	ldrb.w	r3, [r7, #3124]	; 0xc34
 8007458:	3b10      	subs	r3, #16
 800745a:	b2db      	uxtb	r3, r3
 800745c:	f887 3c34 	strb.w	r3, [r7, #3124]	; 0xc34
    }
    KvT[3] = KvReCe;
 8007460:	f897 3c34 	ldrb.w	r3, [r7, #3124]	; 0xc34
 8007464:	f887 3c13 	strb.w	r3, [r7, #3091]	; 0xc13
  
    kvScale = (eeData[56] & 0x0F00) >> 8;
 8007468:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800746c:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	3370      	adds	r3, #112	; 0x70
 8007474:	881b      	ldrh	r3, [r3, #0]
 8007476:	121b      	asrs	r3, r3, #8
 8007478:	b2db      	uxtb	r3, r3
 800747a:	f003 030f 	and.w	r3, r3, #15
 800747e:	f887 3c33 	strb.w	r3, [r7, #3123]	; 0xc33


    for(int i = 0; i < 24; i++)
 8007482:	2300      	movs	r3, #0
 8007484:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
 8007488:	e075      	b.n	8007576 <ExtractKvPixelParameters+0x206>
    {
        for(int j = 0; j < 32; j ++)
 800748a:	2300      	movs	r3, #0
 800748c:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 8007490:	e068      	b.n	8007564 <ExtractKvPixelParameters+0x1f4>
        {
            p = 32 * i +j;
 8007492:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 8007496:	015b      	lsls	r3, r3, #5
 8007498:	f8d7 2c24 	ldr.w	r2, [r7, #3108]	; 0xc24
 800749c:	4413      	add	r3, r2
 800749e:	f8c7 3c18 	str.w	r3, [r7, #3096]	; 0xc18
            split = 2*(p/32 - (p/64)*2) + p%2;
 80074a2:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	da00      	bge.n	80074ac <ExtractKvPixelParameters+0x13c>
 80074aa:	331f      	adds	r3, #31
 80074ac:	115b      	asrs	r3, r3, #5
 80074ae:	461a      	mov	r2, r3
 80074b0:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	da00      	bge.n	80074ba <ExtractKvPixelParameters+0x14a>
 80074b8:	333f      	adds	r3, #63	; 0x3f
 80074ba:	119b      	asrs	r3, r3, #6
 80074bc:	005b      	lsls	r3, r3, #1
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	005b      	lsls	r3, r3, #1
 80074c4:	b2da      	uxtb	r2, r3
 80074c6:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	f003 0301 	and.w	r3, r3, #1
 80074d0:	bfb8      	it	lt
 80074d2:	425b      	neglt	r3, r3
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	4413      	add	r3, r2
 80074d8:	f887 3c17 	strb.w	r3, [r7, #3095]	; 0xc17
            kvTemp[p] = KvT[split];
 80074dc:	f897 3c17 	ldrb.w	r3, [r7, #3095]	; 0xc17
 80074e0:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 80074e4:	f107 0208 	add.w	r2, r7, #8
 80074e8:	4413      	add	r3, r2
 80074ea:	f913 3c28 	ldrsb.w	r3, [r3, #-40]
 80074ee:	ee07 3a90 	vmov	s15, r3
 80074f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074f6:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80074fa:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80074fe:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	4413      	add	r3, r2
 8007506:	edc3 7a00 	vstr	s15, [r3]
            kvTemp[p] = kvTemp[p] / pow(2,(double)kvScale);
 800750a:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800750e:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8007512:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8007516:	009b      	lsls	r3, r3, #2
 8007518:	4413      	add	r3, r2
 800751a:	edd3 7a00 	vldr	s15, [r3]
 800751e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8007522:	f897 3c33 	ldrb.w	r3, [r7, #3123]	; 0xc33
 8007526:	ee07 3a90 	vmov	s15, r3
 800752a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800752e:	eeb0 1b47 	vmov.f64	d1, d7
 8007532:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8007536:	f013 f967 	bl	801a808 <pow>
 800753a:	eeb0 6b40 	vmov.f64	d6, d0
 800753e:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8007542:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007546:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800754a:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 800754e:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	4413      	add	r3, r2
 8007556:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < 32; j ++)
 800755a:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 800755e:	3301      	adds	r3, #1
 8007560:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 8007564:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 8007568:	2b1f      	cmp	r3, #31
 800756a:	dd92      	ble.n	8007492 <ExtractKvPixelParameters+0x122>
    for(int i = 0; i < 24; i++)
 800756c:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 8007570:	3301      	adds	r3, #1
 8007572:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
 8007576:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 800757a:	2b17      	cmp	r3, #23
 800757c:	dd85      	ble.n	800748a <ExtractKvPixelParameters+0x11a>
            //kvTemp[p] = kvTemp[p] * mlx90640->offset[p];
        }
    }
    
    temp = fabs(kvTemp[0]);
 800757e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8007582:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8007586:	edd3 7a00 	vldr	s15, [r3]
 800758a:	eef0 7ae7 	vabs.f32	s15, s15
 800758e:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8007592:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < 768; i++)
 8007596:	2301      	movs	r3, #1
 8007598:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 800759c:	e029      	b.n	80075f2 <ExtractKvPixelParameters+0x282>
    {
        if (fabs(kvTemp[i]) > temp)
 800759e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80075a2:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80075a6:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	4413      	add	r3, r2
 80075ae:	edd3 7a00 	vldr	s15, [r3]
 80075b2:	eef0 7ae7 	vabs.f32	s15, s15
 80075b6:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 80075ba:	ed93 7a00 	vldr	s14, [r3]
 80075be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80075c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075c6:	d50f      	bpl.n	80075e8 <ExtractKvPixelParameters+0x278>
        {
            temp = fabs(kvTemp[i]);
 80075c8:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80075cc:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80075d0:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	4413      	add	r3, r2
 80075d8:	edd3 7a00 	vldr	s15, [r3]
 80075dc:	eef0 7ae7 	vabs.f32	s15, s15
 80075e0:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 80075e4:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < 768; i++)
 80075e8:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 80075ec:	3301      	adds	r3, #1
 80075ee:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 80075f2:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 80075f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075fa:	dbd0      	blt.n	800759e <ExtractKvPixelParameters+0x22e>
        }
    }
    
    kvScale = 0;
 80075fc:	2300      	movs	r3, #0
 80075fe:	f887 3c33 	strb.w	r3, [r7, #3123]	; 0xc33
    while(temp < 64)
 8007602:	e00e      	b.n	8007622 <ExtractKvPixelParameters+0x2b2>
    {
        temp = temp*2;
 8007604:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8007608:	edd3 7a00 	vldr	s15, [r3]
 800760c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007610:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8007614:	edc3 7a00 	vstr	s15, [r3]
        kvScale = kvScale + 1;
 8007618:	f897 3c33 	ldrb.w	r3, [r7, #3123]	; 0xc33
 800761c:	3301      	adds	r3, #1
 800761e:	f887 3c33 	strb.w	r3, [r7, #3123]	; 0xc33
    while(temp < 64)
 8007622:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8007626:	edd3 7a00 	vldr	s15, [r3]
 800762a:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800773c <ExtractKvPixelParameters+0x3cc>
 800762e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007636:	d4e5      	bmi.n	8007604 <ExtractKvPixelParameters+0x294>
    }    
     
    for(int i = 0; i < 768; i++)
 8007638:	2300      	movs	r3, #0
 800763a:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
 800763e:	e064      	b.n	800770a <ExtractKvPixelParameters+0x39a>
    {
        temp = kvTemp[i] * pow(2,(double)kvScale);
 8007640:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8007644:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8007648:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	4413      	add	r3, r2
 8007650:	edd3 7a00 	vldr	s15, [r3]
 8007654:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8007658:	f897 3c33 	ldrb.w	r3, [r7, #3123]	; 0xc33
 800765c:	ee07 3a90 	vmov	s15, r3
 8007660:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007664:	eeb0 1b47 	vmov.f64	d1, d7
 8007668:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 800766c:	f013 f8cc 	bl	801a808 <pow>
 8007670:	eeb0 7b40 	vmov.f64	d7, d0
 8007674:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007678:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800767c:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8007680:	edc3 7a00 	vstr	s15, [r3]
        if (temp < 0)
 8007684:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 8007688:	edd3 7a00 	vldr	s15, [r3]
 800768c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007694:	d51a      	bpl.n	80076cc <ExtractKvPixelParameters+0x35c>
        {
            mlx90640->kv[i] = (temp - 0.5f);
 8007696:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 800769a:	edd3 7a00 	vldr	s15, [r3]
 800769e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80076a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80076a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80076aa:	edc7 7a01 	vstr	s15, [r7, #4]
 80076ae:	793b      	ldrb	r3, [r7, #4]
 80076b0:	b259      	sxtb	r1, r3
 80076b2:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80076b6:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80076c0:	4413      	add	r3, r2
 80076c2:	f603 734d 	addw	r3, r3, #3917	; 0xf4d
 80076c6:	460a      	mov	r2, r1
 80076c8:	701a      	strb	r2, [r3, #0]
 80076ca:	e019      	b.n	8007700 <ExtractKvPixelParameters+0x390>
        }
        else
        {
            mlx90640->kv[i] = (temp + 0.5f);
 80076cc:	f607 432c 	addw	r3, r7, #3116	; 0xc2c
 80076d0:	edd3 7a00 	vldr	s15, [r3]
 80076d4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80076d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80076dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80076e0:	edc7 7a01 	vstr	s15, [r7, #4]
 80076e4:	793b      	ldrb	r3, [r7, #4]
 80076e6:	b259      	sxtb	r1, r3
 80076e8:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80076ec:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 80076f6:	4413      	add	r3, r2
 80076f8:	f603 734d 	addw	r3, r3, #3917	; 0xf4d
 80076fc:	460a      	mov	r2, r1
 80076fe:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 768; i++)
 8007700:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8007704:	3301      	adds	r3, #1
 8007706:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
 800770a:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 800770e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007712:	db95      	blt.n	8007640 <ExtractKvPixelParameters+0x2d0>
        }        
        
    } 
    
    mlx90640->kvScale = kvScale;        
 8007714:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8007718:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007722:	461a      	mov	r2, r3
 8007724:	f897 3c33 	ldrb.w	r3, [r7, #3123]	; 0xc33
 8007728:	f882 324d 	strb.w	r3, [r2, #589]	; 0x24d
}
 800772c:	bf00      	nop
 800772e:	f607 4738 	addw	r7, r7, #3128	; 0xc38
 8007732:	46bd      	mov	sp, r7
 8007734:	ecbd 8b02 	vpop	{d8}
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	42800000 	.word	0x42800000

08007740 <ExtractCPParameters>:

//------------------------------------------------------------------------------

void ExtractCPParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	ed2d 8b02 	vpush	{d8}
 8007746:	b088      	sub	sp, #32
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
    float cpKta;
    uint8_t alphaScale;
    uint8_t ktaScale1;
    uint8_t kvScale;

    alphaScale = ((eeData[32] & 0xF000) >> 12) + 27;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	3340      	adds	r3, #64	; 0x40
 8007752:	881b      	ldrh	r3, [r3, #0]
 8007754:	0b1b      	lsrs	r3, r3, #12
 8007756:	b29b      	uxth	r3, r3
 8007758:	b2db      	uxtb	r3, r3
 800775a:	331b      	adds	r3, #27
 800775c:	75fb      	strb	r3, [r7, #23]
    
    offsetSP[0] = (eeData[58] & 0x03FF);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	3374      	adds	r3, #116	; 0x74
 8007762:	881b      	ldrh	r3, [r3, #0]
 8007764:	b21b      	sxth	r3, r3
 8007766:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800776a:	b21b      	sxth	r3, r3
 800776c:	813b      	strh	r3, [r7, #8]
    if (offsetSP[0] > 511)
 800776e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007772:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007776:	db07      	blt.n	8007788 <ExtractCPParameters+0x48>
    {
        offsetSP[0] = offsetSP[0] - 1024;
 8007778:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800777c:	b29b      	uxth	r3, r3
 800777e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8007782:	b29b      	uxth	r3, r3
 8007784:	b21b      	sxth	r3, r3
 8007786:	813b      	strh	r3, [r7, #8]
    }
    
    offsetSP[1] = (eeData[58] & 0xFC00) >> 10;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	3374      	adds	r3, #116	; 0x74
 800778c:	881b      	ldrh	r3, [r3, #0]
 800778e:	0a9b      	lsrs	r3, r3, #10
 8007790:	b29b      	uxth	r3, r3
 8007792:	b21b      	sxth	r3, r3
 8007794:	817b      	strh	r3, [r7, #10]
    if (offsetSP[1] > 31)
 8007796:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800779a:	2b1f      	cmp	r3, #31
 800779c:	dd06      	ble.n	80077ac <ExtractCPParameters+0x6c>
    {
        offsetSP[1] = offsetSP[1] - 64;
 800779e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	3b40      	subs	r3, #64	; 0x40
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	b21b      	sxth	r3, r3
 80077aa:	817b      	strh	r3, [r7, #10]
    }
    offsetSP[1] = offsetSP[1] + offsetSP[0]; 
 80077ac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80077b0:	b29a      	uxth	r2, r3
 80077b2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	4413      	add	r3, r2
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	b21b      	sxth	r3, r3
 80077be:	817b      	strh	r3, [r7, #10]
    
    alphaSP[0] = (eeData[57] & 0x03FF);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	3372      	adds	r3, #114	; 0x72
 80077c4:	881b      	ldrh	r3, [r3, #0]
 80077c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077ca:	ee07 3a90 	vmov	s15, r3
 80077ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80077d2:	edc7 7a03 	vstr	s15, [r7, #12]
    if (alphaSP[0] > 511)
 80077d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80077da:	ed9f 7a75 	vldr	s14, [pc, #468]	; 80079b0 <ExtractCPParameters+0x270>
 80077de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077e6:	dd07      	ble.n	80077f8 <ExtractCPParameters+0xb8>
    {
        alphaSP[0] = alphaSP[0] - 1024;
 80077e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80077ec:	ed9f 7a71 	vldr	s14, [pc, #452]	; 80079b4 <ExtractCPParameters+0x274>
 80077f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80077f4:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    alphaSP[0] = alphaSP[0] /  pow(2,(double)alphaScale);
 80077f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80077fc:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8007800:	7dfb      	ldrb	r3, [r7, #23]
 8007802:	ee07 3a90 	vmov	s15, r3
 8007806:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800780a:	eeb0 1b47 	vmov.f64	d1, d7
 800780e:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8007812:	f012 fff9 	bl	801a808 <pow>
 8007816:	eeb0 6b40 	vmov.f64	d6, d0
 800781a:	ee88 7b06 	vdiv.f64	d7, d8, d6
 800781e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007822:	edc7 7a03 	vstr	s15, [r7, #12]
    
    alphaSP[1] = (eeData[57] & 0xFC00) >> 10;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	3372      	adds	r3, #114	; 0x72
 800782a:	881b      	ldrh	r3, [r3, #0]
 800782c:	0a9b      	lsrs	r3, r3, #10
 800782e:	b29b      	uxth	r3, r3
 8007830:	ee07 3a90 	vmov	s15, r3
 8007834:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007838:	edc7 7a04 	vstr	s15, [r7, #16]
    if (alphaSP[1] > 31)
 800783c:	edd7 7a04 	vldr	s15, [r7, #16]
 8007840:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8007844:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800784c:	dd07      	ble.n	800785e <ExtractCPParameters+0x11e>
    {
        alphaSP[1] = alphaSP[1] - 64;
 800784e:	edd7 7a04 	vldr	s15, [r7, #16]
 8007852:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80079b8 <ExtractCPParameters+0x278>
 8007856:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800785a:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    alphaSP[1] = (1 + alphaSP[1]/128) * alphaSP[0];
 800785e:	ed97 7a04 	vldr	s14, [r7, #16]
 8007862:	eddf 6a56 	vldr	s13, [pc, #344]	; 80079bc <ExtractCPParameters+0x27c>
 8007866:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800786a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800786e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007872:	edd7 7a03 	vldr	s15, [r7, #12]
 8007876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800787a:	edc7 7a04 	vstr	s15, [r7, #16]
    
    cpKta = (eeData[59] & 0x00FF);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	3376      	adds	r3, #118	; 0x76
 8007882:	881b      	ldrh	r3, [r3, #0]
 8007884:	b2db      	uxtb	r3, r3
 8007886:	ee07 3a90 	vmov	s15, r3
 800788a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800788e:	edc7 7a06 	vstr	s15, [r7, #24]
    if (cpKta > 127)
 8007892:	edd7 7a06 	vldr	s15, [r7, #24]
 8007896:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80079c0 <ExtractCPParameters+0x280>
 800789a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800789e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078a2:	dd07      	ble.n	80078b4 <ExtractCPParameters+0x174>
    {
        cpKta = cpKta - 256;
 80078a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80078a8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80079c4 <ExtractCPParameters+0x284>
 80078ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80078b0:	edc7 7a06 	vstr	s15, [r7, #24]
    }
    ktaScale1 = ((eeData[56] & 0x00F0) >> 4) + 8;    
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	3370      	adds	r3, #112	; 0x70
 80078b8:	881b      	ldrh	r3, [r3, #0]
 80078ba:	111b      	asrs	r3, r3, #4
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	f003 030f 	and.w	r3, r3, #15
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	3308      	adds	r3, #8
 80078c6:	75bb      	strb	r3, [r7, #22]
    mlx90640->cpKta = cpKta / pow(2,(double)ktaScale1);
 80078c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80078cc:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80078d0:	7dbb      	ldrb	r3, [r7, #22]
 80078d2:	ee07 3a90 	vmov	s15, r3
 80078d6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80078da:	eeb0 1b47 	vmov.f64	d1, d7
 80078de:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80078e2:	f012 ff91 	bl	801a808 <pow>
 80078e6:	eeb0 6b40 	vmov.f64	d6, d0
 80078ea:	ee88 7b06 	vdiv.f64	d7, d8, d6
 80078ee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	edc3 7a08 	vstr	s15, [r3, #32]
    
    cpKv = (eeData[59] & 0xFF00) >> 8;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	3376      	adds	r3, #118	; 0x76
 80078fc:	881b      	ldrh	r3, [r3, #0]
 80078fe:	0a1b      	lsrs	r3, r3, #8
 8007900:	b29b      	uxth	r3, r3
 8007902:	ee07 3a90 	vmov	s15, r3
 8007906:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800790a:	edc7 7a07 	vstr	s15, [r7, #28]
    if (cpKv > 127)
 800790e:	edd7 7a07 	vldr	s15, [r7, #28]
 8007912:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80079c0 <ExtractCPParameters+0x280>
 8007916:	eef4 7ac7 	vcmpe.f32	s15, s14
 800791a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800791e:	dd07      	ble.n	8007930 <ExtractCPParameters+0x1f0>
    {
        cpKv = cpKv - 256;
 8007920:	edd7 7a07 	vldr	s15, [r7, #28]
 8007924:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80079c4 <ExtractCPParameters+0x284>
 8007928:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800792c:	edc7 7a07 	vstr	s15, [r7, #28]
    }
    kvScale = (eeData[56] & 0x0F00) >> 8;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	3370      	adds	r3, #112	; 0x70
 8007934:	881b      	ldrh	r3, [r3, #0]
 8007936:	121b      	asrs	r3, r3, #8
 8007938:	b2db      	uxtb	r3, r3
 800793a:	f003 030f 	and.w	r3, r3, #15
 800793e:	757b      	strb	r3, [r7, #21]
    mlx90640->cpKv = cpKv / pow(2,(double)kvScale);
 8007940:	edd7 7a07 	vldr	s15, [r7, #28]
 8007944:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8007948:	7d7b      	ldrb	r3, [r7, #21]
 800794a:	ee07 3a90 	vmov	s15, r3
 800794e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007952:	eeb0 1b47 	vmov.f64	d1, d7
 8007956:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 800795a:	f012 ff55 	bl	801a808 <pow>
 800795e:	eeb0 6b40 	vmov.f64	d6, d0
 8007962:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8007966:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	edc3 7a07 	vstr	s15, [r3, #28]
       
    mlx90640->cpAlpha[0] = alphaSP[0];
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	683a      	ldr	r2, [r7, #0]
 8007974:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007978:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    mlx90640->cpAlpha[1] = alphaSP[1];
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	683a      	ldr	r2, [r7, #0]
 8007980:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007984:	f8c2 3254 	str.w	r3, [r2, #596]	; 0x254
    mlx90640->cpOffset[0] = offsetSP[0];
 8007988:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007992:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
    mlx90640->cpOffset[1] = offsetSP[1];  
 8007996:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079a0:	f8a3 225a 	strh.w	r2, [r3, #602]	; 0x25a
}
 80079a4:	bf00      	nop
 80079a6:	3720      	adds	r7, #32
 80079a8:	46bd      	mov	sp, r7
 80079aa:	ecbd 8b02 	vpop	{d8}
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	43ff8000 	.word	0x43ff8000
 80079b4:	44800000 	.word	0x44800000
 80079b8:	42800000 	.word	0x42800000
 80079bc:	43000000 	.word	0x43000000
 80079c0:	42fe0000 	.word	0x42fe0000
 80079c4:	43800000 	.word	0x43800000

080079c8 <ExtractCILCParameters>:

//------------------------------------------------------------------------------

void ExtractCILCParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b087      	sub	sp, #28
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
    float ilChessC[3];
    uint8_t calibrationModeEE;
    
    calibrationModeEE = (eeData[10] & 0x0800) >> 4;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	3314      	adds	r3, #20
 80079d6:	881b      	ldrh	r3, [r3, #0]
 80079d8:	111b      	asrs	r3, r3, #4
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80079e0:	75fb      	strb	r3, [r7, #23]
    calibrationModeEE = calibrationModeEE ^ 0x80;
 80079e2:	7dfb      	ldrb	r3, [r7, #23]
 80079e4:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 80079e8:	43db      	mvns	r3, r3
 80079ea:	75fb      	strb	r3, [r7, #23]

    ilChessC[0] = (eeData[53] & 0x003F);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	336a      	adds	r3, #106	; 0x6a
 80079f0:	881b      	ldrh	r3, [r3, #0]
 80079f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079f6:	ee07 3a90 	vmov	s15, r3
 80079fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80079fe:	edc7 7a02 	vstr	s15, [r7, #8]
    if (ilChessC[0] > 31)
 8007a02:	edd7 7a02 	vldr	s15, [r7, #8]
 8007a06:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8007a0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a12:	dd07      	ble.n	8007a24 <ExtractCILCParameters+0x5c>
    {
        ilChessC[0] = ilChessC[0] - 64;
 8007a14:	edd7 7a02 	vldr	s15, [r7, #8]
 8007a18:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8007b00 <ExtractCILCParameters+0x138>
 8007a1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007a20:	edc7 7a02 	vstr	s15, [r7, #8]
    }
    ilChessC[0] = ilChessC[0] / 16.0f;
 8007a24:	ed97 7a02 	vldr	s14, [r7, #8]
 8007a28:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8007a2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007a30:	edc7 7a02 	vstr	s15, [r7, #8]
    
    ilChessC[1] = (eeData[53] & 0x07C0) >> 6;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	336a      	adds	r3, #106	; 0x6a
 8007a38:	881b      	ldrh	r3, [r3, #0]
 8007a3a:	119b      	asrs	r3, r3, #6
 8007a3c:	f003 031f 	and.w	r3, r3, #31
 8007a40:	ee07 3a90 	vmov	s15, r3
 8007a44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a48:	edc7 7a03 	vstr	s15, [r7, #12]
    if (ilChessC[1] > 15)
 8007a4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8007a50:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8007a54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a5c:	dd07      	ble.n	8007a6e <ExtractCILCParameters+0xa6>
    {
        ilChessC[1] = ilChessC[1] - 32;
 8007a5e:	edd7 7a03 	vldr	s15, [r7, #12]
 8007a62:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8007b04 <ExtractCILCParameters+0x13c>
 8007a66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007a6a:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    ilChessC[1] = ilChessC[1] / 2.0f;
 8007a6e:	ed97 7a03 	vldr	s14, [r7, #12]
 8007a72:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007a76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007a7a:	edc7 7a03 	vstr	s15, [r7, #12]
    
    ilChessC[2] = (eeData[53] & 0xF800) >> 11;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	336a      	adds	r3, #106	; 0x6a
 8007a82:	881b      	ldrh	r3, [r3, #0]
 8007a84:	0adb      	lsrs	r3, r3, #11
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	ee07 3a90 	vmov	s15, r3
 8007a8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a90:	edc7 7a04 	vstr	s15, [r7, #16]
    if (ilChessC[2] > 15)
 8007a94:	edd7 7a04 	vldr	s15, [r7, #16]
 8007a98:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8007a9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aa4:	dd07      	ble.n	8007ab6 <ExtractCILCParameters+0xee>
    {
        ilChessC[2] = ilChessC[2] - 32;
 8007aa6:	edd7 7a04 	vldr	s15, [r7, #16]
 8007aaa:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8007b04 <ExtractCILCParameters+0x13c>
 8007aae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007ab2:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    ilChessC[2] = ilChessC[2] / 8.0f;
 8007ab6:	ed97 7a04 	vldr	s14, [r7, #16]
 8007aba:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8007abe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007ac2:	edc7 7a04 	vstr	s15, [r7, #16]
    
    mlx90640->calibrationModeEE = calibrationModeEE;
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	7dfa      	ldrb	r2, [r7, #23]
 8007aca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    mlx90640->ilChessC[0] = ilChessC[0];
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	683a      	ldr	r2, [r7, #0]
 8007ad2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007ad6:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
    mlx90640->ilChessC[1] = ilChessC[1];
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	683a      	ldr	r2, [r7, #0]
 8007ade:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007ae2:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
    mlx90640->ilChessC[2] = ilChessC[2];
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	683a      	ldr	r2, [r7, #0]
 8007aea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007aee:	f8c2 3264 	str.w	r3, [r2, #612]	; 0x264
}
 8007af2:	bf00      	nop
 8007af4:	371c      	adds	r7, #28
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	42800000 	.word	0x42800000
 8007b04:	42000000 	.word	0x42000000

08007b08 <ExtractDeviatingPixels>:

//------------------------------------------------------------------------------

int ExtractDeviatingPixels(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b086      	sub	sp, #24
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
    uint16_t pixCnt = 0;
 8007b12:	2300      	movs	r3, #0
 8007b14:	82fb      	strh	r3, [r7, #22]
    uint16_t brokenPixCnt = 0;
 8007b16:	2300      	movs	r3, #0
 8007b18:	82bb      	strh	r3, [r7, #20]
    uint16_t outlierPixCnt = 0;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	827b      	strh	r3, [r7, #18]
    int warn = 0;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	60fb      	str	r3, [r7, #12]
    int i;
    
    for(pixCnt = 0; pixCnt<5; pixCnt++)
 8007b22:	2300      	movs	r3, #0
 8007b24:	82fb      	strh	r3, [r7, #22]
 8007b26:	e013      	b.n	8007b50 <ExtractDeviatingPixels+0x48>
    {
        mlx90640->brokenPixels[pixCnt] = 0xFFFF;
 8007b28:	8afa      	ldrh	r2, [r7, #22]
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	f602 1234 	addw	r2, r2, #2356	; 0x934
 8007b30:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007b34:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        mlx90640->outlierPixels[pixCnt] = 0xFFFF;
 8007b38:	8afb      	ldrh	r3, [r7, #22]
 8007b3a:	683a      	ldr	r2, [r7, #0]
 8007b3c:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8007b40:	005b      	lsls	r3, r3, #1
 8007b42:	4413      	add	r3, r2
 8007b44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b48:	805a      	strh	r2, [r3, #2]
    for(pixCnt = 0; pixCnt<5; pixCnt++)
 8007b4a:	8afb      	ldrh	r3, [r7, #22]
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	82fb      	strh	r3, [r7, #22]
 8007b50:	8afb      	ldrh	r3, [r7, #22]
 8007b52:	2b04      	cmp	r3, #4
 8007b54:	d9e8      	bls.n	8007b28 <ExtractDeviatingPixels+0x20>
    }
        
    pixCnt = 0;    
 8007b56:	2300      	movs	r3, #0
 8007b58:	82fb      	strh	r3, [r7, #22]
    while (pixCnt < 768 && brokenPixCnt < 5 && outlierPixCnt < 5)
 8007b5a:	e02a      	b.n	8007bb2 <ExtractDeviatingPixels+0xaa>
    {
        if(eeData[pixCnt+64] == 0)
 8007b5c:	8afb      	ldrh	r3, [r7, #22]
 8007b5e:	3340      	adds	r3, #64	; 0x40
 8007b60:	005b      	lsls	r3, r3, #1
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	4413      	add	r3, r2
 8007b66:	881b      	ldrh	r3, [r3, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d10a      	bne.n	8007b82 <ExtractDeviatingPixels+0x7a>
        {
            mlx90640->brokenPixels[brokenPixCnt] = pixCnt;
 8007b6c:	8aba      	ldrh	r2, [r7, #20]
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	f602 1234 	addw	r2, r2, #2356	; 0x934
 8007b74:	8af9      	ldrh	r1, [r7, #22]
 8007b76:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            brokenPixCnt = brokenPixCnt + 1;
 8007b7a:	8abb      	ldrh	r3, [r7, #20]
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	82bb      	strh	r3, [r7, #20]
 8007b80:	e014      	b.n	8007bac <ExtractDeviatingPixels+0xa4>
        }    
        else if((eeData[pixCnt+64] & 0x0001) != 0)
 8007b82:	8afb      	ldrh	r3, [r7, #22]
 8007b84:	3340      	adds	r3, #64	; 0x40
 8007b86:	005b      	lsls	r3, r3, #1
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	4413      	add	r3, r2
 8007b8c:	881b      	ldrh	r3, [r3, #0]
 8007b8e:	f003 0301 	and.w	r3, r3, #1
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d00a      	beq.n	8007bac <ExtractDeviatingPixels+0xa4>
        {
            mlx90640->outlierPixels[outlierPixCnt] = pixCnt;
 8007b96:	8a7b      	ldrh	r3, [r7, #18]
 8007b98:	683a      	ldr	r2, [r7, #0]
 8007b9a:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8007b9e:	005b      	lsls	r3, r3, #1
 8007ba0:	4413      	add	r3, r2
 8007ba2:	8afa      	ldrh	r2, [r7, #22]
 8007ba4:	805a      	strh	r2, [r3, #2]
            outlierPixCnt = outlierPixCnt + 1;
 8007ba6:	8a7b      	ldrh	r3, [r7, #18]
 8007ba8:	3301      	adds	r3, #1
 8007baa:	827b      	strh	r3, [r7, #18]
        }    
        
        pixCnt = pixCnt + 1;
 8007bac:	8afb      	ldrh	r3, [r7, #22]
 8007bae:	3301      	adds	r3, #1
 8007bb0:	82fb      	strh	r3, [r7, #22]
    while (pixCnt < 768 && brokenPixCnt < 5 && outlierPixCnt < 5)
 8007bb2:	8afb      	ldrh	r3, [r7, #22]
 8007bb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bb8:	d205      	bcs.n	8007bc6 <ExtractDeviatingPixels+0xbe>
 8007bba:	8abb      	ldrh	r3, [r7, #20]
 8007bbc:	2b04      	cmp	r3, #4
 8007bbe:	d802      	bhi.n	8007bc6 <ExtractDeviatingPixels+0xbe>
 8007bc0:	8a7b      	ldrh	r3, [r7, #18]
 8007bc2:	2b04      	cmp	r3, #4
 8007bc4:	d9ca      	bls.n	8007b5c <ExtractDeviatingPixels+0x54>
        
    } 
    
    if(brokenPixCnt > 4)  
 8007bc6:	8abb      	ldrh	r3, [r7, #20]
 8007bc8:	2b04      	cmp	r3, #4
 8007bca:	d903      	bls.n	8007bd4 <ExtractDeviatingPixels+0xcc>
    {
        warn = -3;
 8007bcc:	f06f 0302 	mvn.w	r3, #2
 8007bd0:	60fb      	str	r3, [r7, #12]
 8007bd2:	e08f      	b.n	8007cf4 <ExtractDeviatingPixels+0x1ec>
    }         
    else if(outlierPixCnt > 4)  
 8007bd4:	8a7b      	ldrh	r3, [r7, #18]
 8007bd6:	2b04      	cmp	r3, #4
 8007bd8:	d903      	bls.n	8007be2 <ExtractDeviatingPixels+0xda>
    {
        warn = -4;
 8007bda:	f06f 0303 	mvn.w	r3, #3
 8007bde:	60fb      	str	r3, [r7, #12]
 8007be0:	e088      	b.n	8007cf4 <ExtractDeviatingPixels+0x1ec>
    }
    else if((brokenPixCnt + outlierPixCnt) > 4)  
 8007be2:	8aba      	ldrh	r2, [r7, #20]
 8007be4:	8a7b      	ldrh	r3, [r7, #18]
 8007be6:	4413      	add	r3, r2
 8007be8:	2b04      	cmp	r3, #4
 8007bea:	dd03      	ble.n	8007bf4 <ExtractDeviatingPixels+0xec>
    {
        warn = -5;
 8007bec:	f06f 0304 	mvn.w	r3, #4
 8007bf0:	60fb      	str	r3, [r7, #12]
 8007bf2:	e07f      	b.n	8007cf4 <ExtractDeviatingPixels+0x1ec>
    } 
    else
    {
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	82fb      	strh	r3, [r7, #22]
 8007bf8:	e022      	b.n	8007c40 <ExtractDeviatingPixels+0x138>
        {
            for(i=pixCnt+1; i<brokenPixCnt; i++)
 8007bfa:	8afb      	ldrh	r3, [r7, #22]
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	60bb      	str	r3, [r7, #8]
 8007c00:	e017      	b.n	8007c32 <ExtractDeviatingPixels+0x12a>
            {
                warn = CheckAdjacentPixels(mlx90640->brokenPixels[pixCnt],mlx90640->brokenPixels[i]);
 8007c02:	8afa      	ldrh	r2, [r7, #22]
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	f602 1234 	addw	r2, r2, #2356	; 0x934
 8007c0a:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	68ba      	ldr	r2, [r7, #8]
 8007c12:	f602 1234 	addw	r2, r2, #2356	; 0x934
 8007c16:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	f000 f86f 	bl	8007cfe <CheckAdjacentPixels>
 8007c20:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d001      	beq.n	8007c2c <ExtractDeviatingPixels+0x124>
                {
                    return warn;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	e064      	b.n	8007cf6 <ExtractDeviatingPixels+0x1ee>
            for(i=pixCnt+1; i<brokenPixCnt; i++)
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	3301      	adds	r3, #1
 8007c30:	60bb      	str	r3, [r7, #8]
 8007c32:	8abb      	ldrh	r3, [r7, #20]
 8007c34:	68ba      	ldr	r2, [r7, #8]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	dbe3      	blt.n	8007c02 <ExtractDeviatingPixels+0xfa>
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 8007c3a:	8afb      	ldrh	r3, [r7, #22]
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	82fb      	strh	r3, [r7, #22]
 8007c40:	8afa      	ldrh	r2, [r7, #22]
 8007c42:	8abb      	ldrh	r3, [r7, #20]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d3d8      	bcc.n	8007bfa <ExtractDeviatingPixels+0xf2>
                }    
            }    
        }
        
        for(pixCnt=0; pixCnt<outlierPixCnt; pixCnt++)
 8007c48:	2300      	movs	r3, #0
 8007c4a:	82fb      	strh	r3, [r7, #22]
 8007c4c:	e024      	b.n	8007c98 <ExtractDeviatingPixels+0x190>
        {
            for(i=pixCnt+1; i<outlierPixCnt; i++)
 8007c4e:	8afb      	ldrh	r3, [r7, #22]
 8007c50:	3301      	adds	r3, #1
 8007c52:	60bb      	str	r3, [r7, #8]
 8007c54:	e019      	b.n	8007c8a <ExtractDeviatingPixels+0x182>
            {
                warn = CheckAdjacentPixels(mlx90640->outlierPixels[pixCnt],mlx90640->outlierPixels[i]);
 8007c56:	8afb      	ldrh	r3, [r7, #22]
 8007c58:	683a      	ldr	r2, [r7, #0]
 8007c5a:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8007c5e:	005b      	lsls	r3, r3, #1
 8007c60:	4413      	add	r3, r2
 8007c62:	8858      	ldrh	r0, [r3, #2]
 8007c64:	683a      	ldr	r2, [r7, #0]
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8007c6c:	005b      	lsls	r3, r3, #1
 8007c6e:	4413      	add	r3, r2
 8007c70:	885b      	ldrh	r3, [r3, #2]
 8007c72:	4619      	mov	r1, r3
 8007c74:	f000 f843 	bl	8007cfe <CheckAdjacentPixels>
 8007c78:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d001      	beq.n	8007c84 <ExtractDeviatingPixels+0x17c>
                {
                    return warn;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	e038      	b.n	8007cf6 <ExtractDeviatingPixels+0x1ee>
            for(i=pixCnt+1; i<outlierPixCnt; i++)
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	3301      	adds	r3, #1
 8007c88:	60bb      	str	r3, [r7, #8]
 8007c8a:	8a7b      	ldrh	r3, [r7, #18]
 8007c8c:	68ba      	ldr	r2, [r7, #8]
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	dbe1      	blt.n	8007c56 <ExtractDeviatingPixels+0x14e>
        for(pixCnt=0; pixCnt<outlierPixCnt; pixCnt++)
 8007c92:	8afb      	ldrh	r3, [r7, #22]
 8007c94:	3301      	adds	r3, #1
 8007c96:	82fb      	strh	r3, [r7, #22]
 8007c98:	8afa      	ldrh	r2, [r7, #22]
 8007c9a:	8a7b      	ldrh	r3, [r7, #18]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d3d6      	bcc.n	8007c4e <ExtractDeviatingPixels+0x146>
                }    
            }    
        } 
        
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	82fb      	strh	r3, [r7, #22]
 8007ca4:	e022      	b.n	8007cec <ExtractDeviatingPixels+0x1e4>
        {
            for(i=0; i<outlierPixCnt; i++)
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	60bb      	str	r3, [r7, #8]
 8007caa:	e018      	b.n	8007cde <ExtractDeviatingPixels+0x1d6>
            {
                warn = CheckAdjacentPixels(mlx90640->brokenPixels[pixCnt],mlx90640->outlierPixels[i]);
 8007cac:	8afa      	ldrh	r2, [r7, #22]
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	f602 1234 	addw	r2, r2, #2356	; 0x934
 8007cb4:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8007cb8:	683a      	ldr	r2, [r7, #0]
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8007cc0:	005b      	lsls	r3, r3, #1
 8007cc2:	4413      	add	r3, r2
 8007cc4:	885b      	ldrh	r3, [r3, #2]
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	f000 f819 	bl	8007cfe <CheckAdjacentPixels>
 8007ccc:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d001      	beq.n	8007cd8 <ExtractDeviatingPixels+0x1d0>
                {
                    return warn;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	e00e      	b.n	8007cf6 <ExtractDeviatingPixels+0x1ee>
            for(i=0; i<outlierPixCnt; i++)
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	60bb      	str	r3, [r7, #8]
 8007cde:	8a7b      	ldrh	r3, [r7, #18]
 8007ce0:	68ba      	ldr	r2, [r7, #8]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	dbe2      	blt.n	8007cac <ExtractDeviatingPixels+0x1a4>
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 8007ce6:	8afb      	ldrh	r3, [r7, #22]
 8007ce8:	3301      	adds	r3, #1
 8007cea:	82fb      	strh	r3, [r7, #22]
 8007cec:	8afa      	ldrh	r2, [r7, #22]
 8007cee:	8abb      	ldrh	r3, [r7, #20]
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d3d8      	bcc.n	8007ca6 <ExtractDeviatingPixels+0x19e>
        }    
        
    }    
    
    
    return warn;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
       
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3718      	adds	r7, #24
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}

08007cfe <CheckAdjacentPixels>:

//------------------------------------------------------------------------------

 int CheckAdjacentPixels(uint16_t pix1, uint16_t pix2)
 {
 8007cfe:	b480      	push	{r7}
 8007d00:	b085      	sub	sp, #20
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	4603      	mov	r3, r0
 8007d06:	460a      	mov	r2, r1
 8007d08:	80fb      	strh	r3, [r7, #6]
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	80bb      	strh	r3, [r7, #4]
     int pixPosDif;
     
     pixPosDif = pix1 - pix2;
 8007d0e:	88fa      	ldrh	r2, [r7, #6]
 8007d10:	88bb      	ldrh	r3, [r7, #4]
 8007d12:	1ad3      	subs	r3, r2, r3
 8007d14:	60fb      	str	r3, [r7, #12]
     if(pixPosDif > -34 && pixPosDif < -30)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f113 0f21 	cmn.w	r3, #33	; 0x21
 8007d1c:	db06      	blt.n	8007d2c <CheckAdjacentPixels+0x2e>
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f113 0f1e 	cmn.w	r3, #30
 8007d24:	da02      	bge.n	8007d2c <CheckAdjacentPixels+0x2e>
     {
         return -6;
 8007d26:	f06f 0305 	mvn.w	r3, #5
 8007d2a:	e013      	b.n	8007d54 <CheckAdjacentPixels+0x56>
     } 
     if(pixPosDif > -2 && pixPosDif < 2)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d32:	db05      	blt.n	8007d40 <CheckAdjacentPixels+0x42>
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	dc02      	bgt.n	8007d40 <CheckAdjacentPixels+0x42>
     {
         return -6;
 8007d3a:	f06f 0305 	mvn.w	r3, #5
 8007d3e:	e009      	b.n	8007d54 <CheckAdjacentPixels+0x56>
     } 
     if(pixPosDif > 30 && pixPosDif < 34)
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2b1e      	cmp	r3, #30
 8007d44:	dd05      	ble.n	8007d52 <CheckAdjacentPixels+0x54>
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2b21      	cmp	r3, #33	; 0x21
 8007d4a:	dc02      	bgt.n	8007d52 <CheckAdjacentPixels+0x54>
     {
         return -6;
 8007d4c:	f06f 0305 	mvn.w	r3, #5
 8007d50:	e000      	b.n	8007d54 <CheckAdjacentPixels+0x56>
     }
     
     return 0;    
 8007d52:	2300      	movs	r3, #0
 }
 8007d54:	4618      	mov	r0, r3
 8007d56:	3714      	adds	r7, #20
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr

08007d60 <MLX90640_I2CRead>:
	MX_I2C1_Init();
}


int MLX90640_I2CRead(uint8_t slaveAddr, uint16_t startAddress, uint16_t nMemAddressRead, uint16_t *data,I2C_HandleTypeDef * i2c)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b08c      	sub	sp, #48	; 0x30
 8007d64:	af04      	add	r7, sp, #16
 8007d66:	607b      	str	r3, [r7, #4]
 8007d68:	4603      	mov	r3, r0
 8007d6a:	73fb      	strb	r3, [r7, #15]
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	81bb      	strh	r3, [r7, #12]
 8007d70:	4613      	mov	r3, r2
 8007d72:	817b      	strh	r3, [r7, #10]

	uint8_t* p = (uint8_t*) data;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	61bb      	str	r3, [r7, #24]

	int ack = 0;                               
 8007d78:	2300      	movs	r3, #0
 8007d7a:	617b      	str	r3, [r7, #20]
	int cnt = 0;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	61fb      	str	r3, [r7, #28]
	
	ack = HAL_I2C_Mem_Read(&hi2c1, (slaveAddr<<1), startAddress, I2C_MEMADD_SIZE_16BIT, p, nMemAddressRead*2, 500);
 8007d80:	7bfb      	ldrb	r3, [r7, #15]
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	005b      	lsls	r3, r3, #1
 8007d86:	b299      	uxth	r1, r3
 8007d88:	897b      	ldrh	r3, [r7, #10]
 8007d8a:	005b      	lsls	r3, r3, #1
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	89ba      	ldrh	r2, [r7, #12]
 8007d90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007d94:	9002      	str	r0, [sp, #8]
 8007d96:	9301      	str	r3, [sp, #4]
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	9300      	str	r3, [sp, #0]
 8007d9c:	2302      	movs	r3, #2
 8007d9e:	4817      	ldr	r0, [pc, #92]	; (8007dfc <MLX90640_I2CRead+0x9c>)
 8007da0:	f003 faa4 	bl	800b2ec <HAL_I2C_Mem_Read>
 8007da4:	4603      	mov	r3, r0
 8007da6:	617b      	str	r3, [r7, #20]

	if (ack != HAL_OK)
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d002      	beq.n	8007db4 <MLX90640_I2CRead+0x54>
	{
			return -1;
 8007dae:	f04f 33ff 	mov.w	r3, #4294967295
 8007db2:	e01f      	b.n	8007df4 <MLX90640_I2CRead+0x94>
	}
	

	for(cnt=0; cnt < nMemAddressRead*2; cnt+=2) {
 8007db4:	2300      	movs	r3, #0
 8007db6:	61fb      	str	r3, [r7, #28]
 8007db8:	e016      	b.n	8007de8 <MLX90640_I2CRead+0x88>
		uint8_t tempBuffer = p[cnt+1];
 8007dba:	69fb      	ldr	r3, [r7, #28]
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	69ba      	ldr	r2, [r7, #24]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	74fb      	strb	r3, [r7, #19]
		p[cnt+1] = p[cnt];
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	69ba      	ldr	r2, [r7, #24]
 8007dca:	441a      	add	r2, r3
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	3301      	adds	r3, #1
 8007dd0:	69b9      	ldr	r1, [r7, #24]
 8007dd2:	440b      	add	r3, r1
 8007dd4:	7812      	ldrb	r2, [r2, #0]
 8007dd6:	701a      	strb	r2, [r3, #0]
		p[cnt] = tempBuffer;
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	69ba      	ldr	r2, [r7, #24]
 8007ddc:	4413      	add	r3, r2
 8007dde:	7cfa      	ldrb	r2, [r7, #19]
 8007de0:	701a      	strb	r2, [r3, #0]
	for(cnt=0; cnt < nMemAddressRead*2; cnt+=2) {
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	3302      	adds	r3, #2
 8007de6:	61fb      	str	r3, [r7, #28]
 8007de8:	897b      	ldrh	r3, [r7, #10]
 8007dea:	005b      	lsls	r3, r3, #1
 8007dec:	69fa      	ldr	r2, [r7, #28]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	dbe3      	blt.n	8007dba <MLX90640_I2CRead+0x5a>
	}

	return 0;   
 8007df2:	2300      	movs	r3, #0
} 
 8007df4:	4618      	mov	r0, r3
 8007df6:	3720      	adds	r7, #32
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	20000558 	.word	0x20000558

08007e00 <MLX90640_I2CWrite>:


int MLX90640_I2CWrite(uint8_t slaveAddr, uint16_t writeAddress, uint16_t data,I2C_HandleTypeDef * i2c)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b08a      	sub	sp, #40	; 0x28
 8007e04:	af04      	add	r7, sp, #16
 8007e06:	607b      	str	r3, [r7, #4]
 8007e08:	4603      	mov	r3, r0
 8007e0a:	73fb      	strb	r3, [r7, #15]
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	81bb      	strh	r3, [r7, #12]
 8007e10:	4613      	mov	r3, r2
 8007e12:	817b      	strh	r3, [r7, #10]

	uint8_t sa;
	int ack = 0;
 8007e14:	2300      	movs	r3, #0
 8007e16:	617b      	str	r3, [r7, #20]
	uint8_t cmd[2];
	static uint16_t dataCheck;

	sa = (slaveAddr << 1);
 8007e18:	7bfb      	ldrb	r3, [r7, #15]
 8007e1a:	005b      	lsls	r3, r3, #1
 8007e1c:	74fb      	strb	r3, [r7, #19]

	cmd[0] = data >> 8;
 8007e1e:	897b      	ldrh	r3, [r7, #10]
 8007e20:	0a1b      	lsrs	r3, r3, #8
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	743b      	strb	r3, [r7, #16]
	cmd[1] = data & 0x00FF;
 8007e28:	897b      	ldrh	r3, [r7, #10]
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	747b      	strb	r3, [r7, #17]


	ack = HAL_I2C_Mem_Write(&hi2c1, sa, writeAddress, I2C_MEMADD_SIZE_16BIT, cmd, sizeof(cmd), 500);
 8007e2e:	7cfb      	ldrb	r3, [r7, #19]
 8007e30:	b299      	uxth	r1, r3
 8007e32:	89ba      	ldrh	r2, [r7, #12]
 8007e34:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007e38:	9302      	str	r3, [sp, #8]
 8007e3a:	2302      	movs	r3, #2
 8007e3c:	9301      	str	r3, [sp, #4]
 8007e3e:	f107 0310 	add.w	r3, r7, #16
 8007e42:	9300      	str	r3, [sp, #0]
 8007e44:	2302      	movs	r3, #2
 8007e46:	4810      	ldr	r0, [pc, #64]	; (8007e88 <MLX90640_I2CWrite+0x88>)
 8007e48:	f003 f93c 	bl	800b0c4 <HAL_I2C_Mem_Write>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	617b      	str	r3, [r7, #20]

	if (ack != HAL_OK)
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d002      	beq.n	8007e5c <MLX90640_I2CWrite+0x5c>
	{
			return -1;
 8007e56:	f04f 33ff 	mov.w	r3, #4294967295
 8007e5a:	e010      	b.n	8007e7e <MLX90640_I2CWrite+0x7e>
	}         
	
	MLX90640_I2CRead(slaveAddr,writeAddress,1, &dataCheck,i2c);
 8007e5c:	89b9      	ldrh	r1, [r7, #12]
 8007e5e:	7bf8      	ldrb	r0, [r7, #15]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	9300      	str	r3, [sp, #0]
 8007e64:	4b09      	ldr	r3, [pc, #36]	; (8007e8c <MLX90640_I2CWrite+0x8c>)
 8007e66:	2201      	movs	r2, #1
 8007e68:	f7ff ff7a 	bl	8007d60 <MLX90640_I2CRead>
	
	if ( dataCheck != data)
 8007e6c:	4b07      	ldr	r3, [pc, #28]	; (8007e8c <MLX90640_I2CWrite+0x8c>)
 8007e6e:	881b      	ldrh	r3, [r3, #0]
 8007e70:	897a      	ldrh	r2, [r7, #10]
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d002      	beq.n	8007e7c <MLX90640_I2CWrite+0x7c>
	{
			return -2;
 8007e76:	f06f 0301 	mvn.w	r3, #1
 8007e7a:	e000      	b.n	8007e7e <MLX90640_I2CWrite+0x7e>
	}    
	
	return 0;
 8007e7c:	2300      	movs	r3, #0
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3718      	adds	r7, #24
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	20000558 	.word	0x20000558
 8007e8c:	200060c6 	.word	0x200060c6

08007e90 <MPU9250_IsConnected>:
__weak void MPU9250_OnActivate()
{
}
#ifndef USE_SPI
bool MPU9250_IsConnected()
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&_MPU9250_I2C,_dev_add,1,HAL_MAX_DELAY)==HAL_OK)
 8007e94:	21d0      	movs	r1, #208	; 0xd0
 8007e96:	f04f 33ff 	mov.w	r3, #4294967295
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	4805      	ldr	r0, [pc, #20]	; (8007eb4 <MPU9250_IsConnected+0x24>)
 8007e9e:	f003 fb3f 	bl	800b520 <HAL_I2C_IsDeviceReady>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d101      	bne.n	8007eac <MPU9250_IsConnected+0x1c>
		return true;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	e000      	b.n	8007eae <MPU9250_IsConnected+0x1e>
	else
		return false;	
 8007eac:	2300      	movs	r3, #0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	bd80      	pop	{r7, pc}
 8007eb2:	bf00      	nop
 8007eb4:	20000600 	.word	0x20000600

08007eb8 <MPU_I2C_Write>:

void MPU_I2C_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b086      	sub	sp, #24
 8007ebc:	af04      	add	r7, sp, #16
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	70fb      	strb	r3, [r7, #3]
 8007ec4:	4613      	mov	r3, r2
 8007ec6:	803b      	strh	r3, [r7, #0]
	HAL_I2C_Mem_Write(&_MPU9250_I2C,_dev_add,WriteAddr,I2C_MEMADD_SIZE_8BIT,pBuffer,NumByteToWrite,HAL_MAX_DELAY);
 8007ec8:	21d0      	movs	r1, #208	; 0xd0
 8007eca:	78fb      	ldrb	r3, [r7, #3]
 8007ecc:	b29a      	uxth	r2, r3
 8007ece:	f04f 33ff 	mov.w	r3, #4294967295
 8007ed2:	9302      	str	r3, [sp, #8]
 8007ed4:	883b      	ldrh	r3, [r7, #0]
 8007ed6:	9301      	str	r3, [sp, #4]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	9300      	str	r3, [sp, #0]
 8007edc:	2301      	movs	r3, #1
 8007ede:	4803      	ldr	r0, [pc, #12]	; (8007eec <MPU_I2C_Write+0x34>)
 8007ee0:	f003 f8f0 	bl	800b0c4 <HAL_I2C_Mem_Write>
}
 8007ee4:	bf00      	nop
 8007ee6:	3708      	adds	r7, #8
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}
 8007eec:	20000600 	.word	0x20000600

08007ef0 <MPU_I2C_Read>:

void MPU_I2C_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b086      	sub	sp, #24
 8007ef4:	af02      	add	r7, sp, #8
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	460b      	mov	r3, r1
 8007efa:	70fb      	strb	r3, [r7, #3]
 8007efc:	4613      	mov	r3, r2
 8007efe:	803b      	strh	r3, [r7, #0]
	uint8_t data = ReadAddr | READWRITE_CMD;
 8007f00:	2280      	movs	r2, #128	; 0x80
 8007f02:	78fb      	ldrb	r3, [r7, #3]
 8007f04:	4313      	orrs	r3, r2
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&_MPU9250_I2C,_dev_add,&data,1,5);
 8007f0a:	21d0      	movs	r1, #208	; 0xd0
 8007f0c:	f107 020f 	add.w	r2, r7, #15
 8007f10:	2305      	movs	r3, #5
 8007f12:	9300      	str	r3, [sp, #0]
 8007f14:	2301      	movs	r3, #1
 8007f16:	4807      	ldr	r0, [pc, #28]	; (8007f34 <MPU_I2C_Read+0x44>)
 8007f18:	f002 feea 	bl	800acf0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&_MPU9250_I2C,_dev_add,pBuffer,NumByteToRead,5);
 8007f1c:	21d0      	movs	r1, #208	; 0xd0
 8007f1e:	883b      	ldrh	r3, [r7, #0]
 8007f20:	2205      	movs	r2, #5
 8007f22:	9200      	str	r2, [sp, #0]
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	4803      	ldr	r0, [pc, #12]	; (8007f34 <MPU_I2C_Read+0x44>)
 8007f28:	f002 ffd6 	bl	800aed8 <HAL_I2C_Master_Receive>
}
 8007f2c:	bf00      	nop
 8007f2e:	3710      	adds	r7, #16
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}
 8007f34:	20000600 	.word	0x20000600

08007f38 <writeRegister>:
	MPU9250_Deactivate();
}
#endif
/* writes a byte to MPU9250 register given a register address and data */
void writeRegister(uint8_t subAddress, uint8_t data)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	4603      	mov	r3, r0
 8007f40:	460a      	mov	r2, r1
 8007f42:	71fb      	strb	r3, [r7, #7]
 8007f44:	4613      	mov	r3, r2
 8007f46:	71bb      	strb	r3, [r7, #6]
	#ifdef USE_SPI
	MPU_SPI_Write(&data, subAddress, 1);
	#else
	MPU_I2C_Write(&data, subAddress, 1);
 8007f48:	79f9      	ldrb	r1, [r7, #7]
 8007f4a:	1dbb      	adds	r3, r7, #6
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7ff ffb2 	bl	8007eb8 <MPU_I2C_Write>
	#endif
	HAL_Delay(10);
 8007f54:	200a      	movs	r0, #10
 8007f56:	f000 fae7 	bl	8008528 <HAL_Delay>
}
 8007f5a:	bf00      	nop
 8007f5c:	3708      	adds	r7, #8
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}

08007f62 <readRegisters>:

/* reads registers from MPU9250 given a starting register address, number of bytes, and a pointer to store data */
void readRegisters(uint8_t subAddress, uint8_t count, uint8_t* dest){
 8007f62:	b580      	push	{r7, lr}
 8007f64:	b082      	sub	sp, #8
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	4603      	mov	r3, r0
 8007f6a:	603a      	str	r2, [r7, #0]
 8007f6c:	71fb      	strb	r3, [r7, #7]
 8007f6e:	460b      	mov	r3, r1
 8007f70:	71bb      	strb	r3, [r7, #6]
	#ifdef USE_SPI
	MPU_SPI_Read(dest, subAddress, count);
	#else
	MPU_I2C_Read(dest, subAddress, count);
 8007f72:	79bb      	ldrb	r3, [r7, #6]
 8007f74:	b29a      	uxth	r2, r3
 8007f76:	79fb      	ldrb	r3, [r7, #7]
 8007f78:	4619      	mov	r1, r3
 8007f7a:	6838      	ldr	r0, [r7, #0]
 8007f7c:	f7ff ffb8 	bl	8007ef0 <MPU_I2C_Read>
	#endif
}
 8007f80:	bf00      	nop
 8007f82:	3708      	adds	r7, #8
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <writeAK8963Register>:

/* writes a register to the AK8963 given a register address and data */
void writeAK8963Register(uint8_t subAddress, uint8_t data)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	4603      	mov	r3, r0
 8007f90:	460a      	mov	r2, r1
 8007f92:	71fb      	strb	r3, [r7, #7]
 8007f94:	4613      	mov	r3, r2
 8007f96:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for write
	writeRegister(I2C_SLV0_ADDR,AK8963_I2C_ADDR);
 8007f98:	2325      	movs	r3, #37	; 0x25
 8007f9a:	220c      	movs	r2, #12
 8007f9c:	4611      	mov	r1, r2
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7ff ffca 	bl	8007f38 <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 8007fa4:	2226      	movs	r2, #38	; 0x26
 8007fa6:	79fb      	ldrb	r3, [r7, #7]
 8007fa8:	4619      	mov	r1, r3
 8007faa:	4610      	mov	r0, r2
 8007fac:	f7ff ffc4 	bl	8007f38 <writeRegister>

	// store the data for write
	writeRegister(I2C_SLV0_DO,data);
 8007fb0:	2263      	movs	r2, #99	; 0x63
 8007fb2:	79bb      	ldrb	r3, [r7, #6]
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	4610      	mov	r0, r2
 8007fb8:	f7ff ffbe 	bl	8007f38 <writeRegister>

	// enable I2C and send 1 byte
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | (uint8_t)1);
 8007fbc:	2227      	movs	r2, #39	; 0x27
 8007fbe:	2380      	movs	r3, #128	; 0x80
 8007fc0:	f043 0301 	orr.w	r3, r3, #1
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	4610      	mov	r0, r2
 8007fca:	f7ff ffb5 	bl	8007f38 <writeRegister>
}
 8007fce:	bf00      	nop
 8007fd0:	3708      	adds	r7, #8
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}

08007fd6 <readAK8963Registers>:

/* reads registers from the AK8963 */
void readAK8963Registers(uint8_t subAddress, uint8_t count, uint8_t* dest)
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b082      	sub	sp, #8
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	4603      	mov	r3, r0
 8007fde:	603a      	str	r2, [r7, #0]
 8007fe0:	71fb      	strb	r3, [r7, #7]
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for read
	writeRegister(I2C_SLV0_ADDR, AK8963_I2C_ADDR | I2C_READ_FLAG);
 8007fe6:	2025      	movs	r0, #37	; 0x25
 8007fe8:	220c      	movs	r2, #12
 8007fea:	2380      	movs	r3, #128	; 0x80
 8007fec:	4313      	orrs	r3, r2
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	f7ff ffa1 	bl	8007f38 <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 8007ff6:	2226      	movs	r2, #38	; 0x26
 8007ff8:	79fb      	ldrb	r3, [r7, #7]
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	4610      	mov	r0, r2
 8007ffe:	f7ff ff9b 	bl	8007f38 <writeRegister>

	// enable I2C and request the bytes
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | count);
 8008002:	2027      	movs	r0, #39	; 0x27
 8008004:	2280      	movs	r2, #128	; 0x80
 8008006:	79bb      	ldrb	r3, [r7, #6]
 8008008:	4313      	orrs	r3, r2
 800800a:	b2db      	uxtb	r3, r3
 800800c:	4619      	mov	r1, r3
 800800e:	f7ff ff93 	bl	8007f38 <writeRegister>

	// takes some time for these registers to fill
	HAL_Delay(1);
 8008012:	2001      	movs	r0, #1
 8008014:	f000 fa88 	bl	8008528 <HAL_Delay>

	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	readRegisters(EXT_SENS_DATA_00,count,dest);
 8008018:	2049      	movs	r0, #73	; 0x49
 800801a:	79bb      	ldrb	r3, [r7, #6]
 800801c:	683a      	ldr	r2, [r7, #0]
 800801e:	4619      	mov	r1, r3
 8008020:	f7ff ff9f 	bl	8007f62 <readRegisters>
}
 8008024:	bf00      	nop
 8008026:	3708      	adds	r7, #8
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <whoAmI>:

/* gets the MPU9250 WHO_AM_I register value, expected to be 0x71 */
static uint8_t whoAmI(){
 800802c:	b580      	push	{r7, lr}
 800802e:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readRegisters(WHO_AM_I,1,_buffer);
 8008030:	2375      	movs	r3, #117	; 0x75
 8008032:	4a04      	ldr	r2, [pc, #16]	; (8008044 <whoAmI+0x18>)
 8008034:	2101      	movs	r1, #1
 8008036:	4618      	mov	r0, r3
 8008038:	f7ff ff93 	bl	8007f62 <readRegisters>

	// return the register value
	return _buffer[0];
 800803c:	4b01      	ldr	r3, [pc, #4]	; (8008044 <whoAmI+0x18>)
 800803e:	781b      	ldrb	r3, [r3, #0]
}
 8008040:	4618      	mov	r0, r3
 8008042:	bd80      	pop	{r7, pc}
 8008044:	200060c8 	.word	0x200060c8

08008048 <whoAmIAK8963>:

/* gets the AK8963 WHO_AM_I register value, expected to be 0x48 */
static int whoAmIAK8963(){
 8008048:	b580      	push	{r7, lr}
 800804a:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readAK8963Registers(AK8963_WHO_AM_I,1,_buffer);
 800804c:	2300      	movs	r3, #0
 800804e:	4a04      	ldr	r2, [pc, #16]	; (8008060 <whoAmIAK8963+0x18>)
 8008050:	2101      	movs	r1, #1
 8008052:	4618      	mov	r0, r3
 8008054:	f7ff ffbf 	bl	8007fd6 <readAK8963Registers>
	// return the register value
	return _buffer[0];
 8008058:	4b01      	ldr	r3, [pc, #4]	; (8008060 <whoAmIAK8963+0x18>)
 800805a:	781b      	ldrb	r3, [r3, #0]
}
 800805c:	4618      	mov	r0, r3
 800805e:	bd80      	pop	{r7, pc}
 8008060:	200060c8 	.word	0x200060c8

08008064 <MPU9250_Init>:

/* starts communication with the MPU-9250 */
uint8_t MPU9250_Init()
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b082      	sub	sp, #8
 8008068:	af00      	add	r7, sp, #0
	#ifndef USE_SPI
	int tries = 0;
 800806a:	2300      	movs	r3, #0
 800806c:	607b      	str	r3, [r7, #4]
	while(MPU9250_IsConnected() == false && tries < 5)
 800806e:	e005      	b.n	800807c <MPU9250_Init+0x18>
	{
		tries++;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	3301      	adds	r3, #1
 8008074:	607b      	str	r3, [r7, #4]
		HAL_Delay(100);
 8008076:	2064      	movs	r0, #100	; 0x64
 8008078:	f000 fa56 	bl	8008528 <HAL_Delay>
	while(MPU9250_IsConnected() == false && tries < 5)
 800807c:	f7ff ff08 	bl	8007e90 <MPU9250_IsConnected>
 8008080:	4603      	mov	r3, r0
 8008082:	f083 0301 	eor.w	r3, r3, #1
 8008086:	b2db      	uxtb	r3, r3
 8008088:	2b00      	cmp	r3, #0
 800808a:	d002      	beq.n	8008092 <MPU9250_Init+0x2e>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2b04      	cmp	r3, #4
 8008090:	ddee      	ble.n	8008070 <MPU9250_Init+0xc>
	}
	if(tries == 5)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2b05      	cmp	r3, #5
 8008096:	d101      	bne.n	800809c <MPU9250_Init+0x38>
	{
		return 1;
 8008098:	2301      	movs	r3, #1
 800809a:	e0a5      	b.n	80081e8 <MPU9250_Init+0x184>
	}
	#endif
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL);
 800809c:	236b      	movs	r3, #107	; 0x6b
 800809e:	2201      	movs	r2, #1
 80080a0:	4611      	mov	r1, r2
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7ff ff48 	bl	8007f38 <writeRegister>
	// enable I2C master mode
	writeRegister(USER_CTRL, I2C_MST_EN);
 80080a8:	236a      	movs	r3, #106	; 0x6a
 80080aa:	2220      	movs	r2, #32
 80080ac:	4611      	mov	r1, r2
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7ff ff42 	bl	8007f38 <writeRegister>
	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL, I2C_MST_CLK);
 80080b4:	2324      	movs	r3, #36	; 0x24
 80080b6:	220d      	movs	r2, #13
 80080b8:	4611      	mov	r1, r2
 80080ba:	4618      	mov	r0, r3
 80080bc:	f7ff ff3c 	bl	8007f38 <writeRegister>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 80080c0:	230a      	movs	r3, #10
 80080c2:	2200      	movs	r2, #0
 80080c4:	4611      	mov	r1, r2
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7ff ff5e 	bl	8007f88 <writeAK8963Register>
	// reset the MPU9250
	writeRegister(PWR_MGMNT_1,PWR_RESET);
 80080cc:	236b      	movs	r3, #107	; 0x6b
 80080ce:	2280      	movs	r2, #128	; 0x80
 80080d0:	4611      	mov	r1, r2
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7ff ff30 	bl	8007f38 <writeRegister>
	// wait for MPU-9250 to come back up
	HAL_Delay(10);
 80080d8:	200a      	movs	r0, #10
 80080da:	f000 fa25 	bl	8008528 <HAL_Delay>
	// reset the AK8963
	writeAK8963Register(AK8963_CNTL2,AK8963_RESET);
 80080de:	230b      	movs	r3, #11
 80080e0:	2201      	movs	r2, #1
 80080e2:	4611      	mov	r1, r2
 80080e4:	4618      	mov	r0, r3
 80080e6:	f7ff ff4f 	bl	8007f88 <writeAK8963Register>
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL);
 80080ea:	236b      	movs	r3, #107	; 0x6b
 80080ec:	2201      	movs	r2, #1
 80080ee:	4611      	mov	r1, r2
 80080f0:	4618      	mov	r0, r3
 80080f2:	f7ff ff21 	bl	8007f38 <writeRegister>

	// check the WHO AM I byte, expected value is 0x71 (decimal 113) or 0x73 (decimal 115)
	uint8_t who = whoAmI();
 80080f6:	f7ff ff99 	bl	800802c <whoAmI>
 80080fa:	4603      	mov	r3, r0
 80080fc:	70fb      	strb	r3, [r7, #3]
	if((who != 0x71) && ( who != 0x73))
 80080fe:	78fb      	ldrb	r3, [r7, #3]
 8008100:	2b71      	cmp	r3, #113	; 0x71
 8008102:	d004      	beq.n	800810e <MPU9250_Init+0xaa>
 8008104:	78fb      	ldrb	r3, [r7, #3]
 8008106:	2b73      	cmp	r3, #115	; 0x73
 8008108:	d001      	beq.n	800810e <MPU9250_Init+0xaa>
	{
		return 1;
 800810a:	2301      	movs	r3, #1
 800810c:	e06c      	b.n	80081e8 <MPU9250_Init+0x184>
	}

	// enable accelerometer and gyro
	writeRegister(PWR_MGMNT_2,SEN_ENABLE);
 800810e:	236c      	movs	r3, #108	; 0x6c
 8008110:	2200      	movs	r2, #0
 8008112:	4611      	mov	r1, r2
 8008114:	4618      	mov	r0, r3
 8008116:	f7ff ff0f 	bl	8007f38 <writeRegister>

	// setting accel range to 16G as default
	writeRegister(ACCEL_CONFIG,ACCEL_FS_SEL_16G);
 800811a:	231c      	movs	r3, #28
 800811c:	2218      	movs	r2, #24
 800811e:	4611      	mov	r1, r2
 8008120:	4618      	mov	r0, r3
 8008122:	f7ff ff09 	bl	8007f38 <writeRegister>

	// setting the gyro range to 2000DPS as default
	writeRegister(GYRO_CONFIG,GYRO_FS_SEL_2000DPS);
 8008126:	231b      	movs	r3, #27
 8008128:	2218      	movs	r2, #24
 800812a:	4611      	mov	r1, r2
 800812c:	4618      	mov	r0, r3
 800812e:	f7ff ff03 	bl	8007f38 <writeRegister>

	// setting bandwidth to 184Hz as default
	writeRegister(ACCEL_CONFIG2,DLPF_184);
 8008132:	231d      	movs	r3, #29
 8008134:	2201      	movs	r2, #1
 8008136:	4611      	mov	r1, r2
 8008138:	4618      	mov	r0, r3
 800813a:	f7ff fefd 	bl	8007f38 <writeRegister>

	// setting gyro bandwidth to 184Hz
	writeRegister(CONFIG,DLPF_184);
 800813e:	231a      	movs	r3, #26
 8008140:	2201      	movs	r2, #1
 8008142:	4611      	mov	r1, r2
 8008144:	4618      	mov	r0, r3
 8008146:	f7ff fef7 	bl	8007f38 <writeRegister>

	// setting the sample rate divider to 0 as default
	writeRegister(SMPDIV,0x00);
 800814a:	2319      	movs	r3, #25
 800814c:	2100      	movs	r1, #0
 800814e:	4618      	mov	r0, r3
 8008150:	f7ff fef2 	bl	8007f38 <writeRegister>

	// enable I2C master mode
	writeRegister(USER_CTRL,I2C_MST_EN);
 8008154:	236a      	movs	r3, #106	; 0x6a
 8008156:	2220      	movs	r2, #32
 8008158:	4611      	mov	r1, r2
 800815a:	4618      	mov	r0, r3
 800815c:	f7ff feec 	bl	8007f38 <writeRegister>

	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL,I2C_MST_CLK);
 8008160:	2324      	movs	r3, #36	; 0x24
 8008162:	220d      	movs	r2, #13
 8008164:	4611      	mov	r1, r2
 8008166:	4618      	mov	r0, r3
 8008168:	f7ff fee6 	bl	8007f38 <writeRegister>

	// check AK8963 WHO AM I register, expected value is 0x48 (decimal 72)
	if( whoAmIAK8963() != 0x48 )
 800816c:	f7ff ff6c 	bl	8008048 <whoAmIAK8963>
 8008170:	4603      	mov	r3, r0
 8008172:	2b48      	cmp	r3, #72	; 0x48
 8008174:	d001      	beq.n	800817a <MPU9250_Init+0x116>
	{
		return 1;
 8008176:	2301      	movs	r3, #1
 8008178:	e036      	b.n	80081e8 <MPU9250_Init+0x184>
	}

	/* get the magnetometer calibration */
	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 800817a:	230a      	movs	r3, #10
 800817c:	2200      	movs	r2, #0
 800817e:	4611      	mov	r1, r2
 8008180:	4618      	mov	r0, r3
 8008182:	f7ff ff01 	bl	8007f88 <writeAK8963Register>

	HAL_Delay(100); // long wait between AK8963 mode changes
 8008186:	2064      	movs	r0, #100	; 0x64
 8008188:	f000 f9ce 	bl	8008528 <HAL_Delay>

	// set AK8963 to FUSE ROM access
	writeAK8963Register(AK8963_CNTL1,AK8963_FUSE_ROM);
 800818c:	230a      	movs	r3, #10
 800818e:	220f      	movs	r2, #15
 8008190:	4611      	mov	r1, r2
 8008192:	4618      	mov	r0, r3
 8008194:	f7ff fef8 	bl	8007f88 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8008198:	2064      	movs	r0, #100	; 0x64
 800819a:	f000 f9c5 	bl	8008528 <HAL_Delay>

	// read the AK8963 ASA registers and compute magnetometer scale factors
	readAK8963Registers(AK8963_ASA, 3, _mag_adjust);
 800819e:	2310      	movs	r3, #16
 80081a0:	4a13      	ldr	r2, [pc, #76]	; (80081f0 <MPU9250_Init+0x18c>)
 80081a2:	2103      	movs	r1, #3
 80081a4:	4618      	mov	r0, r3
 80081a6:	f7ff ff16 	bl	8007fd6 <readAK8963Registers>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 80081aa:	230a      	movs	r3, #10
 80081ac:	2200      	movs	r2, #0
 80081ae:	4611      	mov	r1, r2
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7ff fee9 	bl	8007f88 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 80081b6:	2064      	movs	r0, #100	; 0x64
 80081b8:	f000 f9b6 	bl	8008528 <HAL_Delay>

	// set AK8963 to 16 bit resolution, 100 Hz update rate
	writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS2);
 80081bc:	230a      	movs	r3, #10
 80081be:	2216      	movs	r2, #22
 80081c0:	4611      	mov	r1, r2
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7ff fee0 	bl	8007f88 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 80081c8:	2064      	movs	r0, #100	; 0x64
 80081ca:	f000 f9ad 	bl	8008528 <HAL_Delay>

	// select clock source to gyro
	writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL);
 80081ce:	236b      	movs	r3, #107	; 0x6b
 80081d0:	2201      	movs	r2, #1
 80081d2:	4611      	mov	r1, r2
 80081d4:	4618      	mov	r0, r3
 80081d6:	f7ff feaf 	bl	8007f38 <writeRegister>

	// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
	readAK8963Registers(AK8963_HXL,7,_buffer);
 80081da:	2303      	movs	r3, #3
 80081dc:	4a05      	ldr	r2, [pc, #20]	; (80081f4 <MPU9250_Init+0x190>)
 80081de:	2107      	movs	r1, #7
 80081e0:	4618      	mov	r0, r3
 80081e2:	f7ff fef8 	bl	8007fd6 <readAK8963Registers>

	// successful init, return 0
	return 0;
 80081e6:	2300      	movs	r3, #0
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3708      	adds	r7, #8
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	200060e0 	.word	0x200060e0
 80081f4:	200060c8 	.word	0x200060c8

080081f8 <MPU9250_GetData>:
	writeRegister(SMPDIV, srd);
}

/* read the data, each argiment should point to a array for x, y, and x */
void MPU9250_GetData(int16_t* AccData, int16_t* MagData, int16_t* GyroData)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b086      	sub	sp, #24
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	60b9      	str	r1, [r7, #8]
 8008202:	607a      	str	r2, [r7, #4]
	// grab the data from the MPU9250
	readRegisters(ACCEL_OUT, 21, _buffer);
 8008204:	233b      	movs	r3, #59	; 0x3b
 8008206:	4a63      	ldr	r2, [pc, #396]	; (8008394 <MPU9250_GetData+0x19c>)
 8008208:	2115      	movs	r1, #21
 800820a:	4618      	mov	r0, r3
 800820c:	f7ff fea9 	bl	8007f62 <readRegisters>

	// combine into 16 bit values
	AccData[0] = (((int16_t)_buffer[0]) << 8) | _buffer[1];
 8008210:	4b60      	ldr	r3, [pc, #384]	; (8008394 <MPU9250_GetData+0x19c>)
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	021b      	lsls	r3, r3, #8
 8008216:	b21a      	sxth	r2, r3
 8008218:	4b5e      	ldr	r3, [pc, #376]	; (8008394 <MPU9250_GetData+0x19c>)
 800821a:	785b      	ldrb	r3, [r3, #1]
 800821c:	b21b      	sxth	r3, r3
 800821e:	4313      	orrs	r3, r2
 8008220:	b21a      	sxth	r2, r3
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	801a      	strh	r2, [r3, #0]
	AccData[1] = (((int16_t)_buffer[2]) << 8) | _buffer[3];
 8008226:	4b5b      	ldr	r3, [pc, #364]	; (8008394 <MPU9250_GetData+0x19c>)
 8008228:	789b      	ldrb	r3, [r3, #2]
 800822a:	021b      	lsls	r3, r3, #8
 800822c:	b219      	sxth	r1, r3
 800822e:	4b59      	ldr	r3, [pc, #356]	; (8008394 <MPU9250_GetData+0x19c>)
 8008230:	78db      	ldrb	r3, [r3, #3]
 8008232:	b21a      	sxth	r2, r3
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	3302      	adds	r3, #2
 8008238:	430a      	orrs	r2, r1
 800823a:	b212      	sxth	r2, r2
 800823c:	801a      	strh	r2, [r3, #0]
	AccData[2] = (((int16_t)_buffer[4]) << 8) | _buffer[5];
 800823e:	4b55      	ldr	r3, [pc, #340]	; (8008394 <MPU9250_GetData+0x19c>)
 8008240:	791b      	ldrb	r3, [r3, #4]
 8008242:	021b      	lsls	r3, r3, #8
 8008244:	b219      	sxth	r1, r3
 8008246:	4b53      	ldr	r3, [pc, #332]	; (8008394 <MPU9250_GetData+0x19c>)
 8008248:	795b      	ldrb	r3, [r3, #5]
 800824a:	b21a      	sxth	r2, r3
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	3304      	adds	r3, #4
 8008250:	430a      	orrs	r2, r1
 8008252:	b212      	sxth	r2, r2
 8008254:	801a      	strh	r2, [r3, #0]
	GyroData[0] = (((int16_t)_buffer[8]) << 8) | _buffer[9];
 8008256:	4b4f      	ldr	r3, [pc, #316]	; (8008394 <MPU9250_GetData+0x19c>)
 8008258:	7a1b      	ldrb	r3, [r3, #8]
 800825a:	021b      	lsls	r3, r3, #8
 800825c:	b21a      	sxth	r2, r3
 800825e:	4b4d      	ldr	r3, [pc, #308]	; (8008394 <MPU9250_GetData+0x19c>)
 8008260:	7a5b      	ldrb	r3, [r3, #9]
 8008262:	b21b      	sxth	r3, r3
 8008264:	4313      	orrs	r3, r2
 8008266:	b21a      	sxth	r2, r3
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	801a      	strh	r2, [r3, #0]
	GyroData[1] = (((int16_t)_buffer[10]) << 8) | _buffer[11];
 800826c:	4b49      	ldr	r3, [pc, #292]	; (8008394 <MPU9250_GetData+0x19c>)
 800826e:	7a9b      	ldrb	r3, [r3, #10]
 8008270:	021b      	lsls	r3, r3, #8
 8008272:	b219      	sxth	r1, r3
 8008274:	4b47      	ldr	r3, [pc, #284]	; (8008394 <MPU9250_GetData+0x19c>)
 8008276:	7adb      	ldrb	r3, [r3, #11]
 8008278:	b21a      	sxth	r2, r3
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	3302      	adds	r3, #2
 800827e:	430a      	orrs	r2, r1
 8008280:	b212      	sxth	r2, r2
 8008282:	801a      	strh	r2, [r3, #0]
	GyroData[2] = (((int16_t)_buffer[12]) << 8) | _buffer[13];
 8008284:	4b43      	ldr	r3, [pc, #268]	; (8008394 <MPU9250_GetData+0x19c>)
 8008286:	7b1b      	ldrb	r3, [r3, #12]
 8008288:	021b      	lsls	r3, r3, #8
 800828a:	b219      	sxth	r1, r3
 800828c:	4b41      	ldr	r3, [pc, #260]	; (8008394 <MPU9250_GetData+0x19c>)
 800828e:	7b5b      	ldrb	r3, [r3, #13]
 8008290:	b21a      	sxth	r2, r3
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	3304      	adds	r3, #4
 8008296:	430a      	orrs	r2, r1
 8008298:	b212      	sxth	r2, r2
 800829a:	801a      	strh	r2, [r3, #0]

	int16_t magx = (((int16_t)_buffer[15]) << 8) | _buffer[14];
 800829c:	4b3d      	ldr	r3, [pc, #244]	; (8008394 <MPU9250_GetData+0x19c>)
 800829e:	7bdb      	ldrb	r3, [r3, #15]
 80082a0:	021b      	lsls	r3, r3, #8
 80082a2:	b21a      	sxth	r2, r3
 80082a4:	4b3b      	ldr	r3, [pc, #236]	; (8008394 <MPU9250_GetData+0x19c>)
 80082a6:	7b9b      	ldrb	r3, [r3, #14]
 80082a8:	b21b      	sxth	r3, r3
 80082aa:	4313      	orrs	r3, r2
 80082ac:	82fb      	strh	r3, [r7, #22]
	int16_t magy = (((int16_t)_buffer[17]) << 8) | _buffer[16];
 80082ae:	4b39      	ldr	r3, [pc, #228]	; (8008394 <MPU9250_GetData+0x19c>)
 80082b0:	7c5b      	ldrb	r3, [r3, #17]
 80082b2:	021b      	lsls	r3, r3, #8
 80082b4:	b21a      	sxth	r2, r3
 80082b6:	4b37      	ldr	r3, [pc, #220]	; (8008394 <MPU9250_GetData+0x19c>)
 80082b8:	7c1b      	ldrb	r3, [r3, #16]
 80082ba:	b21b      	sxth	r3, r3
 80082bc:	4313      	orrs	r3, r2
 80082be:	82bb      	strh	r3, [r7, #20]
	int16_t magz = (((int16_t)_buffer[19]) << 8) | _buffer[18];
 80082c0:	4b34      	ldr	r3, [pc, #208]	; (8008394 <MPU9250_GetData+0x19c>)
 80082c2:	7cdb      	ldrb	r3, [r3, #19]
 80082c4:	021b      	lsls	r3, r3, #8
 80082c6:	b21a      	sxth	r2, r3
 80082c8:	4b32      	ldr	r3, [pc, #200]	; (8008394 <MPU9250_GetData+0x19c>)
 80082ca:	7c9b      	ldrb	r3, [r3, #18]
 80082cc:	b21b      	sxth	r3, r3
 80082ce:	4313      	orrs	r3, r2
 80082d0:	827b      	strh	r3, [r7, #18]

	MagData[0] = (int16_t)((float)magx * ((float)(_mag_adjust[0] - 128) / 256.0f + 1.0f));
 80082d2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80082d6:	ee07 3a90 	vmov	s15, r3
 80082da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80082de:	4b2e      	ldr	r3, [pc, #184]	; (8008398 <MPU9250_GetData+0x1a0>)
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	3b80      	subs	r3, #128	; 0x80
 80082e4:	ee07 3a90 	vmov	s15, r3
 80082e8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80082ec:	ed9f 6a2b 	vldr	s12, [pc, #172]	; 800839c <MPU9250_GetData+0x1a4>
 80082f0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80082f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008300:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008304:	ee17 3a90 	vmov	r3, s15
 8008308:	b21a      	sxth	r2, r3
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	801a      	strh	r2, [r3, #0]
	MagData[1] = (int16_t)((float)magy * ((float)(_mag_adjust[1] - 128) / 256.0f + 1.0f));
 800830e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008312:	ee07 3a90 	vmov	s15, r3
 8008316:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800831a:	4b1f      	ldr	r3, [pc, #124]	; (8008398 <MPU9250_GetData+0x1a0>)
 800831c:	785b      	ldrb	r3, [r3, #1]
 800831e:	3b80      	subs	r3, #128	; 0x80
 8008320:	ee07 3a90 	vmov	s15, r3
 8008324:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008328:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 800839c <MPU9250_GetData+0x1a4>
 800832c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8008330:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008334:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008338:	ee67 7a27 	vmul.f32	s15, s14, s15
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	3302      	adds	r3, #2
 8008340:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008344:	ee17 2a90 	vmov	r2, s15
 8008348:	b212      	sxth	r2, r2
 800834a:	801a      	strh	r2, [r3, #0]
	MagData[2] = (int16_t)((float)magz * ((float)(_mag_adjust[2] - 128) / 256.0f + 1.0f));
 800834c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008350:	ee07 3a90 	vmov	s15, r3
 8008354:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008358:	4b0f      	ldr	r3, [pc, #60]	; (8008398 <MPU9250_GetData+0x1a0>)
 800835a:	789b      	ldrb	r3, [r3, #2]
 800835c:	3b80      	subs	r3, #128	; 0x80
 800835e:	ee07 3a90 	vmov	s15, r3
 8008362:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008366:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 800839c <MPU9250_GetData+0x1a4>
 800836a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800836e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	3304      	adds	r3, #4
 800837e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008382:	ee17 2a90 	vmov	r2, s15
 8008386:	b212      	sxth	r2, r2
 8008388:	801a      	strh	r2, [r3, #0]
}
 800838a:	bf00      	nop
 800838c:	3718      	adds	r7, #24
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop
 8008394:	200060c8 	.word	0x200060c8
 8008398:	200060e0 	.word	0x200060e0
 800839c:	43800000 	.word	0x43800000

080083a0 <TeleBackInit>:

int TeleBackAnyDataReady(TeleBackData tele){
	return tele.ABSLRReady || tele.ABSRRReady || tele.DamperLRReady || tele.DamperRRReady;
}

void TeleBackInit(TeleBackData * tele){
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b084      	sub	sp, #16
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]

	tele->File = (FIL*)malloc(sizeof(FIL));
 80083a8:	f241 0030 	movw	r0, #4144	; 0x1030
 80083ac:	f00d fd7c 	bl	8015ea8 <malloc>
 80083b0:	4603      	mov	r3, r0
 80083b2:	461a      	mov	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	601a      	str	r2, [r3, #0]

	RTC_DateTypeDef date;
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80083b8:	f107 030c 	add.w	r3, r7, #12
 80083bc:	2200      	movs	r2, #0
 80083be:	4619      	mov	r1, r3
 80083c0:	4814      	ldr	r0, [pc, #80]	; (8008414 <TeleBackInit+0x74>)
 80083c2:	f004 ff5f 	bl	800d284 <HAL_RTC_GetDate>
	sprintf(tele->path,"Tele%02d%02d.csv",date.Date,date.Month);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	1d18      	adds	r0, r3, #4
 80083ca:	7bbb      	ldrb	r3, [r7, #14]
 80083cc:	461a      	mov	r2, r3
 80083ce:	7b7b      	ldrb	r3, [r7, #13]
 80083d0:	4911      	ldr	r1, [pc, #68]	; (8008418 <TeleBackInit+0x78>)
 80083d2:	f00e fd5b 	bl	8016e8c <siprintf>
	tele->ABSLRReady = 0;
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	7f13      	ldrb	r3, [r2, #28]
 80083da:	f36f 0300 	bfc	r3, #0, #1
 80083de:	7713      	strb	r3, [r2, #28]
	tele->ABSRRReady = 0;
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80083e6:	f36f 0300 	bfc	r3, #0, #1
 80083ea:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	tele->DamperLRReady = 0;
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80083f4:	f36f 0300 	bfc	r3, #0, #1
 80083f8:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
	tele->DamperRRReady = 0;
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8008402:	f36f 0300 	bfc	r3, #0, #1
 8008406:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34

}
 800840a:	bf00      	nop
 800840c:	3710      	adds	r7, #16
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
 8008412:	bf00      	nop
 8008414:	200016e0 	.word	0x200016e0
 8008418:	0801b24c 	.word	0x0801b24c

0800841c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800841c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008454 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008420:	480d      	ldr	r0, [pc, #52]	; (8008458 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8008422:	490e      	ldr	r1, [pc, #56]	; (800845c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8008424:	4a0e      	ldr	r2, [pc, #56]	; (8008460 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8008426:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008428:	e002      	b.n	8008430 <LoopCopyDataInit>

0800842a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800842a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800842c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800842e:	3304      	adds	r3, #4

08008430 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008430:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008432:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008434:	d3f9      	bcc.n	800842a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008436:	4a0b      	ldr	r2, [pc, #44]	; (8008464 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8008438:	4c0b      	ldr	r4, [pc, #44]	; (8008468 <LoopFillZerobss+0x26>)
  movs r3, #0
 800843a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800843c:	e001      	b.n	8008442 <LoopFillZerobss>

0800843e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800843e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008440:	3204      	adds	r2, #4

08008442 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008442:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008444:	d3fb      	bcc.n	800843e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8008446:	f7fa fb53 	bl	8002af0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800844a:	f00d fd09 	bl	8015e60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800844e:	f7f9 fd59 	bl	8001f04 <main>
  bx  lr    
 8008452:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008454:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8008458:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800845c:	200002f0 	.word	0x200002f0
  ldr r2, =_sidata
 8008460:	0801d4c0 	.word	0x0801d4c0
  ldr r2, =_sbss
 8008464:	200002f0 	.word	0x200002f0
  ldr r4, =_ebss
 8008468:	200061c0 	.word	0x200061c0

0800846c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800846c:	e7fe      	b.n	800846c <ADC_IRQHandler>

0800846e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800846e:	b580      	push	{r7, lr}
 8008470:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008472:	2003      	movs	r0, #3
 8008474:	f001 fbf8 	bl	8009c68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008478:	200f      	movs	r0, #15
 800847a:	f000 f805 	bl	8008488 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800847e:	f7fa f983 	bl	8002788 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008482:	2300      	movs	r3, #0
}
 8008484:	4618      	mov	r0, r3
 8008486:	bd80      	pop	{r7, pc}

08008488 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008490:	4b12      	ldr	r3, [pc, #72]	; (80084dc <HAL_InitTick+0x54>)
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	4b12      	ldr	r3, [pc, #72]	; (80084e0 <HAL_InitTick+0x58>)
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	4619      	mov	r1, r3
 800849a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800849e:	fbb3 f3f1 	udiv	r3, r3, r1
 80084a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80084a6:	4618      	mov	r0, r3
 80084a8:	f001 fc21 	bl	8009cee <HAL_SYSTICK_Config>
 80084ac:	4603      	mov	r3, r0
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d001      	beq.n	80084b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80084b2:	2301      	movs	r3, #1
 80084b4:	e00e      	b.n	80084d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2b0f      	cmp	r3, #15
 80084ba:	d80a      	bhi.n	80084d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80084bc:	2200      	movs	r2, #0
 80084be:	6879      	ldr	r1, [r7, #4]
 80084c0:	f04f 30ff 	mov.w	r0, #4294967295
 80084c4:	f001 fbdb 	bl	8009c7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80084c8:	4a06      	ldr	r2, [pc, #24]	; (80084e4 <HAL_InitTick+0x5c>)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80084ce:	2300      	movs	r3, #0
 80084d0:	e000      	b.n	80084d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80084d2:	2301      	movs	r3, #1
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3708      	adds	r7, #8
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}
 80084dc:	20000104 	.word	0x20000104
 80084e0:	20000118 	.word	0x20000118
 80084e4:	20000114 	.word	0x20000114

080084e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80084e8:	b480      	push	{r7}
 80084ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80084ec:	4b06      	ldr	r3, [pc, #24]	; (8008508 <HAL_IncTick+0x20>)
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	461a      	mov	r2, r3
 80084f2:	4b06      	ldr	r3, [pc, #24]	; (800850c <HAL_IncTick+0x24>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4413      	add	r3, r2
 80084f8:	4a04      	ldr	r2, [pc, #16]	; (800850c <HAL_IncTick+0x24>)
 80084fa:	6013      	str	r3, [r2, #0]
}
 80084fc:	bf00      	nop
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr
 8008506:	bf00      	nop
 8008508:	20000118 	.word	0x20000118
 800850c:	200060e4 	.word	0x200060e4

08008510 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008510:	b480      	push	{r7}
 8008512:	af00      	add	r7, sp, #0
  return uwTick;
 8008514:	4b03      	ldr	r3, [pc, #12]	; (8008524 <HAL_GetTick+0x14>)
 8008516:	681b      	ldr	r3, [r3, #0]
}
 8008518:	4618      	mov	r0, r3
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr
 8008522:	bf00      	nop
 8008524:	200060e4 	.word	0x200060e4

08008528 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b084      	sub	sp, #16
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008530:	f7ff ffee 	bl	8008510 <HAL_GetTick>
 8008534:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008540:	d005      	beq.n	800854e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008542:	4b0a      	ldr	r3, [pc, #40]	; (800856c <HAL_Delay+0x44>)
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	461a      	mov	r2, r3
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	4413      	add	r3, r2
 800854c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800854e:	bf00      	nop
 8008550:	f7ff ffde 	bl	8008510 <HAL_GetTick>
 8008554:	4602      	mov	r2, r0
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	1ad3      	subs	r3, r2, r3
 800855a:	68fa      	ldr	r2, [r7, #12]
 800855c:	429a      	cmp	r2, r3
 800855e:	d8f7      	bhi.n	8008550 <HAL_Delay+0x28>
  {
  }
}
 8008560:	bf00      	nop
 8008562:	bf00      	nop
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	20000118 	.word	0x20000118

08008570 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b084      	sub	sp, #16
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008578:	2300      	movs	r3, #0
 800857a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d101      	bne.n	8008586 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008582:	2301      	movs	r3, #1
 8008584:	e031      	b.n	80085ea <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800858a:	2b00      	cmp	r3, #0
 800858c:	d109      	bne.n	80085a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f7f8 fb44 	bl	8000c1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2200      	movs	r2, #0
 8008598:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a6:	f003 0310 	and.w	r3, r3, #16
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d116      	bne.n	80085dc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80085b2:	4b10      	ldr	r3, [pc, #64]	; (80085f4 <HAL_ADC_Init+0x84>)
 80085b4:	4013      	ands	r3, r2
 80085b6:	f043 0202 	orr.w	r2, r3, #2
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 fa88 	bl	8008ad4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ce:	f023 0303 	bic.w	r3, r3, #3
 80085d2:	f043 0201 	orr.w	r2, r3, #1
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	641a      	str	r2, [r3, #64]	; 0x40
 80085da:	e001      	b.n	80085e0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80085e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3710      	adds	r7, #16
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	ffffeefd 	.word	0xffffeefd

080085f8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b086      	sub	sp, #24
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8008604:	2300      	movs	r3, #0
 8008606:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800860e:	2b01      	cmp	r3, #1
 8008610:	d101      	bne.n	8008616 <HAL_ADC_Start_DMA+0x1e>
 8008612:	2302      	movs	r3, #2
 8008614:	e0d4      	b.n	80087c0 <HAL_ADC_Start_DMA+0x1c8>
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2201      	movs	r2, #1
 800861a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	f003 0301 	and.w	r3, r3, #1
 8008628:	2b01      	cmp	r3, #1
 800862a:	d018      	beq.n	800865e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	689a      	ldr	r2, [r3, #8]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f042 0201 	orr.w	r2, r2, #1
 800863a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800863c:	4b62      	ldr	r3, [pc, #392]	; (80087c8 <HAL_ADC_Start_DMA+0x1d0>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a62      	ldr	r2, [pc, #392]	; (80087cc <HAL_ADC_Start_DMA+0x1d4>)
 8008642:	fba2 2303 	umull	r2, r3, r2, r3
 8008646:	0c9a      	lsrs	r2, r3, #18
 8008648:	4613      	mov	r3, r2
 800864a:	005b      	lsls	r3, r3, #1
 800864c:	4413      	add	r3, r2
 800864e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8008650:	e002      	b.n	8008658 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	3b01      	subs	r3, #1
 8008656:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1f9      	bne.n	8008652 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	f003 0301 	and.w	r3, r3, #1
 8008668:	2b01      	cmp	r3, #1
 800866a:	f040 809c 	bne.w	80087a6 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008672:	4b57      	ldr	r3, [pc, #348]	; (80087d0 <HAL_ADC_Start_DMA+0x1d8>)
 8008674:	4013      	ands	r3, r2
 8008676:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008688:	2b00      	cmp	r3, #0
 800868a:	d007      	beq.n	800869c <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008690:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008694:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80086a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086a8:	d106      	bne.n	80086b8 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086ae:	f023 0206 	bic.w	r2, r3, #6
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	645a      	str	r2, [r3, #68]	; 0x44
 80086b6:	e002      	b.n	80086be <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2200      	movs	r2, #0
 80086bc:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2200      	movs	r2, #0
 80086c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ca:	4a42      	ldr	r2, [pc, #264]	; (80087d4 <HAL_ADC_Start_DMA+0x1dc>)
 80086cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086d2:	4a41      	ldr	r2, [pc, #260]	; (80087d8 <HAL_ADC_Start_DMA+0x1e0>)
 80086d4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086da:	4a40      	ldr	r2, [pc, #256]	; (80087dc <HAL_ADC_Start_DMA+0x1e4>)
 80086dc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80086e6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	685a      	ldr	r2, [r3, #4]
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80086f6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	689a      	ldr	r2, [r3, #8]
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008706:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	334c      	adds	r3, #76	; 0x4c
 8008712:	4619      	mov	r1, r3
 8008714:	68ba      	ldr	r2, [r7, #8]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f001 fba4 	bl	8009e64 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800871c:	4b30      	ldr	r3, [pc, #192]	; (80087e0 <HAL_ADC_Start_DMA+0x1e8>)
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	f003 031f 	and.w	r3, r3, #31
 8008724:	2b00      	cmp	r3, #0
 8008726:	d10f      	bne.n	8008748 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008732:	2b00      	cmp	r3, #0
 8008734:	d143      	bne.n	80087be <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	689a      	ldr	r2, [r3, #8]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008744:	609a      	str	r2, [r3, #8]
 8008746:	e03a      	b.n	80087be <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a25      	ldr	r2, [pc, #148]	; (80087e4 <HAL_ADC_Start_DMA+0x1ec>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d10e      	bne.n	8008770 <HAL_ADC_Start_DMA+0x178>
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800875c:	2b00      	cmp	r3, #0
 800875e:	d107      	bne.n	8008770 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	689a      	ldr	r2, [r3, #8]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800876e:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8008770:	4b1b      	ldr	r3, [pc, #108]	; (80087e0 <HAL_ADC_Start_DMA+0x1e8>)
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	f003 0310 	and.w	r3, r3, #16
 8008778:	2b00      	cmp	r3, #0
 800877a:	d120      	bne.n	80087be <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a19      	ldr	r2, [pc, #100]	; (80087e8 <HAL_ADC_Start_DMA+0x1f0>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d11b      	bne.n	80087be <HAL_ADC_Start_DMA+0x1c6>
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008790:	2b00      	cmp	r3, #0
 8008792:	d114      	bne.n	80087be <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	689a      	ldr	r2, [r3, #8]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80087a2:	609a      	str	r2, [r3, #8]
 80087a4:	e00b      	b.n	80087be <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087aa:	f043 0210 	orr.w	r2, r3, #16
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087b6:	f043 0201 	orr.w	r2, r3, #1
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3718      	adds	r7, #24
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	20000104 	.word	0x20000104
 80087cc:	431bde83 	.word	0x431bde83
 80087d0:	fffff8fe 	.word	0xfffff8fe
 80087d4:	08008cc9 	.word	0x08008cc9
 80087d8:	08008d83 	.word	0x08008d83
 80087dc:	08008d9f 	.word	0x08008d9f
 80087e0:	40012300 	.word	0x40012300
 80087e4:	40012000 	.word	0x40012000
 80087e8:	40012200 	.word	0x40012200

080087ec <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80087f4:	bf00      	nop
 80087f6:	370c      	adds	r7, #12
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8008808:	bf00      	nop
 800880a:	370c      	adds	r7, #12
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr

08008814 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800881c:	bf00      	nop
 800881e:	370c      	adds	r7, #12
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8008828:	b480      	push	{r7}
 800882a:	b085      	sub	sp, #20
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8008832:	2300      	movs	r3, #0
 8008834:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800883c:	2b01      	cmp	r3, #1
 800883e:	d101      	bne.n	8008844 <HAL_ADC_ConfigChannel+0x1c>
 8008840:	2302      	movs	r3, #2
 8008842:	e136      	b.n	8008ab2 <HAL_ADC_ConfigChannel+0x28a>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2201      	movs	r2, #1
 8008848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2b09      	cmp	r3, #9
 8008852:	d93a      	bls.n	80088ca <HAL_ADC_ConfigChannel+0xa2>
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800885c:	d035      	beq.n	80088ca <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	68d9      	ldr	r1, [r3, #12]
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	b29b      	uxth	r3, r3
 800886a:	461a      	mov	r2, r3
 800886c:	4613      	mov	r3, r2
 800886e:	005b      	lsls	r3, r3, #1
 8008870:	4413      	add	r3, r2
 8008872:	3b1e      	subs	r3, #30
 8008874:	2207      	movs	r2, #7
 8008876:	fa02 f303 	lsl.w	r3, r2, r3
 800887a:	43da      	mvns	r2, r3
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	400a      	ands	r2, r1
 8008882:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a8d      	ldr	r2, [pc, #564]	; (8008ac0 <HAL_ADC_ConfigChannel+0x298>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d10a      	bne.n	80088a4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	68d9      	ldr	r1, [r3, #12]
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	061a      	lsls	r2, r3, #24
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	430a      	orrs	r2, r1
 80088a0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80088a2:	e035      	b.n	8008910 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	68d9      	ldr	r1, [r3, #12]
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	689a      	ldr	r2, [r3, #8]
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	4618      	mov	r0, r3
 80088b6:	4603      	mov	r3, r0
 80088b8:	005b      	lsls	r3, r3, #1
 80088ba:	4403      	add	r3, r0
 80088bc:	3b1e      	subs	r3, #30
 80088be:	409a      	lsls	r2, r3
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	430a      	orrs	r2, r1
 80088c6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80088c8:	e022      	b.n	8008910 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	6919      	ldr	r1, [r3, #16]
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	461a      	mov	r2, r3
 80088d8:	4613      	mov	r3, r2
 80088da:	005b      	lsls	r3, r3, #1
 80088dc:	4413      	add	r3, r2
 80088de:	2207      	movs	r2, #7
 80088e0:	fa02 f303 	lsl.w	r3, r2, r3
 80088e4:	43da      	mvns	r2, r3
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	400a      	ands	r2, r1
 80088ec:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	6919      	ldr	r1, [r3, #16]
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	689a      	ldr	r2, [r3, #8]
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	4618      	mov	r0, r3
 8008900:	4603      	mov	r3, r0
 8008902:	005b      	lsls	r3, r3, #1
 8008904:	4403      	add	r3, r0
 8008906:	409a      	lsls	r2, r3
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	430a      	orrs	r2, r1
 800890e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	2b06      	cmp	r3, #6
 8008916:	d824      	bhi.n	8008962 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	685a      	ldr	r2, [r3, #4]
 8008922:	4613      	mov	r3, r2
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	4413      	add	r3, r2
 8008928:	3b05      	subs	r3, #5
 800892a:	221f      	movs	r2, #31
 800892c:	fa02 f303 	lsl.w	r3, r2, r3
 8008930:	43da      	mvns	r2, r3
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	400a      	ands	r2, r1
 8008938:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	b29b      	uxth	r3, r3
 8008946:	4618      	mov	r0, r3
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	685a      	ldr	r2, [r3, #4]
 800894c:	4613      	mov	r3, r2
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	4413      	add	r3, r2
 8008952:	3b05      	subs	r3, #5
 8008954:	fa00 f203 	lsl.w	r2, r0, r3
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	430a      	orrs	r2, r1
 800895e:	635a      	str	r2, [r3, #52]	; 0x34
 8008960:	e04c      	b.n	80089fc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	2b0c      	cmp	r3, #12
 8008968:	d824      	bhi.n	80089b4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	685a      	ldr	r2, [r3, #4]
 8008974:	4613      	mov	r3, r2
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	4413      	add	r3, r2
 800897a:	3b23      	subs	r3, #35	; 0x23
 800897c:	221f      	movs	r2, #31
 800897e:	fa02 f303 	lsl.w	r3, r2, r3
 8008982:	43da      	mvns	r2, r3
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	400a      	ands	r2, r1
 800898a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	b29b      	uxth	r3, r3
 8008998:	4618      	mov	r0, r3
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	685a      	ldr	r2, [r3, #4]
 800899e:	4613      	mov	r3, r2
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	4413      	add	r3, r2
 80089a4:	3b23      	subs	r3, #35	; 0x23
 80089a6:	fa00 f203 	lsl.w	r2, r0, r3
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	430a      	orrs	r2, r1
 80089b0:	631a      	str	r2, [r3, #48]	; 0x30
 80089b2:	e023      	b.n	80089fc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	685a      	ldr	r2, [r3, #4]
 80089be:	4613      	mov	r3, r2
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	4413      	add	r3, r2
 80089c4:	3b41      	subs	r3, #65	; 0x41
 80089c6:	221f      	movs	r2, #31
 80089c8:	fa02 f303 	lsl.w	r3, r2, r3
 80089cc:	43da      	mvns	r2, r3
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	400a      	ands	r2, r1
 80089d4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	4618      	mov	r0, r3
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	685a      	ldr	r2, [r3, #4]
 80089e8:	4613      	mov	r3, r2
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	4413      	add	r3, r2
 80089ee:	3b41      	subs	r3, #65	; 0x41
 80089f0:	fa00 f203 	lsl.w	r2, r0, r3
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	430a      	orrs	r2, r1
 80089fa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a30      	ldr	r2, [pc, #192]	; (8008ac4 <HAL_ADC_ConfigChannel+0x29c>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d10a      	bne.n	8008a1c <HAL_ADC_ConfigChannel+0x1f4>
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a0e:	d105      	bne.n	8008a1c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8008a10:	4b2d      	ldr	r3, [pc, #180]	; (8008ac8 <HAL_ADC_ConfigChannel+0x2a0>)
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	4a2c      	ldr	r2, [pc, #176]	; (8008ac8 <HAL_ADC_ConfigChannel+0x2a0>)
 8008a16:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8008a1a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a28      	ldr	r2, [pc, #160]	; (8008ac4 <HAL_ADC_ConfigChannel+0x29c>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d10f      	bne.n	8008a46 <HAL_ADC_ConfigChannel+0x21e>
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	2b12      	cmp	r3, #18
 8008a2c:	d10b      	bne.n	8008a46 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8008a2e:	4b26      	ldr	r3, [pc, #152]	; (8008ac8 <HAL_ADC_ConfigChannel+0x2a0>)
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	4a25      	ldr	r2, [pc, #148]	; (8008ac8 <HAL_ADC_ConfigChannel+0x2a0>)
 8008a34:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008a38:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8008a3a:	4b23      	ldr	r3, [pc, #140]	; (8008ac8 <HAL_ADC_ConfigChannel+0x2a0>)
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	4a22      	ldr	r2, [pc, #136]	; (8008ac8 <HAL_ADC_ConfigChannel+0x2a0>)
 8008a40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008a44:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a1e      	ldr	r2, [pc, #120]	; (8008ac4 <HAL_ADC_ConfigChannel+0x29c>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d12b      	bne.n	8008aa8 <HAL_ADC_ConfigChannel+0x280>
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a1a      	ldr	r2, [pc, #104]	; (8008ac0 <HAL_ADC_ConfigChannel+0x298>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d003      	beq.n	8008a62 <HAL_ADC_ConfigChannel+0x23a>
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	2b11      	cmp	r3, #17
 8008a60:	d122      	bne.n	8008aa8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8008a62:	4b19      	ldr	r3, [pc, #100]	; (8008ac8 <HAL_ADC_ConfigChannel+0x2a0>)
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	4a18      	ldr	r2, [pc, #96]	; (8008ac8 <HAL_ADC_ConfigChannel+0x2a0>)
 8008a68:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8008a6c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8008a6e:	4b16      	ldr	r3, [pc, #88]	; (8008ac8 <HAL_ADC_ConfigChannel+0x2a0>)
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	4a15      	ldr	r2, [pc, #84]	; (8008ac8 <HAL_ADC_ConfigChannel+0x2a0>)
 8008a74:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008a78:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a10      	ldr	r2, [pc, #64]	; (8008ac0 <HAL_ADC_ConfigChannel+0x298>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d111      	bne.n	8008aa8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8008a84:	4b11      	ldr	r3, [pc, #68]	; (8008acc <HAL_ADC_ConfigChannel+0x2a4>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a11      	ldr	r2, [pc, #68]	; (8008ad0 <HAL_ADC_ConfigChannel+0x2a8>)
 8008a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8008a8e:	0c9a      	lsrs	r2, r3, #18
 8008a90:	4613      	mov	r3, r2
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	4413      	add	r3, r2
 8008a96:	005b      	lsls	r3, r3, #1
 8008a98:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8008a9a:	e002      	b.n	8008aa2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	3b01      	subs	r3, #1
 8008aa0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d1f9      	bne.n	8008a9c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8008ab0:	2300      	movs	r3, #0
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3714      	adds	r7, #20
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr
 8008abe:	bf00      	nop
 8008ac0:	10000012 	.word	0x10000012
 8008ac4:	40012000 	.word	0x40012000
 8008ac8:	40012300 	.word	0x40012300
 8008acc:	20000104 	.word	0x20000104
 8008ad0:	431bde83 	.word	0x431bde83

08008ad4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b083      	sub	sp, #12
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8008adc:	4b78      	ldr	r3, [pc, #480]	; (8008cc0 <ADC_Init+0x1ec>)
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	4a77      	ldr	r2, [pc, #476]	; (8008cc0 <ADC_Init+0x1ec>)
 8008ae2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008ae6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8008ae8:	4b75      	ldr	r3, [pc, #468]	; (8008cc0 <ADC_Init+0x1ec>)
 8008aea:	685a      	ldr	r2, [r3, #4]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	4973      	ldr	r1, [pc, #460]	; (8008cc0 <ADC_Init+0x1ec>)
 8008af2:	4313      	orrs	r3, r2
 8008af4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	685a      	ldr	r2, [r3, #4]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	6859      	ldr	r1, [r3, #4]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	691b      	ldr	r3, [r3, #16]
 8008b10:	021a      	lsls	r2, r3, #8
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	430a      	orrs	r2, r1
 8008b18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	685a      	ldr	r2, [r3, #4]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8008b28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	6859      	ldr	r1, [r3, #4]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	689a      	ldr	r2, [r3, #8]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	430a      	orrs	r2, r1
 8008b3a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	689a      	ldr	r2, [r3, #8]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	6899      	ldr	r1, [r3, #8]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	68da      	ldr	r2, [r3, #12]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	430a      	orrs	r2, r1
 8008b5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b62:	4a58      	ldr	r2, [pc, #352]	; (8008cc4 <ADC_Init+0x1f0>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d022      	beq.n	8008bae <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	689a      	ldr	r2, [r3, #8]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008b76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	6899      	ldr	r1, [r3, #8]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	430a      	orrs	r2, r1
 8008b88:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	689a      	ldr	r2, [r3, #8]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008b98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	6899      	ldr	r1, [r3, #8]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	430a      	orrs	r2, r1
 8008baa:	609a      	str	r2, [r3, #8]
 8008bac:	e00f      	b.n	8008bce <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	689a      	ldr	r2, [r3, #8]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008bbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	689a      	ldr	r2, [r3, #8]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008bcc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	689a      	ldr	r2, [r3, #8]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f022 0202 	bic.w	r2, r2, #2
 8008bdc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	6899      	ldr	r1, [r3, #8]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	699b      	ldr	r3, [r3, #24]
 8008be8:	005a      	lsls	r2, r3, #1
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	430a      	orrs	r2, r1
 8008bf0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d01b      	beq.n	8008c34 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	685a      	ldr	r2, [r3, #4]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c0a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	685a      	ldr	r2, [r3, #4]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8008c1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	6859      	ldr	r1, [r3, #4]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c26:	3b01      	subs	r3, #1
 8008c28:	035a      	lsls	r2, r3, #13
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	430a      	orrs	r2, r1
 8008c30:	605a      	str	r2, [r3, #4]
 8008c32:	e007      	b.n	8008c44 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	685a      	ldr	r2, [r3, #4]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c42:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8008c52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	69db      	ldr	r3, [r3, #28]
 8008c5e:	3b01      	subs	r3, #1
 8008c60:	051a      	lsls	r2, r3, #20
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	430a      	orrs	r2, r1
 8008c68:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	689a      	ldr	r2, [r3, #8]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008c78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	6899      	ldr	r1, [r3, #8]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008c86:	025a      	lsls	r2, r3, #9
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	430a      	orrs	r2, r1
 8008c8e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	689a      	ldr	r2, [r3, #8]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	6899      	ldr	r1, [r3, #8]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	695b      	ldr	r3, [r3, #20]
 8008caa:	029a      	lsls	r2, r3, #10
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	430a      	orrs	r2, r1
 8008cb2:	609a      	str	r2, [r3, #8]
}
 8008cb4:	bf00      	nop
 8008cb6:	370c      	adds	r7, #12
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr
 8008cc0:	40012300 	.word	0x40012300
 8008cc4:	0f000001 	.word	0x0f000001

08008cc8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cda:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d13c      	bne.n	8008d5c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	689b      	ldr	r3, [r3, #8]
 8008cf4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d12b      	bne.n	8008d54 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d127      	bne.n	8008d54 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d0a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d006      	beq.n	8008d20 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d119      	bne.n	8008d54 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	685a      	ldr	r2, [r3, #4]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f022 0220 	bic.w	r2, r2, #32
 8008d2e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d105      	bne.n	8008d54 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d4c:	f043 0201 	orr.w	r2, r3, #1
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008d54:	68f8      	ldr	r0, [r7, #12]
 8008d56:	f7ff fd49 	bl	80087ec <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008d5a:	e00e      	b.n	8008d7a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d60:	f003 0310 	and.w	r3, r3, #16
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d003      	beq.n	8008d70 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8008d68:	68f8      	ldr	r0, [r7, #12]
 8008d6a:	f7ff fd53 	bl	8008814 <HAL_ADC_ErrorCallback>
}
 8008d6e:	e004      	b.n	8008d7a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	4798      	blx	r3
}
 8008d7a:	bf00      	nop
 8008d7c:	3710      	adds	r7, #16
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}

08008d82 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008d82:	b580      	push	{r7, lr}
 8008d84:	b084      	sub	sp, #16
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d8e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008d90:	68f8      	ldr	r0, [r7, #12]
 8008d92:	f7ff fd35 	bl	8008800 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008d96:	bf00      	nop
 8008d98:	3710      	adds	r7, #16
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}

08008d9e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8008d9e:	b580      	push	{r7, lr}
 8008da0:	b084      	sub	sp, #16
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008daa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2240      	movs	r2, #64	; 0x40
 8008db0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008db6:	f043 0204 	orr.w	r2, r3, #4
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008dbe:	68f8      	ldr	r0, [r7, #12]
 8008dc0:	f7ff fd28 	bl	8008814 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008dc4:	bf00      	nop
 8008dc6:	3710      	adds	r7, #16
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d101      	bne.n	8008dde <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e0ed      	b.n	8008fba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d102      	bne.n	8008df0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f7f8 f8f4 	bl	8000fd8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	681a      	ldr	r2, [r3, #0]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f042 0201 	orr.w	r2, r2, #1
 8008dfe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008e00:	f7ff fb86 	bl	8008510 <HAL_GetTick>
 8008e04:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008e06:	e012      	b.n	8008e2e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008e08:	f7ff fb82 	bl	8008510 <HAL_GetTick>
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	1ad3      	subs	r3, r2, r3
 8008e12:	2b0a      	cmp	r3, #10
 8008e14:	d90b      	bls.n	8008e2e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2205      	movs	r2, #5
 8008e26:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	e0c5      	b.n	8008fba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	f003 0301 	and.w	r3, r3, #1
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d0e5      	beq.n	8008e08 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f022 0202 	bic.w	r2, r2, #2
 8008e4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008e4c:	f7ff fb60 	bl	8008510 <HAL_GetTick>
 8008e50:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008e52:	e012      	b.n	8008e7a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008e54:	f7ff fb5c 	bl	8008510 <HAL_GetTick>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	1ad3      	subs	r3, r2, r3
 8008e5e:	2b0a      	cmp	r3, #10
 8008e60:	d90b      	bls.n	8008e7a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e66:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2205      	movs	r2, #5
 8008e72:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008e76:	2301      	movs	r3, #1
 8008e78:	e09f      	b.n	8008fba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	f003 0302 	and.w	r3, r3, #2
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d1e5      	bne.n	8008e54 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	7e1b      	ldrb	r3, [r3, #24]
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d108      	bne.n	8008ea2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008e9e:	601a      	str	r2, [r3, #0]
 8008ea0:	e007      	b.n	8008eb2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	681a      	ldr	r2, [r3, #0]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008eb0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	7e5b      	ldrb	r3, [r3, #25]
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d108      	bne.n	8008ecc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ec8:	601a      	str	r2, [r3, #0]
 8008eca:	e007      	b.n	8008edc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008eda:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	7e9b      	ldrb	r3, [r3, #26]
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d108      	bne.n	8008ef6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f042 0220 	orr.w	r2, r2, #32
 8008ef2:	601a      	str	r2, [r3, #0]
 8008ef4:	e007      	b.n	8008f06 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	681a      	ldr	r2, [r3, #0]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f022 0220 	bic.w	r2, r2, #32
 8008f04:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	7edb      	ldrb	r3, [r3, #27]
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d108      	bne.n	8008f20 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f022 0210 	bic.w	r2, r2, #16
 8008f1c:	601a      	str	r2, [r3, #0]
 8008f1e:	e007      	b.n	8008f30 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f042 0210 	orr.w	r2, r2, #16
 8008f2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	7f1b      	ldrb	r3, [r3, #28]
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d108      	bne.n	8008f4a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f042 0208 	orr.w	r2, r2, #8
 8008f46:	601a      	str	r2, [r3, #0]
 8008f48:	e007      	b.n	8008f5a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	681a      	ldr	r2, [r3, #0]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f022 0208 	bic.w	r2, r2, #8
 8008f58:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	7f5b      	ldrb	r3, [r3, #29]
 8008f5e:	2b01      	cmp	r3, #1
 8008f60:	d108      	bne.n	8008f74 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	681a      	ldr	r2, [r3, #0]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f042 0204 	orr.w	r2, r2, #4
 8008f70:	601a      	str	r2, [r3, #0]
 8008f72:	e007      	b.n	8008f84 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f022 0204 	bic.w	r2, r2, #4
 8008f82:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	689a      	ldr	r2, [r3, #8]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	431a      	orrs	r2, r3
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	691b      	ldr	r3, [r3, #16]
 8008f92:	431a      	orrs	r2, r3
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	695b      	ldr	r3, [r3, #20]
 8008f98:	ea42 0103 	orr.w	r1, r2, r3
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	1e5a      	subs	r2, r3, #1
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	430a      	orrs	r2, r1
 8008fa8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2200      	movs	r2, #0
 8008fae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008fb8:	2300      	movs	r3, #0
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3710      	adds	r7, #16
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
	...

08008fc4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b087      	sub	sp, #28
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008fda:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8008fdc:	7cfb      	ldrb	r3, [r7, #19]
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d003      	beq.n	8008fea <HAL_CAN_ConfigFilter+0x26>
 8008fe2:	7cfb      	ldrb	r3, [r7, #19]
 8008fe4:	2b02      	cmp	r3, #2
 8008fe6:	f040 80c7 	bne.w	8009178 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4a69      	ldr	r2, [pc, #420]	; (8009194 <HAL_CAN_ConfigFilter+0x1d0>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d001      	beq.n	8008ff8 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8008ff4:	4b68      	ldr	r3, [pc, #416]	; (8009198 <HAL_CAN_ConfigFilter+0x1d4>)
 8008ff6:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008ffe:	f043 0201 	orr.w	r2, r3, #1
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	4a63      	ldr	r2, [pc, #396]	; (8009198 <HAL_CAN_ConfigFilter+0x1d4>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d111      	bne.n	8009034 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009016:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800902a:	021b      	lsls	r3, r3, #8
 800902c:	431a      	orrs	r2, r3
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	695b      	ldr	r3, [r3, #20]
 8009038:	f003 031f 	and.w	r3, r3, #31
 800903c:	2201      	movs	r2, #1
 800903e:	fa02 f303 	lsl.w	r3, r2, r3
 8009042:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	43db      	mvns	r3, r3
 800904e:	401a      	ands	r2, r3
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	69db      	ldr	r3, [r3, #28]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d123      	bne.n	80090a6 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	43db      	mvns	r3, r3
 8009068:	401a      	ands	r2, r3
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800907c:	683a      	ldr	r2, [r7, #0]
 800907e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8009080:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	3248      	adds	r2, #72	; 0x48
 8009086:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800909a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800909c:	6979      	ldr	r1, [r7, #20]
 800909e:	3348      	adds	r3, #72	; 0x48
 80090a0:	00db      	lsls	r3, r3, #3
 80090a2:	440b      	add	r3, r1
 80090a4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	69db      	ldr	r3, [r3, #28]
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d122      	bne.n	80090f4 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	431a      	orrs	r2, r3
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80090ca:	683a      	ldr	r2, [r7, #0]
 80090cc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80090ce:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	3248      	adds	r2, #72	; 0x48
 80090d4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	689b      	ldr	r3, [r3, #8]
 80090dc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80090e8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80090ea:	6979      	ldr	r1, [r7, #20]
 80090ec:	3348      	adds	r3, #72	; 0x48
 80090ee:	00db      	lsls	r3, r3, #3
 80090f0:	440b      	add	r3, r1
 80090f2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	699b      	ldr	r3, [r3, #24]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d109      	bne.n	8009110 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	43db      	mvns	r3, r3
 8009106:	401a      	ands	r2, r3
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800910e:	e007      	b.n	8009120 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	431a      	orrs	r2, r3
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	691b      	ldr	r3, [r3, #16]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d109      	bne.n	800913c <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	43db      	mvns	r3, r3
 8009132:	401a      	ands	r2, r3
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800913a:	e007      	b.n	800914c <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	431a      	orrs	r2, r3
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	6a1b      	ldr	r3, [r3, #32]
 8009150:	2b01      	cmp	r3, #1
 8009152:	d107      	bne.n	8009164 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	431a      	orrs	r2, r3
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800916a:	f023 0201 	bic.w	r2, r3, #1
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8009174:	2300      	movs	r3, #0
 8009176:	e006      	b.n	8009186 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800917c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009184:	2301      	movs	r3, #1
  }
}
 8009186:	4618      	mov	r0, r3
 8009188:	371c      	adds	r7, #28
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr
 8009192:	bf00      	nop
 8009194:	40003400 	.word	0x40003400
 8009198:	40006400 	.word	0x40006400

0800919c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b084      	sub	sp, #16
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80091aa:	b2db      	uxtb	r3, r3
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d12e      	bne.n	800920e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2202      	movs	r2, #2
 80091b4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	681a      	ldr	r2, [r3, #0]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f022 0201 	bic.w	r2, r2, #1
 80091c6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80091c8:	f7ff f9a2 	bl	8008510 <HAL_GetTick>
 80091cc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80091ce:	e012      	b.n	80091f6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80091d0:	f7ff f99e 	bl	8008510 <HAL_GetTick>
 80091d4:	4602      	mov	r2, r0
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	1ad3      	subs	r3, r2, r3
 80091da:	2b0a      	cmp	r3, #10
 80091dc:	d90b      	bls.n	80091f6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2205      	movs	r2, #5
 80091ee:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80091f2:	2301      	movs	r3, #1
 80091f4:	e012      	b.n	800921c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	f003 0301 	and.w	r3, r3, #1
 8009200:	2b00      	cmp	r3, #0
 8009202:	d1e5      	bne.n	80091d0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2200      	movs	r2, #0
 8009208:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800920a:	2300      	movs	r3, #0
 800920c:	e006      	b.n	800921c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009212:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800921a:	2301      	movs	r3, #1
  }
}
 800921c:	4618      	mov	r0, r3
 800921e:	3710      	adds	r7, #16
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8009224:	b480      	push	{r7}
 8009226:	b089      	sub	sp, #36	; 0x24
 8009228:	af00      	add	r7, sp, #0
 800922a:	60f8      	str	r0, [r7, #12]
 800922c:	60b9      	str	r1, [r7, #8]
 800922e:	607a      	str	r2, [r7, #4]
 8009230:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009238:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8009242:	7ffb      	ldrb	r3, [r7, #31]
 8009244:	2b01      	cmp	r3, #1
 8009246:	d003      	beq.n	8009250 <HAL_CAN_AddTxMessage+0x2c>
 8009248:	7ffb      	ldrb	r3, [r7, #31]
 800924a:	2b02      	cmp	r3, #2
 800924c:	f040 80ad 	bne.w	80093aa <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8009250:	69bb      	ldr	r3, [r7, #24]
 8009252:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009256:	2b00      	cmp	r3, #0
 8009258:	d10a      	bne.n	8009270 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800925a:	69bb      	ldr	r3, [r7, #24]
 800925c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8009260:	2b00      	cmp	r3, #0
 8009262:	d105      	bne.n	8009270 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8009264:	69bb      	ldr	r3, [r7, #24]
 8009266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800926a:	2b00      	cmp	r3, #0
 800926c:	f000 8095 	beq.w	800939a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8009270:	69bb      	ldr	r3, [r7, #24]
 8009272:	0e1b      	lsrs	r3, r3, #24
 8009274:	f003 0303 	and.w	r3, r3, #3
 8009278:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800927a:	2201      	movs	r2, #1
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	409a      	lsls	r2, r3
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d10d      	bne.n	80092a8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8009296:	68f9      	ldr	r1, [r7, #12]
 8009298:	6809      	ldr	r1, [r1, #0]
 800929a:	431a      	orrs	r2, r3
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	3318      	adds	r3, #24
 80092a0:	011b      	lsls	r3, r3, #4
 80092a2:	440b      	add	r3, r1
 80092a4:	601a      	str	r2, [r3, #0]
 80092a6:	e00f      	b.n	80092c8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80092b2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80092b8:	68f9      	ldr	r1, [r7, #12]
 80092ba:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80092bc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	3318      	adds	r3, #24
 80092c2:	011b      	lsls	r3, r3, #4
 80092c4:	440b      	add	r3, r1
 80092c6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	6819      	ldr	r1, [r3, #0]
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	691a      	ldr	r2, [r3, #16]
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	3318      	adds	r3, #24
 80092d4:	011b      	lsls	r3, r3, #4
 80092d6:	440b      	add	r3, r1
 80092d8:	3304      	adds	r3, #4
 80092da:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	7d1b      	ldrb	r3, [r3, #20]
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d111      	bne.n	8009308 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681a      	ldr	r2, [r3, #0]
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	3318      	adds	r3, #24
 80092ec:	011b      	lsls	r3, r3, #4
 80092ee:	4413      	add	r3, r2
 80092f0:	3304      	adds	r3, #4
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	68fa      	ldr	r2, [r7, #12]
 80092f6:	6811      	ldr	r1, [r2, #0]
 80092f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	3318      	adds	r3, #24
 8009300:	011b      	lsls	r3, r3, #4
 8009302:	440b      	add	r3, r1
 8009304:	3304      	adds	r3, #4
 8009306:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	3307      	adds	r3, #7
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	061a      	lsls	r2, r3, #24
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	3306      	adds	r3, #6
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	041b      	lsls	r3, r3, #16
 8009318:	431a      	orrs	r2, r3
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	3305      	adds	r3, #5
 800931e:	781b      	ldrb	r3, [r3, #0]
 8009320:	021b      	lsls	r3, r3, #8
 8009322:	4313      	orrs	r3, r2
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	3204      	adds	r2, #4
 8009328:	7812      	ldrb	r2, [r2, #0]
 800932a:	4610      	mov	r0, r2
 800932c:	68fa      	ldr	r2, [r7, #12]
 800932e:	6811      	ldr	r1, [r2, #0]
 8009330:	ea43 0200 	orr.w	r2, r3, r0
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	011b      	lsls	r3, r3, #4
 8009338:	440b      	add	r3, r1
 800933a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800933e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	3303      	adds	r3, #3
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	061a      	lsls	r2, r3, #24
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	3302      	adds	r3, #2
 800934c:	781b      	ldrb	r3, [r3, #0]
 800934e:	041b      	lsls	r3, r3, #16
 8009350:	431a      	orrs	r2, r3
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	3301      	adds	r3, #1
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	021b      	lsls	r3, r3, #8
 800935a:	4313      	orrs	r3, r2
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	7812      	ldrb	r2, [r2, #0]
 8009360:	4610      	mov	r0, r2
 8009362:	68fa      	ldr	r2, [r7, #12]
 8009364:	6811      	ldr	r1, [r2, #0]
 8009366:	ea43 0200 	orr.w	r2, r3, r0
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	011b      	lsls	r3, r3, #4
 800936e:	440b      	add	r3, r1
 8009370:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8009374:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681a      	ldr	r2, [r3, #0]
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	3318      	adds	r3, #24
 800937e:	011b      	lsls	r3, r3, #4
 8009380:	4413      	add	r3, r2
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	68fa      	ldr	r2, [r7, #12]
 8009386:	6811      	ldr	r1, [r2, #0]
 8009388:	f043 0201 	orr.w	r2, r3, #1
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	3318      	adds	r3, #24
 8009390:	011b      	lsls	r3, r3, #4
 8009392:	440b      	add	r3, r1
 8009394:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8009396:	2300      	movs	r3, #0
 8009398:	e00e      	b.n	80093b8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800939e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	e006      	b.n	80093b8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80093b6:	2301      	movs	r3, #1
  }
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3724      	adds	r7, #36	; 0x24
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr

080093c4 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80093c4:	b480      	push	{r7}
 80093c6:	b087      	sub	sp, #28
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	60b9      	str	r1, [r7, #8]
 80093ce:	607a      	str	r2, [r7, #4]
 80093d0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80093d8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80093da:	7dfb      	ldrb	r3, [r7, #23]
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d003      	beq.n	80093e8 <HAL_CAN_GetRxMessage+0x24>
 80093e0:	7dfb      	ldrb	r3, [r7, #23]
 80093e2:	2b02      	cmp	r3, #2
 80093e4:	f040 80f3 	bne.w	80095ce <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d10e      	bne.n	800940c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	f003 0303 	and.w	r3, r3, #3
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d116      	bne.n	800942a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009400:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009408:	2301      	movs	r3, #1
 800940a:	e0e7      	b.n	80095dc <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	691b      	ldr	r3, [r3, #16]
 8009412:	f003 0303 	and.w	r3, r3, #3
 8009416:	2b00      	cmp	r3, #0
 8009418:	d107      	bne.n	800942a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800941e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009426:	2301      	movs	r3, #1
 8009428:	e0d8      	b.n	80095dc <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	331b      	adds	r3, #27
 8009432:	011b      	lsls	r3, r3, #4
 8009434:	4413      	add	r3, r2
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f003 0204 	and.w	r2, r3, #4
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	689b      	ldr	r3, [r3, #8]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d10c      	bne.n	8009462 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	331b      	adds	r3, #27
 8009450:	011b      	lsls	r3, r3, #4
 8009452:	4413      	add	r3, r2
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	0d5b      	lsrs	r3, r3, #21
 8009458:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	601a      	str	r2, [r3, #0]
 8009460:	e00b      	b.n	800947a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	331b      	adds	r3, #27
 800946a:	011b      	lsls	r3, r3, #4
 800946c:	4413      	add	r3, r2
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	08db      	lsrs	r3, r3, #3
 8009472:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	331b      	adds	r3, #27
 8009482:	011b      	lsls	r3, r3, #4
 8009484:	4413      	add	r3, r2
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f003 0202 	and.w	r2, r3, #2
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	331b      	adds	r3, #27
 8009498:	011b      	lsls	r3, r3, #4
 800949a:	4413      	add	r3, r2
 800949c:	3304      	adds	r3, #4
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f003 020f 	and.w	r2, r3, #15
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681a      	ldr	r2, [r3, #0]
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	331b      	adds	r3, #27
 80094b0:	011b      	lsls	r3, r3, #4
 80094b2:	4413      	add	r3, r2
 80094b4:	3304      	adds	r3, #4
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	0a1b      	lsrs	r3, r3, #8
 80094ba:	b2da      	uxtb	r2, r3
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681a      	ldr	r2, [r3, #0]
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	331b      	adds	r3, #27
 80094c8:	011b      	lsls	r3, r3, #4
 80094ca:	4413      	add	r3, r2
 80094cc:	3304      	adds	r3, #4
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	0c1b      	lsrs	r3, r3, #16
 80094d2:	b29a      	uxth	r2, r3
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681a      	ldr	r2, [r3, #0]
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	011b      	lsls	r3, r3, #4
 80094e0:	4413      	add	r3, r2
 80094e2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	b2da      	uxtb	r2, r3
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	011b      	lsls	r3, r3, #4
 80094f6:	4413      	add	r3, r2
 80094f8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	0a1a      	lsrs	r2, r3, #8
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	3301      	adds	r3, #1
 8009504:	b2d2      	uxtb	r2, r2
 8009506:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	011b      	lsls	r3, r3, #4
 8009510:	4413      	add	r3, r2
 8009512:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	0c1a      	lsrs	r2, r3, #16
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	3302      	adds	r3, #2
 800951e:	b2d2      	uxtb	r2, r2
 8009520:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681a      	ldr	r2, [r3, #0]
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	011b      	lsls	r3, r3, #4
 800952a:	4413      	add	r3, r2
 800952c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	0e1a      	lsrs	r2, r3, #24
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	3303      	adds	r3, #3
 8009538:	b2d2      	uxtb	r2, r2
 800953a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681a      	ldr	r2, [r3, #0]
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	011b      	lsls	r3, r3, #4
 8009544:	4413      	add	r3, r2
 8009546:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	3304      	adds	r3, #4
 8009550:	b2d2      	uxtb	r2, r2
 8009552:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681a      	ldr	r2, [r3, #0]
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	011b      	lsls	r3, r3, #4
 800955c:	4413      	add	r3, r2
 800955e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	0a1a      	lsrs	r2, r3, #8
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	3305      	adds	r3, #5
 800956a:	b2d2      	uxtb	r2, r2
 800956c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681a      	ldr	r2, [r3, #0]
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	011b      	lsls	r3, r3, #4
 8009576:	4413      	add	r3, r2
 8009578:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	0c1a      	lsrs	r2, r3, #16
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	3306      	adds	r3, #6
 8009584:	b2d2      	uxtb	r2, r2
 8009586:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681a      	ldr	r2, [r3, #0]
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	011b      	lsls	r3, r3, #4
 8009590:	4413      	add	r3, r2
 8009592:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	0e1a      	lsrs	r2, r3, #24
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	3307      	adds	r3, #7
 800959e:	b2d2      	uxtb	r2, r2
 80095a0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d108      	bne.n	80095ba <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	68da      	ldr	r2, [r3, #12]
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f042 0220 	orr.w	r2, r2, #32
 80095b6:	60da      	str	r2, [r3, #12]
 80095b8:	e007      	b.n	80095ca <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	691a      	ldr	r2, [r3, #16]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f042 0220 	orr.w	r2, r2, #32
 80095c8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80095ca:	2300      	movs	r3, #0
 80095cc:	e006      	b.n	80095dc <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80095da:	2301      	movs	r3, #1
  }
}
 80095dc:	4618      	mov	r0, r3
 80095de:	371c      	adds	r7, #28
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr

080095e8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b085      	sub	sp, #20
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80095f8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80095fa:	7bfb      	ldrb	r3, [r7, #15]
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	d002      	beq.n	8009606 <HAL_CAN_ActivateNotification+0x1e>
 8009600:	7bfb      	ldrb	r3, [r7, #15]
 8009602:	2b02      	cmp	r3, #2
 8009604:	d109      	bne.n	800961a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	6959      	ldr	r1, [r3, #20]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	683a      	ldr	r2, [r7, #0]
 8009612:	430a      	orrs	r2, r1
 8009614:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8009616:	2300      	movs	r3, #0
 8009618:	e006      	b.n	8009628 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800961e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009626:	2301      	movs	r3, #1
  }
}
 8009628:	4618      	mov	r0, r3
 800962a:	3714      	adds	r7, #20
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr

08009634 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b08a      	sub	sp, #40	; 0x28
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800963c:	2300      	movs	r3, #0
 800963e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	695b      	ldr	r3, [r3, #20]
 8009646:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	685b      	ldr	r3, [r3, #4]
 800964e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	689b      	ldr	r3, [r3, #8]
 8009656:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	68db      	ldr	r3, [r3, #12]
 800965e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	691b      	ldr	r3, [r3, #16]
 8009666:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	699b      	ldr	r3, [r3, #24]
 800966e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8009670:	6a3b      	ldr	r3, [r7, #32]
 8009672:	f003 0301 	and.w	r3, r3, #1
 8009676:	2b00      	cmp	r3, #0
 8009678:	d07c      	beq.n	8009774 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800967a:	69bb      	ldr	r3, [r7, #24]
 800967c:	f003 0301 	and.w	r3, r3, #1
 8009680:	2b00      	cmp	r3, #0
 8009682:	d023      	beq.n	80096cc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	2201      	movs	r2, #1
 800968a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800968c:	69bb      	ldr	r3, [r7, #24]
 800968e:	f003 0302 	and.w	r3, r3, #2
 8009692:	2b00      	cmp	r3, #0
 8009694:	d003      	beq.n	800969e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 f983 	bl	80099a2 <HAL_CAN_TxMailbox0CompleteCallback>
 800969c:	e016      	b.n	80096cc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800969e:	69bb      	ldr	r3, [r7, #24]
 80096a0:	f003 0304 	and.w	r3, r3, #4
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d004      	beq.n	80096b2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80096a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80096ae:	627b      	str	r3, [r7, #36]	; 0x24
 80096b0:	e00c      	b.n	80096cc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80096b2:	69bb      	ldr	r3, [r7, #24]
 80096b4:	f003 0308 	and.w	r3, r3, #8
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d004      	beq.n	80096c6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80096bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80096c2:	627b      	str	r3, [r7, #36]	; 0x24
 80096c4:	e002      	b.n	80096cc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 f989 	bl	80099de <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80096cc:	69bb      	ldr	r3, [r7, #24]
 80096ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d024      	beq.n	8009720 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80096de:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80096e0:	69bb      	ldr	r3, [r7, #24]
 80096e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d003      	beq.n	80096f2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f000 f963 	bl	80099b6 <HAL_CAN_TxMailbox1CompleteCallback>
 80096f0:	e016      	b.n	8009720 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80096f2:	69bb      	ldr	r3, [r7, #24]
 80096f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d004      	beq.n	8009706 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80096fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009702:	627b      	str	r3, [r7, #36]	; 0x24
 8009704:	e00c      	b.n	8009720 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8009706:	69bb      	ldr	r3, [r7, #24]
 8009708:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800970c:	2b00      	cmp	r3, #0
 800970e:	d004      	beq.n	800971a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8009710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009712:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009716:	627b      	str	r3, [r7, #36]	; 0x24
 8009718:	e002      	b.n	8009720 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f000 f969 	bl	80099f2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8009720:	69bb      	ldr	r3, [r7, #24]
 8009722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009726:	2b00      	cmp	r3, #0
 8009728:	d024      	beq.n	8009774 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009732:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8009734:	69bb      	ldr	r3, [r7, #24]
 8009736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800973a:	2b00      	cmp	r3, #0
 800973c:	d003      	beq.n	8009746 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 f943 	bl	80099ca <HAL_CAN_TxMailbox2CompleteCallback>
 8009744:	e016      	b.n	8009774 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8009746:	69bb      	ldr	r3, [r7, #24]
 8009748:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800974c:	2b00      	cmp	r3, #0
 800974e:	d004      	beq.n	800975a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8009750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009752:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009756:	627b      	str	r3, [r7, #36]	; 0x24
 8009758:	e00c      	b.n	8009774 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800975a:	69bb      	ldr	r3, [r7, #24]
 800975c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009760:	2b00      	cmp	r3, #0
 8009762:	d004      	beq.n	800976e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8009764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009766:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800976a:	627b      	str	r3, [r7, #36]	; 0x24
 800976c:	e002      	b.n	8009774 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 f949 	bl	8009a06 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8009774:	6a3b      	ldr	r3, [r7, #32]
 8009776:	f003 0308 	and.w	r3, r3, #8
 800977a:	2b00      	cmp	r3, #0
 800977c:	d00c      	beq.n	8009798 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	f003 0310 	and.w	r3, r3, #16
 8009784:	2b00      	cmp	r3, #0
 8009786:	d007      	beq.n	8009798 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8009788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800978a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800978e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	2210      	movs	r2, #16
 8009796:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8009798:	6a3b      	ldr	r3, [r7, #32]
 800979a:	f003 0304 	and.w	r3, r3, #4
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d00b      	beq.n	80097ba <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	f003 0308 	and.w	r3, r3, #8
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d006      	beq.n	80097ba <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	2208      	movs	r2, #8
 80097b2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 f930 	bl	8009a1a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80097ba:	6a3b      	ldr	r3, [r7, #32]
 80097bc:	f003 0302 	and.w	r3, r3, #2
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d009      	beq.n	80097d8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	68db      	ldr	r3, [r3, #12]
 80097ca:	f003 0303 	and.w	r3, r3, #3
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d002      	beq.n	80097d8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f7f7 fce5 	bl	80011a2 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80097d8:	6a3b      	ldr	r3, [r7, #32]
 80097da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d00c      	beq.n	80097fc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	f003 0310 	and.w	r3, r3, #16
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d007      	beq.n	80097fc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80097ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80097f2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	2210      	movs	r2, #16
 80097fa:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80097fc:	6a3b      	ldr	r3, [r7, #32]
 80097fe:	f003 0320 	and.w	r3, r3, #32
 8009802:	2b00      	cmp	r3, #0
 8009804:	d00b      	beq.n	800981e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	f003 0308 	and.w	r3, r3, #8
 800980c:	2b00      	cmp	r3, #0
 800980e:	d006      	beq.n	800981e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	2208      	movs	r2, #8
 8009816:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f000 f908 	bl	8009a2e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800981e:	6a3b      	ldr	r3, [r7, #32]
 8009820:	f003 0310 	and.w	r3, r3, #16
 8009824:	2b00      	cmp	r3, #0
 8009826:	d009      	beq.n	800983c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	691b      	ldr	r3, [r3, #16]
 800982e:	f003 0303 	and.w	r3, r3, #3
 8009832:	2b00      	cmp	r3, #0
 8009834:	d002      	beq.n	800983c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f7f7 fc94 	bl	8001164 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800983c:	6a3b      	ldr	r3, [r7, #32]
 800983e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009842:	2b00      	cmp	r3, #0
 8009844:	d00b      	beq.n	800985e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8009846:	69fb      	ldr	r3, [r7, #28]
 8009848:	f003 0310 	and.w	r3, r3, #16
 800984c:	2b00      	cmp	r3, #0
 800984e:	d006      	beq.n	800985e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	2210      	movs	r2, #16
 8009856:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f000 f8f2 	bl	8009a42 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800985e:	6a3b      	ldr	r3, [r7, #32]
 8009860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009864:	2b00      	cmp	r3, #0
 8009866:	d00b      	beq.n	8009880 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8009868:	69fb      	ldr	r3, [r7, #28]
 800986a:	f003 0308 	and.w	r3, r3, #8
 800986e:	2b00      	cmp	r3, #0
 8009870:	d006      	beq.n	8009880 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	2208      	movs	r2, #8
 8009878:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 f8eb 	bl	8009a56 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8009880:	6a3b      	ldr	r3, [r7, #32]
 8009882:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009886:	2b00      	cmp	r3, #0
 8009888:	d07b      	beq.n	8009982 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800988a:	69fb      	ldr	r3, [r7, #28]
 800988c:	f003 0304 	and.w	r3, r3, #4
 8009890:	2b00      	cmp	r3, #0
 8009892:	d072      	beq.n	800997a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009894:	6a3b      	ldr	r3, [r7, #32]
 8009896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800989a:	2b00      	cmp	r3, #0
 800989c:	d008      	beq.n	80098b0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d003      	beq.n	80098b0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80098a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098aa:	f043 0301 	orr.w	r3, r3, #1
 80098ae:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80098b0:	6a3b      	ldr	r3, [r7, #32]
 80098b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d008      	beq.n	80098cc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d003      	beq.n	80098cc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80098c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c6:	f043 0302 	orr.w	r3, r3, #2
 80098ca:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80098cc:	6a3b      	ldr	r3, [r7, #32]
 80098ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d008      	beq.n	80098e8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d003      	beq.n	80098e8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80098e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e2:	f043 0304 	orr.w	r3, r3, #4
 80098e6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80098e8:	6a3b      	ldr	r3, [r7, #32]
 80098ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d043      	beq.n	800997a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d03e      	beq.n	800997a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009902:	2b60      	cmp	r3, #96	; 0x60
 8009904:	d02b      	beq.n	800995e <HAL_CAN_IRQHandler+0x32a>
 8009906:	2b60      	cmp	r3, #96	; 0x60
 8009908:	d82e      	bhi.n	8009968 <HAL_CAN_IRQHandler+0x334>
 800990a:	2b50      	cmp	r3, #80	; 0x50
 800990c:	d022      	beq.n	8009954 <HAL_CAN_IRQHandler+0x320>
 800990e:	2b50      	cmp	r3, #80	; 0x50
 8009910:	d82a      	bhi.n	8009968 <HAL_CAN_IRQHandler+0x334>
 8009912:	2b40      	cmp	r3, #64	; 0x40
 8009914:	d019      	beq.n	800994a <HAL_CAN_IRQHandler+0x316>
 8009916:	2b40      	cmp	r3, #64	; 0x40
 8009918:	d826      	bhi.n	8009968 <HAL_CAN_IRQHandler+0x334>
 800991a:	2b30      	cmp	r3, #48	; 0x30
 800991c:	d010      	beq.n	8009940 <HAL_CAN_IRQHandler+0x30c>
 800991e:	2b30      	cmp	r3, #48	; 0x30
 8009920:	d822      	bhi.n	8009968 <HAL_CAN_IRQHandler+0x334>
 8009922:	2b10      	cmp	r3, #16
 8009924:	d002      	beq.n	800992c <HAL_CAN_IRQHandler+0x2f8>
 8009926:	2b20      	cmp	r3, #32
 8009928:	d005      	beq.n	8009936 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800992a:	e01d      	b.n	8009968 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800992c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992e:	f043 0308 	orr.w	r3, r3, #8
 8009932:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009934:	e019      	b.n	800996a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8009936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009938:	f043 0310 	orr.w	r3, r3, #16
 800993c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800993e:	e014      	b.n	800996a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8009940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009942:	f043 0320 	orr.w	r3, r3, #32
 8009946:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009948:	e00f      	b.n	800996a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800994a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800994c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009950:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009952:	e00a      	b.n	800996a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8009954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800995a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800995c:	e005      	b.n	800996a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800995e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009964:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009966:	e000      	b.n	800996a <HAL_CAN_IRQHandler+0x336>
            break;
 8009968:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	699a      	ldr	r2, [r3, #24]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009978:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	2204      	movs	r2, #4
 8009980:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8009982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009984:	2b00      	cmp	r3, #0
 8009986:	d008      	beq.n	800999a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800998c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800998e:	431a      	orrs	r2, r3
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f000 f868 	bl	8009a6a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800999a:	bf00      	nop
 800999c:	3728      	adds	r7, #40	; 0x28
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}

080099a2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80099a2:	b480      	push	{r7}
 80099a4:	b083      	sub	sp, #12
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80099aa:	bf00      	nop
 80099ac:	370c      	adds	r7, #12
 80099ae:	46bd      	mov	sp, r7
 80099b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b4:	4770      	bx	lr

080099b6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80099b6:	b480      	push	{r7}
 80099b8:	b083      	sub	sp, #12
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80099be:	bf00      	nop
 80099c0:	370c      	adds	r7, #12
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr

080099ca <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80099ca:	b480      	push	{r7}
 80099cc:	b083      	sub	sp, #12
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80099d2:	bf00      	nop
 80099d4:	370c      	adds	r7, #12
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr

080099de <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80099de:	b480      	push	{r7}
 80099e0:	b083      	sub	sp, #12
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80099e6:	bf00      	nop
 80099e8:	370c      	adds	r7, #12
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr

080099f2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80099f2:	b480      	push	{r7}
 80099f4:	b083      	sub	sp, #12
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80099fa:	bf00      	nop
 80099fc:	370c      	adds	r7, #12
 80099fe:	46bd      	mov	sp, r7
 8009a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a04:	4770      	bx	lr

08009a06 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009a06:	b480      	push	{r7}
 8009a08:	b083      	sub	sp, #12
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8009a0e:	bf00      	nop
 8009a10:	370c      	adds	r7, #12
 8009a12:	46bd      	mov	sp, r7
 8009a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a18:	4770      	bx	lr

08009a1a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8009a1a:	b480      	push	{r7}
 8009a1c:	b083      	sub	sp, #12
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8009a22:	bf00      	nop
 8009a24:	370c      	adds	r7, #12
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr

08009a2e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8009a2e:	b480      	push	{r7}
 8009a30:	b083      	sub	sp, #12
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8009a36:	bf00      	nop
 8009a38:	370c      	adds	r7, #12
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a40:	4770      	bx	lr

08009a42 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8009a42:	b480      	push	{r7}
 8009a44:	b083      	sub	sp, #12
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8009a4a:	bf00      	nop
 8009a4c:	370c      	adds	r7, #12
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr

08009a56 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8009a56:	b480      	push	{r7}
 8009a58:	b083      	sub	sp, #12
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8009a5e:	bf00      	nop
 8009a60:	370c      	adds	r7, #12
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr

08009a6a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8009a6a:	b480      	push	{r7}
 8009a6c:	b083      	sub	sp, #12
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8009a72:	bf00      	nop
 8009a74:	370c      	adds	r7, #12
 8009a76:	46bd      	mov	sp, r7
 8009a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7c:	4770      	bx	lr
	...

08009a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b085      	sub	sp, #20
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f003 0307 	and.w	r3, r3, #7
 8009a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009a90:	4b0b      	ldr	r3, [pc, #44]	; (8009ac0 <__NVIC_SetPriorityGrouping+0x40>)
 8009a92:	68db      	ldr	r3, [r3, #12]
 8009a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009a96:	68ba      	ldr	r2, [r7, #8]
 8009a98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009a9c:	4013      	ands	r3, r2
 8009a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8009aa8:	4b06      	ldr	r3, [pc, #24]	; (8009ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009aae:	4a04      	ldr	r2, [pc, #16]	; (8009ac0 <__NVIC_SetPriorityGrouping+0x40>)
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	60d3      	str	r3, [r2, #12]
}
 8009ab4:	bf00      	nop
 8009ab6:	3714      	adds	r7, #20
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr
 8009ac0:	e000ed00 	.word	0xe000ed00
 8009ac4:	05fa0000 	.word	0x05fa0000

08009ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009acc:	4b04      	ldr	r3, [pc, #16]	; (8009ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8009ace:	68db      	ldr	r3, [r3, #12]
 8009ad0:	0a1b      	lsrs	r3, r3, #8
 8009ad2:	f003 0307 	and.w	r3, r3, #7
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr
 8009ae0:	e000ed00 	.word	0xe000ed00

08009ae4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b083      	sub	sp, #12
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	4603      	mov	r3, r0
 8009aec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	db0b      	blt.n	8009b0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009af6:	79fb      	ldrb	r3, [r7, #7]
 8009af8:	f003 021f 	and.w	r2, r3, #31
 8009afc:	4907      	ldr	r1, [pc, #28]	; (8009b1c <__NVIC_EnableIRQ+0x38>)
 8009afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b02:	095b      	lsrs	r3, r3, #5
 8009b04:	2001      	movs	r0, #1
 8009b06:	fa00 f202 	lsl.w	r2, r0, r2
 8009b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009b0e:	bf00      	nop
 8009b10:	370c      	adds	r7, #12
 8009b12:	46bd      	mov	sp, r7
 8009b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b18:	4770      	bx	lr
 8009b1a:	bf00      	nop
 8009b1c:	e000e100 	.word	0xe000e100

08009b20 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b083      	sub	sp, #12
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	4603      	mov	r3, r0
 8009b28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	db12      	blt.n	8009b58 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009b32:	79fb      	ldrb	r3, [r7, #7]
 8009b34:	f003 021f 	and.w	r2, r3, #31
 8009b38:	490a      	ldr	r1, [pc, #40]	; (8009b64 <__NVIC_DisableIRQ+0x44>)
 8009b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b3e:	095b      	lsrs	r3, r3, #5
 8009b40:	2001      	movs	r0, #1
 8009b42:	fa00 f202 	lsl.w	r2, r0, r2
 8009b46:	3320      	adds	r3, #32
 8009b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009b4c:	f3bf 8f4f 	dsb	sy
}
 8009b50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009b52:	f3bf 8f6f 	isb	sy
}
 8009b56:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8009b58:	bf00      	nop
 8009b5a:	370c      	adds	r7, #12
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b62:	4770      	bx	lr
 8009b64:	e000e100 	.word	0xe000e100

08009b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b083      	sub	sp, #12
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	4603      	mov	r3, r0
 8009b70:	6039      	str	r1, [r7, #0]
 8009b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	db0a      	blt.n	8009b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	b2da      	uxtb	r2, r3
 8009b80:	490c      	ldr	r1, [pc, #48]	; (8009bb4 <__NVIC_SetPriority+0x4c>)
 8009b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b86:	0112      	lsls	r2, r2, #4
 8009b88:	b2d2      	uxtb	r2, r2
 8009b8a:	440b      	add	r3, r1
 8009b8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009b90:	e00a      	b.n	8009ba8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	b2da      	uxtb	r2, r3
 8009b96:	4908      	ldr	r1, [pc, #32]	; (8009bb8 <__NVIC_SetPriority+0x50>)
 8009b98:	79fb      	ldrb	r3, [r7, #7]
 8009b9a:	f003 030f 	and.w	r3, r3, #15
 8009b9e:	3b04      	subs	r3, #4
 8009ba0:	0112      	lsls	r2, r2, #4
 8009ba2:	b2d2      	uxtb	r2, r2
 8009ba4:	440b      	add	r3, r1
 8009ba6:	761a      	strb	r2, [r3, #24]
}
 8009ba8:	bf00      	nop
 8009baa:	370c      	adds	r7, #12
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr
 8009bb4:	e000e100 	.word	0xe000e100
 8009bb8:	e000ed00 	.word	0xe000ed00

08009bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b089      	sub	sp, #36	; 0x24
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	60f8      	str	r0, [r7, #12]
 8009bc4:	60b9      	str	r1, [r7, #8]
 8009bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	f003 0307 	and.w	r3, r3, #7
 8009bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009bd0:	69fb      	ldr	r3, [r7, #28]
 8009bd2:	f1c3 0307 	rsb	r3, r3, #7
 8009bd6:	2b04      	cmp	r3, #4
 8009bd8:	bf28      	it	cs
 8009bda:	2304      	movcs	r3, #4
 8009bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009bde:	69fb      	ldr	r3, [r7, #28]
 8009be0:	3304      	adds	r3, #4
 8009be2:	2b06      	cmp	r3, #6
 8009be4:	d902      	bls.n	8009bec <NVIC_EncodePriority+0x30>
 8009be6:	69fb      	ldr	r3, [r7, #28]
 8009be8:	3b03      	subs	r3, #3
 8009bea:	e000      	b.n	8009bee <NVIC_EncodePriority+0x32>
 8009bec:	2300      	movs	r3, #0
 8009bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8009bf4:	69bb      	ldr	r3, [r7, #24]
 8009bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8009bfa:	43da      	mvns	r2, r3
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	401a      	ands	r2, r3
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009c04:	f04f 31ff 	mov.w	r1, #4294967295
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8009c0e:	43d9      	mvns	r1, r3
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009c14:	4313      	orrs	r3, r2
         );
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3724      	adds	r7, #36	; 0x24
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c20:	4770      	bx	lr
	...

08009c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b082      	sub	sp, #8
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	3b01      	subs	r3, #1
 8009c30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009c34:	d301      	bcc.n	8009c3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009c36:	2301      	movs	r3, #1
 8009c38:	e00f      	b.n	8009c5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009c3a:	4a0a      	ldr	r2, [pc, #40]	; (8009c64 <SysTick_Config+0x40>)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	3b01      	subs	r3, #1
 8009c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009c42:	210f      	movs	r1, #15
 8009c44:	f04f 30ff 	mov.w	r0, #4294967295
 8009c48:	f7ff ff8e 	bl	8009b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009c4c:	4b05      	ldr	r3, [pc, #20]	; (8009c64 <SysTick_Config+0x40>)
 8009c4e:	2200      	movs	r2, #0
 8009c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009c52:	4b04      	ldr	r3, [pc, #16]	; (8009c64 <SysTick_Config+0x40>)
 8009c54:	2207      	movs	r2, #7
 8009c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009c58:	2300      	movs	r3, #0
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3708      	adds	r7, #8
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	bf00      	nop
 8009c64:	e000e010 	.word	0xe000e010

08009c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b082      	sub	sp, #8
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f7ff ff05 	bl	8009a80 <__NVIC_SetPriorityGrouping>
}
 8009c76:	bf00      	nop
 8009c78:	3708      	adds	r7, #8
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}

08009c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009c7e:	b580      	push	{r7, lr}
 8009c80:	b086      	sub	sp, #24
 8009c82:	af00      	add	r7, sp, #0
 8009c84:	4603      	mov	r3, r0
 8009c86:	60b9      	str	r1, [r7, #8]
 8009c88:	607a      	str	r2, [r7, #4]
 8009c8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009c90:	f7ff ff1a 	bl	8009ac8 <__NVIC_GetPriorityGrouping>
 8009c94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009c96:	687a      	ldr	r2, [r7, #4]
 8009c98:	68b9      	ldr	r1, [r7, #8]
 8009c9a:	6978      	ldr	r0, [r7, #20]
 8009c9c:	f7ff ff8e 	bl	8009bbc <NVIC_EncodePriority>
 8009ca0:	4602      	mov	r2, r0
 8009ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ca6:	4611      	mov	r1, r2
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f7ff ff5d 	bl	8009b68 <__NVIC_SetPriority>
}
 8009cae:	bf00      	nop
 8009cb0:	3718      	adds	r7, #24
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}

08009cb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009cb6:	b580      	push	{r7, lr}
 8009cb8:	b082      	sub	sp, #8
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f7ff ff0d 	bl	8009ae4 <__NVIC_EnableIRQ>
}
 8009cca:	bf00      	nop
 8009ccc:	3708      	adds	r7, #8
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}

08009cd2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009cd2:	b580      	push	{r7, lr}
 8009cd4:	b082      	sub	sp, #8
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	4603      	mov	r3, r0
 8009cda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8009cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f7ff ff1d 	bl	8009b20 <__NVIC_DisableIRQ>
}
 8009ce6:	bf00      	nop
 8009ce8:	3708      	adds	r7, #8
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}

08009cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009cee:	b580      	push	{r7, lr}
 8009cf0:	b082      	sub	sp, #8
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f7ff ff94 	bl	8009c24 <SysTick_Config>
 8009cfc:	4603      	mov	r3, r0
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3708      	adds	r7, #8
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
	...

08009d08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b086      	sub	sp, #24
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009d10:	2300      	movs	r3, #0
 8009d12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009d14:	f7fe fbfc 	bl	8008510 <HAL_GetTick>
 8009d18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d101      	bne.n	8009d24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009d20:	2301      	movs	r3, #1
 8009d22:	e099      	b.n	8009e58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2202      	movs	r2, #2
 8009d28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	681a      	ldr	r2, [r3, #0]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f022 0201 	bic.w	r2, r2, #1
 8009d42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009d44:	e00f      	b.n	8009d66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009d46:	f7fe fbe3 	bl	8008510 <HAL_GetTick>
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	1ad3      	subs	r3, r2, r3
 8009d50:	2b05      	cmp	r3, #5
 8009d52:	d908      	bls.n	8009d66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2220      	movs	r2, #32
 8009d58:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2203      	movs	r2, #3
 8009d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8009d62:	2303      	movs	r3, #3
 8009d64:	e078      	b.n	8009e58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f003 0301 	and.w	r3, r3, #1
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d1e8      	bne.n	8009d46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009d7c:	697a      	ldr	r2, [r7, #20]
 8009d7e:	4b38      	ldr	r3, [pc, #224]	; (8009e60 <HAL_DMA_Init+0x158>)
 8009d80:	4013      	ands	r3, r2
 8009d82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	685a      	ldr	r2, [r3, #4]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	689b      	ldr	r3, [r3, #8]
 8009d8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009d92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	691b      	ldr	r3, [r3, #16]
 8009d98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009d9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	699b      	ldr	r3, [r3, #24]
 8009da4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009daa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6a1b      	ldr	r3, [r3, #32]
 8009db0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009db2:	697a      	ldr	r2, [r7, #20]
 8009db4:	4313      	orrs	r3, r2
 8009db6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dbc:	2b04      	cmp	r3, #4
 8009dbe:	d107      	bne.n	8009dd0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	697a      	ldr	r2, [r7, #20]
 8009dcc:	4313      	orrs	r3, r2
 8009dce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	697a      	ldr	r2, [r7, #20]
 8009dd6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	695b      	ldr	r3, [r3, #20]
 8009dde:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	f023 0307 	bic.w	r3, r3, #7
 8009de6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dec:	697a      	ldr	r2, [r7, #20]
 8009dee:	4313      	orrs	r3, r2
 8009df0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df6:	2b04      	cmp	r3, #4
 8009df8:	d117      	bne.n	8009e2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dfe:	697a      	ldr	r2, [r7, #20]
 8009e00:	4313      	orrs	r3, r2
 8009e02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d00e      	beq.n	8009e2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f000 fb15 	bl	800a43c <DMA_CheckFifoParam>
 8009e12:	4603      	mov	r3, r0
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d008      	beq.n	8009e2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2240      	movs	r2, #64	; 0x40
 8009e1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2201      	movs	r2, #1
 8009e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8009e26:	2301      	movs	r3, #1
 8009e28:	e016      	b.n	8009e58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	697a      	ldr	r2, [r7, #20]
 8009e30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f000 facc 	bl	800a3d0 <DMA_CalcBaseAndBitshift>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e40:	223f      	movs	r2, #63	; 0x3f
 8009e42:	409a      	lsls	r2, r3
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2201      	movs	r2, #1
 8009e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009e56:	2300      	movs	r3, #0
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3718      	adds	r7, #24
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}
 8009e60:	e010803f 	.word	0xe010803f

08009e64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b086      	sub	sp, #24
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	60f8      	str	r0, [r7, #12]
 8009e6c:	60b9      	str	r1, [r7, #8]
 8009e6e:	607a      	str	r2, [r7, #4]
 8009e70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009e72:	2300      	movs	r3, #0
 8009e74:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e7a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009e82:	2b01      	cmp	r3, #1
 8009e84:	d101      	bne.n	8009e8a <HAL_DMA_Start_IT+0x26>
 8009e86:	2302      	movs	r3, #2
 8009e88:	e048      	b.n	8009f1c <HAL_DMA_Start_IT+0xb8>
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2201      	movs	r2, #1
 8009e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009e98:	b2db      	uxtb	r3, r3
 8009e9a:	2b01      	cmp	r3, #1
 8009e9c:	d137      	bne.n	8009f0e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	2202      	movs	r2, #2
 8009ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	687a      	ldr	r2, [r7, #4]
 8009eb0:	68b9      	ldr	r1, [r7, #8]
 8009eb2:	68f8      	ldr	r0, [r7, #12]
 8009eb4:	f000 fa5e 	bl	800a374 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ebc:	223f      	movs	r2, #63	; 0x3f
 8009ebe:	409a      	lsls	r2, r3
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	681a      	ldr	r2, [r3, #0]
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f042 0216 	orr.w	r2, r2, #22
 8009ed2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	695a      	ldr	r2, [r3, #20]
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009ee2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d007      	beq.n	8009efc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	681a      	ldr	r2, [r3, #0]
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f042 0208 	orr.w	r2, r2, #8
 8009efa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	681a      	ldr	r2, [r3, #0]
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f042 0201 	orr.w	r2, r2, #1
 8009f0a:	601a      	str	r2, [r3, #0]
 8009f0c:	e005      	b.n	8009f1a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2200      	movs	r2, #0
 8009f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8009f16:	2302      	movs	r3, #2
 8009f18:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8009f1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3718      	adds	r7, #24
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b084      	sub	sp, #16
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f30:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8009f32:	f7fe faed 	bl	8008510 <HAL_GetTick>
 8009f36:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009f3e:	b2db      	uxtb	r3, r3
 8009f40:	2b02      	cmp	r3, #2
 8009f42:	d008      	beq.n	8009f56 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2280      	movs	r2, #128	; 0x80
 8009f48:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8009f52:	2301      	movs	r3, #1
 8009f54:	e052      	b.n	8009ffc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	681a      	ldr	r2, [r3, #0]
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f022 0216 	bic.w	r2, r2, #22
 8009f64:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	695a      	ldr	r2, [r3, #20]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009f74:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d103      	bne.n	8009f86 <HAL_DMA_Abort+0x62>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d007      	beq.n	8009f96 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	681a      	ldr	r2, [r3, #0]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f022 0208 	bic.w	r2, r2, #8
 8009f94:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	681a      	ldr	r2, [r3, #0]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f022 0201 	bic.w	r2, r2, #1
 8009fa4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009fa6:	e013      	b.n	8009fd0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009fa8:	f7fe fab2 	bl	8008510 <HAL_GetTick>
 8009fac:	4602      	mov	r2, r0
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	1ad3      	subs	r3, r2, r3
 8009fb2:	2b05      	cmp	r3, #5
 8009fb4:	d90c      	bls.n	8009fd0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2220      	movs	r2, #32
 8009fba:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2203      	movs	r2, #3
 8009fc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8009fcc:	2303      	movs	r3, #3
 8009fce:	e015      	b.n	8009ffc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f003 0301 	and.w	r3, r3, #1
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d1e4      	bne.n	8009fa8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fe2:	223f      	movs	r2, #63	; 0x3f
 8009fe4:	409a      	lsls	r2, r3
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2201      	movs	r2, #1
 8009fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8009ffa:	2300      	movs	r3, #0
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3710      	adds	r7, #16
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}

0800a004 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a004:	b480      	push	{r7}
 800a006:	b083      	sub	sp, #12
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a012:	b2db      	uxtb	r3, r3
 800a014:	2b02      	cmp	r3, #2
 800a016:	d004      	beq.n	800a022 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2280      	movs	r2, #128	; 0x80
 800a01c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a01e:	2301      	movs	r3, #1
 800a020:	e00c      	b.n	800a03c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2205      	movs	r2, #5
 800a026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	681a      	ldr	r2, [r3, #0]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f022 0201 	bic.w	r2, r2, #1
 800a038:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a03a:	2300      	movs	r3, #0
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	370c      	adds	r7, #12
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr

0800a048 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b086      	sub	sp, #24
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800a050:	2300      	movs	r3, #0
 800a052:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800a054:	4b8e      	ldr	r3, [pc, #568]	; (800a290 <HAL_DMA_IRQHandler+0x248>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4a8e      	ldr	r2, [pc, #568]	; (800a294 <HAL_DMA_IRQHandler+0x24c>)
 800a05a:	fba2 2303 	umull	r2, r3, r2, r3
 800a05e:	0a9b      	lsrs	r3, r3, #10
 800a060:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a066:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a072:	2208      	movs	r2, #8
 800a074:	409a      	lsls	r2, r3
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	4013      	ands	r3, r2
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d01a      	beq.n	800a0b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f003 0304 	and.w	r3, r3, #4
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d013      	beq.n	800a0b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	681a      	ldr	r2, [r3, #0]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f022 0204 	bic.w	r2, r2, #4
 800a09a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0a0:	2208      	movs	r2, #8
 800a0a2:	409a      	lsls	r2, r3
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0ac:	f043 0201 	orr.w	r2, r3, #1
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0b8:	2201      	movs	r2, #1
 800a0ba:	409a      	lsls	r2, r3
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	4013      	ands	r3, r2
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d012      	beq.n	800a0ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	695b      	ldr	r3, [r3, #20]
 800a0ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d00b      	beq.n	800a0ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	409a      	lsls	r2, r3
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0e2:	f043 0202 	orr.w	r2, r3, #2
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0ee:	2204      	movs	r2, #4
 800a0f0:	409a      	lsls	r2, r3
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	4013      	ands	r3, r2
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d012      	beq.n	800a120 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f003 0302 	and.w	r3, r3, #2
 800a104:	2b00      	cmp	r3, #0
 800a106:	d00b      	beq.n	800a120 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a10c:	2204      	movs	r2, #4
 800a10e:	409a      	lsls	r2, r3
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a118:	f043 0204 	orr.w	r2, r3, #4
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a124:	2210      	movs	r2, #16
 800a126:	409a      	lsls	r2, r3
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	4013      	ands	r3, r2
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d043      	beq.n	800a1b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f003 0308 	and.w	r3, r3, #8
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d03c      	beq.n	800a1b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a142:	2210      	movs	r2, #16
 800a144:	409a      	lsls	r2, r3
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a154:	2b00      	cmp	r3, #0
 800a156:	d018      	beq.n	800a18a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a162:	2b00      	cmp	r3, #0
 800a164:	d108      	bne.n	800a178 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d024      	beq.n	800a1b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	4798      	blx	r3
 800a176:	e01f      	b.n	800a1b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d01b      	beq.n	800a1b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	4798      	blx	r3
 800a188:	e016      	b.n	800a1b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a194:	2b00      	cmp	r3, #0
 800a196:	d107      	bne.n	800a1a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	681a      	ldr	r2, [r3, #0]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f022 0208 	bic.w	r2, r2, #8
 800a1a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d003      	beq.n	800a1b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1bc:	2220      	movs	r2, #32
 800a1be:	409a      	lsls	r2, r3
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	4013      	ands	r3, r2
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	f000 808f 	beq.w	800a2e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f003 0310 	and.w	r3, r3, #16
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	f000 8087 	beq.w	800a2e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1de:	2220      	movs	r2, #32
 800a1e0:	409a      	lsls	r2, r3
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a1ec:	b2db      	uxtb	r3, r3
 800a1ee:	2b05      	cmp	r3, #5
 800a1f0:	d136      	bne.n	800a260 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	681a      	ldr	r2, [r3, #0]
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f022 0216 	bic.w	r2, r2, #22
 800a200:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	695a      	ldr	r2, [r3, #20]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a210:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a216:	2b00      	cmp	r3, #0
 800a218:	d103      	bne.n	800a222 <HAL_DMA_IRQHandler+0x1da>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d007      	beq.n	800a232 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	681a      	ldr	r2, [r3, #0]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f022 0208 	bic.w	r2, r2, #8
 800a230:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a236:	223f      	movs	r2, #63	; 0x3f
 800a238:	409a      	lsls	r2, r3
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2201      	movs	r2, #1
 800a242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2200      	movs	r2, #0
 800a24a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a252:	2b00      	cmp	r3, #0
 800a254:	d07e      	beq.n	800a354 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	4798      	blx	r3
        }
        return;
 800a25e:	e079      	b.n	800a354 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d01d      	beq.n	800a2aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d10d      	bne.n	800a298 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a280:	2b00      	cmp	r3, #0
 800a282:	d031      	beq.n	800a2e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	4798      	blx	r3
 800a28c:	e02c      	b.n	800a2e8 <HAL_DMA_IRQHandler+0x2a0>
 800a28e:	bf00      	nop
 800a290:	20000104 	.word	0x20000104
 800a294:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d023      	beq.n	800a2e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	4798      	blx	r3
 800a2a8:	e01e      	b.n	800a2e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d10f      	bne.n	800a2d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	681a      	ldr	r2, [r3, #0]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f022 0210 	bic.w	r2, r2, #16
 800a2c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d003      	beq.n	800a2e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d032      	beq.n	800a356 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2f4:	f003 0301 	and.w	r3, r3, #1
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d022      	beq.n	800a342 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2205      	movs	r2, #5
 800a300:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	681a      	ldr	r2, [r3, #0]
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f022 0201 	bic.w	r2, r2, #1
 800a312:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	3301      	adds	r3, #1
 800a318:	60bb      	str	r3, [r7, #8]
 800a31a:	697a      	ldr	r2, [r7, #20]
 800a31c:	429a      	cmp	r2, r3
 800a31e:	d307      	bcc.n	800a330 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f003 0301 	and.w	r3, r3, #1
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d1f2      	bne.n	800a314 <HAL_DMA_IRQHandler+0x2cc>
 800a32e:	e000      	b.n	800a332 <HAL_DMA_IRQHandler+0x2ea>
          break;
 800a330:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2201      	movs	r2, #1
 800a336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2200      	movs	r2, #0
 800a33e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a346:	2b00      	cmp	r3, #0
 800a348:	d005      	beq.n	800a356 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	4798      	blx	r3
 800a352:	e000      	b.n	800a356 <HAL_DMA_IRQHandler+0x30e>
        return;
 800a354:	bf00      	nop
    }
  }
}
 800a356:	3718      	adds	r7, #24
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}

0800a35c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b083      	sub	sp, #12
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800a368:	4618      	mov	r0, r3
 800a36a:	370c      	adds	r7, #12
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	4770      	bx	lr

0800a374 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a374:	b480      	push	{r7}
 800a376:	b085      	sub	sp, #20
 800a378:	af00      	add	r7, sp, #0
 800a37a:	60f8      	str	r0, [r7, #12]
 800a37c:	60b9      	str	r1, [r7, #8]
 800a37e:	607a      	str	r2, [r7, #4]
 800a380:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	681a      	ldr	r2, [r3, #0]
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a390:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	683a      	ldr	r2, [r7, #0]
 800a398:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	689b      	ldr	r3, [r3, #8]
 800a39e:	2b40      	cmp	r3, #64	; 0x40
 800a3a0:	d108      	bne.n	800a3b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	687a      	ldr	r2, [r7, #4]
 800a3a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	68ba      	ldr	r2, [r7, #8]
 800a3b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a3b2:	e007      	b.n	800a3c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	68ba      	ldr	r2, [r7, #8]
 800a3ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	60da      	str	r2, [r3, #12]
}
 800a3c4:	bf00      	nop
 800a3c6:	3714      	adds	r7, #20
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ce:	4770      	bx	lr

0800a3d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b085      	sub	sp, #20
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	b2db      	uxtb	r3, r3
 800a3de:	3b10      	subs	r3, #16
 800a3e0:	4a13      	ldr	r2, [pc, #76]	; (800a430 <DMA_CalcBaseAndBitshift+0x60>)
 800a3e2:	fba2 2303 	umull	r2, r3, r2, r3
 800a3e6:	091b      	lsrs	r3, r3, #4
 800a3e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a3ea:	4a12      	ldr	r2, [pc, #72]	; (800a434 <DMA_CalcBaseAndBitshift+0x64>)
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	4413      	add	r3, r2
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	2b03      	cmp	r3, #3
 800a3fc:	d908      	bls.n	800a410 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	461a      	mov	r2, r3
 800a404:	4b0c      	ldr	r3, [pc, #48]	; (800a438 <DMA_CalcBaseAndBitshift+0x68>)
 800a406:	4013      	ands	r3, r2
 800a408:	1d1a      	adds	r2, r3, #4
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	659a      	str	r2, [r3, #88]	; 0x58
 800a40e:	e006      	b.n	800a41e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	461a      	mov	r2, r3
 800a416:	4b08      	ldr	r3, [pc, #32]	; (800a438 <DMA_CalcBaseAndBitshift+0x68>)
 800a418:	4013      	ands	r3, r2
 800a41a:	687a      	ldr	r2, [r7, #4]
 800a41c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a422:	4618      	mov	r0, r3
 800a424:	3714      	adds	r7, #20
 800a426:	46bd      	mov	sp, r7
 800a428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42c:	4770      	bx	lr
 800a42e:	bf00      	nop
 800a430:	aaaaaaab 	.word	0xaaaaaaab
 800a434:	0801b2ec 	.word	0x0801b2ec
 800a438:	fffffc00 	.word	0xfffffc00

0800a43c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b085      	sub	sp, #20
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a444:	2300      	movs	r3, #0
 800a446:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a44c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	699b      	ldr	r3, [r3, #24]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d11f      	bne.n	800a496 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	2b03      	cmp	r3, #3
 800a45a:	d856      	bhi.n	800a50a <DMA_CheckFifoParam+0xce>
 800a45c:	a201      	add	r2, pc, #4	; (adr r2, 800a464 <DMA_CheckFifoParam+0x28>)
 800a45e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a462:	bf00      	nop
 800a464:	0800a475 	.word	0x0800a475
 800a468:	0800a487 	.word	0x0800a487
 800a46c:	0800a475 	.word	0x0800a475
 800a470:	0800a50b 	.word	0x0800a50b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a478:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d046      	beq.n	800a50e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800a480:	2301      	movs	r3, #1
 800a482:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a484:	e043      	b.n	800a50e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a48a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a48e:	d140      	bne.n	800a512 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800a490:	2301      	movs	r3, #1
 800a492:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a494:	e03d      	b.n	800a512 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	699b      	ldr	r3, [r3, #24]
 800a49a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a49e:	d121      	bne.n	800a4e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	2b03      	cmp	r3, #3
 800a4a4:	d837      	bhi.n	800a516 <DMA_CheckFifoParam+0xda>
 800a4a6:	a201      	add	r2, pc, #4	; (adr r2, 800a4ac <DMA_CheckFifoParam+0x70>)
 800a4a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ac:	0800a4bd 	.word	0x0800a4bd
 800a4b0:	0800a4c3 	.word	0x0800a4c3
 800a4b4:	0800a4bd 	.word	0x0800a4bd
 800a4b8:	0800a4d5 	.word	0x0800a4d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a4bc:	2301      	movs	r3, #1
 800a4be:	73fb      	strb	r3, [r7, #15]
      break;
 800a4c0:	e030      	b.n	800a524 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d025      	beq.n	800a51a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a4d2:	e022      	b.n	800a51a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a4dc:	d11f      	bne.n	800a51e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800a4de:	2301      	movs	r3, #1
 800a4e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a4e2:	e01c      	b.n	800a51e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	2b02      	cmp	r3, #2
 800a4e8:	d903      	bls.n	800a4f2 <DMA_CheckFifoParam+0xb6>
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	2b03      	cmp	r3, #3
 800a4ee:	d003      	beq.n	800a4f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a4f0:	e018      	b.n	800a524 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	73fb      	strb	r3, [r7, #15]
      break;
 800a4f6:	e015      	b.n	800a524 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a500:	2b00      	cmp	r3, #0
 800a502:	d00e      	beq.n	800a522 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800a504:	2301      	movs	r3, #1
 800a506:	73fb      	strb	r3, [r7, #15]
      break;
 800a508:	e00b      	b.n	800a522 <DMA_CheckFifoParam+0xe6>
      break;
 800a50a:	bf00      	nop
 800a50c:	e00a      	b.n	800a524 <DMA_CheckFifoParam+0xe8>
      break;
 800a50e:	bf00      	nop
 800a510:	e008      	b.n	800a524 <DMA_CheckFifoParam+0xe8>
      break;
 800a512:	bf00      	nop
 800a514:	e006      	b.n	800a524 <DMA_CheckFifoParam+0xe8>
      break;
 800a516:	bf00      	nop
 800a518:	e004      	b.n	800a524 <DMA_CheckFifoParam+0xe8>
      break;
 800a51a:	bf00      	nop
 800a51c:	e002      	b.n	800a524 <DMA_CheckFifoParam+0xe8>
      break;   
 800a51e:	bf00      	nop
 800a520:	e000      	b.n	800a524 <DMA_CheckFifoParam+0xe8>
      break;
 800a522:	bf00      	nop
    }
  } 
  
  return status; 
 800a524:	7bfb      	ldrb	r3, [r7, #15]
}
 800a526:	4618      	mov	r0, r3
 800a528:	3714      	adds	r7, #20
 800a52a:	46bd      	mov	sp, r7
 800a52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a530:	4770      	bx	lr
 800a532:	bf00      	nop

0800a534 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a534:	b480      	push	{r7}
 800a536:	b089      	sub	sp, #36	; 0x24
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
 800a53c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800a53e:	2300      	movs	r3, #0
 800a540:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800a542:	2300      	movs	r3, #0
 800a544:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800a546:	2300      	movs	r3, #0
 800a548:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800a54a:	2300      	movs	r3, #0
 800a54c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800a54e:	2300      	movs	r3, #0
 800a550:	61fb      	str	r3, [r7, #28]
 800a552:	e175      	b.n	800a840 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800a554:	2201      	movs	r2, #1
 800a556:	69fb      	ldr	r3, [r7, #28]
 800a558:	fa02 f303 	lsl.w	r3, r2, r3
 800a55c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	697a      	ldr	r2, [r7, #20]
 800a564:	4013      	ands	r3, r2
 800a566:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a568:	693a      	ldr	r2, [r7, #16]
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	429a      	cmp	r2, r3
 800a56e:	f040 8164 	bne.w	800a83a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	685b      	ldr	r3, [r3, #4]
 800a576:	f003 0303 	and.w	r3, r3, #3
 800a57a:	2b01      	cmp	r3, #1
 800a57c:	d005      	beq.n	800a58a <HAL_GPIO_Init+0x56>
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	f003 0303 	and.w	r3, r3, #3
 800a586:	2b02      	cmp	r3, #2
 800a588:	d130      	bne.n	800a5ec <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	689b      	ldr	r3, [r3, #8]
 800a58e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800a590:	69fb      	ldr	r3, [r7, #28]
 800a592:	005b      	lsls	r3, r3, #1
 800a594:	2203      	movs	r2, #3
 800a596:	fa02 f303 	lsl.w	r3, r2, r3
 800a59a:	43db      	mvns	r3, r3
 800a59c:	69ba      	ldr	r2, [r7, #24]
 800a59e:	4013      	ands	r3, r2
 800a5a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	68da      	ldr	r2, [r3, #12]
 800a5a6:	69fb      	ldr	r3, [r7, #28]
 800a5a8:	005b      	lsls	r3, r3, #1
 800a5aa:	fa02 f303 	lsl.w	r3, r2, r3
 800a5ae:	69ba      	ldr	r2, [r7, #24]
 800a5b0:	4313      	orrs	r3, r2
 800a5b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	69ba      	ldr	r2, [r7, #24]
 800a5b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	685b      	ldr	r3, [r3, #4]
 800a5be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a5c0:	2201      	movs	r2, #1
 800a5c2:	69fb      	ldr	r3, [r7, #28]
 800a5c4:	fa02 f303 	lsl.w	r3, r2, r3
 800a5c8:	43db      	mvns	r3, r3
 800a5ca:	69ba      	ldr	r2, [r7, #24]
 800a5cc:	4013      	ands	r3, r2
 800a5ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	685b      	ldr	r3, [r3, #4]
 800a5d4:	091b      	lsrs	r3, r3, #4
 800a5d6:	f003 0201 	and.w	r2, r3, #1
 800a5da:	69fb      	ldr	r3, [r7, #28]
 800a5dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a5e0:	69ba      	ldr	r2, [r7, #24]
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	69ba      	ldr	r2, [r7, #24]
 800a5ea:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	f003 0303 	and.w	r3, r3, #3
 800a5f4:	2b03      	cmp	r3, #3
 800a5f6:	d017      	beq.n	800a628 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	68db      	ldr	r3, [r3, #12]
 800a5fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800a5fe:	69fb      	ldr	r3, [r7, #28]
 800a600:	005b      	lsls	r3, r3, #1
 800a602:	2203      	movs	r2, #3
 800a604:	fa02 f303 	lsl.w	r3, r2, r3
 800a608:	43db      	mvns	r3, r3
 800a60a:	69ba      	ldr	r2, [r7, #24]
 800a60c:	4013      	ands	r3, r2
 800a60e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	689a      	ldr	r2, [r3, #8]
 800a614:	69fb      	ldr	r3, [r7, #28]
 800a616:	005b      	lsls	r3, r3, #1
 800a618:	fa02 f303 	lsl.w	r3, r2, r3
 800a61c:	69ba      	ldr	r2, [r7, #24]
 800a61e:	4313      	orrs	r3, r2
 800a620:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	69ba      	ldr	r2, [r7, #24]
 800a626:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	685b      	ldr	r3, [r3, #4]
 800a62c:	f003 0303 	and.w	r3, r3, #3
 800a630:	2b02      	cmp	r3, #2
 800a632:	d123      	bne.n	800a67c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800a634:	69fb      	ldr	r3, [r7, #28]
 800a636:	08da      	lsrs	r2, r3, #3
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	3208      	adds	r2, #8
 800a63c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a640:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800a642:	69fb      	ldr	r3, [r7, #28]
 800a644:	f003 0307 	and.w	r3, r3, #7
 800a648:	009b      	lsls	r3, r3, #2
 800a64a:	220f      	movs	r2, #15
 800a64c:	fa02 f303 	lsl.w	r3, r2, r3
 800a650:	43db      	mvns	r3, r3
 800a652:	69ba      	ldr	r2, [r7, #24]
 800a654:	4013      	ands	r3, r2
 800a656:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	691a      	ldr	r2, [r3, #16]
 800a65c:	69fb      	ldr	r3, [r7, #28]
 800a65e:	f003 0307 	and.w	r3, r3, #7
 800a662:	009b      	lsls	r3, r3, #2
 800a664:	fa02 f303 	lsl.w	r3, r2, r3
 800a668:	69ba      	ldr	r2, [r7, #24]
 800a66a:	4313      	orrs	r3, r2
 800a66c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800a66e:	69fb      	ldr	r3, [r7, #28]
 800a670:	08da      	lsrs	r2, r3, #3
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	3208      	adds	r2, #8
 800a676:	69b9      	ldr	r1, [r7, #24]
 800a678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800a682:	69fb      	ldr	r3, [r7, #28]
 800a684:	005b      	lsls	r3, r3, #1
 800a686:	2203      	movs	r2, #3
 800a688:	fa02 f303 	lsl.w	r3, r2, r3
 800a68c:	43db      	mvns	r3, r3
 800a68e:	69ba      	ldr	r2, [r7, #24]
 800a690:	4013      	ands	r3, r2
 800a692:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	685b      	ldr	r3, [r3, #4]
 800a698:	f003 0203 	and.w	r2, r3, #3
 800a69c:	69fb      	ldr	r3, [r7, #28]
 800a69e:	005b      	lsls	r3, r3, #1
 800a6a0:	fa02 f303 	lsl.w	r3, r2, r3
 800a6a4:	69ba      	ldr	r2, [r7, #24]
 800a6a6:	4313      	orrs	r3, r2
 800a6a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	69ba      	ldr	r2, [r7, #24]
 800a6ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	685b      	ldr	r3, [r3, #4]
 800a6b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	f000 80be 	beq.w	800a83a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a6be:	4b66      	ldr	r3, [pc, #408]	; (800a858 <HAL_GPIO_Init+0x324>)
 800a6c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6c2:	4a65      	ldr	r2, [pc, #404]	; (800a858 <HAL_GPIO_Init+0x324>)
 800a6c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a6c8:	6453      	str	r3, [r2, #68]	; 0x44
 800a6ca:	4b63      	ldr	r3, [pc, #396]	; (800a858 <HAL_GPIO_Init+0x324>)
 800a6cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a6d2:	60fb      	str	r3, [r7, #12]
 800a6d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800a6d6:	4a61      	ldr	r2, [pc, #388]	; (800a85c <HAL_GPIO_Init+0x328>)
 800a6d8:	69fb      	ldr	r3, [r7, #28]
 800a6da:	089b      	lsrs	r3, r3, #2
 800a6dc:	3302      	adds	r3, #2
 800a6de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800a6e4:	69fb      	ldr	r3, [r7, #28]
 800a6e6:	f003 0303 	and.w	r3, r3, #3
 800a6ea:	009b      	lsls	r3, r3, #2
 800a6ec:	220f      	movs	r2, #15
 800a6ee:	fa02 f303 	lsl.w	r3, r2, r3
 800a6f2:	43db      	mvns	r3, r3
 800a6f4:	69ba      	ldr	r2, [r7, #24]
 800a6f6:	4013      	ands	r3, r2
 800a6f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	4a58      	ldr	r2, [pc, #352]	; (800a860 <HAL_GPIO_Init+0x32c>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d037      	beq.n	800a772 <HAL_GPIO_Init+0x23e>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	4a57      	ldr	r2, [pc, #348]	; (800a864 <HAL_GPIO_Init+0x330>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d031      	beq.n	800a76e <HAL_GPIO_Init+0x23a>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	4a56      	ldr	r2, [pc, #344]	; (800a868 <HAL_GPIO_Init+0x334>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d02b      	beq.n	800a76a <HAL_GPIO_Init+0x236>
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	4a55      	ldr	r2, [pc, #340]	; (800a86c <HAL_GPIO_Init+0x338>)
 800a716:	4293      	cmp	r3, r2
 800a718:	d025      	beq.n	800a766 <HAL_GPIO_Init+0x232>
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	4a54      	ldr	r2, [pc, #336]	; (800a870 <HAL_GPIO_Init+0x33c>)
 800a71e:	4293      	cmp	r3, r2
 800a720:	d01f      	beq.n	800a762 <HAL_GPIO_Init+0x22e>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	4a53      	ldr	r2, [pc, #332]	; (800a874 <HAL_GPIO_Init+0x340>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d019      	beq.n	800a75e <HAL_GPIO_Init+0x22a>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	4a52      	ldr	r2, [pc, #328]	; (800a878 <HAL_GPIO_Init+0x344>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d013      	beq.n	800a75a <HAL_GPIO_Init+0x226>
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	4a51      	ldr	r2, [pc, #324]	; (800a87c <HAL_GPIO_Init+0x348>)
 800a736:	4293      	cmp	r3, r2
 800a738:	d00d      	beq.n	800a756 <HAL_GPIO_Init+0x222>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	4a50      	ldr	r2, [pc, #320]	; (800a880 <HAL_GPIO_Init+0x34c>)
 800a73e:	4293      	cmp	r3, r2
 800a740:	d007      	beq.n	800a752 <HAL_GPIO_Init+0x21e>
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	4a4f      	ldr	r2, [pc, #316]	; (800a884 <HAL_GPIO_Init+0x350>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d101      	bne.n	800a74e <HAL_GPIO_Init+0x21a>
 800a74a:	2309      	movs	r3, #9
 800a74c:	e012      	b.n	800a774 <HAL_GPIO_Init+0x240>
 800a74e:	230a      	movs	r3, #10
 800a750:	e010      	b.n	800a774 <HAL_GPIO_Init+0x240>
 800a752:	2308      	movs	r3, #8
 800a754:	e00e      	b.n	800a774 <HAL_GPIO_Init+0x240>
 800a756:	2307      	movs	r3, #7
 800a758:	e00c      	b.n	800a774 <HAL_GPIO_Init+0x240>
 800a75a:	2306      	movs	r3, #6
 800a75c:	e00a      	b.n	800a774 <HAL_GPIO_Init+0x240>
 800a75e:	2305      	movs	r3, #5
 800a760:	e008      	b.n	800a774 <HAL_GPIO_Init+0x240>
 800a762:	2304      	movs	r3, #4
 800a764:	e006      	b.n	800a774 <HAL_GPIO_Init+0x240>
 800a766:	2303      	movs	r3, #3
 800a768:	e004      	b.n	800a774 <HAL_GPIO_Init+0x240>
 800a76a:	2302      	movs	r3, #2
 800a76c:	e002      	b.n	800a774 <HAL_GPIO_Init+0x240>
 800a76e:	2301      	movs	r3, #1
 800a770:	e000      	b.n	800a774 <HAL_GPIO_Init+0x240>
 800a772:	2300      	movs	r3, #0
 800a774:	69fa      	ldr	r2, [r7, #28]
 800a776:	f002 0203 	and.w	r2, r2, #3
 800a77a:	0092      	lsls	r2, r2, #2
 800a77c:	4093      	lsls	r3, r2
 800a77e:	69ba      	ldr	r2, [r7, #24]
 800a780:	4313      	orrs	r3, r2
 800a782:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800a784:	4935      	ldr	r1, [pc, #212]	; (800a85c <HAL_GPIO_Init+0x328>)
 800a786:	69fb      	ldr	r3, [r7, #28]
 800a788:	089b      	lsrs	r3, r3, #2
 800a78a:	3302      	adds	r3, #2
 800a78c:	69ba      	ldr	r2, [r7, #24]
 800a78e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a792:	4b3d      	ldr	r3, [pc, #244]	; (800a888 <HAL_GPIO_Init+0x354>)
 800a794:	689b      	ldr	r3, [r3, #8]
 800a796:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	43db      	mvns	r3, r3
 800a79c:	69ba      	ldr	r2, [r7, #24]
 800a79e:	4013      	ands	r3, r2
 800a7a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	685b      	ldr	r3, [r3, #4]
 800a7a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d003      	beq.n	800a7b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800a7ae:	69ba      	ldr	r2, [r7, #24]
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	4313      	orrs	r3, r2
 800a7b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a7b6:	4a34      	ldr	r2, [pc, #208]	; (800a888 <HAL_GPIO_Init+0x354>)
 800a7b8:	69bb      	ldr	r3, [r7, #24]
 800a7ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a7bc:	4b32      	ldr	r3, [pc, #200]	; (800a888 <HAL_GPIO_Init+0x354>)
 800a7be:	68db      	ldr	r3, [r3, #12]
 800a7c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	43db      	mvns	r3, r3
 800a7c6:	69ba      	ldr	r2, [r7, #24]
 800a7c8:	4013      	ands	r3, r2
 800a7ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	685b      	ldr	r3, [r3, #4]
 800a7d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d003      	beq.n	800a7e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800a7d8:	69ba      	ldr	r2, [r7, #24]
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	4313      	orrs	r3, r2
 800a7de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a7e0:	4a29      	ldr	r2, [pc, #164]	; (800a888 <HAL_GPIO_Init+0x354>)
 800a7e2:	69bb      	ldr	r3, [r7, #24]
 800a7e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800a7e6:	4b28      	ldr	r3, [pc, #160]	; (800a888 <HAL_GPIO_Init+0x354>)
 800a7e8:	685b      	ldr	r3, [r3, #4]
 800a7ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	43db      	mvns	r3, r3
 800a7f0:	69ba      	ldr	r2, [r7, #24]
 800a7f2:	4013      	ands	r3, r2
 800a7f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	685b      	ldr	r3, [r3, #4]
 800a7fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d003      	beq.n	800a80a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800a802:	69ba      	ldr	r2, [r7, #24]
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	4313      	orrs	r3, r2
 800a808:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a80a:	4a1f      	ldr	r2, [pc, #124]	; (800a888 <HAL_GPIO_Init+0x354>)
 800a80c:	69bb      	ldr	r3, [r7, #24]
 800a80e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a810:	4b1d      	ldr	r3, [pc, #116]	; (800a888 <HAL_GPIO_Init+0x354>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a816:	693b      	ldr	r3, [r7, #16]
 800a818:	43db      	mvns	r3, r3
 800a81a:	69ba      	ldr	r2, [r7, #24]
 800a81c:	4013      	ands	r3, r2
 800a81e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d003      	beq.n	800a834 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800a82c:	69ba      	ldr	r2, [r7, #24]
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	4313      	orrs	r3, r2
 800a832:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a834:	4a14      	ldr	r2, [pc, #80]	; (800a888 <HAL_GPIO_Init+0x354>)
 800a836:	69bb      	ldr	r3, [r7, #24]
 800a838:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800a83a:	69fb      	ldr	r3, [r7, #28]
 800a83c:	3301      	adds	r3, #1
 800a83e:	61fb      	str	r3, [r7, #28]
 800a840:	69fb      	ldr	r3, [r7, #28]
 800a842:	2b0f      	cmp	r3, #15
 800a844:	f67f ae86 	bls.w	800a554 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800a848:	bf00      	nop
 800a84a:	bf00      	nop
 800a84c:	3724      	adds	r7, #36	; 0x24
 800a84e:	46bd      	mov	sp, r7
 800a850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a854:	4770      	bx	lr
 800a856:	bf00      	nop
 800a858:	40023800 	.word	0x40023800
 800a85c:	40013800 	.word	0x40013800
 800a860:	40020000 	.word	0x40020000
 800a864:	40020400 	.word	0x40020400
 800a868:	40020800 	.word	0x40020800
 800a86c:	40020c00 	.word	0x40020c00
 800a870:	40021000 	.word	0x40021000
 800a874:	40021400 	.word	0x40021400
 800a878:	40021800 	.word	0x40021800
 800a87c:	40021c00 	.word	0x40021c00
 800a880:	40022000 	.word	0x40022000
 800a884:	40022400 	.word	0x40022400
 800a888:	40013c00 	.word	0x40013c00

0800a88c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b087      	sub	sp, #28
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800a896:	2300      	movs	r3, #0
 800a898:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800a89a:	2300      	movs	r3, #0
 800a89c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	617b      	str	r3, [r7, #20]
 800a8a6:	e0d9      	b.n	800aa5c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800a8a8:	2201      	movs	r2, #1
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a8b0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800a8b2:	683a      	ldr	r2, [r7, #0]
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	4013      	ands	r3, r2
 800a8b8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800a8ba:	68fa      	ldr	r2, [r7, #12]
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	f040 80c9 	bne.w	800aa56 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 800a8c4:	4a6b      	ldr	r2, [pc, #428]	; (800aa74 <HAL_GPIO_DeInit+0x1e8>)
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	089b      	lsrs	r3, r3, #2
 800a8ca:	3302      	adds	r3, #2
 800a8cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8d0:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	f003 0303 	and.w	r3, r3, #3
 800a8d8:	009b      	lsls	r3, r3, #2
 800a8da:	220f      	movs	r2, #15
 800a8dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a8e0:	68ba      	ldr	r2, [r7, #8]
 800a8e2:	4013      	ands	r3, r2
 800a8e4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	4a63      	ldr	r2, [pc, #396]	; (800aa78 <HAL_GPIO_DeInit+0x1ec>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d037      	beq.n	800a95e <HAL_GPIO_DeInit+0xd2>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	4a62      	ldr	r2, [pc, #392]	; (800aa7c <HAL_GPIO_DeInit+0x1f0>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d031      	beq.n	800a95a <HAL_GPIO_DeInit+0xce>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	4a61      	ldr	r2, [pc, #388]	; (800aa80 <HAL_GPIO_DeInit+0x1f4>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d02b      	beq.n	800a956 <HAL_GPIO_DeInit+0xca>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	4a60      	ldr	r2, [pc, #384]	; (800aa84 <HAL_GPIO_DeInit+0x1f8>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d025      	beq.n	800a952 <HAL_GPIO_DeInit+0xc6>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	4a5f      	ldr	r2, [pc, #380]	; (800aa88 <HAL_GPIO_DeInit+0x1fc>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d01f      	beq.n	800a94e <HAL_GPIO_DeInit+0xc2>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	4a5e      	ldr	r2, [pc, #376]	; (800aa8c <HAL_GPIO_DeInit+0x200>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d019      	beq.n	800a94a <HAL_GPIO_DeInit+0xbe>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	4a5d      	ldr	r2, [pc, #372]	; (800aa90 <HAL_GPIO_DeInit+0x204>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d013      	beq.n	800a946 <HAL_GPIO_DeInit+0xba>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	4a5c      	ldr	r2, [pc, #368]	; (800aa94 <HAL_GPIO_DeInit+0x208>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d00d      	beq.n	800a942 <HAL_GPIO_DeInit+0xb6>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	4a5b      	ldr	r2, [pc, #364]	; (800aa98 <HAL_GPIO_DeInit+0x20c>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d007      	beq.n	800a93e <HAL_GPIO_DeInit+0xb2>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	4a5a      	ldr	r2, [pc, #360]	; (800aa9c <HAL_GPIO_DeInit+0x210>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d101      	bne.n	800a93a <HAL_GPIO_DeInit+0xae>
 800a936:	2309      	movs	r3, #9
 800a938:	e012      	b.n	800a960 <HAL_GPIO_DeInit+0xd4>
 800a93a:	230a      	movs	r3, #10
 800a93c:	e010      	b.n	800a960 <HAL_GPIO_DeInit+0xd4>
 800a93e:	2308      	movs	r3, #8
 800a940:	e00e      	b.n	800a960 <HAL_GPIO_DeInit+0xd4>
 800a942:	2307      	movs	r3, #7
 800a944:	e00c      	b.n	800a960 <HAL_GPIO_DeInit+0xd4>
 800a946:	2306      	movs	r3, #6
 800a948:	e00a      	b.n	800a960 <HAL_GPIO_DeInit+0xd4>
 800a94a:	2305      	movs	r3, #5
 800a94c:	e008      	b.n	800a960 <HAL_GPIO_DeInit+0xd4>
 800a94e:	2304      	movs	r3, #4
 800a950:	e006      	b.n	800a960 <HAL_GPIO_DeInit+0xd4>
 800a952:	2303      	movs	r3, #3
 800a954:	e004      	b.n	800a960 <HAL_GPIO_DeInit+0xd4>
 800a956:	2302      	movs	r3, #2
 800a958:	e002      	b.n	800a960 <HAL_GPIO_DeInit+0xd4>
 800a95a:	2301      	movs	r3, #1
 800a95c:	e000      	b.n	800a960 <HAL_GPIO_DeInit+0xd4>
 800a95e:	2300      	movs	r3, #0
 800a960:	697a      	ldr	r2, [r7, #20]
 800a962:	f002 0203 	and.w	r2, r2, #3
 800a966:	0092      	lsls	r2, r2, #2
 800a968:	4093      	lsls	r3, r2
 800a96a:	68ba      	ldr	r2, [r7, #8]
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d132      	bne.n	800a9d6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800a970:	4b4b      	ldr	r3, [pc, #300]	; (800aaa0 <HAL_GPIO_DeInit+0x214>)
 800a972:	681a      	ldr	r2, [r3, #0]
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	43db      	mvns	r3, r3
 800a978:	4949      	ldr	r1, [pc, #292]	; (800aaa0 <HAL_GPIO_DeInit+0x214>)
 800a97a:	4013      	ands	r3, r2
 800a97c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800a97e:	4b48      	ldr	r3, [pc, #288]	; (800aaa0 <HAL_GPIO_DeInit+0x214>)
 800a980:	685a      	ldr	r2, [r3, #4]
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	43db      	mvns	r3, r3
 800a986:	4946      	ldr	r1, [pc, #280]	; (800aaa0 <HAL_GPIO_DeInit+0x214>)
 800a988:	4013      	ands	r3, r2
 800a98a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800a98c:	4b44      	ldr	r3, [pc, #272]	; (800aaa0 <HAL_GPIO_DeInit+0x214>)
 800a98e:	68da      	ldr	r2, [r3, #12]
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	43db      	mvns	r3, r3
 800a994:	4942      	ldr	r1, [pc, #264]	; (800aaa0 <HAL_GPIO_DeInit+0x214>)
 800a996:	4013      	ands	r3, r2
 800a998:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800a99a:	4b41      	ldr	r3, [pc, #260]	; (800aaa0 <HAL_GPIO_DeInit+0x214>)
 800a99c:	689a      	ldr	r2, [r3, #8]
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	43db      	mvns	r3, r3
 800a9a2:	493f      	ldr	r1, [pc, #252]	; (800aaa0 <HAL_GPIO_DeInit+0x214>)
 800a9a4:	4013      	ands	r3, r2
 800a9a6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800a9a8:	697b      	ldr	r3, [r7, #20]
 800a9aa:	f003 0303 	and.w	r3, r3, #3
 800a9ae:	009b      	lsls	r3, r3, #2
 800a9b0:	220f      	movs	r2, #15
 800a9b2:	fa02 f303 	lsl.w	r3, r2, r3
 800a9b6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800a9b8:	4a2e      	ldr	r2, [pc, #184]	; (800aa74 <HAL_GPIO_DeInit+0x1e8>)
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	089b      	lsrs	r3, r3, #2
 800a9be:	3302      	adds	r3, #2
 800a9c0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	43da      	mvns	r2, r3
 800a9c8:	482a      	ldr	r0, [pc, #168]	; (800aa74 <HAL_GPIO_DeInit+0x1e8>)
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	089b      	lsrs	r3, r3, #2
 800a9ce:	400a      	ands	r2, r1
 800a9d0:	3302      	adds	r3, #2
 800a9d2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681a      	ldr	r2, [r3, #0]
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	005b      	lsls	r3, r3, #1
 800a9de:	2103      	movs	r1, #3
 800a9e0:	fa01 f303 	lsl.w	r3, r1, r3
 800a9e4:	43db      	mvns	r3, r3
 800a9e6:	401a      	ands	r2, r3
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	08da      	lsrs	r2, r3, #3
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	3208      	adds	r2, #8
 800a9f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	f003 0307 	and.w	r3, r3, #7
 800a9fe:	009b      	lsls	r3, r3, #2
 800aa00:	220f      	movs	r2, #15
 800aa02:	fa02 f303 	lsl.w	r3, r2, r3
 800aa06:	43db      	mvns	r3, r3
 800aa08:	697a      	ldr	r2, [r7, #20]
 800aa0a:	08d2      	lsrs	r2, r2, #3
 800aa0c:	4019      	ands	r1, r3
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	3208      	adds	r2, #8
 800aa12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	68da      	ldr	r2, [r3, #12]
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	005b      	lsls	r3, r3, #1
 800aa1e:	2103      	movs	r1, #3
 800aa20:	fa01 f303 	lsl.w	r3, r1, r3
 800aa24:	43db      	mvns	r3, r3
 800aa26:	401a      	ands	r2, r3
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	685a      	ldr	r2, [r3, #4]
 800aa30:	2101      	movs	r1, #1
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	fa01 f303 	lsl.w	r3, r1, r3
 800aa38:	43db      	mvns	r3, r3
 800aa3a:	401a      	ands	r2, r3
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	689a      	ldr	r2, [r3, #8]
 800aa44:	697b      	ldr	r3, [r7, #20]
 800aa46:	005b      	lsls	r3, r3, #1
 800aa48:	2103      	movs	r1, #3
 800aa4a:	fa01 f303 	lsl.w	r3, r1, r3
 800aa4e:	43db      	mvns	r3, r3
 800aa50:	401a      	ands	r2, r3
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	3301      	adds	r3, #1
 800aa5a:	617b      	str	r3, [r7, #20]
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	2b0f      	cmp	r3, #15
 800aa60:	f67f af22 	bls.w	800a8a8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800aa64:	bf00      	nop
 800aa66:	bf00      	nop
 800aa68:	371c      	adds	r7, #28
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa70:	4770      	bx	lr
 800aa72:	bf00      	nop
 800aa74:	40013800 	.word	0x40013800
 800aa78:	40020000 	.word	0x40020000
 800aa7c:	40020400 	.word	0x40020400
 800aa80:	40020800 	.word	0x40020800
 800aa84:	40020c00 	.word	0x40020c00
 800aa88:	40021000 	.word	0x40021000
 800aa8c:	40021400 	.word	0x40021400
 800aa90:	40021800 	.word	0x40021800
 800aa94:	40021c00 	.word	0x40021c00
 800aa98:	40022000 	.word	0x40022000
 800aa9c:	40022400 	.word	0x40022400
 800aaa0:	40013c00 	.word	0x40013c00

0800aaa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b083      	sub	sp, #12
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	460b      	mov	r3, r1
 800aaae:	807b      	strh	r3, [r7, #2]
 800aab0:	4613      	mov	r3, r2
 800aab2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800aab4:	787b      	ldrb	r3, [r7, #1]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d003      	beq.n	800aac2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800aaba:	887a      	ldrh	r2, [r7, #2]
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800aac0:	e003      	b.n	800aaca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800aac2:	887b      	ldrh	r3, [r7, #2]
 800aac4:	041a      	lsls	r2, r3, #16
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	619a      	str	r2, [r3, #24]
}
 800aaca:	bf00      	nop
 800aacc:	370c      	adds	r7, #12
 800aace:	46bd      	mov	sp, r7
 800aad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad4:	4770      	bx	lr

0800aad6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800aad6:	b480      	push	{r7}
 800aad8:	b085      	sub	sp, #20
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
 800aade:	460b      	mov	r3, r1
 800aae0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	695b      	ldr	r3, [r3, #20]
 800aae6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800aae8:	887a      	ldrh	r2, [r7, #2]
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	4013      	ands	r3, r2
 800aaee:	041a      	lsls	r2, r3, #16
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	43d9      	mvns	r1, r3
 800aaf4:	887b      	ldrh	r3, [r7, #2]
 800aaf6:	400b      	ands	r3, r1
 800aaf8:	431a      	orrs	r2, r3
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	619a      	str	r2, [r3, #24]
}
 800aafe:	bf00      	nop
 800ab00:	3714      	adds	r7, #20
 800ab02:	46bd      	mov	sp, r7
 800ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab08:	4770      	bx	lr

0800ab0a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800ab0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab0c:	b08f      	sub	sp, #60	; 0x3c
 800ab0e:	af0a      	add	r7, sp, #40	; 0x28
 800ab10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d101      	bne.n	800ab1c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800ab18:	2301      	movs	r3, #1
 800ab1a:	e054      	b.n	800abc6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800ab28:	b2db      	uxtb	r3, r3
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d106      	bne.n	800ab3c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2200      	movs	r2, #0
 800ab32:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f7f8 fbe6 	bl	8003308 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2203      	movs	r2, #3
 800ab40:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d102      	bne.n	800ab56 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2200      	movs	r2, #0
 800ab54:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f007 fd80 	bl	8012660 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	603b      	str	r3, [r7, #0]
 800ab66:	687e      	ldr	r6, [r7, #4]
 800ab68:	466d      	mov	r5, sp
 800ab6a:	f106 0410 	add.w	r4, r6, #16
 800ab6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ab70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ab72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ab74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ab76:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ab7a:	e885 0003 	stmia.w	r5, {r0, r1}
 800ab7e:	1d33      	adds	r3, r6, #4
 800ab80:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ab82:	6838      	ldr	r0, [r7, #0]
 800ab84:	f007 fd14 	bl	80125b0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	2101      	movs	r1, #1
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f007 fd77 	bl	8012682 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	603b      	str	r3, [r7, #0]
 800ab9a:	687e      	ldr	r6, [r7, #4]
 800ab9c:	466d      	mov	r5, sp
 800ab9e:	f106 0410 	add.w	r4, r6, #16
 800aba2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aba4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aba6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aba8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800abaa:	e894 0003 	ldmia.w	r4, {r0, r1}
 800abae:	e885 0003 	stmia.w	r5, {r0, r1}
 800abb2:	1d33      	adds	r3, r6, #4
 800abb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800abb6:	6838      	ldr	r0, [r7, #0]
 800abb8:	f007 fe56 	bl	8012868 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2201      	movs	r2, #1
 800abc0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800abc4:	2300      	movs	r3, #0
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	3714      	adds	r7, #20
 800abca:	46bd      	mov	sp, r7
 800abcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800abd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b082      	sub	sp, #8
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d101      	bne.n	800abe2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800abde:	2301      	movs	r3, #1
 800abe0:	e07f      	b.n	800ace2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800abe8:	b2db      	uxtb	r3, r3
 800abea:	2b00      	cmp	r3, #0
 800abec:	d106      	bne.n	800abfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2200      	movs	r2, #0
 800abf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f7f6 febe 	bl	8001978 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2224      	movs	r2, #36	; 0x24
 800ac00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	681a      	ldr	r2, [r3, #0]
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f022 0201 	bic.w	r2, r2, #1
 800ac12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	685a      	ldr	r2, [r3, #4]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800ac20:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	689a      	ldr	r2, [r3, #8]
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ac30:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	68db      	ldr	r3, [r3, #12]
 800ac36:	2b01      	cmp	r3, #1
 800ac38:	d107      	bne.n	800ac4a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	689a      	ldr	r2, [r3, #8]
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ac46:	609a      	str	r2, [r3, #8]
 800ac48:	e006      	b.n	800ac58 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	689a      	ldr	r2, [r3, #8]
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800ac56:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	68db      	ldr	r3, [r3, #12]
 800ac5c:	2b02      	cmp	r3, #2
 800ac5e:	d104      	bne.n	800ac6a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ac68:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	6859      	ldr	r1, [r3, #4]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681a      	ldr	r2, [r3, #0]
 800ac74:	4b1d      	ldr	r3, [pc, #116]	; (800acec <HAL_I2C_Init+0x11c>)
 800ac76:	430b      	orrs	r3, r1
 800ac78:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	68da      	ldr	r2, [r3, #12]
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ac88:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	691a      	ldr	r2, [r3, #16]
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	695b      	ldr	r3, [r3, #20]
 800ac92:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	699b      	ldr	r3, [r3, #24]
 800ac9a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	430a      	orrs	r2, r1
 800aca2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	69d9      	ldr	r1, [r3, #28]
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6a1a      	ldr	r2, [r3, #32]
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	430a      	orrs	r2, r1
 800acb2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	681a      	ldr	r2, [r3, #0]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f042 0201 	orr.w	r2, r2, #1
 800acc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2200      	movs	r2, #0
 800acc8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2220      	movs	r2, #32
 800acce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2200      	movs	r2, #0
 800acd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2200      	movs	r2, #0
 800acdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800ace0:	2300      	movs	r3, #0
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3708      	adds	r7, #8
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}
 800acea:	bf00      	nop
 800acec:	02008000 	.word	0x02008000

0800acf0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b088      	sub	sp, #32
 800acf4:	af02      	add	r7, sp, #8
 800acf6:	60f8      	str	r0, [r7, #12]
 800acf8:	607a      	str	r2, [r7, #4]
 800acfa:	461a      	mov	r2, r3
 800acfc:	460b      	mov	r3, r1
 800acfe:	817b      	strh	r3, [r7, #10]
 800ad00:	4613      	mov	r3, r2
 800ad02:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad0a:	b2db      	uxtb	r3, r3
 800ad0c:	2b20      	cmp	r3, #32
 800ad0e:	f040 80da 	bne.w	800aec6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ad18:	2b01      	cmp	r3, #1
 800ad1a:	d101      	bne.n	800ad20 <HAL_I2C_Master_Transmit+0x30>
 800ad1c:	2302      	movs	r3, #2
 800ad1e:	e0d3      	b.n	800aec8 <HAL_I2C_Master_Transmit+0x1d8>
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	2201      	movs	r2, #1
 800ad24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ad28:	f7fd fbf2 	bl	8008510 <HAL_GetTick>
 800ad2c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	9300      	str	r3, [sp, #0]
 800ad32:	2319      	movs	r3, #25
 800ad34:	2201      	movs	r2, #1
 800ad36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ad3a:	68f8      	ldr	r0, [r7, #12]
 800ad3c:	f000 fdc4 	bl	800b8c8 <I2C_WaitOnFlagUntilTimeout>
 800ad40:	4603      	mov	r3, r0
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d001      	beq.n	800ad4a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800ad46:	2301      	movs	r3, #1
 800ad48:	e0be      	b.n	800aec8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	2221      	movs	r2, #33	; 0x21
 800ad4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	2210      	movs	r2, #16
 800ad56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	687a      	ldr	r2, [r7, #4]
 800ad64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	893a      	ldrh	r2, [r7, #8]
 800ad6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad76:	b29b      	uxth	r3, r3
 800ad78:	2bff      	cmp	r3, #255	; 0xff
 800ad7a:	d90e      	bls.n	800ad9a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	22ff      	movs	r2, #255	; 0xff
 800ad80:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad86:	b2da      	uxtb	r2, r3
 800ad88:	8979      	ldrh	r1, [r7, #10]
 800ad8a:	4b51      	ldr	r3, [pc, #324]	; (800aed0 <HAL_I2C_Master_Transmit+0x1e0>)
 800ad8c:	9300      	str	r3, [sp, #0]
 800ad8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ad92:	68f8      	ldr	r0, [r7, #12]
 800ad94:	f000 ffae 	bl	800bcf4 <I2C_TransferConfig>
 800ad98:	e06c      	b.n	800ae74 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad9e:	b29a      	uxth	r2, r3
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ada8:	b2da      	uxtb	r2, r3
 800adaa:	8979      	ldrh	r1, [r7, #10]
 800adac:	4b48      	ldr	r3, [pc, #288]	; (800aed0 <HAL_I2C_Master_Transmit+0x1e0>)
 800adae:	9300      	str	r3, [sp, #0]
 800adb0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800adb4:	68f8      	ldr	r0, [r7, #12]
 800adb6:	f000 ff9d 	bl	800bcf4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800adba:	e05b      	b.n	800ae74 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800adbc:	697a      	ldr	r2, [r7, #20]
 800adbe:	6a39      	ldr	r1, [r7, #32]
 800adc0:	68f8      	ldr	r0, [r7, #12]
 800adc2:	f000 fdc1 	bl	800b948 <I2C_WaitOnTXISFlagUntilTimeout>
 800adc6:	4603      	mov	r3, r0
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d001      	beq.n	800add0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800adcc:	2301      	movs	r3, #1
 800adce:	e07b      	b.n	800aec8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add4:	781a      	ldrb	r2, [r3, #0]
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade0:	1c5a      	adds	r2, r3, #1
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800adea:	b29b      	uxth	r3, r3
 800adec:	3b01      	subs	r3, #1
 800adee:	b29a      	uxth	r2, r3
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800adf8:	3b01      	subs	r3, #1
 800adfa:	b29a      	uxth	r2, r3
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae04:	b29b      	uxth	r3, r3
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d034      	beq.n	800ae74 <HAL_I2C_Master_Transmit+0x184>
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d130      	bne.n	800ae74 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	9300      	str	r3, [sp, #0]
 800ae16:	6a3b      	ldr	r3, [r7, #32]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	2180      	movs	r1, #128	; 0x80
 800ae1c:	68f8      	ldr	r0, [r7, #12]
 800ae1e:	f000 fd53 	bl	800b8c8 <I2C_WaitOnFlagUntilTimeout>
 800ae22:	4603      	mov	r3, r0
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d001      	beq.n	800ae2c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800ae28:	2301      	movs	r3, #1
 800ae2a:	e04d      	b.n	800aec8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae30:	b29b      	uxth	r3, r3
 800ae32:	2bff      	cmp	r3, #255	; 0xff
 800ae34:	d90e      	bls.n	800ae54 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	22ff      	movs	r2, #255	; 0xff
 800ae3a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae40:	b2da      	uxtb	r2, r3
 800ae42:	8979      	ldrh	r1, [r7, #10]
 800ae44:	2300      	movs	r3, #0
 800ae46:	9300      	str	r3, [sp, #0]
 800ae48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ae4c:	68f8      	ldr	r0, [r7, #12]
 800ae4e:	f000 ff51 	bl	800bcf4 <I2C_TransferConfig>
 800ae52:	e00f      	b.n	800ae74 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae58:	b29a      	uxth	r2, r3
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae62:	b2da      	uxtb	r2, r3
 800ae64:	8979      	ldrh	r1, [r7, #10]
 800ae66:	2300      	movs	r3, #0
 800ae68:	9300      	str	r3, [sp, #0]
 800ae6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ae6e:	68f8      	ldr	r0, [r7, #12]
 800ae70:	f000 ff40 	bl	800bcf4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae78:	b29b      	uxth	r3, r3
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d19e      	bne.n	800adbc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ae7e:	697a      	ldr	r2, [r7, #20]
 800ae80:	6a39      	ldr	r1, [r7, #32]
 800ae82:	68f8      	ldr	r0, [r7, #12]
 800ae84:	f000 fda0 	bl	800b9c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d001      	beq.n	800ae92 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800ae8e:	2301      	movs	r3, #1
 800ae90:	e01a      	b.n	800aec8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	2220      	movs	r2, #32
 800ae98:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	6859      	ldr	r1, [r3, #4]
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681a      	ldr	r2, [r3, #0]
 800aea4:	4b0b      	ldr	r3, [pc, #44]	; (800aed4 <HAL_I2C_Master_Transmit+0x1e4>)
 800aea6:	400b      	ands	r3, r1
 800aea8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	2220      	movs	r2, #32
 800aeae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	2200      	movs	r2, #0
 800aebe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800aec2:	2300      	movs	r3, #0
 800aec4:	e000      	b.n	800aec8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800aec6:	2302      	movs	r3, #2
  }
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3718      	adds	r7, #24
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}
 800aed0:	80002000 	.word	0x80002000
 800aed4:	fe00e800 	.word	0xfe00e800

0800aed8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b088      	sub	sp, #32
 800aedc:	af02      	add	r7, sp, #8
 800aede:	60f8      	str	r0, [r7, #12]
 800aee0:	607a      	str	r2, [r7, #4]
 800aee2:	461a      	mov	r2, r3
 800aee4:	460b      	mov	r3, r1
 800aee6:	817b      	strh	r3, [r7, #10]
 800aee8:	4613      	mov	r3, r2
 800aeea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aef2:	b2db      	uxtb	r3, r3
 800aef4:	2b20      	cmp	r3, #32
 800aef6:	f040 80db 	bne.w	800b0b0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800af00:	2b01      	cmp	r3, #1
 800af02:	d101      	bne.n	800af08 <HAL_I2C_Master_Receive+0x30>
 800af04:	2302      	movs	r3, #2
 800af06:	e0d4      	b.n	800b0b2 <HAL_I2C_Master_Receive+0x1da>
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	2201      	movs	r2, #1
 800af0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800af10:	f7fd fafe 	bl	8008510 <HAL_GetTick>
 800af14:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	9300      	str	r3, [sp, #0]
 800af1a:	2319      	movs	r3, #25
 800af1c:	2201      	movs	r2, #1
 800af1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800af22:	68f8      	ldr	r0, [r7, #12]
 800af24:	f000 fcd0 	bl	800b8c8 <I2C_WaitOnFlagUntilTimeout>
 800af28:	4603      	mov	r3, r0
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d001      	beq.n	800af32 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800af2e:	2301      	movs	r3, #1
 800af30:	e0bf      	b.n	800b0b2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	2222      	movs	r2, #34	; 0x22
 800af36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	2210      	movs	r2, #16
 800af3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	2200      	movs	r2, #0
 800af46:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	687a      	ldr	r2, [r7, #4]
 800af4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	893a      	ldrh	r2, [r7, #8]
 800af52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	2200      	movs	r2, #0
 800af58:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af5e:	b29b      	uxth	r3, r3
 800af60:	2bff      	cmp	r3, #255	; 0xff
 800af62:	d90e      	bls.n	800af82 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	22ff      	movs	r2, #255	; 0xff
 800af68:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af6e:	b2da      	uxtb	r2, r3
 800af70:	8979      	ldrh	r1, [r7, #10]
 800af72:	4b52      	ldr	r3, [pc, #328]	; (800b0bc <HAL_I2C_Master_Receive+0x1e4>)
 800af74:	9300      	str	r3, [sp, #0]
 800af76:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800af7a:	68f8      	ldr	r0, [r7, #12]
 800af7c:	f000 feba 	bl	800bcf4 <I2C_TransferConfig>
 800af80:	e06d      	b.n	800b05e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af86:	b29a      	uxth	r2, r3
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af90:	b2da      	uxtb	r2, r3
 800af92:	8979      	ldrh	r1, [r7, #10]
 800af94:	4b49      	ldr	r3, [pc, #292]	; (800b0bc <HAL_I2C_Master_Receive+0x1e4>)
 800af96:	9300      	str	r3, [sp, #0]
 800af98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800af9c:	68f8      	ldr	r0, [r7, #12]
 800af9e:	f000 fea9 	bl	800bcf4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800afa2:	e05c      	b.n	800b05e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800afa4:	697a      	ldr	r2, [r7, #20]
 800afa6:	6a39      	ldr	r1, [r7, #32]
 800afa8:	68f8      	ldr	r0, [r7, #12]
 800afaa:	f000 fd49 	bl	800ba40 <I2C_WaitOnRXNEFlagUntilTimeout>
 800afae:	4603      	mov	r3, r0
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d001      	beq.n	800afb8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800afb4:	2301      	movs	r3, #1
 800afb6:	e07c      	b.n	800b0b2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afc2:	b2d2      	uxtb	r2, r2
 800afc4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afca:	1c5a      	adds	r2, r3, #1
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afd4:	3b01      	subs	r3, #1
 800afd6:	b29a      	uxth	r2, r3
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800afe0:	b29b      	uxth	r3, r3
 800afe2:	3b01      	subs	r3, #1
 800afe4:	b29a      	uxth	r2, r3
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800afee:	b29b      	uxth	r3, r3
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d034      	beq.n	800b05e <HAL_I2C_Master_Receive+0x186>
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d130      	bne.n	800b05e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	9300      	str	r3, [sp, #0]
 800b000:	6a3b      	ldr	r3, [r7, #32]
 800b002:	2200      	movs	r2, #0
 800b004:	2180      	movs	r1, #128	; 0x80
 800b006:	68f8      	ldr	r0, [r7, #12]
 800b008:	f000 fc5e 	bl	800b8c8 <I2C_WaitOnFlagUntilTimeout>
 800b00c:	4603      	mov	r3, r0
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d001      	beq.n	800b016 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800b012:	2301      	movs	r3, #1
 800b014:	e04d      	b.n	800b0b2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b01a:	b29b      	uxth	r3, r3
 800b01c:	2bff      	cmp	r3, #255	; 0xff
 800b01e:	d90e      	bls.n	800b03e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	22ff      	movs	r2, #255	; 0xff
 800b024:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b02a:	b2da      	uxtb	r2, r3
 800b02c:	8979      	ldrh	r1, [r7, #10]
 800b02e:	2300      	movs	r3, #0
 800b030:	9300      	str	r3, [sp, #0]
 800b032:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b036:	68f8      	ldr	r0, [r7, #12]
 800b038:	f000 fe5c 	bl	800bcf4 <I2C_TransferConfig>
 800b03c:	e00f      	b.n	800b05e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b042:	b29a      	uxth	r2, r3
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b04c:	b2da      	uxtb	r2, r3
 800b04e:	8979      	ldrh	r1, [r7, #10]
 800b050:	2300      	movs	r3, #0
 800b052:	9300      	str	r3, [sp, #0]
 800b054:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b058:	68f8      	ldr	r0, [r7, #12]
 800b05a:	f000 fe4b 	bl	800bcf4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b062:	b29b      	uxth	r3, r3
 800b064:	2b00      	cmp	r3, #0
 800b066:	d19d      	bne.n	800afa4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b068:	697a      	ldr	r2, [r7, #20]
 800b06a:	6a39      	ldr	r1, [r7, #32]
 800b06c:	68f8      	ldr	r0, [r7, #12]
 800b06e:	f000 fcab 	bl	800b9c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b072:	4603      	mov	r3, r0
 800b074:	2b00      	cmp	r3, #0
 800b076:	d001      	beq.n	800b07c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800b078:	2301      	movs	r3, #1
 800b07a:	e01a      	b.n	800b0b2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	2220      	movs	r2, #32
 800b082:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	6859      	ldr	r1, [r3, #4]
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681a      	ldr	r2, [r3, #0]
 800b08e:	4b0c      	ldr	r3, [pc, #48]	; (800b0c0 <HAL_I2C_Master_Receive+0x1e8>)
 800b090:	400b      	ands	r3, r1
 800b092:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	2220      	movs	r2, #32
 800b098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	e000      	b.n	800b0b2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800b0b0:	2302      	movs	r3, #2
  }
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3718      	adds	r7, #24
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	80002400 	.word	0x80002400
 800b0c0:	fe00e800 	.word	0xfe00e800

0800b0c4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b088      	sub	sp, #32
 800b0c8:	af02      	add	r7, sp, #8
 800b0ca:	60f8      	str	r0, [r7, #12]
 800b0cc:	4608      	mov	r0, r1
 800b0ce:	4611      	mov	r1, r2
 800b0d0:	461a      	mov	r2, r3
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	817b      	strh	r3, [r7, #10]
 800b0d6:	460b      	mov	r3, r1
 800b0d8:	813b      	strh	r3, [r7, #8]
 800b0da:	4613      	mov	r3, r2
 800b0dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b0e4:	b2db      	uxtb	r3, r3
 800b0e6:	2b20      	cmp	r3, #32
 800b0e8:	f040 80f9 	bne.w	800b2de <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b0ec:	6a3b      	ldr	r3, [r7, #32]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d002      	beq.n	800b0f8 <HAL_I2C_Mem_Write+0x34>
 800b0f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d105      	bne.n	800b104 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b0fe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b100:	2301      	movs	r3, #1
 800b102:	e0ed      	b.n	800b2e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b10a:	2b01      	cmp	r3, #1
 800b10c:	d101      	bne.n	800b112 <HAL_I2C_Mem_Write+0x4e>
 800b10e:	2302      	movs	r3, #2
 800b110:	e0e6      	b.n	800b2e0 <HAL_I2C_Mem_Write+0x21c>
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	2201      	movs	r2, #1
 800b116:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b11a:	f7fd f9f9 	bl	8008510 <HAL_GetTick>
 800b11e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b120:	697b      	ldr	r3, [r7, #20]
 800b122:	9300      	str	r3, [sp, #0]
 800b124:	2319      	movs	r3, #25
 800b126:	2201      	movs	r2, #1
 800b128:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b12c:	68f8      	ldr	r0, [r7, #12]
 800b12e:	f000 fbcb 	bl	800b8c8 <I2C_WaitOnFlagUntilTimeout>
 800b132:	4603      	mov	r3, r0
 800b134:	2b00      	cmp	r3, #0
 800b136:	d001      	beq.n	800b13c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800b138:	2301      	movs	r3, #1
 800b13a:	e0d1      	b.n	800b2e0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	2221      	movs	r2, #33	; 0x21
 800b140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	2240      	movs	r2, #64	; 0x40
 800b148:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	2200      	movs	r2, #0
 800b150:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	6a3a      	ldr	r2, [r7, #32]
 800b156:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b15c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	2200      	movs	r2, #0
 800b162:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b164:	88f8      	ldrh	r0, [r7, #6]
 800b166:	893a      	ldrh	r2, [r7, #8]
 800b168:	8979      	ldrh	r1, [r7, #10]
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	9301      	str	r3, [sp, #4]
 800b16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b170:	9300      	str	r3, [sp, #0]
 800b172:	4603      	mov	r3, r0
 800b174:	68f8      	ldr	r0, [r7, #12]
 800b176:	f000 fadb 	bl	800b730 <I2C_RequestMemoryWrite>
 800b17a:	4603      	mov	r3, r0
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d005      	beq.n	800b18c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	2200      	movs	r2, #0
 800b184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800b188:	2301      	movs	r3, #1
 800b18a:	e0a9      	b.n	800b2e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b190:	b29b      	uxth	r3, r3
 800b192:	2bff      	cmp	r3, #255	; 0xff
 800b194:	d90e      	bls.n	800b1b4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	22ff      	movs	r2, #255	; 0xff
 800b19a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1a0:	b2da      	uxtb	r2, r3
 800b1a2:	8979      	ldrh	r1, [r7, #10]
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	9300      	str	r3, [sp, #0]
 800b1a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b1ac:	68f8      	ldr	r0, [r7, #12]
 800b1ae:	f000 fda1 	bl	800bcf4 <I2C_TransferConfig>
 800b1b2:	e00f      	b.n	800b1d4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1b8:	b29a      	uxth	r2, r3
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1c2:	b2da      	uxtb	r2, r3
 800b1c4:	8979      	ldrh	r1, [r7, #10]
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	9300      	str	r3, [sp, #0]
 800b1ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b1ce:	68f8      	ldr	r0, [r7, #12]
 800b1d0:	f000 fd90 	bl	800bcf4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b1d4:	697a      	ldr	r2, [r7, #20]
 800b1d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b1d8:	68f8      	ldr	r0, [r7, #12]
 800b1da:	f000 fbb5 	bl	800b948 <I2C_WaitOnTXISFlagUntilTimeout>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d001      	beq.n	800b1e8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	e07b      	b.n	800b2e0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ec:	781a      	ldrb	r2, [r3, #0]
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1f8:	1c5a      	adds	r2, r3, #1
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b202:	b29b      	uxth	r3, r3
 800b204:	3b01      	subs	r3, #1
 800b206:	b29a      	uxth	r2, r3
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b210:	3b01      	subs	r3, #1
 800b212:	b29a      	uxth	r2, r3
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b21c:	b29b      	uxth	r3, r3
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d034      	beq.n	800b28c <HAL_I2C_Mem_Write+0x1c8>
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b226:	2b00      	cmp	r3, #0
 800b228:	d130      	bne.n	800b28c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	9300      	str	r3, [sp, #0]
 800b22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b230:	2200      	movs	r2, #0
 800b232:	2180      	movs	r1, #128	; 0x80
 800b234:	68f8      	ldr	r0, [r7, #12]
 800b236:	f000 fb47 	bl	800b8c8 <I2C_WaitOnFlagUntilTimeout>
 800b23a:	4603      	mov	r3, r0
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d001      	beq.n	800b244 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800b240:	2301      	movs	r3, #1
 800b242:	e04d      	b.n	800b2e0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b248:	b29b      	uxth	r3, r3
 800b24a:	2bff      	cmp	r3, #255	; 0xff
 800b24c:	d90e      	bls.n	800b26c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	22ff      	movs	r2, #255	; 0xff
 800b252:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b258:	b2da      	uxtb	r2, r3
 800b25a:	8979      	ldrh	r1, [r7, #10]
 800b25c:	2300      	movs	r3, #0
 800b25e:	9300      	str	r3, [sp, #0]
 800b260:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b264:	68f8      	ldr	r0, [r7, #12]
 800b266:	f000 fd45 	bl	800bcf4 <I2C_TransferConfig>
 800b26a:	e00f      	b.n	800b28c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b270:	b29a      	uxth	r2, r3
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b27a:	b2da      	uxtb	r2, r3
 800b27c:	8979      	ldrh	r1, [r7, #10]
 800b27e:	2300      	movs	r3, #0
 800b280:	9300      	str	r3, [sp, #0]
 800b282:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b286:	68f8      	ldr	r0, [r7, #12]
 800b288:	f000 fd34 	bl	800bcf4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b290:	b29b      	uxth	r3, r3
 800b292:	2b00      	cmp	r3, #0
 800b294:	d19e      	bne.n	800b1d4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b296:	697a      	ldr	r2, [r7, #20]
 800b298:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b29a:	68f8      	ldr	r0, [r7, #12]
 800b29c:	f000 fb94 	bl	800b9c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d001      	beq.n	800b2aa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	e01a      	b.n	800b2e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	2220      	movs	r2, #32
 800b2b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	6859      	ldr	r1, [r3, #4]
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	681a      	ldr	r2, [r3, #0]
 800b2bc:	4b0a      	ldr	r3, [pc, #40]	; (800b2e8 <HAL_I2C_Mem_Write+0x224>)
 800b2be:	400b      	ands	r3, r1
 800b2c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	2220      	movs	r2, #32
 800b2c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	e000      	b.n	800b2e0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800b2de:	2302      	movs	r3, #2
  }
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	3718      	adds	r7, #24
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}
 800b2e8:	fe00e800 	.word	0xfe00e800

0800b2ec <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b088      	sub	sp, #32
 800b2f0:	af02      	add	r7, sp, #8
 800b2f2:	60f8      	str	r0, [r7, #12]
 800b2f4:	4608      	mov	r0, r1
 800b2f6:	4611      	mov	r1, r2
 800b2f8:	461a      	mov	r2, r3
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	817b      	strh	r3, [r7, #10]
 800b2fe:	460b      	mov	r3, r1
 800b300:	813b      	strh	r3, [r7, #8]
 800b302:	4613      	mov	r3, r2
 800b304:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b30c:	b2db      	uxtb	r3, r3
 800b30e:	2b20      	cmp	r3, #32
 800b310:	f040 80fd 	bne.w	800b50e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800b314:	6a3b      	ldr	r3, [r7, #32]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d002      	beq.n	800b320 <HAL_I2C_Mem_Read+0x34>
 800b31a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d105      	bne.n	800b32c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b326:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b328:	2301      	movs	r3, #1
 800b32a:	e0f1      	b.n	800b510 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b332:	2b01      	cmp	r3, #1
 800b334:	d101      	bne.n	800b33a <HAL_I2C_Mem_Read+0x4e>
 800b336:	2302      	movs	r3, #2
 800b338:	e0ea      	b.n	800b510 <HAL_I2C_Mem_Read+0x224>
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	2201      	movs	r2, #1
 800b33e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b342:	f7fd f8e5 	bl	8008510 <HAL_GetTick>
 800b346:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	9300      	str	r3, [sp, #0]
 800b34c:	2319      	movs	r3, #25
 800b34e:	2201      	movs	r2, #1
 800b350:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b354:	68f8      	ldr	r0, [r7, #12]
 800b356:	f000 fab7 	bl	800b8c8 <I2C_WaitOnFlagUntilTimeout>
 800b35a:	4603      	mov	r3, r0
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d001      	beq.n	800b364 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800b360:	2301      	movs	r3, #1
 800b362:	e0d5      	b.n	800b510 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	2222      	movs	r2, #34	; 0x22
 800b368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	2240      	movs	r2, #64	; 0x40
 800b370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	2200      	movs	r2, #0
 800b378:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	6a3a      	ldr	r2, [r7, #32]
 800b37e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b384:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	2200      	movs	r2, #0
 800b38a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b38c:	88f8      	ldrh	r0, [r7, #6]
 800b38e:	893a      	ldrh	r2, [r7, #8]
 800b390:	8979      	ldrh	r1, [r7, #10]
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	9301      	str	r3, [sp, #4]
 800b396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b398:	9300      	str	r3, [sp, #0]
 800b39a:	4603      	mov	r3, r0
 800b39c:	68f8      	ldr	r0, [r7, #12]
 800b39e:	f000 fa1b 	bl	800b7d8 <I2C_RequestMemoryRead>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d005      	beq.n	800b3b4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	e0ad      	b.n	800b510 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3b8:	b29b      	uxth	r3, r3
 800b3ba:	2bff      	cmp	r3, #255	; 0xff
 800b3bc:	d90e      	bls.n	800b3dc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	22ff      	movs	r2, #255	; 0xff
 800b3c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3c8:	b2da      	uxtb	r2, r3
 800b3ca:	8979      	ldrh	r1, [r7, #10]
 800b3cc:	4b52      	ldr	r3, [pc, #328]	; (800b518 <HAL_I2C_Mem_Read+0x22c>)
 800b3ce:	9300      	str	r3, [sp, #0]
 800b3d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b3d4:	68f8      	ldr	r0, [r7, #12]
 800b3d6:	f000 fc8d 	bl	800bcf4 <I2C_TransferConfig>
 800b3da:	e00f      	b.n	800b3fc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3e0:	b29a      	uxth	r2, r3
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3ea:	b2da      	uxtb	r2, r3
 800b3ec:	8979      	ldrh	r1, [r7, #10]
 800b3ee:	4b4a      	ldr	r3, [pc, #296]	; (800b518 <HAL_I2C_Mem_Read+0x22c>)
 800b3f0:	9300      	str	r3, [sp, #0]
 800b3f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b3f6:	68f8      	ldr	r0, [r7, #12]
 800b3f8:	f000 fc7c 	bl	800bcf4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	9300      	str	r3, [sp, #0]
 800b400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b402:	2200      	movs	r2, #0
 800b404:	2104      	movs	r1, #4
 800b406:	68f8      	ldr	r0, [r7, #12]
 800b408:	f000 fa5e 	bl	800b8c8 <I2C_WaitOnFlagUntilTimeout>
 800b40c:	4603      	mov	r3, r0
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d001      	beq.n	800b416 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800b412:	2301      	movs	r3, #1
 800b414:	e07c      	b.n	800b510 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b420:	b2d2      	uxtb	r2, r2
 800b422:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b428:	1c5a      	adds	r2, r3, #1
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b432:	3b01      	subs	r3, #1
 800b434:	b29a      	uxth	r2, r3
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b43e:	b29b      	uxth	r3, r3
 800b440:	3b01      	subs	r3, #1
 800b442:	b29a      	uxth	r2, r3
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b44c:	b29b      	uxth	r3, r3
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d034      	beq.n	800b4bc <HAL_I2C_Mem_Read+0x1d0>
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b456:	2b00      	cmp	r3, #0
 800b458:	d130      	bne.n	800b4bc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	9300      	str	r3, [sp, #0]
 800b45e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b460:	2200      	movs	r2, #0
 800b462:	2180      	movs	r1, #128	; 0x80
 800b464:	68f8      	ldr	r0, [r7, #12]
 800b466:	f000 fa2f 	bl	800b8c8 <I2C_WaitOnFlagUntilTimeout>
 800b46a:	4603      	mov	r3, r0
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d001      	beq.n	800b474 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800b470:	2301      	movs	r3, #1
 800b472:	e04d      	b.n	800b510 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b478:	b29b      	uxth	r3, r3
 800b47a:	2bff      	cmp	r3, #255	; 0xff
 800b47c:	d90e      	bls.n	800b49c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	22ff      	movs	r2, #255	; 0xff
 800b482:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b488:	b2da      	uxtb	r2, r3
 800b48a:	8979      	ldrh	r1, [r7, #10]
 800b48c:	2300      	movs	r3, #0
 800b48e:	9300      	str	r3, [sp, #0]
 800b490:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b494:	68f8      	ldr	r0, [r7, #12]
 800b496:	f000 fc2d 	bl	800bcf4 <I2C_TransferConfig>
 800b49a:	e00f      	b.n	800b4bc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4a0:	b29a      	uxth	r2, r3
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4aa:	b2da      	uxtb	r2, r3
 800b4ac:	8979      	ldrh	r1, [r7, #10]
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	9300      	str	r3, [sp, #0]
 800b4b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b4b6:	68f8      	ldr	r0, [r7, #12]
 800b4b8:	f000 fc1c 	bl	800bcf4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4c0:	b29b      	uxth	r3, r3
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d19a      	bne.n	800b3fc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b4c6:	697a      	ldr	r2, [r7, #20]
 800b4c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b4ca:	68f8      	ldr	r0, [r7, #12]
 800b4cc:	f000 fa7c 	bl	800b9c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d001      	beq.n	800b4da <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	e01a      	b.n	800b510 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	2220      	movs	r2, #32
 800b4e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	6859      	ldr	r1, [r3, #4]
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	681a      	ldr	r2, [r3, #0]
 800b4ec:	4b0b      	ldr	r3, [pc, #44]	; (800b51c <HAL_I2C_Mem_Read+0x230>)
 800b4ee:	400b      	ands	r3, r1
 800b4f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	2220      	movs	r2, #32
 800b4f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	2200      	movs	r2, #0
 800b506:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b50a:	2300      	movs	r3, #0
 800b50c:	e000      	b.n	800b510 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800b50e:	2302      	movs	r3, #2
  }
}
 800b510:	4618      	mov	r0, r3
 800b512:	3718      	adds	r7, #24
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}
 800b518:	80002400 	.word	0x80002400
 800b51c:	fe00e800 	.word	0xfe00e800

0800b520 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b08a      	sub	sp, #40	; 0x28
 800b524:	af02      	add	r7, sp, #8
 800b526:	60f8      	str	r0, [r7, #12]
 800b528:	607a      	str	r2, [r7, #4]
 800b52a:	603b      	str	r3, [r7, #0]
 800b52c:	460b      	mov	r3, r1
 800b52e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800b530:	2300      	movs	r3, #0
 800b532:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b53a:	b2db      	uxtb	r3, r3
 800b53c:	2b20      	cmp	r3, #32
 800b53e:	f040 80ef 	bne.w	800b720 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	699b      	ldr	r3, [r3, #24]
 800b548:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b54c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b550:	d101      	bne.n	800b556 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800b552:	2302      	movs	r3, #2
 800b554:	e0e5      	b.n	800b722 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b55c:	2b01      	cmp	r3, #1
 800b55e:	d101      	bne.n	800b564 <HAL_I2C_IsDeviceReady+0x44>
 800b560:	2302      	movs	r3, #2
 800b562:	e0de      	b.n	800b722 <HAL_I2C_IsDeviceReady+0x202>
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	2201      	movs	r2, #1
 800b568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	2224      	movs	r2, #36	; 0x24
 800b570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	2200      	movs	r2, #0
 800b578:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	68db      	ldr	r3, [r3, #12]
 800b57e:	2b01      	cmp	r3, #1
 800b580:	d105      	bne.n	800b58e <HAL_I2C_IsDeviceReady+0x6e>
 800b582:	897b      	ldrh	r3, [r7, #10]
 800b584:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b588:	4b68      	ldr	r3, [pc, #416]	; (800b72c <HAL_I2C_IsDeviceReady+0x20c>)
 800b58a:	4313      	orrs	r3, r2
 800b58c:	e004      	b.n	800b598 <HAL_I2C_IsDeviceReady+0x78>
 800b58e:	897b      	ldrh	r3, [r7, #10]
 800b590:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b594:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800b598:	68fa      	ldr	r2, [r7, #12]
 800b59a:	6812      	ldr	r2, [r2, #0]
 800b59c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800b59e:	f7fc ffb7 	bl	8008510 <HAL_GetTick>
 800b5a2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	699b      	ldr	r3, [r3, #24]
 800b5aa:	f003 0320 	and.w	r3, r3, #32
 800b5ae:	2b20      	cmp	r3, #32
 800b5b0:	bf0c      	ite	eq
 800b5b2:	2301      	moveq	r3, #1
 800b5b4:	2300      	movne	r3, #0
 800b5b6:	b2db      	uxtb	r3, r3
 800b5b8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	699b      	ldr	r3, [r3, #24]
 800b5c0:	f003 0310 	and.w	r3, r3, #16
 800b5c4:	2b10      	cmp	r3, #16
 800b5c6:	bf0c      	ite	eq
 800b5c8:	2301      	moveq	r3, #1
 800b5ca:	2300      	movne	r3, #0
 800b5cc:	b2db      	uxtb	r3, r3
 800b5ce:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800b5d0:	e034      	b.n	800b63c <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5d8:	d01a      	beq.n	800b610 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b5da:	f7fc ff99 	bl	8008510 <HAL_GetTick>
 800b5de:	4602      	mov	r2, r0
 800b5e0:	69bb      	ldr	r3, [r7, #24]
 800b5e2:	1ad3      	subs	r3, r2, r3
 800b5e4:	683a      	ldr	r2, [r7, #0]
 800b5e6:	429a      	cmp	r2, r3
 800b5e8:	d302      	bcc.n	800b5f0 <HAL_I2C_IsDeviceReady+0xd0>
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d10f      	bne.n	800b610 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	2220      	movs	r2, #32
 800b5f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5fc:	f043 0220 	orr.w	r2, r3, #32
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	2200      	movs	r2, #0
 800b608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800b60c:	2301      	movs	r3, #1
 800b60e:	e088      	b.n	800b722 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	699b      	ldr	r3, [r3, #24]
 800b616:	f003 0320 	and.w	r3, r3, #32
 800b61a:	2b20      	cmp	r3, #32
 800b61c:	bf0c      	ite	eq
 800b61e:	2301      	moveq	r3, #1
 800b620:	2300      	movne	r3, #0
 800b622:	b2db      	uxtb	r3, r3
 800b624:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	699b      	ldr	r3, [r3, #24]
 800b62c:	f003 0310 	and.w	r3, r3, #16
 800b630:	2b10      	cmp	r3, #16
 800b632:	bf0c      	ite	eq
 800b634:	2301      	moveq	r3, #1
 800b636:	2300      	movne	r3, #0
 800b638:	b2db      	uxtb	r3, r3
 800b63a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800b63c:	7ffb      	ldrb	r3, [r7, #31]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d102      	bne.n	800b648 <HAL_I2C_IsDeviceReady+0x128>
 800b642:	7fbb      	ldrb	r3, [r7, #30]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d0c4      	beq.n	800b5d2 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	699b      	ldr	r3, [r3, #24]
 800b64e:	f003 0310 	and.w	r3, r3, #16
 800b652:	2b10      	cmp	r3, #16
 800b654:	d01a      	beq.n	800b68c <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800b656:	69bb      	ldr	r3, [r7, #24]
 800b658:	9300      	str	r3, [sp, #0]
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	2200      	movs	r2, #0
 800b65e:	2120      	movs	r1, #32
 800b660:	68f8      	ldr	r0, [r7, #12]
 800b662:	f000 f931 	bl	800b8c8 <I2C_WaitOnFlagUntilTimeout>
 800b666:	4603      	mov	r3, r0
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d001      	beq.n	800b670 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 800b66c:	2301      	movs	r3, #1
 800b66e:	e058      	b.n	800b722 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	2220      	movs	r2, #32
 800b676:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	2220      	movs	r2, #32
 800b67c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	2200      	movs	r2, #0
 800b684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800b688:	2300      	movs	r3, #0
 800b68a:	e04a      	b.n	800b722 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800b68c:	69bb      	ldr	r3, [r7, #24]
 800b68e:	9300      	str	r3, [sp, #0]
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	2200      	movs	r2, #0
 800b694:	2120      	movs	r1, #32
 800b696:	68f8      	ldr	r0, [r7, #12]
 800b698:	f000 f916 	bl	800b8c8 <I2C_WaitOnFlagUntilTimeout>
 800b69c:	4603      	mov	r3, r0
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d001      	beq.n	800b6a6 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	e03d      	b.n	800b722 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	2210      	movs	r2, #16
 800b6ac:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	2220      	movs	r2, #32
 800b6b4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800b6b6:	697b      	ldr	r3, [r7, #20]
 800b6b8:	687a      	ldr	r2, [r7, #4]
 800b6ba:	429a      	cmp	r2, r3
 800b6bc:	d118      	bne.n	800b6f0 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	685a      	ldr	r2, [r3, #4]
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b6cc:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800b6ce:	69bb      	ldr	r3, [r7, #24]
 800b6d0:	9300      	str	r3, [sp, #0]
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	2120      	movs	r1, #32
 800b6d8:	68f8      	ldr	r0, [r7, #12]
 800b6da:	f000 f8f5 	bl	800b8c8 <I2C_WaitOnFlagUntilTimeout>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d001      	beq.n	800b6e8 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 800b6e4:	2301      	movs	r3, #1
 800b6e6:	e01c      	b.n	800b722 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	2220      	movs	r2, #32
 800b6ee:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	3301      	adds	r3, #1
 800b6f4:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	687a      	ldr	r2, [r7, #4]
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	f63f af3d 	bhi.w	800b57a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	2220      	movs	r2, #32
 800b704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b70c:	f043 0220 	orr.w	r2, r3, #32
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	2200      	movs	r2, #0
 800b718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800b71c:	2301      	movs	r3, #1
 800b71e:	e000      	b.n	800b722 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 800b720:	2302      	movs	r3, #2
  }
}
 800b722:	4618      	mov	r0, r3
 800b724:	3720      	adds	r7, #32
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}
 800b72a:	bf00      	nop
 800b72c:	02002000 	.word	0x02002000

0800b730 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b086      	sub	sp, #24
 800b734:	af02      	add	r7, sp, #8
 800b736:	60f8      	str	r0, [r7, #12]
 800b738:	4608      	mov	r0, r1
 800b73a:	4611      	mov	r1, r2
 800b73c:	461a      	mov	r2, r3
 800b73e:	4603      	mov	r3, r0
 800b740:	817b      	strh	r3, [r7, #10]
 800b742:	460b      	mov	r3, r1
 800b744:	813b      	strh	r3, [r7, #8]
 800b746:	4613      	mov	r3, r2
 800b748:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b74a:	88fb      	ldrh	r3, [r7, #6]
 800b74c:	b2da      	uxtb	r2, r3
 800b74e:	8979      	ldrh	r1, [r7, #10]
 800b750:	4b20      	ldr	r3, [pc, #128]	; (800b7d4 <I2C_RequestMemoryWrite+0xa4>)
 800b752:	9300      	str	r3, [sp, #0]
 800b754:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b758:	68f8      	ldr	r0, [r7, #12]
 800b75a:	f000 facb 	bl	800bcf4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b75e:	69fa      	ldr	r2, [r7, #28]
 800b760:	69b9      	ldr	r1, [r7, #24]
 800b762:	68f8      	ldr	r0, [r7, #12]
 800b764:	f000 f8f0 	bl	800b948 <I2C_WaitOnTXISFlagUntilTimeout>
 800b768:	4603      	mov	r3, r0
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d001      	beq.n	800b772 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800b76e:	2301      	movs	r3, #1
 800b770:	e02c      	b.n	800b7cc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b772:	88fb      	ldrh	r3, [r7, #6]
 800b774:	2b01      	cmp	r3, #1
 800b776:	d105      	bne.n	800b784 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b778:	893b      	ldrh	r3, [r7, #8]
 800b77a:	b2da      	uxtb	r2, r3
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	629a      	str	r2, [r3, #40]	; 0x28
 800b782:	e015      	b.n	800b7b0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b784:	893b      	ldrh	r3, [r7, #8]
 800b786:	0a1b      	lsrs	r3, r3, #8
 800b788:	b29b      	uxth	r3, r3
 800b78a:	b2da      	uxtb	r2, r3
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b792:	69fa      	ldr	r2, [r7, #28]
 800b794:	69b9      	ldr	r1, [r7, #24]
 800b796:	68f8      	ldr	r0, [r7, #12]
 800b798:	f000 f8d6 	bl	800b948 <I2C_WaitOnTXISFlagUntilTimeout>
 800b79c:	4603      	mov	r3, r0
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d001      	beq.n	800b7a6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	e012      	b.n	800b7cc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b7a6:	893b      	ldrh	r3, [r7, #8]
 800b7a8:	b2da      	uxtb	r2, r3
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800b7b0:	69fb      	ldr	r3, [r7, #28]
 800b7b2:	9300      	str	r3, [sp, #0]
 800b7b4:	69bb      	ldr	r3, [r7, #24]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	2180      	movs	r1, #128	; 0x80
 800b7ba:	68f8      	ldr	r0, [r7, #12]
 800b7bc:	f000 f884 	bl	800b8c8 <I2C_WaitOnFlagUntilTimeout>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d001      	beq.n	800b7ca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	e000      	b.n	800b7cc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800b7ca:	2300      	movs	r3, #0
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	3710      	adds	r7, #16
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}
 800b7d4:	80002000 	.word	0x80002000

0800b7d8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b086      	sub	sp, #24
 800b7dc:	af02      	add	r7, sp, #8
 800b7de:	60f8      	str	r0, [r7, #12]
 800b7e0:	4608      	mov	r0, r1
 800b7e2:	4611      	mov	r1, r2
 800b7e4:	461a      	mov	r2, r3
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	817b      	strh	r3, [r7, #10]
 800b7ea:	460b      	mov	r3, r1
 800b7ec:	813b      	strh	r3, [r7, #8]
 800b7ee:	4613      	mov	r3, r2
 800b7f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b7f2:	88fb      	ldrh	r3, [r7, #6]
 800b7f4:	b2da      	uxtb	r2, r3
 800b7f6:	8979      	ldrh	r1, [r7, #10]
 800b7f8:	4b20      	ldr	r3, [pc, #128]	; (800b87c <I2C_RequestMemoryRead+0xa4>)
 800b7fa:	9300      	str	r3, [sp, #0]
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	68f8      	ldr	r0, [r7, #12]
 800b800:	f000 fa78 	bl	800bcf4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b804:	69fa      	ldr	r2, [r7, #28]
 800b806:	69b9      	ldr	r1, [r7, #24]
 800b808:	68f8      	ldr	r0, [r7, #12]
 800b80a:	f000 f89d 	bl	800b948 <I2C_WaitOnTXISFlagUntilTimeout>
 800b80e:	4603      	mov	r3, r0
 800b810:	2b00      	cmp	r3, #0
 800b812:	d001      	beq.n	800b818 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800b814:	2301      	movs	r3, #1
 800b816:	e02c      	b.n	800b872 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b818:	88fb      	ldrh	r3, [r7, #6]
 800b81a:	2b01      	cmp	r3, #1
 800b81c:	d105      	bne.n	800b82a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b81e:	893b      	ldrh	r3, [r7, #8]
 800b820:	b2da      	uxtb	r2, r3
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	629a      	str	r2, [r3, #40]	; 0x28
 800b828:	e015      	b.n	800b856 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b82a:	893b      	ldrh	r3, [r7, #8]
 800b82c:	0a1b      	lsrs	r3, r3, #8
 800b82e:	b29b      	uxth	r3, r3
 800b830:	b2da      	uxtb	r2, r3
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b838:	69fa      	ldr	r2, [r7, #28]
 800b83a:	69b9      	ldr	r1, [r7, #24]
 800b83c:	68f8      	ldr	r0, [r7, #12]
 800b83e:	f000 f883 	bl	800b948 <I2C_WaitOnTXISFlagUntilTimeout>
 800b842:	4603      	mov	r3, r0
 800b844:	2b00      	cmp	r3, #0
 800b846:	d001      	beq.n	800b84c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800b848:	2301      	movs	r3, #1
 800b84a:	e012      	b.n	800b872 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b84c:	893b      	ldrh	r3, [r7, #8]
 800b84e:	b2da      	uxtb	r2, r3
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800b856:	69fb      	ldr	r3, [r7, #28]
 800b858:	9300      	str	r3, [sp, #0]
 800b85a:	69bb      	ldr	r3, [r7, #24]
 800b85c:	2200      	movs	r2, #0
 800b85e:	2140      	movs	r1, #64	; 0x40
 800b860:	68f8      	ldr	r0, [r7, #12]
 800b862:	f000 f831 	bl	800b8c8 <I2C_WaitOnFlagUntilTimeout>
 800b866:	4603      	mov	r3, r0
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d001      	beq.n	800b870 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800b86c:	2301      	movs	r3, #1
 800b86e:	e000      	b.n	800b872 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800b870:	2300      	movs	r3, #0
}
 800b872:	4618      	mov	r0, r3
 800b874:	3710      	adds	r7, #16
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}
 800b87a:	bf00      	nop
 800b87c:	80002000 	.word	0x80002000

0800b880 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b880:	b480      	push	{r7}
 800b882:	b083      	sub	sp, #12
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	699b      	ldr	r3, [r3, #24]
 800b88e:	f003 0302 	and.w	r3, r3, #2
 800b892:	2b02      	cmp	r3, #2
 800b894:	d103      	bne.n	800b89e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	2200      	movs	r2, #0
 800b89c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	699b      	ldr	r3, [r3, #24]
 800b8a4:	f003 0301 	and.w	r3, r3, #1
 800b8a8:	2b01      	cmp	r3, #1
 800b8aa:	d007      	beq.n	800b8bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	699a      	ldr	r2, [r3, #24]
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	f042 0201 	orr.w	r2, r2, #1
 800b8ba:	619a      	str	r2, [r3, #24]
  }
}
 800b8bc:	bf00      	nop
 800b8be:	370c      	adds	r7, #12
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c6:	4770      	bx	lr

0800b8c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b084      	sub	sp, #16
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	60f8      	str	r0, [r7, #12]
 800b8d0:	60b9      	str	r1, [r7, #8]
 800b8d2:	603b      	str	r3, [r7, #0]
 800b8d4:	4613      	mov	r3, r2
 800b8d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b8d8:	e022      	b.n	800b920 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8e0:	d01e      	beq.n	800b920 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b8e2:	f7fc fe15 	bl	8008510 <HAL_GetTick>
 800b8e6:	4602      	mov	r2, r0
 800b8e8:	69bb      	ldr	r3, [r7, #24]
 800b8ea:	1ad3      	subs	r3, r2, r3
 800b8ec:	683a      	ldr	r2, [r7, #0]
 800b8ee:	429a      	cmp	r2, r3
 800b8f0:	d302      	bcc.n	800b8f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d113      	bne.n	800b920 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8fc:	f043 0220 	orr.w	r2, r3, #32
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	2220      	movs	r2, #32
 800b908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	2200      	movs	r2, #0
 800b910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2200      	movs	r2, #0
 800b918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800b91c:	2301      	movs	r3, #1
 800b91e:	e00f      	b.n	800b940 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	699a      	ldr	r2, [r3, #24]
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	4013      	ands	r3, r2
 800b92a:	68ba      	ldr	r2, [r7, #8]
 800b92c:	429a      	cmp	r2, r3
 800b92e:	bf0c      	ite	eq
 800b930:	2301      	moveq	r3, #1
 800b932:	2300      	movne	r3, #0
 800b934:	b2db      	uxtb	r3, r3
 800b936:	461a      	mov	r2, r3
 800b938:	79fb      	ldrb	r3, [r7, #7]
 800b93a:	429a      	cmp	r2, r3
 800b93c:	d0cd      	beq.n	800b8da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b93e:	2300      	movs	r3, #0
}
 800b940:	4618      	mov	r0, r3
 800b942:	3710      	adds	r7, #16
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}

0800b948 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b084      	sub	sp, #16
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	60f8      	str	r0, [r7, #12]
 800b950:	60b9      	str	r1, [r7, #8]
 800b952:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b954:	e02c      	b.n	800b9b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b956:	687a      	ldr	r2, [r7, #4]
 800b958:	68b9      	ldr	r1, [r7, #8]
 800b95a:	68f8      	ldr	r0, [r7, #12]
 800b95c:	f000 f8ea 	bl	800bb34 <I2C_IsErrorOccurred>
 800b960:	4603      	mov	r3, r0
 800b962:	2b00      	cmp	r3, #0
 800b964:	d001      	beq.n	800b96a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b966:	2301      	movs	r3, #1
 800b968:	e02a      	b.n	800b9c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b970:	d01e      	beq.n	800b9b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b972:	f7fc fdcd 	bl	8008510 <HAL_GetTick>
 800b976:	4602      	mov	r2, r0
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	1ad3      	subs	r3, r2, r3
 800b97c:	68ba      	ldr	r2, [r7, #8]
 800b97e:	429a      	cmp	r2, r3
 800b980:	d302      	bcc.n	800b988 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d113      	bne.n	800b9b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b98c:	f043 0220 	orr.w	r2, r3, #32
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2220      	movs	r2, #32
 800b998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	2200      	movs	r2, #0
 800b9a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	e007      	b.n	800b9c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	699b      	ldr	r3, [r3, #24]
 800b9b6:	f003 0302 	and.w	r3, r3, #2
 800b9ba:	2b02      	cmp	r3, #2
 800b9bc:	d1cb      	bne.n	800b956 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b9be:	2300      	movs	r3, #0
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	3710      	adds	r7, #16
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}

0800b9c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b084      	sub	sp, #16
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	60f8      	str	r0, [r7, #12]
 800b9d0:	60b9      	str	r1, [r7, #8]
 800b9d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b9d4:	e028      	b.n	800ba28 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b9d6:	687a      	ldr	r2, [r7, #4]
 800b9d8:	68b9      	ldr	r1, [r7, #8]
 800b9da:	68f8      	ldr	r0, [r7, #12]
 800b9dc:	f000 f8aa 	bl	800bb34 <I2C_IsErrorOccurred>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d001      	beq.n	800b9ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	e026      	b.n	800ba38 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b9ea:	f7fc fd91 	bl	8008510 <HAL_GetTick>
 800b9ee:	4602      	mov	r2, r0
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	1ad3      	subs	r3, r2, r3
 800b9f4:	68ba      	ldr	r2, [r7, #8]
 800b9f6:	429a      	cmp	r2, r3
 800b9f8:	d302      	bcc.n	800ba00 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d113      	bne.n	800ba28 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba04:	f043 0220 	orr.w	r2, r3, #32
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2220      	movs	r2, #32
 800ba10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	2200      	movs	r2, #0
 800ba18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800ba24:	2301      	movs	r3, #1
 800ba26:	e007      	b.n	800ba38 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	699b      	ldr	r3, [r3, #24]
 800ba2e:	f003 0320 	and.w	r3, r3, #32
 800ba32:	2b20      	cmp	r3, #32
 800ba34:	d1cf      	bne.n	800b9d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800ba36:	2300      	movs	r3, #0
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3710      	adds	r7, #16
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}

0800ba40 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b084      	sub	sp, #16
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	60f8      	str	r0, [r7, #12]
 800ba48:	60b9      	str	r1, [r7, #8]
 800ba4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ba4c:	e064      	b.n	800bb18 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ba4e:	687a      	ldr	r2, [r7, #4]
 800ba50:	68b9      	ldr	r1, [r7, #8]
 800ba52:	68f8      	ldr	r0, [r7, #12]
 800ba54:	f000 f86e 	bl	800bb34 <I2C_IsErrorOccurred>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d001      	beq.n	800ba62 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ba5e:	2301      	movs	r3, #1
 800ba60:	e062      	b.n	800bb28 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	699b      	ldr	r3, [r3, #24]
 800ba68:	f003 0320 	and.w	r3, r3, #32
 800ba6c:	2b20      	cmp	r3, #32
 800ba6e:	d138      	bne.n	800bae2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	699b      	ldr	r3, [r3, #24]
 800ba76:	f003 0304 	and.w	r3, r3, #4
 800ba7a:	2b04      	cmp	r3, #4
 800ba7c:	d105      	bne.n	800ba8a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d001      	beq.n	800ba8a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800ba86:	2300      	movs	r3, #0
 800ba88:	e04e      	b.n	800bb28 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	699b      	ldr	r3, [r3, #24]
 800ba90:	f003 0310 	and.w	r3, r3, #16
 800ba94:	2b10      	cmp	r3, #16
 800ba96:	d107      	bne.n	800baa8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	2210      	movs	r2, #16
 800ba9e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	2204      	movs	r2, #4
 800baa4:	645a      	str	r2, [r3, #68]	; 0x44
 800baa6:	e002      	b.n	800baae <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	2200      	movs	r2, #0
 800baac:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	2220      	movs	r2, #32
 800bab4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	6859      	ldr	r1, [r3, #4]
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	681a      	ldr	r2, [r3, #0]
 800bac0:	4b1b      	ldr	r3, [pc, #108]	; (800bb30 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800bac2:	400b      	ands	r3, r1
 800bac4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	2220      	movs	r2, #32
 800baca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	2200      	movs	r2, #0
 800bad2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	2200      	movs	r2, #0
 800bada:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800bade:	2301      	movs	r3, #1
 800bae0:	e022      	b.n	800bb28 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bae2:	f7fc fd15 	bl	8008510 <HAL_GetTick>
 800bae6:	4602      	mov	r2, r0
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	1ad3      	subs	r3, r2, r3
 800baec:	68ba      	ldr	r2, [r7, #8]
 800baee:	429a      	cmp	r2, r3
 800baf0:	d302      	bcc.n	800baf8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800baf2:	68bb      	ldr	r3, [r7, #8]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d10f      	bne.n	800bb18 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bafc:	f043 0220 	orr.w	r2, r3, #32
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	2220      	movs	r2, #32
 800bb08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	2200      	movs	r2, #0
 800bb10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800bb14:	2301      	movs	r3, #1
 800bb16:	e007      	b.n	800bb28 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	699b      	ldr	r3, [r3, #24]
 800bb1e:	f003 0304 	and.w	r3, r3, #4
 800bb22:	2b04      	cmp	r3, #4
 800bb24:	d193      	bne.n	800ba4e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800bb26:	2300      	movs	r3, #0
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	3710      	adds	r7, #16
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}
 800bb30:	fe00e800 	.word	0xfe00e800

0800bb34 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b08a      	sub	sp, #40	; 0x28
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	60f8      	str	r0, [r7, #12]
 800bb3c:	60b9      	str	r1, [r7, #8]
 800bb3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bb40:	2300      	movs	r3, #0
 800bb42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	699b      	ldr	r3, [r3, #24]
 800bb4c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800bb4e:	2300      	movs	r3, #0
 800bb50:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800bb56:	69bb      	ldr	r3, [r7, #24]
 800bb58:	f003 0310 	and.w	r3, r3, #16
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d068      	beq.n	800bc32 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	2210      	movs	r2, #16
 800bb66:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800bb68:	e049      	b.n	800bbfe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800bb6a:	68bb      	ldr	r3, [r7, #8]
 800bb6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb70:	d045      	beq.n	800bbfe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800bb72:	f7fc fccd 	bl	8008510 <HAL_GetTick>
 800bb76:	4602      	mov	r2, r0
 800bb78:	69fb      	ldr	r3, [r7, #28]
 800bb7a:	1ad3      	subs	r3, r2, r3
 800bb7c:	68ba      	ldr	r2, [r7, #8]
 800bb7e:	429a      	cmp	r2, r3
 800bb80:	d302      	bcc.n	800bb88 <I2C_IsErrorOccurred+0x54>
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d13a      	bne.n	800bbfe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	685b      	ldr	r3, [r3, #4]
 800bb8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb92:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bb9a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	699b      	ldr	r3, [r3, #24]
 800bba2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bba6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bbaa:	d121      	bne.n	800bbf0 <I2C_IsErrorOccurred+0xbc>
 800bbac:	697b      	ldr	r3, [r7, #20]
 800bbae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bbb2:	d01d      	beq.n	800bbf0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800bbb4:	7cfb      	ldrb	r3, [r7, #19]
 800bbb6:	2b20      	cmp	r3, #32
 800bbb8:	d01a      	beq.n	800bbf0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	685a      	ldr	r2, [r3, #4]
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bbc8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800bbca:	f7fc fca1 	bl	8008510 <HAL_GetTick>
 800bbce:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bbd0:	e00e      	b.n	800bbf0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800bbd2:	f7fc fc9d 	bl	8008510 <HAL_GetTick>
 800bbd6:	4602      	mov	r2, r0
 800bbd8:	69fb      	ldr	r3, [r7, #28]
 800bbda:	1ad3      	subs	r3, r2, r3
 800bbdc:	2b19      	cmp	r3, #25
 800bbde:	d907      	bls.n	800bbf0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800bbe0:	6a3b      	ldr	r3, [r7, #32]
 800bbe2:	f043 0320 	orr.w	r3, r3, #32
 800bbe6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800bbe8:	2301      	movs	r3, #1
 800bbea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800bbee:	e006      	b.n	800bbfe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	699b      	ldr	r3, [r3, #24]
 800bbf6:	f003 0320 	and.w	r3, r3, #32
 800bbfa:	2b20      	cmp	r3, #32
 800bbfc:	d1e9      	bne.n	800bbd2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	699b      	ldr	r3, [r3, #24]
 800bc04:	f003 0320 	and.w	r3, r3, #32
 800bc08:	2b20      	cmp	r3, #32
 800bc0a:	d003      	beq.n	800bc14 <I2C_IsErrorOccurred+0xe0>
 800bc0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d0aa      	beq.n	800bb6a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800bc14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d103      	bne.n	800bc24 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	2220      	movs	r2, #32
 800bc22:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800bc24:	6a3b      	ldr	r3, [r7, #32]
 800bc26:	f043 0304 	orr.w	r3, r3, #4
 800bc2a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	699b      	ldr	r3, [r3, #24]
 800bc38:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800bc3a:	69bb      	ldr	r3, [r7, #24]
 800bc3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d00b      	beq.n	800bc5c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800bc44:	6a3b      	ldr	r3, [r7, #32]
 800bc46:	f043 0301 	orr.w	r3, r3, #1
 800bc4a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bc54:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800bc56:	2301      	movs	r3, #1
 800bc58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800bc5c:	69bb      	ldr	r3, [r7, #24]
 800bc5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d00b      	beq.n	800bc7e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800bc66:	6a3b      	ldr	r3, [r7, #32]
 800bc68:	f043 0308 	orr.w	r3, r3, #8
 800bc6c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bc76:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800bc78:	2301      	movs	r3, #1
 800bc7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800bc7e:	69bb      	ldr	r3, [r7, #24]
 800bc80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d00b      	beq.n	800bca0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800bc88:	6a3b      	ldr	r3, [r7, #32]
 800bc8a:	f043 0302 	orr.w	r3, r3, #2
 800bc8e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bc98:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800bca0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d01c      	beq.n	800bce2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800bca8:	68f8      	ldr	r0, [r7, #12]
 800bcaa:	f7ff fde9 	bl	800b880 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	6859      	ldr	r1, [r3, #4]
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	681a      	ldr	r2, [r3, #0]
 800bcb8:	4b0d      	ldr	r3, [pc, #52]	; (800bcf0 <I2C_IsErrorOccurred+0x1bc>)
 800bcba:	400b      	ands	r3, r1
 800bcbc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bcc2:	6a3b      	ldr	r3, [r7, #32]
 800bcc4:	431a      	orrs	r2, r3
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	2220      	movs	r2, #32
 800bcce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	2200      	movs	r2, #0
 800bcde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800bce2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	3728      	adds	r7, #40	; 0x28
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}
 800bcee:	bf00      	nop
 800bcf0:	fe00e800 	.word	0xfe00e800

0800bcf4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b087      	sub	sp, #28
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	60f8      	str	r0, [r7, #12]
 800bcfc:	607b      	str	r3, [r7, #4]
 800bcfe:	460b      	mov	r3, r1
 800bd00:	817b      	strh	r3, [r7, #10]
 800bd02:	4613      	mov	r3, r2
 800bd04:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bd06:	897b      	ldrh	r3, [r7, #10]
 800bd08:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800bd0c:	7a7b      	ldrb	r3, [r7, #9]
 800bd0e:	041b      	lsls	r3, r3, #16
 800bd10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bd14:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bd1a:	6a3b      	ldr	r3, [r7, #32]
 800bd1c:	4313      	orrs	r3, r2
 800bd1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bd22:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	685a      	ldr	r2, [r3, #4]
 800bd2a:	6a3b      	ldr	r3, [r7, #32]
 800bd2c:	0d5b      	lsrs	r3, r3, #21
 800bd2e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800bd32:	4b08      	ldr	r3, [pc, #32]	; (800bd54 <I2C_TransferConfig+0x60>)
 800bd34:	430b      	orrs	r3, r1
 800bd36:	43db      	mvns	r3, r3
 800bd38:	ea02 0103 	and.w	r1, r2, r3
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	697a      	ldr	r2, [r7, #20]
 800bd42:	430a      	orrs	r2, r1
 800bd44:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800bd46:	bf00      	nop
 800bd48:	371c      	adds	r7, #28
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd50:	4770      	bx	lr
 800bd52:	bf00      	nop
 800bd54:	03ff63ff 	.word	0x03ff63ff

0800bd58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b083      	sub	sp, #12
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
 800bd60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bd68:	b2db      	uxtb	r3, r3
 800bd6a:	2b20      	cmp	r3, #32
 800bd6c:	d138      	bne.n	800bde0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bd74:	2b01      	cmp	r3, #1
 800bd76:	d101      	bne.n	800bd7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800bd78:	2302      	movs	r3, #2
 800bd7a:	e032      	b.n	800bde2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2201      	movs	r2, #1
 800bd80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2224      	movs	r2, #36	; 0x24
 800bd88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	681a      	ldr	r2, [r3, #0]
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f022 0201 	bic.w	r2, r2, #1
 800bd9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	681a      	ldr	r2, [r3, #0]
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bdaa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	6819      	ldr	r1, [r3, #0]
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	683a      	ldr	r2, [r7, #0]
 800bdb8:	430a      	orrs	r2, r1
 800bdba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	681a      	ldr	r2, [r3, #0]
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f042 0201 	orr.w	r2, r2, #1
 800bdca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2220      	movs	r2, #32
 800bdd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bddc:	2300      	movs	r3, #0
 800bdde:	e000      	b.n	800bde2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800bde0:	2302      	movs	r3, #2
  }
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	370c      	adds	r7, #12
 800bde6:	46bd      	mov	sp, r7
 800bde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdec:	4770      	bx	lr

0800bdee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800bdee:	b480      	push	{r7}
 800bdf0:	b085      	sub	sp, #20
 800bdf2:	af00      	add	r7, sp, #0
 800bdf4:	6078      	str	r0, [r7, #4]
 800bdf6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bdfe:	b2db      	uxtb	r3, r3
 800be00:	2b20      	cmp	r3, #32
 800be02:	d139      	bne.n	800be78 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800be0a:	2b01      	cmp	r3, #1
 800be0c:	d101      	bne.n	800be12 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800be0e:	2302      	movs	r3, #2
 800be10:	e033      	b.n	800be7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2201      	movs	r2, #1
 800be16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2224      	movs	r2, #36	; 0x24
 800be1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	681a      	ldr	r2, [r3, #0]
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f022 0201 	bic.w	r2, r2, #1
 800be30:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800be40:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	021b      	lsls	r3, r3, #8
 800be46:	68fa      	ldr	r2, [r7, #12]
 800be48:	4313      	orrs	r3, r2
 800be4a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	68fa      	ldr	r2, [r7, #12]
 800be52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	681a      	ldr	r2, [r3, #0]
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	f042 0201 	orr.w	r2, r2, #1
 800be62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2220      	movs	r2, #32
 800be68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2200      	movs	r2, #0
 800be70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800be74:	2300      	movs	r3, #0
 800be76:	e000      	b.n	800be7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800be78:	2302      	movs	r3, #2
  }
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3714      	adds	r7, #20
 800be7e:	46bd      	mov	sp, r7
 800be80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be84:	4770      	bx	lr
	...

0800be88 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800be88:	b480      	push	{r7}
 800be8a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800be8c:	4b05      	ldr	r3, [pc, #20]	; (800bea4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	4a04      	ldr	r2, [pc, #16]	; (800bea4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800be92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800be96:	6013      	str	r3, [r2, #0]
}
 800be98:	bf00      	nop
 800be9a:	46bd      	mov	sp, r7
 800be9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea0:	4770      	bx	lr
 800bea2:	bf00      	nop
 800bea4:	40007000 	.word	0x40007000

0800bea8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b082      	sub	sp, #8
 800beac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800beae:	2300      	movs	r3, #0
 800beb0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800beb2:	4b23      	ldr	r3, [pc, #140]	; (800bf40 <HAL_PWREx_EnableOverDrive+0x98>)
 800beb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beb6:	4a22      	ldr	r2, [pc, #136]	; (800bf40 <HAL_PWREx_EnableOverDrive+0x98>)
 800beb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bebc:	6413      	str	r3, [r2, #64]	; 0x40
 800bebe:	4b20      	ldr	r3, [pc, #128]	; (800bf40 <HAL_PWREx_EnableOverDrive+0x98>)
 800bec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bec6:	603b      	str	r3, [r7, #0]
 800bec8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800beca:	4b1e      	ldr	r3, [pc, #120]	; (800bf44 <HAL_PWREx_EnableOverDrive+0x9c>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	4a1d      	ldr	r2, [pc, #116]	; (800bf44 <HAL_PWREx_EnableOverDrive+0x9c>)
 800bed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bed4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bed6:	f7fc fb1b 	bl	8008510 <HAL_GetTick>
 800beda:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800bedc:	e009      	b.n	800bef2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800bede:	f7fc fb17 	bl	8008510 <HAL_GetTick>
 800bee2:	4602      	mov	r2, r0
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	1ad3      	subs	r3, r2, r3
 800bee8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800beec:	d901      	bls.n	800bef2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800beee:	2303      	movs	r3, #3
 800bef0:	e022      	b.n	800bf38 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800bef2:	4b14      	ldr	r3, [pc, #80]	; (800bf44 <HAL_PWREx_EnableOverDrive+0x9c>)
 800bef4:	685b      	ldr	r3, [r3, #4]
 800bef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800befa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800befe:	d1ee      	bne.n	800bede <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800bf00:	4b10      	ldr	r3, [pc, #64]	; (800bf44 <HAL_PWREx_EnableOverDrive+0x9c>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	4a0f      	ldr	r2, [pc, #60]	; (800bf44 <HAL_PWREx_EnableOverDrive+0x9c>)
 800bf06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bf0a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bf0c:	f7fc fb00 	bl	8008510 <HAL_GetTick>
 800bf10:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800bf12:	e009      	b.n	800bf28 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800bf14:	f7fc fafc 	bl	8008510 <HAL_GetTick>
 800bf18:	4602      	mov	r2, r0
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	1ad3      	subs	r3, r2, r3
 800bf1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bf22:	d901      	bls.n	800bf28 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800bf24:	2303      	movs	r3, #3
 800bf26:	e007      	b.n	800bf38 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800bf28:	4b06      	ldr	r3, [pc, #24]	; (800bf44 <HAL_PWREx_EnableOverDrive+0x9c>)
 800bf2a:	685b      	ldr	r3, [r3, #4]
 800bf2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf34:	d1ee      	bne.n	800bf14 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800bf36:	2300      	movs	r3, #0
}
 800bf38:	4618      	mov	r0, r3
 800bf3a:	3708      	adds	r7, #8
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}
 800bf40:	40023800 	.word	0x40023800
 800bf44:	40007000 	.word	0x40007000

0800bf48 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b086      	sub	sp, #24
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800bf50:	2300      	movs	r3, #0
 800bf52:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d101      	bne.n	800bf5e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	e29b      	b.n	800c496 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	f003 0301 	and.w	r3, r3, #1
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	f000 8087 	beq.w	800c07a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800bf6c:	4b96      	ldr	r3, [pc, #600]	; (800c1c8 <HAL_RCC_OscConfig+0x280>)
 800bf6e:	689b      	ldr	r3, [r3, #8]
 800bf70:	f003 030c 	and.w	r3, r3, #12
 800bf74:	2b04      	cmp	r3, #4
 800bf76:	d00c      	beq.n	800bf92 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bf78:	4b93      	ldr	r3, [pc, #588]	; (800c1c8 <HAL_RCC_OscConfig+0x280>)
 800bf7a:	689b      	ldr	r3, [r3, #8]
 800bf7c:	f003 030c 	and.w	r3, r3, #12
 800bf80:	2b08      	cmp	r3, #8
 800bf82:	d112      	bne.n	800bfaa <HAL_RCC_OscConfig+0x62>
 800bf84:	4b90      	ldr	r3, [pc, #576]	; (800c1c8 <HAL_RCC_OscConfig+0x280>)
 800bf86:	685b      	ldr	r3, [r3, #4]
 800bf88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bf8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bf90:	d10b      	bne.n	800bfaa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bf92:	4b8d      	ldr	r3, [pc, #564]	; (800c1c8 <HAL_RCC_OscConfig+0x280>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d06c      	beq.n	800c078 <HAL_RCC_OscConfig+0x130>
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	685b      	ldr	r3, [r3, #4]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d168      	bne.n	800c078 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	e275      	b.n	800c496 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	685b      	ldr	r3, [r3, #4]
 800bfae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfb2:	d106      	bne.n	800bfc2 <HAL_RCC_OscConfig+0x7a>
 800bfb4:	4b84      	ldr	r3, [pc, #528]	; (800c1c8 <HAL_RCC_OscConfig+0x280>)
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	4a83      	ldr	r2, [pc, #524]	; (800c1c8 <HAL_RCC_OscConfig+0x280>)
 800bfba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bfbe:	6013      	str	r3, [r2, #0]
 800bfc0:	e02e      	b.n	800c020 <HAL_RCC_OscConfig+0xd8>
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	685b      	ldr	r3, [r3, #4]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d10c      	bne.n	800bfe4 <HAL_RCC_OscConfig+0x9c>
 800bfca:	4b7f      	ldr	r3, [pc, #508]	; (800c1c8 <HAL_RCC_OscConfig+0x280>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	4a7e      	ldr	r2, [pc, #504]	; (800c1c8 <HAL_RCC_OscConfig+0x280>)
 800bfd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bfd4:	6013      	str	r3, [r2, #0]
 800bfd6:	4b7c      	ldr	r3, [pc, #496]	; (800c1c8 <HAL_RCC_OscConfig+0x280>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	4a7b      	ldr	r2, [pc, #492]	; (800c1c8 <HAL_RCC_OscConfig+0x280>)
 800bfdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bfe0:	6013      	str	r3, [r2, #0]
 800bfe2:	e01d      	b.n	800c020 <HAL_RCC_OscConfig+0xd8>
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	685b      	ldr	r3, [r3, #4]
 800bfe8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bfec:	d10c      	bne.n	800c008 <HAL_RCC_OscConfig+0xc0>
 800bfee:	4b76      	ldr	r3, [pc, #472]	; (800c1c8 <HAL_RCC_OscConfig+0x280>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	4a75      	ldr	r2, [pc, #468]	; (800c1c8 <HAL_RCC_OscConfig+0x280>)
 800bff4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bff8:	6013      	str	r3, [r2, #0]
 800bffa:	4b73      	ldr	r3, [pc, #460]	; (800c1c8 <HAL_RCC_OscConfig+0x280>)
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	4a72      	ldr	r2, [pc, #456]	; (800c1c8 <HAL_RCC_OscConfig+0x280>)
 800c000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c004:	6013      	str	r3, [r2, #0]
 800c006:	e00b      	b.n	800c020 <HAL_RCC_OscConfig+0xd8>
 800c008:	4b6f      	ldr	r3, [pc, #444]	; (800c1c8 <HAL_RCC_OscConfig+0x280>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	4a6e      	ldr	r2, [pc, #440]	; (800c1c8 <HAL_RCC_OscConfig+0x280>)
 800c00e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c012:	6013      	str	r3, [r2, #0]
 800c014:	4b6c      	ldr	r3, [pc, #432]	; (800c1c8 <HAL_RCC_OscConfig+0x280>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	4a6b      	ldr	r2, [pc, #428]	; (800c1c8 <HAL_RCC_OscConfig+0x280>)
 800c01a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c01e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	685b      	ldr	r3, [r3, #4]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d013      	beq.n	800c050 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c028:	f7fc fa72 	bl	8008510 <HAL_GetTick>
 800c02c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c02e:	e008      	b.n	800c042 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c030:	f7fc fa6e 	bl	8008510 <HAL_GetTick>
 800c034:	4602      	mov	r2, r0
 800c036:	693b      	ldr	r3, [r7, #16]
 800c038:	1ad3      	subs	r3, r2, r3
 800c03a:	2b64      	cmp	r3, #100	; 0x64
 800c03c:	d901      	bls.n	800c042 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c03e:	2303      	movs	r3, #3
 800c040:	e229      	b.n	800c496 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c042:	4b61      	ldr	r3, [pc, #388]	; (800c1c8 <HAL_RCC_OscConfig+0x280>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d0f0      	beq.n	800c030 <HAL_RCC_OscConfig+0xe8>
 800c04e:	e014      	b.n	800c07a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c050:	f7fc fa5e 	bl	8008510 <HAL_GetTick>
 800c054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c056:	e008      	b.n	800c06a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c058:	f7fc fa5a 	bl	8008510 <HAL_GetTick>
 800c05c:	4602      	mov	r2, r0
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	1ad3      	subs	r3, r2, r3
 800c062:	2b64      	cmp	r3, #100	; 0x64
 800c064:	d901      	bls.n	800c06a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800c066:	2303      	movs	r3, #3
 800c068:	e215      	b.n	800c496 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c06a:	4b57      	ldr	r3, [pc, #348]	; (800c1c8 <HAL_RCC_OscConfig+0x280>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c072:	2b00      	cmp	r3, #0
 800c074:	d1f0      	bne.n	800c058 <HAL_RCC_OscConfig+0x110>
 800c076:	e000      	b.n	800c07a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f003 0302 	and.w	r3, r3, #2
 800c082:	2b00      	cmp	r3, #0
 800c084:	d069      	beq.n	800c15a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c086:	4b50      	ldr	r3, [pc, #320]	; (800c1c8 <HAL_RCC_OscConfig+0x280>)
 800c088:	689b      	ldr	r3, [r3, #8]
 800c08a:	f003 030c 	and.w	r3, r3, #12
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d00b      	beq.n	800c0aa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c092:	4b4d      	ldr	r3, [pc, #308]	; (800c1c8 <HAL_RCC_OscConfig+0x280>)
 800c094:	689b      	ldr	r3, [r3, #8]
 800c096:	f003 030c 	and.w	r3, r3, #12
 800c09a:	2b08      	cmp	r3, #8
 800c09c:	d11c      	bne.n	800c0d8 <HAL_RCC_OscConfig+0x190>
 800c09e:	4b4a      	ldr	r3, [pc, #296]	; (800c1c8 <HAL_RCC_OscConfig+0x280>)
 800c0a0:	685b      	ldr	r3, [r3, #4]
 800c0a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d116      	bne.n	800c0d8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c0aa:	4b47      	ldr	r3, [pc, #284]	; (800c1c8 <HAL_RCC_OscConfig+0x280>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	f003 0302 	and.w	r3, r3, #2
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d005      	beq.n	800c0c2 <HAL_RCC_OscConfig+0x17a>
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	68db      	ldr	r3, [r3, #12]
 800c0ba:	2b01      	cmp	r3, #1
 800c0bc:	d001      	beq.n	800c0c2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800c0be:	2301      	movs	r3, #1
 800c0c0:	e1e9      	b.n	800c496 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c0c2:	4b41      	ldr	r3, [pc, #260]	; (800c1c8 <HAL_RCC_OscConfig+0x280>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	691b      	ldr	r3, [r3, #16]
 800c0ce:	00db      	lsls	r3, r3, #3
 800c0d0:	493d      	ldr	r1, [pc, #244]	; (800c1c8 <HAL_RCC_OscConfig+0x280>)
 800c0d2:	4313      	orrs	r3, r2
 800c0d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c0d6:	e040      	b.n	800c15a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	68db      	ldr	r3, [r3, #12]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d023      	beq.n	800c128 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c0e0:	4b39      	ldr	r3, [pc, #228]	; (800c1c8 <HAL_RCC_OscConfig+0x280>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	4a38      	ldr	r2, [pc, #224]	; (800c1c8 <HAL_RCC_OscConfig+0x280>)
 800c0e6:	f043 0301 	orr.w	r3, r3, #1
 800c0ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c0ec:	f7fc fa10 	bl	8008510 <HAL_GetTick>
 800c0f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c0f2:	e008      	b.n	800c106 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c0f4:	f7fc fa0c 	bl	8008510 <HAL_GetTick>
 800c0f8:	4602      	mov	r2, r0
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	1ad3      	subs	r3, r2, r3
 800c0fe:	2b02      	cmp	r3, #2
 800c100:	d901      	bls.n	800c106 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800c102:	2303      	movs	r3, #3
 800c104:	e1c7      	b.n	800c496 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c106:	4b30      	ldr	r3, [pc, #192]	; (800c1c8 <HAL_RCC_OscConfig+0x280>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	f003 0302 	and.w	r3, r3, #2
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d0f0      	beq.n	800c0f4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c112:	4b2d      	ldr	r3, [pc, #180]	; (800c1c8 <HAL_RCC_OscConfig+0x280>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	691b      	ldr	r3, [r3, #16]
 800c11e:	00db      	lsls	r3, r3, #3
 800c120:	4929      	ldr	r1, [pc, #164]	; (800c1c8 <HAL_RCC_OscConfig+0x280>)
 800c122:	4313      	orrs	r3, r2
 800c124:	600b      	str	r3, [r1, #0]
 800c126:	e018      	b.n	800c15a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c128:	4b27      	ldr	r3, [pc, #156]	; (800c1c8 <HAL_RCC_OscConfig+0x280>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	4a26      	ldr	r2, [pc, #152]	; (800c1c8 <HAL_RCC_OscConfig+0x280>)
 800c12e:	f023 0301 	bic.w	r3, r3, #1
 800c132:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c134:	f7fc f9ec 	bl	8008510 <HAL_GetTick>
 800c138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c13a:	e008      	b.n	800c14e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c13c:	f7fc f9e8 	bl	8008510 <HAL_GetTick>
 800c140:	4602      	mov	r2, r0
 800c142:	693b      	ldr	r3, [r7, #16]
 800c144:	1ad3      	subs	r3, r2, r3
 800c146:	2b02      	cmp	r3, #2
 800c148:	d901      	bls.n	800c14e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800c14a:	2303      	movs	r3, #3
 800c14c:	e1a3      	b.n	800c496 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c14e:	4b1e      	ldr	r3, [pc, #120]	; (800c1c8 <HAL_RCC_OscConfig+0x280>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	f003 0302 	and.w	r3, r3, #2
 800c156:	2b00      	cmp	r3, #0
 800c158:	d1f0      	bne.n	800c13c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	f003 0308 	and.w	r3, r3, #8
 800c162:	2b00      	cmp	r3, #0
 800c164:	d038      	beq.n	800c1d8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	695b      	ldr	r3, [r3, #20]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d019      	beq.n	800c1a2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c16e:	4b16      	ldr	r3, [pc, #88]	; (800c1c8 <HAL_RCC_OscConfig+0x280>)
 800c170:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c172:	4a15      	ldr	r2, [pc, #84]	; (800c1c8 <HAL_RCC_OscConfig+0x280>)
 800c174:	f043 0301 	orr.w	r3, r3, #1
 800c178:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c17a:	f7fc f9c9 	bl	8008510 <HAL_GetTick>
 800c17e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c180:	e008      	b.n	800c194 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c182:	f7fc f9c5 	bl	8008510 <HAL_GetTick>
 800c186:	4602      	mov	r2, r0
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	1ad3      	subs	r3, r2, r3
 800c18c:	2b02      	cmp	r3, #2
 800c18e:	d901      	bls.n	800c194 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c190:	2303      	movs	r3, #3
 800c192:	e180      	b.n	800c496 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c194:	4b0c      	ldr	r3, [pc, #48]	; (800c1c8 <HAL_RCC_OscConfig+0x280>)
 800c196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c198:	f003 0302 	and.w	r3, r3, #2
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d0f0      	beq.n	800c182 <HAL_RCC_OscConfig+0x23a>
 800c1a0:	e01a      	b.n	800c1d8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c1a2:	4b09      	ldr	r3, [pc, #36]	; (800c1c8 <HAL_RCC_OscConfig+0x280>)
 800c1a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1a6:	4a08      	ldr	r2, [pc, #32]	; (800c1c8 <HAL_RCC_OscConfig+0x280>)
 800c1a8:	f023 0301 	bic.w	r3, r3, #1
 800c1ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c1ae:	f7fc f9af 	bl	8008510 <HAL_GetTick>
 800c1b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c1b4:	e00a      	b.n	800c1cc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c1b6:	f7fc f9ab 	bl	8008510 <HAL_GetTick>
 800c1ba:	4602      	mov	r2, r0
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	1ad3      	subs	r3, r2, r3
 800c1c0:	2b02      	cmp	r3, #2
 800c1c2:	d903      	bls.n	800c1cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800c1c4:	2303      	movs	r3, #3
 800c1c6:	e166      	b.n	800c496 <HAL_RCC_OscConfig+0x54e>
 800c1c8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c1cc:	4b92      	ldr	r3, [pc, #584]	; (800c418 <HAL_RCC_OscConfig+0x4d0>)
 800c1ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1d0:	f003 0302 	and.w	r3, r3, #2
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d1ee      	bne.n	800c1b6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	f003 0304 	and.w	r3, r3, #4
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	f000 80a4 	beq.w	800c32e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c1e6:	4b8c      	ldr	r3, [pc, #560]	; (800c418 <HAL_RCC_OscConfig+0x4d0>)
 800c1e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d10d      	bne.n	800c20e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800c1f2:	4b89      	ldr	r3, [pc, #548]	; (800c418 <HAL_RCC_OscConfig+0x4d0>)
 800c1f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1f6:	4a88      	ldr	r2, [pc, #544]	; (800c418 <HAL_RCC_OscConfig+0x4d0>)
 800c1f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c1fc:	6413      	str	r3, [r2, #64]	; 0x40
 800c1fe:	4b86      	ldr	r3, [pc, #536]	; (800c418 <HAL_RCC_OscConfig+0x4d0>)
 800c200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c206:	60bb      	str	r3, [r7, #8]
 800c208:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c20a:	2301      	movs	r3, #1
 800c20c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c20e:	4b83      	ldr	r3, [pc, #524]	; (800c41c <HAL_RCC_OscConfig+0x4d4>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c216:	2b00      	cmp	r3, #0
 800c218:	d118      	bne.n	800c24c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800c21a:	4b80      	ldr	r3, [pc, #512]	; (800c41c <HAL_RCC_OscConfig+0x4d4>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	4a7f      	ldr	r2, [pc, #508]	; (800c41c <HAL_RCC_OscConfig+0x4d4>)
 800c220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c224:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c226:	f7fc f973 	bl	8008510 <HAL_GetTick>
 800c22a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c22c:	e008      	b.n	800c240 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c22e:	f7fc f96f 	bl	8008510 <HAL_GetTick>
 800c232:	4602      	mov	r2, r0
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	1ad3      	subs	r3, r2, r3
 800c238:	2b64      	cmp	r3, #100	; 0x64
 800c23a:	d901      	bls.n	800c240 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800c23c:	2303      	movs	r3, #3
 800c23e:	e12a      	b.n	800c496 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c240:	4b76      	ldr	r3, [pc, #472]	; (800c41c <HAL_RCC_OscConfig+0x4d4>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d0f0      	beq.n	800c22e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	689b      	ldr	r3, [r3, #8]
 800c250:	2b01      	cmp	r3, #1
 800c252:	d106      	bne.n	800c262 <HAL_RCC_OscConfig+0x31a>
 800c254:	4b70      	ldr	r3, [pc, #448]	; (800c418 <HAL_RCC_OscConfig+0x4d0>)
 800c256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c258:	4a6f      	ldr	r2, [pc, #444]	; (800c418 <HAL_RCC_OscConfig+0x4d0>)
 800c25a:	f043 0301 	orr.w	r3, r3, #1
 800c25e:	6713      	str	r3, [r2, #112]	; 0x70
 800c260:	e02d      	b.n	800c2be <HAL_RCC_OscConfig+0x376>
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	689b      	ldr	r3, [r3, #8]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d10c      	bne.n	800c284 <HAL_RCC_OscConfig+0x33c>
 800c26a:	4b6b      	ldr	r3, [pc, #428]	; (800c418 <HAL_RCC_OscConfig+0x4d0>)
 800c26c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c26e:	4a6a      	ldr	r2, [pc, #424]	; (800c418 <HAL_RCC_OscConfig+0x4d0>)
 800c270:	f023 0301 	bic.w	r3, r3, #1
 800c274:	6713      	str	r3, [r2, #112]	; 0x70
 800c276:	4b68      	ldr	r3, [pc, #416]	; (800c418 <HAL_RCC_OscConfig+0x4d0>)
 800c278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c27a:	4a67      	ldr	r2, [pc, #412]	; (800c418 <HAL_RCC_OscConfig+0x4d0>)
 800c27c:	f023 0304 	bic.w	r3, r3, #4
 800c280:	6713      	str	r3, [r2, #112]	; 0x70
 800c282:	e01c      	b.n	800c2be <HAL_RCC_OscConfig+0x376>
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	689b      	ldr	r3, [r3, #8]
 800c288:	2b05      	cmp	r3, #5
 800c28a:	d10c      	bne.n	800c2a6 <HAL_RCC_OscConfig+0x35e>
 800c28c:	4b62      	ldr	r3, [pc, #392]	; (800c418 <HAL_RCC_OscConfig+0x4d0>)
 800c28e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c290:	4a61      	ldr	r2, [pc, #388]	; (800c418 <HAL_RCC_OscConfig+0x4d0>)
 800c292:	f043 0304 	orr.w	r3, r3, #4
 800c296:	6713      	str	r3, [r2, #112]	; 0x70
 800c298:	4b5f      	ldr	r3, [pc, #380]	; (800c418 <HAL_RCC_OscConfig+0x4d0>)
 800c29a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c29c:	4a5e      	ldr	r2, [pc, #376]	; (800c418 <HAL_RCC_OscConfig+0x4d0>)
 800c29e:	f043 0301 	orr.w	r3, r3, #1
 800c2a2:	6713      	str	r3, [r2, #112]	; 0x70
 800c2a4:	e00b      	b.n	800c2be <HAL_RCC_OscConfig+0x376>
 800c2a6:	4b5c      	ldr	r3, [pc, #368]	; (800c418 <HAL_RCC_OscConfig+0x4d0>)
 800c2a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2aa:	4a5b      	ldr	r2, [pc, #364]	; (800c418 <HAL_RCC_OscConfig+0x4d0>)
 800c2ac:	f023 0301 	bic.w	r3, r3, #1
 800c2b0:	6713      	str	r3, [r2, #112]	; 0x70
 800c2b2:	4b59      	ldr	r3, [pc, #356]	; (800c418 <HAL_RCC_OscConfig+0x4d0>)
 800c2b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2b6:	4a58      	ldr	r2, [pc, #352]	; (800c418 <HAL_RCC_OscConfig+0x4d0>)
 800c2b8:	f023 0304 	bic.w	r3, r3, #4
 800c2bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	689b      	ldr	r3, [r3, #8]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d015      	beq.n	800c2f2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c2c6:	f7fc f923 	bl	8008510 <HAL_GetTick>
 800c2ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c2cc:	e00a      	b.n	800c2e4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c2ce:	f7fc f91f 	bl	8008510 <HAL_GetTick>
 800c2d2:	4602      	mov	r2, r0
 800c2d4:	693b      	ldr	r3, [r7, #16]
 800c2d6:	1ad3      	subs	r3, r2, r3
 800c2d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2dc:	4293      	cmp	r3, r2
 800c2de:	d901      	bls.n	800c2e4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800c2e0:	2303      	movs	r3, #3
 800c2e2:	e0d8      	b.n	800c496 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c2e4:	4b4c      	ldr	r3, [pc, #304]	; (800c418 <HAL_RCC_OscConfig+0x4d0>)
 800c2e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2e8:	f003 0302 	and.w	r3, r3, #2
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d0ee      	beq.n	800c2ce <HAL_RCC_OscConfig+0x386>
 800c2f0:	e014      	b.n	800c31c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c2f2:	f7fc f90d 	bl	8008510 <HAL_GetTick>
 800c2f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c2f8:	e00a      	b.n	800c310 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c2fa:	f7fc f909 	bl	8008510 <HAL_GetTick>
 800c2fe:	4602      	mov	r2, r0
 800c300:	693b      	ldr	r3, [r7, #16]
 800c302:	1ad3      	subs	r3, r2, r3
 800c304:	f241 3288 	movw	r2, #5000	; 0x1388
 800c308:	4293      	cmp	r3, r2
 800c30a:	d901      	bls.n	800c310 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800c30c:	2303      	movs	r3, #3
 800c30e:	e0c2      	b.n	800c496 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c310:	4b41      	ldr	r3, [pc, #260]	; (800c418 <HAL_RCC_OscConfig+0x4d0>)
 800c312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c314:	f003 0302 	and.w	r3, r3, #2
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d1ee      	bne.n	800c2fa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c31c:	7dfb      	ldrb	r3, [r7, #23]
 800c31e:	2b01      	cmp	r3, #1
 800c320:	d105      	bne.n	800c32e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c322:	4b3d      	ldr	r3, [pc, #244]	; (800c418 <HAL_RCC_OscConfig+0x4d0>)
 800c324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c326:	4a3c      	ldr	r2, [pc, #240]	; (800c418 <HAL_RCC_OscConfig+0x4d0>)
 800c328:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c32c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	699b      	ldr	r3, [r3, #24]
 800c332:	2b00      	cmp	r3, #0
 800c334:	f000 80ae 	beq.w	800c494 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c338:	4b37      	ldr	r3, [pc, #220]	; (800c418 <HAL_RCC_OscConfig+0x4d0>)
 800c33a:	689b      	ldr	r3, [r3, #8]
 800c33c:	f003 030c 	and.w	r3, r3, #12
 800c340:	2b08      	cmp	r3, #8
 800c342:	d06d      	beq.n	800c420 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	699b      	ldr	r3, [r3, #24]
 800c348:	2b02      	cmp	r3, #2
 800c34a:	d14b      	bne.n	800c3e4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c34c:	4b32      	ldr	r3, [pc, #200]	; (800c418 <HAL_RCC_OscConfig+0x4d0>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	4a31      	ldr	r2, [pc, #196]	; (800c418 <HAL_RCC_OscConfig+0x4d0>)
 800c352:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c356:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c358:	f7fc f8da 	bl	8008510 <HAL_GetTick>
 800c35c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c35e:	e008      	b.n	800c372 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c360:	f7fc f8d6 	bl	8008510 <HAL_GetTick>
 800c364:	4602      	mov	r2, r0
 800c366:	693b      	ldr	r3, [r7, #16]
 800c368:	1ad3      	subs	r3, r2, r3
 800c36a:	2b02      	cmp	r3, #2
 800c36c:	d901      	bls.n	800c372 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800c36e:	2303      	movs	r3, #3
 800c370:	e091      	b.n	800c496 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c372:	4b29      	ldr	r3, [pc, #164]	; (800c418 <HAL_RCC_OscConfig+0x4d0>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d1f0      	bne.n	800c360 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	69da      	ldr	r2, [r3, #28]
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6a1b      	ldr	r3, [r3, #32]
 800c386:	431a      	orrs	r2, r3
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c38c:	019b      	lsls	r3, r3, #6
 800c38e:	431a      	orrs	r2, r3
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c394:	085b      	lsrs	r3, r3, #1
 800c396:	3b01      	subs	r3, #1
 800c398:	041b      	lsls	r3, r3, #16
 800c39a:	431a      	orrs	r2, r3
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3a0:	061b      	lsls	r3, r3, #24
 800c3a2:	431a      	orrs	r2, r3
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3a8:	071b      	lsls	r3, r3, #28
 800c3aa:	491b      	ldr	r1, [pc, #108]	; (800c418 <HAL_RCC_OscConfig+0x4d0>)
 800c3ac:	4313      	orrs	r3, r2
 800c3ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c3b0:	4b19      	ldr	r3, [pc, #100]	; (800c418 <HAL_RCC_OscConfig+0x4d0>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	4a18      	ldr	r2, [pc, #96]	; (800c418 <HAL_RCC_OscConfig+0x4d0>)
 800c3b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c3ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c3bc:	f7fc f8a8 	bl	8008510 <HAL_GetTick>
 800c3c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c3c2:	e008      	b.n	800c3d6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c3c4:	f7fc f8a4 	bl	8008510 <HAL_GetTick>
 800c3c8:	4602      	mov	r2, r0
 800c3ca:	693b      	ldr	r3, [r7, #16]
 800c3cc:	1ad3      	subs	r3, r2, r3
 800c3ce:	2b02      	cmp	r3, #2
 800c3d0:	d901      	bls.n	800c3d6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800c3d2:	2303      	movs	r3, #3
 800c3d4:	e05f      	b.n	800c496 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c3d6:	4b10      	ldr	r3, [pc, #64]	; (800c418 <HAL_RCC_OscConfig+0x4d0>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d0f0      	beq.n	800c3c4 <HAL_RCC_OscConfig+0x47c>
 800c3e2:	e057      	b.n	800c494 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c3e4:	4b0c      	ldr	r3, [pc, #48]	; (800c418 <HAL_RCC_OscConfig+0x4d0>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	4a0b      	ldr	r2, [pc, #44]	; (800c418 <HAL_RCC_OscConfig+0x4d0>)
 800c3ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c3ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c3f0:	f7fc f88e 	bl	8008510 <HAL_GetTick>
 800c3f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c3f6:	e008      	b.n	800c40a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c3f8:	f7fc f88a 	bl	8008510 <HAL_GetTick>
 800c3fc:	4602      	mov	r2, r0
 800c3fe:	693b      	ldr	r3, [r7, #16]
 800c400:	1ad3      	subs	r3, r2, r3
 800c402:	2b02      	cmp	r3, #2
 800c404:	d901      	bls.n	800c40a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800c406:	2303      	movs	r3, #3
 800c408:	e045      	b.n	800c496 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c40a:	4b03      	ldr	r3, [pc, #12]	; (800c418 <HAL_RCC_OscConfig+0x4d0>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c412:	2b00      	cmp	r3, #0
 800c414:	d1f0      	bne.n	800c3f8 <HAL_RCC_OscConfig+0x4b0>
 800c416:	e03d      	b.n	800c494 <HAL_RCC_OscConfig+0x54c>
 800c418:	40023800 	.word	0x40023800
 800c41c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800c420:	4b1f      	ldr	r3, [pc, #124]	; (800c4a0 <HAL_RCC_OscConfig+0x558>)
 800c422:	685b      	ldr	r3, [r3, #4]
 800c424:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	699b      	ldr	r3, [r3, #24]
 800c42a:	2b01      	cmp	r3, #1
 800c42c:	d030      	beq.n	800c490 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c438:	429a      	cmp	r2, r3
 800c43a:	d129      	bne.n	800c490 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c446:	429a      	cmp	r2, r3
 800c448:	d122      	bne.n	800c490 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c44a:	68fa      	ldr	r2, [r7, #12]
 800c44c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c450:	4013      	ands	r3, r2
 800c452:	687a      	ldr	r2, [r7, #4]
 800c454:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c456:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c458:	4293      	cmp	r3, r2
 800c45a:	d119      	bne.n	800c490 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c466:	085b      	lsrs	r3, r3, #1
 800c468:	3b01      	subs	r3, #1
 800c46a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c46c:	429a      	cmp	r2, r3
 800c46e:	d10f      	bne.n	800c490 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c47a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800c47c:	429a      	cmp	r2, r3
 800c47e:	d107      	bne.n	800c490 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c48a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c48c:	429a      	cmp	r2, r3
 800c48e:	d001      	beq.n	800c494 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800c490:	2301      	movs	r3, #1
 800c492:	e000      	b.n	800c496 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800c494:	2300      	movs	r3, #0
}
 800c496:	4618      	mov	r0, r3
 800c498:	3718      	adds	r7, #24
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}
 800c49e:	bf00      	nop
 800c4a0:	40023800 	.word	0x40023800

0800c4a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b084      	sub	sp, #16
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
 800c4ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d101      	bne.n	800c4bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800c4b8:	2301      	movs	r3, #1
 800c4ba:	e0d0      	b.n	800c65e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c4bc:	4b6a      	ldr	r3, [pc, #424]	; (800c668 <HAL_RCC_ClockConfig+0x1c4>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	f003 030f 	and.w	r3, r3, #15
 800c4c4:	683a      	ldr	r2, [r7, #0]
 800c4c6:	429a      	cmp	r2, r3
 800c4c8:	d910      	bls.n	800c4ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c4ca:	4b67      	ldr	r3, [pc, #412]	; (800c668 <HAL_RCC_ClockConfig+0x1c4>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	f023 020f 	bic.w	r2, r3, #15
 800c4d2:	4965      	ldr	r1, [pc, #404]	; (800c668 <HAL_RCC_ClockConfig+0x1c4>)
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	4313      	orrs	r3, r2
 800c4d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c4da:	4b63      	ldr	r3, [pc, #396]	; (800c668 <HAL_RCC_ClockConfig+0x1c4>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	f003 030f 	and.w	r3, r3, #15
 800c4e2:	683a      	ldr	r2, [r7, #0]
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	d001      	beq.n	800c4ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	e0b8      	b.n	800c65e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f003 0302 	and.w	r3, r3, #2
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d020      	beq.n	800c53a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	f003 0304 	and.w	r3, r3, #4
 800c500:	2b00      	cmp	r3, #0
 800c502:	d005      	beq.n	800c510 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c504:	4b59      	ldr	r3, [pc, #356]	; (800c66c <HAL_RCC_ClockConfig+0x1c8>)
 800c506:	689b      	ldr	r3, [r3, #8]
 800c508:	4a58      	ldr	r2, [pc, #352]	; (800c66c <HAL_RCC_ClockConfig+0x1c8>)
 800c50a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c50e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	f003 0308 	and.w	r3, r3, #8
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d005      	beq.n	800c528 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c51c:	4b53      	ldr	r3, [pc, #332]	; (800c66c <HAL_RCC_ClockConfig+0x1c8>)
 800c51e:	689b      	ldr	r3, [r3, #8]
 800c520:	4a52      	ldr	r2, [pc, #328]	; (800c66c <HAL_RCC_ClockConfig+0x1c8>)
 800c522:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c526:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c528:	4b50      	ldr	r3, [pc, #320]	; (800c66c <HAL_RCC_ClockConfig+0x1c8>)
 800c52a:	689b      	ldr	r3, [r3, #8]
 800c52c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	689b      	ldr	r3, [r3, #8]
 800c534:	494d      	ldr	r1, [pc, #308]	; (800c66c <HAL_RCC_ClockConfig+0x1c8>)
 800c536:	4313      	orrs	r3, r2
 800c538:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	f003 0301 	and.w	r3, r3, #1
 800c542:	2b00      	cmp	r3, #0
 800c544:	d040      	beq.n	800c5c8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	685b      	ldr	r3, [r3, #4]
 800c54a:	2b01      	cmp	r3, #1
 800c54c:	d107      	bne.n	800c55e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c54e:	4b47      	ldr	r3, [pc, #284]	; (800c66c <HAL_RCC_ClockConfig+0x1c8>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c556:	2b00      	cmp	r3, #0
 800c558:	d115      	bne.n	800c586 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c55a:	2301      	movs	r3, #1
 800c55c:	e07f      	b.n	800c65e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	685b      	ldr	r3, [r3, #4]
 800c562:	2b02      	cmp	r3, #2
 800c564:	d107      	bne.n	800c576 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c566:	4b41      	ldr	r3, [pc, #260]	; (800c66c <HAL_RCC_ClockConfig+0x1c8>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d109      	bne.n	800c586 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c572:	2301      	movs	r3, #1
 800c574:	e073      	b.n	800c65e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c576:	4b3d      	ldr	r3, [pc, #244]	; (800c66c <HAL_RCC_ClockConfig+0x1c8>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	f003 0302 	and.w	r3, r3, #2
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d101      	bne.n	800c586 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c582:	2301      	movs	r3, #1
 800c584:	e06b      	b.n	800c65e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c586:	4b39      	ldr	r3, [pc, #228]	; (800c66c <HAL_RCC_ClockConfig+0x1c8>)
 800c588:	689b      	ldr	r3, [r3, #8]
 800c58a:	f023 0203 	bic.w	r2, r3, #3
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	685b      	ldr	r3, [r3, #4]
 800c592:	4936      	ldr	r1, [pc, #216]	; (800c66c <HAL_RCC_ClockConfig+0x1c8>)
 800c594:	4313      	orrs	r3, r2
 800c596:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c598:	f7fb ffba 	bl	8008510 <HAL_GetTick>
 800c59c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c59e:	e00a      	b.n	800c5b6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c5a0:	f7fb ffb6 	bl	8008510 <HAL_GetTick>
 800c5a4:	4602      	mov	r2, r0
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	1ad3      	subs	r3, r2, r3
 800c5aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5ae:	4293      	cmp	r3, r2
 800c5b0:	d901      	bls.n	800c5b6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800c5b2:	2303      	movs	r3, #3
 800c5b4:	e053      	b.n	800c65e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c5b6:	4b2d      	ldr	r3, [pc, #180]	; (800c66c <HAL_RCC_ClockConfig+0x1c8>)
 800c5b8:	689b      	ldr	r3, [r3, #8]
 800c5ba:	f003 020c 	and.w	r2, r3, #12
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	685b      	ldr	r3, [r3, #4]
 800c5c2:	009b      	lsls	r3, r3, #2
 800c5c4:	429a      	cmp	r2, r3
 800c5c6:	d1eb      	bne.n	800c5a0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c5c8:	4b27      	ldr	r3, [pc, #156]	; (800c668 <HAL_RCC_ClockConfig+0x1c4>)
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f003 030f 	and.w	r3, r3, #15
 800c5d0:	683a      	ldr	r2, [r7, #0]
 800c5d2:	429a      	cmp	r2, r3
 800c5d4:	d210      	bcs.n	800c5f8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c5d6:	4b24      	ldr	r3, [pc, #144]	; (800c668 <HAL_RCC_ClockConfig+0x1c4>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	f023 020f 	bic.w	r2, r3, #15
 800c5de:	4922      	ldr	r1, [pc, #136]	; (800c668 <HAL_RCC_ClockConfig+0x1c4>)
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	4313      	orrs	r3, r2
 800c5e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c5e6:	4b20      	ldr	r3, [pc, #128]	; (800c668 <HAL_RCC_ClockConfig+0x1c4>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	f003 030f 	and.w	r3, r3, #15
 800c5ee:	683a      	ldr	r2, [r7, #0]
 800c5f0:	429a      	cmp	r2, r3
 800c5f2:	d001      	beq.n	800c5f8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	e032      	b.n	800c65e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	f003 0304 	and.w	r3, r3, #4
 800c600:	2b00      	cmp	r3, #0
 800c602:	d008      	beq.n	800c616 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c604:	4b19      	ldr	r3, [pc, #100]	; (800c66c <HAL_RCC_ClockConfig+0x1c8>)
 800c606:	689b      	ldr	r3, [r3, #8]
 800c608:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	68db      	ldr	r3, [r3, #12]
 800c610:	4916      	ldr	r1, [pc, #88]	; (800c66c <HAL_RCC_ClockConfig+0x1c8>)
 800c612:	4313      	orrs	r3, r2
 800c614:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	f003 0308 	and.w	r3, r3, #8
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d009      	beq.n	800c636 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800c622:	4b12      	ldr	r3, [pc, #72]	; (800c66c <HAL_RCC_ClockConfig+0x1c8>)
 800c624:	689b      	ldr	r3, [r3, #8]
 800c626:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	691b      	ldr	r3, [r3, #16]
 800c62e:	00db      	lsls	r3, r3, #3
 800c630:	490e      	ldr	r1, [pc, #56]	; (800c66c <HAL_RCC_ClockConfig+0x1c8>)
 800c632:	4313      	orrs	r3, r2
 800c634:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c636:	f000 f821 	bl	800c67c <HAL_RCC_GetSysClockFreq>
 800c63a:	4602      	mov	r2, r0
 800c63c:	4b0b      	ldr	r3, [pc, #44]	; (800c66c <HAL_RCC_ClockConfig+0x1c8>)
 800c63e:	689b      	ldr	r3, [r3, #8]
 800c640:	091b      	lsrs	r3, r3, #4
 800c642:	f003 030f 	and.w	r3, r3, #15
 800c646:	490a      	ldr	r1, [pc, #40]	; (800c670 <HAL_RCC_ClockConfig+0x1cc>)
 800c648:	5ccb      	ldrb	r3, [r1, r3]
 800c64a:	fa22 f303 	lsr.w	r3, r2, r3
 800c64e:	4a09      	ldr	r2, [pc, #36]	; (800c674 <HAL_RCC_ClockConfig+0x1d0>)
 800c650:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800c652:	4b09      	ldr	r3, [pc, #36]	; (800c678 <HAL_RCC_ClockConfig+0x1d4>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	4618      	mov	r0, r3
 800c658:	f7fb ff16 	bl	8008488 <HAL_InitTick>

  return HAL_OK;
 800c65c:	2300      	movs	r3, #0
}
 800c65e:	4618      	mov	r0, r3
 800c660:	3710      	adds	r7, #16
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}
 800c666:	bf00      	nop
 800c668:	40023c00 	.word	0x40023c00
 800c66c:	40023800 	.word	0x40023800
 800c670:	0801b2a8 	.word	0x0801b2a8
 800c674:	20000104 	.word	0x20000104
 800c678:	20000114 	.word	0x20000114

0800c67c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c67c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c680:	b090      	sub	sp, #64	; 0x40
 800c682:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800c684:	2300      	movs	r3, #0
 800c686:	637b      	str	r3, [r7, #52]	; 0x34
 800c688:	2300      	movs	r3, #0
 800c68a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c68c:	2300      	movs	r3, #0
 800c68e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800c690:	2300      	movs	r3, #0
 800c692:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c694:	4b59      	ldr	r3, [pc, #356]	; (800c7fc <HAL_RCC_GetSysClockFreq+0x180>)
 800c696:	689b      	ldr	r3, [r3, #8]
 800c698:	f003 030c 	and.w	r3, r3, #12
 800c69c:	2b08      	cmp	r3, #8
 800c69e:	d00d      	beq.n	800c6bc <HAL_RCC_GetSysClockFreq+0x40>
 800c6a0:	2b08      	cmp	r3, #8
 800c6a2:	f200 80a1 	bhi.w	800c7e8 <HAL_RCC_GetSysClockFreq+0x16c>
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d002      	beq.n	800c6b0 <HAL_RCC_GetSysClockFreq+0x34>
 800c6aa:	2b04      	cmp	r3, #4
 800c6ac:	d003      	beq.n	800c6b6 <HAL_RCC_GetSysClockFreq+0x3a>
 800c6ae:	e09b      	b.n	800c7e8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c6b0:	4b53      	ldr	r3, [pc, #332]	; (800c800 <HAL_RCC_GetSysClockFreq+0x184>)
 800c6b2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800c6b4:	e09b      	b.n	800c7ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c6b6:	4b53      	ldr	r3, [pc, #332]	; (800c804 <HAL_RCC_GetSysClockFreq+0x188>)
 800c6b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800c6ba:	e098      	b.n	800c7ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c6bc:	4b4f      	ldr	r3, [pc, #316]	; (800c7fc <HAL_RCC_GetSysClockFreq+0x180>)
 800c6be:	685b      	ldr	r3, [r3, #4]
 800c6c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c6c4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800c6c6:	4b4d      	ldr	r3, [pc, #308]	; (800c7fc <HAL_RCC_GetSysClockFreq+0x180>)
 800c6c8:	685b      	ldr	r3, [r3, #4]
 800c6ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d028      	beq.n	800c724 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c6d2:	4b4a      	ldr	r3, [pc, #296]	; (800c7fc <HAL_RCC_GetSysClockFreq+0x180>)
 800c6d4:	685b      	ldr	r3, [r3, #4]
 800c6d6:	099b      	lsrs	r3, r3, #6
 800c6d8:	2200      	movs	r2, #0
 800c6da:	623b      	str	r3, [r7, #32]
 800c6dc:	627a      	str	r2, [r7, #36]	; 0x24
 800c6de:	6a3b      	ldr	r3, [r7, #32]
 800c6e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800c6e4:	2100      	movs	r1, #0
 800c6e6:	4b47      	ldr	r3, [pc, #284]	; (800c804 <HAL_RCC_GetSysClockFreq+0x188>)
 800c6e8:	fb03 f201 	mul.w	r2, r3, r1
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	fb00 f303 	mul.w	r3, r0, r3
 800c6f2:	4413      	add	r3, r2
 800c6f4:	4a43      	ldr	r2, [pc, #268]	; (800c804 <HAL_RCC_GetSysClockFreq+0x188>)
 800c6f6:	fba0 1202 	umull	r1, r2, r0, r2
 800c6fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c6fc:	460a      	mov	r2, r1
 800c6fe:	62ba      	str	r2, [r7, #40]	; 0x28
 800c700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c702:	4413      	add	r3, r2
 800c704:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c708:	2200      	movs	r2, #0
 800c70a:	61bb      	str	r3, [r7, #24]
 800c70c:	61fa      	str	r2, [r7, #28]
 800c70e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c712:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800c716:	f7f3 ffa7 	bl	8000668 <__aeabi_uldivmod>
 800c71a:	4602      	mov	r2, r0
 800c71c:	460b      	mov	r3, r1
 800c71e:	4613      	mov	r3, r2
 800c720:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c722:	e053      	b.n	800c7cc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c724:	4b35      	ldr	r3, [pc, #212]	; (800c7fc <HAL_RCC_GetSysClockFreq+0x180>)
 800c726:	685b      	ldr	r3, [r3, #4]
 800c728:	099b      	lsrs	r3, r3, #6
 800c72a:	2200      	movs	r2, #0
 800c72c:	613b      	str	r3, [r7, #16]
 800c72e:	617a      	str	r2, [r7, #20]
 800c730:	693b      	ldr	r3, [r7, #16]
 800c732:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800c736:	f04f 0b00 	mov.w	fp, #0
 800c73a:	4652      	mov	r2, sl
 800c73c:	465b      	mov	r3, fp
 800c73e:	f04f 0000 	mov.w	r0, #0
 800c742:	f04f 0100 	mov.w	r1, #0
 800c746:	0159      	lsls	r1, r3, #5
 800c748:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c74c:	0150      	lsls	r0, r2, #5
 800c74e:	4602      	mov	r2, r0
 800c750:	460b      	mov	r3, r1
 800c752:	ebb2 080a 	subs.w	r8, r2, sl
 800c756:	eb63 090b 	sbc.w	r9, r3, fp
 800c75a:	f04f 0200 	mov.w	r2, #0
 800c75e:	f04f 0300 	mov.w	r3, #0
 800c762:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800c766:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800c76a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800c76e:	ebb2 0408 	subs.w	r4, r2, r8
 800c772:	eb63 0509 	sbc.w	r5, r3, r9
 800c776:	f04f 0200 	mov.w	r2, #0
 800c77a:	f04f 0300 	mov.w	r3, #0
 800c77e:	00eb      	lsls	r3, r5, #3
 800c780:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c784:	00e2      	lsls	r2, r4, #3
 800c786:	4614      	mov	r4, r2
 800c788:	461d      	mov	r5, r3
 800c78a:	eb14 030a 	adds.w	r3, r4, sl
 800c78e:	603b      	str	r3, [r7, #0]
 800c790:	eb45 030b 	adc.w	r3, r5, fp
 800c794:	607b      	str	r3, [r7, #4]
 800c796:	f04f 0200 	mov.w	r2, #0
 800c79a:	f04f 0300 	mov.w	r3, #0
 800c79e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c7a2:	4629      	mov	r1, r5
 800c7a4:	028b      	lsls	r3, r1, #10
 800c7a6:	4621      	mov	r1, r4
 800c7a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c7ac:	4621      	mov	r1, r4
 800c7ae:	028a      	lsls	r2, r1, #10
 800c7b0:	4610      	mov	r0, r2
 800c7b2:	4619      	mov	r1, r3
 800c7b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	60bb      	str	r3, [r7, #8]
 800c7ba:	60fa      	str	r2, [r7, #12]
 800c7bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c7c0:	f7f3 ff52 	bl	8000668 <__aeabi_uldivmod>
 800c7c4:	4602      	mov	r2, r0
 800c7c6:	460b      	mov	r3, r1
 800c7c8:	4613      	mov	r3, r2
 800c7ca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800c7cc:	4b0b      	ldr	r3, [pc, #44]	; (800c7fc <HAL_RCC_GetSysClockFreq+0x180>)
 800c7ce:	685b      	ldr	r3, [r3, #4]
 800c7d0:	0c1b      	lsrs	r3, r3, #16
 800c7d2:	f003 0303 	and.w	r3, r3, #3
 800c7d6:	3301      	adds	r3, #1
 800c7d8:	005b      	lsls	r3, r3, #1
 800c7da:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800c7dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800c7e6:	e002      	b.n	800c7ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c7e8:	4b05      	ldr	r3, [pc, #20]	; (800c800 <HAL_RCC_GetSysClockFreq+0x184>)
 800c7ea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800c7ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	3740      	adds	r7, #64	; 0x40
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c7fa:	bf00      	nop
 800c7fc:	40023800 	.word	0x40023800
 800c800:	00f42400 	.word	0x00f42400
 800c804:	017d7840 	.word	0x017d7840

0800c808 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c808:	b480      	push	{r7}
 800c80a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c80c:	4b03      	ldr	r3, [pc, #12]	; (800c81c <HAL_RCC_GetHCLKFreq+0x14>)
 800c80e:	681b      	ldr	r3, [r3, #0]
}
 800c810:	4618      	mov	r0, r3
 800c812:	46bd      	mov	sp, r7
 800c814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c818:	4770      	bx	lr
 800c81a:	bf00      	nop
 800c81c:	20000104 	.word	0x20000104

0800c820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c824:	f7ff fff0 	bl	800c808 <HAL_RCC_GetHCLKFreq>
 800c828:	4602      	mov	r2, r0
 800c82a:	4b05      	ldr	r3, [pc, #20]	; (800c840 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c82c:	689b      	ldr	r3, [r3, #8]
 800c82e:	0a9b      	lsrs	r3, r3, #10
 800c830:	f003 0307 	and.w	r3, r3, #7
 800c834:	4903      	ldr	r1, [pc, #12]	; (800c844 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c836:	5ccb      	ldrb	r3, [r1, r3]
 800c838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c83c:	4618      	mov	r0, r3
 800c83e:	bd80      	pop	{r7, pc}
 800c840:	40023800 	.word	0x40023800
 800c844:	0801b2b8 	.word	0x0801b2b8

0800c848 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c84c:	f7ff ffdc 	bl	800c808 <HAL_RCC_GetHCLKFreq>
 800c850:	4602      	mov	r2, r0
 800c852:	4b05      	ldr	r3, [pc, #20]	; (800c868 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c854:	689b      	ldr	r3, [r3, #8]
 800c856:	0b5b      	lsrs	r3, r3, #13
 800c858:	f003 0307 	and.w	r3, r3, #7
 800c85c:	4903      	ldr	r1, [pc, #12]	; (800c86c <HAL_RCC_GetPCLK2Freq+0x24>)
 800c85e:	5ccb      	ldrb	r3, [r1, r3]
 800c860:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c864:	4618      	mov	r0, r3
 800c866:	bd80      	pop	{r7, pc}
 800c868:	40023800 	.word	0x40023800
 800c86c:	0801b2b8 	.word	0x0801b2b8

0800c870 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b088      	sub	sp, #32
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800c878:	2300      	movs	r3, #0
 800c87a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800c87c:	2300      	movs	r3, #0
 800c87e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800c880:	2300      	movs	r3, #0
 800c882:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800c884:	2300      	movs	r3, #0
 800c886:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800c888:	2300      	movs	r3, #0
 800c88a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	f003 0301 	and.w	r3, r3, #1
 800c894:	2b00      	cmp	r3, #0
 800c896:	d012      	beq.n	800c8be <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800c898:	4b69      	ldr	r3, [pc, #420]	; (800ca40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c89a:	689b      	ldr	r3, [r3, #8]
 800c89c:	4a68      	ldr	r2, [pc, #416]	; (800ca40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c89e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c8a2:	6093      	str	r3, [r2, #8]
 800c8a4:	4b66      	ldr	r3, [pc, #408]	; (800ca40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c8a6:	689a      	ldr	r2, [r3, #8]
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8ac:	4964      	ldr	r1, [pc, #400]	; (800ca40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c8ae:	4313      	orrs	r3, r2
 800c8b0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d101      	bne.n	800c8be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d017      	beq.n	800c8fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c8ca:	4b5d      	ldr	r3, [pc, #372]	; (800ca40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c8cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8d8:	4959      	ldr	r1, [pc, #356]	; (800ca40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c8da:	4313      	orrs	r3, r2
 800c8dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c8e8:	d101      	bne.n	800c8ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d101      	bne.n	800c8fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c902:	2b00      	cmp	r3, #0
 800c904:	d017      	beq.n	800c936 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800c906:	4b4e      	ldr	r3, [pc, #312]	; (800ca40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c908:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c90c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c914:	494a      	ldr	r1, [pc, #296]	; (800ca40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c916:	4313      	orrs	r3, r2
 800c918:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c920:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c924:	d101      	bne.n	800c92a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800c926:	2301      	movs	r3, #1
 800c928:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d101      	bne.n	800c936 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800c932:	2301      	movs	r3, #1
 800c934:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d001      	beq.n	800c946 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800c942:	2301      	movs	r3, #1
 800c944:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	f003 0320 	and.w	r3, r3, #32
 800c94e:	2b00      	cmp	r3, #0
 800c950:	f000 808b 	beq.w	800ca6a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c954:	4b3a      	ldr	r3, [pc, #232]	; (800ca40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c958:	4a39      	ldr	r2, [pc, #228]	; (800ca40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c95a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c95e:	6413      	str	r3, [r2, #64]	; 0x40
 800c960:	4b37      	ldr	r3, [pc, #220]	; (800ca40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c968:	60bb      	str	r3, [r7, #8]
 800c96a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800c96c:	4b35      	ldr	r3, [pc, #212]	; (800ca44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	4a34      	ldr	r2, [pc, #208]	; (800ca44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c976:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c978:	f7fb fdca 	bl	8008510 <HAL_GetTick>
 800c97c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800c97e:	e008      	b.n	800c992 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c980:	f7fb fdc6 	bl	8008510 <HAL_GetTick>
 800c984:	4602      	mov	r2, r0
 800c986:	697b      	ldr	r3, [r7, #20]
 800c988:	1ad3      	subs	r3, r2, r3
 800c98a:	2b64      	cmp	r3, #100	; 0x64
 800c98c:	d901      	bls.n	800c992 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800c98e:	2303      	movs	r3, #3
 800c990:	e38f      	b.n	800d0b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800c992:	4b2c      	ldr	r3, [pc, #176]	; (800ca44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d0f0      	beq.n	800c980 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c99e:	4b28      	ldr	r3, [pc, #160]	; (800ca40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c9a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c9a6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c9a8:	693b      	ldr	r3, [r7, #16]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d035      	beq.n	800ca1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c9b6:	693a      	ldr	r2, [r7, #16]
 800c9b8:	429a      	cmp	r2, r3
 800c9ba:	d02e      	beq.n	800ca1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c9bc:	4b20      	ldr	r3, [pc, #128]	; (800ca40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c9be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c9c4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c9c6:	4b1e      	ldr	r3, [pc, #120]	; (800ca40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c9c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9ca:	4a1d      	ldr	r2, [pc, #116]	; (800ca40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c9cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c9d0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c9d2:	4b1b      	ldr	r3, [pc, #108]	; (800ca40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c9d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9d6:	4a1a      	ldr	r2, [pc, #104]	; (800ca40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c9d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c9dc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800c9de:	4a18      	ldr	r2, [pc, #96]	; (800ca40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c9e0:	693b      	ldr	r3, [r7, #16]
 800c9e2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c9e4:	4b16      	ldr	r3, [pc, #88]	; (800ca40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c9e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9e8:	f003 0301 	and.w	r3, r3, #1
 800c9ec:	2b01      	cmp	r3, #1
 800c9ee:	d114      	bne.n	800ca1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c9f0:	f7fb fd8e 	bl	8008510 <HAL_GetTick>
 800c9f4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c9f6:	e00a      	b.n	800ca0e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c9f8:	f7fb fd8a 	bl	8008510 <HAL_GetTick>
 800c9fc:	4602      	mov	r2, r0
 800c9fe:	697b      	ldr	r3, [r7, #20]
 800ca00:	1ad3      	subs	r3, r2, r3
 800ca02:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca06:	4293      	cmp	r3, r2
 800ca08:	d901      	bls.n	800ca0e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800ca0a:	2303      	movs	r3, #3
 800ca0c:	e351      	b.n	800d0b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ca0e:	4b0c      	ldr	r3, [pc, #48]	; (800ca40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ca10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca12:	f003 0302 	and.w	r3, r3, #2
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d0ee      	beq.n	800c9f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ca26:	d111      	bne.n	800ca4c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800ca28:	4b05      	ldr	r3, [pc, #20]	; (800ca40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ca2a:	689b      	ldr	r3, [r3, #8]
 800ca2c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ca34:	4b04      	ldr	r3, [pc, #16]	; (800ca48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800ca36:	400b      	ands	r3, r1
 800ca38:	4901      	ldr	r1, [pc, #4]	; (800ca40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ca3a:	4313      	orrs	r3, r2
 800ca3c:	608b      	str	r3, [r1, #8]
 800ca3e:	e00b      	b.n	800ca58 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800ca40:	40023800 	.word	0x40023800
 800ca44:	40007000 	.word	0x40007000
 800ca48:	0ffffcff 	.word	0x0ffffcff
 800ca4c:	4bac      	ldr	r3, [pc, #688]	; (800cd00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ca4e:	689b      	ldr	r3, [r3, #8]
 800ca50:	4aab      	ldr	r2, [pc, #684]	; (800cd00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ca52:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800ca56:	6093      	str	r3, [r2, #8]
 800ca58:	4ba9      	ldr	r3, [pc, #676]	; (800cd00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ca5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ca64:	49a6      	ldr	r1, [pc, #664]	; (800cd00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ca66:	4313      	orrs	r3, r2
 800ca68:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	f003 0310 	and.w	r3, r3, #16
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d010      	beq.n	800ca98 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ca76:	4ba2      	ldr	r3, [pc, #648]	; (800cd00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ca78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca7c:	4aa0      	ldr	r2, [pc, #640]	; (800cd00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ca7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ca82:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800ca86:	4b9e      	ldr	r3, [pc, #632]	; (800cd00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ca88:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca90:	499b      	ldr	r1, [pc, #620]	; (800cd00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ca92:	4313      	orrs	r3, r2
 800ca94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d00a      	beq.n	800caba <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800caa4:	4b96      	ldr	r3, [pc, #600]	; (800cd00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800caa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800caaa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cab2:	4993      	ldr	r1, [pc, #588]	; (800cd00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cab4:	4313      	orrs	r3, r2
 800cab6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d00a      	beq.n	800cadc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800cac6:	4b8e      	ldr	r3, [pc, #568]	; (800cd00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cacc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cad4:	498a      	ldr	r1, [pc, #552]	; (800cd00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cad6:	4313      	orrs	r3, r2
 800cad8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d00a      	beq.n	800cafe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800cae8:	4b85      	ldr	r3, [pc, #532]	; (800cd00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800caea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800caee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800caf6:	4982      	ldr	r1, [pc, #520]	; (800cd00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800caf8:	4313      	orrs	r3, r2
 800cafa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d00a      	beq.n	800cb20 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800cb0a:	4b7d      	ldr	r3, [pc, #500]	; (800cd00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cb0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb10:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb18:	4979      	ldr	r1, [pc, #484]	; (800cd00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cb1a:	4313      	orrs	r3, r2
 800cb1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d00a      	beq.n	800cb42 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800cb2c:	4b74      	ldr	r3, [pc, #464]	; (800cd00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cb2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb32:	f023 0203 	bic.w	r2, r3, #3
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb3a:	4971      	ldr	r1, [pc, #452]	; (800cd00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cb3c:	4313      	orrs	r3, r2
 800cb3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d00a      	beq.n	800cb64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800cb4e:	4b6c      	ldr	r3, [pc, #432]	; (800cd00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cb50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb54:	f023 020c 	bic.w	r2, r3, #12
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb5c:	4968      	ldr	r1, [pc, #416]	; (800cd00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cb5e:	4313      	orrs	r3, r2
 800cb60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d00a      	beq.n	800cb86 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800cb70:	4b63      	ldr	r3, [pc, #396]	; (800cd00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cb72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb76:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb7e:	4960      	ldr	r1, [pc, #384]	; (800cd00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cb80:	4313      	orrs	r3, r2
 800cb82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d00a      	beq.n	800cba8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800cb92:	4b5b      	ldr	r3, [pc, #364]	; (800cd00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cb94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb98:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cba0:	4957      	ldr	r1, [pc, #348]	; (800cd00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cba2:	4313      	orrs	r3, r2
 800cba4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d00a      	beq.n	800cbca <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800cbb4:	4b52      	ldr	r3, [pc, #328]	; (800cd00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cbb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cbba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbc2:	494f      	ldr	r1, [pc, #316]	; (800cd00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cbc4:	4313      	orrs	r3, r2
 800cbc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d00a      	beq.n	800cbec <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800cbd6:	4b4a      	ldr	r3, [pc, #296]	; (800cd00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cbd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cbdc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cbe4:	4946      	ldr	r1, [pc, #280]	; (800cd00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cbe6:	4313      	orrs	r3, r2
 800cbe8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d00a      	beq.n	800cc0e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800cbf8:	4b41      	ldr	r3, [pc, #260]	; (800cd00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cbfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cbfe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc06:	493e      	ldr	r1, [pc, #248]	; (800cd00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cc08:	4313      	orrs	r3, r2
 800cc0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d00a      	beq.n	800cc30 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800cc1a:	4b39      	ldr	r3, [pc, #228]	; (800cd00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cc1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc20:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc28:	4935      	ldr	r1, [pc, #212]	; (800cd00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cc2a:	4313      	orrs	r3, r2
 800cc2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d00a      	beq.n	800cc52 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800cc3c:	4b30      	ldr	r3, [pc, #192]	; (800cd00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cc3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc42:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc4a:	492d      	ldr	r1, [pc, #180]	; (800cd00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cc4c:	4313      	orrs	r3, r2
 800cc4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d011      	beq.n	800cc82 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800cc5e:	4b28      	ldr	r3, [pc, #160]	; (800cd00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cc60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc64:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc6c:	4924      	ldr	r1, [pc, #144]	; (800cd00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cc6e:	4313      	orrs	r3, r2
 800cc70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cc7c:	d101      	bne.n	800cc82 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800cc7e:	2301      	movs	r3, #1
 800cc80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	f003 0308 	and.w	r3, r3, #8
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d001      	beq.n	800cc92 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800cc8e:	2301      	movs	r3, #1
 800cc90:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d00a      	beq.n	800ccb4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cc9e:	4b18      	ldr	r3, [pc, #96]	; (800cd00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cca4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ccac:	4914      	ldr	r1, [pc, #80]	; (800cd00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ccae:	4313      	orrs	r3, r2
 800ccb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d00b      	beq.n	800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800ccc0:	4b0f      	ldr	r3, [pc, #60]	; (800cd00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ccc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ccc6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ccd0:	490b      	ldr	r1, [pc, #44]	; (800cd00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ccd2:	4313      	orrs	r3, r2
 800ccd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d00f      	beq.n	800cd04 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800cce4:	4b06      	ldr	r3, [pc, #24]	; (800cd00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800cce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ccea:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ccf4:	4902      	ldr	r1, [pc, #8]	; (800cd00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ccf6:	4313      	orrs	r3, r2
 800ccf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800ccfc:	e002      	b.n	800cd04 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800ccfe:	bf00      	nop
 800cd00:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d00b      	beq.n	800cd28 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800cd10:	4b8a      	ldr	r3, [pc, #552]	; (800cf3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800cd12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd16:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd20:	4986      	ldr	r1, [pc, #536]	; (800cf3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800cd22:	4313      	orrs	r3, r2
 800cd24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d00b      	beq.n	800cd4c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800cd34:	4b81      	ldr	r3, [pc, #516]	; (800cf3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800cd36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd3a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd44:	497d      	ldr	r1, [pc, #500]	; (800cf3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800cd46:	4313      	orrs	r3, r2
 800cd48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800cd4c:	69fb      	ldr	r3, [r7, #28]
 800cd4e:	2b01      	cmp	r3, #1
 800cd50:	d006      	beq.n	800cd60 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	f000 80d6 	beq.w	800cf0c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800cd60:	4b76      	ldr	r3, [pc, #472]	; (800cf3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	4a75      	ldr	r2, [pc, #468]	; (800cf3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800cd66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cd6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cd6c:	f7fb fbd0 	bl	8008510 <HAL_GetTick>
 800cd70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800cd72:	e008      	b.n	800cd86 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800cd74:	f7fb fbcc 	bl	8008510 <HAL_GetTick>
 800cd78:	4602      	mov	r2, r0
 800cd7a:	697b      	ldr	r3, [r7, #20]
 800cd7c:	1ad3      	subs	r3, r2, r3
 800cd7e:	2b64      	cmp	r3, #100	; 0x64
 800cd80:	d901      	bls.n	800cd86 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800cd82:	2303      	movs	r3, #3
 800cd84:	e195      	b.n	800d0b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800cd86:	4b6d      	ldr	r3, [pc, #436]	; (800cf3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d1f0      	bne.n	800cd74 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	f003 0301 	and.w	r3, r3, #1
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d021      	beq.n	800cde2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d11d      	bne.n	800cde2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800cda6:	4b65      	ldr	r3, [pc, #404]	; (800cf3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800cda8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cdac:	0c1b      	lsrs	r3, r3, #16
 800cdae:	f003 0303 	and.w	r3, r3, #3
 800cdb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800cdb4:	4b61      	ldr	r3, [pc, #388]	; (800cf3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800cdb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cdba:	0e1b      	lsrs	r3, r3, #24
 800cdbc:	f003 030f 	and.w	r3, r3, #15
 800cdc0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	685b      	ldr	r3, [r3, #4]
 800cdc6:	019a      	lsls	r2, r3, #6
 800cdc8:	693b      	ldr	r3, [r7, #16]
 800cdca:	041b      	lsls	r3, r3, #16
 800cdcc:	431a      	orrs	r2, r3
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	061b      	lsls	r3, r3, #24
 800cdd2:	431a      	orrs	r2, r3
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	689b      	ldr	r3, [r3, #8]
 800cdd8:	071b      	lsls	r3, r3, #28
 800cdda:	4958      	ldr	r1, [pc, #352]	; (800cf3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800cddc:	4313      	orrs	r3, r2
 800cdde:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d004      	beq.n	800cdf8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cdf6:	d00a      	beq.n	800ce0e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d02e      	beq.n	800ce62 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ce0c:	d129      	bne.n	800ce62 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800ce0e:	4b4b      	ldr	r3, [pc, #300]	; (800cf3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ce10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce14:	0c1b      	lsrs	r3, r3, #16
 800ce16:	f003 0303 	and.w	r3, r3, #3
 800ce1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800ce1c:	4b47      	ldr	r3, [pc, #284]	; (800cf3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ce1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce22:	0f1b      	lsrs	r3, r3, #28
 800ce24:	f003 0307 	and.w	r3, r3, #7
 800ce28:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	685b      	ldr	r3, [r3, #4]
 800ce2e:	019a      	lsls	r2, r3, #6
 800ce30:	693b      	ldr	r3, [r7, #16]
 800ce32:	041b      	lsls	r3, r3, #16
 800ce34:	431a      	orrs	r2, r3
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	68db      	ldr	r3, [r3, #12]
 800ce3a:	061b      	lsls	r3, r3, #24
 800ce3c:	431a      	orrs	r2, r3
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	071b      	lsls	r3, r3, #28
 800ce42:	493e      	ldr	r1, [pc, #248]	; (800cf3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ce44:	4313      	orrs	r3, r2
 800ce46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800ce4a:	4b3c      	ldr	r3, [pc, #240]	; (800cf3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ce4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce50:	f023 021f 	bic.w	r2, r3, #31
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce58:	3b01      	subs	r3, #1
 800ce5a:	4938      	ldr	r1, [pc, #224]	; (800cf3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ce5c:	4313      	orrs	r3, r2
 800ce5e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d01d      	beq.n	800ceaa <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800ce6e:	4b33      	ldr	r3, [pc, #204]	; (800cf3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ce70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce74:	0e1b      	lsrs	r3, r3, #24
 800ce76:	f003 030f 	and.w	r3, r3, #15
 800ce7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800ce7c:	4b2f      	ldr	r3, [pc, #188]	; (800cf3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ce7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce82:	0f1b      	lsrs	r3, r3, #28
 800ce84:	f003 0307 	and.w	r3, r3, #7
 800ce88:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	685b      	ldr	r3, [r3, #4]
 800ce8e:	019a      	lsls	r2, r3, #6
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	691b      	ldr	r3, [r3, #16]
 800ce94:	041b      	lsls	r3, r3, #16
 800ce96:	431a      	orrs	r2, r3
 800ce98:	693b      	ldr	r3, [r7, #16]
 800ce9a:	061b      	lsls	r3, r3, #24
 800ce9c:	431a      	orrs	r2, r3
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	071b      	lsls	r3, r3, #28
 800cea2:	4926      	ldr	r1, [pc, #152]	; (800cf3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800cea4:	4313      	orrs	r3, r2
 800cea6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d011      	beq.n	800ceda <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	685b      	ldr	r3, [r3, #4]
 800ceba:	019a      	lsls	r2, r3, #6
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	691b      	ldr	r3, [r3, #16]
 800cec0:	041b      	lsls	r3, r3, #16
 800cec2:	431a      	orrs	r2, r3
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	68db      	ldr	r3, [r3, #12]
 800cec8:	061b      	lsls	r3, r3, #24
 800ceca:	431a      	orrs	r2, r3
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	689b      	ldr	r3, [r3, #8]
 800ced0:	071b      	lsls	r3, r3, #28
 800ced2:	491a      	ldr	r1, [pc, #104]	; (800cf3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ced4:	4313      	orrs	r3, r2
 800ced6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800ceda:	4b18      	ldr	r3, [pc, #96]	; (800cf3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	4a17      	ldr	r2, [pc, #92]	; (800cf3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800cee0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cee4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cee6:	f7fb fb13 	bl	8008510 <HAL_GetTick>
 800ceea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ceec:	e008      	b.n	800cf00 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800ceee:	f7fb fb0f 	bl	8008510 <HAL_GetTick>
 800cef2:	4602      	mov	r2, r0
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	1ad3      	subs	r3, r2, r3
 800cef8:	2b64      	cmp	r3, #100	; 0x64
 800cefa:	d901      	bls.n	800cf00 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800cefc:	2303      	movs	r3, #3
 800cefe:	e0d8      	b.n	800d0b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800cf00:	4b0e      	ldr	r3, [pc, #56]	; (800cf3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d0f0      	beq.n	800ceee <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800cf0c:	69bb      	ldr	r3, [r7, #24]
 800cf0e:	2b01      	cmp	r3, #1
 800cf10:	f040 80ce 	bne.w	800d0b0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800cf14:	4b09      	ldr	r3, [pc, #36]	; (800cf3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	4a08      	ldr	r2, [pc, #32]	; (800cf3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800cf1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cf1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cf20:	f7fb faf6 	bl	8008510 <HAL_GetTick>
 800cf24:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800cf26:	e00b      	b.n	800cf40 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800cf28:	f7fb faf2 	bl	8008510 <HAL_GetTick>
 800cf2c:	4602      	mov	r2, r0
 800cf2e:	697b      	ldr	r3, [r7, #20]
 800cf30:	1ad3      	subs	r3, r2, r3
 800cf32:	2b64      	cmp	r3, #100	; 0x64
 800cf34:	d904      	bls.n	800cf40 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800cf36:	2303      	movs	r3, #3
 800cf38:	e0bb      	b.n	800d0b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800cf3a:	bf00      	nop
 800cf3c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800cf40:	4b5e      	ldr	r3, [pc, #376]	; (800d0bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cf48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf4c:	d0ec      	beq.n	800cf28 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d003      	beq.n	800cf62 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d009      	beq.n	800cf76 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d02e      	beq.n	800cfcc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d12a      	bne.n	800cfcc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800cf76:	4b51      	ldr	r3, [pc, #324]	; (800d0bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800cf78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf7c:	0c1b      	lsrs	r3, r3, #16
 800cf7e:	f003 0303 	and.w	r3, r3, #3
 800cf82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800cf84:	4b4d      	ldr	r3, [pc, #308]	; (800d0bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800cf86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf8a:	0f1b      	lsrs	r3, r3, #28
 800cf8c:	f003 0307 	and.w	r3, r3, #7
 800cf90:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	695b      	ldr	r3, [r3, #20]
 800cf96:	019a      	lsls	r2, r3, #6
 800cf98:	693b      	ldr	r3, [r7, #16]
 800cf9a:	041b      	lsls	r3, r3, #16
 800cf9c:	431a      	orrs	r2, r3
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	699b      	ldr	r3, [r3, #24]
 800cfa2:	061b      	lsls	r3, r3, #24
 800cfa4:	431a      	orrs	r2, r3
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	071b      	lsls	r3, r3, #28
 800cfaa:	4944      	ldr	r1, [pc, #272]	; (800d0bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800cfac:	4313      	orrs	r3, r2
 800cfae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800cfb2:	4b42      	ldr	r3, [pc, #264]	; (800d0bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800cfb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cfb8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfc0:	3b01      	subs	r3, #1
 800cfc2:	021b      	lsls	r3, r3, #8
 800cfc4:	493d      	ldr	r1, [pc, #244]	; (800d0bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800cfc6:	4313      	orrs	r3, r2
 800cfc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d022      	beq.n	800d01e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cfdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cfe0:	d11d      	bne.n	800d01e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800cfe2:	4b36      	ldr	r3, [pc, #216]	; (800d0bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800cfe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cfe8:	0e1b      	lsrs	r3, r3, #24
 800cfea:	f003 030f 	and.w	r3, r3, #15
 800cfee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800cff0:	4b32      	ldr	r3, [pc, #200]	; (800d0bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800cff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cff6:	0f1b      	lsrs	r3, r3, #28
 800cff8:	f003 0307 	and.w	r3, r3, #7
 800cffc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	695b      	ldr	r3, [r3, #20]
 800d002:	019a      	lsls	r2, r3, #6
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	6a1b      	ldr	r3, [r3, #32]
 800d008:	041b      	lsls	r3, r3, #16
 800d00a:	431a      	orrs	r2, r3
 800d00c:	693b      	ldr	r3, [r7, #16]
 800d00e:	061b      	lsls	r3, r3, #24
 800d010:	431a      	orrs	r2, r3
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	071b      	lsls	r3, r3, #28
 800d016:	4929      	ldr	r1, [pc, #164]	; (800d0bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800d018:	4313      	orrs	r3, r2
 800d01a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	f003 0308 	and.w	r3, r3, #8
 800d026:	2b00      	cmp	r3, #0
 800d028:	d028      	beq.n	800d07c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d02a:	4b24      	ldr	r3, [pc, #144]	; (800d0bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800d02c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d030:	0e1b      	lsrs	r3, r3, #24
 800d032:	f003 030f 	and.w	r3, r3, #15
 800d036:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d038:	4b20      	ldr	r3, [pc, #128]	; (800d0bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800d03a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d03e:	0c1b      	lsrs	r3, r3, #16
 800d040:	f003 0303 	and.w	r3, r3, #3
 800d044:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	695b      	ldr	r3, [r3, #20]
 800d04a:	019a      	lsls	r2, r3, #6
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	041b      	lsls	r3, r3, #16
 800d050:	431a      	orrs	r2, r3
 800d052:	693b      	ldr	r3, [r7, #16]
 800d054:	061b      	lsls	r3, r3, #24
 800d056:	431a      	orrs	r2, r3
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	69db      	ldr	r3, [r3, #28]
 800d05c:	071b      	lsls	r3, r3, #28
 800d05e:	4917      	ldr	r1, [pc, #92]	; (800d0bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800d060:	4313      	orrs	r3, r2
 800d062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800d066:	4b15      	ldr	r3, [pc, #84]	; (800d0bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800d068:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d06c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d074:	4911      	ldr	r1, [pc, #68]	; (800d0bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800d076:	4313      	orrs	r3, r2
 800d078:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800d07c:	4b0f      	ldr	r3, [pc, #60]	; (800d0bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	4a0e      	ldr	r2, [pc, #56]	; (800d0bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800d082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d086:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d088:	f7fb fa42 	bl	8008510 <HAL_GetTick>
 800d08c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d08e:	e008      	b.n	800d0a2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d090:	f7fb fa3e 	bl	8008510 <HAL_GetTick>
 800d094:	4602      	mov	r2, r0
 800d096:	697b      	ldr	r3, [r7, #20]
 800d098:	1ad3      	subs	r3, r2, r3
 800d09a:	2b64      	cmp	r3, #100	; 0x64
 800d09c:	d901      	bls.n	800d0a2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d09e:	2303      	movs	r3, #3
 800d0a0:	e007      	b.n	800d0b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d0a2:	4b06      	ldr	r3, [pc, #24]	; (800d0bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d0aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d0ae:	d1ef      	bne.n	800d090 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800d0b0:	2300      	movs	r3, #0
}
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	3720      	adds	r7, #32
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bd80      	pop	{r7, pc}
 800d0ba:	bf00      	nop
 800d0bc:	40023800 	.word	0x40023800

0800d0c0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b084      	sub	sp, #16
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d101      	bne.n	800d0d6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800d0d2:	2301      	movs	r3, #1
 800d0d4:	e071      	b.n	800d1ba <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	7f5b      	ldrb	r3, [r3, #29]
 800d0da:	b2db      	uxtb	r3, r3
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d105      	bne.n	800d0ec <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800d0e6:	6878      	ldr	r0, [r7, #4]
 800d0e8:	f7f5 f8f4 	bl	80022d4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2202      	movs	r2, #2
 800d0f0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	68db      	ldr	r3, [r3, #12]
 800d0f8:	f003 0310 	and.w	r3, r3, #16
 800d0fc:	2b10      	cmp	r3, #16
 800d0fe:	d053      	beq.n	800d1a8 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	22ca      	movs	r2, #202	; 0xca
 800d106:	625a      	str	r2, [r3, #36]	; 0x24
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	2253      	movs	r2, #83	; 0x53
 800d10e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800d110:	6878      	ldr	r0, [r7, #4]
 800d112:	f000 f92f 	bl	800d374 <RTC_EnterInitMode>
 800d116:	4603      	mov	r3, r0
 800d118:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800d11a:	7bfb      	ldrb	r3, [r7, #15]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d12a      	bne.n	800d176 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	6899      	ldr	r1, [r3, #8]
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681a      	ldr	r2, [r3, #0]
 800d12a:	4b26      	ldr	r3, [pc, #152]	; (800d1c4 <HAL_RTC_Init+0x104>)
 800d12c:	400b      	ands	r3, r1
 800d12e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	6899      	ldr	r1, [r3, #8]
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	685a      	ldr	r2, [r3, #4]
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	691b      	ldr	r3, [r3, #16]
 800d13e:	431a      	orrs	r2, r3
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	695b      	ldr	r3, [r3, #20]
 800d144:	431a      	orrs	r2, r3
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	430a      	orrs	r2, r1
 800d14c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	687a      	ldr	r2, [r7, #4]
 800d154:	68d2      	ldr	r2, [r2, #12]
 800d156:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	6919      	ldr	r1, [r3, #16]
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	689b      	ldr	r3, [r3, #8]
 800d162:	041a      	lsls	r2, r3, #16
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	430a      	orrs	r2, r1
 800d16a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800d16c:	6878      	ldr	r0, [r7, #4]
 800d16e:	f000 f938 	bl	800d3e2 <RTC_ExitInitMode>
 800d172:	4603      	mov	r3, r0
 800d174:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d176:	7bfb      	ldrb	r3, [r7, #15]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d110      	bne.n	800d19e <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	f022 0208 	bic.w	r2, r2, #8
 800d18a:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	699a      	ldr	r2, [r3, #24]
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	430a      	orrs	r2, r1
 800d19c:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	22ff      	movs	r2, #255	; 0xff
 800d1a4:	625a      	str	r2, [r3, #36]	; 0x24
 800d1a6:	e001      	b.n	800d1ac <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800d1ac:	7bfb      	ldrb	r3, [r7, #15]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d102      	bne.n	800d1b8 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2201      	movs	r2, #1
 800d1b6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800d1b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	3710      	adds	r7, #16
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}
 800d1c2:	bf00      	nop
 800d1c4:	ff8fffbf 	.word	0xff8fffbf

0800d1c8 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b086      	sub	sp, #24
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	60f8      	str	r0, [r7, #12]
 800d1d0:	60b9      	str	r1, [r7, #8]
 800d1d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d1de:	68bb      	ldr	r3, [r7, #8]
 800d1e0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	691b      	ldr	r3, [r3, #16]
 800d1e8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800d1ec:	68bb      	ldr	r3, [r7, #8]
 800d1ee:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	681a      	ldr	r2, [r3, #0]
 800d1f6:	4b22      	ldr	r3, [pc, #136]	; (800d280 <HAL_RTC_GetTime+0xb8>)
 800d1f8:	4013      	ands	r3, r2
 800d1fa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800d1fc:	697b      	ldr	r3, [r7, #20]
 800d1fe:	0c1b      	lsrs	r3, r3, #16
 800d200:	b2db      	uxtb	r3, r3
 800d202:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d206:	b2da      	uxtb	r2, r3
 800d208:	68bb      	ldr	r3, [r7, #8]
 800d20a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800d20c:	697b      	ldr	r3, [r7, #20]
 800d20e:	0a1b      	lsrs	r3, r3, #8
 800d210:	b2db      	uxtb	r3, r3
 800d212:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d216:	b2da      	uxtb	r2, r3
 800d218:	68bb      	ldr	r3, [r7, #8]
 800d21a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800d21c:	697b      	ldr	r3, [r7, #20]
 800d21e:	b2db      	uxtb	r3, r3
 800d220:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d224:	b2da      	uxtb	r2, r3
 800d226:	68bb      	ldr	r3, [r7, #8]
 800d228:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800d22a:	697b      	ldr	r3, [r7, #20]
 800d22c:	0d9b      	lsrs	r3, r3, #22
 800d22e:	b2db      	uxtb	r3, r3
 800d230:	f003 0301 	and.w	r3, r3, #1
 800d234:	b2da      	uxtb	r2, r3
 800d236:	68bb      	ldr	r3, [r7, #8]
 800d238:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d11a      	bne.n	800d276 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800d240:	68bb      	ldr	r3, [r7, #8]
 800d242:	781b      	ldrb	r3, [r3, #0]
 800d244:	4618      	mov	r0, r3
 800d246:	f000 f8f1 	bl	800d42c <RTC_Bcd2ToByte>
 800d24a:	4603      	mov	r3, r0
 800d24c:	461a      	mov	r2, r3
 800d24e:	68bb      	ldr	r3, [r7, #8]
 800d250:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	785b      	ldrb	r3, [r3, #1]
 800d256:	4618      	mov	r0, r3
 800d258:	f000 f8e8 	bl	800d42c <RTC_Bcd2ToByte>
 800d25c:	4603      	mov	r3, r0
 800d25e:	461a      	mov	r2, r3
 800d260:	68bb      	ldr	r3, [r7, #8]
 800d262:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800d264:	68bb      	ldr	r3, [r7, #8]
 800d266:	789b      	ldrb	r3, [r3, #2]
 800d268:	4618      	mov	r0, r3
 800d26a:	f000 f8df 	bl	800d42c <RTC_Bcd2ToByte>
 800d26e:	4603      	mov	r3, r0
 800d270:	461a      	mov	r2, r3
 800d272:	68bb      	ldr	r3, [r7, #8]
 800d274:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800d276:	2300      	movs	r3, #0
}
 800d278:	4618      	mov	r0, r3
 800d27a:	3718      	adds	r7, #24
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}
 800d280:	007f7f7f 	.word	0x007f7f7f

0800d284 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b086      	sub	sp, #24
 800d288:	af00      	add	r7, sp, #0
 800d28a:	60f8      	str	r0, [r7, #12]
 800d28c:	60b9      	str	r1, [r7, #8]
 800d28e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800d290:	2300      	movs	r3, #0
 800d292:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	685a      	ldr	r2, [r3, #4]
 800d29a:	4b21      	ldr	r3, [pc, #132]	; (800d320 <HAL_RTC_GetDate+0x9c>)
 800d29c:	4013      	ands	r3, r2
 800d29e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800d2a0:	697b      	ldr	r3, [r7, #20]
 800d2a2:	0c1b      	lsrs	r3, r3, #16
 800d2a4:	b2da      	uxtb	r2, r3
 800d2a6:	68bb      	ldr	r3, [r7, #8]
 800d2a8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800d2aa:	697b      	ldr	r3, [r7, #20]
 800d2ac:	0a1b      	lsrs	r3, r3, #8
 800d2ae:	b2db      	uxtb	r3, r3
 800d2b0:	f003 031f 	and.w	r3, r3, #31
 800d2b4:	b2da      	uxtb	r2, r3
 800d2b6:	68bb      	ldr	r3, [r7, #8]
 800d2b8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800d2ba:	697b      	ldr	r3, [r7, #20]
 800d2bc:	b2db      	uxtb	r3, r3
 800d2be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d2c2:	b2da      	uxtb	r2, r3
 800d2c4:	68bb      	ldr	r3, [r7, #8]
 800d2c6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800d2c8:	697b      	ldr	r3, [r7, #20]
 800d2ca:	0b5b      	lsrs	r3, r3, #13
 800d2cc:	b2db      	uxtb	r3, r3
 800d2ce:	f003 0307 	and.w	r3, r3, #7
 800d2d2:	b2da      	uxtb	r2, r3
 800d2d4:	68bb      	ldr	r3, [r7, #8]
 800d2d6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d11a      	bne.n	800d314 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800d2de:	68bb      	ldr	r3, [r7, #8]
 800d2e0:	78db      	ldrb	r3, [r3, #3]
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	f000 f8a2 	bl	800d42c <RTC_Bcd2ToByte>
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	461a      	mov	r2, r3
 800d2ec:	68bb      	ldr	r3, [r7, #8]
 800d2ee:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800d2f0:	68bb      	ldr	r3, [r7, #8]
 800d2f2:	785b      	ldrb	r3, [r3, #1]
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	f000 f899 	bl	800d42c <RTC_Bcd2ToByte>
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	461a      	mov	r2, r3
 800d2fe:	68bb      	ldr	r3, [r7, #8]
 800d300:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800d302:	68bb      	ldr	r3, [r7, #8]
 800d304:	789b      	ldrb	r3, [r3, #2]
 800d306:	4618      	mov	r0, r3
 800d308:	f000 f890 	bl	800d42c <RTC_Bcd2ToByte>
 800d30c:	4603      	mov	r3, r0
 800d30e:	461a      	mov	r2, r3
 800d310:	68bb      	ldr	r3, [r7, #8]
 800d312:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800d314:	2300      	movs	r3, #0
}
 800d316:	4618      	mov	r0, r3
 800d318:	3718      	adds	r7, #24
 800d31a:	46bd      	mov	sp, r7
 800d31c:	bd80      	pop	{r7, pc}
 800d31e:	bf00      	nop
 800d320:	00ffff3f 	.word	0x00ffff3f

0800d324 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b084      	sub	sp, #16
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d32c:	2300      	movs	r3, #0
 800d32e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	68da      	ldr	r2, [r3, #12]
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800d33e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d340:	f7fb f8e6 	bl	8008510 <HAL_GetTick>
 800d344:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d346:	e009      	b.n	800d35c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d348:	f7fb f8e2 	bl	8008510 <HAL_GetTick>
 800d34c:	4602      	mov	r2, r0
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	1ad3      	subs	r3, r2, r3
 800d352:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d356:	d901      	bls.n	800d35c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800d358:	2303      	movs	r3, #3
 800d35a:	e007      	b.n	800d36c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	68db      	ldr	r3, [r3, #12]
 800d362:	f003 0320 	and.w	r3, r3, #32
 800d366:	2b00      	cmp	r3, #0
 800d368:	d0ee      	beq.n	800d348 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800d36a:	2300      	movs	r3, #0
}
 800d36c:	4618      	mov	r0, r3
 800d36e:	3710      	adds	r7, #16
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}

0800d374 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b084      	sub	sp, #16
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d37c:	2300      	movs	r3, #0
 800d37e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800d380:	2300      	movs	r3, #0
 800d382:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	68db      	ldr	r3, [r3, #12]
 800d38a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d122      	bne.n	800d3d8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	68da      	ldr	r2, [r3, #12]
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d3a0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d3a2:	f7fb f8b5 	bl	8008510 <HAL_GetTick>
 800d3a6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800d3a8:	e00c      	b.n	800d3c4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d3aa:	f7fb f8b1 	bl	8008510 <HAL_GetTick>
 800d3ae:	4602      	mov	r2, r0
 800d3b0:	68bb      	ldr	r3, [r7, #8]
 800d3b2:	1ad3      	subs	r3, r2, r3
 800d3b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d3b8:	d904      	bls.n	800d3c4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	2204      	movs	r2, #4
 800d3be:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800d3c0:	2301      	movs	r3, #1
 800d3c2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	68db      	ldr	r3, [r3, #12]
 800d3ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d102      	bne.n	800d3d8 <RTC_EnterInitMode+0x64>
 800d3d2:	7bfb      	ldrb	r3, [r7, #15]
 800d3d4:	2b01      	cmp	r3, #1
 800d3d6:	d1e8      	bne.n	800d3aa <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800d3d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3da:	4618      	mov	r0, r3
 800d3dc:	3710      	adds	r7, #16
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}

0800d3e2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800d3e2:	b580      	push	{r7, lr}
 800d3e4:	b084      	sub	sp, #16
 800d3e6:	af00      	add	r7, sp, #0
 800d3e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	68da      	ldr	r2, [r3, #12]
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d3fc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	689b      	ldr	r3, [r3, #8]
 800d404:	f003 0320 	and.w	r3, r3, #32
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d10a      	bne.n	800d422 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d40c:	6878      	ldr	r0, [r7, #4]
 800d40e:	f7ff ff89 	bl	800d324 <HAL_RTC_WaitForSynchro>
 800d412:	4603      	mov	r3, r0
 800d414:	2b00      	cmp	r3, #0
 800d416:	d004      	beq.n	800d422 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	2204      	movs	r2, #4
 800d41c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800d41e:	2301      	movs	r3, #1
 800d420:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800d422:	7bfb      	ldrb	r3, [r7, #15]
}
 800d424:	4618      	mov	r0, r3
 800d426:	3710      	adds	r7, #16
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}

0800d42c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800d42c:	b480      	push	{r7}
 800d42e:	b085      	sub	sp, #20
 800d430:	af00      	add	r7, sp, #0
 800d432:	4603      	mov	r3, r0
 800d434:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800d436:	2300      	movs	r3, #0
 800d438:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800d43a:	79fb      	ldrb	r3, [r7, #7]
 800d43c:	091b      	lsrs	r3, r3, #4
 800d43e:	b2db      	uxtb	r3, r3
 800d440:	461a      	mov	r2, r3
 800d442:	4613      	mov	r3, r2
 800d444:	009b      	lsls	r3, r3, #2
 800d446:	4413      	add	r3, r2
 800d448:	005b      	lsls	r3, r3, #1
 800d44a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	b2da      	uxtb	r2, r3
 800d450:	79fb      	ldrb	r3, [r7, #7]
 800d452:	f003 030f 	and.w	r3, r3, #15
 800d456:	b2db      	uxtb	r3, r3
 800d458:	4413      	add	r3, r2
 800d45a:	b2db      	uxtb	r3, r3
}
 800d45c:	4618      	mov	r0, r3
 800d45e:	3714      	adds	r7, #20
 800d460:	46bd      	mov	sp, r7
 800d462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d466:	4770      	bx	lr

0800d468 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b082      	sub	sp, #8
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d101      	bne.n	800d47a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d476:	2301      	movs	r3, #1
 800d478:	e022      	b.n	800d4c0 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d480:	b2db      	uxtb	r3, r3
 800d482:	2b00      	cmp	r3, #0
 800d484:	d105      	bne.n	800d492 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	2200      	movs	r2, #0
 800d48a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d48c:	6878      	ldr	r0, [r7, #4]
 800d48e:	f7f6 fde1 	bl	8004054 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	2203      	movs	r2, #3
 800d496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	f000 f814 	bl	800d4c8 <HAL_SD_InitCard>
 800d4a0:	4603      	mov	r3, r0
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d001      	beq.n	800d4aa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d4a6:	2301      	movs	r3, #1
 800d4a8:	e00a      	b.n	800d4c0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	2201      	movs	r2, #1
 800d4ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d4be:	2300      	movs	r3, #0
}
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	3708      	adds	r7, #8
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd80      	pop	{r7, pc}

0800d4c8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d4c8:	b5b0      	push	{r4, r5, r7, lr}
 800d4ca:	b08e      	sub	sp, #56	; 0x38
 800d4cc:	af04      	add	r7, sp, #16
 800d4ce:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d4d8:	2300      	movs	r3, #0
 800d4da:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d4dc:	2300      	movs	r3, #0
 800d4de:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800d4e4:	2376      	movs	r3, #118	; 0x76
 800d4e6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681d      	ldr	r5, [r3, #0]
 800d4ec:	466c      	mov	r4, sp
 800d4ee:	f107 0314 	add.w	r3, r7, #20
 800d4f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d4f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d4fa:	f107 0308 	add.w	r3, r7, #8
 800d4fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d500:	4628      	mov	r0, r5
 800d502:	f004 fadf 	bl	8011ac4 <SDMMC_Init>
 800d506:	4603      	mov	r3, r0
 800d508:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800d50c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d510:	2b00      	cmp	r3, #0
 800d512:	d001      	beq.n	800d518 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800d514:	2301      	movs	r3, #1
 800d516:	e059      	b.n	800d5cc <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	685a      	ldr	r2, [r3, #4]
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d526:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	4618      	mov	r0, r3
 800d52e:	f004 fb13 	bl	8011b58 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	685a      	ldr	r2, [r3, #4]
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d540:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800d542:	2002      	movs	r0, #2
 800d544:	f7fa fff0 	bl	8008528 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d548:	6878      	ldr	r0, [r7, #4]
 800d54a:	f000 fff3 	bl	800e534 <SD_PowerON>
 800d54e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d550:	6a3b      	ldr	r3, [r7, #32]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d00b      	beq.n	800d56e <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2201      	movs	r2, #1
 800d55a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d562:	6a3b      	ldr	r3, [r7, #32]
 800d564:	431a      	orrs	r2, r3
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d56a:	2301      	movs	r3, #1
 800d56c:	e02e      	b.n	800d5cc <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d56e:	6878      	ldr	r0, [r7, #4]
 800d570:	f000 ff12 	bl	800e398 <SD_InitCard>
 800d574:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d576:	6a3b      	ldr	r3, [r7, #32]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d00b      	beq.n	800d594 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2201      	movs	r2, #1
 800d580:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d588:	6a3b      	ldr	r3, [r7, #32]
 800d58a:	431a      	orrs	r2, r3
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d590:	2301      	movs	r3, #1
 800d592:	e01b      	b.n	800d5cc <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d59c:	4618      	mov	r0, r3
 800d59e:	f004 fb6d 	bl	8011c7c <SDMMC_CmdBlockLength>
 800d5a2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d5a4:	6a3b      	ldr	r3, [r7, #32]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d00f      	beq.n	800d5ca <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	4a09      	ldr	r2, [pc, #36]	; (800d5d4 <HAL_SD_InitCard+0x10c>)
 800d5b0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d5b6:	6a3b      	ldr	r3, [r7, #32]
 800d5b8:	431a      	orrs	r2, r3
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	2201      	movs	r2, #1
 800d5c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d5c6:	2301      	movs	r3, #1
 800d5c8:	e000      	b.n	800d5cc <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800d5ca:	2300      	movs	r3, #0
}
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	3728      	adds	r7, #40	; 0x28
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bdb0      	pop	{r4, r5, r7, pc}
 800d5d4:	004005ff 	.word	0x004005ff

0800d5d8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b08c      	sub	sp, #48	; 0x30
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	60f8      	str	r0, [r7, #12]
 800d5e0:	60b9      	str	r1, [r7, #8]
 800d5e2:	607a      	str	r2, [r7, #4]
 800d5e4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d5ea:	68bb      	ldr	r3, [r7, #8]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d107      	bne.n	800d600 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5f4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d5fc:	2301      	movs	r3, #1
 800d5fe:	e0c3      	b.n	800d788 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d606:	b2db      	uxtb	r3, r3
 800d608:	2b01      	cmp	r3, #1
 800d60a:	f040 80bc 	bne.w	800d786 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	2200      	movs	r2, #0
 800d612:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d614:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d616:	683b      	ldr	r3, [r7, #0]
 800d618:	441a      	add	r2, r3
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d61e:	429a      	cmp	r2, r3
 800d620:	d907      	bls.n	800d632 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d626:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d62e:	2301      	movs	r3, #1
 800d630:	e0aa      	b.n	800d788 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	2203      	movs	r2, #3
 800d636:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	2200      	movs	r2, #0
 800d640:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d650:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d656:	4a4e      	ldr	r2, [pc, #312]	; (800d790 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800d658:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d65e:	4a4d      	ldr	r2, [pc, #308]	; (800d794 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800d660:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d666:	2200      	movs	r2, #0
 800d668:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d66e:	2200      	movs	r2, #0
 800d670:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d682:	689a      	ldr	r2, [r3, #8]
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	430a      	orrs	r2, r1
 800d68c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	3380      	adds	r3, #128	; 0x80
 800d698:	4619      	mov	r1, r3
 800d69a:	68ba      	ldr	r2, [r7, #8]
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	025b      	lsls	r3, r3, #9
 800d6a0:	089b      	lsrs	r3, r3, #2
 800d6a2:	f7fc fbdf 	bl	8009e64 <HAL_DMA_Start_IT>
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d017      	beq.n	800d6dc <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800d6ba:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	4a35      	ldr	r2, [pc, #212]	; (800d798 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800d6c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6c8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	2201      	movs	r2, #1
 800d6d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d6d8:	2301      	movs	r3, #1
 800d6da:	e055      	b.n	800d788 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	f042 0208 	orr.w	r2, r2, #8
 800d6ea:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6f0:	2b01      	cmp	r3, #1
 800d6f2:	d002      	beq.n	800d6fa <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800d6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6f6:	025b      	lsls	r3, r3, #9
 800d6f8:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d6fa:	f04f 33ff 	mov.w	r3, #4294967295
 800d6fe:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d700:	683b      	ldr	r3, [r7, #0]
 800d702:	025b      	lsls	r3, r3, #9
 800d704:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d706:	2390      	movs	r3, #144	; 0x90
 800d708:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d70a:	2302      	movs	r3, #2
 800d70c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d70e:	2300      	movs	r3, #0
 800d710:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800d712:	2301      	movs	r3, #1
 800d714:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	f107 0210 	add.w	r2, r7, #16
 800d71e:	4611      	mov	r1, r2
 800d720:	4618      	mov	r0, r3
 800d722:	f004 fa7f 	bl	8011c24 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	2b01      	cmp	r3, #1
 800d72a:	d90a      	bls.n	800d742 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	2282      	movs	r2, #130	; 0x82
 800d730:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d738:	4618      	mov	r0, r3
 800d73a:	f004 fae3 	bl	8011d04 <SDMMC_CmdReadMultiBlock>
 800d73e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d740:	e009      	b.n	800d756 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	2281      	movs	r2, #129	; 0x81
 800d746:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d74e:	4618      	mov	r0, r3
 800d750:	f004 fab6 	bl	8011cc0 <SDMMC_CmdReadSingleBlock>
 800d754:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800d756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d012      	beq.n	800d782 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	4a0d      	ldr	r2, [pc, #52]	; (800d798 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800d762:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d76a:	431a      	orrs	r2, r3
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	2201      	movs	r2, #1
 800d774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	2200      	movs	r2, #0
 800d77c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800d77e:	2301      	movs	r3, #1
 800d780:	e002      	b.n	800d788 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800d782:	2300      	movs	r3, #0
 800d784:	e000      	b.n	800d788 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800d786:	2302      	movs	r3, #2
  }
}
 800d788:	4618      	mov	r0, r3
 800d78a:	3730      	adds	r7, #48	; 0x30
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bd80      	pop	{r7, pc}
 800d790:	0800e1a7 	.word	0x0800e1a7
 800d794:	0800e219 	.word	0x0800e219
 800d798:	004005ff 	.word	0x004005ff

0800d79c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b08c      	sub	sp, #48	; 0x30
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	60f8      	str	r0, [r7, #12]
 800d7a4:	60b9      	str	r1, [r7, #8]
 800d7a6:	607a      	str	r2, [r7, #4]
 800d7a8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d7ae:	68bb      	ldr	r3, [r7, #8]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d107      	bne.n	800d7c4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7b8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d7c0:	2301      	movs	r3, #1
 800d7c2:	e0c6      	b.n	800d952 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d7ca:	b2db      	uxtb	r3, r3
 800d7cc:	2b01      	cmp	r3, #1
 800d7ce:	f040 80bf 	bne.w	800d950 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d7d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7da:	683b      	ldr	r3, [r7, #0]
 800d7dc:	441a      	add	r2, r3
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d7e2:	429a      	cmp	r2, r3
 800d7e4:	d907      	bls.n	800d7f6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7ea:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d7f2:	2301      	movs	r3, #1
 800d7f4:	e0ad      	b.n	800d952 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	2203      	movs	r2, #3
 800d7fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	2200      	movs	r2, #0
 800d804:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	f042 021a 	orr.w	r2, r2, #26
 800d814:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d81a:	4a50      	ldr	r2, [pc, #320]	; (800d95c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800d81c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d822:	4a4f      	ldr	r2, [pc, #316]	; (800d960 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800d824:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d82a:	2200      	movs	r2, #0
 800d82c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d832:	2b01      	cmp	r3, #1
 800d834:	d002      	beq.n	800d83c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800d836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d838:	025b      	lsls	r3, r3, #9
 800d83a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d83c:	683b      	ldr	r3, [r7, #0]
 800d83e:	2b01      	cmp	r3, #1
 800d840:	d90a      	bls.n	800d858 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	22a0      	movs	r2, #160	; 0xa0
 800d846:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d84e:	4618      	mov	r0, r3
 800d850:	f004 fa9c 	bl	8011d8c <SDMMC_CmdWriteMultiBlock>
 800d854:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d856:	e009      	b.n	800d86c <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	2290      	movs	r2, #144	; 0x90
 800d85c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d864:	4618      	mov	r0, r3
 800d866:	f004 fa6f 	bl	8011d48 <SDMMC_CmdWriteSingleBlock>
 800d86a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d012      	beq.n	800d898 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	4a3b      	ldr	r2, [pc, #236]	; (800d964 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800d878:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d880:	431a      	orrs	r2, r3
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	2201      	movs	r2, #1
 800d88a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	2200      	movs	r2, #0
 800d892:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d894:	2301      	movs	r3, #1
 800d896:	e05c      	b.n	800d952 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	f042 0208 	orr.w	r2, r2, #8
 800d8a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8ac:	2240      	movs	r2, #64	; 0x40
 800d8ae:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8c0:	689a      	ldr	r2, [r3, #8]
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	430a      	orrs	r2, r1
 800d8ca:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d8d0:	68b9      	ldr	r1, [r7, #8]
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	3380      	adds	r3, #128	; 0x80
 800d8d8:	461a      	mov	r2, r3
 800d8da:	683b      	ldr	r3, [r7, #0]
 800d8dc:	025b      	lsls	r3, r3, #9
 800d8de:	089b      	lsrs	r3, r3, #2
 800d8e0:	f7fc fac0 	bl	8009e64 <HAL_DMA_Start_IT>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d01a      	beq.n	800d920 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	f022 021a 	bic.w	r2, r2, #26
 800d8f8:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	4a19      	ldr	r2, [pc, #100]	; (800d964 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800d900:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d906:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	2201      	movs	r2, #1
 800d912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	2200      	movs	r2, #0
 800d91a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d91c:	2301      	movs	r3, #1
 800d91e:	e018      	b.n	800d952 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d920:	f04f 33ff 	mov.w	r3, #4294967295
 800d924:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	025b      	lsls	r3, r3, #9
 800d92a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d92c:	2390      	movs	r3, #144	; 0x90
 800d92e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d930:	2300      	movs	r3, #0
 800d932:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d934:	2300      	movs	r3, #0
 800d936:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800d938:	2301      	movs	r3, #1
 800d93a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	f107 0210 	add.w	r2, r7, #16
 800d944:	4611      	mov	r1, r2
 800d946:	4618      	mov	r0, r3
 800d948:	f004 f96c 	bl	8011c24 <SDMMC_ConfigData>

      return HAL_OK;
 800d94c:	2300      	movs	r3, #0
 800d94e:	e000      	b.n	800d952 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800d950:	2302      	movs	r3, #2
  }
}
 800d952:	4618      	mov	r0, r3
 800d954:	3730      	adds	r7, #48	; 0x30
 800d956:	46bd      	mov	sp, r7
 800d958:	bd80      	pop	{r7, pc}
 800d95a:	bf00      	nop
 800d95c:	0800e17d 	.word	0x0800e17d
 800d960:	0800e219 	.word	0x0800e219
 800d964:	004005ff 	.word	0x004005ff

0800d968 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b084      	sub	sp, #16
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d974:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d97c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d980:	2b00      	cmp	r3, #0
 800d982:	d008      	beq.n	800d996 <HAL_SD_IRQHandler+0x2e>
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	f003 0308 	and.w	r3, r3, #8
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d003      	beq.n	800d996 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d98e:	6878      	ldr	r0, [r7, #4]
 800d990:	f000 ffef 	bl	800e972 <SD_Read_IT>
 800d994:	e15a      	b.n	800dc4c <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d99c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	f000 808d 	beq.w	800dac0 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d9ae:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681a      	ldr	r2, [r3, #0]
 800d9ba:	4b9a      	ldr	r3, [pc, #616]	; (800dc24 <HAL_SD_IRQHandler+0x2bc>)
 800d9bc:	400b      	ands	r3, r1
 800d9be:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	f022 0201 	bic.w	r2, r2, #1
 800d9ce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	f003 0308 	and.w	r3, r3, #8
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d039      	beq.n	800da4e <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	f003 0302 	and.w	r3, r3, #2
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d104      	bne.n	800d9ee <HAL_SD_IRQHandler+0x86>
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	f003 0320 	and.w	r3, r3, #32
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d011      	beq.n	800da12 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f004 f9ec 	bl	8011dd0 <SDMMC_CmdStopTransfer>
 800d9f8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d9fa:	68bb      	ldr	r3, [r7, #8]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d008      	beq.n	800da12 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da04:	68bb      	ldr	r3, [r7, #8]
 800da06:	431a      	orrs	r2, r3
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800da0c:	6878      	ldr	r0, [r7, #4]
 800da0e:	f000 f921 	bl	800dc54 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	f240 523a 	movw	r2, #1338	; 0x53a
 800da1a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2201      	movs	r2, #1
 800da20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2200      	movs	r2, #0
 800da28:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	f003 0301 	and.w	r3, r3, #1
 800da30:	2b00      	cmp	r3, #0
 800da32:	d104      	bne.n	800da3e <HAL_SD_IRQHandler+0xd6>
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	f003 0302 	and.w	r3, r3, #2
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d003      	beq.n	800da46 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800da3e:	6878      	ldr	r0, [r7, #4]
 800da40:	f005 f86c 	bl	8012b1c <HAL_SD_RxCpltCallback>
 800da44:	e102      	b.n	800dc4c <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800da46:	6878      	ldr	r0, [r7, #4]
 800da48:	f005 f85e 	bl	8012b08 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800da4c:	e0fe      	b.n	800dc4c <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da54:	2b00      	cmp	r3, #0
 800da56:	f000 80f9 	beq.w	800dc4c <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	f003 0320 	and.w	r3, r3, #32
 800da60:	2b00      	cmp	r3, #0
 800da62:	d011      	beq.n	800da88 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	4618      	mov	r0, r3
 800da6a:	f004 f9b1 	bl	8011dd0 <SDMMC_CmdStopTransfer>
 800da6e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d008      	beq.n	800da88 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da7a:	68bb      	ldr	r3, [r7, #8]
 800da7c:	431a      	orrs	r2, r3
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	f000 f8e6 	bl	800dc54 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	f003 0301 	and.w	r3, r3, #1
 800da8e:	2b00      	cmp	r3, #0
 800da90:	f040 80dc 	bne.w	800dc4c <HAL_SD_IRQHandler+0x2e4>
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	f003 0302 	and.w	r3, r3, #2
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	f040 80d6 	bne.w	800dc4c <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	f022 0208 	bic.w	r2, r2, #8
 800daae:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2201      	movs	r2, #1
 800dab4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800dab8:	6878      	ldr	r0, [r7, #4]
 800daba:	f005 f825 	bl	8012b08 <HAL_SD_TxCpltCallback>
}
 800dabe:	e0c5      	b.n	800dc4c <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d008      	beq.n	800dae0 <HAL_SD_IRQHandler+0x178>
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	f003 0308 	and.w	r3, r3, #8
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d003      	beq.n	800dae0 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 800dad8:	6878      	ldr	r0, [r7, #4]
 800dada:	f000 ff9b 	bl	800ea14 <SD_Write_IT>
 800dade:	e0b5      	b.n	800dc4c <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dae6:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800daea:	2b00      	cmp	r3, #0
 800daec:	f000 80ae 	beq.w	800dc4c <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800daf6:	f003 0302 	and.w	r3, r3, #2
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d005      	beq.n	800db0a <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db02:	f043 0202 	orr.w	r2, r3, #2
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db10:	f003 0308 	and.w	r3, r3, #8
 800db14:	2b00      	cmp	r3, #0
 800db16:	d005      	beq.n	800db24 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db1c:	f043 0208 	orr.w	r2, r3, #8
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db2a:	f003 0320 	and.w	r3, r3, #32
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d005      	beq.n	800db3e <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db36:	f043 0220 	orr.w	r2, r3, #32
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db44:	f003 0310 	and.w	r3, r3, #16
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d005      	beq.n	800db58 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db50:	f043 0210 	orr.w	r2, r3, #16
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	f240 523a 	movw	r2, #1338	; 0x53a
 800db60:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800db70:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	4618      	mov	r0, r3
 800db78:	f004 f92a 	bl	8011dd0 <SDMMC_CmdStopTransfer>
 800db7c:	4602      	mov	r2, r0
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db82:	431a      	orrs	r2, r3
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	f003 0308 	and.w	r3, r3, #8
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d00a      	beq.n	800dba8 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	2201      	movs	r2, #1
 800db96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	2200      	movs	r2, #0
 800db9e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800dba0:	6878      	ldr	r0, [r7, #4]
 800dba2:	f000 f857 	bl	800dc54 <HAL_SD_ErrorCallback>
}
 800dba6:	e051      	b.n	800dc4c <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d04c      	beq.n	800dc4c <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	f003 0310 	and.w	r3, r3, #16
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d104      	bne.n	800dbc6 <HAL_SD_IRQHandler+0x25e>
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	f003 0320 	and.w	r3, r3, #32
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d011      	beq.n	800dbea <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbca:	4a17      	ldr	r2, [pc, #92]	; (800dc28 <HAL_SD_IRQHandler+0x2c0>)
 800dbcc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f7fc fa16 	bl	800a004 <HAL_DMA_Abort_IT>
 800dbd8:	4603      	mov	r3, r0
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d036      	beq.n	800dc4c <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f000 fb6a 	bl	800e2bc <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800dbe8:	e030      	b.n	800dc4c <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	f003 0301 	and.w	r3, r3, #1
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d104      	bne.n	800dbfe <HAL_SD_IRQHandler+0x296>
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	f003 0302 	and.w	r3, r3, #2
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d018      	beq.n	800dc30 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc02:	4a0a      	ldr	r2, [pc, #40]	; (800dc2c <HAL_SD_IRQHandler+0x2c4>)
 800dc04:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f7fc f9fa 	bl	800a004 <HAL_DMA_Abort_IT>
 800dc10:	4603      	mov	r3, r0
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d01a      	beq.n	800dc4c <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	f000 fb85 	bl	800e32a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800dc20:	e014      	b.n	800dc4c <HAL_SD_IRQHandler+0x2e4>
 800dc22:	bf00      	nop
 800dc24:	ffff3ec5 	.word	0xffff3ec5
 800dc28:	0800e2bd 	.word	0x0800e2bd
 800dc2c:	0800e32b 	.word	0x0800e32b
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2200      	movs	r2, #0
 800dc34:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	2201      	movs	r2, #1
 800dc3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2200      	movs	r2, #0
 800dc42:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800dc44:	6878      	ldr	r0, [r7, #4]
 800dc46:	f004 ff55 	bl	8012af4 <HAL_SD_AbortCallback>
}
 800dc4a:	e7ff      	b.n	800dc4c <HAL_SD_IRQHandler+0x2e4>
 800dc4c:	bf00      	nop
 800dc4e:	3710      	adds	r7, #16
 800dc50:	46bd      	mov	sp, r7
 800dc52:	bd80      	pop	{r7, pc}

0800dc54 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800dc54:	b480      	push	{r7}
 800dc56:	b083      	sub	sp, #12
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800dc5c:	bf00      	nop
 800dc5e:	370c      	adds	r7, #12
 800dc60:	46bd      	mov	sp, r7
 800dc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc66:	4770      	bx	lr

0800dc68 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800dc68:	b480      	push	{r7}
 800dc6a:	b083      	sub	sp, #12
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
 800dc70:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc76:	0f9b      	lsrs	r3, r3, #30
 800dc78:	b2da      	uxtb	r2, r3
 800dc7a:	683b      	ldr	r3, [r7, #0]
 800dc7c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc82:	0e9b      	lsrs	r3, r3, #26
 800dc84:	b2db      	uxtb	r3, r3
 800dc86:	f003 030f 	and.w	r3, r3, #15
 800dc8a:	b2da      	uxtb	r2, r3
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc94:	0e1b      	lsrs	r3, r3, #24
 800dc96:	b2db      	uxtb	r3, r3
 800dc98:	f003 0303 	and.w	r3, r3, #3
 800dc9c:	b2da      	uxtb	r2, r3
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dca6:	0c1b      	lsrs	r3, r3, #16
 800dca8:	b2da      	uxtb	r2, r3
 800dcaa:	683b      	ldr	r3, [r7, #0]
 800dcac:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dcb2:	0a1b      	lsrs	r3, r3, #8
 800dcb4:	b2da      	uxtb	r2, r3
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dcbe:	b2da      	uxtb	r2, r3
 800dcc0:	683b      	ldr	r3, [r7, #0]
 800dcc2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dcc8:	0d1b      	lsrs	r3, r3, #20
 800dcca:	b29a      	uxth	r2, r3
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dcd4:	0c1b      	lsrs	r3, r3, #16
 800dcd6:	b2db      	uxtb	r3, r3
 800dcd8:	f003 030f 	and.w	r3, r3, #15
 800dcdc:	b2da      	uxtb	r2, r3
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dce6:	0bdb      	lsrs	r3, r3, #15
 800dce8:	b2db      	uxtb	r3, r3
 800dcea:	f003 0301 	and.w	r3, r3, #1
 800dcee:	b2da      	uxtb	r2, r3
 800dcf0:	683b      	ldr	r3, [r7, #0]
 800dcf2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dcf8:	0b9b      	lsrs	r3, r3, #14
 800dcfa:	b2db      	uxtb	r3, r3
 800dcfc:	f003 0301 	and.w	r3, r3, #1
 800dd00:	b2da      	uxtb	r2, r3
 800dd02:	683b      	ldr	r3, [r7, #0]
 800dd04:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd0a:	0b5b      	lsrs	r3, r3, #13
 800dd0c:	b2db      	uxtb	r3, r3
 800dd0e:	f003 0301 	and.w	r3, r3, #1
 800dd12:	b2da      	uxtb	r2, r3
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd1c:	0b1b      	lsrs	r3, r3, #12
 800dd1e:	b2db      	uxtb	r3, r3
 800dd20:	f003 0301 	and.w	r3, r3, #1
 800dd24:	b2da      	uxtb	r2, r3
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d163      	bne.n	800de00 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd3c:	009a      	lsls	r2, r3, #2
 800dd3e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800dd42:	4013      	ands	r3, r2
 800dd44:	687a      	ldr	r2, [r7, #4]
 800dd46:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800dd48:	0f92      	lsrs	r2, r2, #30
 800dd4a:	431a      	orrs	r2, r3
 800dd4c:	683b      	ldr	r3, [r7, #0]
 800dd4e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd54:	0edb      	lsrs	r3, r3, #27
 800dd56:	b2db      	uxtb	r3, r3
 800dd58:	f003 0307 	and.w	r3, r3, #7
 800dd5c:	b2da      	uxtb	r2, r3
 800dd5e:	683b      	ldr	r3, [r7, #0]
 800dd60:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd66:	0e1b      	lsrs	r3, r3, #24
 800dd68:	b2db      	uxtb	r3, r3
 800dd6a:	f003 0307 	and.w	r3, r3, #7
 800dd6e:	b2da      	uxtb	r2, r3
 800dd70:	683b      	ldr	r3, [r7, #0]
 800dd72:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd78:	0d5b      	lsrs	r3, r3, #21
 800dd7a:	b2db      	uxtb	r3, r3
 800dd7c:	f003 0307 	and.w	r3, r3, #7
 800dd80:	b2da      	uxtb	r2, r3
 800dd82:	683b      	ldr	r3, [r7, #0]
 800dd84:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd8a:	0c9b      	lsrs	r3, r3, #18
 800dd8c:	b2db      	uxtb	r3, r3
 800dd8e:	f003 0307 	and.w	r3, r3, #7
 800dd92:	b2da      	uxtb	r2, r3
 800dd94:	683b      	ldr	r3, [r7, #0]
 800dd96:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd9c:	0bdb      	lsrs	r3, r3, #15
 800dd9e:	b2db      	uxtb	r3, r3
 800dda0:	f003 0307 	and.w	r3, r3, #7
 800dda4:	b2da      	uxtb	r2, r3
 800dda6:	683b      	ldr	r3, [r7, #0]
 800dda8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ddaa:	683b      	ldr	r3, [r7, #0]
 800ddac:	691b      	ldr	r3, [r3, #16]
 800ddae:	1c5a      	adds	r2, r3, #1
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	7e1b      	ldrb	r3, [r3, #24]
 800ddb8:	b2db      	uxtb	r3, r3
 800ddba:	f003 0307 	and.w	r3, r3, #7
 800ddbe:	3302      	adds	r3, #2
 800ddc0:	2201      	movs	r2, #1
 800ddc2:	fa02 f303 	lsl.w	r3, r2, r3
 800ddc6:	687a      	ldr	r2, [r7, #4]
 800ddc8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800ddca:	fb03 f202 	mul.w	r2, r3, r2
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ddd2:	683b      	ldr	r3, [r7, #0]
 800ddd4:	7a1b      	ldrb	r3, [r3, #8]
 800ddd6:	b2db      	uxtb	r3, r3
 800ddd8:	f003 030f 	and.w	r3, r3, #15
 800dddc:	2201      	movs	r2, #1
 800ddde:	409a      	lsls	r2, r3
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dde8:	687a      	ldr	r2, [r7, #4]
 800ddea:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800ddec:	0a52      	lsrs	r2, r2, #9
 800ddee:	fb03 f202 	mul.w	r2, r3, r2
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ddfc:	661a      	str	r2, [r3, #96]	; 0x60
 800ddfe:	e031      	b.n	800de64 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de04:	2b01      	cmp	r3, #1
 800de06:	d11d      	bne.n	800de44 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800de0c:	041b      	lsls	r3, r3, #16
 800de0e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de16:	0c1b      	lsrs	r3, r3, #16
 800de18:	431a      	orrs	r2, r3
 800de1a:	683b      	ldr	r3, [r7, #0]
 800de1c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800de1e:	683b      	ldr	r3, [r7, #0]
 800de20:	691b      	ldr	r3, [r3, #16]
 800de22:	3301      	adds	r3, #1
 800de24:	029a      	lsls	r2, r3, #10
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	f44f 7200 	mov.w	r2, #512	; 0x200
 800de38:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	661a      	str	r2, [r3, #96]	; 0x60
 800de42:	e00f      	b.n	800de64 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	4a58      	ldr	r2, [pc, #352]	; (800dfac <HAL_SD_GetCardCSD+0x344>)
 800de4a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de50:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	2201      	movs	r2, #1
 800de5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800de60:	2301      	movs	r3, #1
 800de62:	e09d      	b.n	800dfa0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de68:	0b9b      	lsrs	r3, r3, #14
 800de6a:	b2db      	uxtb	r3, r3
 800de6c:	f003 0301 	and.w	r3, r3, #1
 800de70:	b2da      	uxtb	r2, r3
 800de72:	683b      	ldr	r3, [r7, #0]
 800de74:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de7a:	09db      	lsrs	r3, r3, #7
 800de7c:	b2db      	uxtb	r3, r3
 800de7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de82:	b2da      	uxtb	r2, r3
 800de84:	683b      	ldr	r3, [r7, #0]
 800de86:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de8c:	b2db      	uxtb	r3, r3
 800de8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de92:	b2da      	uxtb	r2, r3
 800de94:	683b      	ldr	r3, [r7, #0]
 800de96:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de9c:	0fdb      	lsrs	r3, r3, #31
 800de9e:	b2da      	uxtb	r2, r3
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dea8:	0f5b      	lsrs	r3, r3, #29
 800deaa:	b2db      	uxtb	r3, r3
 800deac:	f003 0303 	and.w	r3, r3, #3
 800deb0:	b2da      	uxtb	r2, r3
 800deb2:	683b      	ldr	r3, [r7, #0]
 800deb4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800deba:	0e9b      	lsrs	r3, r3, #26
 800debc:	b2db      	uxtb	r3, r3
 800debe:	f003 0307 	and.w	r3, r3, #7
 800dec2:	b2da      	uxtb	r2, r3
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800decc:	0d9b      	lsrs	r3, r3, #22
 800dece:	b2db      	uxtb	r3, r3
 800ded0:	f003 030f 	and.w	r3, r3, #15
 800ded4:	b2da      	uxtb	r2, r3
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dede:	0d5b      	lsrs	r3, r3, #21
 800dee0:	b2db      	uxtb	r3, r3
 800dee2:	f003 0301 	and.w	r3, r3, #1
 800dee6:	b2da      	uxtb	r2, r3
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800deee:	683b      	ldr	r3, [r7, #0]
 800def0:	2200      	movs	r2, #0
 800def2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800defa:	0c1b      	lsrs	r3, r3, #16
 800defc:	b2db      	uxtb	r3, r3
 800defe:	f003 0301 	and.w	r3, r3, #1
 800df02:	b2da      	uxtb	r2, r3
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df0e:	0bdb      	lsrs	r3, r3, #15
 800df10:	b2db      	uxtb	r3, r3
 800df12:	f003 0301 	and.w	r3, r3, #1
 800df16:	b2da      	uxtb	r2, r3
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df22:	0b9b      	lsrs	r3, r3, #14
 800df24:	b2db      	uxtb	r3, r3
 800df26:	f003 0301 	and.w	r3, r3, #1
 800df2a:	b2da      	uxtb	r2, r3
 800df2c:	683b      	ldr	r3, [r7, #0]
 800df2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df36:	0b5b      	lsrs	r3, r3, #13
 800df38:	b2db      	uxtb	r3, r3
 800df3a:	f003 0301 	and.w	r3, r3, #1
 800df3e:	b2da      	uxtb	r2, r3
 800df40:	683b      	ldr	r3, [r7, #0]
 800df42:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df4a:	0b1b      	lsrs	r3, r3, #12
 800df4c:	b2db      	uxtb	r3, r3
 800df4e:	f003 0301 	and.w	r3, r3, #1
 800df52:	b2da      	uxtb	r2, r3
 800df54:	683b      	ldr	r3, [r7, #0]
 800df56:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df5e:	0a9b      	lsrs	r3, r3, #10
 800df60:	b2db      	uxtb	r3, r3
 800df62:	f003 0303 	and.w	r3, r3, #3
 800df66:	b2da      	uxtb	r2, r3
 800df68:	683b      	ldr	r3, [r7, #0]
 800df6a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df72:	0a1b      	lsrs	r3, r3, #8
 800df74:	b2db      	uxtb	r3, r3
 800df76:	f003 0303 	and.w	r3, r3, #3
 800df7a:	b2da      	uxtb	r2, r3
 800df7c:	683b      	ldr	r3, [r7, #0]
 800df7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df86:	085b      	lsrs	r3, r3, #1
 800df88:	b2db      	uxtb	r3, r3
 800df8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df8e:	b2da      	uxtb	r2, r3
 800df90:	683b      	ldr	r3, [r7, #0]
 800df92:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800df96:	683b      	ldr	r3, [r7, #0]
 800df98:	2201      	movs	r2, #1
 800df9a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800df9e:	2300      	movs	r3, #0
}
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	370c      	adds	r7, #12
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfaa:	4770      	bx	lr
 800dfac:	004005ff 	.word	0x004005ff

0800dfb0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800dfb0:	b480      	push	{r7}
 800dfb2:	b083      	sub	sp, #12
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
 800dfb8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dfc6:	683b      	ldr	r3, [r7, #0]
 800dfc8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dfce:	683b      	ldr	r3, [r7, #0]
 800dfd0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dfd6:	683b      	ldr	r3, [r7, #0]
 800dfd8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dfde:	683b      	ldr	r3, [r7, #0]
 800dfe0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dfe6:	683b      	ldr	r3, [r7, #0]
 800dfe8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800dff6:	683b      	ldr	r3, [r7, #0]
 800dff8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800dffa:	2300      	movs	r3, #0
}
 800dffc:	4618      	mov	r0, r3
 800dffe:	370c      	adds	r7, #12
 800e000:	46bd      	mov	sp, r7
 800e002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e006:	4770      	bx	lr

0800e008 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800e008:	b5b0      	push	{r4, r5, r7, lr}
 800e00a:	b08e      	sub	sp, #56	; 0x38
 800e00c:	af04      	add	r7, sp, #16
 800e00e:	6078      	str	r0, [r7, #4]
 800e010:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800e012:	2300      	movs	r3, #0
 800e014:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	2203      	movs	r2, #3
 800e01c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e024:	2b03      	cmp	r3, #3
 800e026:	d02e      	beq.n	800e086 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e02e:	d106      	bne.n	800e03e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e034:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	639a      	str	r2, [r3, #56]	; 0x38
 800e03c:	e029      	b.n	800e092 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800e03e:	683b      	ldr	r3, [r7, #0]
 800e040:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e044:	d10a      	bne.n	800e05c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800e046:	6878      	ldr	r0, [r7, #4]
 800e048:	f000 fb2a 	bl	800e6a0 <SD_WideBus_Enable>
 800e04c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e052:	6a3b      	ldr	r3, [r7, #32]
 800e054:	431a      	orrs	r2, r3
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	639a      	str	r2, [r3, #56]	; 0x38
 800e05a:	e01a      	b.n	800e092 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800e05c:	683b      	ldr	r3, [r7, #0]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d10a      	bne.n	800e078 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800e062:	6878      	ldr	r0, [r7, #4]
 800e064:	f000 fb67 	bl	800e736 <SD_WideBus_Disable>
 800e068:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e06e:	6a3b      	ldr	r3, [r7, #32]
 800e070:	431a      	orrs	r2, r3
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	639a      	str	r2, [r3, #56]	; 0x38
 800e076:	e00c      	b.n	800e092 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e07c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	639a      	str	r2, [r3, #56]	; 0x38
 800e084:	e005      	b.n	800e092 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e08a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e096:	2b00      	cmp	r3, #0
 800e098:	d00b      	beq.n	800e0b2 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	4a26      	ldr	r2, [pc, #152]	; (800e138 <HAL_SD_ConfigWideBusOperation+0x130>)
 800e0a0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	2201      	movs	r2, #1
 800e0a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800e0aa:	2301      	movs	r3, #1
 800e0ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e0b0:	e01f      	b.n	800e0f2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	685b      	ldr	r3, [r3, #4]
 800e0b6:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	689b      	ldr	r3, [r3, #8]
 800e0bc:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	68db      	ldr	r3, [r3, #12]
 800e0c2:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	695b      	ldr	r3, [r3, #20]
 800e0cc:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	699b      	ldr	r3, [r3, #24]
 800e0d2:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681d      	ldr	r5, [r3, #0]
 800e0d8:	466c      	mov	r4, sp
 800e0da:	f107 0314 	add.w	r3, r7, #20
 800e0de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e0e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e0e6:	f107 0308 	add.w	r3, r7, #8
 800e0ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e0ec:	4628      	mov	r0, r5
 800e0ee:	f003 fce9 	bl	8011ac4 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f003 fdbe 	bl	8011c7c <SDMMC_CmdBlockLength>
 800e100:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e102:	6a3b      	ldr	r3, [r7, #32]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d00c      	beq.n	800e122 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	4a0a      	ldr	r2, [pc, #40]	; (800e138 <HAL_SD_ConfigWideBusOperation+0x130>)
 800e10e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e114:	6a3b      	ldr	r3, [r7, #32]
 800e116:	431a      	orrs	r2, r3
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800e11c:	2301      	movs	r3, #1
 800e11e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	2201      	movs	r2, #1
 800e126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800e12a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e12e:	4618      	mov	r0, r3
 800e130:	3728      	adds	r7, #40	; 0x28
 800e132:	46bd      	mov	sp, r7
 800e134:	bdb0      	pop	{r4, r5, r7, pc}
 800e136:	bf00      	nop
 800e138:	004005ff 	.word	0x004005ff

0800e13c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b086      	sub	sp, #24
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800e144:	2300      	movs	r3, #0
 800e146:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800e148:	f107 030c 	add.w	r3, r7, #12
 800e14c:	4619      	mov	r1, r3
 800e14e:	6878      	ldr	r0, [r7, #4]
 800e150:	f000 fa7e 	bl	800e650 <SD_SendStatus>
 800e154:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e156:	697b      	ldr	r3, [r7, #20]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d005      	beq.n	800e168 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e160:	697b      	ldr	r3, [r7, #20]
 800e162:	431a      	orrs	r2, r3
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	0a5b      	lsrs	r3, r3, #9
 800e16c:	f003 030f 	and.w	r3, r3, #15
 800e170:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e172:	693b      	ldr	r3, [r7, #16]
}
 800e174:	4618      	mov	r0, r3
 800e176:	3718      	adds	r7, #24
 800e178:	46bd      	mov	sp, r7
 800e17a:	bd80      	pop	{r7, pc}

0800e17c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e17c:	b480      	push	{r7}
 800e17e:	b085      	sub	sp, #20
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e188:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e198:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800e19a:	bf00      	nop
 800e19c:	3714      	adds	r7, #20
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a4:	4770      	bx	lr

0800e1a6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e1a6:	b580      	push	{r7, lr}
 800e1a8:	b084      	sub	sp, #16
 800e1aa:	af00      	add	r7, sp, #0
 800e1ac:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1b2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1b8:	2b82      	cmp	r3, #130	; 0x82
 800e1ba:	d111      	bne.n	800e1e0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	f003 fe05 	bl	8011dd0 <SDMMC_CmdStopTransfer>
 800e1c6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e1c8:	68bb      	ldr	r3, [r7, #8]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d008      	beq.n	800e1e0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e1d2:	68bb      	ldr	r3, [r7, #8]
 800e1d4:	431a      	orrs	r2, r3
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800e1da:	68f8      	ldr	r0, [r7, #12]
 800e1dc:	f7ff fd3a 	bl	800dc54 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	f022 0208 	bic.w	r2, r2, #8
 800e1ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	f240 523a 	movw	r2, #1338	; 0x53a
 800e1f8:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	2201      	movs	r2, #1
 800e1fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	2200      	movs	r2, #0
 800e206:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800e208:	68f8      	ldr	r0, [r7, #12]
 800e20a:	f004 fc87 	bl	8012b1c <HAL_SD_RxCpltCallback>
#endif
}
 800e20e:	bf00      	nop
 800e210:	3710      	adds	r7, #16
 800e212:	46bd      	mov	sp, r7
 800e214:	bd80      	pop	{r7, pc}
	...

0800e218 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b086      	sub	sp, #24
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e224:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800e226:	6878      	ldr	r0, [r7, #4]
 800e228:	f7fc f898 	bl	800a35c <HAL_DMA_GetError>
 800e22c:	4603      	mov	r3, r0
 800e22e:	2b02      	cmp	r3, #2
 800e230:	d03e      	beq.n	800e2b0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800e232:	697b      	ldr	r3, [r7, #20]
 800e234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e238:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800e23a:	697b      	ldr	r3, [r7, #20]
 800e23c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e23e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e240:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800e242:	693b      	ldr	r3, [r7, #16]
 800e244:	2b01      	cmp	r3, #1
 800e246:	d002      	beq.n	800e24e <SD_DMAError+0x36>
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	2b01      	cmp	r3, #1
 800e24c:	d12d      	bne.n	800e2aa <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e24e:	697b      	ldr	r3, [r7, #20]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	4a19      	ldr	r2, [pc, #100]	; (800e2b8 <SD_DMAError+0xa0>)
 800e254:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800e256:	697b      	ldr	r3, [r7, #20]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e25c:	697b      	ldr	r3, [r7, #20]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800e264:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800e266:	697b      	ldr	r3, [r7, #20]
 800e268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e26a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e26e:	697b      	ldr	r3, [r7, #20]
 800e270:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800e272:	6978      	ldr	r0, [r7, #20]
 800e274:	f7ff ff62 	bl	800e13c <HAL_SD_GetCardState>
 800e278:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800e27a:	68bb      	ldr	r3, [r7, #8]
 800e27c:	2b06      	cmp	r3, #6
 800e27e:	d002      	beq.n	800e286 <SD_DMAError+0x6e>
 800e280:	68bb      	ldr	r3, [r7, #8]
 800e282:	2b05      	cmp	r3, #5
 800e284:	d10a      	bne.n	800e29c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e286:	697b      	ldr	r3, [r7, #20]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	4618      	mov	r0, r3
 800e28c:	f003 fda0 	bl	8011dd0 <SDMMC_CmdStopTransfer>
 800e290:	4602      	mov	r2, r0
 800e292:	697b      	ldr	r3, [r7, #20]
 800e294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e296:	431a      	orrs	r2, r3
 800e298:	697b      	ldr	r3, [r7, #20]
 800e29a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800e29c:	697b      	ldr	r3, [r7, #20]
 800e29e:	2201      	movs	r2, #1
 800e2a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e2a4:	697b      	ldr	r3, [r7, #20]
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800e2aa:	6978      	ldr	r0, [r7, #20]
 800e2ac:	f7ff fcd2 	bl	800dc54 <HAL_SD_ErrorCallback>
#endif
  }
}
 800e2b0:	bf00      	nop
 800e2b2:	3718      	adds	r7, #24
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	bd80      	pop	{r7, pc}
 800e2b8:	004005ff 	.word	0x004005ff

0800e2bc <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b084      	sub	sp, #16
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2c8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	f240 523a 	movw	r2, #1338	; 0x53a
 800e2d2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800e2d4:	68f8      	ldr	r0, [r7, #12]
 800e2d6:	f7ff ff31 	bl	800e13c <HAL_SD_GetCardState>
 800e2da:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	2201      	movs	r2, #1
 800e2e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800e2ea:	68bb      	ldr	r3, [r7, #8]
 800e2ec:	2b06      	cmp	r3, #6
 800e2ee:	d002      	beq.n	800e2f6 <SD_DMATxAbort+0x3a>
 800e2f0:	68bb      	ldr	r3, [r7, #8]
 800e2f2:	2b05      	cmp	r3, #5
 800e2f4:	d10a      	bne.n	800e30c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	f003 fd68 	bl	8011dd0 <SDMMC_CmdStopTransfer>
 800e300:	4602      	mov	r2, r0
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e306:	431a      	orrs	r2, r3
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e310:	2b00      	cmp	r3, #0
 800e312:	d103      	bne.n	800e31c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800e314:	68f8      	ldr	r0, [r7, #12]
 800e316:	f004 fbed 	bl	8012af4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800e31a:	e002      	b.n	800e322 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800e31c:	68f8      	ldr	r0, [r7, #12]
 800e31e:	f7ff fc99 	bl	800dc54 <HAL_SD_ErrorCallback>
}
 800e322:	bf00      	nop
 800e324:	3710      	adds	r7, #16
 800e326:	46bd      	mov	sp, r7
 800e328:	bd80      	pop	{r7, pc}

0800e32a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800e32a:	b580      	push	{r7, lr}
 800e32c:	b084      	sub	sp, #16
 800e32e:	af00      	add	r7, sp, #0
 800e330:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e336:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	f240 523a 	movw	r2, #1338	; 0x53a
 800e340:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800e342:	68f8      	ldr	r0, [r7, #12]
 800e344:	f7ff fefa 	bl	800e13c <HAL_SD_GetCardState>
 800e348:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	2201      	movs	r2, #1
 800e34e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	2200      	movs	r2, #0
 800e356:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800e358:	68bb      	ldr	r3, [r7, #8]
 800e35a:	2b06      	cmp	r3, #6
 800e35c:	d002      	beq.n	800e364 <SD_DMARxAbort+0x3a>
 800e35e:	68bb      	ldr	r3, [r7, #8]
 800e360:	2b05      	cmp	r3, #5
 800e362:	d10a      	bne.n	800e37a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	4618      	mov	r0, r3
 800e36a:	f003 fd31 	bl	8011dd0 <SDMMC_CmdStopTransfer>
 800e36e:	4602      	mov	r2, r0
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e374:	431a      	orrs	r2, r3
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d103      	bne.n	800e38a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800e382:	68f8      	ldr	r0, [r7, #12]
 800e384:	f004 fbb6 	bl	8012af4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800e388:	e002      	b.n	800e390 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800e38a:	68f8      	ldr	r0, [r7, #12]
 800e38c:	f7ff fc62 	bl	800dc54 <HAL_SD_ErrorCallback>
}
 800e390:	bf00      	nop
 800e392:	3710      	adds	r7, #16
 800e394:	46bd      	mov	sp, r7
 800e396:	bd80      	pop	{r7, pc}

0800e398 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e398:	b5b0      	push	{r4, r5, r7, lr}
 800e39a:	b094      	sub	sp, #80	; 0x50
 800e39c:	af04      	add	r7, sp, #16
 800e39e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800e3a0:	2301      	movs	r3, #1
 800e3a2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	f003 fbe3 	bl	8011b74 <SDMMC_GetPowerState>
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d102      	bne.n	800e3ba <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e3b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e3b8:	e0b8      	b.n	800e52c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3be:	2b03      	cmp	r3, #3
 800e3c0:	d02f      	beq.n	800e422 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f003 fe0d 	bl	8011fe6 <SDMMC_CmdSendCID>
 800e3cc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e3ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d001      	beq.n	800e3d8 <SD_InitCard+0x40>
    {
      return errorstate;
 800e3d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3d6:	e0a9      	b.n	800e52c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	2100      	movs	r1, #0
 800e3de:	4618      	mov	r0, r3
 800e3e0:	f003 fc0d 	bl	8011bfe <SDMMC_GetResponse>
 800e3e4:	4602      	mov	r2, r0
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	2104      	movs	r1, #4
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	f003 fc04 	bl	8011bfe <SDMMC_GetResponse>
 800e3f6:	4602      	mov	r2, r0
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	2108      	movs	r1, #8
 800e402:	4618      	mov	r0, r3
 800e404:	f003 fbfb 	bl	8011bfe <SDMMC_GetResponse>
 800e408:	4602      	mov	r2, r0
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	210c      	movs	r1, #12
 800e414:	4618      	mov	r0, r3
 800e416:	f003 fbf2 	bl	8011bfe <SDMMC_GetResponse>
 800e41a:	4602      	mov	r2, r0
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e426:	2b03      	cmp	r3, #3
 800e428:	d00d      	beq.n	800e446 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	f107 020e 	add.w	r2, r7, #14
 800e432:	4611      	mov	r1, r2
 800e434:	4618      	mov	r0, r3
 800e436:	f003 fe13 	bl	8012060 <SDMMC_CmdSetRelAdd>
 800e43a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e43c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d001      	beq.n	800e446 <SD_InitCard+0xae>
    {
      return errorstate;
 800e442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e444:	e072      	b.n	800e52c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e44a:	2b03      	cmp	r3, #3
 800e44c:	d036      	beq.n	800e4bc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e44e:	89fb      	ldrh	r3, [r7, #14]
 800e450:	461a      	mov	r2, r3
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681a      	ldr	r2, [r3, #0]
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e45e:	041b      	lsls	r3, r3, #16
 800e460:	4619      	mov	r1, r3
 800e462:	4610      	mov	r0, r2
 800e464:	f003 fddd 	bl	8012022 <SDMMC_CmdSendCSD>
 800e468:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e46a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d001      	beq.n	800e474 <SD_InitCard+0xdc>
    {
      return errorstate;
 800e470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e472:	e05b      	b.n	800e52c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	2100      	movs	r1, #0
 800e47a:	4618      	mov	r0, r3
 800e47c:	f003 fbbf 	bl	8011bfe <SDMMC_GetResponse>
 800e480:	4602      	mov	r2, r0
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	2104      	movs	r1, #4
 800e48c:	4618      	mov	r0, r3
 800e48e:	f003 fbb6 	bl	8011bfe <SDMMC_GetResponse>
 800e492:	4602      	mov	r2, r0
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	2108      	movs	r1, #8
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f003 fbad 	bl	8011bfe <SDMMC_GetResponse>
 800e4a4:	4602      	mov	r2, r0
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	210c      	movs	r1, #12
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	f003 fba4 	bl	8011bfe <SDMMC_GetResponse>
 800e4b6:	4602      	mov	r2, r0
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	2104      	movs	r1, #4
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	f003 fb9b 	bl	8011bfe <SDMMC_GetResponse>
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	0d1a      	lsrs	r2, r3, #20
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e4d0:	f107 0310 	add.w	r3, r7, #16
 800e4d4:	4619      	mov	r1, r3
 800e4d6:	6878      	ldr	r0, [r7, #4]
 800e4d8:	f7ff fbc6 	bl	800dc68 <HAL_SD_GetCardCSD>
 800e4dc:	4603      	mov	r3, r0
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d002      	beq.n	800e4e8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e4e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e4e6:	e021      	b.n	800e52c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	6819      	ldr	r1, [r3, #0]
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e4f0:	041b      	lsls	r3, r3, #16
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	461c      	mov	r4, r3
 800e4f6:	4615      	mov	r5, r2
 800e4f8:	4622      	mov	r2, r4
 800e4fa:	462b      	mov	r3, r5
 800e4fc:	4608      	mov	r0, r1
 800e4fe:	f003 fc89 	bl	8011e14 <SDMMC_CmdSelDesel>
 800e502:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800e504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e506:	2b00      	cmp	r3, #0
 800e508:	d001      	beq.n	800e50e <SD_InitCard+0x176>
  {
    return errorstate;
 800e50a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e50c:	e00e      	b.n	800e52c <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681d      	ldr	r5, [r3, #0]
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	466c      	mov	r4, sp
 800e516:	f103 0210 	add.w	r2, r3, #16
 800e51a:	ca07      	ldmia	r2, {r0, r1, r2}
 800e51c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e520:	3304      	adds	r3, #4
 800e522:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e524:	4628      	mov	r0, r5
 800e526:	f003 facd 	bl	8011ac4 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e52a:	2300      	movs	r3, #0
}
 800e52c:	4618      	mov	r0, r3
 800e52e:	3740      	adds	r7, #64	; 0x40
 800e530:	46bd      	mov	sp, r7
 800e532:	bdb0      	pop	{r4, r5, r7, pc}

0800e534 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b086      	sub	sp, #24
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e53c:	2300      	movs	r3, #0
 800e53e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800e540:	2300      	movs	r3, #0
 800e542:	617b      	str	r3, [r7, #20]
 800e544:	2300      	movs	r3, #0
 800e546:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	4618      	mov	r0, r3
 800e54e:	f003 fc84 	bl	8011e5a <SDMMC_CmdGoIdleState>
 800e552:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d001      	beq.n	800e55e <SD_PowerON+0x2a>
  {
    return errorstate;
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	e072      	b.n	800e644 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	4618      	mov	r0, r3
 800e564:	f003 fc97 	bl	8011e96 <SDMMC_CmdOperCond>
 800e568:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d00d      	beq.n	800e58c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2200      	movs	r2, #0
 800e574:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	4618      	mov	r0, r3
 800e57c:	f003 fc6d 	bl	8011e5a <SDMMC_CmdGoIdleState>
 800e580:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d004      	beq.n	800e592 <SD_PowerON+0x5e>
    {
      return errorstate;
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	e05b      	b.n	800e644 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	2201      	movs	r2, #1
 800e590:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e596:	2b01      	cmp	r3, #1
 800e598:	d137      	bne.n	800e60a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	2100      	movs	r1, #0
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	f003 fc97 	bl	8011ed4 <SDMMC_CmdAppCommand>
 800e5a6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d02d      	beq.n	800e60a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e5ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e5b2:	e047      	b.n	800e644 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	2100      	movs	r1, #0
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	f003 fc8a 	bl	8011ed4 <SDMMC_CmdAppCommand>
 800e5c0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d001      	beq.n	800e5cc <SD_PowerON+0x98>
    {
      return errorstate;
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	e03b      	b.n	800e644 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	491e      	ldr	r1, [pc, #120]	; (800e64c <SD_PowerON+0x118>)
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	f003 fca0 	bl	8011f18 <SDMMC_CmdAppOperCommand>
 800e5d8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d002      	beq.n	800e5e6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e5e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e5e4:	e02e      	b.n	800e644 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	2100      	movs	r1, #0
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	f003 fb06 	bl	8011bfe <SDMMC_GetResponse>
 800e5f2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e5f4:	697b      	ldr	r3, [r7, #20]
 800e5f6:	0fdb      	lsrs	r3, r3, #31
 800e5f8:	2b01      	cmp	r3, #1
 800e5fa:	d101      	bne.n	800e600 <SD_PowerON+0xcc>
 800e5fc:	2301      	movs	r3, #1
 800e5fe:	e000      	b.n	800e602 <SD_PowerON+0xce>
 800e600:	2300      	movs	r3, #0
 800e602:	613b      	str	r3, [r7, #16]

    count++;
 800e604:	68bb      	ldr	r3, [r7, #8]
 800e606:	3301      	adds	r3, #1
 800e608:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e60a:	68bb      	ldr	r3, [r7, #8]
 800e60c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e610:	4293      	cmp	r3, r2
 800e612:	d802      	bhi.n	800e61a <SD_PowerON+0xe6>
 800e614:	693b      	ldr	r3, [r7, #16]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d0cc      	beq.n	800e5b4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800e61a:	68bb      	ldr	r3, [r7, #8]
 800e61c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e620:	4293      	cmp	r3, r2
 800e622:	d902      	bls.n	800e62a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e624:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e628:	e00c      	b.n	800e644 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800e62a:	697b      	ldr	r3, [r7, #20]
 800e62c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e630:	2b00      	cmp	r3, #0
 800e632:	d003      	beq.n	800e63c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	2201      	movs	r2, #1
 800e638:	645a      	str	r2, [r3, #68]	; 0x44
 800e63a:	e002      	b.n	800e642 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	2200      	movs	r2, #0
 800e640:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800e642:	2300      	movs	r3, #0
}
 800e644:	4618      	mov	r0, r3
 800e646:	3718      	adds	r7, #24
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd80      	pop	{r7, pc}
 800e64c:	c1100000 	.word	0xc1100000

0800e650 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b084      	sub	sp, #16
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
 800e658:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d102      	bne.n	800e666 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e660:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e664:	e018      	b.n	800e698 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681a      	ldr	r2, [r3, #0]
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e66e:	041b      	lsls	r3, r3, #16
 800e670:	4619      	mov	r1, r3
 800e672:	4610      	mov	r0, r2
 800e674:	f003 fd15 	bl	80120a2 <SDMMC_CmdSendStatus>
 800e678:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d001      	beq.n	800e684 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	e009      	b.n	800e698 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	2100      	movs	r1, #0
 800e68a:	4618      	mov	r0, r3
 800e68c:	f003 fab7 	bl	8011bfe <SDMMC_GetResponse>
 800e690:	4602      	mov	r2, r0
 800e692:	683b      	ldr	r3, [r7, #0]
 800e694:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e696:	2300      	movs	r3, #0
}
 800e698:	4618      	mov	r0, r3
 800e69a:	3710      	adds	r7, #16
 800e69c:	46bd      	mov	sp, r7
 800e69e:	bd80      	pop	{r7, pc}

0800e6a0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b086      	sub	sp, #24
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	60fb      	str	r3, [r7, #12]
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	2100      	movs	r1, #0
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	f003 faa1 	bl	8011bfe <SDMMC_GetResponse>
 800e6bc:	4603      	mov	r3, r0
 800e6be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e6c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e6c6:	d102      	bne.n	800e6ce <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e6c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e6cc:	e02f      	b.n	800e72e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e6ce:	f107 030c 	add.w	r3, r7, #12
 800e6d2:	4619      	mov	r1, r3
 800e6d4:	6878      	ldr	r0, [r7, #4]
 800e6d6:	f000 f879 	bl	800e7cc <SD_FindSCR>
 800e6da:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e6dc:	697b      	ldr	r3, [r7, #20]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d001      	beq.n	800e6e6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e6e2:	697b      	ldr	r3, [r7, #20]
 800e6e4:	e023      	b.n	800e72e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e6e6:	693b      	ldr	r3, [r7, #16]
 800e6e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d01c      	beq.n	800e72a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	681a      	ldr	r2, [r3, #0]
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e6f8:	041b      	lsls	r3, r3, #16
 800e6fa:	4619      	mov	r1, r3
 800e6fc:	4610      	mov	r0, r2
 800e6fe:	f003 fbe9 	bl	8011ed4 <SDMMC_CmdAppCommand>
 800e702:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e704:	697b      	ldr	r3, [r7, #20]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d001      	beq.n	800e70e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e70a:	697b      	ldr	r3, [r7, #20]
 800e70c:	e00f      	b.n	800e72e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	2102      	movs	r1, #2
 800e714:	4618      	mov	r0, r3
 800e716:	f003 fc23 	bl	8011f60 <SDMMC_CmdBusWidth>
 800e71a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e71c:	697b      	ldr	r3, [r7, #20]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d001      	beq.n	800e726 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e722:	697b      	ldr	r3, [r7, #20]
 800e724:	e003      	b.n	800e72e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e726:	2300      	movs	r3, #0
 800e728:	e001      	b.n	800e72e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e72a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e72e:	4618      	mov	r0, r3
 800e730:	3718      	adds	r7, #24
 800e732:	46bd      	mov	sp, r7
 800e734:	bd80      	pop	{r7, pc}

0800e736 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e736:	b580      	push	{r7, lr}
 800e738:	b086      	sub	sp, #24
 800e73a:	af00      	add	r7, sp, #0
 800e73c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e73e:	2300      	movs	r3, #0
 800e740:	60fb      	str	r3, [r7, #12]
 800e742:	2300      	movs	r3, #0
 800e744:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	2100      	movs	r1, #0
 800e74c:	4618      	mov	r0, r3
 800e74e:	f003 fa56 	bl	8011bfe <SDMMC_GetResponse>
 800e752:	4603      	mov	r3, r0
 800e754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e758:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e75c:	d102      	bne.n	800e764 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e75e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e762:	e02f      	b.n	800e7c4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e764:	f107 030c 	add.w	r3, r7, #12
 800e768:	4619      	mov	r1, r3
 800e76a:	6878      	ldr	r0, [r7, #4]
 800e76c:	f000 f82e 	bl	800e7cc <SD_FindSCR>
 800e770:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e772:	697b      	ldr	r3, [r7, #20]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d001      	beq.n	800e77c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e778:	697b      	ldr	r3, [r7, #20]
 800e77a:	e023      	b.n	800e7c4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e77c:	693b      	ldr	r3, [r7, #16]
 800e77e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e782:	2b00      	cmp	r3, #0
 800e784:	d01c      	beq.n	800e7c0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681a      	ldr	r2, [r3, #0]
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e78e:	041b      	lsls	r3, r3, #16
 800e790:	4619      	mov	r1, r3
 800e792:	4610      	mov	r0, r2
 800e794:	f003 fb9e 	bl	8011ed4 <SDMMC_CmdAppCommand>
 800e798:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e79a:	697b      	ldr	r3, [r7, #20]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d001      	beq.n	800e7a4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e7a0:	697b      	ldr	r3, [r7, #20]
 800e7a2:	e00f      	b.n	800e7c4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	2100      	movs	r1, #0
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	f003 fbd8 	bl	8011f60 <SDMMC_CmdBusWidth>
 800e7b0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e7b2:	697b      	ldr	r3, [r7, #20]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d001      	beq.n	800e7bc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e7b8:	697b      	ldr	r3, [r7, #20]
 800e7ba:	e003      	b.n	800e7c4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e7bc:	2300      	movs	r3, #0
 800e7be:	e001      	b.n	800e7c4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e7c0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	3718      	adds	r7, #24
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	bd80      	pop	{r7, pc}

0800e7cc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e7cc:	b590      	push	{r4, r7, lr}
 800e7ce:	b08f      	sub	sp, #60	; 0x3c
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]
 800e7d4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e7d6:	f7f9 fe9b 	bl	8008510 <HAL_GetTick>
 800e7da:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e7dc:	2300      	movs	r3, #0
 800e7de:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	60bb      	str	r3, [r7, #8]
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	2108      	movs	r1, #8
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	f003 fa42 	bl	8011c7c <SDMMC_CmdBlockLength>
 800e7f8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d001      	beq.n	800e804 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e802:	e0b2      	b.n	800e96a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	681a      	ldr	r2, [r3, #0]
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e80c:	041b      	lsls	r3, r3, #16
 800e80e:	4619      	mov	r1, r3
 800e810:	4610      	mov	r0, r2
 800e812:	f003 fb5f 	bl	8011ed4 <SDMMC_CmdAppCommand>
 800e816:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d001      	beq.n	800e822 <SD_FindSCR+0x56>
  {
    return errorstate;
 800e81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e820:	e0a3      	b.n	800e96a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e822:	f04f 33ff 	mov.w	r3, #4294967295
 800e826:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e828:	2308      	movs	r3, #8
 800e82a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800e82c:	2330      	movs	r3, #48	; 0x30
 800e82e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e830:	2302      	movs	r3, #2
 800e832:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e834:	2300      	movs	r3, #0
 800e836:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e838:	2301      	movs	r3, #1
 800e83a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	f107 0210 	add.w	r2, r7, #16
 800e844:	4611      	mov	r1, r2
 800e846:	4618      	mov	r0, r3
 800e848:	f003 f9ec 	bl	8011c24 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	4618      	mov	r0, r3
 800e852:	f003 fba7 	bl	8011fa4 <SDMMC_CmdSendSCR>
 800e856:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d02a      	beq.n	800e8b4 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800e85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e860:	e083      	b.n	800e96a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e868:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d00f      	beq.n	800e890 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	6819      	ldr	r1, [r3, #0]
 800e874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e876:	009b      	lsls	r3, r3, #2
 800e878:	f107 0208 	add.w	r2, r7, #8
 800e87c:	18d4      	adds	r4, r2, r3
 800e87e:	4608      	mov	r0, r1
 800e880:	f003 f94c 	bl	8011b1c <SDMMC_ReadFIFO>
 800e884:	4603      	mov	r3, r0
 800e886:	6023      	str	r3, [r4, #0]
      index++;
 800e888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e88a:	3301      	adds	r3, #1
 800e88c:	637b      	str	r3, [r7, #52]	; 0x34
 800e88e:	e006      	b.n	800e89e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e896:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d012      	beq.n	800e8c4 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e89e:	f7f9 fe37 	bl	8008510 <HAL_GetTick>
 800e8a2:	4602      	mov	r2, r0
 800e8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8a6:	1ad3      	subs	r3, r2, r3
 800e8a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8ac:	d102      	bne.n	800e8b4 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e8ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e8b2:	e05a      	b.n	800e96a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8ba:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d0cf      	beq.n	800e862 <SD_FindSCR+0x96>
 800e8c2:	e000      	b.n	800e8c6 <SD_FindSCR+0xfa>
      break;
 800e8c4:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8cc:	f003 0308 	and.w	r3, r3, #8
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d005      	beq.n	800e8e0 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	2208      	movs	r2, #8
 800e8da:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e8dc:	2308      	movs	r3, #8
 800e8de:	e044      	b.n	800e96a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8e6:	f003 0302 	and.w	r3, r3, #2
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d005      	beq.n	800e8fa <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	2202      	movs	r2, #2
 800e8f4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e8f6:	2302      	movs	r3, #2
 800e8f8:	e037      	b.n	800e96a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e900:	f003 0320 	and.w	r3, r3, #32
 800e904:	2b00      	cmp	r3, #0
 800e906:	d005      	beq.n	800e914 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	2220      	movs	r2, #32
 800e90e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e910:	2320      	movs	r3, #32
 800e912:	e02a      	b.n	800e96a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	f240 523a 	movw	r2, #1338	; 0x53a
 800e91c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	061a      	lsls	r2, r3, #24
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	021b      	lsls	r3, r3, #8
 800e926:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e92a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	0a1b      	lsrs	r3, r3, #8
 800e930:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e934:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	0e1b      	lsrs	r3, r3, #24
 800e93a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e93e:	601a      	str	r2, [r3, #0]
    scr++;
 800e940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e942:	3304      	adds	r3, #4
 800e944:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e946:	68bb      	ldr	r3, [r7, #8]
 800e948:	061a      	lsls	r2, r3, #24
 800e94a:	68bb      	ldr	r3, [r7, #8]
 800e94c:	021b      	lsls	r3, r3, #8
 800e94e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e952:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e954:	68bb      	ldr	r3, [r7, #8]
 800e956:	0a1b      	lsrs	r3, r3, #8
 800e958:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e95c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e95e:	68bb      	ldr	r3, [r7, #8]
 800e960:	0e1b      	lsrs	r3, r3, #24
 800e962:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e966:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e968:	2300      	movs	r3, #0
}
 800e96a:	4618      	mov	r0, r3
 800e96c:	373c      	adds	r7, #60	; 0x3c
 800e96e:	46bd      	mov	sp, r7
 800e970:	bd90      	pop	{r4, r7, pc}

0800e972 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e972:	b580      	push	{r7, lr}
 800e974:	b086      	sub	sp, #24
 800e976:	af00      	add	r7, sp, #0
 800e978:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e97e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e984:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e986:	693b      	ldr	r3, [r7, #16]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d03f      	beq.n	800ea0c <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800e98c:	2300      	movs	r3, #0
 800e98e:	617b      	str	r3, [r7, #20]
 800e990:	e033      	b.n	800e9fa <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	4618      	mov	r0, r3
 800e998:	f003 f8c0 	bl	8011b1c <SDMMC_ReadFIFO>
 800e99c:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800e99e:	68bb      	ldr	r3, [r7, #8]
 800e9a0:	b2da      	uxtb	r2, r3
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	3301      	adds	r3, #1
 800e9aa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e9ac:	693b      	ldr	r3, [r7, #16]
 800e9ae:	3b01      	subs	r3, #1
 800e9b0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e9b2:	68bb      	ldr	r3, [r7, #8]
 800e9b4:	0a1b      	lsrs	r3, r3, #8
 800e9b6:	b2da      	uxtb	r2, r3
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	3301      	adds	r3, #1
 800e9c0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e9c2:	693b      	ldr	r3, [r7, #16]
 800e9c4:	3b01      	subs	r3, #1
 800e9c6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e9c8:	68bb      	ldr	r3, [r7, #8]
 800e9ca:	0c1b      	lsrs	r3, r3, #16
 800e9cc:	b2da      	uxtb	r2, r3
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	3301      	adds	r3, #1
 800e9d6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e9d8:	693b      	ldr	r3, [r7, #16]
 800e9da:	3b01      	subs	r3, #1
 800e9dc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e9de:	68bb      	ldr	r3, [r7, #8]
 800e9e0:	0e1b      	lsrs	r3, r3, #24
 800e9e2:	b2da      	uxtb	r2, r3
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	3301      	adds	r3, #1
 800e9ec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e9ee:	693b      	ldr	r3, [r7, #16]
 800e9f0:	3b01      	subs	r3, #1
 800e9f2:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800e9f4:	697b      	ldr	r3, [r7, #20]
 800e9f6:	3301      	adds	r3, #1
 800e9f8:	617b      	str	r3, [r7, #20]
 800e9fa:	697b      	ldr	r3, [r7, #20]
 800e9fc:	2b07      	cmp	r3, #7
 800e9fe:	d9c8      	bls.n	800e992 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	68fa      	ldr	r2, [r7, #12]
 800ea04:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	693a      	ldr	r2, [r7, #16]
 800ea0a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800ea0c:	bf00      	nop
 800ea0e:	3718      	adds	r7, #24
 800ea10:	46bd      	mov	sp, r7
 800ea12:	bd80      	pop	{r7, pc}

0800ea14 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b086      	sub	sp, #24
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	6a1b      	ldr	r3, [r3, #32]
 800ea20:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea26:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800ea28:	693b      	ldr	r3, [r7, #16]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d043      	beq.n	800eab6 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800ea2e:	2300      	movs	r3, #0
 800ea30:	617b      	str	r3, [r7, #20]
 800ea32:	e037      	b.n	800eaa4 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	781b      	ldrb	r3, [r3, #0]
 800ea38:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	3301      	adds	r3, #1
 800ea3e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ea40:	693b      	ldr	r3, [r7, #16]
 800ea42:	3b01      	subs	r3, #1
 800ea44:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	781b      	ldrb	r3, [r3, #0]
 800ea4a:	021a      	lsls	r2, r3, #8
 800ea4c:	68bb      	ldr	r3, [r7, #8]
 800ea4e:	4313      	orrs	r3, r2
 800ea50:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	3301      	adds	r3, #1
 800ea56:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ea58:	693b      	ldr	r3, [r7, #16]
 800ea5a:	3b01      	subs	r3, #1
 800ea5c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	781b      	ldrb	r3, [r3, #0]
 800ea62:	041a      	lsls	r2, r3, #16
 800ea64:	68bb      	ldr	r3, [r7, #8]
 800ea66:	4313      	orrs	r3, r2
 800ea68:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	3301      	adds	r3, #1
 800ea6e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ea70:	693b      	ldr	r3, [r7, #16]
 800ea72:	3b01      	subs	r3, #1
 800ea74:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	781b      	ldrb	r3, [r3, #0]
 800ea7a:	061a      	lsls	r2, r3, #24
 800ea7c:	68bb      	ldr	r3, [r7, #8]
 800ea7e:	4313      	orrs	r3, r2
 800ea80:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	3301      	adds	r3, #1
 800ea86:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ea88:	693b      	ldr	r3, [r7, #16]
 800ea8a:	3b01      	subs	r3, #1
 800ea8c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	f107 0208 	add.w	r2, r7, #8
 800ea96:	4611      	mov	r1, r2
 800ea98:	4618      	mov	r0, r3
 800ea9a:	f003 f84c 	bl	8011b36 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800ea9e:	697b      	ldr	r3, [r7, #20]
 800eaa0:	3301      	adds	r3, #1
 800eaa2:	617b      	str	r3, [r7, #20]
 800eaa4:	697b      	ldr	r3, [r7, #20]
 800eaa6:	2b07      	cmp	r3, #7
 800eaa8:	d9c4      	bls.n	800ea34 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	68fa      	ldr	r2, [r7, #12]
 800eaae:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	693a      	ldr	r2, [r7, #16]
 800eab4:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800eab6:	bf00      	nop
 800eab8:	3718      	adds	r7, #24
 800eaba:	46bd      	mov	sp, r7
 800eabc:	bd80      	pop	{r7, pc}

0800eabe <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800eabe:	b580      	push	{r7, lr}
 800eac0:	b084      	sub	sp, #16
 800eac2:	af00      	add	r7, sp, #0
 800eac4:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d101      	bne.n	800ead0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800eacc:	2301      	movs	r3, #1
 800eace:	e09d      	b.n	800ec0c <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d108      	bne.n	800eaea <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	685b      	ldr	r3, [r3, #4]
 800eadc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eae0:	d009      	beq.n	800eaf6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	2200      	movs	r2, #0
 800eae6:	61da      	str	r2, [r3, #28]
 800eae8:	e005      	b.n	800eaf6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	2200      	movs	r2, #0
 800eaee:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	2200      	movs	r2, #0
 800eafa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800eb02:	b2db      	uxtb	r3, r3
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d106      	bne.n	800eb16 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800eb10:	6878      	ldr	r0, [r7, #4]
 800eb12:	f7f3 fdf5 	bl	8002700 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	2202      	movs	r2, #2
 800eb1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	681a      	ldr	r2, [r3, #0]
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eb2c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	68db      	ldr	r3, [r3, #12]
 800eb32:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800eb36:	d902      	bls.n	800eb3e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800eb38:	2300      	movs	r3, #0
 800eb3a:	60fb      	str	r3, [r7, #12]
 800eb3c:	e002      	b.n	800eb44 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800eb3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eb42:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	68db      	ldr	r3, [r3, #12]
 800eb48:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800eb4c:	d007      	beq.n	800eb5e <HAL_SPI_Init+0xa0>
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	68db      	ldr	r3, [r3, #12]
 800eb52:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800eb56:	d002      	beq.n	800eb5e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	685b      	ldr	r3, [r3, #4]
 800eb62:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	689b      	ldr	r3, [r3, #8]
 800eb6a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800eb6e:	431a      	orrs	r2, r3
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	691b      	ldr	r3, [r3, #16]
 800eb74:	f003 0302 	and.w	r3, r3, #2
 800eb78:	431a      	orrs	r2, r3
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	695b      	ldr	r3, [r3, #20]
 800eb7e:	f003 0301 	and.w	r3, r3, #1
 800eb82:	431a      	orrs	r2, r3
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	699b      	ldr	r3, [r3, #24]
 800eb88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800eb8c:	431a      	orrs	r2, r3
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	69db      	ldr	r3, [r3, #28]
 800eb92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800eb96:	431a      	orrs	r2, r3
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	6a1b      	ldr	r3, [r3, #32]
 800eb9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eba0:	ea42 0103 	orr.w	r1, r2, r3
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eba8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	430a      	orrs	r2, r1
 800ebb2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	699b      	ldr	r3, [r3, #24]
 800ebb8:	0c1b      	lsrs	r3, r3, #16
 800ebba:	f003 0204 	and.w	r2, r3, #4
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebc2:	f003 0310 	and.w	r3, r3, #16
 800ebc6:	431a      	orrs	r2, r3
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebcc:	f003 0308 	and.w	r3, r3, #8
 800ebd0:	431a      	orrs	r2, r3
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	68db      	ldr	r3, [r3, #12]
 800ebd6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800ebda:	ea42 0103 	orr.w	r1, r2, r3
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	430a      	orrs	r2, r1
 800ebea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	69da      	ldr	r2, [r3, #28]
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ebfa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	2200      	movs	r2, #0
 800ec00:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	2201      	movs	r2, #1
 800ec06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800ec0a:	2300      	movs	r3, #0
}
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	3710      	adds	r7, #16
 800ec10:	46bd      	mov	sp, r7
 800ec12:	bd80      	pop	{r7, pc}

0800ec14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b082      	sub	sp, #8
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d101      	bne.n	800ec26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ec22:	2301      	movs	r3, #1
 800ec24:	e049      	b.n	800ecba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ec2c:	b2db      	uxtb	r3, r3
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d106      	bne.n	800ec40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	2200      	movs	r2, #0
 800ec36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ec3a:	6878      	ldr	r0, [r7, #4]
 800ec3c:	f7f4 f8aa 	bl	8002d94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	2202      	movs	r2, #2
 800ec44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681a      	ldr	r2, [r3, #0]
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	3304      	adds	r3, #4
 800ec50:	4619      	mov	r1, r3
 800ec52:	4610      	mov	r0, r2
 800ec54:	f000 fdb6 	bl	800f7c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2201      	movs	r2, #1
 800ec5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	2201      	movs	r2, #1
 800ec64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	2201      	movs	r2, #1
 800ec6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	2201      	movs	r2, #1
 800ec74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	2201      	movs	r2, #1
 800ec7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	2201      	movs	r2, #1
 800ec84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	2201      	movs	r2, #1
 800ec8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	2201      	movs	r2, #1
 800ec94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	2201      	movs	r2, #1
 800ec9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	2201      	movs	r2, #1
 800eca4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	2201      	movs	r2, #1
 800ecac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	2201      	movs	r2, #1
 800ecb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ecb8:	2300      	movs	r3, #0
}
 800ecba:	4618      	mov	r0, r3
 800ecbc:	3708      	adds	r7, #8
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	bd80      	pop	{r7, pc}
	...

0800ecc4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ecc4:	b480      	push	{r7}
 800ecc6:	b085      	sub	sp, #20
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ecd2:	b2db      	uxtb	r3, r3
 800ecd4:	2b01      	cmp	r3, #1
 800ecd6:	d001      	beq.n	800ecdc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ecd8:	2301      	movs	r3, #1
 800ecda:	e04c      	b.n	800ed76 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	2202      	movs	r2, #2
 800ece0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	4a26      	ldr	r2, [pc, #152]	; (800ed84 <HAL_TIM_Base_Start+0xc0>)
 800ecea:	4293      	cmp	r3, r2
 800ecec:	d022      	beq.n	800ed34 <HAL_TIM_Base_Start+0x70>
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ecf6:	d01d      	beq.n	800ed34 <HAL_TIM_Base_Start+0x70>
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	4a22      	ldr	r2, [pc, #136]	; (800ed88 <HAL_TIM_Base_Start+0xc4>)
 800ecfe:	4293      	cmp	r3, r2
 800ed00:	d018      	beq.n	800ed34 <HAL_TIM_Base_Start+0x70>
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	4a21      	ldr	r2, [pc, #132]	; (800ed8c <HAL_TIM_Base_Start+0xc8>)
 800ed08:	4293      	cmp	r3, r2
 800ed0a:	d013      	beq.n	800ed34 <HAL_TIM_Base_Start+0x70>
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	4a1f      	ldr	r2, [pc, #124]	; (800ed90 <HAL_TIM_Base_Start+0xcc>)
 800ed12:	4293      	cmp	r3, r2
 800ed14:	d00e      	beq.n	800ed34 <HAL_TIM_Base_Start+0x70>
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	4a1e      	ldr	r2, [pc, #120]	; (800ed94 <HAL_TIM_Base_Start+0xd0>)
 800ed1c:	4293      	cmp	r3, r2
 800ed1e:	d009      	beq.n	800ed34 <HAL_TIM_Base_Start+0x70>
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	4a1c      	ldr	r2, [pc, #112]	; (800ed98 <HAL_TIM_Base_Start+0xd4>)
 800ed26:	4293      	cmp	r3, r2
 800ed28:	d004      	beq.n	800ed34 <HAL_TIM_Base_Start+0x70>
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	4a1b      	ldr	r2, [pc, #108]	; (800ed9c <HAL_TIM_Base_Start+0xd8>)
 800ed30:	4293      	cmp	r3, r2
 800ed32:	d115      	bne.n	800ed60 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	689a      	ldr	r2, [r3, #8]
 800ed3a:	4b19      	ldr	r3, [pc, #100]	; (800eda0 <HAL_TIM_Base_Start+0xdc>)
 800ed3c:	4013      	ands	r3, r2
 800ed3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	2b06      	cmp	r3, #6
 800ed44:	d015      	beq.n	800ed72 <HAL_TIM_Base_Start+0xae>
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed4c:	d011      	beq.n	800ed72 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	681a      	ldr	r2, [r3, #0]
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	f042 0201 	orr.w	r2, r2, #1
 800ed5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed5e:	e008      	b.n	800ed72 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	681a      	ldr	r2, [r3, #0]
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	f042 0201 	orr.w	r2, r2, #1
 800ed6e:	601a      	str	r2, [r3, #0]
 800ed70:	e000      	b.n	800ed74 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed72:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ed74:	2300      	movs	r3, #0
}
 800ed76:	4618      	mov	r0, r3
 800ed78:	3714      	adds	r7, #20
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed80:	4770      	bx	lr
 800ed82:	bf00      	nop
 800ed84:	40010000 	.word	0x40010000
 800ed88:	40000400 	.word	0x40000400
 800ed8c:	40000800 	.word	0x40000800
 800ed90:	40000c00 	.word	0x40000c00
 800ed94:	40010400 	.word	0x40010400
 800ed98:	40014000 	.word	0x40014000
 800ed9c:	40001800 	.word	0x40001800
 800eda0:	00010007 	.word	0x00010007

0800eda4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800eda4:	b480      	push	{r7}
 800eda6:	b085      	sub	sp, #20
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800edb2:	b2db      	uxtb	r3, r3
 800edb4:	2b01      	cmp	r3, #1
 800edb6:	d001      	beq.n	800edbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800edb8:	2301      	movs	r3, #1
 800edba:	e054      	b.n	800ee66 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	2202      	movs	r2, #2
 800edc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	68da      	ldr	r2, [r3, #12]
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	f042 0201 	orr.w	r2, r2, #1
 800edd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	4a26      	ldr	r2, [pc, #152]	; (800ee74 <HAL_TIM_Base_Start_IT+0xd0>)
 800edda:	4293      	cmp	r3, r2
 800eddc:	d022      	beq.n	800ee24 <HAL_TIM_Base_Start_IT+0x80>
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ede6:	d01d      	beq.n	800ee24 <HAL_TIM_Base_Start_IT+0x80>
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	4a22      	ldr	r2, [pc, #136]	; (800ee78 <HAL_TIM_Base_Start_IT+0xd4>)
 800edee:	4293      	cmp	r3, r2
 800edf0:	d018      	beq.n	800ee24 <HAL_TIM_Base_Start_IT+0x80>
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	4a21      	ldr	r2, [pc, #132]	; (800ee7c <HAL_TIM_Base_Start_IT+0xd8>)
 800edf8:	4293      	cmp	r3, r2
 800edfa:	d013      	beq.n	800ee24 <HAL_TIM_Base_Start_IT+0x80>
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	4a1f      	ldr	r2, [pc, #124]	; (800ee80 <HAL_TIM_Base_Start_IT+0xdc>)
 800ee02:	4293      	cmp	r3, r2
 800ee04:	d00e      	beq.n	800ee24 <HAL_TIM_Base_Start_IT+0x80>
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	4a1e      	ldr	r2, [pc, #120]	; (800ee84 <HAL_TIM_Base_Start_IT+0xe0>)
 800ee0c:	4293      	cmp	r3, r2
 800ee0e:	d009      	beq.n	800ee24 <HAL_TIM_Base_Start_IT+0x80>
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	4a1c      	ldr	r2, [pc, #112]	; (800ee88 <HAL_TIM_Base_Start_IT+0xe4>)
 800ee16:	4293      	cmp	r3, r2
 800ee18:	d004      	beq.n	800ee24 <HAL_TIM_Base_Start_IT+0x80>
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	4a1b      	ldr	r2, [pc, #108]	; (800ee8c <HAL_TIM_Base_Start_IT+0xe8>)
 800ee20:	4293      	cmp	r3, r2
 800ee22:	d115      	bne.n	800ee50 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	689a      	ldr	r2, [r3, #8]
 800ee2a:	4b19      	ldr	r3, [pc, #100]	; (800ee90 <HAL_TIM_Base_Start_IT+0xec>)
 800ee2c:	4013      	ands	r3, r2
 800ee2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	2b06      	cmp	r3, #6
 800ee34:	d015      	beq.n	800ee62 <HAL_TIM_Base_Start_IT+0xbe>
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ee3c:	d011      	beq.n	800ee62 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	681a      	ldr	r2, [r3, #0]
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	f042 0201 	orr.w	r2, r2, #1
 800ee4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ee4e:	e008      	b.n	800ee62 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	681a      	ldr	r2, [r3, #0]
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	f042 0201 	orr.w	r2, r2, #1
 800ee5e:	601a      	str	r2, [r3, #0]
 800ee60:	e000      	b.n	800ee64 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ee62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ee64:	2300      	movs	r3, #0
}
 800ee66:	4618      	mov	r0, r3
 800ee68:	3714      	adds	r7, #20
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee70:	4770      	bx	lr
 800ee72:	bf00      	nop
 800ee74:	40010000 	.word	0x40010000
 800ee78:	40000400 	.word	0x40000400
 800ee7c:	40000800 	.word	0x40000800
 800ee80:	40000c00 	.word	0x40000c00
 800ee84:	40010400 	.word	0x40010400
 800ee88:	40014000 	.word	0x40014000
 800ee8c:	40001800 	.word	0x40001800
 800ee90:	00010007 	.word	0x00010007

0800ee94 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b082      	sub	sp, #8
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d101      	bne.n	800eea6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800eea2:	2301      	movs	r3, #1
 800eea4:	e049      	b.n	800ef3a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eeac:	b2db      	uxtb	r3, r3
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d106      	bne.n	800eec0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800eeba:	6878      	ldr	r0, [r7, #4]
 800eebc:	f000 f841 	bl	800ef42 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	2202      	movs	r2, #2
 800eec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681a      	ldr	r2, [r3, #0]
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	3304      	adds	r3, #4
 800eed0:	4619      	mov	r1, r3
 800eed2:	4610      	mov	r0, r2
 800eed4:	f000 fc76 	bl	800f7c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	2201      	movs	r2, #1
 800eedc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	2201      	movs	r2, #1
 800eee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	2201      	movs	r2, #1
 800eeec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	2201      	movs	r2, #1
 800eef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	2201      	movs	r2, #1
 800eefc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	2201      	movs	r2, #1
 800ef04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	2201      	movs	r2, #1
 800ef0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	2201      	movs	r2, #1
 800ef14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	2201      	movs	r2, #1
 800ef1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	2201      	movs	r2, #1
 800ef24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	2201      	movs	r2, #1
 800ef2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	2201      	movs	r2, #1
 800ef34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ef38:	2300      	movs	r3, #0
}
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	3708      	adds	r7, #8
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	bd80      	pop	{r7, pc}

0800ef42 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800ef42:	b480      	push	{r7}
 800ef44:	b083      	sub	sp, #12
 800ef46:	af00      	add	r7, sp, #0
 800ef48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800ef4a:	bf00      	nop
 800ef4c:	370c      	adds	r7, #12
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef54:	4770      	bx	lr
	...

0800ef58 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b084      	sub	sp, #16
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	6078      	str	r0, [r7, #4]
 800ef60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ef62:	2300      	movs	r3, #0
 800ef64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800ef66:	683b      	ldr	r3, [r7, #0]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d104      	bne.n	800ef76 <HAL_TIM_IC_Start_IT+0x1e>
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ef72:	b2db      	uxtb	r3, r3
 800ef74:	e023      	b.n	800efbe <HAL_TIM_IC_Start_IT+0x66>
 800ef76:	683b      	ldr	r3, [r7, #0]
 800ef78:	2b04      	cmp	r3, #4
 800ef7a:	d104      	bne.n	800ef86 <HAL_TIM_IC_Start_IT+0x2e>
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ef82:	b2db      	uxtb	r3, r3
 800ef84:	e01b      	b.n	800efbe <HAL_TIM_IC_Start_IT+0x66>
 800ef86:	683b      	ldr	r3, [r7, #0]
 800ef88:	2b08      	cmp	r3, #8
 800ef8a:	d104      	bne.n	800ef96 <HAL_TIM_IC_Start_IT+0x3e>
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ef92:	b2db      	uxtb	r3, r3
 800ef94:	e013      	b.n	800efbe <HAL_TIM_IC_Start_IT+0x66>
 800ef96:	683b      	ldr	r3, [r7, #0]
 800ef98:	2b0c      	cmp	r3, #12
 800ef9a:	d104      	bne.n	800efa6 <HAL_TIM_IC_Start_IT+0x4e>
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800efa2:	b2db      	uxtb	r3, r3
 800efa4:	e00b      	b.n	800efbe <HAL_TIM_IC_Start_IT+0x66>
 800efa6:	683b      	ldr	r3, [r7, #0]
 800efa8:	2b10      	cmp	r3, #16
 800efaa:	d104      	bne.n	800efb6 <HAL_TIM_IC_Start_IT+0x5e>
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800efb2:	b2db      	uxtb	r3, r3
 800efb4:	e003      	b.n	800efbe <HAL_TIM_IC_Start_IT+0x66>
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800efbc:	b2db      	uxtb	r3, r3
 800efbe:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800efc0:	683b      	ldr	r3, [r7, #0]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d104      	bne.n	800efd0 <HAL_TIM_IC_Start_IT+0x78>
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800efcc:	b2db      	uxtb	r3, r3
 800efce:	e013      	b.n	800eff8 <HAL_TIM_IC_Start_IT+0xa0>
 800efd0:	683b      	ldr	r3, [r7, #0]
 800efd2:	2b04      	cmp	r3, #4
 800efd4:	d104      	bne.n	800efe0 <HAL_TIM_IC_Start_IT+0x88>
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800efdc:	b2db      	uxtb	r3, r3
 800efde:	e00b      	b.n	800eff8 <HAL_TIM_IC_Start_IT+0xa0>
 800efe0:	683b      	ldr	r3, [r7, #0]
 800efe2:	2b08      	cmp	r3, #8
 800efe4:	d104      	bne.n	800eff0 <HAL_TIM_IC_Start_IT+0x98>
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800efec:	b2db      	uxtb	r3, r3
 800efee:	e003      	b.n	800eff8 <HAL_TIM_IC_Start_IT+0xa0>
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800eff6:	b2db      	uxtb	r3, r3
 800eff8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800effa:	7bbb      	ldrb	r3, [r7, #14]
 800effc:	2b01      	cmp	r3, #1
 800effe:	d102      	bne.n	800f006 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800f000:	7b7b      	ldrb	r3, [r7, #13]
 800f002:	2b01      	cmp	r3, #1
 800f004:	d001      	beq.n	800f00a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800f006:	2301      	movs	r3, #1
 800f008:	e0e2      	b.n	800f1d0 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f00a:	683b      	ldr	r3, [r7, #0]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d104      	bne.n	800f01a <HAL_TIM_IC_Start_IT+0xc2>
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	2202      	movs	r2, #2
 800f014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f018:	e023      	b.n	800f062 <HAL_TIM_IC_Start_IT+0x10a>
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	2b04      	cmp	r3, #4
 800f01e:	d104      	bne.n	800f02a <HAL_TIM_IC_Start_IT+0xd2>
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	2202      	movs	r2, #2
 800f024:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f028:	e01b      	b.n	800f062 <HAL_TIM_IC_Start_IT+0x10a>
 800f02a:	683b      	ldr	r3, [r7, #0]
 800f02c:	2b08      	cmp	r3, #8
 800f02e:	d104      	bne.n	800f03a <HAL_TIM_IC_Start_IT+0xe2>
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	2202      	movs	r2, #2
 800f034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f038:	e013      	b.n	800f062 <HAL_TIM_IC_Start_IT+0x10a>
 800f03a:	683b      	ldr	r3, [r7, #0]
 800f03c:	2b0c      	cmp	r3, #12
 800f03e:	d104      	bne.n	800f04a <HAL_TIM_IC_Start_IT+0xf2>
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	2202      	movs	r2, #2
 800f044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f048:	e00b      	b.n	800f062 <HAL_TIM_IC_Start_IT+0x10a>
 800f04a:	683b      	ldr	r3, [r7, #0]
 800f04c:	2b10      	cmp	r3, #16
 800f04e:	d104      	bne.n	800f05a <HAL_TIM_IC_Start_IT+0x102>
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	2202      	movs	r2, #2
 800f054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f058:	e003      	b.n	800f062 <HAL_TIM_IC_Start_IT+0x10a>
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	2202      	movs	r2, #2
 800f05e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f062:	683b      	ldr	r3, [r7, #0]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d104      	bne.n	800f072 <HAL_TIM_IC_Start_IT+0x11a>
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	2202      	movs	r2, #2
 800f06c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f070:	e013      	b.n	800f09a <HAL_TIM_IC_Start_IT+0x142>
 800f072:	683b      	ldr	r3, [r7, #0]
 800f074:	2b04      	cmp	r3, #4
 800f076:	d104      	bne.n	800f082 <HAL_TIM_IC_Start_IT+0x12a>
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	2202      	movs	r2, #2
 800f07c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f080:	e00b      	b.n	800f09a <HAL_TIM_IC_Start_IT+0x142>
 800f082:	683b      	ldr	r3, [r7, #0]
 800f084:	2b08      	cmp	r3, #8
 800f086:	d104      	bne.n	800f092 <HAL_TIM_IC_Start_IT+0x13a>
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	2202      	movs	r2, #2
 800f08c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f090:	e003      	b.n	800f09a <HAL_TIM_IC_Start_IT+0x142>
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	2202      	movs	r2, #2
 800f096:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800f09a:	683b      	ldr	r3, [r7, #0]
 800f09c:	2b0c      	cmp	r3, #12
 800f09e:	d841      	bhi.n	800f124 <HAL_TIM_IC_Start_IT+0x1cc>
 800f0a0:	a201      	add	r2, pc, #4	; (adr r2, 800f0a8 <HAL_TIM_IC_Start_IT+0x150>)
 800f0a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0a6:	bf00      	nop
 800f0a8:	0800f0dd 	.word	0x0800f0dd
 800f0ac:	0800f125 	.word	0x0800f125
 800f0b0:	0800f125 	.word	0x0800f125
 800f0b4:	0800f125 	.word	0x0800f125
 800f0b8:	0800f0ef 	.word	0x0800f0ef
 800f0bc:	0800f125 	.word	0x0800f125
 800f0c0:	0800f125 	.word	0x0800f125
 800f0c4:	0800f125 	.word	0x0800f125
 800f0c8:	0800f101 	.word	0x0800f101
 800f0cc:	0800f125 	.word	0x0800f125
 800f0d0:	0800f125 	.word	0x0800f125
 800f0d4:	0800f125 	.word	0x0800f125
 800f0d8:	0800f113 	.word	0x0800f113
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	68da      	ldr	r2, [r3, #12]
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	f042 0202 	orr.w	r2, r2, #2
 800f0ea:	60da      	str	r2, [r3, #12]
      break;
 800f0ec:	e01d      	b.n	800f12a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	68da      	ldr	r2, [r3, #12]
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	f042 0204 	orr.w	r2, r2, #4
 800f0fc:	60da      	str	r2, [r3, #12]
      break;
 800f0fe:	e014      	b.n	800f12a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	68da      	ldr	r2, [r3, #12]
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	f042 0208 	orr.w	r2, r2, #8
 800f10e:	60da      	str	r2, [r3, #12]
      break;
 800f110:	e00b      	b.n	800f12a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	68da      	ldr	r2, [r3, #12]
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	f042 0210 	orr.w	r2, r2, #16
 800f120:	60da      	str	r2, [r3, #12]
      break;
 800f122:	e002      	b.n	800f12a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800f124:	2301      	movs	r3, #1
 800f126:	73fb      	strb	r3, [r7, #15]
      break;
 800f128:	bf00      	nop
  }

  if (status == HAL_OK)
 800f12a:	7bfb      	ldrb	r3, [r7, #15]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d14e      	bne.n	800f1ce <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	2201      	movs	r2, #1
 800f136:	6839      	ldr	r1, [r7, #0]
 800f138:	4618      	mov	r0, r3
 800f13a:	f000 fe3b 	bl	800fdb4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	4a25      	ldr	r2, [pc, #148]	; (800f1d8 <HAL_TIM_IC_Start_IT+0x280>)
 800f144:	4293      	cmp	r3, r2
 800f146:	d022      	beq.n	800f18e <HAL_TIM_IC_Start_IT+0x236>
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f150:	d01d      	beq.n	800f18e <HAL_TIM_IC_Start_IT+0x236>
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	4a21      	ldr	r2, [pc, #132]	; (800f1dc <HAL_TIM_IC_Start_IT+0x284>)
 800f158:	4293      	cmp	r3, r2
 800f15a:	d018      	beq.n	800f18e <HAL_TIM_IC_Start_IT+0x236>
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	4a1f      	ldr	r2, [pc, #124]	; (800f1e0 <HAL_TIM_IC_Start_IT+0x288>)
 800f162:	4293      	cmp	r3, r2
 800f164:	d013      	beq.n	800f18e <HAL_TIM_IC_Start_IT+0x236>
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	4a1e      	ldr	r2, [pc, #120]	; (800f1e4 <HAL_TIM_IC_Start_IT+0x28c>)
 800f16c:	4293      	cmp	r3, r2
 800f16e:	d00e      	beq.n	800f18e <HAL_TIM_IC_Start_IT+0x236>
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	4a1c      	ldr	r2, [pc, #112]	; (800f1e8 <HAL_TIM_IC_Start_IT+0x290>)
 800f176:	4293      	cmp	r3, r2
 800f178:	d009      	beq.n	800f18e <HAL_TIM_IC_Start_IT+0x236>
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	4a1b      	ldr	r2, [pc, #108]	; (800f1ec <HAL_TIM_IC_Start_IT+0x294>)
 800f180:	4293      	cmp	r3, r2
 800f182:	d004      	beq.n	800f18e <HAL_TIM_IC_Start_IT+0x236>
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	4a19      	ldr	r2, [pc, #100]	; (800f1f0 <HAL_TIM_IC_Start_IT+0x298>)
 800f18a:	4293      	cmp	r3, r2
 800f18c:	d115      	bne.n	800f1ba <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	689a      	ldr	r2, [r3, #8]
 800f194:	4b17      	ldr	r3, [pc, #92]	; (800f1f4 <HAL_TIM_IC_Start_IT+0x29c>)
 800f196:	4013      	ands	r3, r2
 800f198:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f19a:	68bb      	ldr	r3, [r7, #8]
 800f19c:	2b06      	cmp	r3, #6
 800f19e:	d015      	beq.n	800f1cc <HAL_TIM_IC_Start_IT+0x274>
 800f1a0:	68bb      	ldr	r3, [r7, #8]
 800f1a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f1a6:	d011      	beq.n	800f1cc <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	681a      	ldr	r2, [r3, #0]
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	f042 0201 	orr.w	r2, r2, #1
 800f1b6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f1b8:	e008      	b.n	800f1cc <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	681a      	ldr	r2, [r3, #0]
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	f042 0201 	orr.w	r2, r2, #1
 800f1c8:	601a      	str	r2, [r3, #0]
 800f1ca:	e000      	b.n	800f1ce <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f1cc:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800f1ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	3710      	adds	r7, #16
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	bd80      	pop	{r7, pc}
 800f1d8:	40010000 	.word	0x40010000
 800f1dc:	40000400 	.word	0x40000400
 800f1e0:	40000800 	.word	0x40000800
 800f1e4:	40000c00 	.word	0x40000c00
 800f1e8:	40010400 	.word	0x40010400
 800f1ec:	40014000 	.word	0x40014000
 800f1f0:	40001800 	.word	0x40001800
 800f1f4:	00010007 	.word	0x00010007

0800f1f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b082      	sub	sp, #8
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	691b      	ldr	r3, [r3, #16]
 800f206:	f003 0302 	and.w	r3, r3, #2
 800f20a:	2b02      	cmp	r3, #2
 800f20c:	d122      	bne.n	800f254 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	68db      	ldr	r3, [r3, #12]
 800f214:	f003 0302 	and.w	r3, r3, #2
 800f218:	2b02      	cmp	r3, #2
 800f21a:	d11b      	bne.n	800f254 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	f06f 0202 	mvn.w	r2, #2
 800f224:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	2201      	movs	r2, #1
 800f22a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	699b      	ldr	r3, [r3, #24]
 800f232:	f003 0303 	and.w	r3, r3, #3
 800f236:	2b00      	cmp	r3, #0
 800f238:	d003      	beq.n	800f242 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f23a:	6878      	ldr	r0, [r7, #4]
 800f23c:	f7f2 fe45 	bl	8001eca <HAL_TIM_IC_CaptureCallback>
 800f240:	e005      	b.n	800f24e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f242:	6878      	ldr	r0, [r7, #4]
 800f244:	f000 faa0 	bl	800f788 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f248:	6878      	ldr	r0, [r7, #4]
 800f24a:	f000 faa7 	bl	800f79c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	2200      	movs	r2, #0
 800f252:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	691b      	ldr	r3, [r3, #16]
 800f25a:	f003 0304 	and.w	r3, r3, #4
 800f25e:	2b04      	cmp	r3, #4
 800f260:	d122      	bne.n	800f2a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	68db      	ldr	r3, [r3, #12]
 800f268:	f003 0304 	and.w	r3, r3, #4
 800f26c:	2b04      	cmp	r3, #4
 800f26e:	d11b      	bne.n	800f2a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	f06f 0204 	mvn.w	r2, #4
 800f278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	2202      	movs	r2, #2
 800f27e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	699b      	ldr	r3, [r3, #24]
 800f286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d003      	beq.n	800f296 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f28e:	6878      	ldr	r0, [r7, #4]
 800f290:	f7f2 fe1b 	bl	8001eca <HAL_TIM_IC_CaptureCallback>
 800f294:	e005      	b.n	800f2a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f296:	6878      	ldr	r0, [r7, #4]
 800f298:	f000 fa76 	bl	800f788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f29c:	6878      	ldr	r0, [r7, #4]
 800f29e:	f000 fa7d 	bl	800f79c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	2200      	movs	r2, #0
 800f2a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	691b      	ldr	r3, [r3, #16]
 800f2ae:	f003 0308 	and.w	r3, r3, #8
 800f2b2:	2b08      	cmp	r3, #8
 800f2b4:	d122      	bne.n	800f2fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	68db      	ldr	r3, [r3, #12]
 800f2bc:	f003 0308 	and.w	r3, r3, #8
 800f2c0:	2b08      	cmp	r3, #8
 800f2c2:	d11b      	bne.n	800f2fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	f06f 0208 	mvn.w	r2, #8
 800f2cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	2204      	movs	r2, #4
 800f2d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	69db      	ldr	r3, [r3, #28]
 800f2da:	f003 0303 	and.w	r3, r3, #3
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d003      	beq.n	800f2ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f2e2:	6878      	ldr	r0, [r7, #4]
 800f2e4:	f7f2 fdf1 	bl	8001eca <HAL_TIM_IC_CaptureCallback>
 800f2e8:	e005      	b.n	800f2f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f2ea:	6878      	ldr	r0, [r7, #4]
 800f2ec:	f000 fa4c 	bl	800f788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f2f0:	6878      	ldr	r0, [r7, #4]
 800f2f2:	f000 fa53 	bl	800f79c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	2200      	movs	r2, #0
 800f2fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	691b      	ldr	r3, [r3, #16]
 800f302:	f003 0310 	and.w	r3, r3, #16
 800f306:	2b10      	cmp	r3, #16
 800f308:	d122      	bne.n	800f350 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	68db      	ldr	r3, [r3, #12]
 800f310:	f003 0310 	and.w	r3, r3, #16
 800f314:	2b10      	cmp	r3, #16
 800f316:	d11b      	bne.n	800f350 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	f06f 0210 	mvn.w	r2, #16
 800f320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	2208      	movs	r2, #8
 800f326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	69db      	ldr	r3, [r3, #28]
 800f32e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f332:	2b00      	cmp	r3, #0
 800f334:	d003      	beq.n	800f33e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f336:	6878      	ldr	r0, [r7, #4]
 800f338:	f7f2 fdc7 	bl	8001eca <HAL_TIM_IC_CaptureCallback>
 800f33c:	e005      	b.n	800f34a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f33e:	6878      	ldr	r0, [r7, #4]
 800f340:	f000 fa22 	bl	800f788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f344:	6878      	ldr	r0, [r7, #4]
 800f346:	f000 fa29 	bl	800f79c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	2200      	movs	r2, #0
 800f34e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	691b      	ldr	r3, [r3, #16]
 800f356:	f003 0301 	and.w	r3, r3, #1
 800f35a:	2b01      	cmp	r3, #1
 800f35c:	d10e      	bne.n	800f37c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	68db      	ldr	r3, [r3, #12]
 800f364:	f003 0301 	and.w	r3, r3, #1
 800f368:	2b01      	cmp	r3, #1
 800f36a:	d107      	bne.n	800f37c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	f06f 0201 	mvn.w	r2, #1
 800f374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f376:	6878      	ldr	r0, [r7, #4]
 800f378:	f7f2 fc58 	bl	8001c2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	691b      	ldr	r3, [r3, #16]
 800f382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f386:	2b80      	cmp	r3, #128	; 0x80
 800f388:	d10e      	bne.n	800f3a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	68db      	ldr	r3, [r3, #12]
 800f390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f394:	2b80      	cmp	r3, #128	; 0x80
 800f396:	d107      	bne.n	800f3a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f3a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f3a2:	6878      	ldr	r0, [r7, #4]
 800f3a4:	f000 fdc4 	bl	800ff30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	691b      	ldr	r3, [r3, #16]
 800f3ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f3b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f3b6:	d10e      	bne.n	800f3d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	68db      	ldr	r3, [r3, #12]
 800f3be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f3c2:	2b80      	cmp	r3, #128	; 0x80
 800f3c4:	d107      	bne.n	800f3d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f3ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f3d0:	6878      	ldr	r0, [r7, #4]
 800f3d2:	f000 fdb7 	bl	800ff44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	691b      	ldr	r3, [r3, #16]
 800f3dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3e0:	2b40      	cmp	r3, #64	; 0x40
 800f3e2:	d10e      	bne.n	800f402 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	68db      	ldr	r3, [r3, #12]
 800f3ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3ee:	2b40      	cmp	r3, #64	; 0x40
 800f3f0:	d107      	bne.n	800f402 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f3fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f3fc:	6878      	ldr	r0, [r7, #4]
 800f3fe:	f000 f9d7 	bl	800f7b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	691b      	ldr	r3, [r3, #16]
 800f408:	f003 0320 	and.w	r3, r3, #32
 800f40c:	2b20      	cmp	r3, #32
 800f40e:	d10e      	bne.n	800f42e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	68db      	ldr	r3, [r3, #12]
 800f416:	f003 0320 	and.w	r3, r3, #32
 800f41a:	2b20      	cmp	r3, #32
 800f41c:	d107      	bne.n	800f42e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	f06f 0220 	mvn.w	r2, #32
 800f426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f428:	6878      	ldr	r0, [r7, #4]
 800f42a:	f000 fd77 	bl	800ff1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f42e:	bf00      	nop
 800f430:	3708      	adds	r7, #8
 800f432:	46bd      	mov	sp, r7
 800f434:	bd80      	pop	{r7, pc}

0800f436 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800f436:	b580      	push	{r7, lr}
 800f438:	b086      	sub	sp, #24
 800f43a:	af00      	add	r7, sp, #0
 800f43c:	60f8      	str	r0, [r7, #12]
 800f43e:	60b9      	str	r1, [r7, #8]
 800f440:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f442:	2300      	movs	r3, #0
 800f444:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f44c:	2b01      	cmp	r3, #1
 800f44e:	d101      	bne.n	800f454 <HAL_TIM_IC_ConfigChannel+0x1e>
 800f450:	2302      	movs	r3, #2
 800f452:	e088      	b.n	800f566 <HAL_TIM_IC_ConfigChannel+0x130>
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	2201      	movs	r2, #1
 800f458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d11b      	bne.n	800f49a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	6818      	ldr	r0, [r3, #0]
 800f466:	68bb      	ldr	r3, [r7, #8]
 800f468:	6819      	ldr	r1, [r3, #0]
 800f46a:	68bb      	ldr	r3, [r7, #8]
 800f46c:	685a      	ldr	r2, [r3, #4]
 800f46e:	68bb      	ldr	r3, [r7, #8]
 800f470:	68db      	ldr	r3, [r3, #12]
 800f472:	f000 fadb 	bl	800fa2c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	699a      	ldr	r2, [r3, #24]
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	f022 020c 	bic.w	r2, r2, #12
 800f484:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	6999      	ldr	r1, [r3, #24]
 800f48c:	68bb      	ldr	r3, [r7, #8]
 800f48e:	689a      	ldr	r2, [r3, #8]
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	430a      	orrs	r2, r1
 800f496:	619a      	str	r2, [r3, #24]
 800f498:	e060      	b.n	800f55c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	2b04      	cmp	r3, #4
 800f49e:	d11c      	bne.n	800f4da <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	6818      	ldr	r0, [r3, #0]
 800f4a4:	68bb      	ldr	r3, [r7, #8]
 800f4a6:	6819      	ldr	r1, [r3, #0]
 800f4a8:	68bb      	ldr	r3, [r7, #8]
 800f4aa:	685a      	ldr	r2, [r3, #4]
 800f4ac:	68bb      	ldr	r3, [r7, #8]
 800f4ae:	68db      	ldr	r3, [r3, #12]
 800f4b0:	f000 fb5f 	bl	800fb72 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	699a      	ldr	r2, [r3, #24]
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800f4c2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	6999      	ldr	r1, [r3, #24]
 800f4ca:	68bb      	ldr	r3, [r7, #8]
 800f4cc:	689b      	ldr	r3, [r3, #8]
 800f4ce:	021a      	lsls	r2, r3, #8
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	430a      	orrs	r2, r1
 800f4d6:	619a      	str	r2, [r3, #24]
 800f4d8:	e040      	b.n	800f55c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	2b08      	cmp	r3, #8
 800f4de:	d11b      	bne.n	800f518 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	6818      	ldr	r0, [r3, #0]
 800f4e4:	68bb      	ldr	r3, [r7, #8]
 800f4e6:	6819      	ldr	r1, [r3, #0]
 800f4e8:	68bb      	ldr	r3, [r7, #8]
 800f4ea:	685a      	ldr	r2, [r3, #4]
 800f4ec:	68bb      	ldr	r3, [r7, #8]
 800f4ee:	68db      	ldr	r3, [r3, #12]
 800f4f0:	f000 fbac 	bl	800fc4c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	69da      	ldr	r2, [r3, #28]
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	f022 020c 	bic.w	r2, r2, #12
 800f502:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	69d9      	ldr	r1, [r3, #28]
 800f50a:	68bb      	ldr	r3, [r7, #8]
 800f50c:	689a      	ldr	r2, [r3, #8]
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	430a      	orrs	r2, r1
 800f514:	61da      	str	r2, [r3, #28]
 800f516:	e021      	b.n	800f55c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	2b0c      	cmp	r3, #12
 800f51c:	d11c      	bne.n	800f558 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	6818      	ldr	r0, [r3, #0]
 800f522:	68bb      	ldr	r3, [r7, #8]
 800f524:	6819      	ldr	r1, [r3, #0]
 800f526:	68bb      	ldr	r3, [r7, #8]
 800f528:	685a      	ldr	r2, [r3, #4]
 800f52a:	68bb      	ldr	r3, [r7, #8]
 800f52c:	68db      	ldr	r3, [r3, #12]
 800f52e:	f000 fbc9 	bl	800fcc4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	69da      	ldr	r2, [r3, #28]
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800f540:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	69d9      	ldr	r1, [r3, #28]
 800f548:	68bb      	ldr	r3, [r7, #8]
 800f54a:	689b      	ldr	r3, [r3, #8]
 800f54c:	021a      	lsls	r2, r3, #8
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	430a      	orrs	r2, r1
 800f554:	61da      	str	r2, [r3, #28]
 800f556:	e001      	b.n	800f55c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800f558:	2301      	movs	r3, #1
 800f55a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	2200      	movs	r2, #0
 800f560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f564:	7dfb      	ldrb	r3, [r7, #23]
}
 800f566:	4618      	mov	r0, r3
 800f568:	3718      	adds	r7, #24
 800f56a:	46bd      	mov	sp, r7
 800f56c:	bd80      	pop	{r7, pc}
	...

0800f570 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f570:	b580      	push	{r7, lr}
 800f572:	b084      	sub	sp, #16
 800f574:	af00      	add	r7, sp, #0
 800f576:	6078      	str	r0, [r7, #4]
 800f578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f57a:	2300      	movs	r3, #0
 800f57c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f584:	2b01      	cmp	r3, #1
 800f586:	d101      	bne.n	800f58c <HAL_TIM_ConfigClockSource+0x1c>
 800f588:	2302      	movs	r3, #2
 800f58a:	e0b4      	b.n	800f6f6 <HAL_TIM_ConfigClockSource+0x186>
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	2201      	movs	r2, #1
 800f590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	2202      	movs	r2, #2
 800f598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	689b      	ldr	r3, [r3, #8]
 800f5a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f5a4:	68ba      	ldr	r2, [r7, #8]
 800f5a6:	4b56      	ldr	r3, [pc, #344]	; (800f700 <HAL_TIM_ConfigClockSource+0x190>)
 800f5a8:	4013      	ands	r3, r2
 800f5aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f5ac:	68bb      	ldr	r3, [r7, #8]
 800f5ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f5b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	68ba      	ldr	r2, [r7, #8]
 800f5ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f5bc:	683b      	ldr	r3, [r7, #0]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f5c4:	d03e      	beq.n	800f644 <HAL_TIM_ConfigClockSource+0xd4>
 800f5c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f5ca:	f200 8087 	bhi.w	800f6dc <HAL_TIM_ConfigClockSource+0x16c>
 800f5ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f5d2:	f000 8086 	beq.w	800f6e2 <HAL_TIM_ConfigClockSource+0x172>
 800f5d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f5da:	d87f      	bhi.n	800f6dc <HAL_TIM_ConfigClockSource+0x16c>
 800f5dc:	2b70      	cmp	r3, #112	; 0x70
 800f5de:	d01a      	beq.n	800f616 <HAL_TIM_ConfigClockSource+0xa6>
 800f5e0:	2b70      	cmp	r3, #112	; 0x70
 800f5e2:	d87b      	bhi.n	800f6dc <HAL_TIM_ConfigClockSource+0x16c>
 800f5e4:	2b60      	cmp	r3, #96	; 0x60
 800f5e6:	d050      	beq.n	800f68a <HAL_TIM_ConfigClockSource+0x11a>
 800f5e8:	2b60      	cmp	r3, #96	; 0x60
 800f5ea:	d877      	bhi.n	800f6dc <HAL_TIM_ConfigClockSource+0x16c>
 800f5ec:	2b50      	cmp	r3, #80	; 0x50
 800f5ee:	d03c      	beq.n	800f66a <HAL_TIM_ConfigClockSource+0xfa>
 800f5f0:	2b50      	cmp	r3, #80	; 0x50
 800f5f2:	d873      	bhi.n	800f6dc <HAL_TIM_ConfigClockSource+0x16c>
 800f5f4:	2b40      	cmp	r3, #64	; 0x40
 800f5f6:	d058      	beq.n	800f6aa <HAL_TIM_ConfigClockSource+0x13a>
 800f5f8:	2b40      	cmp	r3, #64	; 0x40
 800f5fa:	d86f      	bhi.n	800f6dc <HAL_TIM_ConfigClockSource+0x16c>
 800f5fc:	2b30      	cmp	r3, #48	; 0x30
 800f5fe:	d064      	beq.n	800f6ca <HAL_TIM_ConfigClockSource+0x15a>
 800f600:	2b30      	cmp	r3, #48	; 0x30
 800f602:	d86b      	bhi.n	800f6dc <HAL_TIM_ConfigClockSource+0x16c>
 800f604:	2b20      	cmp	r3, #32
 800f606:	d060      	beq.n	800f6ca <HAL_TIM_ConfigClockSource+0x15a>
 800f608:	2b20      	cmp	r3, #32
 800f60a:	d867      	bhi.n	800f6dc <HAL_TIM_ConfigClockSource+0x16c>
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d05c      	beq.n	800f6ca <HAL_TIM_ConfigClockSource+0x15a>
 800f610:	2b10      	cmp	r3, #16
 800f612:	d05a      	beq.n	800f6ca <HAL_TIM_ConfigClockSource+0x15a>
 800f614:	e062      	b.n	800f6dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	6818      	ldr	r0, [r3, #0]
 800f61a:	683b      	ldr	r3, [r7, #0]
 800f61c:	6899      	ldr	r1, [r3, #8]
 800f61e:	683b      	ldr	r3, [r7, #0]
 800f620:	685a      	ldr	r2, [r3, #4]
 800f622:	683b      	ldr	r3, [r7, #0]
 800f624:	68db      	ldr	r3, [r3, #12]
 800f626:	f000 fba5 	bl	800fd74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	689b      	ldr	r3, [r3, #8]
 800f630:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f632:	68bb      	ldr	r3, [r7, #8]
 800f634:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f638:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	68ba      	ldr	r2, [r7, #8]
 800f640:	609a      	str	r2, [r3, #8]
      break;
 800f642:	e04f      	b.n	800f6e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	6818      	ldr	r0, [r3, #0]
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	6899      	ldr	r1, [r3, #8]
 800f64c:	683b      	ldr	r3, [r7, #0]
 800f64e:	685a      	ldr	r2, [r3, #4]
 800f650:	683b      	ldr	r3, [r7, #0]
 800f652:	68db      	ldr	r3, [r3, #12]
 800f654:	f000 fb8e 	bl	800fd74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	689a      	ldr	r2, [r3, #8]
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f666:	609a      	str	r2, [r3, #8]
      break;
 800f668:	e03c      	b.n	800f6e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	6818      	ldr	r0, [r3, #0]
 800f66e:	683b      	ldr	r3, [r7, #0]
 800f670:	6859      	ldr	r1, [r3, #4]
 800f672:	683b      	ldr	r3, [r7, #0]
 800f674:	68db      	ldr	r3, [r3, #12]
 800f676:	461a      	mov	r2, r3
 800f678:	f000 fa4c 	bl	800fb14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	2150      	movs	r1, #80	; 0x50
 800f682:	4618      	mov	r0, r3
 800f684:	f000 fb5b 	bl	800fd3e <TIM_ITRx_SetConfig>
      break;
 800f688:	e02c      	b.n	800f6e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	6818      	ldr	r0, [r3, #0]
 800f68e:	683b      	ldr	r3, [r7, #0]
 800f690:	6859      	ldr	r1, [r3, #4]
 800f692:	683b      	ldr	r3, [r7, #0]
 800f694:	68db      	ldr	r3, [r3, #12]
 800f696:	461a      	mov	r2, r3
 800f698:	f000 faa8 	bl	800fbec <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	2160      	movs	r1, #96	; 0x60
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	f000 fb4b 	bl	800fd3e <TIM_ITRx_SetConfig>
      break;
 800f6a8:	e01c      	b.n	800f6e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	6818      	ldr	r0, [r3, #0]
 800f6ae:	683b      	ldr	r3, [r7, #0]
 800f6b0:	6859      	ldr	r1, [r3, #4]
 800f6b2:	683b      	ldr	r3, [r7, #0]
 800f6b4:	68db      	ldr	r3, [r3, #12]
 800f6b6:	461a      	mov	r2, r3
 800f6b8:	f000 fa2c 	bl	800fb14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	2140      	movs	r1, #64	; 0x40
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	f000 fb3b 	bl	800fd3e <TIM_ITRx_SetConfig>
      break;
 800f6c8:	e00c      	b.n	800f6e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	681a      	ldr	r2, [r3, #0]
 800f6ce:	683b      	ldr	r3, [r7, #0]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	4619      	mov	r1, r3
 800f6d4:	4610      	mov	r0, r2
 800f6d6:	f000 fb32 	bl	800fd3e <TIM_ITRx_SetConfig>
      break;
 800f6da:	e003      	b.n	800f6e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800f6dc:	2301      	movs	r3, #1
 800f6de:	73fb      	strb	r3, [r7, #15]
      break;
 800f6e0:	e000      	b.n	800f6e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800f6e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	2201      	movs	r2, #1
 800f6e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	2200      	movs	r2, #0
 800f6f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f6f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	3710      	adds	r7, #16
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	bd80      	pop	{r7, pc}
 800f6fe:	bf00      	nop
 800f700:	fffeff88 	.word	0xfffeff88

0800f704 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800f704:	b580      	push	{r7, lr}
 800f706:	b082      	sub	sp, #8
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
 800f70c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f714:	2b01      	cmp	r3, #1
 800f716:	d101      	bne.n	800f71c <HAL_TIM_SlaveConfigSynchro+0x18>
 800f718:	2302      	movs	r3, #2
 800f71a:	e031      	b.n	800f780 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	2201      	movs	r2, #1
 800f720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	2202      	movs	r2, #2
 800f728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800f72c:	6839      	ldr	r1, [r7, #0]
 800f72e:	6878      	ldr	r0, [r7, #4]
 800f730:	f000 f8e8 	bl	800f904 <TIM_SlaveTimer_SetConfig>
 800f734:	4603      	mov	r3, r0
 800f736:	2b00      	cmp	r3, #0
 800f738:	d009      	beq.n	800f74e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	2201      	movs	r2, #1
 800f73e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	2200      	movs	r2, #0
 800f746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800f74a:	2301      	movs	r3, #1
 800f74c:	e018      	b.n	800f780 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	68da      	ldr	r2, [r3, #12]
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f75c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	68da      	ldr	r2, [r3, #12]
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800f76c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	2201      	movs	r2, #1
 800f772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	2200      	movs	r2, #0
 800f77a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f77e:	2300      	movs	r3, #0
}
 800f780:	4618      	mov	r0, r3
 800f782:	3708      	adds	r7, #8
 800f784:	46bd      	mov	sp, r7
 800f786:	bd80      	pop	{r7, pc}

0800f788 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f788:	b480      	push	{r7}
 800f78a:	b083      	sub	sp, #12
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f790:	bf00      	nop
 800f792:	370c      	adds	r7, #12
 800f794:	46bd      	mov	sp, r7
 800f796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79a:	4770      	bx	lr

0800f79c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f79c:	b480      	push	{r7}
 800f79e:	b083      	sub	sp, #12
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f7a4:	bf00      	nop
 800f7a6:	370c      	adds	r7, #12
 800f7a8:	46bd      	mov	sp, r7
 800f7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ae:	4770      	bx	lr

0800f7b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f7b0:	b480      	push	{r7}
 800f7b2:	b083      	sub	sp, #12
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f7b8:	bf00      	nop
 800f7ba:	370c      	adds	r7, #12
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c2:	4770      	bx	lr

0800f7c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f7c4:	b480      	push	{r7}
 800f7c6:	b085      	sub	sp, #20
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	6078      	str	r0, [r7, #4]
 800f7cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	4a40      	ldr	r2, [pc, #256]	; (800f8d8 <TIM_Base_SetConfig+0x114>)
 800f7d8:	4293      	cmp	r3, r2
 800f7da:	d013      	beq.n	800f804 <TIM_Base_SetConfig+0x40>
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f7e2:	d00f      	beq.n	800f804 <TIM_Base_SetConfig+0x40>
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	4a3d      	ldr	r2, [pc, #244]	; (800f8dc <TIM_Base_SetConfig+0x118>)
 800f7e8:	4293      	cmp	r3, r2
 800f7ea:	d00b      	beq.n	800f804 <TIM_Base_SetConfig+0x40>
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	4a3c      	ldr	r2, [pc, #240]	; (800f8e0 <TIM_Base_SetConfig+0x11c>)
 800f7f0:	4293      	cmp	r3, r2
 800f7f2:	d007      	beq.n	800f804 <TIM_Base_SetConfig+0x40>
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	4a3b      	ldr	r2, [pc, #236]	; (800f8e4 <TIM_Base_SetConfig+0x120>)
 800f7f8:	4293      	cmp	r3, r2
 800f7fa:	d003      	beq.n	800f804 <TIM_Base_SetConfig+0x40>
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	4a3a      	ldr	r2, [pc, #232]	; (800f8e8 <TIM_Base_SetConfig+0x124>)
 800f800:	4293      	cmp	r3, r2
 800f802:	d108      	bne.n	800f816 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f80a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f80c:	683b      	ldr	r3, [r7, #0]
 800f80e:	685b      	ldr	r3, [r3, #4]
 800f810:	68fa      	ldr	r2, [r7, #12]
 800f812:	4313      	orrs	r3, r2
 800f814:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	4a2f      	ldr	r2, [pc, #188]	; (800f8d8 <TIM_Base_SetConfig+0x114>)
 800f81a:	4293      	cmp	r3, r2
 800f81c:	d02b      	beq.n	800f876 <TIM_Base_SetConfig+0xb2>
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f824:	d027      	beq.n	800f876 <TIM_Base_SetConfig+0xb2>
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	4a2c      	ldr	r2, [pc, #176]	; (800f8dc <TIM_Base_SetConfig+0x118>)
 800f82a:	4293      	cmp	r3, r2
 800f82c:	d023      	beq.n	800f876 <TIM_Base_SetConfig+0xb2>
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	4a2b      	ldr	r2, [pc, #172]	; (800f8e0 <TIM_Base_SetConfig+0x11c>)
 800f832:	4293      	cmp	r3, r2
 800f834:	d01f      	beq.n	800f876 <TIM_Base_SetConfig+0xb2>
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	4a2a      	ldr	r2, [pc, #168]	; (800f8e4 <TIM_Base_SetConfig+0x120>)
 800f83a:	4293      	cmp	r3, r2
 800f83c:	d01b      	beq.n	800f876 <TIM_Base_SetConfig+0xb2>
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	4a29      	ldr	r2, [pc, #164]	; (800f8e8 <TIM_Base_SetConfig+0x124>)
 800f842:	4293      	cmp	r3, r2
 800f844:	d017      	beq.n	800f876 <TIM_Base_SetConfig+0xb2>
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	4a28      	ldr	r2, [pc, #160]	; (800f8ec <TIM_Base_SetConfig+0x128>)
 800f84a:	4293      	cmp	r3, r2
 800f84c:	d013      	beq.n	800f876 <TIM_Base_SetConfig+0xb2>
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	4a27      	ldr	r2, [pc, #156]	; (800f8f0 <TIM_Base_SetConfig+0x12c>)
 800f852:	4293      	cmp	r3, r2
 800f854:	d00f      	beq.n	800f876 <TIM_Base_SetConfig+0xb2>
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	4a26      	ldr	r2, [pc, #152]	; (800f8f4 <TIM_Base_SetConfig+0x130>)
 800f85a:	4293      	cmp	r3, r2
 800f85c:	d00b      	beq.n	800f876 <TIM_Base_SetConfig+0xb2>
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	4a25      	ldr	r2, [pc, #148]	; (800f8f8 <TIM_Base_SetConfig+0x134>)
 800f862:	4293      	cmp	r3, r2
 800f864:	d007      	beq.n	800f876 <TIM_Base_SetConfig+0xb2>
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	4a24      	ldr	r2, [pc, #144]	; (800f8fc <TIM_Base_SetConfig+0x138>)
 800f86a:	4293      	cmp	r3, r2
 800f86c:	d003      	beq.n	800f876 <TIM_Base_SetConfig+0xb2>
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	4a23      	ldr	r2, [pc, #140]	; (800f900 <TIM_Base_SetConfig+0x13c>)
 800f872:	4293      	cmp	r3, r2
 800f874:	d108      	bne.n	800f888 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f87c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f87e:	683b      	ldr	r3, [r7, #0]
 800f880:	68db      	ldr	r3, [r3, #12]
 800f882:	68fa      	ldr	r2, [r7, #12]
 800f884:	4313      	orrs	r3, r2
 800f886:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f88e:	683b      	ldr	r3, [r7, #0]
 800f890:	695b      	ldr	r3, [r3, #20]
 800f892:	4313      	orrs	r3, r2
 800f894:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	68fa      	ldr	r2, [r7, #12]
 800f89a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f89c:	683b      	ldr	r3, [r7, #0]
 800f89e:	689a      	ldr	r2, [r3, #8]
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f8a4:	683b      	ldr	r3, [r7, #0]
 800f8a6:	681a      	ldr	r2, [r3, #0]
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	4a0a      	ldr	r2, [pc, #40]	; (800f8d8 <TIM_Base_SetConfig+0x114>)
 800f8b0:	4293      	cmp	r3, r2
 800f8b2:	d003      	beq.n	800f8bc <TIM_Base_SetConfig+0xf8>
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	4a0c      	ldr	r2, [pc, #48]	; (800f8e8 <TIM_Base_SetConfig+0x124>)
 800f8b8:	4293      	cmp	r3, r2
 800f8ba:	d103      	bne.n	800f8c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f8bc:	683b      	ldr	r3, [r7, #0]
 800f8be:	691a      	ldr	r2, [r3, #16]
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	2201      	movs	r2, #1
 800f8c8:	615a      	str	r2, [r3, #20]
}
 800f8ca:	bf00      	nop
 800f8cc:	3714      	adds	r7, #20
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d4:	4770      	bx	lr
 800f8d6:	bf00      	nop
 800f8d8:	40010000 	.word	0x40010000
 800f8dc:	40000400 	.word	0x40000400
 800f8e0:	40000800 	.word	0x40000800
 800f8e4:	40000c00 	.word	0x40000c00
 800f8e8:	40010400 	.word	0x40010400
 800f8ec:	40014000 	.word	0x40014000
 800f8f0:	40014400 	.word	0x40014400
 800f8f4:	40014800 	.word	0x40014800
 800f8f8:	40001800 	.word	0x40001800
 800f8fc:	40001c00 	.word	0x40001c00
 800f900:	40002000 	.word	0x40002000

0800f904 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800f904:	b580      	push	{r7, lr}
 800f906:	b086      	sub	sp, #24
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
 800f90c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f90e:	2300      	movs	r3, #0
 800f910:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	689b      	ldr	r3, [r3, #8]
 800f918:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f91a:	693b      	ldr	r3, [r7, #16]
 800f91c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f920:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800f922:	683b      	ldr	r3, [r7, #0]
 800f924:	685b      	ldr	r3, [r3, #4]
 800f926:	693a      	ldr	r2, [r7, #16]
 800f928:	4313      	orrs	r3, r2
 800f92a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800f92c:	693a      	ldr	r2, [r7, #16]
 800f92e:	4b3e      	ldr	r3, [pc, #248]	; (800fa28 <TIM_SlaveTimer_SetConfig+0x124>)
 800f930:	4013      	ands	r3, r2
 800f932:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800f934:	683b      	ldr	r3, [r7, #0]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	693a      	ldr	r2, [r7, #16]
 800f93a:	4313      	orrs	r3, r2
 800f93c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	693a      	ldr	r2, [r7, #16]
 800f944:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800f946:	683b      	ldr	r3, [r7, #0]
 800f948:	685b      	ldr	r3, [r3, #4]
 800f94a:	2b70      	cmp	r3, #112	; 0x70
 800f94c:	d01a      	beq.n	800f984 <TIM_SlaveTimer_SetConfig+0x80>
 800f94e:	2b70      	cmp	r3, #112	; 0x70
 800f950:	d860      	bhi.n	800fa14 <TIM_SlaveTimer_SetConfig+0x110>
 800f952:	2b60      	cmp	r3, #96	; 0x60
 800f954:	d054      	beq.n	800fa00 <TIM_SlaveTimer_SetConfig+0xfc>
 800f956:	2b60      	cmp	r3, #96	; 0x60
 800f958:	d85c      	bhi.n	800fa14 <TIM_SlaveTimer_SetConfig+0x110>
 800f95a:	2b50      	cmp	r3, #80	; 0x50
 800f95c:	d046      	beq.n	800f9ec <TIM_SlaveTimer_SetConfig+0xe8>
 800f95e:	2b50      	cmp	r3, #80	; 0x50
 800f960:	d858      	bhi.n	800fa14 <TIM_SlaveTimer_SetConfig+0x110>
 800f962:	2b40      	cmp	r3, #64	; 0x40
 800f964:	d019      	beq.n	800f99a <TIM_SlaveTimer_SetConfig+0x96>
 800f966:	2b40      	cmp	r3, #64	; 0x40
 800f968:	d854      	bhi.n	800fa14 <TIM_SlaveTimer_SetConfig+0x110>
 800f96a:	2b30      	cmp	r3, #48	; 0x30
 800f96c:	d055      	beq.n	800fa1a <TIM_SlaveTimer_SetConfig+0x116>
 800f96e:	2b30      	cmp	r3, #48	; 0x30
 800f970:	d850      	bhi.n	800fa14 <TIM_SlaveTimer_SetConfig+0x110>
 800f972:	2b20      	cmp	r3, #32
 800f974:	d051      	beq.n	800fa1a <TIM_SlaveTimer_SetConfig+0x116>
 800f976:	2b20      	cmp	r3, #32
 800f978:	d84c      	bhi.n	800fa14 <TIM_SlaveTimer_SetConfig+0x110>
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d04d      	beq.n	800fa1a <TIM_SlaveTimer_SetConfig+0x116>
 800f97e:	2b10      	cmp	r3, #16
 800f980:	d04b      	beq.n	800fa1a <TIM_SlaveTimer_SetConfig+0x116>
 800f982:	e047      	b.n	800fa14 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	6818      	ldr	r0, [r3, #0]
 800f988:	683b      	ldr	r3, [r7, #0]
 800f98a:	68d9      	ldr	r1, [r3, #12]
 800f98c:	683b      	ldr	r3, [r7, #0]
 800f98e:	689a      	ldr	r2, [r3, #8]
 800f990:	683b      	ldr	r3, [r7, #0]
 800f992:	691b      	ldr	r3, [r3, #16]
 800f994:	f000 f9ee 	bl	800fd74 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800f998:	e040      	b.n	800fa1c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800f99a:	683b      	ldr	r3, [r7, #0]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	2b05      	cmp	r3, #5
 800f9a0:	d101      	bne.n	800f9a6 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800f9a2:	2301      	movs	r3, #1
 800f9a4:	e03b      	b.n	800fa1e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	6a1b      	ldr	r3, [r3, #32]
 800f9ac:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	6a1a      	ldr	r2, [r3, #32]
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	f022 0201 	bic.w	r2, r2, #1
 800f9bc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	699b      	ldr	r3, [r3, #24]
 800f9c4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f9c6:	68bb      	ldr	r3, [r7, #8]
 800f9c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f9cc:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800f9ce:	683b      	ldr	r3, [r7, #0]
 800f9d0:	691b      	ldr	r3, [r3, #16]
 800f9d2:	011b      	lsls	r3, r3, #4
 800f9d4:	68ba      	ldr	r2, [r7, #8]
 800f9d6:	4313      	orrs	r3, r2
 800f9d8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	68ba      	ldr	r2, [r7, #8]
 800f9e0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	68fa      	ldr	r2, [r7, #12]
 800f9e8:	621a      	str	r2, [r3, #32]
      break;
 800f9ea:	e017      	b.n	800fa1c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	6818      	ldr	r0, [r3, #0]
 800f9f0:	683b      	ldr	r3, [r7, #0]
 800f9f2:	6899      	ldr	r1, [r3, #8]
 800f9f4:	683b      	ldr	r3, [r7, #0]
 800f9f6:	691b      	ldr	r3, [r3, #16]
 800f9f8:	461a      	mov	r2, r3
 800f9fa:	f000 f88b 	bl	800fb14 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800f9fe:	e00d      	b.n	800fa1c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	6818      	ldr	r0, [r3, #0]
 800fa04:	683b      	ldr	r3, [r7, #0]
 800fa06:	6899      	ldr	r1, [r3, #8]
 800fa08:	683b      	ldr	r3, [r7, #0]
 800fa0a:	691b      	ldr	r3, [r3, #16]
 800fa0c:	461a      	mov	r2, r3
 800fa0e:	f000 f8ed 	bl	800fbec <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800fa12:	e003      	b.n	800fa1c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800fa14:	2301      	movs	r3, #1
 800fa16:	75fb      	strb	r3, [r7, #23]
      break;
 800fa18:	e000      	b.n	800fa1c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800fa1a:	bf00      	nop
  }

  return status;
 800fa1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa1e:	4618      	mov	r0, r3
 800fa20:	3718      	adds	r7, #24
 800fa22:	46bd      	mov	sp, r7
 800fa24:	bd80      	pop	{r7, pc}
 800fa26:	bf00      	nop
 800fa28:	fffefff8 	.word	0xfffefff8

0800fa2c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800fa2c:	b480      	push	{r7}
 800fa2e:	b087      	sub	sp, #28
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	60f8      	str	r0, [r7, #12]
 800fa34:	60b9      	str	r1, [r7, #8]
 800fa36:	607a      	str	r2, [r7, #4]
 800fa38:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	6a1b      	ldr	r3, [r3, #32]
 800fa3e:	f023 0201 	bic.w	r2, r3, #1
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	699b      	ldr	r3, [r3, #24]
 800fa4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	6a1b      	ldr	r3, [r3, #32]
 800fa50:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	4a28      	ldr	r2, [pc, #160]	; (800faf8 <TIM_TI1_SetConfig+0xcc>)
 800fa56:	4293      	cmp	r3, r2
 800fa58:	d01b      	beq.n	800fa92 <TIM_TI1_SetConfig+0x66>
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fa60:	d017      	beq.n	800fa92 <TIM_TI1_SetConfig+0x66>
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	4a25      	ldr	r2, [pc, #148]	; (800fafc <TIM_TI1_SetConfig+0xd0>)
 800fa66:	4293      	cmp	r3, r2
 800fa68:	d013      	beq.n	800fa92 <TIM_TI1_SetConfig+0x66>
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	4a24      	ldr	r2, [pc, #144]	; (800fb00 <TIM_TI1_SetConfig+0xd4>)
 800fa6e:	4293      	cmp	r3, r2
 800fa70:	d00f      	beq.n	800fa92 <TIM_TI1_SetConfig+0x66>
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	4a23      	ldr	r2, [pc, #140]	; (800fb04 <TIM_TI1_SetConfig+0xd8>)
 800fa76:	4293      	cmp	r3, r2
 800fa78:	d00b      	beq.n	800fa92 <TIM_TI1_SetConfig+0x66>
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	4a22      	ldr	r2, [pc, #136]	; (800fb08 <TIM_TI1_SetConfig+0xdc>)
 800fa7e:	4293      	cmp	r3, r2
 800fa80:	d007      	beq.n	800fa92 <TIM_TI1_SetConfig+0x66>
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	4a21      	ldr	r2, [pc, #132]	; (800fb0c <TIM_TI1_SetConfig+0xe0>)
 800fa86:	4293      	cmp	r3, r2
 800fa88:	d003      	beq.n	800fa92 <TIM_TI1_SetConfig+0x66>
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	4a20      	ldr	r2, [pc, #128]	; (800fb10 <TIM_TI1_SetConfig+0xe4>)
 800fa8e:	4293      	cmp	r3, r2
 800fa90:	d101      	bne.n	800fa96 <TIM_TI1_SetConfig+0x6a>
 800fa92:	2301      	movs	r3, #1
 800fa94:	e000      	b.n	800fa98 <TIM_TI1_SetConfig+0x6c>
 800fa96:	2300      	movs	r3, #0
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d008      	beq.n	800faae <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800fa9c:	697b      	ldr	r3, [r7, #20]
 800fa9e:	f023 0303 	bic.w	r3, r3, #3
 800faa2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800faa4:	697a      	ldr	r2, [r7, #20]
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	4313      	orrs	r3, r2
 800faaa:	617b      	str	r3, [r7, #20]
 800faac:	e003      	b.n	800fab6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800faae:	697b      	ldr	r3, [r7, #20]
 800fab0:	f043 0301 	orr.w	r3, r3, #1
 800fab4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fab6:	697b      	ldr	r3, [r7, #20]
 800fab8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fabc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800fabe:	683b      	ldr	r3, [r7, #0]
 800fac0:	011b      	lsls	r3, r3, #4
 800fac2:	b2db      	uxtb	r3, r3
 800fac4:	697a      	ldr	r2, [r7, #20]
 800fac6:	4313      	orrs	r3, r2
 800fac8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800faca:	693b      	ldr	r3, [r7, #16]
 800facc:	f023 030a 	bic.w	r3, r3, #10
 800fad0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800fad2:	68bb      	ldr	r3, [r7, #8]
 800fad4:	f003 030a 	and.w	r3, r3, #10
 800fad8:	693a      	ldr	r2, [r7, #16]
 800fada:	4313      	orrs	r3, r2
 800fadc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	697a      	ldr	r2, [r7, #20]
 800fae2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	693a      	ldr	r2, [r7, #16]
 800fae8:	621a      	str	r2, [r3, #32]
}
 800faea:	bf00      	nop
 800faec:	371c      	adds	r7, #28
 800faee:	46bd      	mov	sp, r7
 800faf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf4:	4770      	bx	lr
 800faf6:	bf00      	nop
 800faf8:	40010000 	.word	0x40010000
 800fafc:	40000400 	.word	0x40000400
 800fb00:	40000800 	.word	0x40000800
 800fb04:	40000c00 	.word	0x40000c00
 800fb08:	40010400 	.word	0x40010400
 800fb0c:	40014000 	.word	0x40014000
 800fb10:	40001800 	.word	0x40001800

0800fb14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fb14:	b480      	push	{r7}
 800fb16:	b087      	sub	sp, #28
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	60f8      	str	r0, [r7, #12]
 800fb1c:	60b9      	str	r1, [r7, #8]
 800fb1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	6a1b      	ldr	r3, [r3, #32]
 800fb24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	6a1b      	ldr	r3, [r3, #32]
 800fb2a:	f023 0201 	bic.w	r2, r3, #1
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	699b      	ldr	r3, [r3, #24]
 800fb36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fb38:	693b      	ldr	r3, [r7, #16]
 800fb3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fb3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	011b      	lsls	r3, r3, #4
 800fb44:	693a      	ldr	r2, [r7, #16]
 800fb46:	4313      	orrs	r3, r2
 800fb48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fb4a:	697b      	ldr	r3, [r7, #20]
 800fb4c:	f023 030a 	bic.w	r3, r3, #10
 800fb50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fb52:	697a      	ldr	r2, [r7, #20]
 800fb54:	68bb      	ldr	r3, [r7, #8]
 800fb56:	4313      	orrs	r3, r2
 800fb58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	693a      	ldr	r2, [r7, #16]
 800fb5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	697a      	ldr	r2, [r7, #20]
 800fb64:	621a      	str	r2, [r3, #32]
}
 800fb66:	bf00      	nop
 800fb68:	371c      	adds	r7, #28
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb70:	4770      	bx	lr

0800fb72 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800fb72:	b480      	push	{r7}
 800fb74:	b087      	sub	sp, #28
 800fb76:	af00      	add	r7, sp, #0
 800fb78:	60f8      	str	r0, [r7, #12]
 800fb7a:	60b9      	str	r1, [r7, #8]
 800fb7c:	607a      	str	r2, [r7, #4]
 800fb7e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	6a1b      	ldr	r3, [r3, #32]
 800fb84:	f023 0210 	bic.w	r2, r3, #16
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	699b      	ldr	r3, [r3, #24]
 800fb90:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	6a1b      	ldr	r3, [r3, #32]
 800fb96:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800fb98:	697b      	ldr	r3, [r7, #20]
 800fb9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fb9e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	021b      	lsls	r3, r3, #8
 800fba4:	697a      	ldr	r2, [r7, #20]
 800fba6:	4313      	orrs	r3, r2
 800fba8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fbaa:	697b      	ldr	r3, [r7, #20]
 800fbac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fbb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800fbb2:	683b      	ldr	r3, [r7, #0]
 800fbb4:	031b      	lsls	r3, r3, #12
 800fbb6:	b29b      	uxth	r3, r3
 800fbb8:	697a      	ldr	r2, [r7, #20]
 800fbba:	4313      	orrs	r3, r2
 800fbbc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fbbe:	693b      	ldr	r3, [r7, #16]
 800fbc0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fbc4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800fbc6:	68bb      	ldr	r3, [r7, #8]
 800fbc8:	011b      	lsls	r3, r3, #4
 800fbca:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800fbce:	693a      	ldr	r2, [r7, #16]
 800fbd0:	4313      	orrs	r3, r2
 800fbd2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	697a      	ldr	r2, [r7, #20]
 800fbd8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	693a      	ldr	r2, [r7, #16]
 800fbde:	621a      	str	r2, [r3, #32]
}
 800fbe0:	bf00      	nop
 800fbe2:	371c      	adds	r7, #28
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbea:	4770      	bx	lr

0800fbec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fbec:	b480      	push	{r7}
 800fbee:	b087      	sub	sp, #28
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	60f8      	str	r0, [r7, #12]
 800fbf4:	60b9      	str	r1, [r7, #8]
 800fbf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	6a1b      	ldr	r3, [r3, #32]
 800fbfc:	f023 0210 	bic.w	r2, r3, #16
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	699b      	ldr	r3, [r3, #24]
 800fc08:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	6a1b      	ldr	r3, [r3, #32]
 800fc0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fc10:	697b      	ldr	r3, [r7, #20]
 800fc12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fc16:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	031b      	lsls	r3, r3, #12
 800fc1c:	697a      	ldr	r2, [r7, #20]
 800fc1e:	4313      	orrs	r3, r2
 800fc20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fc22:	693b      	ldr	r3, [r7, #16]
 800fc24:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fc28:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fc2a:	68bb      	ldr	r3, [r7, #8]
 800fc2c:	011b      	lsls	r3, r3, #4
 800fc2e:	693a      	ldr	r2, [r7, #16]
 800fc30:	4313      	orrs	r3, r2
 800fc32:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	697a      	ldr	r2, [r7, #20]
 800fc38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	693a      	ldr	r2, [r7, #16]
 800fc3e:	621a      	str	r2, [r3, #32]
}
 800fc40:	bf00      	nop
 800fc42:	371c      	adds	r7, #28
 800fc44:	46bd      	mov	sp, r7
 800fc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc4a:	4770      	bx	lr

0800fc4c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800fc4c:	b480      	push	{r7}
 800fc4e:	b087      	sub	sp, #28
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	60f8      	str	r0, [r7, #12]
 800fc54:	60b9      	str	r1, [r7, #8]
 800fc56:	607a      	str	r2, [r7, #4]
 800fc58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	6a1b      	ldr	r3, [r3, #32]
 800fc5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	69db      	ldr	r3, [r3, #28]
 800fc6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	6a1b      	ldr	r3, [r3, #32]
 800fc70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800fc72:	697b      	ldr	r3, [r7, #20]
 800fc74:	f023 0303 	bic.w	r3, r3, #3
 800fc78:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800fc7a:	697a      	ldr	r2, [r7, #20]
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	4313      	orrs	r3, r2
 800fc80:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800fc82:	697b      	ldr	r3, [r7, #20]
 800fc84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fc88:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800fc8a:	683b      	ldr	r3, [r7, #0]
 800fc8c:	011b      	lsls	r3, r3, #4
 800fc8e:	b2db      	uxtb	r3, r3
 800fc90:	697a      	ldr	r2, [r7, #20]
 800fc92:	4313      	orrs	r3, r2
 800fc94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800fc96:	693b      	ldr	r3, [r7, #16]
 800fc98:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800fc9c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800fc9e:	68bb      	ldr	r3, [r7, #8]
 800fca0:	021b      	lsls	r3, r3, #8
 800fca2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800fca6:	693a      	ldr	r2, [r7, #16]
 800fca8:	4313      	orrs	r3, r2
 800fcaa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	697a      	ldr	r2, [r7, #20]
 800fcb0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	693a      	ldr	r2, [r7, #16]
 800fcb6:	621a      	str	r2, [r3, #32]
}
 800fcb8:	bf00      	nop
 800fcba:	371c      	adds	r7, #28
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc2:	4770      	bx	lr

0800fcc4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800fcc4:	b480      	push	{r7}
 800fcc6:	b087      	sub	sp, #28
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	60f8      	str	r0, [r7, #12]
 800fccc:	60b9      	str	r1, [r7, #8]
 800fcce:	607a      	str	r2, [r7, #4]
 800fcd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	6a1b      	ldr	r3, [r3, #32]
 800fcd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	69db      	ldr	r3, [r3, #28]
 800fce2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	6a1b      	ldr	r3, [r3, #32]
 800fce8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800fcea:	697b      	ldr	r3, [r7, #20]
 800fcec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fcf0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	021b      	lsls	r3, r3, #8
 800fcf6:	697a      	ldr	r2, [r7, #20]
 800fcf8:	4313      	orrs	r3, r2
 800fcfa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800fcfc:	697b      	ldr	r3, [r7, #20]
 800fcfe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fd02:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800fd04:	683b      	ldr	r3, [r7, #0]
 800fd06:	031b      	lsls	r3, r3, #12
 800fd08:	b29b      	uxth	r3, r3
 800fd0a:	697a      	ldr	r2, [r7, #20]
 800fd0c:	4313      	orrs	r3, r2
 800fd0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800fd10:	693b      	ldr	r3, [r7, #16]
 800fd12:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800fd16:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800fd18:	68bb      	ldr	r3, [r7, #8]
 800fd1a:	031b      	lsls	r3, r3, #12
 800fd1c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800fd20:	693a      	ldr	r2, [r7, #16]
 800fd22:	4313      	orrs	r3, r2
 800fd24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	697a      	ldr	r2, [r7, #20]
 800fd2a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	693a      	ldr	r2, [r7, #16]
 800fd30:	621a      	str	r2, [r3, #32]
}
 800fd32:	bf00      	nop
 800fd34:	371c      	adds	r7, #28
 800fd36:	46bd      	mov	sp, r7
 800fd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd3c:	4770      	bx	lr

0800fd3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fd3e:	b480      	push	{r7}
 800fd40:	b085      	sub	sp, #20
 800fd42:	af00      	add	r7, sp, #0
 800fd44:	6078      	str	r0, [r7, #4]
 800fd46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	689b      	ldr	r3, [r3, #8]
 800fd4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fd56:	683a      	ldr	r2, [r7, #0]
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	4313      	orrs	r3, r2
 800fd5c:	f043 0307 	orr.w	r3, r3, #7
 800fd60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	68fa      	ldr	r2, [r7, #12]
 800fd66:	609a      	str	r2, [r3, #8]
}
 800fd68:	bf00      	nop
 800fd6a:	3714      	adds	r7, #20
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd72:	4770      	bx	lr

0800fd74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fd74:	b480      	push	{r7}
 800fd76:	b087      	sub	sp, #28
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	60f8      	str	r0, [r7, #12]
 800fd7c:	60b9      	str	r1, [r7, #8]
 800fd7e:	607a      	str	r2, [r7, #4]
 800fd80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	689b      	ldr	r3, [r3, #8]
 800fd86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fd88:	697b      	ldr	r3, [r7, #20]
 800fd8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fd8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fd90:	683b      	ldr	r3, [r7, #0]
 800fd92:	021a      	lsls	r2, r3, #8
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	431a      	orrs	r2, r3
 800fd98:	68bb      	ldr	r3, [r7, #8]
 800fd9a:	4313      	orrs	r3, r2
 800fd9c:	697a      	ldr	r2, [r7, #20]
 800fd9e:	4313      	orrs	r3, r2
 800fda0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	697a      	ldr	r2, [r7, #20]
 800fda6:	609a      	str	r2, [r3, #8]
}
 800fda8:	bf00      	nop
 800fdaa:	371c      	adds	r7, #28
 800fdac:	46bd      	mov	sp, r7
 800fdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb2:	4770      	bx	lr

0800fdb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fdb4:	b480      	push	{r7}
 800fdb6:	b087      	sub	sp, #28
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	60f8      	str	r0, [r7, #12]
 800fdbc:	60b9      	str	r1, [r7, #8]
 800fdbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fdc0:	68bb      	ldr	r3, [r7, #8]
 800fdc2:	f003 031f 	and.w	r3, r3, #31
 800fdc6:	2201      	movs	r2, #1
 800fdc8:	fa02 f303 	lsl.w	r3, r2, r3
 800fdcc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	6a1a      	ldr	r2, [r3, #32]
 800fdd2:	697b      	ldr	r3, [r7, #20]
 800fdd4:	43db      	mvns	r3, r3
 800fdd6:	401a      	ands	r2, r3
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	6a1a      	ldr	r2, [r3, #32]
 800fde0:	68bb      	ldr	r3, [r7, #8]
 800fde2:	f003 031f 	and.w	r3, r3, #31
 800fde6:	6879      	ldr	r1, [r7, #4]
 800fde8:	fa01 f303 	lsl.w	r3, r1, r3
 800fdec:	431a      	orrs	r2, r3
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	621a      	str	r2, [r3, #32]
}
 800fdf2:	bf00      	nop
 800fdf4:	371c      	adds	r7, #28
 800fdf6:	46bd      	mov	sp, r7
 800fdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdfc:	4770      	bx	lr
	...

0800fe00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fe00:	b480      	push	{r7}
 800fe02:	b085      	sub	sp, #20
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	6078      	str	r0, [r7, #4]
 800fe08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fe10:	2b01      	cmp	r3, #1
 800fe12:	d101      	bne.n	800fe18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fe14:	2302      	movs	r3, #2
 800fe16:	e06d      	b.n	800fef4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	2201      	movs	r2, #1
 800fe1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	2202      	movs	r2, #2
 800fe24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	685b      	ldr	r3, [r3, #4]
 800fe2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	689b      	ldr	r3, [r3, #8]
 800fe36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	4a30      	ldr	r2, [pc, #192]	; (800ff00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fe3e:	4293      	cmp	r3, r2
 800fe40:	d004      	beq.n	800fe4c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	4a2f      	ldr	r2, [pc, #188]	; (800ff04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fe48:	4293      	cmp	r3, r2
 800fe4a:	d108      	bne.n	800fe5e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fe52:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fe54:	683b      	ldr	r3, [r7, #0]
 800fe56:	685b      	ldr	r3, [r3, #4]
 800fe58:	68fa      	ldr	r2, [r7, #12]
 800fe5a:	4313      	orrs	r3, r2
 800fe5c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fe64:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fe66:	683b      	ldr	r3, [r7, #0]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	68fa      	ldr	r2, [r7, #12]
 800fe6c:	4313      	orrs	r3, r2
 800fe6e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	68fa      	ldr	r2, [r7, #12]
 800fe76:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	4a20      	ldr	r2, [pc, #128]	; (800ff00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fe7e:	4293      	cmp	r3, r2
 800fe80:	d022      	beq.n	800fec8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fe8a:	d01d      	beq.n	800fec8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	4a1d      	ldr	r2, [pc, #116]	; (800ff08 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800fe92:	4293      	cmp	r3, r2
 800fe94:	d018      	beq.n	800fec8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	4a1c      	ldr	r2, [pc, #112]	; (800ff0c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800fe9c:	4293      	cmp	r3, r2
 800fe9e:	d013      	beq.n	800fec8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	4a1a      	ldr	r2, [pc, #104]	; (800ff10 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fea6:	4293      	cmp	r3, r2
 800fea8:	d00e      	beq.n	800fec8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	4a15      	ldr	r2, [pc, #84]	; (800ff04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800feb0:	4293      	cmp	r3, r2
 800feb2:	d009      	beq.n	800fec8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	4a16      	ldr	r2, [pc, #88]	; (800ff14 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800feba:	4293      	cmp	r3, r2
 800febc:	d004      	beq.n	800fec8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	4a15      	ldr	r2, [pc, #84]	; (800ff18 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fec4:	4293      	cmp	r3, r2
 800fec6:	d10c      	bne.n	800fee2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fec8:	68bb      	ldr	r3, [r7, #8]
 800feca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fece:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fed0:	683b      	ldr	r3, [r7, #0]
 800fed2:	689b      	ldr	r3, [r3, #8]
 800fed4:	68ba      	ldr	r2, [r7, #8]
 800fed6:	4313      	orrs	r3, r2
 800fed8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	68ba      	ldr	r2, [r7, #8]
 800fee0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	2201      	movs	r2, #1
 800fee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	2200      	movs	r2, #0
 800feee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fef2:	2300      	movs	r3, #0
}
 800fef4:	4618      	mov	r0, r3
 800fef6:	3714      	adds	r7, #20
 800fef8:	46bd      	mov	sp, r7
 800fefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fefe:	4770      	bx	lr
 800ff00:	40010000 	.word	0x40010000
 800ff04:	40010400 	.word	0x40010400
 800ff08:	40000400 	.word	0x40000400
 800ff0c:	40000800 	.word	0x40000800
 800ff10:	40000c00 	.word	0x40000c00
 800ff14:	40014000 	.word	0x40014000
 800ff18:	40001800 	.word	0x40001800

0800ff1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ff1c:	b480      	push	{r7}
 800ff1e:	b083      	sub	sp, #12
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ff24:	bf00      	nop
 800ff26:	370c      	adds	r7, #12
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2e:	4770      	bx	lr

0800ff30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ff30:	b480      	push	{r7}
 800ff32:	b083      	sub	sp, #12
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ff38:	bf00      	nop
 800ff3a:	370c      	adds	r7, #12
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff42:	4770      	bx	lr

0800ff44 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ff44:	b480      	push	{r7}
 800ff46:	b083      	sub	sp, #12
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ff4c:	bf00      	nop
 800ff4e:	370c      	adds	r7, #12
 800ff50:	46bd      	mov	sp, r7
 800ff52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff56:	4770      	bx	lr

0800ff58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b082      	sub	sp, #8
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d101      	bne.n	800ff6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ff66:	2301      	movs	r3, #1
 800ff68:	e040      	b.n	800ffec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d106      	bne.n	800ff80 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	2200      	movs	r2, #0
 800ff76:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ff7a:	6878      	ldr	r0, [r7, #4]
 800ff7c:	f7f3 f860 	bl	8003040 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	2224      	movs	r2, #36	; 0x24
 800ff84:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	681a      	ldr	r2, [r3, #0]
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	f022 0201 	bic.w	r2, r2, #1
 800ff94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ff96:	6878      	ldr	r0, [r7, #4]
 800ff98:	f000 fe36 	bl	8010c08 <UART_SetConfig>
 800ff9c:	4603      	mov	r3, r0
 800ff9e:	2b01      	cmp	r3, #1
 800ffa0:	d101      	bne.n	800ffa6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ffa2:	2301      	movs	r3, #1
 800ffa4:	e022      	b.n	800ffec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d002      	beq.n	800ffb4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ffae:	6878      	ldr	r0, [r7, #4]
 800ffb0:	f001 f88e 	bl	80110d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	685a      	ldr	r2, [r3, #4]
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ffc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	689a      	ldr	r2, [r3, #8]
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ffd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	681a      	ldr	r2, [r3, #0]
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	f042 0201 	orr.w	r2, r2, #1
 800ffe2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ffe4:	6878      	ldr	r0, [r7, #4]
 800ffe6:	f001 f915 	bl	8011214 <UART_CheckIdleState>
 800ffea:	4603      	mov	r3, r0
}
 800ffec:	4618      	mov	r0, r3
 800ffee:	3708      	adds	r7, #8
 800fff0:	46bd      	mov	sp, r7
 800fff2:	bd80      	pop	{r7, pc}

0800fff4 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800fff4:	b580      	push	{r7, lr}
 800fff6:	b082      	sub	sp, #8
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d101      	bne.n	8010006 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8010002:	2301      	movs	r3, #1
 8010004:	e02f      	b.n	8010066 <HAL_UART_DeInit+0x72>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	2224      	movs	r2, #36	; 0x24
 801000a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	681a      	ldr	r2, [r3, #0]
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	f022 0201 	bic.w	r2, r2, #1
 801001a:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	2200      	movs	r2, #0
 8010022:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	2200      	movs	r2, #0
 801002a:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	2200      	movs	r2, #0
 8010032:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8010034:	6878      	ldr	r0, [r7, #4]
 8010036:	f7f3 f8f9 	bl	800322c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	2200      	movs	r2, #0
 801003e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_RESET;
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	2200      	movs	r2, #0
 8010046:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	2200      	movs	r2, #0
 801004c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	2200      	movs	r2, #0
 8010054:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	2200      	movs	r2, #0
 801005a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	2200      	movs	r2, #0
 8010060:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8010064:	2300      	movs	r3, #0
}
 8010066:	4618      	mov	r0, r3
 8010068:	3708      	adds	r7, #8
 801006a:	46bd      	mov	sp, r7
 801006c:	bd80      	pop	{r7, pc}

0801006e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801006e:	b580      	push	{r7, lr}
 8010070:	b08a      	sub	sp, #40	; 0x28
 8010072:	af02      	add	r7, sp, #8
 8010074:	60f8      	str	r0, [r7, #12]
 8010076:	60b9      	str	r1, [r7, #8]
 8010078:	603b      	str	r3, [r7, #0]
 801007a:	4613      	mov	r3, r2
 801007c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010082:	2b20      	cmp	r3, #32
 8010084:	d171      	bne.n	801016a <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8010086:	68bb      	ldr	r3, [r7, #8]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d002      	beq.n	8010092 <HAL_UART_Transmit+0x24>
 801008c:	88fb      	ldrh	r3, [r7, #6]
 801008e:	2b00      	cmp	r3, #0
 8010090:	d101      	bne.n	8010096 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8010092:	2301      	movs	r3, #1
 8010094:	e06a      	b.n	801016c <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	2200      	movs	r2, #0
 801009a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	2221      	movs	r2, #33	; 0x21
 80100a2:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80100a4:	f7f8 fa34 	bl	8008510 <HAL_GetTick>
 80100a8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	88fa      	ldrh	r2, [r7, #6]
 80100ae:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	88fa      	ldrh	r2, [r7, #6]
 80100b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	689b      	ldr	r3, [r3, #8]
 80100be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80100c2:	d108      	bne.n	80100d6 <HAL_UART_Transmit+0x68>
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	691b      	ldr	r3, [r3, #16]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d104      	bne.n	80100d6 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80100cc:	2300      	movs	r3, #0
 80100ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80100d0:	68bb      	ldr	r3, [r7, #8]
 80100d2:	61bb      	str	r3, [r7, #24]
 80100d4:	e003      	b.n	80100de <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80100d6:	68bb      	ldr	r3, [r7, #8]
 80100d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80100da:	2300      	movs	r3, #0
 80100dc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80100de:	e02c      	b.n	801013a <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80100e0:	683b      	ldr	r3, [r7, #0]
 80100e2:	9300      	str	r3, [sp, #0]
 80100e4:	697b      	ldr	r3, [r7, #20]
 80100e6:	2200      	movs	r2, #0
 80100e8:	2180      	movs	r1, #128	; 0x80
 80100ea:	68f8      	ldr	r0, [r7, #12]
 80100ec:	f001 f8df 	bl	80112ae <UART_WaitOnFlagUntilTimeout>
 80100f0:	4603      	mov	r3, r0
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d001      	beq.n	80100fa <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80100f6:	2303      	movs	r3, #3
 80100f8:	e038      	b.n	801016c <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80100fa:	69fb      	ldr	r3, [r7, #28]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d10b      	bne.n	8010118 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010100:	69bb      	ldr	r3, [r7, #24]
 8010102:	881b      	ldrh	r3, [r3, #0]
 8010104:	461a      	mov	r2, r3
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801010e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8010110:	69bb      	ldr	r3, [r7, #24]
 8010112:	3302      	adds	r3, #2
 8010114:	61bb      	str	r3, [r7, #24]
 8010116:	e007      	b.n	8010128 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010118:	69fb      	ldr	r3, [r7, #28]
 801011a:	781a      	ldrb	r2, [r3, #0]
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8010122:	69fb      	ldr	r3, [r7, #28]
 8010124:	3301      	adds	r3, #1
 8010126:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801012e:	b29b      	uxth	r3, r3
 8010130:	3b01      	subs	r3, #1
 8010132:	b29a      	uxth	r2, r3
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8010140:	b29b      	uxth	r3, r3
 8010142:	2b00      	cmp	r3, #0
 8010144:	d1cc      	bne.n	80100e0 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010146:	683b      	ldr	r3, [r7, #0]
 8010148:	9300      	str	r3, [sp, #0]
 801014a:	697b      	ldr	r3, [r7, #20]
 801014c:	2200      	movs	r2, #0
 801014e:	2140      	movs	r1, #64	; 0x40
 8010150:	68f8      	ldr	r0, [r7, #12]
 8010152:	f001 f8ac 	bl	80112ae <UART_WaitOnFlagUntilTimeout>
 8010156:	4603      	mov	r3, r0
 8010158:	2b00      	cmp	r3, #0
 801015a:	d001      	beq.n	8010160 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 801015c:	2303      	movs	r3, #3
 801015e:	e005      	b.n	801016c <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	2220      	movs	r2, #32
 8010164:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8010166:	2300      	movs	r3, #0
 8010168:	e000      	b.n	801016c <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 801016a:	2302      	movs	r3, #2
  }
}
 801016c:	4618      	mov	r0, r3
 801016e:	3720      	adds	r7, #32
 8010170:	46bd      	mov	sp, r7
 8010172:	bd80      	pop	{r7, pc}

08010174 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010174:	b580      	push	{r7, lr}
 8010176:	b08a      	sub	sp, #40	; 0x28
 8010178:	af02      	add	r7, sp, #8
 801017a:	60f8      	str	r0, [r7, #12]
 801017c:	60b9      	str	r1, [r7, #8]
 801017e:	603b      	str	r3, [r7, #0]
 8010180:	4613      	mov	r3, r2
 8010182:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801018a:	2b20      	cmp	r3, #32
 801018c:	f040 80b1 	bne.w	80102f2 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8010190:	68bb      	ldr	r3, [r7, #8]
 8010192:	2b00      	cmp	r3, #0
 8010194:	d002      	beq.n	801019c <HAL_UART_Receive+0x28>
 8010196:	88fb      	ldrh	r3, [r7, #6]
 8010198:	2b00      	cmp	r3, #0
 801019a:	d101      	bne.n	80101a0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 801019c:	2301      	movs	r3, #1
 801019e:	e0a9      	b.n	80102f4 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	2200      	movs	r2, #0
 80101a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	2222      	movs	r2, #34	; 0x22
 80101ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	2200      	movs	r2, #0
 80101b4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80101b6:	f7f8 f9ab 	bl	8008510 <HAL_GetTick>
 80101ba:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	88fa      	ldrh	r2, [r7, #6]
 80101c0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	88fa      	ldrh	r2, [r7, #6]
 80101c8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	689b      	ldr	r3, [r3, #8]
 80101d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80101d4:	d10e      	bne.n	80101f4 <HAL_UART_Receive+0x80>
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	691b      	ldr	r3, [r3, #16]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d105      	bne.n	80101ea <HAL_UART_Receive+0x76>
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80101e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80101e8:	e02d      	b.n	8010246 <HAL_UART_Receive+0xd2>
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	22ff      	movs	r2, #255	; 0xff
 80101ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80101f2:	e028      	b.n	8010246 <HAL_UART_Receive+0xd2>
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	689b      	ldr	r3, [r3, #8]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d10d      	bne.n	8010218 <HAL_UART_Receive+0xa4>
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	691b      	ldr	r3, [r3, #16]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d104      	bne.n	801020e <HAL_UART_Receive+0x9a>
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	22ff      	movs	r2, #255	; 0xff
 8010208:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801020c:	e01b      	b.n	8010246 <HAL_UART_Receive+0xd2>
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	227f      	movs	r2, #127	; 0x7f
 8010212:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8010216:	e016      	b.n	8010246 <HAL_UART_Receive+0xd2>
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	689b      	ldr	r3, [r3, #8]
 801021c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010220:	d10d      	bne.n	801023e <HAL_UART_Receive+0xca>
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	691b      	ldr	r3, [r3, #16]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d104      	bne.n	8010234 <HAL_UART_Receive+0xc0>
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	227f      	movs	r2, #127	; 0x7f
 801022e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8010232:	e008      	b.n	8010246 <HAL_UART_Receive+0xd2>
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	223f      	movs	r2, #63	; 0x3f
 8010238:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801023c:	e003      	b.n	8010246 <HAL_UART_Receive+0xd2>
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	2200      	movs	r2, #0
 8010242:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801024c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	689b      	ldr	r3, [r3, #8]
 8010252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010256:	d108      	bne.n	801026a <HAL_UART_Receive+0xf6>
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	691b      	ldr	r3, [r3, #16]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d104      	bne.n	801026a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8010260:	2300      	movs	r3, #0
 8010262:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8010264:	68bb      	ldr	r3, [r7, #8]
 8010266:	61bb      	str	r3, [r7, #24]
 8010268:	e003      	b.n	8010272 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 801026a:	68bb      	ldr	r3, [r7, #8]
 801026c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801026e:	2300      	movs	r3, #0
 8010270:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8010272:	e032      	b.n	80102da <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8010274:	683b      	ldr	r3, [r7, #0]
 8010276:	9300      	str	r3, [sp, #0]
 8010278:	697b      	ldr	r3, [r7, #20]
 801027a:	2200      	movs	r2, #0
 801027c:	2120      	movs	r1, #32
 801027e:	68f8      	ldr	r0, [r7, #12]
 8010280:	f001 f815 	bl	80112ae <UART_WaitOnFlagUntilTimeout>
 8010284:	4603      	mov	r3, r0
 8010286:	2b00      	cmp	r3, #0
 8010288:	d001      	beq.n	801028e <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 801028a:	2303      	movs	r3, #3
 801028c:	e032      	b.n	80102f4 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 801028e:	69fb      	ldr	r3, [r7, #28]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d10c      	bne.n	80102ae <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801029a:	b29a      	uxth	r2, r3
 801029c:	8a7b      	ldrh	r3, [r7, #18]
 801029e:	4013      	ands	r3, r2
 80102a0:	b29a      	uxth	r2, r3
 80102a2:	69bb      	ldr	r3, [r7, #24]
 80102a4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80102a6:	69bb      	ldr	r3, [r7, #24]
 80102a8:	3302      	adds	r3, #2
 80102aa:	61bb      	str	r3, [r7, #24]
 80102ac:	e00c      	b.n	80102c8 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102b4:	b2da      	uxtb	r2, r3
 80102b6:	8a7b      	ldrh	r3, [r7, #18]
 80102b8:	b2db      	uxtb	r3, r3
 80102ba:	4013      	ands	r3, r2
 80102bc:	b2da      	uxtb	r2, r3
 80102be:	69fb      	ldr	r3, [r7, #28]
 80102c0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80102c2:	69fb      	ldr	r3, [r7, #28]
 80102c4:	3301      	adds	r3, #1
 80102c6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80102ce:	b29b      	uxth	r3, r3
 80102d0:	3b01      	subs	r3, #1
 80102d2:	b29a      	uxth	r2, r3
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80102e0:	b29b      	uxth	r3, r3
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d1c6      	bne.n	8010274 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	2220      	movs	r2, #32
 80102ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80102ee:	2300      	movs	r3, #0
 80102f0:	e000      	b.n	80102f4 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80102f2:	2302      	movs	r3, #2
  }
}
 80102f4:	4618      	mov	r0, r3
 80102f6:	3720      	adds	r7, #32
 80102f8:	46bd      	mov	sp, r7
 80102fa:	bd80      	pop	{r7, pc}

080102fc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b08a      	sub	sp, #40	; 0x28
 8010300:	af00      	add	r7, sp, #0
 8010302:	60f8      	str	r0, [r7, #12]
 8010304:	60b9      	str	r1, [r7, #8]
 8010306:	4613      	mov	r3, r2
 8010308:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010310:	2b20      	cmp	r3, #32
 8010312:	d132      	bne.n	801037a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8010314:	68bb      	ldr	r3, [r7, #8]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d002      	beq.n	8010320 <HAL_UART_Receive_IT+0x24>
 801031a:	88fb      	ldrh	r3, [r7, #6]
 801031c:	2b00      	cmp	r3, #0
 801031e:	d101      	bne.n	8010324 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8010320:	2301      	movs	r3, #1
 8010322:	e02b      	b.n	801037c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	2200      	movs	r2, #0
 8010328:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	685b      	ldr	r3, [r3, #4]
 8010330:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010334:	2b00      	cmp	r3, #0
 8010336:	d018      	beq.n	801036a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801033e:	697b      	ldr	r3, [r7, #20]
 8010340:	e853 3f00 	ldrex	r3, [r3]
 8010344:	613b      	str	r3, [r7, #16]
   return(result);
 8010346:	693b      	ldr	r3, [r7, #16]
 8010348:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801034c:	627b      	str	r3, [r7, #36]	; 0x24
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	461a      	mov	r2, r3
 8010354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010356:	623b      	str	r3, [r7, #32]
 8010358:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801035a:	69f9      	ldr	r1, [r7, #28]
 801035c:	6a3a      	ldr	r2, [r7, #32]
 801035e:	e841 2300 	strex	r3, r2, [r1]
 8010362:	61bb      	str	r3, [r7, #24]
   return(result);
 8010364:	69bb      	ldr	r3, [r7, #24]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d1e6      	bne.n	8010338 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801036a:	88fb      	ldrh	r3, [r7, #6]
 801036c:	461a      	mov	r2, r3
 801036e:	68b9      	ldr	r1, [r7, #8]
 8010370:	68f8      	ldr	r0, [r7, #12]
 8010372:	f001 f863 	bl	801143c <UART_Start_Receive_IT>
 8010376:	4603      	mov	r3, r0
 8010378:	e000      	b.n	801037c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 801037a:	2302      	movs	r3, #2
  }
}
 801037c:	4618      	mov	r0, r3
 801037e:	3728      	adds	r7, #40	; 0x28
 8010380:	46bd      	mov	sp, r7
 8010382:	bd80      	pop	{r7, pc}

08010384 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8010384:	b580      	push	{r7, lr}
 8010386:	b0a2      	sub	sp, #136	; 0x88
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 801038c:	2301      	movs	r3, #1
 801038e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010398:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801039a:	e853 3f00 	ldrex	r3, [r3]
 801039e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80103a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103a2:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 80103a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	461a      	mov	r2, r3
 80103b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80103b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80103b6:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103b8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80103ba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80103bc:	e841 2300 	strex	r3, r2, [r1]
 80103c0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80103c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d1e4      	bne.n	8010392 <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	3308      	adds	r3, #8
 80103ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80103d2:	e853 3f00 	ldrex	r3, [r3]
 80103d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80103d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80103da:	f023 0301 	bic.w	r3, r3, #1
 80103de:	67fb      	str	r3, [r7, #124]	; 0x7c
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	3308      	adds	r3, #8
 80103e6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80103e8:	65ba      	str	r2, [r7, #88]	; 0x58
 80103ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80103ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80103f0:	e841 2300 	strex	r3, r2, [r1]
 80103f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80103f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d1e5      	bne.n	80103c8 <HAL_UART_Abort_IT+0x44>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010400:	2b01      	cmp	r3, #1
 8010402:	d118      	bne.n	8010436 <HAL_UART_Abort_IT+0xb2>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801040a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801040c:	e853 3f00 	ldrex	r3, [r3]
 8010410:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010414:	f023 0310 	bic.w	r3, r3, #16
 8010418:	67bb      	str	r3, [r7, #120]	; 0x78
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	461a      	mov	r2, r3
 8010420:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010422:	647b      	str	r3, [r7, #68]	; 0x44
 8010424:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010426:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010428:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801042a:	e841 2300 	strex	r3, r2, [r1]
 801042e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010432:	2b00      	cmp	r3, #0
 8010434:	d1e6      	bne.n	8010404 <HAL_UART_Abort_IT+0x80>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801043a:	2b00      	cmp	r3, #0
 801043c:	d00f      	beq.n	801045e <HAL_UART_Abort_IT+0xda>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	689b      	ldr	r3, [r3, #8]
 8010444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010448:	2b80      	cmp	r3, #128	; 0x80
 801044a:	d104      	bne.n	8010456 <HAL_UART_Abort_IT+0xd2>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010450:	4a5d      	ldr	r2, [pc, #372]	; (80105c8 <HAL_UART_Abort_IT+0x244>)
 8010452:	651a      	str	r2, [r3, #80]	; 0x50
 8010454:	e003      	b.n	801045e <HAL_UART_Abort_IT+0xda>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801045a:	2200      	movs	r2, #0
 801045c:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010462:	2b00      	cmp	r3, #0
 8010464:	d00f      	beq.n	8010486 <HAL_UART_Abort_IT+0x102>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	689b      	ldr	r3, [r3, #8]
 801046c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010470:	2b40      	cmp	r3, #64	; 0x40
 8010472:	d104      	bne.n	801047e <HAL_UART_Abort_IT+0xfa>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010478:	4a54      	ldr	r2, [pc, #336]	; (80105cc <HAL_UART_Abort_IT+0x248>)
 801047a:	651a      	str	r2, [r3, #80]	; 0x50
 801047c:	e003      	b.n	8010486 <HAL_UART_Abort_IT+0x102>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010482:	2200      	movs	r2, #0
 8010484:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	689b      	ldr	r3, [r3, #8]
 801048c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010490:	2b80      	cmp	r3, #128	; 0x80
 8010492:	d12d      	bne.n	80104f0 <HAL_UART_Abort_IT+0x16c>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	3308      	adds	r3, #8
 801049a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801049c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801049e:	e853 3f00 	ldrex	r3, [r3]
 80104a2:	623b      	str	r3, [r7, #32]
   return(result);
 80104a4:	6a3b      	ldr	r3, [r7, #32]
 80104a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80104aa:	677b      	str	r3, [r7, #116]	; 0x74
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	3308      	adds	r3, #8
 80104b2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80104b4:	633a      	str	r2, [r7, #48]	; 0x30
 80104b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80104ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80104bc:	e841 2300 	strex	r3, r2, [r1]
 80104c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80104c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d1e5      	bne.n	8010494 <HAL_UART_Abort_IT+0x110>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d00f      	beq.n	80104f0 <HAL_UART_Abort_IT+0x16c>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104d4:	4618      	mov	r0, r3
 80104d6:	f7f9 fd95 	bl	800a004 <HAL_DMA_Abort_IT>
 80104da:	4603      	mov	r3, r0
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d004      	beq.n	80104ea <HAL_UART_Abort_IT+0x166>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104e4:	2200      	movs	r2, #0
 80104e6:	651a      	str	r2, [r3, #80]	; 0x50
 80104e8:	e002      	b.n	80104f0 <HAL_UART_Abort_IT+0x16c>
      }
      else
      {
        abortcplt = 0U;
 80104ea:	2300      	movs	r3, #0
 80104ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	689b      	ldr	r3, [r3, #8]
 80104f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80104fa:	2b40      	cmp	r3, #64	; 0x40
 80104fc:	d130      	bne.n	8010560 <HAL_UART_Abort_IT+0x1dc>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	3308      	adds	r3, #8
 8010504:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010506:	693b      	ldr	r3, [r7, #16]
 8010508:	e853 3f00 	ldrex	r3, [r3]
 801050c:	60fb      	str	r3, [r7, #12]
   return(result);
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010514:	673b      	str	r3, [r7, #112]	; 0x70
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	3308      	adds	r3, #8
 801051c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801051e:	61fa      	str	r2, [r7, #28]
 8010520:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010522:	69b9      	ldr	r1, [r7, #24]
 8010524:	69fa      	ldr	r2, [r7, #28]
 8010526:	e841 2300 	strex	r3, r2, [r1]
 801052a:	617b      	str	r3, [r7, #20]
   return(result);
 801052c:	697b      	ldr	r3, [r7, #20]
 801052e:	2b00      	cmp	r3, #0
 8010530:	d1e5      	bne.n	80104fe <HAL_UART_Abort_IT+0x17a>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010536:	2b00      	cmp	r3, #0
 8010538:	d012      	beq.n	8010560 <HAL_UART_Abort_IT+0x1dc>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801053e:	4618      	mov	r0, r3
 8010540:	f7f9 fd60 	bl	800a004 <HAL_DMA_Abort_IT>
 8010544:	4603      	mov	r3, r0
 8010546:	2b00      	cmp	r3, #0
 8010548:	d007      	beq.n	801055a <HAL_UART_Abort_IT+0x1d6>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801054e:	2200      	movs	r2, #0
 8010550:	651a      	str	r2, [r3, #80]	; 0x50
        abortcplt = 1U;
 8010552:	2301      	movs	r3, #1
 8010554:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010558:	e002      	b.n	8010560 <HAL_UART_Abort_IT+0x1dc>
      }
      else
      {
        abortcplt = 0U;
 801055a:	2300      	movs	r3, #0
 801055c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 8010560:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010564:	2b01      	cmp	r3, #1
 8010566:	d12a      	bne.n	80105be <HAL_UART_Abort_IT+0x23a>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	2200      	movs	r2, #0
 801056c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->RxXferCount = 0U;
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	2200      	movs	r2, #0
 8010574:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	2200      	movs	r2, #0
 801057c:	669a      	str	r2, [r3, #104]	; 0x68
    huart->TxISR = NULL;
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	2200      	movs	r2, #0
 8010582:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2200      	movs	r2, #0
 8010588:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	220f      	movs	r2, #15
 8010592:	621a      	str	r2, [r3, #32]


    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	699a      	ldr	r2, [r3, #24]
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	f042 0208 	orr.w	r2, r2, #8
 80105a2:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	2220      	movs	r2, #32
 80105a8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_READY;
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	2220      	movs	r2, #32
 80105ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	2200      	movs	r2, #0
 80105b6:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 80105b8:	6878      	ldr	r0, [r7, #4]
 80105ba:	f000 fb05 	bl	8010bc8 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80105be:	2300      	movs	r3, #0
}
 80105c0:	4618      	mov	r0, r3
 80105c2:	3788      	adds	r7, #136	; 0x88
 80105c4:	46bd      	mov	sp, r7
 80105c6:	bd80      	pop	{r7, pc}
 80105c8:	080116bd 	.word	0x080116bd
 80105cc:	08011729 	.word	0x08011729

080105d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b0ba      	sub	sp, #232	; 0xe8
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	69db      	ldr	r3, [r3, #28]
 80105de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	689b      	ldr	r3, [r3, #8]
 80105f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80105f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80105fa:	f640 030f 	movw	r3, #2063	; 0x80f
 80105fe:	4013      	ands	r3, r2
 8010600:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8010604:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010608:	2b00      	cmp	r3, #0
 801060a:	d115      	bne.n	8010638 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801060c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010610:	f003 0320 	and.w	r3, r3, #32
 8010614:	2b00      	cmp	r3, #0
 8010616:	d00f      	beq.n	8010638 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8010618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801061c:	f003 0320 	and.w	r3, r3, #32
 8010620:	2b00      	cmp	r3, #0
 8010622:	d009      	beq.n	8010638 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010628:	2b00      	cmp	r3, #0
 801062a:	f000 82ac 	beq.w	8010b86 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010632:	6878      	ldr	r0, [r7, #4]
 8010634:	4798      	blx	r3
      }
      return;
 8010636:	e2a6      	b.n	8010b86 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010638:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801063c:	2b00      	cmp	r3, #0
 801063e:	f000 8117 	beq.w	8010870 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8010642:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010646:	f003 0301 	and.w	r3, r3, #1
 801064a:	2b00      	cmp	r3, #0
 801064c:	d106      	bne.n	801065c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801064e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8010652:	4b85      	ldr	r3, [pc, #532]	; (8010868 <HAL_UART_IRQHandler+0x298>)
 8010654:	4013      	ands	r3, r2
 8010656:	2b00      	cmp	r3, #0
 8010658:	f000 810a 	beq.w	8010870 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801065c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010660:	f003 0301 	and.w	r3, r3, #1
 8010664:	2b00      	cmp	r3, #0
 8010666:	d011      	beq.n	801068c <HAL_UART_IRQHandler+0xbc>
 8010668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801066c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010670:	2b00      	cmp	r3, #0
 8010672:	d00b      	beq.n	801068c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	2201      	movs	r2, #1
 801067a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010682:	f043 0201 	orr.w	r2, r3, #1
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801068c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010690:	f003 0302 	and.w	r3, r3, #2
 8010694:	2b00      	cmp	r3, #0
 8010696:	d011      	beq.n	80106bc <HAL_UART_IRQHandler+0xec>
 8010698:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801069c:	f003 0301 	and.w	r3, r3, #1
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d00b      	beq.n	80106bc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	2202      	movs	r2, #2
 80106aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80106b2:	f043 0204 	orr.w	r2, r3, #4
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80106bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80106c0:	f003 0304 	and.w	r3, r3, #4
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d011      	beq.n	80106ec <HAL_UART_IRQHandler+0x11c>
 80106c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80106cc:	f003 0301 	and.w	r3, r3, #1
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d00b      	beq.n	80106ec <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	2204      	movs	r2, #4
 80106da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80106e2:	f043 0202 	orr.w	r2, r3, #2
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80106ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80106f0:	f003 0308 	and.w	r3, r3, #8
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d017      	beq.n	8010728 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80106f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80106fc:	f003 0320 	and.w	r3, r3, #32
 8010700:	2b00      	cmp	r3, #0
 8010702:	d105      	bne.n	8010710 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8010704:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010708:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801070c:	2b00      	cmp	r3, #0
 801070e:	d00b      	beq.n	8010728 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	2208      	movs	r2, #8
 8010716:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801071e:	f043 0208 	orr.w	r2, r3, #8
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801072c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010730:	2b00      	cmp	r3, #0
 8010732:	d012      	beq.n	801075a <HAL_UART_IRQHandler+0x18a>
 8010734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010738:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801073c:	2b00      	cmp	r3, #0
 801073e:	d00c      	beq.n	801075a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010748:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010750:	f043 0220 	orr.w	r2, r3, #32
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010760:	2b00      	cmp	r3, #0
 8010762:	f000 8212 	beq.w	8010b8a <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8010766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801076a:	f003 0320 	and.w	r3, r3, #32
 801076e:	2b00      	cmp	r3, #0
 8010770:	d00d      	beq.n	801078e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8010772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010776:	f003 0320 	and.w	r3, r3, #32
 801077a:	2b00      	cmp	r3, #0
 801077c:	d007      	beq.n	801078e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010782:	2b00      	cmp	r3, #0
 8010784:	d003      	beq.n	801078e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801078a:	6878      	ldr	r0, [r7, #4]
 801078c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010794:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	689b      	ldr	r3, [r3, #8]
 801079e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80107a2:	2b40      	cmp	r3, #64	; 0x40
 80107a4:	d005      	beq.n	80107b2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80107a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80107aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d04f      	beq.n	8010852 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80107b2:	6878      	ldr	r0, [r7, #4]
 80107b4:	f000 ff08 	bl	80115c8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	689b      	ldr	r3, [r3, #8]
 80107be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80107c2:	2b40      	cmp	r3, #64	; 0x40
 80107c4:	d141      	bne.n	801084a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	3308      	adds	r3, #8
 80107cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80107d4:	e853 3f00 	ldrex	r3, [r3]
 80107d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80107dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80107e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80107e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	3308      	adds	r3, #8
 80107ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80107f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80107f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80107fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010802:	e841 2300 	strex	r3, r2, [r1]
 8010806:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801080a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801080e:	2b00      	cmp	r3, #0
 8010810:	d1d9      	bne.n	80107c6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010816:	2b00      	cmp	r3, #0
 8010818:	d013      	beq.n	8010842 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801081e:	4a13      	ldr	r2, [pc, #76]	; (801086c <HAL_UART_IRQHandler+0x29c>)
 8010820:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010826:	4618      	mov	r0, r3
 8010828:	f7f9 fbec 	bl	800a004 <HAL_DMA_Abort_IT>
 801082c:	4603      	mov	r3, r0
 801082e:	2b00      	cmp	r3, #0
 8010830:	d017      	beq.n	8010862 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010838:	687a      	ldr	r2, [r7, #4]
 801083a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 801083c:	4610      	mov	r0, r2
 801083e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010840:	e00f      	b.n	8010862 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010842:	6878      	ldr	r0, [r7, #4]
 8010844:	f000 f9b6 	bl	8010bb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010848:	e00b      	b.n	8010862 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801084a:	6878      	ldr	r0, [r7, #4]
 801084c:	f000 f9b2 	bl	8010bb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010850:	e007      	b.n	8010862 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010852:	6878      	ldr	r0, [r7, #4]
 8010854:	f000 f9ae 	bl	8010bb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	2200      	movs	r2, #0
 801085c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8010860:	e193      	b.n	8010b8a <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010862:	bf00      	nop
    return;
 8010864:	e191      	b.n	8010b8a <HAL_UART_IRQHandler+0x5ba>
 8010866:	bf00      	nop
 8010868:	04000120 	.word	0x04000120
 801086c:	08011691 	.word	0x08011691

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010874:	2b01      	cmp	r3, #1
 8010876:	f040 814c 	bne.w	8010b12 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801087a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801087e:	f003 0310 	and.w	r3, r3, #16
 8010882:	2b00      	cmp	r3, #0
 8010884:	f000 8145 	beq.w	8010b12 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801088c:	f003 0310 	and.w	r3, r3, #16
 8010890:	2b00      	cmp	r3, #0
 8010892:	f000 813e 	beq.w	8010b12 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	2210      	movs	r2, #16
 801089c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	689b      	ldr	r3, [r3, #8]
 80108a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80108a8:	2b40      	cmp	r3, #64	; 0x40
 80108aa:	f040 80b6 	bne.w	8010a1a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	685b      	ldr	r3, [r3, #4]
 80108b6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80108ba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80108be:	2b00      	cmp	r3, #0
 80108c0:	f000 8165 	beq.w	8010b8e <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80108ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80108ce:	429a      	cmp	r2, r3
 80108d0:	f080 815d 	bcs.w	8010b8e <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80108da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80108e2:	69db      	ldr	r3, [r3, #28]
 80108e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80108e8:	f000 8086 	beq.w	80109f8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80108f8:	e853 3f00 	ldrex	r3, [r3]
 80108fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010900:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010904:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010908:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	461a      	mov	r2, r3
 8010912:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010916:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801091a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801091e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010922:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010926:	e841 2300 	strex	r3, r2, [r1]
 801092a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801092e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010932:	2b00      	cmp	r3, #0
 8010934:	d1da      	bne.n	80108ec <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	3308      	adds	r3, #8
 801093c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801093e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010940:	e853 3f00 	ldrex	r3, [r3]
 8010944:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010946:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010948:	f023 0301 	bic.w	r3, r3, #1
 801094c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	3308      	adds	r3, #8
 8010956:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801095a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801095e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010960:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010962:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010966:	e841 2300 	strex	r3, r2, [r1]
 801096a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801096c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801096e:	2b00      	cmp	r3, #0
 8010970:	d1e1      	bne.n	8010936 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	3308      	adds	r3, #8
 8010978:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801097a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801097c:	e853 3f00 	ldrex	r3, [r3]
 8010980:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010982:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010984:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010988:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	3308      	adds	r3, #8
 8010992:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010996:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010998:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801099a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801099c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801099e:	e841 2300 	strex	r3, r2, [r1]
 80109a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80109a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d1e3      	bne.n	8010972 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	2220      	movs	r2, #32
 80109ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	2200      	movs	r2, #0
 80109b6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109c0:	e853 3f00 	ldrex	r3, [r3]
 80109c4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80109c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80109c8:	f023 0310 	bic.w	r3, r3, #16
 80109cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	461a      	mov	r2, r3
 80109d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80109da:	65bb      	str	r3, [r7, #88]	; 0x58
 80109dc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80109e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80109e2:	e841 2300 	strex	r3, r2, [r1]
 80109e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80109e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d1e4      	bne.n	80109b8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80109f2:	4618      	mov	r0, r3
 80109f4:	f7f9 fa96 	bl	8009f24 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	2202      	movs	r2, #2
 80109fc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010a0a:	b29b      	uxth	r3, r3
 8010a0c:	1ad3      	subs	r3, r2, r3
 8010a0e:	b29b      	uxth	r3, r3
 8010a10:	4619      	mov	r1, r3
 8010a12:	6878      	ldr	r0, [r7, #4]
 8010a14:	f000 f8e2 	bl	8010bdc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010a18:	e0b9      	b.n	8010b8e <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010a26:	b29b      	uxth	r3, r3
 8010a28:	1ad3      	subs	r3, r2, r3
 8010a2a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010a34:	b29b      	uxth	r3, r3
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	f000 80ab 	beq.w	8010b92 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8010a3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	f000 80a6 	beq.w	8010b92 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a4e:	e853 3f00 	ldrex	r3, [r3]
 8010a52:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010a5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	461a      	mov	r2, r3
 8010a64:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010a68:	647b      	str	r3, [r7, #68]	; 0x44
 8010a6a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a6c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010a6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010a70:	e841 2300 	strex	r3, r2, [r1]
 8010a74:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d1e4      	bne.n	8010a46 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	3308      	adds	r3, #8
 8010a82:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a86:	e853 3f00 	ldrex	r3, [r3]
 8010a8a:	623b      	str	r3, [r7, #32]
   return(result);
 8010a8c:	6a3b      	ldr	r3, [r7, #32]
 8010a8e:	f023 0301 	bic.w	r3, r3, #1
 8010a92:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	3308      	adds	r3, #8
 8010a9c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010aa0:	633a      	str	r2, [r7, #48]	; 0x30
 8010aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010aa4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010aa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010aa8:	e841 2300 	strex	r3, r2, [r1]
 8010aac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d1e3      	bne.n	8010a7c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	2220      	movs	r2, #32
 8010ab8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	2200      	movs	r2, #0
 8010ac0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	2200      	movs	r2, #0
 8010ac6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ace:	693b      	ldr	r3, [r7, #16]
 8010ad0:	e853 3f00 	ldrex	r3, [r3]
 8010ad4:	60fb      	str	r3, [r7, #12]
   return(result);
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	f023 0310 	bic.w	r3, r3, #16
 8010adc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	461a      	mov	r2, r3
 8010ae6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010aea:	61fb      	str	r3, [r7, #28]
 8010aec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010aee:	69b9      	ldr	r1, [r7, #24]
 8010af0:	69fa      	ldr	r2, [r7, #28]
 8010af2:	e841 2300 	strex	r3, r2, [r1]
 8010af6:	617b      	str	r3, [r7, #20]
   return(result);
 8010af8:	697b      	ldr	r3, [r7, #20]
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d1e4      	bne.n	8010ac8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	2202      	movs	r2, #2
 8010b02:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010b04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010b08:	4619      	mov	r1, r3
 8010b0a:	6878      	ldr	r0, [r7, #4]
 8010b0c:	f000 f866 	bl	8010bdc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010b10:	e03f      	b.n	8010b92 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010b16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d00e      	beq.n	8010b3c <HAL_UART_IRQHandler+0x56c>
 8010b1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d008      	beq.n	8010b3c <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010b32:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8010b34:	6878      	ldr	r0, [r7, #4]
 8010b36:	f000 f85d 	bl	8010bf4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010b3a:	e02d      	b.n	8010b98 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8010b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d00e      	beq.n	8010b66 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8010b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d008      	beq.n	8010b66 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d01c      	beq.n	8010b96 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b60:	6878      	ldr	r0, [r7, #4]
 8010b62:	4798      	blx	r3
    }
    return;
 8010b64:	e017      	b.n	8010b96 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d012      	beq.n	8010b98 <HAL_UART_IRQHandler+0x5c8>
 8010b72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d00c      	beq.n	8010b98 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8010b7e:	6878      	ldr	r0, [r7, #4]
 8010b80:	f000 fe10 	bl	80117a4 <UART_EndTransmit_IT>
    return;
 8010b84:	e008      	b.n	8010b98 <HAL_UART_IRQHandler+0x5c8>
      return;
 8010b86:	bf00      	nop
 8010b88:	e006      	b.n	8010b98 <HAL_UART_IRQHandler+0x5c8>
    return;
 8010b8a:	bf00      	nop
 8010b8c:	e004      	b.n	8010b98 <HAL_UART_IRQHandler+0x5c8>
      return;
 8010b8e:	bf00      	nop
 8010b90:	e002      	b.n	8010b98 <HAL_UART_IRQHandler+0x5c8>
      return;
 8010b92:	bf00      	nop
 8010b94:	e000      	b.n	8010b98 <HAL_UART_IRQHandler+0x5c8>
    return;
 8010b96:	bf00      	nop
  }

}
 8010b98:	37e8      	adds	r7, #232	; 0xe8
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	bd80      	pop	{r7, pc}
 8010b9e:	bf00      	nop

08010ba0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010ba0:	b480      	push	{r7}
 8010ba2:	b083      	sub	sp, #12
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8010ba8:	bf00      	nop
 8010baa:	370c      	adds	r7, #12
 8010bac:	46bd      	mov	sp, r7
 8010bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb2:	4770      	bx	lr

08010bb4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010bb4:	b480      	push	{r7}
 8010bb6:	b083      	sub	sp, #12
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010bbc:	bf00      	nop
 8010bbe:	370c      	adds	r7, #12
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc6:	4770      	bx	lr

08010bc8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8010bc8:	b480      	push	{r7}
 8010bca:	b083      	sub	sp, #12
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8010bd0:	bf00      	nop
 8010bd2:	370c      	adds	r7, #12
 8010bd4:	46bd      	mov	sp, r7
 8010bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bda:	4770      	bx	lr

08010bdc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010bdc:	b480      	push	{r7}
 8010bde:	b083      	sub	sp, #12
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	6078      	str	r0, [r7, #4]
 8010be4:	460b      	mov	r3, r1
 8010be6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010be8:	bf00      	nop
 8010bea:	370c      	adds	r7, #12
 8010bec:	46bd      	mov	sp, r7
 8010bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf2:	4770      	bx	lr

08010bf4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010bf4:	b480      	push	{r7}
 8010bf6:	b083      	sub	sp, #12
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010bfc:	bf00      	nop
 8010bfe:	370c      	adds	r7, #12
 8010c00:	46bd      	mov	sp, r7
 8010c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c06:	4770      	bx	lr

08010c08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	b088      	sub	sp, #32
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010c10:	2300      	movs	r3, #0
 8010c12:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	689a      	ldr	r2, [r3, #8]
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	691b      	ldr	r3, [r3, #16]
 8010c1c:	431a      	orrs	r2, r3
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	695b      	ldr	r3, [r3, #20]
 8010c22:	431a      	orrs	r2, r3
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	69db      	ldr	r3, [r3, #28]
 8010c28:	4313      	orrs	r3, r2
 8010c2a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	681a      	ldr	r2, [r3, #0]
 8010c32:	4ba6      	ldr	r3, [pc, #664]	; (8010ecc <UART_SetConfig+0x2c4>)
 8010c34:	4013      	ands	r3, r2
 8010c36:	687a      	ldr	r2, [r7, #4]
 8010c38:	6812      	ldr	r2, [r2, #0]
 8010c3a:	6979      	ldr	r1, [r7, #20]
 8010c3c:	430b      	orrs	r3, r1
 8010c3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	685b      	ldr	r3, [r3, #4]
 8010c46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	68da      	ldr	r2, [r3, #12]
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	430a      	orrs	r2, r1
 8010c54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	699b      	ldr	r3, [r3, #24]
 8010c5a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	6a1b      	ldr	r3, [r3, #32]
 8010c60:	697a      	ldr	r2, [r7, #20]
 8010c62:	4313      	orrs	r3, r2
 8010c64:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	689b      	ldr	r3, [r3, #8]
 8010c6c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	697a      	ldr	r2, [r7, #20]
 8010c76:	430a      	orrs	r2, r1
 8010c78:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	4a94      	ldr	r2, [pc, #592]	; (8010ed0 <UART_SetConfig+0x2c8>)
 8010c80:	4293      	cmp	r3, r2
 8010c82:	d120      	bne.n	8010cc6 <UART_SetConfig+0xbe>
 8010c84:	4b93      	ldr	r3, [pc, #588]	; (8010ed4 <UART_SetConfig+0x2cc>)
 8010c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010c8a:	f003 0303 	and.w	r3, r3, #3
 8010c8e:	2b03      	cmp	r3, #3
 8010c90:	d816      	bhi.n	8010cc0 <UART_SetConfig+0xb8>
 8010c92:	a201      	add	r2, pc, #4	; (adr r2, 8010c98 <UART_SetConfig+0x90>)
 8010c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c98:	08010ca9 	.word	0x08010ca9
 8010c9c:	08010cb5 	.word	0x08010cb5
 8010ca0:	08010caf 	.word	0x08010caf
 8010ca4:	08010cbb 	.word	0x08010cbb
 8010ca8:	2301      	movs	r3, #1
 8010caa:	77fb      	strb	r3, [r7, #31]
 8010cac:	e150      	b.n	8010f50 <UART_SetConfig+0x348>
 8010cae:	2302      	movs	r3, #2
 8010cb0:	77fb      	strb	r3, [r7, #31]
 8010cb2:	e14d      	b.n	8010f50 <UART_SetConfig+0x348>
 8010cb4:	2304      	movs	r3, #4
 8010cb6:	77fb      	strb	r3, [r7, #31]
 8010cb8:	e14a      	b.n	8010f50 <UART_SetConfig+0x348>
 8010cba:	2308      	movs	r3, #8
 8010cbc:	77fb      	strb	r3, [r7, #31]
 8010cbe:	e147      	b.n	8010f50 <UART_SetConfig+0x348>
 8010cc0:	2310      	movs	r3, #16
 8010cc2:	77fb      	strb	r3, [r7, #31]
 8010cc4:	e144      	b.n	8010f50 <UART_SetConfig+0x348>
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	4a83      	ldr	r2, [pc, #524]	; (8010ed8 <UART_SetConfig+0x2d0>)
 8010ccc:	4293      	cmp	r3, r2
 8010cce:	d132      	bne.n	8010d36 <UART_SetConfig+0x12e>
 8010cd0:	4b80      	ldr	r3, [pc, #512]	; (8010ed4 <UART_SetConfig+0x2cc>)
 8010cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010cd6:	f003 030c 	and.w	r3, r3, #12
 8010cda:	2b0c      	cmp	r3, #12
 8010cdc:	d828      	bhi.n	8010d30 <UART_SetConfig+0x128>
 8010cde:	a201      	add	r2, pc, #4	; (adr r2, 8010ce4 <UART_SetConfig+0xdc>)
 8010ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ce4:	08010d19 	.word	0x08010d19
 8010ce8:	08010d31 	.word	0x08010d31
 8010cec:	08010d31 	.word	0x08010d31
 8010cf0:	08010d31 	.word	0x08010d31
 8010cf4:	08010d25 	.word	0x08010d25
 8010cf8:	08010d31 	.word	0x08010d31
 8010cfc:	08010d31 	.word	0x08010d31
 8010d00:	08010d31 	.word	0x08010d31
 8010d04:	08010d1f 	.word	0x08010d1f
 8010d08:	08010d31 	.word	0x08010d31
 8010d0c:	08010d31 	.word	0x08010d31
 8010d10:	08010d31 	.word	0x08010d31
 8010d14:	08010d2b 	.word	0x08010d2b
 8010d18:	2300      	movs	r3, #0
 8010d1a:	77fb      	strb	r3, [r7, #31]
 8010d1c:	e118      	b.n	8010f50 <UART_SetConfig+0x348>
 8010d1e:	2302      	movs	r3, #2
 8010d20:	77fb      	strb	r3, [r7, #31]
 8010d22:	e115      	b.n	8010f50 <UART_SetConfig+0x348>
 8010d24:	2304      	movs	r3, #4
 8010d26:	77fb      	strb	r3, [r7, #31]
 8010d28:	e112      	b.n	8010f50 <UART_SetConfig+0x348>
 8010d2a:	2308      	movs	r3, #8
 8010d2c:	77fb      	strb	r3, [r7, #31]
 8010d2e:	e10f      	b.n	8010f50 <UART_SetConfig+0x348>
 8010d30:	2310      	movs	r3, #16
 8010d32:	77fb      	strb	r3, [r7, #31]
 8010d34:	e10c      	b.n	8010f50 <UART_SetConfig+0x348>
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	4a68      	ldr	r2, [pc, #416]	; (8010edc <UART_SetConfig+0x2d4>)
 8010d3c:	4293      	cmp	r3, r2
 8010d3e:	d120      	bne.n	8010d82 <UART_SetConfig+0x17a>
 8010d40:	4b64      	ldr	r3, [pc, #400]	; (8010ed4 <UART_SetConfig+0x2cc>)
 8010d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010d46:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8010d4a:	2b30      	cmp	r3, #48	; 0x30
 8010d4c:	d013      	beq.n	8010d76 <UART_SetConfig+0x16e>
 8010d4e:	2b30      	cmp	r3, #48	; 0x30
 8010d50:	d814      	bhi.n	8010d7c <UART_SetConfig+0x174>
 8010d52:	2b20      	cmp	r3, #32
 8010d54:	d009      	beq.n	8010d6a <UART_SetConfig+0x162>
 8010d56:	2b20      	cmp	r3, #32
 8010d58:	d810      	bhi.n	8010d7c <UART_SetConfig+0x174>
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d002      	beq.n	8010d64 <UART_SetConfig+0x15c>
 8010d5e:	2b10      	cmp	r3, #16
 8010d60:	d006      	beq.n	8010d70 <UART_SetConfig+0x168>
 8010d62:	e00b      	b.n	8010d7c <UART_SetConfig+0x174>
 8010d64:	2300      	movs	r3, #0
 8010d66:	77fb      	strb	r3, [r7, #31]
 8010d68:	e0f2      	b.n	8010f50 <UART_SetConfig+0x348>
 8010d6a:	2302      	movs	r3, #2
 8010d6c:	77fb      	strb	r3, [r7, #31]
 8010d6e:	e0ef      	b.n	8010f50 <UART_SetConfig+0x348>
 8010d70:	2304      	movs	r3, #4
 8010d72:	77fb      	strb	r3, [r7, #31]
 8010d74:	e0ec      	b.n	8010f50 <UART_SetConfig+0x348>
 8010d76:	2308      	movs	r3, #8
 8010d78:	77fb      	strb	r3, [r7, #31]
 8010d7a:	e0e9      	b.n	8010f50 <UART_SetConfig+0x348>
 8010d7c:	2310      	movs	r3, #16
 8010d7e:	77fb      	strb	r3, [r7, #31]
 8010d80:	e0e6      	b.n	8010f50 <UART_SetConfig+0x348>
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	4a56      	ldr	r2, [pc, #344]	; (8010ee0 <UART_SetConfig+0x2d8>)
 8010d88:	4293      	cmp	r3, r2
 8010d8a:	d120      	bne.n	8010dce <UART_SetConfig+0x1c6>
 8010d8c:	4b51      	ldr	r3, [pc, #324]	; (8010ed4 <UART_SetConfig+0x2cc>)
 8010d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010d92:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010d96:	2bc0      	cmp	r3, #192	; 0xc0
 8010d98:	d013      	beq.n	8010dc2 <UART_SetConfig+0x1ba>
 8010d9a:	2bc0      	cmp	r3, #192	; 0xc0
 8010d9c:	d814      	bhi.n	8010dc8 <UART_SetConfig+0x1c0>
 8010d9e:	2b80      	cmp	r3, #128	; 0x80
 8010da0:	d009      	beq.n	8010db6 <UART_SetConfig+0x1ae>
 8010da2:	2b80      	cmp	r3, #128	; 0x80
 8010da4:	d810      	bhi.n	8010dc8 <UART_SetConfig+0x1c0>
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d002      	beq.n	8010db0 <UART_SetConfig+0x1a8>
 8010daa:	2b40      	cmp	r3, #64	; 0x40
 8010dac:	d006      	beq.n	8010dbc <UART_SetConfig+0x1b4>
 8010dae:	e00b      	b.n	8010dc8 <UART_SetConfig+0x1c0>
 8010db0:	2300      	movs	r3, #0
 8010db2:	77fb      	strb	r3, [r7, #31]
 8010db4:	e0cc      	b.n	8010f50 <UART_SetConfig+0x348>
 8010db6:	2302      	movs	r3, #2
 8010db8:	77fb      	strb	r3, [r7, #31]
 8010dba:	e0c9      	b.n	8010f50 <UART_SetConfig+0x348>
 8010dbc:	2304      	movs	r3, #4
 8010dbe:	77fb      	strb	r3, [r7, #31]
 8010dc0:	e0c6      	b.n	8010f50 <UART_SetConfig+0x348>
 8010dc2:	2308      	movs	r3, #8
 8010dc4:	77fb      	strb	r3, [r7, #31]
 8010dc6:	e0c3      	b.n	8010f50 <UART_SetConfig+0x348>
 8010dc8:	2310      	movs	r3, #16
 8010dca:	77fb      	strb	r3, [r7, #31]
 8010dcc:	e0c0      	b.n	8010f50 <UART_SetConfig+0x348>
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	4a44      	ldr	r2, [pc, #272]	; (8010ee4 <UART_SetConfig+0x2dc>)
 8010dd4:	4293      	cmp	r3, r2
 8010dd6:	d125      	bne.n	8010e24 <UART_SetConfig+0x21c>
 8010dd8:	4b3e      	ldr	r3, [pc, #248]	; (8010ed4 <UART_SetConfig+0x2cc>)
 8010dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010dde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010de2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010de6:	d017      	beq.n	8010e18 <UART_SetConfig+0x210>
 8010de8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010dec:	d817      	bhi.n	8010e1e <UART_SetConfig+0x216>
 8010dee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010df2:	d00b      	beq.n	8010e0c <UART_SetConfig+0x204>
 8010df4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010df8:	d811      	bhi.n	8010e1e <UART_SetConfig+0x216>
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d003      	beq.n	8010e06 <UART_SetConfig+0x1fe>
 8010dfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010e02:	d006      	beq.n	8010e12 <UART_SetConfig+0x20a>
 8010e04:	e00b      	b.n	8010e1e <UART_SetConfig+0x216>
 8010e06:	2300      	movs	r3, #0
 8010e08:	77fb      	strb	r3, [r7, #31]
 8010e0a:	e0a1      	b.n	8010f50 <UART_SetConfig+0x348>
 8010e0c:	2302      	movs	r3, #2
 8010e0e:	77fb      	strb	r3, [r7, #31]
 8010e10:	e09e      	b.n	8010f50 <UART_SetConfig+0x348>
 8010e12:	2304      	movs	r3, #4
 8010e14:	77fb      	strb	r3, [r7, #31]
 8010e16:	e09b      	b.n	8010f50 <UART_SetConfig+0x348>
 8010e18:	2308      	movs	r3, #8
 8010e1a:	77fb      	strb	r3, [r7, #31]
 8010e1c:	e098      	b.n	8010f50 <UART_SetConfig+0x348>
 8010e1e:	2310      	movs	r3, #16
 8010e20:	77fb      	strb	r3, [r7, #31]
 8010e22:	e095      	b.n	8010f50 <UART_SetConfig+0x348>
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	4a2f      	ldr	r2, [pc, #188]	; (8010ee8 <UART_SetConfig+0x2e0>)
 8010e2a:	4293      	cmp	r3, r2
 8010e2c:	d125      	bne.n	8010e7a <UART_SetConfig+0x272>
 8010e2e:	4b29      	ldr	r3, [pc, #164]	; (8010ed4 <UART_SetConfig+0x2cc>)
 8010e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010e34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8010e38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010e3c:	d017      	beq.n	8010e6e <UART_SetConfig+0x266>
 8010e3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010e42:	d817      	bhi.n	8010e74 <UART_SetConfig+0x26c>
 8010e44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010e48:	d00b      	beq.n	8010e62 <UART_SetConfig+0x25a>
 8010e4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010e4e:	d811      	bhi.n	8010e74 <UART_SetConfig+0x26c>
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d003      	beq.n	8010e5c <UART_SetConfig+0x254>
 8010e54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010e58:	d006      	beq.n	8010e68 <UART_SetConfig+0x260>
 8010e5a:	e00b      	b.n	8010e74 <UART_SetConfig+0x26c>
 8010e5c:	2301      	movs	r3, #1
 8010e5e:	77fb      	strb	r3, [r7, #31]
 8010e60:	e076      	b.n	8010f50 <UART_SetConfig+0x348>
 8010e62:	2302      	movs	r3, #2
 8010e64:	77fb      	strb	r3, [r7, #31]
 8010e66:	e073      	b.n	8010f50 <UART_SetConfig+0x348>
 8010e68:	2304      	movs	r3, #4
 8010e6a:	77fb      	strb	r3, [r7, #31]
 8010e6c:	e070      	b.n	8010f50 <UART_SetConfig+0x348>
 8010e6e:	2308      	movs	r3, #8
 8010e70:	77fb      	strb	r3, [r7, #31]
 8010e72:	e06d      	b.n	8010f50 <UART_SetConfig+0x348>
 8010e74:	2310      	movs	r3, #16
 8010e76:	77fb      	strb	r3, [r7, #31]
 8010e78:	e06a      	b.n	8010f50 <UART_SetConfig+0x348>
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	4a1b      	ldr	r2, [pc, #108]	; (8010eec <UART_SetConfig+0x2e4>)
 8010e80:	4293      	cmp	r3, r2
 8010e82:	d138      	bne.n	8010ef6 <UART_SetConfig+0x2ee>
 8010e84:	4b13      	ldr	r3, [pc, #76]	; (8010ed4 <UART_SetConfig+0x2cc>)
 8010e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010e8a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8010e8e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010e92:	d017      	beq.n	8010ec4 <UART_SetConfig+0x2bc>
 8010e94:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010e98:	d82a      	bhi.n	8010ef0 <UART_SetConfig+0x2e8>
 8010e9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010e9e:	d00b      	beq.n	8010eb8 <UART_SetConfig+0x2b0>
 8010ea0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010ea4:	d824      	bhi.n	8010ef0 <UART_SetConfig+0x2e8>
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d003      	beq.n	8010eb2 <UART_SetConfig+0x2aa>
 8010eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010eae:	d006      	beq.n	8010ebe <UART_SetConfig+0x2b6>
 8010eb0:	e01e      	b.n	8010ef0 <UART_SetConfig+0x2e8>
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	77fb      	strb	r3, [r7, #31]
 8010eb6:	e04b      	b.n	8010f50 <UART_SetConfig+0x348>
 8010eb8:	2302      	movs	r3, #2
 8010eba:	77fb      	strb	r3, [r7, #31]
 8010ebc:	e048      	b.n	8010f50 <UART_SetConfig+0x348>
 8010ebe:	2304      	movs	r3, #4
 8010ec0:	77fb      	strb	r3, [r7, #31]
 8010ec2:	e045      	b.n	8010f50 <UART_SetConfig+0x348>
 8010ec4:	2308      	movs	r3, #8
 8010ec6:	77fb      	strb	r3, [r7, #31]
 8010ec8:	e042      	b.n	8010f50 <UART_SetConfig+0x348>
 8010eca:	bf00      	nop
 8010ecc:	efff69f3 	.word	0xefff69f3
 8010ed0:	40011000 	.word	0x40011000
 8010ed4:	40023800 	.word	0x40023800
 8010ed8:	40004400 	.word	0x40004400
 8010edc:	40004800 	.word	0x40004800
 8010ee0:	40004c00 	.word	0x40004c00
 8010ee4:	40005000 	.word	0x40005000
 8010ee8:	40011400 	.word	0x40011400
 8010eec:	40007800 	.word	0x40007800
 8010ef0:	2310      	movs	r3, #16
 8010ef2:	77fb      	strb	r3, [r7, #31]
 8010ef4:	e02c      	b.n	8010f50 <UART_SetConfig+0x348>
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	4a72      	ldr	r2, [pc, #456]	; (80110c4 <UART_SetConfig+0x4bc>)
 8010efc:	4293      	cmp	r3, r2
 8010efe:	d125      	bne.n	8010f4c <UART_SetConfig+0x344>
 8010f00:	4b71      	ldr	r3, [pc, #452]	; (80110c8 <UART_SetConfig+0x4c0>)
 8010f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010f06:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8010f0a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8010f0e:	d017      	beq.n	8010f40 <UART_SetConfig+0x338>
 8010f10:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8010f14:	d817      	bhi.n	8010f46 <UART_SetConfig+0x33e>
 8010f16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010f1a:	d00b      	beq.n	8010f34 <UART_SetConfig+0x32c>
 8010f1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010f20:	d811      	bhi.n	8010f46 <UART_SetConfig+0x33e>
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d003      	beq.n	8010f2e <UART_SetConfig+0x326>
 8010f26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010f2a:	d006      	beq.n	8010f3a <UART_SetConfig+0x332>
 8010f2c:	e00b      	b.n	8010f46 <UART_SetConfig+0x33e>
 8010f2e:	2300      	movs	r3, #0
 8010f30:	77fb      	strb	r3, [r7, #31]
 8010f32:	e00d      	b.n	8010f50 <UART_SetConfig+0x348>
 8010f34:	2302      	movs	r3, #2
 8010f36:	77fb      	strb	r3, [r7, #31]
 8010f38:	e00a      	b.n	8010f50 <UART_SetConfig+0x348>
 8010f3a:	2304      	movs	r3, #4
 8010f3c:	77fb      	strb	r3, [r7, #31]
 8010f3e:	e007      	b.n	8010f50 <UART_SetConfig+0x348>
 8010f40:	2308      	movs	r3, #8
 8010f42:	77fb      	strb	r3, [r7, #31]
 8010f44:	e004      	b.n	8010f50 <UART_SetConfig+0x348>
 8010f46:	2310      	movs	r3, #16
 8010f48:	77fb      	strb	r3, [r7, #31]
 8010f4a:	e001      	b.n	8010f50 <UART_SetConfig+0x348>
 8010f4c:	2310      	movs	r3, #16
 8010f4e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	69db      	ldr	r3, [r3, #28]
 8010f54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010f58:	d15b      	bne.n	8011012 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8010f5a:	7ffb      	ldrb	r3, [r7, #31]
 8010f5c:	2b08      	cmp	r3, #8
 8010f5e:	d828      	bhi.n	8010fb2 <UART_SetConfig+0x3aa>
 8010f60:	a201      	add	r2, pc, #4	; (adr r2, 8010f68 <UART_SetConfig+0x360>)
 8010f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f66:	bf00      	nop
 8010f68:	08010f8d 	.word	0x08010f8d
 8010f6c:	08010f95 	.word	0x08010f95
 8010f70:	08010f9d 	.word	0x08010f9d
 8010f74:	08010fb3 	.word	0x08010fb3
 8010f78:	08010fa3 	.word	0x08010fa3
 8010f7c:	08010fb3 	.word	0x08010fb3
 8010f80:	08010fb3 	.word	0x08010fb3
 8010f84:	08010fb3 	.word	0x08010fb3
 8010f88:	08010fab 	.word	0x08010fab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010f8c:	f7fb fc48 	bl	800c820 <HAL_RCC_GetPCLK1Freq>
 8010f90:	61b8      	str	r0, [r7, #24]
        break;
 8010f92:	e013      	b.n	8010fbc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010f94:	f7fb fc58 	bl	800c848 <HAL_RCC_GetPCLK2Freq>
 8010f98:	61b8      	str	r0, [r7, #24]
        break;
 8010f9a:	e00f      	b.n	8010fbc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010f9c:	4b4b      	ldr	r3, [pc, #300]	; (80110cc <UART_SetConfig+0x4c4>)
 8010f9e:	61bb      	str	r3, [r7, #24]
        break;
 8010fa0:	e00c      	b.n	8010fbc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010fa2:	f7fb fb6b 	bl	800c67c <HAL_RCC_GetSysClockFreq>
 8010fa6:	61b8      	str	r0, [r7, #24]
        break;
 8010fa8:	e008      	b.n	8010fbc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010faa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010fae:	61bb      	str	r3, [r7, #24]
        break;
 8010fb0:	e004      	b.n	8010fbc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8010fb6:	2301      	movs	r3, #1
 8010fb8:	77bb      	strb	r3, [r7, #30]
        break;
 8010fba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010fbc:	69bb      	ldr	r3, [r7, #24]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d074      	beq.n	80110ac <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8010fc2:	69bb      	ldr	r3, [r7, #24]
 8010fc4:	005a      	lsls	r2, r3, #1
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	685b      	ldr	r3, [r3, #4]
 8010fca:	085b      	lsrs	r3, r3, #1
 8010fcc:	441a      	add	r2, r3
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	685b      	ldr	r3, [r3, #4]
 8010fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8010fd6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010fd8:	693b      	ldr	r3, [r7, #16]
 8010fda:	2b0f      	cmp	r3, #15
 8010fdc:	d916      	bls.n	801100c <UART_SetConfig+0x404>
 8010fde:	693b      	ldr	r3, [r7, #16]
 8010fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010fe4:	d212      	bcs.n	801100c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010fe6:	693b      	ldr	r3, [r7, #16]
 8010fe8:	b29b      	uxth	r3, r3
 8010fea:	f023 030f 	bic.w	r3, r3, #15
 8010fee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010ff0:	693b      	ldr	r3, [r7, #16]
 8010ff2:	085b      	lsrs	r3, r3, #1
 8010ff4:	b29b      	uxth	r3, r3
 8010ff6:	f003 0307 	and.w	r3, r3, #7
 8010ffa:	b29a      	uxth	r2, r3
 8010ffc:	89fb      	ldrh	r3, [r7, #14]
 8010ffe:	4313      	orrs	r3, r2
 8011000:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	89fa      	ldrh	r2, [r7, #14]
 8011008:	60da      	str	r2, [r3, #12]
 801100a:	e04f      	b.n	80110ac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 801100c:	2301      	movs	r3, #1
 801100e:	77bb      	strb	r3, [r7, #30]
 8011010:	e04c      	b.n	80110ac <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011012:	7ffb      	ldrb	r3, [r7, #31]
 8011014:	2b08      	cmp	r3, #8
 8011016:	d828      	bhi.n	801106a <UART_SetConfig+0x462>
 8011018:	a201      	add	r2, pc, #4	; (adr r2, 8011020 <UART_SetConfig+0x418>)
 801101a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801101e:	bf00      	nop
 8011020:	08011045 	.word	0x08011045
 8011024:	0801104d 	.word	0x0801104d
 8011028:	08011055 	.word	0x08011055
 801102c:	0801106b 	.word	0x0801106b
 8011030:	0801105b 	.word	0x0801105b
 8011034:	0801106b 	.word	0x0801106b
 8011038:	0801106b 	.word	0x0801106b
 801103c:	0801106b 	.word	0x0801106b
 8011040:	08011063 	.word	0x08011063
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011044:	f7fb fbec 	bl	800c820 <HAL_RCC_GetPCLK1Freq>
 8011048:	61b8      	str	r0, [r7, #24]
        break;
 801104a:	e013      	b.n	8011074 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801104c:	f7fb fbfc 	bl	800c848 <HAL_RCC_GetPCLK2Freq>
 8011050:	61b8      	str	r0, [r7, #24]
        break;
 8011052:	e00f      	b.n	8011074 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011054:	4b1d      	ldr	r3, [pc, #116]	; (80110cc <UART_SetConfig+0x4c4>)
 8011056:	61bb      	str	r3, [r7, #24]
        break;
 8011058:	e00c      	b.n	8011074 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801105a:	f7fb fb0f 	bl	800c67c <HAL_RCC_GetSysClockFreq>
 801105e:	61b8      	str	r0, [r7, #24]
        break;
 8011060:	e008      	b.n	8011074 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011066:	61bb      	str	r3, [r7, #24]
        break;
 8011068:	e004      	b.n	8011074 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 801106a:	2300      	movs	r3, #0
 801106c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 801106e:	2301      	movs	r3, #1
 8011070:	77bb      	strb	r3, [r7, #30]
        break;
 8011072:	bf00      	nop
    }

    if (pclk != 0U)
 8011074:	69bb      	ldr	r3, [r7, #24]
 8011076:	2b00      	cmp	r3, #0
 8011078:	d018      	beq.n	80110ac <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	685b      	ldr	r3, [r3, #4]
 801107e:	085a      	lsrs	r2, r3, #1
 8011080:	69bb      	ldr	r3, [r7, #24]
 8011082:	441a      	add	r2, r3
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	685b      	ldr	r3, [r3, #4]
 8011088:	fbb2 f3f3 	udiv	r3, r2, r3
 801108c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801108e:	693b      	ldr	r3, [r7, #16]
 8011090:	2b0f      	cmp	r3, #15
 8011092:	d909      	bls.n	80110a8 <UART_SetConfig+0x4a0>
 8011094:	693b      	ldr	r3, [r7, #16]
 8011096:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801109a:	d205      	bcs.n	80110a8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801109c:	693b      	ldr	r3, [r7, #16]
 801109e:	b29a      	uxth	r2, r3
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	60da      	str	r2, [r3, #12]
 80110a6:	e001      	b.n	80110ac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80110a8:	2301      	movs	r3, #1
 80110aa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	2200      	movs	r2, #0
 80110b0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	2200      	movs	r2, #0
 80110b6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80110b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80110ba:	4618      	mov	r0, r3
 80110bc:	3720      	adds	r7, #32
 80110be:	46bd      	mov	sp, r7
 80110c0:	bd80      	pop	{r7, pc}
 80110c2:	bf00      	nop
 80110c4:	40007c00 	.word	0x40007c00
 80110c8:	40023800 	.word	0x40023800
 80110cc:	00f42400 	.word	0x00f42400

080110d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80110d0:	b480      	push	{r7}
 80110d2:	b083      	sub	sp, #12
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110dc:	f003 0301 	and.w	r3, r3, #1
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d00a      	beq.n	80110fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	685b      	ldr	r3, [r3, #4]
 80110ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	430a      	orrs	r2, r1
 80110f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110fe:	f003 0302 	and.w	r3, r3, #2
 8011102:	2b00      	cmp	r3, #0
 8011104:	d00a      	beq.n	801111c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	685b      	ldr	r3, [r3, #4]
 801110c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	430a      	orrs	r2, r1
 801111a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011120:	f003 0304 	and.w	r3, r3, #4
 8011124:	2b00      	cmp	r3, #0
 8011126:	d00a      	beq.n	801113e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	685b      	ldr	r3, [r3, #4]
 801112e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	430a      	orrs	r2, r1
 801113c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011142:	f003 0308 	and.w	r3, r3, #8
 8011146:	2b00      	cmp	r3, #0
 8011148:	d00a      	beq.n	8011160 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	685b      	ldr	r3, [r3, #4]
 8011150:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	430a      	orrs	r2, r1
 801115e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011164:	f003 0310 	and.w	r3, r3, #16
 8011168:	2b00      	cmp	r3, #0
 801116a:	d00a      	beq.n	8011182 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	689b      	ldr	r3, [r3, #8]
 8011172:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	430a      	orrs	r2, r1
 8011180:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011186:	f003 0320 	and.w	r3, r3, #32
 801118a:	2b00      	cmp	r3, #0
 801118c:	d00a      	beq.n	80111a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	689b      	ldr	r3, [r3, #8]
 8011194:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	430a      	orrs	r2, r1
 80111a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d01a      	beq.n	80111e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	685b      	ldr	r3, [r3, #4]
 80111b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	430a      	orrs	r2, r1
 80111c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80111ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80111ce:	d10a      	bne.n	80111e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	685b      	ldr	r3, [r3, #4]
 80111d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	430a      	orrs	r2, r1
 80111e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d00a      	beq.n	8011208 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	685b      	ldr	r3, [r3, #4]
 80111f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	430a      	orrs	r2, r1
 8011206:	605a      	str	r2, [r3, #4]
  }
}
 8011208:	bf00      	nop
 801120a:	370c      	adds	r7, #12
 801120c:	46bd      	mov	sp, r7
 801120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011212:	4770      	bx	lr

08011214 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011214:	b580      	push	{r7, lr}
 8011216:	b086      	sub	sp, #24
 8011218:	af02      	add	r7, sp, #8
 801121a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	2200      	movs	r2, #0
 8011220:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011224:	f7f7 f974 	bl	8008510 <HAL_GetTick>
 8011228:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	f003 0308 	and.w	r3, r3, #8
 8011234:	2b08      	cmp	r3, #8
 8011236:	d10e      	bne.n	8011256 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011238:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801123c:	9300      	str	r3, [sp, #0]
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	2200      	movs	r2, #0
 8011242:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011246:	6878      	ldr	r0, [r7, #4]
 8011248:	f000 f831 	bl	80112ae <UART_WaitOnFlagUntilTimeout>
 801124c:	4603      	mov	r3, r0
 801124e:	2b00      	cmp	r3, #0
 8011250:	d001      	beq.n	8011256 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011252:	2303      	movs	r3, #3
 8011254:	e027      	b.n	80112a6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	f003 0304 	and.w	r3, r3, #4
 8011260:	2b04      	cmp	r3, #4
 8011262:	d10e      	bne.n	8011282 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011264:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011268:	9300      	str	r3, [sp, #0]
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	2200      	movs	r2, #0
 801126e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011272:	6878      	ldr	r0, [r7, #4]
 8011274:	f000 f81b 	bl	80112ae <UART_WaitOnFlagUntilTimeout>
 8011278:	4603      	mov	r3, r0
 801127a:	2b00      	cmp	r3, #0
 801127c:	d001      	beq.n	8011282 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801127e:	2303      	movs	r3, #3
 8011280:	e011      	b.n	80112a6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	2220      	movs	r2, #32
 8011286:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	2220      	movs	r2, #32
 801128c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	2200      	movs	r2, #0
 8011294:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	2200      	movs	r2, #0
 801129a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	2200      	movs	r2, #0
 80112a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80112a4:	2300      	movs	r3, #0
}
 80112a6:	4618      	mov	r0, r3
 80112a8:	3710      	adds	r7, #16
 80112aa:	46bd      	mov	sp, r7
 80112ac:	bd80      	pop	{r7, pc}

080112ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80112ae:	b580      	push	{r7, lr}
 80112b0:	b09c      	sub	sp, #112	; 0x70
 80112b2:	af00      	add	r7, sp, #0
 80112b4:	60f8      	str	r0, [r7, #12]
 80112b6:	60b9      	str	r1, [r7, #8]
 80112b8:	603b      	str	r3, [r7, #0]
 80112ba:	4613      	mov	r3, r2
 80112bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80112be:	e0a7      	b.n	8011410 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80112c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80112c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112c6:	f000 80a3 	beq.w	8011410 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80112ca:	f7f7 f921 	bl	8008510 <HAL_GetTick>
 80112ce:	4602      	mov	r2, r0
 80112d0:	683b      	ldr	r3, [r7, #0]
 80112d2:	1ad3      	subs	r3, r2, r3
 80112d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80112d6:	429a      	cmp	r2, r3
 80112d8:	d302      	bcc.n	80112e0 <UART_WaitOnFlagUntilTimeout+0x32>
 80112da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d13f      	bne.n	8011360 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112e8:	e853 3f00 	ldrex	r3, [r3]
 80112ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80112ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80112f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80112f4:	667b      	str	r3, [r7, #100]	; 0x64
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	461a      	mov	r2, r3
 80112fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80112fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011300:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011302:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011304:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011306:	e841 2300 	strex	r3, r2, [r1]
 801130a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801130c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801130e:	2b00      	cmp	r3, #0
 8011310:	d1e6      	bne.n	80112e0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	3308      	adds	r3, #8
 8011318:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801131a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801131c:	e853 3f00 	ldrex	r3, [r3]
 8011320:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011324:	f023 0301 	bic.w	r3, r3, #1
 8011328:	663b      	str	r3, [r7, #96]	; 0x60
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	3308      	adds	r3, #8
 8011330:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011332:	64ba      	str	r2, [r7, #72]	; 0x48
 8011334:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011336:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011338:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801133a:	e841 2300 	strex	r3, r2, [r1]
 801133e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8011340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011342:	2b00      	cmp	r3, #0
 8011344:	d1e5      	bne.n	8011312 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	2220      	movs	r2, #32
 801134a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	2220      	movs	r2, #32
 8011350:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	2200      	movs	r2, #0
 8011358:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 801135c:	2303      	movs	r3, #3
 801135e:	e068      	b.n	8011432 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	f003 0304 	and.w	r3, r3, #4
 801136a:	2b00      	cmp	r3, #0
 801136c:	d050      	beq.n	8011410 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	69db      	ldr	r3, [r3, #28]
 8011374:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011378:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801137c:	d148      	bne.n	8011410 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011386:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801138e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011390:	e853 3f00 	ldrex	r3, [r3]
 8011394:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011398:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801139c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	461a      	mov	r2, r3
 80113a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80113a6:	637b      	str	r3, [r7, #52]	; 0x34
 80113a8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80113ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80113ae:	e841 2300 	strex	r3, r2, [r1]
 80113b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80113b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d1e6      	bne.n	8011388 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	3308      	adds	r3, #8
 80113c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113c2:	697b      	ldr	r3, [r7, #20]
 80113c4:	e853 3f00 	ldrex	r3, [r3]
 80113c8:	613b      	str	r3, [r7, #16]
   return(result);
 80113ca:	693b      	ldr	r3, [r7, #16]
 80113cc:	f023 0301 	bic.w	r3, r3, #1
 80113d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	3308      	adds	r3, #8
 80113d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80113da:	623a      	str	r2, [r7, #32]
 80113dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113de:	69f9      	ldr	r1, [r7, #28]
 80113e0:	6a3a      	ldr	r2, [r7, #32]
 80113e2:	e841 2300 	strex	r3, r2, [r1]
 80113e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80113e8:	69bb      	ldr	r3, [r7, #24]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d1e5      	bne.n	80113ba <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	2220      	movs	r2, #32
 80113f2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	2220      	movs	r2, #32
 80113f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	2220      	movs	r2, #32
 8011400:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	2200      	movs	r2, #0
 8011408:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 801140c:	2303      	movs	r3, #3
 801140e:	e010      	b.n	8011432 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	69da      	ldr	r2, [r3, #28]
 8011416:	68bb      	ldr	r3, [r7, #8]
 8011418:	4013      	ands	r3, r2
 801141a:	68ba      	ldr	r2, [r7, #8]
 801141c:	429a      	cmp	r2, r3
 801141e:	bf0c      	ite	eq
 8011420:	2301      	moveq	r3, #1
 8011422:	2300      	movne	r3, #0
 8011424:	b2db      	uxtb	r3, r3
 8011426:	461a      	mov	r2, r3
 8011428:	79fb      	ldrb	r3, [r7, #7]
 801142a:	429a      	cmp	r2, r3
 801142c:	f43f af48 	beq.w	80112c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011430:	2300      	movs	r3, #0
}
 8011432:	4618      	mov	r0, r3
 8011434:	3770      	adds	r7, #112	; 0x70
 8011436:	46bd      	mov	sp, r7
 8011438:	bd80      	pop	{r7, pc}
	...

0801143c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801143c:	b480      	push	{r7}
 801143e:	b097      	sub	sp, #92	; 0x5c
 8011440:	af00      	add	r7, sp, #0
 8011442:	60f8      	str	r0, [r7, #12]
 8011444:	60b9      	str	r1, [r7, #8]
 8011446:	4613      	mov	r3, r2
 8011448:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	68ba      	ldr	r2, [r7, #8]
 801144e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	88fa      	ldrh	r2, [r7, #6]
 8011454:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	88fa      	ldrh	r2, [r7, #6]
 801145c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	2200      	movs	r2, #0
 8011464:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	689b      	ldr	r3, [r3, #8]
 801146a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801146e:	d10e      	bne.n	801148e <UART_Start_Receive_IT+0x52>
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	691b      	ldr	r3, [r3, #16]
 8011474:	2b00      	cmp	r3, #0
 8011476:	d105      	bne.n	8011484 <UART_Start_Receive_IT+0x48>
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	f240 12ff 	movw	r2, #511	; 0x1ff
 801147e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8011482:	e02d      	b.n	80114e0 <UART_Start_Receive_IT+0xa4>
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	22ff      	movs	r2, #255	; 0xff
 8011488:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801148c:	e028      	b.n	80114e0 <UART_Start_Receive_IT+0xa4>
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	689b      	ldr	r3, [r3, #8]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d10d      	bne.n	80114b2 <UART_Start_Receive_IT+0x76>
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	691b      	ldr	r3, [r3, #16]
 801149a:	2b00      	cmp	r3, #0
 801149c:	d104      	bne.n	80114a8 <UART_Start_Receive_IT+0x6c>
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	22ff      	movs	r2, #255	; 0xff
 80114a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80114a6:	e01b      	b.n	80114e0 <UART_Start_Receive_IT+0xa4>
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	227f      	movs	r2, #127	; 0x7f
 80114ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80114b0:	e016      	b.n	80114e0 <UART_Start_Receive_IT+0xa4>
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	689b      	ldr	r3, [r3, #8]
 80114b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80114ba:	d10d      	bne.n	80114d8 <UART_Start_Receive_IT+0x9c>
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	691b      	ldr	r3, [r3, #16]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d104      	bne.n	80114ce <UART_Start_Receive_IT+0x92>
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	227f      	movs	r2, #127	; 0x7f
 80114c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80114cc:	e008      	b.n	80114e0 <UART_Start_Receive_IT+0xa4>
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	223f      	movs	r2, #63	; 0x3f
 80114d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80114d6:	e003      	b.n	80114e0 <UART_Start_Receive_IT+0xa4>
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	2200      	movs	r2, #0
 80114dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	2200      	movs	r2, #0
 80114e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	2222      	movs	r2, #34	; 0x22
 80114ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	3308      	adds	r3, #8
 80114f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114fa:	e853 3f00 	ldrex	r3, [r3]
 80114fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011502:	f043 0301 	orr.w	r3, r3, #1
 8011506:	657b      	str	r3, [r7, #84]	; 0x54
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	3308      	adds	r3, #8
 801150e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011510:	64ba      	str	r2, [r7, #72]	; 0x48
 8011512:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011514:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011516:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011518:	e841 2300 	strex	r3, r2, [r1]
 801151c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801151e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011520:	2b00      	cmp	r3, #0
 8011522:	d1e5      	bne.n	80114f0 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	689b      	ldr	r3, [r3, #8]
 8011528:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801152c:	d107      	bne.n	801153e <UART_Start_Receive_IT+0x102>
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	691b      	ldr	r3, [r3, #16]
 8011532:	2b00      	cmp	r3, #0
 8011534:	d103      	bne.n	801153e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	4a21      	ldr	r2, [pc, #132]	; (80115c0 <UART_Start_Receive_IT+0x184>)
 801153a:	669a      	str	r2, [r3, #104]	; 0x68
 801153c:	e002      	b.n	8011544 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	4a20      	ldr	r2, [pc, #128]	; (80115c4 <UART_Start_Receive_IT+0x188>)
 8011542:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	691b      	ldr	r3, [r3, #16]
 8011548:	2b00      	cmp	r3, #0
 801154a:	d019      	beq.n	8011580 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011554:	e853 3f00 	ldrex	r3, [r3]
 8011558:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801155c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8011560:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	461a      	mov	r2, r3
 8011568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801156a:	637b      	str	r3, [r7, #52]	; 0x34
 801156c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801156e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011570:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011572:	e841 2300 	strex	r3, r2, [r1]
 8011576:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801157a:	2b00      	cmp	r3, #0
 801157c:	d1e6      	bne.n	801154c <UART_Start_Receive_IT+0x110>
 801157e:	e018      	b.n	80115b2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011586:	697b      	ldr	r3, [r7, #20]
 8011588:	e853 3f00 	ldrex	r3, [r3]
 801158c:	613b      	str	r3, [r7, #16]
   return(result);
 801158e:	693b      	ldr	r3, [r7, #16]
 8011590:	f043 0320 	orr.w	r3, r3, #32
 8011594:	653b      	str	r3, [r7, #80]	; 0x50
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	461a      	mov	r2, r3
 801159c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801159e:	623b      	str	r3, [r7, #32]
 80115a0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115a2:	69f9      	ldr	r1, [r7, #28]
 80115a4:	6a3a      	ldr	r2, [r7, #32]
 80115a6:	e841 2300 	strex	r3, r2, [r1]
 80115aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80115ac:	69bb      	ldr	r3, [r7, #24]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d1e6      	bne.n	8011580 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80115b2:	2300      	movs	r3, #0
}
 80115b4:	4618      	mov	r0, r3
 80115b6:	375c      	adds	r7, #92	; 0x5c
 80115b8:	46bd      	mov	sp, r7
 80115ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115be:	4770      	bx	lr
 80115c0:	0801195f 	.word	0x0801195f
 80115c4:	080117f9 	.word	0x080117f9

080115c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80115c8:	b480      	push	{r7}
 80115ca:	b095      	sub	sp, #84	; 0x54
 80115cc:	af00      	add	r7, sp, #0
 80115ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115d8:	e853 3f00 	ldrex	r3, [r3]
 80115dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80115de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80115e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	461a      	mov	r2, r3
 80115ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115ee:	643b      	str	r3, [r7, #64]	; 0x40
 80115f0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80115f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80115f6:	e841 2300 	strex	r3, r2, [r1]
 80115fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80115fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d1e6      	bne.n	80115d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	3308      	adds	r3, #8
 8011608:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801160a:	6a3b      	ldr	r3, [r7, #32]
 801160c:	e853 3f00 	ldrex	r3, [r3]
 8011610:	61fb      	str	r3, [r7, #28]
   return(result);
 8011612:	69fb      	ldr	r3, [r7, #28]
 8011614:	f023 0301 	bic.w	r3, r3, #1
 8011618:	64bb      	str	r3, [r7, #72]	; 0x48
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	3308      	adds	r3, #8
 8011620:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011622:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011624:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011626:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801162a:	e841 2300 	strex	r3, r2, [r1]
 801162e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011632:	2b00      	cmp	r3, #0
 8011634:	d1e5      	bne.n	8011602 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801163a:	2b01      	cmp	r3, #1
 801163c:	d118      	bne.n	8011670 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	e853 3f00 	ldrex	r3, [r3]
 801164a:	60bb      	str	r3, [r7, #8]
   return(result);
 801164c:	68bb      	ldr	r3, [r7, #8]
 801164e:	f023 0310 	bic.w	r3, r3, #16
 8011652:	647b      	str	r3, [r7, #68]	; 0x44
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	461a      	mov	r2, r3
 801165a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801165c:	61bb      	str	r3, [r7, #24]
 801165e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011660:	6979      	ldr	r1, [r7, #20]
 8011662:	69ba      	ldr	r2, [r7, #24]
 8011664:	e841 2300 	strex	r3, r2, [r1]
 8011668:	613b      	str	r3, [r7, #16]
   return(result);
 801166a:	693b      	ldr	r3, [r7, #16]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d1e6      	bne.n	801163e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	2220      	movs	r2, #32
 8011674:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	2200      	movs	r2, #0
 801167c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	2200      	movs	r2, #0
 8011682:	669a      	str	r2, [r3, #104]	; 0x68
}
 8011684:	bf00      	nop
 8011686:	3754      	adds	r7, #84	; 0x54
 8011688:	46bd      	mov	sp, r7
 801168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801168e:	4770      	bx	lr

08011690 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011690:	b580      	push	{r7, lr}
 8011692:	b084      	sub	sp, #16
 8011694:	af00      	add	r7, sp, #0
 8011696:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801169c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	2200      	movs	r2, #0
 80116a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	2200      	movs	r2, #0
 80116aa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80116ae:	68f8      	ldr	r0, [r7, #12]
 80116b0:	f7ff fa80 	bl	8010bb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80116b4:	bf00      	nop
 80116b6:	3710      	adds	r7, #16
 80116b8:	46bd      	mov	sp, r7
 80116ba:	bd80      	pop	{r7, pc}

080116bc <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80116bc:	b580      	push	{r7, lr}
 80116be:	b084      	sub	sp, #16
 80116c0:	af00      	add	r7, sp, #0
 80116c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80116c8:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80116ce:	2200      	movs	r2, #0
 80116d0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d004      	beq.n	80116e4 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80116de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d11d      	bne.n	8011720 <UART_DMATxAbortCallback+0x64>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	2200      	movs	r2, #0
 80116e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	2200      	movs	r2, #0
 80116f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	2200      	movs	r2, #0
 80116f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	220f      	movs	r2, #15
 8011702:	621a      	str	r2, [r3, #32]


  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	2220      	movs	r2, #32
 8011708:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	2220      	movs	r2, #32
 801170e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	2200      	movs	r2, #0
 8011716:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8011718:	68f8      	ldr	r0, [r7, #12]
 801171a:	f7ff fa55 	bl	8010bc8 <HAL_UART_AbortCpltCallback>
 801171e:	e000      	b.n	8011722 <UART_DMATxAbortCallback+0x66>
      return;
 8011720:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011722:	3710      	adds	r7, #16
 8011724:	46bd      	mov	sp, r7
 8011726:	bd80      	pop	{r7, pc}

08011728 <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8011728:	b580      	push	{r7, lr}
 801172a:	b084      	sub	sp, #16
 801172c:	af00      	add	r7, sp, #0
 801172e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011734:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801173a:	2200      	movs	r2, #0
 801173c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011742:	2b00      	cmp	r3, #0
 8011744:	d004      	beq.n	8011750 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801174a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801174c:	2b00      	cmp	r3, #0
 801174e:	d125      	bne.n	801179c <UART_DMARxAbortCallback+0x74>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	2200      	movs	r2, #0
 8011754:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	2200      	movs	r2, #0
 801175c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	2200      	movs	r2, #0
 8011764:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	220f      	movs	r2, #15
 801176e:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	699a      	ldr	r2, [r3, #24]
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	f042 0208 	orr.w	r2, r2, #8
 801177e:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	2220      	movs	r2, #32
 8011784:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	2220      	movs	r2, #32
 801178a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	2200      	movs	r2, #0
 8011792:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8011794:	68f8      	ldr	r0, [r7, #12]
 8011796:	f7ff fa17 	bl	8010bc8 <HAL_UART_AbortCpltCallback>
 801179a:	e000      	b.n	801179e <UART_DMARxAbortCallback+0x76>
      return;
 801179c:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801179e:	3710      	adds	r7, #16
 80117a0:	46bd      	mov	sp, r7
 80117a2:	bd80      	pop	{r7, pc}

080117a4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80117a4:	b580      	push	{r7, lr}
 80117a6:	b088      	sub	sp, #32
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	e853 3f00 	ldrex	r3, [r3]
 80117b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80117ba:	68bb      	ldr	r3, [r7, #8]
 80117bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80117c0:	61fb      	str	r3, [r7, #28]
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	461a      	mov	r2, r3
 80117c8:	69fb      	ldr	r3, [r7, #28]
 80117ca:	61bb      	str	r3, [r7, #24]
 80117cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117ce:	6979      	ldr	r1, [r7, #20]
 80117d0:	69ba      	ldr	r2, [r7, #24]
 80117d2:	e841 2300 	strex	r3, r2, [r1]
 80117d6:	613b      	str	r3, [r7, #16]
   return(result);
 80117d8:	693b      	ldr	r3, [r7, #16]
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d1e6      	bne.n	80117ac <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	2220      	movs	r2, #32
 80117e2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	2200      	movs	r2, #0
 80117e8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80117ea:	6878      	ldr	r0, [r7, #4]
 80117ec:	f7ff f9d8 	bl	8010ba0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80117f0:	bf00      	nop
 80117f2:	3720      	adds	r7, #32
 80117f4:	46bd      	mov	sp, r7
 80117f6:	bd80      	pop	{r7, pc}

080117f8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80117f8:	b580      	push	{r7, lr}
 80117fa:	b096      	sub	sp, #88	; 0x58
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011806:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011810:	2b22      	cmp	r3, #34	; 0x22
 8011812:	f040 8098 	bne.w	8011946 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801181c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011820:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8011824:	b2d9      	uxtb	r1, r3
 8011826:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801182a:	b2da      	uxtb	r2, r3
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011830:	400a      	ands	r2, r1
 8011832:	b2d2      	uxtb	r2, r2
 8011834:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801183a:	1c5a      	adds	r2, r3, #1
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8011846:	b29b      	uxth	r3, r3
 8011848:	3b01      	subs	r3, #1
 801184a:	b29a      	uxth	r2, r3
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8011858:	b29b      	uxth	r3, r3
 801185a:	2b00      	cmp	r3, #0
 801185c:	d17b      	bne.n	8011956 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011866:	e853 3f00 	ldrex	r3, [r3]
 801186a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801186c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801186e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011872:	653b      	str	r3, [r7, #80]	; 0x50
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	461a      	mov	r2, r3
 801187a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801187c:	647b      	str	r3, [r7, #68]	; 0x44
 801187e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011880:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011882:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011884:	e841 2300 	strex	r3, r2, [r1]
 8011888:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801188a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801188c:	2b00      	cmp	r3, #0
 801188e:	d1e6      	bne.n	801185e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	3308      	adds	r3, #8
 8011896:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801189a:	e853 3f00 	ldrex	r3, [r3]
 801189e:	623b      	str	r3, [r7, #32]
   return(result);
 80118a0:	6a3b      	ldr	r3, [r7, #32]
 80118a2:	f023 0301 	bic.w	r3, r3, #1
 80118a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	3308      	adds	r3, #8
 80118ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80118b0:	633a      	str	r2, [r7, #48]	; 0x30
 80118b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80118b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80118b8:	e841 2300 	strex	r3, r2, [r1]
 80118bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80118be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d1e5      	bne.n	8011890 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	2220      	movs	r2, #32
 80118c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	2200      	movs	r2, #0
 80118d0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	2200      	movs	r2, #0
 80118d6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80118dc:	2b01      	cmp	r3, #1
 80118de:	d12e      	bne.n	801193e <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	2200      	movs	r2, #0
 80118e4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118ec:	693b      	ldr	r3, [r7, #16]
 80118ee:	e853 3f00 	ldrex	r3, [r3]
 80118f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	f023 0310 	bic.w	r3, r3, #16
 80118fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	461a      	mov	r2, r3
 8011902:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011904:	61fb      	str	r3, [r7, #28]
 8011906:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011908:	69b9      	ldr	r1, [r7, #24]
 801190a:	69fa      	ldr	r2, [r7, #28]
 801190c:	e841 2300 	strex	r3, r2, [r1]
 8011910:	617b      	str	r3, [r7, #20]
   return(result);
 8011912:	697b      	ldr	r3, [r7, #20]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d1e6      	bne.n	80118e6 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	69db      	ldr	r3, [r3, #28]
 801191e:	f003 0310 	and.w	r3, r3, #16
 8011922:	2b10      	cmp	r3, #16
 8011924:	d103      	bne.n	801192e <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	2210      	movs	r2, #16
 801192c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8011934:	4619      	mov	r1, r3
 8011936:	6878      	ldr	r0, [r7, #4]
 8011938:	f7ff f950 	bl	8010bdc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801193c:	e00b      	b.n	8011956 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 801193e:	6878      	ldr	r0, [r7, #4]
 8011940:	f7f0 face 	bl	8001ee0 <HAL_UART_RxCpltCallback>
}
 8011944:	e007      	b.n	8011956 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	699a      	ldr	r2, [r3, #24]
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	f042 0208 	orr.w	r2, r2, #8
 8011954:	619a      	str	r2, [r3, #24]
}
 8011956:	bf00      	nop
 8011958:	3758      	adds	r7, #88	; 0x58
 801195a:	46bd      	mov	sp, r7
 801195c:	bd80      	pop	{r7, pc}

0801195e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801195e:	b580      	push	{r7, lr}
 8011960:	b096      	sub	sp, #88	; 0x58
 8011962:	af00      	add	r7, sp, #0
 8011964:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801196c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011976:	2b22      	cmp	r3, #34	; 0x22
 8011978:	f040 8098 	bne.w	8011aac <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011982:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801198a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 801198c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8011990:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8011994:	4013      	ands	r3, r2
 8011996:	b29a      	uxth	r2, r3
 8011998:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801199a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80119a0:	1c9a      	adds	r2, r3, #2
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80119ac:	b29b      	uxth	r3, r3
 80119ae:	3b01      	subs	r3, #1
 80119b0:	b29a      	uxth	r2, r3
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80119be:	b29b      	uxth	r3, r3
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d17b      	bne.n	8011abc <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119cc:	e853 3f00 	ldrex	r3, [r3]
 80119d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80119d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80119d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	461a      	mov	r2, r3
 80119e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119e2:	643b      	str	r3, [r7, #64]	; 0x40
 80119e4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80119e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80119ea:	e841 2300 	strex	r3, r2, [r1]
 80119ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80119f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d1e6      	bne.n	80119c4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	3308      	adds	r3, #8
 80119fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119fe:	6a3b      	ldr	r3, [r7, #32]
 8011a00:	e853 3f00 	ldrex	r3, [r3]
 8011a04:	61fb      	str	r3, [r7, #28]
   return(result);
 8011a06:	69fb      	ldr	r3, [r7, #28]
 8011a08:	f023 0301 	bic.w	r3, r3, #1
 8011a0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	3308      	adds	r3, #8
 8011a14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011a16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011a18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011a1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011a1e:	e841 2300 	strex	r3, r2, [r1]
 8011a22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d1e5      	bne.n	80119f6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	2220      	movs	r2, #32
 8011a2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	2200      	movs	r2, #0
 8011a36:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011a42:	2b01      	cmp	r3, #1
 8011a44:	d12e      	bne.n	8011aa4 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	2200      	movs	r2, #0
 8011a4a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	e853 3f00 	ldrex	r3, [r3]
 8011a58:	60bb      	str	r3, [r7, #8]
   return(result);
 8011a5a:	68bb      	ldr	r3, [r7, #8]
 8011a5c:	f023 0310 	bic.w	r3, r3, #16
 8011a60:	647b      	str	r3, [r7, #68]	; 0x44
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	461a      	mov	r2, r3
 8011a68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011a6a:	61bb      	str	r3, [r7, #24]
 8011a6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a6e:	6979      	ldr	r1, [r7, #20]
 8011a70:	69ba      	ldr	r2, [r7, #24]
 8011a72:	e841 2300 	strex	r3, r2, [r1]
 8011a76:	613b      	str	r3, [r7, #16]
   return(result);
 8011a78:	693b      	ldr	r3, [r7, #16]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d1e6      	bne.n	8011a4c <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	69db      	ldr	r3, [r3, #28]
 8011a84:	f003 0310 	and.w	r3, r3, #16
 8011a88:	2b10      	cmp	r3, #16
 8011a8a:	d103      	bne.n	8011a94 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	2210      	movs	r2, #16
 8011a92:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8011a9a:	4619      	mov	r1, r3
 8011a9c:	6878      	ldr	r0, [r7, #4]
 8011a9e:	f7ff f89d 	bl	8010bdc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011aa2:	e00b      	b.n	8011abc <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8011aa4:	6878      	ldr	r0, [r7, #4]
 8011aa6:	f7f0 fa1b 	bl	8001ee0 <HAL_UART_RxCpltCallback>
}
 8011aaa:	e007      	b.n	8011abc <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	699a      	ldr	r2, [r3, #24]
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	f042 0208 	orr.w	r2, r2, #8
 8011aba:	619a      	str	r2, [r3, #24]
}
 8011abc:	bf00      	nop
 8011abe:	3758      	adds	r7, #88	; 0x58
 8011ac0:	46bd      	mov	sp, r7
 8011ac2:	bd80      	pop	{r7, pc}

08011ac4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8011ac4:	b084      	sub	sp, #16
 8011ac6:	b480      	push	{r7}
 8011ac8:	b085      	sub	sp, #20
 8011aca:	af00      	add	r7, sp, #0
 8011acc:	6078      	str	r0, [r7, #4]
 8011ace:	f107 001c 	add.w	r0, r7, #28
 8011ad2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8011ad6:	2300      	movs	r3, #0
 8011ad8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8011ada:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8011adc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8011ade:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8011ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8011ae2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8011ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8011ae6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8011ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8011aea:	431a      	orrs	r2, r3
             Init.ClockDiv
 8011aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8011aee:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8011af0:	68fa      	ldr	r2, [r7, #12]
 8011af2:	4313      	orrs	r3, r2
 8011af4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	685a      	ldr	r2, [r3, #4]
 8011afa:	4b07      	ldr	r3, [pc, #28]	; (8011b18 <SDMMC_Init+0x54>)
 8011afc:	4013      	ands	r3, r2
 8011afe:	68fa      	ldr	r2, [r7, #12]
 8011b00:	431a      	orrs	r2, r3
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8011b06:	2300      	movs	r3, #0
}
 8011b08:	4618      	mov	r0, r3
 8011b0a:	3714      	adds	r7, #20
 8011b0c:	46bd      	mov	sp, r7
 8011b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b12:	b004      	add	sp, #16
 8011b14:	4770      	bx	lr
 8011b16:	bf00      	nop
 8011b18:	ffff8100 	.word	0xffff8100

08011b1c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8011b1c:	b480      	push	{r7}
 8011b1e:	b083      	sub	sp, #12
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	370c      	adds	r7, #12
 8011b2e:	46bd      	mov	sp, r7
 8011b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b34:	4770      	bx	lr

08011b36 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8011b36:	b480      	push	{r7}
 8011b38:	b083      	sub	sp, #12
 8011b3a:	af00      	add	r7, sp, #0
 8011b3c:	6078      	str	r0, [r7, #4]
 8011b3e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8011b40:	683b      	ldr	r3, [r7, #0]
 8011b42:	681a      	ldr	r2, [r3, #0]
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011b4a:	2300      	movs	r3, #0
}
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	370c      	adds	r7, #12
 8011b50:	46bd      	mov	sp, r7
 8011b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b56:	4770      	bx	lr

08011b58 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8011b58:	b480      	push	{r7}
 8011b5a:	b083      	sub	sp, #12
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	2203      	movs	r2, #3
 8011b64:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8011b66:	2300      	movs	r3, #0
}
 8011b68:	4618      	mov	r0, r3
 8011b6a:	370c      	adds	r7, #12
 8011b6c:	46bd      	mov	sp, r7
 8011b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b72:	4770      	bx	lr

08011b74 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8011b74:	b480      	push	{r7}
 8011b76:	b083      	sub	sp, #12
 8011b78:	af00      	add	r7, sp, #0
 8011b7a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	f003 0303 	and.w	r3, r3, #3
}
 8011b84:	4618      	mov	r0, r3
 8011b86:	370c      	adds	r7, #12
 8011b88:	46bd      	mov	sp, r7
 8011b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b8e:	4770      	bx	lr

08011b90 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8011b90:	b480      	push	{r7}
 8011b92:	b085      	sub	sp, #20
 8011b94:	af00      	add	r7, sp, #0
 8011b96:	6078      	str	r0, [r7, #4]
 8011b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011b9a:	2300      	movs	r3, #0
 8011b9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8011b9e:	683b      	ldr	r3, [r7, #0]
 8011ba0:	681a      	ldr	r2, [r3, #0]
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011ba6:	683b      	ldr	r3, [r7, #0]
 8011ba8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8011baa:	683b      	ldr	r3, [r7, #0]
 8011bac:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011bae:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8011bb0:	683b      	ldr	r3, [r7, #0]
 8011bb2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8011bb4:	431a      	orrs	r2, r3
                       Command->CPSM);
 8011bb6:	683b      	ldr	r3, [r7, #0]
 8011bb8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8011bba:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011bbc:	68fa      	ldr	r2, [r7, #12]
 8011bbe:	4313      	orrs	r3, r2
 8011bc0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	68da      	ldr	r2, [r3, #12]
 8011bc6:	4b06      	ldr	r3, [pc, #24]	; (8011be0 <SDMMC_SendCommand+0x50>)
 8011bc8:	4013      	ands	r3, r2
 8011bca:	68fa      	ldr	r2, [r7, #12]
 8011bcc:	431a      	orrs	r2, r3
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8011bd2:	2300      	movs	r3, #0
}
 8011bd4:	4618      	mov	r0, r3
 8011bd6:	3714      	adds	r7, #20
 8011bd8:	46bd      	mov	sp, r7
 8011bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bde:	4770      	bx	lr
 8011be0:	fffff000 	.word	0xfffff000

08011be4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8011be4:	b480      	push	{r7}
 8011be6:	b083      	sub	sp, #12
 8011be8:	af00      	add	r7, sp, #0
 8011bea:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	691b      	ldr	r3, [r3, #16]
 8011bf0:	b2db      	uxtb	r3, r3
}
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	370c      	adds	r7, #12
 8011bf6:	46bd      	mov	sp, r7
 8011bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bfc:	4770      	bx	lr

08011bfe <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8011bfe:	b480      	push	{r7}
 8011c00:	b085      	sub	sp, #20
 8011c02:	af00      	add	r7, sp, #0
 8011c04:	6078      	str	r0, [r7, #4]
 8011c06:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	3314      	adds	r3, #20
 8011c0c:	461a      	mov	r2, r3
 8011c0e:	683b      	ldr	r3, [r7, #0]
 8011c10:	4413      	add	r3, r2
 8011c12:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	681b      	ldr	r3, [r3, #0]
}  
 8011c18:	4618      	mov	r0, r3
 8011c1a:	3714      	adds	r7, #20
 8011c1c:	46bd      	mov	sp, r7
 8011c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c22:	4770      	bx	lr

08011c24 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8011c24:	b480      	push	{r7}
 8011c26:	b085      	sub	sp, #20
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
 8011c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011c2e:	2300      	movs	r3, #0
 8011c30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8011c32:	683b      	ldr	r3, [r7, #0]
 8011c34:	681a      	ldr	r2, [r3, #0]
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8011c3a:	683b      	ldr	r3, [r7, #0]
 8011c3c:	685a      	ldr	r2, [r3, #4]
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011c42:	683b      	ldr	r3, [r7, #0]
 8011c44:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8011c46:	683b      	ldr	r3, [r7, #0]
 8011c48:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011c4a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8011c4c:	683b      	ldr	r3, [r7, #0]
 8011c4e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8011c50:	431a      	orrs	r2, r3
                       Data->DPSM);
 8011c52:	683b      	ldr	r3, [r7, #0]
 8011c54:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8011c56:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011c58:	68fa      	ldr	r2, [r7, #12]
 8011c5a:	4313      	orrs	r3, r2
 8011c5c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c62:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	431a      	orrs	r2, r3
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8011c6e:	2300      	movs	r3, #0

}
 8011c70:	4618      	mov	r0, r3
 8011c72:	3714      	adds	r7, #20
 8011c74:	46bd      	mov	sp, r7
 8011c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c7a:	4770      	bx	lr

08011c7c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8011c7c:	b580      	push	{r7, lr}
 8011c7e:	b088      	sub	sp, #32
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	6078      	str	r0, [r7, #4]
 8011c84:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8011c86:	683b      	ldr	r3, [r7, #0]
 8011c88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8011c8a:	2310      	movs	r3, #16
 8011c8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011c8e:	2340      	movs	r3, #64	; 0x40
 8011c90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011c92:	2300      	movs	r3, #0
 8011c94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011c96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011c9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011c9c:	f107 0308 	add.w	r3, r7, #8
 8011ca0:	4619      	mov	r1, r3
 8011ca2:	6878      	ldr	r0, [r7, #4]
 8011ca4:	f7ff ff74 	bl	8011b90 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8011ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8011cac:	2110      	movs	r1, #16
 8011cae:	6878      	ldr	r0, [r7, #4]
 8011cb0:	f000 fa1a 	bl	80120e8 <SDMMC_GetCmdResp1>
 8011cb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011cb6:	69fb      	ldr	r3, [r7, #28]
}
 8011cb8:	4618      	mov	r0, r3
 8011cba:	3720      	adds	r7, #32
 8011cbc:	46bd      	mov	sp, r7
 8011cbe:	bd80      	pop	{r7, pc}

08011cc0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011cc0:	b580      	push	{r7, lr}
 8011cc2:	b088      	sub	sp, #32
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	6078      	str	r0, [r7, #4]
 8011cc8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011cca:	683b      	ldr	r3, [r7, #0]
 8011ccc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8011cce:	2311      	movs	r3, #17
 8011cd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011cd2:	2340      	movs	r3, #64	; 0x40
 8011cd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011cd6:	2300      	movs	r3, #0
 8011cd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011cda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011cde:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011ce0:	f107 0308 	add.w	r3, r7, #8
 8011ce4:	4619      	mov	r1, r3
 8011ce6:	6878      	ldr	r0, [r7, #4]
 8011ce8:	f7ff ff52 	bl	8011b90 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8011cf0:	2111      	movs	r1, #17
 8011cf2:	6878      	ldr	r0, [r7, #4]
 8011cf4:	f000 f9f8 	bl	80120e8 <SDMMC_GetCmdResp1>
 8011cf8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011cfa:	69fb      	ldr	r3, [r7, #28]
}
 8011cfc:	4618      	mov	r0, r3
 8011cfe:	3720      	adds	r7, #32
 8011d00:	46bd      	mov	sp, r7
 8011d02:	bd80      	pop	{r7, pc}

08011d04 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011d04:	b580      	push	{r7, lr}
 8011d06:	b088      	sub	sp, #32
 8011d08:	af00      	add	r7, sp, #0
 8011d0a:	6078      	str	r0, [r7, #4]
 8011d0c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011d0e:	683b      	ldr	r3, [r7, #0]
 8011d10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8011d12:	2312      	movs	r3, #18
 8011d14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011d16:	2340      	movs	r3, #64	; 0x40
 8011d18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011d1a:	2300      	movs	r3, #0
 8011d1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011d1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011d22:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011d24:	f107 0308 	add.w	r3, r7, #8
 8011d28:	4619      	mov	r1, r3
 8011d2a:	6878      	ldr	r0, [r7, #4]
 8011d2c:	f7ff ff30 	bl	8011b90 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8011d34:	2112      	movs	r1, #18
 8011d36:	6878      	ldr	r0, [r7, #4]
 8011d38:	f000 f9d6 	bl	80120e8 <SDMMC_GetCmdResp1>
 8011d3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011d3e:	69fb      	ldr	r3, [r7, #28]
}
 8011d40:	4618      	mov	r0, r3
 8011d42:	3720      	adds	r7, #32
 8011d44:	46bd      	mov	sp, r7
 8011d46:	bd80      	pop	{r7, pc}

08011d48 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011d48:	b580      	push	{r7, lr}
 8011d4a:	b088      	sub	sp, #32
 8011d4c:	af00      	add	r7, sp, #0
 8011d4e:	6078      	str	r0, [r7, #4]
 8011d50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011d52:	683b      	ldr	r3, [r7, #0]
 8011d54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8011d56:	2318      	movs	r3, #24
 8011d58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011d5a:	2340      	movs	r3, #64	; 0x40
 8011d5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011d5e:	2300      	movs	r3, #0
 8011d60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011d62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011d66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011d68:	f107 0308 	add.w	r3, r7, #8
 8011d6c:	4619      	mov	r1, r3
 8011d6e:	6878      	ldr	r0, [r7, #4]
 8011d70:	f7ff ff0e 	bl	8011b90 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8011d78:	2118      	movs	r1, #24
 8011d7a:	6878      	ldr	r0, [r7, #4]
 8011d7c:	f000 f9b4 	bl	80120e8 <SDMMC_GetCmdResp1>
 8011d80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011d82:	69fb      	ldr	r3, [r7, #28]
}
 8011d84:	4618      	mov	r0, r3
 8011d86:	3720      	adds	r7, #32
 8011d88:	46bd      	mov	sp, r7
 8011d8a:	bd80      	pop	{r7, pc}

08011d8c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	b088      	sub	sp, #32
 8011d90:	af00      	add	r7, sp, #0
 8011d92:	6078      	str	r0, [r7, #4]
 8011d94:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011d96:	683b      	ldr	r3, [r7, #0]
 8011d98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8011d9a:	2319      	movs	r3, #25
 8011d9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011d9e:	2340      	movs	r3, #64	; 0x40
 8011da0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011da2:	2300      	movs	r3, #0
 8011da4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011da6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011daa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011dac:	f107 0308 	add.w	r3, r7, #8
 8011db0:	4619      	mov	r1, r3
 8011db2:	6878      	ldr	r0, [r7, #4]
 8011db4:	f7ff feec 	bl	8011b90 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8011dbc:	2119      	movs	r1, #25
 8011dbe:	6878      	ldr	r0, [r7, #4]
 8011dc0:	f000 f992 	bl	80120e8 <SDMMC_GetCmdResp1>
 8011dc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011dc6:	69fb      	ldr	r3, [r7, #28]
}
 8011dc8:	4618      	mov	r0, r3
 8011dca:	3720      	adds	r7, #32
 8011dcc:	46bd      	mov	sp, r7
 8011dce:	bd80      	pop	{r7, pc}

08011dd0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8011dd0:	b580      	push	{r7, lr}
 8011dd2:	b088      	sub	sp, #32
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8011dd8:	2300      	movs	r3, #0
 8011dda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8011ddc:	230c      	movs	r3, #12
 8011dde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011de0:	2340      	movs	r3, #64	; 0x40
 8011de2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011de4:	2300      	movs	r3, #0
 8011de6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011de8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011dec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011dee:	f107 0308 	add.w	r3, r7, #8
 8011df2:	4619      	mov	r1, r3
 8011df4:	6878      	ldr	r0, [r7, #4]
 8011df6:	f7ff fecb 	bl	8011b90 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8011dfa:	4a05      	ldr	r2, [pc, #20]	; (8011e10 <SDMMC_CmdStopTransfer+0x40>)
 8011dfc:	210c      	movs	r1, #12
 8011dfe:	6878      	ldr	r0, [r7, #4]
 8011e00:	f000 f972 	bl	80120e8 <SDMMC_GetCmdResp1>
 8011e04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011e06:	69fb      	ldr	r3, [r7, #28]
}
 8011e08:	4618      	mov	r0, r3
 8011e0a:	3720      	adds	r7, #32
 8011e0c:	46bd      	mov	sp, r7
 8011e0e:	bd80      	pop	{r7, pc}
 8011e10:	05f5e100 	.word	0x05f5e100

08011e14 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8011e14:	b580      	push	{r7, lr}
 8011e16:	b08a      	sub	sp, #40	; 0x28
 8011e18:	af00      	add	r7, sp, #0
 8011e1a:	60f8      	str	r0, [r7, #12]
 8011e1c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8011e20:	683b      	ldr	r3, [r7, #0]
 8011e22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8011e24:	2307      	movs	r3, #7
 8011e26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011e28:	2340      	movs	r3, #64	; 0x40
 8011e2a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011e2c:	2300      	movs	r3, #0
 8011e2e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011e30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011e34:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011e36:	f107 0310 	add.w	r3, r7, #16
 8011e3a:	4619      	mov	r1, r3
 8011e3c:	68f8      	ldr	r0, [r7, #12]
 8011e3e:	f7ff fea7 	bl	8011b90 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8011e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8011e46:	2107      	movs	r1, #7
 8011e48:	68f8      	ldr	r0, [r7, #12]
 8011e4a:	f000 f94d 	bl	80120e8 <SDMMC_GetCmdResp1>
 8011e4e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8011e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011e52:	4618      	mov	r0, r3
 8011e54:	3728      	adds	r7, #40	; 0x28
 8011e56:	46bd      	mov	sp, r7
 8011e58:	bd80      	pop	{r7, pc}

08011e5a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8011e5a:	b580      	push	{r7, lr}
 8011e5c:	b088      	sub	sp, #32
 8011e5e:	af00      	add	r7, sp, #0
 8011e60:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8011e62:	2300      	movs	r3, #0
 8011e64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8011e66:	2300      	movs	r3, #0
 8011e68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8011e6a:	2300      	movs	r3, #0
 8011e6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011e6e:	2300      	movs	r3, #0
 8011e70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011e72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011e76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011e78:	f107 0308 	add.w	r3, r7, #8
 8011e7c:	4619      	mov	r1, r3
 8011e7e:	6878      	ldr	r0, [r7, #4]
 8011e80:	f7ff fe86 	bl	8011b90 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8011e84:	6878      	ldr	r0, [r7, #4]
 8011e86:	f000 fb67 	bl	8012558 <SDMMC_GetCmdError>
 8011e8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011e8c:	69fb      	ldr	r3, [r7, #28]
}
 8011e8e:	4618      	mov	r0, r3
 8011e90:	3720      	adds	r7, #32
 8011e92:	46bd      	mov	sp, r7
 8011e94:	bd80      	pop	{r7, pc}

08011e96 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8011e96:	b580      	push	{r7, lr}
 8011e98:	b088      	sub	sp, #32
 8011e9a:	af00      	add	r7, sp, #0
 8011e9c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8011e9e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8011ea2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8011ea4:	2308      	movs	r3, #8
 8011ea6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011ea8:	2340      	movs	r3, #64	; 0x40
 8011eaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011eac:	2300      	movs	r3, #0
 8011eae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011eb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011eb4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011eb6:	f107 0308 	add.w	r3, r7, #8
 8011eba:	4619      	mov	r1, r3
 8011ebc:	6878      	ldr	r0, [r7, #4]
 8011ebe:	f7ff fe67 	bl	8011b90 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8011ec2:	6878      	ldr	r0, [r7, #4]
 8011ec4:	f000 fafa 	bl	80124bc <SDMMC_GetCmdResp7>
 8011ec8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011eca:	69fb      	ldr	r3, [r7, #28]
}
 8011ecc:	4618      	mov	r0, r3
 8011ece:	3720      	adds	r7, #32
 8011ed0:	46bd      	mov	sp, r7
 8011ed2:	bd80      	pop	{r7, pc}

08011ed4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011ed4:	b580      	push	{r7, lr}
 8011ed6:	b088      	sub	sp, #32
 8011ed8:	af00      	add	r7, sp, #0
 8011eda:	6078      	str	r0, [r7, #4]
 8011edc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8011ede:	683b      	ldr	r3, [r7, #0]
 8011ee0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8011ee2:	2337      	movs	r3, #55	; 0x37
 8011ee4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011ee6:	2340      	movs	r3, #64	; 0x40
 8011ee8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011eea:	2300      	movs	r3, #0
 8011eec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011eee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011ef2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011ef4:	f107 0308 	add.w	r3, r7, #8
 8011ef8:	4619      	mov	r1, r3
 8011efa:	6878      	ldr	r0, [r7, #4]
 8011efc:	f7ff fe48 	bl	8011b90 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8011f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8011f04:	2137      	movs	r1, #55	; 0x37
 8011f06:	6878      	ldr	r0, [r7, #4]
 8011f08:	f000 f8ee 	bl	80120e8 <SDMMC_GetCmdResp1>
 8011f0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011f0e:	69fb      	ldr	r3, [r7, #28]
}
 8011f10:	4618      	mov	r0, r3
 8011f12:	3720      	adds	r7, #32
 8011f14:	46bd      	mov	sp, r7
 8011f16:	bd80      	pop	{r7, pc}

08011f18 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011f18:	b580      	push	{r7, lr}
 8011f1a:	b088      	sub	sp, #32
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	6078      	str	r0, [r7, #4]
 8011f20:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8011f22:	683a      	ldr	r2, [r7, #0]
 8011f24:	4b0d      	ldr	r3, [pc, #52]	; (8011f5c <SDMMC_CmdAppOperCommand+0x44>)
 8011f26:	4313      	orrs	r3, r2
 8011f28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8011f2a:	2329      	movs	r3, #41	; 0x29
 8011f2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011f2e:	2340      	movs	r3, #64	; 0x40
 8011f30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011f32:	2300      	movs	r3, #0
 8011f34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011f36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011f3a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011f3c:	f107 0308 	add.w	r3, r7, #8
 8011f40:	4619      	mov	r1, r3
 8011f42:	6878      	ldr	r0, [r7, #4]
 8011f44:	f7ff fe24 	bl	8011b90 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8011f48:	6878      	ldr	r0, [r7, #4]
 8011f4a:	f000 fa03 	bl	8012354 <SDMMC_GetCmdResp3>
 8011f4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011f50:	69fb      	ldr	r3, [r7, #28]
}
 8011f52:	4618      	mov	r0, r3
 8011f54:	3720      	adds	r7, #32
 8011f56:	46bd      	mov	sp, r7
 8011f58:	bd80      	pop	{r7, pc}
 8011f5a:	bf00      	nop
 8011f5c:	80100000 	.word	0x80100000

08011f60 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8011f60:	b580      	push	{r7, lr}
 8011f62:	b088      	sub	sp, #32
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	6078      	str	r0, [r7, #4]
 8011f68:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8011f6a:	683b      	ldr	r3, [r7, #0]
 8011f6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8011f6e:	2306      	movs	r3, #6
 8011f70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011f72:	2340      	movs	r3, #64	; 0x40
 8011f74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011f76:	2300      	movs	r3, #0
 8011f78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011f7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011f7e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011f80:	f107 0308 	add.w	r3, r7, #8
 8011f84:	4619      	mov	r1, r3
 8011f86:	6878      	ldr	r0, [r7, #4]
 8011f88:	f7ff fe02 	bl	8011b90 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8011f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011f90:	2106      	movs	r1, #6
 8011f92:	6878      	ldr	r0, [r7, #4]
 8011f94:	f000 f8a8 	bl	80120e8 <SDMMC_GetCmdResp1>
 8011f98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011f9a:	69fb      	ldr	r3, [r7, #28]
}
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	3720      	adds	r7, #32
 8011fa0:	46bd      	mov	sp, r7
 8011fa2:	bd80      	pop	{r7, pc}

08011fa4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8011fa4:	b580      	push	{r7, lr}
 8011fa6:	b088      	sub	sp, #32
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8011fac:	2300      	movs	r3, #0
 8011fae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8011fb0:	2333      	movs	r3, #51	; 0x33
 8011fb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011fb4:	2340      	movs	r3, #64	; 0x40
 8011fb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011fb8:	2300      	movs	r3, #0
 8011fba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011fbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011fc0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011fc2:	f107 0308 	add.w	r3, r7, #8
 8011fc6:	4619      	mov	r1, r3
 8011fc8:	6878      	ldr	r0, [r7, #4]
 8011fca:	f7ff fde1 	bl	8011b90 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8011fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8011fd2:	2133      	movs	r1, #51	; 0x33
 8011fd4:	6878      	ldr	r0, [r7, #4]
 8011fd6:	f000 f887 	bl	80120e8 <SDMMC_GetCmdResp1>
 8011fda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011fdc:	69fb      	ldr	r3, [r7, #28]
}
 8011fde:	4618      	mov	r0, r3
 8011fe0:	3720      	adds	r7, #32
 8011fe2:	46bd      	mov	sp, r7
 8011fe4:	bd80      	pop	{r7, pc}

08011fe6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8011fe6:	b580      	push	{r7, lr}
 8011fe8:	b088      	sub	sp, #32
 8011fea:	af00      	add	r7, sp, #0
 8011fec:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8011fee:	2300      	movs	r3, #0
 8011ff0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8011ff2:	2302      	movs	r3, #2
 8011ff4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011ff6:	23c0      	movs	r3, #192	; 0xc0
 8011ff8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011ffa:	2300      	movs	r3, #0
 8011ffc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011ffe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012002:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012004:	f107 0308 	add.w	r3, r7, #8
 8012008:	4619      	mov	r1, r3
 801200a:	6878      	ldr	r0, [r7, #4]
 801200c:	f7ff fdc0 	bl	8011b90 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012010:	6878      	ldr	r0, [r7, #4]
 8012012:	f000 f957 	bl	80122c4 <SDMMC_GetCmdResp2>
 8012016:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012018:	69fb      	ldr	r3, [r7, #28]
}
 801201a:	4618      	mov	r0, r3
 801201c:	3720      	adds	r7, #32
 801201e:	46bd      	mov	sp, r7
 8012020:	bd80      	pop	{r7, pc}

08012022 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012022:	b580      	push	{r7, lr}
 8012024:	b088      	sub	sp, #32
 8012026:	af00      	add	r7, sp, #0
 8012028:	6078      	str	r0, [r7, #4]
 801202a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801202c:	683b      	ldr	r3, [r7, #0]
 801202e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8012030:	2309      	movs	r3, #9
 8012032:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012034:	23c0      	movs	r3, #192	; 0xc0
 8012036:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012038:	2300      	movs	r3, #0
 801203a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801203c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012040:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012042:	f107 0308 	add.w	r3, r7, #8
 8012046:	4619      	mov	r1, r3
 8012048:	6878      	ldr	r0, [r7, #4]
 801204a:	f7ff fda1 	bl	8011b90 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801204e:	6878      	ldr	r0, [r7, #4]
 8012050:	f000 f938 	bl	80122c4 <SDMMC_GetCmdResp2>
 8012054:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012056:	69fb      	ldr	r3, [r7, #28]
}
 8012058:	4618      	mov	r0, r3
 801205a:	3720      	adds	r7, #32
 801205c:	46bd      	mov	sp, r7
 801205e:	bd80      	pop	{r7, pc}

08012060 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8012060:	b580      	push	{r7, lr}
 8012062:	b088      	sub	sp, #32
 8012064:	af00      	add	r7, sp, #0
 8012066:	6078      	str	r0, [r7, #4]
 8012068:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801206a:	2300      	movs	r3, #0
 801206c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801206e:	2303      	movs	r3, #3
 8012070:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012072:	2340      	movs	r3, #64	; 0x40
 8012074:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012076:	2300      	movs	r3, #0
 8012078:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801207a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801207e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012080:	f107 0308 	add.w	r3, r7, #8
 8012084:	4619      	mov	r1, r3
 8012086:	6878      	ldr	r0, [r7, #4]
 8012088:	f7ff fd82 	bl	8011b90 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801208c:	683a      	ldr	r2, [r7, #0]
 801208e:	2103      	movs	r1, #3
 8012090:	6878      	ldr	r0, [r7, #4]
 8012092:	f000 f99d 	bl	80123d0 <SDMMC_GetCmdResp6>
 8012096:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012098:	69fb      	ldr	r3, [r7, #28]
}
 801209a:	4618      	mov	r0, r3
 801209c:	3720      	adds	r7, #32
 801209e:	46bd      	mov	sp, r7
 80120a0:	bd80      	pop	{r7, pc}

080120a2 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80120a2:	b580      	push	{r7, lr}
 80120a4:	b088      	sub	sp, #32
 80120a6:	af00      	add	r7, sp, #0
 80120a8:	6078      	str	r0, [r7, #4]
 80120aa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80120ac:	683b      	ldr	r3, [r7, #0]
 80120ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80120b0:	230d      	movs	r3, #13
 80120b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80120b4:	2340      	movs	r3, #64	; 0x40
 80120b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80120b8:	2300      	movs	r3, #0
 80120ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80120bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80120c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80120c2:	f107 0308 	add.w	r3, r7, #8
 80120c6:	4619      	mov	r1, r3
 80120c8:	6878      	ldr	r0, [r7, #4]
 80120ca:	f7ff fd61 	bl	8011b90 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80120ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80120d2:	210d      	movs	r1, #13
 80120d4:	6878      	ldr	r0, [r7, #4]
 80120d6:	f000 f807 	bl	80120e8 <SDMMC_GetCmdResp1>
 80120da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80120dc:	69fb      	ldr	r3, [r7, #28]
}
 80120de:	4618      	mov	r0, r3
 80120e0:	3720      	adds	r7, #32
 80120e2:	46bd      	mov	sp, r7
 80120e4:	bd80      	pop	{r7, pc}
	...

080120e8 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80120e8:	b580      	push	{r7, lr}
 80120ea:	b088      	sub	sp, #32
 80120ec:	af00      	add	r7, sp, #0
 80120ee:	60f8      	str	r0, [r7, #12]
 80120f0:	460b      	mov	r3, r1
 80120f2:	607a      	str	r2, [r7, #4]
 80120f4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80120f6:	4b70      	ldr	r3, [pc, #448]	; (80122b8 <SDMMC_GetCmdResp1+0x1d0>)
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	4a70      	ldr	r2, [pc, #448]	; (80122bc <SDMMC_GetCmdResp1+0x1d4>)
 80120fc:	fba2 2303 	umull	r2, r3, r2, r3
 8012100:	0a5a      	lsrs	r2, r3, #9
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	fb02 f303 	mul.w	r3, r2, r3
 8012108:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 801210a:	69fb      	ldr	r3, [r7, #28]
 801210c:	1e5a      	subs	r2, r3, #1
 801210e:	61fa      	str	r2, [r7, #28]
 8012110:	2b00      	cmp	r3, #0
 8012112:	d102      	bne.n	801211a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012114:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012118:	e0c9      	b.n	80122ae <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801211e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012120:	69bb      	ldr	r3, [r7, #24]
 8012122:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012126:	2b00      	cmp	r3, #0
 8012128:	d0ef      	beq.n	801210a <SDMMC_GetCmdResp1+0x22>
 801212a:	69bb      	ldr	r3, [r7, #24]
 801212c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012130:	2b00      	cmp	r3, #0
 8012132:	d1ea      	bne.n	801210a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012138:	f003 0304 	and.w	r3, r3, #4
 801213c:	2b00      	cmp	r3, #0
 801213e:	d004      	beq.n	801214a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	2204      	movs	r2, #4
 8012144:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012146:	2304      	movs	r3, #4
 8012148:	e0b1      	b.n	80122ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801214e:	f003 0301 	and.w	r3, r3, #1
 8012152:	2b00      	cmp	r3, #0
 8012154:	d004      	beq.n	8012160 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	2201      	movs	r2, #1
 801215a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801215c:	2301      	movs	r3, #1
 801215e:	e0a6      	b.n	80122ae <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	22c5      	movs	r2, #197	; 0xc5
 8012164:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012166:	68f8      	ldr	r0, [r7, #12]
 8012168:	f7ff fd3c 	bl	8011be4 <SDMMC_GetCommandResponse>
 801216c:	4603      	mov	r3, r0
 801216e:	461a      	mov	r2, r3
 8012170:	7afb      	ldrb	r3, [r7, #11]
 8012172:	4293      	cmp	r3, r2
 8012174:	d001      	beq.n	801217a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012176:	2301      	movs	r3, #1
 8012178:	e099      	b.n	80122ae <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801217a:	2100      	movs	r1, #0
 801217c:	68f8      	ldr	r0, [r7, #12]
 801217e:	f7ff fd3e 	bl	8011bfe <SDMMC_GetResponse>
 8012182:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8012184:	697a      	ldr	r2, [r7, #20]
 8012186:	4b4e      	ldr	r3, [pc, #312]	; (80122c0 <SDMMC_GetCmdResp1+0x1d8>)
 8012188:	4013      	ands	r3, r2
 801218a:	2b00      	cmp	r3, #0
 801218c:	d101      	bne.n	8012192 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 801218e:	2300      	movs	r3, #0
 8012190:	e08d      	b.n	80122ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8012192:	697b      	ldr	r3, [r7, #20]
 8012194:	2b00      	cmp	r3, #0
 8012196:	da02      	bge.n	801219e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8012198:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801219c:	e087      	b.n	80122ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801219e:	697b      	ldr	r3, [r7, #20]
 80121a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d001      	beq.n	80121ac <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80121a8:	2340      	movs	r3, #64	; 0x40
 80121aa:	e080      	b.n	80122ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80121ac:	697b      	ldr	r3, [r7, #20]
 80121ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d001      	beq.n	80121ba <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80121b6:	2380      	movs	r3, #128	; 0x80
 80121b8:	e079      	b.n	80122ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80121ba:	697b      	ldr	r3, [r7, #20]
 80121bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d002      	beq.n	80121ca <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80121c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80121c8:	e071      	b.n	80122ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80121ca:	697b      	ldr	r3, [r7, #20]
 80121cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d002      	beq.n	80121da <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80121d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80121d8:	e069      	b.n	80122ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80121da:	697b      	ldr	r3, [r7, #20]
 80121dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d002      	beq.n	80121ea <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80121e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80121e8:	e061      	b.n	80122ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80121ea:	697b      	ldr	r3, [r7, #20]
 80121ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d002      	beq.n	80121fa <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80121f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80121f8:	e059      	b.n	80122ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80121fa:	697b      	ldr	r3, [r7, #20]
 80121fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012200:	2b00      	cmp	r3, #0
 8012202:	d002      	beq.n	801220a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012204:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012208:	e051      	b.n	80122ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801220a:	697b      	ldr	r3, [r7, #20]
 801220c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012210:	2b00      	cmp	r3, #0
 8012212:	d002      	beq.n	801221a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012214:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012218:	e049      	b.n	80122ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801221a:	697b      	ldr	r3, [r7, #20]
 801221c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012220:	2b00      	cmp	r3, #0
 8012222:	d002      	beq.n	801222a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012224:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012228:	e041      	b.n	80122ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801222a:	697b      	ldr	r3, [r7, #20]
 801222c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012230:	2b00      	cmp	r3, #0
 8012232:	d002      	beq.n	801223a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8012234:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012238:	e039      	b.n	80122ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801223a:	697b      	ldr	r3, [r7, #20]
 801223c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012240:	2b00      	cmp	r3, #0
 8012242:	d002      	beq.n	801224a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8012244:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012248:	e031      	b.n	80122ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801224a:	697b      	ldr	r3, [r7, #20]
 801224c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012250:	2b00      	cmp	r3, #0
 8012252:	d002      	beq.n	801225a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8012254:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012258:	e029      	b.n	80122ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801225a:	697b      	ldr	r3, [r7, #20]
 801225c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012260:	2b00      	cmp	r3, #0
 8012262:	d002      	beq.n	801226a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012264:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012268:	e021      	b.n	80122ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801226a:	697b      	ldr	r3, [r7, #20]
 801226c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012270:	2b00      	cmp	r3, #0
 8012272:	d002      	beq.n	801227a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8012274:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012278:	e019      	b.n	80122ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801227a:	697b      	ldr	r3, [r7, #20]
 801227c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012280:	2b00      	cmp	r3, #0
 8012282:	d002      	beq.n	801228a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8012284:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8012288:	e011      	b.n	80122ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801228a:	697b      	ldr	r3, [r7, #20]
 801228c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012290:	2b00      	cmp	r3, #0
 8012292:	d002      	beq.n	801229a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8012294:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012298:	e009      	b.n	80122ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801229a:	697b      	ldr	r3, [r7, #20]
 801229c:	f003 0308 	and.w	r3, r3, #8
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d002      	beq.n	80122aa <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80122a4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80122a8:	e001      	b.n	80122ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80122aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80122ae:	4618      	mov	r0, r3
 80122b0:	3720      	adds	r7, #32
 80122b2:	46bd      	mov	sp, r7
 80122b4:	bd80      	pop	{r7, pc}
 80122b6:	bf00      	nop
 80122b8:	20000104 	.word	0x20000104
 80122bc:	10624dd3 	.word	0x10624dd3
 80122c0:	fdffe008 	.word	0xfdffe008

080122c4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80122c4:	b480      	push	{r7}
 80122c6:	b085      	sub	sp, #20
 80122c8:	af00      	add	r7, sp, #0
 80122ca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80122cc:	4b1f      	ldr	r3, [pc, #124]	; (801234c <SDMMC_GetCmdResp2+0x88>)
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	4a1f      	ldr	r2, [pc, #124]	; (8012350 <SDMMC_GetCmdResp2+0x8c>)
 80122d2:	fba2 2303 	umull	r2, r3, r2, r3
 80122d6:	0a5b      	lsrs	r3, r3, #9
 80122d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80122dc:	fb02 f303 	mul.w	r3, r2, r3
 80122e0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	1e5a      	subs	r2, r3, #1
 80122e6:	60fa      	str	r2, [r7, #12]
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d102      	bne.n	80122f2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80122ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80122f0:	e026      	b.n	8012340 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80122f6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80122f8:	68bb      	ldr	r3, [r7, #8]
 80122fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d0ef      	beq.n	80122e2 <SDMMC_GetCmdResp2+0x1e>
 8012302:	68bb      	ldr	r3, [r7, #8]
 8012304:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012308:	2b00      	cmp	r3, #0
 801230a:	d1ea      	bne.n	80122e2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012310:	f003 0304 	and.w	r3, r3, #4
 8012314:	2b00      	cmp	r3, #0
 8012316:	d004      	beq.n	8012322 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	2204      	movs	r2, #4
 801231c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801231e:	2304      	movs	r3, #4
 8012320:	e00e      	b.n	8012340 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012326:	f003 0301 	and.w	r3, r3, #1
 801232a:	2b00      	cmp	r3, #0
 801232c:	d004      	beq.n	8012338 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	2201      	movs	r2, #1
 8012332:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012334:	2301      	movs	r3, #1
 8012336:	e003      	b.n	8012340 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	22c5      	movs	r2, #197	; 0xc5
 801233c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801233e:	2300      	movs	r3, #0
}
 8012340:	4618      	mov	r0, r3
 8012342:	3714      	adds	r7, #20
 8012344:	46bd      	mov	sp, r7
 8012346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801234a:	4770      	bx	lr
 801234c:	20000104 	.word	0x20000104
 8012350:	10624dd3 	.word	0x10624dd3

08012354 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8012354:	b480      	push	{r7}
 8012356:	b085      	sub	sp, #20
 8012358:	af00      	add	r7, sp, #0
 801235a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801235c:	4b1a      	ldr	r3, [pc, #104]	; (80123c8 <SDMMC_GetCmdResp3+0x74>)
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	4a1a      	ldr	r2, [pc, #104]	; (80123cc <SDMMC_GetCmdResp3+0x78>)
 8012362:	fba2 2303 	umull	r2, r3, r2, r3
 8012366:	0a5b      	lsrs	r3, r3, #9
 8012368:	f241 3288 	movw	r2, #5000	; 0x1388
 801236c:	fb02 f303 	mul.w	r3, r2, r3
 8012370:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	1e5a      	subs	r2, r3, #1
 8012376:	60fa      	str	r2, [r7, #12]
 8012378:	2b00      	cmp	r3, #0
 801237a:	d102      	bne.n	8012382 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801237c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012380:	e01b      	b.n	80123ba <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012386:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012388:	68bb      	ldr	r3, [r7, #8]
 801238a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801238e:	2b00      	cmp	r3, #0
 8012390:	d0ef      	beq.n	8012372 <SDMMC_GetCmdResp3+0x1e>
 8012392:	68bb      	ldr	r3, [r7, #8]
 8012394:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012398:	2b00      	cmp	r3, #0
 801239a:	d1ea      	bne.n	8012372 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80123a0:	f003 0304 	and.w	r3, r3, #4
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d004      	beq.n	80123b2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	2204      	movs	r2, #4
 80123ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80123ae:	2304      	movs	r3, #4
 80123b0:	e003      	b.n	80123ba <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	22c5      	movs	r2, #197	; 0xc5
 80123b6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80123b8:	2300      	movs	r3, #0
}
 80123ba:	4618      	mov	r0, r3
 80123bc:	3714      	adds	r7, #20
 80123be:	46bd      	mov	sp, r7
 80123c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123c4:	4770      	bx	lr
 80123c6:	bf00      	nop
 80123c8:	20000104 	.word	0x20000104
 80123cc:	10624dd3 	.word	0x10624dd3

080123d0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80123d0:	b580      	push	{r7, lr}
 80123d2:	b088      	sub	sp, #32
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	60f8      	str	r0, [r7, #12]
 80123d8:	460b      	mov	r3, r1
 80123da:	607a      	str	r2, [r7, #4]
 80123dc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80123de:	4b35      	ldr	r3, [pc, #212]	; (80124b4 <SDMMC_GetCmdResp6+0xe4>)
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	4a35      	ldr	r2, [pc, #212]	; (80124b8 <SDMMC_GetCmdResp6+0xe8>)
 80123e4:	fba2 2303 	umull	r2, r3, r2, r3
 80123e8:	0a5b      	lsrs	r3, r3, #9
 80123ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80123ee:	fb02 f303 	mul.w	r3, r2, r3
 80123f2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80123f4:	69fb      	ldr	r3, [r7, #28]
 80123f6:	1e5a      	subs	r2, r3, #1
 80123f8:	61fa      	str	r2, [r7, #28]
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d102      	bne.n	8012404 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80123fe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012402:	e052      	b.n	80124aa <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012408:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801240a:	69bb      	ldr	r3, [r7, #24]
 801240c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012410:	2b00      	cmp	r3, #0
 8012412:	d0ef      	beq.n	80123f4 <SDMMC_GetCmdResp6+0x24>
 8012414:	69bb      	ldr	r3, [r7, #24]
 8012416:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801241a:	2b00      	cmp	r3, #0
 801241c:	d1ea      	bne.n	80123f4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012422:	f003 0304 	and.w	r3, r3, #4
 8012426:	2b00      	cmp	r3, #0
 8012428:	d004      	beq.n	8012434 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	2204      	movs	r2, #4
 801242e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012430:	2304      	movs	r3, #4
 8012432:	e03a      	b.n	80124aa <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012438:	f003 0301 	and.w	r3, r3, #1
 801243c:	2b00      	cmp	r3, #0
 801243e:	d004      	beq.n	801244a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	2201      	movs	r2, #1
 8012444:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012446:	2301      	movs	r3, #1
 8012448:	e02f      	b.n	80124aa <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801244a:	68f8      	ldr	r0, [r7, #12]
 801244c:	f7ff fbca 	bl	8011be4 <SDMMC_GetCommandResponse>
 8012450:	4603      	mov	r3, r0
 8012452:	461a      	mov	r2, r3
 8012454:	7afb      	ldrb	r3, [r7, #11]
 8012456:	4293      	cmp	r3, r2
 8012458:	d001      	beq.n	801245e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801245a:	2301      	movs	r3, #1
 801245c:	e025      	b.n	80124aa <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	22c5      	movs	r2, #197	; 0xc5
 8012462:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012464:	2100      	movs	r1, #0
 8012466:	68f8      	ldr	r0, [r7, #12]
 8012468:	f7ff fbc9 	bl	8011bfe <SDMMC_GetResponse>
 801246c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 801246e:	697b      	ldr	r3, [r7, #20]
 8012470:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8012474:	2b00      	cmp	r3, #0
 8012476:	d106      	bne.n	8012486 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8012478:	697b      	ldr	r3, [r7, #20]
 801247a:	0c1b      	lsrs	r3, r3, #16
 801247c:	b29a      	uxth	r2, r3
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8012482:	2300      	movs	r3, #0
 8012484:	e011      	b.n	80124aa <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8012486:	697b      	ldr	r3, [r7, #20]
 8012488:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801248c:	2b00      	cmp	r3, #0
 801248e:	d002      	beq.n	8012496 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012490:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012494:	e009      	b.n	80124aa <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8012496:	697b      	ldr	r3, [r7, #20]
 8012498:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801249c:	2b00      	cmp	r3, #0
 801249e:	d002      	beq.n	80124a6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80124a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80124a4:	e001      	b.n	80124aa <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80124a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80124aa:	4618      	mov	r0, r3
 80124ac:	3720      	adds	r7, #32
 80124ae:	46bd      	mov	sp, r7
 80124b0:	bd80      	pop	{r7, pc}
 80124b2:	bf00      	nop
 80124b4:	20000104 	.word	0x20000104
 80124b8:	10624dd3 	.word	0x10624dd3

080124bc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80124bc:	b480      	push	{r7}
 80124be:	b085      	sub	sp, #20
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80124c4:	4b22      	ldr	r3, [pc, #136]	; (8012550 <SDMMC_GetCmdResp7+0x94>)
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	4a22      	ldr	r2, [pc, #136]	; (8012554 <SDMMC_GetCmdResp7+0x98>)
 80124ca:	fba2 2303 	umull	r2, r3, r2, r3
 80124ce:	0a5b      	lsrs	r3, r3, #9
 80124d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80124d4:	fb02 f303 	mul.w	r3, r2, r3
 80124d8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	1e5a      	subs	r2, r3, #1
 80124de:	60fa      	str	r2, [r7, #12]
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d102      	bne.n	80124ea <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80124e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80124e8:	e02c      	b.n	8012544 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80124ee:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80124f0:	68bb      	ldr	r3, [r7, #8]
 80124f2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d0ef      	beq.n	80124da <SDMMC_GetCmdResp7+0x1e>
 80124fa:	68bb      	ldr	r3, [r7, #8]
 80124fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012500:	2b00      	cmp	r3, #0
 8012502:	d1ea      	bne.n	80124da <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012508:	f003 0304 	and.w	r3, r3, #4
 801250c:	2b00      	cmp	r3, #0
 801250e:	d004      	beq.n	801251a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	2204      	movs	r2, #4
 8012514:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012516:	2304      	movs	r3, #4
 8012518:	e014      	b.n	8012544 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801251e:	f003 0301 	and.w	r3, r3, #1
 8012522:	2b00      	cmp	r3, #0
 8012524:	d004      	beq.n	8012530 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	2201      	movs	r2, #1
 801252a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801252c:	2301      	movs	r3, #1
 801252e:	e009      	b.n	8012544 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012538:	2b00      	cmp	r3, #0
 801253a:	d002      	beq.n	8012542 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	2240      	movs	r2, #64	; 0x40
 8012540:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8012542:	2300      	movs	r3, #0
  
}
 8012544:	4618      	mov	r0, r3
 8012546:	3714      	adds	r7, #20
 8012548:	46bd      	mov	sp, r7
 801254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801254e:	4770      	bx	lr
 8012550:	20000104 	.word	0x20000104
 8012554:	10624dd3 	.word	0x10624dd3

08012558 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8012558:	b480      	push	{r7}
 801255a:	b085      	sub	sp, #20
 801255c:	af00      	add	r7, sp, #0
 801255e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012560:	4b11      	ldr	r3, [pc, #68]	; (80125a8 <SDMMC_GetCmdError+0x50>)
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	4a11      	ldr	r2, [pc, #68]	; (80125ac <SDMMC_GetCmdError+0x54>)
 8012566:	fba2 2303 	umull	r2, r3, r2, r3
 801256a:	0a5b      	lsrs	r3, r3, #9
 801256c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012570:	fb02 f303 	mul.w	r3, r2, r3
 8012574:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	1e5a      	subs	r2, r3, #1
 801257a:	60fa      	str	r2, [r7, #12]
 801257c:	2b00      	cmp	r3, #0
 801257e:	d102      	bne.n	8012586 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012580:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012584:	e009      	b.n	801259a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801258a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801258e:	2b00      	cmp	r3, #0
 8012590:	d0f1      	beq.n	8012576 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	22c5      	movs	r2, #197	; 0xc5
 8012596:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8012598:	2300      	movs	r3, #0
}
 801259a:	4618      	mov	r0, r3
 801259c:	3714      	adds	r7, #20
 801259e:	46bd      	mov	sp, r7
 80125a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a4:	4770      	bx	lr
 80125a6:	bf00      	nop
 80125a8:	20000104 	.word	0x20000104
 80125ac:	10624dd3 	.word	0x10624dd3

080125b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80125b0:	b084      	sub	sp, #16
 80125b2:	b580      	push	{r7, lr}
 80125b4:	b084      	sub	sp, #16
 80125b6:	af00      	add	r7, sp, #0
 80125b8:	6078      	str	r0, [r7, #4]
 80125ba:	f107 001c 	add.w	r0, r7, #28
 80125be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80125c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125c4:	2b01      	cmp	r3, #1
 80125c6:	d120      	bne.n	801260a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80125cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	68da      	ldr	r2, [r3, #12]
 80125d8:	4b20      	ldr	r3, [pc, #128]	; (801265c <USB_CoreInit+0xac>)
 80125da:	4013      	ands	r3, r2
 80125dc:	687a      	ldr	r2, [r7, #4]
 80125de:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	68db      	ldr	r3, [r3, #12]
 80125e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80125ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125ee:	2b01      	cmp	r3, #1
 80125f0:	d105      	bne.n	80125fe <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	68db      	ldr	r3, [r3, #12]
 80125f6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80125fe:	6878      	ldr	r0, [r7, #4]
 8012600:	f000 f8fe 	bl	8012800 <USB_CoreReset>
 8012604:	4603      	mov	r3, r0
 8012606:	73fb      	strb	r3, [r7, #15]
 8012608:	e010      	b.n	801262c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	68db      	ldr	r3, [r3, #12]
 801260e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012616:	6878      	ldr	r0, [r7, #4]
 8012618:	f000 f8f2 	bl	8012800 <USB_CoreReset>
 801261c:	4603      	mov	r3, r0
 801261e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012624:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 801262c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801262e:	2b01      	cmp	r3, #1
 8012630:	d10b      	bne.n	801264a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	689b      	ldr	r3, [r3, #8]
 8012636:	f043 0206 	orr.w	r2, r3, #6
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	689b      	ldr	r3, [r3, #8]
 8012642:	f043 0220 	orr.w	r2, r3, #32
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801264a:	7bfb      	ldrb	r3, [r7, #15]
}
 801264c:	4618      	mov	r0, r3
 801264e:	3710      	adds	r7, #16
 8012650:	46bd      	mov	sp, r7
 8012652:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012656:	b004      	add	sp, #16
 8012658:	4770      	bx	lr
 801265a:	bf00      	nop
 801265c:	ffbdffbf 	.word	0xffbdffbf

08012660 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012660:	b480      	push	{r7}
 8012662:	b083      	sub	sp, #12
 8012664:	af00      	add	r7, sp, #0
 8012666:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	689b      	ldr	r3, [r3, #8]
 801266c:	f023 0201 	bic.w	r2, r3, #1
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012674:	2300      	movs	r3, #0
}
 8012676:	4618      	mov	r0, r3
 8012678:	370c      	adds	r7, #12
 801267a:	46bd      	mov	sp, r7
 801267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012680:	4770      	bx	lr

08012682 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8012682:	b580      	push	{r7, lr}
 8012684:	b084      	sub	sp, #16
 8012686:	af00      	add	r7, sp, #0
 8012688:	6078      	str	r0, [r7, #4]
 801268a:	460b      	mov	r3, r1
 801268c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 801268e:	2300      	movs	r3, #0
 8012690:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	68db      	ldr	r3, [r3, #12]
 8012696:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801269e:	78fb      	ldrb	r3, [r7, #3]
 80126a0:	2b01      	cmp	r3, #1
 80126a2:	d115      	bne.n	80126d0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	68db      	ldr	r3, [r3, #12]
 80126a8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80126b0:	2001      	movs	r0, #1
 80126b2:	f7f5 ff39 	bl	8008528 <HAL_Delay>
      ms++;
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	3301      	adds	r3, #1
 80126ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80126bc:	6878      	ldr	r0, [r7, #4]
 80126be:	f000 f891 	bl	80127e4 <USB_GetMode>
 80126c2:	4603      	mov	r3, r0
 80126c4:	2b01      	cmp	r3, #1
 80126c6:	d01e      	beq.n	8012706 <USB_SetCurrentMode+0x84>
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	2b31      	cmp	r3, #49	; 0x31
 80126cc:	d9f0      	bls.n	80126b0 <USB_SetCurrentMode+0x2e>
 80126ce:	e01a      	b.n	8012706 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80126d0:	78fb      	ldrb	r3, [r7, #3]
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d115      	bne.n	8012702 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	68db      	ldr	r3, [r3, #12]
 80126da:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80126e2:	2001      	movs	r0, #1
 80126e4:	f7f5 ff20 	bl	8008528 <HAL_Delay>
      ms++;
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	3301      	adds	r3, #1
 80126ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80126ee:	6878      	ldr	r0, [r7, #4]
 80126f0:	f000 f878 	bl	80127e4 <USB_GetMode>
 80126f4:	4603      	mov	r3, r0
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d005      	beq.n	8012706 <USB_SetCurrentMode+0x84>
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	2b31      	cmp	r3, #49	; 0x31
 80126fe:	d9f0      	bls.n	80126e2 <USB_SetCurrentMode+0x60>
 8012700:	e001      	b.n	8012706 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8012702:	2301      	movs	r3, #1
 8012704:	e005      	b.n	8012712 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	2b32      	cmp	r3, #50	; 0x32
 801270a:	d101      	bne.n	8012710 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801270c:	2301      	movs	r3, #1
 801270e:	e000      	b.n	8012712 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8012710:	2300      	movs	r3, #0
}
 8012712:	4618      	mov	r0, r3
 8012714:	3710      	adds	r7, #16
 8012716:	46bd      	mov	sp, r7
 8012718:	bd80      	pop	{r7, pc}
	...

0801271c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801271c:	b480      	push	{r7}
 801271e:	b085      	sub	sp, #20
 8012720:	af00      	add	r7, sp, #0
 8012722:	6078      	str	r0, [r7, #4]
 8012724:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012726:	2300      	movs	r3, #0
 8012728:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	3301      	adds	r3, #1
 801272e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	4a13      	ldr	r2, [pc, #76]	; (8012780 <USB_FlushTxFifo+0x64>)
 8012734:	4293      	cmp	r3, r2
 8012736:	d901      	bls.n	801273c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8012738:	2303      	movs	r3, #3
 801273a:	e01b      	b.n	8012774 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	691b      	ldr	r3, [r3, #16]
 8012740:	2b00      	cmp	r3, #0
 8012742:	daf2      	bge.n	801272a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8012744:	2300      	movs	r3, #0
 8012746:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012748:	683b      	ldr	r3, [r7, #0]
 801274a:	019b      	lsls	r3, r3, #6
 801274c:	f043 0220 	orr.w	r2, r3, #32
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	3301      	adds	r3, #1
 8012758:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	4a08      	ldr	r2, [pc, #32]	; (8012780 <USB_FlushTxFifo+0x64>)
 801275e:	4293      	cmp	r3, r2
 8012760:	d901      	bls.n	8012766 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8012762:	2303      	movs	r3, #3
 8012764:	e006      	b.n	8012774 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	691b      	ldr	r3, [r3, #16]
 801276a:	f003 0320 	and.w	r3, r3, #32
 801276e:	2b20      	cmp	r3, #32
 8012770:	d0f0      	beq.n	8012754 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8012772:	2300      	movs	r3, #0
}
 8012774:	4618      	mov	r0, r3
 8012776:	3714      	adds	r7, #20
 8012778:	46bd      	mov	sp, r7
 801277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801277e:	4770      	bx	lr
 8012780:	00030d40 	.word	0x00030d40

08012784 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012784:	b480      	push	{r7}
 8012786:	b085      	sub	sp, #20
 8012788:	af00      	add	r7, sp, #0
 801278a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801278c:	2300      	movs	r3, #0
 801278e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	3301      	adds	r3, #1
 8012794:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	4a11      	ldr	r2, [pc, #68]	; (80127e0 <USB_FlushRxFifo+0x5c>)
 801279a:	4293      	cmp	r3, r2
 801279c:	d901      	bls.n	80127a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801279e:	2303      	movs	r3, #3
 80127a0:	e018      	b.n	80127d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	691b      	ldr	r3, [r3, #16]
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	daf2      	bge.n	8012790 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80127aa:	2300      	movs	r3, #0
 80127ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	2210      	movs	r2, #16
 80127b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	3301      	adds	r3, #1
 80127b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	4a08      	ldr	r2, [pc, #32]	; (80127e0 <USB_FlushRxFifo+0x5c>)
 80127be:	4293      	cmp	r3, r2
 80127c0:	d901      	bls.n	80127c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80127c2:	2303      	movs	r3, #3
 80127c4:	e006      	b.n	80127d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	691b      	ldr	r3, [r3, #16]
 80127ca:	f003 0310 	and.w	r3, r3, #16
 80127ce:	2b10      	cmp	r3, #16
 80127d0:	d0f0      	beq.n	80127b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80127d2:	2300      	movs	r3, #0
}
 80127d4:	4618      	mov	r0, r3
 80127d6:	3714      	adds	r7, #20
 80127d8:	46bd      	mov	sp, r7
 80127da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127de:	4770      	bx	lr
 80127e0:	00030d40 	.word	0x00030d40

080127e4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80127e4:	b480      	push	{r7}
 80127e6:	b083      	sub	sp, #12
 80127e8:	af00      	add	r7, sp, #0
 80127ea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	695b      	ldr	r3, [r3, #20]
 80127f0:	f003 0301 	and.w	r3, r3, #1
}
 80127f4:	4618      	mov	r0, r3
 80127f6:	370c      	adds	r7, #12
 80127f8:	46bd      	mov	sp, r7
 80127fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127fe:	4770      	bx	lr

08012800 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8012800:	b480      	push	{r7}
 8012802:	b085      	sub	sp, #20
 8012804:	af00      	add	r7, sp, #0
 8012806:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012808:	2300      	movs	r3, #0
 801280a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	3301      	adds	r3, #1
 8012810:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	4a13      	ldr	r2, [pc, #76]	; (8012864 <USB_CoreReset+0x64>)
 8012816:	4293      	cmp	r3, r2
 8012818:	d901      	bls.n	801281e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801281a:	2303      	movs	r3, #3
 801281c:	e01b      	b.n	8012856 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	691b      	ldr	r3, [r3, #16]
 8012822:	2b00      	cmp	r3, #0
 8012824:	daf2      	bge.n	801280c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8012826:	2300      	movs	r3, #0
 8012828:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	691b      	ldr	r3, [r3, #16]
 801282e:	f043 0201 	orr.w	r2, r3, #1
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012836:	68fb      	ldr	r3, [r7, #12]
 8012838:	3301      	adds	r3, #1
 801283a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	4a09      	ldr	r2, [pc, #36]	; (8012864 <USB_CoreReset+0x64>)
 8012840:	4293      	cmp	r3, r2
 8012842:	d901      	bls.n	8012848 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8012844:	2303      	movs	r3, #3
 8012846:	e006      	b.n	8012856 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	691b      	ldr	r3, [r3, #16]
 801284c:	f003 0301 	and.w	r3, r3, #1
 8012850:	2b01      	cmp	r3, #1
 8012852:	d0f0      	beq.n	8012836 <USB_CoreReset+0x36>

  return HAL_OK;
 8012854:	2300      	movs	r3, #0
}
 8012856:	4618      	mov	r0, r3
 8012858:	3714      	adds	r7, #20
 801285a:	46bd      	mov	sp, r7
 801285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012860:	4770      	bx	lr
 8012862:	bf00      	nop
 8012864:	00030d40 	.word	0x00030d40

08012868 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012868:	b084      	sub	sp, #16
 801286a:	b580      	push	{r7, lr}
 801286c:	b086      	sub	sp, #24
 801286e:	af00      	add	r7, sp, #0
 8012870:	6078      	str	r0, [r7, #4]
 8012872:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8012876:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801287a:	2300      	movs	r3, #0
 801287c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012888:	461a      	mov	r2, r3
 801288a:	2300      	movs	r3, #0
 801288c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012892:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801289e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d018      	beq.n	80128d8 <USB_HostInit+0x70>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80128a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128a8:	2b01      	cmp	r3, #1
 80128aa:	d10a      	bne.n	80128c2 <USB_HostInit+0x5a>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	68fa      	ldr	r2, [r7, #12]
 80128b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80128ba:	f043 0304 	orr.w	r3, r3, #4
 80128be:	6013      	str	r3, [r2, #0]
 80128c0:	e014      	b.n	80128ec <USB_HostInit+0x84>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	68fa      	ldr	r2, [r7, #12]
 80128cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80128d0:	f023 0304 	bic.w	r3, r3, #4
 80128d4:	6013      	str	r3, [r2, #0]
 80128d6:	e009      	b.n	80128ec <USB_HostInit+0x84>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	68fa      	ldr	r2, [r7, #12]
 80128e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80128e6:	f023 0304 	bic.w	r3, r3, #4
 80128ea:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80128ec:	2110      	movs	r1, #16
 80128ee:	6878      	ldr	r0, [r7, #4]
 80128f0:	f7ff ff14 	bl	801271c <USB_FlushTxFifo>
 80128f4:	4603      	mov	r3, r0
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d001      	beq.n	80128fe <USB_HostInit+0x96>
  {
    ret = HAL_ERROR;
 80128fa:	2301      	movs	r3, #1
 80128fc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80128fe:	6878      	ldr	r0, [r7, #4]
 8012900:	f7ff ff40 	bl	8012784 <USB_FlushRxFifo>
 8012904:	4603      	mov	r3, r0
 8012906:	2b00      	cmp	r3, #0
 8012908:	d001      	beq.n	801290e <USB_HostInit+0xa6>
  {
    ret = HAL_ERROR;
 801290a:	2301      	movs	r3, #1
 801290c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 801290e:	2300      	movs	r3, #0
 8012910:	613b      	str	r3, [r7, #16]
 8012912:	e015      	b.n	8012940 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8012914:	693b      	ldr	r3, [r7, #16]
 8012916:	015a      	lsls	r2, r3, #5
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	4413      	add	r3, r2
 801291c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012920:	461a      	mov	r2, r3
 8012922:	f04f 33ff 	mov.w	r3, #4294967295
 8012926:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8012928:	693b      	ldr	r3, [r7, #16]
 801292a:	015a      	lsls	r2, r3, #5
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	4413      	add	r3, r2
 8012930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012934:	461a      	mov	r2, r3
 8012936:	2300      	movs	r3, #0
 8012938:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 801293a:	693b      	ldr	r3, [r7, #16]
 801293c:	3301      	adds	r3, #1
 801293e:	613b      	str	r3, [r7, #16]
 8012940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012942:	693a      	ldr	r2, [r7, #16]
 8012944:	429a      	cmp	r2, r3
 8012946:	d3e5      	bcc.n	8012914 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	2200      	movs	r2, #0
 801294c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	f04f 32ff 	mov.w	r2, #4294967295
 8012954:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801295a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801295e:	2b00      	cmp	r3, #0
 8012960:	d00b      	beq.n	801297a <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012968:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	4a13      	ldr	r2, [pc, #76]	; (80129bc <USB_HostInit+0x154>)
 801296e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	4a13      	ldr	r2, [pc, #76]	; (80129c0 <USB_HostInit+0x158>)
 8012974:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8012978:	e009      	b.n	801298e <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	2280      	movs	r2, #128	; 0x80
 801297e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	4a10      	ldr	r2, [pc, #64]	; (80129c4 <USB_HostInit+0x15c>)
 8012984:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	4a0f      	ldr	r2, [pc, #60]	; (80129c8 <USB_HostInit+0x160>)
 801298a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801298e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012990:	2b00      	cmp	r3, #0
 8012992:	d105      	bne.n	80129a0 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	699b      	ldr	r3, [r3, #24]
 8012998:	f043 0210 	orr.w	r2, r3, #16
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	699a      	ldr	r2, [r3, #24]
 80129a4:	4b09      	ldr	r3, [pc, #36]	; (80129cc <USB_HostInit+0x164>)
 80129a6:	4313      	orrs	r3, r2
 80129a8:	687a      	ldr	r2, [r7, #4]
 80129aa:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80129ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80129ae:	4618      	mov	r0, r3
 80129b0:	3718      	adds	r7, #24
 80129b2:	46bd      	mov	sp, r7
 80129b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80129b8:	b004      	add	sp, #16
 80129ba:	4770      	bx	lr
 80129bc:	01000200 	.word	0x01000200
 80129c0:	00e00300 	.word	0x00e00300
 80129c4:	00600080 	.word	0x00600080
 80129c8:	004000e0 	.word	0x004000e0
 80129cc:	a3200008 	.word	0xa3200008

080129d0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80129d0:	b580      	push	{r7, lr}
 80129d2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80129d4:	4904      	ldr	r1, [pc, #16]	; (80129e8 <MX_FATFS_Init+0x18>)
 80129d6:	4805      	ldr	r0, [pc, #20]	; (80129ec <MX_FATFS_Init+0x1c>)
 80129d8:	f003 f966 	bl	8015ca8 <FATFS_LinkDriver>
 80129dc:	4603      	mov	r3, r0
 80129de:	461a      	mov	r2, r3
 80129e0:	4b03      	ldr	r3, [pc, #12]	; (80129f0 <MX_FATFS_Init+0x20>)
 80129e2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80129e4:	bf00      	nop
 80129e6:	bd80      	pop	{r7, pc}
 80129e8:	200060ec 	.word	0x200060ec
 80129ec:	0801b2f4 	.word	0x0801b2f4
 80129f0:	200060e8 	.word	0x200060e8

080129f4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80129f4:	b480      	push	{r7}
 80129f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80129f8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80129fa:	4618      	mov	r0, r3
 80129fc:	46bd      	mov	sp, r7
 80129fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a02:	4770      	bx	lr

08012a04 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8012a04:	b580      	push	{r7, lr}
 8012a06:	b082      	sub	sp, #8
 8012a08:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8012a0a:	2300      	movs	r3, #0
 8012a0c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8012a0e:	f000 f896 	bl	8012b3e <BSP_SD_IsDetected>
 8012a12:	4603      	mov	r3, r0
 8012a14:	2b01      	cmp	r3, #1
 8012a16:	d001      	beq.n	8012a1c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8012a18:	2302      	movs	r3, #2
 8012a1a:	e012      	b.n	8012a42 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 8012a1c:	480b      	ldr	r0, [pc, #44]	; (8012a4c <BSP_SD_Init+0x48>)
 8012a1e:	f7fa fd23 	bl	800d468 <HAL_SD_Init>
 8012a22:	4603      	mov	r3, r0
 8012a24:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8012a26:	79fb      	ldrb	r3, [r7, #7]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d109      	bne.n	8012a40 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8012a2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8012a30:	4806      	ldr	r0, [pc, #24]	; (8012a4c <BSP_SD_Init+0x48>)
 8012a32:	f7fb fae9 	bl	800e008 <HAL_SD_ConfigWideBusOperation>
 8012a36:	4603      	mov	r3, r0
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d001      	beq.n	8012a40 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8012a3c:	2301      	movs	r3, #1
 8012a3e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8012a40:	79fb      	ldrb	r3, [r7, #7]
}
 8012a42:	4618      	mov	r0, r3
 8012a44:	3708      	adds	r7, #8
 8012a46:	46bd      	mov	sp, r7
 8012a48:	bd80      	pop	{r7, pc}
 8012a4a:	bf00      	nop
 8012a4c:	20005f74 	.word	0x20005f74

08012a50 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8012a50:	b580      	push	{r7, lr}
 8012a52:	b086      	sub	sp, #24
 8012a54:	af00      	add	r7, sp, #0
 8012a56:	60f8      	str	r0, [r7, #12]
 8012a58:	60b9      	str	r1, [r7, #8]
 8012a5a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8012a5c:	2300      	movs	r3, #0
 8012a5e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	68ba      	ldr	r2, [r7, #8]
 8012a64:	68f9      	ldr	r1, [r7, #12]
 8012a66:	4806      	ldr	r0, [pc, #24]	; (8012a80 <BSP_SD_ReadBlocks_DMA+0x30>)
 8012a68:	f7fa fdb6 	bl	800d5d8 <HAL_SD_ReadBlocks_DMA>
 8012a6c:	4603      	mov	r3, r0
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d001      	beq.n	8012a76 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8012a72:	2301      	movs	r3, #1
 8012a74:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8012a76:	7dfb      	ldrb	r3, [r7, #23]
}
 8012a78:	4618      	mov	r0, r3
 8012a7a:	3718      	adds	r7, #24
 8012a7c:	46bd      	mov	sp, r7
 8012a7e:	bd80      	pop	{r7, pc}
 8012a80:	20005f74 	.word	0x20005f74

08012a84 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8012a84:	b580      	push	{r7, lr}
 8012a86:	b086      	sub	sp, #24
 8012a88:	af00      	add	r7, sp, #0
 8012a8a:	60f8      	str	r0, [r7, #12]
 8012a8c:	60b9      	str	r1, [r7, #8]
 8012a8e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8012a90:	2300      	movs	r3, #0
 8012a92:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	68ba      	ldr	r2, [r7, #8]
 8012a98:	68f9      	ldr	r1, [r7, #12]
 8012a9a:	4806      	ldr	r0, [pc, #24]	; (8012ab4 <BSP_SD_WriteBlocks_DMA+0x30>)
 8012a9c:	f7fa fe7e 	bl	800d79c <HAL_SD_WriteBlocks_DMA>
 8012aa0:	4603      	mov	r3, r0
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d001      	beq.n	8012aaa <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8012aa6:	2301      	movs	r3, #1
 8012aa8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8012aaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8012aac:	4618      	mov	r0, r3
 8012aae:	3718      	adds	r7, #24
 8012ab0:	46bd      	mov	sp, r7
 8012ab2:	bd80      	pop	{r7, pc}
 8012ab4:	20005f74 	.word	0x20005f74

08012ab8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8012ab8:	b580      	push	{r7, lr}
 8012aba:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8012abc:	4805      	ldr	r0, [pc, #20]	; (8012ad4 <BSP_SD_GetCardState+0x1c>)
 8012abe:	f7fb fb3d 	bl	800e13c <HAL_SD_GetCardState>
 8012ac2:	4603      	mov	r3, r0
 8012ac4:	2b04      	cmp	r3, #4
 8012ac6:	bf14      	ite	ne
 8012ac8:	2301      	movne	r3, #1
 8012aca:	2300      	moveq	r3, #0
 8012acc:	b2db      	uxtb	r3, r3
}
 8012ace:	4618      	mov	r0, r3
 8012ad0:	bd80      	pop	{r7, pc}
 8012ad2:	bf00      	nop
 8012ad4:	20005f74 	.word	0x20005f74

08012ad8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8012ad8:	b580      	push	{r7, lr}
 8012ada:	b082      	sub	sp, #8
 8012adc:	af00      	add	r7, sp, #0
 8012ade:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 8012ae0:	6879      	ldr	r1, [r7, #4]
 8012ae2:	4803      	ldr	r0, [pc, #12]	; (8012af0 <BSP_SD_GetCardInfo+0x18>)
 8012ae4:	f7fb fa64 	bl	800dfb0 <HAL_SD_GetCardInfo>
}
 8012ae8:	bf00      	nop
 8012aea:	3708      	adds	r7, #8
 8012aec:	46bd      	mov	sp, r7
 8012aee:	bd80      	pop	{r7, pc}
 8012af0:	20005f74 	.word	0x20005f74

08012af4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8012af4:	b580      	push	{r7, lr}
 8012af6:	b082      	sub	sp, #8
 8012af8:	af00      	add	r7, sp, #0
 8012afa:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8012afc:	f000 f818 	bl	8012b30 <BSP_SD_AbortCallback>
}
 8012b00:	bf00      	nop
 8012b02:	3708      	adds	r7, #8
 8012b04:	46bd      	mov	sp, r7
 8012b06:	bd80      	pop	{r7, pc}

08012b08 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8012b08:	b580      	push	{r7, lr}
 8012b0a:	b082      	sub	sp, #8
 8012b0c:	af00      	add	r7, sp, #0
 8012b0e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8012b10:	f000 f98c 	bl	8012e2c <BSP_SD_WriteCpltCallback>
}
 8012b14:	bf00      	nop
 8012b16:	3708      	adds	r7, #8
 8012b18:	46bd      	mov	sp, r7
 8012b1a:	bd80      	pop	{r7, pc}

08012b1c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8012b1c:	b580      	push	{r7, lr}
 8012b1e:	b082      	sub	sp, #8
 8012b20:	af00      	add	r7, sp, #0
 8012b22:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8012b24:	f000 f98e 	bl	8012e44 <BSP_SD_ReadCpltCallback>
}
 8012b28:	bf00      	nop
 8012b2a:	3708      	adds	r7, #8
 8012b2c:	46bd      	mov	sp, r7
 8012b2e:	bd80      	pop	{r7, pc}

08012b30 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8012b30:	b480      	push	{r7}
 8012b32:	af00      	add	r7, sp, #0

}
 8012b34:	bf00      	nop
 8012b36:	46bd      	mov	sp, r7
 8012b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b3c:	4770      	bx	lr

08012b3e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8012b3e:	b480      	push	{r7}
 8012b40:	b083      	sub	sp, #12
 8012b42:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8012b44:	2301      	movs	r3, #1
 8012b46:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8012b48:	79fb      	ldrb	r3, [r7, #7]
 8012b4a:	b2db      	uxtb	r3, r3
}
 8012b4c:	4618      	mov	r0, r3
 8012b4e:	370c      	adds	r7, #12
 8012b50:	46bd      	mov	sp, r7
 8012b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b56:	4770      	bx	lr

08012b58 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8012b58:	b580      	push	{r7, lr}
 8012b5a:	b084      	sub	sp, #16
 8012b5c:	af00      	add	r7, sp, #0
 8012b5e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8012b60:	f7f5 fcd6 	bl	8008510 <HAL_GetTick>
 8012b64:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8012b66:	e006      	b.n	8012b76 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012b68:	f7ff ffa6 	bl	8012ab8 <BSP_SD_GetCardState>
 8012b6c:	4603      	mov	r3, r0
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d101      	bne.n	8012b76 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8012b72:	2300      	movs	r3, #0
 8012b74:	e009      	b.n	8012b8a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8012b76:	f7f5 fccb 	bl	8008510 <HAL_GetTick>
 8012b7a:	4602      	mov	r2, r0
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	1ad3      	subs	r3, r2, r3
 8012b80:	687a      	ldr	r2, [r7, #4]
 8012b82:	429a      	cmp	r2, r3
 8012b84:	d8f0      	bhi.n	8012b68 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8012b86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012b8a:	4618      	mov	r0, r3
 8012b8c:	3710      	adds	r7, #16
 8012b8e:	46bd      	mov	sp, r7
 8012b90:	bd80      	pop	{r7, pc}
	...

08012b94 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8012b94:	b580      	push	{r7, lr}
 8012b96:	b082      	sub	sp, #8
 8012b98:	af00      	add	r7, sp, #0
 8012b9a:	4603      	mov	r3, r0
 8012b9c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8012b9e:	4b0b      	ldr	r3, [pc, #44]	; (8012bcc <SD_CheckStatus+0x38>)
 8012ba0:	2201      	movs	r2, #1
 8012ba2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8012ba4:	f7ff ff88 	bl	8012ab8 <BSP_SD_GetCardState>
 8012ba8:	4603      	mov	r3, r0
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d107      	bne.n	8012bbe <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8012bae:	4b07      	ldr	r3, [pc, #28]	; (8012bcc <SD_CheckStatus+0x38>)
 8012bb0:	781b      	ldrb	r3, [r3, #0]
 8012bb2:	b2db      	uxtb	r3, r3
 8012bb4:	f023 0301 	bic.w	r3, r3, #1
 8012bb8:	b2da      	uxtb	r2, r3
 8012bba:	4b04      	ldr	r3, [pc, #16]	; (8012bcc <SD_CheckStatus+0x38>)
 8012bbc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8012bbe:	4b03      	ldr	r3, [pc, #12]	; (8012bcc <SD_CheckStatus+0x38>)
 8012bc0:	781b      	ldrb	r3, [r3, #0]
 8012bc2:	b2db      	uxtb	r3, r3
}
 8012bc4:	4618      	mov	r0, r3
 8012bc6:	3708      	adds	r7, #8
 8012bc8:	46bd      	mov	sp, r7
 8012bca:	bd80      	pop	{r7, pc}
 8012bcc:	20000119 	.word	0x20000119

08012bd0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8012bd0:	b580      	push	{r7, lr}
 8012bd2:	b082      	sub	sp, #8
 8012bd4:	af00      	add	r7, sp, #0
 8012bd6:	4603      	mov	r3, r0
 8012bd8:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8012bda:	f7ff ff13 	bl	8012a04 <BSP_SD_Init>
 8012bde:	4603      	mov	r3, r0
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d107      	bne.n	8012bf4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8012be4:	79fb      	ldrb	r3, [r7, #7]
 8012be6:	4618      	mov	r0, r3
 8012be8:	f7ff ffd4 	bl	8012b94 <SD_CheckStatus>
 8012bec:	4603      	mov	r3, r0
 8012bee:	461a      	mov	r2, r3
 8012bf0:	4b04      	ldr	r3, [pc, #16]	; (8012c04 <SD_initialize+0x34>)
 8012bf2:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8012bf4:	4b03      	ldr	r3, [pc, #12]	; (8012c04 <SD_initialize+0x34>)
 8012bf6:	781b      	ldrb	r3, [r3, #0]
 8012bf8:	b2db      	uxtb	r3, r3
}
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	3708      	adds	r7, #8
 8012bfe:	46bd      	mov	sp, r7
 8012c00:	bd80      	pop	{r7, pc}
 8012c02:	bf00      	nop
 8012c04:	20000119 	.word	0x20000119

08012c08 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8012c08:	b580      	push	{r7, lr}
 8012c0a:	b082      	sub	sp, #8
 8012c0c:	af00      	add	r7, sp, #0
 8012c0e:	4603      	mov	r3, r0
 8012c10:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8012c12:	79fb      	ldrb	r3, [r7, #7]
 8012c14:	4618      	mov	r0, r3
 8012c16:	f7ff ffbd 	bl	8012b94 <SD_CheckStatus>
 8012c1a:	4603      	mov	r3, r0
}
 8012c1c:	4618      	mov	r0, r3
 8012c1e:	3708      	adds	r7, #8
 8012c20:	46bd      	mov	sp, r7
 8012c22:	bd80      	pop	{r7, pc}

08012c24 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8012c24:	b580      	push	{r7, lr}
 8012c26:	b086      	sub	sp, #24
 8012c28:	af00      	add	r7, sp, #0
 8012c2a:	60b9      	str	r1, [r7, #8]
 8012c2c:	607a      	str	r2, [r7, #4]
 8012c2e:	603b      	str	r3, [r7, #0]
 8012c30:	4603      	mov	r3, r0
 8012c32:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012c34:	2301      	movs	r3, #1
 8012c36:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8012c38:	f247 5030 	movw	r0, #30000	; 0x7530
 8012c3c:	f7ff ff8c 	bl	8012b58 <SD_CheckStatusWithTimeout>
 8012c40:	4603      	mov	r3, r0
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	da01      	bge.n	8012c4a <SD_read+0x26>
  {
    return res;
 8012c46:	7dfb      	ldrb	r3, [r7, #23]
 8012c48:	e03b      	b.n	8012cc2 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8012c4a:	683a      	ldr	r2, [r7, #0]
 8012c4c:	6879      	ldr	r1, [r7, #4]
 8012c4e:	68b8      	ldr	r0, [r7, #8]
 8012c50:	f7ff fefe 	bl	8012a50 <BSP_SD_ReadBlocks_DMA>
 8012c54:	4603      	mov	r3, r0
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d132      	bne.n	8012cc0 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8012c5a:	4b1c      	ldr	r3, [pc, #112]	; (8012ccc <SD_read+0xa8>)
 8012c5c:	2200      	movs	r2, #0
 8012c5e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8012c60:	f7f5 fc56 	bl	8008510 <HAL_GetTick>
 8012c64:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8012c66:	bf00      	nop
 8012c68:	4b18      	ldr	r3, [pc, #96]	; (8012ccc <SD_read+0xa8>)
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d108      	bne.n	8012c82 <SD_read+0x5e>
 8012c70:	f7f5 fc4e 	bl	8008510 <HAL_GetTick>
 8012c74:	4602      	mov	r2, r0
 8012c76:	693b      	ldr	r3, [r7, #16]
 8012c78:	1ad3      	subs	r3, r2, r3
 8012c7a:	f247 522f 	movw	r2, #29999	; 0x752f
 8012c7e:	4293      	cmp	r3, r2
 8012c80:	d9f2      	bls.n	8012c68 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8012c82:	4b12      	ldr	r3, [pc, #72]	; (8012ccc <SD_read+0xa8>)
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d102      	bne.n	8012c90 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8012c8a:	2301      	movs	r3, #1
 8012c8c:	75fb      	strb	r3, [r7, #23]
 8012c8e:	e017      	b.n	8012cc0 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8012c90:	4b0e      	ldr	r3, [pc, #56]	; (8012ccc <SD_read+0xa8>)
 8012c92:	2200      	movs	r2, #0
 8012c94:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8012c96:	f7f5 fc3b 	bl	8008510 <HAL_GetTick>
 8012c9a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012c9c:	e007      	b.n	8012cae <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012c9e:	f7ff ff0b 	bl	8012ab8 <BSP_SD_GetCardState>
 8012ca2:	4603      	mov	r3, r0
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d102      	bne.n	8012cae <SD_read+0x8a>
          {
            res = RES_OK;
 8012ca8:	2300      	movs	r3, #0
 8012caa:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8012cac:	e008      	b.n	8012cc0 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012cae:	f7f5 fc2f 	bl	8008510 <HAL_GetTick>
 8012cb2:	4602      	mov	r2, r0
 8012cb4:	693b      	ldr	r3, [r7, #16]
 8012cb6:	1ad3      	subs	r3, r2, r3
 8012cb8:	f247 522f 	movw	r2, #29999	; 0x752f
 8012cbc:	4293      	cmp	r3, r2
 8012cbe:	d9ee      	bls.n	8012c9e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8012cc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	3718      	adds	r7, #24
 8012cc6:	46bd      	mov	sp, r7
 8012cc8:	bd80      	pop	{r7, pc}
 8012cca:	bf00      	nop
 8012ccc:	200060f4 	.word	0x200060f4

08012cd0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8012cd0:	b580      	push	{r7, lr}
 8012cd2:	b086      	sub	sp, #24
 8012cd4:	af00      	add	r7, sp, #0
 8012cd6:	60b9      	str	r1, [r7, #8]
 8012cd8:	607a      	str	r2, [r7, #4]
 8012cda:	603b      	str	r3, [r7, #0]
 8012cdc:	4603      	mov	r3, r0
 8012cde:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012ce0:	2301      	movs	r3, #1
 8012ce2:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8012ce4:	4b24      	ldr	r3, [pc, #144]	; (8012d78 <SD_write+0xa8>)
 8012ce6:	2200      	movs	r2, #0
 8012ce8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8012cea:	f247 5030 	movw	r0, #30000	; 0x7530
 8012cee:	f7ff ff33 	bl	8012b58 <SD_CheckStatusWithTimeout>
 8012cf2:	4603      	mov	r3, r0
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	da01      	bge.n	8012cfc <SD_write+0x2c>
  {
    return res;
 8012cf8:	7dfb      	ldrb	r3, [r7, #23]
 8012cfa:	e038      	b.n	8012d6e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8012cfc:	683a      	ldr	r2, [r7, #0]
 8012cfe:	6879      	ldr	r1, [r7, #4]
 8012d00:	68b8      	ldr	r0, [r7, #8]
 8012d02:	f7ff febf 	bl	8012a84 <BSP_SD_WriteBlocks_DMA>
 8012d06:	4603      	mov	r3, r0
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d12f      	bne.n	8012d6c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8012d0c:	f7f5 fc00 	bl	8008510 <HAL_GetTick>
 8012d10:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8012d12:	bf00      	nop
 8012d14:	4b18      	ldr	r3, [pc, #96]	; (8012d78 <SD_write+0xa8>)
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d108      	bne.n	8012d2e <SD_write+0x5e>
 8012d1c:	f7f5 fbf8 	bl	8008510 <HAL_GetTick>
 8012d20:	4602      	mov	r2, r0
 8012d22:	693b      	ldr	r3, [r7, #16]
 8012d24:	1ad3      	subs	r3, r2, r3
 8012d26:	f247 522f 	movw	r2, #29999	; 0x752f
 8012d2a:	4293      	cmp	r3, r2
 8012d2c:	d9f2      	bls.n	8012d14 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8012d2e:	4b12      	ldr	r3, [pc, #72]	; (8012d78 <SD_write+0xa8>)
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d102      	bne.n	8012d3c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8012d36:	2301      	movs	r3, #1
 8012d38:	75fb      	strb	r3, [r7, #23]
 8012d3a:	e017      	b.n	8012d6c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8012d3c:	4b0e      	ldr	r3, [pc, #56]	; (8012d78 <SD_write+0xa8>)
 8012d3e:	2200      	movs	r2, #0
 8012d40:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8012d42:	f7f5 fbe5 	bl	8008510 <HAL_GetTick>
 8012d46:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012d48:	e007      	b.n	8012d5a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012d4a:	f7ff feb5 	bl	8012ab8 <BSP_SD_GetCardState>
 8012d4e:	4603      	mov	r3, r0
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d102      	bne.n	8012d5a <SD_write+0x8a>
          {
            res = RES_OK;
 8012d54:	2300      	movs	r3, #0
 8012d56:	75fb      	strb	r3, [r7, #23]
            break;
 8012d58:	e008      	b.n	8012d6c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012d5a:	f7f5 fbd9 	bl	8008510 <HAL_GetTick>
 8012d5e:	4602      	mov	r2, r0
 8012d60:	693b      	ldr	r3, [r7, #16]
 8012d62:	1ad3      	subs	r3, r2, r3
 8012d64:	f247 522f 	movw	r2, #29999	; 0x752f
 8012d68:	4293      	cmp	r3, r2
 8012d6a:	d9ee      	bls.n	8012d4a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8012d6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d6e:	4618      	mov	r0, r3
 8012d70:	3718      	adds	r7, #24
 8012d72:	46bd      	mov	sp, r7
 8012d74:	bd80      	pop	{r7, pc}
 8012d76:	bf00      	nop
 8012d78:	200060f0 	.word	0x200060f0

08012d7c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8012d7c:	b580      	push	{r7, lr}
 8012d7e:	b08c      	sub	sp, #48	; 0x30
 8012d80:	af00      	add	r7, sp, #0
 8012d82:	4603      	mov	r3, r0
 8012d84:	603a      	str	r2, [r7, #0]
 8012d86:	71fb      	strb	r3, [r7, #7]
 8012d88:	460b      	mov	r3, r1
 8012d8a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8012d8c:	2301      	movs	r3, #1
 8012d8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8012d92:	4b25      	ldr	r3, [pc, #148]	; (8012e28 <SD_ioctl+0xac>)
 8012d94:	781b      	ldrb	r3, [r3, #0]
 8012d96:	b2db      	uxtb	r3, r3
 8012d98:	f003 0301 	and.w	r3, r3, #1
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d001      	beq.n	8012da4 <SD_ioctl+0x28>
 8012da0:	2303      	movs	r3, #3
 8012da2:	e03c      	b.n	8012e1e <SD_ioctl+0xa2>

  switch (cmd)
 8012da4:	79bb      	ldrb	r3, [r7, #6]
 8012da6:	2b03      	cmp	r3, #3
 8012da8:	d834      	bhi.n	8012e14 <SD_ioctl+0x98>
 8012daa:	a201      	add	r2, pc, #4	; (adr r2, 8012db0 <SD_ioctl+0x34>)
 8012dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012db0:	08012dc1 	.word	0x08012dc1
 8012db4:	08012dc9 	.word	0x08012dc9
 8012db8:	08012de1 	.word	0x08012de1
 8012dbc:	08012dfb 	.word	0x08012dfb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8012dc0:	2300      	movs	r3, #0
 8012dc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012dc6:	e028      	b.n	8012e1a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8012dc8:	f107 030c 	add.w	r3, r7, #12
 8012dcc:	4618      	mov	r0, r3
 8012dce:	f7ff fe83 	bl	8012ad8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8012dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012dd4:	683b      	ldr	r3, [r7, #0]
 8012dd6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012dd8:	2300      	movs	r3, #0
 8012dda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012dde:	e01c      	b.n	8012e1a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012de0:	f107 030c 	add.w	r3, r7, #12
 8012de4:	4618      	mov	r0, r3
 8012de6:	f7ff fe77 	bl	8012ad8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8012dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dec:	b29a      	uxth	r2, r3
 8012dee:	683b      	ldr	r3, [r7, #0]
 8012df0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8012df2:	2300      	movs	r3, #0
 8012df4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012df8:	e00f      	b.n	8012e1a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012dfa:	f107 030c 	add.w	r3, r7, #12
 8012dfe:	4618      	mov	r0, r3
 8012e00:	f7ff fe6a 	bl	8012ad8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8012e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e06:	0a5a      	lsrs	r2, r3, #9
 8012e08:	683b      	ldr	r3, [r7, #0]
 8012e0a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012e0c:	2300      	movs	r3, #0
 8012e0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012e12:	e002      	b.n	8012e1a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8012e14:	2304      	movs	r3, #4
 8012e16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8012e1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012e1e:	4618      	mov	r0, r3
 8012e20:	3730      	adds	r7, #48	; 0x30
 8012e22:	46bd      	mov	sp, r7
 8012e24:	bd80      	pop	{r7, pc}
 8012e26:	bf00      	nop
 8012e28:	20000119 	.word	0x20000119

08012e2c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8012e2c:	b480      	push	{r7}
 8012e2e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8012e30:	4b03      	ldr	r3, [pc, #12]	; (8012e40 <BSP_SD_WriteCpltCallback+0x14>)
 8012e32:	2201      	movs	r2, #1
 8012e34:	601a      	str	r2, [r3, #0]
}
 8012e36:	bf00      	nop
 8012e38:	46bd      	mov	sp, r7
 8012e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e3e:	4770      	bx	lr
 8012e40:	200060f0 	.word	0x200060f0

08012e44 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8012e44:	b480      	push	{r7}
 8012e46:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8012e48:	4b03      	ldr	r3, [pc, #12]	; (8012e58 <BSP_SD_ReadCpltCallback+0x14>)
 8012e4a:	2201      	movs	r2, #1
 8012e4c:	601a      	str	r2, [r3, #0]
}
 8012e4e:	bf00      	nop
 8012e50:	46bd      	mov	sp, r7
 8012e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e56:	4770      	bx	lr
 8012e58:	200060f4 	.word	0x200060f4

08012e5c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8012e5c:	b580      	push	{r7, lr}
 8012e5e:	b084      	sub	sp, #16
 8012e60:	af00      	add	r7, sp, #0
 8012e62:	4603      	mov	r3, r0
 8012e64:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8012e66:	79fb      	ldrb	r3, [r7, #7]
 8012e68:	4a08      	ldr	r2, [pc, #32]	; (8012e8c <disk_status+0x30>)
 8012e6a:	009b      	lsls	r3, r3, #2
 8012e6c:	4413      	add	r3, r2
 8012e6e:	685b      	ldr	r3, [r3, #4]
 8012e70:	685b      	ldr	r3, [r3, #4]
 8012e72:	79fa      	ldrb	r2, [r7, #7]
 8012e74:	4905      	ldr	r1, [pc, #20]	; (8012e8c <disk_status+0x30>)
 8012e76:	440a      	add	r2, r1
 8012e78:	7a12      	ldrb	r2, [r2, #8]
 8012e7a:	4610      	mov	r0, r2
 8012e7c:	4798      	blx	r3
 8012e7e:	4603      	mov	r3, r0
 8012e80:	73fb      	strb	r3, [r7, #15]
  return stat;
 8012e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e84:	4618      	mov	r0, r3
 8012e86:	3710      	adds	r7, #16
 8012e88:	46bd      	mov	sp, r7
 8012e8a:	bd80      	pop	{r7, pc}
 8012e8c:	200061a4 	.word	0x200061a4

08012e90 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8012e90:	b580      	push	{r7, lr}
 8012e92:	b084      	sub	sp, #16
 8012e94:	af00      	add	r7, sp, #0
 8012e96:	4603      	mov	r3, r0
 8012e98:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8012e9e:	79fb      	ldrb	r3, [r7, #7]
 8012ea0:	4a0d      	ldr	r2, [pc, #52]	; (8012ed8 <disk_initialize+0x48>)
 8012ea2:	5cd3      	ldrb	r3, [r2, r3]
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d111      	bne.n	8012ecc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8012ea8:	79fb      	ldrb	r3, [r7, #7]
 8012eaa:	4a0b      	ldr	r2, [pc, #44]	; (8012ed8 <disk_initialize+0x48>)
 8012eac:	2101      	movs	r1, #1
 8012eae:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8012eb0:	79fb      	ldrb	r3, [r7, #7]
 8012eb2:	4a09      	ldr	r2, [pc, #36]	; (8012ed8 <disk_initialize+0x48>)
 8012eb4:	009b      	lsls	r3, r3, #2
 8012eb6:	4413      	add	r3, r2
 8012eb8:	685b      	ldr	r3, [r3, #4]
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	79fa      	ldrb	r2, [r7, #7]
 8012ebe:	4906      	ldr	r1, [pc, #24]	; (8012ed8 <disk_initialize+0x48>)
 8012ec0:	440a      	add	r2, r1
 8012ec2:	7a12      	ldrb	r2, [r2, #8]
 8012ec4:	4610      	mov	r0, r2
 8012ec6:	4798      	blx	r3
 8012ec8:	4603      	mov	r3, r0
 8012eca:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8012ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ece:	4618      	mov	r0, r3
 8012ed0:	3710      	adds	r7, #16
 8012ed2:	46bd      	mov	sp, r7
 8012ed4:	bd80      	pop	{r7, pc}
 8012ed6:	bf00      	nop
 8012ed8:	200061a4 	.word	0x200061a4

08012edc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8012edc:	b590      	push	{r4, r7, lr}
 8012ede:	b087      	sub	sp, #28
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	60b9      	str	r1, [r7, #8]
 8012ee4:	607a      	str	r2, [r7, #4]
 8012ee6:	603b      	str	r3, [r7, #0]
 8012ee8:	4603      	mov	r3, r0
 8012eea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8012eec:	7bfb      	ldrb	r3, [r7, #15]
 8012eee:	4a0a      	ldr	r2, [pc, #40]	; (8012f18 <disk_read+0x3c>)
 8012ef0:	009b      	lsls	r3, r3, #2
 8012ef2:	4413      	add	r3, r2
 8012ef4:	685b      	ldr	r3, [r3, #4]
 8012ef6:	689c      	ldr	r4, [r3, #8]
 8012ef8:	7bfb      	ldrb	r3, [r7, #15]
 8012efa:	4a07      	ldr	r2, [pc, #28]	; (8012f18 <disk_read+0x3c>)
 8012efc:	4413      	add	r3, r2
 8012efe:	7a18      	ldrb	r0, [r3, #8]
 8012f00:	683b      	ldr	r3, [r7, #0]
 8012f02:	687a      	ldr	r2, [r7, #4]
 8012f04:	68b9      	ldr	r1, [r7, #8]
 8012f06:	47a0      	blx	r4
 8012f08:	4603      	mov	r3, r0
 8012f0a:	75fb      	strb	r3, [r7, #23]
  return res;
 8012f0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f0e:	4618      	mov	r0, r3
 8012f10:	371c      	adds	r7, #28
 8012f12:	46bd      	mov	sp, r7
 8012f14:	bd90      	pop	{r4, r7, pc}
 8012f16:	bf00      	nop
 8012f18:	200061a4 	.word	0x200061a4

08012f1c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8012f1c:	b590      	push	{r4, r7, lr}
 8012f1e:	b087      	sub	sp, #28
 8012f20:	af00      	add	r7, sp, #0
 8012f22:	60b9      	str	r1, [r7, #8]
 8012f24:	607a      	str	r2, [r7, #4]
 8012f26:	603b      	str	r3, [r7, #0]
 8012f28:	4603      	mov	r3, r0
 8012f2a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8012f2c:	7bfb      	ldrb	r3, [r7, #15]
 8012f2e:	4a0a      	ldr	r2, [pc, #40]	; (8012f58 <disk_write+0x3c>)
 8012f30:	009b      	lsls	r3, r3, #2
 8012f32:	4413      	add	r3, r2
 8012f34:	685b      	ldr	r3, [r3, #4]
 8012f36:	68dc      	ldr	r4, [r3, #12]
 8012f38:	7bfb      	ldrb	r3, [r7, #15]
 8012f3a:	4a07      	ldr	r2, [pc, #28]	; (8012f58 <disk_write+0x3c>)
 8012f3c:	4413      	add	r3, r2
 8012f3e:	7a18      	ldrb	r0, [r3, #8]
 8012f40:	683b      	ldr	r3, [r7, #0]
 8012f42:	687a      	ldr	r2, [r7, #4]
 8012f44:	68b9      	ldr	r1, [r7, #8]
 8012f46:	47a0      	blx	r4
 8012f48:	4603      	mov	r3, r0
 8012f4a:	75fb      	strb	r3, [r7, #23]
  return res;
 8012f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f4e:	4618      	mov	r0, r3
 8012f50:	371c      	adds	r7, #28
 8012f52:	46bd      	mov	sp, r7
 8012f54:	bd90      	pop	{r4, r7, pc}
 8012f56:	bf00      	nop
 8012f58:	200061a4 	.word	0x200061a4

08012f5c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b084      	sub	sp, #16
 8012f60:	af00      	add	r7, sp, #0
 8012f62:	4603      	mov	r3, r0
 8012f64:	603a      	str	r2, [r7, #0]
 8012f66:	71fb      	strb	r3, [r7, #7]
 8012f68:	460b      	mov	r3, r1
 8012f6a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012f6c:	79fb      	ldrb	r3, [r7, #7]
 8012f6e:	4a09      	ldr	r2, [pc, #36]	; (8012f94 <disk_ioctl+0x38>)
 8012f70:	009b      	lsls	r3, r3, #2
 8012f72:	4413      	add	r3, r2
 8012f74:	685b      	ldr	r3, [r3, #4]
 8012f76:	691b      	ldr	r3, [r3, #16]
 8012f78:	79fa      	ldrb	r2, [r7, #7]
 8012f7a:	4906      	ldr	r1, [pc, #24]	; (8012f94 <disk_ioctl+0x38>)
 8012f7c:	440a      	add	r2, r1
 8012f7e:	7a10      	ldrb	r0, [r2, #8]
 8012f80:	79b9      	ldrb	r1, [r7, #6]
 8012f82:	683a      	ldr	r2, [r7, #0]
 8012f84:	4798      	blx	r3
 8012f86:	4603      	mov	r3, r0
 8012f88:	73fb      	strb	r3, [r7, #15]
  return res;
 8012f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f8c:	4618      	mov	r0, r3
 8012f8e:	3710      	adds	r7, #16
 8012f90:	46bd      	mov	sp, r7
 8012f92:	bd80      	pop	{r7, pc}
 8012f94:	200061a4 	.word	0x200061a4

08012f98 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8012f98:	b480      	push	{r7}
 8012f9a:	b085      	sub	sp, #20
 8012f9c:	af00      	add	r7, sp, #0
 8012f9e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	3301      	adds	r3, #1
 8012fa4:	781b      	ldrb	r3, [r3, #0]
 8012fa6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8012fa8:	89fb      	ldrh	r3, [r7, #14]
 8012faa:	021b      	lsls	r3, r3, #8
 8012fac:	b21a      	sxth	r2, r3
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	781b      	ldrb	r3, [r3, #0]
 8012fb2:	b21b      	sxth	r3, r3
 8012fb4:	4313      	orrs	r3, r2
 8012fb6:	b21b      	sxth	r3, r3
 8012fb8:	81fb      	strh	r3, [r7, #14]
	return rv;
 8012fba:	89fb      	ldrh	r3, [r7, #14]
}
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	3714      	adds	r7, #20
 8012fc0:	46bd      	mov	sp, r7
 8012fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fc6:	4770      	bx	lr

08012fc8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8012fc8:	b480      	push	{r7}
 8012fca:	b085      	sub	sp, #20
 8012fcc:	af00      	add	r7, sp, #0
 8012fce:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	3303      	adds	r3, #3
 8012fd4:	781b      	ldrb	r3, [r3, #0]
 8012fd6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	021b      	lsls	r3, r3, #8
 8012fdc:	687a      	ldr	r2, [r7, #4]
 8012fde:	3202      	adds	r2, #2
 8012fe0:	7812      	ldrb	r2, [r2, #0]
 8012fe2:	4313      	orrs	r3, r2
 8012fe4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	021b      	lsls	r3, r3, #8
 8012fea:	687a      	ldr	r2, [r7, #4]
 8012fec:	3201      	adds	r2, #1
 8012fee:	7812      	ldrb	r2, [r2, #0]
 8012ff0:	4313      	orrs	r3, r2
 8012ff2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	021b      	lsls	r3, r3, #8
 8012ff8:	687a      	ldr	r2, [r7, #4]
 8012ffa:	7812      	ldrb	r2, [r2, #0]
 8012ffc:	4313      	orrs	r3, r2
 8012ffe:	60fb      	str	r3, [r7, #12]
	return rv;
 8013000:	68fb      	ldr	r3, [r7, #12]
}
 8013002:	4618      	mov	r0, r3
 8013004:	3714      	adds	r7, #20
 8013006:	46bd      	mov	sp, r7
 8013008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801300c:	4770      	bx	lr

0801300e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801300e:	b480      	push	{r7}
 8013010:	b083      	sub	sp, #12
 8013012:	af00      	add	r7, sp, #0
 8013014:	6078      	str	r0, [r7, #4]
 8013016:	460b      	mov	r3, r1
 8013018:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	1c5a      	adds	r2, r3, #1
 801301e:	607a      	str	r2, [r7, #4]
 8013020:	887a      	ldrh	r2, [r7, #2]
 8013022:	b2d2      	uxtb	r2, r2
 8013024:	701a      	strb	r2, [r3, #0]
 8013026:	887b      	ldrh	r3, [r7, #2]
 8013028:	0a1b      	lsrs	r3, r3, #8
 801302a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	1c5a      	adds	r2, r3, #1
 8013030:	607a      	str	r2, [r7, #4]
 8013032:	887a      	ldrh	r2, [r7, #2]
 8013034:	b2d2      	uxtb	r2, r2
 8013036:	701a      	strb	r2, [r3, #0]
}
 8013038:	bf00      	nop
 801303a:	370c      	adds	r7, #12
 801303c:	46bd      	mov	sp, r7
 801303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013042:	4770      	bx	lr

08013044 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8013044:	b480      	push	{r7}
 8013046:	b083      	sub	sp, #12
 8013048:	af00      	add	r7, sp, #0
 801304a:	6078      	str	r0, [r7, #4]
 801304c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	1c5a      	adds	r2, r3, #1
 8013052:	607a      	str	r2, [r7, #4]
 8013054:	683a      	ldr	r2, [r7, #0]
 8013056:	b2d2      	uxtb	r2, r2
 8013058:	701a      	strb	r2, [r3, #0]
 801305a:	683b      	ldr	r3, [r7, #0]
 801305c:	0a1b      	lsrs	r3, r3, #8
 801305e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	1c5a      	adds	r2, r3, #1
 8013064:	607a      	str	r2, [r7, #4]
 8013066:	683a      	ldr	r2, [r7, #0]
 8013068:	b2d2      	uxtb	r2, r2
 801306a:	701a      	strb	r2, [r3, #0]
 801306c:	683b      	ldr	r3, [r7, #0]
 801306e:	0a1b      	lsrs	r3, r3, #8
 8013070:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	1c5a      	adds	r2, r3, #1
 8013076:	607a      	str	r2, [r7, #4]
 8013078:	683a      	ldr	r2, [r7, #0]
 801307a:	b2d2      	uxtb	r2, r2
 801307c:	701a      	strb	r2, [r3, #0]
 801307e:	683b      	ldr	r3, [r7, #0]
 8013080:	0a1b      	lsrs	r3, r3, #8
 8013082:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	1c5a      	adds	r2, r3, #1
 8013088:	607a      	str	r2, [r7, #4]
 801308a:	683a      	ldr	r2, [r7, #0]
 801308c:	b2d2      	uxtb	r2, r2
 801308e:	701a      	strb	r2, [r3, #0]
}
 8013090:	bf00      	nop
 8013092:	370c      	adds	r7, #12
 8013094:	46bd      	mov	sp, r7
 8013096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801309a:	4770      	bx	lr

0801309c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801309c:	b480      	push	{r7}
 801309e:	b087      	sub	sp, #28
 80130a0:	af00      	add	r7, sp, #0
 80130a2:	60f8      	str	r0, [r7, #12]
 80130a4:	60b9      	str	r1, [r7, #8]
 80130a6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80130ac:	68bb      	ldr	r3, [r7, #8]
 80130ae:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d00d      	beq.n	80130d2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80130b6:	693a      	ldr	r2, [r7, #16]
 80130b8:	1c53      	adds	r3, r2, #1
 80130ba:	613b      	str	r3, [r7, #16]
 80130bc:	697b      	ldr	r3, [r7, #20]
 80130be:	1c59      	adds	r1, r3, #1
 80130c0:	6179      	str	r1, [r7, #20]
 80130c2:	7812      	ldrb	r2, [r2, #0]
 80130c4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	3b01      	subs	r3, #1
 80130ca:	607b      	str	r3, [r7, #4]
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d1f1      	bne.n	80130b6 <mem_cpy+0x1a>
	}
}
 80130d2:	bf00      	nop
 80130d4:	371c      	adds	r7, #28
 80130d6:	46bd      	mov	sp, r7
 80130d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130dc:	4770      	bx	lr

080130de <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80130de:	b480      	push	{r7}
 80130e0:	b087      	sub	sp, #28
 80130e2:	af00      	add	r7, sp, #0
 80130e4:	60f8      	str	r0, [r7, #12]
 80130e6:	60b9      	str	r1, [r7, #8]
 80130e8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80130ee:	697b      	ldr	r3, [r7, #20]
 80130f0:	1c5a      	adds	r2, r3, #1
 80130f2:	617a      	str	r2, [r7, #20]
 80130f4:	68ba      	ldr	r2, [r7, #8]
 80130f6:	b2d2      	uxtb	r2, r2
 80130f8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	3b01      	subs	r3, #1
 80130fe:	607b      	str	r3, [r7, #4]
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	2b00      	cmp	r3, #0
 8013104:	d1f3      	bne.n	80130ee <mem_set+0x10>
}
 8013106:	bf00      	nop
 8013108:	bf00      	nop
 801310a:	371c      	adds	r7, #28
 801310c:	46bd      	mov	sp, r7
 801310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013112:	4770      	bx	lr

08013114 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8013114:	b480      	push	{r7}
 8013116:	b089      	sub	sp, #36	; 0x24
 8013118:	af00      	add	r7, sp, #0
 801311a:	60f8      	str	r0, [r7, #12]
 801311c:	60b9      	str	r1, [r7, #8]
 801311e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	61fb      	str	r3, [r7, #28]
 8013124:	68bb      	ldr	r3, [r7, #8]
 8013126:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8013128:	2300      	movs	r3, #0
 801312a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801312c:	69fb      	ldr	r3, [r7, #28]
 801312e:	1c5a      	adds	r2, r3, #1
 8013130:	61fa      	str	r2, [r7, #28]
 8013132:	781b      	ldrb	r3, [r3, #0]
 8013134:	4619      	mov	r1, r3
 8013136:	69bb      	ldr	r3, [r7, #24]
 8013138:	1c5a      	adds	r2, r3, #1
 801313a:	61ba      	str	r2, [r7, #24]
 801313c:	781b      	ldrb	r3, [r3, #0]
 801313e:	1acb      	subs	r3, r1, r3
 8013140:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	3b01      	subs	r3, #1
 8013146:	607b      	str	r3, [r7, #4]
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	2b00      	cmp	r3, #0
 801314c:	d002      	beq.n	8013154 <mem_cmp+0x40>
 801314e:	697b      	ldr	r3, [r7, #20]
 8013150:	2b00      	cmp	r3, #0
 8013152:	d0eb      	beq.n	801312c <mem_cmp+0x18>

	return r;
 8013154:	697b      	ldr	r3, [r7, #20]
}
 8013156:	4618      	mov	r0, r3
 8013158:	3724      	adds	r7, #36	; 0x24
 801315a:	46bd      	mov	sp, r7
 801315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013160:	4770      	bx	lr

08013162 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8013162:	b480      	push	{r7}
 8013164:	b083      	sub	sp, #12
 8013166:	af00      	add	r7, sp, #0
 8013168:	6078      	str	r0, [r7, #4]
 801316a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801316c:	e002      	b.n	8013174 <chk_chr+0x12>
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	3301      	adds	r3, #1
 8013172:	607b      	str	r3, [r7, #4]
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	781b      	ldrb	r3, [r3, #0]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d005      	beq.n	8013188 <chk_chr+0x26>
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	781b      	ldrb	r3, [r3, #0]
 8013180:	461a      	mov	r2, r3
 8013182:	683b      	ldr	r3, [r7, #0]
 8013184:	4293      	cmp	r3, r2
 8013186:	d1f2      	bne.n	801316e <chk_chr+0xc>
	return *str;
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	781b      	ldrb	r3, [r3, #0]
}
 801318c:	4618      	mov	r0, r3
 801318e:	370c      	adds	r7, #12
 8013190:	46bd      	mov	sp, r7
 8013192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013196:	4770      	bx	lr

08013198 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8013198:	b480      	push	{r7}
 801319a:	b085      	sub	sp, #20
 801319c:	af00      	add	r7, sp, #0
 801319e:	6078      	str	r0, [r7, #4]
 80131a0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80131a2:	2300      	movs	r3, #0
 80131a4:	60bb      	str	r3, [r7, #8]
 80131a6:	68bb      	ldr	r3, [r7, #8]
 80131a8:	60fb      	str	r3, [r7, #12]
 80131aa:	e029      	b.n	8013200 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80131ac:	4a27      	ldr	r2, [pc, #156]	; (801324c <chk_lock+0xb4>)
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	011b      	lsls	r3, r3, #4
 80131b2:	4413      	add	r3, r2
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d01d      	beq.n	80131f6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80131ba:	4a24      	ldr	r2, [pc, #144]	; (801324c <chk_lock+0xb4>)
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	011b      	lsls	r3, r3, #4
 80131c0:	4413      	add	r3, r2
 80131c2:	681a      	ldr	r2, [r3, #0]
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	429a      	cmp	r2, r3
 80131ca:	d116      	bne.n	80131fa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80131cc:	4a1f      	ldr	r2, [pc, #124]	; (801324c <chk_lock+0xb4>)
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	011b      	lsls	r3, r3, #4
 80131d2:	4413      	add	r3, r2
 80131d4:	3304      	adds	r3, #4
 80131d6:	681a      	ldr	r2, [r3, #0]
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80131dc:	429a      	cmp	r2, r3
 80131de:	d10c      	bne.n	80131fa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80131e0:	4a1a      	ldr	r2, [pc, #104]	; (801324c <chk_lock+0xb4>)
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	011b      	lsls	r3, r3, #4
 80131e6:	4413      	add	r3, r2
 80131e8:	3308      	adds	r3, #8
 80131ea:	681a      	ldr	r2, [r3, #0]
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80131f0:	429a      	cmp	r2, r3
 80131f2:	d102      	bne.n	80131fa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80131f4:	e007      	b.n	8013206 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80131f6:	2301      	movs	r3, #1
 80131f8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	3301      	adds	r3, #1
 80131fe:	60fb      	str	r3, [r7, #12]
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	2b04      	cmp	r3, #4
 8013204:	d9d2      	bls.n	80131ac <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	2b05      	cmp	r3, #5
 801320a:	d109      	bne.n	8013220 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801320c:	68bb      	ldr	r3, [r7, #8]
 801320e:	2b00      	cmp	r3, #0
 8013210:	d102      	bne.n	8013218 <chk_lock+0x80>
 8013212:	683b      	ldr	r3, [r7, #0]
 8013214:	2b02      	cmp	r3, #2
 8013216:	d101      	bne.n	801321c <chk_lock+0x84>
 8013218:	2300      	movs	r3, #0
 801321a:	e010      	b.n	801323e <chk_lock+0xa6>
 801321c:	2312      	movs	r3, #18
 801321e:	e00e      	b.n	801323e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8013220:	683b      	ldr	r3, [r7, #0]
 8013222:	2b00      	cmp	r3, #0
 8013224:	d108      	bne.n	8013238 <chk_lock+0xa0>
 8013226:	4a09      	ldr	r2, [pc, #36]	; (801324c <chk_lock+0xb4>)
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	011b      	lsls	r3, r3, #4
 801322c:	4413      	add	r3, r2
 801322e:	330c      	adds	r3, #12
 8013230:	881b      	ldrh	r3, [r3, #0]
 8013232:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013236:	d101      	bne.n	801323c <chk_lock+0xa4>
 8013238:	2310      	movs	r3, #16
 801323a:	e000      	b.n	801323e <chk_lock+0xa6>
 801323c:	2300      	movs	r3, #0
}
 801323e:	4618      	mov	r0, r3
 8013240:	3714      	adds	r7, #20
 8013242:	46bd      	mov	sp, r7
 8013244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013248:	4770      	bx	lr
 801324a:	bf00      	nop
 801324c:	20006100 	.word	0x20006100

08013250 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8013250:	b480      	push	{r7}
 8013252:	b083      	sub	sp, #12
 8013254:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8013256:	2300      	movs	r3, #0
 8013258:	607b      	str	r3, [r7, #4]
 801325a:	e002      	b.n	8013262 <enq_lock+0x12>
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	3301      	adds	r3, #1
 8013260:	607b      	str	r3, [r7, #4]
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	2b04      	cmp	r3, #4
 8013266:	d806      	bhi.n	8013276 <enq_lock+0x26>
 8013268:	4a09      	ldr	r2, [pc, #36]	; (8013290 <enq_lock+0x40>)
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	011b      	lsls	r3, r3, #4
 801326e:	4413      	add	r3, r2
 8013270:	681b      	ldr	r3, [r3, #0]
 8013272:	2b00      	cmp	r3, #0
 8013274:	d1f2      	bne.n	801325c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	2b05      	cmp	r3, #5
 801327a:	bf14      	ite	ne
 801327c:	2301      	movne	r3, #1
 801327e:	2300      	moveq	r3, #0
 8013280:	b2db      	uxtb	r3, r3
}
 8013282:	4618      	mov	r0, r3
 8013284:	370c      	adds	r7, #12
 8013286:	46bd      	mov	sp, r7
 8013288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801328c:	4770      	bx	lr
 801328e:	bf00      	nop
 8013290:	20006100 	.word	0x20006100

08013294 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8013294:	b480      	push	{r7}
 8013296:	b085      	sub	sp, #20
 8013298:	af00      	add	r7, sp, #0
 801329a:	6078      	str	r0, [r7, #4]
 801329c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801329e:	2300      	movs	r3, #0
 80132a0:	60fb      	str	r3, [r7, #12]
 80132a2:	e01f      	b.n	80132e4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80132a4:	4a41      	ldr	r2, [pc, #260]	; (80133ac <inc_lock+0x118>)
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	011b      	lsls	r3, r3, #4
 80132aa:	4413      	add	r3, r2
 80132ac:	681a      	ldr	r2, [r3, #0]
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	681b      	ldr	r3, [r3, #0]
 80132b2:	429a      	cmp	r2, r3
 80132b4:	d113      	bne.n	80132de <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80132b6:	4a3d      	ldr	r2, [pc, #244]	; (80133ac <inc_lock+0x118>)
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	011b      	lsls	r3, r3, #4
 80132bc:	4413      	add	r3, r2
 80132be:	3304      	adds	r3, #4
 80132c0:	681a      	ldr	r2, [r3, #0]
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80132c6:	429a      	cmp	r2, r3
 80132c8:	d109      	bne.n	80132de <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80132ca:	4a38      	ldr	r2, [pc, #224]	; (80133ac <inc_lock+0x118>)
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	011b      	lsls	r3, r3, #4
 80132d0:	4413      	add	r3, r2
 80132d2:	3308      	adds	r3, #8
 80132d4:	681a      	ldr	r2, [r3, #0]
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80132da:	429a      	cmp	r2, r3
 80132dc:	d006      	beq.n	80132ec <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	3301      	adds	r3, #1
 80132e2:	60fb      	str	r3, [r7, #12]
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	2b04      	cmp	r3, #4
 80132e8:	d9dc      	bls.n	80132a4 <inc_lock+0x10>
 80132ea:	e000      	b.n	80132ee <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80132ec:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	2b05      	cmp	r3, #5
 80132f2:	d132      	bne.n	801335a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80132f4:	2300      	movs	r3, #0
 80132f6:	60fb      	str	r3, [r7, #12]
 80132f8:	e002      	b.n	8013300 <inc_lock+0x6c>
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	3301      	adds	r3, #1
 80132fe:	60fb      	str	r3, [r7, #12]
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	2b04      	cmp	r3, #4
 8013304:	d806      	bhi.n	8013314 <inc_lock+0x80>
 8013306:	4a29      	ldr	r2, [pc, #164]	; (80133ac <inc_lock+0x118>)
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	011b      	lsls	r3, r3, #4
 801330c:	4413      	add	r3, r2
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	2b00      	cmp	r3, #0
 8013312:	d1f2      	bne.n	80132fa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	2b05      	cmp	r3, #5
 8013318:	d101      	bne.n	801331e <inc_lock+0x8a>
 801331a:	2300      	movs	r3, #0
 801331c:	e040      	b.n	80133a0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	681a      	ldr	r2, [r3, #0]
 8013322:	4922      	ldr	r1, [pc, #136]	; (80133ac <inc_lock+0x118>)
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	011b      	lsls	r3, r3, #4
 8013328:	440b      	add	r3, r1
 801332a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	689a      	ldr	r2, [r3, #8]
 8013330:	491e      	ldr	r1, [pc, #120]	; (80133ac <inc_lock+0x118>)
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	011b      	lsls	r3, r3, #4
 8013336:	440b      	add	r3, r1
 8013338:	3304      	adds	r3, #4
 801333a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	695a      	ldr	r2, [r3, #20]
 8013340:	491a      	ldr	r1, [pc, #104]	; (80133ac <inc_lock+0x118>)
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	011b      	lsls	r3, r3, #4
 8013346:	440b      	add	r3, r1
 8013348:	3308      	adds	r3, #8
 801334a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801334c:	4a17      	ldr	r2, [pc, #92]	; (80133ac <inc_lock+0x118>)
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	011b      	lsls	r3, r3, #4
 8013352:	4413      	add	r3, r2
 8013354:	330c      	adds	r3, #12
 8013356:	2200      	movs	r2, #0
 8013358:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801335a:	683b      	ldr	r3, [r7, #0]
 801335c:	2b00      	cmp	r3, #0
 801335e:	d009      	beq.n	8013374 <inc_lock+0xe0>
 8013360:	4a12      	ldr	r2, [pc, #72]	; (80133ac <inc_lock+0x118>)
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	011b      	lsls	r3, r3, #4
 8013366:	4413      	add	r3, r2
 8013368:	330c      	adds	r3, #12
 801336a:	881b      	ldrh	r3, [r3, #0]
 801336c:	2b00      	cmp	r3, #0
 801336e:	d001      	beq.n	8013374 <inc_lock+0xe0>
 8013370:	2300      	movs	r3, #0
 8013372:	e015      	b.n	80133a0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8013374:	683b      	ldr	r3, [r7, #0]
 8013376:	2b00      	cmp	r3, #0
 8013378:	d108      	bne.n	801338c <inc_lock+0xf8>
 801337a:	4a0c      	ldr	r2, [pc, #48]	; (80133ac <inc_lock+0x118>)
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	011b      	lsls	r3, r3, #4
 8013380:	4413      	add	r3, r2
 8013382:	330c      	adds	r3, #12
 8013384:	881b      	ldrh	r3, [r3, #0]
 8013386:	3301      	adds	r3, #1
 8013388:	b29a      	uxth	r2, r3
 801338a:	e001      	b.n	8013390 <inc_lock+0xfc>
 801338c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013390:	4906      	ldr	r1, [pc, #24]	; (80133ac <inc_lock+0x118>)
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	011b      	lsls	r3, r3, #4
 8013396:	440b      	add	r3, r1
 8013398:	330c      	adds	r3, #12
 801339a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	3301      	adds	r3, #1
}
 80133a0:	4618      	mov	r0, r3
 80133a2:	3714      	adds	r7, #20
 80133a4:	46bd      	mov	sp, r7
 80133a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133aa:	4770      	bx	lr
 80133ac:	20006100 	.word	0x20006100

080133b0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80133b0:	b480      	push	{r7}
 80133b2:	b085      	sub	sp, #20
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80133b8:	2300      	movs	r3, #0
 80133ba:	60fb      	str	r3, [r7, #12]
 80133bc:	e010      	b.n	80133e0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80133be:	4a0d      	ldr	r2, [pc, #52]	; (80133f4 <clear_lock+0x44>)
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	011b      	lsls	r3, r3, #4
 80133c4:	4413      	add	r3, r2
 80133c6:	681b      	ldr	r3, [r3, #0]
 80133c8:	687a      	ldr	r2, [r7, #4]
 80133ca:	429a      	cmp	r2, r3
 80133cc:	d105      	bne.n	80133da <clear_lock+0x2a>
 80133ce:	4a09      	ldr	r2, [pc, #36]	; (80133f4 <clear_lock+0x44>)
 80133d0:	68fb      	ldr	r3, [r7, #12]
 80133d2:	011b      	lsls	r3, r3, #4
 80133d4:	4413      	add	r3, r2
 80133d6:	2200      	movs	r2, #0
 80133d8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	3301      	adds	r3, #1
 80133de:	60fb      	str	r3, [r7, #12]
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	2b04      	cmp	r3, #4
 80133e4:	d9eb      	bls.n	80133be <clear_lock+0xe>
	}
}
 80133e6:	bf00      	nop
 80133e8:	bf00      	nop
 80133ea:	3714      	adds	r7, #20
 80133ec:	46bd      	mov	sp, r7
 80133ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133f2:	4770      	bx	lr
 80133f4:	20006100 	.word	0x20006100

080133f8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80133f8:	b580      	push	{r7, lr}
 80133fa:	b086      	sub	sp, #24
 80133fc:	af00      	add	r7, sp, #0
 80133fe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8013400:	2300      	movs	r3, #0
 8013402:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	78db      	ldrb	r3, [r3, #3]
 8013408:	2b00      	cmp	r3, #0
 801340a:	d034      	beq.n	8013476 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013410:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	7858      	ldrb	r0, [r3, #1]
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801341c:	2301      	movs	r3, #1
 801341e:	697a      	ldr	r2, [r7, #20]
 8013420:	f7ff fd7c 	bl	8012f1c <disk_write>
 8013424:	4603      	mov	r3, r0
 8013426:	2b00      	cmp	r3, #0
 8013428:	d002      	beq.n	8013430 <sync_window+0x38>
			res = FR_DISK_ERR;
 801342a:	2301      	movs	r3, #1
 801342c:	73fb      	strb	r3, [r7, #15]
 801342e:	e022      	b.n	8013476 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	2200      	movs	r2, #0
 8013434:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801343a:	697a      	ldr	r2, [r7, #20]
 801343c:	1ad2      	subs	r2, r2, r3
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	6a1b      	ldr	r3, [r3, #32]
 8013442:	429a      	cmp	r2, r3
 8013444:	d217      	bcs.n	8013476 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	789b      	ldrb	r3, [r3, #2]
 801344a:	613b      	str	r3, [r7, #16]
 801344c:	e010      	b.n	8013470 <sync_window+0x78>
					wsect += fs->fsize;
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	6a1b      	ldr	r3, [r3, #32]
 8013452:	697a      	ldr	r2, [r7, #20]
 8013454:	4413      	add	r3, r2
 8013456:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	7858      	ldrb	r0, [r3, #1]
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013462:	2301      	movs	r3, #1
 8013464:	697a      	ldr	r2, [r7, #20]
 8013466:	f7ff fd59 	bl	8012f1c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801346a:	693b      	ldr	r3, [r7, #16]
 801346c:	3b01      	subs	r3, #1
 801346e:	613b      	str	r3, [r7, #16]
 8013470:	693b      	ldr	r3, [r7, #16]
 8013472:	2b01      	cmp	r3, #1
 8013474:	d8eb      	bhi.n	801344e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8013476:	7bfb      	ldrb	r3, [r7, #15]
}
 8013478:	4618      	mov	r0, r3
 801347a:	3718      	adds	r7, #24
 801347c:	46bd      	mov	sp, r7
 801347e:	bd80      	pop	{r7, pc}

08013480 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8013480:	b580      	push	{r7, lr}
 8013482:	b084      	sub	sp, #16
 8013484:	af00      	add	r7, sp, #0
 8013486:	6078      	str	r0, [r7, #4]
 8013488:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801348a:	2300      	movs	r3, #0
 801348c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013492:	683a      	ldr	r2, [r7, #0]
 8013494:	429a      	cmp	r2, r3
 8013496:	d01b      	beq.n	80134d0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8013498:	6878      	ldr	r0, [r7, #4]
 801349a:	f7ff ffad 	bl	80133f8 <sync_window>
 801349e:	4603      	mov	r3, r0
 80134a0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80134a2:	7bfb      	ldrb	r3, [r7, #15]
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d113      	bne.n	80134d0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	7858      	ldrb	r0, [r3, #1]
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80134b2:	2301      	movs	r3, #1
 80134b4:	683a      	ldr	r2, [r7, #0]
 80134b6:	f7ff fd11 	bl	8012edc <disk_read>
 80134ba:	4603      	mov	r3, r0
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d004      	beq.n	80134ca <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80134c0:	f04f 33ff 	mov.w	r3, #4294967295
 80134c4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80134c6:	2301      	movs	r3, #1
 80134c8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	683a      	ldr	r2, [r7, #0]
 80134ce:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80134d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80134d2:	4618      	mov	r0, r3
 80134d4:	3710      	adds	r7, #16
 80134d6:	46bd      	mov	sp, r7
 80134d8:	bd80      	pop	{r7, pc}
	...

080134dc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80134dc:	b580      	push	{r7, lr}
 80134de:	b084      	sub	sp, #16
 80134e0:	af00      	add	r7, sp, #0
 80134e2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80134e4:	6878      	ldr	r0, [r7, #4]
 80134e6:	f7ff ff87 	bl	80133f8 <sync_window>
 80134ea:	4603      	mov	r3, r0
 80134ec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80134ee:	7bfb      	ldrb	r3, [r7, #15]
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d159      	bne.n	80135a8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	781b      	ldrb	r3, [r3, #0]
 80134f8:	2b03      	cmp	r3, #3
 80134fa:	d149      	bne.n	8013590 <sync_fs+0xb4>
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	791b      	ldrb	r3, [r3, #4]
 8013500:	2b01      	cmp	r3, #1
 8013502:	d145      	bne.n	8013590 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	f103 0038 	add.w	r0, r3, #56	; 0x38
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	899b      	ldrh	r3, [r3, #12]
 801350e:	461a      	mov	r2, r3
 8013510:	2100      	movs	r1, #0
 8013512:	f7ff fde4 	bl	80130de <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	3338      	adds	r3, #56	; 0x38
 801351a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801351e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8013522:	4618      	mov	r0, r3
 8013524:	f7ff fd73 	bl	801300e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	3338      	adds	r3, #56	; 0x38
 801352c:	4921      	ldr	r1, [pc, #132]	; (80135b4 <sync_fs+0xd8>)
 801352e:	4618      	mov	r0, r3
 8013530:	f7ff fd88 	bl	8013044 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	3338      	adds	r3, #56	; 0x38
 8013538:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801353c:	491e      	ldr	r1, [pc, #120]	; (80135b8 <sync_fs+0xdc>)
 801353e:	4618      	mov	r0, r3
 8013540:	f7ff fd80 	bl	8013044 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	3338      	adds	r3, #56	; 0x38
 8013548:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	699b      	ldr	r3, [r3, #24]
 8013550:	4619      	mov	r1, r3
 8013552:	4610      	mov	r0, r2
 8013554:	f7ff fd76 	bl	8013044 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	3338      	adds	r3, #56	; 0x38
 801355c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	695b      	ldr	r3, [r3, #20]
 8013564:	4619      	mov	r1, r3
 8013566:	4610      	mov	r0, r2
 8013568:	f7ff fd6c 	bl	8013044 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013570:	1c5a      	adds	r2, r3, #1
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	7858      	ldrb	r0, [r3, #1]
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013584:	2301      	movs	r3, #1
 8013586:	f7ff fcc9 	bl	8012f1c <disk_write>
			fs->fsi_flag = 0;
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	2200      	movs	r2, #0
 801358e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	785b      	ldrb	r3, [r3, #1]
 8013594:	2200      	movs	r2, #0
 8013596:	2100      	movs	r1, #0
 8013598:	4618      	mov	r0, r3
 801359a:	f7ff fcdf 	bl	8012f5c <disk_ioctl>
 801359e:	4603      	mov	r3, r0
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d001      	beq.n	80135a8 <sync_fs+0xcc>
 80135a4:	2301      	movs	r3, #1
 80135a6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80135a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80135aa:	4618      	mov	r0, r3
 80135ac:	3710      	adds	r7, #16
 80135ae:	46bd      	mov	sp, r7
 80135b0:	bd80      	pop	{r7, pc}
 80135b2:	bf00      	nop
 80135b4:	41615252 	.word	0x41615252
 80135b8:	61417272 	.word	0x61417272

080135bc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80135bc:	b480      	push	{r7}
 80135be:	b083      	sub	sp, #12
 80135c0:	af00      	add	r7, sp, #0
 80135c2:	6078      	str	r0, [r7, #4]
 80135c4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80135c6:	683b      	ldr	r3, [r7, #0]
 80135c8:	3b02      	subs	r3, #2
 80135ca:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	69db      	ldr	r3, [r3, #28]
 80135d0:	3b02      	subs	r3, #2
 80135d2:	683a      	ldr	r2, [r7, #0]
 80135d4:	429a      	cmp	r2, r3
 80135d6:	d301      	bcc.n	80135dc <clust2sect+0x20>
 80135d8:	2300      	movs	r3, #0
 80135da:	e008      	b.n	80135ee <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	895b      	ldrh	r3, [r3, #10]
 80135e0:	461a      	mov	r2, r3
 80135e2:	683b      	ldr	r3, [r7, #0]
 80135e4:	fb03 f202 	mul.w	r2, r3, r2
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80135ec:	4413      	add	r3, r2
}
 80135ee:	4618      	mov	r0, r3
 80135f0:	370c      	adds	r7, #12
 80135f2:	46bd      	mov	sp, r7
 80135f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135f8:	4770      	bx	lr

080135fa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80135fa:	b580      	push	{r7, lr}
 80135fc:	b086      	sub	sp, #24
 80135fe:	af00      	add	r7, sp, #0
 8013600:	6078      	str	r0, [r7, #4]
 8013602:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801360a:	683b      	ldr	r3, [r7, #0]
 801360c:	2b01      	cmp	r3, #1
 801360e:	d904      	bls.n	801361a <get_fat+0x20>
 8013610:	693b      	ldr	r3, [r7, #16]
 8013612:	69db      	ldr	r3, [r3, #28]
 8013614:	683a      	ldr	r2, [r7, #0]
 8013616:	429a      	cmp	r2, r3
 8013618:	d302      	bcc.n	8013620 <get_fat+0x26>
		val = 1;	/* Internal error */
 801361a:	2301      	movs	r3, #1
 801361c:	617b      	str	r3, [r7, #20]
 801361e:	e0bb      	b.n	8013798 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8013620:	f04f 33ff 	mov.w	r3, #4294967295
 8013624:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8013626:	693b      	ldr	r3, [r7, #16]
 8013628:	781b      	ldrb	r3, [r3, #0]
 801362a:	2b03      	cmp	r3, #3
 801362c:	f000 8083 	beq.w	8013736 <get_fat+0x13c>
 8013630:	2b03      	cmp	r3, #3
 8013632:	f300 80a7 	bgt.w	8013784 <get_fat+0x18a>
 8013636:	2b01      	cmp	r3, #1
 8013638:	d002      	beq.n	8013640 <get_fat+0x46>
 801363a:	2b02      	cmp	r3, #2
 801363c:	d056      	beq.n	80136ec <get_fat+0xf2>
 801363e:	e0a1      	b.n	8013784 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8013640:	683b      	ldr	r3, [r7, #0]
 8013642:	60fb      	str	r3, [r7, #12]
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	085b      	lsrs	r3, r3, #1
 8013648:	68fa      	ldr	r2, [r7, #12]
 801364a:	4413      	add	r3, r2
 801364c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801364e:	693b      	ldr	r3, [r7, #16]
 8013650:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013652:	693b      	ldr	r3, [r7, #16]
 8013654:	899b      	ldrh	r3, [r3, #12]
 8013656:	4619      	mov	r1, r3
 8013658:	68fb      	ldr	r3, [r7, #12]
 801365a:	fbb3 f3f1 	udiv	r3, r3, r1
 801365e:	4413      	add	r3, r2
 8013660:	4619      	mov	r1, r3
 8013662:	6938      	ldr	r0, [r7, #16]
 8013664:	f7ff ff0c 	bl	8013480 <move_window>
 8013668:	4603      	mov	r3, r0
 801366a:	2b00      	cmp	r3, #0
 801366c:	f040 808d 	bne.w	801378a <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	1c5a      	adds	r2, r3, #1
 8013674:	60fa      	str	r2, [r7, #12]
 8013676:	693a      	ldr	r2, [r7, #16]
 8013678:	8992      	ldrh	r2, [r2, #12]
 801367a:	fbb3 f1f2 	udiv	r1, r3, r2
 801367e:	fb01 f202 	mul.w	r2, r1, r2
 8013682:	1a9b      	subs	r3, r3, r2
 8013684:	693a      	ldr	r2, [r7, #16]
 8013686:	4413      	add	r3, r2
 8013688:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801368c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801368e:	693b      	ldr	r3, [r7, #16]
 8013690:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013692:	693b      	ldr	r3, [r7, #16]
 8013694:	899b      	ldrh	r3, [r3, #12]
 8013696:	4619      	mov	r1, r3
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	fbb3 f3f1 	udiv	r3, r3, r1
 801369e:	4413      	add	r3, r2
 80136a0:	4619      	mov	r1, r3
 80136a2:	6938      	ldr	r0, [r7, #16]
 80136a4:	f7ff feec 	bl	8013480 <move_window>
 80136a8:	4603      	mov	r3, r0
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d16f      	bne.n	801378e <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80136ae:	693b      	ldr	r3, [r7, #16]
 80136b0:	899b      	ldrh	r3, [r3, #12]
 80136b2:	461a      	mov	r2, r3
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80136ba:	fb01 f202 	mul.w	r2, r1, r2
 80136be:	1a9b      	subs	r3, r3, r2
 80136c0:	693a      	ldr	r2, [r7, #16]
 80136c2:	4413      	add	r3, r2
 80136c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80136c8:	021b      	lsls	r3, r3, #8
 80136ca:	461a      	mov	r2, r3
 80136cc:	68bb      	ldr	r3, [r7, #8]
 80136ce:	4313      	orrs	r3, r2
 80136d0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80136d2:	683b      	ldr	r3, [r7, #0]
 80136d4:	f003 0301 	and.w	r3, r3, #1
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d002      	beq.n	80136e2 <get_fat+0xe8>
 80136dc:	68bb      	ldr	r3, [r7, #8]
 80136de:	091b      	lsrs	r3, r3, #4
 80136e0:	e002      	b.n	80136e8 <get_fat+0xee>
 80136e2:	68bb      	ldr	r3, [r7, #8]
 80136e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80136e8:	617b      	str	r3, [r7, #20]
			break;
 80136ea:	e055      	b.n	8013798 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80136ec:	693b      	ldr	r3, [r7, #16]
 80136ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80136f0:	693b      	ldr	r3, [r7, #16]
 80136f2:	899b      	ldrh	r3, [r3, #12]
 80136f4:	085b      	lsrs	r3, r3, #1
 80136f6:	b29b      	uxth	r3, r3
 80136f8:	4619      	mov	r1, r3
 80136fa:	683b      	ldr	r3, [r7, #0]
 80136fc:	fbb3 f3f1 	udiv	r3, r3, r1
 8013700:	4413      	add	r3, r2
 8013702:	4619      	mov	r1, r3
 8013704:	6938      	ldr	r0, [r7, #16]
 8013706:	f7ff febb 	bl	8013480 <move_window>
 801370a:	4603      	mov	r3, r0
 801370c:	2b00      	cmp	r3, #0
 801370e:	d140      	bne.n	8013792 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8013710:	693b      	ldr	r3, [r7, #16]
 8013712:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013716:	683b      	ldr	r3, [r7, #0]
 8013718:	005b      	lsls	r3, r3, #1
 801371a:	693a      	ldr	r2, [r7, #16]
 801371c:	8992      	ldrh	r2, [r2, #12]
 801371e:	fbb3 f0f2 	udiv	r0, r3, r2
 8013722:	fb00 f202 	mul.w	r2, r0, r2
 8013726:	1a9b      	subs	r3, r3, r2
 8013728:	440b      	add	r3, r1
 801372a:	4618      	mov	r0, r3
 801372c:	f7ff fc34 	bl	8012f98 <ld_word>
 8013730:	4603      	mov	r3, r0
 8013732:	617b      	str	r3, [r7, #20]
			break;
 8013734:	e030      	b.n	8013798 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013736:	693b      	ldr	r3, [r7, #16]
 8013738:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801373a:	693b      	ldr	r3, [r7, #16]
 801373c:	899b      	ldrh	r3, [r3, #12]
 801373e:	089b      	lsrs	r3, r3, #2
 8013740:	b29b      	uxth	r3, r3
 8013742:	4619      	mov	r1, r3
 8013744:	683b      	ldr	r3, [r7, #0]
 8013746:	fbb3 f3f1 	udiv	r3, r3, r1
 801374a:	4413      	add	r3, r2
 801374c:	4619      	mov	r1, r3
 801374e:	6938      	ldr	r0, [r7, #16]
 8013750:	f7ff fe96 	bl	8013480 <move_window>
 8013754:	4603      	mov	r3, r0
 8013756:	2b00      	cmp	r3, #0
 8013758:	d11d      	bne.n	8013796 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801375a:	693b      	ldr	r3, [r7, #16]
 801375c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013760:	683b      	ldr	r3, [r7, #0]
 8013762:	009b      	lsls	r3, r3, #2
 8013764:	693a      	ldr	r2, [r7, #16]
 8013766:	8992      	ldrh	r2, [r2, #12]
 8013768:	fbb3 f0f2 	udiv	r0, r3, r2
 801376c:	fb00 f202 	mul.w	r2, r0, r2
 8013770:	1a9b      	subs	r3, r3, r2
 8013772:	440b      	add	r3, r1
 8013774:	4618      	mov	r0, r3
 8013776:	f7ff fc27 	bl	8012fc8 <ld_dword>
 801377a:	4603      	mov	r3, r0
 801377c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8013780:	617b      	str	r3, [r7, #20]
			break;
 8013782:	e009      	b.n	8013798 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8013784:	2301      	movs	r3, #1
 8013786:	617b      	str	r3, [r7, #20]
 8013788:	e006      	b.n	8013798 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801378a:	bf00      	nop
 801378c:	e004      	b.n	8013798 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801378e:	bf00      	nop
 8013790:	e002      	b.n	8013798 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013792:	bf00      	nop
 8013794:	e000      	b.n	8013798 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013796:	bf00      	nop
		}
	}

	return val;
 8013798:	697b      	ldr	r3, [r7, #20]
}
 801379a:	4618      	mov	r0, r3
 801379c:	3718      	adds	r7, #24
 801379e:	46bd      	mov	sp, r7
 80137a0:	bd80      	pop	{r7, pc}

080137a2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80137a2:	b590      	push	{r4, r7, lr}
 80137a4:	b089      	sub	sp, #36	; 0x24
 80137a6:	af00      	add	r7, sp, #0
 80137a8:	60f8      	str	r0, [r7, #12]
 80137aa:	60b9      	str	r1, [r7, #8]
 80137ac:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80137ae:	2302      	movs	r3, #2
 80137b0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80137b2:	68bb      	ldr	r3, [r7, #8]
 80137b4:	2b01      	cmp	r3, #1
 80137b6:	f240 8102 	bls.w	80139be <put_fat+0x21c>
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	69db      	ldr	r3, [r3, #28]
 80137be:	68ba      	ldr	r2, [r7, #8]
 80137c0:	429a      	cmp	r2, r3
 80137c2:	f080 80fc 	bcs.w	80139be <put_fat+0x21c>
		switch (fs->fs_type) {
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	781b      	ldrb	r3, [r3, #0]
 80137ca:	2b03      	cmp	r3, #3
 80137cc:	f000 80b6 	beq.w	801393c <put_fat+0x19a>
 80137d0:	2b03      	cmp	r3, #3
 80137d2:	f300 80fd 	bgt.w	80139d0 <put_fat+0x22e>
 80137d6:	2b01      	cmp	r3, #1
 80137d8:	d003      	beq.n	80137e2 <put_fat+0x40>
 80137da:	2b02      	cmp	r3, #2
 80137dc:	f000 8083 	beq.w	80138e6 <put_fat+0x144>
 80137e0:	e0f6      	b.n	80139d0 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80137e2:	68bb      	ldr	r3, [r7, #8]
 80137e4:	61bb      	str	r3, [r7, #24]
 80137e6:	69bb      	ldr	r3, [r7, #24]
 80137e8:	085b      	lsrs	r3, r3, #1
 80137ea:	69ba      	ldr	r2, [r7, #24]
 80137ec:	4413      	add	r3, r2
 80137ee:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80137f4:	68fb      	ldr	r3, [r7, #12]
 80137f6:	899b      	ldrh	r3, [r3, #12]
 80137f8:	4619      	mov	r1, r3
 80137fa:	69bb      	ldr	r3, [r7, #24]
 80137fc:	fbb3 f3f1 	udiv	r3, r3, r1
 8013800:	4413      	add	r3, r2
 8013802:	4619      	mov	r1, r3
 8013804:	68f8      	ldr	r0, [r7, #12]
 8013806:	f7ff fe3b 	bl	8013480 <move_window>
 801380a:	4603      	mov	r3, r0
 801380c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801380e:	7ffb      	ldrb	r3, [r7, #31]
 8013810:	2b00      	cmp	r3, #0
 8013812:	f040 80d6 	bne.w	80139c2 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801381c:	69bb      	ldr	r3, [r7, #24]
 801381e:	1c5a      	adds	r2, r3, #1
 8013820:	61ba      	str	r2, [r7, #24]
 8013822:	68fa      	ldr	r2, [r7, #12]
 8013824:	8992      	ldrh	r2, [r2, #12]
 8013826:	fbb3 f0f2 	udiv	r0, r3, r2
 801382a:	fb00 f202 	mul.w	r2, r0, r2
 801382e:	1a9b      	subs	r3, r3, r2
 8013830:	440b      	add	r3, r1
 8013832:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8013834:	68bb      	ldr	r3, [r7, #8]
 8013836:	f003 0301 	and.w	r3, r3, #1
 801383a:	2b00      	cmp	r3, #0
 801383c:	d00d      	beq.n	801385a <put_fat+0xb8>
 801383e:	697b      	ldr	r3, [r7, #20]
 8013840:	781b      	ldrb	r3, [r3, #0]
 8013842:	b25b      	sxtb	r3, r3
 8013844:	f003 030f 	and.w	r3, r3, #15
 8013848:	b25a      	sxtb	r2, r3
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	b2db      	uxtb	r3, r3
 801384e:	011b      	lsls	r3, r3, #4
 8013850:	b25b      	sxtb	r3, r3
 8013852:	4313      	orrs	r3, r2
 8013854:	b25b      	sxtb	r3, r3
 8013856:	b2db      	uxtb	r3, r3
 8013858:	e001      	b.n	801385e <put_fat+0xbc>
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	b2db      	uxtb	r3, r3
 801385e:	697a      	ldr	r2, [r7, #20]
 8013860:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	2201      	movs	r2, #1
 8013866:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801386c:	68fb      	ldr	r3, [r7, #12]
 801386e:	899b      	ldrh	r3, [r3, #12]
 8013870:	4619      	mov	r1, r3
 8013872:	69bb      	ldr	r3, [r7, #24]
 8013874:	fbb3 f3f1 	udiv	r3, r3, r1
 8013878:	4413      	add	r3, r2
 801387a:	4619      	mov	r1, r3
 801387c:	68f8      	ldr	r0, [r7, #12]
 801387e:	f7ff fdff 	bl	8013480 <move_window>
 8013882:	4603      	mov	r3, r0
 8013884:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013886:	7ffb      	ldrb	r3, [r7, #31]
 8013888:	2b00      	cmp	r3, #0
 801388a:	f040 809c 	bne.w	80139c6 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	899b      	ldrh	r3, [r3, #12]
 8013898:	461a      	mov	r2, r3
 801389a:	69bb      	ldr	r3, [r7, #24]
 801389c:	fbb3 f0f2 	udiv	r0, r3, r2
 80138a0:	fb00 f202 	mul.w	r2, r0, r2
 80138a4:	1a9b      	subs	r3, r3, r2
 80138a6:	440b      	add	r3, r1
 80138a8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80138aa:	68bb      	ldr	r3, [r7, #8]
 80138ac:	f003 0301 	and.w	r3, r3, #1
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d003      	beq.n	80138bc <put_fat+0x11a>
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	091b      	lsrs	r3, r3, #4
 80138b8:	b2db      	uxtb	r3, r3
 80138ba:	e00e      	b.n	80138da <put_fat+0x138>
 80138bc:	697b      	ldr	r3, [r7, #20]
 80138be:	781b      	ldrb	r3, [r3, #0]
 80138c0:	b25b      	sxtb	r3, r3
 80138c2:	f023 030f 	bic.w	r3, r3, #15
 80138c6:	b25a      	sxtb	r2, r3
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	0a1b      	lsrs	r3, r3, #8
 80138cc:	b25b      	sxtb	r3, r3
 80138ce:	f003 030f 	and.w	r3, r3, #15
 80138d2:	b25b      	sxtb	r3, r3
 80138d4:	4313      	orrs	r3, r2
 80138d6:	b25b      	sxtb	r3, r3
 80138d8:	b2db      	uxtb	r3, r3
 80138da:	697a      	ldr	r2, [r7, #20]
 80138dc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	2201      	movs	r2, #1
 80138e2:	70da      	strb	r2, [r3, #3]
			break;
 80138e4:	e074      	b.n	80139d0 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	899b      	ldrh	r3, [r3, #12]
 80138ee:	085b      	lsrs	r3, r3, #1
 80138f0:	b29b      	uxth	r3, r3
 80138f2:	4619      	mov	r1, r3
 80138f4:	68bb      	ldr	r3, [r7, #8]
 80138f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80138fa:	4413      	add	r3, r2
 80138fc:	4619      	mov	r1, r3
 80138fe:	68f8      	ldr	r0, [r7, #12]
 8013900:	f7ff fdbe 	bl	8013480 <move_window>
 8013904:	4603      	mov	r3, r0
 8013906:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013908:	7ffb      	ldrb	r3, [r7, #31]
 801390a:	2b00      	cmp	r3, #0
 801390c:	d15d      	bne.n	80139ca <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013914:	68bb      	ldr	r3, [r7, #8]
 8013916:	005b      	lsls	r3, r3, #1
 8013918:	68fa      	ldr	r2, [r7, #12]
 801391a:	8992      	ldrh	r2, [r2, #12]
 801391c:	fbb3 f0f2 	udiv	r0, r3, r2
 8013920:	fb00 f202 	mul.w	r2, r0, r2
 8013924:	1a9b      	subs	r3, r3, r2
 8013926:	440b      	add	r3, r1
 8013928:	687a      	ldr	r2, [r7, #4]
 801392a:	b292      	uxth	r2, r2
 801392c:	4611      	mov	r1, r2
 801392e:	4618      	mov	r0, r3
 8013930:	f7ff fb6d 	bl	801300e <st_word>
			fs->wflag = 1;
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	2201      	movs	r2, #1
 8013938:	70da      	strb	r2, [r3, #3]
			break;
 801393a:	e049      	b.n	80139d0 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801393c:	68fb      	ldr	r3, [r7, #12]
 801393e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	899b      	ldrh	r3, [r3, #12]
 8013944:	089b      	lsrs	r3, r3, #2
 8013946:	b29b      	uxth	r3, r3
 8013948:	4619      	mov	r1, r3
 801394a:	68bb      	ldr	r3, [r7, #8]
 801394c:	fbb3 f3f1 	udiv	r3, r3, r1
 8013950:	4413      	add	r3, r2
 8013952:	4619      	mov	r1, r3
 8013954:	68f8      	ldr	r0, [r7, #12]
 8013956:	f7ff fd93 	bl	8013480 <move_window>
 801395a:	4603      	mov	r3, r0
 801395c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801395e:	7ffb      	ldrb	r3, [r7, #31]
 8013960:	2b00      	cmp	r3, #0
 8013962:	d134      	bne.n	80139ce <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801396a:	68fb      	ldr	r3, [r7, #12]
 801396c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013970:	68bb      	ldr	r3, [r7, #8]
 8013972:	009b      	lsls	r3, r3, #2
 8013974:	68fa      	ldr	r2, [r7, #12]
 8013976:	8992      	ldrh	r2, [r2, #12]
 8013978:	fbb3 f0f2 	udiv	r0, r3, r2
 801397c:	fb00 f202 	mul.w	r2, r0, r2
 8013980:	1a9b      	subs	r3, r3, r2
 8013982:	440b      	add	r3, r1
 8013984:	4618      	mov	r0, r3
 8013986:	f7ff fb1f 	bl	8012fc8 <ld_dword>
 801398a:	4603      	mov	r3, r0
 801398c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8013990:	4323      	orrs	r3, r4
 8013992:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801399a:	68bb      	ldr	r3, [r7, #8]
 801399c:	009b      	lsls	r3, r3, #2
 801399e:	68fa      	ldr	r2, [r7, #12]
 80139a0:	8992      	ldrh	r2, [r2, #12]
 80139a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80139a6:	fb00 f202 	mul.w	r2, r0, r2
 80139aa:	1a9b      	subs	r3, r3, r2
 80139ac:	440b      	add	r3, r1
 80139ae:	6879      	ldr	r1, [r7, #4]
 80139b0:	4618      	mov	r0, r3
 80139b2:	f7ff fb47 	bl	8013044 <st_dword>
			fs->wflag = 1;
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	2201      	movs	r2, #1
 80139ba:	70da      	strb	r2, [r3, #3]
			break;
 80139bc:	e008      	b.n	80139d0 <put_fat+0x22e>
		}
	}
 80139be:	bf00      	nop
 80139c0:	e006      	b.n	80139d0 <put_fat+0x22e>
			if (res != FR_OK) break;
 80139c2:	bf00      	nop
 80139c4:	e004      	b.n	80139d0 <put_fat+0x22e>
			if (res != FR_OK) break;
 80139c6:	bf00      	nop
 80139c8:	e002      	b.n	80139d0 <put_fat+0x22e>
			if (res != FR_OK) break;
 80139ca:	bf00      	nop
 80139cc:	e000      	b.n	80139d0 <put_fat+0x22e>
			if (res != FR_OK) break;
 80139ce:	bf00      	nop
	return res;
 80139d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80139d2:	4618      	mov	r0, r3
 80139d4:	3724      	adds	r7, #36	; 0x24
 80139d6:	46bd      	mov	sp, r7
 80139d8:	bd90      	pop	{r4, r7, pc}

080139da <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80139da:	b580      	push	{r7, lr}
 80139dc:	b088      	sub	sp, #32
 80139de:	af00      	add	r7, sp, #0
 80139e0:	60f8      	str	r0, [r7, #12]
 80139e2:	60b9      	str	r1, [r7, #8]
 80139e4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80139e6:	2300      	movs	r3, #0
 80139e8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80139f0:	68bb      	ldr	r3, [r7, #8]
 80139f2:	2b01      	cmp	r3, #1
 80139f4:	d904      	bls.n	8013a00 <remove_chain+0x26>
 80139f6:	69bb      	ldr	r3, [r7, #24]
 80139f8:	69db      	ldr	r3, [r3, #28]
 80139fa:	68ba      	ldr	r2, [r7, #8]
 80139fc:	429a      	cmp	r2, r3
 80139fe:	d301      	bcc.n	8013a04 <remove_chain+0x2a>
 8013a00:	2302      	movs	r3, #2
 8013a02:	e04b      	b.n	8013a9c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d00c      	beq.n	8013a24 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8013a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8013a0e:	6879      	ldr	r1, [r7, #4]
 8013a10:	69b8      	ldr	r0, [r7, #24]
 8013a12:	f7ff fec6 	bl	80137a2 <put_fat>
 8013a16:	4603      	mov	r3, r0
 8013a18:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8013a1a:	7ffb      	ldrb	r3, [r7, #31]
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d001      	beq.n	8013a24 <remove_chain+0x4a>
 8013a20:	7ffb      	ldrb	r3, [r7, #31]
 8013a22:	e03b      	b.n	8013a9c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8013a24:	68b9      	ldr	r1, [r7, #8]
 8013a26:	68f8      	ldr	r0, [r7, #12]
 8013a28:	f7ff fde7 	bl	80135fa <get_fat>
 8013a2c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8013a2e:	697b      	ldr	r3, [r7, #20]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d031      	beq.n	8013a98 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8013a34:	697b      	ldr	r3, [r7, #20]
 8013a36:	2b01      	cmp	r3, #1
 8013a38:	d101      	bne.n	8013a3e <remove_chain+0x64>
 8013a3a:	2302      	movs	r3, #2
 8013a3c:	e02e      	b.n	8013a9c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8013a3e:	697b      	ldr	r3, [r7, #20]
 8013a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a44:	d101      	bne.n	8013a4a <remove_chain+0x70>
 8013a46:	2301      	movs	r3, #1
 8013a48:	e028      	b.n	8013a9c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8013a4a:	2200      	movs	r2, #0
 8013a4c:	68b9      	ldr	r1, [r7, #8]
 8013a4e:	69b8      	ldr	r0, [r7, #24]
 8013a50:	f7ff fea7 	bl	80137a2 <put_fat>
 8013a54:	4603      	mov	r3, r0
 8013a56:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8013a58:	7ffb      	ldrb	r3, [r7, #31]
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d001      	beq.n	8013a62 <remove_chain+0x88>
 8013a5e:	7ffb      	ldrb	r3, [r7, #31]
 8013a60:	e01c      	b.n	8013a9c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8013a62:	69bb      	ldr	r3, [r7, #24]
 8013a64:	699a      	ldr	r2, [r3, #24]
 8013a66:	69bb      	ldr	r3, [r7, #24]
 8013a68:	69db      	ldr	r3, [r3, #28]
 8013a6a:	3b02      	subs	r3, #2
 8013a6c:	429a      	cmp	r2, r3
 8013a6e:	d20b      	bcs.n	8013a88 <remove_chain+0xae>
			fs->free_clst++;
 8013a70:	69bb      	ldr	r3, [r7, #24]
 8013a72:	699b      	ldr	r3, [r3, #24]
 8013a74:	1c5a      	adds	r2, r3, #1
 8013a76:	69bb      	ldr	r3, [r7, #24]
 8013a78:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8013a7a:	69bb      	ldr	r3, [r7, #24]
 8013a7c:	791b      	ldrb	r3, [r3, #4]
 8013a7e:	f043 0301 	orr.w	r3, r3, #1
 8013a82:	b2da      	uxtb	r2, r3
 8013a84:	69bb      	ldr	r3, [r7, #24]
 8013a86:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8013a88:	697b      	ldr	r3, [r7, #20]
 8013a8a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8013a8c:	69bb      	ldr	r3, [r7, #24]
 8013a8e:	69db      	ldr	r3, [r3, #28]
 8013a90:	68ba      	ldr	r2, [r7, #8]
 8013a92:	429a      	cmp	r2, r3
 8013a94:	d3c6      	bcc.n	8013a24 <remove_chain+0x4a>
 8013a96:	e000      	b.n	8013a9a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8013a98:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8013a9a:	2300      	movs	r3, #0
}
 8013a9c:	4618      	mov	r0, r3
 8013a9e:	3720      	adds	r7, #32
 8013aa0:	46bd      	mov	sp, r7
 8013aa2:	bd80      	pop	{r7, pc}

08013aa4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8013aa4:	b580      	push	{r7, lr}
 8013aa6:	b088      	sub	sp, #32
 8013aa8:	af00      	add	r7, sp, #0
 8013aaa:	6078      	str	r0, [r7, #4]
 8013aac:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8013ab4:	683b      	ldr	r3, [r7, #0]
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d10d      	bne.n	8013ad6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8013aba:	693b      	ldr	r3, [r7, #16]
 8013abc:	695b      	ldr	r3, [r3, #20]
 8013abe:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8013ac0:	69bb      	ldr	r3, [r7, #24]
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d004      	beq.n	8013ad0 <create_chain+0x2c>
 8013ac6:	693b      	ldr	r3, [r7, #16]
 8013ac8:	69db      	ldr	r3, [r3, #28]
 8013aca:	69ba      	ldr	r2, [r7, #24]
 8013acc:	429a      	cmp	r2, r3
 8013ace:	d31b      	bcc.n	8013b08 <create_chain+0x64>
 8013ad0:	2301      	movs	r3, #1
 8013ad2:	61bb      	str	r3, [r7, #24]
 8013ad4:	e018      	b.n	8013b08 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8013ad6:	6839      	ldr	r1, [r7, #0]
 8013ad8:	6878      	ldr	r0, [r7, #4]
 8013ada:	f7ff fd8e 	bl	80135fa <get_fat>
 8013ade:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	2b01      	cmp	r3, #1
 8013ae4:	d801      	bhi.n	8013aea <create_chain+0x46>
 8013ae6:	2301      	movs	r3, #1
 8013ae8:	e070      	b.n	8013bcc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013af0:	d101      	bne.n	8013af6 <create_chain+0x52>
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	e06a      	b.n	8013bcc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8013af6:	693b      	ldr	r3, [r7, #16]
 8013af8:	69db      	ldr	r3, [r3, #28]
 8013afa:	68fa      	ldr	r2, [r7, #12]
 8013afc:	429a      	cmp	r2, r3
 8013afe:	d201      	bcs.n	8013b04 <create_chain+0x60>
 8013b00:	68fb      	ldr	r3, [r7, #12]
 8013b02:	e063      	b.n	8013bcc <create_chain+0x128>
		scl = clst;
 8013b04:	683b      	ldr	r3, [r7, #0]
 8013b06:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8013b08:	69bb      	ldr	r3, [r7, #24]
 8013b0a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8013b0c:	69fb      	ldr	r3, [r7, #28]
 8013b0e:	3301      	adds	r3, #1
 8013b10:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8013b12:	693b      	ldr	r3, [r7, #16]
 8013b14:	69db      	ldr	r3, [r3, #28]
 8013b16:	69fa      	ldr	r2, [r7, #28]
 8013b18:	429a      	cmp	r2, r3
 8013b1a:	d307      	bcc.n	8013b2c <create_chain+0x88>
				ncl = 2;
 8013b1c:	2302      	movs	r3, #2
 8013b1e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8013b20:	69fa      	ldr	r2, [r7, #28]
 8013b22:	69bb      	ldr	r3, [r7, #24]
 8013b24:	429a      	cmp	r2, r3
 8013b26:	d901      	bls.n	8013b2c <create_chain+0x88>
 8013b28:	2300      	movs	r3, #0
 8013b2a:	e04f      	b.n	8013bcc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8013b2c:	69f9      	ldr	r1, [r7, #28]
 8013b2e:	6878      	ldr	r0, [r7, #4]
 8013b30:	f7ff fd63 	bl	80135fa <get_fat>
 8013b34:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d00e      	beq.n	8013b5a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	2b01      	cmp	r3, #1
 8013b40:	d003      	beq.n	8013b4a <create_chain+0xa6>
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b48:	d101      	bne.n	8013b4e <create_chain+0xaa>
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	e03e      	b.n	8013bcc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8013b4e:	69fa      	ldr	r2, [r7, #28]
 8013b50:	69bb      	ldr	r3, [r7, #24]
 8013b52:	429a      	cmp	r2, r3
 8013b54:	d1da      	bne.n	8013b0c <create_chain+0x68>
 8013b56:	2300      	movs	r3, #0
 8013b58:	e038      	b.n	8013bcc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8013b5a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8013b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8013b60:	69f9      	ldr	r1, [r7, #28]
 8013b62:	6938      	ldr	r0, [r7, #16]
 8013b64:	f7ff fe1d 	bl	80137a2 <put_fat>
 8013b68:	4603      	mov	r3, r0
 8013b6a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8013b6c:	7dfb      	ldrb	r3, [r7, #23]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d109      	bne.n	8013b86 <create_chain+0xe2>
 8013b72:	683b      	ldr	r3, [r7, #0]
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d006      	beq.n	8013b86 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8013b78:	69fa      	ldr	r2, [r7, #28]
 8013b7a:	6839      	ldr	r1, [r7, #0]
 8013b7c:	6938      	ldr	r0, [r7, #16]
 8013b7e:	f7ff fe10 	bl	80137a2 <put_fat>
 8013b82:	4603      	mov	r3, r0
 8013b84:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8013b86:	7dfb      	ldrb	r3, [r7, #23]
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d116      	bne.n	8013bba <create_chain+0x116>
		fs->last_clst = ncl;
 8013b8c:	693b      	ldr	r3, [r7, #16]
 8013b8e:	69fa      	ldr	r2, [r7, #28]
 8013b90:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8013b92:	693b      	ldr	r3, [r7, #16]
 8013b94:	699a      	ldr	r2, [r3, #24]
 8013b96:	693b      	ldr	r3, [r7, #16]
 8013b98:	69db      	ldr	r3, [r3, #28]
 8013b9a:	3b02      	subs	r3, #2
 8013b9c:	429a      	cmp	r2, r3
 8013b9e:	d804      	bhi.n	8013baa <create_chain+0x106>
 8013ba0:	693b      	ldr	r3, [r7, #16]
 8013ba2:	699b      	ldr	r3, [r3, #24]
 8013ba4:	1e5a      	subs	r2, r3, #1
 8013ba6:	693b      	ldr	r3, [r7, #16]
 8013ba8:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8013baa:	693b      	ldr	r3, [r7, #16]
 8013bac:	791b      	ldrb	r3, [r3, #4]
 8013bae:	f043 0301 	orr.w	r3, r3, #1
 8013bb2:	b2da      	uxtb	r2, r3
 8013bb4:	693b      	ldr	r3, [r7, #16]
 8013bb6:	711a      	strb	r2, [r3, #4]
 8013bb8:	e007      	b.n	8013bca <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8013bba:	7dfb      	ldrb	r3, [r7, #23]
 8013bbc:	2b01      	cmp	r3, #1
 8013bbe:	d102      	bne.n	8013bc6 <create_chain+0x122>
 8013bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8013bc4:	e000      	b.n	8013bc8 <create_chain+0x124>
 8013bc6:	2301      	movs	r3, #1
 8013bc8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8013bca:	69fb      	ldr	r3, [r7, #28]
}
 8013bcc:	4618      	mov	r0, r3
 8013bce:	3720      	adds	r7, #32
 8013bd0:	46bd      	mov	sp, r7
 8013bd2:	bd80      	pop	{r7, pc}

08013bd4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8013bd4:	b480      	push	{r7}
 8013bd6:	b087      	sub	sp, #28
 8013bd8:	af00      	add	r7, sp, #0
 8013bda:	6078      	str	r0, [r7, #4]
 8013bdc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013be8:	3304      	adds	r3, #4
 8013bea:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	899b      	ldrh	r3, [r3, #12]
 8013bf0:	461a      	mov	r2, r3
 8013bf2:	683b      	ldr	r3, [r7, #0]
 8013bf4:	fbb3 f3f2 	udiv	r3, r3, r2
 8013bf8:	68fa      	ldr	r2, [r7, #12]
 8013bfa:	8952      	ldrh	r2, [r2, #10]
 8013bfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8013c00:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013c02:	693b      	ldr	r3, [r7, #16]
 8013c04:	1d1a      	adds	r2, r3, #4
 8013c06:	613a      	str	r2, [r7, #16]
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8013c0c:	68bb      	ldr	r3, [r7, #8]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d101      	bne.n	8013c16 <clmt_clust+0x42>
 8013c12:	2300      	movs	r3, #0
 8013c14:	e010      	b.n	8013c38 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8013c16:	697a      	ldr	r2, [r7, #20]
 8013c18:	68bb      	ldr	r3, [r7, #8]
 8013c1a:	429a      	cmp	r2, r3
 8013c1c:	d307      	bcc.n	8013c2e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8013c1e:	697a      	ldr	r2, [r7, #20]
 8013c20:	68bb      	ldr	r3, [r7, #8]
 8013c22:	1ad3      	subs	r3, r2, r3
 8013c24:	617b      	str	r3, [r7, #20]
 8013c26:	693b      	ldr	r3, [r7, #16]
 8013c28:	3304      	adds	r3, #4
 8013c2a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013c2c:	e7e9      	b.n	8013c02 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8013c2e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8013c30:	693b      	ldr	r3, [r7, #16]
 8013c32:	681a      	ldr	r2, [r3, #0]
 8013c34:	697b      	ldr	r3, [r7, #20]
 8013c36:	4413      	add	r3, r2
}
 8013c38:	4618      	mov	r0, r3
 8013c3a:	371c      	adds	r7, #28
 8013c3c:	46bd      	mov	sp, r7
 8013c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c42:	4770      	bx	lr

08013c44 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8013c44:	b580      	push	{r7, lr}
 8013c46:	b086      	sub	sp, #24
 8013c48:	af00      	add	r7, sp, #0
 8013c4a:	6078      	str	r0, [r7, #4]
 8013c4c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	681b      	ldr	r3, [r3, #0]
 8013c52:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8013c54:	683b      	ldr	r3, [r7, #0]
 8013c56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013c5a:	d204      	bcs.n	8013c66 <dir_sdi+0x22>
 8013c5c:	683b      	ldr	r3, [r7, #0]
 8013c5e:	f003 031f 	and.w	r3, r3, #31
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d001      	beq.n	8013c6a <dir_sdi+0x26>
		return FR_INT_ERR;
 8013c66:	2302      	movs	r3, #2
 8013c68:	e071      	b.n	8013d4e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	683a      	ldr	r2, [r7, #0]
 8013c6e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	689b      	ldr	r3, [r3, #8]
 8013c74:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8013c76:	697b      	ldr	r3, [r7, #20]
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d106      	bne.n	8013c8a <dir_sdi+0x46>
 8013c7c:	693b      	ldr	r3, [r7, #16]
 8013c7e:	781b      	ldrb	r3, [r3, #0]
 8013c80:	2b02      	cmp	r3, #2
 8013c82:	d902      	bls.n	8013c8a <dir_sdi+0x46>
		clst = fs->dirbase;
 8013c84:	693b      	ldr	r3, [r7, #16]
 8013c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c88:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8013c8a:	697b      	ldr	r3, [r7, #20]
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d10c      	bne.n	8013caa <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8013c90:	683b      	ldr	r3, [r7, #0]
 8013c92:	095b      	lsrs	r3, r3, #5
 8013c94:	693a      	ldr	r2, [r7, #16]
 8013c96:	8912      	ldrh	r2, [r2, #8]
 8013c98:	4293      	cmp	r3, r2
 8013c9a:	d301      	bcc.n	8013ca0 <dir_sdi+0x5c>
 8013c9c:	2302      	movs	r3, #2
 8013c9e:	e056      	b.n	8013d4e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8013ca0:	693b      	ldr	r3, [r7, #16]
 8013ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	61da      	str	r2, [r3, #28]
 8013ca8:	e02d      	b.n	8013d06 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8013caa:	693b      	ldr	r3, [r7, #16]
 8013cac:	895b      	ldrh	r3, [r3, #10]
 8013cae:	461a      	mov	r2, r3
 8013cb0:	693b      	ldr	r3, [r7, #16]
 8013cb2:	899b      	ldrh	r3, [r3, #12]
 8013cb4:	fb02 f303 	mul.w	r3, r2, r3
 8013cb8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013cba:	e019      	b.n	8013cf0 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	6979      	ldr	r1, [r7, #20]
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	f7ff fc9a 	bl	80135fa <get_fat>
 8013cc6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013cc8:	697b      	ldr	r3, [r7, #20]
 8013cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013cce:	d101      	bne.n	8013cd4 <dir_sdi+0x90>
 8013cd0:	2301      	movs	r3, #1
 8013cd2:	e03c      	b.n	8013d4e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8013cd4:	697b      	ldr	r3, [r7, #20]
 8013cd6:	2b01      	cmp	r3, #1
 8013cd8:	d904      	bls.n	8013ce4 <dir_sdi+0xa0>
 8013cda:	693b      	ldr	r3, [r7, #16]
 8013cdc:	69db      	ldr	r3, [r3, #28]
 8013cde:	697a      	ldr	r2, [r7, #20]
 8013ce0:	429a      	cmp	r2, r3
 8013ce2:	d301      	bcc.n	8013ce8 <dir_sdi+0xa4>
 8013ce4:	2302      	movs	r3, #2
 8013ce6:	e032      	b.n	8013d4e <dir_sdi+0x10a>
			ofs -= csz;
 8013ce8:	683a      	ldr	r2, [r7, #0]
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	1ad3      	subs	r3, r2, r3
 8013cee:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013cf0:	683a      	ldr	r2, [r7, #0]
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	429a      	cmp	r2, r3
 8013cf6:	d2e1      	bcs.n	8013cbc <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8013cf8:	6979      	ldr	r1, [r7, #20]
 8013cfa:	6938      	ldr	r0, [r7, #16]
 8013cfc:	f7ff fc5e 	bl	80135bc <clust2sect>
 8013d00:	4602      	mov	r2, r0
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	697a      	ldr	r2, [r7, #20]
 8013d0a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	69db      	ldr	r3, [r3, #28]
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d101      	bne.n	8013d18 <dir_sdi+0xd4>
 8013d14:	2302      	movs	r3, #2
 8013d16:	e01a      	b.n	8013d4e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	69da      	ldr	r2, [r3, #28]
 8013d1c:	693b      	ldr	r3, [r7, #16]
 8013d1e:	899b      	ldrh	r3, [r3, #12]
 8013d20:	4619      	mov	r1, r3
 8013d22:	683b      	ldr	r3, [r7, #0]
 8013d24:	fbb3 f3f1 	udiv	r3, r3, r1
 8013d28:	441a      	add	r2, r3
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8013d2e:	693b      	ldr	r3, [r7, #16]
 8013d30:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013d34:	693b      	ldr	r3, [r7, #16]
 8013d36:	899b      	ldrh	r3, [r3, #12]
 8013d38:	461a      	mov	r2, r3
 8013d3a:	683b      	ldr	r3, [r7, #0]
 8013d3c:	fbb3 f0f2 	udiv	r0, r3, r2
 8013d40:	fb00 f202 	mul.w	r2, r0, r2
 8013d44:	1a9b      	subs	r3, r3, r2
 8013d46:	18ca      	adds	r2, r1, r3
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013d4c:	2300      	movs	r3, #0
}
 8013d4e:	4618      	mov	r0, r3
 8013d50:	3718      	adds	r7, #24
 8013d52:	46bd      	mov	sp, r7
 8013d54:	bd80      	pop	{r7, pc}

08013d56 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8013d56:	b580      	push	{r7, lr}
 8013d58:	b086      	sub	sp, #24
 8013d5a:	af00      	add	r7, sp, #0
 8013d5c:	6078      	str	r0, [r7, #4]
 8013d5e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	681b      	ldr	r3, [r3, #0]
 8013d64:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	695b      	ldr	r3, [r3, #20]
 8013d6a:	3320      	adds	r3, #32
 8013d6c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	69db      	ldr	r3, [r3, #28]
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d003      	beq.n	8013d7e <dir_next+0x28>
 8013d76:	68bb      	ldr	r3, [r7, #8]
 8013d78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013d7c:	d301      	bcc.n	8013d82 <dir_next+0x2c>
 8013d7e:	2304      	movs	r3, #4
 8013d80:	e0bb      	b.n	8013efa <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	899b      	ldrh	r3, [r3, #12]
 8013d86:	461a      	mov	r2, r3
 8013d88:	68bb      	ldr	r3, [r7, #8]
 8013d8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8013d8e:	fb01 f202 	mul.w	r2, r1, r2
 8013d92:	1a9b      	subs	r3, r3, r2
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	f040 809d 	bne.w	8013ed4 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	69db      	ldr	r3, [r3, #28]
 8013d9e:	1c5a      	adds	r2, r3, #1
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	699b      	ldr	r3, [r3, #24]
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d10b      	bne.n	8013dc4 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8013dac:	68bb      	ldr	r3, [r7, #8]
 8013dae:	095b      	lsrs	r3, r3, #5
 8013db0:	68fa      	ldr	r2, [r7, #12]
 8013db2:	8912      	ldrh	r2, [r2, #8]
 8013db4:	4293      	cmp	r3, r2
 8013db6:	f0c0 808d 	bcc.w	8013ed4 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	2200      	movs	r2, #0
 8013dbe:	61da      	str	r2, [r3, #28]
 8013dc0:	2304      	movs	r3, #4
 8013dc2:	e09a      	b.n	8013efa <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	899b      	ldrh	r3, [r3, #12]
 8013dc8:	461a      	mov	r2, r3
 8013dca:	68bb      	ldr	r3, [r7, #8]
 8013dcc:	fbb3 f3f2 	udiv	r3, r3, r2
 8013dd0:	68fa      	ldr	r2, [r7, #12]
 8013dd2:	8952      	ldrh	r2, [r2, #10]
 8013dd4:	3a01      	subs	r2, #1
 8013dd6:	4013      	ands	r3, r2
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d17b      	bne.n	8013ed4 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8013ddc:	687a      	ldr	r2, [r7, #4]
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	699b      	ldr	r3, [r3, #24]
 8013de2:	4619      	mov	r1, r3
 8013de4:	4610      	mov	r0, r2
 8013de6:	f7ff fc08 	bl	80135fa <get_fat>
 8013dea:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8013dec:	697b      	ldr	r3, [r7, #20]
 8013dee:	2b01      	cmp	r3, #1
 8013df0:	d801      	bhi.n	8013df6 <dir_next+0xa0>
 8013df2:	2302      	movs	r3, #2
 8013df4:	e081      	b.n	8013efa <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8013df6:	697b      	ldr	r3, [r7, #20]
 8013df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013dfc:	d101      	bne.n	8013e02 <dir_next+0xac>
 8013dfe:	2301      	movs	r3, #1
 8013e00:	e07b      	b.n	8013efa <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	69db      	ldr	r3, [r3, #28]
 8013e06:	697a      	ldr	r2, [r7, #20]
 8013e08:	429a      	cmp	r2, r3
 8013e0a:	d359      	bcc.n	8013ec0 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8013e0c:	683b      	ldr	r3, [r7, #0]
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d104      	bne.n	8013e1c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	2200      	movs	r2, #0
 8013e16:	61da      	str	r2, [r3, #28]
 8013e18:	2304      	movs	r3, #4
 8013e1a:	e06e      	b.n	8013efa <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8013e1c:	687a      	ldr	r2, [r7, #4]
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	699b      	ldr	r3, [r3, #24]
 8013e22:	4619      	mov	r1, r3
 8013e24:	4610      	mov	r0, r2
 8013e26:	f7ff fe3d 	bl	8013aa4 <create_chain>
 8013e2a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8013e2c:	697b      	ldr	r3, [r7, #20]
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d101      	bne.n	8013e36 <dir_next+0xe0>
 8013e32:	2307      	movs	r3, #7
 8013e34:	e061      	b.n	8013efa <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8013e36:	697b      	ldr	r3, [r7, #20]
 8013e38:	2b01      	cmp	r3, #1
 8013e3a:	d101      	bne.n	8013e40 <dir_next+0xea>
 8013e3c:	2302      	movs	r3, #2
 8013e3e:	e05c      	b.n	8013efa <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013e40:	697b      	ldr	r3, [r7, #20]
 8013e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e46:	d101      	bne.n	8013e4c <dir_next+0xf6>
 8013e48:	2301      	movs	r3, #1
 8013e4a:	e056      	b.n	8013efa <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8013e4c:	68f8      	ldr	r0, [r7, #12]
 8013e4e:	f7ff fad3 	bl	80133f8 <sync_window>
 8013e52:	4603      	mov	r3, r0
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d001      	beq.n	8013e5c <dir_next+0x106>
 8013e58:	2301      	movs	r3, #1
 8013e5a:	e04e      	b.n	8013efa <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8013e5c:	68fb      	ldr	r3, [r7, #12]
 8013e5e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	899b      	ldrh	r3, [r3, #12]
 8013e66:	461a      	mov	r2, r3
 8013e68:	2100      	movs	r1, #0
 8013e6a:	f7ff f938 	bl	80130de <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013e6e:	2300      	movs	r3, #0
 8013e70:	613b      	str	r3, [r7, #16]
 8013e72:	6979      	ldr	r1, [r7, #20]
 8013e74:	68f8      	ldr	r0, [r7, #12]
 8013e76:	f7ff fba1 	bl	80135bc <clust2sect>
 8013e7a:	4602      	mov	r2, r0
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	635a      	str	r2, [r3, #52]	; 0x34
 8013e80:	e012      	b.n	8013ea8 <dir_next+0x152>
						fs->wflag = 1;
 8013e82:	68fb      	ldr	r3, [r7, #12]
 8013e84:	2201      	movs	r2, #1
 8013e86:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8013e88:	68f8      	ldr	r0, [r7, #12]
 8013e8a:	f7ff fab5 	bl	80133f8 <sync_window>
 8013e8e:	4603      	mov	r3, r0
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d001      	beq.n	8013e98 <dir_next+0x142>
 8013e94:	2301      	movs	r3, #1
 8013e96:	e030      	b.n	8013efa <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013e98:	693b      	ldr	r3, [r7, #16]
 8013e9a:	3301      	adds	r3, #1
 8013e9c:	613b      	str	r3, [r7, #16]
 8013e9e:	68fb      	ldr	r3, [r7, #12]
 8013ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013ea2:	1c5a      	adds	r2, r3, #1
 8013ea4:	68fb      	ldr	r3, [r7, #12]
 8013ea6:	635a      	str	r2, [r3, #52]	; 0x34
 8013ea8:	68fb      	ldr	r3, [r7, #12]
 8013eaa:	895b      	ldrh	r3, [r3, #10]
 8013eac:	461a      	mov	r2, r3
 8013eae:	693b      	ldr	r3, [r7, #16]
 8013eb0:	4293      	cmp	r3, r2
 8013eb2:	d3e6      	bcc.n	8013e82 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013eb8:	693b      	ldr	r3, [r7, #16]
 8013eba:	1ad2      	subs	r2, r2, r3
 8013ebc:	68fb      	ldr	r3, [r7, #12]
 8013ebe:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	697a      	ldr	r2, [r7, #20]
 8013ec4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8013ec6:	6979      	ldr	r1, [r7, #20]
 8013ec8:	68f8      	ldr	r0, [r7, #12]
 8013eca:	f7ff fb77 	bl	80135bc <clust2sect>
 8013ece:	4602      	mov	r2, r0
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	68ba      	ldr	r2, [r7, #8]
 8013ed8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8013eda:	68fb      	ldr	r3, [r7, #12]
 8013edc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	899b      	ldrh	r3, [r3, #12]
 8013ee4:	461a      	mov	r2, r3
 8013ee6:	68bb      	ldr	r3, [r7, #8]
 8013ee8:	fbb3 f0f2 	udiv	r0, r3, r2
 8013eec:	fb00 f202 	mul.w	r2, r0, r2
 8013ef0:	1a9b      	subs	r3, r3, r2
 8013ef2:	18ca      	adds	r2, r1, r3
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013ef8:	2300      	movs	r3, #0
}
 8013efa:	4618      	mov	r0, r3
 8013efc:	3718      	adds	r7, #24
 8013efe:	46bd      	mov	sp, r7
 8013f00:	bd80      	pop	{r7, pc}

08013f02 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8013f02:	b580      	push	{r7, lr}
 8013f04:	b086      	sub	sp, #24
 8013f06:	af00      	add	r7, sp, #0
 8013f08:	6078      	str	r0, [r7, #4]
 8013f0a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	681b      	ldr	r3, [r3, #0]
 8013f10:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8013f12:	2100      	movs	r1, #0
 8013f14:	6878      	ldr	r0, [r7, #4]
 8013f16:	f7ff fe95 	bl	8013c44 <dir_sdi>
 8013f1a:	4603      	mov	r3, r0
 8013f1c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013f1e:	7dfb      	ldrb	r3, [r7, #23]
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d12b      	bne.n	8013f7c <dir_alloc+0x7a>
		n = 0;
 8013f24:	2300      	movs	r3, #0
 8013f26:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	69db      	ldr	r3, [r3, #28]
 8013f2c:	4619      	mov	r1, r3
 8013f2e:	68f8      	ldr	r0, [r7, #12]
 8013f30:	f7ff faa6 	bl	8013480 <move_window>
 8013f34:	4603      	mov	r3, r0
 8013f36:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013f38:	7dfb      	ldrb	r3, [r7, #23]
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d11d      	bne.n	8013f7a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	6a1b      	ldr	r3, [r3, #32]
 8013f42:	781b      	ldrb	r3, [r3, #0]
 8013f44:	2be5      	cmp	r3, #229	; 0xe5
 8013f46:	d004      	beq.n	8013f52 <dir_alloc+0x50>
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	6a1b      	ldr	r3, [r3, #32]
 8013f4c:	781b      	ldrb	r3, [r3, #0]
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d107      	bne.n	8013f62 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8013f52:	693b      	ldr	r3, [r7, #16]
 8013f54:	3301      	adds	r3, #1
 8013f56:	613b      	str	r3, [r7, #16]
 8013f58:	693a      	ldr	r2, [r7, #16]
 8013f5a:	683b      	ldr	r3, [r7, #0]
 8013f5c:	429a      	cmp	r2, r3
 8013f5e:	d102      	bne.n	8013f66 <dir_alloc+0x64>
 8013f60:	e00c      	b.n	8013f7c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8013f62:	2300      	movs	r3, #0
 8013f64:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8013f66:	2101      	movs	r1, #1
 8013f68:	6878      	ldr	r0, [r7, #4]
 8013f6a:	f7ff fef4 	bl	8013d56 <dir_next>
 8013f6e:	4603      	mov	r3, r0
 8013f70:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8013f72:	7dfb      	ldrb	r3, [r7, #23]
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d0d7      	beq.n	8013f28 <dir_alloc+0x26>
 8013f78:	e000      	b.n	8013f7c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8013f7a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8013f7c:	7dfb      	ldrb	r3, [r7, #23]
 8013f7e:	2b04      	cmp	r3, #4
 8013f80:	d101      	bne.n	8013f86 <dir_alloc+0x84>
 8013f82:	2307      	movs	r3, #7
 8013f84:	75fb      	strb	r3, [r7, #23]
	return res;
 8013f86:	7dfb      	ldrb	r3, [r7, #23]
}
 8013f88:	4618      	mov	r0, r3
 8013f8a:	3718      	adds	r7, #24
 8013f8c:	46bd      	mov	sp, r7
 8013f8e:	bd80      	pop	{r7, pc}

08013f90 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8013f90:	b580      	push	{r7, lr}
 8013f92:	b084      	sub	sp, #16
 8013f94:	af00      	add	r7, sp, #0
 8013f96:	6078      	str	r0, [r7, #4]
 8013f98:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8013f9a:	683b      	ldr	r3, [r7, #0]
 8013f9c:	331a      	adds	r3, #26
 8013f9e:	4618      	mov	r0, r3
 8013fa0:	f7fe fffa 	bl	8012f98 <ld_word>
 8013fa4:	4603      	mov	r3, r0
 8013fa6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	781b      	ldrb	r3, [r3, #0]
 8013fac:	2b03      	cmp	r3, #3
 8013fae:	d109      	bne.n	8013fc4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8013fb0:	683b      	ldr	r3, [r7, #0]
 8013fb2:	3314      	adds	r3, #20
 8013fb4:	4618      	mov	r0, r3
 8013fb6:	f7fe ffef 	bl	8012f98 <ld_word>
 8013fba:	4603      	mov	r3, r0
 8013fbc:	041b      	lsls	r3, r3, #16
 8013fbe:	68fa      	ldr	r2, [r7, #12]
 8013fc0:	4313      	orrs	r3, r2
 8013fc2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8013fc4:	68fb      	ldr	r3, [r7, #12]
}
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	3710      	adds	r7, #16
 8013fca:	46bd      	mov	sp, r7
 8013fcc:	bd80      	pop	{r7, pc}

08013fce <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8013fce:	b580      	push	{r7, lr}
 8013fd0:	b084      	sub	sp, #16
 8013fd2:	af00      	add	r7, sp, #0
 8013fd4:	60f8      	str	r0, [r7, #12]
 8013fd6:	60b9      	str	r1, [r7, #8]
 8013fd8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8013fda:	68bb      	ldr	r3, [r7, #8]
 8013fdc:	331a      	adds	r3, #26
 8013fde:	687a      	ldr	r2, [r7, #4]
 8013fe0:	b292      	uxth	r2, r2
 8013fe2:	4611      	mov	r1, r2
 8013fe4:	4618      	mov	r0, r3
 8013fe6:	f7ff f812 	bl	801300e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	781b      	ldrb	r3, [r3, #0]
 8013fee:	2b03      	cmp	r3, #3
 8013ff0:	d109      	bne.n	8014006 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8013ff2:	68bb      	ldr	r3, [r7, #8]
 8013ff4:	f103 0214 	add.w	r2, r3, #20
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	0c1b      	lsrs	r3, r3, #16
 8013ffc:	b29b      	uxth	r3, r3
 8013ffe:	4619      	mov	r1, r3
 8014000:	4610      	mov	r0, r2
 8014002:	f7ff f804 	bl	801300e <st_word>
	}
}
 8014006:	bf00      	nop
 8014008:	3710      	adds	r7, #16
 801400a:	46bd      	mov	sp, r7
 801400c:	bd80      	pop	{r7, pc}
	...

08014010 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8014010:	b590      	push	{r4, r7, lr}
 8014012:	b087      	sub	sp, #28
 8014014:	af00      	add	r7, sp, #0
 8014016:	6078      	str	r0, [r7, #4]
 8014018:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801401a:	683b      	ldr	r3, [r7, #0]
 801401c:	331a      	adds	r3, #26
 801401e:	4618      	mov	r0, r3
 8014020:	f7fe ffba 	bl	8012f98 <ld_word>
 8014024:	4603      	mov	r3, r0
 8014026:	2b00      	cmp	r3, #0
 8014028:	d001      	beq.n	801402e <cmp_lfn+0x1e>
 801402a:	2300      	movs	r3, #0
 801402c:	e059      	b.n	80140e2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801402e:	683b      	ldr	r3, [r7, #0]
 8014030:	781b      	ldrb	r3, [r3, #0]
 8014032:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014036:	1e5a      	subs	r2, r3, #1
 8014038:	4613      	mov	r3, r2
 801403a:	005b      	lsls	r3, r3, #1
 801403c:	4413      	add	r3, r2
 801403e:	009b      	lsls	r3, r3, #2
 8014040:	4413      	add	r3, r2
 8014042:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8014044:	2301      	movs	r3, #1
 8014046:	81fb      	strh	r3, [r7, #14]
 8014048:	2300      	movs	r3, #0
 801404a:	613b      	str	r3, [r7, #16]
 801404c:	e033      	b.n	80140b6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801404e:	4a27      	ldr	r2, [pc, #156]	; (80140ec <cmp_lfn+0xdc>)
 8014050:	693b      	ldr	r3, [r7, #16]
 8014052:	4413      	add	r3, r2
 8014054:	781b      	ldrb	r3, [r3, #0]
 8014056:	461a      	mov	r2, r3
 8014058:	683b      	ldr	r3, [r7, #0]
 801405a:	4413      	add	r3, r2
 801405c:	4618      	mov	r0, r3
 801405e:	f7fe ff9b 	bl	8012f98 <ld_word>
 8014062:	4603      	mov	r3, r0
 8014064:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8014066:	89fb      	ldrh	r3, [r7, #14]
 8014068:	2b00      	cmp	r3, #0
 801406a:	d01a      	beq.n	80140a2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801406c:	697b      	ldr	r3, [r7, #20]
 801406e:	2b27      	cmp	r3, #39	; 0x27
 8014070:	d812      	bhi.n	8014098 <cmp_lfn+0x88>
 8014072:	89bb      	ldrh	r3, [r7, #12]
 8014074:	4618      	mov	r0, r3
 8014076:	f001 fe63 	bl	8015d40 <ff_wtoupper>
 801407a:	4603      	mov	r3, r0
 801407c:	461c      	mov	r4, r3
 801407e:	697b      	ldr	r3, [r7, #20]
 8014080:	1c5a      	adds	r2, r3, #1
 8014082:	617a      	str	r2, [r7, #20]
 8014084:	005b      	lsls	r3, r3, #1
 8014086:	687a      	ldr	r2, [r7, #4]
 8014088:	4413      	add	r3, r2
 801408a:	881b      	ldrh	r3, [r3, #0]
 801408c:	4618      	mov	r0, r3
 801408e:	f001 fe57 	bl	8015d40 <ff_wtoupper>
 8014092:	4603      	mov	r3, r0
 8014094:	429c      	cmp	r4, r3
 8014096:	d001      	beq.n	801409c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8014098:	2300      	movs	r3, #0
 801409a:	e022      	b.n	80140e2 <cmp_lfn+0xd2>
			}
			wc = uc;
 801409c:	89bb      	ldrh	r3, [r7, #12]
 801409e:	81fb      	strh	r3, [r7, #14]
 80140a0:	e006      	b.n	80140b0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80140a2:	89bb      	ldrh	r3, [r7, #12]
 80140a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80140a8:	4293      	cmp	r3, r2
 80140aa:	d001      	beq.n	80140b0 <cmp_lfn+0xa0>
 80140ac:	2300      	movs	r3, #0
 80140ae:	e018      	b.n	80140e2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80140b0:	693b      	ldr	r3, [r7, #16]
 80140b2:	3301      	adds	r3, #1
 80140b4:	613b      	str	r3, [r7, #16]
 80140b6:	693b      	ldr	r3, [r7, #16]
 80140b8:	2b0c      	cmp	r3, #12
 80140ba:	d9c8      	bls.n	801404e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80140bc:	683b      	ldr	r3, [r7, #0]
 80140be:	781b      	ldrb	r3, [r3, #0]
 80140c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d00b      	beq.n	80140e0 <cmp_lfn+0xd0>
 80140c8:	89fb      	ldrh	r3, [r7, #14]
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d008      	beq.n	80140e0 <cmp_lfn+0xd0>
 80140ce:	697b      	ldr	r3, [r7, #20]
 80140d0:	005b      	lsls	r3, r3, #1
 80140d2:	687a      	ldr	r2, [r7, #4]
 80140d4:	4413      	add	r3, r2
 80140d6:	881b      	ldrh	r3, [r3, #0]
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d001      	beq.n	80140e0 <cmp_lfn+0xd0>
 80140dc:	2300      	movs	r3, #0
 80140de:	e000      	b.n	80140e2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80140e0:	2301      	movs	r3, #1
}
 80140e2:	4618      	mov	r0, r3
 80140e4:	371c      	adds	r7, #28
 80140e6:	46bd      	mov	sp, r7
 80140e8:	bd90      	pop	{r4, r7, pc}
 80140ea:	bf00      	nop
 80140ec:	0801b388 	.word	0x0801b388

080140f0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80140f0:	b580      	push	{r7, lr}
 80140f2:	b088      	sub	sp, #32
 80140f4:	af00      	add	r7, sp, #0
 80140f6:	60f8      	str	r0, [r7, #12]
 80140f8:	60b9      	str	r1, [r7, #8]
 80140fa:	4611      	mov	r1, r2
 80140fc:	461a      	mov	r2, r3
 80140fe:	460b      	mov	r3, r1
 8014100:	71fb      	strb	r3, [r7, #7]
 8014102:	4613      	mov	r3, r2
 8014104:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8014106:	68bb      	ldr	r3, [r7, #8]
 8014108:	330d      	adds	r3, #13
 801410a:	79ba      	ldrb	r2, [r7, #6]
 801410c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801410e:	68bb      	ldr	r3, [r7, #8]
 8014110:	330b      	adds	r3, #11
 8014112:	220f      	movs	r2, #15
 8014114:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8014116:	68bb      	ldr	r3, [r7, #8]
 8014118:	330c      	adds	r3, #12
 801411a:	2200      	movs	r2, #0
 801411c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801411e:	68bb      	ldr	r3, [r7, #8]
 8014120:	331a      	adds	r3, #26
 8014122:	2100      	movs	r1, #0
 8014124:	4618      	mov	r0, r3
 8014126:	f7fe ff72 	bl	801300e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801412a:	79fb      	ldrb	r3, [r7, #7]
 801412c:	1e5a      	subs	r2, r3, #1
 801412e:	4613      	mov	r3, r2
 8014130:	005b      	lsls	r3, r3, #1
 8014132:	4413      	add	r3, r2
 8014134:	009b      	lsls	r3, r3, #2
 8014136:	4413      	add	r3, r2
 8014138:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801413a:	2300      	movs	r3, #0
 801413c:	82fb      	strh	r3, [r7, #22]
 801413e:	2300      	movs	r3, #0
 8014140:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8014142:	8afb      	ldrh	r3, [r7, #22]
 8014144:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014148:	4293      	cmp	r3, r2
 801414a:	d007      	beq.n	801415c <put_lfn+0x6c>
 801414c:	69fb      	ldr	r3, [r7, #28]
 801414e:	1c5a      	adds	r2, r3, #1
 8014150:	61fa      	str	r2, [r7, #28]
 8014152:	005b      	lsls	r3, r3, #1
 8014154:	68fa      	ldr	r2, [r7, #12]
 8014156:	4413      	add	r3, r2
 8014158:	881b      	ldrh	r3, [r3, #0]
 801415a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 801415c:	4a17      	ldr	r2, [pc, #92]	; (80141bc <put_lfn+0xcc>)
 801415e:	69bb      	ldr	r3, [r7, #24]
 8014160:	4413      	add	r3, r2
 8014162:	781b      	ldrb	r3, [r3, #0]
 8014164:	461a      	mov	r2, r3
 8014166:	68bb      	ldr	r3, [r7, #8]
 8014168:	4413      	add	r3, r2
 801416a:	8afa      	ldrh	r2, [r7, #22]
 801416c:	4611      	mov	r1, r2
 801416e:	4618      	mov	r0, r3
 8014170:	f7fe ff4d 	bl	801300e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8014174:	8afb      	ldrh	r3, [r7, #22]
 8014176:	2b00      	cmp	r3, #0
 8014178:	d102      	bne.n	8014180 <put_lfn+0x90>
 801417a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801417e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8014180:	69bb      	ldr	r3, [r7, #24]
 8014182:	3301      	adds	r3, #1
 8014184:	61bb      	str	r3, [r7, #24]
 8014186:	69bb      	ldr	r3, [r7, #24]
 8014188:	2b0c      	cmp	r3, #12
 801418a:	d9da      	bls.n	8014142 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801418c:	8afb      	ldrh	r3, [r7, #22]
 801418e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014192:	4293      	cmp	r3, r2
 8014194:	d006      	beq.n	80141a4 <put_lfn+0xb4>
 8014196:	69fb      	ldr	r3, [r7, #28]
 8014198:	005b      	lsls	r3, r3, #1
 801419a:	68fa      	ldr	r2, [r7, #12]
 801419c:	4413      	add	r3, r2
 801419e:	881b      	ldrh	r3, [r3, #0]
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d103      	bne.n	80141ac <put_lfn+0xbc>
 80141a4:	79fb      	ldrb	r3, [r7, #7]
 80141a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80141aa:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80141ac:	68bb      	ldr	r3, [r7, #8]
 80141ae:	79fa      	ldrb	r2, [r7, #7]
 80141b0:	701a      	strb	r2, [r3, #0]
}
 80141b2:	bf00      	nop
 80141b4:	3720      	adds	r7, #32
 80141b6:	46bd      	mov	sp, r7
 80141b8:	bd80      	pop	{r7, pc}
 80141ba:	bf00      	nop
 80141bc:	0801b388 	.word	0x0801b388

080141c0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80141c0:	b580      	push	{r7, lr}
 80141c2:	b08c      	sub	sp, #48	; 0x30
 80141c4:	af00      	add	r7, sp, #0
 80141c6:	60f8      	str	r0, [r7, #12]
 80141c8:	60b9      	str	r1, [r7, #8]
 80141ca:	607a      	str	r2, [r7, #4]
 80141cc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80141ce:	220b      	movs	r2, #11
 80141d0:	68b9      	ldr	r1, [r7, #8]
 80141d2:	68f8      	ldr	r0, [r7, #12]
 80141d4:	f7fe ff62 	bl	801309c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80141d8:	683b      	ldr	r3, [r7, #0]
 80141da:	2b05      	cmp	r3, #5
 80141dc:	d929      	bls.n	8014232 <gen_numname+0x72>
		sr = seq;
 80141de:	683b      	ldr	r3, [r7, #0]
 80141e0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80141e2:	e020      	b.n	8014226 <gen_numname+0x66>
			wc = *lfn++;
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	1c9a      	adds	r2, r3, #2
 80141e8:	607a      	str	r2, [r7, #4]
 80141ea:	881b      	ldrh	r3, [r3, #0]
 80141ec:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80141ee:	2300      	movs	r3, #0
 80141f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80141f2:	e015      	b.n	8014220 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 80141f4:	69fb      	ldr	r3, [r7, #28]
 80141f6:	005a      	lsls	r2, r3, #1
 80141f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80141fa:	f003 0301 	and.w	r3, r3, #1
 80141fe:	4413      	add	r3, r2
 8014200:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8014202:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014204:	085b      	lsrs	r3, r3, #1
 8014206:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8014208:	69fb      	ldr	r3, [r7, #28]
 801420a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801420e:	2b00      	cmp	r3, #0
 8014210:	d003      	beq.n	801421a <gen_numname+0x5a>
 8014212:	69fa      	ldr	r2, [r7, #28]
 8014214:	4b30      	ldr	r3, [pc, #192]	; (80142d8 <gen_numname+0x118>)
 8014216:	4053      	eors	r3, r2
 8014218:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801421a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801421c:	3301      	adds	r3, #1
 801421e:	62bb      	str	r3, [r7, #40]	; 0x28
 8014220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014222:	2b0f      	cmp	r3, #15
 8014224:	d9e6      	bls.n	80141f4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	881b      	ldrh	r3, [r3, #0]
 801422a:	2b00      	cmp	r3, #0
 801422c:	d1da      	bne.n	80141e4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801422e:	69fb      	ldr	r3, [r7, #28]
 8014230:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8014232:	2307      	movs	r3, #7
 8014234:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8014236:	683b      	ldr	r3, [r7, #0]
 8014238:	b2db      	uxtb	r3, r3
 801423a:	f003 030f 	and.w	r3, r3, #15
 801423e:	b2db      	uxtb	r3, r3
 8014240:	3330      	adds	r3, #48	; 0x30
 8014242:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8014246:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801424a:	2b39      	cmp	r3, #57	; 0x39
 801424c:	d904      	bls.n	8014258 <gen_numname+0x98>
 801424e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014252:	3307      	adds	r3, #7
 8014254:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8014258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801425a:	1e5a      	subs	r2, r3, #1
 801425c:	62ba      	str	r2, [r7, #40]	; 0x28
 801425e:	3330      	adds	r3, #48	; 0x30
 8014260:	443b      	add	r3, r7
 8014262:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8014266:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801426a:	683b      	ldr	r3, [r7, #0]
 801426c:	091b      	lsrs	r3, r3, #4
 801426e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8014270:	683b      	ldr	r3, [r7, #0]
 8014272:	2b00      	cmp	r3, #0
 8014274:	d1df      	bne.n	8014236 <gen_numname+0x76>
	ns[i] = '~';
 8014276:	f107 0214 	add.w	r2, r7, #20
 801427a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801427c:	4413      	add	r3, r2
 801427e:	227e      	movs	r2, #126	; 0x7e
 8014280:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8014282:	2300      	movs	r3, #0
 8014284:	627b      	str	r3, [r7, #36]	; 0x24
 8014286:	e002      	b.n	801428e <gen_numname+0xce>
 8014288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801428a:	3301      	adds	r3, #1
 801428c:	627b      	str	r3, [r7, #36]	; 0x24
 801428e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014292:	429a      	cmp	r2, r3
 8014294:	d205      	bcs.n	80142a2 <gen_numname+0xe2>
 8014296:	68fa      	ldr	r2, [r7, #12]
 8014298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801429a:	4413      	add	r3, r2
 801429c:	781b      	ldrb	r3, [r3, #0]
 801429e:	2b20      	cmp	r3, #32
 80142a0:	d1f2      	bne.n	8014288 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80142a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142a4:	2b07      	cmp	r3, #7
 80142a6:	d807      	bhi.n	80142b8 <gen_numname+0xf8>
 80142a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142aa:	1c5a      	adds	r2, r3, #1
 80142ac:	62ba      	str	r2, [r7, #40]	; 0x28
 80142ae:	3330      	adds	r3, #48	; 0x30
 80142b0:	443b      	add	r3, r7
 80142b2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80142b6:	e000      	b.n	80142ba <gen_numname+0xfa>
 80142b8:	2120      	movs	r1, #32
 80142ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142bc:	1c5a      	adds	r2, r3, #1
 80142be:	627a      	str	r2, [r7, #36]	; 0x24
 80142c0:	68fa      	ldr	r2, [r7, #12]
 80142c2:	4413      	add	r3, r2
 80142c4:	460a      	mov	r2, r1
 80142c6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80142c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142ca:	2b07      	cmp	r3, #7
 80142cc:	d9e9      	bls.n	80142a2 <gen_numname+0xe2>
}
 80142ce:	bf00      	nop
 80142d0:	bf00      	nop
 80142d2:	3730      	adds	r7, #48	; 0x30
 80142d4:	46bd      	mov	sp, r7
 80142d6:	bd80      	pop	{r7, pc}
 80142d8:	00011021 	.word	0x00011021

080142dc <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80142dc:	b480      	push	{r7}
 80142de:	b085      	sub	sp, #20
 80142e0:	af00      	add	r7, sp, #0
 80142e2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80142e4:	2300      	movs	r3, #0
 80142e6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80142e8:	230b      	movs	r3, #11
 80142ea:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80142ec:	7bfb      	ldrb	r3, [r7, #15]
 80142ee:	b2da      	uxtb	r2, r3
 80142f0:	0852      	lsrs	r2, r2, #1
 80142f2:	01db      	lsls	r3, r3, #7
 80142f4:	4313      	orrs	r3, r2
 80142f6:	b2da      	uxtb	r2, r3
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	1c59      	adds	r1, r3, #1
 80142fc:	6079      	str	r1, [r7, #4]
 80142fe:	781b      	ldrb	r3, [r3, #0]
 8014300:	4413      	add	r3, r2
 8014302:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8014304:	68bb      	ldr	r3, [r7, #8]
 8014306:	3b01      	subs	r3, #1
 8014308:	60bb      	str	r3, [r7, #8]
 801430a:	68bb      	ldr	r3, [r7, #8]
 801430c:	2b00      	cmp	r3, #0
 801430e:	d1ed      	bne.n	80142ec <sum_sfn+0x10>
	return sum;
 8014310:	7bfb      	ldrb	r3, [r7, #15]
}
 8014312:	4618      	mov	r0, r3
 8014314:	3714      	adds	r7, #20
 8014316:	46bd      	mov	sp, r7
 8014318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801431c:	4770      	bx	lr

0801431e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801431e:	b580      	push	{r7, lr}
 8014320:	b086      	sub	sp, #24
 8014322:	af00      	add	r7, sp, #0
 8014324:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801432c:	2100      	movs	r1, #0
 801432e:	6878      	ldr	r0, [r7, #4]
 8014330:	f7ff fc88 	bl	8013c44 <dir_sdi>
 8014334:	4603      	mov	r3, r0
 8014336:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8014338:	7dfb      	ldrb	r3, [r7, #23]
 801433a:	2b00      	cmp	r3, #0
 801433c:	d001      	beq.n	8014342 <dir_find+0x24>
 801433e:	7dfb      	ldrb	r3, [r7, #23]
 8014340:	e0a9      	b.n	8014496 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8014342:	23ff      	movs	r3, #255	; 0xff
 8014344:	753b      	strb	r3, [r7, #20]
 8014346:	7d3b      	ldrb	r3, [r7, #20]
 8014348:	757b      	strb	r3, [r7, #21]
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	f04f 32ff 	mov.w	r2, #4294967295
 8014350:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	69db      	ldr	r3, [r3, #28]
 8014356:	4619      	mov	r1, r3
 8014358:	6938      	ldr	r0, [r7, #16]
 801435a:	f7ff f891 	bl	8013480 <move_window>
 801435e:	4603      	mov	r3, r0
 8014360:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8014362:	7dfb      	ldrb	r3, [r7, #23]
 8014364:	2b00      	cmp	r3, #0
 8014366:	f040 8090 	bne.w	801448a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	6a1b      	ldr	r3, [r3, #32]
 801436e:	781b      	ldrb	r3, [r3, #0]
 8014370:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8014372:	7dbb      	ldrb	r3, [r7, #22]
 8014374:	2b00      	cmp	r3, #0
 8014376:	d102      	bne.n	801437e <dir_find+0x60>
 8014378:	2304      	movs	r3, #4
 801437a:	75fb      	strb	r3, [r7, #23]
 801437c:	e08a      	b.n	8014494 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	6a1b      	ldr	r3, [r3, #32]
 8014382:	330b      	adds	r3, #11
 8014384:	781b      	ldrb	r3, [r3, #0]
 8014386:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801438a:	73fb      	strb	r3, [r7, #15]
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	7bfa      	ldrb	r2, [r7, #15]
 8014390:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8014392:	7dbb      	ldrb	r3, [r7, #22]
 8014394:	2be5      	cmp	r3, #229	; 0xe5
 8014396:	d007      	beq.n	80143a8 <dir_find+0x8a>
 8014398:	7bfb      	ldrb	r3, [r7, #15]
 801439a:	f003 0308 	and.w	r3, r3, #8
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d009      	beq.n	80143b6 <dir_find+0x98>
 80143a2:	7bfb      	ldrb	r3, [r7, #15]
 80143a4:	2b0f      	cmp	r3, #15
 80143a6:	d006      	beq.n	80143b6 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80143a8:	23ff      	movs	r3, #255	; 0xff
 80143aa:	757b      	strb	r3, [r7, #21]
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	f04f 32ff 	mov.w	r2, #4294967295
 80143b2:	631a      	str	r2, [r3, #48]	; 0x30
 80143b4:	e05e      	b.n	8014474 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80143b6:	7bfb      	ldrb	r3, [r7, #15]
 80143b8:	2b0f      	cmp	r3, #15
 80143ba:	d136      	bne.n	801442a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80143c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d154      	bne.n	8014474 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80143ca:	7dbb      	ldrb	r3, [r7, #22]
 80143cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d00d      	beq.n	80143f0 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	6a1b      	ldr	r3, [r3, #32]
 80143d8:	7b5b      	ldrb	r3, [r3, #13]
 80143da:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80143dc:	7dbb      	ldrb	r3, [r7, #22]
 80143de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80143e2:	75bb      	strb	r3, [r7, #22]
 80143e4:	7dbb      	ldrb	r3, [r7, #22]
 80143e6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	695a      	ldr	r2, [r3, #20]
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80143f0:	7dba      	ldrb	r2, [r7, #22]
 80143f2:	7d7b      	ldrb	r3, [r7, #21]
 80143f4:	429a      	cmp	r2, r3
 80143f6:	d115      	bne.n	8014424 <dir_find+0x106>
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	6a1b      	ldr	r3, [r3, #32]
 80143fc:	330d      	adds	r3, #13
 80143fe:	781b      	ldrb	r3, [r3, #0]
 8014400:	7d3a      	ldrb	r2, [r7, #20]
 8014402:	429a      	cmp	r2, r3
 8014404:	d10e      	bne.n	8014424 <dir_find+0x106>
 8014406:	693b      	ldr	r3, [r7, #16]
 8014408:	691a      	ldr	r2, [r3, #16]
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	6a1b      	ldr	r3, [r3, #32]
 801440e:	4619      	mov	r1, r3
 8014410:	4610      	mov	r0, r2
 8014412:	f7ff fdfd 	bl	8014010 <cmp_lfn>
 8014416:	4603      	mov	r3, r0
 8014418:	2b00      	cmp	r3, #0
 801441a:	d003      	beq.n	8014424 <dir_find+0x106>
 801441c:	7d7b      	ldrb	r3, [r7, #21]
 801441e:	3b01      	subs	r3, #1
 8014420:	b2db      	uxtb	r3, r3
 8014422:	e000      	b.n	8014426 <dir_find+0x108>
 8014424:	23ff      	movs	r3, #255	; 0xff
 8014426:	757b      	strb	r3, [r7, #21]
 8014428:	e024      	b.n	8014474 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801442a:	7d7b      	ldrb	r3, [r7, #21]
 801442c:	2b00      	cmp	r3, #0
 801442e:	d109      	bne.n	8014444 <dir_find+0x126>
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	6a1b      	ldr	r3, [r3, #32]
 8014434:	4618      	mov	r0, r3
 8014436:	f7ff ff51 	bl	80142dc <sum_sfn>
 801443a:	4603      	mov	r3, r0
 801443c:	461a      	mov	r2, r3
 801443e:	7d3b      	ldrb	r3, [r7, #20]
 8014440:	4293      	cmp	r3, r2
 8014442:	d024      	beq.n	801448e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801444a:	f003 0301 	and.w	r3, r3, #1
 801444e:	2b00      	cmp	r3, #0
 8014450:	d10a      	bne.n	8014468 <dir_find+0x14a>
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	6a18      	ldr	r0, [r3, #32]
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	3324      	adds	r3, #36	; 0x24
 801445a:	220b      	movs	r2, #11
 801445c:	4619      	mov	r1, r3
 801445e:	f7fe fe59 	bl	8013114 <mem_cmp>
 8014462:	4603      	mov	r3, r0
 8014464:	2b00      	cmp	r3, #0
 8014466:	d014      	beq.n	8014492 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8014468:	23ff      	movs	r3, #255	; 0xff
 801446a:	757b      	strb	r3, [r7, #21]
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	f04f 32ff 	mov.w	r2, #4294967295
 8014472:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8014474:	2100      	movs	r1, #0
 8014476:	6878      	ldr	r0, [r7, #4]
 8014478:	f7ff fc6d 	bl	8013d56 <dir_next>
 801447c:	4603      	mov	r3, r0
 801447e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8014480:	7dfb      	ldrb	r3, [r7, #23]
 8014482:	2b00      	cmp	r3, #0
 8014484:	f43f af65 	beq.w	8014352 <dir_find+0x34>
 8014488:	e004      	b.n	8014494 <dir_find+0x176>
		if (res != FR_OK) break;
 801448a:	bf00      	nop
 801448c:	e002      	b.n	8014494 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801448e:	bf00      	nop
 8014490:	e000      	b.n	8014494 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8014492:	bf00      	nop

	return res;
 8014494:	7dfb      	ldrb	r3, [r7, #23]
}
 8014496:	4618      	mov	r0, r3
 8014498:	3718      	adds	r7, #24
 801449a:	46bd      	mov	sp, r7
 801449c:	bd80      	pop	{r7, pc}
	...

080144a0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80144a0:	b580      	push	{r7, lr}
 80144a2:	b08c      	sub	sp, #48	; 0x30
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	681b      	ldr	r3, [r3, #0]
 80144ac:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80144b4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d001      	beq.n	80144c0 <dir_register+0x20>
 80144bc:	2306      	movs	r3, #6
 80144be:	e0e0      	b.n	8014682 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80144c0:	2300      	movs	r3, #0
 80144c2:	627b      	str	r3, [r7, #36]	; 0x24
 80144c4:	e002      	b.n	80144cc <dir_register+0x2c>
 80144c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144c8:	3301      	adds	r3, #1
 80144ca:	627b      	str	r3, [r7, #36]	; 0x24
 80144cc:	69fb      	ldr	r3, [r7, #28]
 80144ce:	691a      	ldr	r2, [r3, #16]
 80144d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144d2:	005b      	lsls	r3, r3, #1
 80144d4:	4413      	add	r3, r2
 80144d6:	881b      	ldrh	r3, [r3, #0]
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d1f4      	bne.n	80144c6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80144e2:	f107 030c 	add.w	r3, r7, #12
 80144e6:	220c      	movs	r2, #12
 80144e8:	4618      	mov	r0, r3
 80144ea:	f7fe fdd7 	bl	801309c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80144ee:	7dfb      	ldrb	r3, [r7, #23]
 80144f0:	f003 0301 	and.w	r3, r3, #1
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d032      	beq.n	801455e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	2240      	movs	r2, #64	; 0x40
 80144fc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8014500:	2301      	movs	r3, #1
 8014502:	62bb      	str	r3, [r7, #40]	; 0x28
 8014504:	e016      	b.n	8014534 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	f103 0024 	add.w	r0, r3, #36	; 0x24
 801450c:	69fb      	ldr	r3, [r7, #28]
 801450e:	691a      	ldr	r2, [r3, #16]
 8014510:	f107 010c 	add.w	r1, r7, #12
 8014514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014516:	f7ff fe53 	bl	80141c0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801451a:	6878      	ldr	r0, [r7, #4]
 801451c:	f7ff feff 	bl	801431e <dir_find>
 8014520:	4603      	mov	r3, r0
 8014522:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8014526:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801452a:	2b00      	cmp	r3, #0
 801452c:	d106      	bne.n	801453c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801452e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014530:	3301      	adds	r3, #1
 8014532:	62bb      	str	r3, [r7, #40]	; 0x28
 8014534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014536:	2b63      	cmp	r3, #99	; 0x63
 8014538:	d9e5      	bls.n	8014506 <dir_register+0x66>
 801453a:	e000      	b.n	801453e <dir_register+0x9e>
			if (res != FR_OK) break;
 801453c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801453e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014540:	2b64      	cmp	r3, #100	; 0x64
 8014542:	d101      	bne.n	8014548 <dir_register+0xa8>
 8014544:	2307      	movs	r3, #7
 8014546:	e09c      	b.n	8014682 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8014548:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801454c:	2b04      	cmp	r3, #4
 801454e:	d002      	beq.n	8014556 <dir_register+0xb6>
 8014550:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014554:	e095      	b.n	8014682 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8014556:	7dfa      	ldrb	r2, [r7, #23]
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801455e:	7dfb      	ldrb	r3, [r7, #23]
 8014560:	f003 0302 	and.w	r3, r3, #2
 8014564:	2b00      	cmp	r3, #0
 8014566:	d007      	beq.n	8014578 <dir_register+0xd8>
 8014568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801456a:	330c      	adds	r3, #12
 801456c:	4a47      	ldr	r2, [pc, #284]	; (801468c <dir_register+0x1ec>)
 801456e:	fba2 2303 	umull	r2, r3, r2, r3
 8014572:	089b      	lsrs	r3, r3, #2
 8014574:	3301      	adds	r3, #1
 8014576:	e000      	b.n	801457a <dir_register+0xda>
 8014578:	2301      	movs	r3, #1
 801457a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801457c:	6a39      	ldr	r1, [r7, #32]
 801457e:	6878      	ldr	r0, [r7, #4]
 8014580:	f7ff fcbf 	bl	8013f02 <dir_alloc>
 8014584:	4603      	mov	r3, r0
 8014586:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801458a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801458e:	2b00      	cmp	r3, #0
 8014590:	d148      	bne.n	8014624 <dir_register+0x184>
 8014592:	6a3b      	ldr	r3, [r7, #32]
 8014594:	3b01      	subs	r3, #1
 8014596:	623b      	str	r3, [r7, #32]
 8014598:	6a3b      	ldr	r3, [r7, #32]
 801459a:	2b00      	cmp	r3, #0
 801459c:	d042      	beq.n	8014624 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	695a      	ldr	r2, [r3, #20]
 80145a2:	6a3b      	ldr	r3, [r7, #32]
 80145a4:	015b      	lsls	r3, r3, #5
 80145a6:	1ad3      	subs	r3, r2, r3
 80145a8:	4619      	mov	r1, r3
 80145aa:	6878      	ldr	r0, [r7, #4]
 80145ac:	f7ff fb4a 	bl	8013c44 <dir_sdi>
 80145b0:	4603      	mov	r3, r0
 80145b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80145b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d132      	bne.n	8014624 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	3324      	adds	r3, #36	; 0x24
 80145c2:	4618      	mov	r0, r3
 80145c4:	f7ff fe8a 	bl	80142dc <sum_sfn>
 80145c8:	4603      	mov	r3, r0
 80145ca:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	69db      	ldr	r3, [r3, #28]
 80145d0:	4619      	mov	r1, r3
 80145d2:	69f8      	ldr	r0, [r7, #28]
 80145d4:	f7fe ff54 	bl	8013480 <move_window>
 80145d8:	4603      	mov	r3, r0
 80145da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80145de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d11d      	bne.n	8014622 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80145e6:	69fb      	ldr	r3, [r7, #28]
 80145e8:	6918      	ldr	r0, [r3, #16]
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	6a19      	ldr	r1, [r3, #32]
 80145ee:	6a3b      	ldr	r3, [r7, #32]
 80145f0:	b2da      	uxtb	r2, r3
 80145f2:	7efb      	ldrb	r3, [r7, #27]
 80145f4:	f7ff fd7c 	bl	80140f0 <put_lfn>
				fs->wflag = 1;
 80145f8:	69fb      	ldr	r3, [r7, #28]
 80145fa:	2201      	movs	r2, #1
 80145fc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80145fe:	2100      	movs	r1, #0
 8014600:	6878      	ldr	r0, [r7, #4]
 8014602:	f7ff fba8 	bl	8013d56 <dir_next>
 8014606:	4603      	mov	r3, r0
 8014608:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 801460c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014610:	2b00      	cmp	r3, #0
 8014612:	d107      	bne.n	8014624 <dir_register+0x184>
 8014614:	6a3b      	ldr	r3, [r7, #32]
 8014616:	3b01      	subs	r3, #1
 8014618:	623b      	str	r3, [r7, #32]
 801461a:	6a3b      	ldr	r3, [r7, #32]
 801461c:	2b00      	cmp	r3, #0
 801461e:	d1d5      	bne.n	80145cc <dir_register+0x12c>
 8014620:	e000      	b.n	8014624 <dir_register+0x184>
				if (res != FR_OK) break;
 8014622:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8014624:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014628:	2b00      	cmp	r3, #0
 801462a:	d128      	bne.n	801467e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	69db      	ldr	r3, [r3, #28]
 8014630:	4619      	mov	r1, r3
 8014632:	69f8      	ldr	r0, [r7, #28]
 8014634:	f7fe ff24 	bl	8013480 <move_window>
 8014638:	4603      	mov	r3, r0
 801463a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 801463e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014642:	2b00      	cmp	r3, #0
 8014644:	d11b      	bne.n	801467e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	6a1b      	ldr	r3, [r3, #32]
 801464a:	2220      	movs	r2, #32
 801464c:	2100      	movs	r1, #0
 801464e:	4618      	mov	r0, r3
 8014650:	f7fe fd45 	bl	80130de <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	6a18      	ldr	r0, [r3, #32]
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	3324      	adds	r3, #36	; 0x24
 801465c:	220b      	movs	r2, #11
 801465e:	4619      	mov	r1, r3
 8014660:	f7fe fd1c 	bl	801309c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	6a1b      	ldr	r3, [r3, #32]
 801466e:	330c      	adds	r3, #12
 8014670:	f002 0218 	and.w	r2, r2, #24
 8014674:	b2d2      	uxtb	r2, r2
 8014676:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8014678:	69fb      	ldr	r3, [r7, #28]
 801467a:	2201      	movs	r2, #1
 801467c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801467e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8014682:	4618      	mov	r0, r3
 8014684:	3730      	adds	r7, #48	; 0x30
 8014686:	46bd      	mov	sp, r7
 8014688:	bd80      	pop	{r7, pc}
 801468a:	bf00      	nop
 801468c:	4ec4ec4f 	.word	0x4ec4ec4f

08014690 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8014690:	b580      	push	{r7, lr}
 8014692:	b088      	sub	sp, #32
 8014694:	af00      	add	r7, sp, #0
 8014696:	6078      	str	r0, [r7, #4]
 8014698:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	681b      	ldr	r3, [r3, #0]
 801469e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80146a0:	683b      	ldr	r3, [r7, #0]
 80146a2:	2200      	movs	r2, #0
 80146a4:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	69db      	ldr	r3, [r3, #28]
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	f000 80c9 	beq.w	8014842 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80146b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80146b8:	d032      	beq.n	8014720 <get_fileinfo+0x90>
			i = j = 0;
 80146ba:	2300      	movs	r3, #0
 80146bc:	61bb      	str	r3, [r7, #24]
 80146be:	69bb      	ldr	r3, [r7, #24]
 80146c0:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80146c2:	e01b      	b.n	80146fc <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 80146c4:	89fb      	ldrh	r3, [r7, #14]
 80146c6:	2100      	movs	r1, #0
 80146c8:	4618      	mov	r0, r3
 80146ca:	f001 fafd 	bl	8015cc8 <ff_convert>
 80146ce:	4603      	mov	r3, r0
 80146d0:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 80146d2:	89fb      	ldrh	r3, [r7, #14]
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d102      	bne.n	80146de <get_fileinfo+0x4e>
 80146d8:	2300      	movs	r3, #0
 80146da:	61fb      	str	r3, [r7, #28]
 80146dc:	e01a      	b.n	8014714 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 80146de:	69fb      	ldr	r3, [r7, #28]
 80146e0:	2b27      	cmp	r3, #39	; 0x27
 80146e2:	d902      	bls.n	80146ea <get_fileinfo+0x5a>
 80146e4:	2300      	movs	r3, #0
 80146e6:	61fb      	str	r3, [r7, #28]
 80146e8:	e014      	b.n	8014714 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 80146ea:	69fb      	ldr	r3, [r7, #28]
 80146ec:	1c5a      	adds	r2, r3, #1
 80146ee:	61fa      	str	r2, [r7, #28]
 80146f0:	89fa      	ldrh	r2, [r7, #14]
 80146f2:	b2d1      	uxtb	r1, r2
 80146f4:	683a      	ldr	r2, [r7, #0]
 80146f6:	4413      	add	r3, r2
 80146f8:	460a      	mov	r2, r1
 80146fa:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80146fc:	693b      	ldr	r3, [r7, #16]
 80146fe:	691a      	ldr	r2, [r3, #16]
 8014700:	69bb      	ldr	r3, [r7, #24]
 8014702:	1c59      	adds	r1, r3, #1
 8014704:	61b9      	str	r1, [r7, #24]
 8014706:	005b      	lsls	r3, r3, #1
 8014708:	4413      	add	r3, r2
 801470a:	881b      	ldrh	r3, [r3, #0]
 801470c:	81fb      	strh	r3, [r7, #14]
 801470e:	89fb      	ldrh	r3, [r7, #14]
 8014710:	2b00      	cmp	r3, #0
 8014712:	d1d7      	bne.n	80146c4 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8014714:	683a      	ldr	r2, [r7, #0]
 8014716:	69fb      	ldr	r3, [r7, #28]
 8014718:	4413      	add	r3, r2
 801471a:	3316      	adds	r3, #22
 801471c:	2200      	movs	r2, #0
 801471e:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8014720:	2300      	movs	r3, #0
 8014722:	61bb      	str	r3, [r7, #24]
 8014724:	69bb      	ldr	r3, [r7, #24]
 8014726:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8014728:	683a      	ldr	r2, [r7, #0]
 801472a:	69fb      	ldr	r3, [r7, #28]
 801472c:	4413      	add	r3, r2
 801472e:	3316      	adds	r3, #22
 8014730:	781b      	ldrb	r3, [r3, #0]
 8014732:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8014734:	e04c      	b.n	80147d0 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	6a1a      	ldr	r2, [r3, #32]
 801473a:	69fb      	ldr	r3, [r7, #28]
 801473c:	1c59      	adds	r1, r3, #1
 801473e:	61f9      	str	r1, [r7, #28]
 8014740:	4413      	add	r3, r2
 8014742:	781b      	ldrb	r3, [r3, #0]
 8014744:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8014746:	7dfb      	ldrb	r3, [r7, #23]
 8014748:	2b20      	cmp	r3, #32
 801474a:	d100      	bne.n	801474e <get_fileinfo+0xbe>
 801474c:	e040      	b.n	80147d0 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 801474e:	7dfb      	ldrb	r3, [r7, #23]
 8014750:	2b05      	cmp	r3, #5
 8014752:	d101      	bne.n	8014758 <get_fileinfo+0xc8>
 8014754:	23e5      	movs	r3, #229	; 0xe5
 8014756:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8014758:	69fb      	ldr	r3, [r7, #28]
 801475a:	2b09      	cmp	r3, #9
 801475c:	d10f      	bne.n	801477e <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 801475e:	89bb      	ldrh	r3, [r7, #12]
 8014760:	2b00      	cmp	r3, #0
 8014762:	d105      	bne.n	8014770 <get_fileinfo+0xe0>
 8014764:	683a      	ldr	r2, [r7, #0]
 8014766:	69bb      	ldr	r3, [r7, #24]
 8014768:	4413      	add	r3, r2
 801476a:	3316      	adds	r3, #22
 801476c:	222e      	movs	r2, #46	; 0x2e
 801476e:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8014770:	69bb      	ldr	r3, [r7, #24]
 8014772:	1c5a      	adds	r2, r3, #1
 8014774:	61ba      	str	r2, [r7, #24]
 8014776:	683a      	ldr	r2, [r7, #0]
 8014778:	4413      	add	r3, r2
 801477a:	222e      	movs	r2, #46	; 0x2e
 801477c:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 801477e:	683a      	ldr	r2, [r7, #0]
 8014780:	69bb      	ldr	r3, [r7, #24]
 8014782:	4413      	add	r3, r2
 8014784:	3309      	adds	r3, #9
 8014786:	7dfa      	ldrb	r2, [r7, #23]
 8014788:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 801478a:	89bb      	ldrh	r3, [r7, #12]
 801478c:	2b00      	cmp	r3, #0
 801478e:	d11c      	bne.n	80147ca <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8014790:	7dfb      	ldrb	r3, [r7, #23]
 8014792:	2b40      	cmp	r3, #64	; 0x40
 8014794:	d913      	bls.n	80147be <get_fileinfo+0x12e>
 8014796:	7dfb      	ldrb	r3, [r7, #23]
 8014798:	2b5a      	cmp	r3, #90	; 0x5a
 801479a:	d810      	bhi.n	80147be <get_fileinfo+0x12e>
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	6a1b      	ldr	r3, [r3, #32]
 80147a0:	330c      	adds	r3, #12
 80147a2:	781b      	ldrb	r3, [r3, #0]
 80147a4:	461a      	mov	r2, r3
 80147a6:	69fb      	ldr	r3, [r7, #28]
 80147a8:	2b08      	cmp	r3, #8
 80147aa:	d901      	bls.n	80147b0 <get_fileinfo+0x120>
 80147ac:	2310      	movs	r3, #16
 80147ae:	e000      	b.n	80147b2 <get_fileinfo+0x122>
 80147b0:	2308      	movs	r3, #8
 80147b2:	4013      	ands	r3, r2
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d002      	beq.n	80147be <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 80147b8:	7dfb      	ldrb	r3, [r7, #23]
 80147ba:	3320      	adds	r3, #32
 80147bc:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 80147be:	683a      	ldr	r2, [r7, #0]
 80147c0:	69bb      	ldr	r3, [r7, #24]
 80147c2:	4413      	add	r3, r2
 80147c4:	3316      	adds	r3, #22
 80147c6:	7dfa      	ldrb	r2, [r7, #23]
 80147c8:	701a      	strb	r2, [r3, #0]
		}
		j++;
 80147ca:	69bb      	ldr	r3, [r7, #24]
 80147cc:	3301      	adds	r3, #1
 80147ce:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 80147d0:	69fb      	ldr	r3, [r7, #28]
 80147d2:	2b0a      	cmp	r3, #10
 80147d4:	d9af      	bls.n	8014736 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 80147d6:	89bb      	ldrh	r3, [r7, #12]
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d10d      	bne.n	80147f8 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 80147dc:	683a      	ldr	r2, [r7, #0]
 80147de:	69bb      	ldr	r3, [r7, #24]
 80147e0:	4413      	add	r3, r2
 80147e2:	3316      	adds	r3, #22
 80147e4:	2200      	movs	r2, #0
 80147e6:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	6a1b      	ldr	r3, [r3, #32]
 80147ec:	330c      	adds	r3, #12
 80147ee:	781b      	ldrb	r3, [r3, #0]
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d101      	bne.n	80147f8 <get_fileinfo+0x168>
 80147f4:	2300      	movs	r3, #0
 80147f6:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 80147f8:	683a      	ldr	r2, [r7, #0]
 80147fa:	69bb      	ldr	r3, [r7, #24]
 80147fc:	4413      	add	r3, r2
 80147fe:	3309      	adds	r3, #9
 8014800:	2200      	movs	r2, #0
 8014802:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	6a1b      	ldr	r3, [r3, #32]
 8014808:	7ada      	ldrb	r2, [r3, #11]
 801480a:	683b      	ldr	r3, [r7, #0]
 801480c:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	6a1b      	ldr	r3, [r3, #32]
 8014812:	331c      	adds	r3, #28
 8014814:	4618      	mov	r0, r3
 8014816:	f7fe fbd7 	bl	8012fc8 <ld_dword>
 801481a:	4602      	mov	r2, r0
 801481c:	683b      	ldr	r3, [r7, #0]
 801481e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	6a1b      	ldr	r3, [r3, #32]
 8014824:	3316      	adds	r3, #22
 8014826:	4618      	mov	r0, r3
 8014828:	f7fe fbce 	bl	8012fc8 <ld_dword>
 801482c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 801482e:	68bb      	ldr	r3, [r7, #8]
 8014830:	b29a      	uxth	r2, r3
 8014832:	683b      	ldr	r3, [r7, #0]
 8014834:	80da      	strh	r2, [r3, #6]
 8014836:	68bb      	ldr	r3, [r7, #8]
 8014838:	0c1b      	lsrs	r3, r3, #16
 801483a:	b29a      	uxth	r2, r3
 801483c:	683b      	ldr	r3, [r7, #0]
 801483e:	809a      	strh	r2, [r3, #4]
 8014840:	e000      	b.n	8014844 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8014842:	bf00      	nop
}
 8014844:	3720      	adds	r7, #32
 8014846:	46bd      	mov	sp, r7
 8014848:	bd80      	pop	{r7, pc}
	...

0801484c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801484c:	b580      	push	{r7, lr}
 801484e:	b08a      	sub	sp, #40	; 0x28
 8014850:	af00      	add	r7, sp, #0
 8014852:	6078      	str	r0, [r7, #4]
 8014854:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8014856:	683b      	ldr	r3, [r7, #0]
 8014858:	681b      	ldr	r3, [r3, #0]
 801485a:	613b      	str	r3, [r7, #16]
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	691b      	ldr	r3, [r3, #16]
 8014862:	60fb      	str	r3, [r7, #12]
 8014864:	2300      	movs	r3, #0
 8014866:	617b      	str	r3, [r7, #20]
 8014868:	697b      	ldr	r3, [r7, #20]
 801486a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801486c:	69bb      	ldr	r3, [r7, #24]
 801486e:	1c5a      	adds	r2, r3, #1
 8014870:	61ba      	str	r2, [r7, #24]
 8014872:	693a      	ldr	r2, [r7, #16]
 8014874:	4413      	add	r3, r2
 8014876:	781b      	ldrb	r3, [r3, #0]
 8014878:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801487a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801487c:	2b1f      	cmp	r3, #31
 801487e:	d940      	bls.n	8014902 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8014880:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014882:	2b2f      	cmp	r3, #47	; 0x2f
 8014884:	d006      	beq.n	8014894 <create_name+0x48>
 8014886:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014888:	2b5c      	cmp	r3, #92	; 0x5c
 801488a:	d110      	bne.n	80148ae <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801488c:	e002      	b.n	8014894 <create_name+0x48>
 801488e:	69bb      	ldr	r3, [r7, #24]
 8014890:	3301      	adds	r3, #1
 8014892:	61bb      	str	r3, [r7, #24]
 8014894:	693a      	ldr	r2, [r7, #16]
 8014896:	69bb      	ldr	r3, [r7, #24]
 8014898:	4413      	add	r3, r2
 801489a:	781b      	ldrb	r3, [r3, #0]
 801489c:	2b2f      	cmp	r3, #47	; 0x2f
 801489e:	d0f6      	beq.n	801488e <create_name+0x42>
 80148a0:	693a      	ldr	r2, [r7, #16]
 80148a2:	69bb      	ldr	r3, [r7, #24]
 80148a4:	4413      	add	r3, r2
 80148a6:	781b      	ldrb	r3, [r3, #0]
 80148a8:	2b5c      	cmp	r3, #92	; 0x5c
 80148aa:	d0f0      	beq.n	801488e <create_name+0x42>
			break;
 80148ac:	e02a      	b.n	8014904 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80148ae:	697b      	ldr	r3, [r7, #20]
 80148b0:	2b27      	cmp	r3, #39	; 0x27
 80148b2:	d901      	bls.n	80148b8 <create_name+0x6c>
 80148b4:	2306      	movs	r3, #6
 80148b6:	e17d      	b.n	8014bb4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80148b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80148ba:	b2db      	uxtb	r3, r3
 80148bc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80148be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80148c0:	2101      	movs	r1, #1
 80148c2:	4618      	mov	r0, r3
 80148c4:	f001 fa00 	bl	8015cc8 <ff_convert>
 80148c8:	4603      	mov	r3, r0
 80148ca:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80148cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	d101      	bne.n	80148d6 <create_name+0x8a>
 80148d2:	2306      	movs	r3, #6
 80148d4:	e16e      	b.n	8014bb4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80148d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80148d8:	2b7f      	cmp	r3, #127	; 0x7f
 80148da:	d809      	bhi.n	80148f0 <create_name+0xa4>
 80148dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80148de:	4619      	mov	r1, r3
 80148e0:	488d      	ldr	r0, [pc, #564]	; (8014b18 <create_name+0x2cc>)
 80148e2:	f7fe fc3e 	bl	8013162 <chk_chr>
 80148e6:	4603      	mov	r3, r0
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d001      	beq.n	80148f0 <create_name+0xa4>
 80148ec:	2306      	movs	r3, #6
 80148ee:	e161      	b.n	8014bb4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80148f0:	697b      	ldr	r3, [r7, #20]
 80148f2:	1c5a      	adds	r2, r3, #1
 80148f4:	617a      	str	r2, [r7, #20]
 80148f6:	005b      	lsls	r3, r3, #1
 80148f8:	68fa      	ldr	r2, [r7, #12]
 80148fa:	4413      	add	r3, r2
 80148fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80148fe:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8014900:	e7b4      	b.n	801486c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8014902:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8014904:	693a      	ldr	r2, [r7, #16]
 8014906:	69bb      	ldr	r3, [r7, #24]
 8014908:	441a      	add	r2, r3
 801490a:	683b      	ldr	r3, [r7, #0]
 801490c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801490e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014910:	2b1f      	cmp	r3, #31
 8014912:	d801      	bhi.n	8014918 <create_name+0xcc>
 8014914:	2304      	movs	r3, #4
 8014916:	e000      	b.n	801491a <create_name+0xce>
 8014918:	2300      	movs	r3, #0
 801491a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801491e:	e011      	b.n	8014944 <create_name+0xf8>
		w = lfn[di - 1];
 8014920:	697a      	ldr	r2, [r7, #20]
 8014922:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014926:	4413      	add	r3, r2
 8014928:	005b      	lsls	r3, r3, #1
 801492a:	68fa      	ldr	r2, [r7, #12]
 801492c:	4413      	add	r3, r2
 801492e:	881b      	ldrh	r3, [r3, #0]
 8014930:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8014932:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014934:	2b20      	cmp	r3, #32
 8014936:	d002      	beq.n	801493e <create_name+0xf2>
 8014938:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801493a:	2b2e      	cmp	r3, #46	; 0x2e
 801493c:	d106      	bne.n	801494c <create_name+0x100>
		di--;
 801493e:	697b      	ldr	r3, [r7, #20]
 8014940:	3b01      	subs	r3, #1
 8014942:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8014944:	697b      	ldr	r3, [r7, #20]
 8014946:	2b00      	cmp	r3, #0
 8014948:	d1ea      	bne.n	8014920 <create_name+0xd4>
 801494a:	e000      	b.n	801494e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 801494c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801494e:	697b      	ldr	r3, [r7, #20]
 8014950:	005b      	lsls	r3, r3, #1
 8014952:	68fa      	ldr	r2, [r7, #12]
 8014954:	4413      	add	r3, r2
 8014956:	2200      	movs	r2, #0
 8014958:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801495a:	697b      	ldr	r3, [r7, #20]
 801495c:	2b00      	cmp	r3, #0
 801495e:	d101      	bne.n	8014964 <create_name+0x118>
 8014960:	2306      	movs	r3, #6
 8014962:	e127      	b.n	8014bb4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	3324      	adds	r3, #36	; 0x24
 8014968:	220b      	movs	r2, #11
 801496a:	2120      	movs	r1, #32
 801496c:	4618      	mov	r0, r3
 801496e:	f7fe fbb6 	bl	80130de <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8014972:	2300      	movs	r3, #0
 8014974:	61bb      	str	r3, [r7, #24]
 8014976:	e002      	b.n	801497e <create_name+0x132>
 8014978:	69bb      	ldr	r3, [r7, #24]
 801497a:	3301      	adds	r3, #1
 801497c:	61bb      	str	r3, [r7, #24]
 801497e:	69bb      	ldr	r3, [r7, #24]
 8014980:	005b      	lsls	r3, r3, #1
 8014982:	68fa      	ldr	r2, [r7, #12]
 8014984:	4413      	add	r3, r2
 8014986:	881b      	ldrh	r3, [r3, #0]
 8014988:	2b20      	cmp	r3, #32
 801498a:	d0f5      	beq.n	8014978 <create_name+0x12c>
 801498c:	69bb      	ldr	r3, [r7, #24]
 801498e:	005b      	lsls	r3, r3, #1
 8014990:	68fa      	ldr	r2, [r7, #12]
 8014992:	4413      	add	r3, r2
 8014994:	881b      	ldrh	r3, [r3, #0]
 8014996:	2b2e      	cmp	r3, #46	; 0x2e
 8014998:	d0ee      	beq.n	8014978 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801499a:	69bb      	ldr	r3, [r7, #24]
 801499c:	2b00      	cmp	r3, #0
 801499e:	d009      	beq.n	80149b4 <create_name+0x168>
 80149a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80149a4:	f043 0303 	orr.w	r3, r3, #3
 80149a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80149ac:	e002      	b.n	80149b4 <create_name+0x168>
 80149ae:	697b      	ldr	r3, [r7, #20]
 80149b0:	3b01      	subs	r3, #1
 80149b2:	617b      	str	r3, [r7, #20]
 80149b4:	697b      	ldr	r3, [r7, #20]
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d009      	beq.n	80149ce <create_name+0x182>
 80149ba:	697a      	ldr	r2, [r7, #20]
 80149bc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80149c0:	4413      	add	r3, r2
 80149c2:	005b      	lsls	r3, r3, #1
 80149c4:	68fa      	ldr	r2, [r7, #12]
 80149c6:	4413      	add	r3, r2
 80149c8:	881b      	ldrh	r3, [r3, #0]
 80149ca:	2b2e      	cmp	r3, #46	; 0x2e
 80149cc:	d1ef      	bne.n	80149ae <create_name+0x162>

	i = b = 0; ni = 8;
 80149ce:	2300      	movs	r3, #0
 80149d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80149d4:	2300      	movs	r3, #0
 80149d6:	623b      	str	r3, [r7, #32]
 80149d8:	2308      	movs	r3, #8
 80149da:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80149dc:	69bb      	ldr	r3, [r7, #24]
 80149de:	1c5a      	adds	r2, r3, #1
 80149e0:	61ba      	str	r2, [r7, #24]
 80149e2:	005b      	lsls	r3, r3, #1
 80149e4:	68fa      	ldr	r2, [r7, #12]
 80149e6:	4413      	add	r3, r2
 80149e8:	881b      	ldrh	r3, [r3, #0]
 80149ea:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80149ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	f000 8090 	beq.w	8014b14 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80149f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80149f6:	2b20      	cmp	r3, #32
 80149f8:	d006      	beq.n	8014a08 <create_name+0x1bc>
 80149fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80149fc:	2b2e      	cmp	r3, #46	; 0x2e
 80149fe:	d10a      	bne.n	8014a16 <create_name+0x1ca>
 8014a00:	69ba      	ldr	r2, [r7, #24]
 8014a02:	697b      	ldr	r3, [r7, #20]
 8014a04:	429a      	cmp	r2, r3
 8014a06:	d006      	beq.n	8014a16 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8014a08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014a0c:	f043 0303 	orr.w	r3, r3, #3
 8014a10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014a14:	e07d      	b.n	8014b12 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8014a16:	6a3a      	ldr	r2, [r7, #32]
 8014a18:	69fb      	ldr	r3, [r7, #28]
 8014a1a:	429a      	cmp	r2, r3
 8014a1c:	d203      	bcs.n	8014a26 <create_name+0x1da>
 8014a1e:	69ba      	ldr	r2, [r7, #24]
 8014a20:	697b      	ldr	r3, [r7, #20]
 8014a22:	429a      	cmp	r2, r3
 8014a24:	d123      	bne.n	8014a6e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8014a26:	69fb      	ldr	r3, [r7, #28]
 8014a28:	2b0b      	cmp	r3, #11
 8014a2a:	d106      	bne.n	8014a3a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8014a2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014a30:	f043 0303 	orr.w	r3, r3, #3
 8014a34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014a38:	e075      	b.n	8014b26 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8014a3a:	69ba      	ldr	r2, [r7, #24]
 8014a3c:	697b      	ldr	r3, [r7, #20]
 8014a3e:	429a      	cmp	r2, r3
 8014a40:	d005      	beq.n	8014a4e <create_name+0x202>
 8014a42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014a46:	f043 0303 	orr.w	r3, r3, #3
 8014a4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8014a4e:	69ba      	ldr	r2, [r7, #24]
 8014a50:	697b      	ldr	r3, [r7, #20]
 8014a52:	429a      	cmp	r2, r3
 8014a54:	d866      	bhi.n	8014b24 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8014a56:	697b      	ldr	r3, [r7, #20]
 8014a58:	61bb      	str	r3, [r7, #24]
 8014a5a:	2308      	movs	r3, #8
 8014a5c:	623b      	str	r3, [r7, #32]
 8014a5e:	230b      	movs	r3, #11
 8014a60:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8014a62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014a66:	009b      	lsls	r3, r3, #2
 8014a68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8014a6c:	e051      	b.n	8014b12 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8014a6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014a70:	2b7f      	cmp	r3, #127	; 0x7f
 8014a72:	d914      	bls.n	8014a9e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8014a74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014a76:	2100      	movs	r1, #0
 8014a78:	4618      	mov	r0, r3
 8014a7a:	f001 f925 	bl	8015cc8 <ff_convert>
 8014a7e:	4603      	mov	r3, r0
 8014a80:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8014a82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	d004      	beq.n	8014a92 <create_name+0x246>
 8014a88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014a8a:	3b80      	subs	r3, #128	; 0x80
 8014a8c:	4a23      	ldr	r2, [pc, #140]	; (8014b1c <create_name+0x2d0>)
 8014a8e:	5cd3      	ldrb	r3, [r2, r3]
 8014a90:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8014a92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014a96:	f043 0302 	orr.w	r3, r3, #2
 8014a9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8014a9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d007      	beq.n	8014ab4 <create_name+0x268>
 8014aa4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014aa6:	4619      	mov	r1, r3
 8014aa8:	481d      	ldr	r0, [pc, #116]	; (8014b20 <create_name+0x2d4>)
 8014aaa:	f7fe fb5a 	bl	8013162 <chk_chr>
 8014aae:	4603      	mov	r3, r0
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d008      	beq.n	8014ac6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8014ab4:	235f      	movs	r3, #95	; 0x5f
 8014ab6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8014ab8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014abc:	f043 0303 	orr.w	r3, r3, #3
 8014ac0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014ac4:	e01b      	b.n	8014afe <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8014ac6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014ac8:	2b40      	cmp	r3, #64	; 0x40
 8014aca:	d909      	bls.n	8014ae0 <create_name+0x294>
 8014acc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014ace:	2b5a      	cmp	r3, #90	; 0x5a
 8014ad0:	d806      	bhi.n	8014ae0 <create_name+0x294>
					b |= 2;
 8014ad2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014ad6:	f043 0302 	orr.w	r3, r3, #2
 8014ada:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8014ade:	e00e      	b.n	8014afe <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8014ae0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014ae2:	2b60      	cmp	r3, #96	; 0x60
 8014ae4:	d90b      	bls.n	8014afe <create_name+0x2b2>
 8014ae6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014ae8:	2b7a      	cmp	r3, #122	; 0x7a
 8014aea:	d808      	bhi.n	8014afe <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8014aec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014af0:	f043 0301 	orr.w	r3, r3, #1
 8014af4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8014af8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014afa:	3b20      	subs	r3, #32
 8014afc:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8014afe:	6a3b      	ldr	r3, [r7, #32]
 8014b00:	1c5a      	adds	r2, r3, #1
 8014b02:	623a      	str	r2, [r7, #32]
 8014b04:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014b06:	b2d1      	uxtb	r1, r2
 8014b08:	687a      	ldr	r2, [r7, #4]
 8014b0a:	4413      	add	r3, r2
 8014b0c:	460a      	mov	r2, r1
 8014b0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8014b12:	e763      	b.n	80149dc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8014b14:	bf00      	nop
 8014b16:	e006      	b.n	8014b26 <create_name+0x2da>
 8014b18:	0801b260 	.word	0x0801b260
 8014b1c:	0801b308 	.word	0x0801b308
 8014b20:	0801b26c 	.word	0x0801b26c
			if (si > di) break;			/* No extension */
 8014b24:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8014b2c:	2be5      	cmp	r3, #229	; 0xe5
 8014b2e:	d103      	bne.n	8014b38 <create_name+0x2ec>
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	2205      	movs	r2, #5
 8014b34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8014b38:	69fb      	ldr	r3, [r7, #28]
 8014b3a:	2b08      	cmp	r3, #8
 8014b3c:	d104      	bne.n	8014b48 <create_name+0x2fc>
 8014b3e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014b42:	009b      	lsls	r3, r3, #2
 8014b44:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8014b48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014b4c:	f003 030c 	and.w	r3, r3, #12
 8014b50:	2b0c      	cmp	r3, #12
 8014b52:	d005      	beq.n	8014b60 <create_name+0x314>
 8014b54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014b58:	f003 0303 	and.w	r3, r3, #3
 8014b5c:	2b03      	cmp	r3, #3
 8014b5e:	d105      	bne.n	8014b6c <create_name+0x320>
 8014b60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b64:	f043 0302 	orr.w	r3, r3, #2
 8014b68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8014b6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b70:	f003 0302 	and.w	r3, r3, #2
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d117      	bne.n	8014ba8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8014b78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014b7c:	f003 0303 	and.w	r3, r3, #3
 8014b80:	2b01      	cmp	r3, #1
 8014b82:	d105      	bne.n	8014b90 <create_name+0x344>
 8014b84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b88:	f043 0310 	orr.w	r3, r3, #16
 8014b8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8014b90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014b94:	f003 030c 	and.w	r3, r3, #12
 8014b98:	2b04      	cmp	r3, #4
 8014b9a:	d105      	bne.n	8014ba8 <create_name+0x35c>
 8014b9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014ba0:	f043 0308 	orr.w	r3, r3, #8
 8014ba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8014bae:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8014bb2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8014bb4:	4618      	mov	r0, r3
 8014bb6:	3728      	adds	r7, #40	; 0x28
 8014bb8:	46bd      	mov	sp, r7
 8014bba:	bd80      	pop	{r7, pc}

08014bbc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8014bbc:	b580      	push	{r7, lr}
 8014bbe:	b086      	sub	sp, #24
 8014bc0:	af00      	add	r7, sp, #0
 8014bc2:	6078      	str	r0, [r7, #4]
 8014bc4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8014bca:	693b      	ldr	r3, [r7, #16]
 8014bcc:	681b      	ldr	r3, [r3, #0]
 8014bce:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8014bd0:	e002      	b.n	8014bd8 <follow_path+0x1c>
 8014bd2:	683b      	ldr	r3, [r7, #0]
 8014bd4:	3301      	adds	r3, #1
 8014bd6:	603b      	str	r3, [r7, #0]
 8014bd8:	683b      	ldr	r3, [r7, #0]
 8014bda:	781b      	ldrb	r3, [r3, #0]
 8014bdc:	2b2f      	cmp	r3, #47	; 0x2f
 8014bde:	d0f8      	beq.n	8014bd2 <follow_path+0x16>
 8014be0:	683b      	ldr	r3, [r7, #0]
 8014be2:	781b      	ldrb	r3, [r3, #0]
 8014be4:	2b5c      	cmp	r3, #92	; 0x5c
 8014be6:	d0f4      	beq.n	8014bd2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8014be8:	693b      	ldr	r3, [r7, #16]
 8014bea:	2200      	movs	r2, #0
 8014bec:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8014bee:	683b      	ldr	r3, [r7, #0]
 8014bf0:	781b      	ldrb	r3, [r3, #0]
 8014bf2:	2b1f      	cmp	r3, #31
 8014bf4:	d80a      	bhi.n	8014c0c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	2280      	movs	r2, #128	; 0x80
 8014bfa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8014bfe:	2100      	movs	r1, #0
 8014c00:	6878      	ldr	r0, [r7, #4]
 8014c02:	f7ff f81f 	bl	8013c44 <dir_sdi>
 8014c06:	4603      	mov	r3, r0
 8014c08:	75fb      	strb	r3, [r7, #23]
 8014c0a:	e048      	b.n	8014c9e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8014c0c:	463b      	mov	r3, r7
 8014c0e:	4619      	mov	r1, r3
 8014c10:	6878      	ldr	r0, [r7, #4]
 8014c12:	f7ff fe1b 	bl	801484c <create_name>
 8014c16:	4603      	mov	r3, r0
 8014c18:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8014c1a:	7dfb      	ldrb	r3, [r7, #23]
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d139      	bne.n	8014c94 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8014c20:	6878      	ldr	r0, [r7, #4]
 8014c22:	f7ff fb7c 	bl	801431e <dir_find>
 8014c26:	4603      	mov	r3, r0
 8014c28:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014c30:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8014c32:	7dfb      	ldrb	r3, [r7, #23]
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d00a      	beq.n	8014c4e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8014c38:	7dfb      	ldrb	r3, [r7, #23]
 8014c3a:	2b04      	cmp	r3, #4
 8014c3c:	d12c      	bne.n	8014c98 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8014c3e:	7afb      	ldrb	r3, [r7, #11]
 8014c40:	f003 0304 	and.w	r3, r3, #4
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d127      	bne.n	8014c98 <follow_path+0xdc>
 8014c48:	2305      	movs	r3, #5
 8014c4a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8014c4c:	e024      	b.n	8014c98 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8014c4e:	7afb      	ldrb	r3, [r7, #11]
 8014c50:	f003 0304 	and.w	r3, r3, #4
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d121      	bne.n	8014c9c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8014c58:	693b      	ldr	r3, [r7, #16]
 8014c5a:	799b      	ldrb	r3, [r3, #6]
 8014c5c:	f003 0310 	and.w	r3, r3, #16
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d102      	bne.n	8014c6a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8014c64:	2305      	movs	r3, #5
 8014c66:	75fb      	strb	r3, [r7, #23]
 8014c68:	e019      	b.n	8014c9e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	695b      	ldr	r3, [r3, #20]
 8014c74:	68fa      	ldr	r2, [r7, #12]
 8014c76:	8992      	ldrh	r2, [r2, #12]
 8014c78:	fbb3 f0f2 	udiv	r0, r3, r2
 8014c7c:	fb00 f202 	mul.w	r2, r0, r2
 8014c80:	1a9b      	subs	r3, r3, r2
 8014c82:	440b      	add	r3, r1
 8014c84:	4619      	mov	r1, r3
 8014c86:	68f8      	ldr	r0, [r7, #12]
 8014c88:	f7ff f982 	bl	8013f90 <ld_clust>
 8014c8c:	4602      	mov	r2, r0
 8014c8e:	693b      	ldr	r3, [r7, #16]
 8014c90:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8014c92:	e7bb      	b.n	8014c0c <follow_path+0x50>
			if (res != FR_OK) break;
 8014c94:	bf00      	nop
 8014c96:	e002      	b.n	8014c9e <follow_path+0xe2>
				break;
 8014c98:	bf00      	nop
 8014c9a:	e000      	b.n	8014c9e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8014c9c:	bf00      	nop
			}
		}
	}

	return res;
 8014c9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014ca0:	4618      	mov	r0, r3
 8014ca2:	3718      	adds	r7, #24
 8014ca4:	46bd      	mov	sp, r7
 8014ca6:	bd80      	pop	{r7, pc}

08014ca8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8014ca8:	b480      	push	{r7}
 8014caa:	b087      	sub	sp, #28
 8014cac:	af00      	add	r7, sp, #0
 8014cae:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8014cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8014cb4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	681b      	ldr	r3, [r3, #0]
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d031      	beq.n	8014d22 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	681b      	ldr	r3, [r3, #0]
 8014cc2:	617b      	str	r3, [r7, #20]
 8014cc4:	e002      	b.n	8014ccc <get_ldnumber+0x24>
 8014cc6:	697b      	ldr	r3, [r7, #20]
 8014cc8:	3301      	adds	r3, #1
 8014cca:	617b      	str	r3, [r7, #20]
 8014ccc:	697b      	ldr	r3, [r7, #20]
 8014cce:	781b      	ldrb	r3, [r3, #0]
 8014cd0:	2b1f      	cmp	r3, #31
 8014cd2:	d903      	bls.n	8014cdc <get_ldnumber+0x34>
 8014cd4:	697b      	ldr	r3, [r7, #20]
 8014cd6:	781b      	ldrb	r3, [r3, #0]
 8014cd8:	2b3a      	cmp	r3, #58	; 0x3a
 8014cda:	d1f4      	bne.n	8014cc6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8014cdc:	697b      	ldr	r3, [r7, #20]
 8014cde:	781b      	ldrb	r3, [r3, #0]
 8014ce0:	2b3a      	cmp	r3, #58	; 0x3a
 8014ce2:	d11c      	bne.n	8014d1e <get_ldnumber+0x76>
			tp = *path;
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	681b      	ldr	r3, [r3, #0]
 8014ce8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8014cea:	68fb      	ldr	r3, [r7, #12]
 8014cec:	1c5a      	adds	r2, r3, #1
 8014cee:	60fa      	str	r2, [r7, #12]
 8014cf0:	781b      	ldrb	r3, [r3, #0]
 8014cf2:	3b30      	subs	r3, #48	; 0x30
 8014cf4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8014cf6:	68bb      	ldr	r3, [r7, #8]
 8014cf8:	2b09      	cmp	r3, #9
 8014cfa:	d80e      	bhi.n	8014d1a <get_ldnumber+0x72>
 8014cfc:	68fa      	ldr	r2, [r7, #12]
 8014cfe:	697b      	ldr	r3, [r7, #20]
 8014d00:	429a      	cmp	r2, r3
 8014d02:	d10a      	bne.n	8014d1a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8014d04:	68bb      	ldr	r3, [r7, #8]
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d107      	bne.n	8014d1a <get_ldnumber+0x72>
					vol = (int)i;
 8014d0a:	68bb      	ldr	r3, [r7, #8]
 8014d0c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8014d0e:	697b      	ldr	r3, [r7, #20]
 8014d10:	3301      	adds	r3, #1
 8014d12:	617b      	str	r3, [r7, #20]
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	697a      	ldr	r2, [r7, #20]
 8014d18:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8014d1a:	693b      	ldr	r3, [r7, #16]
 8014d1c:	e002      	b.n	8014d24 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8014d1e:	2300      	movs	r3, #0
 8014d20:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8014d22:	693b      	ldr	r3, [r7, #16]
}
 8014d24:	4618      	mov	r0, r3
 8014d26:	371c      	adds	r7, #28
 8014d28:	46bd      	mov	sp, r7
 8014d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d2e:	4770      	bx	lr

08014d30 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8014d30:	b580      	push	{r7, lr}
 8014d32:	b082      	sub	sp, #8
 8014d34:	af00      	add	r7, sp, #0
 8014d36:	6078      	str	r0, [r7, #4]
 8014d38:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	2200      	movs	r2, #0
 8014d3e:	70da      	strb	r2, [r3, #3]
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	f04f 32ff 	mov.w	r2, #4294967295
 8014d46:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8014d48:	6839      	ldr	r1, [r7, #0]
 8014d4a:	6878      	ldr	r0, [r7, #4]
 8014d4c:	f7fe fb98 	bl	8013480 <move_window>
 8014d50:	4603      	mov	r3, r0
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d001      	beq.n	8014d5a <check_fs+0x2a>
 8014d56:	2304      	movs	r3, #4
 8014d58:	e038      	b.n	8014dcc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	3338      	adds	r3, #56	; 0x38
 8014d5e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014d62:	4618      	mov	r0, r3
 8014d64:	f7fe f918 	bl	8012f98 <ld_word>
 8014d68:	4603      	mov	r3, r0
 8014d6a:	461a      	mov	r2, r3
 8014d6c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8014d70:	429a      	cmp	r2, r3
 8014d72:	d001      	beq.n	8014d78 <check_fs+0x48>
 8014d74:	2303      	movs	r3, #3
 8014d76:	e029      	b.n	8014dcc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014d7e:	2be9      	cmp	r3, #233	; 0xe9
 8014d80:	d009      	beq.n	8014d96 <check_fs+0x66>
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014d88:	2beb      	cmp	r3, #235	; 0xeb
 8014d8a:	d11e      	bne.n	8014dca <check_fs+0x9a>
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8014d92:	2b90      	cmp	r3, #144	; 0x90
 8014d94:	d119      	bne.n	8014dca <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	3338      	adds	r3, #56	; 0x38
 8014d9a:	3336      	adds	r3, #54	; 0x36
 8014d9c:	4618      	mov	r0, r3
 8014d9e:	f7fe f913 	bl	8012fc8 <ld_dword>
 8014da2:	4603      	mov	r3, r0
 8014da4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8014da8:	4a0a      	ldr	r2, [pc, #40]	; (8014dd4 <check_fs+0xa4>)
 8014daa:	4293      	cmp	r3, r2
 8014dac:	d101      	bne.n	8014db2 <check_fs+0x82>
 8014dae:	2300      	movs	r3, #0
 8014db0:	e00c      	b.n	8014dcc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	3338      	adds	r3, #56	; 0x38
 8014db6:	3352      	adds	r3, #82	; 0x52
 8014db8:	4618      	mov	r0, r3
 8014dba:	f7fe f905 	bl	8012fc8 <ld_dword>
 8014dbe:	4603      	mov	r3, r0
 8014dc0:	4a05      	ldr	r2, [pc, #20]	; (8014dd8 <check_fs+0xa8>)
 8014dc2:	4293      	cmp	r3, r2
 8014dc4:	d101      	bne.n	8014dca <check_fs+0x9a>
 8014dc6:	2300      	movs	r3, #0
 8014dc8:	e000      	b.n	8014dcc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8014dca:	2302      	movs	r3, #2
}
 8014dcc:	4618      	mov	r0, r3
 8014dce:	3708      	adds	r7, #8
 8014dd0:	46bd      	mov	sp, r7
 8014dd2:	bd80      	pop	{r7, pc}
 8014dd4:	00544146 	.word	0x00544146
 8014dd8:	33544146 	.word	0x33544146

08014ddc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8014ddc:	b580      	push	{r7, lr}
 8014dde:	b096      	sub	sp, #88	; 0x58
 8014de0:	af00      	add	r7, sp, #0
 8014de2:	60f8      	str	r0, [r7, #12]
 8014de4:	60b9      	str	r1, [r7, #8]
 8014de6:	4613      	mov	r3, r2
 8014de8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8014dea:	68bb      	ldr	r3, [r7, #8]
 8014dec:	2200      	movs	r2, #0
 8014dee:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8014df0:	68f8      	ldr	r0, [r7, #12]
 8014df2:	f7ff ff59 	bl	8014ca8 <get_ldnumber>
 8014df6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8014df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	da01      	bge.n	8014e02 <find_volume+0x26>
 8014dfe:	230b      	movs	r3, #11
 8014e00:	e265      	b.n	80152ce <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8014e02:	4a9f      	ldr	r2, [pc, #636]	; (8015080 <find_volume+0x2a4>)
 8014e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014e0a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8014e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d101      	bne.n	8014e16 <find_volume+0x3a>
 8014e12:	230c      	movs	r3, #12
 8014e14:	e25b      	b.n	80152ce <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8014e16:	68bb      	ldr	r3, [r7, #8]
 8014e18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014e1a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8014e1c:	79fb      	ldrb	r3, [r7, #7]
 8014e1e:	f023 0301 	bic.w	r3, r3, #1
 8014e22:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8014e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e26:	781b      	ldrb	r3, [r3, #0]
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d01a      	beq.n	8014e62 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8014e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e2e:	785b      	ldrb	r3, [r3, #1]
 8014e30:	4618      	mov	r0, r3
 8014e32:	f7fe f813 	bl	8012e5c <disk_status>
 8014e36:	4603      	mov	r3, r0
 8014e38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8014e3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014e40:	f003 0301 	and.w	r3, r3, #1
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d10c      	bne.n	8014e62 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8014e48:	79fb      	ldrb	r3, [r7, #7]
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d007      	beq.n	8014e5e <find_volume+0x82>
 8014e4e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014e52:	f003 0304 	and.w	r3, r3, #4
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d001      	beq.n	8014e5e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8014e5a:	230a      	movs	r3, #10
 8014e5c:	e237      	b.n	80152ce <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8014e5e:	2300      	movs	r3, #0
 8014e60:	e235      	b.n	80152ce <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8014e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e64:	2200      	movs	r2, #0
 8014e66:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8014e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014e6a:	b2da      	uxtb	r2, r3
 8014e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e6e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8014e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e72:	785b      	ldrb	r3, [r3, #1]
 8014e74:	4618      	mov	r0, r3
 8014e76:	f7fe f80b 	bl	8012e90 <disk_initialize>
 8014e7a:	4603      	mov	r3, r0
 8014e7c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8014e80:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014e84:	f003 0301 	and.w	r3, r3, #1
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d001      	beq.n	8014e90 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8014e8c:	2303      	movs	r3, #3
 8014e8e:	e21e      	b.n	80152ce <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8014e90:	79fb      	ldrb	r3, [r7, #7]
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d007      	beq.n	8014ea6 <find_volume+0xca>
 8014e96:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014e9a:	f003 0304 	and.w	r3, r3, #4
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	d001      	beq.n	8014ea6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8014ea2:	230a      	movs	r3, #10
 8014ea4:	e213      	b.n	80152ce <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8014ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ea8:	7858      	ldrb	r0, [r3, #1]
 8014eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014eac:	330c      	adds	r3, #12
 8014eae:	461a      	mov	r2, r3
 8014eb0:	2102      	movs	r1, #2
 8014eb2:	f7fe f853 	bl	8012f5c <disk_ioctl>
 8014eb6:	4603      	mov	r3, r0
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d001      	beq.n	8014ec0 <find_volume+0xe4>
 8014ebc:	2301      	movs	r3, #1
 8014ebe:	e206      	b.n	80152ce <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8014ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ec2:	899b      	ldrh	r3, [r3, #12]
 8014ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014ec8:	d80d      	bhi.n	8014ee6 <find_volume+0x10a>
 8014eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ecc:	899b      	ldrh	r3, [r3, #12]
 8014ece:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014ed2:	d308      	bcc.n	8014ee6 <find_volume+0x10a>
 8014ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ed6:	899b      	ldrh	r3, [r3, #12]
 8014ed8:	461a      	mov	r2, r3
 8014eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014edc:	899b      	ldrh	r3, [r3, #12]
 8014ede:	3b01      	subs	r3, #1
 8014ee0:	4013      	ands	r3, r2
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d001      	beq.n	8014eea <find_volume+0x10e>
 8014ee6:	2301      	movs	r3, #1
 8014ee8:	e1f1      	b.n	80152ce <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8014eea:	2300      	movs	r3, #0
 8014eec:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8014eee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014ef0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014ef2:	f7ff ff1d 	bl	8014d30 <check_fs>
 8014ef6:	4603      	mov	r3, r0
 8014ef8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8014efc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014f00:	2b02      	cmp	r3, #2
 8014f02:	d149      	bne.n	8014f98 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8014f04:	2300      	movs	r3, #0
 8014f06:	643b      	str	r3, [r7, #64]	; 0x40
 8014f08:	e01e      	b.n	8014f48 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8014f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f0c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8014f10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014f12:	011b      	lsls	r3, r3, #4
 8014f14:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8014f18:	4413      	add	r3, r2
 8014f1a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8014f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f1e:	3304      	adds	r3, #4
 8014f20:	781b      	ldrb	r3, [r3, #0]
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d006      	beq.n	8014f34 <find_volume+0x158>
 8014f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f28:	3308      	adds	r3, #8
 8014f2a:	4618      	mov	r0, r3
 8014f2c:	f7fe f84c 	bl	8012fc8 <ld_dword>
 8014f30:	4602      	mov	r2, r0
 8014f32:	e000      	b.n	8014f36 <find_volume+0x15a>
 8014f34:	2200      	movs	r2, #0
 8014f36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014f38:	009b      	lsls	r3, r3, #2
 8014f3a:	3358      	adds	r3, #88	; 0x58
 8014f3c:	443b      	add	r3, r7
 8014f3e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8014f42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014f44:	3301      	adds	r3, #1
 8014f46:	643b      	str	r3, [r7, #64]	; 0x40
 8014f48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014f4a:	2b03      	cmp	r3, #3
 8014f4c:	d9dd      	bls.n	8014f0a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8014f4e:	2300      	movs	r3, #0
 8014f50:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8014f52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d002      	beq.n	8014f5e <find_volume+0x182>
 8014f58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014f5a:	3b01      	subs	r3, #1
 8014f5c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8014f5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014f60:	009b      	lsls	r3, r3, #2
 8014f62:	3358      	adds	r3, #88	; 0x58
 8014f64:	443b      	add	r3, r7
 8014f66:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8014f6a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8014f6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d005      	beq.n	8014f7e <find_volume+0x1a2>
 8014f72:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014f74:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014f76:	f7ff fedb 	bl	8014d30 <check_fs>
 8014f7a:	4603      	mov	r3, r0
 8014f7c:	e000      	b.n	8014f80 <find_volume+0x1a4>
 8014f7e:	2303      	movs	r3, #3
 8014f80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8014f84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014f88:	2b01      	cmp	r3, #1
 8014f8a:	d905      	bls.n	8014f98 <find_volume+0x1bc>
 8014f8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014f8e:	3301      	adds	r3, #1
 8014f90:	643b      	str	r3, [r7, #64]	; 0x40
 8014f92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014f94:	2b03      	cmp	r3, #3
 8014f96:	d9e2      	bls.n	8014f5e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8014f98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014f9c:	2b04      	cmp	r3, #4
 8014f9e:	d101      	bne.n	8014fa4 <find_volume+0x1c8>
 8014fa0:	2301      	movs	r3, #1
 8014fa2:	e194      	b.n	80152ce <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8014fa4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014fa8:	2b01      	cmp	r3, #1
 8014faa:	d901      	bls.n	8014fb0 <find_volume+0x1d4>
 8014fac:	230d      	movs	r3, #13
 8014fae:	e18e      	b.n	80152ce <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8014fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fb2:	3338      	adds	r3, #56	; 0x38
 8014fb4:	330b      	adds	r3, #11
 8014fb6:	4618      	mov	r0, r3
 8014fb8:	f7fd ffee 	bl	8012f98 <ld_word>
 8014fbc:	4603      	mov	r3, r0
 8014fbe:	461a      	mov	r2, r3
 8014fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fc2:	899b      	ldrh	r3, [r3, #12]
 8014fc4:	429a      	cmp	r2, r3
 8014fc6:	d001      	beq.n	8014fcc <find_volume+0x1f0>
 8014fc8:	230d      	movs	r3, #13
 8014fca:	e180      	b.n	80152ce <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8014fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fce:	3338      	adds	r3, #56	; 0x38
 8014fd0:	3316      	adds	r3, #22
 8014fd2:	4618      	mov	r0, r3
 8014fd4:	f7fd ffe0 	bl	8012f98 <ld_word>
 8014fd8:	4603      	mov	r3, r0
 8014fda:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8014fdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d106      	bne.n	8014ff0 <find_volume+0x214>
 8014fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fe4:	3338      	adds	r3, #56	; 0x38
 8014fe6:	3324      	adds	r3, #36	; 0x24
 8014fe8:	4618      	mov	r0, r3
 8014fea:	f7fd ffed 	bl	8012fc8 <ld_dword>
 8014fee:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8014ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ff2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014ff4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8014ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ff8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8014ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ffe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8015000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015002:	789b      	ldrb	r3, [r3, #2]
 8015004:	2b01      	cmp	r3, #1
 8015006:	d005      	beq.n	8015014 <find_volume+0x238>
 8015008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801500a:	789b      	ldrb	r3, [r3, #2]
 801500c:	2b02      	cmp	r3, #2
 801500e:	d001      	beq.n	8015014 <find_volume+0x238>
 8015010:	230d      	movs	r3, #13
 8015012:	e15c      	b.n	80152ce <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8015014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015016:	789b      	ldrb	r3, [r3, #2]
 8015018:	461a      	mov	r2, r3
 801501a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801501c:	fb02 f303 	mul.w	r3, r2, r3
 8015020:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8015022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015024:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015028:	b29a      	uxth	r2, r3
 801502a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801502c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801502e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015030:	895b      	ldrh	r3, [r3, #10]
 8015032:	2b00      	cmp	r3, #0
 8015034:	d008      	beq.n	8015048 <find_volume+0x26c>
 8015036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015038:	895b      	ldrh	r3, [r3, #10]
 801503a:	461a      	mov	r2, r3
 801503c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801503e:	895b      	ldrh	r3, [r3, #10]
 8015040:	3b01      	subs	r3, #1
 8015042:	4013      	ands	r3, r2
 8015044:	2b00      	cmp	r3, #0
 8015046:	d001      	beq.n	801504c <find_volume+0x270>
 8015048:	230d      	movs	r3, #13
 801504a:	e140      	b.n	80152ce <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801504c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801504e:	3338      	adds	r3, #56	; 0x38
 8015050:	3311      	adds	r3, #17
 8015052:	4618      	mov	r0, r3
 8015054:	f7fd ffa0 	bl	8012f98 <ld_word>
 8015058:	4603      	mov	r3, r0
 801505a:	461a      	mov	r2, r3
 801505c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801505e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8015060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015062:	891b      	ldrh	r3, [r3, #8]
 8015064:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015066:	8992      	ldrh	r2, [r2, #12]
 8015068:	0952      	lsrs	r2, r2, #5
 801506a:	b292      	uxth	r2, r2
 801506c:	fbb3 f1f2 	udiv	r1, r3, r2
 8015070:	fb01 f202 	mul.w	r2, r1, r2
 8015074:	1a9b      	subs	r3, r3, r2
 8015076:	b29b      	uxth	r3, r3
 8015078:	2b00      	cmp	r3, #0
 801507a:	d003      	beq.n	8015084 <find_volume+0x2a8>
 801507c:	230d      	movs	r3, #13
 801507e:	e126      	b.n	80152ce <find_volume+0x4f2>
 8015080:	200060f8 	.word	0x200060f8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8015084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015086:	3338      	adds	r3, #56	; 0x38
 8015088:	3313      	adds	r3, #19
 801508a:	4618      	mov	r0, r3
 801508c:	f7fd ff84 	bl	8012f98 <ld_word>
 8015090:	4603      	mov	r3, r0
 8015092:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8015094:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015096:	2b00      	cmp	r3, #0
 8015098:	d106      	bne.n	80150a8 <find_volume+0x2cc>
 801509a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801509c:	3338      	adds	r3, #56	; 0x38
 801509e:	3320      	adds	r3, #32
 80150a0:	4618      	mov	r0, r3
 80150a2:	f7fd ff91 	bl	8012fc8 <ld_dword>
 80150a6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80150a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150aa:	3338      	adds	r3, #56	; 0x38
 80150ac:	330e      	adds	r3, #14
 80150ae:	4618      	mov	r0, r3
 80150b0:	f7fd ff72 	bl	8012f98 <ld_word>
 80150b4:	4603      	mov	r3, r0
 80150b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80150b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d101      	bne.n	80150c2 <find_volume+0x2e6>
 80150be:	230d      	movs	r3, #13
 80150c0:	e105      	b.n	80152ce <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80150c2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80150c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80150c6:	4413      	add	r3, r2
 80150c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80150ca:	8911      	ldrh	r1, [r2, #8]
 80150cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80150ce:	8992      	ldrh	r2, [r2, #12]
 80150d0:	0952      	lsrs	r2, r2, #5
 80150d2:	b292      	uxth	r2, r2
 80150d4:	fbb1 f2f2 	udiv	r2, r1, r2
 80150d8:	b292      	uxth	r2, r2
 80150da:	4413      	add	r3, r2
 80150dc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80150de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80150e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150e2:	429a      	cmp	r2, r3
 80150e4:	d201      	bcs.n	80150ea <find_volume+0x30e>
 80150e6:	230d      	movs	r3, #13
 80150e8:	e0f1      	b.n	80152ce <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80150ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80150ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150ee:	1ad3      	subs	r3, r2, r3
 80150f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80150f2:	8952      	ldrh	r2, [r2, #10]
 80150f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80150f8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80150fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d101      	bne.n	8015104 <find_volume+0x328>
 8015100:	230d      	movs	r3, #13
 8015102:	e0e4      	b.n	80152ce <find_volume+0x4f2>
		fmt = FS_FAT32;
 8015104:	2303      	movs	r3, #3
 8015106:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801510c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8015110:	4293      	cmp	r3, r2
 8015112:	d802      	bhi.n	801511a <find_volume+0x33e>
 8015114:	2302      	movs	r3, #2
 8015116:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801511c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8015120:	4293      	cmp	r3, r2
 8015122:	d802      	bhi.n	801512a <find_volume+0x34e>
 8015124:	2301      	movs	r3, #1
 8015126:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801512a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801512c:	1c9a      	adds	r2, r3, #2
 801512e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015130:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8015132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015134:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015136:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8015138:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801513a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801513c:	441a      	add	r2, r3
 801513e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015140:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8015142:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015146:	441a      	add	r2, r3
 8015148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801514a:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 801514c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015150:	2b03      	cmp	r3, #3
 8015152:	d11e      	bne.n	8015192 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8015154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015156:	3338      	adds	r3, #56	; 0x38
 8015158:	332a      	adds	r3, #42	; 0x2a
 801515a:	4618      	mov	r0, r3
 801515c:	f7fd ff1c 	bl	8012f98 <ld_word>
 8015160:	4603      	mov	r3, r0
 8015162:	2b00      	cmp	r3, #0
 8015164:	d001      	beq.n	801516a <find_volume+0x38e>
 8015166:	230d      	movs	r3, #13
 8015168:	e0b1      	b.n	80152ce <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801516a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801516c:	891b      	ldrh	r3, [r3, #8]
 801516e:	2b00      	cmp	r3, #0
 8015170:	d001      	beq.n	8015176 <find_volume+0x39a>
 8015172:	230d      	movs	r3, #13
 8015174:	e0ab      	b.n	80152ce <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8015176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015178:	3338      	adds	r3, #56	; 0x38
 801517a:	332c      	adds	r3, #44	; 0x2c
 801517c:	4618      	mov	r0, r3
 801517e:	f7fd ff23 	bl	8012fc8 <ld_dword>
 8015182:	4602      	mov	r2, r0
 8015184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015186:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8015188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801518a:	69db      	ldr	r3, [r3, #28]
 801518c:	009b      	lsls	r3, r3, #2
 801518e:	647b      	str	r3, [r7, #68]	; 0x44
 8015190:	e01f      	b.n	80151d2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8015192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015194:	891b      	ldrh	r3, [r3, #8]
 8015196:	2b00      	cmp	r3, #0
 8015198:	d101      	bne.n	801519e <find_volume+0x3c2>
 801519a:	230d      	movs	r3, #13
 801519c:	e097      	b.n	80152ce <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801519e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80151a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80151a4:	441a      	add	r2, r3
 80151a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151a8:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80151aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80151ae:	2b02      	cmp	r3, #2
 80151b0:	d103      	bne.n	80151ba <find_volume+0x3de>
 80151b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151b4:	69db      	ldr	r3, [r3, #28]
 80151b6:	005b      	lsls	r3, r3, #1
 80151b8:	e00a      	b.n	80151d0 <find_volume+0x3f4>
 80151ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151bc:	69da      	ldr	r2, [r3, #28]
 80151be:	4613      	mov	r3, r2
 80151c0:	005b      	lsls	r3, r3, #1
 80151c2:	4413      	add	r3, r2
 80151c4:	085a      	lsrs	r2, r3, #1
 80151c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151c8:	69db      	ldr	r3, [r3, #28]
 80151ca:	f003 0301 	and.w	r3, r3, #1
 80151ce:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80151d0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80151d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151d4:	6a1a      	ldr	r2, [r3, #32]
 80151d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151d8:	899b      	ldrh	r3, [r3, #12]
 80151da:	4619      	mov	r1, r3
 80151dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80151de:	440b      	add	r3, r1
 80151e0:	3b01      	subs	r3, #1
 80151e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80151e4:	8989      	ldrh	r1, [r1, #12]
 80151e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80151ea:	429a      	cmp	r2, r3
 80151ec:	d201      	bcs.n	80151f2 <find_volume+0x416>
 80151ee:	230d      	movs	r3, #13
 80151f0:	e06d      	b.n	80152ce <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80151f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151f4:	f04f 32ff 	mov.w	r2, #4294967295
 80151f8:	619a      	str	r2, [r3, #24]
 80151fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151fc:	699a      	ldr	r2, [r3, #24]
 80151fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015200:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8015202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015204:	2280      	movs	r2, #128	; 0x80
 8015206:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8015208:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801520c:	2b03      	cmp	r3, #3
 801520e:	d149      	bne.n	80152a4 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8015210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015212:	3338      	adds	r3, #56	; 0x38
 8015214:	3330      	adds	r3, #48	; 0x30
 8015216:	4618      	mov	r0, r3
 8015218:	f7fd febe 	bl	8012f98 <ld_word>
 801521c:	4603      	mov	r3, r0
 801521e:	2b01      	cmp	r3, #1
 8015220:	d140      	bne.n	80152a4 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8015222:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015224:	3301      	adds	r3, #1
 8015226:	4619      	mov	r1, r3
 8015228:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801522a:	f7fe f929 	bl	8013480 <move_window>
 801522e:	4603      	mov	r3, r0
 8015230:	2b00      	cmp	r3, #0
 8015232:	d137      	bne.n	80152a4 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8015234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015236:	2200      	movs	r2, #0
 8015238:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801523a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801523c:	3338      	adds	r3, #56	; 0x38
 801523e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015242:	4618      	mov	r0, r3
 8015244:	f7fd fea8 	bl	8012f98 <ld_word>
 8015248:	4603      	mov	r3, r0
 801524a:	461a      	mov	r2, r3
 801524c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8015250:	429a      	cmp	r2, r3
 8015252:	d127      	bne.n	80152a4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8015254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015256:	3338      	adds	r3, #56	; 0x38
 8015258:	4618      	mov	r0, r3
 801525a:	f7fd feb5 	bl	8012fc8 <ld_dword>
 801525e:	4603      	mov	r3, r0
 8015260:	4a1d      	ldr	r2, [pc, #116]	; (80152d8 <find_volume+0x4fc>)
 8015262:	4293      	cmp	r3, r2
 8015264:	d11e      	bne.n	80152a4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8015266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015268:	3338      	adds	r3, #56	; 0x38
 801526a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801526e:	4618      	mov	r0, r3
 8015270:	f7fd feaa 	bl	8012fc8 <ld_dword>
 8015274:	4603      	mov	r3, r0
 8015276:	4a19      	ldr	r2, [pc, #100]	; (80152dc <find_volume+0x500>)
 8015278:	4293      	cmp	r3, r2
 801527a:	d113      	bne.n	80152a4 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801527c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801527e:	3338      	adds	r3, #56	; 0x38
 8015280:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8015284:	4618      	mov	r0, r3
 8015286:	f7fd fe9f 	bl	8012fc8 <ld_dword>
 801528a:	4602      	mov	r2, r0
 801528c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801528e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8015290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015292:	3338      	adds	r3, #56	; 0x38
 8015294:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8015298:	4618      	mov	r0, r3
 801529a:	f7fd fe95 	bl	8012fc8 <ld_dword>
 801529e:	4602      	mov	r2, r0
 80152a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152a2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80152a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152a6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80152aa:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80152ac:	4b0c      	ldr	r3, [pc, #48]	; (80152e0 <find_volume+0x504>)
 80152ae:	881b      	ldrh	r3, [r3, #0]
 80152b0:	3301      	adds	r3, #1
 80152b2:	b29a      	uxth	r2, r3
 80152b4:	4b0a      	ldr	r3, [pc, #40]	; (80152e0 <find_volume+0x504>)
 80152b6:	801a      	strh	r2, [r3, #0]
 80152b8:	4b09      	ldr	r3, [pc, #36]	; (80152e0 <find_volume+0x504>)
 80152ba:	881a      	ldrh	r2, [r3, #0]
 80152bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152be:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80152c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152c2:	4a08      	ldr	r2, [pc, #32]	; (80152e4 <find_volume+0x508>)
 80152c4:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80152c6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80152c8:	f7fe f872 	bl	80133b0 <clear_lock>
#endif
	return FR_OK;
 80152cc:	2300      	movs	r3, #0
}
 80152ce:	4618      	mov	r0, r3
 80152d0:	3758      	adds	r7, #88	; 0x58
 80152d2:	46bd      	mov	sp, r7
 80152d4:	bd80      	pop	{r7, pc}
 80152d6:	bf00      	nop
 80152d8:	41615252 	.word	0x41615252
 80152dc:	61417272 	.word	0x61417272
 80152e0:	200060fc 	.word	0x200060fc
 80152e4:	20006150 	.word	0x20006150

080152e8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80152e8:	b580      	push	{r7, lr}
 80152ea:	b084      	sub	sp, #16
 80152ec:	af00      	add	r7, sp, #0
 80152ee:	6078      	str	r0, [r7, #4]
 80152f0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80152f2:	2309      	movs	r3, #9
 80152f4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	d01c      	beq.n	8015336 <validate+0x4e>
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	681b      	ldr	r3, [r3, #0]
 8015300:	2b00      	cmp	r3, #0
 8015302:	d018      	beq.n	8015336 <validate+0x4e>
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	681b      	ldr	r3, [r3, #0]
 8015308:	781b      	ldrb	r3, [r3, #0]
 801530a:	2b00      	cmp	r3, #0
 801530c:	d013      	beq.n	8015336 <validate+0x4e>
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	889a      	ldrh	r2, [r3, #4]
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	681b      	ldr	r3, [r3, #0]
 8015316:	88db      	ldrh	r3, [r3, #6]
 8015318:	429a      	cmp	r2, r3
 801531a:	d10c      	bne.n	8015336 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	785b      	ldrb	r3, [r3, #1]
 8015322:	4618      	mov	r0, r3
 8015324:	f7fd fd9a 	bl	8012e5c <disk_status>
 8015328:	4603      	mov	r3, r0
 801532a:	f003 0301 	and.w	r3, r3, #1
 801532e:	2b00      	cmp	r3, #0
 8015330:	d101      	bne.n	8015336 <validate+0x4e>
			res = FR_OK;
 8015332:	2300      	movs	r3, #0
 8015334:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8015336:	7bfb      	ldrb	r3, [r7, #15]
 8015338:	2b00      	cmp	r3, #0
 801533a:	d102      	bne.n	8015342 <validate+0x5a>
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	681b      	ldr	r3, [r3, #0]
 8015340:	e000      	b.n	8015344 <validate+0x5c>
 8015342:	2300      	movs	r3, #0
 8015344:	683a      	ldr	r2, [r7, #0]
 8015346:	6013      	str	r3, [r2, #0]
	return res;
 8015348:	7bfb      	ldrb	r3, [r7, #15]
}
 801534a:	4618      	mov	r0, r3
 801534c:	3710      	adds	r7, #16
 801534e:	46bd      	mov	sp, r7
 8015350:	bd80      	pop	{r7, pc}
	...

08015354 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8015354:	b580      	push	{r7, lr}
 8015356:	b088      	sub	sp, #32
 8015358:	af00      	add	r7, sp, #0
 801535a:	60f8      	str	r0, [r7, #12]
 801535c:	60b9      	str	r1, [r7, #8]
 801535e:	4613      	mov	r3, r2
 8015360:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8015362:	68bb      	ldr	r3, [r7, #8]
 8015364:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8015366:	f107 0310 	add.w	r3, r7, #16
 801536a:	4618      	mov	r0, r3
 801536c:	f7ff fc9c 	bl	8014ca8 <get_ldnumber>
 8015370:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8015372:	69fb      	ldr	r3, [r7, #28]
 8015374:	2b00      	cmp	r3, #0
 8015376:	da01      	bge.n	801537c <f_mount+0x28>
 8015378:	230b      	movs	r3, #11
 801537a:	e02b      	b.n	80153d4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801537c:	4a17      	ldr	r2, [pc, #92]	; (80153dc <f_mount+0x88>)
 801537e:	69fb      	ldr	r3, [r7, #28]
 8015380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015384:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8015386:	69bb      	ldr	r3, [r7, #24]
 8015388:	2b00      	cmp	r3, #0
 801538a:	d005      	beq.n	8015398 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801538c:	69b8      	ldr	r0, [r7, #24]
 801538e:	f7fe f80f 	bl	80133b0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8015392:	69bb      	ldr	r3, [r7, #24]
 8015394:	2200      	movs	r2, #0
 8015396:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8015398:	68fb      	ldr	r3, [r7, #12]
 801539a:	2b00      	cmp	r3, #0
 801539c:	d002      	beq.n	80153a4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801539e:	68fb      	ldr	r3, [r7, #12]
 80153a0:	2200      	movs	r2, #0
 80153a2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80153a4:	68fa      	ldr	r2, [r7, #12]
 80153a6:	490d      	ldr	r1, [pc, #52]	; (80153dc <f_mount+0x88>)
 80153a8:	69fb      	ldr	r3, [r7, #28]
 80153aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80153ae:	68fb      	ldr	r3, [r7, #12]
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	d002      	beq.n	80153ba <f_mount+0x66>
 80153b4:	79fb      	ldrb	r3, [r7, #7]
 80153b6:	2b01      	cmp	r3, #1
 80153b8:	d001      	beq.n	80153be <f_mount+0x6a>
 80153ba:	2300      	movs	r3, #0
 80153bc:	e00a      	b.n	80153d4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80153be:	f107 010c 	add.w	r1, r7, #12
 80153c2:	f107 0308 	add.w	r3, r7, #8
 80153c6:	2200      	movs	r2, #0
 80153c8:	4618      	mov	r0, r3
 80153ca:	f7ff fd07 	bl	8014ddc <find_volume>
 80153ce:	4603      	mov	r3, r0
 80153d0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80153d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80153d4:	4618      	mov	r0, r3
 80153d6:	3720      	adds	r7, #32
 80153d8:	46bd      	mov	sp, r7
 80153da:	bd80      	pop	{r7, pc}
 80153dc:	200060f8 	.word	0x200060f8

080153e0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80153e0:	b580      	push	{r7, lr}
 80153e2:	b09a      	sub	sp, #104	; 0x68
 80153e4:	af00      	add	r7, sp, #0
 80153e6:	60f8      	str	r0, [r7, #12]
 80153e8:	60b9      	str	r1, [r7, #8]
 80153ea:	4613      	mov	r3, r2
 80153ec:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80153ee:	68fb      	ldr	r3, [r7, #12]
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d101      	bne.n	80153f8 <f_open+0x18>
 80153f4:	2309      	movs	r3, #9
 80153f6:	e1bb      	b.n	8015770 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80153f8:	79fb      	ldrb	r3, [r7, #7]
 80153fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80153fe:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8015400:	79fa      	ldrb	r2, [r7, #7]
 8015402:	f107 0114 	add.w	r1, r7, #20
 8015406:	f107 0308 	add.w	r3, r7, #8
 801540a:	4618      	mov	r0, r3
 801540c:	f7ff fce6 	bl	8014ddc <find_volume>
 8015410:	4603      	mov	r3, r0
 8015412:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8015416:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801541a:	2b00      	cmp	r3, #0
 801541c:	f040 819f 	bne.w	801575e <f_open+0x37e>
		dj.obj.fs = fs;
 8015420:	697b      	ldr	r3, [r7, #20]
 8015422:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8015424:	68ba      	ldr	r2, [r7, #8]
 8015426:	f107 0318 	add.w	r3, r7, #24
 801542a:	4611      	mov	r1, r2
 801542c:	4618      	mov	r0, r3
 801542e:	f7ff fbc5 	bl	8014bbc <follow_path>
 8015432:	4603      	mov	r3, r0
 8015434:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8015438:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801543c:	2b00      	cmp	r3, #0
 801543e:	d11a      	bne.n	8015476 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8015440:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015444:	b25b      	sxtb	r3, r3
 8015446:	2b00      	cmp	r3, #0
 8015448:	da03      	bge.n	8015452 <f_open+0x72>
				res = FR_INVALID_NAME;
 801544a:	2306      	movs	r3, #6
 801544c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8015450:	e011      	b.n	8015476 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8015452:	79fb      	ldrb	r3, [r7, #7]
 8015454:	f023 0301 	bic.w	r3, r3, #1
 8015458:	2b00      	cmp	r3, #0
 801545a:	bf14      	ite	ne
 801545c:	2301      	movne	r3, #1
 801545e:	2300      	moveq	r3, #0
 8015460:	b2db      	uxtb	r3, r3
 8015462:	461a      	mov	r2, r3
 8015464:	f107 0318 	add.w	r3, r7, #24
 8015468:	4611      	mov	r1, r2
 801546a:	4618      	mov	r0, r3
 801546c:	f7fd fe94 	bl	8013198 <chk_lock>
 8015470:	4603      	mov	r3, r0
 8015472:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8015476:	79fb      	ldrb	r3, [r7, #7]
 8015478:	f003 031c 	and.w	r3, r3, #28
 801547c:	2b00      	cmp	r3, #0
 801547e:	d07f      	beq.n	8015580 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8015480:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8015484:	2b00      	cmp	r3, #0
 8015486:	d017      	beq.n	80154b8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8015488:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801548c:	2b04      	cmp	r3, #4
 801548e:	d10e      	bne.n	80154ae <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8015490:	f7fd fede 	bl	8013250 <enq_lock>
 8015494:	4603      	mov	r3, r0
 8015496:	2b00      	cmp	r3, #0
 8015498:	d006      	beq.n	80154a8 <f_open+0xc8>
 801549a:	f107 0318 	add.w	r3, r7, #24
 801549e:	4618      	mov	r0, r3
 80154a0:	f7fe fffe 	bl	80144a0 <dir_register>
 80154a4:	4603      	mov	r3, r0
 80154a6:	e000      	b.n	80154aa <f_open+0xca>
 80154a8:	2312      	movs	r3, #18
 80154aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80154ae:	79fb      	ldrb	r3, [r7, #7]
 80154b0:	f043 0308 	orr.w	r3, r3, #8
 80154b4:	71fb      	strb	r3, [r7, #7]
 80154b6:	e010      	b.n	80154da <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80154b8:	7fbb      	ldrb	r3, [r7, #30]
 80154ba:	f003 0311 	and.w	r3, r3, #17
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d003      	beq.n	80154ca <f_open+0xea>
					res = FR_DENIED;
 80154c2:	2307      	movs	r3, #7
 80154c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80154c8:	e007      	b.n	80154da <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80154ca:	79fb      	ldrb	r3, [r7, #7]
 80154cc:	f003 0304 	and.w	r3, r3, #4
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d002      	beq.n	80154da <f_open+0xfa>
 80154d4:	2308      	movs	r3, #8
 80154d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80154da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d168      	bne.n	80155b4 <f_open+0x1d4>
 80154e2:	79fb      	ldrb	r3, [r7, #7]
 80154e4:	f003 0308 	and.w	r3, r3, #8
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d063      	beq.n	80155b4 <f_open+0x1d4>
				dw = GET_FATTIME();
 80154ec:	f7fd fa82 	bl	80129f4 <get_fattime>
 80154f0:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80154f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80154f4:	330e      	adds	r3, #14
 80154f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80154f8:	4618      	mov	r0, r3
 80154fa:	f7fd fda3 	bl	8013044 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80154fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015500:	3316      	adds	r3, #22
 8015502:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015504:	4618      	mov	r0, r3
 8015506:	f7fd fd9d 	bl	8013044 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801550a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801550c:	330b      	adds	r3, #11
 801550e:	2220      	movs	r2, #32
 8015510:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8015512:	697b      	ldr	r3, [r7, #20]
 8015514:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015516:	4611      	mov	r1, r2
 8015518:	4618      	mov	r0, r3
 801551a:	f7fe fd39 	bl	8013f90 <ld_clust>
 801551e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8015520:	697b      	ldr	r3, [r7, #20]
 8015522:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015524:	2200      	movs	r2, #0
 8015526:	4618      	mov	r0, r3
 8015528:	f7fe fd51 	bl	8013fce <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801552c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801552e:	331c      	adds	r3, #28
 8015530:	2100      	movs	r1, #0
 8015532:	4618      	mov	r0, r3
 8015534:	f7fd fd86 	bl	8013044 <st_dword>
					fs->wflag = 1;
 8015538:	697b      	ldr	r3, [r7, #20]
 801553a:	2201      	movs	r2, #1
 801553c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801553e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015540:	2b00      	cmp	r3, #0
 8015542:	d037      	beq.n	80155b4 <f_open+0x1d4>
						dw = fs->winsect;
 8015544:	697b      	ldr	r3, [r7, #20]
 8015546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015548:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801554a:	f107 0318 	add.w	r3, r7, #24
 801554e:	2200      	movs	r2, #0
 8015550:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015552:	4618      	mov	r0, r3
 8015554:	f7fe fa41 	bl	80139da <remove_chain>
 8015558:	4603      	mov	r3, r0
 801555a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 801555e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8015562:	2b00      	cmp	r3, #0
 8015564:	d126      	bne.n	80155b4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8015566:	697b      	ldr	r3, [r7, #20]
 8015568:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801556a:	4618      	mov	r0, r3
 801556c:	f7fd ff88 	bl	8013480 <move_window>
 8015570:	4603      	mov	r3, r0
 8015572:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8015576:	697b      	ldr	r3, [r7, #20]
 8015578:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801557a:	3a01      	subs	r2, #1
 801557c:	615a      	str	r2, [r3, #20]
 801557e:	e019      	b.n	80155b4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8015580:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8015584:	2b00      	cmp	r3, #0
 8015586:	d115      	bne.n	80155b4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8015588:	7fbb      	ldrb	r3, [r7, #30]
 801558a:	f003 0310 	and.w	r3, r3, #16
 801558e:	2b00      	cmp	r3, #0
 8015590:	d003      	beq.n	801559a <f_open+0x1ba>
					res = FR_NO_FILE;
 8015592:	2304      	movs	r3, #4
 8015594:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8015598:	e00c      	b.n	80155b4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801559a:	79fb      	ldrb	r3, [r7, #7]
 801559c:	f003 0302 	and.w	r3, r3, #2
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d007      	beq.n	80155b4 <f_open+0x1d4>
 80155a4:	7fbb      	ldrb	r3, [r7, #30]
 80155a6:	f003 0301 	and.w	r3, r3, #1
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d002      	beq.n	80155b4 <f_open+0x1d4>
						res = FR_DENIED;
 80155ae:	2307      	movs	r3, #7
 80155b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80155b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d128      	bne.n	801560e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80155bc:	79fb      	ldrb	r3, [r7, #7]
 80155be:	f003 0308 	and.w	r3, r3, #8
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	d003      	beq.n	80155ce <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80155c6:	79fb      	ldrb	r3, [r7, #7]
 80155c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80155cc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80155ce:	697b      	ldr	r3, [r7, #20]
 80155d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80155d2:	68fb      	ldr	r3, [r7, #12]
 80155d4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80155d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80155d8:	68fb      	ldr	r3, [r7, #12]
 80155da:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80155dc:	79fb      	ldrb	r3, [r7, #7]
 80155de:	f023 0301 	bic.w	r3, r3, #1
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	bf14      	ite	ne
 80155e6:	2301      	movne	r3, #1
 80155e8:	2300      	moveq	r3, #0
 80155ea:	b2db      	uxtb	r3, r3
 80155ec:	461a      	mov	r2, r3
 80155ee:	f107 0318 	add.w	r3, r7, #24
 80155f2:	4611      	mov	r1, r2
 80155f4:	4618      	mov	r0, r3
 80155f6:	f7fd fe4d 	bl	8013294 <inc_lock>
 80155fa:	4602      	mov	r2, r0
 80155fc:	68fb      	ldr	r3, [r7, #12]
 80155fe:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8015600:	68fb      	ldr	r3, [r7, #12]
 8015602:	691b      	ldr	r3, [r3, #16]
 8015604:	2b00      	cmp	r3, #0
 8015606:	d102      	bne.n	801560e <f_open+0x22e>
 8015608:	2302      	movs	r3, #2
 801560a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801560e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8015612:	2b00      	cmp	r3, #0
 8015614:	f040 80a3 	bne.w	801575e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8015618:	697b      	ldr	r3, [r7, #20]
 801561a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801561c:	4611      	mov	r1, r2
 801561e:	4618      	mov	r0, r3
 8015620:	f7fe fcb6 	bl	8013f90 <ld_clust>
 8015624:	4602      	mov	r2, r0
 8015626:	68fb      	ldr	r3, [r7, #12]
 8015628:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801562a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801562c:	331c      	adds	r3, #28
 801562e:	4618      	mov	r0, r3
 8015630:	f7fd fcca 	bl	8012fc8 <ld_dword>
 8015634:	4602      	mov	r2, r0
 8015636:	68fb      	ldr	r3, [r7, #12]
 8015638:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801563a:	68fb      	ldr	r3, [r7, #12]
 801563c:	2200      	movs	r2, #0
 801563e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8015640:	697a      	ldr	r2, [r7, #20]
 8015642:	68fb      	ldr	r3, [r7, #12]
 8015644:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8015646:	697b      	ldr	r3, [r7, #20]
 8015648:	88da      	ldrh	r2, [r3, #6]
 801564a:	68fb      	ldr	r3, [r7, #12]
 801564c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801564e:	68fb      	ldr	r3, [r7, #12]
 8015650:	79fa      	ldrb	r2, [r7, #7]
 8015652:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8015654:	68fb      	ldr	r3, [r7, #12]
 8015656:	2200      	movs	r2, #0
 8015658:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801565a:	68fb      	ldr	r3, [r7, #12]
 801565c:	2200      	movs	r2, #0
 801565e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8015660:	68fb      	ldr	r3, [r7, #12]
 8015662:	2200      	movs	r2, #0
 8015664:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8015666:	68fb      	ldr	r3, [r7, #12]
 8015668:	3330      	adds	r3, #48	; 0x30
 801566a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801566e:	2100      	movs	r1, #0
 8015670:	4618      	mov	r0, r3
 8015672:	f7fd fd34 	bl	80130de <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8015676:	79fb      	ldrb	r3, [r7, #7]
 8015678:	f003 0320 	and.w	r3, r3, #32
 801567c:	2b00      	cmp	r3, #0
 801567e:	d06e      	beq.n	801575e <f_open+0x37e>
 8015680:	68fb      	ldr	r3, [r7, #12]
 8015682:	68db      	ldr	r3, [r3, #12]
 8015684:	2b00      	cmp	r3, #0
 8015686:	d06a      	beq.n	801575e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8015688:	68fb      	ldr	r3, [r7, #12]
 801568a:	68da      	ldr	r2, [r3, #12]
 801568c:	68fb      	ldr	r3, [r7, #12]
 801568e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8015690:	697b      	ldr	r3, [r7, #20]
 8015692:	895b      	ldrh	r3, [r3, #10]
 8015694:	461a      	mov	r2, r3
 8015696:	697b      	ldr	r3, [r7, #20]
 8015698:	899b      	ldrh	r3, [r3, #12]
 801569a:	fb02 f303 	mul.w	r3, r2, r3
 801569e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80156a0:	68fb      	ldr	r3, [r7, #12]
 80156a2:	689b      	ldr	r3, [r3, #8]
 80156a4:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80156a6:	68fb      	ldr	r3, [r7, #12]
 80156a8:	68db      	ldr	r3, [r3, #12]
 80156aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80156ac:	e016      	b.n	80156dc <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80156ae:	68fb      	ldr	r3, [r7, #12]
 80156b0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80156b2:	4618      	mov	r0, r3
 80156b4:	f7fd ffa1 	bl	80135fa <get_fat>
 80156b8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80156ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80156bc:	2b01      	cmp	r3, #1
 80156be:	d802      	bhi.n	80156c6 <f_open+0x2e6>
 80156c0:	2302      	movs	r3, #2
 80156c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80156c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80156c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80156cc:	d102      	bne.n	80156d4 <f_open+0x2f4>
 80156ce:	2301      	movs	r3, #1
 80156d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80156d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80156d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80156d8:	1ad3      	subs	r3, r2, r3
 80156da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80156dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d103      	bne.n	80156ec <f_open+0x30c>
 80156e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80156e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80156e8:	429a      	cmp	r2, r3
 80156ea:	d8e0      	bhi.n	80156ae <f_open+0x2ce>
				}
				fp->clust = clst;
 80156ec:	68fb      	ldr	r3, [r7, #12]
 80156ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80156f0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80156f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	d131      	bne.n	801575e <f_open+0x37e>
 80156fa:	697b      	ldr	r3, [r7, #20]
 80156fc:	899b      	ldrh	r3, [r3, #12]
 80156fe:	461a      	mov	r2, r3
 8015700:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015702:	fbb3 f1f2 	udiv	r1, r3, r2
 8015706:	fb01 f202 	mul.w	r2, r1, r2
 801570a:	1a9b      	subs	r3, r3, r2
 801570c:	2b00      	cmp	r3, #0
 801570e:	d026      	beq.n	801575e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8015710:	697b      	ldr	r3, [r7, #20]
 8015712:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8015714:	4618      	mov	r0, r3
 8015716:	f7fd ff51 	bl	80135bc <clust2sect>
 801571a:	64f8      	str	r0, [r7, #76]	; 0x4c
 801571c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801571e:	2b00      	cmp	r3, #0
 8015720:	d103      	bne.n	801572a <f_open+0x34a>
						res = FR_INT_ERR;
 8015722:	2302      	movs	r3, #2
 8015724:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8015728:	e019      	b.n	801575e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801572a:	697b      	ldr	r3, [r7, #20]
 801572c:	899b      	ldrh	r3, [r3, #12]
 801572e:	461a      	mov	r2, r3
 8015730:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015732:	fbb3 f2f2 	udiv	r2, r3, r2
 8015736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015738:	441a      	add	r2, r3
 801573a:	68fb      	ldr	r3, [r7, #12]
 801573c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801573e:	697b      	ldr	r3, [r7, #20]
 8015740:	7858      	ldrb	r0, [r3, #1]
 8015742:	68fb      	ldr	r3, [r7, #12]
 8015744:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015748:	68fb      	ldr	r3, [r7, #12]
 801574a:	6a1a      	ldr	r2, [r3, #32]
 801574c:	2301      	movs	r3, #1
 801574e:	f7fd fbc5 	bl	8012edc <disk_read>
 8015752:	4603      	mov	r3, r0
 8015754:	2b00      	cmp	r3, #0
 8015756:	d002      	beq.n	801575e <f_open+0x37e>
 8015758:	2301      	movs	r3, #1
 801575a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801575e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8015762:	2b00      	cmp	r3, #0
 8015764:	d002      	beq.n	801576c <f_open+0x38c>
 8015766:	68fb      	ldr	r3, [r7, #12]
 8015768:	2200      	movs	r2, #0
 801576a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801576c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8015770:	4618      	mov	r0, r3
 8015772:	3768      	adds	r7, #104	; 0x68
 8015774:	46bd      	mov	sp, r7
 8015776:	bd80      	pop	{r7, pc}

08015778 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8015778:	b580      	push	{r7, lr}
 801577a:	b08c      	sub	sp, #48	; 0x30
 801577c:	af00      	add	r7, sp, #0
 801577e:	60f8      	str	r0, [r7, #12]
 8015780:	60b9      	str	r1, [r7, #8]
 8015782:	607a      	str	r2, [r7, #4]
 8015784:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8015786:	68bb      	ldr	r3, [r7, #8]
 8015788:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801578a:	683b      	ldr	r3, [r7, #0]
 801578c:	2200      	movs	r2, #0
 801578e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8015790:	68fb      	ldr	r3, [r7, #12]
 8015792:	f107 0210 	add.w	r2, r7, #16
 8015796:	4611      	mov	r1, r2
 8015798:	4618      	mov	r0, r3
 801579a:	f7ff fda5 	bl	80152e8 <validate>
 801579e:	4603      	mov	r3, r0
 80157a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80157a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d107      	bne.n	80157bc <f_write+0x44>
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	7d5b      	ldrb	r3, [r3, #21]
 80157b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80157b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d002      	beq.n	80157c2 <f_write+0x4a>
 80157bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80157c0:	e16a      	b.n	8015a98 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80157c2:	68fb      	ldr	r3, [r7, #12]
 80157c4:	7d1b      	ldrb	r3, [r3, #20]
 80157c6:	f003 0302 	and.w	r3, r3, #2
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	d101      	bne.n	80157d2 <f_write+0x5a>
 80157ce:	2307      	movs	r3, #7
 80157d0:	e162      	b.n	8015a98 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80157d2:	68fb      	ldr	r3, [r7, #12]
 80157d4:	699a      	ldr	r2, [r3, #24]
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	441a      	add	r2, r3
 80157da:	68fb      	ldr	r3, [r7, #12]
 80157dc:	699b      	ldr	r3, [r3, #24]
 80157de:	429a      	cmp	r2, r3
 80157e0:	f080 814c 	bcs.w	8015a7c <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80157e4:	68fb      	ldr	r3, [r7, #12]
 80157e6:	699b      	ldr	r3, [r3, #24]
 80157e8:	43db      	mvns	r3, r3
 80157ea:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80157ec:	e146      	b.n	8015a7c <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	699b      	ldr	r3, [r3, #24]
 80157f2:	693a      	ldr	r2, [r7, #16]
 80157f4:	8992      	ldrh	r2, [r2, #12]
 80157f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80157fa:	fb01 f202 	mul.w	r2, r1, r2
 80157fe:	1a9b      	subs	r3, r3, r2
 8015800:	2b00      	cmp	r3, #0
 8015802:	f040 80f1 	bne.w	80159e8 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8015806:	68fb      	ldr	r3, [r7, #12]
 8015808:	699b      	ldr	r3, [r3, #24]
 801580a:	693a      	ldr	r2, [r7, #16]
 801580c:	8992      	ldrh	r2, [r2, #12]
 801580e:	fbb3 f3f2 	udiv	r3, r3, r2
 8015812:	693a      	ldr	r2, [r7, #16]
 8015814:	8952      	ldrh	r2, [r2, #10]
 8015816:	3a01      	subs	r2, #1
 8015818:	4013      	ands	r3, r2
 801581a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801581c:	69bb      	ldr	r3, [r7, #24]
 801581e:	2b00      	cmp	r3, #0
 8015820:	d143      	bne.n	80158aa <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8015822:	68fb      	ldr	r3, [r7, #12]
 8015824:	699b      	ldr	r3, [r3, #24]
 8015826:	2b00      	cmp	r3, #0
 8015828:	d10c      	bne.n	8015844 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801582a:	68fb      	ldr	r3, [r7, #12]
 801582c:	689b      	ldr	r3, [r3, #8]
 801582e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8015830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015832:	2b00      	cmp	r3, #0
 8015834:	d11a      	bne.n	801586c <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8015836:	68fb      	ldr	r3, [r7, #12]
 8015838:	2100      	movs	r1, #0
 801583a:	4618      	mov	r0, r3
 801583c:	f7fe f932 	bl	8013aa4 <create_chain>
 8015840:	62b8      	str	r0, [r7, #40]	; 0x28
 8015842:	e013      	b.n	801586c <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8015844:	68fb      	ldr	r3, [r7, #12]
 8015846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015848:	2b00      	cmp	r3, #0
 801584a:	d007      	beq.n	801585c <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801584c:	68fb      	ldr	r3, [r7, #12]
 801584e:	699b      	ldr	r3, [r3, #24]
 8015850:	4619      	mov	r1, r3
 8015852:	68f8      	ldr	r0, [r7, #12]
 8015854:	f7fe f9be 	bl	8013bd4 <clmt_clust>
 8015858:	62b8      	str	r0, [r7, #40]	; 0x28
 801585a:	e007      	b.n	801586c <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801585c:	68fa      	ldr	r2, [r7, #12]
 801585e:	68fb      	ldr	r3, [r7, #12]
 8015860:	69db      	ldr	r3, [r3, #28]
 8015862:	4619      	mov	r1, r3
 8015864:	4610      	mov	r0, r2
 8015866:	f7fe f91d 	bl	8013aa4 <create_chain>
 801586a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801586c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801586e:	2b00      	cmp	r3, #0
 8015870:	f000 8109 	beq.w	8015a86 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8015874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015876:	2b01      	cmp	r3, #1
 8015878:	d104      	bne.n	8015884 <f_write+0x10c>
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	2202      	movs	r2, #2
 801587e:	755a      	strb	r2, [r3, #21]
 8015880:	2302      	movs	r3, #2
 8015882:	e109      	b.n	8015a98 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015886:	f1b3 3fff 	cmp.w	r3, #4294967295
 801588a:	d104      	bne.n	8015896 <f_write+0x11e>
 801588c:	68fb      	ldr	r3, [r7, #12]
 801588e:	2201      	movs	r2, #1
 8015890:	755a      	strb	r2, [r3, #21]
 8015892:	2301      	movs	r3, #1
 8015894:	e100      	b.n	8015a98 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8015896:	68fb      	ldr	r3, [r7, #12]
 8015898:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801589a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	689b      	ldr	r3, [r3, #8]
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	d102      	bne.n	80158aa <f_write+0x132>
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80158a8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80158aa:	68fb      	ldr	r3, [r7, #12]
 80158ac:	7d1b      	ldrb	r3, [r3, #20]
 80158ae:	b25b      	sxtb	r3, r3
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	da18      	bge.n	80158e6 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80158b4:	693b      	ldr	r3, [r7, #16]
 80158b6:	7858      	ldrb	r0, [r3, #1]
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80158be:	68fb      	ldr	r3, [r7, #12]
 80158c0:	6a1a      	ldr	r2, [r3, #32]
 80158c2:	2301      	movs	r3, #1
 80158c4:	f7fd fb2a 	bl	8012f1c <disk_write>
 80158c8:	4603      	mov	r3, r0
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	d004      	beq.n	80158d8 <f_write+0x160>
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	2201      	movs	r2, #1
 80158d2:	755a      	strb	r2, [r3, #21]
 80158d4:	2301      	movs	r3, #1
 80158d6:	e0df      	b.n	8015a98 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80158d8:	68fb      	ldr	r3, [r7, #12]
 80158da:	7d1b      	ldrb	r3, [r3, #20]
 80158dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80158e0:	b2da      	uxtb	r2, r3
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80158e6:	693a      	ldr	r2, [r7, #16]
 80158e8:	68fb      	ldr	r3, [r7, #12]
 80158ea:	69db      	ldr	r3, [r3, #28]
 80158ec:	4619      	mov	r1, r3
 80158ee:	4610      	mov	r0, r2
 80158f0:	f7fd fe64 	bl	80135bc <clust2sect>
 80158f4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80158f6:	697b      	ldr	r3, [r7, #20]
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	d104      	bne.n	8015906 <f_write+0x18e>
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	2202      	movs	r2, #2
 8015900:	755a      	strb	r2, [r3, #21]
 8015902:	2302      	movs	r3, #2
 8015904:	e0c8      	b.n	8015a98 <f_write+0x320>
			sect += csect;
 8015906:	697a      	ldr	r2, [r7, #20]
 8015908:	69bb      	ldr	r3, [r7, #24]
 801590a:	4413      	add	r3, r2
 801590c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801590e:	693b      	ldr	r3, [r7, #16]
 8015910:	899b      	ldrh	r3, [r3, #12]
 8015912:	461a      	mov	r2, r3
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	fbb3 f3f2 	udiv	r3, r3, r2
 801591a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801591c:	6a3b      	ldr	r3, [r7, #32]
 801591e:	2b00      	cmp	r3, #0
 8015920:	d043      	beq.n	80159aa <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8015922:	69ba      	ldr	r2, [r7, #24]
 8015924:	6a3b      	ldr	r3, [r7, #32]
 8015926:	4413      	add	r3, r2
 8015928:	693a      	ldr	r2, [r7, #16]
 801592a:	8952      	ldrh	r2, [r2, #10]
 801592c:	4293      	cmp	r3, r2
 801592e:	d905      	bls.n	801593c <f_write+0x1c4>
					cc = fs->csize - csect;
 8015930:	693b      	ldr	r3, [r7, #16]
 8015932:	895b      	ldrh	r3, [r3, #10]
 8015934:	461a      	mov	r2, r3
 8015936:	69bb      	ldr	r3, [r7, #24]
 8015938:	1ad3      	subs	r3, r2, r3
 801593a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801593c:	693b      	ldr	r3, [r7, #16]
 801593e:	7858      	ldrb	r0, [r3, #1]
 8015940:	6a3b      	ldr	r3, [r7, #32]
 8015942:	697a      	ldr	r2, [r7, #20]
 8015944:	69f9      	ldr	r1, [r7, #28]
 8015946:	f7fd fae9 	bl	8012f1c <disk_write>
 801594a:	4603      	mov	r3, r0
 801594c:	2b00      	cmp	r3, #0
 801594e:	d004      	beq.n	801595a <f_write+0x1e2>
 8015950:	68fb      	ldr	r3, [r7, #12]
 8015952:	2201      	movs	r2, #1
 8015954:	755a      	strb	r2, [r3, #21]
 8015956:	2301      	movs	r3, #1
 8015958:	e09e      	b.n	8015a98 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801595a:	68fb      	ldr	r3, [r7, #12]
 801595c:	6a1a      	ldr	r2, [r3, #32]
 801595e:	697b      	ldr	r3, [r7, #20]
 8015960:	1ad3      	subs	r3, r2, r3
 8015962:	6a3a      	ldr	r2, [r7, #32]
 8015964:	429a      	cmp	r2, r3
 8015966:	d918      	bls.n	801599a <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8015968:	68fb      	ldr	r3, [r7, #12]
 801596a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	6a1a      	ldr	r2, [r3, #32]
 8015972:	697b      	ldr	r3, [r7, #20]
 8015974:	1ad3      	subs	r3, r2, r3
 8015976:	693a      	ldr	r2, [r7, #16]
 8015978:	8992      	ldrh	r2, [r2, #12]
 801597a:	fb02 f303 	mul.w	r3, r2, r3
 801597e:	69fa      	ldr	r2, [r7, #28]
 8015980:	18d1      	adds	r1, r2, r3
 8015982:	693b      	ldr	r3, [r7, #16]
 8015984:	899b      	ldrh	r3, [r3, #12]
 8015986:	461a      	mov	r2, r3
 8015988:	f7fd fb88 	bl	801309c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801598c:	68fb      	ldr	r3, [r7, #12]
 801598e:	7d1b      	ldrb	r3, [r3, #20]
 8015990:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015994:	b2da      	uxtb	r2, r3
 8015996:	68fb      	ldr	r3, [r7, #12]
 8015998:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801599a:	693b      	ldr	r3, [r7, #16]
 801599c:	899b      	ldrh	r3, [r3, #12]
 801599e:	461a      	mov	r2, r3
 80159a0:	6a3b      	ldr	r3, [r7, #32]
 80159a2:	fb02 f303 	mul.w	r3, r2, r3
 80159a6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80159a8:	e04b      	b.n	8015a42 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80159aa:	68fb      	ldr	r3, [r7, #12]
 80159ac:	6a1b      	ldr	r3, [r3, #32]
 80159ae:	697a      	ldr	r2, [r7, #20]
 80159b0:	429a      	cmp	r2, r3
 80159b2:	d016      	beq.n	80159e2 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80159b4:	68fb      	ldr	r3, [r7, #12]
 80159b6:	699a      	ldr	r2, [r3, #24]
 80159b8:	68fb      	ldr	r3, [r7, #12]
 80159ba:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80159bc:	429a      	cmp	r2, r3
 80159be:	d210      	bcs.n	80159e2 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80159c0:	693b      	ldr	r3, [r7, #16]
 80159c2:	7858      	ldrb	r0, [r3, #1]
 80159c4:	68fb      	ldr	r3, [r7, #12]
 80159c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80159ca:	2301      	movs	r3, #1
 80159cc:	697a      	ldr	r2, [r7, #20]
 80159ce:	f7fd fa85 	bl	8012edc <disk_read>
 80159d2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d004      	beq.n	80159e2 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80159d8:	68fb      	ldr	r3, [r7, #12]
 80159da:	2201      	movs	r2, #1
 80159dc:	755a      	strb	r2, [r3, #21]
 80159de:	2301      	movs	r3, #1
 80159e0:	e05a      	b.n	8015a98 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80159e2:	68fb      	ldr	r3, [r7, #12]
 80159e4:	697a      	ldr	r2, [r7, #20]
 80159e6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80159e8:	693b      	ldr	r3, [r7, #16]
 80159ea:	899b      	ldrh	r3, [r3, #12]
 80159ec:	4618      	mov	r0, r3
 80159ee:	68fb      	ldr	r3, [r7, #12]
 80159f0:	699b      	ldr	r3, [r3, #24]
 80159f2:	693a      	ldr	r2, [r7, #16]
 80159f4:	8992      	ldrh	r2, [r2, #12]
 80159f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80159fa:	fb01 f202 	mul.w	r2, r1, r2
 80159fe:	1a9b      	subs	r3, r3, r2
 8015a00:	1ac3      	subs	r3, r0, r3
 8015a02:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8015a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	429a      	cmp	r2, r3
 8015a0a:	d901      	bls.n	8015a10 <f_write+0x298>
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8015a10:	68fb      	ldr	r3, [r7, #12]
 8015a12:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015a16:	68fb      	ldr	r3, [r7, #12]
 8015a18:	699b      	ldr	r3, [r3, #24]
 8015a1a:	693a      	ldr	r2, [r7, #16]
 8015a1c:	8992      	ldrh	r2, [r2, #12]
 8015a1e:	fbb3 f0f2 	udiv	r0, r3, r2
 8015a22:	fb00 f202 	mul.w	r2, r0, r2
 8015a26:	1a9b      	subs	r3, r3, r2
 8015a28:	440b      	add	r3, r1
 8015a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015a2c:	69f9      	ldr	r1, [r7, #28]
 8015a2e:	4618      	mov	r0, r3
 8015a30:	f7fd fb34 	bl	801309c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8015a34:	68fb      	ldr	r3, [r7, #12]
 8015a36:	7d1b      	ldrb	r3, [r3, #20]
 8015a38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015a3c:	b2da      	uxtb	r2, r3
 8015a3e:	68fb      	ldr	r3, [r7, #12]
 8015a40:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8015a42:	69fa      	ldr	r2, [r7, #28]
 8015a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a46:	4413      	add	r3, r2
 8015a48:	61fb      	str	r3, [r7, #28]
 8015a4a:	68fb      	ldr	r3, [r7, #12]
 8015a4c:	699a      	ldr	r2, [r3, #24]
 8015a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a50:	441a      	add	r2, r3
 8015a52:	68fb      	ldr	r3, [r7, #12]
 8015a54:	619a      	str	r2, [r3, #24]
 8015a56:	68fb      	ldr	r3, [r7, #12]
 8015a58:	68da      	ldr	r2, [r3, #12]
 8015a5a:	68fb      	ldr	r3, [r7, #12]
 8015a5c:	699b      	ldr	r3, [r3, #24]
 8015a5e:	429a      	cmp	r2, r3
 8015a60:	bf38      	it	cc
 8015a62:	461a      	movcc	r2, r3
 8015a64:	68fb      	ldr	r3, [r7, #12]
 8015a66:	60da      	str	r2, [r3, #12]
 8015a68:	683b      	ldr	r3, [r7, #0]
 8015a6a:	681a      	ldr	r2, [r3, #0]
 8015a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a6e:	441a      	add	r2, r3
 8015a70:	683b      	ldr	r3, [r7, #0]
 8015a72:	601a      	str	r2, [r3, #0]
 8015a74:	687a      	ldr	r2, [r7, #4]
 8015a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a78:	1ad3      	subs	r3, r2, r3
 8015a7a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	f47f aeb5 	bne.w	80157ee <f_write+0x76>
 8015a84:	e000      	b.n	8015a88 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8015a86:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8015a88:	68fb      	ldr	r3, [r7, #12]
 8015a8a:	7d1b      	ldrb	r3, [r3, #20]
 8015a8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015a90:	b2da      	uxtb	r2, r3
 8015a92:	68fb      	ldr	r3, [r7, #12]
 8015a94:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8015a96:	2300      	movs	r3, #0
}
 8015a98:	4618      	mov	r0, r3
 8015a9a:	3730      	adds	r7, #48	; 0x30
 8015a9c:	46bd      	mov	sp, r7
 8015a9e:	bd80      	pop	{r7, pc}

08015aa0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8015aa0:	b580      	push	{r7, lr}
 8015aa2:	b086      	sub	sp, #24
 8015aa4:	af00      	add	r7, sp, #0
 8015aa6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	f107 0208 	add.w	r2, r7, #8
 8015aae:	4611      	mov	r1, r2
 8015ab0:	4618      	mov	r0, r3
 8015ab2:	f7ff fc19 	bl	80152e8 <validate>
 8015ab6:	4603      	mov	r3, r0
 8015ab8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015aba:	7dfb      	ldrb	r3, [r7, #23]
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d168      	bne.n	8015b92 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	7d1b      	ldrb	r3, [r3, #20]
 8015ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	d062      	beq.n	8015b92 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	7d1b      	ldrb	r3, [r3, #20]
 8015ad0:	b25b      	sxtb	r3, r3
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	da15      	bge.n	8015b02 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8015ad6:	68bb      	ldr	r3, [r7, #8]
 8015ad8:	7858      	ldrb	r0, [r3, #1]
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	6a1a      	ldr	r2, [r3, #32]
 8015ae4:	2301      	movs	r3, #1
 8015ae6:	f7fd fa19 	bl	8012f1c <disk_write>
 8015aea:	4603      	mov	r3, r0
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d001      	beq.n	8015af4 <f_sync+0x54>
 8015af0:	2301      	movs	r3, #1
 8015af2:	e04f      	b.n	8015b94 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	7d1b      	ldrb	r3, [r3, #20]
 8015af8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015afc:	b2da      	uxtb	r2, r3
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8015b02:	f7fc ff77 	bl	80129f4 <get_fattime>
 8015b06:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8015b08:	68ba      	ldr	r2, [r7, #8]
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b0e:	4619      	mov	r1, r3
 8015b10:	4610      	mov	r0, r2
 8015b12:	f7fd fcb5 	bl	8013480 <move_window>
 8015b16:	4603      	mov	r3, r0
 8015b18:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8015b1a:	7dfb      	ldrb	r3, [r7, #23]
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d138      	bne.n	8015b92 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015b24:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8015b26:	68fb      	ldr	r3, [r7, #12]
 8015b28:	330b      	adds	r3, #11
 8015b2a:	781a      	ldrb	r2, [r3, #0]
 8015b2c:	68fb      	ldr	r3, [r7, #12]
 8015b2e:	330b      	adds	r3, #11
 8015b30:	f042 0220 	orr.w	r2, r2, #32
 8015b34:	b2d2      	uxtb	r2, r2
 8015b36:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	6818      	ldr	r0, [r3, #0]
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	689b      	ldr	r3, [r3, #8]
 8015b40:	461a      	mov	r2, r3
 8015b42:	68f9      	ldr	r1, [r7, #12]
 8015b44:	f7fe fa43 	bl	8013fce <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8015b48:	68fb      	ldr	r3, [r7, #12]
 8015b4a:	f103 021c 	add.w	r2, r3, #28
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	68db      	ldr	r3, [r3, #12]
 8015b52:	4619      	mov	r1, r3
 8015b54:	4610      	mov	r0, r2
 8015b56:	f7fd fa75 	bl	8013044 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8015b5a:	68fb      	ldr	r3, [r7, #12]
 8015b5c:	3316      	adds	r3, #22
 8015b5e:	6939      	ldr	r1, [r7, #16]
 8015b60:	4618      	mov	r0, r3
 8015b62:	f7fd fa6f 	bl	8013044 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8015b66:	68fb      	ldr	r3, [r7, #12]
 8015b68:	3312      	adds	r3, #18
 8015b6a:	2100      	movs	r1, #0
 8015b6c:	4618      	mov	r0, r3
 8015b6e:	f7fd fa4e 	bl	801300e <st_word>
					fs->wflag = 1;
 8015b72:	68bb      	ldr	r3, [r7, #8]
 8015b74:	2201      	movs	r2, #1
 8015b76:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8015b78:	68bb      	ldr	r3, [r7, #8]
 8015b7a:	4618      	mov	r0, r3
 8015b7c:	f7fd fcae 	bl	80134dc <sync_fs>
 8015b80:	4603      	mov	r3, r0
 8015b82:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	7d1b      	ldrb	r3, [r3, #20]
 8015b88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015b8c:	b2da      	uxtb	r2, r3
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8015b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8015b94:	4618      	mov	r0, r3
 8015b96:	3718      	adds	r7, #24
 8015b98:	46bd      	mov	sp, r7
 8015b9a:	bd80      	pop	{r7, pc}

08015b9c <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8015b9c:	b580      	push	{r7, lr}
 8015b9e:	b090      	sub	sp, #64	; 0x40
 8015ba0:	af00      	add	r7, sp, #0
 8015ba2:	6078      	str	r0, [r7, #4]
 8015ba4:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8015ba6:	f107 0108 	add.w	r1, r7, #8
 8015baa:	1d3b      	adds	r3, r7, #4
 8015bac:	2200      	movs	r2, #0
 8015bae:	4618      	mov	r0, r3
 8015bb0:	f7ff f914 	bl	8014ddc <find_volume>
 8015bb4:	4603      	mov	r3, r0
 8015bb6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8015bba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d11f      	bne.n	8015c02 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8015bc2:	687a      	ldr	r2, [r7, #4]
 8015bc4:	f107 0308 	add.w	r3, r7, #8
 8015bc8:	4611      	mov	r1, r2
 8015bca:	4618      	mov	r0, r3
 8015bcc:	f7fe fff6 	bl	8014bbc <follow_path>
 8015bd0:	4603      	mov	r3, r0
 8015bd2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8015bd6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d111      	bne.n	8015c02 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8015bde:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015be2:	b25b      	sxtb	r3, r3
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	da03      	bge.n	8015bf0 <f_stat+0x54>
				res = FR_INVALID_NAME;
 8015be8:	2306      	movs	r3, #6
 8015bea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8015bee:	e008      	b.n	8015c02 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8015bf0:	683b      	ldr	r3, [r7, #0]
 8015bf2:	2b00      	cmp	r3, #0
 8015bf4:	d005      	beq.n	8015c02 <f_stat+0x66>
 8015bf6:	f107 0308 	add.w	r3, r7, #8
 8015bfa:	6839      	ldr	r1, [r7, #0]
 8015bfc:	4618      	mov	r0, r3
 8015bfe:	f7fe fd47 	bl	8014690 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8015c02:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8015c06:	4618      	mov	r0, r3
 8015c08:	3740      	adds	r7, #64	; 0x40
 8015c0a:	46bd      	mov	sp, r7
 8015c0c:	bd80      	pop	{r7, pc}
	...

08015c10 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8015c10:	b480      	push	{r7}
 8015c12:	b087      	sub	sp, #28
 8015c14:	af00      	add	r7, sp, #0
 8015c16:	60f8      	str	r0, [r7, #12]
 8015c18:	60b9      	str	r1, [r7, #8]
 8015c1a:	4613      	mov	r3, r2
 8015c1c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8015c1e:	2301      	movs	r3, #1
 8015c20:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8015c22:	2300      	movs	r3, #0
 8015c24:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8015c26:	4b1f      	ldr	r3, [pc, #124]	; (8015ca4 <FATFS_LinkDriverEx+0x94>)
 8015c28:	7a5b      	ldrb	r3, [r3, #9]
 8015c2a:	b2db      	uxtb	r3, r3
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	d131      	bne.n	8015c94 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8015c30:	4b1c      	ldr	r3, [pc, #112]	; (8015ca4 <FATFS_LinkDriverEx+0x94>)
 8015c32:	7a5b      	ldrb	r3, [r3, #9]
 8015c34:	b2db      	uxtb	r3, r3
 8015c36:	461a      	mov	r2, r3
 8015c38:	4b1a      	ldr	r3, [pc, #104]	; (8015ca4 <FATFS_LinkDriverEx+0x94>)
 8015c3a:	2100      	movs	r1, #0
 8015c3c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8015c3e:	4b19      	ldr	r3, [pc, #100]	; (8015ca4 <FATFS_LinkDriverEx+0x94>)
 8015c40:	7a5b      	ldrb	r3, [r3, #9]
 8015c42:	b2db      	uxtb	r3, r3
 8015c44:	4a17      	ldr	r2, [pc, #92]	; (8015ca4 <FATFS_LinkDriverEx+0x94>)
 8015c46:	009b      	lsls	r3, r3, #2
 8015c48:	4413      	add	r3, r2
 8015c4a:	68fa      	ldr	r2, [r7, #12]
 8015c4c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8015c4e:	4b15      	ldr	r3, [pc, #84]	; (8015ca4 <FATFS_LinkDriverEx+0x94>)
 8015c50:	7a5b      	ldrb	r3, [r3, #9]
 8015c52:	b2db      	uxtb	r3, r3
 8015c54:	461a      	mov	r2, r3
 8015c56:	4b13      	ldr	r3, [pc, #76]	; (8015ca4 <FATFS_LinkDriverEx+0x94>)
 8015c58:	4413      	add	r3, r2
 8015c5a:	79fa      	ldrb	r2, [r7, #7]
 8015c5c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8015c5e:	4b11      	ldr	r3, [pc, #68]	; (8015ca4 <FATFS_LinkDriverEx+0x94>)
 8015c60:	7a5b      	ldrb	r3, [r3, #9]
 8015c62:	b2db      	uxtb	r3, r3
 8015c64:	1c5a      	adds	r2, r3, #1
 8015c66:	b2d1      	uxtb	r1, r2
 8015c68:	4a0e      	ldr	r2, [pc, #56]	; (8015ca4 <FATFS_LinkDriverEx+0x94>)
 8015c6a:	7251      	strb	r1, [r2, #9]
 8015c6c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8015c6e:	7dbb      	ldrb	r3, [r7, #22]
 8015c70:	3330      	adds	r3, #48	; 0x30
 8015c72:	b2da      	uxtb	r2, r3
 8015c74:	68bb      	ldr	r3, [r7, #8]
 8015c76:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8015c78:	68bb      	ldr	r3, [r7, #8]
 8015c7a:	3301      	adds	r3, #1
 8015c7c:	223a      	movs	r2, #58	; 0x3a
 8015c7e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8015c80:	68bb      	ldr	r3, [r7, #8]
 8015c82:	3302      	adds	r3, #2
 8015c84:	222f      	movs	r2, #47	; 0x2f
 8015c86:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8015c88:	68bb      	ldr	r3, [r7, #8]
 8015c8a:	3303      	adds	r3, #3
 8015c8c:	2200      	movs	r2, #0
 8015c8e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8015c90:	2300      	movs	r3, #0
 8015c92:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8015c94:	7dfb      	ldrb	r3, [r7, #23]
}
 8015c96:	4618      	mov	r0, r3
 8015c98:	371c      	adds	r7, #28
 8015c9a:	46bd      	mov	sp, r7
 8015c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ca0:	4770      	bx	lr
 8015ca2:	bf00      	nop
 8015ca4:	200061a4 	.word	0x200061a4

08015ca8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8015ca8:	b580      	push	{r7, lr}
 8015caa:	b082      	sub	sp, #8
 8015cac:	af00      	add	r7, sp, #0
 8015cae:	6078      	str	r0, [r7, #4]
 8015cb0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8015cb2:	2200      	movs	r2, #0
 8015cb4:	6839      	ldr	r1, [r7, #0]
 8015cb6:	6878      	ldr	r0, [r7, #4]
 8015cb8:	f7ff ffaa 	bl	8015c10 <FATFS_LinkDriverEx>
 8015cbc:	4603      	mov	r3, r0
}
 8015cbe:	4618      	mov	r0, r3
 8015cc0:	3708      	adds	r7, #8
 8015cc2:	46bd      	mov	sp, r7
 8015cc4:	bd80      	pop	{r7, pc}
	...

08015cc8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8015cc8:	b480      	push	{r7}
 8015cca:	b085      	sub	sp, #20
 8015ccc:	af00      	add	r7, sp, #0
 8015cce:	4603      	mov	r3, r0
 8015cd0:	6039      	str	r1, [r7, #0]
 8015cd2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8015cd4:	88fb      	ldrh	r3, [r7, #6]
 8015cd6:	2b7f      	cmp	r3, #127	; 0x7f
 8015cd8:	d802      	bhi.n	8015ce0 <ff_convert+0x18>
		c = chr;
 8015cda:	88fb      	ldrh	r3, [r7, #6]
 8015cdc:	81fb      	strh	r3, [r7, #14]
 8015cde:	e025      	b.n	8015d2c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8015ce0:	683b      	ldr	r3, [r7, #0]
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	d00b      	beq.n	8015cfe <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8015ce6:	88fb      	ldrh	r3, [r7, #6]
 8015ce8:	2bff      	cmp	r3, #255	; 0xff
 8015cea:	d805      	bhi.n	8015cf8 <ff_convert+0x30>
 8015cec:	88fb      	ldrh	r3, [r7, #6]
 8015cee:	3b80      	subs	r3, #128	; 0x80
 8015cf0:	4a12      	ldr	r2, [pc, #72]	; (8015d3c <ff_convert+0x74>)
 8015cf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015cf6:	e000      	b.n	8015cfa <ff_convert+0x32>
 8015cf8:	2300      	movs	r3, #0
 8015cfa:	81fb      	strh	r3, [r7, #14]
 8015cfc:	e016      	b.n	8015d2c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8015cfe:	2300      	movs	r3, #0
 8015d00:	81fb      	strh	r3, [r7, #14]
 8015d02:	e009      	b.n	8015d18 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8015d04:	89fb      	ldrh	r3, [r7, #14]
 8015d06:	4a0d      	ldr	r2, [pc, #52]	; (8015d3c <ff_convert+0x74>)
 8015d08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015d0c:	88fa      	ldrh	r2, [r7, #6]
 8015d0e:	429a      	cmp	r2, r3
 8015d10:	d006      	beq.n	8015d20 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8015d12:	89fb      	ldrh	r3, [r7, #14]
 8015d14:	3301      	adds	r3, #1
 8015d16:	81fb      	strh	r3, [r7, #14]
 8015d18:	89fb      	ldrh	r3, [r7, #14]
 8015d1a:	2b7f      	cmp	r3, #127	; 0x7f
 8015d1c:	d9f2      	bls.n	8015d04 <ff_convert+0x3c>
 8015d1e:	e000      	b.n	8015d22 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8015d20:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8015d22:	89fb      	ldrh	r3, [r7, #14]
 8015d24:	3380      	adds	r3, #128	; 0x80
 8015d26:	b29b      	uxth	r3, r3
 8015d28:	b2db      	uxtb	r3, r3
 8015d2a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8015d2c:	89fb      	ldrh	r3, [r7, #14]
}
 8015d2e:	4618      	mov	r0, r3
 8015d30:	3714      	adds	r7, #20
 8015d32:	46bd      	mov	sp, r7
 8015d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d38:	4770      	bx	lr
 8015d3a:	bf00      	nop
 8015d3c:	0801b398 	.word	0x0801b398

08015d40 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8015d40:	b480      	push	{r7}
 8015d42:	b087      	sub	sp, #28
 8015d44:	af00      	add	r7, sp, #0
 8015d46:	4603      	mov	r3, r0
 8015d48:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8015d4a:	88fb      	ldrh	r3, [r7, #6]
 8015d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015d50:	d201      	bcs.n	8015d56 <ff_wtoupper+0x16>
 8015d52:	4b3e      	ldr	r3, [pc, #248]	; (8015e4c <ff_wtoupper+0x10c>)
 8015d54:	e000      	b.n	8015d58 <ff_wtoupper+0x18>
 8015d56:	4b3e      	ldr	r3, [pc, #248]	; (8015e50 <ff_wtoupper+0x110>)
 8015d58:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8015d5a:	697b      	ldr	r3, [r7, #20]
 8015d5c:	1c9a      	adds	r2, r3, #2
 8015d5e:	617a      	str	r2, [r7, #20]
 8015d60:	881b      	ldrh	r3, [r3, #0]
 8015d62:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8015d64:	8a7b      	ldrh	r3, [r7, #18]
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d068      	beq.n	8015e3c <ff_wtoupper+0xfc>
 8015d6a:	88fa      	ldrh	r2, [r7, #6]
 8015d6c:	8a7b      	ldrh	r3, [r7, #18]
 8015d6e:	429a      	cmp	r2, r3
 8015d70:	d364      	bcc.n	8015e3c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8015d72:	697b      	ldr	r3, [r7, #20]
 8015d74:	1c9a      	adds	r2, r3, #2
 8015d76:	617a      	str	r2, [r7, #20]
 8015d78:	881b      	ldrh	r3, [r3, #0]
 8015d7a:	823b      	strh	r3, [r7, #16]
 8015d7c:	8a3b      	ldrh	r3, [r7, #16]
 8015d7e:	0a1b      	lsrs	r3, r3, #8
 8015d80:	81fb      	strh	r3, [r7, #14]
 8015d82:	8a3b      	ldrh	r3, [r7, #16]
 8015d84:	b2db      	uxtb	r3, r3
 8015d86:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8015d88:	88fa      	ldrh	r2, [r7, #6]
 8015d8a:	8a79      	ldrh	r1, [r7, #18]
 8015d8c:	8a3b      	ldrh	r3, [r7, #16]
 8015d8e:	440b      	add	r3, r1
 8015d90:	429a      	cmp	r2, r3
 8015d92:	da49      	bge.n	8015e28 <ff_wtoupper+0xe8>
			switch (cmd) {
 8015d94:	89fb      	ldrh	r3, [r7, #14]
 8015d96:	2b08      	cmp	r3, #8
 8015d98:	d84f      	bhi.n	8015e3a <ff_wtoupper+0xfa>
 8015d9a:	a201      	add	r2, pc, #4	; (adr r2, 8015da0 <ff_wtoupper+0x60>)
 8015d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015da0:	08015dc5 	.word	0x08015dc5
 8015da4:	08015dd7 	.word	0x08015dd7
 8015da8:	08015ded 	.word	0x08015ded
 8015dac:	08015df5 	.word	0x08015df5
 8015db0:	08015dfd 	.word	0x08015dfd
 8015db4:	08015e05 	.word	0x08015e05
 8015db8:	08015e0d 	.word	0x08015e0d
 8015dbc:	08015e15 	.word	0x08015e15
 8015dc0:	08015e1d 	.word	0x08015e1d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8015dc4:	88fa      	ldrh	r2, [r7, #6]
 8015dc6:	8a7b      	ldrh	r3, [r7, #18]
 8015dc8:	1ad3      	subs	r3, r2, r3
 8015dca:	005b      	lsls	r3, r3, #1
 8015dcc:	697a      	ldr	r2, [r7, #20]
 8015dce:	4413      	add	r3, r2
 8015dd0:	881b      	ldrh	r3, [r3, #0]
 8015dd2:	80fb      	strh	r3, [r7, #6]
 8015dd4:	e027      	b.n	8015e26 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8015dd6:	88fa      	ldrh	r2, [r7, #6]
 8015dd8:	8a7b      	ldrh	r3, [r7, #18]
 8015dda:	1ad3      	subs	r3, r2, r3
 8015ddc:	b29b      	uxth	r3, r3
 8015dde:	f003 0301 	and.w	r3, r3, #1
 8015de2:	b29b      	uxth	r3, r3
 8015de4:	88fa      	ldrh	r2, [r7, #6]
 8015de6:	1ad3      	subs	r3, r2, r3
 8015de8:	80fb      	strh	r3, [r7, #6]
 8015dea:	e01c      	b.n	8015e26 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8015dec:	88fb      	ldrh	r3, [r7, #6]
 8015dee:	3b10      	subs	r3, #16
 8015df0:	80fb      	strh	r3, [r7, #6]
 8015df2:	e018      	b.n	8015e26 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8015df4:	88fb      	ldrh	r3, [r7, #6]
 8015df6:	3b20      	subs	r3, #32
 8015df8:	80fb      	strh	r3, [r7, #6]
 8015dfa:	e014      	b.n	8015e26 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8015dfc:	88fb      	ldrh	r3, [r7, #6]
 8015dfe:	3b30      	subs	r3, #48	; 0x30
 8015e00:	80fb      	strh	r3, [r7, #6]
 8015e02:	e010      	b.n	8015e26 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8015e04:	88fb      	ldrh	r3, [r7, #6]
 8015e06:	3b1a      	subs	r3, #26
 8015e08:	80fb      	strh	r3, [r7, #6]
 8015e0a:	e00c      	b.n	8015e26 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8015e0c:	88fb      	ldrh	r3, [r7, #6]
 8015e0e:	3308      	adds	r3, #8
 8015e10:	80fb      	strh	r3, [r7, #6]
 8015e12:	e008      	b.n	8015e26 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8015e14:	88fb      	ldrh	r3, [r7, #6]
 8015e16:	3b50      	subs	r3, #80	; 0x50
 8015e18:	80fb      	strh	r3, [r7, #6]
 8015e1a:	e004      	b.n	8015e26 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8015e1c:	88fb      	ldrh	r3, [r7, #6]
 8015e1e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8015e22:	80fb      	strh	r3, [r7, #6]
 8015e24:	bf00      	nop
			}
			break;
 8015e26:	e008      	b.n	8015e3a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8015e28:	89fb      	ldrh	r3, [r7, #14]
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d195      	bne.n	8015d5a <ff_wtoupper+0x1a>
 8015e2e:	8a3b      	ldrh	r3, [r7, #16]
 8015e30:	005b      	lsls	r3, r3, #1
 8015e32:	697a      	ldr	r2, [r7, #20]
 8015e34:	4413      	add	r3, r2
 8015e36:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8015e38:	e78f      	b.n	8015d5a <ff_wtoupper+0x1a>
			break;
 8015e3a:	bf00      	nop
	}

	return chr;
 8015e3c:	88fb      	ldrh	r3, [r7, #6]
}
 8015e3e:	4618      	mov	r0, r3
 8015e40:	371c      	adds	r7, #28
 8015e42:	46bd      	mov	sp, r7
 8015e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e48:	4770      	bx	lr
 8015e4a:	bf00      	nop
 8015e4c:	0801b498 	.word	0x0801b498
 8015e50:	0801b68c 	.word	0x0801b68c

08015e54 <__errno>:
 8015e54:	4b01      	ldr	r3, [pc, #4]	; (8015e5c <__errno+0x8>)
 8015e56:	6818      	ldr	r0, [r3, #0]
 8015e58:	4770      	bx	lr
 8015e5a:	bf00      	nop
 8015e5c:	2000011c 	.word	0x2000011c

08015e60 <__libc_init_array>:
 8015e60:	b570      	push	{r4, r5, r6, lr}
 8015e62:	4d0d      	ldr	r5, [pc, #52]	; (8015e98 <__libc_init_array+0x38>)
 8015e64:	4c0d      	ldr	r4, [pc, #52]	; (8015e9c <__libc_init_array+0x3c>)
 8015e66:	1b64      	subs	r4, r4, r5
 8015e68:	10a4      	asrs	r4, r4, #2
 8015e6a:	2600      	movs	r6, #0
 8015e6c:	42a6      	cmp	r6, r4
 8015e6e:	d109      	bne.n	8015e84 <__libc_init_array+0x24>
 8015e70:	4d0b      	ldr	r5, [pc, #44]	; (8015ea0 <__libc_init_array+0x40>)
 8015e72:	4c0c      	ldr	r4, [pc, #48]	; (8015ea4 <__libc_init_array+0x44>)
 8015e74:	f004 ffb0 	bl	801add8 <_init>
 8015e78:	1b64      	subs	r4, r4, r5
 8015e7a:	10a4      	asrs	r4, r4, #2
 8015e7c:	2600      	movs	r6, #0
 8015e7e:	42a6      	cmp	r6, r4
 8015e80:	d105      	bne.n	8015e8e <__libc_init_array+0x2e>
 8015e82:	bd70      	pop	{r4, r5, r6, pc}
 8015e84:	f855 3b04 	ldr.w	r3, [r5], #4
 8015e88:	4798      	blx	r3
 8015e8a:	3601      	adds	r6, #1
 8015e8c:	e7ee      	b.n	8015e6c <__libc_init_array+0xc>
 8015e8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8015e92:	4798      	blx	r3
 8015e94:	3601      	adds	r6, #1
 8015e96:	e7f2      	b.n	8015e7e <__libc_init_array+0x1e>
 8015e98:	0801d4b8 	.word	0x0801d4b8
 8015e9c:	0801d4b8 	.word	0x0801d4b8
 8015ea0:	0801d4b8 	.word	0x0801d4b8
 8015ea4:	0801d4bc 	.word	0x0801d4bc

08015ea8 <malloc>:
 8015ea8:	4b02      	ldr	r3, [pc, #8]	; (8015eb4 <malloc+0xc>)
 8015eaa:	4601      	mov	r1, r0
 8015eac:	6818      	ldr	r0, [r3, #0]
 8015eae:	f000 b877 	b.w	8015fa0 <_malloc_r>
 8015eb2:	bf00      	nop
 8015eb4:	2000011c 	.word	0x2000011c

08015eb8 <memset>:
 8015eb8:	4402      	add	r2, r0
 8015eba:	4603      	mov	r3, r0
 8015ebc:	4293      	cmp	r3, r2
 8015ebe:	d100      	bne.n	8015ec2 <memset+0xa>
 8015ec0:	4770      	bx	lr
 8015ec2:	f803 1b01 	strb.w	r1, [r3], #1
 8015ec6:	e7f9      	b.n	8015ebc <memset+0x4>

08015ec8 <_free_r>:
 8015ec8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015eca:	2900      	cmp	r1, #0
 8015ecc:	d044      	beq.n	8015f58 <_free_r+0x90>
 8015ece:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015ed2:	9001      	str	r0, [sp, #4]
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	f1a1 0404 	sub.w	r4, r1, #4
 8015eda:	bfb8      	it	lt
 8015edc:	18e4      	addlt	r4, r4, r3
 8015ede:	f003 fadb 	bl	8019498 <__malloc_lock>
 8015ee2:	4a1e      	ldr	r2, [pc, #120]	; (8015f5c <_free_r+0x94>)
 8015ee4:	9801      	ldr	r0, [sp, #4]
 8015ee6:	6813      	ldr	r3, [r2, #0]
 8015ee8:	b933      	cbnz	r3, 8015ef8 <_free_r+0x30>
 8015eea:	6063      	str	r3, [r4, #4]
 8015eec:	6014      	str	r4, [r2, #0]
 8015eee:	b003      	add	sp, #12
 8015ef0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015ef4:	f003 bad6 	b.w	80194a4 <__malloc_unlock>
 8015ef8:	42a3      	cmp	r3, r4
 8015efa:	d908      	bls.n	8015f0e <_free_r+0x46>
 8015efc:	6825      	ldr	r5, [r4, #0]
 8015efe:	1961      	adds	r1, r4, r5
 8015f00:	428b      	cmp	r3, r1
 8015f02:	bf01      	itttt	eq
 8015f04:	6819      	ldreq	r1, [r3, #0]
 8015f06:	685b      	ldreq	r3, [r3, #4]
 8015f08:	1949      	addeq	r1, r1, r5
 8015f0a:	6021      	streq	r1, [r4, #0]
 8015f0c:	e7ed      	b.n	8015eea <_free_r+0x22>
 8015f0e:	461a      	mov	r2, r3
 8015f10:	685b      	ldr	r3, [r3, #4]
 8015f12:	b10b      	cbz	r3, 8015f18 <_free_r+0x50>
 8015f14:	42a3      	cmp	r3, r4
 8015f16:	d9fa      	bls.n	8015f0e <_free_r+0x46>
 8015f18:	6811      	ldr	r1, [r2, #0]
 8015f1a:	1855      	adds	r5, r2, r1
 8015f1c:	42a5      	cmp	r5, r4
 8015f1e:	d10b      	bne.n	8015f38 <_free_r+0x70>
 8015f20:	6824      	ldr	r4, [r4, #0]
 8015f22:	4421      	add	r1, r4
 8015f24:	1854      	adds	r4, r2, r1
 8015f26:	42a3      	cmp	r3, r4
 8015f28:	6011      	str	r1, [r2, #0]
 8015f2a:	d1e0      	bne.n	8015eee <_free_r+0x26>
 8015f2c:	681c      	ldr	r4, [r3, #0]
 8015f2e:	685b      	ldr	r3, [r3, #4]
 8015f30:	6053      	str	r3, [r2, #4]
 8015f32:	4421      	add	r1, r4
 8015f34:	6011      	str	r1, [r2, #0]
 8015f36:	e7da      	b.n	8015eee <_free_r+0x26>
 8015f38:	d902      	bls.n	8015f40 <_free_r+0x78>
 8015f3a:	230c      	movs	r3, #12
 8015f3c:	6003      	str	r3, [r0, #0]
 8015f3e:	e7d6      	b.n	8015eee <_free_r+0x26>
 8015f40:	6825      	ldr	r5, [r4, #0]
 8015f42:	1961      	adds	r1, r4, r5
 8015f44:	428b      	cmp	r3, r1
 8015f46:	bf04      	itt	eq
 8015f48:	6819      	ldreq	r1, [r3, #0]
 8015f4a:	685b      	ldreq	r3, [r3, #4]
 8015f4c:	6063      	str	r3, [r4, #4]
 8015f4e:	bf04      	itt	eq
 8015f50:	1949      	addeq	r1, r1, r5
 8015f52:	6021      	streq	r1, [r4, #0]
 8015f54:	6054      	str	r4, [r2, #4]
 8015f56:	e7ca      	b.n	8015eee <_free_r+0x26>
 8015f58:	b003      	add	sp, #12
 8015f5a:	bd30      	pop	{r4, r5, pc}
 8015f5c:	200061b0 	.word	0x200061b0

08015f60 <sbrk_aligned>:
 8015f60:	b570      	push	{r4, r5, r6, lr}
 8015f62:	4e0e      	ldr	r6, [pc, #56]	; (8015f9c <sbrk_aligned+0x3c>)
 8015f64:	460c      	mov	r4, r1
 8015f66:	6831      	ldr	r1, [r6, #0]
 8015f68:	4605      	mov	r5, r0
 8015f6a:	b911      	cbnz	r1, 8015f72 <sbrk_aligned+0x12>
 8015f6c:	f000 ff78 	bl	8016e60 <_sbrk_r>
 8015f70:	6030      	str	r0, [r6, #0]
 8015f72:	4621      	mov	r1, r4
 8015f74:	4628      	mov	r0, r5
 8015f76:	f000 ff73 	bl	8016e60 <_sbrk_r>
 8015f7a:	1c43      	adds	r3, r0, #1
 8015f7c:	d00a      	beq.n	8015f94 <sbrk_aligned+0x34>
 8015f7e:	1cc4      	adds	r4, r0, #3
 8015f80:	f024 0403 	bic.w	r4, r4, #3
 8015f84:	42a0      	cmp	r0, r4
 8015f86:	d007      	beq.n	8015f98 <sbrk_aligned+0x38>
 8015f88:	1a21      	subs	r1, r4, r0
 8015f8a:	4628      	mov	r0, r5
 8015f8c:	f000 ff68 	bl	8016e60 <_sbrk_r>
 8015f90:	3001      	adds	r0, #1
 8015f92:	d101      	bne.n	8015f98 <sbrk_aligned+0x38>
 8015f94:	f04f 34ff 	mov.w	r4, #4294967295
 8015f98:	4620      	mov	r0, r4
 8015f9a:	bd70      	pop	{r4, r5, r6, pc}
 8015f9c:	200061b4 	.word	0x200061b4

08015fa0 <_malloc_r>:
 8015fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015fa4:	1ccd      	adds	r5, r1, #3
 8015fa6:	f025 0503 	bic.w	r5, r5, #3
 8015faa:	3508      	adds	r5, #8
 8015fac:	2d0c      	cmp	r5, #12
 8015fae:	bf38      	it	cc
 8015fb0:	250c      	movcc	r5, #12
 8015fb2:	2d00      	cmp	r5, #0
 8015fb4:	4607      	mov	r7, r0
 8015fb6:	db01      	blt.n	8015fbc <_malloc_r+0x1c>
 8015fb8:	42a9      	cmp	r1, r5
 8015fba:	d905      	bls.n	8015fc8 <_malloc_r+0x28>
 8015fbc:	230c      	movs	r3, #12
 8015fbe:	603b      	str	r3, [r7, #0]
 8015fc0:	2600      	movs	r6, #0
 8015fc2:	4630      	mov	r0, r6
 8015fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015fc8:	4e2e      	ldr	r6, [pc, #184]	; (8016084 <_malloc_r+0xe4>)
 8015fca:	f003 fa65 	bl	8019498 <__malloc_lock>
 8015fce:	6833      	ldr	r3, [r6, #0]
 8015fd0:	461c      	mov	r4, r3
 8015fd2:	bb34      	cbnz	r4, 8016022 <_malloc_r+0x82>
 8015fd4:	4629      	mov	r1, r5
 8015fd6:	4638      	mov	r0, r7
 8015fd8:	f7ff ffc2 	bl	8015f60 <sbrk_aligned>
 8015fdc:	1c43      	adds	r3, r0, #1
 8015fde:	4604      	mov	r4, r0
 8015fe0:	d14d      	bne.n	801607e <_malloc_r+0xde>
 8015fe2:	6834      	ldr	r4, [r6, #0]
 8015fe4:	4626      	mov	r6, r4
 8015fe6:	2e00      	cmp	r6, #0
 8015fe8:	d140      	bne.n	801606c <_malloc_r+0xcc>
 8015fea:	6823      	ldr	r3, [r4, #0]
 8015fec:	4631      	mov	r1, r6
 8015fee:	4638      	mov	r0, r7
 8015ff0:	eb04 0803 	add.w	r8, r4, r3
 8015ff4:	f000 ff34 	bl	8016e60 <_sbrk_r>
 8015ff8:	4580      	cmp	r8, r0
 8015ffa:	d13a      	bne.n	8016072 <_malloc_r+0xd2>
 8015ffc:	6821      	ldr	r1, [r4, #0]
 8015ffe:	3503      	adds	r5, #3
 8016000:	1a6d      	subs	r5, r5, r1
 8016002:	f025 0503 	bic.w	r5, r5, #3
 8016006:	3508      	adds	r5, #8
 8016008:	2d0c      	cmp	r5, #12
 801600a:	bf38      	it	cc
 801600c:	250c      	movcc	r5, #12
 801600e:	4629      	mov	r1, r5
 8016010:	4638      	mov	r0, r7
 8016012:	f7ff ffa5 	bl	8015f60 <sbrk_aligned>
 8016016:	3001      	adds	r0, #1
 8016018:	d02b      	beq.n	8016072 <_malloc_r+0xd2>
 801601a:	6823      	ldr	r3, [r4, #0]
 801601c:	442b      	add	r3, r5
 801601e:	6023      	str	r3, [r4, #0]
 8016020:	e00e      	b.n	8016040 <_malloc_r+0xa0>
 8016022:	6822      	ldr	r2, [r4, #0]
 8016024:	1b52      	subs	r2, r2, r5
 8016026:	d41e      	bmi.n	8016066 <_malloc_r+0xc6>
 8016028:	2a0b      	cmp	r2, #11
 801602a:	d916      	bls.n	801605a <_malloc_r+0xba>
 801602c:	1961      	adds	r1, r4, r5
 801602e:	42a3      	cmp	r3, r4
 8016030:	6025      	str	r5, [r4, #0]
 8016032:	bf18      	it	ne
 8016034:	6059      	strne	r1, [r3, #4]
 8016036:	6863      	ldr	r3, [r4, #4]
 8016038:	bf08      	it	eq
 801603a:	6031      	streq	r1, [r6, #0]
 801603c:	5162      	str	r2, [r4, r5]
 801603e:	604b      	str	r3, [r1, #4]
 8016040:	4638      	mov	r0, r7
 8016042:	f104 060b 	add.w	r6, r4, #11
 8016046:	f003 fa2d 	bl	80194a4 <__malloc_unlock>
 801604a:	f026 0607 	bic.w	r6, r6, #7
 801604e:	1d23      	adds	r3, r4, #4
 8016050:	1af2      	subs	r2, r6, r3
 8016052:	d0b6      	beq.n	8015fc2 <_malloc_r+0x22>
 8016054:	1b9b      	subs	r3, r3, r6
 8016056:	50a3      	str	r3, [r4, r2]
 8016058:	e7b3      	b.n	8015fc2 <_malloc_r+0x22>
 801605a:	6862      	ldr	r2, [r4, #4]
 801605c:	42a3      	cmp	r3, r4
 801605e:	bf0c      	ite	eq
 8016060:	6032      	streq	r2, [r6, #0]
 8016062:	605a      	strne	r2, [r3, #4]
 8016064:	e7ec      	b.n	8016040 <_malloc_r+0xa0>
 8016066:	4623      	mov	r3, r4
 8016068:	6864      	ldr	r4, [r4, #4]
 801606a:	e7b2      	b.n	8015fd2 <_malloc_r+0x32>
 801606c:	4634      	mov	r4, r6
 801606e:	6876      	ldr	r6, [r6, #4]
 8016070:	e7b9      	b.n	8015fe6 <_malloc_r+0x46>
 8016072:	230c      	movs	r3, #12
 8016074:	603b      	str	r3, [r7, #0]
 8016076:	4638      	mov	r0, r7
 8016078:	f003 fa14 	bl	80194a4 <__malloc_unlock>
 801607c:	e7a1      	b.n	8015fc2 <_malloc_r+0x22>
 801607e:	6025      	str	r5, [r4, #0]
 8016080:	e7de      	b.n	8016040 <_malloc_r+0xa0>
 8016082:	bf00      	nop
 8016084:	200061b0 	.word	0x200061b0

08016088 <__cvt>:
 8016088:	b5f0      	push	{r4, r5, r6, r7, lr}
 801608a:	ed2d 8b02 	vpush	{d8}
 801608e:	eeb0 8b40 	vmov.f64	d8, d0
 8016092:	b085      	sub	sp, #20
 8016094:	4617      	mov	r7, r2
 8016096:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8016098:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801609a:	ee18 2a90 	vmov	r2, s17
 801609e:	f025 0520 	bic.w	r5, r5, #32
 80160a2:	2a00      	cmp	r2, #0
 80160a4:	bfb6      	itet	lt
 80160a6:	222d      	movlt	r2, #45	; 0x2d
 80160a8:	2200      	movge	r2, #0
 80160aa:	eeb1 8b40 	vneglt.f64	d8, d0
 80160ae:	2d46      	cmp	r5, #70	; 0x46
 80160b0:	460c      	mov	r4, r1
 80160b2:	701a      	strb	r2, [r3, #0]
 80160b4:	d004      	beq.n	80160c0 <__cvt+0x38>
 80160b6:	2d45      	cmp	r5, #69	; 0x45
 80160b8:	d100      	bne.n	80160bc <__cvt+0x34>
 80160ba:	3401      	adds	r4, #1
 80160bc:	2102      	movs	r1, #2
 80160be:	e000      	b.n	80160c2 <__cvt+0x3a>
 80160c0:	2103      	movs	r1, #3
 80160c2:	ab03      	add	r3, sp, #12
 80160c4:	9301      	str	r3, [sp, #4]
 80160c6:	ab02      	add	r3, sp, #8
 80160c8:	9300      	str	r3, [sp, #0]
 80160ca:	4622      	mov	r2, r4
 80160cc:	4633      	mov	r3, r6
 80160ce:	eeb0 0b48 	vmov.f64	d0, d8
 80160d2:	f001 fec1 	bl	8017e58 <_dtoa_r>
 80160d6:	2d47      	cmp	r5, #71	; 0x47
 80160d8:	d101      	bne.n	80160de <__cvt+0x56>
 80160da:	07fb      	lsls	r3, r7, #31
 80160dc:	d51a      	bpl.n	8016114 <__cvt+0x8c>
 80160de:	2d46      	cmp	r5, #70	; 0x46
 80160e0:	eb00 0204 	add.w	r2, r0, r4
 80160e4:	d10c      	bne.n	8016100 <__cvt+0x78>
 80160e6:	7803      	ldrb	r3, [r0, #0]
 80160e8:	2b30      	cmp	r3, #48	; 0x30
 80160ea:	d107      	bne.n	80160fc <__cvt+0x74>
 80160ec:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80160f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160f4:	bf1c      	itt	ne
 80160f6:	f1c4 0401 	rsbne	r4, r4, #1
 80160fa:	6034      	strne	r4, [r6, #0]
 80160fc:	6833      	ldr	r3, [r6, #0]
 80160fe:	441a      	add	r2, r3
 8016100:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8016104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016108:	bf08      	it	eq
 801610a:	9203      	streq	r2, [sp, #12]
 801610c:	2130      	movs	r1, #48	; 0x30
 801610e:	9b03      	ldr	r3, [sp, #12]
 8016110:	4293      	cmp	r3, r2
 8016112:	d307      	bcc.n	8016124 <__cvt+0x9c>
 8016114:	9b03      	ldr	r3, [sp, #12]
 8016116:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016118:	1a1b      	subs	r3, r3, r0
 801611a:	6013      	str	r3, [r2, #0]
 801611c:	b005      	add	sp, #20
 801611e:	ecbd 8b02 	vpop	{d8}
 8016122:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016124:	1c5c      	adds	r4, r3, #1
 8016126:	9403      	str	r4, [sp, #12]
 8016128:	7019      	strb	r1, [r3, #0]
 801612a:	e7f0      	b.n	801610e <__cvt+0x86>

0801612c <__exponent>:
 801612c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801612e:	4603      	mov	r3, r0
 8016130:	2900      	cmp	r1, #0
 8016132:	bfb8      	it	lt
 8016134:	4249      	neglt	r1, r1
 8016136:	f803 2b02 	strb.w	r2, [r3], #2
 801613a:	bfb4      	ite	lt
 801613c:	222d      	movlt	r2, #45	; 0x2d
 801613e:	222b      	movge	r2, #43	; 0x2b
 8016140:	2909      	cmp	r1, #9
 8016142:	7042      	strb	r2, [r0, #1]
 8016144:	dd2a      	ble.n	801619c <__exponent+0x70>
 8016146:	f10d 0407 	add.w	r4, sp, #7
 801614a:	46a4      	mov	ip, r4
 801614c:	270a      	movs	r7, #10
 801614e:	46a6      	mov	lr, r4
 8016150:	460a      	mov	r2, r1
 8016152:	fb91 f6f7 	sdiv	r6, r1, r7
 8016156:	fb07 1516 	mls	r5, r7, r6, r1
 801615a:	3530      	adds	r5, #48	; 0x30
 801615c:	2a63      	cmp	r2, #99	; 0x63
 801615e:	f104 34ff 	add.w	r4, r4, #4294967295
 8016162:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8016166:	4631      	mov	r1, r6
 8016168:	dcf1      	bgt.n	801614e <__exponent+0x22>
 801616a:	3130      	adds	r1, #48	; 0x30
 801616c:	f1ae 0502 	sub.w	r5, lr, #2
 8016170:	f804 1c01 	strb.w	r1, [r4, #-1]
 8016174:	1c44      	adds	r4, r0, #1
 8016176:	4629      	mov	r1, r5
 8016178:	4561      	cmp	r1, ip
 801617a:	d30a      	bcc.n	8016192 <__exponent+0x66>
 801617c:	f10d 0209 	add.w	r2, sp, #9
 8016180:	eba2 020e 	sub.w	r2, r2, lr
 8016184:	4565      	cmp	r5, ip
 8016186:	bf88      	it	hi
 8016188:	2200      	movhi	r2, #0
 801618a:	4413      	add	r3, r2
 801618c:	1a18      	subs	r0, r3, r0
 801618e:	b003      	add	sp, #12
 8016190:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016192:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016196:	f804 2f01 	strb.w	r2, [r4, #1]!
 801619a:	e7ed      	b.n	8016178 <__exponent+0x4c>
 801619c:	2330      	movs	r3, #48	; 0x30
 801619e:	3130      	adds	r1, #48	; 0x30
 80161a0:	7083      	strb	r3, [r0, #2]
 80161a2:	70c1      	strb	r1, [r0, #3]
 80161a4:	1d03      	adds	r3, r0, #4
 80161a6:	e7f1      	b.n	801618c <__exponent+0x60>

080161a8 <_printf_float>:
 80161a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161ac:	b08b      	sub	sp, #44	; 0x2c
 80161ae:	460c      	mov	r4, r1
 80161b0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80161b4:	4616      	mov	r6, r2
 80161b6:	461f      	mov	r7, r3
 80161b8:	4605      	mov	r5, r0
 80161ba:	f003 f8e1 	bl	8019380 <_localeconv_r>
 80161be:	f8d0 b000 	ldr.w	fp, [r0]
 80161c2:	4658      	mov	r0, fp
 80161c4:	f7ea f83c 	bl	8000240 <strlen>
 80161c8:	2300      	movs	r3, #0
 80161ca:	9308      	str	r3, [sp, #32]
 80161cc:	f8d8 3000 	ldr.w	r3, [r8]
 80161d0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80161d4:	6822      	ldr	r2, [r4, #0]
 80161d6:	3307      	adds	r3, #7
 80161d8:	f023 0307 	bic.w	r3, r3, #7
 80161dc:	f103 0108 	add.w	r1, r3, #8
 80161e0:	f8c8 1000 	str.w	r1, [r8]
 80161e4:	4682      	mov	sl, r0
 80161e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80161ea:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80161ee:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8016450 <_printf_float+0x2a8>
 80161f2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80161f6:	eeb0 6bc0 	vabs.f64	d6, d0
 80161fa:	eeb4 6b47 	vcmp.f64	d6, d7
 80161fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016202:	dd24      	ble.n	801624e <_printf_float+0xa6>
 8016204:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8016208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801620c:	d502      	bpl.n	8016214 <_printf_float+0x6c>
 801620e:	232d      	movs	r3, #45	; 0x2d
 8016210:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016214:	4b90      	ldr	r3, [pc, #576]	; (8016458 <_printf_float+0x2b0>)
 8016216:	4891      	ldr	r0, [pc, #580]	; (801645c <_printf_float+0x2b4>)
 8016218:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801621c:	bf94      	ite	ls
 801621e:	4698      	movls	r8, r3
 8016220:	4680      	movhi	r8, r0
 8016222:	2303      	movs	r3, #3
 8016224:	6123      	str	r3, [r4, #16]
 8016226:	f022 0204 	bic.w	r2, r2, #4
 801622a:	2300      	movs	r3, #0
 801622c:	6022      	str	r2, [r4, #0]
 801622e:	9304      	str	r3, [sp, #16]
 8016230:	9700      	str	r7, [sp, #0]
 8016232:	4633      	mov	r3, r6
 8016234:	aa09      	add	r2, sp, #36	; 0x24
 8016236:	4621      	mov	r1, r4
 8016238:	4628      	mov	r0, r5
 801623a:	f000 f9d3 	bl	80165e4 <_printf_common>
 801623e:	3001      	adds	r0, #1
 8016240:	f040 808a 	bne.w	8016358 <_printf_float+0x1b0>
 8016244:	f04f 30ff 	mov.w	r0, #4294967295
 8016248:	b00b      	add	sp, #44	; 0x2c
 801624a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801624e:	eeb4 0b40 	vcmp.f64	d0, d0
 8016252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016256:	d709      	bvc.n	801626c <_printf_float+0xc4>
 8016258:	ee10 3a90 	vmov	r3, s1
 801625c:	2b00      	cmp	r3, #0
 801625e:	bfbc      	itt	lt
 8016260:	232d      	movlt	r3, #45	; 0x2d
 8016262:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8016266:	487e      	ldr	r0, [pc, #504]	; (8016460 <_printf_float+0x2b8>)
 8016268:	4b7e      	ldr	r3, [pc, #504]	; (8016464 <_printf_float+0x2bc>)
 801626a:	e7d5      	b.n	8016218 <_printf_float+0x70>
 801626c:	6863      	ldr	r3, [r4, #4]
 801626e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8016272:	9104      	str	r1, [sp, #16]
 8016274:	1c59      	adds	r1, r3, #1
 8016276:	d13c      	bne.n	80162f2 <_printf_float+0x14a>
 8016278:	2306      	movs	r3, #6
 801627a:	6063      	str	r3, [r4, #4]
 801627c:	2300      	movs	r3, #0
 801627e:	9303      	str	r3, [sp, #12]
 8016280:	ab08      	add	r3, sp, #32
 8016282:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8016286:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801628a:	ab07      	add	r3, sp, #28
 801628c:	6861      	ldr	r1, [r4, #4]
 801628e:	9300      	str	r3, [sp, #0]
 8016290:	6022      	str	r2, [r4, #0]
 8016292:	f10d 031b 	add.w	r3, sp, #27
 8016296:	4628      	mov	r0, r5
 8016298:	f7ff fef6 	bl	8016088 <__cvt>
 801629c:	9b04      	ldr	r3, [sp, #16]
 801629e:	9907      	ldr	r1, [sp, #28]
 80162a0:	2b47      	cmp	r3, #71	; 0x47
 80162a2:	4680      	mov	r8, r0
 80162a4:	d108      	bne.n	80162b8 <_printf_float+0x110>
 80162a6:	1cc8      	adds	r0, r1, #3
 80162a8:	db02      	blt.n	80162b0 <_printf_float+0x108>
 80162aa:	6863      	ldr	r3, [r4, #4]
 80162ac:	4299      	cmp	r1, r3
 80162ae:	dd41      	ble.n	8016334 <_printf_float+0x18c>
 80162b0:	f1a9 0902 	sub.w	r9, r9, #2
 80162b4:	fa5f f989 	uxtb.w	r9, r9
 80162b8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80162bc:	d820      	bhi.n	8016300 <_printf_float+0x158>
 80162be:	3901      	subs	r1, #1
 80162c0:	464a      	mov	r2, r9
 80162c2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80162c6:	9107      	str	r1, [sp, #28]
 80162c8:	f7ff ff30 	bl	801612c <__exponent>
 80162cc:	9a08      	ldr	r2, [sp, #32]
 80162ce:	9004      	str	r0, [sp, #16]
 80162d0:	1813      	adds	r3, r2, r0
 80162d2:	2a01      	cmp	r2, #1
 80162d4:	6123      	str	r3, [r4, #16]
 80162d6:	dc02      	bgt.n	80162de <_printf_float+0x136>
 80162d8:	6822      	ldr	r2, [r4, #0]
 80162da:	07d2      	lsls	r2, r2, #31
 80162dc:	d501      	bpl.n	80162e2 <_printf_float+0x13a>
 80162de:	3301      	adds	r3, #1
 80162e0:	6123      	str	r3, [r4, #16]
 80162e2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	d0a2      	beq.n	8016230 <_printf_float+0x88>
 80162ea:	232d      	movs	r3, #45	; 0x2d
 80162ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80162f0:	e79e      	b.n	8016230 <_printf_float+0x88>
 80162f2:	9904      	ldr	r1, [sp, #16]
 80162f4:	2947      	cmp	r1, #71	; 0x47
 80162f6:	d1c1      	bne.n	801627c <_printf_float+0xd4>
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	d1bf      	bne.n	801627c <_printf_float+0xd4>
 80162fc:	2301      	movs	r3, #1
 80162fe:	e7bc      	b.n	801627a <_printf_float+0xd2>
 8016300:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8016304:	d118      	bne.n	8016338 <_printf_float+0x190>
 8016306:	2900      	cmp	r1, #0
 8016308:	6863      	ldr	r3, [r4, #4]
 801630a:	dd0b      	ble.n	8016324 <_printf_float+0x17c>
 801630c:	6121      	str	r1, [r4, #16]
 801630e:	b913      	cbnz	r3, 8016316 <_printf_float+0x16e>
 8016310:	6822      	ldr	r2, [r4, #0]
 8016312:	07d0      	lsls	r0, r2, #31
 8016314:	d502      	bpl.n	801631c <_printf_float+0x174>
 8016316:	3301      	adds	r3, #1
 8016318:	440b      	add	r3, r1
 801631a:	6123      	str	r3, [r4, #16]
 801631c:	2300      	movs	r3, #0
 801631e:	65a1      	str	r1, [r4, #88]	; 0x58
 8016320:	9304      	str	r3, [sp, #16]
 8016322:	e7de      	b.n	80162e2 <_printf_float+0x13a>
 8016324:	b913      	cbnz	r3, 801632c <_printf_float+0x184>
 8016326:	6822      	ldr	r2, [r4, #0]
 8016328:	07d2      	lsls	r2, r2, #31
 801632a:	d501      	bpl.n	8016330 <_printf_float+0x188>
 801632c:	3302      	adds	r3, #2
 801632e:	e7f4      	b.n	801631a <_printf_float+0x172>
 8016330:	2301      	movs	r3, #1
 8016332:	e7f2      	b.n	801631a <_printf_float+0x172>
 8016334:	f04f 0967 	mov.w	r9, #103	; 0x67
 8016338:	9b08      	ldr	r3, [sp, #32]
 801633a:	4299      	cmp	r1, r3
 801633c:	db05      	blt.n	801634a <_printf_float+0x1a2>
 801633e:	6823      	ldr	r3, [r4, #0]
 8016340:	6121      	str	r1, [r4, #16]
 8016342:	07d8      	lsls	r0, r3, #31
 8016344:	d5ea      	bpl.n	801631c <_printf_float+0x174>
 8016346:	1c4b      	adds	r3, r1, #1
 8016348:	e7e7      	b.n	801631a <_printf_float+0x172>
 801634a:	2900      	cmp	r1, #0
 801634c:	bfd4      	ite	le
 801634e:	f1c1 0202 	rsble	r2, r1, #2
 8016352:	2201      	movgt	r2, #1
 8016354:	4413      	add	r3, r2
 8016356:	e7e0      	b.n	801631a <_printf_float+0x172>
 8016358:	6823      	ldr	r3, [r4, #0]
 801635a:	055a      	lsls	r2, r3, #21
 801635c:	d407      	bmi.n	801636e <_printf_float+0x1c6>
 801635e:	6923      	ldr	r3, [r4, #16]
 8016360:	4642      	mov	r2, r8
 8016362:	4631      	mov	r1, r6
 8016364:	4628      	mov	r0, r5
 8016366:	47b8      	blx	r7
 8016368:	3001      	adds	r0, #1
 801636a:	d12a      	bne.n	80163c2 <_printf_float+0x21a>
 801636c:	e76a      	b.n	8016244 <_printf_float+0x9c>
 801636e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8016372:	f240 80e2 	bls.w	801653a <_printf_float+0x392>
 8016376:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801637a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801637e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016382:	d133      	bne.n	80163ec <_printf_float+0x244>
 8016384:	4a38      	ldr	r2, [pc, #224]	; (8016468 <_printf_float+0x2c0>)
 8016386:	2301      	movs	r3, #1
 8016388:	4631      	mov	r1, r6
 801638a:	4628      	mov	r0, r5
 801638c:	47b8      	blx	r7
 801638e:	3001      	adds	r0, #1
 8016390:	f43f af58 	beq.w	8016244 <_printf_float+0x9c>
 8016394:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8016398:	429a      	cmp	r2, r3
 801639a:	db02      	blt.n	80163a2 <_printf_float+0x1fa>
 801639c:	6823      	ldr	r3, [r4, #0]
 801639e:	07d8      	lsls	r0, r3, #31
 80163a0:	d50f      	bpl.n	80163c2 <_printf_float+0x21a>
 80163a2:	4653      	mov	r3, sl
 80163a4:	465a      	mov	r2, fp
 80163a6:	4631      	mov	r1, r6
 80163a8:	4628      	mov	r0, r5
 80163aa:	47b8      	blx	r7
 80163ac:	3001      	adds	r0, #1
 80163ae:	f43f af49 	beq.w	8016244 <_printf_float+0x9c>
 80163b2:	f04f 0800 	mov.w	r8, #0
 80163b6:	f104 091a 	add.w	r9, r4, #26
 80163ba:	9b08      	ldr	r3, [sp, #32]
 80163bc:	3b01      	subs	r3, #1
 80163be:	4543      	cmp	r3, r8
 80163c0:	dc09      	bgt.n	80163d6 <_printf_float+0x22e>
 80163c2:	6823      	ldr	r3, [r4, #0]
 80163c4:	079b      	lsls	r3, r3, #30
 80163c6:	f100 8108 	bmi.w	80165da <_printf_float+0x432>
 80163ca:	68e0      	ldr	r0, [r4, #12]
 80163cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80163ce:	4298      	cmp	r0, r3
 80163d0:	bfb8      	it	lt
 80163d2:	4618      	movlt	r0, r3
 80163d4:	e738      	b.n	8016248 <_printf_float+0xa0>
 80163d6:	2301      	movs	r3, #1
 80163d8:	464a      	mov	r2, r9
 80163da:	4631      	mov	r1, r6
 80163dc:	4628      	mov	r0, r5
 80163de:	47b8      	blx	r7
 80163e0:	3001      	adds	r0, #1
 80163e2:	f43f af2f 	beq.w	8016244 <_printf_float+0x9c>
 80163e6:	f108 0801 	add.w	r8, r8, #1
 80163ea:	e7e6      	b.n	80163ba <_printf_float+0x212>
 80163ec:	9b07      	ldr	r3, [sp, #28]
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	dc3c      	bgt.n	801646c <_printf_float+0x2c4>
 80163f2:	4a1d      	ldr	r2, [pc, #116]	; (8016468 <_printf_float+0x2c0>)
 80163f4:	2301      	movs	r3, #1
 80163f6:	4631      	mov	r1, r6
 80163f8:	4628      	mov	r0, r5
 80163fa:	47b8      	blx	r7
 80163fc:	3001      	adds	r0, #1
 80163fe:	f43f af21 	beq.w	8016244 <_printf_float+0x9c>
 8016402:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8016406:	4313      	orrs	r3, r2
 8016408:	d102      	bne.n	8016410 <_printf_float+0x268>
 801640a:	6823      	ldr	r3, [r4, #0]
 801640c:	07d9      	lsls	r1, r3, #31
 801640e:	d5d8      	bpl.n	80163c2 <_printf_float+0x21a>
 8016410:	4653      	mov	r3, sl
 8016412:	465a      	mov	r2, fp
 8016414:	4631      	mov	r1, r6
 8016416:	4628      	mov	r0, r5
 8016418:	47b8      	blx	r7
 801641a:	3001      	adds	r0, #1
 801641c:	f43f af12 	beq.w	8016244 <_printf_float+0x9c>
 8016420:	f04f 0900 	mov.w	r9, #0
 8016424:	f104 0a1a 	add.w	sl, r4, #26
 8016428:	9b07      	ldr	r3, [sp, #28]
 801642a:	425b      	negs	r3, r3
 801642c:	454b      	cmp	r3, r9
 801642e:	dc01      	bgt.n	8016434 <_printf_float+0x28c>
 8016430:	9b08      	ldr	r3, [sp, #32]
 8016432:	e795      	b.n	8016360 <_printf_float+0x1b8>
 8016434:	2301      	movs	r3, #1
 8016436:	4652      	mov	r2, sl
 8016438:	4631      	mov	r1, r6
 801643a:	4628      	mov	r0, r5
 801643c:	47b8      	blx	r7
 801643e:	3001      	adds	r0, #1
 8016440:	f43f af00 	beq.w	8016244 <_printf_float+0x9c>
 8016444:	f109 0901 	add.w	r9, r9, #1
 8016448:	e7ee      	b.n	8016428 <_printf_float+0x280>
 801644a:	bf00      	nop
 801644c:	f3af 8000 	nop.w
 8016450:	ffffffff 	.word	0xffffffff
 8016454:	7fefffff 	.word	0x7fefffff
 8016458:	0801b74c 	.word	0x0801b74c
 801645c:	0801b750 	.word	0x0801b750
 8016460:	0801b758 	.word	0x0801b758
 8016464:	0801b754 	.word	0x0801b754
 8016468:	0801b75c 	.word	0x0801b75c
 801646c:	9a08      	ldr	r2, [sp, #32]
 801646e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016470:	429a      	cmp	r2, r3
 8016472:	bfa8      	it	ge
 8016474:	461a      	movge	r2, r3
 8016476:	2a00      	cmp	r2, #0
 8016478:	4691      	mov	r9, r2
 801647a:	dc38      	bgt.n	80164ee <_printf_float+0x346>
 801647c:	2300      	movs	r3, #0
 801647e:	9305      	str	r3, [sp, #20]
 8016480:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016484:	f104 021a 	add.w	r2, r4, #26
 8016488:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801648a:	9905      	ldr	r1, [sp, #20]
 801648c:	9304      	str	r3, [sp, #16]
 801648e:	eba3 0309 	sub.w	r3, r3, r9
 8016492:	428b      	cmp	r3, r1
 8016494:	dc33      	bgt.n	80164fe <_printf_float+0x356>
 8016496:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801649a:	429a      	cmp	r2, r3
 801649c:	db3c      	blt.n	8016518 <_printf_float+0x370>
 801649e:	6823      	ldr	r3, [r4, #0]
 80164a0:	07da      	lsls	r2, r3, #31
 80164a2:	d439      	bmi.n	8016518 <_printf_float+0x370>
 80164a4:	9b08      	ldr	r3, [sp, #32]
 80164a6:	9a04      	ldr	r2, [sp, #16]
 80164a8:	9907      	ldr	r1, [sp, #28]
 80164aa:	1a9a      	subs	r2, r3, r2
 80164ac:	eba3 0901 	sub.w	r9, r3, r1
 80164b0:	4591      	cmp	r9, r2
 80164b2:	bfa8      	it	ge
 80164b4:	4691      	movge	r9, r2
 80164b6:	f1b9 0f00 	cmp.w	r9, #0
 80164ba:	dc35      	bgt.n	8016528 <_printf_float+0x380>
 80164bc:	f04f 0800 	mov.w	r8, #0
 80164c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80164c4:	f104 0a1a 	add.w	sl, r4, #26
 80164c8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80164cc:	1a9b      	subs	r3, r3, r2
 80164ce:	eba3 0309 	sub.w	r3, r3, r9
 80164d2:	4543      	cmp	r3, r8
 80164d4:	f77f af75 	ble.w	80163c2 <_printf_float+0x21a>
 80164d8:	2301      	movs	r3, #1
 80164da:	4652      	mov	r2, sl
 80164dc:	4631      	mov	r1, r6
 80164de:	4628      	mov	r0, r5
 80164e0:	47b8      	blx	r7
 80164e2:	3001      	adds	r0, #1
 80164e4:	f43f aeae 	beq.w	8016244 <_printf_float+0x9c>
 80164e8:	f108 0801 	add.w	r8, r8, #1
 80164ec:	e7ec      	b.n	80164c8 <_printf_float+0x320>
 80164ee:	4613      	mov	r3, r2
 80164f0:	4631      	mov	r1, r6
 80164f2:	4642      	mov	r2, r8
 80164f4:	4628      	mov	r0, r5
 80164f6:	47b8      	blx	r7
 80164f8:	3001      	adds	r0, #1
 80164fa:	d1bf      	bne.n	801647c <_printf_float+0x2d4>
 80164fc:	e6a2      	b.n	8016244 <_printf_float+0x9c>
 80164fe:	2301      	movs	r3, #1
 8016500:	4631      	mov	r1, r6
 8016502:	4628      	mov	r0, r5
 8016504:	9204      	str	r2, [sp, #16]
 8016506:	47b8      	blx	r7
 8016508:	3001      	adds	r0, #1
 801650a:	f43f ae9b 	beq.w	8016244 <_printf_float+0x9c>
 801650e:	9b05      	ldr	r3, [sp, #20]
 8016510:	9a04      	ldr	r2, [sp, #16]
 8016512:	3301      	adds	r3, #1
 8016514:	9305      	str	r3, [sp, #20]
 8016516:	e7b7      	b.n	8016488 <_printf_float+0x2e0>
 8016518:	4653      	mov	r3, sl
 801651a:	465a      	mov	r2, fp
 801651c:	4631      	mov	r1, r6
 801651e:	4628      	mov	r0, r5
 8016520:	47b8      	blx	r7
 8016522:	3001      	adds	r0, #1
 8016524:	d1be      	bne.n	80164a4 <_printf_float+0x2fc>
 8016526:	e68d      	b.n	8016244 <_printf_float+0x9c>
 8016528:	9a04      	ldr	r2, [sp, #16]
 801652a:	464b      	mov	r3, r9
 801652c:	4442      	add	r2, r8
 801652e:	4631      	mov	r1, r6
 8016530:	4628      	mov	r0, r5
 8016532:	47b8      	blx	r7
 8016534:	3001      	adds	r0, #1
 8016536:	d1c1      	bne.n	80164bc <_printf_float+0x314>
 8016538:	e684      	b.n	8016244 <_printf_float+0x9c>
 801653a:	9a08      	ldr	r2, [sp, #32]
 801653c:	2a01      	cmp	r2, #1
 801653e:	dc01      	bgt.n	8016544 <_printf_float+0x39c>
 8016540:	07db      	lsls	r3, r3, #31
 8016542:	d537      	bpl.n	80165b4 <_printf_float+0x40c>
 8016544:	2301      	movs	r3, #1
 8016546:	4642      	mov	r2, r8
 8016548:	4631      	mov	r1, r6
 801654a:	4628      	mov	r0, r5
 801654c:	47b8      	blx	r7
 801654e:	3001      	adds	r0, #1
 8016550:	f43f ae78 	beq.w	8016244 <_printf_float+0x9c>
 8016554:	4653      	mov	r3, sl
 8016556:	465a      	mov	r2, fp
 8016558:	4631      	mov	r1, r6
 801655a:	4628      	mov	r0, r5
 801655c:	47b8      	blx	r7
 801655e:	3001      	adds	r0, #1
 8016560:	f43f ae70 	beq.w	8016244 <_printf_float+0x9c>
 8016564:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8016568:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801656c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016570:	d01b      	beq.n	80165aa <_printf_float+0x402>
 8016572:	9b08      	ldr	r3, [sp, #32]
 8016574:	f108 0201 	add.w	r2, r8, #1
 8016578:	3b01      	subs	r3, #1
 801657a:	4631      	mov	r1, r6
 801657c:	4628      	mov	r0, r5
 801657e:	47b8      	blx	r7
 8016580:	3001      	adds	r0, #1
 8016582:	d10e      	bne.n	80165a2 <_printf_float+0x3fa>
 8016584:	e65e      	b.n	8016244 <_printf_float+0x9c>
 8016586:	2301      	movs	r3, #1
 8016588:	464a      	mov	r2, r9
 801658a:	4631      	mov	r1, r6
 801658c:	4628      	mov	r0, r5
 801658e:	47b8      	blx	r7
 8016590:	3001      	adds	r0, #1
 8016592:	f43f ae57 	beq.w	8016244 <_printf_float+0x9c>
 8016596:	f108 0801 	add.w	r8, r8, #1
 801659a:	9b08      	ldr	r3, [sp, #32]
 801659c:	3b01      	subs	r3, #1
 801659e:	4543      	cmp	r3, r8
 80165a0:	dcf1      	bgt.n	8016586 <_printf_float+0x3de>
 80165a2:	9b04      	ldr	r3, [sp, #16]
 80165a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80165a8:	e6db      	b.n	8016362 <_printf_float+0x1ba>
 80165aa:	f04f 0800 	mov.w	r8, #0
 80165ae:	f104 091a 	add.w	r9, r4, #26
 80165b2:	e7f2      	b.n	801659a <_printf_float+0x3f2>
 80165b4:	2301      	movs	r3, #1
 80165b6:	4642      	mov	r2, r8
 80165b8:	e7df      	b.n	801657a <_printf_float+0x3d2>
 80165ba:	2301      	movs	r3, #1
 80165bc:	464a      	mov	r2, r9
 80165be:	4631      	mov	r1, r6
 80165c0:	4628      	mov	r0, r5
 80165c2:	47b8      	blx	r7
 80165c4:	3001      	adds	r0, #1
 80165c6:	f43f ae3d 	beq.w	8016244 <_printf_float+0x9c>
 80165ca:	f108 0801 	add.w	r8, r8, #1
 80165ce:	68e3      	ldr	r3, [r4, #12]
 80165d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80165d2:	1a5b      	subs	r3, r3, r1
 80165d4:	4543      	cmp	r3, r8
 80165d6:	dcf0      	bgt.n	80165ba <_printf_float+0x412>
 80165d8:	e6f7      	b.n	80163ca <_printf_float+0x222>
 80165da:	f04f 0800 	mov.w	r8, #0
 80165de:	f104 0919 	add.w	r9, r4, #25
 80165e2:	e7f4      	b.n	80165ce <_printf_float+0x426>

080165e4 <_printf_common>:
 80165e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80165e8:	4616      	mov	r6, r2
 80165ea:	4699      	mov	r9, r3
 80165ec:	688a      	ldr	r2, [r1, #8]
 80165ee:	690b      	ldr	r3, [r1, #16]
 80165f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80165f4:	4293      	cmp	r3, r2
 80165f6:	bfb8      	it	lt
 80165f8:	4613      	movlt	r3, r2
 80165fa:	6033      	str	r3, [r6, #0]
 80165fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016600:	4607      	mov	r7, r0
 8016602:	460c      	mov	r4, r1
 8016604:	b10a      	cbz	r2, 801660a <_printf_common+0x26>
 8016606:	3301      	adds	r3, #1
 8016608:	6033      	str	r3, [r6, #0]
 801660a:	6823      	ldr	r3, [r4, #0]
 801660c:	0699      	lsls	r1, r3, #26
 801660e:	bf42      	ittt	mi
 8016610:	6833      	ldrmi	r3, [r6, #0]
 8016612:	3302      	addmi	r3, #2
 8016614:	6033      	strmi	r3, [r6, #0]
 8016616:	6825      	ldr	r5, [r4, #0]
 8016618:	f015 0506 	ands.w	r5, r5, #6
 801661c:	d106      	bne.n	801662c <_printf_common+0x48>
 801661e:	f104 0a19 	add.w	sl, r4, #25
 8016622:	68e3      	ldr	r3, [r4, #12]
 8016624:	6832      	ldr	r2, [r6, #0]
 8016626:	1a9b      	subs	r3, r3, r2
 8016628:	42ab      	cmp	r3, r5
 801662a:	dc26      	bgt.n	801667a <_printf_common+0x96>
 801662c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016630:	1e13      	subs	r3, r2, #0
 8016632:	6822      	ldr	r2, [r4, #0]
 8016634:	bf18      	it	ne
 8016636:	2301      	movne	r3, #1
 8016638:	0692      	lsls	r2, r2, #26
 801663a:	d42b      	bmi.n	8016694 <_printf_common+0xb0>
 801663c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016640:	4649      	mov	r1, r9
 8016642:	4638      	mov	r0, r7
 8016644:	47c0      	blx	r8
 8016646:	3001      	adds	r0, #1
 8016648:	d01e      	beq.n	8016688 <_printf_common+0xa4>
 801664a:	6823      	ldr	r3, [r4, #0]
 801664c:	68e5      	ldr	r5, [r4, #12]
 801664e:	6832      	ldr	r2, [r6, #0]
 8016650:	f003 0306 	and.w	r3, r3, #6
 8016654:	2b04      	cmp	r3, #4
 8016656:	bf08      	it	eq
 8016658:	1aad      	subeq	r5, r5, r2
 801665a:	68a3      	ldr	r3, [r4, #8]
 801665c:	6922      	ldr	r2, [r4, #16]
 801665e:	bf0c      	ite	eq
 8016660:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016664:	2500      	movne	r5, #0
 8016666:	4293      	cmp	r3, r2
 8016668:	bfc4      	itt	gt
 801666a:	1a9b      	subgt	r3, r3, r2
 801666c:	18ed      	addgt	r5, r5, r3
 801666e:	2600      	movs	r6, #0
 8016670:	341a      	adds	r4, #26
 8016672:	42b5      	cmp	r5, r6
 8016674:	d11a      	bne.n	80166ac <_printf_common+0xc8>
 8016676:	2000      	movs	r0, #0
 8016678:	e008      	b.n	801668c <_printf_common+0xa8>
 801667a:	2301      	movs	r3, #1
 801667c:	4652      	mov	r2, sl
 801667e:	4649      	mov	r1, r9
 8016680:	4638      	mov	r0, r7
 8016682:	47c0      	blx	r8
 8016684:	3001      	adds	r0, #1
 8016686:	d103      	bne.n	8016690 <_printf_common+0xac>
 8016688:	f04f 30ff 	mov.w	r0, #4294967295
 801668c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016690:	3501      	adds	r5, #1
 8016692:	e7c6      	b.n	8016622 <_printf_common+0x3e>
 8016694:	18e1      	adds	r1, r4, r3
 8016696:	1c5a      	adds	r2, r3, #1
 8016698:	2030      	movs	r0, #48	; 0x30
 801669a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801669e:	4422      	add	r2, r4
 80166a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80166a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80166a8:	3302      	adds	r3, #2
 80166aa:	e7c7      	b.n	801663c <_printf_common+0x58>
 80166ac:	2301      	movs	r3, #1
 80166ae:	4622      	mov	r2, r4
 80166b0:	4649      	mov	r1, r9
 80166b2:	4638      	mov	r0, r7
 80166b4:	47c0      	blx	r8
 80166b6:	3001      	adds	r0, #1
 80166b8:	d0e6      	beq.n	8016688 <_printf_common+0xa4>
 80166ba:	3601      	adds	r6, #1
 80166bc:	e7d9      	b.n	8016672 <_printf_common+0x8e>
	...

080166c0 <_printf_i>:
 80166c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80166c4:	7e0f      	ldrb	r7, [r1, #24]
 80166c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80166c8:	2f78      	cmp	r7, #120	; 0x78
 80166ca:	4691      	mov	r9, r2
 80166cc:	4680      	mov	r8, r0
 80166ce:	460c      	mov	r4, r1
 80166d0:	469a      	mov	sl, r3
 80166d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80166d6:	d807      	bhi.n	80166e8 <_printf_i+0x28>
 80166d8:	2f62      	cmp	r7, #98	; 0x62
 80166da:	d80a      	bhi.n	80166f2 <_printf_i+0x32>
 80166dc:	2f00      	cmp	r7, #0
 80166de:	f000 80d8 	beq.w	8016892 <_printf_i+0x1d2>
 80166e2:	2f58      	cmp	r7, #88	; 0x58
 80166e4:	f000 80a3 	beq.w	801682e <_printf_i+0x16e>
 80166e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80166ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80166f0:	e03a      	b.n	8016768 <_printf_i+0xa8>
 80166f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80166f6:	2b15      	cmp	r3, #21
 80166f8:	d8f6      	bhi.n	80166e8 <_printf_i+0x28>
 80166fa:	a101      	add	r1, pc, #4	; (adr r1, 8016700 <_printf_i+0x40>)
 80166fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016700:	08016759 	.word	0x08016759
 8016704:	0801676d 	.word	0x0801676d
 8016708:	080166e9 	.word	0x080166e9
 801670c:	080166e9 	.word	0x080166e9
 8016710:	080166e9 	.word	0x080166e9
 8016714:	080166e9 	.word	0x080166e9
 8016718:	0801676d 	.word	0x0801676d
 801671c:	080166e9 	.word	0x080166e9
 8016720:	080166e9 	.word	0x080166e9
 8016724:	080166e9 	.word	0x080166e9
 8016728:	080166e9 	.word	0x080166e9
 801672c:	08016879 	.word	0x08016879
 8016730:	0801679d 	.word	0x0801679d
 8016734:	0801685b 	.word	0x0801685b
 8016738:	080166e9 	.word	0x080166e9
 801673c:	080166e9 	.word	0x080166e9
 8016740:	0801689b 	.word	0x0801689b
 8016744:	080166e9 	.word	0x080166e9
 8016748:	0801679d 	.word	0x0801679d
 801674c:	080166e9 	.word	0x080166e9
 8016750:	080166e9 	.word	0x080166e9
 8016754:	08016863 	.word	0x08016863
 8016758:	682b      	ldr	r3, [r5, #0]
 801675a:	1d1a      	adds	r2, r3, #4
 801675c:	681b      	ldr	r3, [r3, #0]
 801675e:	602a      	str	r2, [r5, #0]
 8016760:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016764:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016768:	2301      	movs	r3, #1
 801676a:	e0a3      	b.n	80168b4 <_printf_i+0x1f4>
 801676c:	6820      	ldr	r0, [r4, #0]
 801676e:	6829      	ldr	r1, [r5, #0]
 8016770:	0606      	lsls	r6, r0, #24
 8016772:	f101 0304 	add.w	r3, r1, #4
 8016776:	d50a      	bpl.n	801678e <_printf_i+0xce>
 8016778:	680e      	ldr	r6, [r1, #0]
 801677a:	602b      	str	r3, [r5, #0]
 801677c:	2e00      	cmp	r6, #0
 801677e:	da03      	bge.n	8016788 <_printf_i+0xc8>
 8016780:	232d      	movs	r3, #45	; 0x2d
 8016782:	4276      	negs	r6, r6
 8016784:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016788:	485e      	ldr	r0, [pc, #376]	; (8016904 <_printf_i+0x244>)
 801678a:	230a      	movs	r3, #10
 801678c:	e019      	b.n	80167c2 <_printf_i+0x102>
 801678e:	680e      	ldr	r6, [r1, #0]
 8016790:	602b      	str	r3, [r5, #0]
 8016792:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016796:	bf18      	it	ne
 8016798:	b236      	sxthne	r6, r6
 801679a:	e7ef      	b.n	801677c <_printf_i+0xbc>
 801679c:	682b      	ldr	r3, [r5, #0]
 801679e:	6820      	ldr	r0, [r4, #0]
 80167a0:	1d19      	adds	r1, r3, #4
 80167a2:	6029      	str	r1, [r5, #0]
 80167a4:	0601      	lsls	r1, r0, #24
 80167a6:	d501      	bpl.n	80167ac <_printf_i+0xec>
 80167a8:	681e      	ldr	r6, [r3, #0]
 80167aa:	e002      	b.n	80167b2 <_printf_i+0xf2>
 80167ac:	0646      	lsls	r6, r0, #25
 80167ae:	d5fb      	bpl.n	80167a8 <_printf_i+0xe8>
 80167b0:	881e      	ldrh	r6, [r3, #0]
 80167b2:	4854      	ldr	r0, [pc, #336]	; (8016904 <_printf_i+0x244>)
 80167b4:	2f6f      	cmp	r7, #111	; 0x6f
 80167b6:	bf0c      	ite	eq
 80167b8:	2308      	moveq	r3, #8
 80167ba:	230a      	movne	r3, #10
 80167bc:	2100      	movs	r1, #0
 80167be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80167c2:	6865      	ldr	r5, [r4, #4]
 80167c4:	60a5      	str	r5, [r4, #8]
 80167c6:	2d00      	cmp	r5, #0
 80167c8:	bfa2      	ittt	ge
 80167ca:	6821      	ldrge	r1, [r4, #0]
 80167cc:	f021 0104 	bicge.w	r1, r1, #4
 80167d0:	6021      	strge	r1, [r4, #0]
 80167d2:	b90e      	cbnz	r6, 80167d8 <_printf_i+0x118>
 80167d4:	2d00      	cmp	r5, #0
 80167d6:	d04d      	beq.n	8016874 <_printf_i+0x1b4>
 80167d8:	4615      	mov	r5, r2
 80167da:	fbb6 f1f3 	udiv	r1, r6, r3
 80167de:	fb03 6711 	mls	r7, r3, r1, r6
 80167e2:	5dc7      	ldrb	r7, [r0, r7]
 80167e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80167e8:	4637      	mov	r7, r6
 80167ea:	42bb      	cmp	r3, r7
 80167ec:	460e      	mov	r6, r1
 80167ee:	d9f4      	bls.n	80167da <_printf_i+0x11a>
 80167f0:	2b08      	cmp	r3, #8
 80167f2:	d10b      	bne.n	801680c <_printf_i+0x14c>
 80167f4:	6823      	ldr	r3, [r4, #0]
 80167f6:	07de      	lsls	r6, r3, #31
 80167f8:	d508      	bpl.n	801680c <_printf_i+0x14c>
 80167fa:	6923      	ldr	r3, [r4, #16]
 80167fc:	6861      	ldr	r1, [r4, #4]
 80167fe:	4299      	cmp	r1, r3
 8016800:	bfde      	ittt	le
 8016802:	2330      	movle	r3, #48	; 0x30
 8016804:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016808:	f105 35ff 	addle.w	r5, r5, #4294967295
 801680c:	1b52      	subs	r2, r2, r5
 801680e:	6122      	str	r2, [r4, #16]
 8016810:	f8cd a000 	str.w	sl, [sp]
 8016814:	464b      	mov	r3, r9
 8016816:	aa03      	add	r2, sp, #12
 8016818:	4621      	mov	r1, r4
 801681a:	4640      	mov	r0, r8
 801681c:	f7ff fee2 	bl	80165e4 <_printf_common>
 8016820:	3001      	adds	r0, #1
 8016822:	d14c      	bne.n	80168be <_printf_i+0x1fe>
 8016824:	f04f 30ff 	mov.w	r0, #4294967295
 8016828:	b004      	add	sp, #16
 801682a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801682e:	4835      	ldr	r0, [pc, #212]	; (8016904 <_printf_i+0x244>)
 8016830:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8016834:	6829      	ldr	r1, [r5, #0]
 8016836:	6823      	ldr	r3, [r4, #0]
 8016838:	f851 6b04 	ldr.w	r6, [r1], #4
 801683c:	6029      	str	r1, [r5, #0]
 801683e:	061d      	lsls	r5, r3, #24
 8016840:	d514      	bpl.n	801686c <_printf_i+0x1ac>
 8016842:	07df      	lsls	r7, r3, #31
 8016844:	bf44      	itt	mi
 8016846:	f043 0320 	orrmi.w	r3, r3, #32
 801684a:	6023      	strmi	r3, [r4, #0]
 801684c:	b91e      	cbnz	r6, 8016856 <_printf_i+0x196>
 801684e:	6823      	ldr	r3, [r4, #0]
 8016850:	f023 0320 	bic.w	r3, r3, #32
 8016854:	6023      	str	r3, [r4, #0]
 8016856:	2310      	movs	r3, #16
 8016858:	e7b0      	b.n	80167bc <_printf_i+0xfc>
 801685a:	6823      	ldr	r3, [r4, #0]
 801685c:	f043 0320 	orr.w	r3, r3, #32
 8016860:	6023      	str	r3, [r4, #0]
 8016862:	2378      	movs	r3, #120	; 0x78
 8016864:	4828      	ldr	r0, [pc, #160]	; (8016908 <_printf_i+0x248>)
 8016866:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801686a:	e7e3      	b.n	8016834 <_printf_i+0x174>
 801686c:	0659      	lsls	r1, r3, #25
 801686e:	bf48      	it	mi
 8016870:	b2b6      	uxthmi	r6, r6
 8016872:	e7e6      	b.n	8016842 <_printf_i+0x182>
 8016874:	4615      	mov	r5, r2
 8016876:	e7bb      	b.n	80167f0 <_printf_i+0x130>
 8016878:	682b      	ldr	r3, [r5, #0]
 801687a:	6826      	ldr	r6, [r4, #0]
 801687c:	6961      	ldr	r1, [r4, #20]
 801687e:	1d18      	adds	r0, r3, #4
 8016880:	6028      	str	r0, [r5, #0]
 8016882:	0635      	lsls	r5, r6, #24
 8016884:	681b      	ldr	r3, [r3, #0]
 8016886:	d501      	bpl.n	801688c <_printf_i+0x1cc>
 8016888:	6019      	str	r1, [r3, #0]
 801688a:	e002      	b.n	8016892 <_printf_i+0x1d2>
 801688c:	0670      	lsls	r0, r6, #25
 801688e:	d5fb      	bpl.n	8016888 <_printf_i+0x1c8>
 8016890:	8019      	strh	r1, [r3, #0]
 8016892:	2300      	movs	r3, #0
 8016894:	6123      	str	r3, [r4, #16]
 8016896:	4615      	mov	r5, r2
 8016898:	e7ba      	b.n	8016810 <_printf_i+0x150>
 801689a:	682b      	ldr	r3, [r5, #0]
 801689c:	1d1a      	adds	r2, r3, #4
 801689e:	602a      	str	r2, [r5, #0]
 80168a0:	681d      	ldr	r5, [r3, #0]
 80168a2:	6862      	ldr	r2, [r4, #4]
 80168a4:	2100      	movs	r1, #0
 80168a6:	4628      	mov	r0, r5
 80168a8:	f7e9 fcd2 	bl	8000250 <memchr>
 80168ac:	b108      	cbz	r0, 80168b2 <_printf_i+0x1f2>
 80168ae:	1b40      	subs	r0, r0, r5
 80168b0:	6060      	str	r0, [r4, #4]
 80168b2:	6863      	ldr	r3, [r4, #4]
 80168b4:	6123      	str	r3, [r4, #16]
 80168b6:	2300      	movs	r3, #0
 80168b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80168bc:	e7a8      	b.n	8016810 <_printf_i+0x150>
 80168be:	6923      	ldr	r3, [r4, #16]
 80168c0:	462a      	mov	r2, r5
 80168c2:	4649      	mov	r1, r9
 80168c4:	4640      	mov	r0, r8
 80168c6:	47d0      	blx	sl
 80168c8:	3001      	adds	r0, #1
 80168ca:	d0ab      	beq.n	8016824 <_printf_i+0x164>
 80168cc:	6823      	ldr	r3, [r4, #0]
 80168ce:	079b      	lsls	r3, r3, #30
 80168d0:	d413      	bmi.n	80168fa <_printf_i+0x23a>
 80168d2:	68e0      	ldr	r0, [r4, #12]
 80168d4:	9b03      	ldr	r3, [sp, #12]
 80168d6:	4298      	cmp	r0, r3
 80168d8:	bfb8      	it	lt
 80168da:	4618      	movlt	r0, r3
 80168dc:	e7a4      	b.n	8016828 <_printf_i+0x168>
 80168de:	2301      	movs	r3, #1
 80168e0:	4632      	mov	r2, r6
 80168e2:	4649      	mov	r1, r9
 80168e4:	4640      	mov	r0, r8
 80168e6:	47d0      	blx	sl
 80168e8:	3001      	adds	r0, #1
 80168ea:	d09b      	beq.n	8016824 <_printf_i+0x164>
 80168ec:	3501      	adds	r5, #1
 80168ee:	68e3      	ldr	r3, [r4, #12]
 80168f0:	9903      	ldr	r1, [sp, #12]
 80168f2:	1a5b      	subs	r3, r3, r1
 80168f4:	42ab      	cmp	r3, r5
 80168f6:	dcf2      	bgt.n	80168de <_printf_i+0x21e>
 80168f8:	e7eb      	b.n	80168d2 <_printf_i+0x212>
 80168fa:	2500      	movs	r5, #0
 80168fc:	f104 0619 	add.w	r6, r4, #25
 8016900:	e7f5      	b.n	80168ee <_printf_i+0x22e>
 8016902:	bf00      	nop
 8016904:	0801b75e 	.word	0x0801b75e
 8016908:	0801b76f 	.word	0x0801b76f

0801690c <_scanf_float>:
 801690c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016910:	b087      	sub	sp, #28
 8016912:	4617      	mov	r7, r2
 8016914:	9303      	str	r3, [sp, #12]
 8016916:	688b      	ldr	r3, [r1, #8]
 8016918:	1e5a      	subs	r2, r3, #1
 801691a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801691e:	bf83      	ittte	hi
 8016920:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016924:	195b      	addhi	r3, r3, r5
 8016926:	9302      	strhi	r3, [sp, #8]
 8016928:	2300      	movls	r3, #0
 801692a:	bf86      	itte	hi
 801692c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016930:	608b      	strhi	r3, [r1, #8]
 8016932:	9302      	strls	r3, [sp, #8]
 8016934:	680b      	ldr	r3, [r1, #0]
 8016936:	468b      	mov	fp, r1
 8016938:	2500      	movs	r5, #0
 801693a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801693e:	f84b 3b1c 	str.w	r3, [fp], #28
 8016942:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8016946:	4680      	mov	r8, r0
 8016948:	460c      	mov	r4, r1
 801694a:	465e      	mov	r6, fp
 801694c:	46aa      	mov	sl, r5
 801694e:	46a9      	mov	r9, r5
 8016950:	9501      	str	r5, [sp, #4]
 8016952:	68a2      	ldr	r2, [r4, #8]
 8016954:	b152      	cbz	r2, 801696c <_scanf_float+0x60>
 8016956:	683b      	ldr	r3, [r7, #0]
 8016958:	781b      	ldrb	r3, [r3, #0]
 801695a:	2b4e      	cmp	r3, #78	; 0x4e
 801695c:	d864      	bhi.n	8016a28 <_scanf_float+0x11c>
 801695e:	2b40      	cmp	r3, #64	; 0x40
 8016960:	d83c      	bhi.n	80169dc <_scanf_float+0xd0>
 8016962:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8016966:	b2c8      	uxtb	r0, r1
 8016968:	280e      	cmp	r0, #14
 801696a:	d93a      	bls.n	80169e2 <_scanf_float+0xd6>
 801696c:	f1b9 0f00 	cmp.w	r9, #0
 8016970:	d003      	beq.n	801697a <_scanf_float+0x6e>
 8016972:	6823      	ldr	r3, [r4, #0]
 8016974:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016978:	6023      	str	r3, [r4, #0]
 801697a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801697e:	f1ba 0f01 	cmp.w	sl, #1
 8016982:	f200 8113 	bhi.w	8016bac <_scanf_float+0x2a0>
 8016986:	455e      	cmp	r6, fp
 8016988:	f200 8105 	bhi.w	8016b96 <_scanf_float+0x28a>
 801698c:	2501      	movs	r5, #1
 801698e:	4628      	mov	r0, r5
 8016990:	b007      	add	sp, #28
 8016992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016996:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801699a:	2a0d      	cmp	r2, #13
 801699c:	d8e6      	bhi.n	801696c <_scanf_float+0x60>
 801699e:	a101      	add	r1, pc, #4	; (adr r1, 80169a4 <_scanf_float+0x98>)
 80169a0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80169a4:	08016ae3 	.word	0x08016ae3
 80169a8:	0801696d 	.word	0x0801696d
 80169ac:	0801696d 	.word	0x0801696d
 80169b0:	0801696d 	.word	0x0801696d
 80169b4:	08016b43 	.word	0x08016b43
 80169b8:	08016b1b 	.word	0x08016b1b
 80169bc:	0801696d 	.word	0x0801696d
 80169c0:	0801696d 	.word	0x0801696d
 80169c4:	08016af1 	.word	0x08016af1
 80169c8:	0801696d 	.word	0x0801696d
 80169cc:	0801696d 	.word	0x0801696d
 80169d0:	0801696d 	.word	0x0801696d
 80169d4:	0801696d 	.word	0x0801696d
 80169d8:	08016aa9 	.word	0x08016aa9
 80169dc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80169e0:	e7db      	b.n	801699a <_scanf_float+0x8e>
 80169e2:	290e      	cmp	r1, #14
 80169e4:	d8c2      	bhi.n	801696c <_scanf_float+0x60>
 80169e6:	a001      	add	r0, pc, #4	; (adr r0, 80169ec <_scanf_float+0xe0>)
 80169e8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80169ec:	08016a9b 	.word	0x08016a9b
 80169f0:	0801696d 	.word	0x0801696d
 80169f4:	08016a9b 	.word	0x08016a9b
 80169f8:	08016b2f 	.word	0x08016b2f
 80169fc:	0801696d 	.word	0x0801696d
 8016a00:	08016a49 	.word	0x08016a49
 8016a04:	08016a85 	.word	0x08016a85
 8016a08:	08016a85 	.word	0x08016a85
 8016a0c:	08016a85 	.word	0x08016a85
 8016a10:	08016a85 	.word	0x08016a85
 8016a14:	08016a85 	.word	0x08016a85
 8016a18:	08016a85 	.word	0x08016a85
 8016a1c:	08016a85 	.word	0x08016a85
 8016a20:	08016a85 	.word	0x08016a85
 8016a24:	08016a85 	.word	0x08016a85
 8016a28:	2b6e      	cmp	r3, #110	; 0x6e
 8016a2a:	d809      	bhi.n	8016a40 <_scanf_float+0x134>
 8016a2c:	2b60      	cmp	r3, #96	; 0x60
 8016a2e:	d8b2      	bhi.n	8016996 <_scanf_float+0x8a>
 8016a30:	2b54      	cmp	r3, #84	; 0x54
 8016a32:	d077      	beq.n	8016b24 <_scanf_float+0x218>
 8016a34:	2b59      	cmp	r3, #89	; 0x59
 8016a36:	d199      	bne.n	801696c <_scanf_float+0x60>
 8016a38:	2d07      	cmp	r5, #7
 8016a3a:	d197      	bne.n	801696c <_scanf_float+0x60>
 8016a3c:	2508      	movs	r5, #8
 8016a3e:	e029      	b.n	8016a94 <_scanf_float+0x188>
 8016a40:	2b74      	cmp	r3, #116	; 0x74
 8016a42:	d06f      	beq.n	8016b24 <_scanf_float+0x218>
 8016a44:	2b79      	cmp	r3, #121	; 0x79
 8016a46:	e7f6      	b.n	8016a36 <_scanf_float+0x12a>
 8016a48:	6821      	ldr	r1, [r4, #0]
 8016a4a:	05c8      	lsls	r0, r1, #23
 8016a4c:	d51a      	bpl.n	8016a84 <_scanf_float+0x178>
 8016a4e:	9b02      	ldr	r3, [sp, #8]
 8016a50:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016a54:	6021      	str	r1, [r4, #0]
 8016a56:	f109 0901 	add.w	r9, r9, #1
 8016a5a:	b11b      	cbz	r3, 8016a64 <_scanf_float+0x158>
 8016a5c:	3b01      	subs	r3, #1
 8016a5e:	3201      	adds	r2, #1
 8016a60:	9302      	str	r3, [sp, #8]
 8016a62:	60a2      	str	r2, [r4, #8]
 8016a64:	68a3      	ldr	r3, [r4, #8]
 8016a66:	3b01      	subs	r3, #1
 8016a68:	60a3      	str	r3, [r4, #8]
 8016a6a:	6923      	ldr	r3, [r4, #16]
 8016a6c:	3301      	adds	r3, #1
 8016a6e:	6123      	str	r3, [r4, #16]
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	3b01      	subs	r3, #1
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	607b      	str	r3, [r7, #4]
 8016a78:	f340 8084 	ble.w	8016b84 <_scanf_float+0x278>
 8016a7c:	683b      	ldr	r3, [r7, #0]
 8016a7e:	3301      	adds	r3, #1
 8016a80:	603b      	str	r3, [r7, #0]
 8016a82:	e766      	b.n	8016952 <_scanf_float+0x46>
 8016a84:	eb1a 0f05 	cmn.w	sl, r5
 8016a88:	f47f af70 	bne.w	801696c <_scanf_float+0x60>
 8016a8c:	6822      	ldr	r2, [r4, #0]
 8016a8e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8016a92:	6022      	str	r2, [r4, #0]
 8016a94:	f806 3b01 	strb.w	r3, [r6], #1
 8016a98:	e7e4      	b.n	8016a64 <_scanf_float+0x158>
 8016a9a:	6822      	ldr	r2, [r4, #0]
 8016a9c:	0610      	lsls	r0, r2, #24
 8016a9e:	f57f af65 	bpl.w	801696c <_scanf_float+0x60>
 8016aa2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016aa6:	e7f4      	b.n	8016a92 <_scanf_float+0x186>
 8016aa8:	f1ba 0f00 	cmp.w	sl, #0
 8016aac:	d10e      	bne.n	8016acc <_scanf_float+0x1c0>
 8016aae:	f1b9 0f00 	cmp.w	r9, #0
 8016ab2:	d10e      	bne.n	8016ad2 <_scanf_float+0x1c6>
 8016ab4:	6822      	ldr	r2, [r4, #0]
 8016ab6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016aba:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016abe:	d108      	bne.n	8016ad2 <_scanf_float+0x1c6>
 8016ac0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016ac4:	6022      	str	r2, [r4, #0]
 8016ac6:	f04f 0a01 	mov.w	sl, #1
 8016aca:	e7e3      	b.n	8016a94 <_scanf_float+0x188>
 8016acc:	f1ba 0f02 	cmp.w	sl, #2
 8016ad0:	d055      	beq.n	8016b7e <_scanf_float+0x272>
 8016ad2:	2d01      	cmp	r5, #1
 8016ad4:	d002      	beq.n	8016adc <_scanf_float+0x1d0>
 8016ad6:	2d04      	cmp	r5, #4
 8016ad8:	f47f af48 	bne.w	801696c <_scanf_float+0x60>
 8016adc:	3501      	adds	r5, #1
 8016ade:	b2ed      	uxtb	r5, r5
 8016ae0:	e7d8      	b.n	8016a94 <_scanf_float+0x188>
 8016ae2:	f1ba 0f01 	cmp.w	sl, #1
 8016ae6:	f47f af41 	bne.w	801696c <_scanf_float+0x60>
 8016aea:	f04f 0a02 	mov.w	sl, #2
 8016aee:	e7d1      	b.n	8016a94 <_scanf_float+0x188>
 8016af0:	b97d      	cbnz	r5, 8016b12 <_scanf_float+0x206>
 8016af2:	f1b9 0f00 	cmp.w	r9, #0
 8016af6:	f47f af3c 	bne.w	8016972 <_scanf_float+0x66>
 8016afa:	6822      	ldr	r2, [r4, #0]
 8016afc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016b00:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016b04:	f47f af39 	bne.w	801697a <_scanf_float+0x6e>
 8016b08:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016b0c:	6022      	str	r2, [r4, #0]
 8016b0e:	2501      	movs	r5, #1
 8016b10:	e7c0      	b.n	8016a94 <_scanf_float+0x188>
 8016b12:	2d03      	cmp	r5, #3
 8016b14:	d0e2      	beq.n	8016adc <_scanf_float+0x1d0>
 8016b16:	2d05      	cmp	r5, #5
 8016b18:	e7de      	b.n	8016ad8 <_scanf_float+0x1cc>
 8016b1a:	2d02      	cmp	r5, #2
 8016b1c:	f47f af26 	bne.w	801696c <_scanf_float+0x60>
 8016b20:	2503      	movs	r5, #3
 8016b22:	e7b7      	b.n	8016a94 <_scanf_float+0x188>
 8016b24:	2d06      	cmp	r5, #6
 8016b26:	f47f af21 	bne.w	801696c <_scanf_float+0x60>
 8016b2a:	2507      	movs	r5, #7
 8016b2c:	e7b2      	b.n	8016a94 <_scanf_float+0x188>
 8016b2e:	6822      	ldr	r2, [r4, #0]
 8016b30:	0591      	lsls	r1, r2, #22
 8016b32:	f57f af1b 	bpl.w	801696c <_scanf_float+0x60>
 8016b36:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8016b3a:	6022      	str	r2, [r4, #0]
 8016b3c:	f8cd 9004 	str.w	r9, [sp, #4]
 8016b40:	e7a8      	b.n	8016a94 <_scanf_float+0x188>
 8016b42:	6822      	ldr	r2, [r4, #0]
 8016b44:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8016b48:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8016b4c:	d006      	beq.n	8016b5c <_scanf_float+0x250>
 8016b4e:	0550      	lsls	r0, r2, #21
 8016b50:	f57f af0c 	bpl.w	801696c <_scanf_float+0x60>
 8016b54:	f1b9 0f00 	cmp.w	r9, #0
 8016b58:	f43f af0f 	beq.w	801697a <_scanf_float+0x6e>
 8016b5c:	0591      	lsls	r1, r2, #22
 8016b5e:	bf58      	it	pl
 8016b60:	9901      	ldrpl	r1, [sp, #4]
 8016b62:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016b66:	bf58      	it	pl
 8016b68:	eba9 0101 	subpl.w	r1, r9, r1
 8016b6c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8016b70:	bf58      	it	pl
 8016b72:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8016b76:	6022      	str	r2, [r4, #0]
 8016b78:	f04f 0900 	mov.w	r9, #0
 8016b7c:	e78a      	b.n	8016a94 <_scanf_float+0x188>
 8016b7e:	f04f 0a03 	mov.w	sl, #3
 8016b82:	e787      	b.n	8016a94 <_scanf_float+0x188>
 8016b84:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016b88:	4639      	mov	r1, r7
 8016b8a:	4640      	mov	r0, r8
 8016b8c:	4798      	blx	r3
 8016b8e:	2800      	cmp	r0, #0
 8016b90:	f43f aedf 	beq.w	8016952 <_scanf_float+0x46>
 8016b94:	e6ea      	b.n	801696c <_scanf_float+0x60>
 8016b96:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016b9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016b9e:	463a      	mov	r2, r7
 8016ba0:	4640      	mov	r0, r8
 8016ba2:	4798      	blx	r3
 8016ba4:	6923      	ldr	r3, [r4, #16]
 8016ba6:	3b01      	subs	r3, #1
 8016ba8:	6123      	str	r3, [r4, #16]
 8016baa:	e6ec      	b.n	8016986 <_scanf_float+0x7a>
 8016bac:	1e6b      	subs	r3, r5, #1
 8016bae:	2b06      	cmp	r3, #6
 8016bb0:	d825      	bhi.n	8016bfe <_scanf_float+0x2f2>
 8016bb2:	2d02      	cmp	r5, #2
 8016bb4:	d836      	bhi.n	8016c24 <_scanf_float+0x318>
 8016bb6:	455e      	cmp	r6, fp
 8016bb8:	f67f aee8 	bls.w	801698c <_scanf_float+0x80>
 8016bbc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016bc0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016bc4:	463a      	mov	r2, r7
 8016bc6:	4640      	mov	r0, r8
 8016bc8:	4798      	blx	r3
 8016bca:	6923      	ldr	r3, [r4, #16]
 8016bcc:	3b01      	subs	r3, #1
 8016bce:	6123      	str	r3, [r4, #16]
 8016bd0:	e7f1      	b.n	8016bb6 <_scanf_float+0x2aa>
 8016bd2:	9802      	ldr	r0, [sp, #8]
 8016bd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016bd8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8016bdc:	9002      	str	r0, [sp, #8]
 8016bde:	463a      	mov	r2, r7
 8016be0:	4640      	mov	r0, r8
 8016be2:	4798      	blx	r3
 8016be4:	6923      	ldr	r3, [r4, #16]
 8016be6:	3b01      	subs	r3, #1
 8016be8:	6123      	str	r3, [r4, #16]
 8016bea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016bee:	fa5f fa8a 	uxtb.w	sl, sl
 8016bf2:	f1ba 0f02 	cmp.w	sl, #2
 8016bf6:	d1ec      	bne.n	8016bd2 <_scanf_float+0x2c6>
 8016bf8:	3d03      	subs	r5, #3
 8016bfa:	b2ed      	uxtb	r5, r5
 8016bfc:	1b76      	subs	r6, r6, r5
 8016bfe:	6823      	ldr	r3, [r4, #0]
 8016c00:	05da      	lsls	r2, r3, #23
 8016c02:	d52f      	bpl.n	8016c64 <_scanf_float+0x358>
 8016c04:	055b      	lsls	r3, r3, #21
 8016c06:	d510      	bpl.n	8016c2a <_scanf_float+0x31e>
 8016c08:	455e      	cmp	r6, fp
 8016c0a:	f67f aebf 	bls.w	801698c <_scanf_float+0x80>
 8016c0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016c12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016c16:	463a      	mov	r2, r7
 8016c18:	4640      	mov	r0, r8
 8016c1a:	4798      	blx	r3
 8016c1c:	6923      	ldr	r3, [r4, #16]
 8016c1e:	3b01      	subs	r3, #1
 8016c20:	6123      	str	r3, [r4, #16]
 8016c22:	e7f1      	b.n	8016c08 <_scanf_float+0x2fc>
 8016c24:	46aa      	mov	sl, r5
 8016c26:	9602      	str	r6, [sp, #8]
 8016c28:	e7df      	b.n	8016bea <_scanf_float+0x2de>
 8016c2a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8016c2e:	6923      	ldr	r3, [r4, #16]
 8016c30:	2965      	cmp	r1, #101	; 0x65
 8016c32:	f103 33ff 	add.w	r3, r3, #4294967295
 8016c36:	f106 35ff 	add.w	r5, r6, #4294967295
 8016c3a:	6123      	str	r3, [r4, #16]
 8016c3c:	d00c      	beq.n	8016c58 <_scanf_float+0x34c>
 8016c3e:	2945      	cmp	r1, #69	; 0x45
 8016c40:	d00a      	beq.n	8016c58 <_scanf_float+0x34c>
 8016c42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016c46:	463a      	mov	r2, r7
 8016c48:	4640      	mov	r0, r8
 8016c4a:	4798      	blx	r3
 8016c4c:	6923      	ldr	r3, [r4, #16]
 8016c4e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8016c52:	3b01      	subs	r3, #1
 8016c54:	1eb5      	subs	r5, r6, #2
 8016c56:	6123      	str	r3, [r4, #16]
 8016c58:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016c5c:	463a      	mov	r2, r7
 8016c5e:	4640      	mov	r0, r8
 8016c60:	4798      	blx	r3
 8016c62:	462e      	mov	r6, r5
 8016c64:	6825      	ldr	r5, [r4, #0]
 8016c66:	f015 0510 	ands.w	r5, r5, #16
 8016c6a:	d14e      	bne.n	8016d0a <_scanf_float+0x3fe>
 8016c6c:	7035      	strb	r5, [r6, #0]
 8016c6e:	6823      	ldr	r3, [r4, #0]
 8016c70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8016c74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016c78:	d119      	bne.n	8016cae <_scanf_float+0x3a2>
 8016c7a:	9b01      	ldr	r3, [sp, #4]
 8016c7c:	454b      	cmp	r3, r9
 8016c7e:	eba3 0209 	sub.w	r2, r3, r9
 8016c82:	d121      	bne.n	8016cc8 <_scanf_float+0x3bc>
 8016c84:	2200      	movs	r2, #0
 8016c86:	4659      	mov	r1, fp
 8016c88:	4640      	mov	r0, r8
 8016c8a:	f000 ff0f 	bl	8017aac <_strtod_r>
 8016c8e:	6822      	ldr	r2, [r4, #0]
 8016c90:	9b03      	ldr	r3, [sp, #12]
 8016c92:	f012 0f02 	tst.w	r2, #2
 8016c96:	681b      	ldr	r3, [r3, #0]
 8016c98:	d021      	beq.n	8016cde <_scanf_float+0x3d2>
 8016c9a:	9903      	ldr	r1, [sp, #12]
 8016c9c:	1d1a      	adds	r2, r3, #4
 8016c9e:	600a      	str	r2, [r1, #0]
 8016ca0:	681b      	ldr	r3, [r3, #0]
 8016ca2:	ed83 0b00 	vstr	d0, [r3]
 8016ca6:	68e3      	ldr	r3, [r4, #12]
 8016ca8:	3301      	adds	r3, #1
 8016caa:	60e3      	str	r3, [r4, #12]
 8016cac:	e66f      	b.n	801698e <_scanf_float+0x82>
 8016cae:	9b04      	ldr	r3, [sp, #16]
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d0e7      	beq.n	8016c84 <_scanf_float+0x378>
 8016cb4:	9905      	ldr	r1, [sp, #20]
 8016cb6:	230a      	movs	r3, #10
 8016cb8:	462a      	mov	r2, r5
 8016cba:	3101      	adds	r1, #1
 8016cbc:	4640      	mov	r0, r8
 8016cbe:	f000 ff7d 	bl	8017bbc <_strtol_r>
 8016cc2:	9b04      	ldr	r3, [sp, #16]
 8016cc4:	9e05      	ldr	r6, [sp, #20]
 8016cc6:	1ac2      	subs	r2, r0, r3
 8016cc8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016ccc:	429e      	cmp	r6, r3
 8016cce:	bf28      	it	cs
 8016cd0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8016cd4:	490e      	ldr	r1, [pc, #56]	; (8016d10 <_scanf_float+0x404>)
 8016cd6:	4630      	mov	r0, r6
 8016cd8:	f000 f8d8 	bl	8016e8c <siprintf>
 8016cdc:	e7d2      	b.n	8016c84 <_scanf_float+0x378>
 8016cde:	9903      	ldr	r1, [sp, #12]
 8016ce0:	f012 0f04 	tst.w	r2, #4
 8016ce4:	f103 0204 	add.w	r2, r3, #4
 8016ce8:	600a      	str	r2, [r1, #0]
 8016cea:	d1d9      	bne.n	8016ca0 <_scanf_float+0x394>
 8016cec:	eeb4 0b40 	vcmp.f64	d0, d0
 8016cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cf4:	681e      	ldr	r6, [r3, #0]
 8016cf6:	d705      	bvc.n	8016d04 <_scanf_float+0x3f8>
 8016cf8:	4806      	ldr	r0, [pc, #24]	; (8016d14 <_scanf_float+0x408>)
 8016cfa:	f000 f8c1 	bl	8016e80 <nanf>
 8016cfe:	ed86 0a00 	vstr	s0, [r6]
 8016d02:	e7d0      	b.n	8016ca6 <_scanf_float+0x39a>
 8016d04:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8016d08:	e7f9      	b.n	8016cfe <_scanf_float+0x3f2>
 8016d0a:	2500      	movs	r5, #0
 8016d0c:	e63f      	b.n	801698e <_scanf_float+0x82>
 8016d0e:	bf00      	nop
 8016d10:	0801b780 	.word	0x0801b780
 8016d14:	0801bbf0 	.word	0x0801bbf0

08016d18 <iprintf>:
 8016d18:	b40f      	push	{r0, r1, r2, r3}
 8016d1a:	4b0a      	ldr	r3, [pc, #40]	; (8016d44 <iprintf+0x2c>)
 8016d1c:	b513      	push	{r0, r1, r4, lr}
 8016d1e:	681c      	ldr	r4, [r3, #0]
 8016d20:	b124      	cbz	r4, 8016d2c <iprintf+0x14>
 8016d22:	69a3      	ldr	r3, [r4, #24]
 8016d24:	b913      	cbnz	r3, 8016d2c <iprintf+0x14>
 8016d26:	4620      	mov	r0, r4
 8016d28:	f001 ff1e 	bl	8018b68 <__sinit>
 8016d2c:	ab05      	add	r3, sp, #20
 8016d2e:	9a04      	ldr	r2, [sp, #16]
 8016d30:	68a1      	ldr	r1, [r4, #8]
 8016d32:	9301      	str	r3, [sp, #4]
 8016d34:	4620      	mov	r0, r4
 8016d36:	f003 fa15 	bl	801a164 <_vfiprintf_r>
 8016d3a:	b002      	add	sp, #8
 8016d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d40:	b004      	add	sp, #16
 8016d42:	4770      	bx	lr
 8016d44:	2000011c 	.word	0x2000011c

08016d48 <putchar>:
 8016d48:	4b09      	ldr	r3, [pc, #36]	; (8016d70 <putchar+0x28>)
 8016d4a:	b513      	push	{r0, r1, r4, lr}
 8016d4c:	681c      	ldr	r4, [r3, #0]
 8016d4e:	4601      	mov	r1, r0
 8016d50:	b134      	cbz	r4, 8016d60 <putchar+0x18>
 8016d52:	69a3      	ldr	r3, [r4, #24]
 8016d54:	b923      	cbnz	r3, 8016d60 <putchar+0x18>
 8016d56:	9001      	str	r0, [sp, #4]
 8016d58:	4620      	mov	r0, r4
 8016d5a:	f001 ff05 	bl	8018b68 <__sinit>
 8016d5e:	9901      	ldr	r1, [sp, #4]
 8016d60:	68a2      	ldr	r2, [r4, #8]
 8016d62:	4620      	mov	r0, r4
 8016d64:	b002      	add	sp, #8
 8016d66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d6a:	f003 bb2b 	b.w	801a3c4 <_putc_r>
 8016d6e:	bf00      	nop
 8016d70:	2000011c 	.word	0x2000011c

08016d74 <_puts_r>:
 8016d74:	b570      	push	{r4, r5, r6, lr}
 8016d76:	460e      	mov	r6, r1
 8016d78:	4605      	mov	r5, r0
 8016d7a:	b118      	cbz	r0, 8016d84 <_puts_r+0x10>
 8016d7c:	6983      	ldr	r3, [r0, #24]
 8016d7e:	b90b      	cbnz	r3, 8016d84 <_puts_r+0x10>
 8016d80:	f001 fef2 	bl	8018b68 <__sinit>
 8016d84:	69ab      	ldr	r3, [r5, #24]
 8016d86:	68ac      	ldr	r4, [r5, #8]
 8016d88:	b913      	cbnz	r3, 8016d90 <_puts_r+0x1c>
 8016d8a:	4628      	mov	r0, r5
 8016d8c:	f001 feec 	bl	8018b68 <__sinit>
 8016d90:	4b2c      	ldr	r3, [pc, #176]	; (8016e44 <_puts_r+0xd0>)
 8016d92:	429c      	cmp	r4, r3
 8016d94:	d120      	bne.n	8016dd8 <_puts_r+0x64>
 8016d96:	686c      	ldr	r4, [r5, #4]
 8016d98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016d9a:	07db      	lsls	r3, r3, #31
 8016d9c:	d405      	bmi.n	8016daa <_puts_r+0x36>
 8016d9e:	89a3      	ldrh	r3, [r4, #12]
 8016da0:	0598      	lsls	r0, r3, #22
 8016da2:	d402      	bmi.n	8016daa <_puts_r+0x36>
 8016da4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016da6:	f002 faf0 	bl	801938a <__retarget_lock_acquire_recursive>
 8016daa:	89a3      	ldrh	r3, [r4, #12]
 8016dac:	0719      	lsls	r1, r3, #28
 8016dae:	d51d      	bpl.n	8016dec <_puts_r+0x78>
 8016db0:	6923      	ldr	r3, [r4, #16]
 8016db2:	b1db      	cbz	r3, 8016dec <_puts_r+0x78>
 8016db4:	3e01      	subs	r6, #1
 8016db6:	68a3      	ldr	r3, [r4, #8]
 8016db8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016dbc:	3b01      	subs	r3, #1
 8016dbe:	60a3      	str	r3, [r4, #8]
 8016dc0:	bb39      	cbnz	r1, 8016e12 <_puts_r+0x9e>
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	da38      	bge.n	8016e38 <_puts_r+0xc4>
 8016dc6:	4622      	mov	r2, r4
 8016dc8:	210a      	movs	r1, #10
 8016dca:	4628      	mov	r0, r5
 8016dcc:	f000 fef8 	bl	8017bc0 <__swbuf_r>
 8016dd0:	3001      	adds	r0, #1
 8016dd2:	d011      	beq.n	8016df8 <_puts_r+0x84>
 8016dd4:	250a      	movs	r5, #10
 8016dd6:	e011      	b.n	8016dfc <_puts_r+0x88>
 8016dd8:	4b1b      	ldr	r3, [pc, #108]	; (8016e48 <_puts_r+0xd4>)
 8016dda:	429c      	cmp	r4, r3
 8016ddc:	d101      	bne.n	8016de2 <_puts_r+0x6e>
 8016dde:	68ac      	ldr	r4, [r5, #8]
 8016de0:	e7da      	b.n	8016d98 <_puts_r+0x24>
 8016de2:	4b1a      	ldr	r3, [pc, #104]	; (8016e4c <_puts_r+0xd8>)
 8016de4:	429c      	cmp	r4, r3
 8016de6:	bf08      	it	eq
 8016de8:	68ec      	ldreq	r4, [r5, #12]
 8016dea:	e7d5      	b.n	8016d98 <_puts_r+0x24>
 8016dec:	4621      	mov	r1, r4
 8016dee:	4628      	mov	r0, r5
 8016df0:	f000 ff38 	bl	8017c64 <__swsetup_r>
 8016df4:	2800      	cmp	r0, #0
 8016df6:	d0dd      	beq.n	8016db4 <_puts_r+0x40>
 8016df8:	f04f 35ff 	mov.w	r5, #4294967295
 8016dfc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016dfe:	07da      	lsls	r2, r3, #31
 8016e00:	d405      	bmi.n	8016e0e <_puts_r+0x9a>
 8016e02:	89a3      	ldrh	r3, [r4, #12]
 8016e04:	059b      	lsls	r3, r3, #22
 8016e06:	d402      	bmi.n	8016e0e <_puts_r+0x9a>
 8016e08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016e0a:	f002 fabf 	bl	801938c <__retarget_lock_release_recursive>
 8016e0e:	4628      	mov	r0, r5
 8016e10:	bd70      	pop	{r4, r5, r6, pc}
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	da04      	bge.n	8016e20 <_puts_r+0xac>
 8016e16:	69a2      	ldr	r2, [r4, #24]
 8016e18:	429a      	cmp	r2, r3
 8016e1a:	dc06      	bgt.n	8016e2a <_puts_r+0xb6>
 8016e1c:	290a      	cmp	r1, #10
 8016e1e:	d004      	beq.n	8016e2a <_puts_r+0xb6>
 8016e20:	6823      	ldr	r3, [r4, #0]
 8016e22:	1c5a      	adds	r2, r3, #1
 8016e24:	6022      	str	r2, [r4, #0]
 8016e26:	7019      	strb	r1, [r3, #0]
 8016e28:	e7c5      	b.n	8016db6 <_puts_r+0x42>
 8016e2a:	4622      	mov	r2, r4
 8016e2c:	4628      	mov	r0, r5
 8016e2e:	f000 fec7 	bl	8017bc0 <__swbuf_r>
 8016e32:	3001      	adds	r0, #1
 8016e34:	d1bf      	bne.n	8016db6 <_puts_r+0x42>
 8016e36:	e7df      	b.n	8016df8 <_puts_r+0x84>
 8016e38:	6823      	ldr	r3, [r4, #0]
 8016e3a:	250a      	movs	r5, #10
 8016e3c:	1c5a      	adds	r2, r3, #1
 8016e3e:	6022      	str	r2, [r4, #0]
 8016e40:	701d      	strb	r5, [r3, #0]
 8016e42:	e7db      	b.n	8016dfc <_puts_r+0x88>
 8016e44:	0801b98c 	.word	0x0801b98c
 8016e48:	0801b9ac 	.word	0x0801b9ac
 8016e4c:	0801b96c 	.word	0x0801b96c

08016e50 <puts>:
 8016e50:	4b02      	ldr	r3, [pc, #8]	; (8016e5c <puts+0xc>)
 8016e52:	4601      	mov	r1, r0
 8016e54:	6818      	ldr	r0, [r3, #0]
 8016e56:	f7ff bf8d 	b.w	8016d74 <_puts_r>
 8016e5a:	bf00      	nop
 8016e5c:	2000011c 	.word	0x2000011c

08016e60 <_sbrk_r>:
 8016e60:	b538      	push	{r3, r4, r5, lr}
 8016e62:	4d06      	ldr	r5, [pc, #24]	; (8016e7c <_sbrk_r+0x1c>)
 8016e64:	2300      	movs	r3, #0
 8016e66:	4604      	mov	r4, r0
 8016e68:	4608      	mov	r0, r1
 8016e6a:	602b      	str	r3, [r5, #0]
 8016e6c:	f7eb fe0a 	bl	8002a84 <_sbrk>
 8016e70:	1c43      	adds	r3, r0, #1
 8016e72:	d102      	bne.n	8016e7a <_sbrk_r+0x1a>
 8016e74:	682b      	ldr	r3, [r5, #0]
 8016e76:	b103      	cbz	r3, 8016e7a <_sbrk_r+0x1a>
 8016e78:	6023      	str	r3, [r4, #0]
 8016e7a:	bd38      	pop	{r3, r4, r5, pc}
 8016e7c:	200061bc 	.word	0x200061bc

08016e80 <nanf>:
 8016e80:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016e88 <nanf+0x8>
 8016e84:	4770      	bx	lr
 8016e86:	bf00      	nop
 8016e88:	7fc00000 	.word	0x7fc00000

08016e8c <siprintf>:
 8016e8c:	b40e      	push	{r1, r2, r3}
 8016e8e:	b500      	push	{lr}
 8016e90:	b09c      	sub	sp, #112	; 0x70
 8016e92:	ab1d      	add	r3, sp, #116	; 0x74
 8016e94:	9002      	str	r0, [sp, #8]
 8016e96:	9006      	str	r0, [sp, #24]
 8016e98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016e9c:	4809      	ldr	r0, [pc, #36]	; (8016ec4 <siprintf+0x38>)
 8016e9e:	9107      	str	r1, [sp, #28]
 8016ea0:	9104      	str	r1, [sp, #16]
 8016ea2:	4909      	ldr	r1, [pc, #36]	; (8016ec8 <siprintf+0x3c>)
 8016ea4:	f853 2b04 	ldr.w	r2, [r3], #4
 8016ea8:	9105      	str	r1, [sp, #20]
 8016eaa:	6800      	ldr	r0, [r0, #0]
 8016eac:	9301      	str	r3, [sp, #4]
 8016eae:	a902      	add	r1, sp, #8
 8016eb0:	f003 f82e 	bl	8019f10 <_svfiprintf_r>
 8016eb4:	9b02      	ldr	r3, [sp, #8]
 8016eb6:	2200      	movs	r2, #0
 8016eb8:	701a      	strb	r2, [r3, #0]
 8016eba:	b01c      	add	sp, #112	; 0x70
 8016ebc:	f85d eb04 	ldr.w	lr, [sp], #4
 8016ec0:	b003      	add	sp, #12
 8016ec2:	4770      	bx	lr
 8016ec4:	2000011c 	.word	0x2000011c
 8016ec8:	ffff0208 	.word	0xffff0208

08016ecc <strcpy>:
 8016ecc:	4603      	mov	r3, r0
 8016ece:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016ed2:	f803 2b01 	strb.w	r2, [r3], #1
 8016ed6:	2a00      	cmp	r2, #0
 8016ed8:	d1f9      	bne.n	8016ece <strcpy+0x2>
 8016eda:	4770      	bx	lr

08016edc <strstr>:
 8016edc:	780a      	ldrb	r2, [r1, #0]
 8016ede:	b570      	push	{r4, r5, r6, lr}
 8016ee0:	b96a      	cbnz	r2, 8016efe <strstr+0x22>
 8016ee2:	bd70      	pop	{r4, r5, r6, pc}
 8016ee4:	429a      	cmp	r2, r3
 8016ee6:	d109      	bne.n	8016efc <strstr+0x20>
 8016ee8:	460c      	mov	r4, r1
 8016eea:	4605      	mov	r5, r0
 8016eec:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8016ef0:	2b00      	cmp	r3, #0
 8016ef2:	d0f6      	beq.n	8016ee2 <strstr+0x6>
 8016ef4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8016ef8:	429e      	cmp	r6, r3
 8016efa:	d0f7      	beq.n	8016eec <strstr+0x10>
 8016efc:	3001      	adds	r0, #1
 8016efe:	7803      	ldrb	r3, [r0, #0]
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	d1ef      	bne.n	8016ee4 <strstr+0x8>
 8016f04:	4618      	mov	r0, r3
 8016f06:	e7ec      	b.n	8016ee2 <strstr+0x6>

08016f08 <sulp>:
 8016f08:	b570      	push	{r4, r5, r6, lr}
 8016f0a:	4604      	mov	r4, r0
 8016f0c:	460d      	mov	r5, r1
 8016f0e:	4616      	mov	r6, r2
 8016f10:	ec45 4b10 	vmov	d0, r4, r5
 8016f14:	f002 fe3e 	bl	8019b94 <__ulp>
 8016f18:	b17e      	cbz	r6, 8016f3a <sulp+0x32>
 8016f1a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016f1e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	dd09      	ble.n	8016f3a <sulp+0x32>
 8016f26:	051b      	lsls	r3, r3, #20
 8016f28:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8016f2c:	2000      	movs	r0, #0
 8016f2e:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8016f32:	ec41 0b17 	vmov	d7, r0, r1
 8016f36:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016f3a:	bd70      	pop	{r4, r5, r6, pc}
 8016f3c:	0000      	movs	r0, r0
	...

08016f40 <_strtod_l>:
 8016f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f44:	ed2d 8b0e 	vpush	{d8-d14}
 8016f48:	b097      	sub	sp, #92	; 0x5c
 8016f4a:	461f      	mov	r7, r3
 8016f4c:	2300      	movs	r3, #0
 8016f4e:	9312      	str	r3, [sp, #72]	; 0x48
 8016f50:	4ba1      	ldr	r3, [pc, #644]	; (80171d8 <_strtod_l+0x298>)
 8016f52:	920d      	str	r2, [sp, #52]	; 0x34
 8016f54:	681b      	ldr	r3, [r3, #0]
 8016f56:	9307      	str	r3, [sp, #28]
 8016f58:	4604      	mov	r4, r0
 8016f5a:	4618      	mov	r0, r3
 8016f5c:	468b      	mov	fp, r1
 8016f5e:	f7e9 f96f 	bl	8000240 <strlen>
 8016f62:	f04f 0800 	mov.w	r8, #0
 8016f66:	4605      	mov	r5, r0
 8016f68:	f04f 0900 	mov.w	r9, #0
 8016f6c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8016f70:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016f72:	7813      	ldrb	r3, [r2, #0]
 8016f74:	2b2b      	cmp	r3, #43	; 0x2b
 8016f76:	d04d      	beq.n	8017014 <_strtod_l+0xd4>
 8016f78:	d83a      	bhi.n	8016ff0 <_strtod_l+0xb0>
 8016f7a:	2b0d      	cmp	r3, #13
 8016f7c:	d833      	bhi.n	8016fe6 <_strtod_l+0xa6>
 8016f7e:	2b08      	cmp	r3, #8
 8016f80:	d833      	bhi.n	8016fea <_strtod_l+0xaa>
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	d03d      	beq.n	8017002 <_strtod_l+0xc2>
 8016f86:	2300      	movs	r3, #0
 8016f88:	9308      	str	r3, [sp, #32]
 8016f8a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8016f8c:	7833      	ldrb	r3, [r6, #0]
 8016f8e:	2b30      	cmp	r3, #48	; 0x30
 8016f90:	f040 80b0 	bne.w	80170f4 <_strtod_l+0x1b4>
 8016f94:	7873      	ldrb	r3, [r6, #1]
 8016f96:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016f9a:	2b58      	cmp	r3, #88	; 0x58
 8016f9c:	d167      	bne.n	801706e <_strtod_l+0x12e>
 8016f9e:	9b08      	ldr	r3, [sp, #32]
 8016fa0:	9301      	str	r3, [sp, #4]
 8016fa2:	ab12      	add	r3, sp, #72	; 0x48
 8016fa4:	9702      	str	r7, [sp, #8]
 8016fa6:	9300      	str	r3, [sp, #0]
 8016fa8:	4a8c      	ldr	r2, [pc, #560]	; (80171dc <_strtod_l+0x29c>)
 8016faa:	ab13      	add	r3, sp, #76	; 0x4c
 8016fac:	a911      	add	r1, sp, #68	; 0x44
 8016fae:	4620      	mov	r0, r4
 8016fb0:	f001 fede 	bl	8018d70 <__gethex>
 8016fb4:	f010 0507 	ands.w	r5, r0, #7
 8016fb8:	4607      	mov	r7, r0
 8016fba:	d005      	beq.n	8016fc8 <_strtod_l+0x88>
 8016fbc:	2d06      	cmp	r5, #6
 8016fbe:	d12b      	bne.n	8017018 <_strtod_l+0xd8>
 8016fc0:	3601      	adds	r6, #1
 8016fc2:	2300      	movs	r3, #0
 8016fc4:	9611      	str	r6, [sp, #68]	; 0x44
 8016fc6:	9308      	str	r3, [sp, #32]
 8016fc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	f040 854e 	bne.w	8017a6c <_strtod_l+0xb2c>
 8016fd0:	9b08      	ldr	r3, [sp, #32]
 8016fd2:	b1e3      	cbz	r3, 801700e <_strtod_l+0xce>
 8016fd4:	ec49 8b17 	vmov	d7, r8, r9
 8016fd8:	eeb1 0b47 	vneg.f64	d0, d7
 8016fdc:	b017      	add	sp, #92	; 0x5c
 8016fde:	ecbd 8b0e 	vpop	{d8-d14}
 8016fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016fe6:	2b20      	cmp	r3, #32
 8016fe8:	d1cd      	bne.n	8016f86 <_strtod_l+0x46>
 8016fea:	3201      	adds	r2, #1
 8016fec:	9211      	str	r2, [sp, #68]	; 0x44
 8016fee:	e7bf      	b.n	8016f70 <_strtod_l+0x30>
 8016ff0:	2b2d      	cmp	r3, #45	; 0x2d
 8016ff2:	d1c8      	bne.n	8016f86 <_strtod_l+0x46>
 8016ff4:	2301      	movs	r3, #1
 8016ff6:	9308      	str	r3, [sp, #32]
 8016ff8:	1c53      	adds	r3, r2, #1
 8016ffa:	9311      	str	r3, [sp, #68]	; 0x44
 8016ffc:	7853      	ldrb	r3, [r2, #1]
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	d1c3      	bne.n	8016f8a <_strtod_l+0x4a>
 8017002:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017004:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8017008:	2b00      	cmp	r3, #0
 801700a:	f040 852d 	bne.w	8017a68 <_strtod_l+0xb28>
 801700e:	ec49 8b10 	vmov	d0, r8, r9
 8017012:	e7e3      	b.n	8016fdc <_strtod_l+0x9c>
 8017014:	2300      	movs	r3, #0
 8017016:	e7ee      	b.n	8016ff6 <_strtod_l+0xb6>
 8017018:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801701a:	b13a      	cbz	r2, 801702c <_strtod_l+0xec>
 801701c:	2135      	movs	r1, #53	; 0x35
 801701e:	a814      	add	r0, sp, #80	; 0x50
 8017020:	f002 fec0 	bl	8019da4 <__copybits>
 8017024:	9912      	ldr	r1, [sp, #72]	; 0x48
 8017026:	4620      	mov	r0, r4
 8017028:	f002 fa82 	bl	8019530 <_Bfree>
 801702c:	3d01      	subs	r5, #1
 801702e:	2d04      	cmp	r5, #4
 8017030:	d806      	bhi.n	8017040 <_strtod_l+0x100>
 8017032:	e8df f005 	tbb	[pc, r5]
 8017036:	030a      	.short	0x030a
 8017038:	1714      	.short	0x1714
 801703a:	0a          	.byte	0x0a
 801703b:	00          	.byte	0x00
 801703c:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8017040:	073f      	lsls	r7, r7, #28
 8017042:	d5c1      	bpl.n	8016fc8 <_strtod_l+0x88>
 8017044:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8017048:	e7be      	b.n	8016fc8 <_strtod_l+0x88>
 801704a:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 801704e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017050:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8017054:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8017058:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801705c:	e7f0      	b.n	8017040 <_strtod_l+0x100>
 801705e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 80171e0 <_strtod_l+0x2a0>
 8017062:	e7ed      	b.n	8017040 <_strtod_l+0x100>
 8017064:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8017068:	f04f 38ff 	mov.w	r8, #4294967295
 801706c:	e7e8      	b.n	8017040 <_strtod_l+0x100>
 801706e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017070:	1c5a      	adds	r2, r3, #1
 8017072:	9211      	str	r2, [sp, #68]	; 0x44
 8017074:	785b      	ldrb	r3, [r3, #1]
 8017076:	2b30      	cmp	r3, #48	; 0x30
 8017078:	d0f9      	beq.n	801706e <_strtod_l+0x12e>
 801707a:	2b00      	cmp	r3, #0
 801707c:	d0a4      	beq.n	8016fc8 <_strtod_l+0x88>
 801707e:	2301      	movs	r3, #1
 8017080:	f04f 0a00 	mov.w	sl, #0
 8017084:	9304      	str	r3, [sp, #16]
 8017086:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017088:	930a      	str	r3, [sp, #40]	; 0x28
 801708a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801708e:	f8cd a018 	str.w	sl, [sp, #24]
 8017092:	220a      	movs	r2, #10
 8017094:	9811      	ldr	r0, [sp, #68]	; 0x44
 8017096:	7807      	ldrb	r7, [r0, #0]
 8017098:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 801709c:	b2d9      	uxtb	r1, r3
 801709e:	2909      	cmp	r1, #9
 80170a0:	d92a      	bls.n	80170f8 <_strtod_l+0x1b8>
 80170a2:	9907      	ldr	r1, [sp, #28]
 80170a4:	462a      	mov	r2, r5
 80170a6:	f003 fa22 	bl	801a4ee <strncmp>
 80170aa:	2800      	cmp	r0, #0
 80170ac:	d033      	beq.n	8017116 <_strtod_l+0x1d6>
 80170ae:	2000      	movs	r0, #0
 80170b0:	9b06      	ldr	r3, [sp, #24]
 80170b2:	463a      	mov	r2, r7
 80170b4:	4601      	mov	r1, r0
 80170b6:	4607      	mov	r7, r0
 80170b8:	2a65      	cmp	r2, #101	; 0x65
 80170ba:	d001      	beq.n	80170c0 <_strtod_l+0x180>
 80170bc:	2a45      	cmp	r2, #69	; 0x45
 80170be:	d117      	bne.n	80170f0 <_strtod_l+0x1b0>
 80170c0:	b91b      	cbnz	r3, 80170ca <_strtod_l+0x18a>
 80170c2:	9b04      	ldr	r3, [sp, #16]
 80170c4:	4303      	orrs	r3, r0
 80170c6:	d09c      	beq.n	8017002 <_strtod_l+0xc2>
 80170c8:	2300      	movs	r3, #0
 80170ca:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 80170ce:	f10b 0201 	add.w	r2, fp, #1
 80170d2:	9211      	str	r2, [sp, #68]	; 0x44
 80170d4:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80170d8:	2a2b      	cmp	r2, #43	; 0x2b
 80170da:	d071      	beq.n	80171c0 <_strtod_l+0x280>
 80170dc:	2a2d      	cmp	r2, #45	; 0x2d
 80170de:	d077      	beq.n	80171d0 <_strtod_l+0x290>
 80170e0:	f04f 0e00 	mov.w	lr, #0
 80170e4:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80170e8:	2d09      	cmp	r5, #9
 80170ea:	d97f      	bls.n	80171ec <_strtod_l+0x2ac>
 80170ec:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80170f0:	2500      	movs	r5, #0
 80170f2:	e09b      	b.n	801722c <_strtod_l+0x2ec>
 80170f4:	2300      	movs	r3, #0
 80170f6:	e7c3      	b.n	8017080 <_strtod_l+0x140>
 80170f8:	9906      	ldr	r1, [sp, #24]
 80170fa:	2908      	cmp	r1, #8
 80170fc:	bfdd      	ittte	le
 80170fe:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8017100:	fb02 3301 	mlale	r3, r2, r1, r3
 8017104:	9309      	strle	r3, [sp, #36]	; 0x24
 8017106:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 801710a:	9b06      	ldr	r3, [sp, #24]
 801710c:	3001      	adds	r0, #1
 801710e:	3301      	adds	r3, #1
 8017110:	9306      	str	r3, [sp, #24]
 8017112:	9011      	str	r0, [sp, #68]	; 0x44
 8017114:	e7be      	b.n	8017094 <_strtod_l+0x154>
 8017116:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017118:	195a      	adds	r2, r3, r5
 801711a:	9211      	str	r2, [sp, #68]	; 0x44
 801711c:	5d5a      	ldrb	r2, [r3, r5]
 801711e:	9b06      	ldr	r3, [sp, #24]
 8017120:	b3a3      	cbz	r3, 801718c <_strtod_l+0x24c>
 8017122:	4607      	mov	r7, r0
 8017124:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8017128:	2909      	cmp	r1, #9
 801712a:	d912      	bls.n	8017152 <_strtod_l+0x212>
 801712c:	2101      	movs	r1, #1
 801712e:	e7c3      	b.n	80170b8 <_strtod_l+0x178>
 8017130:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017132:	1c5a      	adds	r2, r3, #1
 8017134:	9211      	str	r2, [sp, #68]	; 0x44
 8017136:	785a      	ldrb	r2, [r3, #1]
 8017138:	3001      	adds	r0, #1
 801713a:	2a30      	cmp	r2, #48	; 0x30
 801713c:	d0f8      	beq.n	8017130 <_strtod_l+0x1f0>
 801713e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8017142:	2b08      	cmp	r3, #8
 8017144:	f200 8497 	bhi.w	8017a76 <_strtod_l+0xb36>
 8017148:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801714a:	930a      	str	r3, [sp, #40]	; 0x28
 801714c:	4607      	mov	r7, r0
 801714e:	2000      	movs	r0, #0
 8017150:	4603      	mov	r3, r0
 8017152:	3a30      	subs	r2, #48	; 0x30
 8017154:	f100 0101 	add.w	r1, r0, #1
 8017158:	d012      	beq.n	8017180 <_strtod_l+0x240>
 801715a:	440f      	add	r7, r1
 801715c:	eb00 0c03 	add.w	ip, r0, r3
 8017160:	4619      	mov	r1, r3
 8017162:	250a      	movs	r5, #10
 8017164:	4561      	cmp	r1, ip
 8017166:	d113      	bne.n	8017190 <_strtod_l+0x250>
 8017168:	1819      	adds	r1, r3, r0
 801716a:	2908      	cmp	r1, #8
 801716c:	f103 0301 	add.w	r3, r3, #1
 8017170:	4403      	add	r3, r0
 8017172:	dc1c      	bgt.n	80171ae <_strtod_l+0x26e>
 8017174:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017176:	210a      	movs	r1, #10
 8017178:	fb01 2200 	mla	r2, r1, r0, r2
 801717c:	9209      	str	r2, [sp, #36]	; 0x24
 801717e:	2100      	movs	r1, #0
 8017180:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017182:	1c50      	adds	r0, r2, #1
 8017184:	9011      	str	r0, [sp, #68]	; 0x44
 8017186:	7852      	ldrb	r2, [r2, #1]
 8017188:	4608      	mov	r0, r1
 801718a:	e7cb      	b.n	8017124 <_strtod_l+0x1e4>
 801718c:	9806      	ldr	r0, [sp, #24]
 801718e:	e7d4      	b.n	801713a <_strtod_l+0x1fa>
 8017190:	2908      	cmp	r1, #8
 8017192:	dc04      	bgt.n	801719e <_strtod_l+0x25e>
 8017194:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8017196:	436e      	muls	r6, r5
 8017198:	9609      	str	r6, [sp, #36]	; 0x24
 801719a:	3101      	adds	r1, #1
 801719c:	e7e2      	b.n	8017164 <_strtod_l+0x224>
 801719e:	f101 0e01 	add.w	lr, r1, #1
 80171a2:	f1be 0f10 	cmp.w	lr, #16
 80171a6:	bfd8      	it	le
 80171a8:	fb05 fa0a 	mulle.w	sl, r5, sl
 80171ac:	e7f5      	b.n	801719a <_strtod_l+0x25a>
 80171ae:	2b10      	cmp	r3, #16
 80171b0:	bfdc      	itt	le
 80171b2:	210a      	movle	r1, #10
 80171b4:	fb01 2a0a 	mlale	sl, r1, sl, r2
 80171b8:	e7e1      	b.n	801717e <_strtod_l+0x23e>
 80171ba:	2700      	movs	r7, #0
 80171bc:	2101      	movs	r1, #1
 80171be:	e780      	b.n	80170c2 <_strtod_l+0x182>
 80171c0:	f04f 0e00 	mov.w	lr, #0
 80171c4:	f10b 0202 	add.w	r2, fp, #2
 80171c8:	9211      	str	r2, [sp, #68]	; 0x44
 80171ca:	f89b 2002 	ldrb.w	r2, [fp, #2]
 80171ce:	e789      	b.n	80170e4 <_strtod_l+0x1a4>
 80171d0:	f04f 0e01 	mov.w	lr, #1
 80171d4:	e7f6      	b.n	80171c4 <_strtod_l+0x284>
 80171d6:	bf00      	nop
 80171d8:	0801ba34 	.word	0x0801ba34
 80171dc:	0801b788 	.word	0x0801b788
 80171e0:	7ff00000 	.word	0x7ff00000
 80171e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80171e6:	1c55      	adds	r5, r2, #1
 80171e8:	9511      	str	r5, [sp, #68]	; 0x44
 80171ea:	7852      	ldrb	r2, [r2, #1]
 80171ec:	2a30      	cmp	r2, #48	; 0x30
 80171ee:	d0f9      	beq.n	80171e4 <_strtod_l+0x2a4>
 80171f0:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80171f4:	2d08      	cmp	r5, #8
 80171f6:	f63f af7b 	bhi.w	80170f0 <_strtod_l+0x1b0>
 80171fa:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80171fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017200:	9207      	str	r2, [sp, #28]
 8017202:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017204:	1c55      	adds	r5, r2, #1
 8017206:	9511      	str	r5, [sp, #68]	; 0x44
 8017208:	7852      	ldrb	r2, [r2, #1]
 801720a:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801720e:	2e09      	cmp	r6, #9
 8017210:	d937      	bls.n	8017282 <_strtod_l+0x342>
 8017212:	9e07      	ldr	r6, [sp, #28]
 8017214:	1bad      	subs	r5, r5, r6
 8017216:	2d08      	cmp	r5, #8
 8017218:	f644 651f 	movw	r5, #19999	; 0x4e1f
 801721c:	dc02      	bgt.n	8017224 <_strtod_l+0x2e4>
 801721e:	4565      	cmp	r5, ip
 8017220:	bfa8      	it	ge
 8017222:	4665      	movge	r5, ip
 8017224:	f1be 0f00 	cmp.w	lr, #0
 8017228:	d000      	beq.n	801722c <_strtod_l+0x2ec>
 801722a:	426d      	negs	r5, r5
 801722c:	2b00      	cmp	r3, #0
 801722e:	d14d      	bne.n	80172cc <_strtod_l+0x38c>
 8017230:	9b04      	ldr	r3, [sp, #16]
 8017232:	4303      	orrs	r3, r0
 8017234:	f47f aec8 	bne.w	8016fc8 <_strtod_l+0x88>
 8017238:	2900      	cmp	r1, #0
 801723a:	f47f aee2 	bne.w	8017002 <_strtod_l+0xc2>
 801723e:	2a69      	cmp	r2, #105	; 0x69
 8017240:	d027      	beq.n	8017292 <_strtod_l+0x352>
 8017242:	dc24      	bgt.n	801728e <_strtod_l+0x34e>
 8017244:	2a49      	cmp	r2, #73	; 0x49
 8017246:	d024      	beq.n	8017292 <_strtod_l+0x352>
 8017248:	2a4e      	cmp	r2, #78	; 0x4e
 801724a:	f47f aeda 	bne.w	8017002 <_strtod_l+0xc2>
 801724e:	4996      	ldr	r1, [pc, #600]	; (80174a8 <_strtod_l+0x568>)
 8017250:	a811      	add	r0, sp, #68	; 0x44
 8017252:	f001 ffe5 	bl	8019220 <__match>
 8017256:	2800      	cmp	r0, #0
 8017258:	f43f aed3 	beq.w	8017002 <_strtod_l+0xc2>
 801725c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801725e:	781b      	ldrb	r3, [r3, #0]
 8017260:	2b28      	cmp	r3, #40	; 0x28
 8017262:	d12d      	bne.n	80172c0 <_strtod_l+0x380>
 8017264:	4991      	ldr	r1, [pc, #580]	; (80174ac <_strtod_l+0x56c>)
 8017266:	aa14      	add	r2, sp, #80	; 0x50
 8017268:	a811      	add	r0, sp, #68	; 0x44
 801726a:	f001 ffed 	bl	8019248 <__hexnan>
 801726e:	2805      	cmp	r0, #5
 8017270:	d126      	bne.n	80172c0 <_strtod_l+0x380>
 8017272:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017274:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8017278:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801727c:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8017280:	e6a2      	b.n	8016fc8 <_strtod_l+0x88>
 8017282:	250a      	movs	r5, #10
 8017284:	fb05 250c 	mla	r5, r5, ip, r2
 8017288:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 801728c:	e7b9      	b.n	8017202 <_strtod_l+0x2c2>
 801728e:	2a6e      	cmp	r2, #110	; 0x6e
 8017290:	e7db      	b.n	801724a <_strtod_l+0x30a>
 8017292:	4987      	ldr	r1, [pc, #540]	; (80174b0 <_strtod_l+0x570>)
 8017294:	a811      	add	r0, sp, #68	; 0x44
 8017296:	f001 ffc3 	bl	8019220 <__match>
 801729a:	2800      	cmp	r0, #0
 801729c:	f43f aeb1 	beq.w	8017002 <_strtod_l+0xc2>
 80172a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80172a2:	4984      	ldr	r1, [pc, #528]	; (80174b4 <_strtod_l+0x574>)
 80172a4:	3b01      	subs	r3, #1
 80172a6:	a811      	add	r0, sp, #68	; 0x44
 80172a8:	9311      	str	r3, [sp, #68]	; 0x44
 80172aa:	f001 ffb9 	bl	8019220 <__match>
 80172ae:	b910      	cbnz	r0, 80172b6 <_strtod_l+0x376>
 80172b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80172b2:	3301      	adds	r3, #1
 80172b4:	9311      	str	r3, [sp, #68]	; 0x44
 80172b6:	f8df 9210 	ldr.w	r9, [pc, #528]	; 80174c8 <_strtod_l+0x588>
 80172ba:	f04f 0800 	mov.w	r8, #0
 80172be:	e683      	b.n	8016fc8 <_strtod_l+0x88>
 80172c0:	487d      	ldr	r0, [pc, #500]	; (80174b8 <_strtod_l+0x578>)
 80172c2:	f003 f8c9 	bl	801a458 <nan>
 80172c6:	ec59 8b10 	vmov	r8, r9, d0
 80172ca:	e67d      	b.n	8016fc8 <_strtod_l+0x88>
 80172cc:	1bea      	subs	r2, r5, r7
 80172ce:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 80172d2:	9207      	str	r2, [sp, #28]
 80172d4:	9a06      	ldr	r2, [sp, #24]
 80172d6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80172da:	2a00      	cmp	r2, #0
 80172dc:	bf08      	it	eq
 80172de:	461a      	moveq	r2, r3
 80172e0:	2b10      	cmp	r3, #16
 80172e2:	9206      	str	r2, [sp, #24]
 80172e4:	461a      	mov	r2, r3
 80172e6:	bfa8      	it	ge
 80172e8:	2210      	movge	r2, #16
 80172ea:	2b09      	cmp	r3, #9
 80172ec:	ec59 8b17 	vmov	r8, r9, d7
 80172f0:	dd0c      	ble.n	801730c <_strtod_l+0x3cc>
 80172f2:	4972      	ldr	r1, [pc, #456]	; (80174bc <_strtod_l+0x57c>)
 80172f4:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80172f8:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 80172fc:	ee06 aa90 	vmov	s13, sl
 8017300:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8017304:	eea7 6b05 	vfma.f64	d6, d7, d5
 8017308:	ec59 8b16 	vmov	r8, r9, d6
 801730c:	2b0f      	cmp	r3, #15
 801730e:	dc36      	bgt.n	801737e <_strtod_l+0x43e>
 8017310:	9907      	ldr	r1, [sp, #28]
 8017312:	2900      	cmp	r1, #0
 8017314:	f43f ae58 	beq.w	8016fc8 <_strtod_l+0x88>
 8017318:	dd23      	ble.n	8017362 <_strtod_l+0x422>
 801731a:	2916      	cmp	r1, #22
 801731c:	dc0b      	bgt.n	8017336 <_strtod_l+0x3f6>
 801731e:	4b67      	ldr	r3, [pc, #412]	; (80174bc <_strtod_l+0x57c>)
 8017320:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8017324:	ed93 7b00 	vldr	d7, [r3]
 8017328:	ec49 8b16 	vmov	d6, r8, r9
 801732c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017330:	ec59 8b17 	vmov	r8, r9, d7
 8017334:	e648      	b.n	8016fc8 <_strtod_l+0x88>
 8017336:	9807      	ldr	r0, [sp, #28]
 8017338:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 801733c:	4281      	cmp	r1, r0
 801733e:	db1e      	blt.n	801737e <_strtod_l+0x43e>
 8017340:	4a5e      	ldr	r2, [pc, #376]	; (80174bc <_strtod_l+0x57c>)
 8017342:	f1c3 030f 	rsb	r3, r3, #15
 8017346:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801734a:	ed91 7b00 	vldr	d7, [r1]
 801734e:	ec49 8b16 	vmov	d6, r8, r9
 8017352:	1ac3      	subs	r3, r0, r3
 8017354:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8017358:	ee27 7b06 	vmul.f64	d7, d7, d6
 801735c:	ed92 6b00 	vldr	d6, [r2]
 8017360:	e7e4      	b.n	801732c <_strtod_l+0x3ec>
 8017362:	9907      	ldr	r1, [sp, #28]
 8017364:	3116      	adds	r1, #22
 8017366:	db0a      	blt.n	801737e <_strtod_l+0x43e>
 8017368:	4b54      	ldr	r3, [pc, #336]	; (80174bc <_strtod_l+0x57c>)
 801736a:	1b7d      	subs	r5, r7, r5
 801736c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8017370:	ed95 7b00 	vldr	d7, [r5]
 8017374:	ec49 8b16 	vmov	d6, r8, r9
 8017378:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801737c:	e7d8      	b.n	8017330 <_strtod_l+0x3f0>
 801737e:	9907      	ldr	r1, [sp, #28]
 8017380:	1a9a      	subs	r2, r3, r2
 8017382:	440a      	add	r2, r1
 8017384:	2a00      	cmp	r2, #0
 8017386:	dd6f      	ble.n	8017468 <_strtod_l+0x528>
 8017388:	f012 000f 	ands.w	r0, r2, #15
 801738c:	d00a      	beq.n	80173a4 <_strtod_l+0x464>
 801738e:	494b      	ldr	r1, [pc, #300]	; (80174bc <_strtod_l+0x57c>)
 8017390:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8017394:	ed91 7b00 	vldr	d7, [r1]
 8017398:	ec49 8b16 	vmov	d6, r8, r9
 801739c:	ee27 7b06 	vmul.f64	d7, d7, d6
 80173a0:	ec59 8b17 	vmov	r8, r9, d7
 80173a4:	f032 020f 	bics.w	r2, r2, #15
 80173a8:	d04f      	beq.n	801744a <_strtod_l+0x50a>
 80173aa:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 80173ae:	dd22      	ble.n	80173f6 <_strtod_l+0x4b6>
 80173b0:	2500      	movs	r5, #0
 80173b2:	462e      	mov	r6, r5
 80173b4:	9506      	str	r5, [sp, #24]
 80173b6:	462f      	mov	r7, r5
 80173b8:	2322      	movs	r3, #34	; 0x22
 80173ba:	f8df 910c 	ldr.w	r9, [pc, #268]	; 80174c8 <_strtod_l+0x588>
 80173be:	6023      	str	r3, [r4, #0]
 80173c0:	f04f 0800 	mov.w	r8, #0
 80173c4:	9b06      	ldr	r3, [sp, #24]
 80173c6:	2b00      	cmp	r3, #0
 80173c8:	f43f adfe 	beq.w	8016fc8 <_strtod_l+0x88>
 80173cc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80173ce:	4620      	mov	r0, r4
 80173d0:	f002 f8ae 	bl	8019530 <_Bfree>
 80173d4:	4639      	mov	r1, r7
 80173d6:	4620      	mov	r0, r4
 80173d8:	f002 f8aa 	bl	8019530 <_Bfree>
 80173dc:	4631      	mov	r1, r6
 80173de:	4620      	mov	r0, r4
 80173e0:	f002 f8a6 	bl	8019530 <_Bfree>
 80173e4:	9906      	ldr	r1, [sp, #24]
 80173e6:	4620      	mov	r0, r4
 80173e8:	f002 f8a2 	bl	8019530 <_Bfree>
 80173ec:	4629      	mov	r1, r5
 80173ee:	4620      	mov	r0, r4
 80173f0:	f002 f89e 	bl	8019530 <_Bfree>
 80173f4:	e5e8      	b.n	8016fc8 <_strtod_l+0x88>
 80173f6:	2000      	movs	r0, #0
 80173f8:	ec49 8b17 	vmov	d7, r8, r9
 80173fc:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 80174c0 <_strtod_l+0x580>
 8017400:	1112      	asrs	r2, r2, #4
 8017402:	4601      	mov	r1, r0
 8017404:	2a01      	cmp	r2, #1
 8017406:	dc23      	bgt.n	8017450 <_strtod_l+0x510>
 8017408:	b108      	cbz	r0, 801740e <_strtod_l+0x4ce>
 801740a:	ec59 8b17 	vmov	r8, r9, d7
 801740e:	4a2c      	ldr	r2, [pc, #176]	; (80174c0 <_strtod_l+0x580>)
 8017410:	482c      	ldr	r0, [pc, #176]	; (80174c4 <_strtod_l+0x584>)
 8017412:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8017416:	ed92 7b00 	vldr	d7, [r2]
 801741a:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801741e:	ec49 8b16 	vmov	d6, r8, r9
 8017422:	4a29      	ldr	r2, [pc, #164]	; (80174c8 <_strtod_l+0x588>)
 8017424:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017428:	ee17 1a90 	vmov	r1, s15
 801742c:	400a      	ands	r2, r1
 801742e:	4282      	cmp	r2, r0
 8017430:	ec59 8b17 	vmov	r8, r9, d7
 8017434:	d8bc      	bhi.n	80173b0 <_strtod_l+0x470>
 8017436:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801743a:	4282      	cmp	r2, r0
 801743c:	bf86      	itte	hi
 801743e:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 80174cc <_strtod_l+0x58c>
 8017442:	f04f 38ff 	movhi.w	r8, #4294967295
 8017446:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 801744a:	2200      	movs	r2, #0
 801744c:	9204      	str	r2, [sp, #16]
 801744e:	e078      	b.n	8017542 <_strtod_l+0x602>
 8017450:	07d6      	lsls	r6, r2, #31
 8017452:	d504      	bpl.n	801745e <_strtod_l+0x51e>
 8017454:	ed9c 6b00 	vldr	d6, [ip]
 8017458:	2001      	movs	r0, #1
 801745a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801745e:	3101      	adds	r1, #1
 8017460:	1052      	asrs	r2, r2, #1
 8017462:	f10c 0c08 	add.w	ip, ip, #8
 8017466:	e7cd      	b.n	8017404 <_strtod_l+0x4c4>
 8017468:	d0ef      	beq.n	801744a <_strtod_l+0x50a>
 801746a:	4252      	negs	r2, r2
 801746c:	f012 000f 	ands.w	r0, r2, #15
 8017470:	d00a      	beq.n	8017488 <_strtod_l+0x548>
 8017472:	4912      	ldr	r1, [pc, #72]	; (80174bc <_strtod_l+0x57c>)
 8017474:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8017478:	ed91 7b00 	vldr	d7, [r1]
 801747c:	ec49 8b16 	vmov	d6, r8, r9
 8017480:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8017484:	ec59 8b17 	vmov	r8, r9, d7
 8017488:	1112      	asrs	r2, r2, #4
 801748a:	d0de      	beq.n	801744a <_strtod_l+0x50a>
 801748c:	2a1f      	cmp	r2, #31
 801748e:	dd1f      	ble.n	80174d0 <_strtod_l+0x590>
 8017490:	2500      	movs	r5, #0
 8017492:	462e      	mov	r6, r5
 8017494:	9506      	str	r5, [sp, #24]
 8017496:	462f      	mov	r7, r5
 8017498:	2322      	movs	r3, #34	; 0x22
 801749a:	f04f 0800 	mov.w	r8, #0
 801749e:	f04f 0900 	mov.w	r9, #0
 80174a2:	6023      	str	r3, [r4, #0]
 80174a4:	e78e      	b.n	80173c4 <_strtod_l+0x484>
 80174a6:	bf00      	nop
 80174a8:	0801b759 	.word	0x0801b759
 80174ac:	0801b79c 	.word	0x0801b79c
 80174b0:	0801b751 	.word	0x0801b751
 80174b4:	0801b8dc 	.word	0x0801b8dc
 80174b8:	0801bbf0 	.word	0x0801bbf0
 80174bc:	0801bad0 	.word	0x0801bad0
 80174c0:	0801baa8 	.word	0x0801baa8
 80174c4:	7ca00000 	.word	0x7ca00000
 80174c8:	7ff00000 	.word	0x7ff00000
 80174cc:	7fefffff 	.word	0x7fefffff
 80174d0:	f012 0110 	ands.w	r1, r2, #16
 80174d4:	bf18      	it	ne
 80174d6:	216a      	movne	r1, #106	; 0x6a
 80174d8:	9104      	str	r1, [sp, #16]
 80174da:	ec49 8b17 	vmov	d7, r8, r9
 80174de:	49be      	ldr	r1, [pc, #760]	; (80177d8 <_strtod_l+0x898>)
 80174e0:	2000      	movs	r0, #0
 80174e2:	07d6      	lsls	r6, r2, #31
 80174e4:	d504      	bpl.n	80174f0 <_strtod_l+0x5b0>
 80174e6:	ed91 6b00 	vldr	d6, [r1]
 80174ea:	2001      	movs	r0, #1
 80174ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 80174f0:	1052      	asrs	r2, r2, #1
 80174f2:	f101 0108 	add.w	r1, r1, #8
 80174f6:	d1f4      	bne.n	80174e2 <_strtod_l+0x5a2>
 80174f8:	b108      	cbz	r0, 80174fe <_strtod_l+0x5be>
 80174fa:	ec59 8b17 	vmov	r8, r9, d7
 80174fe:	9a04      	ldr	r2, [sp, #16]
 8017500:	b1c2      	cbz	r2, 8017534 <_strtod_l+0x5f4>
 8017502:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8017506:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 801750a:	2a00      	cmp	r2, #0
 801750c:	4648      	mov	r0, r9
 801750e:	dd11      	ble.n	8017534 <_strtod_l+0x5f4>
 8017510:	2a1f      	cmp	r2, #31
 8017512:	f340 812e 	ble.w	8017772 <_strtod_l+0x832>
 8017516:	2a34      	cmp	r2, #52	; 0x34
 8017518:	bfde      	ittt	le
 801751a:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 801751e:	f04f 32ff 	movle.w	r2, #4294967295
 8017522:	fa02 f101 	lslle.w	r1, r2, r1
 8017526:	f04f 0800 	mov.w	r8, #0
 801752a:	bfcc      	ite	gt
 801752c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8017530:	ea01 0900 	andle.w	r9, r1, r0
 8017534:	ec49 8b17 	vmov	d7, r8, r9
 8017538:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801753c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017540:	d0a6      	beq.n	8017490 <_strtod_l+0x550>
 8017542:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017544:	9200      	str	r2, [sp, #0]
 8017546:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017548:	9a06      	ldr	r2, [sp, #24]
 801754a:	4620      	mov	r0, r4
 801754c:	f002 f858 	bl	8019600 <__s2b>
 8017550:	9006      	str	r0, [sp, #24]
 8017552:	2800      	cmp	r0, #0
 8017554:	f43f af2c 	beq.w	80173b0 <_strtod_l+0x470>
 8017558:	9b07      	ldr	r3, [sp, #28]
 801755a:	1b7d      	subs	r5, r7, r5
 801755c:	2b00      	cmp	r3, #0
 801755e:	bfb4      	ite	lt
 8017560:	462b      	movlt	r3, r5
 8017562:	2300      	movge	r3, #0
 8017564:	9309      	str	r3, [sp, #36]	; 0x24
 8017566:	9b07      	ldr	r3, [sp, #28]
 8017568:	ed9f 9b93 	vldr	d9, [pc, #588]	; 80177b8 <_strtod_l+0x878>
 801756c:	ed9f ab94 	vldr	d10, [pc, #592]	; 80177c0 <_strtod_l+0x880>
 8017570:	ed9f bb95 	vldr	d11, [pc, #596]	; 80177c8 <_strtod_l+0x888>
 8017574:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017578:	2500      	movs	r5, #0
 801757a:	930c      	str	r3, [sp, #48]	; 0x30
 801757c:	462e      	mov	r6, r5
 801757e:	9b06      	ldr	r3, [sp, #24]
 8017580:	4620      	mov	r0, r4
 8017582:	6859      	ldr	r1, [r3, #4]
 8017584:	f001 ff94 	bl	80194b0 <_Balloc>
 8017588:	4607      	mov	r7, r0
 801758a:	2800      	cmp	r0, #0
 801758c:	f43f af14 	beq.w	80173b8 <_strtod_l+0x478>
 8017590:	9b06      	ldr	r3, [sp, #24]
 8017592:	691a      	ldr	r2, [r3, #16]
 8017594:	3202      	adds	r2, #2
 8017596:	f103 010c 	add.w	r1, r3, #12
 801759a:	0092      	lsls	r2, r2, #2
 801759c:	300c      	adds	r0, #12
 801759e:	f001 ff6d 	bl	801947c <memcpy>
 80175a2:	ec49 8b10 	vmov	d0, r8, r9
 80175a6:	aa14      	add	r2, sp, #80	; 0x50
 80175a8:	a913      	add	r1, sp, #76	; 0x4c
 80175aa:	4620      	mov	r0, r4
 80175ac:	f002 fb6e 	bl	8019c8c <__d2b>
 80175b0:	ec49 8b18 	vmov	d8, r8, r9
 80175b4:	9012      	str	r0, [sp, #72]	; 0x48
 80175b6:	2800      	cmp	r0, #0
 80175b8:	f43f aefe 	beq.w	80173b8 <_strtod_l+0x478>
 80175bc:	2101      	movs	r1, #1
 80175be:	4620      	mov	r0, r4
 80175c0:	f002 f8b8 	bl	8019734 <__i2b>
 80175c4:	4606      	mov	r6, r0
 80175c6:	2800      	cmp	r0, #0
 80175c8:	f43f aef6 	beq.w	80173b8 <_strtod_l+0x478>
 80175cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80175ce:	9914      	ldr	r1, [sp, #80]	; 0x50
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	bfab      	itete	ge
 80175d4:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 80175d6:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 80175d8:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 80175dc:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 80175e0:	bfac      	ite	ge
 80175e2:	eb03 0b02 	addge.w	fp, r3, r2
 80175e6:	eba2 0a03 	sublt.w	sl, r2, r3
 80175ea:	9a04      	ldr	r2, [sp, #16]
 80175ec:	1a9b      	subs	r3, r3, r2
 80175ee:	440b      	add	r3, r1
 80175f0:	4a7a      	ldr	r2, [pc, #488]	; (80177dc <_strtod_l+0x89c>)
 80175f2:	3b01      	subs	r3, #1
 80175f4:	4293      	cmp	r3, r2
 80175f6:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 80175fa:	f280 80cd 	bge.w	8017798 <_strtod_l+0x858>
 80175fe:	1ad2      	subs	r2, r2, r3
 8017600:	2a1f      	cmp	r2, #31
 8017602:	eba1 0102 	sub.w	r1, r1, r2
 8017606:	f04f 0001 	mov.w	r0, #1
 801760a:	f300 80b9 	bgt.w	8017780 <_strtod_l+0x840>
 801760e:	fa00 f302 	lsl.w	r3, r0, r2
 8017612:	930b      	str	r3, [sp, #44]	; 0x2c
 8017614:	2300      	movs	r3, #0
 8017616:	930a      	str	r3, [sp, #40]	; 0x28
 8017618:	eb0b 0301 	add.w	r3, fp, r1
 801761c:	9a04      	ldr	r2, [sp, #16]
 801761e:	459b      	cmp	fp, r3
 8017620:	448a      	add	sl, r1
 8017622:	4492      	add	sl, r2
 8017624:	465a      	mov	r2, fp
 8017626:	bfa8      	it	ge
 8017628:	461a      	movge	r2, r3
 801762a:	4552      	cmp	r2, sl
 801762c:	bfa8      	it	ge
 801762e:	4652      	movge	r2, sl
 8017630:	2a00      	cmp	r2, #0
 8017632:	bfc2      	ittt	gt
 8017634:	1a9b      	subgt	r3, r3, r2
 8017636:	ebaa 0a02 	subgt.w	sl, sl, r2
 801763a:	ebab 0b02 	subgt.w	fp, fp, r2
 801763e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017640:	2a00      	cmp	r2, #0
 8017642:	dd18      	ble.n	8017676 <_strtod_l+0x736>
 8017644:	4631      	mov	r1, r6
 8017646:	4620      	mov	r0, r4
 8017648:	930f      	str	r3, [sp, #60]	; 0x3c
 801764a:	f002 f933 	bl	80198b4 <__pow5mult>
 801764e:	4606      	mov	r6, r0
 8017650:	2800      	cmp	r0, #0
 8017652:	f43f aeb1 	beq.w	80173b8 <_strtod_l+0x478>
 8017656:	4601      	mov	r1, r0
 8017658:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801765a:	4620      	mov	r0, r4
 801765c:	f002 f880 	bl	8019760 <__multiply>
 8017660:	900e      	str	r0, [sp, #56]	; 0x38
 8017662:	2800      	cmp	r0, #0
 8017664:	f43f aea8 	beq.w	80173b8 <_strtod_l+0x478>
 8017668:	9912      	ldr	r1, [sp, #72]	; 0x48
 801766a:	4620      	mov	r0, r4
 801766c:	f001 ff60 	bl	8019530 <_Bfree>
 8017670:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017672:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017674:	9212      	str	r2, [sp, #72]	; 0x48
 8017676:	2b00      	cmp	r3, #0
 8017678:	f300 8093 	bgt.w	80177a2 <_strtod_l+0x862>
 801767c:	9b07      	ldr	r3, [sp, #28]
 801767e:	2b00      	cmp	r3, #0
 8017680:	dd08      	ble.n	8017694 <_strtod_l+0x754>
 8017682:	4639      	mov	r1, r7
 8017684:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017686:	4620      	mov	r0, r4
 8017688:	f002 f914 	bl	80198b4 <__pow5mult>
 801768c:	4607      	mov	r7, r0
 801768e:	2800      	cmp	r0, #0
 8017690:	f43f ae92 	beq.w	80173b8 <_strtod_l+0x478>
 8017694:	f1ba 0f00 	cmp.w	sl, #0
 8017698:	dd08      	ble.n	80176ac <_strtod_l+0x76c>
 801769a:	4639      	mov	r1, r7
 801769c:	4652      	mov	r2, sl
 801769e:	4620      	mov	r0, r4
 80176a0:	f002 f962 	bl	8019968 <__lshift>
 80176a4:	4607      	mov	r7, r0
 80176a6:	2800      	cmp	r0, #0
 80176a8:	f43f ae86 	beq.w	80173b8 <_strtod_l+0x478>
 80176ac:	f1bb 0f00 	cmp.w	fp, #0
 80176b0:	dd08      	ble.n	80176c4 <_strtod_l+0x784>
 80176b2:	4631      	mov	r1, r6
 80176b4:	465a      	mov	r2, fp
 80176b6:	4620      	mov	r0, r4
 80176b8:	f002 f956 	bl	8019968 <__lshift>
 80176bc:	4606      	mov	r6, r0
 80176be:	2800      	cmp	r0, #0
 80176c0:	f43f ae7a 	beq.w	80173b8 <_strtod_l+0x478>
 80176c4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80176c6:	463a      	mov	r2, r7
 80176c8:	4620      	mov	r0, r4
 80176ca:	f002 f9d9 	bl	8019a80 <__mdiff>
 80176ce:	4605      	mov	r5, r0
 80176d0:	2800      	cmp	r0, #0
 80176d2:	f43f ae71 	beq.w	80173b8 <_strtod_l+0x478>
 80176d6:	2300      	movs	r3, #0
 80176d8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80176dc:	60c3      	str	r3, [r0, #12]
 80176de:	4631      	mov	r1, r6
 80176e0:	f002 f9b2 	bl	8019a48 <__mcmp>
 80176e4:	2800      	cmp	r0, #0
 80176e6:	da7d      	bge.n	80177e4 <_strtod_l+0x8a4>
 80176e8:	ea5a 0308 	orrs.w	r3, sl, r8
 80176ec:	f040 80a3 	bne.w	8017836 <_strtod_l+0x8f6>
 80176f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80176f4:	2b00      	cmp	r3, #0
 80176f6:	f040 809e 	bne.w	8017836 <_strtod_l+0x8f6>
 80176fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80176fe:	0d1b      	lsrs	r3, r3, #20
 8017700:	051b      	lsls	r3, r3, #20
 8017702:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8017706:	f240 8096 	bls.w	8017836 <_strtod_l+0x8f6>
 801770a:	696b      	ldr	r3, [r5, #20]
 801770c:	b91b      	cbnz	r3, 8017716 <_strtod_l+0x7d6>
 801770e:	692b      	ldr	r3, [r5, #16]
 8017710:	2b01      	cmp	r3, #1
 8017712:	f340 8090 	ble.w	8017836 <_strtod_l+0x8f6>
 8017716:	4629      	mov	r1, r5
 8017718:	2201      	movs	r2, #1
 801771a:	4620      	mov	r0, r4
 801771c:	f002 f924 	bl	8019968 <__lshift>
 8017720:	4631      	mov	r1, r6
 8017722:	4605      	mov	r5, r0
 8017724:	f002 f990 	bl	8019a48 <__mcmp>
 8017728:	2800      	cmp	r0, #0
 801772a:	f340 8084 	ble.w	8017836 <_strtod_l+0x8f6>
 801772e:	9904      	ldr	r1, [sp, #16]
 8017730:	4a2b      	ldr	r2, [pc, #172]	; (80177e0 <_strtod_l+0x8a0>)
 8017732:	464b      	mov	r3, r9
 8017734:	2900      	cmp	r1, #0
 8017736:	f000 809d 	beq.w	8017874 <_strtod_l+0x934>
 801773a:	ea02 0109 	and.w	r1, r2, r9
 801773e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8017742:	f300 8097 	bgt.w	8017874 <_strtod_l+0x934>
 8017746:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801774a:	f77f aea5 	ble.w	8017498 <_strtod_l+0x558>
 801774e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80177d0 <_strtod_l+0x890>
 8017752:	ec49 8b16 	vmov	d6, r8, r9
 8017756:	ee26 7b07 	vmul.f64	d7, d6, d7
 801775a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801775e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8017762:	4313      	orrs	r3, r2
 8017764:	bf08      	it	eq
 8017766:	2322      	moveq	r3, #34	; 0x22
 8017768:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801776c:	bf08      	it	eq
 801776e:	6023      	streq	r3, [r4, #0]
 8017770:	e62c      	b.n	80173cc <_strtod_l+0x48c>
 8017772:	f04f 31ff 	mov.w	r1, #4294967295
 8017776:	fa01 f202 	lsl.w	r2, r1, r2
 801777a:	ea02 0808 	and.w	r8, r2, r8
 801777e:	e6d9      	b.n	8017534 <_strtod_l+0x5f4>
 8017780:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8017784:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8017788:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801778c:	33e2      	adds	r3, #226	; 0xe2
 801778e:	fa00 f303 	lsl.w	r3, r0, r3
 8017792:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8017796:	e73f      	b.n	8017618 <_strtod_l+0x6d8>
 8017798:	2200      	movs	r2, #0
 801779a:	2301      	movs	r3, #1
 801779c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80177a0:	e73a      	b.n	8017618 <_strtod_l+0x6d8>
 80177a2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80177a4:	461a      	mov	r2, r3
 80177a6:	4620      	mov	r0, r4
 80177a8:	f002 f8de 	bl	8019968 <__lshift>
 80177ac:	9012      	str	r0, [sp, #72]	; 0x48
 80177ae:	2800      	cmp	r0, #0
 80177b0:	f47f af64 	bne.w	801767c <_strtod_l+0x73c>
 80177b4:	e600      	b.n	80173b8 <_strtod_l+0x478>
 80177b6:	bf00      	nop
 80177b8:	94a03595 	.word	0x94a03595
 80177bc:	3fcfffff 	.word	0x3fcfffff
 80177c0:	94a03595 	.word	0x94a03595
 80177c4:	3fdfffff 	.word	0x3fdfffff
 80177c8:	35afe535 	.word	0x35afe535
 80177cc:	3fe00000 	.word	0x3fe00000
 80177d0:	00000000 	.word	0x00000000
 80177d4:	39500000 	.word	0x39500000
 80177d8:	0801b7b0 	.word	0x0801b7b0
 80177dc:	fffffc02 	.word	0xfffffc02
 80177e0:	7ff00000 	.word	0x7ff00000
 80177e4:	46cb      	mov	fp, r9
 80177e6:	d15f      	bne.n	80178a8 <_strtod_l+0x968>
 80177e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80177ec:	f1ba 0f00 	cmp.w	sl, #0
 80177f0:	d02a      	beq.n	8017848 <_strtod_l+0x908>
 80177f2:	4aa7      	ldr	r2, [pc, #668]	; (8017a90 <_strtod_l+0xb50>)
 80177f4:	4293      	cmp	r3, r2
 80177f6:	d12b      	bne.n	8017850 <_strtod_l+0x910>
 80177f8:	9b04      	ldr	r3, [sp, #16]
 80177fa:	4642      	mov	r2, r8
 80177fc:	b1fb      	cbz	r3, 801783e <_strtod_l+0x8fe>
 80177fe:	4ba5      	ldr	r3, [pc, #660]	; (8017a94 <_strtod_l+0xb54>)
 8017800:	ea09 0303 	and.w	r3, r9, r3
 8017804:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8017808:	f04f 31ff 	mov.w	r1, #4294967295
 801780c:	d81a      	bhi.n	8017844 <_strtod_l+0x904>
 801780e:	0d1b      	lsrs	r3, r3, #20
 8017810:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017814:	fa01 f303 	lsl.w	r3, r1, r3
 8017818:	429a      	cmp	r2, r3
 801781a:	d119      	bne.n	8017850 <_strtod_l+0x910>
 801781c:	4b9e      	ldr	r3, [pc, #632]	; (8017a98 <_strtod_l+0xb58>)
 801781e:	459b      	cmp	fp, r3
 8017820:	d102      	bne.n	8017828 <_strtod_l+0x8e8>
 8017822:	3201      	adds	r2, #1
 8017824:	f43f adc8 	beq.w	80173b8 <_strtod_l+0x478>
 8017828:	4b9a      	ldr	r3, [pc, #616]	; (8017a94 <_strtod_l+0xb54>)
 801782a:	ea0b 0303 	and.w	r3, fp, r3
 801782e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8017832:	f04f 0800 	mov.w	r8, #0
 8017836:	9b04      	ldr	r3, [sp, #16]
 8017838:	2b00      	cmp	r3, #0
 801783a:	d188      	bne.n	801774e <_strtod_l+0x80e>
 801783c:	e5c6      	b.n	80173cc <_strtod_l+0x48c>
 801783e:	f04f 33ff 	mov.w	r3, #4294967295
 8017842:	e7e9      	b.n	8017818 <_strtod_l+0x8d8>
 8017844:	460b      	mov	r3, r1
 8017846:	e7e7      	b.n	8017818 <_strtod_l+0x8d8>
 8017848:	ea53 0308 	orrs.w	r3, r3, r8
 801784c:	f43f af6f 	beq.w	801772e <_strtod_l+0x7ee>
 8017850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017852:	b1cb      	cbz	r3, 8017888 <_strtod_l+0x948>
 8017854:	ea13 0f0b 	tst.w	r3, fp
 8017858:	d0ed      	beq.n	8017836 <_strtod_l+0x8f6>
 801785a:	9a04      	ldr	r2, [sp, #16]
 801785c:	4640      	mov	r0, r8
 801785e:	4649      	mov	r1, r9
 8017860:	f1ba 0f00 	cmp.w	sl, #0
 8017864:	d014      	beq.n	8017890 <_strtod_l+0x950>
 8017866:	f7ff fb4f 	bl	8016f08 <sulp>
 801786a:	ee38 7b00 	vadd.f64	d7, d8, d0
 801786e:	ec59 8b17 	vmov	r8, r9, d7
 8017872:	e7e0      	b.n	8017836 <_strtod_l+0x8f6>
 8017874:	4013      	ands	r3, r2
 8017876:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801787a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801787e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8017882:	f04f 38ff 	mov.w	r8, #4294967295
 8017886:	e7d6      	b.n	8017836 <_strtod_l+0x8f6>
 8017888:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801788a:	ea13 0f08 	tst.w	r3, r8
 801788e:	e7e3      	b.n	8017858 <_strtod_l+0x918>
 8017890:	f7ff fb3a 	bl	8016f08 <sulp>
 8017894:	ee38 0b40 	vsub.f64	d0, d8, d0
 8017898:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801789c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178a0:	ec59 8b10 	vmov	r8, r9, d0
 80178a4:	d1c7      	bne.n	8017836 <_strtod_l+0x8f6>
 80178a6:	e5f7      	b.n	8017498 <_strtod_l+0x558>
 80178a8:	4631      	mov	r1, r6
 80178aa:	4628      	mov	r0, r5
 80178ac:	f002 fa4a 	bl	8019d44 <__ratio>
 80178b0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80178b4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80178b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178bc:	d865      	bhi.n	801798a <_strtod_l+0xa4a>
 80178be:	f1ba 0f00 	cmp.w	sl, #0
 80178c2:	d042      	beq.n	801794a <_strtod_l+0xa0a>
 80178c4:	4b75      	ldr	r3, [pc, #468]	; (8017a9c <_strtod_l+0xb5c>)
 80178c6:	2200      	movs	r2, #0
 80178c8:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 80178cc:	4871      	ldr	r0, [pc, #452]	; (8017a94 <_strtod_l+0xb54>)
 80178ce:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8017aa8 <_strtod_l+0xb68>
 80178d2:	ea0b 0100 	and.w	r1, fp, r0
 80178d6:	4561      	cmp	r1, ip
 80178d8:	f040 808e 	bne.w	80179f8 <_strtod_l+0xab8>
 80178dc:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 80178e0:	ec49 8b10 	vmov	d0, r8, r9
 80178e4:	ec43 2b1c 	vmov	d12, r2, r3
 80178e8:	910a      	str	r1, [sp, #40]	; 0x28
 80178ea:	f002 f953 	bl	8019b94 <__ulp>
 80178ee:	ec49 8b1e 	vmov	d14, r8, r9
 80178f2:	4868      	ldr	r0, [pc, #416]	; (8017a94 <_strtod_l+0xb54>)
 80178f4:	eeac eb00 	vfma.f64	d14, d12, d0
 80178f8:	ee1e 3a90 	vmov	r3, s29
 80178fc:	4a68      	ldr	r2, [pc, #416]	; (8017aa0 <_strtod_l+0xb60>)
 80178fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017900:	4018      	ands	r0, r3
 8017902:	4290      	cmp	r0, r2
 8017904:	ec59 8b1e 	vmov	r8, r9, d14
 8017908:	d94e      	bls.n	80179a8 <_strtod_l+0xa68>
 801790a:	ee18 3a90 	vmov	r3, s17
 801790e:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8017912:	4293      	cmp	r3, r2
 8017914:	d104      	bne.n	8017920 <_strtod_l+0x9e0>
 8017916:	ee18 3a10 	vmov	r3, s16
 801791a:	3301      	adds	r3, #1
 801791c:	f43f ad4c 	beq.w	80173b8 <_strtod_l+0x478>
 8017920:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8017a98 <_strtod_l+0xb58>
 8017924:	f04f 38ff 	mov.w	r8, #4294967295
 8017928:	9912      	ldr	r1, [sp, #72]	; 0x48
 801792a:	4620      	mov	r0, r4
 801792c:	f001 fe00 	bl	8019530 <_Bfree>
 8017930:	4639      	mov	r1, r7
 8017932:	4620      	mov	r0, r4
 8017934:	f001 fdfc 	bl	8019530 <_Bfree>
 8017938:	4631      	mov	r1, r6
 801793a:	4620      	mov	r0, r4
 801793c:	f001 fdf8 	bl	8019530 <_Bfree>
 8017940:	4629      	mov	r1, r5
 8017942:	4620      	mov	r0, r4
 8017944:	f001 fdf4 	bl	8019530 <_Bfree>
 8017948:	e619      	b.n	801757e <_strtod_l+0x63e>
 801794a:	f1b8 0f00 	cmp.w	r8, #0
 801794e:	d112      	bne.n	8017976 <_strtod_l+0xa36>
 8017950:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017954:	b9b3      	cbnz	r3, 8017984 <_strtod_l+0xa44>
 8017956:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801795a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801795e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017962:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8017966:	bf58      	it	pl
 8017968:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 801796c:	eeb1 7b4d 	vneg.f64	d7, d13
 8017970:	ec53 2b17 	vmov	r2, r3, d7
 8017974:	e7aa      	b.n	80178cc <_strtod_l+0x98c>
 8017976:	f1b8 0f01 	cmp.w	r8, #1
 801797a:	d103      	bne.n	8017984 <_strtod_l+0xa44>
 801797c:	f1b9 0f00 	cmp.w	r9, #0
 8017980:	f43f ad8a 	beq.w	8017498 <_strtod_l+0x558>
 8017984:	4b47      	ldr	r3, [pc, #284]	; (8017aa4 <_strtod_l+0xb64>)
 8017986:	2200      	movs	r2, #0
 8017988:	e79e      	b.n	80178c8 <_strtod_l+0x988>
 801798a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801798e:	ee20 db0d 	vmul.f64	d13, d0, d13
 8017992:	f1ba 0f00 	cmp.w	sl, #0
 8017996:	d104      	bne.n	80179a2 <_strtod_l+0xa62>
 8017998:	eeb1 7b4d 	vneg.f64	d7, d13
 801799c:	ec53 2b17 	vmov	r2, r3, d7
 80179a0:	e794      	b.n	80178cc <_strtod_l+0x98c>
 80179a2:	eeb0 7b4d 	vmov.f64	d7, d13
 80179a6:	e7f9      	b.n	801799c <_strtod_l+0xa5c>
 80179a8:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80179ac:	9b04      	ldr	r3, [sp, #16]
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	d1ba      	bne.n	8017928 <_strtod_l+0x9e8>
 80179b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80179b6:	0d1b      	lsrs	r3, r3, #20
 80179b8:	051b      	lsls	r3, r3, #20
 80179ba:	4299      	cmp	r1, r3
 80179bc:	d1b4      	bne.n	8017928 <_strtod_l+0x9e8>
 80179be:	ec51 0b1d 	vmov	r0, r1, d13
 80179c2:	f7e8 fe69 	bl	8000698 <__aeabi_d2lz>
 80179c6:	f7e8 fe21 	bl	800060c <__aeabi_l2d>
 80179ca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80179ce:	ec41 0b17 	vmov	d7, r0, r1
 80179d2:	ea43 0308 	orr.w	r3, r3, r8
 80179d6:	ea53 030a 	orrs.w	r3, r3, sl
 80179da:	ee3d db47 	vsub.f64	d13, d13, d7
 80179de:	d03c      	beq.n	8017a5a <_strtod_l+0xb1a>
 80179e0:	eeb4 dbca 	vcmpe.f64	d13, d10
 80179e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179e8:	f53f acf0 	bmi.w	80173cc <_strtod_l+0x48c>
 80179ec:	eeb4 dbcb 	vcmpe.f64	d13, d11
 80179f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179f4:	dd98      	ble.n	8017928 <_strtod_l+0x9e8>
 80179f6:	e4e9      	b.n	80173cc <_strtod_l+0x48c>
 80179f8:	9804      	ldr	r0, [sp, #16]
 80179fa:	b1f0      	cbz	r0, 8017a3a <_strtod_l+0xafa>
 80179fc:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8017a00:	d81b      	bhi.n	8017a3a <_strtod_l+0xafa>
 8017a02:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8017a88 <_strtod_l+0xb48>
 8017a06:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8017a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a0e:	d811      	bhi.n	8017a34 <_strtod_l+0xaf4>
 8017a10:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8017a14:	ee1d 3a10 	vmov	r3, s26
 8017a18:	2b01      	cmp	r3, #1
 8017a1a:	bf38      	it	cc
 8017a1c:	2301      	movcc	r3, #1
 8017a1e:	ee0d 3a10 	vmov	s26, r3
 8017a22:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8017a26:	f1ba 0f00 	cmp.w	sl, #0
 8017a2a:	d113      	bne.n	8017a54 <_strtod_l+0xb14>
 8017a2c:	eeb1 7b4d 	vneg.f64	d7, d13
 8017a30:	ec53 2b17 	vmov	r2, r3, d7
 8017a34:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8017a38:	1a43      	subs	r3, r0, r1
 8017a3a:	eeb0 0b48 	vmov.f64	d0, d8
 8017a3e:	ec43 2b1c 	vmov	d12, r2, r3
 8017a42:	910a      	str	r1, [sp, #40]	; 0x28
 8017a44:	f002 f8a6 	bl	8019b94 <__ulp>
 8017a48:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017a4a:	eeac 8b00 	vfma.f64	d8, d12, d0
 8017a4e:	ec59 8b18 	vmov	r8, r9, d8
 8017a52:	e7ab      	b.n	80179ac <_strtod_l+0xa6c>
 8017a54:	eeb0 7b4d 	vmov.f64	d7, d13
 8017a58:	e7ea      	b.n	8017a30 <_strtod_l+0xaf0>
 8017a5a:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8017a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a62:	f57f af61 	bpl.w	8017928 <_strtod_l+0x9e8>
 8017a66:	e4b1      	b.n	80173cc <_strtod_l+0x48c>
 8017a68:	2300      	movs	r3, #0
 8017a6a:	9308      	str	r3, [sp, #32]
 8017a6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017a6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017a70:	6013      	str	r3, [r2, #0]
 8017a72:	f7ff baad 	b.w	8016fd0 <_strtod_l+0x90>
 8017a76:	2a65      	cmp	r2, #101	; 0x65
 8017a78:	f43f ab9f 	beq.w	80171ba <_strtod_l+0x27a>
 8017a7c:	2a45      	cmp	r2, #69	; 0x45
 8017a7e:	f43f ab9c 	beq.w	80171ba <_strtod_l+0x27a>
 8017a82:	2101      	movs	r1, #1
 8017a84:	f7ff bbd4 	b.w	8017230 <_strtod_l+0x2f0>
 8017a88:	ffc00000 	.word	0xffc00000
 8017a8c:	41dfffff 	.word	0x41dfffff
 8017a90:	000fffff 	.word	0x000fffff
 8017a94:	7ff00000 	.word	0x7ff00000
 8017a98:	7fefffff 	.word	0x7fefffff
 8017a9c:	3ff00000 	.word	0x3ff00000
 8017aa0:	7c9fffff 	.word	0x7c9fffff
 8017aa4:	bff00000 	.word	0xbff00000
 8017aa8:	7fe00000 	.word	0x7fe00000

08017aac <_strtod_r>:
 8017aac:	4b01      	ldr	r3, [pc, #4]	; (8017ab4 <_strtod_r+0x8>)
 8017aae:	f7ff ba47 	b.w	8016f40 <_strtod_l>
 8017ab2:	bf00      	nop
 8017ab4:	20000184 	.word	0x20000184

08017ab8 <_strtol_l.constprop.0>:
 8017ab8:	2b01      	cmp	r3, #1
 8017aba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017abe:	d001      	beq.n	8017ac4 <_strtol_l.constprop.0+0xc>
 8017ac0:	2b24      	cmp	r3, #36	; 0x24
 8017ac2:	d906      	bls.n	8017ad2 <_strtol_l.constprop.0+0x1a>
 8017ac4:	f7fe f9c6 	bl	8015e54 <__errno>
 8017ac8:	2316      	movs	r3, #22
 8017aca:	6003      	str	r3, [r0, #0]
 8017acc:	2000      	movs	r0, #0
 8017ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ad2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8017bb8 <_strtol_l.constprop.0+0x100>
 8017ad6:	460d      	mov	r5, r1
 8017ad8:	462e      	mov	r6, r5
 8017ada:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017ade:	f814 700c 	ldrb.w	r7, [r4, ip]
 8017ae2:	f017 0708 	ands.w	r7, r7, #8
 8017ae6:	d1f7      	bne.n	8017ad8 <_strtol_l.constprop.0+0x20>
 8017ae8:	2c2d      	cmp	r4, #45	; 0x2d
 8017aea:	d132      	bne.n	8017b52 <_strtol_l.constprop.0+0x9a>
 8017aec:	782c      	ldrb	r4, [r5, #0]
 8017aee:	2701      	movs	r7, #1
 8017af0:	1cb5      	adds	r5, r6, #2
 8017af2:	2b00      	cmp	r3, #0
 8017af4:	d05b      	beq.n	8017bae <_strtol_l.constprop.0+0xf6>
 8017af6:	2b10      	cmp	r3, #16
 8017af8:	d109      	bne.n	8017b0e <_strtol_l.constprop.0+0x56>
 8017afa:	2c30      	cmp	r4, #48	; 0x30
 8017afc:	d107      	bne.n	8017b0e <_strtol_l.constprop.0+0x56>
 8017afe:	782c      	ldrb	r4, [r5, #0]
 8017b00:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8017b04:	2c58      	cmp	r4, #88	; 0x58
 8017b06:	d14d      	bne.n	8017ba4 <_strtol_l.constprop.0+0xec>
 8017b08:	786c      	ldrb	r4, [r5, #1]
 8017b0a:	2310      	movs	r3, #16
 8017b0c:	3502      	adds	r5, #2
 8017b0e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8017b12:	f108 38ff 	add.w	r8, r8, #4294967295
 8017b16:	f04f 0c00 	mov.w	ip, #0
 8017b1a:	fbb8 f9f3 	udiv	r9, r8, r3
 8017b1e:	4666      	mov	r6, ip
 8017b20:	fb03 8a19 	mls	sl, r3, r9, r8
 8017b24:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8017b28:	f1be 0f09 	cmp.w	lr, #9
 8017b2c:	d816      	bhi.n	8017b5c <_strtol_l.constprop.0+0xa4>
 8017b2e:	4674      	mov	r4, lr
 8017b30:	42a3      	cmp	r3, r4
 8017b32:	dd24      	ble.n	8017b7e <_strtol_l.constprop.0+0xc6>
 8017b34:	f1bc 0f00 	cmp.w	ip, #0
 8017b38:	db1e      	blt.n	8017b78 <_strtol_l.constprop.0+0xc0>
 8017b3a:	45b1      	cmp	r9, r6
 8017b3c:	d31c      	bcc.n	8017b78 <_strtol_l.constprop.0+0xc0>
 8017b3e:	d101      	bne.n	8017b44 <_strtol_l.constprop.0+0x8c>
 8017b40:	45a2      	cmp	sl, r4
 8017b42:	db19      	blt.n	8017b78 <_strtol_l.constprop.0+0xc0>
 8017b44:	fb06 4603 	mla	r6, r6, r3, r4
 8017b48:	f04f 0c01 	mov.w	ip, #1
 8017b4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017b50:	e7e8      	b.n	8017b24 <_strtol_l.constprop.0+0x6c>
 8017b52:	2c2b      	cmp	r4, #43	; 0x2b
 8017b54:	bf04      	itt	eq
 8017b56:	782c      	ldrbeq	r4, [r5, #0]
 8017b58:	1cb5      	addeq	r5, r6, #2
 8017b5a:	e7ca      	b.n	8017af2 <_strtol_l.constprop.0+0x3a>
 8017b5c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8017b60:	f1be 0f19 	cmp.w	lr, #25
 8017b64:	d801      	bhi.n	8017b6a <_strtol_l.constprop.0+0xb2>
 8017b66:	3c37      	subs	r4, #55	; 0x37
 8017b68:	e7e2      	b.n	8017b30 <_strtol_l.constprop.0+0x78>
 8017b6a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8017b6e:	f1be 0f19 	cmp.w	lr, #25
 8017b72:	d804      	bhi.n	8017b7e <_strtol_l.constprop.0+0xc6>
 8017b74:	3c57      	subs	r4, #87	; 0x57
 8017b76:	e7db      	b.n	8017b30 <_strtol_l.constprop.0+0x78>
 8017b78:	f04f 3cff 	mov.w	ip, #4294967295
 8017b7c:	e7e6      	b.n	8017b4c <_strtol_l.constprop.0+0x94>
 8017b7e:	f1bc 0f00 	cmp.w	ip, #0
 8017b82:	da05      	bge.n	8017b90 <_strtol_l.constprop.0+0xd8>
 8017b84:	2322      	movs	r3, #34	; 0x22
 8017b86:	6003      	str	r3, [r0, #0]
 8017b88:	4646      	mov	r6, r8
 8017b8a:	b942      	cbnz	r2, 8017b9e <_strtol_l.constprop.0+0xe6>
 8017b8c:	4630      	mov	r0, r6
 8017b8e:	e79e      	b.n	8017ace <_strtol_l.constprop.0+0x16>
 8017b90:	b107      	cbz	r7, 8017b94 <_strtol_l.constprop.0+0xdc>
 8017b92:	4276      	negs	r6, r6
 8017b94:	2a00      	cmp	r2, #0
 8017b96:	d0f9      	beq.n	8017b8c <_strtol_l.constprop.0+0xd4>
 8017b98:	f1bc 0f00 	cmp.w	ip, #0
 8017b9c:	d000      	beq.n	8017ba0 <_strtol_l.constprop.0+0xe8>
 8017b9e:	1e69      	subs	r1, r5, #1
 8017ba0:	6011      	str	r1, [r2, #0]
 8017ba2:	e7f3      	b.n	8017b8c <_strtol_l.constprop.0+0xd4>
 8017ba4:	2430      	movs	r4, #48	; 0x30
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	d1b1      	bne.n	8017b0e <_strtol_l.constprop.0+0x56>
 8017baa:	2308      	movs	r3, #8
 8017bac:	e7af      	b.n	8017b0e <_strtol_l.constprop.0+0x56>
 8017bae:	2c30      	cmp	r4, #48	; 0x30
 8017bb0:	d0a5      	beq.n	8017afe <_strtol_l.constprop.0+0x46>
 8017bb2:	230a      	movs	r3, #10
 8017bb4:	e7ab      	b.n	8017b0e <_strtol_l.constprop.0+0x56>
 8017bb6:	bf00      	nop
 8017bb8:	0801b7d9 	.word	0x0801b7d9

08017bbc <_strtol_r>:
 8017bbc:	f7ff bf7c 	b.w	8017ab8 <_strtol_l.constprop.0>

08017bc0 <__swbuf_r>:
 8017bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017bc2:	460e      	mov	r6, r1
 8017bc4:	4614      	mov	r4, r2
 8017bc6:	4605      	mov	r5, r0
 8017bc8:	b118      	cbz	r0, 8017bd2 <__swbuf_r+0x12>
 8017bca:	6983      	ldr	r3, [r0, #24]
 8017bcc:	b90b      	cbnz	r3, 8017bd2 <__swbuf_r+0x12>
 8017bce:	f000 ffcb 	bl	8018b68 <__sinit>
 8017bd2:	4b21      	ldr	r3, [pc, #132]	; (8017c58 <__swbuf_r+0x98>)
 8017bd4:	429c      	cmp	r4, r3
 8017bd6:	d12b      	bne.n	8017c30 <__swbuf_r+0x70>
 8017bd8:	686c      	ldr	r4, [r5, #4]
 8017bda:	69a3      	ldr	r3, [r4, #24]
 8017bdc:	60a3      	str	r3, [r4, #8]
 8017bde:	89a3      	ldrh	r3, [r4, #12]
 8017be0:	071a      	lsls	r2, r3, #28
 8017be2:	d52f      	bpl.n	8017c44 <__swbuf_r+0x84>
 8017be4:	6923      	ldr	r3, [r4, #16]
 8017be6:	b36b      	cbz	r3, 8017c44 <__swbuf_r+0x84>
 8017be8:	6923      	ldr	r3, [r4, #16]
 8017bea:	6820      	ldr	r0, [r4, #0]
 8017bec:	1ac0      	subs	r0, r0, r3
 8017bee:	6963      	ldr	r3, [r4, #20]
 8017bf0:	b2f6      	uxtb	r6, r6
 8017bf2:	4283      	cmp	r3, r0
 8017bf4:	4637      	mov	r7, r6
 8017bf6:	dc04      	bgt.n	8017c02 <__swbuf_r+0x42>
 8017bf8:	4621      	mov	r1, r4
 8017bfa:	4628      	mov	r0, r5
 8017bfc:	f000 ff20 	bl	8018a40 <_fflush_r>
 8017c00:	bb30      	cbnz	r0, 8017c50 <__swbuf_r+0x90>
 8017c02:	68a3      	ldr	r3, [r4, #8]
 8017c04:	3b01      	subs	r3, #1
 8017c06:	60a3      	str	r3, [r4, #8]
 8017c08:	6823      	ldr	r3, [r4, #0]
 8017c0a:	1c5a      	adds	r2, r3, #1
 8017c0c:	6022      	str	r2, [r4, #0]
 8017c0e:	701e      	strb	r6, [r3, #0]
 8017c10:	6963      	ldr	r3, [r4, #20]
 8017c12:	3001      	adds	r0, #1
 8017c14:	4283      	cmp	r3, r0
 8017c16:	d004      	beq.n	8017c22 <__swbuf_r+0x62>
 8017c18:	89a3      	ldrh	r3, [r4, #12]
 8017c1a:	07db      	lsls	r3, r3, #31
 8017c1c:	d506      	bpl.n	8017c2c <__swbuf_r+0x6c>
 8017c1e:	2e0a      	cmp	r6, #10
 8017c20:	d104      	bne.n	8017c2c <__swbuf_r+0x6c>
 8017c22:	4621      	mov	r1, r4
 8017c24:	4628      	mov	r0, r5
 8017c26:	f000 ff0b 	bl	8018a40 <_fflush_r>
 8017c2a:	b988      	cbnz	r0, 8017c50 <__swbuf_r+0x90>
 8017c2c:	4638      	mov	r0, r7
 8017c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017c30:	4b0a      	ldr	r3, [pc, #40]	; (8017c5c <__swbuf_r+0x9c>)
 8017c32:	429c      	cmp	r4, r3
 8017c34:	d101      	bne.n	8017c3a <__swbuf_r+0x7a>
 8017c36:	68ac      	ldr	r4, [r5, #8]
 8017c38:	e7cf      	b.n	8017bda <__swbuf_r+0x1a>
 8017c3a:	4b09      	ldr	r3, [pc, #36]	; (8017c60 <__swbuf_r+0xa0>)
 8017c3c:	429c      	cmp	r4, r3
 8017c3e:	bf08      	it	eq
 8017c40:	68ec      	ldreq	r4, [r5, #12]
 8017c42:	e7ca      	b.n	8017bda <__swbuf_r+0x1a>
 8017c44:	4621      	mov	r1, r4
 8017c46:	4628      	mov	r0, r5
 8017c48:	f000 f80c 	bl	8017c64 <__swsetup_r>
 8017c4c:	2800      	cmp	r0, #0
 8017c4e:	d0cb      	beq.n	8017be8 <__swbuf_r+0x28>
 8017c50:	f04f 37ff 	mov.w	r7, #4294967295
 8017c54:	e7ea      	b.n	8017c2c <__swbuf_r+0x6c>
 8017c56:	bf00      	nop
 8017c58:	0801b98c 	.word	0x0801b98c
 8017c5c:	0801b9ac 	.word	0x0801b9ac
 8017c60:	0801b96c 	.word	0x0801b96c

08017c64 <__swsetup_r>:
 8017c64:	4b32      	ldr	r3, [pc, #200]	; (8017d30 <__swsetup_r+0xcc>)
 8017c66:	b570      	push	{r4, r5, r6, lr}
 8017c68:	681d      	ldr	r5, [r3, #0]
 8017c6a:	4606      	mov	r6, r0
 8017c6c:	460c      	mov	r4, r1
 8017c6e:	b125      	cbz	r5, 8017c7a <__swsetup_r+0x16>
 8017c70:	69ab      	ldr	r3, [r5, #24]
 8017c72:	b913      	cbnz	r3, 8017c7a <__swsetup_r+0x16>
 8017c74:	4628      	mov	r0, r5
 8017c76:	f000 ff77 	bl	8018b68 <__sinit>
 8017c7a:	4b2e      	ldr	r3, [pc, #184]	; (8017d34 <__swsetup_r+0xd0>)
 8017c7c:	429c      	cmp	r4, r3
 8017c7e:	d10f      	bne.n	8017ca0 <__swsetup_r+0x3c>
 8017c80:	686c      	ldr	r4, [r5, #4]
 8017c82:	89a3      	ldrh	r3, [r4, #12]
 8017c84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017c88:	0719      	lsls	r1, r3, #28
 8017c8a:	d42c      	bmi.n	8017ce6 <__swsetup_r+0x82>
 8017c8c:	06dd      	lsls	r5, r3, #27
 8017c8e:	d411      	bmi.n	8017cb4 <__swsetup_r+0x50>
 8017c90:	2309      	movs	r3, #9
 8017c92:	6033      	str	r3, [r6, #0]
 8017c94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017c98:	81a3      	strh	r3, [r4, #12]
 8017c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8017c9e:	e03e      	b.n	8017d1e <__swsetup_r+0xba>
 8017ca0:	4b25      	ldr	r3, [pc, #148]	; (8017d38 <__swsetup_r+0xd4>)
 8017ca2:	429c      	cmp	r4, r3
 8017ca4:	d101      	bne.n	8017caa <__swsetup_r+0x46>
 8017ca6:	68ac      	ldr	r4, [r5, #8]
 8017ca8:	e7eb      	b.n	8017c82 <__swsetup_r+0x1e>
 8017caa:	4b24      	ldr	r3, [pc, #144]	; (8017d3c <__swsetup_r+0xd8>)
 8017cac:	429c      	cmp	r4, r3
 8017cae:	bf08      	it	eq
 8017cb0:	68ec      	ldreq	r4, [r5, #12]
 8017cb2:	e7e6      	b.n	8017c82 <__swsetup_r+0x1e>
 8017cb4:	0758      	lsls	r0, r3, #29
 8017cb6:	d512      	bpl.n	8017cde <__swsetup_r+0x7a>
 8017cb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017cba:	b141      	cbz	r1, 8017cce <__swsetup_r+0x6a>
 8017cbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017cc0:	4299      	cmp	r1, r3
 8017cc2:	d002      	beq.n	8017cca <__swsetup_r+0x66>
 8017cc4:	4630      	mov	r0, r6
 8017cc6:	f7fe f8ff 	bl	8015ec8 <_free_r>
 8017cca:	2300      	movs	r3, #0
 8017ccc:	6363      	str	r3, [r4, #52]	; 0x34
 8017cce:	89a3      	ldrh	r3, [r4, #12]
 8017cd0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017cd4:	81a3      	strh	r3, [r4, #12]
 8017cd6:	2300      	movs	r3, #0
 8017cd8:	6063      	str	r3, [r4, #4]
 8017cda:	6923      	ldr	r3, [r4, #16]
 8017cdc:	6023      	str	r3, [r4, #0]
 8017cde:	89a3      	ldrh	r3, [r4, #12]
 8017ce0:	f043 0308 	orr.w	r3, r3, #8
 8017ce4:	81a3      	strh	r3, [r4, #12]
 8017ce6:	6923      	ldr	r3, [r4, #16]
 8017ce8:	b94b      	cbnz	r3, 8017cfe <__swsetup_r+0x9a>
 8017cea:	89a3      	ldrh	r3, [r4, #12]
 8017cec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017cf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017cf4:	d003      	beq.n	8017cfe <__swsetup_r+0x9a>
 8017cf6:	4621      	mov	r1, r4
 8017cf8:	4630      	mov	r0, r6
 8017cfa:	f001 fb6d 	bl	80193d8 <__smakebuf_r>
 8017cfe:	89a0      	ldrh	r0, [r4, #12]
 8017d00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017d04:	f010 0301 	ands.w	r3, r0, #1
 8017d08:	d00a      	beq.n	8017d20 <__swsetup_r+0xbc>
 8017d0a:	2300      	movs	r3, #0
 8017d0c:	60a3      	str	r3, [r4, #8]
 8017d0e:	6963      	ldr	r3, [r4, #20]
 8017d10:	425b      	negs	r3, r3
 8017d12:	61a3      	str	r3, [r4, #24]
 8017d14:	6923      	ldr	r3, [r4, #16]
 8017d16:	b943      	cbnz	r3, 8017d2a <__swsetup_r+0xc6>
 8017d18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017d1c:	d1ba      	bne.n	8017c94 <__swsetup_r+0x30>
 8017d1e:	bd70      	pop	{r4, r5, r6, pc}
 8017d20:	0781      	lsls	r1, r0, #30
 8017d22:	bf58      	it	pl
 8017d24:	6963      	ldrpl	r3, [r4, #20]
 8017d26:	60a3      	str	r3, [r4, #8]
 8017d28:	e7f4      	b.n	8017d14 <__swsetup_r+0xb0>
 8017d2a:	2000      	movs	r0, #0
 8017d2c:	e7f7      	b.n	8017d1e <__swsetup_r+0xba>
 8017d2e:	bf00      	nop
 8017d30:	2000011c 	.word	0x2000011c
 8017d34:	0801b98c 	.word	0x0801b98c
 8017d38:	0801b9ac 	.word	0x0801b9ac
 8017d3c:	0801b96c 	.word	0x0801b96c

08017d40 <quorem>:
 8017d40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d44:	6903      	ldr	r3, [r0, #16]
 8017d46:	690c      	ldr	r4, [r1, #16]
 8017d48:	42a3      	cmp	r3, r4
 8017d4a:	4607      	mov	r7, r0
 8017d4c:	f2c0 8081 	blt.w	8017e52 <quorem+0x112>
 8017d50:	3c01      	subs	r4, #1
 8017d52:	f101 0814 	add.w	r8, r1, #20
 8017d56:	f100 0514 	add.w	r5, r0, #20
 8017d5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017d5e:	9301      	str	r3, [sp, #4]
 8017d60:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017d64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017d68:	3301      	adds	r3, #1
 8017d6a:	429a      	cmp	r2, r3
 8017d6c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8017d70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017d74:	fbb2 f6f3 	udiv	r6, r2, r3
 8017d78:	d331      	bcc.n	8017dde <quorem+0x9e>
 8017d7a:	f04f 0e00 	mov.w	lr, #0
 8017d7e:	4640      	mov	r0, r8
 8017d80:	46ac      	mov	ip, r5
 8017d82:	46f2      	mov	sl, lr
 8017d84:	f850 2b04 	ldr.w	r2, [r0], #4
 8017d88:	b293      	uxth	r3, r2
 8017d8a:	fb06 e303 	mla	r3, r6, r3, lr
 8017d8e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8017d92:	b29b      	uxth	r3, r3
 8017d94:	ebaa 0303 	sub.w	r3, sl, r3
 8017d98:	f8dc a000 	ldr.w	sl, [ip]
 8017d9c:	0c12      	lsrs	r2, r2, #16
 8017d9e:	fa13 f38a 	uxtah	r3, r3, sl
 8017da2:	fb06 e202 	mla	r2, r6, r2, lr
 8017da6:	9300      	str	r3, [sp, #0]
 8017da8:	9b00      	ldr	r3, [sp, #0]
 8017daa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017dae:	b292      	uxth	r2, r2
 8017db0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8017db4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017db8:	f8bd 3000 	ldrh.w	r3, [sp]
 8017dbc:	4581      	cmp	r9, r0
 8017dbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017dc2:	f84c 3b04 	str.w	r3, [ip], #4
 8017dc6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8017dca:	d2db      	bcs.n	8017d84 <quorem+0x44>
 8017dcc:	f855 300b 	ldr.w	r3, [r5, fp]
 8017dd0:	b92b      	cbnz	r3, 8017dde <quorem+0x9e>
 8017dd2:	9b01      	ldr	r3, [sp, #4]
 8017dd4:	3b04      	subs	r3, #4
 8017dd6:	429d      	cmp	r5, r3
 8017dd8:	461a      	mov	r2, r3
 8017dda:	d32e      	bcc.n	8017e3a <quorem+0xfa>
 8017ddc:	613c      	str	r4, [r7, #16]
 8017dde:	4638      	mov	r0, r7
 8017de0:	f001 fe32 	bl	8019a48 <__mcmp>
 8017de4:	2800      	cmp	r0, #0
 8017de6:	db24      	blt.n	8017e32 <quorem+0xf2>
 8017de8:	3601      	adds	r6, #1
 8017dea:	4628      	mov	r0, r5
 8017dec:	f04f 0c00 	mov.w	ip, #0
 8017df0:	f858 2b04 	ldr.w	r2, [r8], #4
 8017df4:	f8d0 e000 	ldr.w	lr, [r0]
 8017df8:	b293      	uxth	r3, r2
 8017dfa:	ebac 0303 	sub.w	r3, ip, r3
 8017dfe:	0c12      	lsrs	r2, r2, #16
 8017e00:	fa13 f38e 	uxtah	r3, r3, lr
 8017e04:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017e08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017e0c:	b29b      	uxth	r3, r3
 8017e0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017e12:	45c1      	cmp	r9, r8
 8017e14:	f840 3b04 	str.w	r3, [r0], #4
 8017e18:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017e1c:	d2e8      	bcs.n	8017df0 <quorem+0xb0>
 8017e1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017e22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017e26:	b922      	cbnz	r2, 8017e32 <quorem+0xf2>
 8017e28:	3b04      	subs	r3, #4
 8017e2a:	429d      	cmp	r5, r3
 8017e2c:	461a      	mov	r2, r3
 8017e2e:	d30a      	bcc.n	8017e46 <quorem+0x106>
 8017e30:	613c      	str	r4, [r7, #16]
 8017e32:	4630      	mov	r0, r6
 8017e34:	b003      	add	sp, #12
 8017e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e3a:	6812      	ldr	r2, [r2, #0]
 8017e3c:	3b04      	subs	r3, #4
 8017e3e:	2a00      	cmp	r2, #0
 8017e40:	d1cc      	bne.n	8017ddc <quorem+0x9c>
 8017e42:	3c01      	subs	r4, #1
 8017e44:	e7c7      	b.n	8017dd6 <quorem+0x96>
 8017e46:	6812      	ldr	r2, [r2, #0]
 8017e48:	3b04      	subs	r3, #4
 8017e4a:	2a00      	cmp	r2, #0
 8017e4c:	d1f0      	bne.n	8017e30 <quorem+0xf0>
 8017e4e:	3c01      	subs	r4, #1
 8017e50:	e7eb      	b.n	8017e2a <quorem+0xea>
 8017e52:	2000      	movs	r0, #0
 8017e54:	e7ee      	b.n	8017e34 <quorem+0xf4>
	...

08017e58 <_dtoa_r>:
 8017e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e5c:	ed2d 8b02 	vpush	{d8}
 8017e60:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017e62:	b091      	sub	sp, #68	; 0x44
 8017e64:	ed8d 0b02 	vstr	d0, [sp, #8]
 8017e68:	ec59 8b10 	vmov	r8, r9, d0
 8017e6c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8017e6e:	9106      	str	r1, [sp, #24]
 8017e70:	4606      	mov	r6, r0
 8017e72:	9208      	str	r2, [sp, #32]
 8017e74:	930c      	str	r3, [sp, #48]	; 0x30
 8017e76:	b975      	cbnz	r5, 8017e96 <_dtoa_r+0x3e>
 8017e78:	2010      	movs	r0, #16
 8017e7a:	f7fe f815 	bl	8015ea8 <malloc>
 8017e7e:	4602      	mov	r2, r0
 8017e80:	6270      	str	r0, [r6, #36]	; 0x24
 8017e82:	b920      	cbnz	r0, 8017e8e <_dtoa_r+0x36>
 8017e84:	4baa      	ldr	r3, [pc, #680]	; (8018130 <_dtoa_r+0x2d8>)
 8017e86:	21ea      	movs	r1, #234	; 0xea
 8017e88:	48aa      	ldr	r0, [pc, #680]	; (8018134 <_dtoa_r+0x2dc>)
 8017e8a:	f002 fb63 	bl	801a554 <__assert_func>
 8017e8e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017e92:	6005      	str	r5, [r0, #0]
 8017e94:	60c5      	str	r5, [r0, #12]
 8017e96:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8017e98:	6819      	ldr	r1, [r3, #0]
 8017e9a:	b151      	cbz	r1, 8017eb2 <_dtoa_r+0x5a>
 8017e9c:	685a      	ldr	r2, [r3, #4]
 8017e9e:	604a      	str	r2, [r1, #4]
 8017ea0:	2301      	movs	r3, #1
 8017ea2:	4093      	lsls	r3, r2
 8017ea4:	608b      	str	r3, [r1, #8]
 8017ea6:	4630      	mov	r0, r6
 8017ea8:	f001 fb42 	bl	8019530 <_Bfree>
 8017eac:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8017eae:	2200      	movs	r2, #0
 8017eb0:	601a      	str	r2, [r3, #0]
 8017eb2:	f1b9 0300 	subs.w	r3, r9, #0
 8017eb6:	bfbb      	ittet	lt
 8017eb8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017ebc:	9303      	strlt	r3, [sp, #12]
 8017ebe:	2300      	movge	r3, #0
 8017ec0:	2201      	movlt	r2, #1
 8017ec2:	bfac      	ite	ge
 8017ec4:	6023      	strge	r3, [r4, #0]
 8017ec6:	6022      	strlt	r2, [r4, #0]
 8017ec8:	4b9b      	ldr	r3, [pc, #620]	; (8018138 <_dtoa_r+0x2e0>)
 8017eca:	9c03      	ldr	r4, [sp, #12]
 8017ecc:	43a3      	bics	r3, r4
 8017ece:	d11c      	bne.n	8017f0a <_dtoa_r+0xb2>
 8017ed0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017ed2:	f242 730f 	movw	r3, #9999	; 0x270f
 8017ed6:	6013      	str	r3, [r2, #0]
 8017ed8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8017edc:	ea53 0308 	orrs.w	r3, r3, r8
 8017ee0:	f000 84fd 	beq.w	80188de <_dtoa_r+0xa86>
 8017ee4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017ee6:	b963      	cbnz	r3, 8017f02 <_dtoa_r+0xaa>
 8017ee8:	4b94      	ldr	r3, [pc, #592]	; (801813c <_dtoa_r+0x2e4>)
 8017eea:	e01f      	b.n	8017f2c <_dtoa_r+0xd4>
 8017eec:	4b94      	ldr	r3, [pc, #592]	; (8018140 <_dtoa_r+0x2e8>)
 8017eee:	9301      	str	r3, [sp, #4]
 8017ef0:	3308      	adds	r3, #8
 8017ef2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8017ef4:	6013      	str	r3, [r2, #0]
 8017ef6:	9801      	ldr	r0, [sp, #4]
 8017ef8:	b011      	add	sp, #68	; 0x44
 8017efa:	ecbd 8b02 	vpop	{d8}
 8017efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f02:	4b8e      	ldr	r3, [pc, #568]	; (801813c <_dtoa_r+0x2e4>)
 8017f04:	9301      	str	r3, [sp, #4]
 8017f06:	3303      	adds	r3, #3
 8017f08:	e7f3      	b.n	8017ef2 <_dtoa_r+0x9a>
 8017f0a:	ed9d 8b02 	vldr	d8, [sp, #8]
 8017f0e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8017f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f16:	d10b      	bne.n	8017f30 <_dtoa_r+0xd8>
 8017f18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017f1a:	2301      	movs	r3, #1
 8017f1c:	6013      	str	r3, [r2, #0]
 8017f1e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017f20:	2b00      	cmp	r3, #0
 8017f22:	f000 84d9 	beq.w	80188d8 <_dtoa_r+0xa80>
 8017f26:	4887      	ldr	r0, [pc, #540]	; (8018144 <_dtoa_r+0x2ec>)
 8017f28:	6018      	str	r0, [r3, #0]
 8017f2a:	1e43      	subs	r3, r0, #1
 8017f2c:	9301      	str	r3, [sp, #4]
 8017f2e:	e7e2      	b.n	8017ef6 <_dtoa_r+0x9e>
 8017f30:	a90f      	add	r1, sp, #60	; 0x3c
 8017f32:	aa0e      	add	r2, sp, #56	; 0x38
 8017f34:	4630      	mov	r0, r6
 8017f36:	eeb0 0b48 	vmov.f64	d0, d8
 8017f3a:	f001 fea7 	bl	8019c8c <__d2b>
 8017f3e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8017f42:	4605      	mov	r5, r0
 8017f44:	980e      	ldr	r0, [sp, #56]	; 0x38
 8017f46:	2900      	cmp	r1, #0
 8017f48:	d046      	beq.n	8017fd8 <_dtoa_r+0x180>
 8017f4a:	ee18 4a90 	vmov	r4, s17
 8017f4e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8017f52:	ec53 2b18 	vmov	r2, r3, d8
 8017f56:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8017f5a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8017f5e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8017f62:	2400      	movs	r4, #0
 8017f64:	ec43 2b16 	vmov	d6, r2, r3
 8017f68:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8017f6c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8018118 <_dtoa_r+0x2c0>
 8017f70:	ee36 7b47 	vsub.f64	d7, d6, d7
 8017f74:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8018120 <_dtoa_r+0x2c8>
 8017f78:	eea7 6b05 	vfma.f64	d6, d7, d5
 8017f7c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8018128 <_dtoa_r+0x2d0>
 8017f80:	ee07 1a90 	vmov	s15, r1
 8017f84:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8017f88:	eeb0 7b46 	vmov.f64	d7, d6
 8017f8c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8017f90:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8017f94:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8017f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f9c:	ee16 ba90 	vmov	fp, s13
 8017fa0:	940a      	str	r4, [sp, #40]	; 0x28
 8017fa2:	d508      	bpl.n	8017fb6 <_dtoa_r+0x15e>
 8017fa4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8017fa8:	eeb4 6b47 	vcmp.f64	d6, d7
 8017fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fb0:	bf18      	it	ne
 8017fb2:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8017fb6:	f1bb 0f16 	cmp.w	fp, #22
 8017fba:	d82f      	bhi.n	801801c <_dtoa_r+0x1c4>
 8017fbc:	4b62      	ldr	r3, [pc, #392]	; (8018148 <_dtoa_r+0x2f0>)
 8017fbe:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8017fc2:	ed93 7b00 	vldr	d7, [r3]
 8017fc6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8017fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fce:	d501      	bpl.n	8017fd4 <_dtoa_r+0x17c>
 8017fd0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017fd4:	2300      	movs	r3, #0
 8017fd6:	e022      	b.n	801801e <_dtoa_r+0x1c6>
 8017fd8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8017fda:	4401      	add	r1, r0
 8017fdc:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8017fe0:	2b20      	cmp	r3, #32
 8017fe2:	bfc1      	itttt	gt
 8017fe4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8017fe8:	fa04 f303 	lslgt.w	r3, r4, r3
 8017fec:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8017ff0:	fa28 f804 	lsrgt.w	r8, r8, r4
 8017ff4:	bfd6      	itet	le
 8017ff6:	f1c3 0320 	rsble	r3, r3, #32
 8017ffa:	ea43 0808 	orrgt.w	r8, r3, r8
 8017ffe:	fa08 f803 	lslle.w	r8, r8, r3
 8018002:	ee07 8a90 	vmov	s15, r8
 8018006:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801800a:	3901      	subs	r1, #1
 801800c:	ee17 4a90 	vmov	r4, s15
 8018010:	ec53 2b17 	vmov	r2, r3, d7
 8018014:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8018018:	2401      	movs	r4, #1
 801801a:	e7a3      	b.n	8017f64 <_dtoa_r+0x10c>
 801801c:	2301      	movs	r3, #1
 801801e:	930b      	str	r3, [sp, #44]	; 0x2c
 8018020:	1a43      	subs	r3, r0, r1
 8018022:	1e5a      	subs	r2, r3, #1
 8018024:	bf45      	ittet	mi
 8018026:	f1c3 0301 	rsbmi	r3, r3, #1
 801802a:	9304      	strmi	r3, [sp, #16]
 801802c:	2300      	movpl	r3, #0
 801802e:	2300      	movmi	r3, #0
 8018030:	9205      	str	r2, [sp, #20]
 8018032:	bf54      	ite	pl
 8018034:	9304      	strpl	r3, [sp, #16]
 8018036:	9305      	strmi	r3, [sp, #20]
 8018038:	f1bb 0f00 	cmp.w	fp, #0
 801803c:	db18      	blt.n	8018070 <_dtoa_r+0x218>
 801803e:	9b05      	ldr	r3, [sp, #20]
 8018040:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8018044:	445b      	add	r3, fp
 8018046:	9305      	str	r3, [sp, #20]
 8018048:	2300      	movs	r3, #0
 801804a:	9a06      	ldr	r2, [sp, #24]
 801804c:	2a09      	cmp	r2, #9
 801804e:	d849      	bhi.n	80180e4 <_dtoa_r+0x28c>
 8018050:	2a05      	cmp	r2, #5
 8018052:	bfc4      	itt	gt
 8018054:	3a04      	subgt	r2, #4
 8018056:	9206      	strgt	r2, [sp, #24]
 8018058:	9a06      	ldr	r2, [sp, #24]
 801805a:	f1a2 0202 	sub.w	r2, r2, #2
 801805e:	bfcc      	ite	gt
 8018060:	2400      	movgt	r4, #0
 8018062:	2401      	movle	r4, #1
 8018064:	2a03      	cmp	r2, #3
 8018066:	d848      	bhi.n	80180fa <_dtoa_r+0x2a2>
 8018068:	e8df f002 	tbb	[pc, r2]
 801806c:	3a2c2e0b 	.word	0x3a2c2e0b
 8018070:	9b04      	ldr	r3, [sp, #16]
 8018072:	2200      	movs	r2, #0
 8018074:	eba3 030b 	sub.w	r3, r3, fp
 8018078:	9304      	str	r3, [sp, #16]
 801807a:	9209      	str	r2, [sp, #36]	; 0x24
 801807c:	f1cb 0300 	rsb	r3, fp, #0
 8018080:	e7e3      	b.n	801804a <_dtoa_r+0x1f2>
 8018082:	2200      	movs	r2, #0
 8018084:	9207      	str	r2, [sp, #28]
 8018086:	9a08      	ldr	r2, [sp, #32]
 8018088:	2a00      	cmp	r2, #0
 801808a:	dc39      	bgt.n	8018100 <_dtoa_r+0x2a8>
 801808c:	f04f 0a01 	mov.w	sl, #1
 8018090:	46d1      	mov	r9, sl
 8018092:	4652      	mov	r2, sl
 8018094:	f8cd a020 	str.w	sl, [sp, #32]
 8018098:	6a77      	ldr	r7, [r6, #36]	; 0x24
 801809a:	2100      	movs	r1, #0
 801809c:	6079      	str	r1, [r7, #4]
 801809e:	2004      	movs	r0, #4
 80180a0:	f100 0c14 	add.w	ip, r0, #20
 80180a4:	4594      	cmp	ip, r2
 80180a6:	6879      	ldr	r1, [r7, #4]
 80180a8:	d92f      	bls.n	801810a <_dtoa_r+0x2b2>
 80180aa:	4630      	mov	r0, r6
 80180ac:	930d      	str	r3, [sp, #52]	; 0x34
 80180ae:	f001 f9ff 	bl	80194b0 <_Balloc>
 80180b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80180b4:	9001      	str	r0, [sp, #4]
 80180b6:	4602      	mov	r2, r0
 80180b8:	2800      	cmp	r0, #0
 80180ba:	d149      	bne.n	8018150 <_dtoa_r+0x2f8>
 80180bc:	4b23      	ldr	r3, [pc, #140]	; (801814c <_dtoa_r+0x2f4>)
 80180be:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80180c2:	e6e1      	b.n	8017e88 <_dtoa_r+0x30>
 80180c4:	2201      	movs	r2, #1
 80180c6:	e7dd      	b.n	8018084 <_dtoa_r+0x22c>
 80180c8:	2200      	movs	r2, #0
 80180ca:	9207      	str	r2, [sp, #28]
 80180cc:	9a08      	ldr	r2, [sp, #32]
 80180ce:	eb0b 0a02 	add.w	sl, fp, r2
 80180d2:	f10a 0901 	add.w	r9, sl, #1
 80180d6:	464a      	mov	r2, r9
 80180d8:	2a01      	cmp	r2, #1
 80180da:	bfb8      	it	lt
 80180dc:	2201      	movlt	r2, #1
 80180de:	e7db      	b.n	8018098 <_dtoa_r+0x240>
 80180e0:	2201      	movs	r2, #1
 80180e2:	e7f2      	b.n	80180ca <_dtoa_r+0x272>
 80180e4:	2401      	movs	r4, #1
 80180e6:	2200      	movs	r2, #0
 80180e8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80180ec:	f04f 3aff 	mov.w	sl, #4294967295
 80180f0:	2100      	movs	r1, #0
 80180f2:	46d1      	mov	r9, sl
 80180f4:	2212      	movs	r2, #18
 80180f6:	9108      	str	r1, [sp, #32]
 80180f8:	e7ce      	b.n	8018098 <_dtoa_r+0x240>
 80180fa:	2201      	movs	r2, #1
 80180fc:	9207      	str	r2, [sp, #28]
 80180fe:	e7f5      	b.n	80180ec <_dtoa_r+0x294>
 8018100:	f8dd a020 	ldr.w	sl, [sp, #32]
 8018104:	46d1      	mov	r9, sl
 8018106:	4652      	mov	r2, sl
 8018108:	e7c6      	b.n	8018098 <_dtoa_r+0x240>
 801810a:	3101      	adds	r1, #1
 801810c:	6079      	str	r1, [r7, #4]
 801810e:	0040      	lsls	r0, r0, #1
 8018110:	e7c6      	b.n	80180a0 <_dtoa_r+0x248>
 8018112:	bf00      	nop
 8018114:	f3af 8000 	nop.w
 8018118:	636f4361 	.word	0x636f4361
 801811c:	3fd287a7 	.word	0x3fd287a7
 8018120:	8b60c8b3 	.word	0x8b60c8b3
 8018124:	3fc68a28 	.word	0x3fc68a28
 8018128:	509f79fb 	.word	0x509f79fb
 801812c:	3fd34413 	.word	0x3fd34413
 8018130:	0801b8e6 	.word	0x0801b8e6
 8018134:	0801b8fd 	.word	0x0801b8fd
 8018138:	7ff00000 	.word	0x7ff00000
 801813c:	0801b8e2 	.word	0x0801b8e2
 8018140:	0801b8d9 	.word	0x0801b8d9
 8018144:	0801b75d 	.word	0x0801b75d
 8018148:	0801bad0 	.word	0x0801bad0
 801814c:	0801b958 	.word	0x0801b958
 8018150:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8018152:	9901      	ldr	r1, [sp, #4]
 8018154:	6011      	str	r1, [r2, #0]
 8018156:	f1b9 0f0e 	cmp.w	r9, #14
 801815a:	d86c      	bhi.n	8018236 <_dtoa_r+0x3de>
 801815c:	2c00      	cmp	r4, #0
 801815e:	d06a      	beq.n	8018236 <_dtoa_r+0x3de>
 8018160:	f1bb 0f00 	cmp.w	fp, #0
 8018164:	f340 80a0 	ble.w	80182a8 <_dtoa_r+0x450>
 8018168:	49c1      	ldr	r1, [pc, #772]	; (8018470 <_dtoa_r+0x618>)
 801816a:	f00b 020f 	and.w	r2, fp, #15
 801816e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8018172:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8018176:	ed92 7b00 	vldr	d7, [r2]
 801817a:	ea4f 112b 	mov.w	r1, fp, asr #4
 801817e:	f000 8087 	beq.w	8018290 <_dtoa_r+0x438>
 8018182:	4abc      	ldr	r2, [pc, #752]	; (8018474 <_dtoa_r+0x61c>)
 8018184:	ed92 6b08 	vldr	d6, [r2, #32]
 8018188:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801818c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8018190:	f001 010f 	and.w	r1, r1, #15
 8018194:	2203      	movs	r2, #3
 8018196:	48b7      	ldr	r0, [pc, #732]	; (8018474 <_dtoa_r+0x61c>)
 8018198:	2900      	cmp	r1, #0
 801819a:	d17b      	bne.n	8018294 <_dtoa_r+0x43c>
 801819c:	ed9d 6b02 	vldr	d6, [sp, #8]
 80181a0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80181a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80181a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80181aa:	2900      	cmp	r1, #0
 80181ac:	f000 80a2 	beq.w	80182f4 <_dtoa_r+0x49c>
 80181b0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80181b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80181b8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80181bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181c0:	f140 8098 	bpl.w	80182f4 <_dtoa_r+0x49c>
 80181c4:	f1b9 0f00 	cmp.w	r9, #0
 80181c8:	f000 8094 	beq.w	80182f4 <_dtoa_r+0x49c>
 80181cc:	f1ba 0f00 	cmp.w	sl, #0
 80181d0:	dd2f      	ble.n	8018232 <_dtoa_r+0x3da>
 80181d2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80181d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80181da:	ed8d 7b02 	vstr	d7, [sp, #8]
 80181de:	f10b 37ff 	add.w	r7, fp, #4294967295
 80181e2:	3201      	adds	r2, #1
 80181e4:	4650      	mov	r0, sl
 80181e6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80181ea:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80181ee:	ee07 2a90 	vmov	s15, r2
 80181f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80181f6:	eea7 5b06 	vfma.f64	d5, d7, d6
 80181fa:	ee15 4a90 	vmov	r4, s11
 80181fe:	ec52 1b15 	vmov	r1, r2, d5
 8018202:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8018206:	2800      	cmp	r0, #0
 8018208:	d177      	bne.n	80182fa <_dtoa_r+0x4a2>
 801820a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801820e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8018212:	ec42 1b17 	vmov	d7, r1, r2
 8018216:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801821a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801821e:	f300 8263 	bgt.w	80186e8 <_dtoa_r+0x890>
 8018222:	eeb1 7b47 	vneg.f64	d7, d7
 8018226:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801822a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801822e:	f100 8258 	bmi.w	80186e2 <_dtoa_r+0x88a>
 8018232:	ed8d 8b02 	vstr	d8, [sp, #8]
 8018236:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018238:	2a00      	cmp	r2, #0
 801823a:	f2c0 811d 	blt.w	8018478 <_dtoa_r+0x620>
 801823e:	f1bb 0f0e 	cmp.w	fp, #14
 8018242:	f300 8119 	bgt.w	8018478 <_dtoa_r+0x620>
 8018246:	4b8a      	ldr	r3, [pc, #552]	; (8018470 <_dtoa_r+0x618>)
 8018248:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801824c:	ed93 6b00 	vldr	d6, [r3]
 8018250:	9b08      	ldr	r3, [sp, #32]
 8018252:	2b00      	cmp	r3, #0
 8018254:	f280 80b7 	bge.w	80183c6 <_dtoa_r+0x56e>
 8018258:	f1b9 0f00 	cmp.w	r9, #0
 801825c:	f300 80b3 	bgt.w	80183c6 <_dtoa_r+0x56e>
 8018260:	f040 823f 	bne.w	80186e2 <_dtoa_r+0x88a>
 8018264:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8018268:	ee26 6b07 	vmul.f64	d6, d6, d7
 801826c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018270:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018278:	464c      	mov	r4, r9
 801827a:	464f      	mov	r7, r9
 801827c:	f280 8215 	bge.w	80186aa <_dtoa_r+0x852>
 8018280:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018284:	2331      	movs	r3, #49	; 0x31
 8018286:	f808 3b01 	strb.w	r3, [r8], #1
 801828a:	f10b 0b01 	add.w	fp, fp, #1
 801828e:	e211      	b.n	80186b4 <_dtoa_r+0x85c>
 8018290:	2202      	movs	r2, #2
 8018292:	e780      	b.n	8018196 <_dtoa_r+0x33e>
 8018294:	07cc      	lsls	r4, r1, #31
 8018296:	d504      	bpl.n	80182a2 <_dtoa_r+0x44a>
 8018298:	ed90 6b00 	vldr	d6, [r0]
 801829c:	3201      	adds	r2, #1
 801829e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80182a2:	1049      	asrs	r1, r1, #1
 80182a4:	3008      	adds	r0, #8
 80182a6:	e777      	b.n	8018198 <_dtoa_r+0x340>
 80182a8:	d022      	beq.n	80182f0 <_dtoa_r+0x498>
 80182aa:	f1cb 0100 	rsb	r1, fp, #0
 80182ae:	4a70      	ldr	r2, [pc, #448]	; (8018470 <_dtoa_r+0x618>)
 80182b0:	f001 000f 	and.w	r0, r1, #15
 80182b4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80182b8:	ed92 7b00 	vldr	d7, [r2]
 80182bc:	ee28 7b07 	vmul.f64	d7, d8, d7
 80182c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80182c4:	486b      	ldr	r0, [pc, #428]	; (8018474 <_dtoa_r+0x61c>)
 80182c6:	1109      	asrs	r1, r1, #4
 80182c8:	2400      	movs	r4, #0
 80182ca:	2202      	movs	r2, #2
 80182cc:	b929      	cbnz	r1, 80182da <_dtoa_r+0x482>
 80182ce:	2c00      	cmp	r4, #0
 80182d0:	f43f af6a 	beq.w	80181a8 <_dtoa_r+0x350>
 80182d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80182d8:	e766      	b.n	80181a8 <_dtoa_r+0x350>
 80182da:	07cf      	lsls	r7, r1, #31
 80182dc:	d505      	bpl.n	80182ea <_dtoa_r+0x492>
 80182de:	ed90 6b00 	vldr	d6, [r0]
 80182e2:	3201      	adds	r2, #1
 80182e4:	2401      	movs	r4, #1
 80182e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80182ea:	1049      	asrs	r1, r1, #1
 80182ec:	3008      	adds	r0, #8
 80182ee:	e7ed      	b.n	80182cc <_dtoa_r+0x474>
 80182f0:	2202      	movs	r2, #2
 80182f2:	e759      	b.n	80181a8 <_dtoa_r+0x350>
 80182f4:	465f      	mov	r7, fp
 80182f6:	4648      	mov	r0, r9
 80182f8:	e775      	b.n	80181e6 <_dtoa_r+0x38e>
 80182fa:	ec42 1b17 	vmov	d7, r1, r2
 80182fe:	4a5c      	ldr	r2, [pc, #368]	; (8018470 <_dtoa_r+0x618>)
 8018300:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8018304:	ed12 4b02 	vldr	d4, [r2, #-8]
 8018308:	9a01      	ldr	r2, [sp, #4]
 801830a:	1814      	adds	r4, r2, r0
 801830c:	9a07      	ldr	r2, [sp, #28]
 801830e:	b352      	cbz	r2, 8018366 <_dtoa_r+0x50e>
 8018310:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8018314:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8018318:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801831c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8018320:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8018324:	ee35 7b47 	vsub.f64	d7, d5, d7
 8018328:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801832c:	ee14 2a90 	vmov	r2, s9
 8018330:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8018334:	3230      	adds	r2, #48	; 0x30
 8018336:	ee36 6b45 	vsub.f64	d6, d6, d5
 801833a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801833e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018342:	f808 2b01 	strb.w	r2, [r8], #1
 8018346:	d439      	bmi.n	80183bc <_dtoa_r+0x564>
 8018348:	ee32 5b46 	vsub.f64	d5, d2, d6
 801834c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8018350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018354:	d472      	bmi.n	801843c <_dtoa_r+0x5e4>
 8018356:	45a0      	cmp	r8, r4
 8018358:	f43f af6b 	beq.w	8018232 <_dtoa_r+0x3da>
 801835c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8018360:	ee26 6b03 	vmul.f64	d6, d6, d3
 8018364:	e7e0      	b.n	8018328 <_dtoa_r+0x4d0>
 8018366:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801836a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801836e:	4621      	mov	r1, r4
 8018370:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8018374:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8018378:	ee14 2a90 	vmov	r2, s9
 801837c:	3230      	adds	r2, #48	; 0x30
 801837e:	f808 2b01 	strb.w	r2, [r8], #1
 8018382:	45a0      	cmp	r8, r4
 8018384:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8018388:	ee36 6b45 	vsub.f64	d6, d6, d5
 801838c:	d118      	bne.n	80183c0 <_dtoa_r+0x568>
 801838e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8018392:	ee37 4b05 	vadd.f64	d4, d7, d5
 8018396:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801839a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801839e:	dc4d      	bgt.n	801843c <_dtoa_r+0x5e4>
 80183a0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80183a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80183a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183ac:	f57f af41 	bpl.w	8018232 <_dtoa_r+0x3da>
 80183b0:	4688      	mov	r8, r1
 80183b2:	3901      	subs	r1, #1
 80183b4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80183b8:	2b30      	cmp	r3, #48	; 0x30
 80183ba:	d0f9      	beq.n	80183b0 <_dtoa_r+0x558>
 80183bc:	46bb      	mov	fp, r7
 80183be:	e02a      	b.n	8018416 <_dtoa_r+0x5be>
 80183c0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80183c4:	e7d6      	b.n	8018374 <_dtoa_r+0x51c>
 80183c6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80183ca:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80183ce:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80183d2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80183d6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80183da:	ee15 3a10 	vmov	r3, s10
 80183de:	3330      	adds	r3, #48	; 0x30
 80183e0:	f808 3b01 	strb.w	r3, [r8], #1
 80183e4:	9b01      	ldr	r3, [sp, #4]
 80183e6:	eba8 0303 	sub.w	r3, r8, r3
 80183ea:	4599      	cmp	r9, r3
 80183ec:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80183f0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80183f4:	d133      	bne.n	801845e <_dtoa_r+0x606>
 80183f6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80183fa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80183fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018402:	dc1a      	bgt.n	801843a <_dtoa_r+0x5e2>
 8018404:	eeb4 7b46 	vcmp.f64	d7, d6
 8018408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801840c:	d103      	bne.n	8018416 <_dtoa_r+0x5be>
 801840e:	ee15 3a10 	vmov	r3, s10
 8018412:	07d9      	lsls	r1, r3, #31
 8018414:	d411      	bmi.n	801843a <_dtoa_r+0x5e2>
 8018416:	4629      	mov	r1, r5
 8018418:	4630      	mov	r0, r6
 801841a:	f001 f889 	bl	8019530 <_Bfree>
 801841e:	2300      	movs	r3, #0
 8018420:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018422:	f888 3000 	strb.w	r3, [r8]
 8018426:	f10b 0301 	add.w	r3, fp, #1
 801842a:	6013      	str	r3, [r2, #0]
 801842c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801842e:	2b00      	cmp	r3, #0
 8018430:	f43f ad61 	beq.w	8017ef6 <_dtoa_r+0x9e>
 8018434:	f8c3 8000 	str.w	r8, [r3]
 8018438:	e55d      	b.n	8017ef6 <_dtoa_r+0x9e>
 801843a:	465f      	mov	r7, fp
 801843c:	4643      	mov	r3, r8
 801843e:	4698      	mov	r8, r3
 8018440:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018444:	2a39      	cmp	r2, #57	; 0x39
 8018446:	d106      	bne.n	8018456 <_dtoa_r+0x5fe>
 8018448:	9a01      	ldr	r2, [sp, #4]
 801844a:	429a      	cmp	r2, r3
 801844c:	d1f7      	bne.n	801843e <_dtoa_r+0x5e6>
 801844e:	9901      	ldr	r1, [sp, #4]
 8018450:	2230      	movs	r2, #48	; 0x30
 8018452:	3701      	adds	r7, #1
 8018454:	700a      	strb	r2, [r1, #0]
 8018456:	781a      	ldrb	r2, [r3, #0]
 8018458:	3201      	adds	r2, #1
 801845a:	701a      	strb	r2, [r3, #0]
 801845c:	e7ae      	b.n	80183bc <_dtoa_r+0x564>
 801845e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8018462:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801846a:	d1b2      	bne.n	80183d2 <_dtoa_r+0x57a>
 801846c:	e7d3      	b.n	8018416 <_dtoa_r+0x5be>
 801846e:	bf00      	nop
 8018470:	0801bad0 	.word	0x0801bad0
 8018474:	0801baa8 	.word	0x0801baa8
 8018478:	9907      	ldr	r1, [sp, #28]
 801847a:	2900      	cmp	r1, #0
 801847c:	f000 80d0 	beq.w	8018620 <_dtoa_r+0x7c8>
 8018480:	9906      	ldr	r1, [sp, #24]
 8018482:	2901      	cmp	r1, #1
 8018484:	f300 80b4 	bgt.w	80185f0 <_dtoa_r+0x798>
 8018488:	990a      	ldr	r1, [sp, #40]	; 0x28
 801848a:	2900      	cmp	r1, #0
 801848c:	f000 80ac 	beq.w	80185e8 <_dtoa_r+0x790>
 8018490:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8018494:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8018498:	461c      	mov	r4, r3
 801849a:	930a      	str	r3, [sp, #40]	; 0x28
 801849c:	9b04      	ldr	r3, [sp, #16]
 801849e:	4413      	add	r3, r2
 80184a0:	9304      	str	r3, [sp, #16]
 80184a2:	9b05      	ldr	r3, [sp, #20]
 80184a4:	2101      	movs	r1, #1
 80184a6:	4413      	add	r3, r2
 80184a8:	4630      	mov	r0, r6
 80184aa:	9305      	str	r3, [sp, #20]
 80184ac:	f001 f942 	bl	8019734 <__i2b>
 80184b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80184b2:	4607      	mov	r7, r0
 80184b4:	f1b8 0f00 	cmp.w	r8, #0
 80184b8:	dd0d      	ble.n	80184d6 <_dtoa_r+0x67e>
 80184ba:	9a05      	ldr	r2, [sp, #20]
 80184bc:	2a00      	cmp	r2, #0
 80184be:	dd0a      	ble.n	80184d6 <_dtoa_r+0x67e>
 80184c0:	4542      	cmp	r2, r8
 80184c2:	9904      	ldr	r1, [sp, #16]
 80184c4:	bfa8      	it	ge
 80184c6:	4642      	movge	r2, r8
 80184c8:	1a89      	subs	r1, r1, r2
 80184ca:	9104      	str	r1, [sp, #16]
 80184cc:	9905      	ldr	r1, [sp, #20]
 80184ce:	eba8 0802 	sub.w	r8, r8, r2
 80184d2:	1a8a      	subs	r2, r1, r2
 80184d4:	9205      	str	r2, [sp, #20]
 80184d6:	b303      	cbz	r3, 801851a <_dtoa_r+0x6c2>
 80184d8:	9a07      	ldr	r2, [sp, #28]
 80184da:	2a00      	cmp	r2, #0
 80184dc:	f000 80a5 	beq.w	801862a <_dtoa_r+0x7d2>
 80184e0:	2c00      	cmp	r4, #0
 80184e2:	dd13      	ble.n	801850c <_dtoa_r+0x6b4>
 80184e4:	4639      	mov	r1, r7
 80184e6:	4622      	mov	r2, r4
 80184e8:	4630      	mov	r0, r6
 80184ea:	930d      	str	r3, [sp, #52]	; 0x34
 80184ec:	f001 f9e2 	bl	80198b4 <__pow5mult>
 80184f0:	462a      	mov	r2, r5
 80184f2:	4601      	mov	r1, r0
 80184f4:	4607      	mov	r7, r0
 80184f6:	4630      	mov	r0, r6
 80184f8:	f001 f932 	bl	8019760 <__multiply>
 80184fc:	4629      	mov	r1, r5
 80184fe:	900a      	str	r0, [sp, #40]	; 0x28
 8018500:	4630      	mov	r0, r6
 8018502:	f001 f815 	bl	8019530 <_Bfree>
 8018506:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018508:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801850a:	4615      	mov	r5, r2
 801850c:	1b1a      	subs	r2, r3, r4
 801850e:	d004      	beq.n	801851a <_dtoa_r+0x6c2>
 8018510:	4629      	mov	r1, r5
 8018512:	4630      	mov	r0, r6
 8018514:	f001 f9ce 	bl	80198b4 <__pow5mult>
 8018518:	4605      	mov	r5, r0
 801851a:	2101      	movs	r1, #1
 801851c:	4630      	mov	r0, r6
 801851e:	f001 f909 	bl	8019734 <__i2b>
 8018522:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018524:	2b00      	cmp	r3, #0
 8018526:	4604      	mov	r4, r0
 8018528:	f340 8081 	ble.w	801862e <_dtoa_r+0x7d6>
 801852c:	461a      	mov	r2, r3
 801852e:	4601      	mov	r1, r0
 8018530:	4630      	mov	r0, r6
 8018532:	f001 f9bf 	bl	80198b4 <__pow5mult>
 8018536:	9b06      	ldr	r3, [sp, #24]
 8018538:	2b01      	cmp	r3, #1
 801853a:	4604      	mov	r4, r0
 801853c:	dd7a      	ble.n	8018634 <_dtoa_r+0x7dc>
 801853e:	2300      	movs	r3, #0
 8018540:	930a      	str	r3, [sp, #40]	; 0x28
 8018542:	6922      	ldr	r2, [r4, #16]
 8018544:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8018548:	6910      	ldr	r0, [r2, #16]
 801854a:	f001 f8a3 	bl	8019694 <__hi0bits>
 801854e:	f1c0 0020 	rsb	r0, r0, #32
 8018552:	9b05      	ldr	r3, [sp, #20]
 8018554:	4418      	add	r0, r3
 8018556:	f010 001f 	ands.w	r0, r0, #31
 801855a:	f000 808c 	beq.w	8018676 <_dtoa_r+0x81e>
 801855e:	f1c0 0220 	rsb	r2, r0, #32
 8018562:	2a04      	cmp	r2, #4
 8018564:	f340 8085 	ble.w	8018672 <_dtoa_r+0x81a>
 8018568:	f1c0 001c 	rsb	r0, r0, #28
 801856c:	9b04      	ldr	r3, [sp, #16]
 801856e:	4403      	add	r3, r0
 8018570:	9304      	str	r3, [sp, #16]
 8018572:	9b05      	ldr	r3, [sp, #20]
 8018574:	4403      	add	r3, r0
 8018576:	4480      	add	r8, r0
 8018578:	9305      	str	r3, [sp, #20]
 801857a:	9b04      	ldr	r3, [sp, #16]
 801857c:	2b00      	cmp	r3, #0
 801857e:	dd05      	ble.n	801858c <_dtoa_r+0x734>
 8018580:	4629      	mov	r1, r5
 8018582:	461a      	mov	r2, r3
 8018584:	4630      	mov	r0, r6
 8018586:	f001 f9ef 	bl	8019968 <__lshift>
 801858a:	4605      	mov	r5, r0
 801858c:	9b05      	ldr	r3, [sp, #20]
 801858e:	2b00      	cmp	r3, #0
 8018590:	dd05      	ble.n	801859e <_dtoa_r+0x746>
 8018592:	4621      	mov	r1, r4
 8018594:	461a      	mov	r2, r3
 8018596:	4630      	mov	r0, r6
 8018598:	f001 f9e6 	bl	8019968 <__lshift>
 801859c:	4604      	mov	r4, r0
 801859e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80185a0:	2b00      	cmp	r3, #0
 80185a2:	d06a      	beq.n	801867a <_dtoa_r+0x822>
 80185a4:	4621      	mov	r1, r4
 80185a6:	4628      	mov	r0, r5
 80185a8:	f001 fa4e 	bl	8019a48 <__mcmp>
 80185ac:	2800      	cmp	r0, #0
 80185ae:	da64      	bge.n	801867a <_dtoa_r+0x822>
 80185b0:	2300      	movs	r3, #0
 80185b2:	4629      	mov	r1, r5
 80185b4:	220a      	movs	r2, #10
 80185b6:	4630      	mov	r0, r6
 80185b8:	f000 ffdc 	bl	8019574 <__multadd>
 80185bc:	9b07      	ldr	r3, [sp, #28]
 80185be:	f10b 3bff 	add.w	fp, fp, #4294967295
 80185c2:	4605      	mov	r5, r0
 80185c4:	2b00      	cmp	r3, #0
 80185c6:	f000 8191 	beq.w	80188ec <_dtoa_r+0xa94>
 80185ca:	4639      	mov	r1, r7
 80185cc:	2300      	movs	r3, #0
 80185ce:	220a      	movs	r2, #10
 80185d0:	4630      	mov	r0, r6
 80185d2:	f000 ffcf 	bl	8019574 <__multadd>
 80185d6:	f1ba 0f00 	cmp.w	sl, #0
 80185da:	4607      	mov	r7, r0
 80185dc:	f300 808d 	bgt.w	80186fa <_dtoa_r+0x8a2>
 80185e0:	9b06      	ldr	r3, [sp, #24]
 80185e2:	2b02      	cmp	r3, #2
 80185e4:	dc50      	bgt.n	8018688 <_dtoa_r+0x830>
 80185e6:	e088      	b.n	80186fa <_dtoa_r+0x8a2>
 80185e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80185ea:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80185ee:	e751      	b.n	8018494 <_dtoa_r+0x63c>
 80185f0:	f109 34ff 	add.w	r4, r9, #4294967295
 80185f4:	42a3      	cmp	r3, r4
 80185f6:	bfbf      	itttt	lt
 80185f8:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 80185fa:	1ae3      	sublt	r3, r4, r3
 80185fc:	18d2      	addlt	r2, r2, r3
 80185fe:	9209      	strlt	r2, [sp, #36]	; 0x24
 8018600:	bfb6      	itet	lt
 8018602:	4623      	movlt	r3, r4
 8018604:	1b1c      	subge	r4, r3, r4
 8018606:	2400      	movlt	r4, #0
 8018608:	f1b9 0f00 	cmp.w	r9, #0
 801860c:	bfb5      	itete	lt
 801860e:	9a04      	ldrlt	r2, [sp, #16]
 8018610:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8018614:	eba2 0809 	sublt.w	r8, r2, r9
 8018618:	464a      	movge	r2, r9
 801861a:	bfb8      	it	lt
 801861c:	2200      	movlt	r2, #0
 801861e:	e73c      	b.n	801849a <_dtoa_r+0x642>
 8018620:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8018624:	9f07      	ldr	r7, [sp, #28]
 8018626:	461c      	mov	r4, r3
 8018628:	e744      	b.n	80184b4 <_dtoa_r+0x65c>
 801862a:	461a      	mov	r2, r3
 801862c:	e770      	b.n	8018510 <_dtoa_r+0x6b8>
 801862e:	9b06      	ldr	r3, [sp, #24]
 8018630:	2b01      	cmp	r3, #1
 8018632:	dc18      	bgt.n	8018666 <_dtoa_r+0x80e>
 8018634:	9b02      	ldr	r3, [sp, #8]
 8018636:	b9b3      	cbnz	r3, 8018666 <_dtoa_r+0x80e>
 8018638:	9b03      	ldr	r3, [sp, #12]
 801863a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801863e:	b9a2      	cbnz	r2, 801866a <_dtoa_r+0x812>
 8018640:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8018644:	0d12      	lsrs	r2, r2, #20
 8018646:	0512      	lsls	r2, r2, #20
 8018648:	b18a      	cbz	r2, 801866e <_dtoa_r+0x816>
 801864a:	9b04      	ldr	r3, [sp, #16]
 801864c:	3301      	adds	r3, #1
 801864e:	9304      	str	r3, [sp, #16]
 8018650:	9b05      	ldr	r3, [sp, #20]
 8018652:	3301      	adds	r3, #1
 8018654:	9305      	str	r3, [sp, #20]
 8018656:	2301      	movs	r3, #1
 8018658:	930a      	str	r3, [sp, #40]	; 0x28
 801865a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801865c:	2b00      	cmp	r3, #0
 801865e:	f47f af70 	bne.w	8018542 <_dtoa_r+0x6ea>
 8018662:	2001      	movs	r0, #1
 8018664:	e775      	b.n	8018552 <_dtoa_r+0x6fa>
 8018666:	2300      	movs	r3, #0
 8018668:	e7f6      	b.n	8018658 <_dtoa_r+0x800>
 801866a:	9b02      	ldr	r3, [sp, #8]
 801866c:	e7f4      	b.n	8018658 <_dtoa_r+0x800>
 801866e:	920a      	str	r2, [sp, #40]	; 0x28
 8018670:	e7f3      	b.n	801865a <_dtoa_r+0x802>
 8018672:	d082      	beq.n	801857a <_dtoa_r+0x722>
 8018674:	4610      	mov	r0, r2
 8018676:	301c      	adds	r0, #28
 8018678:	e778      	b.n	801856c <_dtoa_r+0x714>
 801867a:	f1b9 0f00 	cmp.w	r9, #0
 801867e:	dc37      	bgt.n	80186f0 <_dtoa_r+0x898>
 8018680:	9b06      	ldr	r3, [sp, #24]
 8018682:	2b02      	cmp	r3, #2
 8018684:	dd34      	ble.n	80186f0 <_dtoa_r+0x898>
 8018686:	46ca      	mov	sl, r9
 8018688:	f1ba 0f00 	cmp.w	sl, #0
 801868c:	d10d      	bne.n	80186aa <_dtoa_r+0x852>
 801868e:	4621      	mov	r1, r4
 8018690:	4653      	mov	r3, sl
 8018692:	2205      	movs	r2, #5
 8018694:	4630      	mov	r0, r6
 8018696:	f000 ff6d 	bl	8019574 <__multadd>
 801869a:	4601      	mov	r1, r0
 801869c:	4604      	mov	r4, r0
 801869e:	4628      	mov	r0, r5
 80186a0:	f001 f9d2 	bl	8019a48 <__mcmp>
 80186a4:	2800      	cmp	r0, #0
 80186a6:	f73f adeb 	bgt.w	8018280 <_dtoa_r+0x428>
 80186aa:	9b08      	ldr	r3, [sp, #32]
 80186ac:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80186b0:	ea6f 0b03 	mvn.w	fp, r3
 80186b4:	f04f 0900 	mov.w	r9, #0
 80186b8:	4621      	mov	r1, r4
 80186ba:	4630      	mov	r0, r6
 80186bc:	f000 ff38 	bl	8019530 <_Bfree>
 80186c0:	2f00      	cmp	r7, #0
 80186c2:	f43f aea8 	beq.w	8018416 <_dtoa_r+0x5be>
 80186c6:	f1b9 0f00 	cmp.w	r9, #0
 80186ca:	d005      	beq.n	80186d8 <_dtoa_r+0x880>
 80186cc:	45b9      	cmp	r9, r7
 80186ce:	d003      	beq.n	80186d8 <_dtoa_r+0x880>
 80186d0:	4649      	mov	r1, r9
 80186d2:	4630      	mov	r0, r6
 80186d4:	f000 ff2c 	bl	8019530 <_Bfree>
 80186d8:	4639      	mov	r1, r7
 80186da:	4630      	mov	r0, r6
 80186dc:	f000 ff28 	bl	8019530 <_Bfree>
 80186e0:	e699      	b.n	8018416 <_dtoa_r+0x5be>
 80186e2:	2400      	movs	r4, #0
 80186e4:	4627      	mov	r7, r4
 80186e6:	e7e0      	b.n	80186aa <_dtoa_r+0x852>
 80186e8:	46bb      	mov	fp, r7
 80186ea:	4604      	mov	r4, r0
 80186ec:	4607      	mov	r7, r0
 80186ee:	e5c7      	b.n	8018280 <_dtoa_r+0x428>
 80186f0:	9b07      	ldr	r3, [sp, #28]
 80186f2:	46ca      	mov	sl, r9
 80186f4:	2b00      	cmp	r3, #0
 80186f6:	f000 8100 	beq.w	80188fa <_dtoa_r+0xaa2>
 80186fa:	f1b8 0f00 	cmp.w	r8, #0
 80186fe:	dd05      	ble.n	801870c <_dtoa_r+0x8b4>
 8018700:	4639      	mov	r1, r7
 8018702:	4642      	mov	r2, r8
 8018704:	4630      	mov	r0, r6
 8018706:	f001 f92f 	bl	8019968 <__lshift>
 801870a:	4607      	mov	r7, r0
 801870c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801870e:	2b00      	cmp	r3, #0
 8018710:	d05d      	beq.n	80187ce <_dtoa_r+0x976>
 8018712:	6879      	ldr	r1, [r7, #4]
 8018714:	4630      	mov	r0, r6
 8018716:	f000 fecb 	bl	80194b0 <_Balloc>
 801871a:	4680      	mov	r8, r0
 801871c:	b928      	cbnz	r0, 801872a <_dtoa_r+0x8d2>
 801871e:	4b82      	ldr	r3, [pc, #520]	; (8018928 <_dtoa_r+0xad0>)
 8018720:	4602      	mov	r2, r0
 8018722:	f240 21ea 	movw	r1, #746	; 0x2ea
 8018726:	f7ff bbaf 	b.w	8017e88 <_dtoa_r+0x30>
 801872a:	693a      	ldr	r2, [r7, #16]
 801872c:	3202      	adds	r2, #2
 801872e:	0092      	lsls	r2, r2, #2
 8018730:	f107 010c 	add.w	r1, r7, #12
 8018734:	300c      	adds	r0, #12
 8018736:	f000 fea1 	bl	801947c <memcpy>
 801873a:	2201      	movs	r2, #1
 801873c:	4641      	mov	r1, r8
 801873e:	4630      	mov	r0, r6
 8018740:	f001 f912 	bl	8019968 <__lshift>
 8018744:	9b01      	ldr	r3, [sp, #4]
 8018746:	3301      	adds	r3, #1
 8018748:	9304      	str	r3, [sp, #16]
 801874a:	9b01      	ldr	r3, [sp, #4]
 801874c:	4453      	add	r3, sl
 801874e:	9308      	str	r3, [sp, #32]
 8018750:	9b02      	ldr	r3, [sp, #8]
 8018752:	f003 0301 	and.w	r3, r3, #1
 8018756:	46b9      	mov	r9, r7
 8018758:	9307      	str	r3, [sp, #28]
 801875a:	4607      	mov	r7, r0
 801875c:	9b04      	ldr	r3, [sp, #16]
 801875e:	4621      	mov	r1, r4
 8018760:	3b01      	subs	r3, #1
 8018762:	4628      	mov	r0, r5
 8018764:	9302      	str	r3, [sp, #8]
 8018766:	f7ff faeb 	bl	8017d40 <quorem>
 801876a:	4603      	mov	r3, r0
 801876c:	3330      	adds	r3, #48	; 0x30
 801876e:	9005      	str	r0, [sp, #20]
 8018770:	4649      	mov	r1, r9
 8018772:	4628      	mov	r0, r5
 8018774:	9309      	str	r3, [sp, #36]	; 0x24
 8018776:	f001 f967 	bl	8019a48 <__mcmp>
 801877a:	463a      	mov	r2, r7
 801877c:	4682      	mov	sl, r0
 801877e:	4621      	mov	r1, r4
 8018780:	4630      	mov	r0, r6
 8018782:	f001 f97d 	bl	8019a80 <__mdiff>
 8018786:	68c2      	ldr	r2, [r0, #12]
 8018788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801878a:	4680      	mov	r8, r0
 801878c:	bb0a      	cbnz	r2, 80187d2 <_dtoa_r+0x97a>
 801878e:	4601      	mov	r1, r0
 8018790:	4628      	mov	r0, r5
 8018792:	f001 f959 	bl	8019a48 <__mcmp>
 8018796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018798:	4602      	mov	r2, r0
 801879a:	4641      	mov	r1, r8
 801879c:	4630      	mov	r0, r6
 801879e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80187a2:	f000 fec5 	bl	8019530 <_Bfree>
 80187a6:	9b06      	ldr	r3, [sp, #24]
 80187a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80187aa:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80187ae:	ea43 0102 	orr.w	r1, r3, r2
 80187b2:	9b07      	ldr	r3, [sp, #28]
 80187b4:	430b      	orrs	r3, r1
 80187b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80187b8:	d10d      	bne.n	80187d6 <_dtoa_r+0x97e>
 80187ba:	2b39      	cmp	r3, #57	; 0x39
 80187bc:	d029      	beq.n	8018812 <_dtoa_r+0x9ba>
 80187be:	f1ba 0f00 	cmp.w	sl, #0
 80187c2:	dd01      	ble.n	80187c8 <_dtoa_r+0x970>
 80187c4:	9b05      	ldr	r3, [sp, #20]
 80187c6:	3331      	adds	r3, #49	; 0x31
 80187c8:	9a02      	ldr	r2, [sp, #8]
 80187ca:	7013      	strb	r3, [r2, #0]
 80187cc:	e774      	b.n	80186b8 <_dtoa_r+0x860>
 80187ce:	4638      	mov	r0, r7
 80187d0:	e7b8      	b.n	8018744 <_dtoa_r+0x8ec>
 80187d2:	2201      	movs	r2, #1
 80187d4:	e7e1      	b.n	801879a <_dtoa_r+0x942>
 80187d6:	f1ba 0f00 	cmp.w	sl, #0
 80187da:	db06      	blt.n	80187ea <_dtoa_r+0x992>
 80187dc:	9906      	ldr	r1, [sp, #24]
 80187de:	ea41 0a0a 	orr.w	sl, r1, sl
 80187e2:	9907      	ldr	r1, [sp, #28]
 80187e4:	ea5a 0101 	orrs.w	r1, sl, r1
 80187e8:	d120      	bne.n	801882c <_dtoa_r+0x9d4>
 80187ea:	2a00      	cmp	r2, #0
 80187ec:	ddec      	ble.n	80187c8 <_dtoa_r+0x970>
 80187ee:	4629      	mov	r1, r5
 80187f0:	2201      	movs	r2, #1
 80187f2:	4630      	mov	r0, r6
 80187f4:	9304      	str	r3, [sp, #16]
 80187f6:	f001 f8b7 	bl	8019968 <__lshift>
 80187fa:	4621      	mov	r1, r4
 80187fc:	4605      	mov	r5, r0
 80187fe:	f001 f923 	bl	8019a48 <__mcmp>
 8018802:	2800      	cmp	r0, #0
 8018804:	9b04      	ldr	r3, [sp, #16]
 8018806:	dc02      	bgt.n	801880e <_dtoa_r+0x9b6>
 8018808:	d1de      	bne.n	80187c8 <_dtoa_r+0x970>
 801880a:	07da      	lsls	r2, r3, #31
 801880c:	d5dc      	bpl.n	80187c8 <_dtoa_r+0x970>
 801880e:	2b39      	cmp	r3, #57	; 0x39
 8018810:	d1d8      	bne.n	80187c4 <_dtoa_r+0x96c>
 8018812:	9a02      	ldr	r2, [sp, #8]
 8018814:	2339      	movs	r3, #57	; 0x39
 8018816:	7013      	strb	r3, [r2, #0]
 8018818:	4643      	mov	r3, r8
 801881a:	4698      	mov	r8, r3
 801881c:	3b01      	subs	r3, #1
 801881e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8018822:	2a39      	cmp	r2, #57	; 0x39
 8018824:	d051      	beq.n	80188ca <_dtoa_r+0xa72>
 8018826:	3201      	adds	r2, #1
 8018828:	701a      	strb	r2, [r3, #0]
 801882a:	e745      	b.n	80186b8 <_dtoa_r+0x860>
 801882c:	2a00      	cmp	r2, #0
 801882e:	dd03      	ble.n	8018838 <_dtoa_r+0x9e0>
 8018830:	2b39      	cmp	r3, #57	; 0x39
 8018832:	d0ee      	beq.n	8018812 <_dtoa_r+0x9ba>
 8018834:	3301      	adds	r3, #1
 8018836:	e7c7      	b.n	80187c8 <_dtoa_r+0x970>
 8018838:	9a04      	ldr	r2, [sp, #16]
 801883a:	9908      	ldr	r1, [sp, #32]
 801883c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8018840:	428a      	cmp	r2, r1
 8018842:	d02b      	beq.n	801889c <_dtoa_r+0xa44>
 8018844:	4629      	mov	r1, r5
 8018846:	2300      	movs	r3, #0
 8018848:	220a      	movs	r2, #10
 801884a:	4630      	mov	r0, r6
 801884c:	f000 fe92 	bl	8019574 <__multadd>
 8018850:	45b9      	cmp	r9, r7
 8018852:	4605      	mov	r5, r0
 8018854:	f04f 0300 	mov.w	r3, #0
 8018858:	f04f 020a 	mov.w	r2, #10
 801885c:	4649      	mov	r1, r9
 801885e:	4630      	mov	r0, r6
 8018860:	d107      	bne.n	8018872 <_dtoa_r+0xa1a>
 8018862:	f000 fe87 	bl	8019574 <__multadd>
 8018866:	4681      	mov	r9, r0
 8018868:	4607      	mov	r7, r0
 801886a:	9b04      	ldr	r3, [sp, #16]
 801886c:	3301      	adds	r3, #1
 801886e:	9304      	str	r3, [sp, #16]
 8018870:	e774      	b.n	801875c <_dtoa_r+0x904>
 8018872:	f000 fe7f 	bl	8019574 <__multadd>
 8018876:	4639      	mov	r1, r7
 8018878:	4681      	mov	r9, r0
 801887a:	2300      	movs	r3, #0
 801887c:	220a      	movs	r2, #10
 801887e:	4630      	mov	r0, r6
 8018880:	f000 fe78 	bl	8019574 <__multadd>
 8018884:	4607      	mov	r7, r0
 8018886:	e7f0      	b.n	801886a <_dtoa_r+0xa12>
 8018888:	f1ba 0f00 	cmp.w	sl, #0
 801888c:	9a01      	ldr	r2, [sp, #4]
 801888e:	bfcc      	ite	gt
 8018890:	46d0      	movgt	r8, sl
 8018892:	f04f 0801 	movle.w	r8, #1
 8018896:	4490      	add	r8, r2
 8018898:	f04f 0900 	mov.w	r9, #0
 801889c:	4629      	mov	r1, r5
 801889e:	2201      	movs	r2, #1
 80188a0:	4630      	mov	r0, r6
 80188a2:	9302      	str	r3, [sp, #8]
 80188a4:	f001 f860 	bl	8019968 <__lshift>
 80188a8:	4621      	mov	r1, r4
 80188aa:	4605      	mov	r5, r0
 80188ac:	f001 f8cc 	bl	8019a48 <__mcmp>
 80188b0:	2800      	cmp	r0, #0
 80188b2:	dcb1      	bgt.n	8018818 <_dtoa_r+0x9c0>
 80188b4:	d102      	bne.n	80188bc <_dtoa_r+0xa64>
 80188b6:	9b02      	ldr	r3, [sp, #8]
 80188b8:	07db      	lsls	r3, r3, #31
 80188ba:	d4ad      	bmi.n	8018818 <_dtoa_r+0x9c0>
 80188bc:	4643      	mov	r3, r8
 80188be:	4698      	mov	r8, r3
 80188c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80188c4:	2a30      	cmp	r2, #48	; 0x30
 80188c6:	d0fa      	beq.n	80188be <_dtoa_r+0xa66>
 80188c8:	e6f6      	b.n	80186b8 <_dtoa_r+0x860>
 80188ca:	9a01      	ldr	r2, [sp, #4]
 80188cc:	429a      	cmp	r2, r3
 80188ce:	d1a4      	bne.n	801881a <_dtoa_r+0x9c2>
 80188d0:	f10b 0b01 	add.w	fp, fp, #1
 80188d4:	2331      	movs	r3, #49	; 0x31
 80188d6:	e778      	b.n	80187ca <_dtoa_r+0x972>
 80188d8:	4b14      	ldr	r3, [pc, #80]	; (801892c <_dtoa_r+0xad4>)
 80188da:	f7ff bb27 	b.w	8017f2c <_dtoa_r+0xd4>
 80188de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80188e0:	2b00      	cmp	r3, #0
 80188e2:	f47f ab03 	bne.w	8017eec <_dtoa_r+0x94>
 80188e6:	4b12      	ldr	r3, [pc, #72]	; (8018930 <_dtoa_r+0xad8>)
 80188e8:	f7ff bb20 	b.w	8017f2c <_dtoa_r+0xd4>
 80188ec:	f1ba 0f00 	cmp.w	sl, #0
 80188f0:	dc03      	bgt.n	80188fa <_dtoa_r+0xaa2>
 80188f2:	9b06      	ldr	r3, [sp, #24]
 80188f4:	2b02      	cmp	r3, #2
 80188f6:	f73f aec7 	bgt.w	8018688 <_dtoa_r+0x830>
 80188fa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80188fe:	4621      	mov	r1, r4
 8018900:	4628      	mov	r0, r5
 8018902:	f7ff fa1d 	bl	8017d40 <quorem>
 8018906:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801890a:	f808 3b01 	strb.w	r3, [r8], #1
 801890e:	9a01      	ldr	r2, [sp, #4]
 8018910:	eba8 0202 	sub.w	r2, r8, r2
 8018914:	4592      	cmp	sl, r2
 8018916:	ddb7      	ble.n	8018888 <_dtoa_r+0xa30>
 8018918:	4629      	mov	r1, r5
 801891a:	2300      	movs	r3, #0
 801891c:	220a      	movs	r2, #10
 801891e:	4630      	mov	r0, r6
 8018920:	f000 fe28 	bl	8019574 <__multadd>
 8018924:	4605      	mov	r5, r0
 8018926:	e7ea      	b.n	80188fe <_dtoa_r+0xaa6>
 8018928:	0801b958 	.word	0x0801b958
 801892c:	0801b75c 	.word	0x0801b75c
 8018930:	0801b8d9 	.word	0x0801b8d9

08018934 <__sflush_r>:
 8018934:	898a      	ldrh	r2, [r1, #12]
 8018936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801893a:	4605      	mov	r5, r0
 801893c:	0710      	lsls	r0, r2, #28
 801893e:	460c      	mov	r4, r1
 8018940:	d458      	bmi.n	80189f4 <__sflush_r+0xc0>
 8018942:	684b      	ldr	r3, [r1, #4]
 8018944:	2b00      	cmp	r3, #0
 8018946:	dc05      	bgt.n	8018954 <__sflush_r+0x20>
 8018948:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801894a:	2b00      	cmp	r3, #0
 801894c:	dc02      	bgt.n	8018954 <__sflush_r+0x20>
 801894e:	2000      	movs	r0, #0
 8018950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018954:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018956:	2e00      	cmp	r6, #0
 8018958:	d0f9      	beq.n	801894e <__sflush_r+0x1a>
 801895a:	2300      	movs	r3, #0
 801895c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018960:	682f      	ldr	r7, [r5, #0]
 8018962:	602b      	str	r3, [r5, #0]
 8018964:	d032      	beq.n	80189cc <__sflush_r+0x98>
 8018966:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018968:	89a3      	ldrh	r3, [r4, #12]
 801896a:	075a      	lsls	r2, r3, #29
 801896c:	d505      	bpl.n	801897a <__sflush_r+0x46>
 801896e:	6863      	ldr	r3, [r4, #4]
 8018970:	1ac0      	subs	r0, r0, r3
 8018972:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018974:	b10b      	cbz	r3, 801897a <__sflush_r+0x46>
 8018976:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018978:	1ac0      	subs	r0, r0, r3
 801897a:	2300      	movs	r3, #0
 801897c:	4602      	mov	r2, r0
 801897e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018980:	6a21      	ldr	r1, [r4, #32]
 8018982:	4628      	mov	r0, r5
 8018984:	47b0      	blx	r6
 8018986:	1c43      	adds	r3, r0, #1
 8018988:	89a3      	ldrh	r3, [r4, #12]
 801898a:	d106      	bne.n	801899a <__sflush_r+0x66>
 801898c:	6829      	ldr	r1, [r5, #0]
 801898e:	291d      	cmp	r1, #29
 8018990:	d82c      	bhi.n	80189ec <__sflush_r+0xb8>
 8018992:	4a2a      	ldr	r2, [pc, #168]	; (8018a3c <__sflush_r+0x108>)
 8018994:	40ca      	lsrs	r2, r1
 8018996:	07d6      	lsls	r6, r2, #31
 8018998:	d528      	bpl.n	80189ec <__sflush_r+0xb8>
 801899a:	2200      	movs	r2, #0
 801899c:	6062      	str	r2, [r4, #4]
 801899e:	04d9      	lsls	r1, r3, #19
 80189a0:	6922      	ldr	r2, [r4, #16]
 80189a2:	6022      	str	r2, [r4, #0]
 80189a4:	d504      	bpl.n	80189b0 <__sflush_r+0x7c>
 80189a6:	1c42      	adds	r2, r0, #1
 80189a8:	d101      	bne.n	80189ae <__sflush_r+0x7a>
 80189aa:	682b      	ldr	r3, [r5, #0]
 80189ac:	b903      	cbnz	r3, 80189b0 <__sflush_r+0x7c>
 80189ae:	6560      	str	r0, [r4, #84]	; 0x54
 80189b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80189b2:	602f      	str	r7, [r5, #0]
 80189b4:	2900      	cmp	r1, #0
 80189b6:	d0ca      	beq.n	801894e <__sflush_r+0x1a>
 80189b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80189bc:	4299      	cmp	r1, r3
 80189be:	d002      	beq.n	80189c6 <__sflush_r+0x92>
 80189c0:	4628      	mov	r0, r5
 80189c2:	f7fd fa81 	bl	8015ec8 <_free_r>
 80189c6:	2000      	movs	r0, #0
 80189c8:	6360      	str	r0, [r4, #52]	; 0x34
 80189ca:	e7c1      	b.n	8018950 <__sflush_r+0x1c>
 80189cc:	6a21      	ldr	r1, [r4, #32]
 80189ce:	2301      	movs	r3, #1
 80189d0:	4628      	mov	r0, r5
 80189d2:	47b0      	blx	r6
 80189d4:	1c41      	adds	r1, r0, #1
 80189d6:	d1c7      	bne.n	8018968 <__sflush_r+0x34>
 80189d8:	682b      	ldr	r3, [r5, #0]
 80189da:	2b00      	cmp	r3, #0
 80189dc:	d0c4      	beq.n	8018968 <__sflush_r+0x34>
 80189de:	2b1d      	cmp	r3, #29
 80189e0:	d001      	beq.n	80189e6 <__sflush_r+0xb2>
 80189e2:	2b16      	cmp	r3, #22
 80189e4:	d101      	bne.n	80189ea <__sflush_r+0xb6>
 80189e6:	602f      	str	r7, [r5, #0]
 80189e8:	e7b1      	b.n	801894e <__sflush_r+0x1a>
 80189ea:	89a3      	ldrh	r3, [r4, #12]
 80189ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80189f0:	81a3      	strh	r3, [r4, #12]
 80189f2:	e7ad      	b.n	8018950 <__sflush_r+0x1c>
 80189f4:	690f      	ldr	r7, [r1, #16]
 80189f6:	2f00      	cmp	r7, #0
 80189f8:	d0a9      	beq.n	801894e <__sflush_r+0x1a>
 80189fa:	0793      	lsls	r3, r2, #30
 80189fc:	680e      	ldr	r6, [r1, #0]
 80189fe:	bf08      	it	eq
 8018a00:	694b      	ldreq	r3, [r1, #20]
 8018a02:	600f      	str	r7, [r1, #0]
 8018a04:	bf18      	it	ne
 8018a06:	2300      	movne	r3, #0
 8018a08:	eba6 0807 	sub.w	r8, r6, r7
 8018a0c:	608b      	str	r3, [r1, #8]
 8018a0e:	f1b8 0f00 	cmp.w	r8, #0
 8018a12:	dd9c      	ble.n	801894e <__sflush_r+0x1a>
 8018a14:	6a21      	ldr	r1, [r4, #32]
 8018a16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018a18:	4643      	mov	r3, r8
 8018a1a:	463a      	mov	r2, r7
 8018a1c:	4628      	mov	r0, r5
 8018a1e:	47b0      	blx	r6
 8018a20:	2800      	cmp	r0, #0
 8018a22:	dc06      	bgt.n	8018a32 <__sflush_r+0xfe>
 8018a24:	89a3      	ldrh	r3, [r4, #12]
 8018a26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018a2a:	81a3      	strh	r3, [r4, #12]
 8018a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8018a30:	e78e      	b.n	8018950 <__sflush_r+0x1c>
 8018a32:	4407      	add	r7, r0
 8018a34:	eba8 0800 	sub.w	r8, r8, r0
 8018a38:	e7e9      	b.n	8018a0e <__sflush_r+0xda>
 8018a3a:	bf00      	nop
 8018a3c:	20400001 	.word	0x20400001

08018a40 <_fflush_r>:
 8018a40:	b538      	push	{r3, r4, r5, lr}
 8018a42:	690b      	ldr	r3, [r1, #16]
 8018a44:	4605      	mov	r5, r0
 8018a46:	460c      	mov	r4, r1
 8018a48:	b913      	cbnz	r3, 8018a50 <_fflush_r+0x10>
 8018a4a:	2500      	movs	r5, #0
 8018a4c:	4628      	mov	r0, r5
 8018a4e:	bd38      	pop	{r3, r4, r5, pc}
 8018a50:	b118      	cbz	r0, 8018a5a <_fflush_r+0x1a>
 8018a52:	6983      	ldr	r3, [r0, #24]
 8018a54:	b90b      	cbnz	r3, 8018a5a <_fflush_r+0x1a>
 8018a56:	f000 f887 	bl	8018b68 <__sinit>
 8018a5a:	4b14      	ldr	r3, [pc, #80]	; (8018aac <_fflush_r+0x6c>)
 8018a5c:	429c      	cmp	r4, r3
 8018a5e:	d11b      	bne.n	8018a98 <_fflush_r+0x58>
 8018a60:	686c      	ldr	r4, [r5, #4]
 8018a62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018a66:	2b00      	cmp	r3, #0
 8018a68:	d0ef      	beq.n	8018a4a <_fflush_r+0xa>
 8018a6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018a6c:	07d0      	lsls	r0, r2, #31
 8018a6e:	d404      	bmi.n	8018a7a <_fflush_r+0x3a>
 8018a70:	0599      	lsls	r1, r3, #22
 8018a72:	d402      	bmi.n	8018a7a <_fflush_r+0x3a>
 8018a74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018a76:	f000 fc88 	bl	801938a <__retarget_lock_acquire_recursive>
 8018a7a:	4628      	mov	r0, r5
 8018a7c:	4621      	mov	r1, r4
 8018a7e:	f7ff ff59 	bl	8018934 <__sflush_r>
 8018a82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018a84:	07da      	lsls	r2, r3, #31
 8018a86:	4605      	mov	r5, r0
 8018a88:	d4e0      	bmi.n	8018a4c <_fflush_r+0xc>
 8018a8a:	89a3      	ldrh	r3, [r4, #12]
 8018a8c:	059b      	lsls	r3, r3, #22
 8018a8e:	d4dd      	bmi.n	8018a4c <_fflush_r+0xc>
 8018a90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018a92:	f000 fc7b 	bl	801938c <__retarget_lock_release_recursive>
 8018a96:	e7d9      	b.n	8018a4c <_fflush_r+0xc>
 8018a98:	4b05      	ldr	r3, [pc, #20]	; (8018ab0 <_fflush_r+0x70>)
 8018a9a:	429c      	cmp	r4, r3
 8018a9c:	d101      	bne.n	8018aa2 <_fflush_r+0x62>
 8018a9e:	68ac      	ldr	r4, [r5, #8]
 8018aa0:	e7df      	b.n	8018a62 <_fflush_r+0x22>
 8018aa2:	4b04      	ldr	r3, [pc, #16]	; (8018ab4 <_fflush_r+0x74>)
 8018aa4:	429c      	cmp	r4, r3
 8018aa6:	bf08      	it	eq
 8018aa8:	68ec      	ldreq	r4, [r5, #12]
 8018aaa:	e7da      	b.n	8018a62 <_fflush_r+0x22>
 8018aac:	0801b98c 	.word	0x0801b98c
 8018ab0:	0801b9ac 	.word	0x0801b9ac
 8018ab4:	0801b96c 	.word	0x0801b96c

08018ab8 <std>:
 8018ab8:	2300      	movs	r3, #0
 8018aba:	b510      	push	{r4, lr}
 8018abc:	4604      	mov	r4, r0
 8018abe:	e9c0 3300 	strd	r3, r3, [r0]
 8018ac2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018ac6:	6083      	str	r3, [r0, #8]
 8018ac8:	8181      	strh	r1, [r0, #12]
 8018aca:	6643      	str	r3, [r0, #100]	; 0x64
 8018acc:	81c2      	strh	r2, [r0, #14]
 8018ace:	6183      	str	r3, [r0, #24]
 8018ad0:	4619      	mov	r1, r3
 8018ad2:	2208      	movs	r2, #8
 8018ad4:	305c      	adds	r0, #92	; 0x5c
 8018ad6:	f7fd f9ef 	bl	8015eb8 <memset>
 8018ada:	4b05      	ldr	r3, [pc, #20]	; (8018af0 <std+0x38>)
 8018adc:	6263      	str	r3, [r4, #36]	; 0x24
 8018ade:	4b05      	ldr	r3, [pc, #20]	; (8018af4 <std+0x3c>)
 8018ae0:	62a3      	str	r3, [r4, #40]	; 0x28
 8018ae2:	4b05      	ldr	r3, [pc, #20]	; (8018af8 <std+0x40>)
 8018ae4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018ae6:	4b05      	ldr	r3, [pc, #20]	; (8018afc <std+0x44>)
 8018ae8:	6224      	str	r4, [r4, #32]
 8018aea:	6323      	str	r3, [r4, #48]	; 0x30
 8018aec:	bd10      	pop	{r4, pc}
 8018aee:	bf00      	nop
 8018af0:	0801a469 	.word	0x0801a469
 8018af4:	0801a48b 	.word	0x0801a48b
 8018af8:	0801a4c3 	.word	0x0801a4c3
 8018afc:	0801a4e7 	.word	0x0801a4e7

08018b00 <_cleanup_r>:
 8018b00:	4901      	ldr	r1, [pc, #4]	; (8018b08 <_cleanup_r+0x8>)
 8018b02:	f000 b8af 	b.w	8018c64 <_fwalk_reent>
 8018b06:	bf00      	nop
 8018b08:	08018a41 	.word	0x08018a41

08018b0c <__sfmoreglue>:
 8018b0c:	b570      	push	{r4, r5, r6, lr}
 8018b0e:	2268      	movs	r2, #104	; 0x68
 8018b10:	1e4d      	subs	r5, r1, #1
 8018b12:	4355      	muls	r5, r2
 8018b14:	460e      	mov	r6, r1
 8018b16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018b1a:	f7fd fa41 	bl	8015fa0 <_malloc_r>
 8018b1e:	4604      	mov	r4, r0
 8018b20:	b140      	cbz	r0, 8018b34 <__sfmoreglue+0x28>
 8018b22:	2100      	movs	r1, #0
 8018b24:	e9c0 1600 	strd	r1, r6, [r0]
 8018b28:	300c      	adds	r0, #12
 8018b2a:	60a0      	str	r0, [r4, #8]
 8018b2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018b30:	f7fd f9c2 	bl	8015eb8 <memset>
 8018b34:	4620      	mov	r0, r4
 8018b36:	bd70      	pop	{r4, r5, r6, pc}

08018b38 <__sfp_lock_acquire>:
 8018b38:	4801      	ldr	r0, [pc, #4]	; (8018b40 <__sfp_lock_acquire+0x8>)
 8018b3a:	f000 bc26 	b.w	801938a <__retarget_lock_acquire_recursive>
 8018b3e:	bf00      	nop
 8018b40:	200061b9 	.word	0x200061b9

08018b44 <__sfp_lock_release>:
 8018b44:	4801      	ldr	r0, [pc, #4]	; (8018b4c <__sfp_lock_release+0x8>)
 8018b46:	f000 bc21 	b.w	801938c <__retarget_lock_release_recursive>
 8018b4a:	bf00      	nop
 8018b4c:	200061b9 	.word	0x200061b9

08018b50 <__sinit_lock_acquire>:
 8018b50:	4801      	ldr	r0, [pc, #4]	; (8018b58 <__sinit_lock_acquire+0x8>)
 8018b52:	f000 bc1a 	b.w	801938a <__retarget_lock_acquire_recursive>
 8018b56:	bf00      	nop
 8018b58:	200061ba 	.word	0x200061ba

08018b5c <__sinit_lock_release>:
 8018b5c:	4801      	ldr	r0, [pc, #4]	; (8018b64 <__sinit_lock_release+0x8>)
 8018b5e:	f000 bc15 	b.w	801938c <__retarget_lock_release_recursive>
 8018b62:	bf00      	nop
 8018b64:	200061ba 	.word	0x200061ba

08018b68 <__sinit>:
 8018b68:	b510      	push	{r4, lr}
 8018b6a:	4604      	mov	r4, r0
 8018b6c:	f7ff fff0 	bl	8018b50 <__sinit_lock_acquire>
 8018b70:	69a3      	ldr	r3, [r4, #24]
 8018b72:	b11b      	cbz	r3, 8018b7c <__sinit+0x14>
 8018b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018b78:	f7ff bff0 	b.w	8018b5c <__sinit_lock_release>
 8018b7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8018b80:	6523      	str	r3, [r4, #80]	; 0x50
 8018b82:	4b13      	ldr	r3, [pc, #76]	; (8018bd0 <__sinit+0x68>)
 8018b84:	4a13      	ldr	r2, [pc, #76]	; (8018bd4 <__sinit+0x6c>)
 8018b86:	681b      	ldr	r3, [r3, #0]
 8018b88:	62a2      	str	r2, [r4, #40]	; 0x28
 8018b8a:	42a3      	cmp	r3, r4
 8018b8c:	bf04      	itt	eq
 8018b8e:	2301      	moveq	r3, #1
 8018b90:	61a3      	streq	r3, [r4, #24]
 8018b92:	4620      	mov	r0, r4
 8018b94:	f000 f820 	bl	8018bd8 <__sfp>
 8018b98:	6060      	str	r0, [r4, #4]
 8018b9a:	4620      	mov	r0, r4
 8018b9c:	f000 f81c 	bl	8018bd8 <__sfp>
 8018ba0:	60a0      	str	r0, [r4, #8]
 8018ba2:	4620      	mov	r0, r4
 8018ba4:	f000 f818 	bl	8018bd8 <__sfp>
 8018ba8:	2200      	movs	r2, #0
 8018baa:	60e0      	str	r0, [r4, #12]
 8018bac:	2104      	movs	r1, #4
 8018bae:	6860      	ldr	r0, [r4, #4]
 8018bb0:	f7ff ff82 	bl	8018ab8 <std>
 8018bb4:	68a0      	ldr	r0, [r4, #8]
 8018bb6:	2201      	movs	r2, #1
 8018bb8:	2109      	movs	r1, #9
 8018bba:	f7ff ff7d 	bl	8018ab8 <std>
 8018bbe:	68e0      	ldr	r0, [r4, #12]
 8018bc0:	2202      	movs	r2, #2
 8018bc2:	2112      	movs	r1, #18
 8018bc4:	f7ff ff78 	bl	8018ab8 <std>
 8018bc8:	2301      	movs	r3, #1
 8018bca:	61a3      	str	r3, [r4, #24]
 8018bcc:	e7d2      	b.n	8018b74 <__sinit+0xc>
 8018bce:	bf00      	nop
 8018bd0:	0801b748 	.word	0x0801b748
 8018bd4:	08018b01 	.word	0x08018b01

08018bd8 <__sfp>:
 8018bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018bda:	4607      	mov	r7, r0
 8018bdc:	f7ff ffac 	bl	8018b38 <__sfp_lock_acquire>
 8018be0:	4b1e      	ldr	r3, [pc, #120]	; (8018c5c <__sfp+0x84>)
 8018be2:	681e      	ldr	r6, [r3, #0]
 8018be4:	69b3      	ldr	r3, [r6, #24]
 8018be6:	b913      	cbnz	r3, 8018bee <__sfp+0x16>
 8018be8:	4630      	mov	r0, r6
 8018bea:	f7ff ffbd 	bl	8018b68 <__sinit>
 8018bee:	3648      	adds	r6, #72	; 0x48
 8018bf0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018bf4:	3b01      	subs	r3, #1
 8018bf6:	d503      	bpl.n	8018c00 <__sfp+0x28>
 8018bf8:	6833      	ldr	r3, [r6, #0]
 8018bfa:	b30b      	cbz	r3, 8018c40 <__sfp+0x68>
 8018bfc:	6836      	ldr	r6, [r6, #0]
 8018bfe:	e7f7      	b.n	8018bf0 <__sfp+0x18>
 8018c00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018c04:	b9d5      	cbnz	r5, 8018c3c <__sfp+0x64>
 8018c06:	4b16      	ldr	r3, [pc, #88]	; (8018c60 <__sfp+0x88>)
 8018c08:	60e3      	str	r3, [r4, #12]
 8018c0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018c0e:	6665      	str	r5, [r4, #100]	; 0x64
 8018c10:	f000 fbba 	bl	8019388 <__retarget_lock_init_recursive>
 8018c14:	f7ff ff96 	bl	8018b44 <__sfp_lock_release>
 8018c18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8018c1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8018c20:	6025      	str	r5, [r4, #0]
 8018c22:	61a5      	str	r5, [r4, #24]
 8018c24:	2208      	movs	r2, #8
 8018c26:	4629      	mov	r1, r5
 8018c28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018c2c:	f7fd f944 	bl	8015eb8 <memset>
 8018c30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018c34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018c38:	4620      	mov	r0, r4
 8018c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c3c:	3468      	adds	r4, #104	; 0x68
 8018c3e:	e7d9      	b.n	8018bf4 <__sfp+0x1c>
 8018c40:	2104      	movs	r1, #4
 8018c42:	4638      	mov	r0, r7
 8018c44:	f7ff ff62 	bl	8018b0c <__sfmoreglue>
 8018c48:	4604      	mov	r4, r0
 8018c4a:	6030      	str	r0, [r6, #0]
 8018c4c:	2800      	cmp	r0, #0
 8018c4e:	d1d5      	bne.n	8018bfc <__sfp+0x24>
 8018c50:	f7ff ff78 	bl	8018b44 <__sfp_lock_release>
 8018c54:	230c      	movs	r3, #12
 8018c56:	603b      	str	r3, [r7, #0]
 8018c58:	e7ee      	b.n	8018c38 <__sfp+0x60>
 8018c5a:	bf00      	nop
 8018c5c:	0801b748 	.word	0x0801b748
 8018c60:	ffff0001 	.word	0xffff0001

08018c64 <_fwalk_reent>:
 8018c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018c68:	4606      	mov	r6, r0
 8018c6a:	4688      	mov	r8, r1
 8018c6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018c70:	2700      	movs	r7, #0
 8018c72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018c76:	f1b9 0901 	subs.w	r9, r9, #1
 8018c7a:	d505      	bpl.n	8018c88 <_fwalk_reent+0x24>
 8018c7c:	6824      	ldr	r4, [r4, #0]
 8018c7e:	2c00      	cmp	r4, #0
 8018c80:	d1f7      	bne.n	8018c72 <_fwalk_reent+0xe>
 8018c82:	4638      	mov	r0, r7
 8018c84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018c88:	89ab      	ldrh	r3, [r5, #12]
 8018c8a:	2b01      	cmp	r3, #1
 8018c8c:	d907      	bls.n	8018c9e <_fwalk_reent+0x3a>
 8018c8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018c92:	3301      	adds	r3, #1
 8018c94:	d003      	beq.n	8018c9e <_fwalk_reent+0x3a>
 8018c96:	4629      	mov	r1, r5
 8018c98:	4630      	mov	r0, r6
 8018c9a:	47c0      	blx	r8
 8018c9c:	4307      	orrs	r7, r0
 8018c9e:	3568      	adds	r5, #104	; 0x68
 8018ca0:	e7e9      	b.n	8018c76 <_fwalk_reent+0x12>

08018ca2 <rshift>:
 8018ca2:	6903      	ldr	r3, [r0, #16]
 8018ca4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8018ca8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018cac:	ea4f 1261 	mov.w	r2, r1, asr #5
 8018cb0:	f100 0414 	add.w	r4, r0, #20
 8018cb4:	dd45      	ble.n	8018d42 <rshift+0xa0>
 8018cb6:	f011 011f 	ands.w	r1, r1, #31
 8018cba:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8018cbe:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8018cc2:	d10c      	bne.n	8018cde <rshift+0x3c>
 8018cc4:	f100 0710 	add.w	r7, r0, #16
 8018cc8:	4629      	mov	r1, r5
 8018cca:	42b1      	cmp	r1, r6
 8018ccc:	d334      	bcc.n	8018d38 <rshift+0x96>
 8018cce:	1a9b      	subs	r3, r3, r2
 8018cd0:	009b      	lsls	r3, r3, #2
 8018cd2:	1eea      	subs	r2, r5, #3
 8018cd4:	4296      	cmp	r6, r2
 8018cd6:	bf38      	it	cc
 8018cd8:	2300      	movcc	r3, #0
 8018cda:	4423      	add	r3, r4
 8018cdc:	e015      	b.n	8018d0a <rshift+0x68>
 8018cde:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8018ce2:	f1c1 0820 	rsb	r8, r1, #32
 8018ce6:	40cf      	lsrs	r7, r1
 8018ce8:	f105 0e04 	add.w	lr, r5, #4
 8018cec:	46a1      	mov	r9, r4
 8018cee:	4576      	cmp	r6, lr
 8018cf0:	46f4      	mov	ip, lr
 8018cf2:	d815      	bhi.n	8018d20 <rshift+0x7e>
 8018cf4:	1a9a      	subs	r2, r3, r2
 8018cf6:	0092      	lsls	r2, r2, #2
 8018cf8:	3a04      	subs	r2, #4
 8018cfa:	3501      	adds	r5, #1
 8018cfc:	42ae      	cmp	r6, r5
 8018cfe:	bf38      	it	cc
 8018d00:	2200      	movcc	r2, #0
 8018d02:	18a3      	adds	r3, r4, r2
 8018d04:	50a7      	str	r7, [r4, r2]
 8018d06:	b107      	cbz	r7, 8018d0a <rshift+0x68>
 8018d08:	3304      	adds	r3, #4
 8018d0a:	1b1a      	subs	r2, r3, r4
 8018d0c:	42a3      	cmp	r3, r4
 8018d0e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018d12:	bf08      	it	eq
 8018d14:	2300      	moveq	r3, #0
 8018d16:	6102      	str	r2, [r0, #16]
 8018d18:	bf08      	it	eq
 8018d1a:	6143      	streq	r3, [r0, #20]
 8018d1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018d20:	f8dc c000 	ldr.w	ip, [ip]
 8018d24:	fa0c fc08 	lsl.w	ip, ip, r8
 8018d28:	ea4c 0707 	orr.w	r7, ip, r7
 8018d2c:	f849 7b04 	str.w	r7, [r9], #4
 8018d30:	f85e 7b04 	ldr.w	r7, [lr], #4
 8018d34:	40cf      	lsrs	r7, r1
 8018d36:	e7da      	b.n	8018cee <rshift+0x4c>
 8018d38:	f851 cb04 	ldr.w	ip, [r1], #4
 8018d3c:	f847 cf04 	str.w	ip, [r7, #4]!
 8018d40:	e7c3      	b.n	8018cca <rshift+0x28>
 8018d42:	4623      	mov	r3, r4
 8018d44:	e7e1      	b.n	8018d0a <rshift+0x68>

08018d46 <__hexdig_fun>:
 8018d46:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018d4a:	2b09      	cmp	r3, #9
 8018d4c:	d802      	bhi.n	8018d54 <__hexdig_fun+0xe>
 8018d4e:	3820      	subs	r0, #32
 8018d50:	b2c0      	uxtb	r0, r0
 8018d52:	4770      	bx	lr
 8018d54:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8018d58:	2b05      	cmp	r3, #5
 8018d5a:	d801      	bhi.n	8018d60 <__hexdig_fun+0x1a>
 8018d5c:	3847      	subs	r0, #71	; 0x47
 8018d5e:	e7f7      	b.n	8018d50 <__hexdig_fun+0xa>
 8018d60:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8018d64:	2b05      	cmp	r3, #5
 8018d66:	d801      	bhi.n	8018d6c <__hexdig_fun+0x26>
 8018d68:	3827      	subs	r0, #39	; 0x27
 8018d6a:	e7f1      	b.n	8018d50 <__hexdig_fun+0xa>
 8018d6c:	2000      	movs	r0, #0
 8018d6e:	4770      	bx	lr

08018d70 <__gethex>:
 8018d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d74:	ed2d 8b02 	vpush	{d8}
 8018d78:	b089      	sub	sp, #36	; 0x24
 8018d7a:	ee08 0a10 	vmov	s16, r0
 8018d7e:	9304      	str	r3, [sp, #16]
 8018d80:	4bb4      	ldr	r3, [pc, #720]	; (8019054 <__gethex+0x2e4>)
 8018d82:	681b      	ldr	r3, [r3, #0]
 8018d84:	9301      	str	r3, [sp, #4]
 8018d86:	4618      	mov	r0, r3
 8018d88:	468b      	mov	fp, r1
 8018d8a:	4690      	mov	r8, r2
 8018d8c:	f7e7 fa58 	bl	8000240 <strlen>
 8018d90:	9b01      	ldr	r3, [sp, #4]
 8018d92:	f8db 2000 	ldr.w	r2, [fp]
 8018d96:	4403      	add	r3, r0
 8018d98:	4682      	mov	sl, r0
 8018d9a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8018d9e:	9305      	str	r3, [sp, #20]
 8018da0:	1c93      	adds	r3, r2, #2
 8018da2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8018da6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8018daa:	32fe      	adds	r2, #254	; 0xfe
 8018dac:	18d1      	adds	r1, r2, r3
 8018dae:	461f      	mov	r7, r3
 8018db0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018db4:	9100      	str	r1, [sp, #0]
 8018db6:	2830      	cmp	r0, #48	; 0x30
 8018db8:	d0f8      	beq.n	8018dac <__gethex+0x3c>
 8018dba:	f7ff ffc4 	bl	8018d46 <__hexdig_fun>
 8018dbe:	4604      	mov	r4, r0
 8018dc0:	2800      	cmp	r0, #0
 8018dc2:	d13a      	bne.n	8018e3a <__gethex+0xca>
 8018dc4:	9901      	ldr	r1, [sp, #4]
 8018dc6:	4652      	mov	r2, sl
 8018dc8:	4638      	mov	r0, r7
 8018dca:	f001 fb90 	bl	801a4ee <strncmp>
 8018dce:	4605      	mov	r5, r0
 8018dd0:	2800      	cmp	r0, #0
 8018dd2:	d168      	bne.n	8018ea6 <__gethex+0x136>
 8018dd4:	f817 000a 	ldrb.w	r0, [r7, sl]
 8018dd8:	eb07 060a 	add.w	r6, r7, sl
 8018ddc:	f7ff ffb3 	bl	8018d46 <__hexdig_fun>
 8018de0:	2800      	cmp	r0, #0
 8018de2:	d062      	beq.n	8018eaa <__gethex+0x13a>
 8018de4:	4633      	mov	r3, r6
 8018de6:	7818      	ldrb	r0, [r3, #0]
 8018de8:	2830      	cmp	r0, #48	; 0x30
 8018dea:	461f      	mov	r7, r3
 8018dec:	f103 0301 	add.w	r3, r3, #1
 8018df0:	d0f9      	beq.n	8018de6 <__gethex+0x76>
 8018df2:	f7ff ffa8 	bl	8018d46 <__hexdig_fun>
 8018df6:	2301      	movs	r3, #1
 8018df8:	fab0 f480 	clz	r4, r0
 8018dfc:	0964      	lsrs	r4, r4, #5
 8018dfe:	4635      	mov	r5, r6
 8018e00:	9300      	str	r3, [sp, #0]
 8018e02:	463a      	mov	r2, r7
 8018e04:	4616      	mov	r6, r2
 8018e06:	3201      	adds	r2, #1
 8018e08:	7830      	ldrb	r0, [r6, #0]
 8018e0a:	f7ff ff9c 	bl	8018d46 <__hexdig_fun>
 8018e0e:	2800      	cmp	r0, #0
 8018e10:	d1f8      	bne.n	8018e04 <__gethex+0x94>
 8018e12:	9901      	ldr	r1, [sp, #4]
 8018e14:	4652      	mov	r2, sl
 8018e16:	4630      	mov	r0, r6
 8018e18:	f001 fb69 	bl	801a4ee <strncmp>
 8018e1c:	b980      	cbnz	r0, 8018e40 <__gethex+0xd0>
 8018e1e:	b94d      	cbnz	r5, 8018e34 <__gethex+0xc4>
 8018e20:	eb06 050a 	add.w	r5, r6, sl
 8018e24:	462a      	mov	r2, r5
 8018e26:	4616      	mov	r6, r2
 8018e28:	3201      	adds	r2, #1
 8018e2a:	7830      	ldrb	r0, [r6, #0]
 8018e2c:	f7ff ff8b 	bl	8018d46 <__hexdig_fun>
 8018e30:	2800      	cmp	r0, #0
 8018e32:	d1f8      	bne.n	8018e26 <__gethex+0xb6>
 8018e34:	1bad      	subs	r5, r5, r6
 8018e36:	00ad      	lsls	r5, r5, #2
 8018e38:	e004      	b.n	8018e44 <__gethex+0xd4>
 8018e3a:	2400      	movs	r4, #0
 8018e3c:	4625      	mov	r5, r4
 8018e3e:	e7e0      	b.n	8018e02 <__gethex+0x92>
 8018e40:	2d00      	cmp	r5, #0
 8018e42:	d1f7      	bne.n	8018e34 <__gethex+0xc4>
 8018e44:	7833      	ldrb	r3, [r6, #0]
 8018e46:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018e4a:	2b50      	cmp	r3, #80	; 0x50
 8018e4c:	d13b      	bne.n	8018ec6 <__gethex+0x156>
 8018e4e:	7873      	ldrb	r3, [r6, #1]
 8018e50:	2b2b      	cmp	r3, #43	; 0x2b
 8018e52:	d02c      	beq.n	8018eae <__gethex+0x13e>
 8018e54:	2b2d      	cmp	r3, #45	; 0x2d
 8018e56:	d02e      	beq.n	8018eb6 <__gethex+0x146>
 8018e58:	1c71      	adds	r1, r6, #1
 8018e5a:	f04f 0900 	mov.w	r9, #0
 8018e5e:	7808      	ldrb	r0, [r1, #0]
 8018e60:	f7ff ff71 	bl	8018d46 <__hexdig_fun>
 8018e64:	1e43      	subs	r3, r0, #1
 8018e66:	b2db      	uxtb	r3, r3
 8018e68:	2b18      	cmp	r3, #24
 8018e6a:	d82c      	bhi.n	8018ec6 <__gethex+0x156>
 8018e6c:	f1a0 0210 	sub.w	r2, r0, #16
 8018e70:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018e74:	f7ff ff67 	bl	8018d46 <__hexdig_fun>
 8018e78:	1e43      	subs	r3, r0, #1
 8018e7a:	b2db      	uxtb	r3, r3
 8018e7c:	2b18      	cmp	r3, #24
 8018e7e:	d91d      	bls.n	8018ebc <__gethex+0x14c>
 8018e80:	f1b9 0f00 	cmp.w	r9, #0
 8018e84:	d000      	beq.n	8018e88 <__gethex+0x118>
 8018e86:	4252      	negs	r2, r2
 8018e88:	4415      	add	r5, r2
 8018e8a:	f8cb 1000 	str.w	r1, [fp]
 8018e8e:	b1e4      	cbz	r4, 8018eca <__gethex+0x15a>
 8018e90:	9b00      	ldr	r3, [sp, #0]
 8018e92:	2b00      	cmp	r3, #0
 8018e94:	bf14      	ite	ne
 8018e96:	2700      	movne	r7, #0
 8018e98:	2706      	moveq	r7, #6
 8018e9a:	4638      	mov	r0, r7
 8018e9c:	b009      	add	sp, #36	; 0x24
 8018e9e:	ecbd 8b02 	vpop	{d8}
 8018ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ea6:	463e      	mov	r6, r7
 8018ea8:	4625      	mov	r5, r4
 8018eaa:	2401      	movs	r4, #1
 8018eac:	e7ca      	b.n	8018e44 <__gethex+0xd4>
 8018eae:	f04f 0900 	mov.w	r9, #0
 8018eb2:	1cb1      	adds	r1, r6, #2
 8018eb4:	e7d3      	b.n	8018e5e <__gethex+0xee>
 8018eb6:	f04f 0901 	mov.w	r9, #1
 8018eba:	e7fa      	b.n	8018eb2 <__gethex+0x142>
 8018ebc:	230a      	movs	r3, #10
 8018ebe:	fb03 0202 	mla	r2, r3, r2, r0
 8018ec2:	3a10      	subs	r2, #16
 8018ec4:	e7d4      	b.n	8018e70 <__gethex+0x100>
 8018ec6:	4631      	mov	r1, r6
 8018ec8:	e7df      	b.n	8018e8a <__gethex+0x11a>
 8018eca:	1bf3      	subs	r3, r6, r7
 8018ecc:	3b01      	subs	r3, #1
 8018ece:	4621      	mov	r1, r4
 8018ed0:	2b07      	cmp	r3, #7
 8018ed2:	dc0b      	bgt.n	8018eec <__gethex+0x17c>
 8018ed4:	ee18 0a10 	vmov	r0, s16
 8018ed8:	f000 faea 	bl	80194b0 <_Balloc>
 8018edc:	4604      	mov	r4, r0
 8018ede:	b940      	cbnz	r0, 8018ef2 <__gethex+0x182>
 8018ee0:	4b5d      	ldr	r3, [pc, #372]	; (8019058 <__gethex+0x2e8>)
 8018ee2:	4602      	mov	r2, r0
 8018ee4:	21de      	movs	r1, #222	; 0xde
 8018ee6:	485d      	ldr	r0, [pc, #372]	; (801905c <__gethex+0x2ec>)
 8018ee8:	f001 fb34 	bl	801a554 <__assert_func>
 8018eec:	3101      	adds	r1, #1
 8018eee:	105b      	asrs	r3, r3, #1
 8018ef0:	e7ee      	b.n	8018ed0 <__gethex+0x160>
 8018ef2:	f100 0914 	add.w	r9, r0, #20
 8018ef6:	f04f 0b00 	mov.w	fp, #0
 8018efa:	f1ca 0301 	rsb	r3, sl, #1
 8018efe:	f8cd 9008 	str.w	r9, [sp, #8]
 8018f02:	f8cd b000 	str.w	fp, [sp]
 8018f06:	9306      	str	r3, [sp, #24]
 8018f08:	42b7      	cmp	r7, r6
 8018f0a:	d340      	bcc.n	8018f8e <__gethex+0x21e>
 8018f0c:	9802      	ldr	r0, [sp, #8]
 8018f0e:	9b00      	ldr	r3, [sp, #0]
 8018f10:	f840 3b04 	str.w	r3, [r0], #4
 8018f14:	eba0 0009 	sub.w	r0, r0, r9
 8018f18:	1080      	asrs	r0, r0, #2
 8018f1a:	0146      	lsls	r6, r0, #5
 8018f1c:	6120      	str	r0, [r4, #16]
 8018f1e:	4618      	mov	r0, r3
 8018f20:	f000 fbb8 	bl	8019694 <__hi0bits>
 8018f24:	1a30      	subs	r0, r6, r0
 8018f26:	f8d8 6000 	ldr.w	r6, [r8]
 8018f2a:	42b0      	cmp	r0, r6
 8018f2c:	dd63      	ble.n	8018ff6 <__gethex+0x286>
 8018f2e:	1b87      	subs	r7, r0, r6
 8018f30:	4639      	mov	r1, r7
 8018f32:	4620      	mov	r0, r4
 8018f34:	f000 ff59 	bl	8019dea <__any_on>
 8018f38:	4682      	mov	sl, r0
 8018f3a:	b1a8      	cbz	r0, 8018f68 <__gethex+0x1f8>
 8018f3c:	1e7b      	subs	r3, r7, #1
 8018f3e:	1159      	asrs	r1, r3, #5
 8018f40:	f003 021f 	and.w	r2, r3, #31
 8018f44:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8018f48:	f04f 0a01 	mov.w	sl, #1
 8018f4c:	fa0a f202 	lsl.w	r2, sl, r2
 8018f50:	420a      	tst	r2, r1
 8018f52:	d009      	beq.n	8018f68 <__gethex+0x1f8>
 8018f54:	4553      	cmp	r3, sl
 8018f56:	dd05      	ble.n	8018f64 <__gethex+0x1f4>
 8018f58:	1eb9      	subs	r1, r7, #2
 8018f5a:	4620      	mov	r0, r4
 8018f5c:	f000 ff45 	bl	8019dea <__any_on>
 8018f60:	2800      	cmp	r0, #0
 8018f62:	d145      	bne.n	8018ff0 <__gethex+0x280>
 8018f64:	f04f 0a02 	mov.w	sl, #2
 8018f68:	4639      	mov	r1, r7
 8018f6a:	4620      	mov	r0, r4
 8018f6c:	f7ff fe99 	bl	8018ca2 <rshift>
 8018f70:	443d      	add	r5, r7
 8018f72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018f76:	42ab      	cmp	r3, r5
 8018f78:	da4c      	bge.n	8019014 <__gethex+0x2a4>
 8018f7a:	ee18 0a10 	vmov	r0, s16
 8018f7e:	4621      	mov	r1, r4
 8018f80:	f000 fad6 	bl	8019530 <_Bfree>
 8018f84:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018f86:	2300      	movs	r3, #0
 8018f88:	6013      	str	r3, [r2, #0]
 8018f8a:	27a3      	movs	r7, #163	; 0xa3
 8018f8c:	e785      	b.n	8018e9a <__gethex+0x12a>
 8018f8e:	1e73      	subs	r3, r6, #1
 8018f90:	9a05      	ldr	r2, [sp, #20]
 8018f92:	9303      	str	r3, [sp, #12]
 8018f94:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018f98:	4293      	cmp	r3, r2
 8018f9a:	d019      	beq.n	8018fd0 <__gethex+0x260>
 8018f9c:	f1bb 0f20 	cmp.w	fp, #32
 8018fa0:	d107      	bne.n	8018fb2 <__gethex+0x242>
 8018fa2:	9b02      	ldr	r3, [sp, #8]
 8018fa4:	9a00      	ldr	r2, [sp, #0]
 8018fa6:	f843 2b04 	str.w	r2, [r3], #4
 8018faa:	9302      	str	r3, [sp, #8]
 8018fac:	2300      	movs	r3, #0
 8018fae:	9300      	str	r3, [sp, #0]
 8018fb0:	469b      	mov	fp, r3
 8018fb2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8018fb6:	f7ff fec6 	bl	8018d46 <__hexdig_fun>
 8018fba:	9b00      	ldr	r3, [sp, #0]
 8018fbc:	f000 000f 	and.w	r0, r0, #15
 8018fc0:	fa00 f00b 	lsl.w	r0, r0, fp
 8018fc4:	4303      	orrs	r3, r0
 8018fc6:	9300      	str	r3, [sp, #0]
 8018fc8:	f10b 0b04 	add.w	fp, fp, #4
 8018fcc:	9b03      	ldr	r3, [sp, #12]
 8018fce:	e00d      	b.n	8018fec <__gethex+0x27c>
 8018fd0:	9b03      	ldr	r3, [sp, #12]
 8018fd2:	9a06      	ldr	r2, [sp, #24]
 8018fd4:	4413      	add	r3, r2
 8018fd6:	42bb      	cmp	r3, r7
 8018fd8:	d3e0      	bcc.n	8018f9c <__gethex+0x22c>
 8018fda:	4618      	mov	r0, r3
 8018fdc:	9901      	ldr	r1, [sp, #4]
 8018fde:	9307      	str	r3, [sp, #28]
 8018fe0:	4652      	mov	r2, sl
 8018fe2:	f001 fa84 	bl	801a4ee <strncmp>
 8018fe6:	9b07      	ldr	r3, [sp, #28]
 8018fe8:	2800      	cmp	r0, #0
 8018fea:	d1d7      	bne.n	8018f9c <__gethex+0x22c>
 8018fec:	461e      	mov	r6, r3
 8018fee:	e78b      	b.n	8018f08 <__gethex+0x198>
 8018ff0:	f04f 0a03 	mov.w	sl, #3
 8018ff4:	e7b8      	b.n	8018f68 <__gethex+0x1f8>
 8018ff6:	da0a      	bge.n	801900e <__gethex+0x29e>
 8018ff8:	1a37      	subs	r7, r6, r0
 8018ffa:	4621      	mov	r1, r4
 8018ffc:	ee18 0a10 	vmov	r0, s16
 8019000:	463a      	mov	r2, r7
 8019002:	f000 fcb1 	bl	8019968 <__lshift>
 8019006:	1bed      	subs	r5, r5, r7
 8019008:	4604      	mov	r4, r0
 801900a:	f100 0914 	add.w	r9, r0, #20
 801900e:	f04f 0a00 	mov.w	sl, #0
 8019012:	e7ae      	b.n	8018f72 <__gethex+0x202>
 8019014:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8019018:	42a8      	cmp	r0, r5
 801901a:	dd72      	ble.n	8019102 <__gethex+0x392>
 801901c:	1b45      	subs	r5, r0, r5
 801901e:	42ae      	cmp	r6, r5
 8019020:	dc36      	bgt.n	8019090 <__gethex+0x320>
 8019022:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019026:	2b02      	cmp	r3, #2
 8019028:	d02a      	beq.n	8019080 <__gethex+0x310>
 801902a:	2b03      	cmp	r3, #3
 801902c:	d02c      	beq.n	8019088 <__gethex+0x318>
 801902e:	2b01      	cmp	r3, #1
 8019030:	d11c      	bne.n	801906c <__gethex+0x2fc>
 8019032:	42ae      	cmp	r6, r5
 8019034:	d11a      	bne.n	801906c <__gethex+0x2fc>
 8019036:	2e01      	cmp	r6, #1
 8019038:	d112      	bne.n	8019060 <__gethex+0x2f0>
 801903a:	9a04      	ldr	r2, [sp, #16]
 801903c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8019040:	6013      	str	r3, [r2, #0]
 8019042:	2301      	movs	r3, #1
 8019044:	6123      	str	r3, [r4, #16]
 8019046:	f8c9 3000 	str.w	r3, [r9]
 801904a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801904c:	2762      	movs	r7, #98	; 0x62
 801904e:	601c      	str	r4, [r3, #0]
 8019050:	e723      	b.n	8018e9a <__gethex+0x12a>
 8019052:	bf00      	nop
 8019054:	0801ba34 	.word	0x0801ba34
 8019058:	0801b958 	.word	0x0801b958
 801905c:	0801b9cc 	.word	0x0801b9cc
 8019060:	1e71      	subs	r1, r6, #1
 8019062:	4620      	mov	r0, r4
 8019064:	f000 fec1 	bl	8019dea <__any_on>
 8019068:	2800      	cmp	r0, #0
 801906a:	d1e6      	bne.n	801903a <__gethex+0x2ca>
 801906c:	ee18 0a10 	vmov	r0, s16
 8019070:	4621      	mov	r1, r4
 8019072:	f000 fa5d 	bl	8019530 <_Bfree>
 8019076:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019078:	2300      	movs	r3, #0
 801907a:	6013      	str	r3, [r2, #0]
 801907c:	2750      	movs	r7, #80	; 0x50
 801907e:	e70c      	b.n	8018e9a <__gethex+0x12a>
 8019080:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019082:	2b00      	cmp	r3, #0
 8019084:	d1f2      	bne.n	801906c <__gethex+0x2fc>
 8019086:	e7d8      	b.n	801903a <__gethex+0x2ca>
 8019088:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801908a:	2b00      	cmp	r3, #0
 801908c:	d1d5      	bne.n	801903a <__gethex+0x2ca>
 801908e:	e7ed      	b.n	801906c <__gethex+0x2fc>
 8019090:	1e6f      	subs	r7, r5, #1
 8019092:	f1ba 0f00 	cmp.w	sl, #0
 8019096:	d131      	bne.n	80190fc <__gethex+0x38c>
 8019098:	b127      	cbz	r7, 80190a4 <__gethex+0x334>
 801909a:	4639      	mov	r1, r7
 801909c:	4620      	mov	r0, r4
 801909e:	f000 fea4 	bl	8019dea <__any_on>
 80190a2:	4682      	mov	sl, r0
 80190a4:	117b      	asrs	r3, r7, #5
 80190a6:	2101      	movs	r1, #1
 80190a8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80190ac:	f007 071f 	and.w	r7, r7, #31
 80190b0:	fa01 f707 	lsl.w	r7, r1, r7
 80190b4:	421f      	tst	r7, r3
 80190b6:	4629      	mov	r1, r5
 80190b8:	4620      	mov	r0, r4
 80190ba:	bf18      	it	ne
 80190bc:	f04a 0a02 	orrne.w	sl, sl, #2
 80190c0:	1b76      	subs	r6, r6, r5
 80190c2:	f7ff fdee 	bl	8018ca2 <rshift>
 80190c6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80190ca:	2702      	movs	r7, #2
 80190cc:	f1ba 0f00 	cmp.w	sl, #0
 80190d0:	d048      	beq.n	8019164 <__gethex+0x3f4>
 80190d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80190d6:	2b02      	cmp	r3, #2
 80190d8:	d015      	beq.n	8019106 <__gethex+0x396>
 80190da:	2b03      	cmp	r3, #3
 80190dc:	d017      	beq.n	801910e <__gethex+0x39e>
 80190de:	2b01      	cmp	r3, #1
 80190e0:	d109      	bne.n	80190f6 <__gethex+0x386>
 80190e2:	f01a 0f02 	tst.w	sl, #2
 80190e6:	d006      	beq.n	80190f6 <__gethex+0x386>
 80190e8:	f8d9 0000 	ldr.w	r0, [r9]
 80190ec:	ea4a 0a00 	orr.w	sl, sl, r0
 80190f0:	f01a 0f01 	tst.w	sl, #1
 80190f4:	d10e      	bne.n	8019114 <__gethex+0x3a4>
 80190f6:	f047 0710 	orr.w	r7, r7, #16
 80190fa:	e033      	b.n	8019164 <__gethex+0x3f4>
 80190fc:	f04f 0a01 	mov.w	sl, #1
 8019100:	e7d0      	b.n	80190a4 <__gethex+0x334>
 8019102:	2701      	movs	r7, #1
 8019104:	e7e2      	b.n	80190cc <__gethex+0x35c>
 8019106:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019108:	f1c3 0301 	rsb	r3, r3, #1
 801910c:	9315      	str	r3, [sp, #84]	; 0x54
 801910e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019110:	2b00      	cmp	r3, #0
 8019112:	d0f0      	beq.n	80190f6 <__gethex+0x386>
 8019114:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8019118:	f104 0314 	add.w	r3, r4, #20
 801911c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8019120:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8019124:	f04f 0c00 	mov.w	ip, #0
 8019128:	4618      	mov	r0, r3
 801912a:	f853 2b04 	ldr.w	r2, [r3], #4
 801912e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8019132:	d01c      	beq.n	801916e <__gethex+0x3fe>
 8019134:	3201      	adds	r2, #1
 8019136:	6002      	str	r2, [r0, #0]
 8019138:	2f02      	cmp	r7, #2
 801913a:	f104 0314 	add.w	r3, r4, #20
 801913e:	d13f      	bne.n	80191c0 <__gethex+0x450>
 8019140:	f8d8 2000 	ldr.w	r2, [r8]
 8019144:	3a01      	subs	r2, #1
 8019146:	42b2      	cmp	r2, r6
 8019148:	d10a      	bne.n	8019160 <__gethex+0x3f0>
 801914a:	1171      	asrs	r1, r6, #5
 801914c:	2201      	movs	r2, #1
 801914e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019152:	f006 061f 	and.w	r6, r6, #31
 8019156:	fa02 f606 	lsl.w	r6, r2, r6
 801915a:	421e      	tst	r6, r3
 801915c:	bf18      	it	ne
 801915e:	4617      	movne	r7, r2
 8019160:	f047 0720 	orr.w	r7, r7, #32
 8019164:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019166:	601c      	str	r4, [r3, #0]
 8019168:	9b04      	ldr	r3, [sp, #16]
 801916a:	601d      	str	r5, [r3, #0]
 801916c:	e695      	b.n	8018e9a <__gethex+0x12a>
 801916e:	4299      	cmp	r1, r3
 8019170:	f843 cc04 	str.w	ip, [r3, #-4]
 8019174:	d8d8      	bhi.n	8019128 <__gethex+0x3b8>
 8019176:	68a3      	ldr	r3, [r4, #8]
 8019178:	459b      	cmp	fp, r3
 801917a:	db19      	blt.n	80191b0 <__gethex+0x440>
 801917c:	6861      	ldr	r1, [r4, #4]
 801917e:	ee18 0a10 	vmov	r0, s16
 8019182:	3101      	adds	r1, #1
 8019184:	f000 f994 	bl	80194b0 <_Balloc>
 8019188:	4681      	mov	r9, r0
 801918a:	b918      	cbnz	r0, 8019194 <__gethex+0x424>
 801918c:	4b1a      	ldr	r3, [pc, #104]	; (80191f8 <__gethex+0x488>)
 801918e:	4602      	mov	r2, r0
 8019190:	2184      	movs	r1, #132	; 0x84
 8019192:	e6a8      	b.n	8018ee6 <__gethex+0x176>
 8019194:	6922      	ldr	r2, [r4, #16]
 8019196:	3202      	adds	r2, #2
 8019198:	f104 010c 	add.w	r1, r4, #12
 801919c:	0092      	lsls	r2, r2, #2
 801919e:	300c      	adds	r0, #12
 80191a0:	f000 f96c 	bl	801947c <memcpy>
 80191a4:	4621      	mov	r1, r4
 80191a6:	ee18 0a10 	vmov	r0, s16
 80191aa:	f000 f9c1 	bl	8019530 <_Bfree>
 80191ae:	464c      	mov	r4, r9
 80191b0:	6923      	ldr	r3, [r4, #16]
 80191b2:	1c5a      	adds	r2, r3, #1
 80191b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80191b8:	6122      	str	r2, [r4, #16]
 80191ba:	2201      	movs	r2, #1
 80191bc:	615a      	str	r2, [r3, #20]
 80191be:	e7bb      	b.n	8019138 <__gethex+0x3c8>
 80191c0:	6922      	ldr	r2, [r4, #16]
 80191c2:	455a      	cmp	r2, fp
 80191c4:	dd0b      	ble.n	80191de <__gethex+0x46e>
 80191c6:	2101      	movs	r1, #1
 80191c8:	4620      	mov	r0, r4
 80191ca:	f7ff fd6a 	bl	8018ca2 <rshift>
 80191ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80191d2:	3501      	adds	r5, #1
 80191d4:	42ab      	cmp	r3, r5
 80191d6:	f6ff aed0 	blt.w	8018f7a <__gethex+0x20a>
 80191da:	2701      	movs	r7, #1
 80191dc:	e7c0      	b.n	8019160 <__gethex+0x3f0>
 80191de:	f016 061f 	ands.w	r6, r6, #31
 80191e2:	d0fa      	beq.n	80191da <__gethex+0x46a>
 80191e4:	4453      	add	r3, sl
 80191e6:	f1c6 0620 	rsb	r6, r6, #32
 80191ea:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80191ee:	f000 fa51 	bl	8019694 <__hi0bits>
 80191f2:	42b0      	cmp	r0, r6
 80191f4:	dbe7      	blt.n	80191c6 <__gethex+0x456>
 80191f6:	e7f0      	b.n	80191da <__gethex+0x46a>
 80191f8:	0801b958 	.word	0x0801b958

080191fc <L_shift>:
 80191fc:	f1c2 0208 	rsb	r2, r2, #8
 8019200:	0092      	lsls	r2, r2, #2
 8019202:	b570      	push	{r4, r5, r6, lr}
 8019204:	f1c2 0620 	rsb	r6, r2, #32
 8019208:	6843      	ldr	r3, [r0, #4]
 801920a:	6804      	ldr	r4, [r0, #0]
 801920c:	fa03 f506 	lsl.w	r5, r3, r6
 8019210:	432c      	orrs	r4, r5
 8019212:	40d3      	lsrs	r3, r2
 8019214:	6004      	str	r4, [r0, #0]
 8019216:	f840 3f04 	str.w	r3, [r0, #4]!
 801921a:	4288      	cmp	r0, r1
 801921c:	d3f4      	bcc.n	8019208 <L_shift+0xc>
 801921e:	bd70      	pop	{r4, r5, r6, pc}

08019220 <__match>:
 8019220:	b530      	push	{r4, r5, lr}
 8019222:	6803      	ldr	r3, [r0, #0]
 8019224:	3301      	adds	r3, #1
 8019226:	f811 4b01 	ldrb.w	r4, [r1], #1
 801922a:	b914      	cbnz	r4, 8019232 <__match+0x12>
 801922c:	6003      	str	r3, [r0, #0]
 801922e:	2001      	movs	r0, #1
 8019230:	bd30      	pop	{r4, r5, pc}
 8019232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019236:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801923a:	2d19      	cmp	r5, #25
 801923c:	bf98      	it	ls
 801923e:	3220      	addls	r2, #32
 8019240:	42a2      	cmp	r2, r4
 8019242:	d0f0      	beq.n	8019226 <__match+0x6>
 8019244:	2000      	movs	r0, #0
 8019246:	e7f3      	b.n	8019230 <__match+0x10>

08019248 <__hexnan>:
 8019248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801924c:	680b      	ldr	r3, [r1, #0]
 801924e:	115e      	asrs	r6, r3, #5
 8019250:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8019254:	f013 031f 	ands.w	r3, r3, #31
 8019258:	b087      	sub	sp, #28
 801925a:	bf18      	it	ne
 801925c:	3604      	addne	r6, #4
 801925e:	2500      	movs	r5, #0
 8019260:	1f37      	subs	r7, r6, #4
 8019262:	4690      	mov	r8, r2
 8019264:	6802      	ldr	r2, [r0, #0]
 8019266:	9301      	str	r3, [sp, #4]
 8019268:	4682      	mov	sl, r0
 801926a:	f846 5c04 	str.w	r5, [r6, #-4]
 801926e:	46b9      	mov	r9, r7
 8019270:	463c      	mov	r4, r7
 8019272:	9502      	str	r5, [sp, #8]
 8019274:	46ab      	mov	fp, r5
 8019276:	7851      	ldrb	r1, [r2, #1]
 8019278:	1c53      	adds	r3, r2, #1
 801927a:	9303      	str	r3, [sp, #12]
 801927c:	b341      	cbz	r1, 80192d0 <__hexnan+0x88>
 801927e:	4608      	mov	r0, r1
 8019280:	9205      	str	r2, [sp, #20]
 8019282:	9104      	str	r1, [sp, #16]
 8019284:	f7ff fd5f 	bl	8018d46 <__hexdig_fun>
 8019288:	2800      	cmp	r0, #0
 801928a:	d14f      	bne.n	801932c <__hexnan+0xe4>
 801928c:	9904      	ldr	r1, [sp, #16]
 801928e:	9a05      	ldr	r2, [sp, #20]
 8019290:	2920      	cmp	r1, #32
 8019292:	d818      	bhi.n	80192c6 <__hexnan+0x7e>
 8019294:	9b02      	ldr	r3, [sp, #8]
 8019296:	459b      	cmp	fp, r3
 8019298:	dd13      	ble.n	80192c2 <__hexnan+0x7a>
 801929a:	454c      	cmp	r4, r9
 801929c:	d206      	bcs.n	80192ac <__hexnan+0x64>
 801929e:	2d07      	cmp	r5, #7
 80192a0:	dc04      	bgt.n	80192ac <__hexnan+0x64>
 80192a2:	462a      	mov	r2, r5
 80192a4:	4649      	mov	r1, r9
 80192a6:	4620      	mov	r0, r4
 80192a8:	f7ff ffa8 	bl	80191fc <L_shift>
 80192ac:	4544      	cmp	r4, r8
 80192ae:	d950      	bls.n	8019352 <__hexnan+0x10a>
 80192b0:	2300      	movs	r3, #0
 80192b2:	f1a4 0904 	sub.w	r9, r4, #4
 80192b6:	f844 3c04 	str.w	r3, [r4, #-4]
 80192ba:	f8cd b008 	str.w	fp, [sp, #8]
 80192be:	464c      	mov	r4, r9
 80192c0:	461d      	mov	r5, r3
 80192c2:	9a03      	ldr	r2, [sp, #12]
 80192c4:	e7d7      	b.n	8019276 <__hexnan+0x2e>
 80192c6:	2929      	cmp	r1, #41	; 0x29
 80192c8:	d156      	bne.n	8019378 <__hexnan+0x130>
 80192ca:	3202      	adds	r2, #2
 80192cc:	f8ca 2000 	str.w	r2, [sl]
 80192d0:	f1bb 0f00 	cmp.w	fp, #0
 80192d4:	d050      	beq.n	8019378 <__hexnan+0x130>
 80192d6:	454c      	cmp	r4, r9
 80192d8:	d206      	bcs.n	80192e8 <__hexnan+0xa0>
 80192da:	2d07      	cmp	r5, #7
 80192dc:	dc04      	bgt.n	80192e8 <__hexnan+0xa0>
 80192de:	462a      	mov	r2, r5
 80192e0:	4649      	mov	r1, r9
 80192e2:	4620      	mov	r0, r4
 80192e4:	f7ff ff8a 	bl	80191fc <L_shift>
 80192e8:	4544      	cmp	r4, r8
 80192ea:	d934      	bls.n	8019356 <__hexnan+0x10e>
 80192ec:	f1a8 0204 	sub.w	r2, r8, #4
 80192f0:	4623      	mov	r3, r4
 80192f2:	f853 1b04 	ldr.w	r1, [r3], #4
 80192f6:	f842 1f04 	str.w	r1, [r2, #4]!
 80192fa:	429f      	cmp	r7, r3
 80192fc:	d2f9      	bcs.n	80192f2 <__hexnan+0xaa>
 80192fe:	1b3b      	subs	r3, r7, r4
 8019300:	f023 0303 	bic.w	r3, r3, #3
 8019304:	3304      	adds	r3, #4
 8019306:	3401      	adds	r4, #1
 8019308:	3e03      	subs	r6, #3
 801930a:	42b4      	cmp	r4, r6
 801930c:	bf88      	it	hi
 801930e:	2304      	movhi	r3, #4
 8019310:	4443      	add	r3, r8
 8019312:	2200      	movs	r2, #0
 8019314:	f843 2b04 	str.w	r2, [r3], #4
 8019318:	429f      	cmp	r7, r3
 801931a:	d2fb      	bcs.n	8019314 <__hexnan+0xcc>
 801931c:	683b      	ldr	r3, [r7, #0]
 801931e:	b91b      	cbnz	r3, 8019328 <__hexnan+0xe0>
 8019320:	4547      	cmp	r7, r8
 8019322:	d127      	bne.n	8019374 <__hexnan+0x12c>
 8019324:	2301      	movs	r3, #1
 8019326:	603b      	str	r3, [r7, #0]
 8019328:	2005      	movs	r0, #5
 801932a:	e026      	b.n	801937a <__hexnan+0x132>
 801932c:	3501      	adds	r5, #1
 801932e:	2d08      	cmp	r5, #8
 8019330:	f10b 0b01 	add.w	fp, fp, #1
 8019334:	dd06      	ble.n	8019344 <__hexnan+0xfc>
 8019336:	4544      	cmp	r4, r8
 8019338:	d9c3      	bls.n	80192c2 <__hexnan+0x7a>
 801933a:	2300      	movs	r3, #0
 801933c:	f844 3c04 	str.w	r3, [r4, #-4]
 8019340:	2501      	movs	r5, #1
 8019342:	3c04      	subs	r4, #4
 8019344:	6822      	ldr	r2, [r4, #0]
 8019346:	f000 000f 	and.w	r0, r0, #15
 801934a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801934e:	6022      	str	r2, [r4, #0]
 8019350:	e7b7      	b.n	80192c2 <__hexnan+0x7a>
 8019352:	2508      	movs	r5, #8
 8019354:	e7b5      	b.n	80192c2 <__hexnan+0x7a>
 8019356:	9b01      	ldr	r3, [sp, #4]
 8019358:	2b00      	cmp	r3, #0
 801935a:	d0df      	beq.n	801931c <__hexnan+0xd4>
 801935c:	f04f 32ff 	mov.w	r2, #4294967295
 8019360:	f1c3 0320 	rsb	r3, r3, #32
 8019364:	fa22 f303 	lsr.w	r3, r2, r3
 8019368:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801936c:	401a      	ands	r2, r3
 801936e:	f846 2c04 	str.w	r2, [r6, #-4]
 8019372:	e7d3      	b.n	801931c <__hexnan+0xd4>
 8019374:	3f04      	subs	r7, #4
 8019376:	e7d1      	b.n	801931c <__hexnan+0xd4>
 8019378:	2004      	movs	r0, #4
 801937a:	b007      	add	sp, #28
 801937c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019380 <_localeconv_r>:
 8019380:	4800      	ldr	r0, [pc, #0]	; (8019384 <_localeconv_r+0x4>)
 8019382:	4770      	bx	lr
 8019384:	20000274 	.word	0x20000274

08019388 <__retarget_lock_init_recursive>:
 8019388:	4770      	bx	lr

0801938a <__retarget_lock_acquire_recursive>:
 801938a:	4770      	bx	lr

0801938c <__retarget_lock_release_recursive>:
 801938c:	4770      	bx	lr

0801938e <__swhatbuf_r>:
 801938e:	b570      	push	{r4, r5, r6, lr}
 8019390:	460e      	mov	r6, r1
 8019392:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019396:	2900      	cmp	r1, #0
 8019398:	b096      	sub	sp, #88	; 0x58
 801939a:	4614      	mov	r4, r2
 801939c:	461d      	mov	r5, r3
 801939e:	da08      	bge.n	80193b2 <__swhatbuf_r+0x24>
 80193a0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80193a4:	2200      	movs	r2, #0
 80193a6:	602a      	str	r2, [r5, #0]
 80193a8:	061a      	lsls	r2, r3, #24
 80193aa:	d410      	bmi.n	80193ce <__swhatbuf_r+0x40>
 80193ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80193b0:	e00e      	b.n	80193d0 <__swhatbuf_r+0x42>
 80193b2:	466a      	mov	r2, sp
 80193b4:	f001 f90e 	bl	801a5d4 <_fstat_r>
 80193b8:	2800      	cmp	r0, #0
 80193ba:	dbf1      	blt.n	80193a0 <__swhatbuf_r+0x12>
 80193bc:	9a01      	ldr	r2, [sp, #4]
 80193be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80193c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80193c6:	425a      	negs	r2, r3
 80193c8:	415a      	adcs	r2, r3
 80193ca:	602a      	str	r2, [r5, #0]
 80193cc:	e7ee      	b.n	80193ac <__swhatbuf_r+0x1e>
 80193ce:	2340      	movs	r3, #64	; 0x40
 80193d0:	2000      	movs	r0, #0
 80193d2:	6023      	str	r3, [r4, #0]
 80193d4:	b016      	add	sp, #88	; 0x58
 80193d6:	bd70      	pop	{r4, r5, r6, pc}

080193d8 <__smakebuf_r>:
 80193d8:	898b      	ldrh	r3, [r1, #12]
 80193da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80193dc:	079d      	lsls	r5, r3, #30
 80193de:	4606      	mov	r6, r0
 80193e0:	460c      	mov	r4, r1
 80193e2:	d507      	bpl.n	80193f4 <__smakebuf_r+0x1c>
 80193e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80193e8:	6023      	str	r3, [r4, #0]
 80193ea:	6123      	str	r3, [r4, #16]
 80193ec:	2301      	movs	r3, #1
 80193ee:	6163      	str	r3, [r4, #20]
 80193f0:	b002      	add	sp, #8
 80193f2:	bd70      	pop	{r4, r5, r6, pc}
 80193f4:	ab01      	add	r3, sp, #4
 80193f6:	466a      	mov	r2, sp
 80193f8:	f7ff ffc9 	bl	801938e <__swhatbuf_r>
 80193fc:	9900      	ldr	r1, [sp, #0]
 80193fe:	4605      	mov	r5, r0
 8019400:	4630      	mov	r0, r6
 8019402:	f7fc fdcd 	bl	8015fa0 <_malloc_r>
 8019406:	b948      	cbnz	r0, 801941c <__smakebuf_r+0x44>
 8019408:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801940c:	059a      	lsls	r2, r3, #22
 801940e:	d4ef      	bmi.n	80193f0 <__smakebuf_r+0x18>
 8019410:	f023 0303 	bic.w	r3, r3, #3
 8019414:	f043 0302 	orr.w	r3, r3, #2
 8019418:	81a3      	strh	r3, [r4, #12]
 801941a:	e7e3      	b.n	80193e4 <__smakebuf_r+0xc>
 801941c:	4b0d      	ldr	r3, [pc, #52]	; (8019454 <__smakebuf_r+0x7c>)
 801941e:	62b3      	str	r3, [r6, #40]	; 0x28
 8019420:	89a3      	ldrh	r3, [r4, #12]
 8019422:	6020      	str	r0, [r4, #0]
 8019424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019428:	81a3      	strh	r3, [r4, #12]
 801942a:	9b00      	ldr	r3, [sp, #0]
 801942c:	6163      	str	r3, [r4, #20]
 801942e:	9b01      	ldr	r3, [sp, #4]
 8019430:	6120      	str	r0, [r4, #16]
 8019432:	b15b      	cbz	r3, 801944c <__smakebuf_r+0x74>
 8019434:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019438:	4630      	mov	r0, r6
 801943a:	f001 f8dd 	bl	801a5f8 <_isatty_r>
 801943e:	b128      	cbz	r0, 801944c <__smakebuf_r+0x74>
 8019440:	89a3      	ldrh	r3, [r4, #12]
 8019442:	f023 0303 	bic.w	r3, r3, #3
 8019446:	f043 0301 	orr.w	r3, r3, #1
 801944a:	81a3      	strh	r3, [r4, #12]
 801944c:	89a0      	ldrh	r0, [r4, #12]
 801944e:	4305      	orrs	r5, r0
 8019450:	81a5      	strh	r5, [r4, #12]
 8019452:	e7cd      	b.n	80193f0 <__smakebuf_r+0x18>
 8019454:	08018b01 	.word	0x08018b01

08019458 <__ascii_mbtowc>:
 8019458:	b082      	sub	sp, #8
 801945a:	b901      	cbnz	r1, 801945e <__ascii_mbtowc+0x6>
 801945c:	a901      	add	r1, sp, #4
 801945e:	b142      	cbz	r2, 8019472 <__ascii_mbtowc+0x1a>
 8019460:	b14b      	cbz	r3, 8019476 <__ascii_mbtowc+0x1e>
 8019462:	7813      	ldrb	r3, [r2, #0]
 8019464:	600b      	str	r3, [r1, #0]
 8019466:	7812      	ldrb	r2, [r2, #0]
 8019468:	1e10      	subs	r0, r2, #0
 801946a:	bf18      	it	ne
 801946c:	2001      	movne	r0, #1
 801946e:	b002      	add	sp, #8
 8019470:	4770      	bx	lr
 8019472:	4610      	mov	r0, r2
 8019474:	e7fb      	b.n	801946e <__ascii_mbtowc+0x16>
 8019476:	f06f 0001 	mvn.w	r0, #1
 801947a:	e7f8      	b.n	801946e <__ascii_mbtowc+0x16>

0801947c <memcpy>:
 801947c:	440a      	add	r2, r1
 801947e:	4291      	cmp	r1, r2
 8019480:	f100 33ff 	add.w	r3, r0, #4294967295
 8019484:	d100      	bne.n	8019488 <memcpy+0xc>
 8019486:	4770      	bx	lr
 8019488:	b510      	push	{r4, lr}
 801948a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801948e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019492:	4291      	cmp	r1, r2
 8019494:	d1f9      	bne.n	801948a <memcpy+0xe>
 8019496:	bd10      	pop	{r4, pc}

08019498 <__malloc_lock>:
 8019498:	4801      	ldr	r0, [pc, #4]	; (80194a0 <__malloc_lock+0x8>)
 801949a:	f7ff bf76 	b.w	801938a <__retarget_lock_acquire_recursive>
 801949e:	bf00      	nop
 80194a0:	200061b8 	.word	0x200061b8

080194a4 <__malloc_unlock>:
 80194a4:	4801      	ldr	r0, [pc, #4]	; (80194ac <__malloc_unlock+0x8>)
 80194a6:	f7ff bf71 	b.w	801938c <__retarget_lock_release_recursive>
 80194aa:	bf00      	nop
 80194ac:	200061b8 	.word	0x200061b8

080194b0 <_Balloc>:
 80194b0:	b570      	push	{r4, r5, r6, lr}
 80194b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80194b4:	4604      	mov	r4, r0
 80194b6:	460d      	mov	r5, r1
 80194b8:	b976      	cbnz	r6, 80194d8 <_Balloc+0x28>
 80194ba:	2010      	movs	r0, #16
 80194bc:	f7fc fcf4 	bl	8015ea8 <malloc>
 80194c0:	4602      	mov	r2, r0
 80194c2:	6260      	str	r0, [r4, #36]	; 0x24
 80194c4:	b920      	cbnz	r0, 80194d0 <_Balloc+0x20>
 80194c6:	4b18      	ldr	r3, [pc, #96]	; (8019528 <_Balloc+0x78>)
 80194c8:	4818      	ldr	r0, [pc, #96]	; (801952c <_Balloc+0x7c>)
 80194ca:	2166      	movs	r1, #102	; 0x66
 80194cc:	f001 f842 	bl	801a554 <__assert_func>
 80194d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80194d4:	6006      	str	r6, [r0, #0]
 80194d6:	60c6      	str	r6, [r0, #12]
 80194d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80194da:	68f3      	ldr	r3, [r6, #12]
 80194dc:	b183      	cbz	r3, 8019500 <_Balloc+0x50>
 80194de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80194e0:	68db      	ldr	r3, [r3, #12]
 80194e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80194e6:	b9b8      	cbnz	r0, 8019518 <_Balloc+0x68>
 80194e8:	2101      	movs	r1, #1
 80194ea:	fa01 f605 	lsl.w	r6, r1, r5
 80194ee:	1d72      	adds	r2, r6, #5
 80194f0:	0092      	lsls	r2, r2, #2
 80194f2:	4620      	mov	r0, r4
 80194f4:	f000 fc9a 	bl	8019e2c <_calloc_r>
 80194f8:	b160      	cbz	r0, 8019514 <_Balloc+0x64>
 80194fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80194fe:	e00e      	b.n	801951e <_Balloc+0x6e>
 8019500:	2221      	movs	r2, #33	; 0x21
 8019502:	2104      	movs	r1, #4
 8019504:	4620      	mov	r0, r4
 8019506:	f000 fc91 	bl	8019e2c <_calloc_r>
 801950a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801950c:	60f0      	str	r0, [r6, #12]
 801950e:	68db      	ldr	r3, [r3, #12]
 8019510:	2b00      	cmp	r3, #0
 8019512:	d1e4      	bne.n	80194de <_Balloc+0x2e>
 8019514:	2000      	movs	r0, #0
 8019516:	bd70      	pop	{r4, r5, r6, pc}
 8019518:	6802      	ldr	r2, [r0, #0]
 801951a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801951e:	2300      	movs	r3, #0
 8019520:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019524:	e7f7      	b.n	8019516 <_Balloc+0x66>
 8019526:	bf00      	nop
 8019528:	0801b8e6 	.word	0x0801b8e6
 801952c:	0801ba48 	.word	0x0801ba48

08019530 <_Bfree>:
 8019530:	b570      	push	{r4, r5, r6, lr}
 8019532:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019534:	4605      	mov	r5, r0
 8019536:	460c      	mov	r4, r1
 8019538:	b976      	cbnz	r6, 8019558 <_Bfree+0x28>
 801953a:	2010      	movs	r0, #16
 801953c:	f7fc fcb4 	bl	8015ea8 <malloc>
 8019540:	4602      	mov	r2, r0
 8019542:	6268      	str	r0, [r5, #36]	; 0x24
 8019544:	b920      	cbnz	r0, 8019550 <_Bfree+0x20>
 8019546:	4b09      	ldr	r3, [pc, #36]	; (801956c <_Bfree+0x3c>)
 8019548:	4809      	ldr	r0, [pc, #36]	; (8019570 <_Bfree+0x40>)
 801954a:	218a      	movs	r1, #138	; 0x8a
 801954c:	f001 f802 	bl	801a554 <__assert_func>
 8019550:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019554:	6006      	str	r6, [r0, #0]
 8019556:	60c6      	str	r6, [r0, #12]
 8019558:	b13c      	cbz	r4, 801956a <_Bfree+0x3a>
 801955a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801955c:	6862      	ldr	r2, [r4, #4]
 801955e:	68db      	ldr	r3, [r3, #12]
 8019560:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019564:	6021      	str	r1, [r4, #0]
 8019566:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801956a:	bd70      	pop	{r4, r5, r6, pc}
 801956c:	0801b8e6 	.word	0x0801b8e6
 8019570:	0801ba48 	.word	0x0801ba48

08019574 <__multadd>:
 8019574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019578:	690d      	ldr	r5, [r1, #16]
 801957a:	4607      	mov	r7, r0
 801957c:	460c      	mov	r4, r1
 801957e:	461e      	mov	r6, r3
 8019580:	f101 0c14 	add.w	ip, r1, #20
 8019584:	2000      	movs	r0, #0
 8019586:	f8dc 3000 	ldr.w	r3, [ip]
 801958a:	b299      	uxth	r1, r3
 801958c:	fb02 6101 	mla	r1, r2, r1, r6
 8019590:	0c1e      	lsrs	r6, r3, #16
 8019592:	0c0b      	lsrs	r3, r1, #16
 8019594:	fb02 3306 	mla	r3, r2, r6, r3
 8019598:	b289      	uxth	r1, r1
 801959a:	3001      	adds	r0, #1
 801959c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80195a0:	4285      	cmp	r5, r0
 80195a2:	f84c 1b04 	str.w	r1, [ip], #4
 80195a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80195aa:	dcec      	bgt.n	8019586 <__multadd+0x12>
 80195ac:	b30e      	cbz	r6, 80195f2 <__multadd+0x7e>
 80195ae:	68a3      	ldr	r3, [r4, #8]
 80195b0:	42ab      	cmp	r3, r5
 80195b2:	dc19      	bgt.n	80195e8 <__multadd+0x74>
 80195b4:	6861      	ldr	r1, [r4, #4]
 80195b6:	4638      	mov	r0, r7
 80195b8:	3101      	adds	r1, #1
 80195ba:	f7ff ff79 	bl	80194b0 <_Balloc>
 80195be:	4680      	mov	r8, r0
 80195c0:	b928      	cbnz	r0, 80195ce <__multadd+0x5a>
 80195c2:	4602      	mov	r2, r0
 80195c4:	4b0c      	ldr	r3, [pc, #48]	; (80195f8 <__multadd+0x84>)
 80195c6:	480d      	ldr	r0, [pc, #52]	; (80195fc <__multadd+0x88>)
 80195c8:	21b5      	movs	r1, #181	; 0xb5
 80195ca:	f000 ffc3 	bl	801a554 <__assert_func>
 80195ce:	6922      	ldr	r2, [r4, #16]
 80195d0:	3202      	adds	r2, #2
 80195d2:	f104 010c 	add.w	r1, r4, #12
 80195d6:	0092      	lsls	r2, r2, #2
 80195d8:	300c      	adds	r0, #12
 80195da:	f7ff ff4f 	bl	801947c <memcpy>
 80195de:	4621      	mov	r1, r4
 80195e0:	4638      	mov	r0, r7
 80195e2:	f7ff ffa5 	bl	8019530 <_Bfree>
 80195e6:	4644      	mov	r4, r8
 80195e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80195ec:	3501      	adds	r5, #1
 80195ee:	615e      	str	r6, [r3, #20]
 80195f0:	6125      	str	r5, [r4, #16]
 80195f2:	4620      	mov	r0, r4
 80195f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80195f8:	0801b958 	.word	0x0801b958
 80195fc:	0801ba48 	.word	0x0801ba48

08019600 <__s2b>:
 8019600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019604:	460c      	mov	r4, r1
 8019606:	4615      	mov	r5, r2
 8019608:	461f      	mov	r7, r3
 801960a:	2209      	movs	r2, #9
 801960c:	3308      	adds	r3, #8
 801960e:	4606      	mov	r6, r0
 8019610:	fb93 f3f2 	sdiv	r3, r3, r2
 8019614:	2100      	movs	r1, #0
 8019616:	2201      	movs	r2, #1
 8019618:	429a      	cmp	r2, r3
 801961a:	db09      	blt.n	8019630 <__s2b+0x30>
 801961c:	4630      	mov	r0, r6
 801961e:	f7ff ff47 	bl	80194b0 <_Balloc>
 8019622:	b940      	cbnz	r0, 8019636 <__s2b+0x36>
 8019624:	4602      	mov	r2, r0
 8019626:	4b19      	ldr	r3, [pc, #100]	; (801968c <__s2b+0x8c>)
 8019628:	4819      	ldr	r0, [pc, #100]	; (8019690 <__s2b+0x90>)
 801962a:	21ce      	movs	r1, #206	; 0xce
 801962c:	f000 ff92 	bl	801a554 <__assert_func>
 8019630:	0052      	lsls	r2, r2, #1
 8019632:	3101      	adds	r1, #1
 8019634:	e7f0      	b.n	8019618 <__s2b+0x18>
 8019636:	9b08      	ldr	r3, [sp, #32]
 8019638:	6143      	str	r3, [r0, #20]
 801963a:	2d09      	cmp	r5, #9
 801963c:	f04f 0301 	mov.w	r3, #1
 8019640:	6103      	str	r3, [r0, #16]
 8019642:	dd16      	ble.n	8019672 <__s2b+0x72>
 8019644:	f104 0909 	add.w	r9, r4, #9
 8019648:	46c8      	mov	r8, r9
 801964a:	442c      	add	r4, r5
 801964c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8019650:	4601      	mov	r1, r0
 8019652:	3b30      	subs	r3, #48	; 0x30
 8019654:	220a      	movs	r2, #10
 8019656:	4630      	mov	r0, r6
 8019658:	f7ff ff8c 	bl	8019574 <__multadd>
 801965c:	45a0      	cmp	r8, r4
 801965e:	d1f5      	bne.n	801964c <__s2b+0x4c>
 8019660:	f1a5 0408 	sub.w	r4, r5, #8
 8019664:	444c      	add	r4, r9
 8019666:	1b2d      	subs	r5, r5, r4
 8019668:	1963      	adds	r3, r4, r5
 801966a:	42bb      	cmp	r3, r7
 801966c:	db04      	blt.n	8019678 <__s2b+0x78>
 801966e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019672:	340a      	adds	r4, #10
 8019674:	2509      	movs	r5, #9
 8019676:	e7f6      	b.n	8019666 <__s2b+0x66>
 8019678:	f814 3b01 	ldrb.w	r3, [r4], #1
 801967c:	4601      	mov	r1, r0
 801967e:	3b30      	subs	r3, #48	; 0x30
 8019680:	220a      	movs	r2, #10
 8019682:	4630      	mov	r0, r6
 8019684:	f7ff ff76 	bl	8019574 <__multadd>
 8019688:	e7ee      	b.n	8019668 <__s2b+0x68>
 801968a:	bf00      	nop
 801968c:	0801b958 	.word	0x0801b958
 8019690:	0801ba48 	.word	0x0801ba48

08019694 <__hi0bits>:
 8019694:	0c03      	lsrs	r3, r0, #16
 8019696:	041b      	lsls	r3, r3, #16
 8019698:	b9d3      	cbnz	r3, 80196d0 <__hi0bits+0x3c>
 801969a:	0400      	lsls	r0, r0, #16
 801969c:	2310      	movs	r3, #16
 801969e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80196a2:	bf04      	itt	eq
 80196a4:	0200      	lsleq	r0, r0, #8
 80196a6:	3308      	addeq	r3, #8
 80196a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80196ac:	bf04      	itt	eq
 80196ae:	0100      	lsleq	r0, r0, #4
 80196b0:	3304      	addeq	r3, #4
 80196b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80196b6:	bf04      	itt	eq
 80196b8:	0080      	lsleq	r0, r0, #2
 80196ba:	3302      	addeq	r3, #2
 80196bc:	2800      	cmp	r0, #0
 80196be:	db05      	blt.n	80196cc <__hi0bits+0x38>
 80196c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80196c4:	f103 0301 	add.w	r3, r3, #1
 80196c8:	bf08      	it	eq
 80196ca:	2320      	moveq	r3, #32
 80196cc:	4618      	mov	r0, r3
 80196ce:	4770      	bx	lr
 80196d0:	2300      	movs	r3, #0
 80196d2:	e7e4      	b.n	801969e <__hi0bits+0xa>

080196d4 <__lo0bits>:
 80196d4:	6803      	ldr	r3, [r0, #0]
 80196d6:	f013 0207 	ands.w	r2, r3, #7
 80196da:	4601      	mov	r1, r0
 80196dc:	d00b      	beq.n	80196f6 <__lo0bits+0x22>
 80196de:	07da      	lsls	r2, r3, #31
 80196e0:	d423      	bmi.n	801972a <__lo0bits+0x56>
 80196e2:	0798      	lsls	r0, r3, #30
 80196e4:	bf49      	itett	mi
 80196e6:	085b      	lsrmi	r3, r3, #1
 80196e8:	089b      	lsrpl	r3, r3, #2
 80196ea:	2001      	movmi	r0, #1
 80196ec:	600b      	strmi	r3, [r1, #0]
 80196ee:	bf5c      	itt	pl
 80196f0:	600b      	strpl	r3, [r1, #0]
 80196f2:	2002      	movpl	r0, #2
 80196f4:	4770      	bx	lr
 80196f6:	b298      	uxth	r0, r3
 80196f8:	b9a8      	cbnz	r0, 8019726 <__lo0bits+0x52>
 80196fa:	0c1b      	lsrs	r3, r3, #16
 80196fc:	2010      	movs	r0, #16
 80196fe:	b2da      	uxtb	r2, r3
 8019700:	b90a      	cbnz	r2, 8019706 <__lo0bits+0x32>
 8019702:	3008      	adds	r0, #8
 8019704:	0a1b      	lsrs	r3, r3, #8
 8019706:	071a      	lsls	r2, r3, #28
 8019708:	bf04      	itt	eq
 801970a:	091b      	lsreq	r3, r3, #4
 801970c:	3004      	addeq	r0, #4
 801970e:	079a      	lsls	r2, r3, #30
 8019710:	bf04      	itt	eq
 8019712:	089b      	lsreq	r3, r3, #2
 8019714:	3002      	addeq	r0, #2
 8019716:	07da      	lsls	r2, r3, #31
 8019718:	d403      	bmi.n	8019722 <__lo0bits+0x4e>
 801971a:	085b      	lsrs	r3, r3, #1
 801971c:	f100 0001 	add.w	r0, r0, #1
 8019720:	d005      	beq.n	801972e <__lo0bits+0x5a>
 8019722:	600b      	str	r3, [r1, #0]
 8019724:	4770      	bx	lr
 8019726:	4610      	mov	r0, r2
 8019728:	e7e9      	b.n	80196fe <__lo0bits+0x2a>
 801972a:	2000      	movs	r0, #0
 801972c:	4770      	bx	lr
 801972e:	2020      	movs	r0, #32
 8019730:	4770      	bx	lr
	...

08019734 <__i2b>:
 8019734:	b510      	push	{r4, lr}
 8019736:	460c      	mov	r4, r1
 8019738:	2101      	movs	r1, #1
 801973a:	f7ff feb9 	bl	80194b0 <_Balloc>
 801973e:	4602      	mov	r2, r0
 8019740:	b928      	cbnz	r0, 801974e <__i2b+0x1a>
 8019742:	4b05      	ldr	r3, [pc, #20]	; (8019758 <__i2b+0x24>)
 8019744:	4805      	ldr	r0, [pc, #20]	; (801975c <__i2b+0x28>)
 8019746:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801974a:	f000 ff03 	bl	801a554 <__assert_func>
 801974e:	2301      	movs	r3, #1
 8019750:	6144      	str	r4, [r0, #20]
 8019752:	6103      	str	r3, [r0, #16]
 8019754:	bd10      	pop	{r4, pc}
 8019756:	bf00      	nop
 8019758:	0801b958 	.word	0x0801b958
 801975c:	0801ba48 	.word	0x0801ba48

08019760 <__multiply>:
 8019760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019764:	4691      	mov	r9, r2
 8019766:	690a      	ldr	r2, [r1, #16]
 8019768:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801976c:	429a      	cmp	r2, r3
 801976e:	bfb8      	it	lt
 8019770:	460b      	movlt	r3, r1
 8019772:	460c      	mov	r4, r1
 8019774:	bfbc      	itt	lt
 8019776:	464c      	movlt	r4, r9
 8019778:	4699      	movlt	r9, r3
 801977a:	6927      	ldr	r7, [r4, #16]
 801977c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8019780:	68a3      	ldr	r3, [r4, #8]
 8019782:	6861      	ldr	r1, [r4, #4]
 8019784:	eb07 060a 	add.w	r6, r7, sl
 8019788:	42b3      	cmp	r3, r6
 801978a:	b085      	sub	sp, #20
 801978c:	bfb8      	it	lt
 801978e:	3101      	addlt	r1, #1
 8019790:	f7ff fe8e 	bl	80194b0 <_Balloc>
 8019794:	b930      	cbnz	r0, 80197a4 <__multiply+0x44>
 8019796:	4602      	mov	r2, r0
 8019798:	4b44      	ldr	r3, [pc, #272]	; (80198ac <__multiply+0x14c>)
 801979a:	4845      	ldr	r0, [pc, #276]	; (80198b0 <__multiply+0x150>)
 801979c:	f240 115d 	movw	r1, #349	; 0x15d
 80197a0:	f000 fed8 	bl	801a554 <__assert_func>
 80197a4:	f100 0514 	add.w	r5, r0, #20
 80197a8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80197ac:	462b      	mov	r3, r5
 80197ae:	2200      	movs	r2, #0
 80197b0:	4543      	cmp	r3, r8
 80197b2:	d321      	bcc.n	80197f8 <__multiply+0x98>
 80197b4:	f104 0314 	add.w	r3, r4, #20
 80197b8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80197bc:	f109 0314 	add.w	r3, r9, #20
 80197c0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80197c4:	9202      	str	r2, [sp, #8]
 80197c6:	1b3a      	subs	r2, r7, r4
 80197c8:	3a15      	subs	r2, #21
 80197ca:	f022 0203 	bic.w	r2, r2, #3
 80197ce:	3204      	adds	r2, #4
 80197d0:	f104 0115 	add.w	r1, r4, #21
 80197d4:	428f      	cmp	r7, r1
 80197d6:	bf38      	it	cc
 80197d8:	2204      	movcc	r2, #4
 80197da:	9201      	str	r2, [sp, #4]
 80197dc:	9a02      	ldr	r2, [sp, #8]
 80197de:	9303      	str	r3, [sp, #12]
 80197e0:	429a      	cmp	r2, r3
 80197e2:	d80c      	bhi.n	80197fe <__multiply+0x9e>
 80197e4:	2e00      	cmp	r6, #0
 80197e6:	dd03      	ble.n	80197f0 <__multiply+0x90>
 80197e8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80197ec:	2b00      	cmp	r3, #0
 80197ee:	d05a      	beq.n	80198a6 <__multiply+0x146>
 80197f0:	6106      	str	r6, [r0, #16]
 80197f2:	b005      	add	sp, #20
 80197f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197f8:	f843 2b04 	str.w	r2, [r3], #4
 80197fc:	e7d8      	b.n	80197b0 <__multiply+0x50>
 80197fe:	f8b3 a000 	ldrh.w	sl, [r3]
 8019802:	f1ba 0f00 	cmp.w	sl, #0
 8019806:	d024      	beq.n	8019852 <__multiply+0xf2>
 8019808:	f104 0e14 	add.w	lr, r4, #20
 801980c:	46a9      	mov	r9, r5
 801980e:	f04f 0c00 	mov.w	ip, #0
 8019812:	f85e 2b04 	ldr.w	r2, [lr], #4
 8019816:	f8d9 1000 	ldr.w	r1, [r9]
 801981a:	fa1f fb82 	uxth.w	fp, r2
 801981e:	b289      	uxth	r1, r1
 8019820:	fb0a 110b 	mla	r1, sl, fp, r1
 8019824:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8019828:	f8d9 2000 	ldr.w	r2, [r9]
 801982c:	4461      	add	r1, ip
 801982e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8019832:	fb0a c20b 	mla	r2, sl, fp, ip
 8019836:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801983a:	b289      	uxth	r1, r1
 801983c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8019840:	4577      	cmp	r7, lr
 8019842:	f849 1b04 	str.w	r1, [r9], #4
 8019846:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801984a:	d8e2      	bhi.n	8019812 <__multiply+0xb2>
 801984c:	9a01      	ldr	r2, [sp, #4]
 801984e:	f845 c002 	str.w	ip, [r5, r2]
 8019852:	9a03      	ldr	r2, [sp, #12]
 8019854:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8019858:	3304      	adds	r3, #4
 801985a:	f1b9 0f00 	cmp.w	r9, #0
 801985e:	d020      	beq.n	80198a2 <__multiply+0x142>
 8019860:	6829      	ldr	r1, [r5, #0]
 8019862:	f104 0c14 	add.w	ip, r4, #20
 8019866:	46ae      	mov	lr, r5
 8019868:	f04f 0a00 	mov.w	sl, #0
 801986c:	f8bc b000 	ldrh.w	fp, [ip]
 8019870:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8019874:	fb09 220b 	mla	r2, r9, fp, r2
 8019878:	4492      	add	sl, r2
 801987a:	b289      	uxth	r1, r1
 801987c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8019880:	f84e 1b04 	str.w	r1, [lr], #4
 8019884:	f85c 2b04 	ldr.w	r2, [ip], #4
 8019888:	f8be 1000 	ldrh.w	r1, [lr]
 801988c:	0c12      	lsrs	r2, r2, #16
 801988e:	fb09 1102 	mla	r1, r9, r2, r1
 8019892:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8019896:	4567      	cmp	r7, ip
 8019898:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801989c:	d8e6      	bhi.n	801986c <__multiply+0x10c>
 801989e:	9a01      	ldr	r2, [sp, #4]
 80198a0:	50a9      	str	r1, [r5, r2]
 80198a2:	3504      	adds	r5, #4
 80198a4:	e79a      	b.n	80197dc <__multiply+0x7c>
 80198a6:	3e01      	subs	r6, #1
 80198a8:	e79c      	b.n	80197e4 <__multiply+0x84>
 80198aa:	bf00      	nop
 80198ac:	0801b958 	.word	0x0801b958
 80198b0:	0801ba48 	.word	0x0801ba48

080198b4 <__pow5mult>:
 80198b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80198b8:	4615      	mov	r5, r2
 80198ba:	f012 0203 	ands.w	r2, r2, #3
 80198be:	4606      	mov	r6, r0
 80198c0:	460f      	mov	r7, r1
 80198c2:	d007      	beq.n	80198d4 <__pow5mult+0x20>
 80198c4:	4c25      	ldr	r4, [pc, #148]	; (801995c <__pow5mult+0xa8>)
 80198c6:	3a01      	subs	r2, #1
 80198c8:	2300      	movs	r3, #0
 80198ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80198ce:	f7ff fe51 	bl	8019574 <__multadd>
 80198d2:	4607      	mov	r7, r0
 80198d4:	10ad      	asrs	r5, r5, #2
 80198d6:	d03d      	beq.n	8019954 <__pow5mult+0xa0>
 80198d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80198da:	b97c      	cbnz	r4, 80198fc <__pow5mult+0x48>
 80198dc:	2010      	movs	r0, #16
 80198de:	f7fc fae3 	bl	8015ea8 <malloc>
 80198e2:	4602      	mov	r2, r0
 80198e4:	6270      	str	r0, [r6, #36]	; 0x24
 80198e6:	b928      	cbnz	r0, 80198f4 <__pow5mult+0x40>
 80198e8:	4b1d      	ldr	r3, [pc, #116]	; (8019960 <__pow5mult+0xac>)
 80198ea:	481e      	ldr	r0, [pc, #120]	; (8019964 <__pow5mult+0xb0>)
 80198ec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80198f0:	f000 fe30 	bl	801a554 <__assert_func>
 80198f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80198f8:	6004      	str	r4, [r0, #0]
 80198fa:	60c4      	str	r4, [r0, #12]
 80198fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8019900:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019904:	b94c      	cbnz	r4, 801991a <__pow5mult+0x66>
 8019906:	f240 2171 	movw	r1, #625	; 0x271
 801990a:	4630      	mov	r0, r6
 801990c:	f7ff ff12 	bl	8019734 <__i2b>
 8019910:	2300      	movs	r3, #0
 8019912:	f8c8 0008 	str.w	r0, [r8, #8]
 8019916:	4604      	mov	r4, r0
 8019918:	6003      	str	r3, [r0, #0]
 801991a:	f04f 0900 	mov.w	r9, #0
 801991e:	07eb      	lsls	r3, r5, #31
 8019920:	d50a      	bpl.n	8019938 <__pow5mult+0x84>
 8019922:	4639      	mov	r1, r7
 8019924:	4622      	mov	r2, r4
 8019926:	4630      	mov	r0, r6
 8019928:	f7ff ff1a 	bl	8019760 <__multiply>
 801992c:	4639      	mov	r1, r7
 801992e:	4680      	mov	r8, r0
 8019930:	4630      	mov	r0, r6
 8019932:	f7ff fdfd 	bl	8019530 <_Bfree>
 8019936:	4647      	mov	r7, r8
 8019938:	106d      	asrs	r5, r5, #1
 801993a:	d00b      	beq.n	8019954 <__pow5mult+0xa0>
 801993c:	6820      	ldr	r0, [r4, #0]
 801993e:	b938      	cbnz	r0, 8019950 <__pow5mult+0x9c>
 8019940:	4622      	mov	r2, r4
 8019942:	4621      	mov	r1, r4
 8019944:	4630      	mov	r0, r6
 8019946:	f7ff ff0b 	bl	8019760 <__multiply>
 801994a:	6020      	str	r0, [r4, #0]
 801994c:	f8c0 9000 	str.w	r9, [r0]
 8019950:	4604      	mov	r4, r0
 8019952:	e7e4      	b.n	801991e <__pow5mult+0x6a>
 8019954:	4638      	mov	r0, r7
 8019956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801995a:	bf00      	nop
 801995c:	0801bb98 	.word	0x0801bb98
 8019960:	0801b8e6 	.word	0x0801b8e6
 8019964:	0801ba48 	.word	0x0801ba48

08019968 <__lshift>:
 8019968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801996c:	460c      	mov	r4, r1
 801996e:	6849      	ldr	r1, [r1, #4]
 8019970:	6923      	ldr	r3, [r4, #16]
 8019972:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8019976:	68a3      	ldr	r3, [r4, #8]
 8019978:	4607      	mov	r7, r0
 801997a:	4691      	mov	r9, r2
 801997c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019980:	f108 0601 	add.w	r6, r8, #1
 8019984:	42b3      	cmp	r3, r6
 8019986:	db0b      	blt.n	80199a0 <__lshift+0x38>
 8019988:	4638      	mov	r0, r7
 801998a:	f7ff fd91 	bl	80194b0 <_Balloc>
 801998e:	4605      	mov	r5, r0
 8019990:	b948      	cbnz	r0, 80199a6 <__lshift+0x3e>
 8019992:	4602      	mov	r2, r0
 8019994:	4b2a      	ldr	r3, [pc, #168]	; (8019a40 <__lshift+0xd8>)
 8019996:	482b      	ldr	r0, [pc, #172]	; (8019a44 <__lshift+0xdc>)
 8019998:	f240 11d9 	movw	r1, #473	; 0x1d9
 801999c:	f000 fdda 	bl	801a554 <__assert_func>
 80199a0:	3101      	adds	r1, #1
 80199a2:	005b      	lsls	r3, r3, #1
 80199a4:	e7ee      	b.n	8019984 <__lshift+0x1c>
 80199a6:	2300      	movs	r3, #0
 80199a8:	f100 0114 	add.w	r1, r0, #20
 80199ac:	f100 0210 	add.w	r2, r0, #16
 80199b0:	4618      	mov	r0, r3
 80199b2:	4553      	cmp	r3, sl
 80199b4:	db37      	blt.n	8019a26 <__lshift+0xbe>
 80199b6:	6920      	ldr	r0, [r4, #16]
 80199b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80199bc:	f104 0314 	add.w	r3, r4, #20
 80199c0:	f019 091f 	ands.w	r9, r9, #31
 80199c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80199c8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80199cc:	d02f      	beq.n	8019a2e <__lshift+0xc6>
 80199ce:	f1c9 0e20 	rsb	lr, r9, #32
 80199d2:	468a      	mov	sl, r1
 80199d4:	f04f 0c00 	mov.w	ip, #0
 80199d8:	681a      	ldr	r2, [r3, #0]
 80199da:	fa02 f209 	lsl.w	r2, r2, r9
 80199de:	ea42 020c 	orr.w	r2, r2, ip
 80199e2:	f84a 2b04 	str.w	r2, [sl], #4
 80199e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80199ea:	4298      	cmp	r0, r3
 80199ec:	fa22 fc0e 	lsr.w	ip, r2, lr
 80199f0:	d8f2      	bhi.n	80199d8 <__lshift+0x70>
 80199f2:	1b03      	subs	r3, r0, r4
 80199f4:	3b15      	subs	r3, #21
 80199f6:	f023 0303 	bic.w	r3, r3, #3
 80199fa:	3304      	adds	r3, #4
 80199fc:	f104 0215 	add.w	r2, r4, #21
 8019a00:	4290      	cmp	r0, r2
 8019a02:	bf38      	it	cc
 8019a04:	2304      	movcc	r3, #4
 8019a06:	f841 c003 	str.w	ip, [r1, r3]
 8019a0a:	f1bc 0f00 	cmp.w	ip, #0
 8019a0e:	d001      	beq.n	8019a14 <__lshift+0xac>
 8019a10:	f108 0602 	add.w	r6, r8, #2
 8019a14:	3e01      	subs	r6, #1
 8019a16:	4638      	mov	r0, r7
 8019a18:	612e      	str	r6, [r5, #16]
 8019a1a:	4621      	mov	r1, r4
 8019a1c:	f7ff fd88 	bl	8019530 <_Bfree>
 8019a20:	4628      	mov	r0, r5
 8019a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019a26:	f842 0f04 	str.w	r0, [r2, #4]!
 8019a2a:	3301      	adds	r3, #1
 8019a2c:	e7c1      	b.n	80199b2 <__lshift+0x4a>
 8019a2e:	3904      	subs	r1, #4
 8019a30:	f853 2b04 	ldr.w	r2, [r3], #4
 8019a34:	f841 2f04 	str.w	r2, [r1, #4]!
 8019a38:	4298      	cmp	r0, r3
 8019a3a:	d8f9      	bhi.n	8019a30 <__lshift+0xc8>
 8019a3c:	e7ea      	b.n	8019a14 <__lshift+0xac>
 8019a3e:	bf00      	nop
 8019a40:	0801b958 	.word	0x0801b958
 8019a44:	0801ba48 	.word	0x0801ba48

08019a48 <__mcmp>:
 8019a48:	b530      	push	{r4, r5, lr}
 8019a4a:	6902      	ldr	r2, [r0, #16]
 8019a4c:	690c      	ldr	r4, [r1, #16]
 8019a4e:	1b12      	subs	r2, r2, r4
 8019a50:	d10e      	bne.n	8019a70 <__mcmp+0x28>
 8019a52:	f100 0314 	add.w	r3, r0, #20
 8019a56:	3114      	adds	r1, #20
 8019a58:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8019a5c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8019a60:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8019a64:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8019a68:	42a5      	cmp	r5, r4
 8019a6a:	d003      	beq.n	8019a74 <__mcmp+0x2c>
 8019a6c:	d305      	bcc.n	8019a7a <__mcmp+0x32>
 8019a6e:	2201      	movs	r2, #1
 8019a70:	4610      	mov	r0, r2
 8019a72:	bd30      	pop	{r4, r5, pc}
 8019a74:	4283      	cmp	r3, r0
 8019a76:	d3f3      	bcc.n	8019a60 <__mcmp+0x18>
 8019a78:	e7fa      	b.n	8019a70 <__mcmp+0x28>
 8019a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8019a7e:	e7f7      	b.n	8019a70 <__mcmp+0x28>

08019a80 <__mdiff>:
 8019a80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a84:	460c      	mov	r4, r1
 8019a86:	4606      	mov	r6, r0
 8019a88:	4611      	mov	r1, r2
 8019a8a:	4620      	mov	r0, r4
 8019a8c:	4690      	mov	r8, r2
 8019a8e:	f7ff ffdb 	bl	8019a48 <__mcmp>
 8019a92:	1e05      	subs	r5, r0, #0
 8019a94:	d110      	bne.n	8019ab8 <__mdiff+0x38>
 8019a96:	4629      	mov	r1, r5
 8019a98:	4630      	mov	r0, r6
 8019a9a:	f7ff fd09 	bl	80194b0 <_Balloc>
 8019a9e:	b930      	cbnz	r0, 8019aae <__mdiff+0x2e>
 8019aa0:	4b3a      	ldr	r3, [pc, #232]	; (8019b8c <__mdiff+0x10c>)
 8019aa2:	4602      	mov	r2, r0
 8019aa4:	f240 2132 	movw	r1, #562	; 0x232
 8019aa8:	4839      	ldr	r0, [pc, #228]	; (8019b90 <__mdiff+0x110>)
 8019aaa:	f000 fd53 	bl	801a554 <__assert_func>
 8019aae:	2301      	movs	r3, #1
 8019ab0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019ab4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ab8:	bfa4      	itt	ge
 8019aba:	4643      	movge	r3, r8
 8019abc:	46a0      	movge	r8, r4
 8019abe:	4630      	mov	r0, r6
 8019ac0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8019ac4:	bfa6      	itte	ge
 8019ac6:	461c      	movge	r4, r3
 8019ac8:	2500      	movge	r5, #0
 8019aca:	2501      	movlt	r5, #1
 8019acc:	f7ff fcf0 	bl	80194b0 <_Balloc>
 8019ad0:	b920      	cbnz	r0, 8019adc <__mdiff+0x5c>
 8019ad2:	4b2e      	ldr	r3, [pc, #184]	; (8019b8c <__mdiff+0x10c>)
 8019ad4:	4602      	mov	r2, r0
 8019ad6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8019ada:	e7e5      	b.n	8019aa8 <__mdiff+0x28>
 8019adc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8019ae0:	6926      	ldr	r6, [r4, #16]
 8019ae2:	60c5      	str	r5, [r0, #12]
 8019ae4:	f104 0914 	add.w	r9, r4, #20
 8019ae8:	f108 0514 	add.w	r5, r8, #20
 8019aec:	f100 0e14 	add.w	lr, r0, #20
 8019af0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8019af4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8019af8:	f108 0210 	add.w	r2, r8, #16
 8019afc:	46f2      	mov	sl, lr
 8019afe:	2100      	movs	r1, #0
 8019b00:	f859 3b04 	ldr.w	r3, [r9], #4
 8019b04:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8019b08:	fa1f f883 	uxth.w	r8, r3
 8019b0c:	fa11 f18b 	uxtah	r1, r1, fp
 8019b10:	0c1b      	lsrs	r3, r3, #16
 8019b12:	eba1 0808 	sub.w	r8, r1, r8
 8019b16:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8019b1a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8019b1e:	fa1f f888 	uxth.w	r8, r8
 8019b22:	1419      	asrs	r1, r3, #16
 8019b24:	454e      	cmp	r6, r9
 8019b26:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8019b2a:	f84a 3b04 	str.w	r3, [sl], #4
 8019b2e:	d8e7      	bhi.n	8019b00 <__mdiff+0x80>
 8019b30:	1b33      	subs	r3, r6, r4
 8019b32:	3b15      	subs	r3, #21
 8019b34:	f023 0303 	bic.w	r3, r3, #3
 8019b38:	3304      	adds	r3, #4
 8019b3a:	3415      	adds	r4, #21
 8019b3c:	42a6      	cmp	r6, r4
 8019b3e:	bf38      	it	cc
 8019b40:	2304      	movcc	r3, #4
 8019b42:	441d      	add	r5, r3
 8019b44:	4473      	add	r3, lr
 8019b46:	469e      	mov	lr, r3
 8019b48:	462e      	mov	r6, r5
 8019b4a:	4566      	cmp	r6, ip
 8019b4c:	d30e      	bcc.n	8019b6c <__mdiff+0xec>
 8019b4e:	f10c 0203 	add.w	r2, ip, #3
 8019b52:	1b52      	subs	r2, r2, r5
 8019b54:	f022 0203 	bic.w	r2, r2, #3
 8019b58:	3d03      	subs	r5, #3
 8019b5a:	45ac      	cmp	ip, r5
 8019b5c:	bf38      	it	cc
 8019b5e:	2200      	movcc	r2, #0
 8019b60:	441a      	add	r2, r3
 8019b62:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8019b66:	b17b      	cbz	r3, 8019b88 <__mdiff+0x108>
 8019b68:	6107      	str	r7, [r0, #16]
 8019b6a:	e7a3      	b.n	8019ab4 <__mdiff+0x34>
 8019b6c:	f856 8b04 	ldr.w	r8, [r6], #4
 8019b70:	fa11 f288 	uxtah	r2, r1, r8
 8019b74:	1414      	asrs	r4, r2, #16
 8019b76:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8019b7a:	b292      	uxth	r2, r2
 8019b7c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8019b80:	f84e 2b04 	str.w	r2, [lr], #4
 8019b84:	1421      	asrs	r1, r4, #16
 8019b86:	e7e0      	b.n	8019b4a <__mdiff+0xca>
 8019b88:	3f01      	subs	r7, #1
 8019b8a:	e7ea      	b.n	8019b62 <__mdiff+0xe2>
 8019b8c:	0801b958 	.word	0x0801b958
 8019b90:	0801ba48 	.word	0x0801ba48

08019b94 <__ulp>:
 8019b94:	b082      	sub	sp, #8
 8019b96:	ed8d 0b00 	vstr	d0, [sp]
 8019b9a:	9b01      	ldr	r3, [sp, #4]
 8019b9c:	4912      	ldr	r1, [pc, #72]	; (8019be8 <__ulp+0x54>)
 8019b9e:	4019      	ands	r1, r3
 8019ba0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8019ba4:	2900      	cmp	r1, #0
 8019ba6:	dd05      	ble.n	8019bb4 <__ulp+0x20>
 8019ba8:	2200      	movs	r2, #0
 8019baa:	460b      	mov	r3, r1
 8019bac:	ec43 2b10 	vmov	d0, r2, r3
 8019bb0:	b002      	add	sp, #8
 8019bb2:	4770      	bx	lr
 8019bb4:	4249      	negs	r1, r1
 8019bb6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8019bba:	ea4f 5021 	mov.w	r0, r1, asr #20
 8019bbe:	f04f 0200 	mov.w	r2, #0
 8019bc2:	f04f 0300 	mov.w	r3, #0
 8019bc6:	da04      	bge.n	8019bd2 <__ulp+0x3e>
 8019bc8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8019bcc:	fa41 f300 	asr.w	r3, r1, r0
 8019bd0:	e7ec      	b.n	8019bac <__ulp+0x18>
 8019bd2:	f1a0 0114 	sub.w	r1, r0, #20
 8019bd6:	291e      	cmp	r1, #30
 8019bd8:	bfda      	itte	le
 8019bda:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8019bde:	fa20 f101 	lsrle.w	r1, r0, r1
 8019be2:	2101      	movgt	r1, #1
 8019be4:	460a      	mov	r2, r1
 8019be6:	e7e1      	b.n	8019bac <__ulp+0x18>
 8019be8:	7ff00000 	.word	0x7ff00000

08019bec <__b2d>:
 8019bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019bee:	6905      	ldr	r5, [r0, #16]
 8019bf0:	f100 0714 	add.w	r7, r0, #20
 8019bf4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8019bf8:	1f2e      	subs	r6, r5, #4
 8019bfa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8019bfe:	4620      	mov	r0, r4
 8019c00:	f7ff fd48 	bl	8019694 <__hi0bits>
 8019c04:	f1c0 0320 	rsb	r3, r0, #32
 8019c08:	280a      	cmp	r0, #10
 8019c0a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8019c88 <__b2d+0x9c>
 8019c0e:	600b      	str	r3, [r1, #0]
 8019c10:	dc14      	bgt.n	8019c3c <__b2d+0x50>
 8019c12:	f1c0 0e0b 	rsb	lr, r0, #11
 8019c16:	fa24 f10e 	lsr.w	r1, r4, lr
 8019c1a:	42b7      	cmp	r7, r6
 8019c1c:	ea41 030c 	orr.w	r3, r1, ip
 8019c20:	bf34      	ite	cc
 8019c22:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019c26:	2100      	movcs	r1, #0
 8019c28:	3015      	adds	r0, #21
 8019c2a:	fa04 f000 	lsl.w	r0, r4, r0
 8019c2e:	fa21 f10e 	lsr.w	r1, r1, lr
 8019c32:	ea40 0201 	orr.w	r2, r0, r1
 8019c36:	ec43 2b10 	vmov	d0, r2, r3
 8019c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019c3c:	42b7      	cmp	r7, r6
 8019c3e:	bf3a      	itte	cc
 8019c40:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019c44:	f1a5 0608 	subcc.w	r6, r5, #8
 8019c48:	2100      	movcs	r1, #0
 8019c4a:	380b      	subs	r0, #11
 8019c4c:	d017      	beq.n	8019c7e <__b2d+0x92>
 8019c4e:	f1c0 0c20 	rsb	ip, r0, #32
 8019c52:	fa04 f500 	lsl.w	r5, r4, r0
 8019c56:	42be      	cmp	r6, r7
 8019c58:	fa21 f40c 	lsr.w	r4, r1, ip
 8019c5c:	ea45 0504 	orr.w	r5, r5, r4
 8019c60:	bf8c      	ite	hi
 8019c62:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8019c66:	2400      	movls	r4, #0
 8019c68:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8019c6c:	fa01 f000 	lsl.w	r0, r1, r0
 8019c70:	fa24 f40c 	lsr.w	r4, r4, ip
 8019c74:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8019c78:	ea40 0204 	orr.w	r2, r0, r4
 8019c7c:	e7db      	b.n	8019c36 <__b2d+0x4a>
 8019c7e:	ea44 030c 	orr.w	r3, r4, ip
 8019c82:	460a      	mov	r2, r1
 8019c84:	e7d7      	b.n	8019c36 <__b2d+0x4a>
 8019c86:	bf00      	nop
 8019c88:	3ff00000 	.word	0x3ff00000

08019c8c <__d2b>:
 8019c8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019c90:	4689      	mov	r9, r1
 8019c92:	2101      	movs	r1, #1
 8019c94:	ec57 6b10 	vmov	r6, r7, d0
 8019c98:	4690      	mov	r8, r2
 8019c9a:	f7ff fc09 	bl	80194b0 <_Balloc>
 8019c9e:	4604      	mov	r4, r0
 8019ca0:	b930      	cbnz	r0, 8019cb0 <__d2b+0x24>
 8019ca2:	4602      	mov	r2, r0
 8019ca4:	4b25      	ldr	r3, [pc, #148]	; (8019d3c <__d2b+0xb0>)
 8019ca6:	4826      	ldr	r0, [pc, #152]	; (8019d40 <__d2b+0xb4>)
 8019ca8:	f240 310a 	movw	r1, #778	; 0x30a
 8019cac:	f000 fc52 	bl	801a554 <__assert_func>
 8019cb0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8019cb4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8019cb8:	bb35      	cbnz	r5, 8019d08 <__d2b+0x7c>
 8019cba:	2e00      	cmp	r6, #0
 8019cbc:	9301      	str	r3, [sp, #4]
 8019cbe:	d028      	beq.n	8019d12 <__d2b+0x86>
 8019cc0:	4668      	mov	r0, sp
 8019cc2:	9600      	str	r6, [sp, #0]
 8019cc4:	f7ff fd06 	bl	80196d4 <__lo0bits>
 8019cc8:	9900      	ldr	r1, [sp, #0]
 8019cca:	b300      	cbz	r0, 8019d0e <__d2b+0x82>
 8019ccc:	9a01      	ldr	r2, [sp, #4]
 8019cce:	f1c0 0320 	rsb	r3, r0, #32
 8019cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8019cd6:	430b      	orrs	r3, r1
 8019cd8:	40c2      	lsrs	r2, r0
 8019cda:	6163      	str	r3, [r4, #20]
 8019cdc:	9201      	str	r2, [sp, #4]
 8019cde:	9b01      	ldr	r3, [sp, #4]
 8019ce0:	61a3      	str	r3, [r4, #24]
 8019ce2:	2b00      	cmp	r3, #0
 8019ce4:	bf14      	ite	ne
 8019ce6:	2202      	movne	r2, #2
 8019ce8:	2201      	moveq	r2, #1
 8019cea:	6122      	str	r2, [r4, #16]
 8019cec:	b1d5      	cbz	r5, 8019d24 <__d2b+0x98>
 8019cee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019cf2:	4405      	add	r5, r0
 8019cf4:	f8c9 5000 	str.w	r5, [r9]
 8019cf8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019cfc:	f8c8 0000 	str.w	r0, [r8]
 8019d00:	4620      	mov	r0, r4
 8019d02:	b003      	add	sp, #12
 8019d04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019d08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019d0c:	e7d5      	b.n	8019cba <__d2b+0x2e>
 8019d0e:	6161      	str	r1, [r4, #20]
 8019d10:	e7e5      	b.n	8019cde <__d2b+0x52>
 8019d12:	a801      	add	r0, sp, #4
 8019d14:	f7ff fcde 	bl	80196d4 <__lo0bits>
 8019d18:	9b01      	ldr	r3, [sp, #4]
 8019d1a:	6163      	str	r3, [r4, #20]
 8019d1c:	2201      	movs	r2, #1
 8019d1e:	6122      	str	r2, [r4, #16]
 8019d20:	3020      	adds	r0, #32
 8019d22:	e7e3      	b.n	8019cec <__d2b+0x60>
 8019d24:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019d28:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019d2c:	f8c9 0000 	str.w	r0, [r9]
 8019d30:	6918      	ldr	r0, [r3, #16]
 8019d32:	f7ff fcaf 	bl	8019694 <__hi0bits>
 8019d36:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019d3a:	e7df      	b.n	8019cfc <__d2b+0x70>
 8019d3c:	0801b958 	.word	0x0801b958
 8019d40:	0801ba48 	.word	0x0801ba48

08019d44 <__ratio>:
 8019d44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d48:	4688      	mov	r8, r1
 8019d4a:	4669      	mov	r1, sp
 8019d4c:	4681      	mov	r9, r0
 8019d4e:	f7ff ff4d 	bl	8019bec <__b2d>
 8019d52:	a901      	add	r1, sp, #4
 8019d54:	4640      	mov	r0, r8
 8019d56:	ec55 4b10 	vmov	r4, r5, d0
 8019d5a:	ee10 aa10 	vmov	sl, s0
 8019d5e:	f7ff ff45 	bl	8019bec <__b2d>
 8019d62:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019d66:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8019d6a:	1a59      	subs	r1, r3, r1
 8019d6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019d70:	1ad3      	subs	r3, r2, r3
 8019d72:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8019d76:	ec57 6b10 	vmov	r6, r7, d0
 8019d7a:	2b00      	cmp	r3, #0
 8019d7c:	bfd6      	itet	le
 8019d7e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8019d82:	462a      	movgt	r2, r5
 8019d84:	463a      	movle	r2, r7
 8019d86:	46ab      	mov	fp, r5
 8019d88:	bfd6      	itet	le
 8019d8a:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8019d8e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8019d92:	ee00 3a90 	vmovle	s1, r3
 8019d96:	ec4b ab17 	vmov	d7, sl, fp
 8019d9a:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8019d9e:	b003      	add	sp, #12
 8019da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019da4 <__copybits>:
 8019da4:	3901      	subs	r1, #1
 8019da6:	b570      	push	{r4, r5, r6, lr}
 8019da8:	1149      	asrs	r1, r1, #5
 8019daa:	6914      	ldr	r4, [r2, #16]
 8019dac:	3101      	adds	r1, #1
 8019dae:	f102 0314 	add.w	r3, r2, #20
 8019db2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019db6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019dba:	1f05      	subs	r5, r0, #4
 8019dbc:	42a3      	cmp	r3, r4
 8019dbe:	d30c      	bcc.n	8019dda <__copybits+0x36>
 8019dc0:	1aa3      	subs	r3, r4, r2
 8019dc2:	3b11      	subs	r3, #17
 8019dc4:	f023 0303 	bic.w	r3, r3, #3
 8019dc8:	3211      	adds	r2, #17
 8019dca:	42a2      	cmp	r2, r4
 8019dcc:	bf88      	it	hi
 8019dce:	2300      	movhi	r3, #0
 8019dd0:	4418      	add	r0, r3
 8019dd2:	2300      	movs	r3, #0
 8019dd4:	4288      	cmp	r0, r1
 8019dd6:	d305      	bcc.n	8019de4 <__copybits+0x40>
 8019dd8:	bd70      	pop	{r4, r5, r6, pc}
 8019dda:	f853 6b04 	ldr.w	r6, [r3], #4
 8019dde:	f845 6f04 	str.w	r6, [r5, #4]!
 8019de2:	e7eb      	b.n	8019dbc <__copybits+0x18>
 8019de4:	f840 3b04 	str.w	r3, [r0], #4
 8019de8:	e7f4      	b.n	8019dd4 <__copybits+0x30>

08019dea <__any_on>:
 8019dea:	f100 0214 	add.w	r2, r0, #20
 8019dee:	6900      	ldr	r0, [r0, #16]
 8019df0:	114b      	asrs	r3, r1, #5
 8019df2:	4298      	cmp	r0, r3
 8019df4:	b510      	push	{r4, lr}
 8019df6:	db11      	blt.n	8019e1c <__any_on+0x32>
 8019df8:	dd0a      	ble.n	8019e10 <__any_on+0x26>
 8019dfa:	f011 011f 	ands.w	r1, r1, #31
 8019dfe:	d007      	beq.n	8019e10 <__any_on+0x26>
 8019e00:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019e04:	fa24 f001 	lsr.w	r0, r4, r1
 8019e08:	fa00 f101 	lsl.w	r1, r0, r1
 8019e0c:	428c      	cmp	r4, r1
 8019e0e:	d10b      	bne.n	8019e28 <__any_on+0x3e>
 8019e10:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019e14:	4293      	cmp	r3, r2
 8019e16:	d803      	bhi.n	8019e20 <__any_on+0x36>
 8019e18:	2000      	movs	r0, #0
 8019e1a:	bd10      	pop	{r4, pc}
 8019e1c:	4603      	mov	r3, r0
 8019e1e:	e7f7      	b.n	8019e10 <__any_on+0x26>
 8019e20:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019e24:	2900      	cmp	r1, #0
 8019e26:	d0f5      	beq.n	8019e14 <__any_on+0x2a>
 8019e28:	2001      	movs	r0, #1
 8019e2a:	e7f6      	b.n	8019e1a <__any_on+0x30>

08019e2c <_calloc_r>:
 8019e2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019e2e:	fba1 2402 	umull	r2, r4, r1, r2
 8019e32:	b94c      	cbnz	r4, 8019e48 <_calloc_r+0x1c>
 8019e34:	4611      	mov	r1, r2
 8019e36:	9201      	str	r2, [sp, #4]
 8019e38:	f7fc f8b2 	bl	8015fa0 <_malloc_r>
 8019e3c:	9a01      	ldr	r2, [sp, #4]
 8019e3e:	4605      	mov	r5, r0
 8019e40:	b930      	cbnz	r0, 8019e50 <_calloc_r+0x24>
 8019e42:	4628      	mov	r0, r5
 8019e44:	b003      	add	sp, #12
 8019e46:	bd30      	pop	{r4, r5, pc}
 8019e48:	220c      	movs	r2, #12
 8019e4a:	6002      	str	r2, [r0, #0]
 8019e4c:	2500      	movs	r5, #0
 8019e4e:	e7f8      	b.n	8019e42 <_calloc_r+0x16>
 8019e50:	4621      	mov	r1, r4
 8019e52:	f7fc f831 	bl	8015eb8 <memset>
 8019e56:	e7f4      	b.n	8019e42 <_calloc_r+0x16>

08019e58 <__ssputs_r>:
 8019e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019e5c:	688e      	ldr	r6, [r1, #8]
 8019e5e:	429e      	cmp	r6, r3
 8019e60:	4682      	mov	sl, r0
 8019e62:	460c      	mov	r4, r1
 8019e64:	4690      	mov	r8, r2
 8019e66:	461f      	mov	r7, r3
 8019e68:	d838      	bhi.n	8019edc <__ssputs_r+0x84>
 8019e6a:	898a      	ldrh	r2, [r1, #12]
 8019e6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019e70:	d032      	beq.n	8019ed8 <__ssputs_r+0x80>
 8019e72:	6825      	ldr	r5, [r4, #0]
 8019e74:	6909      	ldr	r1, [r1, #16]
 8019e76:	eba5 0901 	sub.w	r9, r5, r1
 8019e7a:	6965      	ldr	r5, [r4, #20]
 8019e7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019e80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019e84:	3301      	adds	r3, #1
 8019e86:	444b      	add	r3, r9
 8019e88:	106d      	asrs	r5, r5, #1
 8019e8a:	429d      	cmp	r5, r3
 8019e8c:	bf38      	it	cc
 8019e8e:	461d      	movcc	r5, r3
 8019e90:	0553      	lsls	r3, r2, #21
 8019e92:	d531      	bpl.n	8019ef8 <__ssputs_r+0xa0>
 8019e94:	4629      	mov	r1, r5
 8019e96:	f7fc f883 	bl	8015fa0 <_malloc_r>
 8019e9a:	4606      	mov	r6, r0
 8019e9c:	b950      	cbnz	r0, 8019eb4 <__ssputs_r+0x5c>
 8019e9e:	230c      	movs	r3, #12
 8019ea0:	f8ca 3000 	str.w	r3, [sl]
 8019ea4:	89a3      	ldrh	r3, [r4, #12]
 8019ea6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019eaa:	81a3      	strh	r3, [r4, #12]
 8019eac:	f04f 30ff 	mov.w	r0, #4294967295
 8019eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019eb4:	6921      	ldr	r1, [r4, #16]
 8019eb6:	464a      	mov	r2, r9
 8019eb8:	f7ff fae0 	bl	801947c <memcpy>
 8019ebc:	89a3      	ldrh	r3, [r4, #12]
 8019ebe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019ec6:	81a3      	strh	r3, [r4, #12]
 8019ec8:	6126      	str	r6, [r4, #16]
 8019eca:	6165      	str	r5, [r4, #20]
 8019ecc:	444e      	add	r6, r9
 8019ece:	eba5 0509 	sub.w	r5, r5, r9
 8019ed2:	6026      	str	r6, [r4, #0]
 8019ed4:	60a5      	str	r5, [r4, #8]
 8019ed6:	463e      	mov	r6, r7
 8019ed8:	42be      	cmp	r6, r7
 8019eda:	d900      	bls.n	8019ede <__ssputs_r+0x86>
 8019edc:	463e      	mov	r6, r7
 8019ede:	6820      	ldr	r0, [r4, #0]
 8019ee0:	4632      	mov	r2, r6
 8019ee2:	4641      	mov	r1, r8
 8019ee4:	f000 fbaa 	bl	801a63c <memmove>
 8019ee8:	68a3      	ldr	r3, [r4, #8]
 8019eea:	1b9b      	subs	r3, r3, r6
 8019eec:	60a3      	str	r3, [r4, #8]
 8019eee:	6823      	ldr	r3, [r4, #0]
 8019ef0:	4433      	add	r3, r6
 8019ef2:	6023      	str	r3, [r4, #0]
 8019ef4:	2000      	movs	r0, #0
 8019ef6:	e7db      	b.n	8019eb0 <__ssputs_r+0x58>
 8019ef8:	462a      	mov	r2, r5
 8019efa:	f000 fbb9 	bl	801a670 <_realloc_r>
 8019efe:	4606      	mov	r6, r0
 8019f00:	2800      	cmp	r0, #0
 8019f02:	d1e1      	bne.n	8019ec8 <__ssputs_r+0x70>
 8019f04:	6921      	ldr	r1, [r4, #16]
 8019f06:	4650      	mov	r0, sl
 8019f08:	f7fb ffde 	bl	8015ec8 <_free_r>
 8019f0c:	e7c7      	b.n	8019e9e <__ssputs_r+0x46>
	...

08019f10 <_svfiprintf_r>:
 8019f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f14:	4698      	mov	r8, r3
 8019f16:	898b      	ldrh	r3, [r1, #12]
 8019f18:	061b      	lsls	r3, r3, #24
 8019f1a:	b09d      	sub	sp, #116	; 0x74
 8019f1c:	4607      	mov	r7, r0
 8019f1e:	460d      	mov	r5, r1
 8019f20:	4614      	mov	r4, r2
 8019f22:	d50e      	bpl.n	8019f42 <_svfiprintf_r+0x32>
 8019f24:	690b      	ldr	r3, [r1, #16]
 8019f26:	b963      	cbnz	r3, 8019f42 <_svfiprintf_r+0x32>
 8019f28:	2140      	movs	r1, #64	; 0x40
 8019f2a:	f7fc f839 	bl	8015fa0 <_malloc_r>
 8019f2e:	6028      	str	r0, [r5, #0]
 8019f30:	6128      	str	r0, [r5, #16]
 8019f32:	b920      	cbnz	r0, 8019f3e <_svfiprintf_r+0x2e>
 8019f34:	230c      	movs	r3, #12
 8019f36:	603b      	str	r3, [r7, #0]
 8019f38:	f04f 30ff 	mov.w	r0, #4294967295
 8019f3c:	e0d1      	b.n	801a0e2 <_svfiprintf_r+0x1d2>
 8019f3e:	2340      	movs	r3, #64	; 0x40
 8019f40:	616b      	str	r3, [r5, #20]
 8019f42:	2300      	movs	r3, #0
 8019f44:	9309      	str	r3, [sp, #36]	; 0x24
 8019f46:	2320      	movs	r3, #32
 8019f48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019f4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8019f50:	2330      	movs	r3, #48	; 0x30
 8019f52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801a0fc <_svfiprintf_r+0x1ec>
 8019f56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019f5a:	f04f 0901 	mov.w	r9, #1
 8019f5e:	4623      	mov	r3, r4
 8019f60:	469a      	mov	sl, r3
 8019f62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019f66:	b10a      	cbz	r2, 8019f6c <_svfiprintf_r+0x5c>
 8019f68:	2a25      	cmp	r2, #37	; 0x25
 8019f6a:	d1f9      	bne.n	8019f60 <_svfiprintf_r+0x50>
 8019f6c:	ebba 0b04 	subs.w	fp, sl, r4
 8019f70:	d00b      	beq.n	8019f8a <_svfiprintf_r+0x7a>
 8019f72:	465b      	mov	r3, fp
 8019f74:	4622      	mov	r2, r4
 8019f76:	4629      	mov	r1, r5
 8019f78:	4638      	mov	r0, r7
 8019f7a:	f7ff ff6d 	bl	8019e58 <__ssputs_r>
 8019f7e:	3001      	adds	r0, #1
 8019f80:	f000 80aa 	beq.w	801a0d8 <_svfiprintf_r+0x1c8>
 8019f84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019f86:	445a      	add	r2, fp
 8019f88:	9209      	str	r2, [sp, #36]	; 0x24
 8019f8a:	f89a 3000 	ldrb.w	r3, [sl]
 8019f8e:	2b00      	cmp	r3, #0
 8019f90:	f000 80a2 	beq.w	801a0d8 <_svfiprintf_r+0x1c8>
 8019f94:	2300      	movs	r3, #0
 8019f96:	f04f 32ff 	mov.w	r2, #4294967295
 8019f9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019f9e:	f10a 0a01 	add.w	sl, sl, #1
 8019fa2:	9304      	str	r3, [sp, #16]
 8019fa4:	9307      	str	r3, [sp, #28]
 8019fa6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019faa:	931a      	str	r3, [sp, #104]	; 0x68
 8019fac:	4654      	mov	r4, sl
 8019fae:	2205      	movs	r2, #5
 8019fb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019fb4:	4851      	ldr	r0, [pc, #324]	; (801a0fc <_svfiprintf_r+0x1ec>)
 8019fb6:	f7e6 f94b 	bl	8000250 <memchr>
 8019fba:	9a04      	ldr	r2, [sp, #16]
 8019fbc:	b9d8      	cbnz	r0, 8019ff6 <_svfiprintf_r+0xe6>
 8019fbe:	06d0      	lsls	r0, r2, #27
 8019fc0:	bf44      	itt	mi
 8019fc2:	2320      	movmi	r3, #32
 8019fc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019fc8:	0711      	lsls	r1, r2, #28
 8019fca:	bf44      	itt	mi
 8019fcc:	232b      	movmi	r3, #43	; 0x2b
 8019fce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019fd2:	f89a 3000 	ldrb.w	r3, [sl]
 8019fd6:	2b2a      	cmp	r3, #42	; 0x2a
 8019fd8:	d015      	beq.n	801a006 <_svfiprintf_r+0xf6>
 8019fda:	9a07      	ldr	r2, [sp, #28]
 8019fdc:	4654      	mov	r4, sl
 8019fde:	2000      	movs	r0, #0
 8019fe0:	f04f 0c0a 	mov.w	ip, #10
 8019fe4:	4621      	mov	r1, r4
 8019fe6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019fea:	3b30      	subs	r3, #48	; 0x30
 8019fec:	2b09      	cmp	r3, #9
 8019fee:	d94e      	bls.n	801a08e <_svfiprintf_r+0x17e>
 8019ff0:	b1b0      	cbz	r0, 801a020 <_svfiprintf_r+0x110>
 8019ff2:	9207      	str	r2, [sp, #28]
 8019ff4:	e014      	b.n	801a020 <_svfiprintf_r+0x110>
 8019ff6:	eba0 0308 	sub.w	r3, r0, r8
 8019ffa:	fa09 f303 	lsl.w	r3, r9, r3
 8019ffe:	4313      	orrs	r3, r2
 801a000:	9304      	str	r3, [sp, #16]
 801a002:	46a2      	mov	sl, r4
 801a004:	e7d2      	b.n	8019fac <_svfiprintf_r+0x9c>
 801a006:	9b03      	ldr	r3, [sp, #12]
 801a008:	1d19      	adds	r1, r3, #4
 801a00a:	681b      	ldr	r3, [r3, #0]
 801a00c:	9103      	str	r1, [sp, #12]
 801a00e:	2b00      	cmp	r3, #0
 801a010:	bfbb      	ittet	lt
 801a012:	425b      	neglt	r3, r3
 801a014:	f042 0202 	orrlt.w	r2, r2, #2
 801a018:	9307      	strge	r3, [sp, #28]
 801a01a:	9307      	strlt	r3, [sp, #28]
 801a01c:	bfb8      	it	lt
 801a01e:	9204      	strlt	r2, [sp, #16]
 801a020:	7823      	ldrb	r3, [r4, #0]
 801a022:	2b2e      	cmp	r3, #46	; 0x2e
 801a024:	d10c      	bne.n	801a040 <_svfiprintf_r+0x130>
 801a026:	7863      	ldrb	r3, [r4, #1]
 801a028:	2b2a      	cmp	r3, #42	; 0x2a
 801a02a:	d135      	bne.n	801a098 <_svfiprintf_r+0x188>
 801a02c:	9b03      	ldr	r3, [sp, #12]
 801a02e:	1d1a      	adds	r2, r3, #4
 801a030:	681b      	ldr	r3, [r3, #0]
 801a032:	9203      	str	r2, [sp, #12]
 801a034:	2b00      	cmp	r3, #0
 801a036:	bfb8      	it	lt
 801a038:	f04f 33ff 	movlt.w	r3, #4294967295
 801a03c:	3402      	adds	r4, #2
 801a03e:	9305      	str	r3, [sp, #20]
 801a040:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801a10c <_svfiprintf_r+0x1fc>
 801a044:	7821      	ldrb	r1, [r4, #0]
 801a046:	2203      	movs	r2, #3
 801a048:	4650      	mov	r0, sl
 801a04a:	f7e6 f901 	bl	8000250 <memchr>
 801a04e:	b140      	cbz	r0, 801a062 <_svfiprintf_r+0x152>
 801a050:	2340      	movs	r3, #64	; 0x40
 801a052:	eba0 000a 	sub.w	r0, r0, sl
 801a056:	fa03 f000 	lsl.w	r0, r3, r0
 801a05a:	9b04      	ldr	r3, [sp, #16]
 801a05c:	4303      	orrs	r3, r0
 801a05e:	3401      	adds	r4, #1
 801a060:	9304      	str	r3, [sp, #16]
 801a062:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a066:	4826      	ldr	r0, [pc, #152]	; (801a100 <_svfiprintf_r+0x1f0>)
 801a068:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a06c:	2206      	movs	r2, #6
 801a06e:	f7e6 f8ef 	bl	8000250 <memchr>
 801a072:	2800      	cmp	r0, #0
 801a074:	d038      	beq.n	801a0e8 <_svfiprintf_r+0x1d8>
 801a076:	4b23      	ldr	r3, [pc, #140]	; (801a104 <_svfiprintf_r+0x1f4>)
 801a078:	bb1b      	cbnz	r3, 801a0c2 <_svfiprintf_r+0x1b2>
 801a07a:	9b03      	ldr	r3, [sp, #12]
 801a07c:	3307      	adds	r3, #7
 801a07e:	f023 0307 	bic.w	r3, r3, #7
 801a082:	3308      	adds	r3, #8
 801a084:	9303      	str	r3, [sp, #12]
 801a086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a088:	4433      	add	r3, r6
 801a08a:	9309      	str	r3, [sp, #36]	; 0x24
 801a08c:	e767      	b.n	8019f5e <_svfiprintf_r+0x4e>
 801a08e:	fb0c 3202 	mla	r2, ip, r2, r3
 801a092:	460c      	mov	r4, r1
 801a094:	2001      	movs	r0, #1
 801a096:	e7a5      	b.n	8019fe4 <_svfiprintf_r+0xd4>
 801a098:	2300      	movs	r3, #0
 801a09a:	3401      	adds	r4, #1
 801a09c:	9305      	str	r3, [sp, #20]
 801a09e:	4619      	mov	r1, r3
 801a0a0:	f04f 0c0a 	mov.w	ip, #10
 801a0a4:	4620      	mov	r0, r4
 801a0a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a0aa:	3a30      	subs	r2, #48	; 0x30
 801a0ac:	2a09      	cmp	r2, #9
 801a0ae:	d903      	bls.n	801a0b8 <_svfiprintf_r+0x1a8>
 801a0b0:	2b00      	cmp	r3, #0
 801a0b2:	d0c5      	beq.n	801a040 <_svfiprintf_r+0x130>
 801a0b4:	9105      	str	r1, [sp, #20]
 801a0b6:	e7c3      	b.n	801a040 <_svfiprintf_r+0x130>
 801a0b8:	fb0c 2101 	mla	r1, ip, r1, r2
 801a0bc:	4604      	mov	r4, r0
 801a0be:	2301      	movs	r3, #1
 801a0c0:	e7f0      	b.n	801a0a4 <_svfiprintf_r+0x194>
 801a0c2:	ab03      	add	r3, sp, #12
 801a0c4:	9300      	str	r3, [sp, #0]
 801a0c6:	462a      	mov	r2, r5
 801a0c8:	4b0f      	ldr	r3, [pc, #60]	; (801a108 <_svfiprintf_r+0x1f8>)
 801a0ca:	a904      	add	r1, sp, #16
 801a0cc:	4638      	mov	r0, r7
 801a0ce:	f7fc f86b 	bl	80161a8 <_printf_float>
 801a0d2:	1c42      	adds	r2, r0, #1
 801a0d4:	4606      	mov	r6, r0
 801a0d6:	d1d6      	bne.n	801a086 <_svfiprintf_r+0x176>
 801a0d8:	89ab      	ldrh	r3, [r5, #12]
 801a0da:	065b      	lsls	r3, r3, #25
 801a0dc:	f53f af2c 	bmi.w	8019f38 <_svfiprintf_r+0x28>
 801a0e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a0e2:	b01d      	add	sp, #116	; 0x74
 801a0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0e8:	ab03      	add	r3, sp, #12
 801a0ea:	9300      	str	r3, [sp, #0]
 801a0ec:	462a      	mov	r2, r5
 801a0ee:	4b06      	ldr	r3, [pc, #24]	; (801a108 <_svfiprintf_r+0x1f8>)
 801a0f0:	a904      	add	r1, sp, #16
 801a0f2:	4638      	mov	r0, r7
 801a0f4:	f7fc fae4 	bl	80166c0 <_printf_i>
 801a0f8:	e7eb      	b.n	801a0d2 <_svfiprintf_r+0x1c2>
 801a0fa:	bf00      	nop
 801a0fc:	0801bba4 	.word	0x0801bba4
 801a100:	0801bbae 	.word	0x0801bbae
 801a104:	080161a9 	.word	0x080161a9
 801a108:	08019e59 	.word	0x08019e59
 801a10c:	0801bbaa 	.word	0x0801bbaa

0801a110 <__sfputc_r>:
 801a110:	6893      	ldr	r3, [r2, #8]
 801a112:	3b01      	subs	r3, #1
 801a114:	2b00      	cmp	r3, #0
 801a116:	b410      	push	{r4}
 801a118:	6093      	str	r3, [r2, #8]
 801a11a:	da08      	bge.n	801a12e <__sfputc_r+0x1e>
 801a11c:	6994      	ldr	r4, [r2, #24]
 801a11e:	42a3      	cmp	r3, r4
 801a120:	db01      	blt.n	801a126 <__sfputc_r+0x16>
 801a122:	290a      	cmp	r1, #10
 801a124:	d103      	bne.n	801a12e <__sfputc_r+0x1e>
 801a126:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a12a:	f7fd bd49 	b.w	8017bc0 <__swbuf_r>
 801a12e:	6813      	ldr	r3, [r2, #0]
 801a130:	1c58      	adds	r0, r3, #1
 801a132:	6010      	str	r0, [r2, #0]
 801a134:	7019      	strb	r1, [r3, #0]
 801a136:	4608      	mov	r0, r1
 801a138:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a13c:	4770      	bx	lr

0801a13e <__sfputs_r>:
 801a13e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a140:	4606      	mov	r6, r0
 801a142:	460f      	mov	r7, r1
 801a144:	4614      	mov	r4, r2
 801a146:	18d5      	adds	r5, r2, r3
 801a148:	42ac      	cmp	r4, r5
 801a14a:	d101      	bne.n	801a150 <__sfputs_r+0x12>
 801a14c:	2000      	movs	r0, #0
 801a14e:	e007      	b.n	801a160 <__sfputs_r+0x22>
 801a150:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a154:	463a      	mov	r2, r7
 801a156:	4630      	mov	r0, r6
 801a158:	f7ff ffda 	bl	801a110 <__sfputc_r>
 801a15c:	1c43      	adds	r3, r0, #1
 801a15e:	d1f3      	bne.n	801a148 <__sfputs_r+0xa>
 801a160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a164 <_vfiprintf_r>:
 801a164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a168:	460d      	mov	r5, r1
 801a16a:	b09d      	sub	sp, #116	; 0x74
 801a16c:	4614      	mov	r4, r2
 801a16e:	4698      	mov	r8, r3
 801a170:	4606      	mov	r6, r0
 801a172:	b118      	cbz	r0, 801a17c <_vfiprintf_r+0x18>
 801a174:	6983      	ldr	r3, [r0, #24]
 801a176:	b90b      	cbnz	r3, 801a17c <_vfiprintf_r+0x18>
 801a178:	f7fe fcf6 	bl	8018b68 <__sinit>
 801a17c:	4b89      	ldr	r3, [pc, #548]	; (801a3a4 <_vfiprintf_r+0x240>)
 801a17e:	429d      	cmp	r5, r3
 801a180:	d11b      	bne.n	801a1ba <_vfiprintf_r+0x56>
 801a182:	6875      	ldr	r5, [r6, #4]
 801a184:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a186:	07d9      	lsls	r1, r3, #31
 801a188:	d405      	bmi.n	801a196 <_vfiprintf_r+0x32>
 801a18a:	89ab      	ldrh	r3, [r5, #12]
 801a18c:	059a      	lsls	r2, r3, #22
 801a18e:	d402      	bmi.n	801a196 <_vfiprintf_r+0x32>
 801a190:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a192:	f7ff f8fa 	bl	801938a <__retarget_lock_acquire_recursive>
 801a196:	89ab      	ldrh	r3, [r5, #12]
 801a198:	071b      	lsls	r3, r3, #28
 801a19a:	d501      	bpl.n	801a1a0 <_vfiprintf_r+0x3c>
 801a19c:	692b      	ldr	r3, [r5, #16]
 801a19e:	b9eb      	cbnz	r3, 801a1dc <_vfiprintf_r+0x78>
 801a1a0:	4629      	mov	r1, r5
 801a1a2:	4630      	mov	r0, r6
 801a1a4:	f7fd fd5e 	bl	8017c64 <__swsetup_r>
 801a1a8:	b1c0      	cbz	r0, 801a1dc <_vfiprintf_r+0x78>
 801a1aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a1ac:	07dc      	lsls	r4, r3, #31
 801a1ae:	d50e      	bpl.n	801a1ce <_vfiprintf_r+0x6a>
 801a1b0:	f04f 30ff 	mov.w	r0, #4294967295
 801a1b4:	b01d      	add	sp, #116	; 0x74
 801a1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1ba:	4b7b      	ldr	r3, [pc, #492]	; (801a3a8 <_vfiprintf_r+0x244>)
 801a1bc:	429d      	cmp	r5, r3
 801a1be:	d101      	bne.n	801a1c4 <_vfiprintf_r+0x60>
 801a1c0:	68b5      	ldr	r5, [r6, #8]
 801a1c2:	e7df      	b.n	801a184 <_vfiprintf_r+0x20>
 801a1c4:	4b79      	ldr	r3, [pc, #484]	; (801a3ac <_vfiprintf_r+0x248>)
 801a1c6:	429d      	cmp	r5, r3
 801a1c8:	bf08      	it	eq
 801a1ca:	68f5      	ldreq	r5, [r6, #12]
 801a1cc:	e7da      	b.n	801a184 <_vfiprintf_r+0x20>
 801a1ce:	89ab      	ldrh	r3, [r5, #12]
 801a1d0:	0598      	lsls	r0, r3, #22
 801a1d2:	d4ed      	bmi.n	801a1b0 <_vfiprintf_r+0x4c>
 801a1d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a1d6:	f7ff f8d9 	bl	801938c <__retarget_lock_release_recursive>
 801a1da:	e7e9      	b.n	801a1b0 <_vfiprintf_r+0x4c>
 801a1dc:	2300      	movs	r3, #0
 801a1de:	9309      	str	r3, [sp, #36]	; 0x24
 801a1e0:	2320      	movs	r3, #32
 801a1e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a1e6:	f8cd 800c 	str.w	r8, [sp, #12]
 801a1ea:	2330      	movs	r3, #48	; 0x30
 801a1ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a3b0 <_vfiprintf_r+0x24c>
 801a1f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a1f4:	f04f 0901 	mov.w	r9, #1
 801a1f8:	4623      	mov	r3, r4
 801a1fa:	469a      	mov	sl, r3
 801a1fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a200:	b10a      	cbz	r2, 801a206 <_vfiprintf_r+0xa2>
 801a202:	2a25      	cmp	r2, #37	; 0x25
 801a204:	d1f9      	bne.n	801a1fa <_vfiprintf_r+0x96>
 801a206:	ebba 0b04 	subs.w	fp, sl, r4
 801a20a:	d00b      	beq.n	801a224 <_vfiprintf_r+0xc0>
 801a20c:	465b      	mov	r3, fp
 801a20e:	4622      	mov	r2, r4
 801a210:	4629      	mov	r1, r5
 801a212:	4630      	mov	r0, r6
 801a214:	f7ff ff93 	bl	801a13e <__sfputs_r>
 801a218:	3001      	adds	r0, #1
 801a21a:	f000 80aa 	beq.w	801a372 <_vfiprintf_r+0x20e>
 801a21e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a220:	445a      	add	r2, fp
 801a222:	9209      	str	r2, [sp, #36]	; 0x24
 801a224:	f89a 3000 	ldrb.w	r3, [sl]
 801a228:	2b00      	cmp	r3, #0
 801a22a:	f000 80a2 	beq.w	801a372 <_vfiprintf_r+0x20e>
 801a22e:	2300      	movs	r3, #0
 801a230:	f04f 32ff 	mov.w	r2, #4294967295
 801a234:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a238:	f10a 0a01 	add.w	sl, sl, #1
 801a23c:	9304      	str	r3, [sp, #16]
 801a23e:	9307      	str	r3, [sp, #28]
 801a240:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a244:	931a      	str	r3, [sp, #104]	; 0x68
 801a246:	4654      	mov	r4, sl
 801a248:	2205      	movs	r2, #5
 801a24a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a24e:	4858      	ldr	r0, [pc, #352]	; (801a3b0 <_vfiprintf_r+0x24c>)
 801a250:	f7e5 fffe 	bl	8000250 <memchr>
 801a254:	9a04      	ldr	r2, [sp, #16]
 801a256:	b9d8      	cbnz	r0, 801a290 <_vfiprintf_r+0x12c>
 801a258:	06d1      	lsls	r1, r2, #27
 801a25a:	bf44      	itt	mi
 801a25c:	2320      	movmi	r3, #32
 801a25e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a262:	0713      	lsls	r3, r2, #28
 801a264:	bf44      	itt	mi
 801a266:	232b      	movmi	r3, #43	; 0x2b
 801a268:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a26c:	f89a 3000 	ldrb.w	r3, [sl]
 801a270:	2b2a      	cmp	r3, #42	; 0x2a
 801a272:	d015      	beq.n	801a2a0 <_vfiprintf_r+0x13c>
 801a274:	9a07      	ldr	r2, [sp, #28]
 801a276:	4654      	mov	r4, sl
 801a278:	2000      	movs	r0, #0
 801a27a:	f04f 0c0a 	mov.w	ip, #10
 801a27e:	4621      	mov	r1, r4
 801a280:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a284:	3b30      	subs	r3, #48	; 0x30
 801a286:	2b09      	cmp	r3, #9
 801a288:	d94e      	bls.n	801a328 <_vfiprintf_r+0x1c4>
 801a28a:	b1b0      	cbz	r0, 801a2ba <_vfiprintf_r+0x156>
 801a28c:	9207      	str	r2, [sp, #28]
 801a28e:	e014      	b.n	801a2ba <_vfiprintf_r+0x156>
 801a290:	eba0 0308 	sub.w	r3, r0, r8
 801a294:	fa09 f303 	lsl.w	r3, r9, r3
 801a298:	4313      	orrs	r3, r2
 801a29a:	9304      	str	r3, [sp, #16]
 801a29c:	46a2      	mov	sl, r4
 801a29e:	e7d2      	b.n	801a246 <_vfiprintf_r+0xe2>
 801a2a0:	9b03      	ldr	r3, [sp, #12]
 801a2a2:	1d19      	adds	r1, r3, #4
 801a2a4:	681b      	ldr	r3, [r3, #0]
 801a2a6:	9103      	str	r1, [sp, #12]
 801a2a8:	2b00      	cmp	r3, #0
 801a2aa:	bfbb      	ittet	lt
 801a2ac:	425b      	neglt	r3, r3
 801a2ae:	f042 0202 	orrlt.w	r2, r2, #2
 801a2b2:	9307      	strge	r3, [sp, #28]
 801a2b4:	9307      	strlt	r3, [sp, #28]
 801a2b6:	bfb8      	it	lt
 801a2b8:	9204      	strlt	r2, [sp, #16]
 801a2ba:	7823      	ldrb	r3, [r4, #0]
 801a2bc:	2b2e      	cmp	r3, #46	; 0x2e
 801a2be:	d10c      	bne.n	801a2da <_vfiprintf_r+0x176>
 801a2c0:	7863      	ldrb	r3, [r4, #1]
 801a2c2:	2b2a      	cmp	r3, #42	; 0x2a
 801a2c4:	d135      	bne.n	801a332 <_vfiprintf_r+0x1ce>
 801a2c6:	9b03      	ldr	r3, [sp, #12]
 801a2c8:	1d1a      	adds	r2, r3, #4
 801a2ca:	681b      	ldr	r3, [r3, #0]
 801a2cc:	9203      	str	r2, [sp, #12]
 801a2ce:	2b00      	cmp	r3, #0
 801a2d0:	bfb8      	it	lt
 801a2d2:	f04f 33ff 	movlt.w	r3, #4294967295
 801a2d6:	3402      	adds	r4, #2
 801a2d8:	9305      	str	r3, [sp, #20]
 801a2da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a3c0 <_vfiprintf_r+0x25c>
 801a2de:	7821      	ldrb	r1, [r4, #0]
 801a2e0:	2203      	movs	r2, #3
 801a2e2:	4650      	mov	r0, sl
 801a2e4:	f7e5 ffb4 	bl	8000250 <memchr>
 801a2e8:	b140      	cbz	r0, 801a2fc <_vfiprintf_r+0x198>
 801a2ea:	2340      	movs	r3, #64	; 0x40
 801a2ec:	eba0 000a 	sub.w	r0, r0, sl
 801a2f0:	fa03 f000 	lsl.w	r0, r3, r0
 801a2f4:	9b04      	ldr	r3, [sp, #16]
 801a2f6:	4303      	orrs	r3, r0
 801a2f8:	3401      	adds	r4, #1
 801a2fa:	9304      	str	r3, [sp, #16]
 801a2fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a300:	482c      	ldr	r0, [pc, #176]	; (801a3b4 <_vfiprintf_r+0x250>)
 801a302:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a306:	2206      	movs	r2, #6
 801a308:	f7e5 ffa2 	bl	8000250 <memchr>
 801a30c:	2800      	cmp	r0, #0
 801a30e:	d03f      	beq.n	801a390 <_vfiprintf_r+0x22c>
 801a310:	4b29      	ldr	r3, [pc, #164]	; (801a3b8 <_vfiprintf_r+0x254>)
 801a312:	bb1b      	cbnz	r3, 801a35c <_vfiprintf_r+0x1f8>
 801a314:	9b03      	ldr	r3, [sp, #12]
 801a316:	3307      	adds	r3, #7
 801a318:	f023 0307 	bic.w	r3, r3, #7
 801a31c:	3308      	adds	r3, #8
 801a31e:	9303      	str	r3, [sp, #12]
 801a320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a322:	443b      	add	r3, r7
 801a324:	9309      	str	r3, [sp, #36]	; 0x24
 801a326:	e767      	b.n	801a1f8 <_vfiprintf_r+0x94>
 801a328:	fb0c 3202 	mla	r2, ip, r2, r3
 801a32c:	460c      	mov	r4, r1
 801a32e:	2001      	movs	r0, #1
 801a330:	e7a5      	b.n	801a27e <_vfiprintf_r+0x11a>
 801a332:	2300      	movs	r3, #0
 801a334:	3401      	adds	r4, #1
 801a336:	9305      	str	r3, [sp, #20]
 801a338:	4619      	mov	r1, r3
 801a33a:	f04f 0c0a 	mov.w	ip, #10
 801a33e:	4620      	mov	r0, r4
 801a340:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a344:	3a30      	subs	r2, #48	; 0x30
 801a346:	2a09      	cmp	r2, #9
 801a348:	d903      	bls.n	801a352 <_vfiprintf_r+0x1ee>
 801a34a:	2b00      	cmp	r3, #0
 801a34c:	d0c5      	beq.n	801a2da <_vfiprintf_r+0x176>
 801a34e:	9105      	str	r1, [sp, #20]
 801a350:	e7c3      	b.n	801a2da <_vfiprintf_r+0x176>
 801a352:	fb0c 2101 	mla	r1, ip, r1, r2
 801a356:	4604      	mov	r4, r0
 801a358:	2301      	movs	r3, #1
 801a35a:	e7f0      	b.n	801a33e <_vfiprintf_r+0x1da>
 801a35c:	ab03      	add	r3, sp, #12
 801a35e:	9300      	str	r3, [sp, #0]
 801a360:	462a      	mov	r2, r5
 801a362:	4b16      	ldr	r3, [pc, #88]	; (801a3bc <_vfiprintf_r+0x258>)
 801a364:	a904      	add	r1, sp, #16
 801a366:	4630      	mov	r0, r6
 801a368:	f7fb ff1e 	bl	80161a8 <_printf_float>
 801a36c:	4607      	mov	r7, r0
 801a36e:	1c78      	adds	r0, r7, #1
 801a370:	d1d6      	bne.n	801a320 <_vfiprintf_r+0x1bc>
 801a372:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a374:	07d9      	lsls	r1, r3, #31
 801a376:	d405      	bmi.n	801a384 <_vfiprintf_r+0x220>
 801a378:	89ab      	ldrh	r3, [r5, #12]
 801a37a:	059a      	lsls	r2, r3, #22
 801a37c:	d402      	bmi.n	801a384 <_vfiprintf_r+0x220>
 801a37e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a380:	f7ff f804 	bl	801938c <__retarget_lock_release_recursive>
 801a384:	89ab      	ldrh	r3, [r5, #12]
 801a386:	065b      	lsls	r3, r3, #25
 801a388:	f53f af12 	bmi.w	801a1b0 <_vfiprintf_r+0x4c>
 801a38c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a38e:	e711      	b.n	801a1b4 <_vfiprintf_r+0x50>
 801a390:	ab03      	add	r3, sp, #12
 801a392:	9300      	str	r3, [sp, #0]
 801a394:	462a      	mov	r2, r5
 801a396:	4b09      	ldr	r3, [pc, #36]	; (801a3bc <_vfiprintf_r+0x258>)
 801a398:	a904      	add	r1, sp, #16
 801a39a:	4630      	mov	r0, r6
 801a39c:	f7fc f990 	bl	80166c0 <_printf_i>
 801a3a0:	e7e4      	b.n	801a36c <_vfiprintf_r+0x208>
 801a3a2:	bf00      	nop
 801a3a4:	0801b98c 	.word	0x0801b98c
 801a3a8:	0801b9ac 	.word	0x0801b9ac
 801a3ac:	0801b96c 	.word	0x0801b96c
 801a3b0:	0801bba4 	.word	0x0801bba4
 801a3b4:	0801bbae 	.word	0x0801bbae
 801a3b8:	080161a9 	.word	0x080161a9
 801a3bc:	0801a13f 	.word	0x0801a13f
 801a3c0:	0801bbaa 	.word	0x0801bbaa

0801a3c4 <_putc_r>:
 801a3c4:	b570      	push	{r4, r5, r6, lr}
 801a3c6:	460d      	mov	r5, r1
 801a3c8:	4614      	mov	r4, r2
 801a3ca:	4606      	mov	r6, r0
 801a3cc:	b118      	cbz	r0, 801a3d6 <_putc_r+0x12>
 801a3ce:	6983      	ldr	r3, [r0, #24]
 801a3d0:	b90b      	cbnz	r3, 801a3d6 <_putc_r+0x12>
 801a3d2:	f7fe fbc9 	bl	8018b68 <__sinit>
 801a3d6:	4b1c      	ldr	r3, [pc, #112]	; (801a448 <_putc_r+0x84>)
 801a3d8:	429c      	cmp	r4, r3
 801a3da:	d124      	bne.n	801a426 <_putc_r+0x62>
 801a3dc:	6874      	ldr	r4, [r6, #4]
 801a3de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a3e0:	07d8      	lsls	r0, r3, #31
 801a3e2:	d405      	bmi.n	801a3f0 <_putc_r+0x2c>
 801a3e4:	89a3      	ldrh	r3, [r4, #12]
 801a3e6:	0599      	lsls	r1, r3, #22
 801a3e8:	d402      	bmi.n	801a3f0 <_putc_r+0x2c>
 801a3ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a3ec:	f7fe ffcd 	bl	801938a <__retarget_lock_acquire_recursive>
 801a3f0:	68a3      	ldr	r3, [r4, #8]
 801a3f2:	3b01      	subs	r3, #1
 801a3f4:	2b00      	cmp	r3, #0
 801a3f6:	60a3      	str	r3, [r4, #8]
 801a3f8:	da05      	bge.n	801a406 <_putc_r+0x42>
 801a3fa:	69a2      	ldr	r2, [r4, #24]
 801a3fc:	4293      	cmp	r3, r2
 801a3fe:	db1c      	blt.n	801a43a <_putc_r+0x76>
 801a400:	b2eb      	uxtb	r3, r5
 801a402:	2b0a      	cmp	r3, #10
 801a404:	d019      	beq.n	801a43a <_putc_r+0x76>
 801a406:	6823      	ldr	r3, [r4, #0]
 801a408:	1c5a      	adds	r2, r3, #1
 801a40a:	6022      	str	r2, [r4, #0]
 801a40c:	701d      	strb	r5, [r3, #0]
 801a40e:	b2ed      	uxtb	r5, r5
 801a410:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a412:	07da      	lsls	r2, r3, #31
 801a414:	d405      	bmi.n	801a422 <_putc_r+0x5e>
 801a416:	89a3      	ldrh	r3, [r4, #12]
 801a418:	059b      	lsls	r3, r3, #22
 801a41a:	d402      	bmi.n	801a422 <_putc_r+0x5e>
 801a41c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a41e:	f7fe ffb5 	bl	801938c <__retarget_lock_release_recursive>
 801a422:	4628      	mov	r0, r5
 801a424:	bd70      	pop	{r4, r5, r6, pc}
 801a426:	4b09      	ldr	r3, [pc, #36]	; (801a44c <_putc_r+0x88>)
 801a428:	429c      	cmp	r4, r3
 801a42a:	d101      	bne.n	801a430 <_putc_r+0x6c>
 801a42c:	68b4      	ldr	r4, [r6, #8]
 801a42e:	e7d6      	b.n	801a3de <_putc_r+0x1a>
 801a430:	4b07      	ldr	r3, [pc, #28]	; (801a450 <_putc_r+0x8c>)
 801a432:	429c      	cmp	r4, r3
 801a434:	bf08      	it	eq
 801a436:	68f4      	ldreq	r4, [r6, #12]
 801a438:	e7d1      	b.n	801a3de <_putc_r+0x1a>
 801a43a:	4629      	mov	r1, r5
 801a43c:	4622      	mov	r2, r4
 801a43e:	4630      	mov	r0, r6
 801a440:	f7fd fbbe 	bl	8017bc0 <__swbuf_r>
 801a444:	4605      	mov	r5, r0
 801a446:	e7e3      	b.n	801a410 <_putc_r+0x4c>
 801a448:	0801b98c 	.word	0x0801b98c
 801a44c:	0801b9ac 	.word	0x0801b9ac
 801a450:	0801b96c 	.word	0x0801b96c
 801a454:	00000000 	.word	0x00000000

0801a458 <nan>:
 801a458:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801a460 <nan+0x8>
 801a45c:	4770      	bx	lr
 801a45e:	bf00      	nop
 801a460:	00000000 	.word	0x00000000
 801a464:	7ff80000 	.word	0x7ff80000

0801a468 <__sread>:
 801a468:	b510      	push	{r4, lr}
 801a46a:	460c      	mov	r4, r1
 801a46c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a470:	f000 f92e 	bl	801a6d0 <_read_r>
 801a474:	2800      	cmp	r0, #0
 801a476:	bfab      	itete	ge
 801a478:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a47a:	89a3      	ldrhlt	r3, [r4, #12]
 801a47c:	181b      	addge	r3, r3, r0
 801a47e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a482:	bfac      	ite	ge
 801a484:	6563      	strge	r3, [r4, #84]	; 0x54
 801a486:	81a3      	strhlt	r3, [r4, #12]
 801a488:	bd10      	pop	{r4, pc}

0801a48a <__swrite>:
 801a48a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a48e:	461f      	mov	r7, r3
 801a490:	898b      	ldrh	r3, [r1, #12]
 801a492:	05db      	lsls	r3, r3, #23
 801a494:	4605      	mov	r5, r0
 801a496:	460c      	mov	r4, r1
 801a498:	4616      	mov	r6, r2
 801a49a:	d505      	bpl.n	801a4a8 <__swrite+0x1e>
 801a49c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a4a0:	2302      	movs	r3, #2
 801a4a2:	2200      	movs	r2, #0
 801a4a4:	f000 f8b8 	bl	801a618 <_lseek_r>
 801a4a8:	89a3      	ldrh	r3, [r4, #12]
 801a4aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a4ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a4b2:	81a3      	strh	r3, [r4, #12]
 801a4b4:	4632      	mov	r2, r6
 801a4b6:	463b      	mov	r3, r7
 801a4b8:	4628      	mov	r0, r5
 801a4ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a4be:	f000 b837 	b.w	801a530 <_write_r>

0801a4c2 <__sseek>:
 801a4c2:	b510      	push	{r4, lr}
 801a4c4:	460c      	mov	r4, r1
 801a4c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a4ca:	f000 f8a5 	bl	801a618 <_lseek_r>
 801a4ce:	1c43      	adds	r3, r0, #1
 801a4d0:	89a3      	ldrh	r3, [r4, #12]
 801a4d2:	bf15      	itete	ne
 801a4d4:	6560      	strne	r0, [r4, #84]	; 0x54
 801a4d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a4da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a4de:	81a3      	strheq	r3, [r4, #12]
 801a4e0:	bf18      	it	ne
 801a4e2:	81a3      	strhne	r3, [r4, #12]
 801a4e4:	bd10      	pop	{r4, pc}

0801a4e6 <__sclose>:
 801a4e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a4ea:	f000 b851 	b.w	801a590 <_close_r>

0801a4ee <strncmp>:
 801a4ee:	b510      	push	{r4, lr}
 801a4f0:	b17a      	cbz	r2, 801a512 <strncmp+0x24>
 801a4f2:	4603      	mov	r3, r0
 801a4f4:	3901      	subs	r1, #1
 801a4f6:	1884      	adds	r4, r0, r2
 801a4f8:	f813 0b01 	ldrb.w	r0, [r3], #1
 801a4fc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801a500:	4290      	cmp	r0, r2
 801a502:	d101      	bne.n	801a508 <strncmp+0x1a>
 801a504:	42a3      	cmp	r3, r4
 801a506:	d101      	bne.n	801a50c <strncmp+0x1e>
 801a508:	1a80      	subs	r0, r0, r2
 801a50a:	bd10      	pop	{r4, pc}
 801a50c:	2800      	cmp	r0, #0
 801a50e:	d1f3      	bne.n	801a4f8 <strncmp+0xa>
 801a510:	e7fa      	b.n	801a508 <strncmp+0x1a>
 801a512:	4610      	mov	r0, r2
 801a514:	e7f9      	b.n	801a50a <strncmp+0x1c>

0801a516 <__ascii_wctomb>:
 801a516:	b149      	cbz	r1, 801a52c <__ascii_wctomb+0x16>
 801a518:	2aff      	cmp	r2, #255	; 0xff
 801a51a:	bf85      	ittet	hi
 801a51c:	238a      	movhi	r3, #138	; 0x8a
 801a51e:	6003      	strhi	r3, [r0, #0]
 801a520:	700a      	strbls	r2, [r1, #0]
 801a522:	f04f 30ff 	movhi.w	r0, #4294967295
 801a526:	bf98      	it	ls
 801a528:	2001      	movls	r0, #1
 801a52a:	4770      	bx	lr
 801a52c:	4608      	mov	r0, r1
 801a52e:	4770      	bx	lr

0801a530 <_write_r>:
 801a530:	b538      	push	{r3, r4, r5, lr}
 801a532:	4d07      	ldr	r5, [pc, #28]	; (801a550 <_write_r+0x20>)
 801a534:	4604      	mov	r4, r0
 801a536:	4608      	mov	r0, r1
 801a538:	4611      	mov	r1, r2
 801a53a:	2200      	movs	r2, #0
 801a53c:	602a      	str	r2, [r5, #0]
 801a53e:	461a      	mov	r2, r3
 801a540:	f7e8 fa4f 	bl	80029e2 <_write>
 801a544:	1c43      	adds	r3, r0, #1
 801a546:	d102      	bne.n	801a54e <_write_r+0x1e>
 801a548:	682b      	ldr	r3, [r5, #0]
 801a54a:	b103      	cbz	r3, 801a54e <_write_r+0x1e>
 801a54c:	6023      	str	r3, [r4, #0]
 801a54e:	bd38      	pop	{r3, r4, r5, pc}
 801a550:	200061bc 	.word	0x200061bc

0801a554 <__assert_func>:
 801a554:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a556:	4614      	mov	r4, r2
 801a558:	461a      	mov	r2, r3
 801a55a:	4b09      	ldr	r3, [pc, #36]	; (801a580 <__assert_func+0x2c>)
 801a55c:	681b      	ldr	r3, [r3, #0]
 801a55e:	4605      	mov	r5, r0
 801a560:	68d8      	ldr	r0, [r3, #12]
 801a562:	b14c      	cbz	r4, 801a578 <__assert_func+0x24>
 801a564:	4b07      	ldr	r3, [pc, #28]	; (801a584 <__assert_func+0x30>)
 801a566:	9100      	str	r1, [sp, #0]
 801a568:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a56c:	4906      	ldr	r1, [pc, #24]	; (801a588 <__assert_func+0x34>)
 801a56e:	462b      	mov	r3, r5
 801a570:	f000 f81e 	bl	801a5b0 <fiprintf>
 801a574:	f000 f8be 	bl	801a6f4 <abort>
 801a578:	4b04      	ldr	r3, [pc, #16]	; (801a58c <__assert_func+0x38>)
 801a57a:	461c      	mov	r4, r3
 801a57c:	e7f3      	b.n	801a566 <__assert_func+0x12>
 801a57e:	bf00      	nop
 801a580:	2000011c 	.word	0x2000011c
 801a584:	0801bbb5 	.word	0x0801bbb5
 801a588:	0801bbc2 	.word	0x0801bbc2
 801a58c:	0801bbf0 	.word	0x0801bbf0

0801a590 <_close_r>:
 801a590:	b538      	push	{r3, r4, r5, lr}
 801a592:	4d06      	ldr	r5, [pc, #24]	; (801a5ac <_close_r+0x1c>)
 801a594:	2300      	movs	r3, #0
 801a596:	4604      	mov	r4, r0
 801a598:	4608      	mov	r0, r1
 801a59a:	602b      	str	r3, [r5, #0]
 801a59c:	f7e8 fa3d 	bl	8002a1a <_close>
 801a5a0:	1c43      	adds	r3, r0, #1
 801a5a2:	d102      	bne.n	801a5aa <_close_r+0x1a>
 801a5a4:	682b      	ldr	r3, [r5, #0]
 801a5a6:	b103      	cbz	r3, 801a5aa <_close_r+0x1a>
 801a5a8:	6023      	str	r3, [r4, #0]
 801a5aa:	bd38      	pop	{r3, r4, r5, pc}
 801a5ac:	200061bc 	.word	0x200061bc

0801a5b0 <fiprintf>:
 801a5b0:	b40e      	push	{r1, r2, r3}
 801a5b2:	b503      	push	{r0, r1, lr}
 801a5b4:	4601      	mov	r1, r0
 801a5b6:	ab03      	add	r3, sp, #12
 801a5b8:	4805      	ldr	r0, [pc, #20]	; (801a5d0 <fiprintf+0x20>)
 801a5ba:	f853 2b04 	ldr.w	r2, [r3], #4
 801a5be:	6800      	ldr	r0, [r0, #0]
 801a5c0:	9301      	str	r3, [sp, #4]
 801a5c2:	f7ff fdcf 	bl	801a164 <_vfiprintf_r>
 801a5c6:	b002      	add	sp, #8
 801a5c8:	f85d eb04 	ldr.w	lr, [sp], #4
 801a5cc:	b003      	add	sp, #12
 801a5ce:	4770      	bx	lr
 801a5d0:	2000011c 	.word	0x2000011c

0801a5d4 <_fstat_r>:
 801a5d4:	b538      	push	{r3, r4, r5, lr}
 801a5d6:	4d07      	ldr	r5, [pc, #28]	; (801a5f4 <_fstat_r+0x20>)
 801a5d8:	2300      	movs	r3, #0
 801a5da:	4604      	mov	r4, r0
 801a5dc:	4608      	mov	r0, r1
 801a5de:	4611      	mov	r1, r2
 801a5e0:	602b      	str	r3, [r5, #0]
 801a5e2:	f7e8 fa26 	bl	8002a32 <_fstat>
 801a5e6:	1c43      	adds	r3, r0, #1
 801a5e8:	d102      	bne.n	801a5f0 <_fstat_r+0x1c>
 801a5ea:	682b      	ldr	r3, [r5, #0]
 801a5ec:	b103      	cbz	r3, 801a5f0 <_fstat_r+0x1c>
 801a5ee:	6023      	str	r3, [r4, #0]
 801a5f0:	bd38      	pop	{r3, r4, r5, pc}
 801a5f2:	bf00      	nop
 801a5f4:	200061bc 	.word	0x200061bc

0801a5f8 <_isatty_r>:
 801a5f8:	b538      	push	{r3, r4, r5, lr}
 801a5fa:	4d06      	ldr	r5, [pc, #24]	; (801a614 <_isatty_r+0x1c>)
 801a5fc:	2300      	movs	r3, #0
 801a5fe:	4604      	mov	r4, r0
 801a600:	4608      	mov	r0, r1
 801a602:	602b      	str	r3, [r5, #0]
 801a604:	f7e8 fa25 	bl	8002a52 <_isatty>
 801a608:	1c43      	adds	r3, r0, #1
 801a60a:	d102      	bne.n	801a612 <_isatty_r+0x1a>
 801a60c:	682b      	ldr	r3, [r5, #0]
 801a60e:	b103      	cbz	r3, 801a612 <_isatty_r+0x1a>
 801a610:	6023      	str	r3, [r4, #0]
 801a612:	bd38      	pop	{r3, r4, r5, pc}
 801a614:	200061bc 	.word	0x200061bc

0801a618 <_lseek_r>:
 801a618:	b538      	push	{r3, r4, r5, lr}
 801a61a:	4d07      	ldr	r5, [pc, #28]	; (801a638 <_lseek_r+0x20>)
 801a61c:	4604      	mov	r4, r0
 801a61e:	4608      	mov	r0, r1
 801a620:	4611      	mov	r1, r2
 801a622:	2200      	movs	r2, #0
 801a624:	602a      	str	r2, [r5, #0]
 801a626:	461a      	mov	r2, r3
 801a628:	f7e8 fa1e 	bl	8002a68 <_lseek>
 801a62c:	1c43      	adds	r3, r0, #1
 801a62e:	d102      	bne.n	801a636 <_lseek_r+0x1e>
 801a630:	682b      	ldr	r3, [r5, #0]
 801a632:	b103      	cbz	r3, 801a636 <_lseek_r+0x1e>
 801a634:	6023      	str	r3, [r4, #0]
 801a636:	bd38      	pop	{r3, r4, r5, pc}
 801a638:	200061bc 	.word	0x200061bc

0801a63c <memmove>:
 801a63c:	4288      	cmp	r0, r1
 801a63e:	b510      	push	{r4, lr}
 801a640:	eb01 0402 	add.w	r4, r1, r2
 801a644:	d902      	bls.n	801a64c <memmove+0x10>
 801a646:	4284      	cmp	r4, r0
 801a648:	4623      	mov	r3, r4
 801a64a:	d807      	bhi.n	801a65c <memmove+0x20>
 801a64c:	1e43      	subs	r3, r0, #1
 801a64e:	42a1      	cmp	r1, r4
 801a650:	d008      	beq.n	801a664 <memmove+0x28>
 801a652:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a656:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a65a:	e7f8      	b.n	801a64e <memmove+0x12>
 801a65c:	4402      	add	r2, r0
 801a65e:	4601      	mov	r1, r0
 801a660:	428a      	cmp	r2, r1
 801a662:	d100      	bne.n	801a666 <memmove+0x2a>
 801a664:	bd10      	pop	{r4, pc}
 801a666:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a66a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a66e:	e7f7      	b.n	801a660 <memmove+0x24>

0801a670 <_realloc_r>:
 801a670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a674:	4680      	mov	r8, r0
 801a676:	4614      	mov	r4, r2
 801a678:	460e      	mov	r6, r1
 801a67a:	b921      	cbnz	r1, 801a686 <_realloc_r+0x16>
 801a67c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a680:	4611      	mov	r1, r2
 801a682:	f7fb bc8d 	b.w	8015fa0 <_malloc_r>
 801a686:	b92a      	cbnz	r2, 801a694 <_realloc_r+0x24>
 801a688:	f7fb fc1e 	bl	8015ec8 <_free_r>
 801a68c:	4625      	mov	r5, r4
 801a68e:	4628      	mov	r0, r5
 801a690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a694:	f000 f835 	bl	801a702 <_malloc_usable_size_r>
 801a698:	4284      	cmp	r4, r0
 801a69a:	4607      	mov	r7, r0
 801a69c:	d802      	bhi.n	801a6a4 <_realloc_r+0x34>
 801a69e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801a6a2:	d812      	bhi.n	801a6ca <_realloc_r+0x5a>
 801a6a4:	4621      	mov	r1, r4
 801a6a6:	4640      	mov	r0, r8
 801a6a8:	f7fb fc7a 	bl	8015fa0 <_malloc_r>
 801a6ac:	4605      	mov	r5, r0
 801a6ae:	2800      	cmp	r0, #0
 801a6b0:	d0ed      	beq.n	801a68e <_realloc_r+0x1e>
 801a6b2:	42bc      	cmp	r4, r7
 801a6b4:	4622      	mov	r2, r4
 801a6b6:	4631      	mov	r1, r6
 801a6b8:	bf28      	it	cs
 801a6ba:	463a      	movcs	r2, r7
 801a6bc:	f7fe fede 	bl	801947c <memcpy>
 801a6c0:	4631      	mov	r1, r6
 801a6c2:	4640      	mov	r0, r8
 801a6c4:	f7fb fc00 	bl	8015ec8 <_free_r>
 801a6c8:	e7e1      	b.n	801a68e <_realloc_r+0x1e>
 801a6ca:	4635      	mov	r5, r6
 801a6cc:	e7df      	b.n	801a68e <_realloc_r+0x1e>
	...

0801a6d0 <_read_r>:
 801a6d0:	b538      	push	{r3, r4, r5, lr}
 801a6d2:	4d07      	ldr	r5, [pc, #28]	; (801a6f0 <_read_r+0x20>)
 801a6d4:	4604      	mov	r4, r0
 801a6d6:	4608      	mov	r0, r1
 801a6d8:	4611      	mov	r1, r2
 801a6da:	2200      	movs	r2, #0
 801a6dc:	602a      	str	r2, [r5, #0]
 801a6de:	461a      	mov	r2, r3
 801a6e0:	f7e8 f962 	bl	80029a8 <_read>
 801a6e4:	1c43      	adds	r3, r0, #1
 801a6e6:	d102      	bne.n	801a6ee <_read_r+0x1e>
 801a6e8:	682b      	ldr	r3, [r5, #0]
 801a6ea:	b103      	cbz	r3, 801a6ee <_read_r+0x1e>
 801a6ec:	6023      	str	r3, [r4, #0]
 801a6ee:	bd38      	pop	{r3, r4, r5, pc}
 801a6f0:	200061bc 	.word	0x200061bc

0801a6f4 <abort>:
 801a6f4:	b508      	push	{r3, lr}
 801a6f6:	2006      	movs	r0, #6
 801a6f8:	f000 f834 	bl	801a764 <raise>
 801a6fc:	2001      	movs	r0, #1
 801a6fe:	f7e8 f949 	bl	8002994 <_exit>

0801a702 <_malloc_usable_size_r>:
 801a702:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a706:	1f18      	subs	r0, r3, #4
 801a708:	2b00      	cmp	r3, #0
 801a70a:	bfbc      	itt	lt
 801a70c:	580b      	ldrlt	r3, [r1, r0]
 801a70e:	18c0      	addlt	r0, r0, r3
 801a710:	4770      	bx	lr

0801a712 <_raise_r>:
 801a712:	291f      	cmp	r1, #31
 801a714:	b538      	push	{r3, r4, r5, lr}
 801a716:	4604      	mov	r4, r0
 801a718:	460d      	mov	r5, r1
 801a71a:	d904      	bls.n	801a726 <_raise_r+0x14>
 801a71c:	2316      	movs	r3, #22
 801a71e:	6003      	str	r3, [r0, #0]
 801a720:	f04f 30ff 	mov.w	r0, #4294967295
 801a724:	bd38      	pop	{r3, r4, r5, pc}
 801a726:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a728:	b112      	cbz	r2, 801a730 <_raise_r+0x1e>
 801a72a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a72e:	b94b      	cbnz	r3, 801a744 <_raise_r+0x32>
 801a730:	4620      	mov	r0, r4
 801a732:	f000 f831 	bl	801a798 <_getpid_r>
 801a736:	462a      	mov	r2, r5
 801a738:	4601      	mov	r1, r0
 801a73a:	4620      	mov	r0, r4
 801a73c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a740:	f000 b818 	b.w	801a774 <_kill_r>
 801a744:	2b01      	cmp	r3, #1
 801a746:	d00a      	beq.n	801a75e <_raise_r+0x4c>
 801a748:	1c59      	adds	r1, r3, #1
 801a74a:	d103      	bne.n	801a754 <_raise_r+0x42>
 801a74c:	2316      	movs	r3, #22
 801a74e:	6003      	str	r3, [r0, #0]
 801a750:	2001      	movs	r0, #1
 801a752:	e7e7      	b.n	801a724 <_raise_r+0x12>
 801a754:	2400      	movs	r4, #0
 801a756:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a75a:	4628      	mov	r0, r5
 801a75c:	4798      	blx	r3
 801a75e:	2000      	movs	r0, #0
 801a760:	e7e0      	b.n	801a724 <_raise_r+0x12>
	...

0801a764 <raise>:
 801a764:	4b02      	ldr	r3, [pc, #8]	; (801a770 <raise+0xc>)
 801a766:	4601      	mov	r1, r0
 801a768:	6818      	ldr	r0, [r3, #0]
 801a76a:	f7ff bfd2 	b.w	801a712 <_raise_r>
 801a76e:	bf00      	nop
 801a770:	2000011c 	.word	0x2000011c

0801a774 <_kill_r>:
 801a774:	b538      	push	{r3, r4, r5, lr}
 801a776:	4d07      	ldr	r5, [pc, #28]	; (801a794 <_kill_r+0x20>)
 801a778:	2300      	movs	r3, #0
 801a77a:	4604      	mov	r4, r0
 801a77c:	4608      	mov	r0, r1
 801a77e:	4611      	mov	r1, r2
 801a780:	602b      	str	r3, [r5, #0]
 801a782:	f7e8 f8f7 	bl	8002974 <_kill>
 801a786:	1c43      	adds	r3, r0, #1
 801a788:	d102      	bne.n	801a790 <_kill_r+0x1c>
 801a78a:	682b      	ldr	r3, [r5, #0]
 801a78c:	b103      	cbz	r3, 801a790 <_kill_r+0x1c>
 801a78e:	6023      	str	r3, [r4, #0]
 801a790:	bd38      	pop	{r3, r4, r5, pc}
 801a792:	bf00      	nop
 801a794:	200061bc 	.word	0x200061bc

0801a798 <_getpid_r>:
 801a798:	f7e8 b8e4 	b.w	8002964 <_getpid>

0801a79c <checkint>:
 801a79c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801a7a0:	f240 33fe 	movw	r3, #1022	; 0x3fe
 801a7a4:	429a      	cmp	r2, r3
 801a7a6:	b570      	push	{r4, r5, r6, lr}
 801a7a8:	dd2a      	ble.n	801a800 <checkint+0x64>
 801a7aa:	f240 4333 	movw	r3, #1075	; 0x433
 801a7ae:	429a      	cmp	r2, r3
 801a7b0:	dc24      	bgt.n	801a7fc <checkint+0x60>
 801a7b2:	1a9b      	subs	r3, r3, r2
 801a7b4:	f1a3 0620 	sub.w	r6, r3, #32
 801a7b8:	f04f 32ff 	mov.w	r2, #4294967295
 801a7bc:	fa02 f403 	lsl.w	r4, r2, r3
 801a7c0:	fa02 f606 	lsl.w	r6, r2, r6
 801a7c4:	f1c3 0520 	rsb	r5, r3, #32
 801a7c8:	fa22 f505 	lsr.w	r5, r2, r5
 801a7cc:	4334      	orrs	r4, r6
 801a7ce:	432c      	orrs	r4, r5
 801a7d0:	409a      	lsls	r2, r3
 801a7d2:	ea20 0202 	bic.w	r2, r0, r2
 801a7d6:	ea21 0404 	bic.w	r4, r1, r4
 801a7da:	4322      	orrs	r2, r4
 801a7dc:	f1a3 0420 	sub.w	r4, r3, #32
 801a7e0:	f1c3 0220 	rsb	r2, r3, #32
 801a7e4:	d10c      	bne.n	801a800 <checkint+0x64>
 801a7e6:	40d8      	lsrs	r0, r3
 801a7e8:	fa01 f302 	lsl.w	r3, r1, r2
 801a7ec:	4318      	orrs	r0, r3
 801a7ee:	40e1      	lsrs	r1, r4
 801a7f0:	4308      	orrs	r0, r1
 801a7f2:	f000 0001 	and.w	r0, r0, #1
 801a7f6:	f1d0 0002 	rsbs	r0, r0, #2
 801a7fa:	bd70      	pop	{r4, r5, r6, pc}
 801a7fc:	2002      	movs	r0, #2
 801a7fe:	e7fc      	b.n	801a7fa <checkint+0x5e>
 801a800:	2000      	movs	r0, #0
 801a802:	e7fa      	b.n	801a7fa <checkint+0x5e>
 801a804:	0000      	movs	r0, r0
	...

0801a808 <pow>:
 801a808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a80c:	ee10 4a90 	vmov	r4, s1
 801a810:	ed2d 8b0a 	vpush	{d8-d12}
 801a814:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 801a818:	ee11 7a90 	vmov	r7, s3
 801a81c:	f10a 32ff 	add.w	r2, sl, #4294967295
 801a820:	f240 73fd 	movw	r3, #2045	; 0x7fd
 801a824:	429a      	cmp	r2, r3
 801a826:	ee10 6a10 	vmov	r6, s0
 801a82a:	ee11 0a10 	vmov	r0, s2
 801a82e:	b086      	sub	sp, #24
 801a830:	46d4      	mov	ip, sl
 801a832:	ea4f 5517 	mov.w	r5, r7, lsr #20
 801a836:	d806      	bhi.n	801a846 <pow+0x3e>
 801a838:	f3c5 030a 	ubfx	r3, r5, #0, #11
 801a83c:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 801a840:	2b7f      	cmp	r3, #127	; 0x7f
 801a842:	f240 8156 	bls.w	801aaf2 <pow+0x2ea>
 801a846:	1802      	adds	r2, r0, r0
 801a848:	eb47 0107 	adc.w	r1, r7, r7
 801a84c:	f06f 0e01 	mvn.w	lr, #1
 801a850:	f112 39ff 	adds.w	r9, r2, #4294967295
 801a854:	f141 38ff 	adc.w	r8, r1, #4294967295
 801a858:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 801a85c:	45ce      	cmp	lr, r9
 801a85e:	eb73 0808 	sbcs.w	r8, r3, r8
 801a862:	d23f      	bcs.n	801a8e4 <pow+0xdc>
 801a864:	ea52 0301 	orrs.w	r3, r2, r1
 801a868:	f04f 0300 	mov.w	r3, #0
 801a86c:	d10c      	bne.n	801a888 <pow+0x80>
 801a86e:	19b6      	adds	r6, r6, r6
 801a870:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 801a874:	4164      	adcs	r4, r4
 801a876:	42b3      	cmp	r3, r6
 801a878:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801a87c:	41a3      	sbcs	r3, r4
 801a87e:	f0c0 808c 	bcc.w	801a99a <pow+0x192>
 801a882:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801a886:	e028      	b.n	801a8da <pow+0xd2>
 801a888:	4da3      	ldr	r5, [pc, #652]	; (801ab18 <pow+0x310>)
 801a88a:	42ac      	cmp	r4, r5
 801a88c:	bf08      	it	eq
 801a88e:	429e      	cmpeq	r6, r3
 801a890:	d107      	bne.n	801a8a2 <pow+0x9a>
 801a892:	1800      	adds	r0, r0, r0
 801a894:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 801a898:	417f      	adcs	r7, r7
 801a89a:	4283      	cmp	r3, r0
 801a89c:	4b9f      	ldr	r3, [pc, #636]	; (801ab1c <pow+0x314>)
 801a89e:	41bb      	sbcs	r3, r7
 801a8a0:	e7ed      	b.n	801a87e <pow+0x76>
 801a8a2:	19b6      	adds	r6, r6, r6
 801a8a4:	489e      	ldr	r0, [pc, #632]	; (801ab20 <pow+0x318>)
 801a8a6:	4164      	adcs	r4, r4
 801a8a8:	42b3      	cmp	r3, r6
 801a8aa:	eb70 0504 	sbcs.w	r5, r0, r4
 801a8ae:	d374      	bcc.n	801a99a <pow+0x192>
 801a8b0:	4281      	cmp	r1, r0
 801a8b2:	bf08      	it	eq
 801a8b4:	429a      	cmpeq	r2, r3
 801a8b6:	d170      	bne.n	801a99a <pow+0x192>
 801a8b8:	4a9a      	ldr	r2, [pc, #616]	; (801ab24 <pow+0x31c>)
 801a8ba:	4294      	cmp	r4, r2
 801a8bc:	bf08      	it	eq
 801a8be:	429e      	cmpeq	r6, r3
 801a8c0:	d0df      	beq.n	801a882 <pow+0x7a>
 801a8c2:	4294      	cmp	r4, r2
 801a8c4:	ea6f 0707 	mvn.w	r7, r7
 801a8c8:	bf34      	ite	cc
 801a8ca:	2400      	movcc	r4, #0
 801a8cc:	2401      	movcs	r4, #1
 801a8ce:	0fff      	lsrs	r7, r7, #31
 801a8d0:	42bc      	cmp	r4, r7
 801a8d2:	f040 81d9 	bne.w	801ac88 <pow+0x480>
 801a8d6:	ee21 0b01 	vmul.f64	d0, d1, d1
 801a8da:	b006      	add	sp, #24
 801a8dc:	ecbd 8b0a 	vpop	{d8-d12}
 801a8e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a8e4:	eb16 0806 	adds.w	r8, r6, r6
 801a8e8:	eb44 0904 	adc.w	r9, r4, r4
 801a8ec:	f118 31ff 	adds.w	r1, r8, #4294967295
 801a8f0:	f169 0200 	sbc.w	r2, r9, #0
 801a8f4:	458e      	cmp	lr, r1
 801a8f6:	4193      	sbcs	r3, r2
 801a8f8:	d223      	bcs.n	801a942 <pow+0x13a>
 801a8fa:	ee20 0b00 	vmul.f64	d0, d0, d0
 801a8fe:	2c00      	cmp	r4, #0
 801a900:	da12      	bge.n	801a928 <pow+0x120>
 801a902:	4639      	mov	r1, r7
 801a904:	f7ff ff4a 	bl	801a79c <checkint>
 801a908:	2801      	cmp	r0, #1
 801a90a:	d10d      	bne.n	801a928 <pow+0x120>
 801a90c:	eeb1 0b40 	vneg.f64	d0, d0
 801a910:	ea58 0309 	orrs.w	r3, r8, r9
 801a914:	d10a      	bne.n	801a92c <pow+0x124>
 801a916:	2f00      	cmp	r7, #0
 801a918:	dadf      	bge.n	801a8da <pow+0xd2>
 801a91a:	b006      	add	sp, #24
 801a91c:	ecbd 8b0a 	vpop	{d8-d12}
 801a920:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a924:	f000 ba14 	b.w	801ad50 <__math_divzero>
 801a928:	2000      	movs	r0, #0
 801a92a:	e7f1      	b.n	801a910 <pow+0x108>
 801a92c:	2f00      	cmp	r7, #0
 801a92e:	dad4      	bge.n	801a8da <pow+0xd2>
 801a930:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801a934:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801a938:	ed8d 7b00 	vstr	d7, [sp]
 801a93c:	ed9d 0b00 	vldr	d0, [sp]
 801a940:	e7cb      	b.n	801a8da <pow+0xd2>
 801a942:	2c00      	cmp	r4, #0
 801a944:	da2c      	bge.n	801a9a0 <pow+0x198>
 801a946:	4639      	mov	r1, r7
 801a948:	f7ff ff28 	bl	801a79c <checkint>
 801a94c:	b930      	cbnz	r0, 801a95c <pow+0x154>
 801a94e:	b006      	add	sp, #24
 801a950:	ecbd 8b0a 	vpop	{d8-d12}
 801a954:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a958:	f000 ba12 	b.w	801ad80 <__math_invalid>
 801a95c:	2801      	cmp	r0, #1
 801a95e:	bf14      	ite	ne
 801a960:	2000      	movne	r0, #0
 801a962:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 801a966:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801a96a:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 801a96e:	f3c5 020a 	ubfx	r2, r5, #0, #11
 801a972:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 801a976:	2b7f      	cmp	r3, #127	; 0x7f
 801a978:	d92d      	bls.n	801a9d6 <pow+0x1ce>
 801a97a:	4b67      	ldr	r3, [pc, #412]	; (801ab18 <pow+0x310>)
 801a97c:	2000      	movs	r0, #0
 801a97e:	429c      	cmp	r4, r3
 801a980:	bf08      	it	eq
 801a982:	4286      	cmpeq	r6, r0
 801a984:	f43f af7d 	beq.w	801a882 <pow+0x7a>
 801a988:	f240 31bd 	movw	r1, #957	; 0x3bd
 801a98c:	428a      	cmp	r2, r1
 801a98e:	d80c      	bhi.n	801a9aa <pow+0x1a2>
 801a990:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801a994:	42b0      	cmp	r0, r6
 801a996:	41a3      	sbcs	r3, r4
 801a998:	d204      	bcs.n	801a9a4 <pow+0x19c>
 801a99a:	ee31 0b00 	vadd.f64	d0, d1, d0
 801a99e:	e79c      	b.n	801a8da <pow+0xd2>
 801a9a0:	2000      	movs	r0, #0
 801a9a2:	e7e4      	b.n	801a96e <pow+0x166>
 801a9a4:	ee30 0b41 	vsub.f64	d0, d0, d1
 801a9a8:	e797      	b.n	801a8da <pow+0xd2>
 801a9aa:	2e01      	cmp	r6, #1
 801a9ac:	eb74 0303 	sbcs.w	r3, r4, r3
 801a9b0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801a9b4:	bf34      	ite	cc
 801a9b6:	2301      	movcc	r3, #1
 801a9b8:	2300      	movcs	r3, #0
 801a9ba:	4295      	cmp	r5, r2
 801a9bc:	bf8c      	ite	hi
 801a9be:	2500      	movhi	r5, #0
 801a9c0:	2501      	movls	r5, #1
 801a9c2:	42ab      	cmp	r3, r5
 801a9c4:	f000 809d 	beq.w	801ab02 <pow+0x2fa>
 801a9c8:	b006      	add	sp, #24
 801a9ca:	ecbd 8b0a 	vpop	{d8-d12}
 801a9ce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a9d2:	f000 b9b5 	b.w	801ad40 <__math_oflow>
 801a9d6:	f1bc 0f00 	cmp.w	ip, #0
 801a9da:	d10b      	bne.n	801a9f4 <pow+0x1ec>
 801a9dc:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 801ab10 <pow+0x308>
 801a9e0:	ee20 7b07 	vmul.f64	d7, d0, d7
 801a9e4:	ec53 2b17 	vmov	r2, r3, d7
 801a9e8:	ee17 6a10 	vmov	r6, s14
 801a9ec:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 801a9f0:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 801a9f4:	4b4c      	ldr	r3, [pc, #304]	; (801ab28 <pow+0x320>)
 801a9f6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 801a9fa:	4423      	add	r3, r4
 801a9fc:	f3c3 3246 	ubfx	r2, r3, #13, #7
 801aa00:	1519      	asrs	r1, r3, #20
 801aa02:	0d1b      	lsrs	r3, r3, #20
 801aa04:	051b      	lsls	r3, r3, #20
 801aa06:	eba4 0903 	sub.w	r9, r4, r3
 801aa0a:	4b48      	ldr	r3, [pc, #288]	; (801ab2c <pow+0x324>)
 801aa0c:	ee04 1a10 	vmov	s8, r1
 801aa10:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 801aa14:	f1b6 0800 	subs.w	r8, r6, #0
 801aa18:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 801aa1c:	ec49 8b15 	vmov	d5, r8, r9
 801aa20:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 801aa24:	eea5 6b07 	vfma.f64	d6, d5, d7
 801aa28:	ed93 7b00 	vldr	d7, [r3]
 801aa2c:	ed93 5b02 	vldr	d5, [r3, #8]
 801aa30:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 801aa34:	eea4 2b07 	vfma.f64	d2, d4, d7
 801aa38:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 801aa3c:	ee36 ab02 	vadd.f64	d10, d6, d2
 801aa40:	ee32 2b4a 	vsub.f64	d2, d2, d10
 801aa44:	eea4 7b05 	vfma.f64	d7, d4, d5
 801aa48:	ed93 5b04 	vldr	d5, [r3, #16]
 801aa4c:	ee32 2b06 	vadd.f64	d2, d2, d6
 801aa50:	ee37 7b02 	vadd.f64	d7, d7, d2
 801aa54:	ee26 5b05 	vmul.f64	d5, d6, d5
 801aa58:	ed93 4b08 	vldr	d4, [r3, #32]
 801aa5c:	ee26 0b05 	vmul.f64	d0, d6, d5
 801aa60:	eeb0 9b40 	vmov.f64	d9, d0
 801aa64:	ee95 9b06 	vfnms.f64	d9, d5, d6
 801aa68:	ed93 5b06 	vldr	d5, [r3, #24]
 801aa6c:	ee3a 8b00 	vadd.f64	d8, d10, d0
 801aa70:	ee26 bb00 	vmul.f64	d11, d6, d0
 801aa74:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 801aa78:	eea6 5b04 	vfma.f64	d5, d6, d4
 801aa7c:	ee3a ab48 	vsub.f64	d10, d10, d8
 801aa80:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 801aa84:	ee37 9b09 	vadd.f64	d9, d7, d9
 801aa88:	ee3a ab00 	vadd.f64	d10, d10, d0
 801aa8c:	eea6 4b03 	vfma.f64	d4, d6, d3
 801aa90:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 801aa94:	ee39 ab0a 	vadd.f64	d10, d9, d10
 801aa98:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 801aa9c:	eea6 3b0c 	vfma.f64	d3, d6, d12
 801aaa0:	eea0 4b03 	vfma.f64	d4, d0, d3
 801aaa4:	eea0 5b04 	vfma.f64	d5, d0, d4
 801aaa8:	eeab ab05 	vfma.f64	d10, d11, d5
 801aaac:	ee38 6b0a 	vadd.f64	d6, d8, d10
 801aab0:	ee21 7b06 	vmul.f64	d7, d1, d6
 801aab4:	ee17 3a90 	vmov	r3, s15
 801aab8:	eeb0 5b47 	vmov.f64	d5, d7
 801aabc:	f3c3 560a 	ubfx	r6, r3, #20, #11
 801aac0:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 801aac4:	18b2      	adds	r2, r6, r2
 801aac6:	2a3e      	cmp	r2, #62	; 0x3e
 801aac8:	ee91 5b06 	vfnms.f64	d5, d1, d6
 801aacc:	ee38 8b46 	vsub.f64	d8, d8, d6
 801aad0:	ee38 ab0a 	vadd.f64	d10, d8, d10
 801aad4:	eea1 5b0a 	vfma.f64	d5, d1, d10
 801aad8:	d92b      	bls.n	801ab32 <pow+0x32a>
 801aada:	2a00      	cmp	r2, #0
 801aadc:	da0b      	bge.n	801aaf6 <pow+0x2ee>
 801aade:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801aae2:	ee37 0b00 	vadd.f64	d0, d7, d0
 801aae6:	2800      	cmp	r0, #0
 801aae8:	f43f aef7 	beq.w	801a8da <pow+0xd2>
 801aaec:	eeb1 0b40 	vneg.f64	d0, d0
 801aaf0:	e6f3      	b.n	801a8da <pow+0xd2>
 801aaf2:	2000      	movs	r0, #0
 801aaf4:	e77e      	b.n	801a9f4 <pow+0x1ec>
 801aaf6:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 801aafa:	d919      	bls.n	801ab30 <pow+0x328>
 801aafc:	2b00      	cmp	r3, #0
 801aafe:	f6bf af63 	bge.w	801a9c8 <pow+0x1c0>
 801ab02:	b006      	add	sp, #24
 801ab04:	ecbd 8b0a 	vpop	{d8-d12}
 801ab08:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ab0c:	f000 b910 	b.w	801ad30 <__math_uflow>
 801ab10:	00000000 	.word	0x00000000
 801ab14:	43300000 	.word	0x43300000
 801ab18:	3ff00000 	.word	0x3ff00000
 801ab1c:	fff00000 	.word	0xfff00000
 801ab20:	ffe00000 	.word	0xffe00000
 801ab24:	7fe00000 	.word	0x7fe00000
 801ab28:	c0196aab 	.word	0xc0196aab
 801ab2c:	0801bbf8 	.word	0x0801bbf8
 801ab30:	2600      	movs	r6, #0
 801ab32:	495d      	ldr	r1, [pc, #372]	; (801aca8 <pow+0x4a0>)
 801ab34:	ed91 4b02 	vldr	d4, [r1, #8]
 801ab38:	ed91 3b00 	vldr	d3, [r1]
 801ab3c:	eeb0 6b44 	vmov.f64	d6, d4
 801ab40:	eea7 6b03 	vfma.f64	d6, d7, d3
 801ab44:	ee16 5a10 	vmov	r5, s12
 801ab48:	ee36 6b44 	vsub.f64	d6, d6, d4
 801ab4c:	ed91 4b04 	vldr	d4, [r1, #16]
 801ab50:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 801ab54:	eea6 7b04 	vfma.f64	d7, d6, d4
 801ab58:	eeb0 0b47 	vmov.f64	d0, d7
 801ab5c:	ed91 7b06 	vldr	d7, [r1, #24]
 801ab60:	18dc      	adds	r4, r3, r3
 801ab62:	f104 030f 	add.w	r3, r4, #15
 801ab66:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 801ab6a:	eea6 0b07 	vfma.f64	d0, d6, d7
 801ab6e:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 801ab72:	ee35 0b00 	vadd.f64	d0, d5, d0
 801ab76:	ee20 6b00 	vmul.f64	d6, d0, d0
 801ab7a:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 801ab7e:	ed91 5b08 	vldr	d5, [r1, #32]
 801ab82:	ee30 7b07 	vadd.f64	d7, d0, d7
 801ab86:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 801ab8a:	eea0 5b04 	vfma.f64	d5, d0, d4
 801ab8e:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 801ab92:	eea6 7b05 	vfma.f64	d7, d6, d5
 801ab96:	ee26 6b06 	vmul.f64	d6, d6, d6
 801ab9a:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 801ab9e:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 801aba2:	f8d2 e004 	ldr.w	lr, [r2, #4]
 801aba6:	eea0 5b04 	vfma.f64	d5, d0, d4
 801abaa:	1940      	adds	r0, r0, r5
 801abac:	2700      	movs	r7, #0
 801abae:	eb17 020c 	adds.w	r2, r7, ip
 801abb2:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 801abb6:	eea6 7b05 	vfma.f64	d7, d6, d5
 801abba:	2e00      	cmp	r6, #0
 801abbc:	d15f      	bne.n	801ac7e <pow+0x476>
 801abbe:	42bd      	cmp	r5, r7
 801abc0:	db13      	blt.n	801abea <pow+0x3e2>
 801abc2:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 801abc6:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 801abca:	4610      	mov	r0, r2
 801abcc:	ec41 0b10 	vmov	d0, r0, r1
 801abd0:	eea7 0b00 	vfma.f64	d0, d7, d0
 801abd4:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801ac90 <pow+0x488>
 801abd8:	ee20 0b07 	vmul.f64	d0, d0, d7
 801abdc:	b006      	add	sp, #24
 801abde:	ecbd 8b0a 	vpop	{d8-d12}
 801abe2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801abe6:	f000 b8e3 	b.w	801adb0 <__math_check_oflow>
 801abea:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801abee:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 801abf2:	4610      	mov	r0, r2
 801abf4:	ec41 0b15 	vmov	d5, r0, r1
 801abf8:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801abfc:	ee27 6b05 	vmul.f64	d6, d7, d5
 801ac00:	ee35 7b06 	vadd.f64	d7, d5, d6
 801ac04:	eeb0 3bc7 	vabs.f64	d3, d7
 801ac08:	eeb4 3bc4 	vcmpe.f64	d3, d4
 801ac0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac10:	ed9f 0b21 	vldr	d0, [pc, #132]	; 801ac98 <pow+0x490>
 801ac14:	d52a      	bpl.n	801ac6c <pow+0x464>
 801ac16:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801ac1a:	ee35 5b47 	vsub.f64	d5, d5, d7
 801ac1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac22:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 801ac26:	ee35 6b06 	vadd.f64	d6, d5, d6
 801ac2a:	bf48      	it	mi
 801ac2c:	eeb0 4b43 	vmovmi.f64	d4, d3
 801ac30:	ee37 3b04 	vadd.f64	d3, d7, d4
 801ac34:	ee34 5b43 	vsub.f64	d5, d4, d3
 801ac38:	ee35 7b07 	vadd.f64	d7, d5, d7
 801ac3c:	ee37 7b06 	vadd.f64	d7, d7, d6
 801ac40:	ee37 7b03 	vadd.f64	d7, d7, d3
 801ac44:	ee37 7b44 	vsub.f64	d7, d7, d4
 801ac48:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801ac4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac50:	d104      	bne.n	801ac5c <pow+0x454>
 801ac52:	4632      	mov	r2, r6
 801ac54:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 801ac58:	ec43 2b17 	vmov	d7, r2, r3
 801ac5c:	ed8d 0b02 	vstr	d0, [sp, #8]
 801ac60:	ed9d 6b02 	vldr	d6, [sp, #8]
 801ac64:	ee26 6b00 	vmul.f64	d6, d6, d0
 801ac68:	ed8d 6b04 	vstr	d6, [sp, #16]
 801ac6c:	ee27 0b00 	vmul.f64	d0, d7, d0
 801ac70:	b006      	add	sp, #24
 801ac72:	ecbd 8b0a 	vpop	{d8-d12}
 801ac76:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ac7a:	f000 b890 	b.w	801ad9e <__math_check_uflow>
 801ac7e:	ec43 2b10 	vmov	d0, r2, r3
 801ac82:	eea7 0b00 	vfma.f64	d0, d7, d0
 801ac86:	e628      	b.n	801a8da <pow+0xd2>
 801ac88:	ed9f 0b05 	vldr	d0, [pc, #20]	; 801aca0 <pow+0x498>
 801ac8c:	e625      	b.n	801a8da <pow+0xd2>
 801ac8e:	bf00      	nop
 801ac90:	00000000 	.word	0x00000000
 801ac94:	7f000000 	.word	0x7f000000
 801ac98:	00000000 	.word	0x00000000
 801ac9c:	00100000 	.word	0x00100000
	...
 801aca8:	0801cc40 	.word	0x0801cc40
 801acac:	00000000 	.word	0x00000000

0801acb0 <sqrt>:
 801acb0:	b508      	push	{r3, lr}
 801acb2:	ed2d 8b04 	vpush	{d8-d9}
 801acb6:	eeb0 8b40 	vmov.f64	d8, d0
 801acba:	f000 f819 	bl	801acf0 <__ieee754_sqrt>
 801acbe:	eeb4 8b48 	vcmp.f64	d8, d8
 801acc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801acc6:	d60c      	bvs.n	801ace2 <sqrt+0x32>
 801acc8:	ed9f 9b07 	vldr	d9, [pc, #28]	; 801ace8 <sqrt+0x38>
 801accc:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801acd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801acd4:	d505      	bpl.n	801ace2 <sqrt+0x32>
 801acd6:	f7fb f8bd 	bl	8015e54 <__errno>
 801acda:	ee89 0b09 	vdiv.f64	d0, d9, d9
 801acde:	2321      	movs	r3, #33	; 0x21
 801ace0:	6003      	str	r3, [r0, #0]
 801ace2:	ecbd 8b04 	vpop	{d8-d9}
 801ace6:	bd08      	pop	{r3, pc}
	...

0801acf0 <__ieee754_sqrt>:
 801acf0:	eeb1 0bc0 	vsqrt.f64	d0, d0
 801acf4:	4770      	bx	lr

0801acf6 <with_errno>:
 801acf6:	b513      	push	{r0, r1, r4, lr}
 801acf8:	4604      	mov	r4, r0
 801acfa:	ed8d 0b00 	vstr	d0, [sp]
 801acfe:	f7fb f8a9 	bl	8015e54 <__errno>
 801ad02:	ed9d 0b00 	vldr	d0, [sp]
 801ad06:	6004      	str	r4, [r0, #0]
 801ad08:	b002      	add	sp, #8
 801ad0a:	bd10      	pop	{r4, pc}

0801ad0c <xflow>:
 801ad0c:	b082      	sub	sp, #8
 801ad0e:	b158      	cbz	r0, 801ad28 <xflow+0x1c>
 801ad10:	eeb1 7b40 	vneg.f64	d7, d0
 801ad14:	ed8d 7b00 	vstr	d7, [sp]
 801ad18:	ed9d 7b00 	vldr	d7, [sp]
 801ad1c:	2022      	movs	r0, #34	; 0x22
 801ad1e:	ee20 0b07 	vmul.f64	d0, d0, d7
 801ad22:	b002      	add	sp, #8
 801ad24:	f7ff bfe7 	b.w	801acf6 <with_errno>
 801ad28:	eeb0 7b40 	vmov.f64	d7, d0
 801ad2c:	e7f2      	b.n	801ad14 <xflow+0x8>
	...

0801ad30 <__math_uflow>:
 801ad30:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801ad38 <__math_uflow+0x8>
 801ad34:	f7ff bfea 	b.w	801ad0c <xflow>
 801ad38:	00000000 	.word	0x00000000
 801ad3c:	10000000 	.word	0x10000000

0801ad40 <__math_oflow>:
 801ad40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801ad48 <__math_oflow+0x8>
 801ad44:	f7ff bfe2 	b.w	801ad0c <xflow>
 801ad48:	00000000 	.word	0x00000000
 801ad4c:	70000000 	.word	0x70000000

0801ad50 <__math_divzero>:
 801ad50:	b082      	sub	sp, #8
 801ad52:	2800      	cmp	r0, #0
 801ad54:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801ad58:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 801ad5c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 801ad60:	ed8d 7b00 	vstr	d7, [sp]
 801ad64:	ed9d 0b00 	vldr	d0, [sp]
 801ad68:	ed9f 7b03 	vldr	d7, [pc, #12]	; 801ad78 <__math_divzero+0x28>
 801ad6c:	2022      	movs	r0, #34	; 0x22
 801ad6e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801ad72:	b002      	add	sp, #8
 801ad74:	f7ff bfbf 	b.w	801acf6 <with_errno>
	...

0801ad80 <__math_invalid>:
 801ad80:	eeb0 7b40 	vmov.f64	d7, d0
 801ad84:	eeb4 7b47 	vcmp.f64	d7, d7
 801ad88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ad8c:	ee30 6b40 	vsub.f64	d6, d0, d0
 801ad90:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801ad94:	d602      	bvs.n	801ad9c <__math_invalid+0x1c>
 801ad96:	2021      	movs	r0, #33	; 0x21
 801ad98:	f7ff bfad 	b.w	801acf6 <with_errno>
 801ad9c:	4770      	bx	lr

0801ad9e <__math_check_uflow>:
 801ad9e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801ada2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ada6:	d102      	bne.n	801adae <__math_check_uflow+0x10>
 801ada8:	2022      	movs	r0, #34	; 0x22
 801adaa:	f7ff bfa4 	b.w	801acf6 <with_errno>
 801adae:	4770      	bx	lr

0801adb0 <__math_check_oflow>:
 801adb0:	ed9f 6b07 	vldr	d6, [pc, #28]	; 801add0 <__math_check_oflow+0x20>
 801adb4:	eeb0 7bc0 	vabs.f64	d7, d0
 801adb8:	eeb4 7b46 	vcmp.f64	d7, d6
 801adbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801adc0:	dd02      	ble.n	801adc8 <__math_check_oflow+0x18>
 801adc2:	2022      	movs	r0, #34	; 0x22
 801adc4:	f7ff bf97 	b.w	801acf6 <with_errno>
 801adc8:	4770      	bx	lr
 801adca:	bf00      	nop
 801adcc:	f3af 8000 	nop.w
 801add0:	ffffffff 	.word	0xffffffff
 801add4:	7fefffff 	.word	0x7fefffff

0801add8 <_init>:
 801add8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801adda:	bf00      	nop
 801addc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801adde:	bc08      	pop	{r3}
 801ade0:	469e      	mov	lr, r3
 801ade2:	4770      	bx	lr

0801ade4 <_fini>:
 801ade4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ade6:	bf00      	nop
 801ade8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801adea:	bc08      	pop	{r3}
 801adec:	469e      	mov	lr, r3
 801adee:	4770      	bx	lr
