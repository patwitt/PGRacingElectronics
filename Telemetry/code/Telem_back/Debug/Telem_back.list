
Telem_back.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007624  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080077ac  080077ac  000177ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077ec  080077ec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080077ec  080077ec  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080077ec  080077ec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077ec  080077ec  000177ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077f0  080077f0  000177f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080077f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  2000000c  08007800  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  08007800  00020370  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ad1f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039d9  00000000  00000000  0003ad5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001698  00000000  00000000  0003e738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014d0  00000000  00000000  0003fdd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a43a  00000000  00000000  000412a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c932  00000000  00000000  0006b6da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105d91  00000000  00000000  0008800c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018dd9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e18  00000000  00000000  0018ddf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007794 	.word	0x08007794

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08007794 	.word	0x08007794

080001c8 <PTT_control>:
#define INACTIVE_BIT 0x00

int PTT_status=0;

int PTT_control(uint8_t data_frame[])
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	if(data_frame[0]==ACTIVE_BIT)
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	781b      	ldrb	r3, [r3, #0]
 80001d4:	2bff      	cmp	r3, #255	; 0xff
 80001d6:	d103      	bne.n	80001e0 <PTT_control+0x18>
	{
		PTT_status=1;
 80001d8:	4b09      	ldr	r3, [pc, #36]	; (8000200 <PTT_control+0x38>)
 80001da:	2201      	movs	r2, #1
 80001dc:	601a      	str	r2, [r3, #0]
 80001de:	e007      	b.n	80001f0 <PTT_control+0x28>
	}
	else if(data_frame[1]==INACTIVE_BIT)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3301      	adds	r3, #1
 80001e4:	781b      	ldrb	r3, [r3, #0]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d102      	bne.n	80001f0 <PTT_control+0x28>
	{
		PTT_status=0;
 80001ea:	4b05      	ldr	r3, [pc, #20]	; (8000200 <PTT_control+0x38>)
 80001ec:	2200      	movs	r2, #0
 80001ee:	601a      	str	r2, [r3, #0]
	}
	return PTT_status;
 80001f0:	4b03      	ldr	r3, [pc, #12]	; (8000200 <PTT_control+0x38>)
 80001f2:	681b      	ldr	r3, [r3, #0]
}
 80001f4:	4618      	mov	r0, r3
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fe:	4770      	bx	lr
 8000200:	20000028 	.word	0x20000028

08000204 <absInit>:
ABSSensor absRRSensor;
ABSSensor absLRSensor;
uint8_t flagL=0x0;
uint8_t flagR=0x0;

void absInit(ABSSensor * sens,int id,TIM_HandleTypeDef* tim,int channel){
 8000204:	b580      	push	{r7, lr}
 8000206:	b086      	sub	sp, #24
 8000208:	af00      	add	r7, sp, #0
 800020a:	60f8      	str	r0, [r7, #12]
 800020c:	60b9      	str	r1, [r7, #8]
 800020e:	607a      	str	r2, [r7, #4]
 8000210:	603b      	str	r3, [r7, #0]
	sens->ID = id;
 8000212:	68fb      	ldr	r3, [r7, #12]
 8000214:	68ba      	ldr	r2, [r7, #8]
 8000216:	605a      	str	r2, [r3, #4]
	sens->timer = tim;
 8000218:	68fb      	ldr	r3, [r7, #12]
 800021a:	687a      	ldr	r2, [r7, #4]
 800021c:	60da      	str	r2, [r3, #12]
	sens->timerChannel = channel;
 800021e:	68fb      	ldr	r3, [r7, #12]
 8000220:	683a      	ldr	r2, [r7, #0]
 8000222:	611a      	str	r2, [r3, #16]
	//HAL_TIM_Base_Start_IT(tim);
	HAL_TIM_IC_Start_IT(tim, channel);
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	4619      	mov	r1, r3
 8000228:	6878      	ldr	r0, [r7, #4]
 800022a:	f006 fa8b 	bl	8006744 <HAL_TIM_IC_Start_IT>
	for(int i=0;i<10;i++){
 800022e:	2300      	movs	r3, #0
 8000230:	617b      	str	r3, [r7, #20]
 8000232:	e008      	b.n	8000246 <absInit+0x42>
			sens->raw[i] = 0;
 8000234:	68fa      	ldr	r2, [r7, #12]
 8000236:	697b      	ldr	r3, [r7, #20]
 8000238:	4413      	add	r3, r2
 800023a:	3314      	adds	r3, #20
 800023c:	2200      	movs	r2, #0
 800023e:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<10;i++){
 8000240:	697b      	ldr	r3, [r7, #20]
 8000242:	3301      	adds	r3, #1
 8000244:	617b      	str	r3, [r7, #20]
 8000246:	697b      	ldr	r3, [r7, #20]
 8000248:	2b09      	cmp	r3, #9
 800024a:	ddf3      	ble.n	8000234 <absInit+0x30>
		}
		sens->counter = 0;
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	2200      	movs	r2, #0
 8000250:	779a      	strb	r2, [r3, #30]
		sens->data = 0;
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	2200      	movs	r2, #0
 8000256:	601a      	str	r2, [r3, #0]
}
 8000258:	bf00      	nop
 800025a:	3718      	adds	r7, #24
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}

08000260 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
  if (htim == absLRSensor.timer) {
 8000268:	4b1d      	ldr	r3, [pc, #116]	; (80002e0 <HAL_TIM_IC_CaptureCallback+0x80>)
 800026a:	68db      	ldr	r3, [r3, #12]
 800026c:	687a      	ldr	r2, [r7, #4]
 800026e:	429a      	cmp	r2, r3
 8000270:	d113      	bne.n	800029a <HAL_TIM_IC_CaptureCallback+0x3a>

    switch (HAL_TIM_GetActiveChannel(absLRSensor.timer)) {
 8000272:	4b1b      	ldr	r3, [pc, #108]	; (80002e0 <HAL_TIM_IC_CaptureCallback+0x80>)
 8000274:	68db      	ldr	r3, [r3, #12]
 8000276:	4618      	mov	r0, r3
 8000278:	f006 fe9c 	bl	8006fb4 <HAL_TIM_GetActiveChannel>
 800027c:	4603      	mov	r3, r0
 800027e:	2b01      	cmp	r3, #1
 8000280:	d124      	bne.n	80002cc <HAL_TIM_IC_CaptureCallback+0x6c>
      case HAL_TIM_ACTIVE_CHANNEL_1:
    	 // absLRSensor.data = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
    	 //absLRSensor.timeToZeroSpeed = ABS_ZERO_SPEED_TIME;
    	 //flagL=0x01;
    	  absLRSensor.raw[absLRSensor.counter]++;
 8000282:	4b17      	ldr	r3, [pc, #92]	; (80002e0 <HAL_TIM_IC_CaptureCallback+0x80>)
 8000284:	7f9b      	ldrb	r3, [r3, #30]
 8000286:	4a16      	ldr	r2, [pc, #88]	; (80002e0 <HAL_TIM_IC_CaptureCallback+0x80>)
 8000288:	441a      	add	r2, r3
 800028a:	7d12      	ldrb	r2, [r2, #20]
 800028c:	3201      	adds	r2, #1
 800028e:	b2d1      	uxtb	r1, r2
 8000290:	4a13      	ldr	r2, [pc, #76]	; (80002e0 <HAL_TIM_IC_CaptureCallback+0x80>)
 8000292:	4413      	add	r3, r2
 8000294:	460a      	mov	r2, r1
 8000296:	751a      	strb	r2, [r3, #20]

        break;
 8000298:	e01d      	b.n	80002d6 <HAL_TIM_IC_CaptureCallback+0x76>
      default:
        break;
    }
  }else if(htim == absRRSensor.timer) {
 800029a:	4b12      	ldr	r3, [pc, #72]	; (80002e4 <HAL_TIM_IC_CaptureCallback+0x84>)
 800029c:	68db      	ldr	r3, [r3, #12]
 800029e:	687a      	ldr	r2, [r7, #4]
 80002a0:	429a      	cmp	r2, r3
 80002a2:	d115      	bne.n	80002d0 <HAL_TIM_IC_CaptureCallback+0x70>

	  switch (HAL_TIM_GetActiveChannel(absRRSensor.timer)) {
 80002a4:	4b0f      	ldr	r3, [pc, #60]	; (80002e4 <HAL_TIM_IC_CaptureCallback+0x84>)
 80002a6:	68db      	ldr	r3, [r3, #12]
 80002a8:	4618      	mov	r0, r3
 80002aa:	f006 fe83 	bl	8006fb4 <HAL_TIM_GetActiveChannel>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b01      	cmp	r3, #1
 80002b2:	d10f      	bne.n	80002d4 <HAL_TIM_IC_CaptureCallback+0x74>
	  	  case HAL_TIM_ACTIVE_CHANNEL_1:
        	//absRRSensor.data = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
        	//absRRSensor.timeToZeroSpeed = ABS_ZERO_SPEED_TIME;
        	//flagR=0x01;
	  		  absRRSensor.raw[absRRSensor.counter]++;
 80002b4:	4b0b      	ldr	r3, [pc, #44]	; (80002e4 <HAL_TIM_IC_CaptureCallback+0x84>)
 80002b6:	7f9b      	ldrb	r3, [r3, #30]
 80002b8:	4a0a      	ldr	r2, [pc, #40]	; (80002e4 <HAL_TIM_IC_CaptureCallback+0x84>)
 80002ba:	441a      	add	r2, r3
 80002bc:	7d12      	ldrb	r2, [r2, #20]
 80002be:	3201      	adds	r2, #1
 80002c0:	b2d1      	uxtb	r1, r2
 80002c2:	4a08      	ldr	r2, [pc, #32]	; (80002e4 <HAL_TIM_IC_CaptureCallback+0x84>)
 80002c4:	4413      	add	r3, r2
 80002c6:	460a      	mov	r2, r1
 80002c8:	751a      	strb	r2, [r3, #20]

            break;
 80002ca:	e004      	b.n	80002d6 <HAL_TIM_IC_CaptureCallback+0x76>
        break;
 80002cc:	bf00      	nop
 80002ce:	e002      	b.n	80002d6 <HAL_TIM_IC_CaptureCallback+0x76>
          default:
            break;
        }
  }
 80002d0:	bf00      	nop
 80002d2:	e000      	b.n	80002d6 <HAL_TIM_IC_CaptureCallback+0x76>
            break;
 80002d4:	bf00      	nop

}
 80002d6:	bf00      	nop
 80002d8:	3708      	adds	r7, #8
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	2000004c 	.word	0x2000004c
 80002e4:	2000002c 	.word	0x2000002c

080002e8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b08a      	sub	sp, #40	; 0x28
 80002ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002ee:	f107 031c 	add.w	r3, r7, #28
 80002f2:	2200      	movs	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]
 80002f6:	605a      	str	r2, [r3, #4]
 80002f8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	2200      	movs	r2, #0
 80002fe:	601a      	str	r2, [r3, #0]
 8000300:	605a      	str	r2, [r3, #4]
 8000302:	609a      	str	r2, [r3, #8]
 8000304:	60da      	str	r2, [r3, #12]
 8000306:	611a      	str	r2, [r3, #16]
 8000308:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800030a:	4b37      	ldr	r3, [pc, #220]	; (80003e8 <MX_ADC1_Init+0x100>)
 800030c:	4a37      	ldr	r2, [pc, #220]	; (80003ec <MX_ADC1_Init+0x104>)
 800030e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000310:	4b35      	ldr	r3, [pc, #212]	; (80003e8 <MX_ADC1_Init+0x100>)
 8000312:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000316:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000318:	4b33      	ldr	r3, [pc, #204]	; (80003e8 <MX_ADC1_Init+0x100>)
 800031a:	2200      	movs	r2, #0
 800031c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800031e:	4b32      	ldr	r3, [pc, #200]	; (80003e8 <MX_ADC1_Init+0x100>)
 8000320:	2200      	movs	r2, #0
 8000322:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000324:	4b30      	ldr	r3, [pc, #192]	; (80003e8 <MX_ADC1_Init+0x100>)
 8000326:	2201      	movs	r2, #1
 8000328:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800032a:	4b2f      	ldr	r3, [pc, #188]	; (80003e8 <MX_ADC1_Init+0x100>)
 800032c:	2204      	movs	r2, #4
 800032e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000330:	4b2d      	ldr	r3, [pc, #180]	; (80003e8 <MX_ADC1_Init+0x100>)
 8000332:	2200      	movs	r2, #0
 8000334:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000336:	4b2c      	ldr	r3, [pc, #176]	; (80003e8 <MX_ADC1_Init+0x100>)
 8000338:	2201      	movs	r2, #1
 800033a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800033c:	4b2a      	ldr	r3, [pc, #168]	; (80003e8 <MX_ADC1_Init+0x100>)
 800033e:	2201      	movs	r2, #1
 8000340:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000342:	4b29      	ldr	r3, [pc, #164]	; (80003e8 <MX_ADC1_Init+0x100>)
 8000344:	2200      	movs	r2, #0
 8000346:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800034a:	4b27      	ldr	r3, [pc, #156]	; (80003e8 <MX_ADC1_Init+0x100>)
 800034c:	2200      	movs	r2, #0
 800034e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000350:	4b25      	ldr	r3, [pc, #148]	; (80003e8 <MX_ADC1_Init+0x100>)
 8000352:	2200      	movs	r2, #0
 8000354:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000356:	4b24      	ldr	r3, [pc, #144]	; (80003e8 <MX_ADC1_Init+0x100>)
 8000358:	2200      	movs	r2, #0
 800035a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800035e:	4b22      	ldr	r3, [pc, #136]	; (80003e8 <MX_ADC1_Init+0x100>)
 8000360:	2200      	movs	r2, #0
 8000362:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000364:	4b20      	ldr	r3, [pc, #128]	; (80003e8 <MX_ADC1_Init+0x100>)
 8000366:	2200      	movs	r2, #0
 8000368:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800036c:	481e      	ldr	r0, [pc, #120]	; (80003e8 <MX_ADC1_Init+0x100>)
 800036e:	f001 fc99 	bl	8001ca4 <HAL_ADC_Init>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000378:	f000 ff58 	bl	800122c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800037c:	2300      	movs	r3, #0
 800037e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000380:	f107 031c 	add.w	r3, r7, #28
 8000384:	4619      	mov	r1, r3
 8000386:	4818      	ldr	r0, [pc, #96]	; (80003e8 <MX_ADC1_Init+0x100>)
 8000388:	f002 fd6e 	bl	8002e68 <HAL_ADCEx_MultiModeConfigChannel>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000392:	f000 ff4b 	bl	800122c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000396:	4b16      	ldr	r3, [pc, #88]	; (80003f0 <MX_ADC1_Init+0x108>)
 8000398:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800039a:	2306      	movs	r3, #6
 800039c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800039e:	2307      	movs	r3, #7
 80003a0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003a2:	237f      	movs	r3, #127	; 0x7f
 80003a4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003a6:	2304      	movs	r3, #4
 80003a8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80003aa:	2300      	movs	r3, #0
 80003ac:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003ae:	1d3b      	adds	r3, r7, #4
 80003b0:	4619      	mov	r1, r3
 80003b2:	480d      	ldr	r0, [pc, #52]	; (80003e8 <MX_ADC1_Init+0x100>)
 80003b4:	f001 ffa0 	bl	80022f8 <HAL_ADC_ConfigChannel>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 80003be:	f000 ff35 	bl	800122c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80003c2:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <MX_ADC1_Init+0x10c>)
 80003c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80003c6:	230c      	movs	r3, #12
 80003c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003ca:	1d3b      	adds	r3, r7, #4
 80003cc:	4619      	mov	r1, r3
 80003ce:	4806      	ldr	r0, [pc, #24]	; (80003e8 <MX_ADC1_Init+0x100>)
 80003d0:	f001 ff92 	bl	80022f8 <HAL_ADC_ConfigChannel>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 80003da:	f000 ff27 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003de:	bf00      	nop
 80003e0:	3728      	adds	r7, #40	; 0x28
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	2000006c 	.word	0x2000006c
 80003ec:	50040000 	.word	0x50040000
 80003f0:	25b00200 	.word	0x25b00200
 80003f4:	21800100 	.word	0x21800100

080003f8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b086      	sub	sp, #24
 80003fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003fe:	463b      	mov	r3, r7
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
 8000404:	605a      	str	r2, [r3, #4]
 8000406:	609a      	str	r2, [r3, #8]
 8000408:	60da      	str	r2, [r3, #12]
 800040a:	611a      	str	r2, [r3, #16]
 800040c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800040e:	4b31      	ldr	r3, [pc, #196]	; (80004d4 <MX_ADC2_Init+0xdc>)
 8000410:	4a31      	ldr	r2, [pc, #196]	; (80004d8 <MX_ADC2_Init+0xe0>)
 8000412:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000414:	4b2f      	ldr	r3, [pc, #188]	; (80004d4 <MX_ADC2_Init+0xdc>)
 8000416:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800041a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800041c:	4b2d      	ldr	r3, [pc, #180]	; (80004d4 <MX_ADC2_Init+0xdc>)
 800041e:	2200      	movs	r2, #0
 8000420:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000422:	4b2c      	ldr	r3, [pc, #176]	; (80004d4 <MX_ADC2_Init+0xdc>)
 8000424:	2200      	movs	r2, #0
 8000426:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000428:	4b2a      	ldr	r3, [pc, #168]	; (80004d4 <MX_ADC2_Init+0xdc>)
 800042a:	2201      	movs	r2, #1
 800042c:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800042e:	4b29      	ldr	r3, [pc, #164]	; (80004d4 <MX_ADC2_Init+0xdc>)
 8000430:	2204      	movs	r2, #4
 8000432:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000434:	4b27      	ldr	r3, [pc, #156]	; (80004d4 <MX_ADC2_Init+0xdc>)
 8000436:	2200      	movs	r2, #0
 8000438:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800043a:	4b26      	ldr	r3, [pc, #152]	; (80004d4 <MX_ADC2_Init+0xdc>)
 800043c:	2201      	movs	r2, #1
 800043e:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000440:	4b24      	ldr	r3, [pc, #144]	; (80004d4 <MX_ADC2_Init+0xdc>)
 8000442:	2201      	movs	r2, #1
 8000444:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000446:	4b23      	ldr	r3, [pc, #140]	; (80004d4 <MX_ADC2_Init+0xdc>)
 8000448:	2200      	movs	r2, #0
 800044a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800044e:	4b21      	ldr	r3, [pc, #132]	; (80004d4 <MX_ADC2_Init+0xdc>)
 8000450:	2200      	movs	r2, #0
 8000452:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000454:	4b1f      	ldr	r3, [pc, #124]	; (80004d4 <MX_ADC2_Init+0xdc>)
 8000456:	2200      	movs	r2, #0
 8000458:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800045a:	4b1e      	ldr	r3, [pc, #120]	; (80004d4 <MX_ADC2_Init+0xdc>)
 800045c:	2200      	movs	r2, #0
 800045e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000462:	4b1c      	ldr	r3, [pc, #112]	; (80004d4 <MX_ADC2_Init+0xdc>)
 8000464:	2200      	movs	r2, #0
 8000466:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000468:	4b1a      	ldr	r3, [pc, #104]	; (80004d4 <MX_ADC2_Init+0xdc>)
 800046a:	2200      	movs	r2, #0
 800046c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000470:	4818      	ldr	r0, [pc, #96]	; (80004d4 <MX_ADC2_Init+0xdc>)
 8000472:	f001 fc17 	bl	8001ca4 <HAL_ADC_Init>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 800047c:	f000 fed6 	bl	800122c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000480:	4b16      	ldr	r3, [pc, #88]	; (80004dc <MX_ADC2_Init+0xe4>)
 8000482:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000484:	2306      	movs	r3, #6
 8000486:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000488:	2306      	movs	r3, #6
 800048a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800048c:	237f      	movs	r3, #127	; 0x7f
 800048e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000490:	2304      	movs	r3, #4
 8000492:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000494:	2300      	movs	r3, #0
 8000496:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000498:	463b      	mov	r3, r7
 800049a:	4619      	mov	r1, r3
 800049c:	480d      	ldr	r0, [pc, #52]	; (80004d4 <MX_ADC2_Init+0xdc>)
 800049e:	f001 ff2b 	bl	80022f8 <HAL_ADC_ConfigChannel>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 80004a8:	f000 fec0 	bl	800122c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <MX_ADC2_Init+0xe8>)
 80004ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80004b0:	230c      	movs	r3, #12
 80004b2:	607b      	str	r3, [r7, #4]
  sConfig.Offset = 1;
 80004b4:	2301      	movs	r3, #1
 80004b6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80004b8:	463b      	mov	r3, r7
 80004ba:	4619      	mov	r1, r3
 80004bc:	4805      	ldr	r0, [pc, #20]	; (80004d4 <MX_ADC2_Init+0xdc>)
 80004be:	f001 ff1b 	bl	80022f8 <HAL_ADC_ConfigChannel>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <MX_ADC2_Init+0xd4>
  {
    Error_Handler();
 80004c8:	f000 feb0 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80004cc:	bf00      	nop
 80004ce:	3718      	adds	r7, #24
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	200000d0 	.word	0x200000d0
 80004d8:	50040100 	.word	0x50040100
 80004dc:	14f00020 	.word	0x14f00020
 80004e0:	19200040 	.word	0x19200040

080004e4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b08c      	sub	sp, #48	; 0x30
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ec:	f107 031c 	add.w	r3, r7, #28
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	605a      	str	r2, [r3, #4]
 80004f6:	609a      	str	r2, [r3, #8]
 80004f8:	60da      	str	r2, [r3, #12]
 80004fa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a34      	ldr	r2, [pc, #208]	; (80005d4 <HAL_ADC_MspInit+0xf0>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d12e      	bne.n	8000564 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8000506:	4b34      	ldr	r3, [pc, #208]	; (80005d8 <HAL_ADC_MspInit+0xf4>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	3301      	adds	r3, #1
 800050c:	4a32      	ldr	r2, [pc, #200]	; (80005d8 <HAL_ADC_MspInit+0xf4>)
 800050e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000510:	4b31      	ldr	r3, [pc, #196]	; (80005d8 <HAL_ADC_MspInit+0xf4>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b01      	cmp	r3, #1
 8000516:	d10b      	bne.n	8000530 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000518:	4b30      	ldr	r3, [pc, #192]	; (80005dc <HAL_ADC_MspInit+0xf8>)
 800051a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051c:	4a2f      	ldr	r2, [pc, #188]	; (80005dc <HAL_ADC_MspInit+0xf8>)
 800051e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000522:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000524:	4b2d      	ldr	r3, [pc, #180]	; (80005dc <HAL_ADC_MspInit+0xf8>)
 8000526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000528:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800052c:	61bb      	str	r3, [r7, #24]
 800052e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000530:	4b2a      	ldr	r3, [pc, #168]	; (80005dc <HAL_ADC_MspInit+0xf8>)
 8000532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000534:	4a29      	ldr	r2, [pc, #164]	; (80005dc <HAL_ADC_MspInit+0xf8>)
 8000536:	f043 0301 	orr.w	r3, r3, #1
 800053a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800053c:	4b27      	ldr	r3, [pc, #156]	; (80005dc <HAL_ADC_MspInit+0xf8>)
 800053e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000540:	f003 0301 	and.w	r3, r3, #1
 8000544:	617b      	str	r3, [r7, #20]
 8000546:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = BP_Front_Pin|BP_Rear_Pin;
 8000548:	2318      	movs	r3, #24
 800054a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800054c:	230b      	movs	r3, #11
 800054e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000550:	2300      	movs	r3, #0
 8000552:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000554:	f107 031c 	add.w	r3, r7, #28
 8000558:	4619      	mov	r1, r3
 800055a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800055e:	f003 fcd3 	bl	8003f08 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000562:	e032      	b.n	80005ca <HAL_ADC_MspInit+0xe6>
  else if(adcHandle->Instance==ADC2)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a1d      	ldr	r2, [pc, #116]	; (80005e0 <HAL_ADC_MspInit+0xfc>)
 800056a:	4293      	cmp	r3, r2
 800056c:	d12d      	bne.n	80005ca <HAL_ADC_MspInit+0xe6>
    HAL_RCC_ADC_CLK_ENABLED++;
 800056e:	4b1a      	ldr	r3, [pc, #104]	; (80005d8 <HAL_ADC_MspInit+0xf4>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	3301      	adds	r3, #1
 8000574:	4a18      	ldr	r2, [pc, #96]	; (80005d8 <HAL_ADC_MspInit+0xf4>)
 8000576:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000578:	4b17      	ldr	r3, [pc, #92]	; (80005d8 <HAL_ADC_MspInit+0xf4>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	2b01      	cmp	r3, #1
 800057e:	d10b      	bne.n	8000598 <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000580:	4b16      	ldr	r3, [pc, #88]	; (80005dc <HAL_ADC_MspInit+0xf8>)
 8000582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000584:	4a15      	ldr	r2, [pc, #84]	; (80005dc <HAL_ADC_MspInit+0xf8>)
 8000586:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800058a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800058c:	4b13      	ldr	r3, [pc, #76]	; (80005dc <HAL_ADC_MspInit+0xf8>)
 800058e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000590:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000594:	613b      	str	r3, [r7, #16]
 8000596:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000598:	4b10      	ldr	r3, [pc, #64]	; (80005dc <HAL_ADC_MspInit+0xf8>)
 800059a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059c:	4a0f      	ldr	r2, [pc, #60]	; (80005dc <HAL_ADC_MspInit+0xf8>)
 800059e:	f043 0301 	orr.w	r3, r3, #1
 80005a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005a4:	4b0d      	ldr	r3, [pc, #52]	; (80005dc <HAL_ADC_MspInit+0xf8>)
 80005a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a8:	f003 0301 	and.w	r3, r3, #1
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Damper_1_Pin|Damper_2_Pin;
 80005b0:	2303      	movs	r3, #3
 80005b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80005b4:	230b      	movs	r3, #11
 80005b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	2300      	movs	r3, #0
 80005ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005bc:	f107 031c 	add.w	r3, r7, #28
 80005c0:	4619      	mov	r1, r3
 80005c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c6:	f003 fc9f 	bl	8003f08 <HAL_GPIO_Init>
}
 80005ca:	bf00      	nop
 80005cc:	3730      	adds	r7, #48	; 0x30
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	50040000 	.word	0x50040000
 80005d8:	20000134 	.word	0x20000134
 80005dc:	40021000 	.word	0x40021000
 80005e0:	50040100 	.word	0x50040100

080005e4 <DampInit>:
}
*/

/* USING STRUCT */

void DampInit(DamperSensor * sens,int id,ADC_HandleTypeDef* adc_h,int channel){
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
 80005f0:	603b      	str	r3, [r7, #0]
	sens->ID = id;
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	68ba      	ldr	r2, [r7, #8]
 80005f6:	605a      	str	r2, [r3, #4]
	sens->adc = adc_h;
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	609a      	str	r2, [r3, #8]
	sens->adc_channel = channel;
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	683a      	ldr	r2, [r7, #0]
 8000602:	60da      	str	r2, [r3, #12]
}
 8000604:	bf00      	nop
 8000606:	3714      	adds	r7, #20
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr

08000610 <ADC_SelectChannel>:

void ADC_SelectChannel(DamperSensor* sens)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000618:	f107 0308 	add.w	r3, r7, #8
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]
 8000628:	615a      	str	r2, [r3, #20]
  sConfig.Channel = sens->adc_channel;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	68db      	ldr	r3, [r3, #12]
 800062e:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = 1;
 8000630:	2301      	movs	r3, #1
 8000632:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000634:	2307      	movs	r3, #7
 8000636:	613b      	str	r3, [r7, #16]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000638:	237f      	movs	r3, #127	; 0x7f
 800063a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800063c:	2304      	movs	r3, #4
 800063e:	61bb      	str	r3, [r7, #24]
  sConfig.Offset = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	61fb      	str	r3, [r7, #28]
  if (HAL_ADC_ConfigChannel(sens->adc, &sConfig) != HAL_OK)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	689b      	ldr	r3, [r3, #8]
 8000648:	f107 0208 	add.w	r2, r7, #8
 800064c:	4611      	mov	r1, r2
 800064e:	4618      	mov	r0, r3
 8000650:	f001 fe52 	bl	80022f8 <HAL_ADC_ConfigChannel>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <ADC_SelectChannel+0x4e>
  {
   Error_Handler();
 800065a:	f000 fde7 	bl	800122c <Error_Handler>
  }
}
 800065e:	bf00      	nop
 8000660:	3720      	adds	r7, #32
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
	...

08000668 <Amorki_GetData>:


void Amorki_GetData(DamperSensor * sens)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	switch (sens->adc_channel)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	68db      	ldr	r3, [r3, #12]
 8000674:	4a23      	ldr	r2, [pc, #140]	; (8000704 <Amorki_GetData+0x9c>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d003      	beq.n	8000682 <Amorki_GetData+0x1a>
 800067a:	4a23      	ldr	r2, [pc, #140]	; (8000708 <Amorki_GetData+0xa0>)
 800067c:	4293      	cmp	r3, r2
 800067e:	d01e      	beq.n	80006be <Amorki_GetData+0x56>
		sens->data = HAL_ADC_GetValue(sens->adc);
		HAL_ADC_Stop(sens->adc);
	break;
	}

}
 8000680:	e03b      	b.n	80006fa <Amorki_GetData+0x92>
		ADC_SelectChannel(sens);
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f7ff ffc4 	bl	8000610 <ADC_SelectChannel>
		HAL_ADC_Start(sens->adc);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	689b      	ldr	r3, [r3, #8]
 800068c:	4618      	mov	r0, r3
 800068e:	f001 fc5f 	bl	8001f50 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(sens->adc, HAL_MAX_DELAY);
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	689b      	ldr	r3, [r3, #8]
 8000696:	f04f 31ff 	mov.w	r1, #4294967295
 800069a:	4618      	mov	r0, r3
 800069c:	f001 fd46 	bl	800212c <HAL_ADC_PollForConversion>
		sens->data = HAL_ADC_GetValue(sens->adc);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	689b      	ldr	r3, [r3, #8]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f001 fe19 	bl	80022dc <HAL_ADC_GetValue>
 80006aa:	4603      	mov	r3, r0
 80006ac:	461a      	mov	r2, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	601a      	str	r2, [r3, #0]
		HAL_ADC_Stop(sens->adc);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	689b      	ldr	r3, [r3, #8]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 fd04 	bl	80020c4 <HAL_ADC_Stop>
	break;
 80006bc:	e01d      	b.n	80006fa <Amorki_GetData+0x92>
		ADC_SelectChannel(sens);
 80006be:	6878      	ldr	r0, [r7, #4]
 80006c0:	f7ff ffa6 	bl	8000610 <ADC_SelectChannel>
		HAL_ADC_Start(sens->adc);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	689b      	ldr	r3, [r3, #8]
 80006c8:	4618      	mov	r0, r3
 80006ca:	f001 fc41 	bl	8001f50 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(sens->adc, HAL_MAX_DELAY);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	689b      	ldr	r3, [r3, #8]
 80006d2:	f04f 31ff 	mov.w	r1, #4294967295
 80006d6:	4618      	mov	r0, r3
 80006d8:	f001 fd28 	bl	800212c <HAL_ADC_PollForConversion>
		sens->data = HAL_ADC_GetValue(sens->adc);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	689b      	ldr	r3, [r3, #8]
 80006e0:	4618      	mov	r0, r3
 80006e2:	f001 fdfb 	bl	80022dc <HAL_ADC_GetValue>
 80006e6:	4603      	mov	r3, r0
 80006e8:	461a      	mov	r2, r3
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	601a      	str	r2, [r3, #0]
		HAL_ADC_Stop(sens->adc);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	689b      	ldr	r3, [r3, #8]
 80006f2:	4618      	mov	r0, r3
 80006f4:	f001 fce6 	bl	80020c4 <HAL_ADC_Stop>
	break;
 80006f8:	bf00      	nop
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	14f00020 	.word	0x14f00020
 8000708:	19200040 	.word	0x19200040

0800070c <BPInit>:
	return val;
}

/* USING STRUCT */

void BPInit(BPSensor * sens,int id,ADC_HandleTypeDef* adc_h,int channel){
 800070c:	b480      	push	{r7}
 800070e:	b085      	sub	sp, #20
 8000710:	af00      	add	r7, sp, #0
 8000712:	60f8      	str	r0, [r7, #12]
 8000714:	60b9      	str	r1, [r7, #8]
 8000716:	607a      	str	r2, [r7, #4]
 8000718:	603b      	str	r3, [r7, #0]
	sens->ID = id;
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	68ba      	ldr	r2, [r7, #8]
 800071e:	605a      	str	r2, [r3, #4]
	sens->adc = adc_h;
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	609a      	str	r2, [r3, #8]
	sens->adc_channel = channel;
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	683a      	ldr	r2, [r7, #0]
 800072a:	60da      	str	r2, [r3, #12]
	sens->data=0;
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
}
 8000732:	bf00      	nop
 8000734:	3714      	adds	r7, #20
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr

0800073e <ADC_BSelectChannel>:

void ADC_BSelectChannel(BPSensor* sens)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	b088      	sub	sp, #32
 8000742:	af00      	add	r7, sp, #0
 8000744:	6078      	str	r0, [r7, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000746:	f107 0308 	add.w	r3, r7, #8
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]
 8000756:	615a      	str	r2, [r3, #20]
  sConfig.Channel = sens->adc_channel;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	68db      	ldr	r3, [r3, #12]
 800075c:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = 1;
 800075e:	2301      	movs	r3, #1
 8000760:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000762:	2307      	movs	r3, #7
 8000764:	613b      	str	r3, [r7, #16]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000766:	237f      	movs	r3, #127	; 0x7f
 8000768:	617b      	str	r3, [r7, #20]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800076a:	2304      	movs	r3, #4
 800076c:	61bb      	str	r3, [r7, #24]
  sConfig.Offset = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]
  if (HAL_ADC_ConfigChannel(sens->adc, &sConfig) != HAL_OK)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	689b      	ldr	r3, [r3, #8]
 8000776:	f107 0208 	add.w	r2, r7, #8
 800077a:	4611      	mov	r1, r2
 800077c:	4618      	mov	r0, r3
 800077e:	f001 fdbb 	bl	80022f8 <HAL_ADC_ConfigChannel>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <ADC_BSelectChannel+0x4e>
  {
   Error_Handler();
 8000788:	f000 fd50 	bl	800122c <Error_Handler>
  }
}
 800078c:	bf00      	nop
 800078e:	3720      	adds	r7, #32
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}

08000794 <BP_GetData>:


void BP_GetData(BPSensor * sens)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
	switch (sens->adc_channel)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	68db      	ldr	r3, [r3, #12]
 80007a0:	4a23      	ldr	r2, [pc, #140]	; (8000830 <BP_GetData+0x9c>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d003      	beq.n	80007ae <BP_GetData+0x1a>
 80007a6:	4a23      	ldr	r2, [pc, #140]	; (8000834 <BP_GetData+0xa0>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d01e      	beq.n	80007ea <BP_GetData+0x56>
		sens->data = HAL_ADC_GetValue(sens->adc);
		HAL_ADC_Stop(sens->adc);
	break;
	}

}
 80007ac:	e03b      	b.n	8000826 <BP_GetData+0x92>
		ADC_BSelectChannel(sens);
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f7ff ffc5 	bl	800073e <ADC_BSelectChannel>
		HAL_ADC_Start(sens->adc);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	689b      	ldr	r3, [r3, #8]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f001 fbc9 	bl	8001f50 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(sens->adc, HAL_MAX_DELAY);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	689b      	ldr	r3, [r3, #8]
 80007c2:	f04f 31ff 	mov.w	r1, #4294967295
 80007c6:	4618      	mov	r0, r3
 80007c8:	f001 fcb0 	bl	800212c <HAL_ADC_PollForConversion>
		sens->data = HAL_ADC_GetValue(sens->adc);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	689b      	ldr	r3, [r3, #8]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f001 fd83 	bl	80022dc <HAL_ADC_GetValue>
 80007d6:	4603      	mov	r3, r0
 80007d8:	461a      	mov	r2, r3
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	601a      	str	r2, [r3, #0]
		HAL_ADC_Stop(sens->adc);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	689b      	ldr	r3, [r3, #8]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f001 fc6e 	bl	80020c4 <HAL_ADC_Stop>
	break;
 80007e8:	e01d      	b.n	8000826 <BP_GetData+0x92>
		ADC_BSelectChannel(sens);
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f7ff ffa7 	bl	800073e <ADC_BSelectChannel>
		HAL_ADC_Start(sens->adc);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	689b      	ldr	r3, [r3, #8]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f001 fbab 	bl	8001f50 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(sens->adc, HAL_MAX_DELAY);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	689b      	ldr	r3, [r3, #8]
 80007fe:	f04f 31ff 	mov.w	r1, #4294967295
 8000802:	4618      	mov	r0, r3
 8000804:	f001 fc92 	bl	800212c <HAL_ADC_PollForConversion>
		sens->data = HAL_ADC_GetValue(sens->adc);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	689b      	ldr	r3, [r3, #8]
 800080c:	4618      	mov	r0, r3
 800080e:	f001 fd65 	bl	80022dc <HAL_ADC_GetValue>
 8000812:	4603      	mov	r3, r0
 8000814:	461a      	mov	r2, r3
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	601a      	str	r2, [r3, #0]
		HAL_ADC_Stop(sens->adc);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	689b      	ldr	r3, [r3, #8]
 800081e:	4618      	mov	r0, r3
 8000820:	f001 fc50 	bl	80020c4 <HAL_ADC_Stop>
	break;
 8000824:	bf00      	nop
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	21800100 	.word	0x21800100
 8000834:	25b00200 	.word	0x25b00200

08000838 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800083c:	4b17      	ldr	r3, [pc, #92]	; (800089c <MX_CAN1_Init+0x64>)
 800083e:	4a18      	ldr	r2, [pc, #96]	; (80008a0 <MX_CAN1_Init+0x68>)
 8000840:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 8000842:	4b16      	ldr	r3, [pc, #88]	; (800089c <MX_CAN1_Init+0x64>)
 8000844:	2208      	movs	r2, #8
 8000846:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000848:	4b14      	ldr	r3, [pc, #80]	; (800089c <MX_CAN1_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800084e:	4b13      	ldr	r3, [pc, #76]	; (800089c <MX_CAN1_Init+0x64>)
 8000850:	2200      	movs	r2, #0
 8000852:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_CAN1_Init+0x64>)
 8000856:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800085a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <MX_CAN1_Init+0x64>)
 800085e:	2200      	movs	r2, #0
 8000860:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <MX_CAN1_Init+0x64>)
 8000864:	2200      	movs	r2, #0
 8000866:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <MX_CAN1_Init+0x64>)
 800086a:	2200      	movs	r2, #0
 800086c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <MX_CAN1_Init+0x64>)
 8000870:	2200      	movs	r2, #0
 8000872:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000874:	4b09      	ldr	r3, [pc, #36]	; (800089c <MX_CAN1_Init+0x64>)
 8000876:	2200      	movs	r2, #0
 8000878:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <MX_CAN1_Init+0x64>)
 800087c:	2200      	movs	r2, #0
 800087e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <MX_CAN1_Init+0x64>)
 8000882:	2200      	movs	r2, #0
 8000884:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_CAN1_Init+0x64>)
 8000888:	f002 fb9e 	bl	8002fc8 <HAL_CAN_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000892:	f000 fccb 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000178 	.word	0x20000178
 80008a0:	40006400 	.word	0x40006400

080008a4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08a      	sub	sp, #40	; 0x28
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a1b      	ldr	r2, [pc, #108]	; (8000930 <HAL_CAN_MspInit+0x8c>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d130      	bne.n	8000928 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008c6:	4b1b      	ldr	r3, [pc, #108]	; (8000934 <HAL_CAN_MspInit+0x90>)
 80008c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ca:	4a1a      	ldr	r2, [pc, #104]	; (8000934 <HAL_CAN_MspInit+0x90>)
 80008cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008d0:	6593      	str	r3, [r2, #88]	; 0x58
 80008d2:	4b18      	ldr	r3, [pc, #96]	; (8000934 <HAL_CAN_MspInit+0x90>)
 80008d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008da:	613b      	str	r3, [r7, #16]
 80008dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <HAL_CAN_MspInit+0x90>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e2:	4a14      	ldr	r2, [pc, #80]	; (8000934 <HAL_CAN_MspInit+0x90>)
 80008e4:	f043 0302 	orr.w	r3, r3, #2
 80008e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ea:	4b12      	ldr	r3, [pc, #72]	; (8000934 <HAL_CAN_MspInit+0x90>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ee:	f003 0302 	and.w	r3, r3, #2
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fc:	2302      	movs	r3, #2
 80008fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000904:	2303      	movs	r3, #3
 8000906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000908:	2309      	movs	r3, #9
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	4619      	mov	r1, r3
 8000912:	4809      	ldr	r0, [pc, #36]	; (8000938 <HAL_CAN_MspInit+0x94>)
 8000914:	f003 faf8 	bl	8003f08 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000918:	2200      	movs	r2, #0
 800091a:	2100      	movs	r1, #0
 800091c:	2014      	movs	r0, #20
 800091e:	f003 fa6e 	bl	8003dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000922:	2014      	movs	r0, #20
 8000924:	f003 fa87 	bl	8003e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000928:	bf00      	nop
 800092a:	3728      	adds	r7, #40	; 0x28
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40006400 	.word	0x40006400
 8000934:	40021000 	.word	0x40021000
 8000938:	48000400 	.word	0x48000400

0800093c <CAN_Init>:

CAN_RxMsgType PTT;
CAN_TxMsgType TX_frame;

HAL_StatusTypeDef CAN_Init(CAN_HandleTypeDef * hcan)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef error = HAL_OK;
 8000944:	2300      	movs	r3, #0
 8000946:	73fb      	strb	r3, [r7, #15]

	if (hcan != NULL) {
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d046      	beq.n	80009dc <CAN_Init+0xa0>
		txMailbox = CAN_TX_MAILBOX;
 800094e:	4b27      	ldr	r3, [pc, #156]	; (80009ec <CAN_Init+0xb0>)
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]

		TxHeader.IDE = CAN_ID_STD;
 8000954:	4b26      	ldr	r3, [pc, #152]	; (80009f0 <CAN_Init+0xb4>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
		TxHeader.RTR = CAN_RTR_DATA;
 800095a:	4b25      	ldr	r3, [pc, #148]	; (80009f0 <CAN_Init+0xb4>)
 800095c:	2200      	movs	r2, #0
 800095e:	60da      	str	r2, [r3, #12]
		TxHeader.DLC = CAN_MSG_BYTES;
 8000960:	4b23      	ldr	r3, [pc, #140]	; (80009f0 <CAN_Init+0xb4>)
 8000962:	2204      	movs	r2, #4
 8000964:	611a      	str	r2, [r3, #16]

		filterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000966:	4b23      	ldr	r3, [pc, #140]	; (80009f4 <CAN_Init+0xb8>)
 8000968:	2201      	movs	r2, #1
 800096a:	621a      	str	r2, [r3, #32]
		filterconfig.FilterBank = 0;
 800096c:	4b21      	ldr	r3, [pc, #132]	; (80009f4 <CAN_Init+0xb8>)
 800096e:	2200      	movs	r2, #0
 8000970:	615a      	str	r2, [r3, #20]
		filterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000972:	4b20      	ldr	r3, [pc, #128]	; (80009f4 <CAN_Init+0xb8>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
		filterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000978:	4b1e      	ldr	r3, [pc, #120]	; (80009f4 <CAN_Init+0xb8>)
 800097a:	2200      	movs	r2, #0
 800097c:	619a      	str	r2, [r3, #24]
		filterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800097e:	4b1d      	ldr	r3, [pc, #116]	; (80009f4 <CAN_Init+0xb8>)
 8000980:	2201      	movs	r2, #1
 8000982:	61da      	str	r2, [r3, #28]
		filterconfig.FilterIdHigh = 0x0;
 8000984:	4b1b      	ldr	r3, [pc, #108]	; (80009f4 <CAN_Init+0xb8>)
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
		filterconfig.FilterIdLow = 0x0000;
 800098a:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <CAN_Init+0xb8>)
 800098c:	2200      	movs	r2, #0
 800098e:	605a      	str	r2, [r3, #4]
		filterconfig.FilterMaskIdHigh = 0x0;
 8000990:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <CAN_Init+0xb8>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
		filterconfig.FilterMaskIdLow = 0x0000;
 8000996:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <CAN_Init+0xb8>)
 8000998:	2200      	movs	r2, #0
 800099a:	60da      	str	r2, [r3, #12]

		error |= HAL_CAN_ConfigFilter(hcan, &filterconfig);
 800099c:	4915      	ldr	r1, [pc, #84]	; (80009f4 <CAN_Init+0xb8>)
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	f002 fc0d 	bl	80031be <HAL_CAN_ConfigFilter>
 80009a4:	4603      	mov	r3, r0
 80009a6:	461a      	mov	r2, r3
 80009a8:	7bfb      	ldrb	r3, [r7, #15]
 80009aa:	4313      	orrs	r3, r2
 80009ac:	73fb      	strb	r3, [r7, #15]
		error |= HAL_CAN_Start(hcan);
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f002 fccf 	bl	8003352 <HAL_CAN_Start>
 80009b4:	4603      	mov	r3, r0
 80009b6:	461a      	mov	r2, r3
 80009b8:	7bfb      	ldrb	r3, [r7, #15]
 80009ba:	4313      	orrs	r3, r2
 80009bc:	73fb      	strb	r3, [r7, #15]
		error |= HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80009be:	2102      	movs	r1, #2
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f002 feec 	bl	800379e <HAL_CAN_ActivateNotification>
 80009c6:	4603      	mov	r3, r0
 80009c8:	461a      	mov	r2, r3
 80009ca:	7bfb      	ldrb	r3, [r7, #15]
 80009cc:	4313      	orrs	r3, r2
 80009ce:	73fb      	strb	r3, [r7, #15]

		if (error != HAL_OK) {
 80009d0:	7bfb      	ldrb	r3, [r7, #15]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d004      	beq.n	80009e0 <CAN_Init+0xa4>
			error = HAL_ERROR;
 80009d6:	2301      	movs	r3, #1
 80009d8:	73fb      	strb	r3, [r7, #15]
 80009da:	e001      	b.n	80009e0 <CAN_Init+0xa4>
		}
	}
	else
	{
		error = HAL_ERROR;
 80009dc:	2301      	movs	r3, #1
 80009de:	73fb      	strb	r3, [r7, #15]
	}

	return error;
 80009e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	200001c8 	.word	0x200001c8
 80009f0:	200001cc 	.word	0x200001cc
 80009f4:	200001a0 	.word	0x200001a0

080009f8 <CAN_GetRxData>:
	return HAL_CAN_AddTxMessage(&hcan1, &TxHeader, dataBuffer, &TxMailbox);
}

/* RX functions */
HAL_StatusTypeDef CAN_GetRxData(const uint32_t rxMsgId, uint8_t dataBuffer[])
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	6039      	str	r1, [r7, #0]

	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, dataBuffer) == HAL_OK)
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	4a0b      	ldr	r2, [pc, #44]	; (8000a34 <CAN_GetRxData+0x3c>)
 8000a06:	2100      	movs	r1, #0
 8000a08:	480b      	ldr	r0, [pc, #44]	; (8000a38 <CAN_GetRxData+0x40>)
 8000a0a:	f002 fdb6 	bl	800357a <HAL_CAN_GetRxMessage>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d109      	bne.n	8000a28 <CAN_GetRxData+0x30>
	{
		if(RxHeader.StdId == PTT_ADDRESS)	//PTT ID
 8000a14:	4b07      	ldr	r3, [pc, #28]	; (8000a34 <CAN_GetRxData+0x3c>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8000a1c:	d102      	bne.n	8000a24 <CAN_GetRxData+0x2c>
	{
		PTT_control(dataBuffer);
 8000a1e:	6838      	ldr	r0, [r7, #0]
 8000a20:	f7ff fbd2 	bl	80001c8 <PTT_control>
	}

		return HAL_OK;
 8000a24:	2300      	movs	r3, #0
 8000a26:	e000      	b.n	8000a2a <CAN_GetRxData+0x32>
	}
	return HAL_ERROR;
 8000a28:	2301      	movs	r3, #1
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200001e4 	.word	0x200001e4
 8000a38:	20000178 	.word	0x20000178

08000a3c <BP_F_over_can>:
    can_status= HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TX_frame.buffer, &TX_frame.TxMailbox);
    return can_status;
}
*/
HAL_StatusTypeDef BP_F_over_can(BPSensor * sens)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	TxHeader.DLC = DATA_LENGHT;  // data length
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <BP_F_over_can+0x48>)
 8000a46:	2202      	movs	r2, #2
 8000a48:	611a      	str	r2, [r3, #16]
	TxHeader.IDE = CAN_ID_STD;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <BP_F_over_can+0x48>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <BP_F_over_can+0x48>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = BP_F_ID;  // ID
 8000a56:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <BP_F_over_can+0x48>)
 8000a58:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000a5c:	601a      	str	r2, [r3, #0]

	uint16_t data=(uint16_t)sens->data;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	81fb      	strh	r3, [r7, #14]
	can_status= HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &TX_frame.TxMailbox);
 8000a64:	89fb      	ldrh	r3, [r7, #14]
 8000a66:	461a      	mov	r2, r3
 8000a68:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <BP_F_over_can+0x4c>)
 8000a6a:	4906      	ldr	r1, [pc, #24]	; (8000a84 <BP_F_over_can+0x48>)
 8000a6c:	4807      	ldr	r0, [pc, #28]	; (8000a8c <BP_F_over_can+0x50>)
 8000a6e:	f002 fcb4 	bl	80033da <HAL_CAN_AddTxMessage>
 8000a72:	4603      	mov	r3, r0
 8000a74:	461a      	mov	r2, r3
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <BP_F_over_can+0x54>)
 8000a78:	701a      	strb	r2, [r3, #0]
}
 8000a7a:	bf00      	nop
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	200001cc 	.word	0x200001cc
 8000a88:	20000224 	.word	0x20000224
 8000a8c:	20000178 	.word	0x20000178
 8000a90:	20000200 	.word	0x20000200

08000a94 <BP_R_over_can>:

HAL_StatusTypeDef BP_R_over_can(BPSensor * sens)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	TxHeader.DLC = DATA_LENGHT;  // data length
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <BP_R_over_can+0x48>)
 8000a9e:	2202      	movs	r2, #2
 8000aa0:	611a      	str	r2, [r3, #16]
	TxHeader.IDE = CAN_ID_STD;
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <BP_R_over_can+0x48>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <BP_R_over_can+0x48>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = BP_R_ID;  // ID
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <BP_R_over_can+0x48>)
 8000ab0:	f240 6201 	movw	r2, #1537	; 0x601
 8000ab4:	601a      	str	r2, [r3, #0]

	uint16_t data=(uint16_t)sens->data;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	81fb      	strh	r3, [r7, #14]
	can_status= HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &TX_frame.TxMailbox);
 8000abc:	89fb      	ldrh	r3, [r7, #14]
 8000abe:	461a      	mov	r2, r3
 8000ac0:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <BP_R_over_can+0x4c>)
 8000ac2:	4906      	ldr	r1, [pc, #24]	; (8000adc <BP_R_over_can+0x48>)
 8000ac4:	4807      	ldr	r0, [pc, #28]	; (8000ae4 <BP_R_over_can+0x50>)
 8000ac6:	f002 fc88 	bl	80033da <HAL_CAN_AddTxMessage>
 8000aca:	4603      	mov	r3, r0
 8000acc:	461a      	mov	r2, r3
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <BP_R_over_can+0x54>)
 8000ad0:	701a      	strb	r2, [r3, #0]
}
 8000ad2:	bf00      	nop
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	200001cc 	.word	0x200001cc
 8000ae0:	20000224 	.word	0x20000224
 8000ae4:	20000178 	.word	0x20000178
 8000ae8:	20000200 	.word	0x20000200

08000aec <VSS_LR_over_can>:

HAL_StatusTypeDef VSS_LR_over_can(ABSSensor*sens)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
    TxHeader.DLC = DATA_LENGHT;  // data length
 8000af4:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <VSS_LR_over_can+0x50>)
 8000af6:	2202      	movs	r2, #2
 8000af8:	611a      	str	r2, [r3, #16]
    TxHeader.IDE = CAN_ID_STD;
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <VSS_LR_over_can+0x50>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
    TxHeader.RTR = CAN_RTR_DATA;
 8000b00:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <VSS_LR_over_can+0x50>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	60da      	str	r2, [r3, #12]
    TxHeader.StdId = ABS_LR_ID;  // ID
 8000b06:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <VSS_LR_over_can+0x50>)
 8000b08:	f240 6204 	movw	r2, #1540	; 0x604
 8000b0c:	601a      	str	r2, [r3, #0]

    uint16_t data = (uint16_t)sens->data;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	81fb      	strh	r3, [r7, #14]
    TX_frame.TxMailbox = CAN_TX_MAILBOX;
 8000b14:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <VSS_LR_over_can+0x54>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	615a      	str	r2, [r3, #20]
    can_status= HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &TX_frame.TxMailbox);
 8000b1a:	89fb      	ldrh	r3, [r7, #14]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <VSS_LR_over_can+0x58>)
 8000b20:	4906      	ldr	r1, [pc, #24]	; (8000b3c <VSS_LR_over_can+0x50>)
 8000b22:	4809      	ldr	r0, [pc, #36]	; (8000b48 <VSS_LR_over_can+0x5c>)
 8000b24:	f002 fc59 	bl	80033da <HAL_CAN_AddTxMessage>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <VSS_LR_over_can+0x60>)
 8000b2e:	701a      	strb	r2, [r3, #0]
    return can_status;
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <VSS_LR_over_can+0x60>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	200001cc 	.word	0x200001cc
 8000b40:	20000210 	.word	0x20000210
 8000b44:	20000224 	.word	0x20000224
 8000b48:	20000178 	.word	0x20000178
 8000b4c:	20000200 	.word	0x20000200

08000b50 <VSS_RR_over_can>:
HAL_StatusTypeDef VSS_RR_over_can(ABSSensor * sens)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
    TxHeader.DLC = DATA_LENGHT;  // data length
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <VSS_RR_over_can+0x50>)
 8000b5a:	2202      	movs	r2, #2
 8000b5c:	611a      	str	r2, [r3, #16]
    TxHeader.IDE = CAN_ID_STD;
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <VSS_RR_over_can+0x50>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
    TxHeader.RTR = CAN_RTR_DATA;
 8000b64:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <VSS_RR_over_can+0x50>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	60da      	str	r2, [r3, #12]
    TxHeader.StdId = ABS_RR_ID;  // ID
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <VSS_RR_over_can+0x50>)
 8000b6c:	f240 6205 	movw	r2, #1541	; 0x605
 8000b70:	601a      	str	r2, [r3, #0]

    uint16_t data = (uint16_t)sens->data;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	81fb      	strh	r3, [r7, #14]
    TX_frame.TxMailbox = CAN_TX_MAILBOX;
 8000b78:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <VSS_RR_over_can+0x54>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	615a      	str	r2, [r3, #20]
    can_status= HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &TX_frame.TxMailbox);
 8000b7e:	89fb      	ldrh	r3, [r7, #14]
 8000b80:	461a      	mov	r2, r3
 8000b82:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <VSS_RR_over_can+0x58>)
 8000b84:	4906      	ldr	r1, [pc, #24]	; (8000ba0 <VSS_RR_over_can+0x50>)
 8000b86:	4809      	ldr	r0, [pc, #36]	; (8000bac <VSS_RR_over_can+0x5c>)
 8000b88:	f002 fc27 	bl	80033da <HAL_CAN_AddTxMessage>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	461a      	mov	r2, r3
 8000b90:	4b07      	ldr	r3, [pc, #28]	; (8000bb0 <VSS_RR_over_can+0x60>)
 8000b92:	701a      	strb	r2, [r3, #0]
    return can_status;
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <VSS_RR_over_can+0x60>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3710      	adds	r7, #16
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	200001cc 	.word	0x200001cc
 8000ba4:	20000210 	.word	0x20000210
 8000ba8:	20000224 	.word	0x20000224
 8000bac:	20000178 	.word	0x20000178
 8000bb0:	20000200 	.word	0x20000200

08000bb4 <Damper_RR_over_can>:

HAL_StatusTypeDef Damper_RR_over_can(DamperSensor * sens)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
	TxHeader.DLC = DATA_LENGHT;  // data length
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <Damper_RR_over_can+0x48>)
 8000bbe:	2202      	movs	r2, #2
 8000bc0:	611a      	str	r2, [r3, #16]
	TxHeader.IDE = CAN_ID_STD;
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <Damper_RR_over_can+0x48>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <Damper_RR_over_can+0x48>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = DAMPER_RR_ID;  // ID
 8000bce:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <Damper_RR_over_can+0x48>)
 8000bd0:	f240 6203 	movw	r2, #1539	; 0x603
 8000bd4:	601a      	str	r2, [r3, #0]
	uint16_t data=(uint16_t)sens->data;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	81fb      	strh	r3, [r7, #14]
	can_status= HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &TX_frame.TxMailbox);
 8000bdc:	89fb      	ldrh	r3, [r7, #14]
 8000bde:	461a      	mov	r2, r3
 8000be0:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <Damper_RR_over_can+0x4c>)
 8000be2:	4906      	ldr	r1, [pc, #24]	; (8000bfc <Damper_RR_over_can+0x48>)
 8000be4:	4807      	ldr	r0, [pc, #28]	; (8000c04 <Damper_RR_over_can+0x50>)
 8000be6:	f002 fbf8 	bl	80033da <HAL_CAN_AddTxMessage>
 8000bea:	4603      	mov	r3, r0
 8000bec:	461a      	mov	r2, r3
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <Damper_RR_over_can+0x54>)
 8000bf0:	701a      	strb	r2, [r3, #0]
}
 8000bf2:	bf00      	nop
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	200001cc 	.word	0x200001cc
 8000c00:	20000224 	.word	0x20000224
 8000c04:	20000178 	.word	0x20000178
 8000c08:	20000200 	.word	0x20000200

08000c0c <Damper_LR_over_can>:

HAL_StatusTypeDef Damper_LR_over_can(DamperSensor * sens)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
	TxHeader.DLC = DATA_LENGHT;  // data length
 8000c14:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <Damper_LR_over_can+0x48>)
 8000c16:	2202      	movs	r2, #2
 8000c18:	611a      	str	r2, [r3, #16]
	TxHeader.IDE = CAN_ID_STD;
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <Damper_LR_over_can+0x48>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <Damper_LR_over_can+0x48>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = DAMPER_LR_ID;  // ID
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <Damper_LR_over_can+0x48>)
 8000c28:	f240 6202 	movw	r2, #1538	; 0x602
 8000c2c:	601a      	str	r2, [r3, #0]
	uint16_t data=(uint16_t)sens->data;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	81fb      	strh	r3, [r7, #14]
	can_status= HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &TX_frame.TxMailbox);
 8000c34:	89fb      	ldrh	r3, [r7, #14]
 8000c36:	461a      	mov	r2, r3
 8000c38:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <Damper_LR_over_can+0x4c>)
 8000c3a:	4906      	ldr	r1, [pc, #24]	; (8000c54 <Damper_LR_over_can+0x48>)
 8000c3c:	4807      	ldr	r0, [pc, #28]	; (8000c5c <Damper_LR_over_can+0x50>)
 8000c3e:	f002 fbcc 	bl	80033da <HAL_CAN_AddTxMessage>
 8000c42:	4603      	mov	r3, r0
 8000c44:	461a      	mov	r2, r3
 8000c46:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <Damper_LR_over_can+0x54>)
 8000c48:	701a      	strb	r2, [r3, #0]
}
 8000c4a:	bf00      	nop
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3710      	adds	r7, #16
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	200001cc 	.word	0x200001cc
 8000c58:	20000224 	.word	0x20000224
 8000c5c:	20000178 	.word	0x20000178
 8000c60:	20000200 	.word	0x20000200

08000c64 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* RX Callback functions */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)

{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
	CAN_GetRxData(PTT.msgId, PTT.buffer);
 8000c6c:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4904      	ldr	r1, [pc, #16]	; (8000c84 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fec0 	bl	80009f8 <CAN_GetRxData>
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000204 	.word	0x20000204
 8000c84:	20000208 	.word	0x20000208

08000c88 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08a      	sub	sp, #40	; 0x28
 8000c8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
 8000c9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c9e:	4b2e      	ldr	r3, [pc, #184]	; (8000d58 <MX_GPIO_Init+0xd0>)
 8000ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca2:	4a2d      	ldr	r2, [pc, #180]	; (8000d58 <MX_GPIO_Init+0xd0>)
 8000ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ca8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000caa:	4b2b      	ldr	r3, [pc, #172]	; (8000d58 <MX_GPIO_Init+0xd0>)
 8000cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb6:	4b28      	ldr	r3, [pc, #160]	; (8000d58 <MX_GPIO_Init+0xd0>)
 8000cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cba:	4a27      	ldr	r2, [pc, #156]	; (8000d58 <MX_GPIO_Init+0xd0>)
 8000cbc:	f043 0304 	orr.w	r3, r3, #4
 8000cc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cc2:	4b25      	ldr	r3, [pc, #148]	; (8000d58 <MX_GPIO_Init+0xd0>)
 8000cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc6:	f003 0304 	and.w	r3, r3, #4
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cce:	4b22      	ldr	r3, [pc, #136]	; (8000d58 <MX_GPIO_Init+0xd0>)
 8000cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd2:	4a21      	ldr	r2, [pc, #132]	; (8000d58 <MX_GPIO_Init+0xd0>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cda:	4b1f      	ldr	r3, [pc, #124]	; (8000d58 <MX_GPIO_Init+0xd0>)
 8000cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce6:	4b1c      	ldr	r3, [pc, #112]	; (8000d58 <MX_GPIO_Init+0xd0>)
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cea:	4a1b      	ldr	r2, [pc, #108]	; (8000d58 <MX_GPIO_Init+0xd0>)
 8000cec:	f043 0302 	orr.w	r3, r3, #2
 8000cf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cf2:	4b19      	ldr	r3, [pc, #100]	; (8000d58 <MX_GPIO_Init+0xd0>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf6:	f003 0302 	and.w	r3, r3, #2
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PTT_GPIO_Port, PTT_Pin, GPIO_PIN_RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2101      	movs	r1, #1
 8000d02:	4816      	ldr	r0, [pc, #88]	; (8000d5c <MX_GPIO_Init+0xd4>)
 8000d04:	f003 faaa 	bl	800425c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Status_GPIO_Port, LED_Status_Pin, GPIO_PIN_RESET);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2104      	movs	r1, #4
 8000d0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d10:	f003 faa4 	bl	800425c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PTT_Pin;
 8000d14:	2301      	movs	r3, #1
 8000d16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2300      	movs	r3, #0
 8000d22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PTT_GPIO_Port, &GPIO_InitStruct);
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	4619      	mov	r1, r3
 8000d2a:	480c      	ldr	r0, [pc, #48]	; (8000d5c <MX_GPIO_Init+0xd4>)
 8000d2c:	f003 f8ec 	bl	8003f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Status_Pin;
 8000d30:	2304      	movs	r3, #4
 8000d32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d34:	2301      	movs	r3, #1
 8000d36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_Status_GPIO_Port, &GPIO_InitStruct);
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	4619      	mov	r1, r3
 8000d46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d4a:	f003 f8dd 	bl	8003f08 <HAL_GPIO_Init>

}
 8000d4e:	bf00      	nop
 8000d50:	3728      	adds	r7, #40	; 0x28
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	48000800 	.word	0x48000800

08000d60 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d64:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <MX_I2C1_Init+0x74>)
 8000d66:	4a1c      	ldr	r2, [pc, #112]	; (8000dd8 <MX_I2C1_Init+0x78>)
 8000d68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00909BEB;
 8000d6a:	4b1a      	ldr	r3, [pc, #104]	; (8000dd4 <MX_I2C1_Init+0x74>)
 8000d6c:	4a1b      	ldr	r2, [pc, #108]	; (8000ddc <MX_I2C1_Init+0x7c>)
 8000d6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d70:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <MX_I2C1_Init+0x74>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d76:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <MX_I2C1_Init+0x74>)
 8000d78:	2201      	movs	r2, #1
 8000d7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d7c:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <MX_I2C1_Init+0x74>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d82:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <MX_I2C1_Init+0x74>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d88:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <MX_I2C1_Init+0x74>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d8e:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <MX_I2C1_Init+0x74>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d94:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <MX_I2C1_Init+0x74>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d9a:	480e      	ldr	r0, [pc, #56]	; (8000dd4 <MX_I2C1_Init+0x74>)
 8000d9c:	f003 fa76 	bl	800428c <HAL_I2C_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000da6:	f000 fa41 	bl	800122c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000daa:	2100      	movs	r1, #0
 8000dac:	4809      	ldr	r0, [pc, #36]	; (8000dd4 <MX_I2C1_Init+0x74>)
 8000dae:	f004 f894 	bl	8004eda <HAL_I2CEx_ConfigAnalogFilter>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000db8:	f000 fa38 	bl	800122c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <MX_I2C1_Init+0x74>)
 8000dc0:	f004 f8d6 	bl	8004f70 <HAL_I2CEx_ConfigDigitalFilter>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000dca:	f000 fa2f 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	2000022c 	.word	0x2000022c
 8000dd8:	40005400 	.word	0x40005400
 8000ddc:	00909beb 	.word	0x00909beb

08000de0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000de4:	4b1b      	ldr	r3, [pc, #108]	; (8000e54 <MX_I2C2_Init+0x74>)
 8000de6:	4a1c      	ldr	r2, [pc, #112]	; (8000e58 <MX_I2C2_Init+0x78>)
 8000de8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00909BEB;
 8000dea:	4b1a      	ldr	r3, [pc, #104]	; (8000e54 <MX_I2C2_Init+0x74>)
 8000dec:	4a1b      	ldr	r2, [pc, #108]	; (8000e5c <MX_I2C2_Init+0x7c>)
 8000dee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000df0:	4b18      	ldr	r3, [pc, #96]	; (8000e54 <MX_I2C2_Init+0x74>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000df6:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <MX_I2C2_Init+0x74>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dfc:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <MX_I2C2_Init+0x74>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000e02:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <MX_I2C2_Init+0x74>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <MX_I2C2_Init+0x74>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <MX_I2C2_Init+0x74>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e14:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <MX_I2C2_Init+0x74>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e1a:	480e      	ldr	r0, [pc, #56]	; (8000e54 <MX_I2C2_Init+0x74>)
 8000e1c:	f003 fa36 	bl	800428c <HAL_I2C_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000e26:	f000 fa01 	bl	800122c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4809      	ldr	r0, [pc, #36]	; (8000e54 <MX_I2C2_Init+0x74>)
 8000e2e:	f004 f854 	bl	8004eda <HAL_I2CEx_ConfigAnalogFilter>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000e38:	f000 f9f8 	bl	800122c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <MX_I2C2_Init+0x74>)
 8000e40:	f004 f896 	bl	8004f70 <HAL_I2CEx_ConfigDigitalFilter>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000e4a:	f000 f9ef 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000280 	.word	0x20000280
 8000e58:	40005800 	.word	0x40005800
 8000e5c:	00909beb 	.word	0x00909beb

08000e60 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b0ae      	sub	sp, #184	; 0xb8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e78:	f107 031c 	add.w	r3, r7, #28
 8000e7c:	2288      	movs	r2, #136	; 0x88
 8000e7e:	2100      	movs	r1, #0
 8000e80:	4618      	mov	r0, r3
 8000e82:	f006 fc7f 	bl	8007784 <memset>
  if(i2cHandle->Instance==I2C1)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a52      	ldr	r2, [pc, #328]	; (8000fd4 <HAL_I2C_MspInit+0x174>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d14b      	bne.n	8000f28 <HAL_I2C_MspInit+0xc8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e90:	2340      	movs	r3, #64	; 0x40
 8000e92:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e94:	2300      	movs	r3, #0
 8000e96:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e98:	f107 031c 	add.w	r3, r7, #28
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f004 fedd 	bl	8005c5c <HAL_RCCEx_PeriphCLKConfig>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000ea8:	f000 f9c0 	bl	800122c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eac:	4b4a      	ldr	r3, [pc, #296]	; (8000fd8 <HAL_I2C_MspInit+0x178>)
 8000eae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb0:	4a49      	ldr	r2, [pc, #292]	; (8000fd8 <HAL_I2C_MspInit+0x178>)
 8000eb2:	f043 0302 	orr.w	r3, r3, #2
 8000eb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eb8:	4b47      	ldr	r3, [pc, #284]	; (8000fd8 <HAL_I2C_MspInit+0x178>)
 8000eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ebc:	f003 0302 	and.w	r3, r3, #2
 8000ec0:	61bb      	str	r3, [r7, #24]
 8000ec2:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ec4:	23c0      	movs	r3, #192	; 0xc0
 8000ec6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eca:	2312      	movs	r3, #18
 8000ecc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000edc:	2304      	movs	r3, #4
 8000ede:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	483c      	ldr	r0, [pc, #240]	; (8000fdc <HAL_I2C_MspInit+0x17c>)
 8000eea:	f003 f80d 	bl	8003f08 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000eee:	4b3a      	ldr	r3, [pc, #232]	; (8000fd8 <HAL_I2C_MspInit+0x178>)
 8000ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef2:	4a39      	ldr	r2, [pc, #228]	; (8000fd8 <HAL_I2C_MspInit+0x178>)
 8000ef4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ef8:	6593      	str	r3, [r2, #88]	; 0x58
 8000efa:	4b37      	ldr	r3, [pc, #220]	; (8000fd8 <HAL_I2C_MspInit+0x178>)
 8000efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000efe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f02:	617b      	str	r3, [r7, #20]
 8000f04:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2100      	movs	r1, #0
 8000f0a:	201f      	movs	r0, #31
 8000f0c:	f002 ff77 	bl	8003dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000f10:	201f      	movs	r0, #31
 8000f12:	f002 ff90 	bl	8003e36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2100      	movs	r1, #0
 8000f1a:	2020      	movs	r0, #32
 8000f1c:	f002 ff6f 	bl	8003dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000f20:	2020      	movs	r0, #32
 8000f22:	f002 ff88 	bl	8003e36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000f26:	e050      	b.n	8000fca <HAL_I2C_MspInit+0x16a>
  else if(i2cHandle->Instance==I2C2)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a2c      	ldr	r2, [pc, #176]	; (8000fe0 <HAL_I2C_MspInit+0x180>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d14b      	bne.n	8000fca <HAL_I2C_MspInit+0x16a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000f32:	2380      	movs	r3, #128	; 0x80
 8000f34:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000f36:	2300      	movs	r3, #0
 8000f38:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f3a:	f107 031c 	add.w	r3, r7, #28
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f004 fe8c 	bl	8005c5c <HAL_RCCEx_PeriphCLKConfig>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8000f4a:	f000 f96f 	bl	800122c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4e:	4b22      	ldr	r3, [pc, #136]	; (8000fd8 <HAL_I2C_MspInit+0x178>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f52:	4a21      	ldr	r2, [pc, #132]	; (8000fd8 <HAL_I2C_MspInit+0x178>)
 8000f54:	f043 0302 	orr.w	r3, r3, #2
 8000f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f5a:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <HAL_I2C_MspInit+0x178>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f66:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f6e:	2312      	movs	r3, #18
 8000f70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f80:	2304      	movs	r3, #4
 8000f82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f86:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4813      	ldr	r0, [pc, #76]	; (8000fdc <HAL_I2C_MspInit+0x17c>)
 8000f8e:	f002 ffbb 	bl	8003f08 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f92:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <HAL_I2C_MspInit+0x178>)
 8000f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f96:	4a10      	ldr	r2, [pc, #64]	; (8000fd8 <HAL_I2C_MspInit+0x178>)
 8000f98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f9c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <HAL_I2C_MspInit+0x178>)
 8000fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2100      	movs	r1, #0
 8000fae:	2021      	movs	r0, #33	; 0x21
 8000fb0:	f002 ff25 	bl	8003dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000fb4:	2021      	movs	r0, #33	; 0x21
 8000fb6:	f002 ff3e 	bl	8003e36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	2022      	movs	r0, #34	; 0x22
 8000fc0:	f002 ff1d 	bl	8003dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000fc4:	2022      	movs	r0, #34	; 0x22
 8000fc6:	f002 ff36 	bl	8003e36 <HAL_NVIC_EnableIRQ>
}
 8000fca:	bf00      	nop
 8000fcc:	37b8      	adds	r7, #184	; 0xb8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40005400 	.word	0x40005400
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	48000400 	.word	0x48000400
 8000fe0:	40005800 	.word	0x40005800

08000fe4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe8:	f000 fb91 	bl	800170e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fec:	f000 f8a2 	bl	8001134 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ff0:	f000 f8f1 	bl	80011d6 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff4:	f7ff fe48 	bl	8000c88 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000ff8:	f7ff fc1e 	bl	8000838 <MX_CAN1_Init>
  MX_ADC1_Init();
 8000ffc:	f7ff f974 	bl	80002e8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001000:	f7ff f9fa 	bl	80003f8 <MX_ADC2_Init>
  MX_I2C1_Init();
 8001004:	f7ff feac 	bl	8000d60 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001008:	f7ff feea 	bl	8000de0 <MX_I2C2_Init>
  MX_TIM3_Init();
 800100c:	f000 fa46 	bl	800149c <MX_TIM3_Init>
  MX_TIM2_Init();
 8001010:	f000 f9b8 	bl	8001384 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  absInit(&absRRSensor, 0x01, &htim2, TIM_CHANNEL_1);
 8001014:	2300      	movs	r3, #0
 8001016:	4a36      	ldr	r2, [pc, #216]	; (80010f0 <main+0x10c>)
 8001018:	2101      	movs	r1, #1
 800101a:	4836      	ldr	r0, [pc, #216]	; (80010f4 <main+0x110>)
 800101c:	f7ff f8f2 	bl	8000204 <absInit>
  absInit(&absLRSensor, 0x02, &htim3, TIM_CHANNEL_1);
 8001020:	2300      	movs	r3, #0
 8001022:	4a35      	ldr	r2, [pc, #212]	; (80010f8 <main+0x114>)
 8001024:	2102      	movs	r1, #2
 8001026:	4835      	ldr	r0, [pc, #212]	; (80010fc <main+0x118>)
 8001028:	f7ff f8ec 	bl	8000204 <absInit>

  BPInit(&BP_Front_Sensor,0x01, &hadc1, ADC_CHANNEL_8);
 800102c:	4b34      	ldr	r3, [pc, #208]	; (8001100 <main+0x11c>)
 800102e:	4a35      	ldr	r2, [pc, #212]	; (8001104 <main+0x120>)
 8001030:	2101      	movs	r1, #1
 8001032:	4835      	ldr	r0, [pc, #212]	; (8001108 <main+0x124>)
 8001034:	f7ff fb6a 	bl	800070c <BPInit>
  BPInit(&BP_Rear_Sensor,0x01,  &hadc1, ADC_CHANNEL_9);
 8001038:	4b34      	ldr	r3, [pc, #208]	; (800110c <main+0x128>)
 800103a:	4a32      	ldr	r2, [pc, #200]	; (8001104 <main+0x120>)
 800103c:	2101      	movs	r1, #1
 800103e:	4834      	ldr	r0, [pc, #208]	; (8001110 <main+0x12c>)
 8001040:	f7ff fb64 	bl	800070c <BPInit>

  DampInit(&DampLRSensor, 0x01, &hadc2, ADC_CHANNEL_5);
 8001044:	4b33      	ldr	r3, [pc, #204]	; (8001114 <main+0x130>)
 8001046:	4a34      	ldr	r2, [pc, #208]	; (8001118 <main+0x134>)
 8001048:	2101      	movs	r1, #1
 800104a:	4834      	ldr	r0, [pc, #208]	; (800111c <main+0x138>)
 800104c:	f7ff faca 	bl	80005e4 <DampInit>
  DampInit(&DampRRSensor, 0x01, &hadc2, ADC_CHANNEL_6);
 8001050:	4b33      	ldr	r3, [pc, #204]	; (8001120 <main+0x13c>)
 8001052:	4a31      	ldr	r2, [pc, #196]	; (8001118 <main+0x134>)
 8001054:	2101      	movs	r1, #1
 8001056:	4833      	ldr	r0, [pc, #204]	; (8001124 <main+0x140>)
 8001058:	f7ff fac4 	bl	80005e4 <DampInit>



  HAL_CAN_Start(&hcan1);
 800105c:	4832      	ldr	r0, [pc, #200]	; (8001128 <main+0x144>)
 800105e:	f002 f978 	bl	8003352 <HAL_CAN_Start>
  CAN_Init(&hcan1);
 8001062:	4831      	ldr	r0, [pc, #196]	; (8001128 <main+0x144>)
 8001064:	f7ff fc6a 	bl	800093c <CAN_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

 	  //LED STATUS
 	HAL_GPIO_WritePin(LED_Status_GPIO_Port, LED_Status_Pin, 1);
 8001068:	2201      	movs	r2, #1
 800106a:	2104      	movs	r1, #4
 800106c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001070:	f003 f8f4 	bl	800425c <HAL_GPIO_WritePin>
 		wheel_speed[1]=absCalculate(absRRSensor.data);
 		flagR=0x00;
 	}
 	*/
 	 //BP
 	BP_GetData(&BP_Front_Sensor);
 8001074:	4824      	ldr	r0, [pc, #144]	; (8001108 <main+0x124>)
 8001076:	f7ff fb8d 	bl	8000794 <BP_GetData>
 	BP_GetData(&BP_Rear_Sensor);
 800107a:	4825      	ldr	r0, [pc, #148]	; (8001110 <main+0x12c>)
 800107c:	f7ff fb8a 	bl	8000794 <BP_GetData>

 	 //DAMPER
 	Amorki_GetData(&DampLRSensor);
 8001080:	4826      	ldr	r0, [pc, #152]	; (800111c <main+0x138>)
 8001082:	f7ff faf1 	bl	8000668 <Amorki_GetData>
	Amorki_GetData(&DampRRSensor);
 8001086:	4827      	ldr	r0, [pc, #156]	; (8001124 <main+0x140>)
 8001088:	f7ff faee 	bl	8000668 <Amorki_GetData>


 	//PTT
 	if(PTT_status)				//ACTIVE
 800108c:	4b27      	ldr	r3, [pc, #156]	; (800112c <main+0x148>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d005      	beq.n	80010a0 <main+0xbc>
 	{
 		HAL_GPIO_WritePin(PTT_GPIO_Port, PTT_Pin, 1);
 8001094:	2201      	movs	r2, #1
 8001096:	2101      	movs	r1, #1
 8001098:	4825      	ldr	r0, [pc, #148]	; (8001130 <main+0x14c>)
 800109a:	f003 f8df 	bl	800425c <HAL_GPIO_WritePin>
 800109e:	e004      	b.n	80010aa <main+0xc6>
 		//transmission_check=3000;
 	}
 	else						//DEACTIVE
 		HAL_GPIO_WritePin(PTT_GPIO_Port, PTT_Pin, 0);
 80010a0:	2200      	movs	r2, #0
 80010a2:	2101      	movs	r1, #1
 80010a4:	4822      	ldr	r0, [pc, #136]	; (8001130 <main+0x14c>)
 80010a6:	f003 f8d9 	bl	800425c <HAL_GPIO_WritePin>
 	displacement[0]=23.2;
 	displacement[1]=30;
 	wheel_speed[0]=2.56;
 	*/

 	BP_F_over_can(&BP_Front_Sensor);
 80010aa:	4817      	ldr	r0, [pc, #92]	; (8001108 <main+0x124>)
 80010ac:	f7ff fcc6 	bl	8000a3c <BP_F_over_can>
 	HAL_Delay(1);
 80010b0:	2001      	movs	r0, #1
 80010b2:	f000 fba1 	bl	80017f8 <HAL_Delay>
	BP_R_over_can(&BP_Rear_Sensor);
 80010b6:	4816      	ldr	r0, [pc, #88]	; (8001110 <main+0x12c>)
 80010b8:	f7ff fcec 	bl	8000a94 <BP_R_over_can>
 	HAL_Delay(1);
 80010bc:	2001      	movs	r0, #1
 80010be:	f000 fb9b 	bl	80017f8 <HAL_Delay>

 	Damper_LR_over_can(&DampLRSensor);
 80010c2:	4816      	ldr	r0, [pc, #88]	; (800111c <main+0x138>)
 80010c4:	f7ff fda2 	bl	8000c0c <Damper_LR_over_can>
 	HAL_Delay(1);
 80010c8:	2001      	movs	r0, #1
 80010ca:	f000 fb95 	bl	80017f8 <HAL_Delay>
 	Damper_RR_over_can(&DampRRSensor);
 80010ce:	4815      	ldr	r0, [pc, #84]	; (8001124 <main+0x140>)
 80010d0:	f7ff fd70 	bl	8000bb4 <Damper_RR_over_can>
 	HAL_Delay(1);
 80010d4:	2001      	movs	r0, #1
 80010d6:	f000 fb8f 	bl	80017f8 <HAL_Delay>

 	VSS_LR_over_can(&absLRSensor);
 80010da:	4808      	ldr	r0, [pc, #32]	; (80010fc <main+0x118>)
 80010dc:	f7ff fd06 	bl	8000aec <VSS_LR_over_can>
 	HAL_Delay(1);
 80010e0:	2001      	movs	r0, #1
 80010e2:	f000 fb89 	bl	80017f8 <HAL_Delay>
 	VSS_RR_over_can(&absRRSensor);
 80010e6:	4803      	ldr	r0, [pc, #12]	; (80010f4 <main+0x110>)
 80010e8:	f7ff fd32 	bl	8000b50 <VSS_RR_over_can>
 	HAL_GPIO_WritePin(LED_Status_GPIO_Port, LED_Status_Pin, 1);
 80010ec:	e7bc      	b.n	8001068 <main+0x84>
 80010ee:	bf00      	nop
 80010f0:	200002d4 	.word	0x200002d4
 80010f4:	2000002c 	.word	0x2000002c
 80010f8:	20000320 	.word	0x20000320
 80010fc:	2000004c 	.word	0x2000004c
 8001100:	21800100 	.word	0x21800100
 8001104:	2000006c 	.word	0x2000006c
 8001108:	20000158 	.word	0x20000158
 800110c:	25b00200 	.word	0x25b00200
 8001110:	20000168 	.word	0x20000168
 8001114:	14f00020 	.word	0x14f00020
 8001118:	200000d0 	.word	0x200000d0
 800111c:	20000138 	.word	0x20000138
 8001120:	19200040 	.word	0x19200040
 8001124:	20000148 	.word	0x20000148
 8001128:	20000178 	.word	0x20000178
 800112c:	20000028 	.word	0x20000028
 8001130:	48000800 	.word	0x48000800

08001134 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b096      	sub	sp, #88	; 0x58
 8001138:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	2244      	movs	r2, #68	; 0x44
 8001140:	2100      	movs	r1, #0
 8001142:	4618      	mov	r0, r3
 8001144:	f006 fb1e 	bl	8007784 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001148:	463b      	mov	r3, r7
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001156:	f44f 7000 	mov.w	r0, #512	; 0x200
 800115a:	f003 ff63 	bl	8005024 <HAL_PWREx_ControlVoltageScaling>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001164:	f000 f862 	bl	800122c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001168:	2301      	movs	r3, #1
 800116a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800116c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001170:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001172:	2302      	movs	r3, #2
 8001174:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001176:	2303      	movs	r3, #3
 8001178:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800117a:	2301      	movs	r3, #1
 800117c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800117e:	230a      	movs	r3, #10
 8001180:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001182:	2307      	movs	r3, #7
 8001184:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001186:	2302      	movs	r3, #2
 8001188:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800118a:	2302      	movs	r3, #2
 800118c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800118e:	f107 0314 	add.w	r3, r7, #20
 8001192:	4618      	mov	r0, r3
 8001194:	f003 ff9c 	bl	80050d0 <HAL_RCC_OscConfig>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800119e:	f000 f845 	bl	800122c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a2:	230f      	movs	r3, #15
 80011a4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a6:	2303      	movs	r3, #3
 80011a8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011aa:	2300      	movs	r3, #0
 80011ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011b8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011ba:	463b      	mov	r3, r7
 80011bc:	2104      	movs	r1, #4
 80011be:	4618      	mov	r0, r3
 80011c0:	f004 fb62 	bl	8005888 <HAL_RCC_ClockConfig>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011ca:	f000 f82f 	bl	800122c <Error_Handler>
  }
}
 80011ce:	bf00      	nop
 80011d0:	3758      	adds	r7, #88	; 0x58
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b0a2      	sub	sp, #136	; 0x88
 80011da:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011dc:	463b      	mov	r3, r7
 80011de:	2288      	movs	r2, #136	; 0x88
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f006 face 	bl	8007784 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011ec:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80011ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80011f2:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80011f4:	2303      	movs	r3, #3
 80011f6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80011f8:	2301      	movs	r3, #1
 80011fa:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80011fc:	2308      	movs	r3, #8
 80011fe:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001200:	2307      	movs	r3, #7
 8001202:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001204:	2302      	movs	r3, #2
 8001206:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001208:	2302      	movs	r3, #2
 800120a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800120c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001210:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001212:	463b      	mov	r3, r7
 8001214:	4618      	mov	r0, r3
 8001216:	f004 fd21 	bl	8005c5c <HAL_RCCEx_PeriphCLKConfig>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8001220:	f000 f804 	bl	800122c <Error_Handler>
  }
}
 8001224:	bf00      	nop
 8001226:	3788      	adds	r7, #136	; 0x88
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001230:	b672      	cpsid	i
}
 8001232:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001234:	e7fe      	b.n	8001234 <Error_Handler+0x8>
	...

08001238 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123e:	4b0f      	ldr	r3, [pc, #60]	; (800127c <HAL_MspInit+0x44>)
 8001240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001242:	4a0e      	ldr	r2, [pc, #56]	; (800127c <HAL_MspInit+0x44>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	6613      	str	r3, [r2, #96]	; 0x60
 800124a:	4b0c      	ldr	r3, [pc, #48]	; (800127c <HAL_MspInit+0x44>)
 800124c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <HAL_MspInit+0x44>)
 8001258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800125a:	4a08      	ldr	r2, [pc, #32]	; (800127c <HAL_MspInit+0x44>)
 800125c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001260:	6593      	str	r3, [r2, #88]	; 0x58
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <HAL_MspInit+0x44>)
 8001264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126a:	603b      	str	r3, [r7, #0]
 800126c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	40021000 	.word	0x40021000

08001280 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001284:	e7fe      	b.n	8001284 <NMI_Handler+0x4>

08001286 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800128a:	e7fe      	b.n	800128a <HardFault_Handler+0x4>

0800128c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001290:	e7fe      	b.n	8001290 <MemManage_Handler+0x4>

08001292 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001296:	e7fe      	b.n	8001296 <BusFault_Handler+0x4>

08001298 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800129c:	e7fe      	b.n	800129c <UsageFault_Handler+0x4>

0800129e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012cc:	f000 fa74 	bl	80017b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80012d8:	4802      	ldr	r0, [pc, #8]	; (80012e4 <CAN1_RX0_IRQHandler+0x10>)
 80012da:	f002 fa86 	bl	80037ea <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000178 	.word	0x20000178

080012e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012ec:	4802      	ldr	r0, [pc, #8]	; (80012f8 <TIM2_IRQHandler+0x10>)
 80012ee:	f005 fb73 	bl	80069d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	200002d4 	.word	0x200002d4

080012fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001300:	4802      	ldr	r0, [pc, #8]	; (800130c <TIM3_IRQHandler+0x10>)
 8001302:	f005 fb69 	bl	80069d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000320 	.word	0x20000320

08001310 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001314:	4802      	ldr	r0, [pc, #8]	; (8001320 <I2C1_EV_IRQHandler+0x10>)
 8001316:	f003 f848 	bl	80043aa <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	2000022c 	.word	0x2000022c

08001324 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001328:	4802      	ldr	r0, [pc, #8]	; (8001334 <I2C1_ER_IRQHandler+0x10>)
 800132a:	f003 f858 	bl	80043de <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	2000022c 	.word	0x2000022c

08001338 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800133c:	4802      	ldr	r0, [pc, #8]	; (8001348 <I2C2_EV_IRQHandler+0x10>)
 800133e:	f003 f834 	bl	80043aa <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000280 	.word	0x20000280

0800134c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001350:	4802      	ldr	r0, [pc, #8]	; (800135c <I2C2_ER_IRQHandler+0x10>)
 8001352:	f003 f844 	bl	80043de <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000280 	.word	0x20000280

08001360 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001364:	4b06      	ldr	r3, [pc, #24]	; (8001380 <SystemInit+0x20>)
 8001366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800136a:	4a05      	ldr	r2, [pc, #20]	; (8001380 <SystemInit+0x20>)
 800136c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001370:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b090      	sub	sp, #64	; 0x40
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800138a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	609a      	str	r2, [r3, #8]
 8001396:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001398:	f107 031c 	add.w	r3, r7, #28
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a8:	f107 0310 	add.w	r3, r7, #16
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80013b4:	463b      	mov	r3, r7
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013c0:	4b35      	ldr	r3, [pc, #212]	; (8001498 <MX_TIM2_Init+0x114>)
 80013c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800-1;
 80013c8:	4b33      	ldr	r3, [pc, #204]	; (8001498 <MX_TIM2_Init+0x114>)
 80013ca:	f240 321f 	movw	r2, #799	; 0x31f
 80013ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d0:	4b31      	ldr	r3, [pc, #196]	; (8001498 <MX_TIM2_Init+0x114>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 25000-1;
 80013d6:	4b30      	ldr	r3, [pc, #192]	; (8001498 <MX_TIM2_Init+0x114>)
 80013d8:	f246 12a7 	movw	r2, #24999	; 0x61a7
 80013dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013de:	4b2e      	ldr	r3, [pc, #184]	; (8001498 <MX_TIM2_Init+0x114>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e4:	4b2c      	ldr	r3, [pc, #176]	; (8001498 <MX_TIM2_Init+0x114>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013ea:	482b      	ldr	r0, [pc, #172]	; (8001498 <MX_TIM2_Init+0x114>)
 80013ec:	f005 f8f2 	bl	80065d4 <HAL_TIM_Base_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80013f6:	f7ff ff19 	bl	800122c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013fe:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001400:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001404:	4619      	mov	r1, r3
 8001406:	4824      	ldr	r0, [pc, #144]	; (8001498 <MX_TIM2_Init+0x114>)
 8001408:	f005 fca1 	bl	8006d4e <HAL_TIM_ConfigClockSource>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001412:	f7ff ff0b 	bl	800122c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001416:	4820      	ldr	r0, [pc, #128]	; (8001498 <MX_TIM2_Init+0x114>)
 8001418:	f005 f933 	bl	8006682 <HAL_TIM_IC_Init>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001422:	f7ff ff03 	bl	800122c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001426:	2304      	movs	r3, #4
 8001428:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 800142a:	2340      	movs	r3, #64	; 0x40
 800142c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800142e:	2300      	movs	r3, #0
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001436:	f107 031c 	add.w	r3, r7, #28
 800143a:	4619      	mov	r1, r3
 800143c:	4816      	ldr	r0, [pc, #88]	; (8001498 <MX_TIM2_Init+0x114>)
 800143e:	f005 fd4f 	bl	8006ee0 <HAL_TIM_SlaveConfigSynchro>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 8001448:	f7ff fef0 	bl	800122c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800144c:	2300      	movs	r3, #0
 800144e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001450:	2300      	movs	r3, #0
 8001452:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001454:	f107 0310 	add.w	r3, r7, #16
 8001458:	4619      	mov	r1, r3
 800145a:	480f      	ldr	r0, [pc, #60]	; (8001498 <MX_TIM2_Init+0x114>)
 800145c:	f006 f8c8 	bl	80075f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8001466:	f7ff fee1 	bl	800122c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800146a:	2300      	movs	r3, #0
 800146c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800146e:	2301      	movs	r3, #1
 8001470:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001472:	2300      	movs	r3, #0
 8001474:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800147a:	463b      	mov	r3, r7
 800147c:	2200      	movs	r2, #0
 800147e:	4619      	mov	r1, r3
 8001480:	4805      	ldr	r0, [pc, #20]	; (8001498 <MX_TIM2_Init+0x114>)
 8001482:	f005 fbc8 	bl	8006c16 <HAL_TIM_IC_ConfigChannel>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_TIM2_Init+0x10c>
  {
    Error_Handler();
 800148c:	f7ff fece 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001490:	bf00      	nop
 8001492:	3740      	adds	r7, #64	; 0x40
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	200002d4 	.word	0x200002d4

0800149c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b090      	sub	sp, #64	; 0x40
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80014b0:	f107 031c 	add.w	r3, r7, #28
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c0:	f107 0310 	add.w	r3, r7, #16
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80014cc:	463b      	mov	r3, r7
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	609a      	str	r2, [r3, #8]
 80014d6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014d8:	4b35      	ldr	r3, [pc, #212]	; (80015b0 <MX_TIM3_Init+0x114>)
 80014da:	4a36      	ldr	r2, [pc, #216]	; (80015b4 <MX_TIM3_Init+0x118>)
 80014dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 800-1;
 80014de:	4b34      	ldr	r3, [pc, #208]	; (80015b0 <MX_TIM3_Init+0x114>)
 80014e0:	f240 321f 	movw	r2, #799	; 0x31f
 80014e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e6:	4b32      	ldr	r3, [pc, #200]	; (80015b0 <MX_TIM3_Init+0x114>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 25000-1;
 80014ec:	4b30      	ldr	r3, [pc, #192]	; (80015b0 <MX_TIM3_Init+0x114>)
 80014ee:	f246 12a7 	movw	r2, #24999	; 0x61a7
 80014f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f4:	4b2e      	ldr	r3, [pc, #184]	; (80015b0 <MX_TIM3_Init+0x114>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014fa:	4b2d      	ldr	r3, [pc, #180]	; (80015b0 <MX_TIM3_Init+0x114>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001500:	482b      	ldr	r0, [pc, #172]	; (80015b0 <MX_TIM3_Init+0x114>)
 8001502:	f005 f867 	bl	80065d4 <HAL_TIM_Base_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 800150c:	f7ff fe8e 	bl	800122c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001510:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001514:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001516:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800151a:	4619      	mov	r1, r3
 800151c:	4824      	ldr	r0, [pc, #144]	; (80015b0 <MX_TIM3_Init+0x114>)
 800151e:	f005 fc16 	bl	8006d4e <HAL_TIM_ConfigClockSource>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001528:	f7ff fe80 	bl	800122c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800152c:	4820      	ldr	r0, [pc, #128]	; (80015b0 <MX_TIM3_Init+0x114>)
 800152e:	f005 f8a8 	bl	8006682 <HAL_TIM_IC_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001538:	f7ff fe78 	bl	800122c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800153c:	2304      	movs	r3, #4
 800153e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8001540:	2340      	movs	r3, #64	; 0x40
 8001542:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001544:	2300      	movs	r3, #0
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800154c:	f107 031c 	add.w	r3, r7, #28
 8001550:	4619      	mov	r1, r3
 8001552:	4817      	ldr	r0, [pc, #92]	; (80015b0 <MX_TIM3_Init+0x114>)
 8001554:	f005 fcc4 	bl	8006ee0 <HAL_TIM_SlaveConfigSynchro>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 800155e:	f7ff fe65 	bl	800122c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001566:	2300      	movs	r3, #0
 8001568:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800156a:	f107 0310 	add.w	r3, r7, #16
 800156e:	4619      	mov	r1, r3
 8001570:	480f      	ldr	r0, [pc, #60]	; (80015b0 <MX_TIM3_Init+0x114>)
 8001572:	f006 f83d 	bl	80075f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 800157c:	f7ff fe56 	bl	800122c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001580:	2300      	movs	r3, #0
 8001582:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001584:	2301      	movs	r3, #1
 8001586:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001588:	2300      	movs	r3, #0
 800158a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001590:	463b      	mov	r3, r7
 8001592:	2200      	movs	r2, #0
 8001594:	4619      	mov	r1, r3
 8001596:	4806      	ldr	r0, [pc, #24]	; (80015b0 <MX_TIM3_Init+0x114>)
 8001598:	f005 fb3d 	bl	8006c16 <HAL_TIM_IC_ConfigChannel>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_TIM3_Init+0x10a>
  {
    Error_Handler();
 80015a2:	f7ff fe43 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015a6:	bf00      	nop
 80015a8:	3740      	adds	r7, #64	; 0x40
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000320 	.word	0x20000320
 80015b4:	40000400 	.word	0x40000400

080015b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08c      	sub	sp, #48	; 0x30
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c0:	f107 031c 	add.w	r3, r7, #28
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015d8:	d131      	bne.n	800163e <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015da:	4b36      	ldr	r3, [pc, #216]	; (80016b4 <HAL_TIM_Base_MspInit+0xfc>)
 80015dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015de:	4a35      	ldr	r2, [pc, #212]	; (80016b4 <HAL_TIM_Base_MspInit+0xfc>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	6593      	str	r3, [r2, #88]	; 0x58
 80015e6:	4b33      	ldr	r3, [pc, #204]	; (80016b4 <HAL_TIM_Base_MspInit+0xfc>)
 80015e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	61bb      	str	r3, [r7, #24]
 80015f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f2:	4b30      	ldr	r3, [pc, #192]	; (80016b4 <HAL_TIM_Base_MspInit+0xfc>)
 80015f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f6:	4a2f      	ldr	r2, [pc, #188]	; (80016b4 <HAL_TIM_Base_MspInit+0xfc>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015fe:	4b2d      	ldr	r3, [pc, #180]	; (80016b4 <HAL_TIM_Base_MspInit+0xfc>)
 8001600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	617b      	str	r3, [r7, #20]
 8001608:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800160a:	2320      	movs	r3, #32
 800160c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160e:	2302      	movs	r3, #2
 8001610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	2300      	movs	r3, #0
 8001618:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800161a:	2301      	movs	r3, #1
 800161c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161e:	f107 031c 	add.w	r3, r7, #28
 8001622:	4619      	mov	r1, r3
 8001624:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001628:	f002 fc6e 	bl	8003f08 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800162c:	2200      	movs	r2, #0
 800162e:	2100      	movs	r1, #0
 8001630:	201c      	movs	r0, #28
 8001632:	f002 fbe4 	bl	8003dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001636:	201c      	movs	r0, #28
 8001638:	f002 fbfd 	bl	8003e36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800163c:	e035      	b.n	80016aa <HAL_TIM_Base_MspInit+0xf2>
  else if(tim_baseHandle->Instance==TIM3)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a1d      	ldr	r2, [pc, #116]	; (80016b8 <HAL_TIM_Base_MspInit+0x100>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d130      	bne.n	80016aa <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001648:	4b1a      	ldr	r3, [pc, #104]	; (80016b4 <HAL_TIM_Base_MspInit+0xfc>)
 800164a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800164c:	4a19      	ldr	r2, [pc, #100]	; (80016b4 <HAL_TIM_Base_MspInit+0xfc>)
 800164e:	f043 0302 	orr.w	r3, r3, #2
 8001652:	6593      	str	r3, [r2, #88]	; 0x58
 8001654:	4b17      	ldr	r3, [pc, #92]	; (80016b4 <HAL_TIM_Base_MspInit+0xfc>)
 8001656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001660:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <HAL_TIM_Base_MspInit+0xfc>)
 8001662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001664:	4a13      	ldr	r2, [pc, #76]	; (80016b4 <HAL_TIM_Base_MspInit+0xfc>)
 8001666:	f043 0301 	orr.w	r3, r3, #1
 800166a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800166c:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <HAL_TIM_Base_MspInit+0xfc>)
 800166e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001678:	2340      	movs	r3, #64	; 0x40
 800167a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167c:	2302      	movs	r3, #2
 800167e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001684:	2300      	movs	r3, #0
 8001686:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001688:	2302      	movs	r3, #2
 800168a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168c:	f107 031c 	add.w	r3, r7, #28
 8001690:	4619      	mov	r1, r3
 8001692:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001696:	f002 fc37 	bl	8003f08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800169a:	2200      	movs	r2, #0
 800169c:	2100      	movs	r1, #0
 800169e:	201d      	movs	r0, #29
 80016a0:	f002 fbad 	bl	8003dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80016a4:	201d      	movs	r0, #29
 80016a6:	f002 fbc6 	bl	8003e36 <HAL_NVIC_EnableIRQ>
}
 80016aa:	bf00      	nop
 80016ac:	3730      	adds	r7, #48	; 0x30
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40021000 	.word	0x40021000
 80016b8:	40000400 	.word	0x40000400

080016bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016c0:	f7ff fe4e 	bl	8001360 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016c4:	480c      	ldr	r0, [pc, #48]	; (80016f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80016c6:	490d      	ldr	r1, [pc, #52]	; (80016fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80016c8:	4a0d      	ldr	r2, [pc, #52]	; (8001700 <LoopForever+0xe>)
  movs r3, #0
 80016ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016cc:	e002      	b.n	80016d4 <LoopCopyDataInit>

080016ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016d2:	3304      	adds	r3, #4

080016d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d8:	d3f9      	bcc.n	80016ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016da:	4a0a      	ldr	r2, [pc, #40]	; (8001704 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016dc:	4c0a      	ldr	r4, [pc, #40]	; (8001708 <LoopForever+0x16>)
  movs r3, #0
 80016de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e0:	e001      	b.n	80016e6 <LoopFillZerobss>

080016e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016e4:	3204      	adds	r2, #4

080016e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e8:	d3fb      	bcc.n	80016e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ea:	f006 f827 	bl	800773c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016ee:	f7ff fc79 	bl	8000fe4 <main>

080016f2 <LoopForever>:

LoopForever:
    b LoopForever
 80016f2:	e7fe      	b.n	80016f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016f4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80016f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016fc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001700:	080077f4 	.word	0x080077f4
  ldr r2, =_sbss
 8001704:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001708:	20000370 	.word	0x20000370

0800170c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800170c:	e7fe      	b.n	800170c <ADC1_2_IRQHandler>

0800170e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001714:	2300      	movs	r3, #0
 8001716:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001718:	2003      	movs	r0, #3
 800171a:	f002 fb65 	bl	8003de8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800171e:	200f      	movs	r0, #15
 8001720:	f000 f80e 	bl	8001740 <HAL_InitTick>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d002      	beq.n	8001730 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	71fb      	strb	r3, [r7, #7]
 800172e:	e001      	b.n	8001734 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001730:	f7ff fd82 	bl	8001238 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001734:	79fb      	ldrb	r3, [r7, #7]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001748:	2300      	movs	r3, #0
 800174a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800174c:	4b17      	ldr	r3, [pc, #92]	; (80017ac <HAL_InitTick+0x6c>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d023      	beq.n	800179c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001754:	4b16      	ldr	r3, [pc, #88]	; (80017b0 <HAL_InitTick+0x70>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4b14      	ldr	r3, [pc, #80]	; (80017ac <HAL_InitTick+0x6c>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	4619      	mov	r1, r3
 800175e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001762:	fbb3 f3f1 	udiv	r3, r3, r1
 8001766:	fbb2 f3f3 	udiv	r3, r2, r3
 800176a:	4618      	mov	r0, r3
 800176c:	f002 fb71 	bl	8003e52 <HAL_SYSTICK_Config>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d10f      	bne.n	8001796 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b0f      	cmp	r3, #15
 800177a:	d809      	bhi.n	8001790 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800177c:	2200      	movs	r2, #0
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	f04f 30ff 	mov.w	r0, #4294967295
 8001784:	f002 fb3b 	bl	8003dfe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001788:	4a0a      	ldr	r2, [pc, #40]	; (80017b4 <HAL_InitTick+0x74>)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	e007      	b.n	80017a0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	73fb      	strb	r3, [r7, #15]
 8001794:	e004      	b.n	80017a0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	73fb      	strb	r3, [r7, #15]
 800179a:	e001      	b.n	80017a0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000008 	.word	0x20000008
 80017b0:	20000000 	.word	0x20000000
 80017b4:	20000004 	.word	0x20000004

080017b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <HAL_IncTick+0x20>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	461a      	mov	r2, r3
 80017c2:	4b06      	ldr	r3, [pc, #24]	; (80017dc <HAL_IncTick+0x24>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4413      	add	r3, r2
 80017c8:	4a04      	ldr	r2, [pc, #16]	; (80017dc <HAL_IncTick+0x24>)
 80017ca:	6013      	str	r3, [r2, #0]
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	20000008 	.word	0x20000008
 80017dc:	2000036c 	.word	0x2000036c

080017e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return uwTick;
 80017e4:	4b03      	ldr	r3, [pc, #12]	; (80017f4 <HAL_GetTick+0x14>)
 80017e6:	681b      	ldr	r3, [r3, #0]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	2000036c 	.word	0x2000036c

080017f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001800:	f7ff ffee 	bl	80017e0 <HAL_GetTick>
 8001804:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001810:	d005      	beq.n	800181e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001812:	4b0a      	ldr	r3, [pc, #40]	; (800183c <HAL_Delay+0x44>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	461a      	mov	r2, r3
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	4413      	add	r3, r2
 800181c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800181e:	bf00      	nop
 8001820:	f7ff ffde 	bl	80017e0 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	429a      	cmp	r2, r3
 800182e:	d8f7      	bhi.n	8001820 <HAL_Delay+0x28>
  {
  }
}
 8001830:	bf00      	nop
 8001832:	bf00      	nop
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000008 	.word	0x20000008

08001840 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	431a      	orrs	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	609a      	str	r2, [r3, #8]
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001866:	b480      	push	{r7}
 8001868:	b083      	sub	sp, #12
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
 800186e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	431a      	orrs	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	609a      	str	r2, [r3, #8]
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800189c:	4618      	mov	r0, r3
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b087      	sub	sp, #28
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
 80018b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	3360      	adds	r3, #96	; 0x60
 80018ba:	461a      	mov	r2, r3
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	4b08      	ldr	r3, [pc, #32]	; (80018ec <LL_ADC_SetOffset+0x44>)
 80018ca:	4013      	ands	r3, r2
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	4313      	orrs	r3, r2
 80018d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80018e0:	bf00      	nop
 80018e2:	371c      	adds	r7, #28
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	03fff000 	.word	0x03fff000

080018f0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	3360      	adds	r3, #96	; 0x60
 80018fe:	461a      	mov	r2, r3
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001910:	4618      	mov	r0, r3
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800191c:	b480      	push	{r7}
 800191e:	b087      	sub	sp, #28
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	3360      	adds	r3, #96	; 0x60
 800192c:	461a      	mov	r2, r3
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	431a      	orrs	r2, r3
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001946:	bf00      	nop
 8001948:	371c      	adds	r7, #28
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001966:	2301      	movs	r3, #1
 8001968:	e000      	b.n	800196c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001978:	b480      	push	{r7}
 800197a:	b087      	sub	sp, #28
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	3330      	adds	r3, #48	; 0x30
 8001988:	461a      	mov	r2, r3
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	0a1b      	lsrs	r3, r3, #8
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	f003 030c 	and.w	r3, r3, #12
 8001994:	4413      	add	r3, r2
 8001996:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	f003 031f 	and.w	r3, r3, #31
 80019a2:	211f      	movs	r1, #31
 80019a4:	fa01 f303 	lsl.w	r3, r1, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	401a      	ands	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	0e9b      	lsrs	r3, r3, #26
 80019b0:	f003 011f 	and.w	r1, r3, #31
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	f003 031f 	and.w	r3, r3, #31
 80019ba:	fa01 f303 	lsl.w	r3, r1, r3
 80019be:	431a      	orrs	r2, r3
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019c4:	bf00      	nop
 80019c6:	371c      	adds	r7, #28
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b087      	sub	sp, #28
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	3314      	adds	r3, #20
 80019e0:	461a      	mov	r2, r3
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	0e5b      	lsrs	r3, r3, #25
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	f003 0304 	and.w	r3, r3, #4
 80019ec:	4413      	add	r3, r2
 80019ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	0d1b      	lsrs	r3, r3, #20
 80019f8:	f003 031f 	and.w	r3, r3, #31
 80019fc:	2107      	movs	r1, #7
 80019fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001a02:	43db      	mvns	r3, r3
 8001a04:	401a      	ands	r2, r3
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	0d1b      	lsrs	r3, r3, #20
 8001a0a:	f003 031f 	and.w	r3, r3, #31
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	fa01 f303 	lsl.w	r3, r1, r3
 8001a14:	431a      	orrs	r2, r3
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a1a:	bf00      	nop
 8001a1c:	371c      	adds	r7, #28
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a40:	43db      	mvns	r3, r3
 8001a42:	401a      	ands	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f003 0318 	and.w	r3, r3, #24
 8001a4a:	4908      	ldr	r1, [pc, #32]	; (8001a6c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a4c:	40d9      	lsrs	r1, r3
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	400b      	ands	r3, r1
 8001a52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a56:	431a      	orrs	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001a5e:	bf00      	nop
 8001a60:	3714      	adds	r7, #20
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	0007ffff 	.word	0x0007ffff

08001a70 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f003 031f 	and.w	r3, r3, #31
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001ab8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6093      	str	r3, [r2, #8]
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001adc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ae0:	d101      	bne.n	8001ae6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e000      	b.n	8001ae8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001b04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b08:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b30:	d101      	bne.n	8001b36 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b32:	2301      	movs	r3, #1
 8001b34:	e000      	b.n	8001b38 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b58:	f043 0201 	orr.w	r2, r3, #1
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b80:	f043 0202 	orr.w	r2, r3, #2
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d101      	bne.n	8001bac <LL_ADC_IsEnabled+0x18>
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e000      	b.n	8001bae <LL_ADC_IsEnabled+0x1a>
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d101      	bne.n	8001bd2 <LL_ADC_IsDisableOngoing+0x18>
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e000      	b.n	8001bd4 <LL_ADC_IsDisableOngoing+0x1a>
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001bf0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bf4:	f043 0204 	orr.w	r2, r3, #4
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c1c:	f043 0210 	orr.w	r2, r3, #16
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 0304 	and.w	r3, r3, #4
 8001c40:	2b04      	cmp	r3, #4
 8001c42:	d101      	bne.n	8001c48 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c44:	2301      	movs	r3, #1
 8001c46:	e000      	b.n	8001c4a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c66:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c6a:	f043 0220 	orr.w	r2, r3, #32
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b083      	sub	sp, #12
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	2b08      	cmp	r3, #8
 8001c90:	d101      	bne.n	8001c96 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c92:	2301      	movs	r3, #1
 8001c94:	e000      	b.n	8001c98 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ca4:	b590      	push	{r4, r7, lr}
 8001ca6:	b089      	sub	sp, #36	; 0x24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cac:	2300      	movs	r3, #0
 8001cae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e136      	b.n	8001f2c <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d109      	bne.n	8001ce0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7fe fc09 	bl	80004e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff fef1 	bl	8001acc <LL_ADC_IsDeepPowerDownEnabled>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d004      	beq.n	8001cfa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff fed7 	bl	8001aa8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff ff0c 	bl	8001b1c <LL_ADC_IsInternalRegulatorEnabled>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d115      	bne.n	8001d36 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff fef0 	bl	8001af4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d14:	4b87      	ldr	r3, [pc, #540]	; (8001f34 <HAL_ADC_Init+0x290>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	099b      	lsrs	r3, r3, #6
 8001d1a:	4a87      	ldr	r2, [pc, #540]	; (8001f38 <HAL_ADC_Init+0x294>)
 8001d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d20:	099b      	lsrs	r3, r3, #6
 8001d22:	3301      	adds	r3, #1
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d28:	e002      	b.n	8001d30 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1f9      	bne.n	8001d2a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff feee 	bl	8001b1c <LL_ADC_IsInternalRegulatorEnabled>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10d      	bne.n	8001d62 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d4a:	f043 0210 	orr.w	r2, r3, #16
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d56:	f043 0201 	orr.w	r2, r3, #1
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff ff62 	bl	8001c30 <LL_ADC_REG_IsConversionOngoing>
 8001d6c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d72:	f003 0310 	and.w	r3, r3, #16
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f040 80cf 	bne.w	8001f1a <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f040 80cb 	bne.w	8001f1a <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d88:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d8c:	f043 0202 	orr.w	r2, r3, #2
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff fefb 	bl	8001b94 <LL_ADC_IsEnabled>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d115      	bne.n	8001dd0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001da4:	4865      	ldr	r0, [pc, #404]	; (8001f3c <HAL_ADC_Init+0x298>)
 8001da6:	f7ff fef5 	bl	8001b94 <LL_ADC_IsEnabled>
 8001daa:	4604      	mov	r4, r0
 8001dac:	4864      	ldr	r0, [pc, #400]	; (8001f40 <HAL_ADC_Init+0x29c>)
 8001dae:	f7ff fef1 	bl	8001b94 <LL_ADC_IsEnabled>
 8001db2:	4603      	mov	r3, r0
 8001db4:	431c      	orrs	r4, r3
 8001db6:	4863      	ldr	r0, [pc, #396]	; (8001f44 <HAL_ADC_Init+0x2a0>)
 8001db8:	f7ff feec 	bl	8001b94 <LL_ADC_IsEnabled>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	4323      	orrs	r3, r4
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d105      	bne.n	8001dd0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	4619      	mov	r1, r3
 8001dca:	485f      	ldr	r0, [pc, #380]	; (8001f48 <HAL_ADC_Init+0x2a4>)
 8001dcc:	f7ff fd38 	bl	8001840 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	7e5b      	ldrb	r3, [r3, #25]
 8001dd4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dda:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001de0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001de6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dee:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001df0:	4313      	orrs	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d106      	bne.n	8001e0c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e02:	3b01      	subs	r3, #1
 8001e04:	045b      	lsls	r3, r3, #17
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d009      	beq.n	8001e28 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e18:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e20:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68da      	ldr	r2, [r3, #12]
 8001e2e:	4b47      	ldr	r3, [pc, #284]	; (8001f4c <HAL_ADC_Init+0x2a8>)
 8001e30:	4013      	ands	r3, r2
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	6812      	ldr	r2, [r2, #0]
 8001e36:	69b9      	ldr	r1, [r7, #24]
 8001e38:	430b      	orrs	r3, r1
 8001e3a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff fef5 	bl	8001c30 <LL_ADC_REG_IsConversionOngoing>
 8001e46:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff ff16 	bl	8001c7e <LL_ADC_INJ_IsConversionOngoing>
 8001e52:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d13d      	bne.n	8001ed6 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d13a      	bne.n	8001ed6 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e64:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e6c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e7c:	f023 0302 	bic.w	r3, r3, #2
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	6812      	ldr	r2, [r2, #0]
 8001e84:	69b9      	ldr	r1, [r7, #24]
 8001e86:	430b      	orrs	r3, r1
 8001e88:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d118      	bne.n	8001ec6 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001e9e:	f023 0304 	bic.w	r3, r3, #4
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001eaa:	4311      	orrs	r1, r2
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001eb0:	4311      	orrs	r1, r2
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f042 0201 	orr.w	r2, r2, #1
 8001ec2:	611a      	str	r2, [r3, #16]
 8001ec4:	e007      	b.n	8001ed6 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	691a      	ldr	r2, [r3, #16]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 0201 	bic.w	r2, r2, #1
 8001ed4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d10c      	bne.n	8001ef8 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee4:	f023 010f 	bic.w	r1, r3, #15
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	69db      	ldr	r3, [r3, #28]
 8001eec:	1e5a      	subs	r2, r3, #1
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	631a      	str	r2, [r3, #48]	; 0x30
 8001ef6:	e007      	b.n	8001f08 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 020f 	bic.w	r2, r2, #15
 8001f06:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f0c:	f023 0303 	bic.w	r3, r3, #3
 8001f10:	f043 0201 	orr.w	r2, r3, #1
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	655a      	str	r2, [r3, #84]	; 0x54
 8001f18:	e007      	b.n	8001f2a <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f1e:	f043 0210 	orr.w	r2, r3, #16
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3724      	adds	r7, #36	; 0x24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd90      	pop	{r4, r7, pc}
 8001f34:	20000000 	.word	0x20000000
 8001f38:	053e2d63 	.word	0x053e2d63
 8001f3c:	50040000 	.word	0x50040000
 8001f40:	50040100 	.word	0x50040100
 8001f44:	50040200 	.word	0x50040200
 8001f48:	50040300 	.word	0x50040300
 8001f4c:	fff0c007 	.word	0xfff0c007

08001f50 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f58:	4857      	ldr	r0, [pc, #348]	; (80020b8 <HAL_ADC_Start+0x168>)
 8001f5a:	f7ff fd89 	bl	8001a70 <LL_ADC_GetMultimode>
 8001f5e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff fe63 	bl	8001c30 <LL_ADC_REG_IsConversionOngoing>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f040 809c 	bne.w	80020aa <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d101      	bne.n	8001f80 <HAL_ADC_Start+0x30>
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	e097      	b.n	80020b0 <HAL_ADC_Start+0x160>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 fe61 	bl	8002c50 <ADC_Enable>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001f92:	7dfb      	ldrb	r3, [r7, #23]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f040 8083 	bne.w	80020a0 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f9e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001fa2:	f023 0301 	bic.w	r3, r3, #1
 8001fa6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a42      	ldr	r2, [pc, #264]	; (80020bc <HAL_ADC_Start+0x16c>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d002      	beq.n	8001fbe <HAL_ADC_Start+0x6e>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	e000      	b.n	8001fc0 <HAL_ADC_Start+0x70>
 8001fbe:	4b40      	ldr	r3, [pc, #256]	; (80020c0 <HAL_ADC_Start+0x170>)
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	6812      	ldr	r2, [r2, #0]
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d002      	beq.n	8001fce <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d105      	bne.n	8001fda <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fe6:	d106      	bne.n	8001ff6 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fec:	f023 0206 	bic.w	r2, r3, #6
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	659a      	str	r2, [r3, #88]	; 0x58
 8001ff4:	e002      	b.n	8001ffc <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	221c      	movs	r2, #28
 8002002:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a2a      	ldr	r2, [pc, #168]	; (80020bc <HAL_ADC_Start+0x16c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d002      	beq.n	800201c <HAL_ADC_Start+0xcc>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	e000      	b.n	800201e <HAL_ADC_Start+0xce>
 800201c:	4b28      	ldr	r3, [pc, #160]	; (80020c0 <HAL_ADC_Start+0x170>)
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	6812      	ldr	r2, [r2, #0]
 8002022:	4293      	cmp	r3, r2
 8002024:	d008      	beq.n	8002038 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d005      	beq.n	8002038 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	2b05      	cmp	r3, #5
 8002030:	d002      	beq.n	8002038 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	2b09      	cmp	r3, #9
 8002036:	d114      	bne.n	8002062 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d007      	beq.n	8002056 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800204e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff fdc0 	bl	8001be0 <LL_ADC_REG_StartConversion>
 8002060:	e025      	b.n	80020ae <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002066:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a12      	ldr	r2, [pc, #72]	; (80020bc <HAL_ADC_Start+0x16c>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d002      	beq.n	800207e <HAL_ADC_Start+0x12e>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	e000      	b.n	8002080 <HAL_ADC_Start+0x130>
 800207e:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <HAL_ADC_Start+0x170>)
 8002080:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00f      	beq.n	80020ae <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002092:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002096:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	655a      	str	r2, [r3, #84]	; 0x54
 800209e:	e006      	b.n	80020ae <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80020a8:	e001      	b.n	80020ae <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80020aa:	2302      	movs	r3, #2
 80020ac:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80020ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	50040300 	.word	0x50040300
 80020bc:	50040100 	.word	0x50040100
 80020c0:	50040000 	.word	0x50040000

080020c4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d101      	bne.n	80020da <HAL_ADC_Stop+0x16>
 80020d6:	2302      	movs	r3, #2
 80020d8:	e023      	b.n	8002122 <HAL_ADC_Stop+0x5e>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80020e2:	2103      	movs	r1, #3
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 fcf7 	bl	8002ad8 <ADC_ConversionStop>
 80020ea:	4603      	mov	r3, r0
 80020ec:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80020ee:	7bfb      	ldrb	r3, [r7, #15]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d111      	bne.n	8002118 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 fe31 	bl	8002d5c <ADC_Disable>
 80020fa:	4603      	mov	r3, r0
 80020fc:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80020fe:	7bfb      	ldrb	r3, [r7, #15]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d109      	bne.n	8002118 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002108:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800210c:	f023 0301 	bic.w	r3, r3, #1
 8002110:	f043 0201 	orr.w	r2, r3, #1
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002120:	7bfb      	ldrb	r3, [r7, #15]
}
 8002122:	4618      	mov	r0, r3
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
	...

0800212c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b088      	sub	sp, #32
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002136:	4866      	ldr	r0, [pc, #408]	; (80022d0 <HAL_ADC_PollForConversion+0x1a4>)
 8002138:	f7ff fc9a 	bl	8001a70 <LL_ADC_GetMultimode>
 800213c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	2b08      	cmp	r3, #8
 8002144:	d102      	bne.n	800214c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002146:	2308      	movs	r3, #8
 8002148:	61fb      	str	r3, [r7, #28]
 800214a:	e02a      	b.n	80021a2 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d005      	beq.n	800215e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	2b05      	cmp	r3, #5
 8002156:	d002      	beq.n	800215e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	2b09      	cmp	r3, #9
 800215c:	d111      	bne.n	8002182 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	2b00      	cmp	r3, #0
 800216a:	d007      	beq.n	800217c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002170:	f043 0220 	orr.w	r2, r3, #32
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e0a4      	b.n	80022c6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800217c:	2304      	movs	r3, #4
 800217e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002180:	e00f      	b.n	80021a2 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002182:	4853      	ldr	r0, [pc, #332]	; (80022d0 <HAL_ADC_PollForConversion+0x1a4>)
 8002184:	f7ff fc82 	bl	8001a8c <LL_ADC_GetMultiDMATransfer>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d007      	beq.n	800219e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002192:	f043 0220 	orr.w	r2, r3, #32
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e093      	b.n	80022c6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800219e:	2304      	movs	r3, #4
 80021a0:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80021a2:	f7ff fb1d 	bl	80017e0 <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80021a8:	e021      	b.n	80021ee <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b0:	d01d      	beq.n	80021ee <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80021b2:	f7ff fb15 	bl	80017e0 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d302      	bcc.n	80021c8 <HAL_ADC_PollForConversion+0x9c>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d112      	bne.n	80021ee <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	4013      	ands	r3, r2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10b      	bne.n	80021ee <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021da:	f043 0204 	orr.w	r2, r3, #4
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e06b      	b.n	80022c6 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	4013      	ands	r3, r2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0d6      	beq.n	80021aa <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002200:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff fba0 	bl	8001952 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d01c      	beq.n	8002252 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	7e5b      	ldrb	r3, [r3, #25]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d118      	bne.n	8002252 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0308 	and.w	r3, r3, #8
 800222a:	2b08      	cmp	r3, #8
 800222c:	d111      	bne.n	8002252 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002232:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d105      	bne.n	8002252 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224a:	f043 0201 	orr.w	r2, r3, #1
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a1f      	ldr	r2, [pc, #124]	; (80022d4 <HAL_ADC_PollForConversion+0x1a8>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d002      	beq.n	8002262 <HAL_ADC_PollForConversion+0x136>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	e000      	b.n	8002264 <HAL_ADC_PollForConversion+0x138>
 8002262:	4b1d      	ldr	r3, [pc, #116]	; (80022d8 <HAL_ADC_PollForConversion+0x1ac>)
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	6812      	ldr	r2, [r2, #0]
 8002268:	4293      	cmp	r3, r2
 800226a:	d008      	beq.n	800227e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d005      	beq.n	800227e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	2b05      	cmp	r3, #5
 8002276:	d002      	beq.n	800227e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	2b09      	cmp	r3, #9
 800227c:	d104      	bne.n	8002288 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	61bb      	str	r3, [r7, #24]
 8002286:	e00c      	b.n	80022a2 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a11      	ldr	r2, [pc, #68]	; (80022d4 <HAL_ADC_PollForConversion+0x1a8>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d002      	beq.n	8002298 <HAL_ADC_PollForConversion+0x16c>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	e000      	b.n	800229a <HAL_ADC_PollForConversion+0x16e>
 8002298:	4b0f      	ldr	r3, [pc, #60]	; (80022d8 <HAL_ADC_PollForConversion+0x1ac>)
 800229a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	2b08      	cmp	r3, #8
 80022a6:	d104      	bne.n	80022b2 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2208      	movs	r2, #8
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	e008      	b.n	80022c4 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d103      	bne.n	80022c4 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	220c      	movs	r2, #12
 80022c2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3720      	adds	r7, #32
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	50040300 	.word	0x50040300
 80022d4:	50040100 	.word	0x50040100
 80022d8:	50040000 	.word	0x50040000

080022dc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
	...

080022f8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b0b6      	sub	sp, #216	; 0xd8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002302:	2300      	movs	r3, #0
 8002304:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002308:	2300      	movs	r3, #0
 800230a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002312:	2b01      	cmp	r3, #1
 8002314:	d101      	bne.n	800231a <HAL_ADC_ConfigChannel+0x22>
 8002316:	2302      	movs	r3, #2
 8002318:	e3c7      	b.n	8002aaa <HAL_ADC_ConfigChannel+0x7b2>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2201      	movs	r2, #1
 800231e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff fc82 	bl	8001c30 <LL_ADC_REG_IsConversionOngoing>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	f040 83a8 	bne.w	8002a84 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	2b05      	cmp	r3, #5
 800233a:	d824      	bhi.n	8002386 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	3b02      	subs	r3, #2
 8002342:	2b03      	cmp	r3, #3
 8002344:	d81b      	bhi.n	800237e <HAL_ADC_ConfigChannel+0x86>
 8002346:	a201      	add	r2, pc, #4	; (adr r2, 800234c <HAL_ADC_ConfigChannel+0x54>)
 8002348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800234c:	0800235d 	.word	0x0800235d
 8002350:	08002365 	.word	0x08002365
 8002354:	0800236d 	.word	0x0800236d
 8002358:	08002375 	.word	0x08002375
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	220c      	movs	r2, #12
 8002360:	605a      	str	r2, [r3, #4]
          break;
 8002362:	e011      	b.n	8002388 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	2212      	movs	r2, #18
 8002368:	605a      	str	r2, [r3, #4]
          break;
 800236a:	e00d      	b.n	8002388 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	2218      	movs	r2, #24
 8002370:	605a      	str	r2, [r3, #4]
          break;
 8002372:	e009      	b.n	8002388 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	f44f 7280 	mov.w	r2, #256	; 0x100
 800237a:	605a      	str	r2, [r3, #4]
          break;
 800237c:	e004      	b.n	8002388 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	2206      	movs	r2, #6
 8002382:	605a      	str	r2, [r3, #4]
          break;
 8002384:	e000      	b.n	8002388 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002386:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6818      	ldr	r0, [r3, #0]
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	6859      	ldr	r1, [r3, #4]
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	461a      	mov	r2, r3
 8002396:	f7ff faef 	bl	8001978 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff fc46 	bl	8001c30 <LL_ADC_REG_IsConversionOngoing>
 80023a4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff fc66 	bl	8001c7e <LL_ADC_INJ_IsConversionOngoing>
 80023b2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023b6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f040 81a6 	bne.w	800270c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f040 81a1 	bne.w	800270c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6818      	ldr	r0, [r3, #0]
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	6819      	ldr	r1, [r3, #0]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	461a      	mov	r2, r3
 80023d8:	f7ff fafa 	bl	80019d0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	695a      	ldr	r2, [r3, #20]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	08db      	lsrs	r3, r3, #3
 80023e8:	f003 0303 	and.w	r3, r3, #3
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	d00a      	beq.n	8002414 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6818      	ldr	r0, [r3, #0]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	6919      	ldr	r1, [r3, #16]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800240e:	f7ff fa4b 	bl	80018a8 <LL_ADC_SetOffset>
 8002412:	e17b      	b.n	800270c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2100      	movs	r1, #0
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff fa68 	bl	80018f0 <LL_ADC_GetOffsetChannel>
 8002420:	4603      	mov	r3, r0
 8002422:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10a      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x148>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2100      	movs	r1, #0
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff fa5d 	bl	80018f0 <LL_ADC_GetOffsetChannel>
 8002436:	4603      	mov	r3, r0
 8002438:	0e9b      	lsrs	r3, r3, #26
 800243a:	f003 021f 	and.w	r2, r3, #31
 800243e:	e01e      	b.n	800247e <HAL_ADC_ConfigChannel+0x186>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2100      	movs	r1, #0
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff fa52 	bl	80018f0 <LL_ADC_GetOffsetChannel>
 800244c:	4603      	mov	r3, r0
 800244e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002452:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002456:	fa93 f3a3 	rbit	r3, r3
 800245a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800245e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002462:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002466:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800246e:	2320      	movs	r3, #32
 8002470:	e004      	b.n	800247c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002472:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002476:	fab3 f383 	clz	r3, r3
 800247a:	b2db      	uxtb	r3, r3
 800247c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002486:	2b00      	cmp	r3, #0
 8002488:	d105      	bne.n	8002496 <HAL_ADC_ConfigChannel+0x19e>
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	0e9b      	lsrs	r3, r3, #26
 8002490:	f003 031f 	and.w	r3, r3, #31
 8002494:	e018      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x1d0>
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80024a2:	fa93 f3a3 	rbit	r3, r3
 80024a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80024aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80024b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80024ba:	2320      	movs	r3, #32
 80024bc:	e004      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80024be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80024c2:	fab3 f383 	clz	r3, r3
 80024c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d106      	bne.n	80024da <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2200      	movs	r2, #0
 80024d2:	2100      	movs	r1, #0
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff fa21 	bl	800191c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2101      	movs	r1, #1
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff fa05 	bl	80018f0 <LL_ADC_GetOffsetChannel>
 80024e6:	4603      	mov	r3, r0
 80024e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d10a      	bne.n	8002506 <HAL_ADC_ConfigChannel+0x20e>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2101      	movs	r1, #1
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff f9fa 	bl	80018f0 <LL_ADC_GetOffsetChannel>
 80024fc:	4603      	mov	r3, r0
 80024fe:	0e9b      	lsrs	r3, r3, #26
 8002500:	f003 021f 	and.w	r2, r3, #31
 8002504:	e01e      	b.n	8002544 <HAL_ADC_ConfigChannel+0x24c>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2101      	movs	r1, #1
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff f9ef 	bl	80018f0 <LL_ADC_GetOffsetChannel>
 8002512:	4603      	mov	r3, r0
 8002514:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002518:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800251c:	fa93 f3a3 	rbit	r3, r3
 8002520:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002524:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002528:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800252c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002530:	2b00      	cmp	r3, #0
 8002532:	d101      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002534:	2320      	movs	r3, #32
 8002536:	e004      	b.n	8002542 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002538:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800253c:	fab3 f383 	clz	r3, r3
 8002540:	b2db      	uxtb	r3, r3
 8002542:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800254c:	2b00      	cmp	r3, #0
 800254e:	d105      	bne.n	800255c <HAL_ADC_ConfigChannel+0x264>
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	0e9b      	lsrs	r3, r3, #26
 8002556:	f003 031f 	and.w	r3, r3, #31
 800255a:	e018      	b.n	800258e <HAL_ADC_ConfigChannel+0x296>
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002564:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002568:	fa93 f3a3 	rbit	r3, r3
 800256c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002570:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002574:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002578:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002580:	2320      	movs	r3, #32
 8002582:	e004      	b.n	800258e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002584:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002588:	fab3 f383 	clz	r3, r3
 800258c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800258e:	429a      	cmp	r2, r3
 8002590:	d106      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2200      	movs	r2, #0
 8002598:	2101      	movs	r1, #1
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff f9be 	bl	800191c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2102      	movs	r1, #2
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff f9a2 	bl	80018f0 <LL_ADC_GetOffsetChannel>
 80025ac:	4603      	mov	r3, r0
 80025ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10a      	bne.n	80025cc <HAL_ADC_ConfigChannel+0x2d4>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2102      	movs	r1, #2
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff f997 	bl	80018f0 <LL_ADC_GetOffsetChannel>
 80025c2:	4603      	mov	r3, r0
 80025c4:	0e9b      	lsrs	r3, r3, #26
 80025c6:	f003 021f 	and.w	r2, r3, #31
 80025ca:	e01e      	b.n	800260a <HAL_ADC_ConfigChannel+0x312>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2102      	movs	r1, #2
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7ff f98c 	bl	80018f0 <LL_ADC_GetOffsetChannel>
 80025d8:	4603      	mov	r3, r0
 80025da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025e2:	fa93 f3a3 	rbit	r3, r3
 80025e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80025ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80025f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80025fa:	2320      	movs	r3, #32
 80025fc:	e004      	b.n	8002608 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80025fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002602:	fab3 f383 	clz	r3, r3
 8002606:	b2db      	uxtb	r3, r3
 8002608:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002612:	2b00      	cmp	r3, #0
 8002614:	d105      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x32a>
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	0e9b      	lsrs	r3, r3, #26
 800261c:	f003 031f 	and.w	r3, r3, #31
 8002620:	e016      	b.n	8002650 <HAL_ADC_ConfigChannel+0x358>
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800262e:	fa93 f3a3 	rbit	r3, r3
 8002632:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002634:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002636:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800263a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002642:	2320      	movs	r3, #32
 8002644:	e004      	b.n	8002650 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002646:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800264a:	fab3 f383 	clz	r3, r3
 800264e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002650:	429a      	cmp	r2, r3
 8002652:	d106      	bne.n	8002662 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2200      	movs	r2, #0
 800265a:	2102      	movs	r1, #2
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff f95d 	bl	800191c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2103      	movs	r1, #3
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff f941 	bl	80018f0 <LL_ADC_GetOffsetChannel>
 800266e:	4603      	mov	r3, r0
 8002670:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002674:	2b00      	cmp	r3, #0
 8002676:	d10a      	bne.n	800268e <HAL_ADC_ConfigChannel+0x396>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2103      	movs	r1, #3
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff f936 	bl	80018f0 <LL_ADC_GetOffsetChannel>
 8002684:	4603      	mov	r3, r0
 8002686:	0e9b      	lsrs	r3, r3, #26
 8002688:	f003 021f 	and.w	r2, r3, #31
 800268c:	e017      	b.n	80026be <HAL_ADC_ConfigChannel+0x3c6>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2103      	movs	r1, #3
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff f92b 	bl	80018f0 <LL_ADC_GetOffsetChannel>
 800269a:	4603      	mov	r3, r0
 800269c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026a0:	fa93 f3a3 	rbit	r3, r3
 80026a4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80026a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026a8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80026aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80026b0:	2320      	movs	r3, #32
 80026b2:	e003      	b.n	80026bc <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80026b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026b6:	fab3 f383 	clz	r3, r3
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d105      	bne.n	80026d6 <HAL_ADC_ConfigChannel+0x3de>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	0e9b      	lsrs	r3, r3, #26
 80026d0:	f003 031f 	and.w	r3, r3, #31
 80026d4:	e011      	b.n	80026fa <HAL_ADC_ConfigChannel+0x402>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026de:	fa93 f3a3 	rbit	r3, r3
 80026e2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80026e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026e6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80026e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80026ee:	2320      	movs	r3, #32
 80026f0:	e003      	b.n	80026fa <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80026f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026f4:	fab3 f383 	clz	r3, r3
 80026f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d106      	bne.n	800270c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2200      	movs	r2, #0
 8002704:	2103      	movs	r1, #3
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff f908 	bl	800191c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff fa3f 	bl	8001b94 <LL_ADC_IsEnabled>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	f040 813f 	bne.w	800299c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6818      	ldr	r0, [r3, #0]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	6819      	ldr	r1, [r3, #0]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	461a      	mov	r2, r3
 800272c:	f7ff f97c 	bl	8001a28 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	4a8e      	ldr	r2, [pc, #568]	; (8002970 <HAL_ADC_ConfigChannel+0x678>)
 8002736:	4293      	cmp	r3, r2
 8002738:	f040 8130 	bne.w	800299c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10b      	bne.n	8002764 <HAL_ADC_ConfigChannel+0x46c>
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	0e9b      	lsrs	r3, r3, #26
 8002752:	3301      	adds	r3, #1
 8002754:	f003 031f 	and.w	r3, r3, #31
 8002758:	2b09      	cmp	r3, #9
 800275a:	bf94      	ite	ls
 800275c:	2301      	movls	r3, #1
 800275e:	2300      	movhi	r3, #0
 8002760:	b2db      	uxtb	r3, r3
 8002762:	e019      	b.n	8002798 <HAL_ADC_ConfigChannel+0x4a0>
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800276c:	fa93 f3a3 	rbit	r3, r3
 8002770:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002772:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002774:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002776:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002778:	2b00      	cmp	r3, #0
 800277a:	d101      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800277c:	2320      	movs	r3, #32
 800277e:	e003      	b.n	8002788 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002780:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002782:	fab3 f383 	clz	r3, r3
 8002786:	b2db      	uxtb	r3, r3
 8002788:	3301      	adds	r3, #1
 800278a:	f003 031f 	and.w	r3, r3, #31
 800278e:	2b09      	cmp	r3, #9
 8002790:	bf94      	ite	ls
 8002792:	2301      	movls	r3, #1
 8002794:	2300      	movhi	r3, #0
 8002796:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002798:	2b00      	cmp	r3, #0
 800279a:	d079      	beq.n	8002890 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d107      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0x4c0>
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	0e9b      	lsrs	r3, r3, #26
 80027ae:	3301      	adds	r3, #1
 80027b0:	069b      	lsls	r3, r3, #26
 80027b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027b6:	e015      	b.n	80027e4 <HAL_ADC_ConfigChannel+0x4ec>
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027c0:	fa93 f3a3 	rbit	r3, r3
 80027c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80027c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027c8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80027ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80027d0:	2320      	movs	r3, #32
 80027d2:	e003      	b.n	80027dc <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80027d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027d6:	fab3 f383 	clz	r3, r3
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	3301      	adds	r3, #1
 80027de:	069b      	lsls	r3, r3, #26
 80027e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d109      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x50c>
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	0e9b      	lsrs	r3, r3, #26
 80027f6:	3301      	adds	r3, #1
 80027f8:	f003 031f 	and.w	r3, r3, #31
 80027fc:	2101      	movs	r1, #1
 80027fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002802:	e017      	b.n	8002834 <HAL_ADC_ConfigChannel+0x53c>
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800280c:	fa93 f3a3 	rbit	r3, r3
 8002810:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002814:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002816:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800281c:	2320      	movs	r3, #32
 800281e:	e003      	b.n	8002828 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002820:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002822:	fab3 f383 	clz	r3, r3
 8002826:	b2db      	uxtb	r3, r3
 8002828:	3301      	adds	r3, #1
 800282a:	f003 031f 	and.w	r3, r3, #31
 800282e:	2101      	movs	r1, #1
 8002830:	fa01 f303 	lsl.w	r3, r1, r3
 8002834:	ea42 0103 	orr.w	r1, r2, r3
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10a      	bne.n	800285a <HAL_ADC_ConfigChannel+0x562>
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	0e9b      	lsrs	r3, r3, #26
 800284a:	3301      	adds	r3, #1
 800284c:	f003 021f 	and.w	r2, r3, #31
 8002850:	4613      	mov	r3, r2
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	4413      	add	r3, r2
 8002856:	051b      	lsls	r3, r3, #20
 8002858:	e018      	b.n	800288c <HAL_ADC_ConfigChannel+0x594>
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002862:	fa93 f3a3 	rbit	r3, r3
 8002866:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800286a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800286c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002872:	2320      	movs	r3, #32
 8002874:	e003      	b.n	800287e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002878:	fab3 f383 	clz	r3, r3
 800287c:	b2db      	uxtb	r3, r3
 800287e:	3301      	adds	r3, #1
 8002880:	f003 021f 	and.w	r2, r3, #31
 8002884:	4613      	mov	r3, r2
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	4413      	add	r3, r2
 800288a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800288c:	430b      	orrs	r3, r1
 800288e:	e080      	b.n	8002992 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002898:	2b00      	cmp	r3, #0
 800289a:	d107      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x5b4>
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	0e9b      	lsrs	r3, r3, #26
 80028a2:	3301      	adds	r3, #1
 80028a4:	069b      	lsls	r3, r3, #26
 80028a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028aa:	e015      	b.n	80028d8 <HAL_ADC_ConfigChannel+0x5e0>
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b4:	fa93 f3a3 	rbit	r3, r3
 80028b8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80028ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028bc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80028be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80028c4:	2320      	movs	r3, #32
 80028c6:	e003      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80028c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ca:	fab3 f383 	clz	r3, r3
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	3301      	adds	r3, #1
 80028d2:	069b      	lsls	r3, r3, #26
 80028d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d109      	bne.n	80028f8 <HAL_ADC_ConfigChannel+0x600>
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	0e9b      	lsrs	r3, r3, #26
 80028ea:	3301      	adds	r3, #1
 80028ec:	f003 031f 	and.w	r3, r3, #31
 80028f0:	2101      	movs	r1, #1
 80028f2:	fa01 f303 	lsl.w	r3, r1, r3
 80028f6:	e017      	b.n	8002928 <HAL_ADC_ConfigChannel+0x630>
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fe:	6a3b      	ldr	r3, [r7, #32]
 8002900:	fa93 f3a3 	rbit	r3, r3
 8002904:	61fb      	str	r3, [r7, #28]
  return result;
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002910:	2320      	movs	r3, #32
 8002912:	e003      	b.n	800291c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002916:	fab3 f383 	clz	r3, r3
 800291a:	b2db      	uxtb	r3, r3
 800291c:	3301      	adds	r3, #1
 800291e:	f003 031f 	and.w	r3, r3, #31
 8002922:	2101      	movs	r1, #1
 8002924:	fa01 f303 	lsl.w	r3, r1, r3
 8002928:	ea42 0103 	orr.w	r1, r2, r3
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002934:	2b00      	cmp	r3, #0
 8002936:	d10d      	bne.n	8002954 <HAL_ADC_ConfigChannel+0x65c>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	0e9b      	lsrs	r3, r3, #26
 800293e:	3301      	adds	r3, #1
 8002940:	f003 021f 	and.w	r2, r3, #31
 8002944:	4613      	mov	r3, r2
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	4413      	add	r3, r2
 800294a:	3b1e      	subs	r3, #30
 800294c:	051b      	lsls	r3, r3, #20
 800294e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002952:	e01d      	b.n	8002990 <HAL_ADC_ConfigChannel+0x698>
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	fa93 f3a3 	rbit	r3, r3
 8002960:	613b      	str	r3, [r7, #16]
  return result;
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d103      	bne.n	8002974 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800296c:	2320      	movs	r3, #32
 800296e:	e005      	b.n	800297c <HAL_ADC_ConfigChannel+0x684>
 8002970:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	fab3 f383 	clz	r3, r3
 800297a:	b2db      	uxtb	r3, r3
 800297c:	3301      	adds	r3, #1
 800297e:	f003 021f 	and.w	r2, r3, #31
 8002982:	4613      	mov	r3, r2
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	4413      	add	r3, r2
 8002988:	3b1e      	subs	r3, #30
 800298a:	051b      	lsls	r3, r3, #20
 800298c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002990:	430b      	orrs	r3, r1
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	6892      	ldr	r2, [r2, #8]
 8002996:	4619      	mov	r1, r3
 8002998:	f7ff f81a 	bl	80019d0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	4b44      	ldr	r3, [pc, #272]	; (8002ab4 <HAL_ADC_ConfigChannel+0x7bc>)
 80029a2:	4013      	ands	r3, r2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d07a      	beq.n	8002a9e <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029a8:	4843      	ldr	r0, [pc, #268]	; (8002ab8 <HAL_ADC_ConfigChannel+0x7c0>)
 80029aa:	f7fe ff6f 	bl	800188c <LL_ADC_GetCommonPathInternalCh>
 80029ae:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a41      	ldr	r2, [pc, #260]	; (8002abc <HAL_ADC_ConfigChannel+0x7c4>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d12c      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80029bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d126      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a3c      	ldr	r2, [pc, #240]	; (8002ac0 <HAL_ADC_ConfigChannel+0x7c8>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d004      	beq.n	80029dc <HAL_ADC_ConfigChannel+0x6e4>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a3b      	ldr	r2, [pc, #236]	; (8002ac4 <HAL_ADC_ConfigChannel+0x7cc>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d15d      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029e4:	4619      	mov	r1, r3
 80029e6:	4834      	ldr	r0, [pc, #208]	; (8002ab8 <HAL_ADC_ConfigChannel+0x7c0>)
 80029e8:	f7fe ff3d 	bl	8001866 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029ec:	4b36      	ldr	r3, [pc, #216]	; (8002ac8 <HAL_ADC_ConfigChannel+0x7d0>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	099b      	lsrs	r3, r3, #6
 80029f2:	4a36      	ldr	r2, [pc, #216]	; (8002acc <HAL_ADC_ConfigChannel+0x7d4>)
 80029f4:	fba2 2303 	umull	r2, r3, r2, r3
 80029f8:	099b      	lsrs	r3, r3, #6
 80029fa:	1c5a      	adds	r2, r3, #1
 80029fc:	4613      	mov	r3, r2
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	4413      	add	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a06:	e002      	b.n	8002a0e <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1f9      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a14:	e040      	b.n	8002a98 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a2d      	ldr	r2, [pc, #180]	; (8002ad0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d118      	bne.n	8002a52 <HAL_ADC_ConfigChannel+0x75a>
 8002a20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d112      	bne.n	8002a52 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a23      	ldr	r2, [pc, #140]	; (8002ac0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d004      	beq.n	8002a40 <HAL_ADC_ConfigChannel+0x748>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a22      	ldr	r2, [pc, #136]	; (8002ac4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d12d      	bne.n	8002a9c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a48:	4619      	mov	r1, r3
 8002a4a:	481b      	ldr	r0, [pc, #108]	; (8002ab8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a4c:	f7fe ff0b 	bl	8001866 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a50:	e024      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a1f      	ldr	r2, [pc, #124]	; (8002ad4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d120      	bne.n	8002a9e <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d11a      	bne.n	8002a9e <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a14      	ldr	r2, [pc, #80]	; (8002ac0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d115      	bne.n	8002a9e <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	480e      	ldr	r0, [pc, #56]	; (8002ab8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a7e:	f7fe fef2 	bl	8001866 <LL_ADC_SetCommonPathInternalCh>
 8002a82:	e00c      	b.n	8002a9e <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a88:	f043 0220 	orr.w	r2, r3, #32
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002a96:	e002      	b.n	8002a9e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a98:	bf00      	nop
 8002a9a:	e000      	b.n	8002a9e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a9c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002aa6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	37d8      	adds	r7, #216	; 0xd8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	80080000 	.word	0x80080000
 8002ab8:	50040300 	.word	0x50040300
 8002abc:	c7520000 	.word	0xc7520000
 8002ac0:	50040000 	.word	0x50040000
 8002ac4:	50040200 	.word	0x50040200
 8002ac8:	20000000 	.word	0x20000000
 8002acc:	053e2d63 	.word	0x053e2d63
 8002ad0:	cb840000 	.word	0xcb840000
 8002ad4:	80000001 	.word	0x80000001

08002ad8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b088      	sub	sp, #32
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff f89e 	bl	8001c30 <LL_ADC_REG_IsConversionOngoing>
 8002af4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff f8bf 	bl	8001c7e <LL_ADC_INJ_IsConversionOngoing>
 8002b00:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d103      	bne.n	8002b10 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f000 8098 	beq.w	8002c40 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d02a      	beq.n	8002b74 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	7e5b      	ldrb	r3, [r3, #25]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d126      	bne.n	8002b74 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	7e1b      	ldrb	r3, [r3, #24]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d122      	bne.n	8002b74 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002b32:	e014      	b.n	8002b5e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	4a45      	ldr	r2, [pc, #276]	; (8002c4c <ADC_ConversionStop+0x174>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d90d      	bls.n	8002b58 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b40:	f043 0210 	orr.w	r2, r3, #16
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4c:	f043 0201 	orr.w	r2, r3, #1
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e074      	b.n	8002c42 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b68:	2b40      	cmp	r3, #64	; 0x40
 8002b6a:	d1e3      	bne.n	8002b34 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2240      	movs	r2, #64	; 0x40
 8002b72:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d014      	beq.n	8002ba4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff f856 	bl	8001c30 <LL_ADC_REG_IsConversionOngoing>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00c      	beq.n	8002ba4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff f813 	bl	8001bba <LL_ADC_IsDisableOngoing>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d104      	bne.n	8002ba4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff f832 	bl	8001c08 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d014      	beq.n	8002bd4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff f865 	bl	8001c7e <LL_ADC_INJ_IsConversionOngoing>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00c      	beq.n	8002bd4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fe fffb 	bl	8001bba <LL_ADC_IsDisableOngoing>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d104      	bne.n	8002bd4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff f841 	bl	8001c56 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d005      	beq.n	8002be6 <ADC_ConversionStop+0x10e>
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	2b03      	cmp	r3, #3
 8002bde:	d105      	bne.n	8002bec <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002be0:	230c      	movs	r3, #12
 8002be2:	617b      	str	r3, [r7, #20]
        break;
 8002be4:	e005      	b.n	8002bf2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002be6:	2308      	movs	r3, #8
 8002be8:	617b      	str	r3, [r7, #20]
        break;
 8002bea:	e002      	b.n	8002bf2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002bec:	2304      	movs	r3, #4
 8002bee:	617b      	str	r3, [r7, #20]
        break;
 8002bf0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002bf2:	f7fe fdf5 	bl	80017e0 <HAL_GetTick>
 8002bf6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002bf8:	e01b      	b.n	8002c32 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002bfa:	f7fe fdf1 	bl	80017e0 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b05      	cmp	r3, #5
 8002c06:	d914      	bls.n	8002c32 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689a      	ldr	r2, [r3, #8]
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	4013      	ands	r3, r2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00d      	beq.n	8002c32 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c1a:	f043 0210 	orr.w	r2, r3, #16
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c26:	f043 0201 	orr.w	r2, r3, #1
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e007      	b.n	8002c42 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1dc      	bne.n	8002bfa <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3720      	adds	r7, #32
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	a33fffff 	.word	0xa33fffff

08002c50 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7fe ff97 	bl	8001b94 <LL_ADC_IsEnabled>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d169      	bne.n	8002d40 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689a      	ldr	r2, [r3, #8]
 8002c72:	4b36      	ldr	r3, [pc, #216]	; (8002d4c <ADC_Enable+0xfc>)
 8002c74:	4013      	ands	r3, r2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00d      	beq.n	8002c96 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c7e:	f043 0210 	orr.w	r2, r3, #16
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8a:	f043 0201 	orr.w	r2, r3, #1
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e055      	b.n	8002d42 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fe ff52 	bl	8001b44 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002ca0:	482b      	ldr	r0, [pc, #172]	; (8002d50 <ADC_Enable+0x100>)
 8002ca2:	f7fe fdf3 	bl	800188c <LL_ADC_GetCommonPathInternalCh>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d013      	beq.n	8002cd8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cb0:	4b28      	ldr	r3, [pc, #160]	; (8002d54 <ADC_Enable+0x104>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	099b      	lsrs	r3, r3, #6
 8002cb6:	4a28      	ldr	r2, [pc, #160]	; (8002d58 <ADC_Enable+0x108>)
 8002cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbc:	099b      	lsrs	r3, r3, #6
 8002cbe:	1c5a      	adds	r2, r3, #1
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	4413      	add	r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002cca:	e002      	b.n	8002cd2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1f9      	bne.n	8002ccc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002cd8:	f7fe fd82 	bl	80017e0 <HAL_GetTick>
 8002cdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cde:	e028      	b.n	8002d32 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7fe ff55 	bl	8001b94 <LL_ADC_IsEnabled>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d104      	bne.n	8002cfa <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7fe ff25 	bl	8001b44 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002cfa:	f7fe fd71 	bl	80017e0 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d914      	bls.n	8002d32 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d00d      	beq.n	8002d32 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1a:	f043 0210 	orr.w	r2, r3, #16
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d26:	f043 0201 	orr.w	r2, r3, #1
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e007      	b.n	8002d42 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d1cf      	bne.n	8002ce0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	8000003f 	.word	0x8000003f
 8002d50:	50040300 	.word	0x50040300
 8002d54:	20000000 	.word	0x20000000
 8002d58:	053e2d63 	.word	0x053e2d63

08002d5c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7fe ff26 	bl	8001bba <LL_ADC_IsDisableOngoing>
 8002d6e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7fe ff0d 	bl	8001b94 <LL_ADC_IsEnabled>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d047      	beq.n	8002e10 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d144      	bne.n	8002e10 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f003 030d 	and.w	r3, r3, #13
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d10c      	bne.n	8002dae <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7fe fee7 	bl	8001b6c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2203      	movs	r2, #3
 8002da4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002da6:	f7fe fd1b 	bl	80017e0 <HAL_GetTick>
 8002daa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002dac:	e029      	b.n	8002e02 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db2:	f043 0210 	orr.w	r2, r3, #16
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dbe:	f043 0201 	orr.w	r2, r3, #1
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e023      	b.n	8002e12 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002dca:	f7fe fd09 	bl	80017e0 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d914      	bls.n	8002e02 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00d      	beq.n	8002e02 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dea:	f043 0210 	orr.w	r2, r3, #16
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df6:	f043 0201 	orr.w	r2, r3, #1
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e007      	b.n	8002e12 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1dc      	bne.n	8002dca <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <LL_ADC_IsEnabled>:
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d101      	bne.n	8002e32 <LL_ADC_IsEnabled+0x18>
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e000      	b.n	8002e34 <LL_ADC_IsEnabled+0x1a>
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <LL_ADC_REG_IsConversionOngoing>:
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f003 0304 	and.w	r3, r3, #4
 8002e50:	2b04      	cmp	r3, #4
 8002e52:	d101      	bne.n	8002e58 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e54:	2301      	movs	r3, #1
 8002e56:	e000      	b.n	8002e5a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
	...

08002e68 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002e68:	b590      	push	{r4, r7, lr}
 8002e6a:	b09f      	sub	sp, #124	; 0x7c
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e72:	2300      	movs	r3, #0
 8002e74:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d101      	bne.n	8002e86 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002e82:	2302      	movs	r3, #2
 8002e84:	e093      	b.n	8002fae <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002e8e:	2300      	movs	r3, #0
 8002e90:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002e92:	2300      	movs	r3, #0
 8002e94:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a47      	ldr	r2, [pc, #284]	; (8002fb8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d102      	bne.n	8002ea6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002ea0:	4b46      	ldr	r3, [pc, #280]	; (8002fbc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002ea2:	60bb      	str	r3, [r7, #8]
 8002ea4:	e001      	b.n	8002eaa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d10b      	bne.n	8002ec8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb4:	f043 0220 	orr.w	r2, r3, #32
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e072      	b.n	8002fae <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff ffb8 	bl	8002e40 <LL_ADC_REG_IsConversionOngoing>
 8002ed0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff ffb2 	bl	8002e40 <LL_ADC_REG_IsConversionOngoing>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d154      	bne.n	8002f8c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002ee2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d151      	bne.n	8002f8c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002ee8:	4b35      	ldr	r3, [pc, #212]	; (8002fc0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002eea:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d02c      	beq.n	8002f4e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	6859      	ldr	r1, [r3, #4]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f06:	035b      	lsls	r3, r3, #13
 8002f08:	430b      	orrs	r3, r1
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f0e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f10:	4829      	ldr	r0, [pc, #164]	; (8002fb8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002f12:	f7ff ff82 	bl	8002e1a <LL_ADC_IsEnabled>
 8002f16:	4604      	mov	r4, r0
 8002f18:	4828      	ldr	r0, [pc, #160]	; (8002fbc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002f1a:	f7ff ff7e 	bl	8002e1a <LL_ADC_IsEnabled>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	431c      	orrs	r4, r3
 8002f22:	4828      	ldr	r0, [pc, #160]	; (8002fc4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002f24:	f7ff ff79 	bl	8002e1a <LL_ADC_IsEnabled>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	4323      	orrs	r3, r4
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d137      	bne.n	8002fa0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f38:	f023 030f 	bic.w	r3, r3, #15
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	6811      	ldr	r1, [r2, #0]
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	6892      	ldr	r2, [r2, #8]
 8002f44:	430a      	orrs	r2, r1
 8002f46:	431a      	orrs	r2, r3
 8002f48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f4a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f4c:	e028      	b.n	8002fa0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f58:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f5a:	4817      	ldr	r0, [pc, #92]	; (8002fb8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002f5c:	f7ff ff5d 	bl	8002e1a <LL_ADC_IsEnabled>
 8002f60:	4604      	mov	r4, r0
 8002f62:	4816      	ldr	r0, [pc, #88]	; (8002fbc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002f64:	f7ff ff59 	bl	8002e1a <LL_ADC_IsEnabled>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	431c      	orrs	r4, r3
 8002f6c:	4815      	ldr	r0, [pc, #84]	; (8002fc4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002f6e:	f7ff ff54 	bl	8002e1a <LL_ADC_IsEnabled>
 8002f72:	4603      	mov	r3, r0
 8002f74:	4323      	orrs	r3, r4
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d112      	bne.n	8002fa0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002f7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f82:	f023 030f 	bic.w	r3, r3, #15
 8002f86:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f88:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f8a:	e009      	b.n	8002fa0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f90:	f043 0220 	orr.w	r2, r3, #32
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002f9e:	e000      	b.n	8002fa2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fa0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002faa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	377c      	adds	r7, #124	; 0x7c
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd90      	pop	{r4, r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	50040000 	.word	0x50040000
 8002fbc:	50040100 	.word	0x50040100
 8002fc0:	50040300 	.word	0x50040300
 8002fc4:	50040200 	.word	0x50040200

08002fc8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e0ed      	b.n	80031b6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d102      	bne.n	8002fec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7fd fc5c 	bl	80008a4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f042 0201 	orr.w	r2, r2, #1
 8002ffa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ffc:	f7fe fbf0 	bl	80017e0 <HAL_GetTick>
 8003000:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003002:	e012      	b.n	800302a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003004:	f7fe fbec 	bl	80017e0 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b0a      	cmp	r3, #10
 8003010:	d90b      	bls.n	800302a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2205      	movs	r2, #5
 8003022:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e0c5      	b.n	80031b6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	2b00      	cmp	r3, #0
 8003036:	d0e5      	beq.n	8003004 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 0202 	bic.w	r2, r2, #2
 8003046:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003048:	f7fe fbca 	bl	80017e0 <HAL_GetTick>
 800304c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800304e:	e012      	b.n	8003076 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003050:	f7fe fbc6 	bl	80017e0 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b0a      	cmp	r3, #10
 800305c:	d90b      	bls.n	8003076 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2205      	movs	r2, #5
 800306e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e09f      	b.n	80031b6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1e5      	bne.n	8003050 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	7e1b      	ldrb	r3, [r3, #24]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d108      	bne.n	800309e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	e007      	b.n	80030ae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	7e5b      	ldrb	r3, [r3, #25]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d108      	bne.n	80030c8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	e007      	b.n	80030d8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	7e9b      	ldrb	r3, [r3, #26]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d108      	bne.n	80030f2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f042 0220 	orr.w	r2, r2, #32
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	e007      	b.n	8003102 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0220 	bic.w	r2, r2, #32
 8003100:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	7edb      	ldrb	r3, [r3, #27]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d108      	bne.n	800311c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 0210 	bic.w	r2, r2, #16
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	e007      	b.n	800312c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 0210 	orr.w	r2, r2, #16
 800312a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	7f1b      	ldrb	r3, [r3, #28]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d108      	bne.n	8003146 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0208 	orr.w	r2, r2, #8
 8003142:	601a      	str	r2, [r3, #0]
 8003144:	e007      	b.n	8003156 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f022 0208 	bic.w	r2, r2, #8
 8003154:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	7f5b      	ldrb	r3, [r3, #29]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d108      	bne.n	8003170 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f042 0204 	orr.w	r2, r2, #4
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	e007      	b.n	8003180 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 0204 	bic.w	r2, r2, #4
 800317e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689a      	ldr	r2, [r3, #8]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	431a      	orrs	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	ea42 0103 	orr.w	r1, r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	1e5a      	subs	r2, r3, #1
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80031be:	b480      	push	{r7}
 80031c0:	b087      	sub	sp, #28
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
 80031c6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031d4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80031d6:	7cfb      	ldrb	r3, [r7, #19]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d003      	beq.n	80031e4 <HAL_CAN_ConfigFilter+0x26>
 80031dc:	7cfb      	ldrb	r3, [r7, #19]
 80031de:	2b02      	cmp	r3, #2
 80031e0:	f040 80aa 	bne.w	8003338 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80031ea:	f043 0201 	orr.w	r2, r3, #1
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	f003 031f 	and.w	r3, r3, #31
 80031fc:	2201      	movs	r2, #1
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	43db      	mvns	r3, r3
 800320e:	401a      	ands	r2, r3
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d123      	bne.n	8003266 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	43db      	mvns	r3, r3
 8003228:	401a      	ands	r2, r3
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003240:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	3248      	adds	r2, #72	; 0x48
 8003246:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800325a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800325c:	6979      	ldr	r1, [r7, #20]
 800325e:	3348      	adds	r3, #72	; 0x48
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	440b      	add	r3, r1
 8003264:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d122      	bne.n	80032b4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	431a      	orrs	r2, r3
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800328e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	3248      	adds	r2, #72	; 0x48
 8003294:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80032a8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80032aa:	6979      	ldr	r1, [r7, #20]
 80032ac:	3348      	adds	r3, #72	; 0x48
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	440b      	add	r3, r1
 80032b2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d109      	bne.n	80032d0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	43db      	mvns	r3, r3
 80032c6:	401a      	ands	r2, r3
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80032ce:	e007      	b.n	80032e0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	431a      	orrs	r2, r3
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d109      	bne.n	80032fc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	43db      	mvns	r3, r3
 80032f2:	401a      	ands	r2, r3
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80032fa:	e007      	b.n	800330c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	431a      	orrs	r2, r3
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d107      	bne.n	8003324 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	431a      	orrs	r2, r3
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800332a:	f023 0201 	bic.w	r2, r3, #1
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003334:	2300      	movs	r3, #0
 8003336:	e006      	b.n	8003346 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
  }
}
 8003346:	4618      	mov	r0, r3
 8003348:	371c      	adds	r7, #28
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b084      	sub	sp, #16
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b01      	cmp	r3, #1
 8003364:	d12e      	bne.n	80033c4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2202      	movs	r2, #2
 800336a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 0201 	bic.w	r2, r2, #1
 800337c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800337e:	f7fe fa2f 	bl	80017e0 <HAL_GetTick>
 8003382:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003384:	e012      	b.n	80033ac <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003386:	f7fe fa2b 	bl	80017e0 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b0a      	cmp	r3, #10
 8003392:	d90b      	bls.n	80033ac <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2205      	movs	r2, #5
 80033a4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e012      	b.n	80033d2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1e5      	bne.n	8003386 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80033c0:	2300      	movs	r3, #0
 80033c2:	e006      	b.n	80033d2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
  }
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80033da:	b480      	push	{r7}
 80033dc:	b089      	sub	sp, #36	; 0x24
 80033de:	af00      	add	r7, sp, #0
 80033e0:	60f8      	str	r0, [r7, #12]
 80033e2:	60b9      	str	r1, [r7, #8]
 80033e4:	607a      	str	r2, [r7, #4]
 80033e6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033ee:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80033f8:	7ffb      	ldrb	r3, [r7, #31]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d003      	beq.n	8003406 <HAL_CAN_AddTxMessage+0x2c>
 80033fe:	7ffb      	ldrb	r3, [r7, #31]
 8003400:	2b02      	cmp	r3, #2
 8003402:	f040 80ad 	bne.w	8003560 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10a      	bne.n	8003426 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003416:	2b00      	cmp	r3, #0
 8003418:	d105      	bne.n	8003426 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 8095 	beq.w	8003550 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	0e1b      	lsrs	r3, r3, #24
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003430:	2201      	movs	r2, #1
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	409a      	lsls	r2, r3
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10d      	bne.n	800345e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800344c:	68f9      	ldr	r1, [r7, #12]
 800344e:	6809      	ldr	r1, [r1, #0]
 8003450:	431a      	orrs	r2, r3
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	3318      	adds	r3, #24
 8003456:	011b      	lsls	r3, r3, #4
 8003458:	440b      	add	r3, r1
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	e00f      	b.n	800347e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003468:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800346e:	68f9      	ldr	r1, [r7, #12]
 8003470:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003472:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	3318      	adds	r3, #24
 8003478:	011b      	lsls	r3, r3, #4
 800347a:	440b      	add	r3, r1
 800347c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6819      	ldr	r1, [r3, #0]
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	691a      	ldr	r2, [r3, #16]
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	3318      	adds	r3, #24
 800348a:	011b      	lsls	r3, r3, #4
 800348c:	440b      	add	r3, r1
 800348e:	3304      	adds	r3, #4
 8003490:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	7d1b      	ldrb	r3, [r3, #20]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d111      	bne.n	80034be <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	3318      	adds	r3, #24
 80034a2:	011b      	lsls	r3, r3, #4
 80034a4:	4413      	add	r3, r2
 80034a6:	3304      	adds	r3, #4
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	6811      	ldr	r1, [r2, #0]
 80034ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	3318      	adds	r3, #24
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	440b      	add	r3, r1
 80034ba:	3304      	adds	r3, #4
 80034bc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	3307      	adds	r3, #7
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	061a      	lsls	r2, r3, #24
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	3306      	adds	r3, #6
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	041b      	lsls	r3, r3, #16
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3305      	adds	r3, #5
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	021b      	lsls	r3, r3, #8
 80034d8:	4313      	orrs	r3, r2
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	3204      	adds	r2, #4
 80034de:	7812      	ldrb	r2, [r2, #0]
 80034e0:	4610      	mov	r0, r2
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	6811      	ldr	r1, [r2, #0]
 80034e6:	ea43 0200 	orr.w	r2, r3, r0
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	440b      	add	r3, r1
 80034f0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80034f4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	3303      	adds	r3, #3
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	061a      	lsls	r2, r3, #24
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	3302      	adds	r3, #2
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	041b      	lsls	r3, r3, #16
 8003506:	431a      	orrs	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3301      	adds	r3, #1
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	021b      	lsls	r3, r3, #8
 8003510:	4313      	orrs	r3, r2
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	7812      	ldrb	r2, [r2, #0]
 8003516:	4610      	mov	r0, r2
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	6811      	ldr	r1, [r2, #0]
 800351c:	ea43 0200 	orr.w	r2, r3, r0
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	011b      	lsls	r3, r3, #4
 8003524:	440b      	add	r3, r1
 8003526:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800352a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	3318      	adds	r3, #24
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	4413      	add	r3, r2
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	6811      	ldr	r1, [r2, #0]
 800353e:	f043 0201 	orr.w	r2, r3, #1
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	3318      	adds	r3, #24
 8003546:	011b      	lsls	r3, r3, #4
 8003548:	440b      	add	r3, r1
 800354a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800354c:	2300      	movs	r3, #0
 800354e:	e00e      	b.n	800356e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003554:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e006      	b.n	800356e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
  }
}
 800356e:	4618      	mov	r0, r3
 8003570:	3724      	adds	r7, #36	; 0x24
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800357a:	b480      	push	{r7}
 800357c:	b087      	sub	sp, #28
 800357e:	af00      	add	r7, sp, #0
 8003580:	60f8      	str	r0, [r7, #12]
 8003582:	60b9      	str	r1, [r7, #8]
 8003584:	607a      	str	r2, [r7, #4]
 8003586:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800358e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003590:	7dfb      	ldrb	r3, [r7, #23]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d003      	beq.n	800359e <HAL_CAN_GetRxMessage+0x24>
 8003596:	7dfb      	ldrb	r3, [r7, #23]
 8003598:	2b02      	cmp	r3, #2
 800359a:	f040 80f3 	bne.w	8003784 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10e      	bne.n	80035c2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	f003 0303 	and.w	r3, r3, #3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d116      	bne.n	80035e0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e0e7      	b.n	8003792 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	f003 0303 	and.w	r3, r3, #3
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d107      	bne.n	80035e0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e0d8      	b.n	8003792 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	331b      	adds	r3, #27
 80035e8:	011b      	lsls	r3, r3, #4
 80035ea:	4413      	add	r3, r2
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0204 	and.w	r2, r3, #4
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10c      	bne.n	8003618 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	331b      	adds	r3, #27
 8003606:	011b      	lsls	r3, r3, #4
 8003608:	4413      	add	r3, r2
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	0d5b      	lsrs	r3, r3, #21
 800360e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	601a      	str	r2, [r3, #0]
 8003616:	e00b      	b.n	8003630 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	331b      	adds	r3, #27
 8003620:	011b      	lsls	r3, r3, #4
 8003622:	4413      	add	r3, r2
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	08db      	lsrs	r3, r3, #3
 8003628:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	331b      	adds	r3, #27
 8003638:	011b      	lsls	r3, r3, #4
 800363a:	4413      	add	r3, r2
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0202 	and.w	r2, r3, #2
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	331b      	adds	r3, #27
 800364e:	011b      	lsls	r3, r3, #4
 8003650:	4413      	add	r3, r2
 8003652:	3304      	adds	r3, #4
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 020f 	and.w	r2, r3, #15
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	331b      	adds	r3, #27
 8003666:	011b      	lsls	r3, r3, #4
 8003668:	4413      	add	r3, r2
 800366a:	3304      	adds	r3, #4
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	0a1b      	lsrs	r3, r3, #8
 8003670:	b2da      	uxtb	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	331b      	adds	r3, #27
 800367e:	011b      	lsls	r3, r3, #4
 8003680:	4413      	add	r3, r2
 8003682:	3304      	adds	r3, #4
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	0c1b      	lsrs	r3, r3, #16
 8003688:	b29a      	uxth	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	011b      	lsls	r3, r3, #4
 8003696:	4413      	add	r3, r2
 8003698:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	b2da      	uxtb	r2, r3
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	011b      	lsls	r3, r3, #4
 80036ac:	4413      	add	r3, r2
 80036ae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	0a1a      	lsrs	r2, r3, #8
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	3301      	adds	r3, #1
 80036ba:	b2d2      	uxtb	r2, r2
 80036bc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	011b      	lsls	r3, r3, #4
 80036c6:	4413      	add	r3, r2
 80036c8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	0c1a      	lsrs	r2, r3, #16
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	3302      	adds	r3, #2
 80036d4:	b2d2      	uxtb	r2, r2
 80036d6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	011b      	lsls	r3, r3, #4
 80036e0:	4413      	add	r3, r2
 80036e2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	0e1a      	lsrs	r2, r3, #24
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	3303      	adds	r3, #3
 80036ee:	b2d2      	uxtb	r2, r2
 80036f0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	011b      	lsls	r3, r3, #4
 80036fa:	4413      	add	r3, r2
 80036fc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	3304      	adds	r3, #4
 8003706:	b2d2      	uxtb	r2, r2
 8003708:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	011b      	lsls	r3, r3, #4
 8003712:	4413      	add	r3, r2
 8003714:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	0a1a      	lsrs	r2, r3, #8
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	3305      	adds	r3, #5
 8003720:	b2d2      	uxtb	r2, r2
 8003722:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	011b      	lsls	r3, r3, #4
 800372c:	4413      	add	r3, r2
 800372e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	0c1a      	lsrs	r2, r3, #16
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	3306      	adds	r3, #6
 800373a:	b2d2      	uxtb	r2, r2
 800373c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	011b      	lsls	r3, r3, #4
 8003746:	4413      	add	r3, r2
 8003748:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	0e1a      	lsrs	r2, r3, #24
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	3307      	adds	r3, #7
 8003754:	b2d2      	uxtb	r2, r2
 8003756:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d108      	bne.n	8003770 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68da      	ldr	r2, [r3, #12]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f042 0220 	orr.w	r2, r2, #32
 800376c:	60da      	str	r2, [r3, #12]
 800376e:	e007      	b.n	8003780 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	691a      	ldr	r2, [r3, #16]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f042 0220 	orr.w	r2, r2, #32
 800377e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003780:	2300      	movs	r3, #0
 8003782:	e006      	b.n	8003792 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
  }
}
 8003792:	4618      	mov	r0, r3
 8003794:	371c      	adds	r7, #28
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800379e:	b480      	push	{r7}
 80037a0:	b085      	sub	sp, #20
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
 80037a6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037ae:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80037b0:	7bfb      	ldrb	r3, [r7, #15]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d002      	beq.n	80037bc <HAL_CAN_ActivateNotification+0x1e>
 80037b6:	7bfb      	ldrb	r3, [r7, #15]
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d109      	bne.n	80037d0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6959      	ldr	r1, [r3, #20]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80037cc:	2300      	movs	r3, #0
 80037ce:	e006      	b.n	80037de <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
  }
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3714      	adds	r7, #20
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr

080037ea <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b08a      	sub	sp, #40	; 0x28
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80037f2:	2300      	movs	r3, #0
 80037f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003826:	6a3b      	ldr	r3, [r7, #32]
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	2b00      	cmp	r3, #0
 800382e:	d07c      	beq.n	800392a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d023      	beq.n	8003882 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2201      	movs	r2, #1
 8003840:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d003      	beq.n	8003854 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 f983 	bl	8003b58 <HAL_CAN_TxMailbox0CompleteCallback>
 8003852:	e016      	b.n	8003882 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	f003 0304 	and.w	r3, r3, #4
 800385a:	2b00      	cmp	r3, #0
 800385c:	d004      	beq.n	8003868 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003860:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003864:	627b      	str	r3, [r7, #36]	; 0x24
 8003866:	e00c      	b.n	8003882 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	f003 0308 	and.w	r3, r3, #8
 800386e:	2b00      	cmp	r3, #0
 8003870:	d004      	beq.n	800387c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003878:	627b      	str	r3, [r7, #36]	; 0x24
 800387a:	e002      	b.n	8003882 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 f989 	bl	8003b94 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003888:	2b00      	cmp	r3, #0
 800388a:	d024      	beq.n	80038d6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003894:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800389c:	2b00      	cmp	r3, #0
 800389e:	d003      	beq.n	80038a8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 f963 	bl	8003b6c <HAL_CAN_TxMailbox1CompleteCallback>
 80038a6:	e016      	b.n	80038d6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d004      	beq.n	80038bc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80038b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80038b8:	627b      	str	r3, [r7, #36]	; 0x24
 80038ba:	e00c      	b.n	80038d6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d004      	beq.n	80038d0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038cc:	627b      	str	r3, [r7, #36]	; 0x24
 80038ce:	e002      	b.n	80038d6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 f969 	bl	8003ba8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d024      	beq.n	800392a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80038e8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d003      	beq.n	80038fc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 f943 	bl	8003b80 <HAL_CAN_TxMailbox2CompleteCallback>
 80038fa:	e016      	b.n	800392a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d004      	beq.n	8003910 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800390c:	627b      	str	r3, [r7, #36]	; 0x24
 800390e:	e00c      	b.n	800392a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d004      	beq.n	8003924 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003920:	627b      	str	r3, [r7, #36]	; 0x24
 8003922:	e002      	b.n	800392a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 f949 	bl	8003bbc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800392a:	6a3b      	ldr	r3, [r7, #32]
 800392c:	f003 0308 	and.w	r3, r3, #8
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00c      	beq.n	800394e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	f003 0310 	and.w	r3, r3, #16
 800393a:	2b00      	cmp	r3, #0
 800393c:	d007      	beq.n	800394e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800393e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003940:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003944:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2210      	movs	r2, #16
 800394c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800394e:	6a3b      	ldr	r3, [r7, #32]
 8003950:	f003 0304 	and.w	r3, r3, #4
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00b      	beq.n	8003970 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	f003 0308 	and.w	r3, r3, #8
 800395e:	2b00      	cmp	r3, #0
 8003960:	d006      	beq.n	8003970 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2208      	movs	r2, #8
 8003968:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f930 	bl	8003bd0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003970:	6a3b      	ldr	r3, [r7, #32]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d009      	beq.n	800398e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	f003 0303 	and.w	r3, r3, #3
 8003984:	2b00      	cmp	r3, #0
 8003986:	d002      	beq.n	800398e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f7fd f96b 	bl	8000c64 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800398e:	6a3b      	ldr	r3, [r7, #32]
 8003990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00c      	beq.n	80039b2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	f003 0310 	and.w	r3, r3, #16
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d007      	beq.n	80039b2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80039a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039a8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2210      	movs	r2, #16
 80039b0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80039b2:	6a3b      	ldr	r3, [r7, #32]
 80039b4:	f003 0320 	and.w	r3, r3, #32
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00b      	beq.n	80039d4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	f003 0308 	and.w	r3, r3, #8
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d006      	beq.n	80039d4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2208      	movs	r2, #8
 80039cc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f912 	bl	8003bf8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80039d4:	6a3b      	ldr	r3, [r7, #32]
 80039d6:	f003 0310 	and.w	r3, r3, #16
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d009      	beq.n	80039f2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	f003 0303 	and.w	r3, r3, #3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d002      	beq.n	80039f2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 f8f9 	bl	8003be4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80039f2:	6a3b      	ldr	r3, [r7, #32]
 80039f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00b      	beq.n	8003a14 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	f003 0310 	and.w	r3, r3, #16
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d006      	beq.n	8003a14 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2210      	movs	r2, #16
 8003a0c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f8fc 	bl	8003c0c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003a14:	6a3b      	ldr	r3, [r7, #32]
 8003a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00b      	beq.n	8003a36 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	f003 0308 	and.w	r3, r3, #8
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d006      	beq.n	8003a36 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2208      	movs	r2, #8
 8003a2e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f8f5 	bl	8003c20 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003a36:	6a3b      	ldr	r3, [r7, #32]
 8003a38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d07b      	beq.n	8003b38 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	f003 0304 	and.w	r3, r3, #4
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d072      	beq.n	8003b30 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003a4a:	6a3b      	ldr	r3, [r7, #32]
 8003a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d008      	beq.n	8003a66 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a60:	f043 0301 	orr.w	r3, r3, #1
 8003a64:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003a66:	6a3b      	ldr	r3, [r7, #32]
 8003a68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d008      	beq.n	8003a82 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	f043 0302 	orr.w	r3, r3, #2
 8003a80:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003a82:	6a3b      	ldr	r3, [r7, #32]
 8003a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d008      	beq.n	8003a9e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	f043 0304 	orr.w	r3, r3, #4
 8003a9c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a9e:	6a3b      	ldr	r3, [r7, #32]
 8003aa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d043      	beq.n	8003b30 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d03e      	beq.n	8003b30 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ab8:	2b60      	cmp	r3, #96	; 0x60
 8003aba:	d02b      	beq.n	8003b14 <HAL_CAN_IRQHandler+0x32a>
 8003abc:	2b60      	cmp	r3, #96	; 0x60
 8003abe:	d82e      	bhi.n	8003b1e <HAL_CAN_IRQHandler+0x334>
 8003ac0:	2b50      	cmp	r3, #80	; 0x50
 8003ac2:	d022      	beq.n	8003b0a <HAL_CAN_IRQHandler+0x320>
 8003ac4:	2b50      	cmp	r3, #80	; 0x50
 8003ac6:	d82a      	bhi.n	8003b1e <HAL_CAN_IRQHandler+0x334>
 8003ac8:	2b40      	cmp	r3, #64	; 0x40
 8003aca:	d019      	beq.n	8003b00 <HAL_CAN_IRQHandler+0x316>
 8003acc:	2b40      	cmp	r3, #64	; 0x40
 8003ace:	d826      	bhi.n	8003b1e <HAL_CAN_IRQHandler+0x334>
 8003ad0:	2b30      	cmp	r3, #48	; 0x30
 8003ad2:	d010      	beq.n	8003af6 <HAL_CAN_IRQHandler+0x30c>
 8003ad4:	2b30      	cmp	r3, #48	; 0x30
 8003ad6:	d822      	bhi.n	8003b1e <HAL_CAN_IRQHandler+0x334>
 8003ad8:	2b10      	cmp	r3, #16
 8003ada:	d002      	beq.n	8003ae2 <HAL_CAN_IRQHandler+0x2f8>
 8003adc:	2b20      	cmp	r3, #32
 8003ade:	d005      	beq.n	8003aec <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003ae0:	e01d      	b.n	8003b1e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	f043 0308 	orr.w	r3, r3, #8
 8003ae8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003aea:	e019      	b.n	8003b20 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aee:	f043 0310 	orr.w	r3, r3, #16
 8003af2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003af4:	e014      	b.n	8003b20 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	f043 0320 	orr.w	r3, r3, #32
 8003afc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003afe:	e00f      	b.n	8003b20 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b06:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b08:	e00a      	b.n	8003b20 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b10:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b12:	e005      	b.n	8003b20 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b1a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b1c:	e000      	b.n	8003b20 <HAL_CAN_IRQHandler+0x336>
            break;
 8003b1e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	699a      	ldr	r2, [r3, #24]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003b2e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2204      	movs	r2, #4
 8003b36:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d008      	beq.n	8003b50 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b44:	431a      	orrs	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f872 	bl	8003c34 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003b50:	bf00      	nop
 8003b52:	3728      	adds	r7, #40	; 0x28
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f003 0307 	and.w	r3, r3, #7
 8003c56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c58:	4b0c      	ldr	r3, [pc, #48]	; (8003c8c <__NVIC_SetPriorityGrouping+0x44>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c5e:	68ba      	ldr	r2, [r7, #8]
 8003c60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c64:	4013      	ands	r3, r2
 8003c66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c7a:	4a04      	ldr	r2, [pc, #16]	; (8003c8c <__NVIC_SetPriorityGrouping+0x44>)
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	60d3      	str	r3, [r2, #12]
}
 8003c80:	bf00      	nop
 8003c82:	3714      	adds	r7, #20
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	e000ed00 	.word	0xe000ed00

08003c90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c94:	4b04      	ldr	r3, [pc, #16]	; (8003ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	0a1b      	lsrs	r3, r3, #8
 8003c9a:	f003 0307 	and.w	r3, r3, #7
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr
 8003ca8:	e000ed00 	.word	0xe000ed00

08003cac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	db0b      	blt.n	8003cd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cbe:	79fb      	ldrb	r3, [r7, #7]
 8003cc0:	f003 021f 	and.w	r2, r3, #31
 8003cc4:	4907      	ldr	r1, [pc, #28]	; (8003ce4 <__NVIC_EnableIRQ+0x38>)
 8003cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cca:	095b      	lsrs	r3, r3, #5
 8003ccc:	2001      	movs	r0, #1
 8003cce:	fa00 f202 	lsl.w	r2, r0, r2
 8003cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003cd6:	bf00      	nop
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	e000e100 	.word	0xe000e100

08003ce8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	4603      	mov	r3, r0
 8003cf0:	6039      	str	r1, [r7, #0]
 8003cf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	db0a      	blt.n	8003d12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	b2da      	uxtb	r2, r3
 8003d00:	490c      	ldr	r1, [pc, #48]	; (8003d34 <__NVIC_SetPriority+0x4c>)
 8003d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d06:	0112      	lsls	r2, r2, #4
 8003d08:	b2d2      	uxtb	r2, r2
 8003d0a:	440b      	add	r3, r1
 8003d0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d10:	e00a      	b.n	8003d28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	b2da      	uxtb	r2, r3
 8003d16:	4908      	ldr	r1, [pc, #32]	; (8003d38 <__NVIC_SetPriority+0x50>)
 8003d18:	79fb      	ldrb	r3, [r7, #7]
 8003d1a:	f003 030f 	and.w	r3, r3, #15
 8003d1e:	3b04      	subs	r3, #4
 8003d20:	0112      	lsls	r2, r2, #4
 8003d22:	b2d2      	uxtb	r2, r2
 8003d24:	440b      	add	r3, r1
 8003d26:	761a      	strb	r2, [r3, #24]
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr
 8003d34:	e000e100 	.word	0xe000e100
 8003d38:	e000ed00 	.word	0xe000ed00

08003d3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b089      	sub	sp, #36	; 0x24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f003 0307 	and.w	r3, r3, #7
 8003d4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	f1c3 0307 	rsb	r3, r3, #7
 8003d56:	2b04      	cmp	r3, #4
 8003d58:	bf28      	it	cs
 8003d5a:	2304      	movcs	r3, #4
 8003d5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	3304      	adds	r3, #4
 8003d62:	2b06      	cmp	r3, #6
 8003d64:	d902      	bls.n	8003d6c <NVIC_EncodePriority+0x30>
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	3b03      	subs	r3, #3
 8003d6a:	e000      	b.n	8003d6e <NVIC_EncodePriority+0x32>
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d70:	f04f 32ff 	mov.w	r2, #4294967295
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7a:	43da      	mvns	r2, r3
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	401a      	ands	r2, r3
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d84:	f04f 31ff 	mov.w	r1, #4294967295
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d8e:	43d9      	mvns	r1, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d94:	4313      	orrs	r3, r2
         );
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3724      	adds	r7, #36	; 0x24
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
	...

08003da4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3b01      	subs	r3, #1
 8003db0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003db4:	d301      	bcc.n	8003dba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003db6:	2301      	movs	r3, #1
 8003db8:	e00f      	b.n	8003dda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dba:	4a0a      	ldr	r2, [pc, #40]	; (8003de4 <SysTick_Config+0x40>)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dc2:	210f      	movs	r1, #15
 8003dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003dc8:	f7ff ff8e 	bl	8003ce8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dcc:	4b05      	ldr	r3, [pc, #20]	; (8003de4 <SysTick_Config+0x40>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dd2:	4b04      	ldr	r3, [pc, #16]	; (8003de4 <SysTick_Config+0x40>)
 8003dd4:	2207      	movs	r2, #7
 8003dd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	e000e010 	.word	0xe000e010

08003de8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f7ff ff29 	bl	8003c48 <__NVIC_SetPriorityGrouping>
}
 8003df6:	bf00      	nop
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b086      	sub	sp, #24
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	4603      	mov	r3, r0
 8003e06:	60b9      	str	r1, [r7, #8]
 8003e08:	607a      	str	r2, [r7, #4]
 8003e0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e10:	f7ff ff3e 	bl	8003c90 <__NVIC_GetPriorityGrouping>
 8003e14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	68b9      	ldr	r1, [r7, #8]
 8003e1a:	6978      	ldr	r0, [r7, #20]
 8003e1c:	f7ff ff8e 	bl	8003d3c <NVIC_EncodePriority>
 8003e20:	4602      	mov	r2, r0
 8003e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e26:	4611      	mov	r1, r2
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7ff ff5d 	bl	8003ce8 <__NVIC_SetPriority>
}
 8003e2e:	bf00      	nop
 8003e30:	3718      	adds	r7, #24
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b082      	sub	sp, #8
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7ff ff31 	bl	8003cac <__NVIC_EnableIRQ>
}
 8003e4a:	bf00      	nop
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b082      	sub	sp, #8
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7ff ffa2 	bl	8003da4 <SysTick_Config>
 8003e60:	4603      	mov	r3, r0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b084      	sub	sp, #16
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e72:	2300      	movs	r3, #0
 8003e74:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d005      	beq.n	8003e8e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2204      	movs	r2, #4
 8003e86:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	73fb      	strb	r3, [r7, #15]
 8003e8c:	e029      	b.n	8003ee2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 020e 	bic.w	r2, r2, #14
 8003e9c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 0201 	bic.w	r2, r2, #1
 8003eac:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb2:	f003 021c 	and.w	r2, r3, #28
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	2101      	movs	r1, #1
 8003ebc:	fa01 f202 	lsl.w	r2, r1, r2
 8003ec0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d003      	beq.n	8003ee2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	4798      	blx	r3
    }
  }
  return status;
 8003ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003efa:	b2db      	uxtb	r3, r3
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b087      	sub	sp, #28
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f12:	2300      	movs	r3, #0
 8003f14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f16:	e17f      	b.n	8004218 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	fa01 f303 	lsl.w	r3, r1, r3
 8003f24:	4013      	ands	r3, r2
 8003f26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f000 8171 	beq.w	8004212 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f003 0303 	and.w	r3, r3, #3
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d005      	beq.n	8003f48 <HAL_GPIO_Init+0x40>
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f003 0303 	and.w	r3, r3, #3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d130      	bne.n	8003faa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	2203      	movs	r2, #3
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	43db      	mvns	r3, r3
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	68da      	ldr	r2, [r3, #12]
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f7e:	2201      	movs	r2, #1
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	fa02 f303 	lsl.w	r3, r2, r3
 8003f86:	43db      	mvns	r3, r3
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	091b      	lsrs	r3, r3, #4
 8003f94:	f003 0201 	and.w	r2, r3, #1
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f003 0303 	and.w	r3, r3, #3
 8003fb2:	2b03      	cmp	r3, #3
 8003fb4:	d118      	bne.n	8003fe8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc4:	43db      	mvns	r3, r3
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	08db      	lsrs	r3, r3, #3
 8003fd2:	f003 0201 	and.w	r2, r3, #1
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f003 0303 	and.w	r3, r3, #3
 8003ff0:	2b03      	cmp	r3, #3
 8003ff2:	d017      	beq.n	8004024 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	2203      	movs	r2, #3
 8004000:	fa02 f303 	lsl.w	r3, r2, r3
 8004004:	43db      	mvns	r3, r3
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	4013      	ands	r3, r2
 800400a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	689a      	ldr	r2, [r3, #8]
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	fa02 f303 	lsl.w	r3, r2, r3
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	4313      	orrs	r3, r2
 800401c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f003 0303 	and.w	r3, r3, #3
 800402c:	2b02      	cmp	r3, #2
 800402e:	d123      	bne.n	8004078 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	08da      	lsrs	r2, r3, #3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3208      	adds	r2, #8
 8004038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800403c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	f003 0307 	and.w	r3, r3, #7
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	220f      	movs	r2, #15
 8004048:	fa02 f303 	lsl.w	r3, r2, r3
 800404c:	43db      	mvns	r3, r3
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	4013      	ands	r3, r2
 8004052:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	691a      	ldr	r2, [r3, #16]
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	f003 0307 	and.w	r3, r3, #7
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	fa02 f303 	lsl.w	r3, r2, r3
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	4313      	orrs	r3, r2
 8004068:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	08da      	lsrs	r2, r3, #3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	3208      	adds	r2, #8
 8004072:	6939      	ldr	r1, [r7, #16]
 8004074:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	2203      	movs	r2, #3
 8004084:	fa02 f303 	lsl.w	r3, r2, r3
 8004088:	43db      	mvns	r3, r3
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	4013      	ands	r3, r2
 800408e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f003 0203 	and.w	r2, r3, #3
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f000 80ac 	beq.w	8004212 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040ba:	4b5f      	ldr	r3, [pc, #380]	; (8004238 <HAL_GPIO_Init+0x330>)
 80040bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040be:	4a5e      	ldr	r2, [pc, #376]	; (8004238 <HAL_GPIO_Init+0x330>)
 80040c0:	f043 0301 	orr.w	r3, r3, #1
 80040c4:	6613      	str	r3, [r2, #96]	; 0x60
 80040c6:	4b5c      	ldr	r3, [pc, #368]	; (8004238 <HAL_GPIO_Init+0x330>)
 80040c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	60bb      	str	r3, [r7, #8]
 80040d0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80040d2:	4a5a      	ldr	r2, [pc, #360]	; (800423c <HAL_GPIO_Init+0x334>)
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	089b      	lsrs	r3, r3, #2
 80040d8:	3302      	adds	r3, #2
 80040da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040de:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	f003 0303 	and.w	r3, r3, #3
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	220f      	movs	r2, #15
 80040ea:	fa02 f303 	lsl.w	r3, r2, r3
 80040ee:	43db      	mvns	r3, r3
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	4013      	ands	r3, r2
 80040f4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80040fc:	d025      	beq.n	800414a <HAL_GPIO_Init+0x242>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a4f      	ldr	r2, [pc, #316]	; (8004240 <HAL_GPIO_Init+0x338>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d01f      	beq.n	8004146 <HAL_GPIO_Init+0x23e>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a4e      	ldr	r2, [pc, #312]	; (8004244 <HAL_GPIO_Init+0x33c>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d019      	beq.n	8004142 <HAL_GPIO_Init+0x23a>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a4d      	ldr	r2, [pc, #308]	; (8004248 <HAL_GPIO_Init+0x340>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d013      	beq.n	800413e <HAL_GPIO_Init+0x236>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a4c      	ldr	r2, [pc, #304]	; (800424c <HAL_GPIO_Init+0x344>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d00d      	beq.n	800413a <HAL_GPIO_Init+0x232>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a4b      	ldr	r2, [pc, #300]	; (8004250 <HAL_GPIO_Init+0x348>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d007      	beq.n	8004136 <HAL_GPIO_Init+0x22e>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a4a      	ldr	r2, [pc, #296]	; (8004254 <HAL_GPIO_Init+0x34c>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d101      	bne.n	8004132 <HAL_GPIO_Init+0x22a>
 800412e:	2306      	movs	r3, #6
 8004130:	e00c      	b.n	800414c <HAL_GPIO_Init+0x244>
 8004132:	2307      	movs	r3, #7
 8004134:	e00a      	b.n	800414c <HAL_GPIO_Init+0x244>
 8004136:	2305      	movs	r3, #5
 8004138:	e008      	b.n	800414c <HAL_GPIO_Init+0x244>
 800413a:	2304      	movs	r3, #4
 800413c:	e006      	b.n	800414c <HAL_GPIO_Init+0x244>
 800413e:	2303      	movs	r3, #3
 8004140:	e004      	b.n	800414c <HAL_GPIO_Init+0x244>
 8004142:	2302      	movs	r3, #2
 8004144:	e002      	b.n	800414c <HAL_GPIO_Init+0x244>
 8004146:	2301      	movs	r3, #1
 8004148:	e000      	b.n	800414c <HAL_GPIO_Init+0x244>
 800414a:	2300      	movs	r3, #0
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	f002 0203 	and.w	r2, r2, #3
 8004152:	0092      	lsls	r2, r2, #2
 8004154:	4093      	lsls	r3, r2
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	4313      	orrs	r3, r2
 800415a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800415c:	4937      	ldr	r1, [pc, #220]	; (800423c <HAL_GPIO_Init+0x334>)
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	089b      	lsrs	r3, r3, #2
 8004162:	3302      	adds	r3, #2
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800416a:	4b3b      	ldr	r3, [pc, #236]	; (8004258 <HAL_GPIO_Init+0x350>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	43db      	mvns	r3, r3
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	4013      	ands	r3, r2
 8004178:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d003      	beq.n	800418e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	4313      	orrs	r3, r2
 800418c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800418e:	4a32      	ldr	r2, [pc, #200]	; (8004258 <HAL_GPIO_Init+0x350>)
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004194:	4b30      	ldr	r3, [pc, #192]	; (8004258 <HAL_GPIO_Init+0x350>)
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	43db      	mvns	r3, r3
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	4013      	ands	r3, r2
 80041a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d003      	beq.n	80041b8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80041b8:	4a27      	ldr	r2, [pc, #156]	; (8004258 <HAL_GPIO_Init+0x350>)
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80041be:	4b26      	ldr	r3, [pc, #152]	; (8004258 <HAL_GPIO_Init+0x350>)
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	43db      	mvns	r3, r3
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	4013      	ands	r3, r2
 80041cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d003      	beq.n	80041e2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	4313      	orrs	r3, r2
 80041e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80041e2:	4a1d      	ldr	r2, [pc, #116]	; (8004258 <HAL_GPIO_Init+0x350>)
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80041e8:	4b1b      	ldr	r3, [pc, #108]	; (8004258 <HAL_GPIO_Init+0x350>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	43db      	mvns	r3, r3
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	4013      	ands	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d003      	beq.n	800420c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	4313      	orrs	r3, r2
 800420a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800420c:	4a12      	ldr	r2, [pc, #72]	; (8004258 <HAL_GPIO_Init+0x350>)
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	3301      	adds	r3, #1
 8004216:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	fa22 f303 	lsr.w	r3, r2, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	f47f ae78 	bne.w	8003f18 <HAL_GPIO_Init+0x10>
  }
}
 8004228:	bf00      	nop
 800422a:	bf00      	nop
 800422c:	371c      	adds	r7, #28
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	40021000 	.word	0x40021000
 800423c:	40010000 	.word	0x40010000
 8004240:	48000400 	.word	0x48000400
 8004244:	48000800 	.word	0x48000800
 8004248:	48000c00 	.word	0x48000c00
 800424c:	48001000 	.word	0x48001000
 8004250:	48001400 	.word	0x48001400
 8004254:	48001800 	.word	0x48001800
 8004258:	40010400 	.word	0x40010400

0800425c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	460b      	mov	r3, r1
 8004266:	807b      	strh	r3, [r7, #2]
 8004268:	4613      	mov	r3, r2
 800426a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800426c:	787b      	ldrb	r3, [r7, #1]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004272:	887a      	ldrh	r2, [r7, #2]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004278:	e002      	b.n	8004280 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800427a:	887a      	ldrh	r2, [r7, #2]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e081      	b.n	80043a2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d106      	bne.n	80042b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7fc fdd4 	bl	8000e60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2224      	movs	r2, #36	; 0x24
 80042bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 0201 	bic.w	r2, r2, #1
 80042ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80042dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	689a      	ldr	r2, [r3, #8]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d107      	bne.n	8004306 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	689a      	ldr	r2, [r3, #8]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004302:	609a      	str	r2, [r3, #8]
 8004304:	e006      	b.n	8004314 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	689a      	ldr	r2, [r3, #8]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004312:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	2b02      	cmp	r3, #2
 800431a:	d104      	bne.n	8004326 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004324:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	6812      	ldr	r2, [r2, #0]
 8004330:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004334:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004338:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68da      	ldr	r2, [r3, #12]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004348:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	691a      	ldr	r2, [r3, #16]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	430a      	orrs	r2, r1
 8004362:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	69d9      	ldr	r1, [r3, #28]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a1a      	ldr	r2, [r3, #32]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	430a      	orrs	r2, r1
 8004372:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f042 0201 	orr.w	r2, r2, #1
 8004382:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2220      	movs	r2, #32
 800438e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b084      	sub	sp, #16
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d005      	beq.n	80043d6 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ce:	68ba      	ldr	r2, [r7, #8]
 80043d0:	68f9      	ldr	r1, [r7, #12]
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	4798      	blx	r3
  }
}
 80043d6:	bf00      	nop
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b086      	sub	sp, #24
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	0a1b      	lsrs	r3, r3, #8
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d010      	beq.n	8004424 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	09db      	lsrs	r3, r3, #7
 8004406:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00a      	beq.n	8004424 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004412:	f043 0201 	orr.w	r2, r3, #1
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004422:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	0a9b      	lsrs	r3, r3, #10
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	2b00      	cmp	r3, #0
 800442e:	d010      	beq.n	8004452 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	09db      	lsrs	r3, r3, #7
 8004434:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00a      	beq.n	8004452 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004440:	f043 0208 	orr.w	r2, r3, #8
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004450:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	0a5b      	lsrs	r3, r3, #9
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b00      	cmp	r3, #0
 800445c:	d010      	beq.n	8004480 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	09db      	lsrs	r3, r3, #7
 8004462:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00a      	beq.n	8004480 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800446e:	f043 0202 	orr.w	r2, r3, #2
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800447e:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004484:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f003 030b 	and.w	r3, r3, #11
 800448c:	2b00      	cmp	r3, #0
 800448e:	d003      	beq.n	8004498 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8004490:	68f9      	ldr	r1, [r7, #12]
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 fb8a 	bl	8004bac <I2C_ITError>
  }
}
 8004498:	bf00      	nop
 800449a:	3718      	adds	r7, #24
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	460b      	mov	r3, r1
 80044d2:	70fb      	strb	r3, [r7, #3]
 80044d4:	4613      	mov	r3, r2
 80044d6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004530:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800453c:	2b01      	cmp	r3, #1
 800453e:	d101      	bne.n	8004544 <I2C_Slave_ISR_IT+0x24>
 8004540:	2302      	movs	r3, #2
 8004542:	e0ec      	b.n	800471e <I2C_Slave_ISR_IT+0x1fe>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	095b      	lsrs	r3, r3, #5
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	2b00      	cmp	r3, #0
 8004556:	d009      	beq.n	800456c <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	095b      	lsrs	r3, r3, #5
 800455c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004560:	2b00      	cmp	r3, #0
 8004562:	d003      	beq.n	800456c <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004564:	6939      	ldr	r1, [r7, #16]
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f000 f9c0 	bl	80048ec <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	091b      	lsrs	r3, r3, #4
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	2b00      	cmp	r3, #0
 8004576:	d04d      	beq.n	8004614 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	091b      	lsrs	r3, r3, #4
 800457c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004580:	2b00      	cmp	r3, #0
 8004582:	d047      	beq.n	8004614 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004588:	b29b      	uxth	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d128      	bne.n	80045e0 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b28      	cmp	r3, #40	; 0x28
 8004598:	d108      	bne.n	80045ac <I2C_Slave_ISR_IT+0x8c>
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045a0:	d104      	bne.n	80045ac <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80045a2:	6939      	ldr	r1, [r7, #16]
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f000 faab 	bl	8004b00 <I2C_ITListenCplt>
 80045aa:	e032      	b.n	8004612 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b29      	cmp	r3, #41	; 0x29
 80045b6:	d10e      	bne.n	80045d6 <I2C_Slave_ISR_IT+0xb6>
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045be:	d00a      	beq.n	80045d6 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2210      	movs	r2, #16
 80045c6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	f000 fbe6 	bl	8004d9a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f000 f92d 	bl	800482e <I2C_ITSlaveSeqCplt>
 80045d4:	e01d      	b.n	8004612 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2210      	movs	r2, #16
 80045dc:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80045de:	e096      	b.n	800470e <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2210      	movs	r2, #16
 80045e6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ec:	f043 0204 	orr.w	r2, r3, #4
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d004      	beq.n	8004604 <I2C_Slave_ISR_IT+0xe4>
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004600:	f040 8085 	bne.w	800470e <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004608:	4619      	mov	r1, r3
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f000 face 	bl	8004bac <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004610:	e07d      	b.n	800470e <I2C_Slave_ISR_IT+0x1ee>
 8004612:	e07c      	b.n	800470e <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	089b      	lsrs	r3, r3, #2
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b00      	cmp	r3, #0
 800461e:	d030      	beq.n	8004682 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	089b      	lsrs	r3, r3, #2
 8004624:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004628:	2b00      	cmp	r3, #0
 800462a:	d02a      	beq.n	8004682 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004630:	b29b      	uxth	r3, r3
 8004632:	2b00      	cmp	r3, #0
 8004634:	d018      	beq.n	8004668 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	b2d2      	uxtb	r2, r2
 8004642:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004648:	1c5a      	adds	r2, r3, #1
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004652:	3b01      	subs	r3, #1
 8004654:	b29a      	uxth	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800465e:	b29b      	uxth	r3, r3
 8004660:	3b01      	subs	r3, #1
 8004662:	b29a      	uxth	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800466c:	b29b      	uxth	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d14f      	bne.n	8004712 <I2C_Slave_ISR_IT+0x1f2>
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004678:	d04b      	beq.n	8004712 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f000 f8d7 	bl	800482e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004680:	e047      	b.n	8004712 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	08db      	lsrs	r3, r3, #3
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00a      	beq.n	80046a4 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	08db      	lsrs	r3, r3, #3
 8004692:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004696:	2b00      	cmp	r3, #0
 8004698:	d004      	beq.n	80046a4 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800469a:	6939      	ldr	r1, [r7, #16]
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f000 f842 	bl	8004726 <I2C_ITAddrCplt>
 80046a2:	e037      	b.n	8004714 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	085b      	lsrs	r3, r3, #1
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d031      	beq.n	8004714 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	085b      	lsrs	r3, r3, #1
 80046b4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d02b      	beq.n	8004714 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d018      	beq.n	80046f8 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ca:	781a      	ldrb	r2, [r3, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d6:	1c5a      	adds	r2, r3, #1
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	3b01      	subs	r3, #1
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ee:	3b01      	subs	r3, #1
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	851a      	strh	r2, [r3, #40]	; 0x28
 80046f6:	e00d      	b.n	8004714 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046fe:	d002      	beq.n	8004706 <I2C_Slave_ISR_IT+0x1e6>
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d106      	bne.n	8004714 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f000 f891 	bl	800482e <I2C_ITSlaveSeqCplt>
 800470c:	e002      	b.n	8004714 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800470e:	bf00      	nop
 8004710:	e000      	b.n	8004714 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8004712:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3718      	adds	r7, #24
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b084      	sub	sp, #16
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
 800472e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004736:	b2db      	uxtb	r3, r3
 8004738:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800473c:	2b28      	cmp	r3, #40	; 0x28
 800473e:	d16a      	bne.n	8004816 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	0c1b      	lsrs	r3, r3, #16
 8004748:	b2db      	uxtb	r3, r3
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	0c1b      	lsrs	r3, r3, #16
 8004758:	b29b      	uxth	r3, r3
 800475a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800475e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	b29b      	uxth	r3, r3
 8004768:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800476c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	b29b      	uxth	r3, r3
 8004776:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800477a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	2b02      	cmp	r3, #2
 8004782:	d138      	bne.n	80047f6 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004784:	897b      	ldrh	r3, [r7, #10]
 8004786:	09db      	lsrs	r3, r3, #7
 8004788:	b29a      	uxth	r2, r3
 800478a:	89bb      	ldrh	r3, [r7, #12]
 800478c:	4053      	eors	r3, r2
 800478e:	b29b      	uxth	r3, r3
 8004790:	f003 0306 	and.w	r3, r3, #6
 8004794:	2b00      	cmp	r3, #0
 8004796:	d11c      	bne.n	80047d2 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004798:	897b      	ldrh	r3, [r7, #10]
 800479a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047a0:	1c5a      	adds	r2, r3, #1
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d13b      	bne.n	8004826 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2208      	movs	r2, #8
 80047ba:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80047c4:	89ba      	ldrh	r2, [r7, #12]
 80047c6:	7bfb      	ldrb	r3, [r7, #15]
 80047c8:	4619      	mov	r1, r3
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f7ff fe7c 	bl	80044c8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80047d0:	e029      	b.n	8004826 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80047d2:	893b      	ldrh	r3, [r7, #8]
 80047d4:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80047d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 fb1f 	bl	8004e1e <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80047e8:	89ba      	ldrh	r2, [r7, #12]
 80047ea:	7bfb      	ldrb	r3, [r7, #15]
 80047ec:	4619      	mov	r1, r3
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7ff fe6a 	bl	80044c8 <HAL_I2C_AddrCallback>
}
 80047f4:	e017      	b.n	8004826 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80047f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 fb0f 	bl	8004e1e <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004808:	89ba      	ldrh	r2, [r7, #12]
 800480a:	7bfb      	ldrb	r3, [r7, #15]
 800480c:	4619      	mov	r1, r3
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7ff fe5a 	bl	80044c8 <HAL_I2C_AddrCallback>
}
 8004814:	e007      	b.n	8004826 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2208      	movs	r2, #8
 800481c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004826:	bf00      	nop
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b084      	sub	sp, #16
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	0b9b      	lsrs	r3, r3, #14
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d008      	beq.n	8004864 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004860:	601a      	str	r2, [r3, #0]
 8004862:	e00d      	b.n	8004880 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	0bdb      	lsrs	r3, r3, #15
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	2b00      	cmp	r3, #0
 800486e:	d007      	beq.n	8004880 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800487e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004886:	b2db      	uxtb	r3, r3
 8004888:	2b29      	cmp	r3, #41	; 0x29
 800488a:	d112      	bne.n	80048b2 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2228      	movs	r2, #40	; 0x28
 8004890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2221      	movs	r2, #33	; 0x21
 8004898:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800489a:	2101      	movs	r1, #1
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 fabe 	bl	8004e1e <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f7ff fdf8 	bl	80044a0 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80048b0:	e017      	b.n	80048e2 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b2a      	cmp	r3, #42	; 0x2a
 80048bc:	d111      	bne.n	80048e2 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2228      	movs	r2, #40	; 0x28
 80048c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2222      	movs	r2, #34	; 0x22
 80048ca:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80048cc:	2102      	movs	r1, #2
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 faa5 	bl	8004e1e <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f7ff fde9 	bl	80044b4 <HAL_I2C_SlaveRxCpltCallback>
}
 80048e2:	bf00      	nop
 80048e4:	3710      	adds	r7, #16
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
	...

080048ec <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b086      	sub	sp, #24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004908:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2220      	movs	r2, #32
 8004910:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004912:	7bfb      	ldrb	r3, [r7, #15]
 8004914:	2b21      	cmp	r3, #33	; 0x21
 8004916:	d002      	beq.n	800491e <I2C_ITSlaveCplt+0x32>
 8004918:	7bfb      	ldrb	r3, [r7, #15]
 800491a:	2b29      	cmp	r3, #41	; 0x29
 800491c:	d108      	bne.n	8004930 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800491e:	f248 0101 	movw	r1, #32769	; 0x8001
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 fa7b 	bl	8004e1e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2221      	movs	r2, #33	; 0x21
 800492c:	631a      	str	r2, [r3, #48]	; 0x30
 800492e:	e00d      	b.n	800494c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004930:	7bfb      	ldrb	r3, [r7, #15]
 8004932:	2b22      	cmp	r3, #34	; 0x22
 8004934:	d002      	beq.n	800493c <I2C_ITSlaveCplt+0x50>
 8004936:	7bfb      	ldrb	r3, [r7, #15]
 8004938:	2b2a      	cmp	r3, #42	; 0x2a
 800493a:	d107      	bne.n	800494c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800493c:	f248 0102 	movw	r1, #32770	; 0x8002
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 fa6c 	bl	8004e1e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2222      	movs	r2, #34	; 0x22
 800494a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	685a      	ldr	r2, [r3, #4]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800495a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6859      	ldr	r1, [r3, #4]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	4b64      	ldr	r3, [pc, #400]	; (8004af8 <I2C_ITSlaveCplt+0x20c>)
 8004968:	400b      	ands	r3, r1
 800496a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 fa14 	bl	8004d9a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	0b9b      	lsrs	r3, r3, #14
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b00      	cmp	r3, #0
 800497c:	d013      	beq.n	80049a6 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800498c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004992:	2b00      	cmp	r3, #0
 8004994:	d020      	beq.n	80049d8 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	b29a      	uxth	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049a4:	e018      	b.n	80049d8 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	0bdb      	lsrs	r3, r3, #15
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d012      	beq.n	80049d8 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049c0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d006      	beq.n	80049d8 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	089b      	lsrs	r3, r3, #2
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d020      	beq.n	8004a26 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	f023 0304 	bic.w	r3, r3, #4
 80049ea:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	b2d2      	uxtb	r2, r2
 80049f8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fe:	1c5a      	adds	r2, r3, #1
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00c      	beq.n	8004a26 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a10:	3b01      	subs	r3, #1
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d005      	beq.n	8004a3c <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a34:	f043 0204 	orr.w	r2, r3, #4
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d010      	beq.n	8004a74 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a56:	4619      	mov	r1, r3
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 f8a7 	bl	8004bac <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b28      	cmp	r3, #40	; 0x28
 8004a68:	d141      	bne.n	8004aee <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004a6a:	6979      	ldr	r1, [r7, #20]
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 f847 	bl	8004b00 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a72:	e03c      	b.n	8004aee <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a7c:	d014      	beq.n	8004aa8 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f7ff fed5 	bl	800482e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a1d      	ldr	r2, [pc, #116]	; (8004afc <I2C_ITSlaveCplt+0x210>)
 8004a88:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2220      	movs	r2, #32
 8004a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f7ff fd1f 	bl	80044e4 <HAL_I2C_ListenCpltCallback>
}
 8004aa6:	e022      	b.n	8004aee <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b22      	cmp	r3, #34	; 0x22
 8004ab2:	d10e      	bne.n	8004ad2 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7ff fcf2 	bl	80044b4 <HAL_I2C_SlaveRxCpltCallback>
}
 8004ad0:	e00d      	b.n	8004aee <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2220      	movs	r2, #32
 8004ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f7ff fcd9 	bl	80044a0 <HAL_I2C_SlaveTxCpltCallback>
}
 8004aee:	bf00      	nop
 8004af0:	3718      	adds	r7, #24
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	fe00e800 	.word	0xfe00e800
 8004afc:	ffff0000 	.word	0xffff0000

08004b00 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a26      	ldr	r2, [pc, #152]	; (8004ba8 <I2C_ITListenCplt+0xa8>)
 8004b0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2220      	movs	r2, #32
 8004b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	089b      	lsrs	r3, r3, #2
 8004b30:	f003 0301 	and.w	r3, r3, #1
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d022      	beq.n	8004b7e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b42:	b2d2      	uxtb	r2, r2
 8004b44:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4a:	1c5a      	adds	r2, r3, #1
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d012      	beq.n	8004b7e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	b29a      	uxth	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b76:	f043 0204 	orr.w	r2, r3, #4
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004b7e:	f248 0103 	movw	r1, #32771	; 0x8003
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f94b 	bl	8004e1e <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2210      	movs	r2, #16
 8004b8e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f7ff fca3 	bl	80044e4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004b9e:	bf00      	nop
 8004ba0:	3708      	adds	r7, #8
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	ffff0000 	.word	0xffff0000

08004bac <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a5d      	ldr	r2, [pc, #372]	; (8004d40 <I2C_ITError+0x194>)
 8004bca:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004bde:	7bfb      	ldrb	r3, [r7, #15]
 8004be0:	2b28      	cmp	r3, #40	; 0x28
 8004be2:	d005      	beq.n	8004bf0 <I2C_ITError+0x44>
 8004be4:	7bfb      	ldrb	r3, [r7, #15]
 8004be6:	2b29      	cmp	r3, #41	; 0x29
 8004be8:	d002      	beq.n	8004bf0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004bea:	7bfb      	ldrb	r3, [r7, #15]
 8004bec:	2b2a      	cmp	r3, #42	; 0x2a
 8004bee:	d10b      	bne.n	8004c08 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004bf0:	2103      	movs	r1, #3
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f913 	bl	8004e1e <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2228      	movs	r2, #40	; 0x28
 8004bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a50      	ldr	r2, [pc, #320]	; (8004d44 <I2C_ITError+0x198>)
 8004c04:	635a      	str	r2, [r3, #52]	; 0x34
 8004c06:	e011      	b.n	8004c2c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004c08:	f248 0103 	movw	r1, #32771	; 0x8003
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 f906 	bl	8004e1e <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b60      	cmp	r3, #96	; 0x60
 8004c1c:	d003      	beq.n	8004c26 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2220      	movs	r2, #32
 8004c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c30:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d039      	beq.n	8004cae <I2C_ITError+0x102>
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	2b11      	cmp	r3, #17
 8004c3e:	d002      	beq.n	8004c46 <I2C_ITError+0x9a>
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	2b21      	cmp	r3, #33	; 0x21
 8004c44:	d133      	bne.n	8004cae <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c54:	d107      	bne.n	8004c66 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c64:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7ff f93e 	bl	8003eec <HAL_DMA_GetState>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d017      	beq.n	8004ca6 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7a:	4a33      	ldr	r2, [pc, #204]	; (8004d48 <I2C_ITError+0x19c>)
 8004c7c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7ff f8ed 	bl	8003e6a <HAL_DMA_Abort_IT>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d04d      	beq.n	8004d32 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ca0:	4610      	mov	r0, r2
 8004ca2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004ca4:	e045      	b.n	8004d32 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 f850 	bl	8004d4c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004cac:	e041      	b.n	8004d32 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d039      	beq.n	8004d2a <I2C_ITError+0x17e>
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	2b12      	cmp	r3, #18
 8004cba:	d002      	beq.n	8004cc2 <I2C_ITError+0x116>
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	2b22      	cmp	r3, #34	; 0x22
 8004cc0:	d133      	bne.n	8004d2a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ccc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cd0:	d107      	bne.n	8004ce2 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ce0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7ff f900 	bl	8003eec <HAL_DMA_GetState>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d017      	beq.n	8004d22 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf6:	4a14      	ldr	r2, [pc, #80]	; (8004d48 <I2C_ITError+0x19c>)
 8004cf8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7ff f8af 	bl	8003e6a <HAL_DMA_Abort_IT>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d011      	beq.n	8004d36 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004d1c:	4610      	mov	r0, r2
 8004d1e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d20:	e009      	b.n	8004d36 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f812 	bl	8004d4c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d28:	e005      	b.n	8004d36 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 f80e 	bl	8004d4c <I2C_TreatErrorCallback>
  }
}
 8004d30:	e002      	b.n	8004d38 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004d32:	bf00      	nop
 8004d34:	e000      	b.n	8004d38 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d36:	bf00      	nop
}
 8004d38:	bf00      	nop
 8004d3a:	3710      	adds	r7, #16
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	ffff0000 	.word	0xffff0000
 8004d44:	08004521 	.word	0x08004521
 8004d48:	08004de3 	.word	0x08004de3

08004d4c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b60      	cmp	r3, #96	; 0x60
 8004d5e:	d10e      	bne.n	8004d7e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2220      	movs	r2, #32
 8004d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f7ff fbc8 	bl	800450c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d7c:	e009      	b.n	8004d92 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f7ff fbb3 	bl	80044f8 <HAL_I2C_ErrorCallback>
}
 8004d92:	bf00      	nop
 8004d94:	3708      	adds	r7, #8
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b083      	sub	sp, #12
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	f003 0302 	and.w	r3, r3, #2
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d103      	bne.n	8004db8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2200      	movs	r2, #0
 8004db6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d007      	beq.n	8004dd6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	699a      	ldr	r2, [r3, #24]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f042 0201 	orr.w	r2, r2, #1
 8004dd4:	619a      	str	r2, [r3, #24]
  }
}
 8004dd6:	bf00      	nop
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr

08004de2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b084      	sub	sp, #16
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dee:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d003      	beq.n	8004e00 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d003      	beq.n	8004e10 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f7ff ff9b 	bl	8004d4c <I2C_TreatErrorCallback>
}
 8004e16:	bf00      	nop
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b085      	sub	sp, #20
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
 8004e26:	460b      	mov	r3, r1
 8004e28:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004e2e:	887b      	ldrh	r3, [r7, #2]
 8004e30:	f003 0301 	and.w	r3, r3, #1
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00f      	beq.n	8004e58 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004e3e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004e4c:	2b28      	cmp	r3, #40	; 0x28
 8004e4e:	d003      	beq.n	8004e58 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004e56:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004e58:	887b      	ldrh	r3, [r7, #2]
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00f      	beq.n	8004e82 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8004e68:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004e76:	2b28      	cmp	r3, #40	; 0x28
 8004e78:	d003      	beq.n	8004e82 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004e80:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004e82:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	da03      	bge.n	8004e92 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004e90:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004e92:	887b      	ldrh	r3, [r7, #2]
 8004e94:	2b10      	cmp	r3, #16
 8004e96:	d103      	bne.n	8004ea0 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004e9e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004ea0:	887b      	ldrh	r3, [r7, #2]
 8004ea2:	2b20      	cmp	r3, #32
 8004ea4:	d103      	bne.n	8004eae <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f043 0320 	orr.w	r3, r3, #32
 8004eac:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004eae:	887b      	ldrh	r3, [r7, #2]
 8004eb0:	2b40      	cmp	r3, #64	; 0x40
 8004eb2:	d103      	bne.n	8004ebc <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004eba:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6819      	ldr	r1, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	43da      	mvns	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	400a      	ands	r2, r1
 8004ecc:	601a      	str	r2, [r3, #0]
}
 8004ece:	bf00      	nop
 8004ed0:	3714      	adds	r7, #20
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004eda:	b480      	push	{r7}
 8004edc:	b083      	sub	sp, #12
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
 8004ee2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b20      	cmp	r3, #32
 8004eee:	d138      	bne.n	8004f62 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d101      	bne.n	8004efe <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004efa:	2302      	movs	r3, #2
 8004efc:	e032      	b.n	8004f64 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2224      	movs	r2, #36	; 0x24
 8004f0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f022 0201 	bic.w	r2, r2, #1
 8004f1c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f2c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	6819      	ldr	r1, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f042 0201 	orr.w	r2, r2, #1
 8004f4c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2220      	movs	r2, #32
 8004f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	e000      	b.n	8004f64 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004f62:	2302      	movs	r3, #2
  }
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b20      	cmp	r3, #32
 8004f84:	d139      	bne.n	8004ffa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d101      	bne.n	8004f94 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004f90:	2302      	movs	r3, #2
 8004f92:	e033      	b.n	8004ffc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2224      	movs	r2, #36	; 0x24
 8004fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f022 0201 	bic.w	r2, r2, #1
 8004fb2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004fc2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	021b      	lsls	r3, r3, #8
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f042 0201 	orr.w	r2, r2, #1
 8004fe4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2220      	movs	r2, #32
 8004fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	e000      	b.n	8004ffc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004ffa:	2302      	movs	r3, #2
  }
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3714      	adds	r7, #20
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005008:	b480      	push	{r7}
 800500a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800500c:	4b04      	ldr	r3, [pc, #16]	; (8005020 <HAL_PWREx_GetVoltageRange+0x18>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005014:	4618      	mov	r0, r3
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	40007000 	.word	0x40007000

08005024 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005032:	d130      	bne.n	8005096 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005034:	4b23      	ldr	r3, [pc, #140]	; (80050c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800503c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005040:	d038      	beq.n	80050b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005042:	4b20      	ldr	r3, [pc, #128]	; (80050c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800504a:	4a1e      	ldr	r2, [pc, #120]	; (80050c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800504c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005050:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005052:	4b1d      	ldr	r3, [pc, #116]	; (80050c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2232      	movs	r2, #50	; 0x32
 8005058:	fb02 f303 	mul.w	r3, r2, r3
 800505c:	4a1b      	ldr	r2, [pc, #108]	; (80050cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800505e:	fba2 2303 	umull	r2, r3, r2, r3
 8005062:	0c9b      	lsrs	r3, r3, #18
 8005064:	3301      	adds	r3, #1
 8005066:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005068:	e002      	b.n	8005070 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	3b01      	subs	r3, #1
 800506e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005070:	4b14      	ldr	r3, [pc, #80]	; (80050c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005072:	695b      	ldr	r3, [r3, #20]
 8005074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800507c:	d102      	bne.n	8005084 <HAL_PWREx_ControlVoltageScaling+0x60>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1f2      	bne.n	800506a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005084:	4b0f      	ldr	r3, [pc, #60]	; (80050c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005086:	695b      	ldr	r3, [r3, #20]
 8005088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800508c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005090:	d110      	bne.n	80050b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e00f      	b.n	80050b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005096:	4b0b      	ldr	r3, [pc, #44]	; (80050c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800509e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050a2:	d007      	beq.n	80050b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80050a4:	4b07      	ldr	r3, [pc, #28]	; (80050c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80050ac:	4a05      	ldr	r2, [pc, #20]	; (80050c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80050b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3714      	adds	r7, #20
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	40007000 	.word	0x40007000
 80050c8:	20000000 	.word	0x20000000
 80050cc:	431bde83 	.word	0x431bde83

080050d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b088      	sub	sp, #32
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e3ca      	b.n	8005878 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050e2:	4b97      	ldr	r3, [pc, #604]	; (8005340 <HAL_RCC_OscConfig+0x270>)
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f003 030c 	and.w	r3, r3, #12
 80050ea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050ec:	4b94      	ldr	r3, [pc, #592]	; (8005340 <HAL_RCC_OscConfig+0x270>)
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	f003 0303 	and.w	r3, r3, #3
 80050f4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0310 	and.w	r3, r3, #16
 80050fe:	2b00      	cmp	r3, #0
 8005100:	f000 80e4 	beq.w	80052cc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d007      	beq.n	800511a <HAL_RCC_OscConfig+0x4a>
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	2b0c      	cmp	r3, #12
 800510e:	f040 808b 	bne.w	8005228 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	2b01      	cmp	r3, #1
 8005116:	f040 8087 	bne.w	8005228 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800511a:	4b89      	ldr	r3, [pc, #548]	; (8005340 <HAL_RCC_OscConfig+0x270>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d005      	beq.n	8005132 <HAL_RCC_OscConfig+0x62>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e3a2      	b.n	8005878 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a1a      	ldr	r2, [r3, #32]
 8005136:	4b82      	ldr	r3, [pc, #520]	; (8005340 <HAL_RCC_OscConfig+0x270>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0308 	and.w	r3, r3, #8
 800513e:	2b00      	cmp	r3, #0
 8005140:	d004      	beq.n	800514c <HAL_RCC_OscConfig+0x7c>
 8005142:	4b7f      	ldr	r3, [pc, #508]	; (8005340 <HAL_RCC_OscConfig+0x270>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800514a:	e005      	b.n	8005158 <HAL_RCC_OscConfig+0x88>
 800514c:	4b7c      	ldr	r3, [pc, #496]	; (8005340 <HAL_RCC_OscConfig+0x270>)
 800514e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005152:	091b      	lsrs	r3, r3, #4
 8005154:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005158:	4293      	cmp	r3, r2
 800515a:	d223      	bcs.n	80051a4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	4618      	mov	r0, r3
 8005162:	f000 fd1b 	bl	8005b9c <RCC_SetFlashLatencyFromMSIRange>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d001      	beq.n	8005170 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e383      	b.n	8005878 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005170:	4b73      	ldr	r3, [pc, #460]	; (8005340 <HAL_RCC_OscConfig+0x270>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a72      	ldr	r2, [pc, #456]	; (8005340 <HAL_RCC_OscConfig+0x270>)
 8005176:	f043 0308 	orr.w	r3, r3, #8
 800517a:	6013      	str	r3, [r2, #0]
 800517c:	4b70      	ldr	r3, [pc, #448]	; (8005340 <HAL_RCC_OscConfig+0x270>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a1b      	ldr	r3, [r3, #32]
 8005188:	496d      	ldr	r1, [pc, #436]	; (8005340 <HAL_RCC_OscConfig+0x270>)
 800518a:	4313      	orrs	r3, r2
 800518c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800518e:	4b6c      	ldr	r3, [pc, #432]	; (8005340 <HAL_RCC_OscConfig+0x270>)
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	69db      	ldr	r3, [r3, #28]
 800519a:	021b      	lsls	r3, r3, #8
 800519c:	4968      	ldr	r1, [pc, #416]	; (8005340 <HAL_RCC_OscConfig+0x270>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	604b      	str	r3, [r1, #4]
 80051a2:	e025      	b.n	80051f0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80051a4:	4b66      	ldr	r3, [pc, #408]	; (8005340 <HAL_RCC_OscConfig+0x270>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a65      	ldr	r2, [pc, #404]	; (8005340 <HAL_RCC_OscConfig+0x270>)
 80051aa:	f043 0308 	orr.w	r3, r3, #8
 80051ae:	6013      	str	r3, [r2, #0]
 80051b0:	4b63      	ldr	r3, [pc, #396]	; (8005340 <HAL_RCC_OscConfig+0x270>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	4960      	ldr	r1, [pc, #384]	; (8005340 <HAL_RCC_OscConfig+0x270>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051c2:	4b5f      	ldr	r3, [pc, #380]	; (8005340 <HAL_RCC_OscConfig+0x270>)
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	69db      	ldr	r3, [r3, #28]
 80051ce:	021b      	lsls	r3, r3, #8
 80051d0:	495b      	ldr	r1, [pc, #364]	; (8005340 <HAL_RCC_OscConfig+0x270>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d109      	bne.n	80051f0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a1b      	ldr	r3, [r3, #32]
 80051e0:	4618      	mov	r0, r3
 80051e2:	f000 fcdb 	bl	8005b9c <RCC_SetFlashLatencyFromMSIRange>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d001      	beq.n	80051f0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e343      	b.n	8005878 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80051f0:	f000 fc4a 	bl	8005a88 <HAL_RCC_GetSysClockFreq>
 80051f4:	4602      	mov	r2, r0
 80051f6:	4b52      	ldr	r3, [pc, #328]	; (8005340 <HAL_RCC_OscConfig+0x270>)
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	091b      	lsrs	r3, r3, #4
 80051fc:	f003 030f 	and.w	r3, r3, #15
 8005200:	4950      	ldr	r1, [pc, #320]	; (8005344 <HAL_RCC_OscConfig+0x274>)
 8005202:	5ccb      	ldrb	r3, [r1, r3]
 8005204:	f003 031f 	and.w	r3, r3, #31
 8005208:	fa22 f303 	lsr.w	r3, r2, r3
 800520c:	4a4e      	ldr	r2, [pc, #312]	; (8005348 <HAL_RCC_OscConfig+0x278>)
 800520e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005210:	4b4e      	ldr	r3, [pc, #312]	; (800534c <HAL_RCC_OscConfig+0x27c>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4618      	mov	r0, r3
 8005216:	f7fc fa93 	bl	8001740 <HAL_InitTick>
 800521a:	4603      	mov	r3, r0
 800521c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800521e:	7bfb      	ldrb	r3, [r7, #15]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d052      	beq.n	80052ca <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005224:	7bfb      	ldrb	r3, [r7, #15]
 8005226:	e327      	b.n	8005878 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d032      	beq.n	8005296 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005230:	4b43      	ldr	r3, [pc, #268]	; (8005340 <HAL_RCC_OscConfig+0x270>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a42      	ldr	r2, [pc, #264]	; (8005340 <HAL_RCC_OscConfig+0x270>)
 8005236:	f043 0301 	orr.w	r3, r3, #1
 800523a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800523c:	f7fc fad0 	bl	80017e0 <HAL_GetTick>
 8005240:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005242:	e008      	b.n	8005256 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005244:	f7fc facc 	bl	80017e0 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b02      	cmp	r3, #2
 8005250:	d901      	bls.n	8005256 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e310      	b.n	8005878 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005256:	4b3a      	ldr	r3, [pc, #232]	; (8005340 <HAL_RCC_OscConfig+0x270>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d0f0      	beq.n	8005244 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005262:	4b37      	ldr	r3, [pc, #220]	; (8005340 <HAL_RCC_OscConfig+0x270>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a36      	ldr	r2, [pc, #216]	; (8005340 <HAL_RCC_OscConfig+0x270>)
 8005268:	f043 0308 	orr.w	r3, r3, #8
 800526c:	6013      	str	r3, [r2, #0]
 800526e:	4b34      	ldr	r3, [pc, #208]	; (8005340 <HAL_RCC_OscConfig+0x270>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	4931      	ldr	r1, [pc, #196]	; (8005340 <HAL_RCC_OscConfig+0x270>)
 800527c:	4313      	orrs	r3, r2
 800527e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005280:	4b2f      	ldr	r3, [pc, #188]	; (8005340 <HAL_RCC_OscConfig+0x270>)
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	69db      	ldr	r3, [r3, #28]
 800528c:	021b      	lsls	r3, r3, #8
 800528e:	492c      	ldr	r1, [pc, #176]	; (8005340 <HAL_RCC_OscConfig+0x270>)
 8005290:	4313      	orrs	r3, r2
 8005292:	604b      	str	r3, [r1, #4]
 8005294:	e01a      	b.n	80052cc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005296:	4b2a      	ldr	r3, [pc, #168]	; (8005340 <HAL_RCC_OscConfig+0x270>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a29      	ldr	r2, [pc, #164]	; (8005340 <HAL_RCC_OscConfig+0x270>)
 800529c:	f023 0301 	bic.w	r3, r3, #1
 80052a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80052a2:	f7fc fa9d 	bl	80017e0 <HAL_GetTick>
 80052a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80052a8:	e008      	b.n	80052bc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80052aa:	f7fc fa99 	bl	80017e0 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d901      	bls.n	80052bc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e2dd      	b.n	8005878 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80052bc:	4b20      	ldr	r3, [pc, #128]	; (8005340 <HAL_RCC_OscConfig+0x270>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0302 	and.w	r3, r3, #2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1f0      	bne.n	80052aa <HAL_RCC_OscConfig+0x1da>
 80052c8:	e000      	b.n	80052cc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80052ca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d074      	beq.n	80053c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	2b08      	cmp	r3, #8
 80052dc:	d005      	beq.n	80052ea <HAL_RCC_OscConfig+0x21a>
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	2b0c      	cmp	r3, #12
 80052e2:	d10e      	bne.n	8005302 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	2b03      	cmp	r3, #3
 80052e8:	d10b      	bne.n	8005302 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052ea:	4b15      	ldr	r3, [pc, #84]	; (8005340 <HAL_RCC_OscConfig+0x270>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d064      	beq.n	80053c0 <HAL_RCC_OscConfig+0x2f0>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d160      	bne.n	80053c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e2ba      	b.n	8005878 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800530a:	d106      	bne.n	800531a <HAL_RCC_OscConfig+0x24a>
 800530c:	4b0c      	ldr	r3, [pc, #48]	; (8005340 <HAL_RCC_OscConfig+0x270>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a0b      	ldr	r2, [pc, #44]	; (8005340 <HAL_RCC_OscConfig+0x270>)
 8005312:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005316:	6013      	str	r3, [r2, #0]
 8005318:	e026      	b.n	8005368 <HAL_RCC_OscConfig+0x298>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005322:	d115      	bne.n	8005350 <HAL_RCC_OscConfig+0x280>
 8005324:	4b06      	ldr	r3, [pc, #24]	; (8005340 <HAL_RCC_OscConfig+0x270>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a05      	ldr	r2, [pc, #20]	; (8005340 <HAL_RCC_OscConfig+0x270>)
 800532a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800532e:	6013      	str	r3, [r2, #0]
 8005330:	4b03      	ldr	r3, [pc, #12]	; (8005340 <HAL_RCC_OscConfig+0x270>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a02      	ldr	r2, [pc, #8]	; (8005340 <HAL_RCC_OscConfig+0x270>)
 8005336:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800533a:	6013      	str	r3, [r2, #0]
 800533c:	e014      	b.n	8005368 <HAL_RCC_OscConfig+0x298>
 800533e:	bf00      	nop
 8005340:	40021000 	.word	0x40021000
 8005344:	080077ac 	.word	0x080077ac
 8005348:	20000000 	.word	0x20000000
 800534c:	20000004 	.word	0x20000004
 8005350:	4ba0      	ldr	r3, [pc, #640]	; (80055d4 <HAL_RCC_OscConfig+0x504>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a9f      	ldr	r2, [pc, #636]	; (80055d4 <HAL_RCC_OscConfig+0x504>)
 8005356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800535a:	6013      	str	r3, [r2, #0]
 800535c:	4b9d      	ldr	r3, [pc, #628]	; (80055d4 <HAL_RCC_OscConfig+0x504>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a9c      	ldr	r2, [pc, #624]	; (80055d4 <HAL_RCC_OscConfig+0x504>)
 8005362:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005366:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d013      	beq.n	8005398 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005370:	f7fc fa36 	bl	80017e0 <HAL_GetTick>
 8005374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005376:	e008      	b.n	800538a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005378:	f7fc fa32 	bl	80017e0 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	2b64      	cmp	r3, #100	; 0x64
 8005384:	d901      	bls.n	800538a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e276      	b.n	8005878 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800538a:	4b92      	ldr	r3, [pc, #584]	; (80055d4 <HAL_RCC_OscConfig+0x504>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d0f0      	beq.n	8005378 <HAL_RCC_OscConfig+0x2a8>
 8005396:	e014      	b.n	80053c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005398:	f7fc fa22 	bl	80017e0 <HAL_GetTick>
 800539c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800539e:	e008      	b.n	80053b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053a0:	f7fc fa1e 	bl	80017e0 <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	2b64      	cmp	r3, #100	; 0x64
 80053ac:	d901      	bls.n	80053b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e262      	b.n	8005878 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053b2:	4b88      	ldr	r3, [pc, #544]	; (80055d4 <HAL_RCC_OscConfig+0x504>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1f0      	bne.n	80053a0 <HAL_RCC_OscConfig+0x2d0>
 80053be:	e000      	b.n	80053c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d060      	beq.n	8005490 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	2b04      	cmp	r3, #4
 80053d2:	d005      	beq.n	80053e0 <HAL_RCC_OscConfig+0x310>
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	2b0c      	cmp	r3, #12
 80053d8:	d119      	bne.n	800540e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d116      	bne.n	800540e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053e0:	4b7c      	ldr	r3, [pc, #496]	; (80055d4 <HAL_RCC_OscConfig+0x504>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d005      	beq.n	80053f8 <HAL_RCC_OscConfig+0x328>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d101      	bne.n	80053f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e23f      	b.n	8005878 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053f8:	4b76      	ldr	r3, [pc, #472]	; (80055d4 <HAL_RCC_OscConfig+0x504>)
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	061b      	lsls	r3, r3, #24
 8005406:	4973      	ldr	r1, [pc, #460]	; (80055d4 <HAL_RCC_OscConfig+0x504>)
 8005408:	4313      	orrs	r3, r2
 800540a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800540c:	e040      	b.n	8005490 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d023      	beq.n	800545e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005416:	4b6f      	ldr	r3, [pc, #444]	; (80055d4 <HAL_RCC_OscConfig+0x504>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a6e      	ldr	r2, [pc, #440]	; (80055d4 <HAL_RCC_OscConfig+0x504>)
 800541c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005420:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005422:	f7fc f9dd 	bl	80017e0 <HAL_GetTick>
 8005426:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005428:	e008      	b.n	800543c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800542a:	f7fc f9d9 	bl	80017e0 <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	2b02      	cmp	r3, #2
 8005436:	d901      	bls.n	800543c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e21d      	b.n	8005878 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800543c:	4b65      	ldr	r3, [pc, #404]	; (80055d4 <HAL_RCC_OscConfig+0x504>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005444:	2b00      	cmp	r3, #0
 8005446:	d0f0      	beq.n	800542a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005448:	4b62      	ldr	r3, [pc, #392]	; (80055d4 <HAL_RCC_OscConfig+0x504>)
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	061b      	lsls	r3, r3, #24
 8005456:	495f      	ldr	r1, [pc, #380]	; (80055d4 <HAL_RCC_OscConfig+0x504>)
 8005458:	4313      	orrs	r3, r2
 800545a:	604b      	str	r3, [r1, #4]
 800545c:	e018      	b.n	8005490 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800545e:	4b5d      	ldr	r3, [pc, #372]	; (80055d4 <HAL_RCC_OscConfig+0x504>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a5c      	ldr	r2, [pc, #368]	; (80055d4 <HAL_RCC_OscConfig+0x504>)
 8005464:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005468:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800546a:	f7fc f9b9 	bl	80017e0 <HAL_GetTick>
 800546e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005470:	e008      	b.n	8005484 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005472:	f7fc f9b5 	bl	80017e0 <HAL_GetTick>
 8005476:	4602      	mov	r2, r0
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	2b02      	cmp	r3, #2
 800547e:	d901      	bls.n	8005484 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005480:	2303      	movs	r3, #3
 8005482:	e1f9      	b.n	8005878 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005484:	4b53      	ldr	r3, [pc, #332]	; (80055d4 <HAL_RCC_OscConfig+0x504>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1f0      	bne.n	8005472 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0308 	and.w	r3, r3, #8
 8005498:	2b00      	cmp	r3, #0
 800549a:	d03c      	beq.n	8005516 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	695b      	ldr	r3, [r3, #20]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d01c      	beq.n	80054de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054a4:	4b4b      	ldr	r3, [pc, #300]	; (80055d4 <HAL_RCC_OscConfig+0x504>)
 80054a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054aa:	4a4a      	ldr	r2, [pc, #296]	; (80055d4 <HAL_RCC_OscConfig+0x504>)
 80054ac:	f043 0301 	orr.w	r3, r3, #1
 80054b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054b4:	f7fc f994 	bl	80017e0 <HAL_GetTick>
 80054b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80054ba:	e008      	b.n	80054ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054bc:	f7fc f990 	bl	80017e0 <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d901      	bls.n	80054ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e1d4      	b.n	8005878 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80054ce:	4b41      	ldr	r3, [pc, #260]	; (80055d4 <HAL_RCC_OscConfig+0x504>)
 80054d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054d4:	f003 0302 	and.w	r3, r3, #2
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d0ef      	beq.n	80054bc <HAL_RCC_OscConfig+0x3ec>
 80054dc:	e01b      	b.n	8005516 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054de:	4b3d      	ldr	r3, [pc, #244]	; (80055d4 <HAL_RCC_OscConfig+0x504>)
 80054e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054e4:	4a3b      	ldr	r2, [pc, #236]	; (80055d4 <HAL_RCC_OscConfig+0x504>)
 80054e6:	f023 0301 	bic.w	r3, r3, #1
 80054ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ee:	f7fc f977 	bl	80017e0 <HAL_GetTick>
 80054f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80054f4:	e008      	b.n	8005508 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054f6:	f7fc f973 	bl	80017e0 <HAL_GetTick>
 80054fa:	4602      	mov	r2, r0
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	2b02      	cmp	r3, #2
 8005502:	d901      	bls.n	8005508 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e1b7      	b.n	8005878 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005508:	4b32      	ldr	r3, [pc, #200]	; (80055d4 <HAL_RCC_OscConfig+0x504>)
 800550a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800550e:	f003 0302 	and.w	r3, r3, #2
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1ef      	bne.n	80054f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0304 	and.w	r3, r3, #4
 800551e:	2b00      	cmp	r3, #0
 8005520:	f000 80a6 	beq.w	8005670 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005524:	2300      	movs	r3, #0
 8005526:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005528:	4b2a      	ldr	r3, [pc, #168]	; (80055d4 <HAL_RCC_OscConfig+0x504>)
 800552a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800552c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d10d      	bne.n	8005550 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005534:	4b27      	ldr	r3, [pc, #156]	; (80055d4 <HAL_RCC_OscConfig+0x504>)
 8005536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005538:	4a26      	ldr	r2, [pc, #152]	; (80055d4 <HAL_RCC_OscConfig+0x504>)
 800553a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800553e:	6593      	str	r3, [r2, #88]	; 0x58
 8005540:	4b24      	ldr	r3, [pc, #144]	; (80055d4 <HAL_RCC_OscConfig+0x504>)
 8005542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005548:	60bb      	str	r3, [r7, #8]
 800554a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800554c:	2301      	movs	r3, #1
 800554e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005550:	4b21      	ldr	r3, [pc, #132]	; (80055d8 <HAL_RCC_OscConfig+0x508>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005558:	2b00      	cmp	r3, #0
 800555a:	d118      	bne.n	800558e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800555c:	4b1e      	ldr	r3, [pc, #120]	; (80055d8 <HAL_RCC_OscConfig+0x508>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a1d      	ldr	r2, [pc, #116]	; (80055d8 <HAL_RCC_OscConfig+0x508>)
 8005562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005566:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005568:	f7fc f93a 	bl	80017e0 <HAL_GetTick>
 800556c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800556e:	e008      	b.n	8005582 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005570:	f7fc f936 	bl	80017e0 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	2b02      	cmp	r3, #2
 800557c:	d901      	bls.n	8005582 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e17a      	b.n	8005878 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005582:	4b15      	ldr	r3, [pc, #84]	; (80055d8 <HAL_RCC_OscConfig+0x508>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800558a:	2b00      	cmp	r3, #0
 800558c:	d0f0      	beq.n	8005570 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	2b01      	cmp	r3, #1
 8005594:	d108      	bne.n	80055a8 <HAL_RCC_OscConfig+0x4d8>
 8005596:	4b0f      	ldr	r3, [pc, #60]	; (80055d4 <HAL_RCC_OscConfig+0x504>)
 8005598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800559c:	4a0d      	ldr	r2, [pc, #52]	; (80055d4 <HAL_RCC_OscConfig+0x504>)
 800559e:	f043 0301 	orr.w	r3, r3, #1
 80055a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80055a6:	e029      	b.n	80055fc <HAL_RCC_OscConfig+0x52c>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	2b05      	cmp	r3, #5
 80055ae:	d115      	bne.n	80055dc <HAL_RCC_OscConfig+0x50c>
 80055b0:	4b08      	ldr	r3, [pc, #32]	; (80055d4 <HAL_RCC_OscConfig+0x504>)
 80055b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055b6:	4a07      	ldr	r2, [pc, #28]	; (80055d4 <HAL_RCC_OscConfig+0x504>)
 80055b8:	f043 0304 	orr.w	r3, r3, #4
 80055bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80055c0:	4b04      	ldr	r3, [pc, #16]	; (80055d4 <HAL_RCC_OscConfig+0x504>)
 80055c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055c6:	4a03      	ldr	r2, [pc, #12]	; (80055d4 <HAL_RCC_OscConfig+0x504>)
 80055c8:	f043 0301 	orr.w	r3, r3, #1
 80055cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80055d0:	e014      	b.n	80055fc <HAL_RCC_OscConfig+0x52c>
 80055d2:	bf00      	nop
 80055d4:	40021000 	.word	0x40021000
 80055d8:	40007000 	.word	0x40007000
 80055dc:	4b9c      	ldr	r3, [pc, #624]	; (8005850 <HAL_RCC_OscConfig+0x780>)
 80055de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055e2:	4a9b      	ldr	r2, [pc, #620]	; (8005850 <HAL_RCC_OscConfig+0x780>)
 80055e4:	f023 0301 	bic.w	r3, r3, #1
 80055e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80055ec:	4b98      	ldr	r3, [pc, #608]	; (8005850 <HAL_RCC_OscConfig+0x780>)
 80055ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055f2:	4a97      	ldr	r2, [pc, #604]	; (8005850 <HAL_RCC_OscConfig+0x780>)
 80055f4:	f023 0304 	bic.w	r3, r3, #4
 80055f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d016      	beq.n	8005632 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005604:	f7fc f8ec 	bl	80017e0 <HAL_GetTick>
 8005608:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800560a:	e00a      	b.n	8005622 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800560c:	f7fc f8e8 	bl	80017e0 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	f241 3288 	movw	r2, #5000	; 0x1388
 800561a:	4293      	cmp	r3, r2
 800561c:	d901      	bls.n	8005622 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	e12a      	b.n	8005878 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005622:	4b8b      	ldr	r3, [pc, #556]	; (8005850 <HAL_RCC_OscConfig+0x780>)
 8005624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005628:	f003 0302 	and.w	r3, r3, #2
 800562c:	2b00      	cmp	r3, #0
 800562e:	d0ed      	beq.n	800560c <HAL_RCC_OscConfig+0x53c>
 8005630:	e015      	b.n	800565e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005632:	f7fc f8d5 	bl	80017e0 <HAL_GetTick>
 8005636:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005638:	e00a      	b.n	8005650 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800563a:	f7fc f8d1 	bl	80017e0 <HAL_GetTick>
 800563e:	4602      	mov	r2, r0
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	f241 3288 	movw	r2, #5000	; 0x1388
 8005648:	4293      	cmp	r3, r2
 800564a:	d901      	bls.n	8005650 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e113      	b.n	8005878 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005650:	4b7f      	ldr	r3, [pc, #508]	; (8005850 <HAL_RCC_OscConfig+0x780>)
 8005652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005656:	f003 0302 	and.w	r3, r3, #2
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1ed      	bne.n	800563a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800565e:	7ffb      	ldrb	r3, [r7, #31]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d105      	bne.n	8005670 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005664:	4b7a      	ldr	r3, [pc, #488]	; (8005850 <HAL_RCC_OscConfig+0x780>)
 8005666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005668:	4a79      	ldr	r2, [pc, #484]	; (8005850 <HAL_RCC_OscConfig+0x780>)
 800566a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800566e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005674:	2b00      	cmp	r3, #0
 8005676:	f000 80fe 	beq.w	8005876 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800567e:	2b02      	cmp	r3, #2
 8005680:	f040 80d0 	bne.w	8005824 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005684:	4b72      	ldr	r3, [pc, #456]	; (8005850 <HAL_RCC_OscConfig+0x780>)
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	f003 0203 	and.w	r2, r3, #3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005694:	429a      	cmp	r2, r3
 8005696:	d130      	bne.n	80056fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a2:	3b01      	subs	r3, #1
 80056a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d127      	bne.n	80056fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d11f      	bne.n	80056fa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80056c4:	2a07      	cmp	r2, #7
 80056c6:	bf14      	ite	ne
 80056c8:	2201      	movne	r2, #1
 80056ca:	2200      	moveq	r2, #0
 80056cc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d113      	bne.n	80056fa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056dc:	085b      	lsrs	r3, r3, #1
 80056de:	3b01      	subs	r3, #1
 80056e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d109      	bne.n	80056fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f0:	085b      	lsrs	r3, r3, #1
 80056f2:	3b01      	subs	r3, #1
 80056f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d06e      	beq.n	80057d8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	2b0c      	cmp	r3, #12
 80056fe:	d069      	beq.n	80057d4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005700:	4b53      	ldr	r3, [pc, #332]	; (8005850 <HAL_RCC_OscConfig+0x780>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d105      	bne.n	8005718 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800570c:	4b50      	ldr	r3, [pc, #320]	; (8005850 <HAL_RCC_OscConfig+0x780>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d001      	beq.n	800571c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e0ad      	b.n	8005878 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800571c:	4b4c      	ldr	r3, [pc, #304]	; (8005850 <HAL_RCC_OscConfig+0x780>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a4b      	ldr	r2, [pc, #300]	; (8005850 <HAL_RCC_OscConfig+0x780>)
 8005722:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005726:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005728:	f7fc f85a 	bl	80017e0 <HAL_GetTick>
 800572c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800572e:	e008      	b.n	8005742 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005730:	f7fc f856 	bl	80017e0 <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	2b02      	cmp	r3, #2
 800573c:	d901      	bls.n	8005742 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e09a      	b.n	8005878 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005742:	4b43      	ldr	r3, [pc, #268]	; (8005850 <HAL_RCC_OscConfig+0x780>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1f0      	bne.n	8005730 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800574e:	4b40      	ldr	r3, [pc, #256]	; (8005850 <HAL_RCC_OscConfig+0x780>)
 8005750:	68da      	ldr	r2, [r3, #12]
 8005752:	4b40      	ldr	r3, [pc, #256]	; (8005854 <HAL_RCC_OscConfig+0x784>)
 8005754:	4013      	ands	r3, r2
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800575e:	3a01      	subs	r2, #1
 8005760:	0112      	lsls	r2, r2, #4
 8005762:	4311      	orrs	r1, r2
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005768:	0212      	lsls	r2, r2, #8
 800576a:	4311      	orrs	r1, r2
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005770:	0852      	lsrs	r2, r2, #1
 8005772:	3a01      	subs	r2, #1
 8005774:	0552      	lsls	r2, r2, #21
 8005776:	4311      	orrs	r1, r2
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800577c:	0852      	lsrs	r2, r2, #1
 800577e:	3a01      	subs	r2, #1
 8005780:	0652      	lsls	r2, r2, #25
 8005782:	4311      	orrs	r1, r2
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005788:	0912      	lsrs	r2, r2, #4
 800578a:	0452      	lsls	r2, r2, #17
 800578c:	430a      	orrs	r2, r1
 800578e:	4930      	ldr	r1, [pc, #192]	; (8005850 <HAL_RCC_OscConfig+0x780>)
 8005790:	4313      	orrs	r3, r2
 8005792:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005794:	4b2e      	ldr	r3, [pc, #184]	; (8005850 <HAL_RCC_OscConfig+0x780>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a2d      	ldr	r2, [pc, #180]	; (8005850 <HAL_RCC_OscConfig+0x780>)
 800579a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800579e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80057a0:	4b2b      	ldr	r3, [pc, #172]	; (8005850 <HAL_RCC_OscConfig+0x780>)
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	4a2a      	ldr	r2, [pc, #168]	; (8005850 <HAL_RCC_OscConfig+0x780>)
 80057a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80057ac:	f7fc f818 	bl	80017e0 <HAL_GetTick>
 80057b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057b2:	e008      	b.n	80057c6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057b4:	f7fc f814 	bl	80017e0 <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d901      	bls.n	80057c6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e058      	b.n	8005878 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057c6:	4b22      	ldr	r3, [pc, #136]	; (8005850 <HAL_RCC_OscConfig+0x780>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d0f0      	beq.n	80057b4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80057d2:	e050      	b.n	8005876 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e04f      	b.n	8005878 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057d8:	4b1d      	ldr	r3, [pc, #116]	; (8005850 <HAL_RCC_OscConfig+0x780>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d148      	bne.n	8005876 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80057e4:	4b1a      	ldr	r3, [pc, #104]	; (8005850 <HAL_RCC_OscConfig+0x780>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a19      	ldr	r2, [pc, #100]	; (8005850 <HAL_RCC_OscConfig+0x780>)
 80057ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80057f0:	4b17      	ldr	r3, [pc, #92]	; (8005850 <HAL_RCC_OscConfig+0x780>)
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	4a16      	ldr	r2, [pc, #88]	; (8005850 <HAL_RCC_OscConfig+0x780>)
 80057f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80057fc:	f7fb fff0 	bl	80017e0 <HAL_GetTick>
 8005800:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005802:	e008      	b.n	8005816 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005804:	f7fb ffec 	bl	80017e0 <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	2b02      	cmp	r3, #2
 8005810:	d901      	bls.n	8005816 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e030      	b.n	8005878 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005816:	4b0e      	ldr	r3, [pc, #56]	; (8005850 <HAL_RCC_OscConfig+0x780>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d0f0      	beq.n	8005804 <HAL_RCC_OscConfig+0x734>
 8005822:	e028      	b.n	8005876 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	2b0c      	cmp	r3, #12
 8005828:	d023      	beq.n	8005872 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800582a:	4b09      	ldr	r3, [pc, #36]	; (8005850 <HAL_RCC_OscConfig+0x780>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a08      	ldr	r2, [pc, #32]	; (8005850 <HAL_RCC_OscConfig+0x780>)
 8005830:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005834:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005836:	f7fb ffd3 	bl	80017e0 <HAL_GetTick>
 800583a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800583c:	e00c      	b.n	8005858 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800583e:	f7fb ffcf 	bl	80017e0 <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	2b02      	cmp	r3, #2
 800584a:	d905      	bls.n	8005858 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e013      	b.n	8005878 <HAL_RCC_OscConfig+0x7a8>
 8005850:	40021000 	.word	0x40021000
 8005854:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005858:	4b09      	ldr	r3, [pc, #36]	; (8005880 <HAL_RCC_OscConfig+0x7b0>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1ec      	bne.n	800583e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005864:	4b06      	ldr	r3, [pc, #24]	; (8005880 <HAL_RCC_OscConfig+0x7b0>)
 8005866:	68da      	ldr	r2, [r3, #12]
 8005868:	4905      	ldr	r1, [pc, #20]	; (8005880 <HAL_RCC_OscConfig+0x7b0>)
 800586a:	4b06      	ldr	r3, [pc, #24]	; (8005884 <HAL_RCC_OscConfig+0x7b4>)
 800586c:	4013      	ands	r3, r2
 800586e:	60cb      	str	r3, [r1, #12]
 8005870:	e001      	b.n	8005876 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e000      	b.n	8005878 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3720      	adds	r7, #32
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	40021000 	.word	0x40021000
 8005884:	feeefffc 	.word	0xfeeefffc

08005888 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d101      	bne.n	800589c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e0e7      	b.n	8005a6c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800589c:	4b75      	ldr	r3, [pc, #468]	; (8005a74 <HAL_RCC_ClockConfig+0x1ec>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0307 	and.w	r3, r3, #7
 80058a4:	683a      	ldr	r2, [r7, #0]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d910      	bls.n	80058cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058aa:	4b72      	ldr	r3, [pc, #456]	; (8005a74 <HAL_RCC_ClockConfig+0x1ec>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f023 0207 	bic.w	r2, r3, #7
 80058b2:	4970      	ldr	r1, [pc, #448]	; (8005a74 <HAL_RCC_ClockConfig+0x1ec>)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058ba:	4b6e      	ldr	r3, [pc, #440]	; (8005a74 <HAL_RCC_ClockConfig+0x1ec>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0307 	and.w	r3, r3, #7
 80058c2:	683a      	ldr	r2, [r7, #0]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d001      	beq.n	80058cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e0cf      	b.n	8005a6c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0302 	and.w	r3, r3, #2
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d010      	beq.n	80058fa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	689a      	ldr	r2, [r3, #8]
 80058dc:	4b66      	ldr	r3, [pc, #408]	; (8005a78 <HAL_RCC_ClockConfig+0x1f0>)
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d908      	bls.n	80058fa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058e8:	4b63      	ldr	r3, [pc, #396]	; (8005a78 <HAL_RCC_ClockConfig+0x1f0>)
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	4960      	ldr	r1, [pc, #384]	; (8005a78 <HAL_RCC_ClockConfig+0x1f0>)
 80058f6:	4313      	orrs	r3, r2
 80058f8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b00      	cmp	r3, #0
 8005904:	d04c      	beq.n	80059a0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	2b03      	cmp	r3, #3
 800590c:	d107      	bne.n	800591e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800590e:	4b5a      	ldr	r3, [pc, #360]	; (8005a78 <HAL_RCC_ClockConfig+0x1f0>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d121      	bne.n	800595e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e0a6      	b.n	8005a6c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	2b02      	cmp	r3, #2
 8005924:	d107      	bne.n	8005936 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005926:	4b54      	ldr	r3, [pc, #336]	; (8005a78 <HAL_RCC_ClockConfig+0x1f0>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d115      	bne.n	800595e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e09a      	b.n	8005a6c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d107      	bne.n	800594e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800593e:	4b4e      	ldr	r3, [pc, #312]	; (8005a78 <HAL_RCC_ClockConfig+0x1f0>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	2b00      	cmp	r3, #0
 8005948:	d109      	bne.n	800595e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e08e      	b.n	8005a6c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800594e:	4b4a      	ldr	r3, [pc, #296]	; (8005a78 <HAL_RCC_ClockConfig+0x1f0>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e086      	b.n	8005a6c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800595e:	4b46      	ldr	r3, [pc, #280]	; (8005a78 <HAL_RCC_ClockConfig+0x1f0>)
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f023 0203 	bic.w	r2, r3, #3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	4943      	ldr	r1, [pc, #268]	; (8005a78 <HAL_RCC_ClockConfig+0x1f0>)
 800596c:	4313      	orrs	r3, r2
 800596e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005970:	f7fb ff36 	bl	80017e0 <HAL_GetTick>
 8005974:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005976:	e00a      	b.n	800598e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005978:	f7fb ff32 	bl	80017e0 <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	f241 3288 	movw	r2, #5000	; 0x1388
 8005986:	4293      	cmp	r3, r2
 8005988:	d901      	bls.n	800598e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e06e      	b.n	8005a6c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800598e:	4b3a      	ldr	r3, [pc, #232]	; (8005a78 <HAL_RCC_ClockConfig+0x1f0>)
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f003 020c 	and.w	r2, r3, #12
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	429a      	cmp	r2, r3
 800599e:	d1eb      	bne.n	8005978 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0302 	and.w	r3, r3, #2
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d010      	beq.n	80059ce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	689a      	ldr	r2, [r3, #8]
 80059b0:	4b31      	ldr	r3, [pc, #196]	; (8005a78 <HAL_RCC_ClockConfig+0x1f0>)
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d208      	bcs.n	80059ce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059bc:	4b2e      	ldr	r3, [pc, #184]	; (8005a78 <HAL_RCC_ClockConfig+0x1f0>)
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	492b      	ldr	r1, [pc, #172]	; (8005a78 <HAL_RCC_ClockConfig+0x1f0>)
 80059ca:	4313      	orrs	r3, r2
 80059cc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059ce:	4b29      	ldr	r3, [pc, #164]	; (8005a74 <HAL_RCC_ClockConfig+0x1ec>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 0307 	and.w	r3, r3, #7
 80059d6:	683a      	ldr	r2, [r7, #0]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d210      	bcs.n	80059fe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059dc:	4b25      	ldr	r3, [pc, #148]	; (8005a74 <HAL_RCC_ClockConfig+0x1ec>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f023 0207 	bic.w	r2, r3, #7
 80059e4:	4923      	ldr	r1, [pc, #140]	; (8005a74 <HAL_RCC_ClockConfig+0x1ec>)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ec:	4b21      	ldr	r3, [pc, #132]	; (8005a74 <HAL_RCC_ClockConfig+0x1ec>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0307 	and.w	r3, r3, #7
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d001      	beq.n	80059fe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e036      	b.n	8005a6c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0304 	and.w	r3, r3, #4
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d008      	beq.n	8005a1c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a0a:	4b1b      	ldr	r3, [pc, #108]	; (8005a78 <HAL_RCC_ClockConfig+0x1f0>)
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	4918      	ldr	r1, [pc, #96]	; (8005a78 <HAL_RCC_ClockConfig+0x1f0>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0308 	and.w	r3, r3, #8
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d009      	beq.n	8005a3c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a28:	4b13      	ldr	r3, [pc, #76]	; (8005a78 <HAL_RCC_ClockConfig+0x1f0>)
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	00db      	lsls	r3, r3, #3
 8005a36:	4910      	ldr	r1, [pc, #64]	; (8005a78 <HAL_RCC_ClockConfig+0x1f0>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a3c:	f000 f824 	bl	8005a88 <HAL_RCC_GetSysClockFreq>
 8005a40:	4602      	mov	r2, r0
 8005a42:	4b0d      	ldr	r3, [pc, #52]	; (8005a78 <HAL_RCC_ClockConfig+0x1f0>)
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	091b      	lsrs	r3, r3, #4
 8005a48:	f003 030f 	and.w	r3, r3, #15
 8005a4c:	490b      	ldr	r1, [pc, #44]	; (8005a7c <HAL_RCC_ClockConfig+0x1f4>)
 8005a4e:	5ccb      	ldrb	r3, [r1, r3]
 8005a50:	f003 031f 	and.w	r3, r3, #31
 8005a54:	fa22 f303 	lsr.w	r3, r2, r3
 8005a58:	4a09      	ldr	r2, [pc, #36]	; (8005a80 <HAL_RCC_ClockConfig+0x1f8>)
 8005a5a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005a5c:	4b09      	ldr	r3, [pc, #36]	; (8005a84 <HAL_RCC_ClockConfig+0x1fc>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7fb fe6d 	bl	8001740 <HAL_InitTick>
 8005a66:	4603      	mov	r3, r0
 8005a68:	72fb      	strb	r3, [r7, #11]

  return status;
 8005a6a:	7afb      	ldrb	r3, [r7, #11]
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3710      	adds	r7, #16
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	40022000 	.word	0x40022000
 8005a78:	40021000 	.word	0x40021000
 8005a7c:	080077ac 	.word	0x080077ac
 8005a80:	20000000 	.word	0x20000000
 8005a84:	20000004 	.word	0x20000004

08005a88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b089      	sub	sp, #36	; 0x24
 8005a8c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	61fb      	str	r3, [r7, #28]
 8005a92:	2300      	movs	r3, #0
 8005a94:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a96:	4b3e      	ldr	r3, [pc, #248]	; (8005b90 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	f003 030c 	and.w	r3, r3, #12
 8005a9e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005aa0:	4b3b      	ldr	r3, [pc, #236]	; (8005b90 <HAL_RCC_GetSysClockFreq+0x108>)
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	f003 0303 	and.w	r3, r3, #3
 8005aa8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d005      	beq.n	8005abc <HAL_RCC_GetSysClockFreq+0x34>
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	2b0c      	cmp	r3, #12
 8005ab4:	d121      	bne.n	8005afa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d11e      	bne.n	8005afa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005abc:	4b34      	ldr	r3, [pc, #208]	; (8005b90 <HAL_RCC_GetSysClockFreq+0x108>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0308 	and.w	r3, r3, #8
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d107      	bne.n	8005ad8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005ac8:	4b31      	ldr	r3, [pc, #196]	; (8005b90 <HAL_RCC_GetSysClockFreq+0x108>)
 8005aca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ace:	0a1b      	lsrs	r3, r3, #8
 8005ad0:	f003 030f 	and.w	r3, r3, #15
 8005ad4:	61fb      	str	r3, [r7, #28]
 8005ad6:	e005      	b.n	8005ae4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ad8:	4b2d      	ldr	r3, [pc, #180]	; (8005b90 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	091b      	lsrs	r3, r3, #4
 8005ade:	f003 030f 	and.w	r3, r3, #15
 8005ae2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005ae4:	4a2b      	ldr	r2, [pc, #172]	; (8005b94 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d10d      	bne.n	8005b10 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005af8:	e00a      	b.n	8005b10 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	2b04      	cmp	r3, #4
 8005afe:	d102      	bne.n	8005b06 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005b00:	4b25      	ldr	r3, [pc, #148]	; (8005b98 <HAL_RCC_GetSysClockFreq+0x110>)
 8005b02:	61bb      	str	r3, [r7, #24]
 8005b04:	e004      	b.n	8005b10 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	2b08      	cmp	r3, #8
 8005b0a:	d101      	bne.n	8005b10 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005b0c:	4b22      	ldr	r3, [pc, #136]	; (8005b98 <HAL_RCC_GetSysClockFreq+0x110>)
 8005b0e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	2b0c      	cmp	r3, #12
 8005b14:	d134      	bne.n	8005b80 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b16:	4b1e      	ldr	r3, [pc, #120]	; (8005b90 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	f003 0303 	and.w	r3, r3, #3
 8005b1e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d003      	beq.n	8005b2e <HAL_RCC_GetSysClockFreq+0xa6>
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	2b03      	cmp	r3, #3
 8005b2a:	d003      	beq.n	8005b34 <HAL_RCC_GetSysClockFreq+0xac>
 8005b2c:	e005      	b.n	8005b3a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005b2e:	4b1a      	ldr	r3, [pc, #104]	; (8005b98 <HAL_RCC_GetSysClockFreq+0x110>)
 8005b30:	617b      	str	r3, [r7, #20]
      break;
 8005b32:	e005      	b.n	8005b40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005b34:	4b18      	ldr	r3, [pc, #96]	; (8005b98 <HAL_RCC_GetSysClockFreq+0x110>)
 8005b36:	617b      	str	r3, [r7, #20]
      break;
 8005b38:	e002      	b.n	8005b40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	617b      	str	r3, [r7, #20]
      break;
 8005b3e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b40:	4b13      	ldr	r3, [pc, #76]	; (8005b90 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	091b      	lsrs	r3, r3, #4
 8005b46:	f003 0307 	and.w	r3, r3, #7
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005b4e:	4b10      	ldr	r3, [pc, #64]	; (8005b90 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	0a1b      	lsrs	r3, r3, #8
 8005b54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b58:	697a      	ldr	r2, [r7, #20]
 8005b5a:	fb03 f202 	mul.w	r2, r3, r2
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b64:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b66:	4b0a      	ldr	r3, [pc, #40]	; (8005b90 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	0e5b      	lsrs	r3, r3, #25
 8005b6c:	f003 0303 	and.w	r3, r3, #3
 8005b70:	3301      	adds	r3, #1
 8005b72:	005b      	lsls	r3, r3, #1
 8005b74:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b7e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005b80:	69bb      	ldr	r3, [r7, #24]
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3724      	adds	r7, #36	; 0x24
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	40021000 	.word	0x40021000
 8005b94:	080077bc 	.word	0x080077bc
 8005b98:	00f42400 	.word	0x00f42400

08005b9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005ba8:	4b2a      	ldr	r3, [pc, #168]	; (8005c54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d003      	beq.n	8005bbc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005bb4:	f7ff fa28 	bl	8005008 <HAL_PWREx_GetVoltageRange>
 8005bb8:	6178      	str	r0, [r7, #20]
 8005bba:	e014      	b.n	8005be6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005bbc:	4b25      	ldr	r3, [pc, #148]	; (8005c54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bc0:	4a24      	ldr	r2, [pc, #144]	; (8005c54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bc6:	6593      	str	r3, [r2, #88]	; 0x58
 8005bc8:	4b22      	ldr	r3, [pc, #136]	; (8005c54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bd0:	60fb      	str	r3, [r7, #12]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005bd4:	f7ff fa18 	bl	8005008 <HAL_PWREx_GetVoltageRange>
 8005bd8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005bda:	4b1e      	ldr	r3, [pc, #120]	; (8005c54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bde:	4a1d      	ldr	r2, [pc, #116]	; (8005c54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005be4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bec:	d10b      	bne.n	8005c06 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2b80      	cmp	r3, #128	; 0x80
 8005bf2:	d919      	bls.n	8005c28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2ba0      	cmp	r3, #160	; 0xa0
 8005bf8:	d902      	bls.n	8005c00 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005bfa:	2302      	movs	r3, #2
 8005bfc:	613b      	str	r3, [r7, #16]
 8005bfe:	e013      	b.n	8005c28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c00:	2301      	movs	r3, #1
 8005c02:	613b      	str	r3, [r7, #16]
 8005c04:	e010      	b.n	8005c28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2b80      	cmp	r3, #128	; 0x80
 8005c0a:	d902      	bls.n	8005c12 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	613b      	str	r3, [r7, #16]
 8005c10:	e00a      	b.n	8005c28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2b80      	cmp	r3, #128	; 0x80
 8005c16:	d102      	bne.n	8005c1e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005c18:	2302      	movs	r3, #2
 8005c1a:	613b      	str	r3, [r7, #16]
 8005c1c:	e004      	b.n	8005c28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b70      	cmp	r3, #112	; 0x70
 8005c22:	d101      	bne.n	8005c28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c24:	2301      	movs	r3, #1
 8005c26:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005c28:	4b0b      	ldr	r3, [pc, #44]	; (8005c58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f023 0207 	bic.w	r2, r3, #7
 8005c30:	4909      	ldr	r1, [pc, #36]	; (8005c58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005c38:	4b07      	ldr	r3, [pc, #28]	; (8005c58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0307 	and.w	r3, r3, #7
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d001      	beq.n	8005c4a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e000      	b.n	8005c4c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3718      	adds	r7, #24
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	40021000 	.word	0x40021000
 8005c58:	40022000 	.word	0x40022000

08005c5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b086      	sub	sp, #24
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c64:	2300      	movs	r3, #0
 8005c66:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c68:	2300      	movs	r3, #0
 8005c6a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d041      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c7c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005c80:	d02a      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005c82:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005c86:	d824      	bhi.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005c88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c8c:	d008      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005c8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c92:	d81e      	bhi.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d00a      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005c98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c9c:	d010      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005c9e:	e018      	b.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005ca0:	4b86      	ldr	r3, [pc, #536]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	4a85      	ldr	r2, [pc, #532]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ca6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005caa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005cac:	e015      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	3304      	adds	r3, #4
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f000 fabb 	bl	8006230 <RCCEx_PLLSAI1_Config>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005cbe:	e00c      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	3320      	adds	r3, #32
 8005cc4:	2100      	movs	r1, #0
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f000 fba6 	bl	8006418 <RCCEx_PLLSAI2_Config>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005cd0:	e003      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	74fb      	strb	r3, [r7, #19]
      break;
 8005cd6:	e000      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005cd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cda:	7cfb      	ldrb	r3, [r7, #19]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d10b      	bne.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ce0:	4b76      	ldr	r3, [pc, #472]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ce6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cee:	4973      	ldr	r1, [pc, #460]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005cf6:	e001      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cf8:	7cfb      	ldrb	r3, [r7, #19]
 8005cfa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d041      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d0c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005d10:	d02a      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005d12:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005d16:	d824      	bhi.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005d18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d1c:	d008      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005d1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d22:	d81e      	bhi.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00a      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005d28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d2c:	d010      	beq.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005d2e:	e018      	b.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005d30:	4b62      	ldr	r3, [pc, #392]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	4a61      	ldr	r2, [pc, #388]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d3a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d3c:	e015      	b.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	3304      	adds	r3, #4
 8005d42:	2100      	movs	r1, #0
 8005d44:	4618      	mov	r0, r3
 8005d46:	f000 fa73 	bl	8006230 <RCCEx_PLLSAI1_Config>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d4e:	e00c      	b.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	3320      	adds	r3, #32
 8005d54:	2100      	movs	r1, #0
 8005d56:	4618      	mov	r0, r3
 8005d58:	f000 fb5e 	bl	8006418 <RCCEx_PLLSAI2_Config>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d60:	e003      	b.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	74fb      	strb	r3, [r7, #19]
      break;
 8005d66:	e000      	b.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005d68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d6a:	7cfb      	ldrb	r3, [r7, #19]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d10b      	bne.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005d70:	4b52      	ldr	r3, [pc, #328]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d76:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d7e:	494f      	ldr	r1, [pc, #316]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d80:	4313      	orrs	r3, r2
 8005d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005d86:	e001      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d88:	7cfb      	ldrb	r3, [r7, #19]
 8005d8a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f000 80a0 	beq.w	8005eda <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005d9e:	4b47      	ldr	r3, [pc, #284]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d101      	bne.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005daa:	2301      	movs	r3, #1
 8005dac:	e000      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005dae:	2300      	movs	r3, #0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d00d      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005db4:	4b41      	ldr	r3, [pc, #260]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005db8:	4a40      	ldr	r2, [pc, #256]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005dba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dbe:	6593      	str	r3, [r2, #88]	; 0x58
 8005dc0:	4b3e      	ldr	r3, [pc, #248]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dc8:	60bb      	str	r3, [r7, #8]
 8005dca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005dd0:	4b3b      	ldr	r3, [pc, #236]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a3a      	ldr	r2, [pc, #232]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dda:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ddc:	f7fb fd00 	bl	80017e0 <HAL_GetTick>
 8005de0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005de2:	e009      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005de4:	f7fb fcfc 	bl	80017e0 <HAL_GetTick>
 8005de8:	4602      	mov	r2, r0
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d902      	bls.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	74fb      	strb	r3, [r7, #19]
        break;
 8005df6:	e005      	b.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005df8:	4b31      	ldr	r3, [pc, #196]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d0ef      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005e04:	7cfb      	ldrb	r3, [r7, #19]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d15c      	bne.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005e0a:	4b2c      	ldr	r3, [pc, #176]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e14:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d01f      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e22:	697a      	ldr	r2, [r7, #20]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d019      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e28:	4b24      	ldr	r3, [pc, #144]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e32:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e34:	4b21      	ldr	r3, [pc, #132]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e3a:	4a20      	ldr	r2, [pc, #128]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e44:	4b1d      	ldr	r3, [pc, #116]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e4a:	4a1c      	ldr	r2, [pc, #112]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005e54:	4a19      	ldr	r2, [pc, #100]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	f003 0301 	and.w	r3, r3, #1
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d016      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e66:	f7fb fcbb 	bl	80017e0 <HAL_GetTick>
 8005e6a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e6c:	e00b      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e6e:	f7fb fcb7 	bl	80017e0 <HAL_GetTick>
 8005e72:	4602      	mov	r2, r0
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d902      	bls.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	74fb      	strb	r3, [r7, #19]
            break;
 8005e84:	e006      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e86:	4b0d      	ldr	r3, [pc, #52]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e8c:	f003 0302 	and.w	r3, r3, #2
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d0ec      	beq.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005e94:	7cfb      	ldrb	r3, [r7, #19]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d10c      	bne.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e9a:	4b08      	ldr	r3, [pc, #32]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ea0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005eaa:	4904      	ldr	r1, [pc, #16]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005eac:	4313      	orrs	r3, r2
 8005eae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005eb2:	e009      	b.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005eb4:	7cfb      	ldrb	r3, [r7, #19]
 8005eb6:	74bb      	strb	r3, [r7, #18]
 8005eb8:	e006      	b.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005eba:	bf00      	nop
 8005ebc:	40021000 	.word	0x40021000
 8005ec0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ec4:	7cfb      	ldrb	r3, [r7, #19]
 8005ec6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ec8:	7c7b      	ldrb	r3, [r7, #17]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d105      	bne.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ece:	4b9e      	ldr	r3, [pc, #632]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ed2:	4a9d      	ldr	r2, [pc, #628]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ed4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ed8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00a      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ee6:	4b98      	ldr	r3, [pc, #608]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eec:	f023 0203 	bic.w	r2, r3, #3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef4:	4994      	ldr	r1, [pc, #592]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0302 	and.w	r3, r3, #2
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d00a      	beq.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f08:	4b8f      	ldr	r3, [pc, #572]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f0e:	f023 020c 	bic.w	r2, r3, #12
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f16:	498c      	ldr	r1, [pc, #560]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 0304 	and.w	r3, r3, #4
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00a      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f2a:	4b87      	ldr	r3, [pc, #540]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f38:	4983      	ldr	r1, [pc, #524]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0308 	and.w	r3, r3, #8
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00a      	beq.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f4c:	4b7e      	ldr	r3, [pc, #504]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f5a:	497b      	ldr	r1, [pc, #492]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0310 	and.w	r3, r3, #16
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00a      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005f6e:	4b76      	ldr	r3, [pc, #472]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f7c:	4972      	ldr	r1, [pc, #456]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 0320 	and.w	r3, r3, #32
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00a      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f90:	4b6d      	ldr	r3, [pc, #436]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f96:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f9e:	496a      	ldr	r1, [pc, #424]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00a      	beq.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005fb2:	4b65      	ldr	r3, [pc, #404]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fb8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fc0:	4961      	ldr	r1, [pc, #388]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00a      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005fd4:	4b5c      	ldr	r3, [pc, #368]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fe2:	4959      	ldr	r1, [pc, #356]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00a      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ff6:	4b54      	ldr	r3, [pc, #336]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ffc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006004:	4950      	ldr	r1, [pc, #320]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006006:	4313      	orrs	r3, r2
 8006008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006014:	2b00      	cmp	r3, #0
 8006016:	d00a      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006018:	4b4b      	ldr	r3, [pc, #300]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800601a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800601e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006026:	4948      	ldr	r1, [pc, #288]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006028:	4313      	orrs	r3, r2
 800602a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00a      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800603a:	4b43      	ldr	r3, [pc, #268]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800603c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006040:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006048:	493f      	ldr	r1, [pc, #252]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800604a:	4313      	orrs	r3, r2
 800604c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006058:	2b00      	cmp	r3, #0
 800605a:	d028      	beq.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800605c:	4b3a      	ldr	r3, [pc, #232]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800605e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006062:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800606a:	4937      	ldr	r1, [pc, #220]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800606c:	4313      	orrs	r3, r2
 800606e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006076:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800607a:	d106      	bne.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800607c:	4b32      	ldr	r3, [pc, #200]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	4a31      	ldr	r2, [pc, #196]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006082:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006086:	60d3      	str	r3, [r2, #12]
 8006088:	e011      	b.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800608e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006092:	d10c      	bne.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	3304      	adds	r3, #4
 8006098:	2101      	movs	r1, #1
 800609a:	4618      	mov	r0, r3
 800609c:	f000 f8c8 	bl	8006230 <RCCEx_PLLSAI1_Config>
 80060a0:	4603      	mov	r3, r0
 80060a2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80060a4:	7cfb      	ldrb	r3, [r7, #19]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d001      	beq.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80060aa:	7cfb      	ldrb	r3, [r7, #19]
 80060ac:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d028      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80060ba:	4b23      	ldr	r3, [pc, #140]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c8:	491f      	ldr	r1, [pc, #124]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060ca:	4313      	orrs	r3, r2
 80060cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060d8:	d106      	bne.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060da:	4b1b      	ldr	r3, [pc, #108]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	4a1a      	ldr	r2, [pc, #104]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060e4:	60d3      	str	r3, [r2, #12]
 80060e6:	e011      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80060f0:	d10c      	bne.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	3304      	adds	r3, #4
 80060f6:	2101      	movs	r1, #1
 80060f8:	4618      	mov	r0, r3
 80060fa:	f000 f899 	bl	8006230 <RCCEx_PLLSAI1_Config>
 80060fe:	4603      	mov	r3, r0
 8006100:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006102:	7cfb      	ldrb	r3, [r7, #19]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d001      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006108:	7cfb      	ldrb	r3, [r7, #19]
 800610a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d02b      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006118:	4b0b      	ldr	r3, [pc, #44]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800611a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800611e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006126:	4908      	ldr	r1, [pc, #32]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006128:	4313      	orrs	r3, r2
 800612a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006132:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006136:	d109      	bne.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006138:	4b03      	ldr	r3, [pc, #12]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	4a02      	ldr	r2, [pc, #8]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800613e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006142:	60d3      	str	r3, [r2, #12]
 8006144:	e014      	b.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006146:	bf00      	nop
 8006148:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006150:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006154:	d10c      	bne.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	3304      	adds	r3, #4
 800615a:	2101      	movs	r1, #1
 800615c:	4618      	mov	r0, r3
 800615e:	f000 f867 	bl	8006230 <RCCEx_PLLSAI1_Config>
 8006162:	4603      	mov	r3, r0
 8006164:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006166:	7cfb      	ldrb	r3, [r7, #19]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d001      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800616c:	7cfb      	ldrb	r3, [r7, #19]
 800616e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006178:	2b00      	cmp	r3, #0
 800617a:	d02f      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800617c:	4b2b      	ldr	r3, [pc, #172]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800617e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006182:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800618a:	4928      	ldr	r1, [pc, #160]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800618c:	4313      	orrs	r3, r2
 800618e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006196:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800619a:	d10d      	bne.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	3304      	adds	r3, #4
 80061a0:	2102      	movs	r1, #2
 80061a2:	4618      	mov	r0, r3
 80061a4:	f000 f844 	bl	8006230 <RCCEx_PLLSAI1_Config>
 80061a8:	4603      	mov	r3, r0
 80061aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80061ac:	7cfb      	ldrb	r3, [r7, #19]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d014      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80061b2:	7cfb      	ldrb	r3, [r7, #19]
 80061b4:	74bb      	strb	r3, [r7, #18]
 80061b6:	e011      	b.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061c0:	d10c      	bne.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	3320      	adds	r3, #32
 80061c6:	2102      	movs	r1, #2
 80061c8:	4618      	mov	r0, r3
 80061ca:	f000 f925 	bl	8006418 <RCCEx_PLLSAI2_Config>
 80061ce:	4603      	mov	r3, r0
 80061d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80061d2:	7cfb      	ldrb	r3, [r7, #19]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d001      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80061d8:	7cfb      	ldrb	r3, [r7, #19]
 80061da:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d00a      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80061e8:	4b10      	ldr	r3, [pc, #64]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80061ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ee:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061f6:	490d      	ldr	r1, [pc, #52]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80061f8:	4313      	orrs	r3, r2
 80061fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00b      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800620a:	4b08      	ldr	r3, [pc, #32]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800620c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006210:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800621a:	4904      	ldr	r1, [pc, #16]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800621c:	4313      	orrs	r3, r2
 800621e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006222:	7cbb      	ldrb	r3, [r7, #18]
}
 8006224:	4618      	mov	r0, r3
 8006226:	3718      	adds	r7, #24
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}
 800622c:	40021000 	.word	0x40021000

08006230 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800623a:	2300      	movs	r3, #0
 800623c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800623e:	4b75      	ldr	r3, [pc, #468]	; (8006414 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	f003 0303 	and.w	r3, r3, #3
 8006246:	2b00      	cmp	r3, #0
 8006248:	d018      	beq.n	800627c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800624a:	4b72      	ldr	r3, [pc, #456]	; (8006414 <RCCEx_PLLSAI1_Config+0x1e4>)
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	f003 0203 	and.w	r2, r3, #3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	429a      	cmp	r2, r3
 8006258:	d10d      	bne.n	8006276 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
       ||
 800625e:	2b00      	cmp	r3, #0
 8006260:	d009      	beq.n	8006276 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006262:	4b6c      	ldr	r3, [pc, #432]	; (8006414 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	091b      	lsrs	r3, r3, #4
 8006268:	f003 0307 	and.w	r3, r3, #7
 800626c:	1c5a      	adds	r2, r3, #1
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	685b      	ldr	r3, [r3, #4]
       ||
 8006272:	429a      	cmp	r2, r3
 8006274:	d047      	beq.n	8006306 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	73fb      	strb	r3, [r7, #15]
 800627a:	e044      	b.n	8006306 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2b03      	cmp	r3, #3
 8006282:	d018      	beq.n	80062b6 <RCCEx_PLLSAI1_Config+0x86>
 8006284:	2b03      	cmp	r3, #3
 8006286:	d825      	bhi.n	80062d4 <RCCEx_PLLSAI1_Config+0xa4>
 8006288:	2b01      	cmp	r3, #1
 800628a:	d002      	beq.n	8006292 <RCCEx_PLLSAI1_Config+0x62>
 800628c:	2b02      	cmp	r3, #2
 800628e:	d009      	beq.n	80062a4 <RCCEx_PLLSAI1_Config+0x74>
 8006290:	e020      	b.n	80062d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006292:	4b60      	ldr	r3, [pc, #384]	; (8006414 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 0302 	and.w	r3, r3, #2
 800629a:	2b00      	cmp	r3, #0
 800629c:	d11d      	bne.n	80062da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062a2:	e01a      	b.n	80062da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80062a4:	4b5b      	ldr	r3, [pc, #364]	; (8006414 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d116      	bne.n	80062de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062b4:	e013      	b.n	80062de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80062b6:	4b57      	ldr	r3, [pc, #348]	; (8006414 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10f      	bne.n	80062e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80062c2:	4b54      	ldr	r3, [pc, #336]	; (8006414 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d109      	bne.n	80062e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80062d2:	e006      	b.n	80062e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	73fb      	strb	r3, [r7, #15]
      break;
 80062d8:	e004      	b.n	80062e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80062da:	bf00      	nop
 80062dc:	e002      	b.n	80062e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80062de:	bf00      	nop
 80062e0:	e000      	b.n	80062e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80062e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80062e4:	7bfb      	ldrb	r3, [r7, #15]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10d      	bne.n	8006306 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80062ea:	4b4a      	ldr	r3, [pc, #296]	; (8006414 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6819      	ldr	r1, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	3b01      	subs	r3, #1
 80062fc:	011b      	lsls	r3, r3, #4
 80062fe:	430b      	orrs	r3, r1
 8006300:	4944      	ldr	r1, [pc, #272]	; (8006414 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006302:	4313      	orrs	r3, r2
 8006304:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006306:	7bfb      	ldrb	r3, [r7, #15]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d17d      	bne.n	8006408 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800630c:	4b41      	ldr	r3, [pc, #260]	; (8006414 <RCCEx_PLLSAI1_Config+0x1e4>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a40      	ldr	r2, [pc, #256]	; (8006414 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006312:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006316:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006318:	f7fb fa62 	bl	80017e0 <HAL_GetTick>
 800631c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800631e:	e009      	b.n	8006334 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006320:	f7fb fa5e 	bl	80017e0 <HAL_GetTick>
 8006324:	4602      	mov	r2, r0
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	2b02      	cmp	r3, #2
 800632c:	d902      	bls.n	8006334 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	73fb      	strb	r3, [r7, #15]
        break;
 8006332:	e005      	b.n	8006340 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006334:	4b37      	ldr	r3, [pc, #220]	; (8006414 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1ef      	bne.n	8006320 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006340:	7bfb      	ldrb	r3, [r7, #15]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d160      	bne.n	8006408 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d111      	bne.n	8006370 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800634c:	4b31      	ldr	r3, [pc, #196]	; (8006414 <RCCEx_PLLSAI1_Config+0x1e4>)
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	6892      	ldr	r2, [r2, #8]
 800635c:	0211      	lsls	r1, r2, #8
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	68d2      	ldr	r2, [r2, #12]
 8006362:	0912      	lsrs	r2, r2, #4
 8006364:	0452      	lsls	r2, r2, #17
 8006366:	430a      	orrs	r2, r1
 8006368:	492a      	ldr	r1, [pc, #168]	; (8006414 <RCCEx_PLLSAI1_Config+0x1e4>)
 800636a:	4313      	orrs	r3, r2
 800636c:	610b      	str	r3, [r1, #16]
 800636e:	e027      	b.n	80063c0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	2b01      	cmp	r3, #1
 8006374:	d112      	bne.n	800639c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006376:	4b27      	ldr	r3, [pc, #156]	; (8006414 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800637e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	6892      	ldr	r2, [r2, #8]
 8006386:	0211      	lsls	r1, r2, #8
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	6912      	ldr	r2, [r2, #16]
 800638c:	0852      	lsrs	r2, r2, #1
 800638e:	3a01      	subs	r2, #1
 8006390:	0552      	lsls	r2, r2, #21
 8006392:	430a      	orrs	r2, r1
 8006394:	491f      	ldr	r1, [pc, #124]	; (8006414 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006396:	4313      	orrs	r3, r2
 8006398:	610b      	str	r3, [r1, #16]
 800639a:	e011      	b.n	80063c0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800639c:	4b1d      	ldr	r3, [pc, #116]	; (8006414 <RCCEx_PLLSAI1_Config+0x1e4>)
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80063a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	6892      	ldr	r2, [r2, #8]
 80063ac:	0211      	lsls	r1, r2, #8
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	6952      	ldr	r2, [r2, #20]
 80063b2:	0852      	lsrs	r2, r2, #1
 80063b4:	3a01      	subs	r2, #1
 80063b6:	0652      	lsls	r2, r2, #25
 80063b8:	430a      	orrs	r2, r1
 80063ba:	4916      	ldr	r1, [pc, #88]	; (8006414 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063bc:	4313      	orrs	r3, r2
 80063be:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80063c0:	4b14      	ldr	r3, [pc, #80]	; (8006414 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a13      	ldr	r2, [pc, #76]	; (8006414 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80063ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063cc:	f7fb fa08 	bl	80017e0 <HAL_GetTick>
 80063d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80063d2:	e009      	b.n	80063e8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80063d4:	f7fb fa04 	bl	80017e0 <HAL_GetTick>
 80063d8:	4602      	mov	r2, r0
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d902      	bls.n	80063e8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	73fb      	strb	r3, [r7, #15]
          break;
 80063e6:	e005      	b.n	80063f4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80063e8:	4b0a      	ldr	r3, [pc, #40]	; (8006414 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d0ef      	beq.n	80063d4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80063f4:	7bfb      	ldrb	r3, [r7, #15]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d106      	bne.n	8006408 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80063fa:	4b06      	ldr	r3, [pc, #24]	; (8006414 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063fc:	691a      	ldr	r2, [r3, #16]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	4904      	ldr	r1, [pc, #16]	; (8006414 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006404:	4313      	orrs	r3, r2
 8006406:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006408:	7bfb      	ldrb	r3, [r7, #15]
}
 800640a:	4618      	mov	r0, r3
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	40021000 	.word	0x40021000

08006418 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006422:	2300      	movs	r3, #0
 8006424:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006426:	4b6a      	ldr	r3, [pc, #424]	; (80065d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	f003 0303 	and.w	r3, r3, #3
 800642e:	2b00      	cmp	r3, #0
 8006430:	d018      	beq.n	8006464 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006432:	4b67      	ldr	r3, [pc, #412]	; (80065d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	f003 0203 	and.w	r2, r3, #3
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	429a      	cmp	r2, r3
 8006440:	d10d      	bne.n	800645e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
       ||
 8006446:	2b00      	cmp	r3, #0
 8006448:	d009      	beq.n	800645e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800644a:	4b61      	ldr	r3, [pc, #388]	; (80065d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	091b      	lsrs	r3, r3, #4
 8006450:	f003 0307 	and.w	r3, r3, #7
 8006454:	1c5a      	adds	r2, r3, #1
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	685b      	ldr	r3, [r3, #4]
       ||
 800645a:	429a      	cmp	r2, r3
 800645c:	d047      	beq.n	80064ee <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	73fb      	strb	r3, [r7, #15]
 8006462:	e044      	b.n	80064ee <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2b03      	cmp	r3, #3
 800646a:	d018      	beq.n	800649e <RCCEx_PLLSAI2_Config+0x86>
 800646c:	2b03      	cmp	r3, #3
 800646e:	d825      	bhi.n	80064bc <RCCEx_PLLSAI2_Config+0xa4>
 8006470:	2b01      	cmp	r3, #1
 8006472:	d002      	beq.n	800647a <RCCEx_PLLSAI2_Config+0x62>
 8006474:	2b02      	cmp	r3, #2
 8006476:	d009      	beq.n	800648c <RCCEx_PLLSAI2_Config+0x74>
 8006478:	e020      	b.n	80064bc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800647a:	4b55      	ldr	r3, [pc, #340]	; (80065d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 0302 	and.w	r3, r3, #2
 8006482:	2b00      	cmp	r3, #0
 8006484:	d11d      	bne.n	80064c2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800648a:	e01a      	b.n	80064c2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800648c:	4b50      	ldr	r3, [pc, #320]	; (80065d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006494:	2b00      	cmp	r3, #0
 8006496:	d116      	bne.n	80064c6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800649c:	e013      	b.n	80064c6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800649e:	4b4c      	ldr	r3, [pc, #304]	; (80065d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d10f      	bne.n	80064ca <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80064aa:	4b49      	ldr	r3, [pc, #292]	; (80065d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d109      	bne.n	80064ca <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80064ba:	e006      	b.n	80064ca <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	73fb      	strb	r3, [r7, #15]
      break;
 80064c0:	e004      	b.n	80064cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80064c2:	bf00      	nop
 80064c4:	e002      	b.n	80064cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80064c6:	bf00      	nop
 80064c8:	e000      	b.n	80064cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80064ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80064cc:	7bfb      	ldrb	r3, [r7, #15]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10d      	bne.n	80064ee <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80064d2:	4b3f      	ldr	r3, [pc, #252]	; (80065d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6819      	ldr	r1, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	3b01      	subs	r3, #1
 80064e4:	011b      	lsls	r3, r3, #4
 80064e6:	430b      	orrs	r3, r1
 80064e8:	4939      	ldr	r1, [pc, #228]	; (80065d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80064ea:	4313      	orrs	r3, r2
 80064ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80064ee:	7bfb      	ldrb	r3, [r7, #15]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d167      	bne.n	80065c4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80064f4:	4b36      	ldr	r3, [pc, #216]	; (80065d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a35      	ldr	r2, [pc, #212]	; (80065d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80064fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006500:	f7fb f96e 	bl	80017e0 <HAL_GetTick>
 8006504:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006506:	e009      	b.n	800651c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006508:	f7fb f96a 	bl	80017e0 <HAL_GetTick>
 800650c:	4602      	mov	r2, r0
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	2b02      	cmp	r3, #2
 8006514:	d902      	bls.n	800651c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	73fb      	strb	r3, [r7, #15]
        break;
 800651a:	e005      	b.n	8006528 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800651c:	4b2c      	ldr	r3, [pc, #176]	; (80065d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006524:	2b00      	cmp	r3, #0
 8006526:	d1ef      	bne.n	8006508 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006528:	7bfb      	ldrb	r3, [r7, #15]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d14a      	bne.n	80065c4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d111      	bne.n	8006558 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006534:	4b26      	ldr	r3, [pc, #152]	; (80065d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006536:	695b      	ldr	r3, [r3, #20]
 8006538:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800653c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	6892      	ldr	r2, [r2, #8]
 8006544:	0211      	lsls	r1, r2, #8
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	68d2      	ldr	r2, [r2, #12]
 800654a:	0912      	lsrs	r2, r2, #4
 800654c:	0452      	lsls	r2, r2, #17
 800654e:	430a      	orrs	r2, r1
 8006550:	491f      	ldr	r1, [pc, #124]	; (80065d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006552:	4313      	orrs	r3, r2
 8006554:	614b      	str	r3, [r1, #20]
 8006556:	e011      	b.n	800657c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006558:	4b1d      	ldr	r3, [pc, #116]	; (80065d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800655a:	695b      	ldr	r3, [r3, #20]
 800655c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006560:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	6892      	ldr	r2, [r2, #8]
 8006568:	0211      	lsls	r1, r2, #8
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	6912      	ldr	r2, [r2, #16]
 800656e:	0852      	lsrs	r2, r2, #1
 8006570:	3a01      	subs	r2, #1
 8006572:	0652      	lsls	r2, r2, #25
 8006574:	430a      	orrs	r2, r1
 8006576:	4916      	ldr	r1, [pc, #88]	; (80065d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006578:	4313      	orrs	r3, r2
 800657a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800657c:	4b14      	ldr	r3, [pc, #80]	; (80065d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a13      	ldr	r2, [pc, #76]	; (80065d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006586:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006588:	f7fb f92a 	bl	80017e0 <HAL_GetTick>
 800658c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800658e:	e009      	b.n	80065a4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006590:	f7fb f926 	bl	80017e0 <HAL_GetTick>
 8006594:	4602      	mov	r2, r0
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	2b02      	cmp	r3, #2
 800659c:	d902      	bls.n	80065a4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	73fb      	strb	r3, [r7, #15]
          break;
 80065a2:	e005      	b.n	80065b0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80065a4:	4b0a      	ldr	r3, [pc, #40]	; (80065d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d0ef      	beq.n	8006590 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80065b0:	7bfb      	ldrb	r3, [r7, #15]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d106      	bne.n	80065c4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80065b6:	4b06      	ldr	r3, [pc, #24]	; (80065d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065b8:	695a      	ldr	r2, [r3, #20]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	695b      	ldr	r3, [r3, #20]
 80065be:	4904      	ldr	r1, [pc, #16]	; (80065d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065c0:	4313      	orrs	r3, r2
 80065c2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80065c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	40021000 	.word	0x40021000

080065d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d101      	bne.n	80065e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e049      	b.n	800667a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d106      	bne.n	8006600 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7fa ffdc 	bl	80015b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2202      	movs	r2, #2
 8006604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	3304      	adds	r3, #4
 8006610:	4619      	mov	r1, r3
 8006612:	4610      	mov	r0, r2
 8006614:	f000 fcda 	bl	8006fcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	3708      	adds	r7, #8
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}

08006682 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006682:	b580      	push	{r7, lr}
 8006684:	b082      	sub	sp, #8
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d101      	bne.n	8006694 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	e049      	b.n	8006728 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800669a:	b2db      	uxtb	r3, r3
 800669c:	2b00      	cmp	r3, #0
 800669e:	d106      	bne.n	80066ae <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 f841 	bl	8006730 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2202      	movs	r2, #2
 80066b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	3304      	adds	r3, #4
 80066be:	4619      	mov	r1, r3
 80066c0:	4610      	mov	r0, r2
 80066c2:	f000 fc83 	bl	8006fcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2201      	movs	r2, #1
 80066e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2201      	movs	r2, #1
 80066ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2201      	movs	r2, #1
 80066f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2201      	movs	r2, #1
 8006702:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2201      	movs	r2, #1
 800670a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2201      	movs	r2, #1
 8006712:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2201      	movs	r2, #1
 800671a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3708      	adds	r7, #8
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006738:	bf00      	nop
 800673a:	370c      	adds	r7, #12
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800674e:	2300      	movs	r3, #0
 8006750:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d104      	bne.n	8006762 <HAL_TIM_IC_Start_IT+0x1e>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800675e:	b2db      	uxtb	r3, r3
 8006760:	e023      	b.n	80067aa <HAL_TIM_IC_Start_IT+0x66>
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	2b04      	cmp	r3, #4
 8006766:	d104      	bne.n	8006772 <HAL_TIM_IC_Start_IT+0x2e>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800676e:	b2db      	uxtb	r3, r3
 8006770:	e01b      	b.n	80067aa <HAL_TIM_IC_Start_IT+0x66>
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	2b08      	cmp	r3, #8
 8006776:	d104      	bne.n	8006782 <HAL_TIM_IC_Start_IT+0x3e>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800677e:	b2db      	uxtb	r3, r3
 8006780:	e013      	b.n	80067aa <HAL_TIM_IC_Start_IT+0x66>
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	2b0c      	cmp	r3, #12
 8006786:	d104      	bne.n	8006792 <HAL_TIM_IC_Start_IT+0x4e>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800678e:	b2db      	uxtb	r3, r3
 8006790:	e00b      	b.n	80067aa <HAL_TIM_IC_Start_IT+0x66>
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	2b10      	cmp	r3, #16
 8006796:	d104      	bne.n	80067a2 <HAL_TIM_IC_Start_IT+0x5e>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	e003      	b.n	80067aa <HAL_TIM_IC_Start_IT+0x66>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d104      	bne.n	80067bc <HAL_TIM_IC_Start_IT+0x78>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	e013      	b.n	80067e4 <HAL_TIM_IC_Start_IT+0xa0>
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	2b04      	cmp	r3, #4
 80067c0:	d104      	bne.n	80067cc <HAL_TIM_IC_Start_IT+0x88>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	e00b      	b.n	80067e4 <HAL_TIM_IC_Start_IT+0xa0>
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	2b08      	cmp	r3, #8
 80067d0:	d104      	bne.n	80067dc <HAL_TIM_IC_Start_IT+0x98>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	e003      	b.n	80067e4 <HAL_TIM_IC_Start_IT+0xa0>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80067e6:	7bbb      	ldrb	r3, [r7, #14]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d102      	bne.n	80067f2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80067ec:	7b7b      	ldrb	r3, [r7, #13]
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d001      	beq.n	80067f6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e0dd      	b.n	80069b2 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d104      	bne.n	8006806 <HAL_TIM_IC_Start_IT+0xc2>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2202      	movs	r2, #2
 8006800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006804:	e023      	b.n	800684e <HAL_TIM_IC_Start_IT+0x10a>
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	2b04      	cmp	r3, #4
 800680a:	d104      	bne.n	8006816 <HAL_TIM_IC_Start_IT+0xd2>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2202      	movs	r2, #2
 8006810:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006814:	e01b      	b.n	800684e <HAL_TIM_IC_Start_IT+0x10a>
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	2b08      	cmp	r3, #8
 800681a:	d104      	bne.n	8006826 <HAL_TIM_IC_Start_IT+0xe2>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2202      	movs	r2, #2
 8006820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006824:	e013      	b.n	800684e <HAL_TIM_IC_Start_IT+0x10a>
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	2b0c      	cmp	r3, #12
 800682a:	d104      	bne.n	8006836 <HAL_TIM_IC_Start_IT+0xf2>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2202      	movs	r2, #2
 8006830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006834:	e00b      	b.n	800684e <HAL_TIM_IC_Start_IT+0x10a>
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	2b10      	cmp	r3, #16
 800683a:	d104      	bne.n	8006846 <HAL_TIM_IC_Start_IT+0x102>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2202      	movs	r2, #2
 8006840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006844:	e003      	b.n	800684e <HAL_TIM_IC_Start_IT+0x10a>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2202      	movs	r2, #2
 800684a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d104      	bne.n	800685e <HAL_TIM_IC_Start_IT+0x11a>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2202      	movs	r2, #2
 8006858:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800685c:	e013      	b.n	8006886 <HAL_TIM_IC_Start_IT+0x142>
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	2b04      	cmp	r3, #4
 8006862:	d104      	bne.n	800686e <HAL_TIM_IC_Start_IT+0x12a>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2202      	movs	r2, #2
 8006868:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800686c:	e00b      	b.n	8006886 <HAL_TIM_IC_Start_IT+0x142>
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	2b08      	cmp	r3, #8
 8006872:	d104      	bne.n	800687e <HAL_TIM_IC_Start_IT+0x13a>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2202      	movs	r2, #2
 8006878:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800687c:	e003      	b.n	8006886 <HAL_TIM_IC_Start_IT+0x142>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2202      	movs	r2, #2
 8006882:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	2b0c      	cmp	r3, #12
 800688a:	d841      	bhi.n	8006910 <HAL_TIM_IC_Start_IT+0x1cc>
 800688c:	a201      	add	r2, pc, #4	; (adr r2, 8006894 <HAL_TIM_IC_Start_IT+0x150>)
 800688e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006892:	bf00      	nop
 8006894:	080068c9 	.word	0x080068c9
 8006898:	08006911 	.word	0x08006911
 800689c:	08006911 	.word	0x08006911
 80068a0:	08006911 	.word	0x08006911
 80068a4:	080068db 	.word	0x080068db
 80068a8:	08006911 	.word	0x08006911
 80068ac:	08006911 	.word	0x08006911
 80068b0:	08006911 	.word	0x08006911
 80068b4:	080068ed 	.word	0x080068ed
 80068b8:	08006911 	.word	0x08006911
 80068bc:	08006911 	.word	0x08006911
 80068c0:	08006911 	.word	0x08006911
 80068c4:	080068ff 	.word	0x080068ff
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68da      	ldr	r2, [r3, #12]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f042 0202 	orr.w	r2, r2, #2
 80068d6:	60da      	str	r2, [r3, #12]
      break;
 80068d8:	e01d      	b.n	8006916 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	68da      	ldr	r2, [r3, #12]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f042 0204 	orr.w	r2, r2, #4
 80068e8:	60da      	str	r2, [r3, #12]
      break;
 80068ea:	e014      	b.n	8006916 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68da      	ldr	r2, [r3, #12]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f042 0208 	orr.w	r2, r2, #8
 80068fa:	60da      	str	r2, [r3, #12]
      break;
 80068fc:	e00b      	b.n	8006916 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68da      	ldr	r2, [r3, #12]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f042 0210 	orr.w	r2, r2, #16
 800690c:	60da      	str	r2, [r3, #12]
      break;
 800690e:	e002      	b.n	8006916 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	73fb      	strb	r3, [r7, #15]
      break;
 8006914:	bf00      	nop
  }

  if (status == HAL_OK)
 8006916:	7bfb      	ldrb	r3, [r7, #15]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d149      	bne.n	80069b0 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2201      	movs	r2, #1
 8006922:	6839      	ldr	r1, [r7, #0]
 8006924:	4618      	mov	r0, r3
 8006926:	f000 fe3d 	bl	80075a4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a23      	ldr	r2, [pc, #140]	; (80069bc <HAL_TIM_IC_Start_IT+0x278>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d01d      	beq.n	8006970 <HAL_TIM_IC_Start_IT+0x22c>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800693c:	d018      	beq.n	8006970 <HAL_TIM_IC_Start_IT+0x22c>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a1f      	ldr	r2, [pc, #124]	; (80069c0 <HAL_TIM_IC_Start_IT+0x27c>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d013      	beq.n	8006970 <HAL_TIM_IC_Start_IT+0x22c>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a1d      	ldr	r2, [pc, #116]	; (80069c4 <HAL_TIM_IC_Start_IT+0x280>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d00e      	beq.n	8006970 <HAL_TIM_IC_Start_IT+0x22c>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a1c      	ldr	r2, [pc, #112]	; (80069c8 <HAL_TIM_IC_Start_IT+0x284>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d009      	beq.n	8006970 <HAL_TIM_IC_Start_IT+0x22c>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a1a      	ldr	r2, [pc, #104]	; (80069cc <HAL_TIM_IC_Start_IT+0x288>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d004      	beq.n	8006970 <HAL_TIM_IC_Start_IT+0x22c>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a19      	ldr	r2, [pc, #100]	; (80069d0 <HAL_TIM_IC_Start_IT+0x28c>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d115      	bne.n	800699c <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	689a      	ldr	r2, [r3, #8]
 8006976:	4b17      	ldr	r3, [pc, #92]	; (80069d4 <HAL_TIM_IC_Start_IT+0x290>)
 8006978:	4013      	ands	r3, r2
 800697a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	2b06      	cmp	r3, #6
 8006980:	d015      	beq.n	80069ae <HAL_TIM_IC_Start_IT+0x26a>
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006988:	d011      	beq.n	80069ae <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f042 0201 	orr.w	r2, r2, #1
 8006998:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800699a:	e008      	b.n	80069ae <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f042 0201 	orr.w	r2, r2, #1
 80069aa:	601a      	str	r2, [r3, #0]
 80069ac:	e000      	b.n	80069b0 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069ae:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80069b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	40012c00 	.word	0x40012c00
 80069c0:	40000400 	.word	0x40000400
 80069c4:	40000800 	.word	0x40000800
 80069c8:	40000c00 	.word	0x40000c00
 80069cc:	40013400 	.word	0x40013400
 80069d0:	40014000 	.word	0x40014000
 80069d4:	00010007 	.word	0x00010007

080069d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	f003 0302 	and.w	r3, r3, #2
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d122      	bne.n	8006a34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	f003 0302 	and.w	r3, r3, #2
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	d11b      	bne.n	8006a34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f06f 0202 	mvn.w	r2, #2
 8006a04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	699b      	ldr	r3, [r3, #24]
 8006a12:	f003 0303 	and.w	r3, r3, #3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d003      	beq.n	8006a22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f7f9 fc20 	bl	8000260 <HAL_TIM_IC_CaptureCallback>
 8006a20:	e005      	b.n	8006a2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 faa8 	bl	8006f78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 faaf 	bl	8006f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	f003 0304 	and.w	r3, r3, #4
 8006a3e:	2b04      	cmp	r3, #4
 8006a40:	d122      	bne.n	8006a88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	f003 0304 	and.w	r3, r3, #4
 8006a4c:	2b04      	cmp	r3, #4
 8006a4e:	d11b      	bne.n	8006a88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f06f 0204 	mvn.w	r2, #4
 8006a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2202      	movs	r2, #2
 8006a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	699b      	ldr	r3, [r3, #24]
 8006a66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d003      	beq.n	8006a76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f7f9 fbf6 	bl	8000260 <HAL_TIM_IC_CaptureCallback>
 8006a74:	e005      	b.n	8006a82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 fa7e 	bl	8006f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 fa85 	bl	8006f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	f003 0308 	and.w	r3, r3, #8
 8006a92:	2b08      	cmp	r3, #8
 8006a94:	d122      	bne.n	8006adc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	f003 0308 	and.w	r3, r3, #8
 8006aa0:	2b08      	cmp	r3, #8
 8006aa2:	d11b      	bne.n	8006adc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f06f 0208 	mvn.w	r2, #8
 8006aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2204      	movs	r2, #4
 8006ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	69db      	ldr	r3, [r3, #28]
 8006aba:	f003 0303 	and.w	r3, r3, #3
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d003      	beq.n	8006aca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f7f9 fbcc 	bl	8000260 <HAL_TIM_IC_CaptureCallback>
 8006ac8:	e005      	b.n	8006ad6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 fa54 	bl	8006f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 fa5b 	bl	8006f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	f003 0310 	and.w	r3, r3, #16
 8006ae6:	2b10      	cmp	r3, #16
 8006ae8:	d122      	bne.n	8006b30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	f003 0310 	and.w	r3, r3, #16
 8006af4:	2b10      	cmp	r3, #16
 8006af6:	d11b      	bne.n	8006b30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f06f 0210 	mvn.w	r2, #16
 8006b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2208      	movs	r2, #8
 8006b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	69db      	ldr	r3, [r3, #28]
 8006b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d003      	beq.n	8006b1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f7f9 fba2 	bl	8000260 <HAL_TIM_IC_CaptureCallback>
 8006b1c:	e005      	b.n	8006b2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 fa2a 	bl	8006f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 fa31 	bl	8006f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	f003 0301 	and.w	r3, r3, #1
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d10e      	bne.n	8006b5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	f003 0301 	and.w	r3, r3, #1
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d107      	bne.n	8006b5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f06f 0201 	mvn.w	r2, #1
 8006b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 fa04 	bl	8006f64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b66:	2b80      	cmp	r3, #128	; 0x80
 8006b68:	d10e      	bne.n	8006b88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b74:	2b80      	cmp	r3, #128	; 0x80
 8006b76:	d107      	bne.n	8006b88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 fdc6 	bl	8007714 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b96:	d10e      	bne.n	8006bb6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ba2:	2b80      	cmp	r3, #128	; 0x80
 8006ba4:	d107      	bne.n	8006bb6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006bae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 fdb9 	bl	8007728 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bc0:	2b40      	cmp	r3, #64	; 0x40
 8006bc2:	d10e      	bne.n	8006be2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bce:	2b40      	cmp	r3, #64	; 0x40
 8006bd0:	d107      	bne.n	8006be2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006bda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 f9df 	bl	8006fa0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	f003 0320 	and.w	r3, r3, #32
 8006bec:	2b20      	cmp	r3, #32
 8006bee:	d10e      	bne.n	8006c0e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	f003 0320 	and.w	r3, r3, #32
 8006bfa:	2b20      	cmp	r3, #32
 8006bfc:	d107      	bne.n	8006c0e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f06f 0220 	mvn.w	r2, #32
 8006c06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 fd79 	bl	8007700 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c0e:	bf00      	nop
 8006c10:	3708      	adds	r7, #8
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b086      	sub	sp, #24
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	60f8      	str	r0, [r7, #12]
 8006c1e:	60b9      	str	r1, [r7, #8]
 8006c20:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c22:	2300      	movs	r3, #0
 8006c24:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d101      	bne.n	8006c34 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006c30:	2302      	movs	r3, #2
 8006c32:	e088      	b.n	8006d46 <HAL_TIM_IC_ConfigChannel+0x130>
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d11b      	bne.n	8006c7a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	6818      	ldr	r0, [r3, #0]
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	6819      	ldr	r1, [r3, #0]
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	685a      	ldr	r2, [r3, #4]
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	f000 fae9 	bl	8007228 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	699a      	ldr	r2, [r3, #24]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f022 020c 	bic.w	r2, r2, #12
 8006c64:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	6999      	ldr	r1, [r3, #24]
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	689a      	ldr	r2, [r3, #8]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	430a      	orrs	r2, r1
 8006c76:	619a      	str	r2, [r3, #24]
 8006c78:	e060      	b.n	8006d3c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2b04      	cmp	r3, #4
 8006c7e:	d11c      	bne.n	8006cba <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6818      	ldr	r0, [r3, #0]
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	6819      	ldr	r1, [r3, #0]
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	685a      	ldr	r2, [r3, #4]
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	f000 fb67 	bl	8007362 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	699a      	ldr	r2, [r3, #24]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006ca2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	6999      	ldr	r1, [r3, #24]
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	021a      	lsls	r2, r3, #8
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	430a      	orrs	r2, r1
 8006cb6:	619a      	str	r2, [r3, #24]
 8006cb8:	e040      	b.n	8006d3c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2b08      	cmp	r3, #8
 8006cbe:	d11b      	bne.n	8006cf8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6818      	ldr	r0, [r3, #0]
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	6819      	ldr	r1, [r3, #0]
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	685a      	ldr	r2, [r3, #4]
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	f000 fbb4 	bl	800743c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	69da      	ldr	r2, [r3, #28]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f022 020c 	bic.w	r2, r2, #12
 8006ce2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	69d9      	ldr	r1, [r3, #28]
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	689a      	ldr	r2, [r3, #8]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	430a      	orrs	r2, r1
 8006cf4:	61da      	str	r2, [r3, #28]
 8006cf6:	e021      	b.n	8006d3c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2b0c      	cmp	r3, #12
 8006cfc:	d11c      	bne.n	8006d38 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6818      	ldr	r0, [r3, #0]
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	6819      	ldr	r1, [r3, #0]
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	685a      	ldr	r2, [r3, #4]
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	f000 fbd1 	bl	80074b4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	69da      	ldr	r2, [r3, #28]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006d20:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	69d9      	ldr	r1, [r3, #28]
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	021a      	lsls	r2, r3, #8
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	430a      	orrs	r2, r1
 8006d34:	61da      	str	r2, [r3, #28]
 8006d36:	e001      	b.n	8006d3c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d44:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3718      	adds	r7, #24
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}

08006d4e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b084      	sub	sp, #16
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
 8006d56:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d101      	bne.n	8006d6a <HAL_TIM_ConfigClockSource+0x1c>
 8006d66:	2302      	movs	r3, #2
 8006d68:	e0b6      	b.n	8006ed8 <HAL_TIM_ConfigClockSource+0x18a>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2202      	movs	r2, #2
 8006d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d88:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d8c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d94:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68ba      	ldr	r2, [r7, #8]
 8006d9c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006da6:	d03e      	beq.n	8006e26 <HAL_TIM_ConfigClockSource+0xd8>
 8006da8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dac:	f200 8087 	bhi.w	8006ebe <HAL_TIM_ConfigClockSource+0x170>
 8006db0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006db4:	f000 8086 	beq.w	8006ec4 <HAL_TIM_ConfigClockSource+0x176>
 8006db8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dbc:	d87f      	bhi.n	8006ebe <HAL_TIM_ConfigClockSource+0x170>
 8006dbe:	2b70      	cmp	r3, #112	; 0x70
 8006dc0:	d01a      	beq.n	8006df8 <HAL_TIM_ConfigClockSource+0xaa>
 8006dc2:	2b70      	cmp	r3, #112	; 0x70
 8006dc4:	d87b      	bhi.n	8006ebe <HAL_TIM_ConfigClockSource+0x170>
 8006dc6:	2b60      	cmp	r3, #96	; 0x60
 8006dc8:	d050      	beq.n	8006e6c <HAL_TIM_ConfigClockSource+0x11e>
 8006dca:	2b60      	cmp	r3, #96	; 0x60
 8006dcc:	d877      	bhi.n	8006ebe <HAL_TIM_ConfigClockSource+0x170>
 8006dce:	2b50      	cmp	r3, #80	; 0x50
 8006dd0:	d03c      	beq.n	8006e4c <HAL_TIM_ConfigClockSource+0xfe>
 8006dd2:	2b50      	cmp	r3, #80	; 0x50
 8006dd4:	d873      	bhi.n	8006ebe <HAL_TIM_ConfigClockSource+0x170>
 8006dd6:	2b40      	cmp	r3, #64	; 0x40
 8006dd8:	d058      	beq.n	8006e8c <HAL_TIM_ConfigClockSource+0x13e>
 8006dda:	2b40      	cmp	r3, #64	; 0x40
 8006ddc:	d86f      	bhi.n	8006ebe <HAL_TIM_ConfigClockSource+0x170>
 8006dde:	2b30      	cmp	r3, #48	; 0x30
 8006de0:	d064      	beq.n	8006eac <HAL_TIM_ConfigClockSource+0x15e>
 8006de2:	2b30      	cmp	r3, #48	; 0x30
 8006de4:	d86b      	bhi.n	8006ebe <HAL_TIM_ConfigClockSource+0x170>
 8006de6:	2b20      	cmp	r3, #32
 8006de8:	d060      	beq.n	8006eac <HAL_TIM_ConfigClockSource+0x15e>
 8006dea:	2b20      	cmp	r3, #32
 8006dec:	d867      	bhi.n	8006ebe <HAL_TIM_ConfigClockSource+0x170>
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d05c      	beq.n	8006eac <HAL_TIM_ConfigClockSource+0x15e>
 8006df2:	2b10      	cmp	r3, #16
 8006df4:	d05a      	beq.n	8006eac <HAL_TIM_ConfigClockSource+0x15e>
 8006df6:	e062      	b.n	8006ebe <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6818      	ldr	r0, [r3, #0]
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	6899      	ldr	r1, [r3, #8]
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	685a      	ldr	r2, [r3, #4]
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	f000 fbac 	bl	8007564 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e1a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	68ba      	ldr	r2, [r7, #8]
 8006e22:	609a      	str	r2, [r3, #8]
      break;
 8006e24:	e04f      	b.n	8006ec6 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6818      	ldr	r0, [r3, #0]
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	6899      	ldr	r1, [r3, #8]
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	685a      	ldr	r2, [r3, #4]
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	f000 fb95 	bl	8007564 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	689a      	ldr	r2, [r3, #8]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e48:	609a      	str	r2, [r3, #8]
      break;
 8006e4a:	e03c      	b.n	8006ec6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6818      	ldr	r0, [r3, #0]
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	6859      	ldr	r1, [r3, #4]
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	461a      	mov	r2, r3
 8006e5a:	f000 fa53 	bl	8007304 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2150      	movs	r1, #80	; 0x50
 8006e64:	4618      	mov	r0, r3
 8006e66:	f000 fb62 	bl	800752e <TIM_ITRx_SetConfig>
      break;
 8006e6a:	e02c      	b.n	8006ec6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6818      	ldr	r0, [r3, #0]
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	6859      	ldr	r1, [r3, #4]
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	461a      	mov	r2, r3
 8006e7a:	f000 faaf 	bl	80073dc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2160      	movs	r1, #96	; 0x60
 8006e84:	4618      	mov	r0, r3
 8006e86:	f000 fb52 	bl	800752e <TIM_ITRx_SetConfig>
      break;
 8006e8a:	e01c      	b.n	8006ec6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6818      	ldr	r0, [r3, #0]
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	6859      	ldr	r1, [r3, #4]
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	461a      	mov	r2, r3
 8006e9a:	f000 fa33 	bl	8007304 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2140      	movs	r1, #64	; 0x40
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f000 fb42 	bl	800752e <TIM_ITRx_SetConfig>
      break;
 8006eaa:	e00c      	b.n	8006ec6 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	4610      	mov	r0, r2
 8006eb8:	f000 fb39 	bl	800752e <TIM_ITRx_SetConfig>
      break;
 8006ebc:	e003      	b.n	8006ec6 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	73fb      	strb	r3, [r7, #15]
      break;
 8006ec2:	e000      	b.n	8006ec6 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006ec4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b082      	sub	sp, #8
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d101      	bne.n	8006ef8 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006ef4:	2302      	movs	r3, #2
 8006ef6:	e031      	b.n	8006f5c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2202      	movs	r2, #2
 8006f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006f08:	6839      	ldr	r1, [r7, #0]
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 f8f8 	bl	8007100 <TIM_SlaveTimer_SetConfig>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d009      	beq.n	8006f2a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e018      	b.n	8006f5c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68da      	ldr	r2, [r3, #12]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f38:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68da      	ldr	r2, [r3, #12]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006f48:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f5a:	2300      	movs	r3, #0
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3708      	adds	r7, #8
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006f6c:	bf00      	nop
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f80:	bf00      	nop
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f94:	bf00      	nop
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006fa8:	bf00      	nop
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <HAL_TIM_GetActiveChannel>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM handle
  * @retval Active channel
  */
HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(const TIM_HandleTypeDef *htim)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  return htim->Channel;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	7f1b      	ldrb	r3, [r3, #28]
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b085      	sub	sp, #20
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	4a40      	ldr	r2, [pc, #256]	; (80070e0 <TIM_Base_SetConfig+0x114>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d013      	beq.n	800700c <TIM_Base_SetConfig+0x40>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fea:	d00f      	beq.n	800700c <TIM_Base_SetConfig+0x40>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	4a3d      	ldr	r2, [pc, #244]	; (80070e4 <TIM_Base_SetConfig+0x118>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d00b      	beq.n	800700c <TIM_Base_SetConfig+0x40>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	4a3c      	ldr	r2, [pc, #240]	; (80070e8 <TIM_Base_SetConfig+0x11c>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d007      	beq.n	800700c <TIM_Base_SetConfig+0x40>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	4a3b      	ldr	r2, [pc, #236]	; (80070ec <TIM_Base_SetConfig+0x120>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d003      	beq.n	800700c <TIM_Base_SetConfig+0x40>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4a3a      	ldr	r2, [pc, #232]	; (80070f0 <TIM_Base_SetConfig+0x124>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d108      	bne.n	800701e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007012:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	4313      	orrs	r3, r2
 800701c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4a2f      	ldr	r2, [pc, #188]	; (80070e0 <TIM_Base_SetConfig+0x114>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d01f      	beq.n	8007066 <TIM_Base_SetConfig+0x9a>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800702c:	d01b      	beq.n	8007066 <TIM_Base_SetConfig+0x9a>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4a2c      	ldr	r2, [pc, #176]	; (80070e4 <TIM_Base_SetConfig+0x118>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d017      	beq.n	8007066 <TIM_Base_SetConfig+0x9a>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a2b      	ldr	r2, [pc, #172]	; (80070e8 <TIM_Base_SetConfig+0x11c>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d013      	beq.n	8007066 <TIM_Base_SetConfig+0x9a>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4a2a      	ldr	r2, [pc, #168]	; (80070ec <TIM_Base_SetConfig+0x120>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d00f      	beq.n	8007066 <TIM_Base_SetConfig+0x9a>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4a29      	ldr	r2, [pc, #164]	; (80070f0 <TIM_Base_SetConfig+0x124>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d00b      	beq.n	8007066 <TIM_Base_SetConfig+0x9a>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a28      	ldr	r2, [pc, #160]	; (80070f4 <TIM_Base_SetConfig+0x128>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d007      	beq.n	8007066 <TIM_Base_SetConfig+0x9a>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a27      	ldr	r2, [pc, #156]	; (80070f8 <TIM_Base_SetConfig+0x12c>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d003      	beq.n	8007066 <TIM_Base_SetConfig+0x9a>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a26      	ldr	r2, [pc, #152]	; (80070fc <TIM_Base_SetConfig+0x130>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d108      	bne.n	8007078 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800706c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	4313      	orrs	r3, r2
 8007076:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	695b      	ldr	r3, [r3, #20]
 8007082:	4313      	orrs	r3, r2
 8007084:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	68fa      	ldr	r2, [r7, #12]
 800708a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	689a      	ldr	r2, [r3, #8]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4a10      	ldr	r2, [pc, #64]	; (80070e0 <TIM_Base_SetConfig+0x114>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d00f      	beq.n	80070c4 <TIM_Base_SetConfig+0xf8>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4a12      	ldr	r2, [pc, #72]	; (80070f0 <TIM_Base_SetConfig+0x124>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d00b      	beq.n	80070c4 <TIM_Base_SetConfig+0xf8>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4a11      	ldr	r2, [pc, #68]	; (80070f4 <TIM_Base_SetConfig+0x128>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d007      	beq.n	80070c4 <TIM_Base_SetConfig+0xf8>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	4a10      	ldr	r2, [pc, #64]	; (80070f8 <TIM_Base_SetConfig+0x12c>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d003      	beq.n	80070c4 <TIM_Base_SetConfig+0xf8>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4a0f      	ldr	r2, [pc, #60]	; (80070fc <TIM_Base_SetConfig+0x130>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d103      	bne.n	80070cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	691a      	ldr	r2, [r3, #16]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	615a      	str	r2, [r3, #20]
}
 80070d2:	bf00      	nop
 80070d4:	3714      	adds	r7, #20
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	40012c00 	.word	0x40012c00
 80070e4:	40000400 	.word	0x40000400
 80070e8:	40000800 	.word	0x40000800
 80070ec:	40000c00 	.word	0x40000c00
 80070f0:	40013400 	.word	0x40013400
 80070f4:	40014000 	.word	0x40014000
 80070f8:	40014400 	.word	0x40014400
 80070fc:	40014800 	.word	0x40014800

08007100 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b086      	sub	sp, #24
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800710a:	2300      	movs	r3, #0
 800710c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800711c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	693a      	ldr	r2, [r7, #16]
 8007124:	4313      	orrs	r3, r2
 8007126:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800712e:	f023 0307 	bic.w	r3, r3, #7
 8007132:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	693a      	ldr	r2, [r7, #16]
 800713a:	4313      	orrs	r3, r2
 800713c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	693a      	ldr	r2, [r7, #16]
 8007144:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	2b70      	cmp	r3, #112	; 0x70
 800714c:	d01a      	beq.n	8007184 <TIM_SlaveTimer_SetConfig+0x84>
 800714e:	2b70      	cmp	r3, #112	; 0x70
 8007150:	d860      	bhi.n	8007214 <TIM_SlaveTimer_SetConfig+0x114>
 8007152:	2b60      	cmp	r3, #96	; 0x60
 8007154:	d054      	beq.n	8007200 <TIM_SlaveTimer_SetConfig+0x100>
 8007156:	2b60      	cmp	r3, #96	; 0x60
 8007158:	d85c      	bhi.n	8007214 <TIM_SlaveTimer_SetConfig+0x114>
 800715a:	2b50      	cmp	r3, #80	; 0x50
 800715c:	d046      	beq.n	80071ec <TIM_SlaveTimer_SetConfig+0xec>
 800715e:	2b50      	cmp	r3, #80	; 0x50
 8007160:	d858      	bhi.n	8007214 <TIM_SlaveTimer_SetConfig+0x114>
 8007162:	2b40      	cmp	r3, #64	; 0x40
 8007164:	d019      	beq.n	800719a <TIM_SlaveTimer_SetConfig+0x9a>
 8007166:	2b40      	cmp	r3, #64	; 0x40
 8007168:	d854      	bhi.n	8007214 <TIM_SlaveTimer_SetConfig+0x114>
 800716a:	2b30      	cmp	r3, #48	; 0x30
 800716c:	d055      	beq.n	800721a <TIM_SlaveTimer_SetConfig+0x11a>
 800716e:	2b30      	cmp	r3, #48	; 0x30
 8007170:	d850      	bhi.n	8007214 <TIM_SlaveTimer_SetConfig+0x114>
 8007172:	2b20      	cmp	r3, #32
 8007174:	d051      	beq.n	800721a <TIM_SlaveTimer_SetConfig+0x11a>
 8007176:	2b20      	cmp	r3, #32
 8007178:	d84c      	bhi.n	8007214 <TIM_SlaveTimer_SetConfig+0x114>
 800717a:	2b00      	cmp	r3, #0
 800717c:	d04d      	beq.n	800721a <TIM_SlaveTimer_SetConfig+0x11a>
 800717e:	2b10      	cmp	r3, #16
 8007180:	d04b      	beq.n	800721a <TIM_SlaveTimer_SetConfig+0x11a>
 8007182:	e047      	b.n	8007214 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6818      	ldr	r0, [r3, #0]
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	68d9      	ldr	r1, [r3, #12]
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	689a      	ldr	r2, [r3, #8]
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	691b      	ldr	r3, [r3, #16]
 8007194:	f000 f9e6 	bl	8007564 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8007198:	e040      	b.n	800721c <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2b05      	cmp	r3, #5
 80071a0:	d101      	bne.n	80071a6 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e03b      	b.n	800721e <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	6a1b      	ldr	r3, [r3, #32]
 80071ac:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	6a1a      	ldr	r2, [r3, #32]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f022 0201 	bic.w	r2, r2, #1
 80071bc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	699b      	ldr	r3, [r3, #24]
 80071c4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071cc:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	011b      	lsls	r3, r3, #4
 80071d4:	68ba      	ldr	r2, [r7, #8]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68ba      	ldr	r2, [r7, #8]
 80071e0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	68fa      	ldr	r2, [r7, #12]
 80071e8:	621a      	str	r2, [r3, #32]
      break;
 80071ea:	e017      	b.n	800721c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6818      	ldr	r0, [r3, #0]
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	6899      	ldr	r1, [r3, #8]
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	461a      	mov	r2, r3
 80071fa:	f000 f883 	bl	8007304 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80071fe:	e00d      	b.n	800721c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6818      	ldr	r0, [r3, #0]
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	6899      	ldr	r1, [r3, #8]
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	461a      	mov	r2, r3
 800720e:	f000 f8e5 	bl	80073dc <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007212:	e003      	b.n	800721c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	75fb      	strb	r3, [r7, #23]
      break;
 8007218:	e000      	b.n	800721c <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 800721a:	bf00      	nop
  }

  return status;
 800721c:	7dfb      	ldrb	r3, [r7, #23]
}
 800721e:	4618      	mov	r0, r3
 8007220:	3718      	adds	r7, #24
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
	...

08007228 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007228:	b480      	push	{r7}
 800722a:	b087      	sub	sp, #28
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	607a      	str	r2, [r7, #4]
 8007234:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6a1b      	ldr	r3, [r3, #32]
 800723a:	f023 0201 	bic.w	r2, r3, #1
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	699b      	ldr	r3, [r3, #24]
 8007246:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6a1b      	ldr	r3, [r3, #32]
 800724c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	4a26      	ldr	r2, [pc, #152]	; (80072ec <TIM_TI1_SetConfig+0xc4>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d017      	beq.n	8007286 <TIM_TI1_SetConfig+0x5e>
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800725c:	d013      	beq.n	8007286 <TIM_TI1_SetConfig+0x5e>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	4a23      	ldr	r2, [pc, #140]	; (80072f0 <TIM_TI1_SetConfig+0xc8>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d00f      	beq.n	8007286 <TIM_TI1_SetConfig+0x5e>
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	4a22      	ldr	r2, [pc, #136]	; (80072f4 <TIM_TI1_SetConfig+0xcc>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d00b      	beq.n	8007286 <TIM_TI1_SetConfig+0x5e>
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	4a21      	ldr	r2, [pc, #132]	; (80072f8 <TIM_TI1_SetConfig+0xd0>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d007      	beq.n	8007286 <TIM_TI1_SetConfig+0x5e>
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	4a20      	ldr	r2, [pc, #128]	; (80072fc <TIM_TI1_SetConfig+0xd4>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d003      	beq.n	8007286 <TIM_TI1_SetConfig+0x5e>
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	4a1f      	ldr	r2, [pc, #124]	; (8007300 <TIM_TI1_SetConfig+0xd8>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d101      	bne.n	800728a <TIM_TI1_SetConfig+0x62>
 8007286:	2301      	movs	r3, #1
 8007288:	e000      	b.n	800728c <TIM_TI1_SetConfig+0x64>
 800728a:	2300      	movs	r3, #0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d008      	beq.n	80072a2 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	f023 0303 	bic.w	r3, r3, #3
 8007296:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007298:	697a      	ldr	r2, [r7, #20]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4313      	orrs	r3, r2
 800729e:	617b      	str	r3, [r7, #20]
 80072a0:	e003      	b.n	80072aa <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	f043 0301 	orr.w	r3, r3, #1
 80072a8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	011b      	lsls	r3, r3, #4
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	697a      	ldr	r2, [r7, #20]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	f023 030a 	bic.w	r3, r3, #10
 80072c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	f003 030a 	and.w	r3, r3, #10
 80072cc:	693a      	ldr	r2, [r7, #16]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	697a      	ldr	r2, [r7, #20]
 80072d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	693a      	ldr	r2, [r7, #16]
 80072dc:	621a      	str	r2, [r3, #32]
}
 80072de:	bf00      	nop
 80072e0:	371c      	adds	r7, #28
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	40012c00 	.word	0x40012c00
 80072f0:	40000400 	.word	0x40000400
 80072f4:	40000800 	.word	0x40000800
 80072f8:	40000c00 	.word	0x40000c00
 80072fc:	40013400 	.word	0x40013400
 8007300:	40014000 	.word	0x40014000

08007304 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007304:	b480      	push	{r7}
 8007306:	b087      	sub	sp, #28
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6a1b      	ldr	r3, [r3, #32]
 8007314:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	6a1b      	ldr	r3, [r3, #32]
 800731a:	f023 0201 	bic.w	r2, r3, #1
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	699b      	ldr	r3, [r3, #24]
 8007326:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800732e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	011b      	lsls	r3, r3, #4
 8007334:	693a      	ldr	r2, [r7, #16]
 8007336:	4313      	orrs	r3, r2
 8007338:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	f023 030a 	bic.w	r3, r3, #10
 8007340:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007342:	697a      	ldr	r2, [r7, #20]
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	4313      	orrs	r3, r2
 8007348:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	693a      	ldr	r2, [r7, #16]
 800734e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	697a      	ldr	r2, [r7, #20]
 8007354:	621a      	str	r2, [r3, #32]
}
 8007356:	bf00      	nop
 8007358:	371c      	adds	r7, #28
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr

08007362 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007362:	b480      	push	{r7}
 8007364:	b087      	sub	sp, #28
 8007366:	af00      	add	r7, sp, #0
 8007368:	60f8      	str	r0, [r7, #12]
 800736a:	60b9      	str	r1, [r7, #8]
 800736c:	607a      	str	r2, [r7, #4]
 800736e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6a1b      	ldr	r3, [r3, #32]
 8007374:	f023 0210 	bic.w	r2, r3, #16
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	699b      	ldr	r3, [r3, #24]
 8007380:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6a1b      	ldr	r3, [r3, #32]
 8007386:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800738e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	021b      	lsls	r3, r3, #8
 8007394:	697a      	ldr	r2, [r7, #20]
 8007396:	4313      	orrs	r3, r2
 8007398:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	031b      	lsls	r3, r3, #12
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	697a      	ldr	r2, [r7, #20]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80073b4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	011b      	lsls	r3, r3, #4
 80073ba:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80073be:	693a      	ldr	r2, [r7, #16]
 80073c0:	4313      	orrs	r3, r2
 80073c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	697a      	ldr	r2, [r7, #20]
 80073c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	693a      	ldr	r2, [r7, #16]
 80073ce:	621a      	str	r2, [r3, #32]
}
 80073d0:	bf00      	nop
 80073d2:	371c      	adds	r7, #28
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073dc:	b480      	push	{r7}
 80073de:	b087      	sub	sp, #28
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6a1b      	ldr	r3, [r3, #32]
 80073ec:	f023 0210 	bic.w	r2, r3, #16
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	699b      	ldr	r3, [r3, #24]
 80073f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6a1b      	ldr	r3, [r3, #32]
 80073fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007406:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	031b      	lsls	r3, r3, #12
 800740c:	697a      	ldr	r2, [r7, #20]
 800740e:	4313      	orrs	r3, r2
 8007410:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007418:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	011b      	lsls	r3, r3, #4
 800741e:	693a      	ldr	r2, [r7, #16]
 8007420:	4313      	orrs	r3, r2
 8007422:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	697a      	ldr	r2, [r7, #20]
 8007428:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	693a      	ldr	r2, [r7, #16]
 800742e:	621a      	str	r2, [r3, #32]
}
 8007430:	bf00      	nop
 8007432:	371c      	adds	r7, #28
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800743c:	b480      	push	{r7}
 800743e:	b087      	sub	sp, #28
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	607a      	str	r2, [r7, #4]
 8007448:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	6a1b      	ldr	r3, [r3, #32]
 800744e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	69db      	ldr	r3, [r3, #28]
 800745a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6a1b      	ldr	r3, [r3, #32]
 8007460:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	f023 0303 	bic.w	r3, r3, #3
 8007468:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800746a:	697a      	ldr	r2, [r7, #20]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4313      	orrs	r3, r2
 8007470:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007478:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	011b      	lsls	r3, r3, #4
 800747e:	b2db      	uxtb	r3, r3
 8007480:	697a      	ldr	r2, [r7, #20]
 8007482:	4313      	orrs	r3, r2
 8007484:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800748c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	021b      	lsls	r3, r3, #8
 8007492:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007496:	693a      	ldr	r2, [r7, #16]
 8007498:	4313      	orrs	r3, r2
 800749a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	697a      	ldr	r2, [r7, #20]
 80074a0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	693a      	ldr	r2, [r7, #16]
 80074a6:	621a      	str	r2, [r3, #32]
}
 80074a8:	bf00      	nop
 80074aa:	371c      	adds	r7, #28
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b087      	sub	sp, #28
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	607a      	str	r2, [r7, #4]
 80074c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6a1b      	ldr	r3, [r3, #32]
 80074c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	69db      	ldr	r3, [r3, #28]
 80074d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	6a1b      	ldr	r3, [r3, #32]
 80074d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	021b      	lsls	r3, r3, #8
 80074e6:	697a      	ldr	r2, [r7, #20]
 80074e8:	4313      	orrs	r3, r2
 80074ea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80074f2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	031b      	lsls	r3, r3, #12
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	697a      	ldr	r2, [r7, #20]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007506:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	031b      	lsls	r3, r3, #12
 800750c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007510:	693a      	ldr	r2, [r7, #16]
 8007512:	4313      	orrs	r3, r2
 8007514:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	697a      	ldr	r2, [r7, #20]
 800751a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	693a      	ldr	r2, [r7, #16]
 8007520:	621a      	str	r2, [r3, #32]
}
 8007522:	bf00      	nop
 8007524:	371c      	adds	r7, #28
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr

0800752e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800752e:	b480      	push	{r7}
 8007530:	b085      	sub	sp, #20
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
 8007536:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007544:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007546:	683a      	ldr	r2, [r7, #0]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	4313      	orrs	r3, r2
 800754c:	f043 0307 	orr.w	r3, r3, #7
 8007550:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	609a      	str	r2, [r3, #8]
}
 8007558:	bf00      	nop
 800755a:	3714      	adds	r7, #20
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007564:	b480      	push	{r7}
 8007566:	b087      	sub	sp, #28
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	607a      	str	r2, [r7, #4]
 8007570:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800757e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	021a      	lsls	r2, r3, #8
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	431a      	orrs	r2, r3
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	4313      	orrs	r3, r2
 800758c:	697a      	ldr	r2, [r7, #20]
 800758e:	4313      	orrs	r3, r2
 8007590:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	697a      	ldr	r2, [r7, #20]
 8007596:	609a      	str	r2, [r3, #8]
}
 8007598:	bf00      	nop
 800759a:	371c      	adds	r7, #28
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b087      	sub	sp, #28
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	f003 031f 	and.w	r3, r3, #31
 80075b6:	2201      	movs	r2, #1
 80075b8:	fa02 f303 	lsl.w	r3, r2, r3
 80075bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6a1a      	ldr	r2, [r3, #32]
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	43db      	mvns	r3, r3
 80075c6:	401a      	ands	r2, r3
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	6a1a      	ldr	r2, [r3, #32]
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	f003 031f 	and.w	r3, r3, #31
 80075d6:	6879      	ldr	r1, [r7, #4]
 80075d8:	fa01 f303 	lsl.w	r3, r1, r3
 80075dc:	431a      	orrs	r2, r3
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	621a      	str	r2, [r3, #32]
}
 80075e2:	bf00      	nop
 80075e4:	371c      	adds	r7, #28
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr
	...

080075f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b085      	sub	sp, #20
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007600:	2b01      	cmp	r3, #1
 8007602:	d101      	bne.n	8007608 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007604:	2302      	movs	r3, #2
 8007606:	e068      	b.n	80076da <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2202      	movs	r2, #2
 8007614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a2e      	ldr	r2, [pc, #184]	; (80076e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d004      	beq.n	800763c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a2d      	ldr	r2, [pc, #180]	; (80076ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d108      	bne.n	800764e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007642:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	68fa      	ldr	r2, [r7, #12]
 800764a:	4313      	orrs	r3, r2
 800764c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007654:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	68fa      	ldr	r2, [r7, #12]
 800765c:	4313      	orrs	r3, r2
 800765e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	68fa      	ldr	r2, [r7, #12]
 8007666:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a1e      	ldr	r2, [pc, #120]	; (80076e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d01d      	beq.n	80076ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800767a:	d018      	beq.n	80076ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a1b      	ldr	r2, [pc, #108]	; (80076f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d013      	beq.n	80076ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a1a      	ldr	r2, [pc, #104]	; (80076f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d00e      	beq.n	80076ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a18      	ldr	r2, [pc, #96]	; (80076f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d009      	beq.n	80076ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a13      	ldr	r2, [pc, #76]	; (80076ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d004      	beq.n	80076ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a14      	ldr	r2, [pc, #80]	; (80076fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d10c      	bne.n	80076c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	68ba      	ldr	r2, [r7, #8]
 80076bc:	4313      	orrs	r3, r2
 80076be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	68ba      	ldr	r2, [r7, #8]
 80076c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076d8:	2300      	movs	r3, #0
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3714      	adds	r7, #20
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr
 80076e6:	bf00      	nop
 80076e8:	40012c00 	.word	0x40012c00
 80076ec:	40013400 	.word	0x40013400
 80076f0:	40000400 	.word	0x40000400
 80076f4:	40000800 	.word	0x40000800
 80076f8:	40000c00 	.word	0x40000c00
 80076fc:	40014000 	.word	0x40014000

08007700 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007708:	bf00      	nop
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800771c:	bf00      	nop
 800771e:	370c      	adds	r7, #12
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007730:	bf00      	nop
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <__libc_init_array>:
 800773c:	b570      	push	{r4, r5, r6, lr}
 800773e:	4d0d      	ldr	r5, [pc, #52]	; (8007774 <__libc_init_array+0x38>)
 8007740:	4c0d      	ldr	r4, [pc, #52]	; (8007778 <__libc_init_array+0x3c>)
 8007742:	1b64      	subs	r4, r4, r5
 8007744:	10a4      	asrs	r4, r4, #2
 8007746:	2600      	movs	r6, #0
 8007748:	42a6      	cmp	r6, r4
 800774a:	d109      	bne.n	8007760 <__libc_init_array+0x24>
 800774c:	4d0b      	ldr	r5, [pc, #44]	; (800777c <__libc_init_array+0x40>)
 800774e:	4c0c      	ldr	r4, [pc, #48]	; (8007780 <__libc_init_array+0x44>)
 8007750:	f000 f820 	bl	8007794 <_init>
 8007754:	1b64      	subs	r4, r4, r5
 8007756:	10a4      	asrs	r4, r4, #2
 8007758:	2600      	movs	r6, #0
 800775a:	42a6      	cmp	r6, r4
 800775c:	d105      	bne.n	800776a <__libc_init_array+0x2e>
 800775e:	bd70      	pop	{r4, r5, r6, pc}
 8007760:	f855 3b04 	ldr.w	r3, [r5], #4
 8007764:	4798      	blx	r3
 8007766:	3601      	adds	r6, #1
 8007768:	e7ee      	b.n	8007748 <__libc_init_array+0xc>
 800776a:	f855 3b04 	ldr.w	r3, [r5], #4
 800776e:	4798      	blx	r3
 8007770:	3601      	adds	r6, #1
 8007772:	e7f2      	b.n	800775a <__libc_init_array+0x1e>
 8007774:	080077ec 	.word	0x080077ec
 8007778:	080077ec 	.word	0x080077ec
 800777c:	080077ec 	.word	0x080077ec
 8007780:	080077f0 	.word	0x080077f0

08007784 <memset>:
 8007784:	4402      	add	r2, r0
 8007786:	4603      	mov	r3, r0
 8007788:	4293      	cmp	r3, r2
 800778a:	d100      	bne.n	800778e <memset+0xa>
 800778c:	4770      	bx	lr
 800778e:	f803 1b01 	strb.w	r1, [r3], #1
 8007792:	e7f9      	b.n	8007788 <memset+0x4>

08007794 <_init>:
 8007794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007796:	bf00      	nop
 8007798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800779a:	bc08      	pop	{r3}
 800779c:	469e      	mov	lr, r3
 800779e:	4770      	bx	lr

080077a0 <_fini>:
 80077a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077a2:	bf00      	nop
 80077a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077a6:	bc08      	pop	{r3}
 80077a8:	469e      	mov	lr, r3
 80077aa:	4770      	bx	lr
